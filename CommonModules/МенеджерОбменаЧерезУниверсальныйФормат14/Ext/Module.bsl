// Конвертация УНФ 1.6 от 19.12.2016 11:32:05
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		КомпонентыОбмена.ПараметрыКонвертации.НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады = Новый Массив;
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
			Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
				
				МассивСкладов = КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады;
				Если ТипЗнч(МассивСкладов) = Тип("Массив") Тогда
					Для каждого Склад Из МассивСкладов Цикл
						СкладОбъект = Склад.ПолучитьОбъект();
						СкладОбъект.ДополнительныеСвойства.Вставить("ПроизводственныйСклад", Истина);
						ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СкладОбъект);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьИспНесколькихОрганизаций();
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
	Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
	    ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
	КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АктВыполненныхРабот_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Взаимозачет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДополнительныеРасходы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказНаряд_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОПереработке_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПереработчика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходнаяНакладная_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Производство_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспределениеЗатрат_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходнаяНакладная_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходыПриИмпорте_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РС_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажахЗакрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажахОткрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПДС_ПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПокупкаВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_ПДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМВозврат_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_АктВыполненныхРабот_Отправка
Процедура ДобавитьПОД_Документ_АктВыполненныхРабот_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АктВыполненныхРабот_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АктВыполненныхРабот;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктВыполненныхРабот_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_Взаимозачет_Отправка
Процедура ДобавитьПОД_Документ_Взаимозачет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_Взаимозачет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Взаимозачет;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Взаимозачет_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ДополнительныеРасходы_Отправка
Процедура ДобавитьПОД_Документ_ДополнительныеРасходы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ДополнительныеРасходы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ДополнительныеРасходы;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДополнительныеРасходы_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНаряд_Отправка
Процедура ДобавитьПОД_Документ_ЗаказНаряд_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказНаряд_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядРасходнаяНакладная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядТребованиеНакладная_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказНарядРасходнаяНакладная_Отправка = ДанныеИБ.Работы.Количество() > 0 ИЛИ ДанныеИБ.Запасы.Количество() > 0;
	ИспользованиеПКО.Документ_ЗаказНарядТребованиеНакладная_Отправка = ДанныеИБ.Материалы.Количество() > 0
		ИЛИ ДанныеИБ.МатериалыЗаказчика.Количество() > 0;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияЗапасов_Отправка
Процедура ДобавитьПОД_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ИнвентаризацияЗапасов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияЗапасов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступления;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаРеализации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_НачисленияПоКредитамИЗаймам_Отправка
Процедура ДобавитьПОД_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_НачисленияПоКредитамИЗаймам_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.НачисленияПоКредитамИЗаймам;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачисленияПоКредитамИЗаймам_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОперацияПоПлатежнымКартам;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеЗапасов;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионера_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетКомитенту_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитенту;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОПереработке_Отправка
Процедура ДобавитьПОД_Документ_ОтчетОПереработке_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОПереработке_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОПереработке;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОПереработке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОПереработкеТребованиеНакл_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОПереработкеПередачаДавальц_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтчетОПереработкеПередачаДавальц_Отправка = ДанныеИБ.Продукция.Количество() > 0;
	ИспользованиеПКО.Документ_ОтчетОПереработкеТребованиеНакл_Отправка = ДанныеИБ.Запасы.Количество() > 0;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПереработчика_Отправка
Процедура ДобавитьПОД_Документ_ОтчетПереработчика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетПереработчика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетПереработчика;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПереработчика_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДС_Отправка
Процедура ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
	
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
		
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
	
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
	
		ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Отправка = Истина;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПДС_Отправка
Процедура ДобавитьПОД_Документ_ПДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеДС;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДС_ПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДС_НаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДС_ПереводНаДругойСчет_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПДС_ПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПДС_НаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПДС_ПереводНаДругойСчет_Отправка = Ложь;
	
	Если ДанныеИБ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
		И ДанныеИБ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		 
		ИспользованиеПКО.Документ_ПДС_ПолучениеНаличныхВБанке_Отправка = Истина;
		 
	ИначеЕсли ДанныеИБ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные
		И ДанныеИБ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		 
		ИспользованиеПКО.Документ_ПДС_НаБанковскийСчет_Отправка = Истина;
		 	 
	ИначеЕсли ДанныеИБ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
		И ДанныеИБ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		 
		ИспользованиеПКО.Документ_ПДС_ПереводНаДругойСчет_Отправка = Истина;
		 
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеЗапасов_НаРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение;
	ИспользованиеПКО.Документ_ПеремещениеЗапасов_НаРасходы_Отправка = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы;
	ИспользованиеПКО.Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию;
	ИспользованиеПКО.Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации;
	
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаПолучатель, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПереоценкаВРозницеСуммовойУчет_Отправка
Процедура ДобавитьПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПереоценкаВРозницеСуммовойУчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПереоценкаВРозницеСуммовойУчет;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаВРозницеСуммовойУчет_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеПоТоварам = ДанныеДокументаПереоценкаВРозницеСуммовойУчет(ДанныеИБ);
	
	ИспользованиеПКО.Документ_ПереоценкаВРозницеСуммовойУчет_Отправка = ДанныеПоТоварам.Товары.Количество() > 0;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКО_Отправка
Процедура ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПКО_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
		
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
	
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда 
		
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Отправка
Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходнаяНакладная_Отправка
Процедура ДобавитьПОД_Документ_ПриходнаяНакладная_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПриходнаяНакладная_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриходнаяНакладная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеСырьяОтДавальца_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяОтПереработчика_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПриходнаяНакладная_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратСырьяОтПереработчика_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПоступлениеСырьяОтДавальца_Отправка = Ложь;
	
	ЭтоПокупка = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию;
	
	ЭтоВозвратОтПокупателя = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера;
		
	ЭтоВозвратОтПереработчика = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика;
	ЭтоПриемВПереработку = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку;
	
	ИспользованиеПКО.Документ_ПриходнаяНакладная_Отправка = ЭтоПокупка;
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = ЭтоВозвратОтПокупателя;
	ИспользованиеПКО.Документ_ВозвратСырьяОтПереработчика_Отправка = ЭтоВозвратОтПереработчика;
	ИспользованиеПКО.Документ_ПоступлениеСырьяОтДавальца_Отправка = ЭтоПриемВПереработку;
КонецПроцедуры
#КонецОбласти
#Область Документ_Производство_Отправка
Процедура ДобавитьПОД_Документ_Производство_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_Производство_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СборкаЗапасов;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_Производство_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Производство_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПроизводствоВПеремещениеПродук_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПроизводствоВПеремещениеОтходов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_Производство_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_Производство_Отправка = Истина;
	ИспользованиеПКО.Документ_ПроизводствоВПеремещениеПродук_Отправка = ДанныеИБ.СтруктурнаяЕдиницаПродукции <> ДанныеИБ.СтруктурнаяЕдиницаЗапасов
		И ДанныеИБ.Продукция.Количество() > 0;
	ИспользованиеПКО.Документ_ПроизводствоВПеремещениеОтходов_Отправка = ДанныеИБ.СтруктурнаяЕдиницаОтходов <> ДанныеИБ.СтруктурнаяЕдиницаЗапасов
		И ДанныеИБ.Отходы.Количество() > 0;
	
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаПродукции, КомпонентыОбмена);
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаЗапасов, КомпонентыОбмена);
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаОтходов, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РаспределениеЗатрат_Отправка
Процедура ДобавитьПОД_Документ_РаспределениеЗатрат_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РаспределениеЗатрат_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РаспределениеЗатрат;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РаспределениеЗатрат_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходнаяНакладная_Отправка
Процедура ДобавитьПОД_Документ_РасходнаяНакладная_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РасходнаяНакладная_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходнаяНакладная;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходнаяНакладная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяДавальцу_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаПереработчику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РасходнаяНакладная_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратСырьяДавальцу_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПередачаПереработчику_Отправка = Ложь;
	
	ЭтоПродажа = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию;
	
	ЭтоВозвратПоставщику = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту;
		
	ЭтоВозвратИзПереработки = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки;
	ЭтоПередачаВПереработку = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку;
	
	ИспользованиеПКО.Документ_РасходнаяНакладная_Отправка = ЭтоПродажа;
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = ЭтоВозвратПоставщику;
	ИспользованиеПКО.Документ_ВозвратСырьяДавальцу_Отправка = ЭтоВозвратИзПереработки;
	ИспользованиеПКО.Документ_ПередачаПереработчику_Отправка = ЭтоПередачаВПереработку;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходыПриИмпорте_Отправка
Процедура ДобавитьПОД_Документ_РасходыПриИмпорте_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РасходыПриИмпорте_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходыПриИмпорте;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходыПриИмпорте_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКО_Отправка
Процедура ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходИзКассы;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РКО_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
		
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
	
		ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
	
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДС_Отправка
Процедура ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходСоСчета;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
	
		ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
	
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
	
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
	
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеЗапасов;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровПоИнвентаризации_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_ИзЭксплуатации");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Ложь;
	ИспользованиеПКО.Документ_СписаниеТоваровПоИнвентаризации_Отправка = Ложь;
	ИспользованиеПКО.Документ_СписаниеЗапасов_ИзЭксплуатации = Ложь;
	
	Если ДанныеИБ.СписатьЗапасыИзЭксплуатации
		И ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		ИспользованиеПКО.Документ_СписаниеЗапасов_ИзЭксплуатации = Истина;
		
	ИначеЕсли ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
	
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
			ИспользованиеПКО.Документ_СписаниеТоваровПоИнвентаризации_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПокупателю_Отправка
Процедура ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетНаОплатуПокупателю_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплату;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПокупателю_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПоставщика_Отправка
Процедура ДобавитьПОД_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетНаОплатуПоставщика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПоставщика_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактура;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры
#КонецОбласти
#Область РС_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_РС_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "РС_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ДокументыФизическихЛиц_ИзСтруктуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ<>Неопределено И ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ОбъектСуществуетВБазе(ДанныеИБ.Владелец) Тогда
		ИспользованиеПКО.Справочник_БанковскиеСчета_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыДокументовФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидДоговора)
		ИЛИ Не (ЗначениеЗаполнено(ДанныеИБ.Организация) И ОбъектСуществуетВБазе(ДанныеИБ.Организация)) Тогда
		
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа    = ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа
		И Не ЗначениеЗаполнено(ДанныеИБ.ВидКонтрагента) Тогда
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлко_Отправка
Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЛицензииПоставщиковАлко_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЛицензииПоставщиковАлко_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа
		И ЗначениеЗаполнено(ДанныеИБ.Родитель)
		И Не ОбъектСуществуетВБазе(ДанныеИБ.Родитель) Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Отправка
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатурныеГруппы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Группа");
КонецПроцедуры

Процедура ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Организации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Организации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЮридическоеФизическоеЛицо) Тогда
		ИспользованиеПКО.Справочник_Организации_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Спецификации;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.Состав.Количество() = 0 Тогда
		ИспользованиеПКО.Справочник_СпецификацииНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДДС = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиДДСГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтруктурныеЕдиницы_Отправка
Процедура ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтруктурныеЕдиницы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПодразделениеВПроизводственныйСклад_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.ПодразделениеВПроизводственныйСклад_Отправка = Ложь;
		ИспользованиеПКО.Справочник_Подразделения_Отправка = Ложь;
		ИспользованиеПКО.Справочник_Склады_Отправка = Ложь;
	
		Если ДанныеИБ.ДополнительныеСвойства.Свойство("ПроизводственныйСклад")
			И ДанныеИБ.ДополнительныеСвойства.ПроизводственныйСклад = Истина Тогда
			ИспользованиеПКО.ПодразделениеВПроизводственныйСклад_Отправка = Истина;
		Иначе
		
			ЭтоСклад = ДанныеИБ.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
			ИспользованиеПКО.Справочник_Склады_Отправка = ЭтоСклад И НЕ (ДанныеИБ.ЭтоГруппа);
			ИспользованиеПКО.Справочник_Подразделения_Отправка = НЕ ЭтоСклад ИЛИ ДанныеИБ.ЭтоГруппа;
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыЦен;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ОтчетОРозничныхПродажахЗакрытие_Получение
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажахЗакрытие_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажахЗакрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЗакрытиеКассовойСмены";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗакрытиеКассовойСхемы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажахОткрытие_Получение
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажахОткрытие_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажахОткрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОткрытиеКассовойСмены";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОткрытиеКассовойСмены_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСПоПлатежнымКартам_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСПоПлатежнымКартам_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Получение = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПДС_ПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_ПДС_ПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПДС_ПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДС_ПереводНаДругойСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПокупкаВалюты_Получение
Процедура ДобавитьПОД_Документ_ПКОПокупкаВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПокупкаВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение
Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Получение
Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручение_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПлатежноеПоручение";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_ПДС_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_ПДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОНаБанковскийСчет_ПДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_ПДС_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Инкассация_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЭтоИнкассация = Ложь;
		Если ДанныеXDTO.Свойство("ВидОперации")
			И ДанныеXDTO.ВидОперации.Свойство("Значение") Тогда
			ЭтоИнкассация = Найти(ДанныеXDTO.ВидОперации.Значение, "Инкассация");
		КонецЕсли;
		
		Если ЭтоИнкассация Тогда
			ИспользованиеПКО.Документ_РКОНаБанковскийСчет_ПДС_Получение = Ложь;
			ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Инкассация_Получение = Истина;
		Иначе
			ИспользованиеПКО.Документ_РКОНаБанковскийСчет_ПДС_Получение = Истина;
			ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Инкассация_Получение = Ложь;
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОПрочаяВыдача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ЦеныНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекККМ_Получение
Процедура ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЧекККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЧекККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОЧекККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекККМВозврат_Получение
Процедура ДобавитьПОД_Документ_ЧекККМВозврат_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЧекККМВозврат_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЧекККМВозврат";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМВозврат_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыДокументовФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГруппаНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ГруппаНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Получение
Процедура ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Получение
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Получение
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатурныеГруппы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СпецификацииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДСГруппа_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДСГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДДСГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АктВыполненныхРабот_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Взаимозачет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДополнительныеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОПереработке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОПереработкеПередачаДавальц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОПереработкеТребованиеНакл_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПереработчика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДС_НаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДС_ПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаПереработчику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриходнаяНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Производство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПроизводствоВПеремещениеОтходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПроизводствоВПеремещениеПродук_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РаспределениеЗатрат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходнаяНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходыПриИмпорте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_ИзЭксплуатации(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПодразделениеВПроизводственныйСклад_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_ДокументыФизическихЛиц_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурныеГруппы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛицаИзСтруктуры_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ЗакрытиеКассовойСхемы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОткрытиеКассовойСмены_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДС_ПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОЧекККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации);
		ДобавитьПКО_РС_ЦеныНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурныеГруппы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатурныеГруппы_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыданныеАвансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыданныеАвансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаКонтрагентам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаКонтрагентам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПрочиеРасходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПрочиеРасходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Сотрудник);
	ДанныеXDTO.Вставить("ПодотчетноеЛицо", СтруктураИнструкцияПКО);
	
	Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	Если ДанныеИБ.Запасы.Количество() > 0 Тогда
		Склад = ДанныеИБ.Запасы[0].СтруктурнаяЕдиница;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаАвансовыйОтчет(ДанныеИБ);
	
	ТаблицаАвансы = Новый ТаблицаЗначений;
	ТаблицаАвансы.Колонки.Добавить("Документ");
	ТаблицаАвансы.Колонки.Добавить("Сумма");
	
	ВыданныеАвансы = РасширенныеДанныеИБ.ВыданныеАвансы;
	Для Каждого Строка ИЗ ВыданныеАвансы Цикл
		ИмяПКО = "";
		ТипДокумента = ТипЗнч(Строка.ДокументАванса);
		Если ТипДокумента = Тип("ДокументСсылка.РасходИзКассы") Тогда
			ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходСоСчета") Тогда
	          ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	       Иначе
	        Продолжить;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаАвансы.Добавить();
		СтрокаТаблицы.Документ = Новый Структура("Значение, ИмяПКО", Строка.ДокументАванса, ИмяПКО);
		СтрокаТаблицы.Сумма = Строка.Сумма;
	КонецЦикла;
	ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	
	Если ТаблицаАвансы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	КонецЕсли;
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ПрочиеРасходы = РасширенныеДанныеИБ.ПрочиеРасходы;
	Если ПрочиеРасходы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПрочиеРасходы", ПрочиеРасходы);
	КонецЕсли;
	
	ОплатаПоставщикам = РасширенныеДанныеИБ.ОплатаПоставщикам;
	Если ОплатаПоставщикам.Количество() > 0 Тогда
		
		ОплатаПоставщикам.Колонки.Добавить("Договор");
		ОплатаПоставщикам.Колонки.Добавить("ДокументРасчетов");
		ОплатаПоставщикам.Колонки.Добавить("СпособПогашенияЗадолженности");
		
		Для каждого СтрокаОплаты Из ОплатаПоставщикам Цикл
		    СтрокаОплаты.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаОплаты.ДоговорКонтрагента, СтрокаОплаты.Контрагент);
		
			Если ЗначениеЗаполнено(СтрокаОплаты.Документ) Тогда
				ИмяПКО = ИмяПКОДляДокумента(СтрокаОплаты.Документ);
				Если ИмяПКО <> "" Тогда
					СтрокаОплаты.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаОплаты.Документ, ИмяПКО);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаОплаты.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаОплаты);
			
		КонецЦикла;
		ДанныеXDTO.Вставить("ОплатаКонтрагентам", ОплатаПоставщикам);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_АктВыполненныхРабот_Отправка
Процедура ДобавитьПКО_Документ_АктВыполненныхРабот_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АктВыполненныхРабот_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АктВыполненныхРабот;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "АР" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаАктВыполненныхРабот(ДанныеИБ);
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Взаимозачет_Отправка
Процедура ДобавитьПКО_Документ_Взаимозачет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_Взаимозачет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.Взаимозачет;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийВзаимозачет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КонтрагентДебитор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КонтрагентКредитор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДебиторскойЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаКредиторскойЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДебиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДебиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КредиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КредиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("КонтрагентДебитор");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику Тогда
		ДанныеXDTO.КонтрагентДебитор = ДанныеИБ.Контрагент;
	Иначе
		ДанныеXDTO.КонтрагентДебитор = ДанныеИБ.КонтрагентИсточник;
	КонецЕсли;
	
	Если Не (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику) Тогда
		
		ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.Контрагент);
	Иначе
		ДанныеXDTO.Вставить("КонтрагентКредитор", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаВзаимозачет(ДанныеИБ);
	
	ДанныеXDTO.Вставить("Валюта", РасширенныеДанныеИБ.Валюта);
	
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", РасширенныеДанныеИБ.ДебиторскаяЗадолженность);
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", РасширенныеДанныеИБ.КредиторскаяЗадолженность);
	
	ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", РасширенныеДанныеИБ.СуммаДебиторскойЗадолженности);
	ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", РасширенныеДанныеИБ.СуммаКредиторскойЗадолженности);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяДавальцу_Отправка
Процедура ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратСырьяДавальцу_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратСырьяДавальцу";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		Товары.Колонки.Добавить("СчетУчета");
		Товары.Колонки.Добавить("ДокументПоступления");
		Товары.ЗаполнитьЗначения("003.01", "СчетУчета");
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
			И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			СтруктураДокументПоступления = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_ПоступлениеСырьяОтДавальца_Отправка");
			Товары.ЗаполнитьЗначения(СтруктураДокументПоступления, "ДокументПоступления");
		КонецЕсли;
		
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяОтПереработчика_Отправка
Процедура ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратСырьяОтПереработчика_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_РасходнаяНакладная_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПокупателемВыставляетсяСчетФактураНаВозврат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
		ДанныеXDTO.ВидОперации = "ВозвратОтКомиссионера";
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		ДанныеXDTO.Вставить("ДокументРеализации", ДанныеИБ.ДокументОснование);
	Иначе
		ДанныеXDTO.Вставить("ДокументРеализации", Неопределено);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
	
	Результат = Запрос.Выполнить();
	ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Не Результат.Пустой());
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПриходнаяНакладная_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
		ДанныеXDTO.ВидОперации = "ВозвратКомитенту";
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ДанныеXDTO.Вставить("ДокументПоступления", ДанныеИБ.ДокументОснование);
	Иначе
		ДанныеXDTO.Вставить("ДокументПоступления", Неопределено);
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ДополнительныеРасходы_Отправка
Процедура ДобавитьПКО_Документ_ДополнительныеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ДополнительныеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ДополнительныеРасходы;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаДопРасходов", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаДопРасходов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтоимостьТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДопРасходы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);                
	
	РасширенныеДанныеИБ = ДанныеДокументаДополнительныеРасходы(ДанныеИБ);
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = РасширенныеДанныеИБ.Услуги;
	РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	//Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = Ложь;
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
			//Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
			Если ТипСоставногоСвойства = Неопределено Тогда
				ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПриходнаяНакладная_Отправка");
				ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			КонецЕсли;
			СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
		Иначе
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПриходнаяНакладная_Отправка");
		КонецЕсли;
	КонецЦикла;
		
	Если НетБазыДляРаспределения Тогда
		Возврат;
	КонецЕсли;
		
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
		
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНарядРасходнаяНакладная_Отправка
Процедура ДобавитьПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказНарядРасходнаяНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаПродажи";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаРезерв";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Финиш";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ЗР" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказНаряд(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.Запасы.Итог("Всего"));
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНарядТребованиеНакладная_Отправка
Процедура ДобавитьПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказНарядТребованиеНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаПродажи";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаРезерв";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказчик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ЗТ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказНаряд(ДанныеИБ);
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	Если Материалы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Материалы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияЗапасов_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнвентаризацияЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаИнвентаризацияЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийКорректировки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправления";
	НоваяСтрока.СвойствоФормата = "ДатаИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтражатьВУчете";
	НоваяСтрока.СвойствоФормата = "ОтражатьВУчете";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВосстановитьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйДокументПоступления";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТДДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхожденияДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		ИЛИ ТипЗнч(ДанныеИБ.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ДанныеXDTO.Вставить("ВосстановитьНДС", Истина);
	Иначе
		ДанныеXDTO.Вставить("ВосстановитьНДС", Ложь);
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ДокументОснование);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ИсправляемыйДокументПоступления) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ИсправляемыйДокументПоступления);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ИсправляемыйДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ИсправляемыйДокументПоступления, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаКорректировкаПоступления(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийКорректировки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтражатьВУчете";
	НоваяСтрока.СвойствоФормата = "ОтражатьВУчете";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйДокументРеализации";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТДДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхожденияДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ДокументОснование);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ИсправляемыйДокументРеализации) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ИсправляемыйДокументРеализации);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ИсправляемыйДокументРеализации, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаКорректировкаРеализации(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_НачисленияПоКредитамИЗаймам_Отправка
Процедура ДобавитьПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_НачисленияПоКредитамИЗаймам_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.НачисленияПоКредитамИЗаймам;
	ПравилоКонвертации.ОбъектФормата = "Документ.НачислениеКредитовДепозитов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачала";
	НоваяСтрока.СвойствоФормата = "ДатаНачала";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончания";
	НоваяСтрока.СвойствоФормата = "ДатаОкончания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Начисления", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Начисления;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрочностьКредитаЗайма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипСуммыГрафика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ЗаймыВыданныеСотрудникам");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийНачисленияПоКредитамИЗаймам.НачисленияПоЗаймамСотрудникам Тогда
		ДанныеXDTO.ВидОперации = "ЗаймыВыданныеСотрудникам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийНачисленияПоКредитамИЗаймам.НачисленияПоКредитам Тогда
		ДанныеXDTO.ВидОперации = "КредитыПолученные";
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаНачисленияПоКредитамИЗаймам(ДанныеИБ);
	
	Начисления = РасширенныеДанныеИБ.Начисления;
	Если Начисления.Количество() > 0 Тогда
	
		Начисления.Колонки.Добавить("Контрагент");	
		Начисления.Колонки.Добавить("Договор");
		Начисления.Колонки.Добавить("СрочностьКредитаЗайма");
		
		Для каждого СтрокаТаблицы Из Начисления Цикл
			Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийНачисленияПоКредитамИЗаймам.НачисленияПоЗаймамСотрудникам Тогда
		    	СтруктураИнструкцияФизЛицо = ФизЛицоПоСотруднику(СтрокаТаблицы.Сотрудник);
		    	СтрокаТаблицы.Контрагент = СтруктураИнструкцияФизЛицо;
		    Иначе
		    	СтрокаТаблицы.Контрагент = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Кредитор, "Справочник_Контрагенты_Отправка");
		        СтрокаТаблицы.Договор = СтруктураДоговораКредитаИЗайма(ДанныеИБ, СтрокаТаблицы.ДоговорКредитаЗайма);
		    КонецЕсли;
		    
		    Если СтрокаТаблицы.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
		        СтрокаТаблицы.СрочностьКредитаЗайма = "Долгосрочный";
		    Иначе
		        СтрокаТаблицы.СрочностьКредитаЗайма = "Краткосрочный";
		    КонецЕсли;
		    
			    Если СтрокаТаблицы.ВалютаВзаиморасчетов <> КомпонентыОбмена.ПараметрыКонвертации.НациональнаяВалюта Тогда
					ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДанныеИБ.Дата, Новый Структура("Валюта", СтрокаТаблицы.ВалютаВзаиморасчетов));
					ВалютаРасчетовКурс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
					ВалютаРасчетовКратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
					
					СтрокаТаблицы.СуммаВзаиморасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаТаблицы.Сумма,
						ВалютаРасчетовКурс,
						1,
						ВалютаРасчетовКратность,
						1
					);
				КонецЕсли;
		
		КонецЦикла;
		
		ДанныеXDTO.Вставить("Начисления", Начисления);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте_Отправка
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОперацияПоПлатежнымКартам;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийЭквайринга";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежнойКарты";
	НоваяСтрока.СвойствоФормата = "НомерКарты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = ?(ЗначениеЗаполнено(ДанныеИБ.ВалютаДенежныхСредств), ДанныеИБ.ВалютаДенежныхСредств, Константы.НациональнаяВалюта.Получить());
	ДанныеXDTO.Вставить("Валюта", ВалютаДокумента);
	
	// Эквайрер.
	ДанныеXDTO.Вставить("Эквайрер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Эквайрер"));
	
	АлгоритмКонвертации = "ОплатаОтПокупателя";
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Инвентаризация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		ДанныеXDTO.Вставить("Инвентаризация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_ИнвентаризацияЗапасов_Отправка"));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаОприходованиеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьКомиссионноеВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Покупатели", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Покупатели;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВыставленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетКомиссионера(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Покупатели = РасширенныеДанныеИБ.Покупатели;
	Если Покупатели.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Покупатели", Покупатели);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВознаграждения", ДанныеИБ.Запасы.Итог("СуммаВознаграждения"));
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", СтавкаНДССтрокой_Отправка(ДанныеИБ.СтавкаНДСВознаграждения));
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетКомитенту;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьКомиссионноеВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетКомитента(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВознаграждения", ДанныеИБ.Запасы.Итог("СуммаВознаграждения"));
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", СтавкаНДССтрокой_Отправка(ДанныеИБ.СтавкаНДСВознаграждения));
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОПереработке_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОПереработке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОПереработке_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОПереработке;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетДавальцу";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("МатериалыЗаказчика", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.МатериалыЗаказчика;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетОПереработке(ДанныеИБ);
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	МатериалыЗаказчика = РасширенныеДанныеИБ.МатериалыЗаказчика;
	Если МатериалыЗаказчика.Количество() > 0 Тогда
		МатериалыЗаказчика.Колонки.Добавить("СчетУчета");
		МатериалыЗаказчика.ЗаполнитьЗначения("003.02", "СчетУчета");
		ДанныеXDTO.Вставить("МатериалыЗаказчика", МатериалыЗаказчика);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
	
	Если ДанныеИБ.СуммаДокумента = 0 Тогда // обход ограничения формата
		ДанныеXDTO.Вставить("Сумма", -1);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОПереработкеПередачаДавальц_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОПереработкеПередачаДавальц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОПереработкеПередачаДавальц_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОПереработке;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаДавальцу";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОПереработкеПередачаДавальц_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОПереработкеПередачаДавальц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетОПереработке(ДанныеИБ);
	
	Продукция = РасширенныеДанныеИБ.Услуги;
	Если Продукция.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Продукция);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОПереработкеТребованиеНакл_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОПереработкеТребованиеНакл_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОПереработкеТребованиеНакл_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОПереработке;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОПереработкеТребованиеНакл_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказчик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОПереработкеТребованиеНакл_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ДС" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетОПереработке(ДанныеИБ);
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	Если Материалы.Количество() > 0 Тогда
		Материалы.Колонки.Добавить("СчетУчета");
		Материалы.ЗаполнитьЗначения("003.02", "СчетУчета");
		ДанныеXDTO.Вставить("Товары", Материалы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПлатежнымиКартами", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПлатежнымиКартами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеОтчетОРозничныхПродажах(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ОплатаПлатежнымиКартами = РасширенныеДанныеИБ.ОплатаПлатежнымиКартами;
	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПереработчика_Отправка
Процедура ДобавитьПКО_Документ_ОтчетПереработчика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетПереработчика_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетПереработчика;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетПереработчика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Материалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Материалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Продукция", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Продукция;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	               
	РасширенныеДанныеИБ = ДанныеДокументаОтчетПереработчика(ДанныеИБ);
	
	Если ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", Справочники.СтруктурныеЕдиницы.ОсновнойСклад, "Справочник_Склады_Отправка"));
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, "Справочник_Подразделения_Отправка"));
	Иначе
		ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, "Справочник_Склады_Отправка"));
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", Новый Структура("Значение, ИмяПКО", Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение, "Справочник_Подразделения_Отправка"));
	КонецЕсли;
			
	ДанныеXDTO.Вставить("ГруппаАналитическогоУчетаНоменклатуры", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Номенклатура.КатегорияНоменклатуры, "Справочник_НоменклатурныеГруппы_Отправка"));
	
	Продукция = РасширенныеДанныеИБ.Продукция;
	Если Продукция.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Продукция", Продукция);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	Если Материалы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Материалы", Материалы);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
	
	Если ДанныеИБ.Сумма = 0 Тогда // обход ограничения формата
		ДанныеXDTO.Вставить("Сумма", -1);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
		
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
	СтрокаРП.ВалютаКонвертации = ДанныеИБ.ВалютаДенежныхСредств;
	СтрокаРП.КурсКонвертации = ДанныеИБ.Курс;
	СтрокаРП.КратностьКонвертации = ДанныеИБ.Кратность;
	
	//Сумма
	// КурсЦБНаДатуКонвертации
	//СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаДенежныхСредств, ДанныеИБ.Дата);
		
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта", ДанныеИБ.Курс, ДанныеИБ.Кратность, ДанныеИБ.ВалютаДенежныхСредств);
		
	СтрокаРП.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	
	СтрокаРП.СуммаВал = ДанныеИБ.СуммаДокумента;
	
	//Договор
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, ДанныеИБ.РасшифровкаПлатежа[0].Договор);
		СтрокаРП.Договор = СтруктураДоговора;
	КонецЕсли;
		    
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаКомиссииДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНаСчет.ЭквайринговыйТерминал.Договор КАК Договор,
	|	ПоступлениеНаСчет.Статья КАК Статья,
	|	ПоступлениеНаСчет.СуммаДокумента КАК СуммаПлатежа,
	|	ПоступлениеНаСчет.СуммаКомиссииДокумента КАК СуммаУслуг,
	|	ПоступлениеНаСчет.СуммаДокумента * ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ВалютаДенежныхСредств <> &РегВалюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|						ТОГДА КурсыВалютыДокумента.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыДокумента.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ПоступлениеНаСчет.Курс КАК КурсВзаиморасчетов,
	|	ПоступлениеНаСчет.Кратность КАК КратностьВзаиморасчетов,
	|	""57.03"" КАК СчетУчетаРасчетовСКонтрагентом
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыДокумента
	|		ПО ПоступлениеНаСчет.ВалютаДенежныхСредств = КурсыВалютыДокумента.Валюта
	|ГДЕ
	|	ПоступлениеНаСчет.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		// Однострочная расшифровка платежа
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, Выборка.Договор);
		СтрокаРП.СтатьяДДС = Выборка.Статья;
		СтрокаРП.Сумма = Выборка.СуммаПлатежа;
		СтрокаРП.КурсВзаиморасчетов = Выборка.КурсВзаиморасчетов;
		СтрокаРП.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
		СтрокаРП.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодСчета) Тогда
		КодСчета = "91.01";
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетДоходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетДоходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	АлгоритмКонвертации = АлгоритмВыгрузкиПБДСОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
			
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
		
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПДС_НаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_ПДС_НаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПДС_НаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПолучатель";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВзносНаличными");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПДС_ПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_ПДС_ПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПДС_ПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПолучатель";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры
#КонецОбласти
#Область Документ_ПДС_ПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПДС_ПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаПереработчику_Отправка
Процедура ДобавитьПКО_Документ_ПередачаПереработчику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПередачаПереработчику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаПереработчику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаПолучатель";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеСпособаОтраженияРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов_ВозвратИзЭкспл(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаПолучатель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеНазначенияИспользования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеСпособаОтраженияРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокЭксплуатации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов_ВЭксплуатацию(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеЗапасов_НаРасходы_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеЗапасов_НаРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаПолучатель";
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиницаПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиница);
		ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, ИмяПКО));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаПолучатель) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаПолучатель);
		ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПереоценкаВРозницеСуммовойУчет_Отправка
Процедура ДобавитьПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПереоценкаВРозницеСуммовойУчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПереоценкаВРозницеСуммовойУчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПереоценкаТоваровВРознице";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПереоценки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРозницеСтарая";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПереоценкаВРозницеСуммовойУчет(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетДоходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетДоходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмКонвертации = АлгоритмВыгрузкиПКООтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
			
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
		
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВыручкаНТТ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КассаККМ, "ТипКассы") = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		ВыручкаНТТ = Ложь;
	Иначе
		ВыручкаНТТ = Истина;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВыручкаНТТ", ВыручкаНТТ);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Отправка
Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "ИдентификаторПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИННПлательщика";
	НоваяСтрока.СвойствоФормата = "ИННПлательщика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИННПолучателя";
	НоваяСтрока.СвойствоФормата = "ИННПолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодБК";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодБК";
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПППлательщика";
	НоваяСтрока.СвойствоФормата = "КПППлательщика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПППолучателя";
	НоваяСтрока.СвойствоФормата = "КПППолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Оплачено";
	НоваяСтрока.СвойствоФормата = "Оплачено";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательДаты";
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательНомера";
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательОснования";
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательПериода";
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательТипа";
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатусСоставителя";
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстПлательщика";
	НоваяСтрока.СвойствоФормата = "ТекстПлательщика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстПолучателя";
	НоваяСтрока.СвойствоФормата = "ТекстПолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПеречислениеВБюджет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПеречислениеВБюджет = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	ДанныеXDTO.Вставить("ПеречислениеВБюджет", ЭтоПеречислениеВБюджет);
	
	СтавкаНДССтрокой = СтавкаНДССтрокой_Отправка(ДанныеИБ.СтавкаНДС);
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДССтрокой);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеСырьяОтДавальца_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеСырьяОтДавальца_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		Товары.Колонки.Добавить("СчетУчета");
		Товары.ЗаполнитьЗначения("003.01", "СчетУчета");
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходнаяНакладная_Отправка
Процедура ДобавитьПКО_Документ_ПриходнаяНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПриходнаяНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаДопРасходов", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаДопРасходов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтоимостьТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДопРасходы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
		ДанныеXDTO.ВидОперации = "ПриемНаКомиссию";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку Тогда
		ДанныеXDTO.ВидОперации = "ПриемВПереработку";
	Иначе
		ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = РасширенныеДанныеИБ.Услуги;
	РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	//Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = Ложь;
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
			//Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
			Если ТипСоставногоСвойства = Неопределено Тогда
				ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПриходнаяНакладная_Отправка");
				ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			КонецЕсли;
			СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
		Иначе
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПриходнаяНакладная_Отправка");
		КонецЕсли;
	КонецЦикла;
		
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
		
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
		
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Производство_Отправка
Процедура ДобавитьПКО_Документ_Производство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_Производство_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СборкаЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Производство_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратныеОтходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратныеОтходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Материалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Материалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Продукция", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Продукция;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпецификацияНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпецификацииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_Производство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВыпускПродукцииНаСклад");
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница)
		И ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", ДанныеИБ.СтруктурнаяЕдиница);
	Иначе
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаПродукции) Тогда
		Склад = ДанныеИБ.СтруктурнаяЕдиницаПродукции;
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиницаЗапасов;
	КонецЕсли;
	Если ЗначениеЗаполнено(Склад) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(Склад);
		ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", Склад, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПроизводство(ДанныеИБ);
	
	Продукция = РасширенныеДанныеИБ.Продукция;
	Если Продукция.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Продукция", Продукция);
	КонецЕсли;
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	Если Материалы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Материалы", Материалы);
	КонецЕсли;
	
	ВозвратныеОтходы = РасширенныеДанныеИБ.ВозвратныеОтходы;
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВозвратныеОтходы", ВозвратныеОтходы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПроизводствоВПеремещениеОтходов_Отправка
Процедура ДобавитьПКО_Документ_ПроизводствоВПеремещениеОтходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПроизводствоВПеремещениеОтходов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СборкаЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПроизводствоВПеремещениеОтходов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПроизводствоВПеремещениеОтходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ДанныеИБ.Дата);
	
	ДопПрефикс = "ПО";
	НомерДок = Лев(ДанныеИБ.Номер, 5) + ДопПрефикс + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	ДанныеXDTO.КлючевыеСвойства.Ссылка = Неопределено;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаЗапасов) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаЗапасов);
		ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаПродукции, ИмяПКО));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаОтходов) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаОтходов);
		ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаОтходов, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПроизводствоВПеремещениеОтходов(ДанныеИБ);
	
	Отходы = РасширенныеДанныеИБ.Отходы;
	Если Отходы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Отходы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПроизводствоВПеремещениеПродук_Отправка
Процедура ДобавитьПКО_Документ_ПроизводствоВПеремещениеПродук_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПроизводствоВПеремещениеПродук_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СборкаЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПроизводствоВПеремещениеПродук_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПроизводствоВПеремещениеПродук_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДопПрефикс = "ПП";
	НомерДок = Лев(ДанныеИБ.Номер, 5) + ДопПрефикс + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаЗапасов) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаЗапасов);
		ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаЗапасов, ИмяПКО));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаПродукции) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаПродукции);
		ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаПродукции, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПроизводствоВПеремещениеПродукции(ДанныеИБ);
	
	Продукция = РасширенныеДанныеИБ.Продукция;
	Если Продукция.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Продукция);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_ПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПрочиеРасходы;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КонтрагентДебитор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КонтрагентКредитор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДебиторскойЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаКредиторскойЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДебиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДебиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КредиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КредиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДопПрефикс = "ПР";
	НомерДок = Лев(ДанныеИБ.Номер, 5) + ДопПрефикс + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РаспределениеЗатрат_Отправка
Процедура ДобавитьПКО_Документ_РаспределениеЗатрат_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РаспределениеЗатрат_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РаспределениеЗатрат;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "РМ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиница);
		ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаРаспределениеЗатрат(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходнаяНакладная_Отправка
Процедура ДобавитьПКО_Документ_РасходнаяНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РасходнаяНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЭлектронногоДокумента";
	НоваяСтрока.СвойствоФормата = "ВидЭД";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыЭД_Реализация_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоверенностьКомуВыдана";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		ДанныеXDTO.ВидОперации = "ПередачаНаКомиссию";
	Иначе
		ДанныеXDTO.ВидОперации = "РеализацияКлиенту";
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ГлавныйБухгалтер.Физлицо);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.Руководитель.Физлицо);
	ДанныеXDTO.Вставить("ДоверенностьКомуВыдана", ДанныеИБ.ДоверенностьЛицо.Наименование);
	
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходыПриИмпорте_Отправка
Процедура ДобавитьПКО_Документ_РасходыПриИмпорте_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РасходыПриИмпорте_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходыПриИмпорте;
	ПравилоКонвертации.ОбъектФормата = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйСбор";
	НоваяСтрока.СвойствоФормата = "ТаможенныйСбор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйШтраф";
	НоваяСтрока.СвойствоФормата = "ТаможенныйШтраф";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДекларации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Разделы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Разделы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПриходнаяНакладная_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НомерДекларации", ДанныеИБ.НомерГТД.Код);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсДокумента,
	|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьДокумента
	|ИЗ
	|	Документ.РасходыПриИмпорте КАК ТаможеннаяДекларация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалютыДокумента
	|		ПО ТаможеннаяДекларация.ВалютаДокумента = КурсВалютыДокумента.Валюта";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("КурсДокумента", Выборка.КурсДокумента);
	ДанныеXDTO.Вставить("КратностьДокумента", Выборка.КратностьДокумента);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	РасширенныеДанныеИБ = ДанныеДокументаРасходыПриИмпорте(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Разделы = РасширенныеДанныеИБ.Разделы;
	Если Разделы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Разделы", Разделы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.Сотрудник = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
		НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		
		НомерВедомости = Лев(ДанныеИБ.Номер, 5) + "ЗС" + Сред(ДанныеИБ.Номер, 8);
		НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = НомерВедомости;
		НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеИБ.Дата;
		
	
	Иначе // выплата по ведомостям
		
		Для Каждого Строка Из ДанныеИБ.ВыплатаЗаработнойПлаты Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Ведомость) Тогда
				Продолжить;
			КонецЕсли;
				
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер, Сотрудники");
			ТаблицаЗарплатаВедомости = ДанныеВедомостиНаВыплатуЗП.Сотрудники.Выгрузить();
			
			Для Каждого СтрокаВедомости Из ТаблицаЗарплатаВедомости Цикл
				НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
				НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
				НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
				НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
				НоваяСтрокаРП.Сотрудник = ФизЛицоПоСотруднику(СтрокаВедомости.Сотрудник);
				НоваяСтрокаРП.Сумма     = СтрокаВедомости.СуммаПлатежа;
		    КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
		КодСчета = "50.02";
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетРасходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетРасходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмКонвертации = АлгоритмВыгрузкиРКООтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомСписание(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗаработнойПлаты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Для Каждого Строка Из ДанныеИБ.ВыплатаЗаработнойПлаты Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ведомость) Тогда
			Продолжить;
		КонецЕсли;
		
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер, Сотрудники");
		ТаблицаЗарплатаВедомости = ДанныеВедомостиНаВыплатуЗП.Сотрудники.Выгрузить();
		
		Для Каждого СтрокаВедомости Из ТаблицаЗарплатаВедомости Цикл
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
			НоваяСтрокаРП.Сотрудник = ФизЛицоПоСотруднику(СтрокаВедомости.Сотрудник);
			НоваяСтрокаРП.Сумма     = СтрокаВедомости.СуммаПлатежа;
		КонецЦикла;
	КонецЦикла;
	
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	
	Если Не (ДанныеXDTO.Свойство("ПоказательКБК") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательКБК))
		И ЗначениеЗаполнено(ДанныеИБ.ВидНалога) Тогда
		КодБК = ДанныеИБ.ВидНалога.КодБК;
		Если ЗначениеЗаполнено(КодБК) Тогда
			Если СтрДлина(КодБК) < 20 Тогда
				КодБК = Прав("00000000000000000000" + КодБК, 20);
			КонецЕсли;
			ДанныеXDTO.Вставить("ПоказательКБК", КодБК);
		КонецЕсли;
	КонецЕсли;
	
	Если Не (ДанныеXDTO.Свойство("ПоказательПериода") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательПериода)) Тогда
		НалоговыйПериод = ДобавитьМесяц(ДанныеИБ.Дата, -1);
		ПоказательПериода = "МС." + Формат(НалоговыйПериод, "ДФ=MM") + "." + Формат(НалоговыйПериод, "ДФ=yyyy");
		ДанныеXDTO.Вставить("ПоказательПериода", ПоказательПериода);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.Статья;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");	
		
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодСчета) Тогда
		КодСчета = "91.02";
	КонецЕсли;
	
	СуммаДокументаВсего = ДанныеИБ.СуммаДокумента;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
		СуммаДокументаВсего = ДанныеИБ.СуммаДокумента + ДанныеИБ.СуммаКомиссииДокумента;
	КонецЕсли;
	ДанныеXDTO.Вставить("Сумма", СуммаДокументаВсего);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = СуммаДокументаВсего;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетРасходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетРасходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	АлгоритмКонвертации = АлгоритмВыгрузкиСБДСОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомСписание(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДатаВыписки = ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента), ДанныеИБ.ДатаВходящегоДокумента, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ДатаВыписки", ДатаВыписки);
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗапасов_ИзЭксплуатации
Процедура ДобавитьПКО_Документ_СписаниеЗапасов_ИзЭксплуатации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеЗапасов_ИзЭксплуатации";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаСписаниеЗапасов_СписаниеИзЭкспл(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаСписаниеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваровПоИнвентаризации_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеТоваровПоИнвентаризации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеЗапасов;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.СвойствоФормата = "Инвентаризация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ИнвентаризацияЗапасов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаСписаниеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПокупателю_Отправка
Процедура ДобавитьПКО_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетНаОплатуПокупателю_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплату;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);  
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.БанковскийСчет) Тогда 
		
		Если ЗначениеЗаполнено(ДанныеИБ.Организация) 
			И ЗначениеЗаполнено(ДанныеИБ.Организация.БанковскийСчетПоУмолчанию)
			И ДанныеИБ.ВалютаДокумента = ДанныеИБ.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
			
			ДанныеXDTO.Вставить("БанковскийСчетОрганизации", ДанныеИБ.Организация.БанковскийСчетПоУмолчанию);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаСчетНаОплату(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПоставщика_Отправка
Процедура ДобавитьПКО_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетНаОплатуПоставщика_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);  
	
	РасширенныеДанныеИБ = ДанныеДокументаСчетНаОплатуПоставщика(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактура;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийСчетФактура";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СводныйКомиссионный";
	НоваяСтрока.СвойствоФормата = "СводныйКомиссионный";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Выставлен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыставления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособВыставления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "УчитыватьИсправлениеИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Авансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Авансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "УчитыватьИсправлениеИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПлатежноРасчетныеДокументы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПлатежноРасчетныеДокументы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	УчитыватьИсправлениеИсходногоДокумента = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
		"ВЫБРАТЬ
		|	СчетФактураДокументыОснования.ДокументОснование,
		|	СчетФактураДокументыОснования.НомерИсходногоДокумента,
		|	СчетФактураДокументыОснования.ДатаИсходногоДокумента,
		|	СчетФактураДокументыОснования.УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураДокументыОснования.НомерИсправленияИсходногоДокумента,
		|	СчетФактураДокументыОснования.ДатаИсправленияИсходногоДокумента
		|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		|ИЗ
		|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактура.ДокументОснование,
		|	СчетФактура.НомерИсходногоДокумента,
		|	СчетФактура.ДатаИсходногоДокумента,
		|	ЛОЖЬ,
		|	0,
		|	0
		|ИЗ
		|	Документ.СчетФактура КАК СчетФактура
		|ГДЕ
		|	СчетФактура.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеДокумента.ДокументОснование,
		|	МАКСИМУМ(ВТ_ДанныеДокумента.НомерИсходногоДокумента) КАК НомерИсходногоДокумента,
		|	МАКСИМУМ(ВТ_ДанныеДокумента.ДатаИсходногоДокумента) КАК ДатаИсходногоДокумента,
		|	МАКСИМУМ(ВТ_ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента) КАК УчитыватьИсправлениеИсходногоДокумента,
		|	МАКСИМУМ(ВТ_ДанныеДокумента.НомерИсправленияИсходногоДокумента) КАК НомерИсправленияИсходногоДокумента,
		|	МАКСИМУМ(ВТ_ДанныеДокумента.ДатаИсправленияИсходногоДокумента) КАК ДатаИсправленияИсходногоДокумента
		|ИЗ
		|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеДокумента.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента,
		|	СчетФактураДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента
		|ИЗ
		|	Документ.СчетФактура.ДатаНомерДокументовОплаты КАК СчетФактураДатаНомерДокументовОплаты
		|ГДЕ
		|	СчетФактураДатаНомерДокументовОплаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураЗапасы.Номенклатура,
		|	СчетФактураЗапасы.Содержание,
		|	СчетФактураЗапасы.Сумма,
		|	СчетФактураЗапасы.СтавкаНДС,
		|	СчетФактураЗапасы.СуммаНДС,
		|	СчетФактураЗапасы.Всего
		|ИЗ
		|	Документ.СчетФактура.Запасы КАК СчетФактураЗапасы
		|ГДЕ
		|	СчетФактураЗапасы.Ссылка = &Ссылка";
			
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	ВыборкаОснования = МассивРезультатов[1].Выбрать();
	ВыборкаПлатежноРасчетныеДокументы = МассивРезультатов[2].Выбрать();
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ДокументыОснования.Колонки.Добавить("НомерИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("ДатаИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
	
	Пока ВыборкаОснования.Следующий() Цикл
		
		ДокументОснование = ВыборкаОснования.ДокументОснование;
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
	
		ИмяПКО = ИмяПКОДляДокумента(ДокументОснование);
			
		СтрокаОснование = ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОснование, ВыборкаОснования); 
		
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
		
		УчитыватьИсправлениеИсходногоДокумента = ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	ДанныеXDTO.Вставить("УчитыватьИсправлениеИсходногоДокумента", УчитыватьИсправлениеИсходногоДокумента);
	
	ПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
	ПлатежноРасчетныеДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатежноРасчетныеДокументы.Колонки.Добавить("НомерДокумента");
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
		Пока ВыборкаПлатежноРасчетныеДокументы.Следующий() Цикл
			СтрокаПлатежноРасчетныйДокумент = ПлатежноРасчетныеДокументы.Добавить();
			СтрокаПлатежноРасчетныйДокумент.ДатаДокумента = ВыборкаПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента;
			СтрокаПлатежноРасчетныйДокумент.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента);
		КонецЦикла;
	КонецЕсли;
	
	Если ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Выставлен", Истина);
	ДанныеXDTO.Вставить("ДатаВыставления", ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления), ДанныеИБ.ДатаВыставления, ДанныеИБ.Дата));
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	ДанныеXDTO.Вставить("СуммаНДС", ДанныеИБ.Запасы.Итог("СуммаНДС"));
	
	Авансы = Новый ТаблицаЗначений();
	Авансы.Колонки.Добавить("Номенклатура");
	Авансы.Колонки.Добавить("Содержание");
	Авансы.Колонки.Добавить("Сумма");
	Авансы.Колонки.Добавить("СтавкаНДС");
	Авансы.Колонки.Добавить("СуммаНДС");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс Тогда
		ВыборкаАвансы = МассивРезультатов[3].Выбрать();
	
		Пока ВыборкаАвансы.Следующий() Цикл
			СтрокаАвансы = Авансы.Добавить();
			СтрокаАвансы.Номенклатура = ВыборкаАвансы.Номенклатура;
			СтрокаАвансы.Содержание = ВыборкаАвансы.Содержание;
			СтрокаАвансы.Сумма = ВыборкаАвансы.Всего;
			СтрокаАвансы.СтавкаНДС = СтавкаНДССтрокой_Отправка(ВыборкаАвансы.СтавкаНДС);
			СтрокаАвансы.СуммаНДС = ВыборкаАвансы.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Авансы", Авансы);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийСчетФактураПолученный";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПолучения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправления";
	НоваяСтрока.СвойствоФормата = "ДатаИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправленияИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсправленияИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправленияИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсправленияИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьИсправлениеИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "УчитыватьИсправлениеИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособВыставления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Авансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Авансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("СчетаФактурыВыданныеПокупателям", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.СчетаФактурыВыданныеПокупателям;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Субкомиссионер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетФактураВыданный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	ДокументОснование = ДанныеИБ.ДокументОснование;
	ИмяПКО = ИмяПКОДляДокумента(ДокументОснование);
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	СтрокаОснование = ДокументыОснования.Добавить();
	СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
		
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Авансы = Новый ТаблицаЗначений();
	Авансы.Колонки.Добавить("Сумма");
	Авансы.Колонки.Добавить("СтавкаНДС");
	Авансы.Колонки.Добавить("СуммаНДС");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда
		Для каждого СтрокаТаблицы Из ДанныеИБ.Запасы Цикл
			СтрокаАвансы = Авансы.Добавить();
			СтрокаАвансы.Сумма = СтрокаТаблицы.Всего;
			СтрокаАвансы.СтавкаНДС = СтавкаНДССтрокой_Отправка(СтрокаТаблицы.СтавкаНДС);
			СтрокаАвансы.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Авансы", Авансы);
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
		ДанныеXDTO.Вставить("ДатаИсходногоДокумента", Неопределено);
		ДанныеXDTO.Вставить("НомерИсходногоДокумента", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	ДанныеXDTO.Вставить("СуммаНДС", ДанныеИБ.Запасы.Итог("СуммаНДС"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Покупатель,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Субкомиссионер,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Сумма,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.НДС КАК СуммаНДС,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.СчетФактура КАК СчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураПолученный.СчетаФактурыВыданныеПокупателям КАК СчетФактураПолученныйСчетаФактурыВыданныеПокупателям
	|ГДЕ
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СчетаФактурыВыданныеПокупателям = Новый ТаблицаЗначений;
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Покупатель");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Субкомиссионер");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Сумма");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("СуммаНДС");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("СчетФактураВыданный");
	
	Пока Выборка.Следующий() Цикл
	
		СтрокаСчетаФактураВыданныйПокупателю = СчетаФактурыВыданныеПокупателям.Добавить();
		ЗаполнитьЗначенияСвойств(СчетаФактурыВыданныеПокупателям, Выборка);
	
	КонецЦикла;
	
	Если СчетаФактурыВыданныеПокупателям.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("СчетаФактурыВыданныеПокупателям", СчетаФактурыВыданныеПокупателям);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПодразделениеВПроизводственныйСклад_Отправка
Процедура ДобавитьПКО_ПодразделениеВПроизводственныйСклад_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПодразделениеВПроизводственныйСклад_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МОЛ";
	НоваяСтрока.СвойствоФормата = "МОЛ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСтруктурнойЕдиницы";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";

КонецПроцедуры
#КонецОбласти
#Область РС_ДокументыФизическихЛиц_ИзСтруктуры
Процедура ДобавитьПКО_РС_ДокументыФизическихЛиц_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "РС_ДокументыФизическихЛиц_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_ДокументыФизическихЛиц_ИзСтруктуры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокументаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПериодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицоОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыдачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КемВыдан";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КодПодразделения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Период";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_РС_ДокументыФизическихЛиц_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Свойство, соответствующее отбору, заполняется из отбора в наборе записей.
		ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
		ДанныеXDTO.Вставить("ВидДокументаОтбор", ДанныеИБ.Отбор.ВидДокумента.Значение);
		ДанныеXDTO.Вставить("ПериодОтбор", ДанныеИБ.Отбор.Период.Значение);
		
		// Подготовка таблицы значений, содержащую данные из набора записей.
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("ФизическоеЛицо");
		Записи.Колонки.Добавить("ВидДокумента");
		Записи.Колонки.Добавить("Период");
		Записи.Колонки.Добавить("Серия");
		Записи.Колонки.Добавить("Номер");
		Записи.Колонки.Добавить("ДатаВыдачи");
		Записи.Колонки.Добавить("СрокДействия");
		Записи.Колонки.Добавить("КемВыдан");
		Записи.Колонки.Добавить("КодПодразделения");
		Записи.Колонки.Добавить("Представление");
		
		Для Каждого СтрокаНабора Из ДанныеИБ Цикл
			СтрокаЗаписи = Записи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
			
			СтрокаЗаписи.ФизическоеЛицо = СтрокаНабора.Физлицо;
	
		КонецЦикла;
		
		ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаЗакрытия";
	НоваяСтрока.СвойствоФормата = "ДатаЗакрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаЗакрытия";
	НоваяСтрока.СвойствоФормата = "ДатаЗакрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОткрытия";
	НоваяСтрока.СвойствоФормата = "ДатаОткрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОткрытия";
	НоваяСтрока.СвойствоФормата = "ДатаОткрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИДатаРазрешения";
	НоваяСтрока.СвойствоФормата = "НомерИДатаРазрешения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИДатаРазрешения";
	НоваяСтрока.СвойствоФормата = "НомерИДатаРазрешения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.ВидСчета) <> "Расчетный"
		И СокрЛП(ДанныеИБ.ВидСчета) <> "Депозитный"
		И СокрЛП(ДанныеИБ.ВидСчета) <> "Ссудный" Тогда
		
		ДанныеXDTO.Вставить("ВидСчета", "Иной");
	Иначе
		ДанныеXDTO.Вставить("ВидСчета", ДанныеИБ.ВидСчета);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВыводитьМесяцПрописью", (ДанныеИБ.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью));
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаРасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаДоговора";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДоговора";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокОплатыПокупателя";
	НоваяСтрока.СвойствоФормата = "СрокКонтроляОплатыВДнях";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПоУмолчанию";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидКонтрагента";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоУмолчанию";
	НоваяСтрока.СвойствоФормата = "ОсновнойДоговор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "ДополнительнаяИнформация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлко_Отправка
Процедура ДобавитьПКО_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЛицензииПоставщиковАлко_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЛицензии";
	НоваяСтрока.СвойствоФормата = "ВидЛицензии";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыЛицензийАлкогольнойПродукции";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачала";
	НоваяСтрока.СвойствоФормата = "ДатаНачала";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончания";
	НоваяСтрока.СвойствоФормата = "ДатаОкончания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КемВыдана";
	НоваяСтрока.СвойствоФормата = "КемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ссылка";
	НоваяСтрока.СвойствоФормата = "Ссылка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АлкогольнаяПродукция";
	НоваяСтрока.СвойствоФормата = "АлкогольнаяПродукция";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИмпортнаяАлкогольнаяПродукция";
	НоваяСтрока.СвойствоФормата = "ИмпортнаяАлкогольнаяПродукция";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КатегорияНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчета";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбъемДАЛ";
	НоваяСтрока.СвойствоФормата = "ОбъемДАЛ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроизводительИмпортерАлкогольнойПродукции";
	НоваяСтрока.СвойствоФормата = "ПроизводительИмпортер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Спецификация";
	НоваяСтрока.СвойствоФормата = "ОсновнаяСпецификацияНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпецификацииНоменклатуры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидАлкогольнойПродукции";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = "БезНДС";
	Если ДанныеИБ.СтавкаНДС.Ставка = 18
		И НЕ ДанныеИБ.СтавкаНДС.Расчетная Тогда
		СтавкаНДС = "НДС18";
	ИначеЕсли ДанныеИБ.СтавкаНДС.Ставка = 18
		И ДанныеИБ.СтавкаНДС.Расчетная Тогда
		СтавкаНДС = "НДС18_118";
	ИначеЕсли ДанныеИБ.СтавкаНДС.Ставка = 10 
		И НЕ ДанныеИБ.СтавкаНДС.Расчетная Тогда
		СтавкаНДС = "НДС10";
	ИначеЕсли ДанныеИБ.СтавкаНДС.Ставка = 10 
		И ДанныеИБ.СтавкаНДС.Расчетная Тогда
		СтавкаНДС = "НДС10_110";
	ИначеЕсли ДанныеИБ.СтавкаНДС.Ставка = 0 Тогда
		СтавкаНДС = "НДС0"; 
	КонецЕсли;
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДС);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции) Тогда
		СтруктураВидАП = Новый Структура("Код, Наименование, ВидЛицензии");
		ЗаполнитьЗначенияСвойств(СтруктураВидАП, ДанныеИБ.ВидАлкогольнойПродукции);
		Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии) Тогда
			ВидЛицензии = "";
			Если ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво Тогда
				ВидЛицензии = "Пиво";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция Тогда
				ВидЛицензии = "АлкогольнаяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяПищеваяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяНеПищеваяПродукция";
			КонецЕсли;
			СтруктураВидАП.Вставить("ВидЛицензии", ВидЛицензии);
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", СтруктураВидАП);
	Иначе
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатурныеГруппы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Группа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПоУмолчанию";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИностраннаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ЯвляетсяНерезидентом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "ВышестоящееПодразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МОЛ";
	НоваяСтрока.СвойствоФормата = "МОЛ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РозничныйВидЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦенРозничнойТорговли";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСтруктурнойЕдиницы";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Спецификации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоляСтоимости";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Количество", 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпецификацииСостав.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.ДоляСтоимости = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпецификацииСостав.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаСостав = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСостав.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаСостав);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "УточнениеНаименования";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтраховойНомерПФР";
	НоваяСтрока.СвойствоФормата = "СтраховойНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Гражданство", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Гражданство;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачалоПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Страна";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДанныеФИО", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДанныеФИО;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачалоПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеИБ.Наименование);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Фамилия", СтруктураФИО.Фамилия);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Имя", СтруктураФИО.Имя);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Отчество", СтруктураФИО.Отчество);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Гражданство) Тогда
		ТаблицаГражданство = Новый ТаблицаЗначений;
		ТаблицаГражданство.Колонки.Добавить("Страна");
		ТаблицаГражданство.Колонки.Добавить("НачалоПериода");
		
		НоваяСтрока = ТаблицаГражданство.Добавить();
		НоваяСтрока.Страна = ДанныеИБ.Гражданство;
		НоваяСтрока.НачалоПериода = '00010101';
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаИзСтруктуры_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "УточнениеНаименования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФИО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ЗакрытиеКассовойСхемы_Получение
Процедура ДобавитьПКО_Документ_ЗакрытиеКассовойСхемы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗакрытиеКассовойСхемы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ЗакрытьКассовуюСмену";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкончаниеКассовойСмены";
	НоваяСтрока.СвойствоФормата = "Дата";

	ПравилоКонвертации.ПоляПоиска.Добавить("КассаККМ,Номер");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОткрытиеКассовойСмены_Получение
Процедура ДобавитьПКО_Документ_ОткрытиеКассовойСмены_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОткрытиеКассовойСмены_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НачалоКассовойСмены";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВключатьВСтоимость";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатусКассовойСмены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
	ПолученныеДанные.ВидЦен = РозничныйВидЦены();
	ПолученныеДанные.НДСВключатьВСтоимость = Истина;
	ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
	ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
	ПолученныеДанные.СуммаВключаетНДС  = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта;
	ПолученныеДанные.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
КонецПроцедуры

Процедура ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	
	Для Каждого СтрокаЗапасов Из ПолученныеДанные.Запасы Цикл 
		СтрокаЗапасов.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
		
		НоваяСтрока = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СуммаРасчетов = ПерваяСтрокаРасшифровкиПлатежаXDTO.СуммаВал;
		НоваяСтрока.Курс = ПерваяСтрокаРасшифровкиПлатежаXDTO.КурсКонвертации;
		НоваяСтрока.Кратность = ПерваяСтрокаРасшифровкиПлатежаXDTO.КратностьКонвертации;
		НоваяСтрока.СуммаПлатежа = ПерваяСтрокаРасшифровкиПлатежаXDTO.Сумма;
		НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСуммы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
		
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	КонецЕсли;
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
	
		// СтатьяДвиженияДенежныхСредств
		Если ВидРасчетовXDTO = "СПоставщиком" 
			ИЛИ ВидРасчетовXDTO = "СПокупателем" Тогда
			
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
	
		МассивСтрокРасшифровка = Новый Массив;
		
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// Заполнение счета на оплату.
			Если ВидРасчетовXDTO = "СПокупателем"
				И ЗначениеЗаполнено(Строка.Заказ) И Строка.Заказ.ТипЗначения = "ЗаказКлиента" Тогда
				СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
					Строка.Заказ, "Документ_СчетНаОплатуПокупателю_Отправка");
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
			КонецЕсли;
				
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПБДС_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подотчетник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСуммы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником;
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","Статья");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	
	КолонкиДляИсключения = "ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПДС_ПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_ПДС_ПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПДС_ПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПолучатель";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
	ПолученныеДанные.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные;
КонецПроцедуры

Процедура ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
		
		НоваяСтрока = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СуммаРасчетов = ПерваяСтрокаРасшифровкиПлатежаXDTO.СуммаВал;
		НоваяСтрока.Курс = ПерваяСтрокаРасшифровкиПлатежаXDTO.КурсКонвертации;
		НоваяСтрока.Кратность = ПерваяСтрокаРасшифровкиПлатежаXDTO.КратностьКонвертации;
		НоваяСтрока.СуммаПлатежа = ПерваяСтрокаРасшифровкиПлатежаXDTO.Сумма;
		НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
	ПолученныеДанные.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные;
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакАванса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСуммы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
		
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	КонецЕсли;
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		// СтатьяДвиженияДенежныхСредств
		Если ВидРасчетовXDTO = "СПоставщиком" 
			ИЛИ ВидРасчетовXDTO = "СПокупателем" Тогда
			
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
	
		МассивСтрокРасшифровка = Новый Массив;
	
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// Заполнение счета на оплату.
			Если ВидРасчетовXDTO = "СПокупателем"
				И ЗначениеЗаполнено(Строка.Заказ) И Строка.Заказ.ТипЗначения = "ЗаказКлиента" Тогда
				СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
					Строка.Заказ, "Документ_СчетНаОплатуПокупателю_Отправка");
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
			КонецЕсли;
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПКО_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подотчетник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа[0];
	КонецЕсли;
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаРасчетов = ПолученныеДанные.СуммаДокумента;
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДенежныхСредств, ПолученныеДанные.Дата);
	СтрокаРасшифровка.Курс = СтруктураКурсаВалюты.Курс;
	СтрокаРасшифровка.Кратность = СтруктураКурсаВалюты.Кратность;
	СтрокаРасшифровка.СтавкаНДС	= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаРасчетов");
	МассивКлючевыхПолей.Добавить("Курс");
	МассивКлючевыхПолей.Добавить("Кратность");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОЧекККМ_Получение
Процедура ДобавитьПКО_Документ_ПКОЧекККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОЧекККМ_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЧекККМ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОЧекККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОЧекККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ПровестиЧекККМ";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСменыККМ";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПолученоНаличными";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭквайринговыйТерминал";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассоваяСмена";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВключатьВСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статус";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Запасы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Запасы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Всего";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПлатежнымиКартами", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПлатежнымиКартами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежнойКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежнойКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,НомерСменыККМ,НомерЧекаККМ");
КонецПроцедуры

Процедура ПКО_Документ_ПКОЧекККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
	ПолученныеДанные.ВидЦен = РозничныйВидЦены();
	ПолученныеДанные.НДСВключатьВСтоимость = Истина;
	ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
	ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
	ПолученныеДанные.СуммаВключаетНДС  = Истина;
	ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	ПолученныеДанные.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	
	ПолученныеДанные.КассоваяСмена = ПолучитьКассовуюСмену(ПолученныеДанные);
	
	// заполнение табличных частей
	
	// Товары 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",        "СтавкаНДС");
	
	МассивСтрокТовары = Новый Массив;
	
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		Для Каждого СтрокаТоваров Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаТоваров, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Всего",СтруктураДанныхСтроки.Сумма);
			
			СтруктураДанныхСтроки.СтавкаНДС = СтавкаНДСПоСтроке(СтруктураДанныхСтроки.СтавкаНДС);
			
			Если СтруктураДанныхСтроки.СтавкаНДС.Расчетная Тогда
				СтруктураДанныхСтроки.Сумма = СтруктураДанныхСтроки.Всего - СтруктураДанныхСтроки.СуммаНДС;
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	// Оплата платёжными картами 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("ВидКарты", "ВидПлатежнойКарты");
	ПравилаЗаполнения.Вставить("НомерКарты",   "НомерПлатежнойКарты");
	ПравилаЗаполнения.Вставить("СуммаОплаты",         "Сумма");
	
	МассивСтрокПлатежныеКарты = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
	
		Для Каждого СтрокаПлатежныхКарт Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаПлатежныхКарт, ПравилаЗаполнения);
			МассивСтрокПлатежныеКарты.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокПлатежныеКарты.Количество() > 0 Тогда
		ПолученныеДанные.ЭквайринговыйТерминал = ПолучитьЭквайринговыйТерминалПоУмолчанию(ПолученныеДанные);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокПлатежныеКарты);
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОЧекККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	
	Для Каждого СтрокаЗапасов Из ПолученныеДанные.Запасы Цикл 
		СтрокаЗапасов.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗапасов.Номенклатура, "ЕдиницаИзмерения");;
	КонецЦикла;
	
	
	ПолученныеДанные.ПолученоНаличными = ПолученныеДанные.СуммаДокумента - ПолученныеДанные.ОплатаПлатежнымиКартами.Итог("Сумма");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Получение
Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПлатежноеПоручение_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "ИдентификаторПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИННПлательщика";
	НоваяСтрока.СвойствоФормата = "ИННПлательщика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИННПолучателя";
	НоваяСтрока.СвойствоФормата = "ИННПолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодБК";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодБК";
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПППлательщика";
	НоваяСтрока.СвойствоФормата = "КПППлательщика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПППолучателя";
	НоваяСтрока.СвойствоФормата = "КПППолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Оплачено";
	НоваяСтрока.СвойствоФормата = "Оплачено";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательДаты";
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательНомера";
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательОснования";
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательПериода";
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательТипа";
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатусСоставителя";
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстПлательщика";
	НоваяСтрока.СвойствоФормата = "ТекстПлательщика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстПолучателя";
	НоваяСтрока.СвойствоФормата = "ТекстПолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПеречислениеВБюджет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.СтавкаНДС = СтавкаНДСПоСтроке(ДанныеXDTO.СтавкаНДС.Значение);
	Если ДанныеXDTO.ПеречислениеВБюджет = Истина Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
		ПолученныеДанные.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
	КонецЕсли;
	
	Если Значениезаполнено(ПолученныеДанные.КодБК) Тогда
		ПолученныеДанные.Налог = Справочники.ВидыНалогов.НайтиПоРеквизиту("КодБК", ПолученныеДанные.КодБК);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ <> Неопределено Тогда
		ТекущийВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ВидОперации");
		Если ТекущийВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ ТекущийВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	ПолученныеДанные.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Инкассация_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчет_Инкассация_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	ПолученныеДанные.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации)
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_ПДС_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчет_ПДС_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПолучатель";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные;
	ПолученныеДанные.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные;
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПеремещениеВКассуККМ = Ложь;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
			
		СчетУчетаРасчетовXDTO = ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов;
		Если Найти(СчетУчетаРасчетовXDTO, "50.02") Тогда
			ЭтоПеремещениеВКассуККМ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПеремещениеВКассуККМ Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ;
	ИначеЕсли ДанныеXDTO.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеXDTO.Контрагент) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакАванса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСуммы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам"
				
				Или ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
	КонецЕсли;
	
	#КонецОбласти
	
	МассивСтрокРасшифровка = Новый Массив;
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
	
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если Найти(ВидРасчетовРасширенныйXDTO, "Проценты") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Проценты;
			ИначеЕсли Найти(ВидРасчетовРасширенныйXDTO, "Комиссия") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Комиссия;
			Иначе
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
			КонецЕсли;
				
			СтруктураДанныхСтроки.Вставить("ТипСуммы", ВидПлатежаПоКредитамЗаймам);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРКО_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подотчетник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидНалога";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.ПоказательКБК) Тогда
		ПолученныеДанные.ВидНалога = Справочники.ВидыНалогов.НайтиПоРеквизиту("КодБК", ДанныеXDTO.ПоказательКБК); 
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидНалога) Тогда
		ПолученныеДанные.ВидНалога = ДанныеИБ.ВидНалога;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСуммы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам"
				
				Или ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	КонецЕсли;
	
	#КонецОбласти
	
	МассивСтрокРасшифровка = Новый Массив;
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если Найти(ВидРасчетовРасширенныйXDTO, "Проценты") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Проценты;
			ИначеЕсли Найти(ВидРасчетовРасширенныйXDTO, "Комиссия") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Комиссия;
			Иначе
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
			КонецЕсли;
				
			СтруктураДанныхСтроки.Вставить("ТипСуммы", ВидПлатежаПоКредитамЗаймам);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДС_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подотчетник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статья";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекККМВозврат_Получение
Процедура ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЧекККМВозврат_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЧекККМВозврат;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЧекККМВозврат";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ПровестиЧекККМ";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСменыККМ";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассоваяСмена";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВключатьВСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭквайринговыйТерминал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Запасы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Запасы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Всего";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПлатежнымиКартами", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПлатежнымиКартами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежнойКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежнойКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,НомерСменыККМ,НомерЧекаККМ");
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
	ПолученныеДанные.ВидЦен = РозничныйВидЦены();
	ПолученныеДанные.НДСВключатьВСтоимость = Истина;
	ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
	ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
	ПолученныеДанные.СуммаВключаетНДС  = Истина;
	ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	
	ПолученныеДанные.КассоваяСмена = ПолучитьКассовуюСмену(ПолученныеДанные);
	
	// заполнение табличных частей
	
	// Товары 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",        "СтавкаНДС");
	
	МассивСтрокТовары = Новый Массив;
	
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		Для Каждого СтрокаТоваров Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаТоваров, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Всего",СтруктураДанныхСтроки.Сумма);
			
			СтруктураДанныхСтроки.СтавкаНДС = СтавкаНДСПоСтроке(СтруктураДанныхСтроки.СтавкаНДС);
			
			Если СтруктураДанныхСтроки.СтавкаНДС.Расчетная Тогда
				СтруктураДанныхСтроки.Сумма = СтруктураДанныхСтроки.Всего - СтруктураДанныхСтроки.СуммаНДС;
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	// Оплата платёжными картами 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("ВидКарты", "ВидПлатежнойКарты");
	ПравилаЗаполнения.Вставить("НомерКарты",   "НомерПлатежнойКарты");
	ПравилаЗаполнения.Вставить("СуммаОплаты",         "Сумма");
	
	МассивСтрокПлатежныеКарты = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
	
		Для Каждого СтрокаПлатежныхКарт Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаПлатежныхКарт, ПравилаЗаполнения);
			МассивСтрокПлатежныеКарты.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокПлатежныеКарты.Количество() > 0 Тогда
		ПолученныеДанные.ЭквайринговыйТерминал = ПолучитьЭквайринговыйТерминалПоУмолчанию(ПолученныеДанные);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокПлатежныеКарты);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	
	Для Каждого СтрокаЗапасов Из ПолученныеДанные.Запасы Цикл 
		СтрокаЗапасов.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗапасов.Номенклатура, "ЕдиницаИзмерения");;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область РС_ЦеныНоменклатуры_Получение
Процедура ДобавитьПКО_РС_ЦеныНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "РС_ЦеныНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_РС_ЦеныНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	

КонецПроцедуры

Процедура ПКО_РС_ЦеныНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ТутПроверкаРаботы = Истина;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаЗакрытия";
	НоваяСтрока.СвойствоФормата = "ДатаЗакрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОткрытия";
	НоваяСтрока.СвойствоФормата = "ДатаОткрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИДатаРазрешения";
	НоваяСтрока.СвойствоФормата = "НомерИДатаРазрешения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВариантВыводаМесяца";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидСчета = "Расчетный";
	Если ДанныеXDTO.Свойство("ВидСчета")
		И ЗначениеЗаполнено(ДанныеXDTO.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = ДанныеXDTO.ВидСчета.Значение;
	КонецЕсли;
	
	// Владелец: выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		КонецЕсли;	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		
	КонецЕсли;
	
	ПолученныеДанные.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью;
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ПолученныеДанные.СчетУчета = ДанныеИБ.СчетУчета;
		ПолученныеДанные.ВидСчета = ДанныеИБ.ВидСчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчета) Тогда
		ПолученныеДанные.СчетУчета = ПланыСчетов.Управленческий.Банк;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = "Расчетный";	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыАлкогольнойПродукции_Получение
Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыАлкогольнойПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата = "";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЛицензии";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Маркируемый";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Код");
КонецПроцедуры

Процедура ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		ПолученныеДанные.Код = ДанныеXDTO.КлючевыеСвойства.Код;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Наименование") Тогда
		ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.Наименование;
	Иначе
		ПолученныеДанные.Наименование = НСтр("ru='Вид алкогольной продукции по умолчанию'")
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидЛицензии") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидЛицензии",
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВидЛицензии, "Перечисление_ВидыЛицензийАлкогольнойПродукции"));
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Маркируемый") Тогда
		ПолученныеДанные.Маркируемый = ДанныеXDTO.КлючевыеСвойства.Маркируемый;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаРасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаДоговора";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДоговора";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокОплатыПокупателя";
	НоваяСтрока.СвойствоФормата = "СрокКонтроляОплатыВДнях";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,ВидДоговора,Владелец,ДатаДоговора,НомерДоговора,Организация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,ВидДоговора,Владелец,Наименование,Организация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И  ПолученныеДанные <> Неопределено Тогда
		ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Получение
Процедура ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КассыККМ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_КассыККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "УстановкаНастройкиКассыККМ";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИспользоватьБезПодключенияОборудования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипКассы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_КассыККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	ПолученныеДанные.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	ПолученныеДанные.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
	ПолученныеДанные.ИспользоватьБезПодключенияОборудования = Истина;
	ПолученныеДанные.СчетУчета = ПланыСчетов.Управленческий.Касса;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПоУмолчанию";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидКонтрагента";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоУмолчанию";
	НоваяСтрока.СвойствоФормата = "ОсновнойДоговор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "ДополнительнаяИнформация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	ПолученныеДанные.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	ПолученныеДанные.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	ПолученныеДанные.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	ПолученныеДанные.ВестиРасчетыПоДоговорам = Истина;
	ПолученныеДанные.ВестиРасчетыПоДокументам = Истина;
	ПолученныеДанные.ВестиРасчетыПоЗаказам = Истина;
	ПолученныеДанные.ВестиУчетОплатыПоСчетам = Истина;
	ПолученныеДанные.Покупатель = Истина;
	ПолученныеДанные.Поставщик = Истина;
	ПолученныеДанные.ПрочиеОтношения = Истина;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;		
			Иначе
				Продолжить;
			КонецЕсли;
			ТекТипКИ = ТекВидКИ.Тип;	
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НалоговыйНомерНерезидента") Тогда
		ПолученныеДанные.ИНН = ДанныеXDTO.НалоговыйНомерНерезидента;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
		ПолученныеДанные.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.Родитель) Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
			ПолученныеДанные.СтранаРегистрации = ДанныеИБ.СтранаРегистрации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИБ.БанковскийСчетПоУмолчанию) Тогда
			ПолученныеДанные.БанковскийСчетПоУмолчанию = ДанныеИБ.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИБ.ДоговорПоУмолчанию) Тогда
			ПолученныеДанные.ДоговорПоУмолчанию = ДанныеИБ.ДоговорПоУмолчанию;
		КонецЕсли;
		
		ПолученныеДанные.СчетУчетаАвансовПокупателя = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.СчетУчетаАвансовПоставщику = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.СчетУчетаРасчетовСПокупателем = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.СчетУчетаРасчетовСПоставщиком = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.ВестиРасчетыПоДоговорам = ДанныеИБ.ВестиРасчетыПоДоговорам;
		ПолученныеДанные.ВестиРасчетыПоДокументам = ДанныеИБ.ВестиРасчетыПоДокументам;
		ПолученныеДанные.ВестиРасчетыПоЗаказам = ДанныеИБ.ВестиРасчетыПоЗаказам;
		ПолученныеДанные.ВестиУчетОплатыПоСчетам = ДанныеИБ.ВестиУчетОплатыПоСчетам;
		ПолученныеДанные.Покупатель = ДанныеИБ.Покупатель;
		ПолученныеДанные.Поставщик = ДанныеИБ.Покупатель;
		ПолученныеДанные.ПрочиеОтношения = ДанныеИБ.Покупатель;
		
	КонецЕсли;
	
	Если ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
		И ЗначениеЗаполнено(ПолученныеДанные.РегистрационныйНомер) Тогда
		ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АлкогольнаяПродукция";
	НоваяСтрока.СвойствоФормата = "АлкогольнаяПродукция";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидАлкогольнойПродукции";
	НоваяСтрока.СвойствоФормата = "ВидАлкогольнойПродукции";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыАлкогольнойПродукции_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИмпортнаяАлкогольнаяПродукция";
	НоваяСтрока.СвойствоФормата = "ИмпортнаяАлкогольнаяПродукция";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КатегорияНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчета";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбъемДАЛ";
	НоваяСтрока.СвойствоФормата = "ОбъемДАЛ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроизводительИмпортерАлкогольнойПродукции";
	НоваяСтрока.СвойствоФормата = "ПроизводительИмпортер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Спецификация";
	НоваяСтрока.СвойствоФормата = "ОсновнаяСпецификацияНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпецификацииНоменклатуры_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыНоменклатуры";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
	ПолученныеДанные.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
	ПолученныеДанные.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
	ПолученныеДанные.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	ПолученныеДанные.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	
	Если ДанныеXDTO.Свойство("СтавкаНДС")
		И ЗначениеЗаполнено(ДанныеXDTO.СтавкаНДС) Тогда
		
		ПолученныеДанные.СтавкаНДС = СтавкаНДСПоСтроке(ДанныеXDTO.СтавкаНДС.Значение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КатегорияНоменклатуры) Тогда
		ПолученныеДанные.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
	
		ПолученныеДанные.СпособПополнения = ДанныеИБ.СпособПополнения;
		ПолученныеДанные.МетодОценки = ДанныеИБ.МетодОценки;
		ПолученныеДанные.СчетУчетаЗапасов = ДанныеИБ.СчетУчетаЗапасов;
		ПолученныеДанные.СчетУчетаЗатрат = ДанныеИБ.СчетУчетаЗатрат;
		ПолученныеДанные.НаправлениеДеятельности = ДанныеИБ.НаправлениеДеятельности;
		
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
			ПолученныеДанные.СтавкаНДС = ДанныеИБ.СтавкаНДС;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Получение
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатурныеГруппы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Группа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетПоУмолчанию";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИностраннаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ЯвляетсяНерезидентом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("НаименованиеСокращенное") Тогда
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.НаименованиеСокращенное;
		Иначе
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.НаименованиеСокращенное;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеXDTO.Свойство("КонтактнаяИнформация")
		Или Не ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
		Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
				ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
				ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
				ВидКИОбъект.Записать();
				ТекВидКИ = ВидКИОбъект.Ссылка;
			КонецЕсли;
		ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ИначеЕсли ВидКИСтрокой = "Факс" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		Иначе
			Продолжить;
		КонецЕсли;
		ТекТипКИ = ТекВидКИ.Тип;
		СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
		ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
		СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
		СтрокаКИ.Вид = ТекВидКИ;
		СтрокаКИ.Тип = ТекТипКИ;
		ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "ВышестоящееПодразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МОЛ";
	НоваяСтрока.СвойствоФормата = "МОЛ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РозничныйВидЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦенРозничнойТорговли";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСтруктурнойЕдиницы";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипСтруктурнойЕдиницы");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ДанныеИБ.СчетУчетаВРознице) Тогда
		ПолученныеДанные.СчетУчетаВРознице = ПланыСчетов.Управленческий.ТоварыПродукция;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ДанныеИБ.СчетУчетаНаценки) Тогда
		ПолученныеДанные.СчетУчетаНаценки = ПланыСчетов.Управленческий.ТорговаяНаценка;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Спецификации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Состав", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Состав;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоляСтоимости";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоПродукции";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
			
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоПродукции", ДанныеXDTO.Количество);
				
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для каждого СтрокаСостав Из ПолученныеДанные.Состав Цикл
		СтрокаСостав.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Материал;
		СтрокаСостав.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСостав.Номенклатура, "ЕдиницаИзмерения");
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеСлужебное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "УточнениеНаименования";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтраховойНомерПФР";
	НоваяСтрока.СвойствоФормата = "СтраховойНомерПФР";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные);
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("2.0") Тогда
			
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.ФИО;
		
			Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
			КонецЕсли;
			
		Иначе
		
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.ФИО;
			
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
		
		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.Наименование = ПолученныеДанные.Наименование;
		КонецЕсли;
		
		ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодМВД";
	НоваяСтрока.СвойствоФормата = "КодМВД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПФР";
	НоваяСтрока.СвойствоФормата = "КодПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = ДанныеИБ.МеждународноеСокращение;
		Если Не ЗначениеЗаполнено(Код) Тогда
			Код = ДанныеИБ.Наименование;
		КонецЕсли;
		
		Код = Лев(Код, 4);
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Группа
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатурныеГруппы_Группа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Группа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДСГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДСГруппа
Процедура ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДСГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДСГруппа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа3";
	НоваяСтрока.СвойствоФормата = "КодАльфа3";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкруглятьВБольшуюСторону";
	НоваяСтрока.СвойствоФормата = "ОкруглятьВБольшуюСторону";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Процент";
	НоваяСтрока.СвойствоФормата = "ТочностьОкругления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "ЦенаВключаетНДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если НЕ ДанныеXDTO.Свойство("ЦенаВключаетНДС") Тогда
		ПолученныеДанные.ЦенаВключаетНДС = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресФизЛицаЗаПределамиРФ, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыЭД_Реализация_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыЭД_Реализация_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЭД;
		ПравилоКонвертации.ТипXDTO = "ВидыЭД";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ТОРГ12, "ТОРГ12");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийВзаимозачет.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийВзаимозачет";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВзаимозачет;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийКорректировкаДолга";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.Взаимозачет, "ПроведениеВзаимозачета");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя, "СписаниеЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику, "СписаниеЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя, "ПереносЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику, "ПереносЗадолженности");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийКорректировки.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийКорректировки";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийИсправленияПоступленияРеализации;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийИсправленияПоступленияРеализации";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, "ИсправлениеОшибки");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "СогласованноеИзменение");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийСчетФактура.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийСчетФактура";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСчетФактура;
		ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.Аванс, "НаАванс");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.Корректировка, "Корректировочный");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента, "НаАвансКомитента");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.Продажа, "НаРеализацию");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы, "СуммовыеРазницы");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийСчетФактураПолученный.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийСчетФактураПолученный";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСчетФактураПолученный;
		ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.Аванс, "НаАванс");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка, "Корректировочный");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.Поступление, "НаПоступление");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы, "СуммовыеРазницы");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийЭквайринга.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийЭквайринга";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийЭквайринга;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя, "ОплатаОтКлиентаПлатежнойКартой");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СпособыРасчетаКомиссионногоВознагражд.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
		ПравилоКонвертации.ТипXDTO = "СпособыРасчетаКомиссионногоВознаграждения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления, "ПроцентОтРазницыСуммПродажиИПоступления");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисления_ТипыНалогообложенияНДС_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисления_ТипыНалогообложенияНДС_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
		ПравилоКонвертации.ТипXDTO = "Налогообложение";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.НаЭкспорт, "ПродажаНаЭкспорт");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС, "ПродажаНеОблагаетсяНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС, "ПродажаОблагаетсяНДС");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;

	// ВидыОперацийПБДС_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПБДС_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеНаСчет;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеВКассу;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРасходИзКассы;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСБДС_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСБДС_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРасходСоСчета;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыДоговоров.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоров;
	ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СКомиссионером, "СКомиссионером");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СКомитентом, "СКомитентом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СПокупателем, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СПоставщиком, "СПоставщиком");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоров.Прочее);
	ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоров.СКомиссионером);
	ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоров.СКомитентом);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоров.СПокупателем);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоров.СПоставщиком);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыКонтрагентов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыКонтрагентов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКонтрагентов;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган, "ЮридическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыЛицензийАлкогольнойПродукции.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыЛицензийАлкогольнойПродукции";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЛицензийАлкогольнойПродукции;
	ПравилоКонвертации.ТипXDTO = "ВидыЛицензийАлкогольнойПродукции";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "Пиво");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "СпиртосодержащаяНеПищеваяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "СпиртосодержащаяПищеваяПродукция");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ЗначенияДляПолучения.Вставить("Пиво", Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво);
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяНеПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ТипыНоменклатуры.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыНоменклатуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
	ПравилоКонвертации.ТипXDTO = "ТипыНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ВидРабот, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Запас, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Операция, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Работа, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.ВидРабот);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Запас);
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Операция);
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Работа);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮридическоеФизическоеЛицо.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСкладов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ТипыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСтруктурныхЕдиниц;
	ПравилоКонвертации.ТипXDTO = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.Розница, "Розничный");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет, "НеавтоматизированнаяТорговаяТочка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.Склад, "Оптовый");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция АлгоритмВыгрузкиПБДСОтправка(ДанныеИБ)
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда 
		АлгоритмКонвертации = "ОплатаОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
		АлгоритмКонвертации = "ВозвратОтПоставщика";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника Тогда
		АлгоритмКонвертации = "ВозвратОтПодотчетногоЛица";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
		АлгоритмКонвертации = "УплатаНалогов";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам Тогда
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
		АлгоритмКонвертации = "ВозвратЗаймаРаботником";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
		АлгоритмКонвертации = "ПоступлениеОплатыПоКартам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
		АлгоритмКонвертации = ?(ДанныеИБ.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета,
			"ПоступленияОтПродажиИностраннойВалюты",
			"ПриобретениеИностраннойВалюты");
	Иначе// Прочее, ПрочиеРасчеты 
		АлгоритмКонвертации = "ПрочийПриход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция АлгоритмВыгрузкиПКООтправка(ДанныеИБ)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда 
		АлгоритмКонвертации = "ОплатаОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
		АлгоритмКонвертации = "ВозвратОтПоставщика";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
		АлгоритмКонвертации = "ВозвратОтПодотчетногоЛица";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка Тогда
		АлгоритмКонвертации = "РозничнаяВыручка";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
		АлгоритмКонвертации = "РозничнаяВыручка";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам Тогда
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
		АлгоритмКонвертации = "ВозвратЗаймаРаботником";
	Иначе // ПокупкаВалюты, Прочее, ПрочиеРасчеты
		АлгоритмКонвертации = "ПрочийПриход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция АлгоритмВыгрузкиРКООтправка(ДанныеИБ)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда 
		АлгоритмКонвертации = "ВозвратОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
		АлгоритмКонвертации = "ОплатаПоставщику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		АлгоритмКонвертации = "Зарплата";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
		АлгоритмКонвертации = "УплатаНалогов";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
		АлгоритмКонвертации = "ВыдачаПодотчетнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		АлгоритмКонвертации = "ВыдачаЗаймаРаботнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	Иначе // ПеремещениеВКассуККМ, НаРасходы 
		АлгоритмКонвертации = "ПрочийРасход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция АлгоритмВыгрузкиСБДСОтправка(ДанныеИБ)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда 
		АлгоритмКонвертации = "ОплатаПоставщику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда 
		АлгоритмКонвертации = "ВозвратОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда 
		АлгоритмКонвертации = "ВыдачаПодотчетнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда 
		АлгоритмКонвертации = "Зарплата";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда 
		АлгоритмКонвертации = "УплатаНалогов";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда 
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда 
		АлгоритмКонвертации = "ВыдачаЗаймаРаботнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда 
		АлгоритмКонвертации = "ВозвратОплатыПоКартам";
	Иначе // НаРасходы, Прочее, ПрочиеРасчеты 
		АлгоритмКонвертации = "ПрочийРасход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУНФ, Документ, ТипСуммы = Неопределено, ЭтоЗайм = Ложь)
	СтруктураСчетаБП = Новый Структура;
			
			КодСчета = "";
			Субконто1Вид = Неопределено;
			Субконто2Вид = Неопределено;
			Субконто3Вид = Неопределено;
			
			СтруктураСчетаБП.Вставить("КодСчета", КодСчета);
			СтруктураСчетаБП.Вставить("Субконто1Вид", Субконто1Вид);
			СтруктураСчетаБП.Вставить("Субконто2Вид", Субконто2Вид);
			СтруктураСчетаБП.Вставить("Субконто3Вид", Субконто3Вид);
			
			Если Не ЗначениеЗаполнено(СчетУНФ) Тогда
				Возврат СтруктураСчетаБП;
			КонецЕсли;
			
			ДокументВВалюте = Ложь;
			МетаданныеДокумента = Документ.Метаданные();
			Если (МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено
					И Документ.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить())
				
				ИЛИ (МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено
					И Документ.ВалютаДенежныхСредств <> Константы.НациональнаяВалюта.Получить()) Тогда
				
				ДокументВВалюте = Истина;
			КонецЕсли;
			
			Если СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства Тогда
				Если СчетУНФ = ПланыСчетов.Управленческий.ФинансовыеВложения Тогда
					КодСчета = "58.03";
				ИначеЕсли ДокументВВалюте = Истина Тогда
					КодСчета = "57.21";
				Иначе
					КодСчета = "57.01";
				КонецЕсли;
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы Тогда
				Если Не ЭтоЗайм Тогда 
					Если Не ЗначениеЗаполнено(ТипСуммы)
						ИЛИ ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.01";
						Иначе
							КодСчета = "66.21";
						КонецЕсли;
					Иначе
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.02";
						Иначе
							КодСчета = "66.22";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(ТипСуммы)
						ИЛИ ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.03";
						Иначе
							КодСчета = "66.23";
						КонецЕсли;
					Иначе
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.04";
						Иначе
							КодСчета = "66.24";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Субконто1Вид = "Контрагенты";
				Субконто2Вид = "Договоры";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
				Если Не ДокументВВалюте Тогда
					КодСчета = "67.01";
				Иначе
					КодСчета = "67.21";
				КонецЕсли;
				Субконто1Вид = "Контрагенты";
				Субконто2Вид = "Договоры";
				
			ИначеЕсли СчетУНФ = ПланыСчетов.Управленческий.ПроцентыПоКредитам Тогда
				КодСчета = "91.02";
				Субконто1Вид = "ПрочиеДоходыИРасходы";
				
			ИначеЕсли СчетУНФ.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям Тогда
				Если СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы Тогда
					КодСчета = "73.01";
				Иначе
					КодСчета = СокрЛП(СчетУНФ.Код);
				КонецЕсли;
				Субконто1Вид = "РаботникиОрганизаций";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Дебиторы
				ИЛИ СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Кредиторы Тогда
				Если Не ДокументВВалюте Тогда
					КодСчета = "76.09";
				Иначе
					КодСчета = "76.29";
				КонецЕсли;
				Субконто1Вид = "Контрагенты";
				Субконто2Вид = "Договоры";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Капитал Тогда
				БухгалтерскийСчет = "80.09";
				
			ИначеЕсли СчетУНФ.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами Тогда
				КодСчета = "71.01";
				Субконто1Вид = "РаботникиОрганизаций";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы Тогда
				КодСчета = "91.01";
				Субконто1Вид = "ПрочиеДоходыИРасходы";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы Тогда
				КодСчета = "91.02";
				Субконто1Вид = "ПрочиеДоходыИРасходы";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
				Если СчетУНФ = ПланыСчетов.Управленческий.КоммерческиеРасходы Тогда
					Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") = Истина Тогда
						БухгалтерскийСчет = "44.02";
					Иначе
						БухгалтерскийСчет = "44.01";
					КонецЕсли;
				Иначе
					БухгалтерскийСчет = "26";
				КонецЕсли;
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
				Если СокрЛП(СчетУНФ.Код) <> "25" Тогда
					КодСчета = "26";
				КонецЕсли;
				Субконто1Вид = "СтатьиЗатрат";
			Иначе
				КодСчета = СокрЛП(СчетУНФ.Код);
			КонецЕсли;
			
			СтруктураСчетаБП.КодСчета = КодСчета;
			СтруктураСчетаБП.Субконто1Вид = Субконто1Вид;
			СтруктураСчетаБП.Субконто2Вид = Субконто2Вид;
			СтруктураСчетаБП.Субконто3Вид = Субконто3Вид;
			
			Возврат СтруктураСчетаБП;
КонецФункции
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидРасчетовРасширенный(АлгоритмКонвертации, Документ, СтрокаРП = Неопределено)
	ВидРасчетов = "";
		
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			ИЛИ АлгоритмКонвертации = "ОплатаПоставщику"
			
			ИЛИ АлгоритмКонвертации = "ВозвратОтПокупателя"
			ИЛИ АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			
			Если СтрокаРП <> Неопределено
				И СтрокаРП.ПризнакАванса Тогда
				ВидРасчетов = "Аванс";
			Иначе
				ВидРасчетов = "Долг";
			КонецЕсли;
			
		ИначеЕсли АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
			
			Если Не ЗначениеЗаполнено(Документ.ДоговорКредитаЗайма) Тогда
				Возврат ВидРасчетов;
			КонецЕсли;
			
			Если СтрокаРП = Неопределено Тогда
				СчетУчета = Документ.ДоговорКредитаЗайма.СчетУчета;
			Иначе
				Если ЗначениеЗаполнено(СтрокаРП.ТипСуммы)
					И СтрокаРП.ТипСуммы <> Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
					СчетУчета = Документ.ДоговорКредитаЗайма.СчетУчетаПроцентов;
				Иначе
					СчетУчета = Документ.ДоговорКредитаЗайма.СчетУчета;
				КонецЕсли;
			КонецЕсли;
			
			Если СчетУчета.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы Тогда
				Если СтрокаРП <> Неопределено
					И СтрокаРП.ТипСуммы <> Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
					ВидРасчетов = "ПроцентыПоКраткосрочнымКредитам";
				Иначе
					ВидРасчетов = "КраткосрочныеКредиты";
				КонецЕсли;
			ИначеЕсли СчетУчета.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
				Если СтрокаРП <> Неопределено
					И СтрокаРП.ТипСуммы <> Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
					ВидРасчетов = "ПроцентыПоДолгосрочнымКредитам";
				Иначе
					ВидРасчетов = "ДолгосрочныеКредиты";
				КонецЕсли;
			ИначеЕсли СчетУчета.ТипСчета = Перечисления.ТипыСчетов.ПроцентыПоКредитам Тогда
				СчетУчетаПроцентов = Документ.ДоговорКредитаЗайма.СчетУчета;
				Если СчетУчетаПроцентов.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
					ВидРасчетов = "ПроцентыПоДолгосрочнымКредитам";
				Иначе
					ВидРасчетов = "ПроцентыПоКраткосрочнымКредитам";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		Возврат ВидРасчетов;
КонецФункции
Функция ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации)
	Если АлгоритмКонвертации = "ОплатаОтПокупателя" Тогда
		Возврат "СПокупателем";
	ИначеЕсли АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда  
		Возврат "СПоставщиком";
	ИначеЕсли АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда  
		Возврат "КредитыИЗаймы";
	Иначе
		Возврат "Прочее";
	КонецЕсли;
КонецФункции
Функция ВидРасчетовСКонтрагентомСписание(АлгоритмКонвертации)
	Если АлгоритмКонвертации = "ОплатаПоставщику" Тогда
		Возврат "СПоставщиком";
	ИначеЕсли АлгоритмКонвертации = "ВозвратОтПокупателя" Тогда  
		Возврат "СПокупателем";
	ИначеЕсли АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда  
		Возврат "КредитыИЗаймы";
	Иначе
		Возврат "Прочее";
	КонецЕсли;
КонецФункции
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	// Выгрузка данных о ФИО.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Период КАК НачалоПериода,
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ РегистрСведений.ФИОФизЛиц
	|ГДЕ ФизЛицо = &ФизЛицо";
	Запрос.УстановитьПараметр("ФизЛицо", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации)
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	ТабРП.Колонки.Добавить("ДокументРасчетов");
	ТабРП.Колонки.Добавить("СпособПогашенияЗадолженности");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовПоАвансам");
	
	РП_ИБ = ДанныеИБ.РасшифровкаПлатежа.Выгрузить();
	
	Если АлгоритмКонвертации = "ОплатаОтПокупателя"
		Или АлгоритмКонвертации = "ВозвратОтПоставщика"
		Или АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
		Или АлгоритмКонвертации = "ВозвратЗаймаРаботником" Тогда
		
		// Многострочная расшифровка платежа.
	
		Для Каждого СтрокаРП_ИБ ИЗ РП_ИБ Цикл
			
			СтрокаРП = ТабРП.Добавить();
			СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
			СтрокаРП.Сумма = СтрокаРП_ИБ.СуммаПлатежа;
			СтрокаРП.СуммаВзаиморасчетов = СтрокаРП_ИБ.СуммаРасчетов;
			
			Если АлгоритмКонвертации = "ОплатаОтПокупателя"
				Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
				
				//Сумма НДС и СтавкаНДС
				СтрокаРП.СуммаНДС = СтрокаРП_ИБ.СуммаНДС;
				СтрокаРП.СтавкаНДС = СтавкаНДССтрокой_Отправка(СтрокаРП_ИБ.СтавкаНДС);
			КонецЕсли;
			
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
				ИЛИ АлгоритмКонвертации = "ВозвратЗаймаРаботником" Тогда
				СтрокаРП.Договор = СтруктураДоговораКредитаИЗайма(ДанныеИБ, ДанныеИБ.ДоговорКредитаЗайма);
			Иначе
				СтрокаРП.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаРП_ИБ.Договор);
			КонецЕсли;
			
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			Если Не ЗначениеЗаполнено(СтрокаРП.ВалютаВзаиморасчетов) Тогда
				СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов;
			КонецЕсли;
			
			СтрокаРП.КурсВзаиморасчетов = СтрокаРП_ИБ.Курс;
			СтрокаРП.КратностьВзаиморасчетов = СтрокаРП_ИБ.Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = СтрокаРП_ИБ.Договор.РасчетыВУсловныхЕдиницах;
			
			//ДокументРасчетов
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.Документ) Тогда
				
				ИмяПКО = ИмяПКОДляДокумента(СтрокаРП_ИБ.Документ);
				Если ИмяПКО <> "" Тогда
					СтрокаРП.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Документ, ИмяПКО);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.СчетНаОплату)
				И ТипЗнч(СтрокаРП_ИБ.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплату") Тогда
				СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.СчетНаОплату, "Документ_СчетНаОплатуПокупателю_Отправка");
			КонецЕсли;
			
			СтрокаРП.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаРП_ИБ);
			
			КодСчета = "";
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
				
				Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
					КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
				Иначе
					Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
						СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
					Иначе
						СчетУчета = ДанныеИБ.Корреспонденция;
					КонецЕсли;
					ЭтоЗайм = АлгоритмКонвертации = "ВозвратЗаймаРаботником";
					СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ, СтрокаРП_ИБ.ТипСуммы, ЭтоЗайм);
					КодСчета = СтруктураСчета.КодСчета;
				КонецЕсли;
			КонецЕсли;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			
		КонецЦикла;
		
		СтрокаРП.ВидРасчетовРасширенный = ВидРасчетовРасширенный(АлгоритмКонвертации, ДанныеИБ, СтрокаРП_ИБ);
		
	Иначе
	
		// Однострочная расшифровка платежа
		
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
		
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		    СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, ДанныеИБ.РасшифровкаПлатежа[0].Договор);
		    СтрокаРП.Договор = СтруктураДоговора;
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			Если Не ЗначениеЗаполнено(СтрокаРП.ВалютаВзаиморасчетов) Тогда
				СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов;
			КонецЕсли;
			СтрокаРП.КурсВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Курс;
			СтрокаРП.КратностьВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = ДанныеИБ.РасшифровкаПлатежа[0].Договор.РасчетыВУсловныхЕдиницах;
			
			КодСчета = "";
				
			Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
				КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
			Иначе
				Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
					СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
				Иначе
					СчетУчета = ДанныеИБ.Корреспонденция;
				КонецЕсли;
				СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
				КодСчета = СтруктураСчета.КодСчета;
			КонецЕсли;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации)
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	ТабРП.Колонки.Добавить("ДокументРасчетов");
	ТабРП.Колонки.Добавить("СпособПогашенияЗадолженности");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовПоАвансам");
	
	РП_ИБ = ДанныеИБ.РасшифровкаПлатежа.Выгрузить();
	
	Если АлгоритмКонвертации = "ОплатаПоставщику"
		Или АлгоритмКонвертации = "ВозвратОтПокупателя"
		Или АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
		Или АлгоритмКонвертации = "ВыдачаЗаймаРаботнику" Тогда
		
		// Многострочная расшифровка платежа.
	
		Для Каждого СтрокаРП_ИБ ИЗ РП_ИБ Цикл
			
			СтрокаРП = ТабРП.Добавить();
			СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
			СтрокаРП.Сумма = СтрокаРП_ИБ.СуммаПлатежа;
			СтрокаРП.СуммаВзаиморасчетов = СтрокаРП_ИБ.СуммаРасчетов;
			
			Если АлгоритмКонвертации = "ОплатаПоставщику"
				Или АлгоритмКонвертации = "ВозвратОтПокупателя" Тогда
				
				//Сумма НДС и СтавкаНДС
				СтрокаРП.СуммаНДС = СтрокаРП_ИБ.СуммаНДС;
				СтрокаРП.СтавкаНДС = СтавкаНДССтрокой_Отправка(СтрокаРП_ИБ.СтавкаНДС);
			КонецЕсли;
			
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
				ИЛИ АлгоритмКонвертации = "ВыдачаЗаймаРаботнику" Тогда
				СтрокаРП.Договор = СтруктураДоговораКредитаИЗайма(ДанныеИБ, ДанныеИБ.ДоговорКредитаЗайма);
			Иначе
				СтрокаРП.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаРП_ИБ.Договор);
			КонецЕсли;
			
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			СтрокаРП.КурсВзаиморасчетов = СтрокаРП_ИБ.Курс;
			СтрокаРП.КратностьВзаиморасчетов = СтрокаРП_ИБ.Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = СтрокаРП_ИБ.Договор.РасчетыВУсловныхЕдиницах;
			
			//ДокументРасчетов
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.Документ) Тогда
				
				ИмяПКО = ИмяПКОДляДокумента(СтрокаРП_ИБ.Документ);
				Если ИмяПКО <> "" Тогда
					СтрокаРП.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Документ, ИмяПКО);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.СчетНаОплату)
				И ТипЗнч(СтрокаРП_ИБ.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
				СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.СчетНаОплату, "Документ_СчетНаОплатуПоставщика_Отправка");
			КонецЕсли;
					
			СтрокаРП.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаРП_ИБ);
			
			КодСчета = "";
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
				
				Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
					КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
				Иначе
					Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
						СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
					Иначе
						СчетУчета = ДанныеИБ.Корреспонденция;
					КонецЕсли;
					ЭтоЗайм = АлгоритмКонвертации = "ВыдачаЗаймаРаботнику";
					СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ, СтрокаРП_ИБ.ТипСуммы, ЭтоЗайм);
					КодСчета = СтруктураСчета.КодСчета;
				КонецЕсли;
			КонецЕсли;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			СтрокаРП.ВидРасчетовРасширенный = ВидРасчетовРасширенный(АлгоритмКонвертации, ДанныеИБ, СтрокаРП_ИБ);
		КонецЦикла;
		
		
	Иначе
	
		// Однострочная расшифровка платежа
		
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
		
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		    СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, ДанныеИБ.РасшифровкаПлатежа[0].Договор);
		    СтрокаРП.Договор = СтруктураДоговора;
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			СтрокаРП.КурсВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Курс;
			СтрокаРП.КратностьВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = ДанныеИБ.РасшифровкаПлатежа[0].Договор.РасчетыВУсловныхЕдиницах;
			
			КодСчета = "";
				
			Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
				КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
			Иначе
				Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
					СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
				Иначе
					СчетУчета = ДанныеИБ.Корреспонденция;
				КонецЕсли;
				СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
				КодСчета = СтруктураСчета.КодСчета;
			КонецЕсли;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Функция ДанныеДокументаАвансовыйОтчет(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураПолученный.Контрагент КАК Поставщик,
		|	СчетФактураПолученный.Ссылка КАК СчетФактура,
		|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСФ,
		|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСФ,
		|	ИСТИНА КАК ПредъявленСФ
		|ПОМЕСТИТЬ Вт_СФ
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетВыданныеАвансы.Документ КАК ДокументАванса,
		|	АвансовыйОтчетВыданныеАвансы.Сумма
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	АвансовыйОтчетЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АвансовыйОтчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА АвансовыйОтчетЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ АвансовыйОтчетЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АвансовыйОтчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(АвансовыйОтчетЗапасы.Количество * АвансовыйОтчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ АвансовыйОтчетЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АвансовыйОтчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И АвансовыйОтчетЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(АвансовыйОтчетЗапасы.Цена / АвансовыйОтчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ АвансовыйОтчетЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	АвансовыйОтчетЗапасы.Сумма,
		|	АвансовыйОтчетЗапасы.СтавкаНДС,
		|	АвансовыйОтчетЗапасы.СуммаНДС,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА АвансовыйОтчетЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И АвансовыйОтчетЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	АвансовыйОтчетЗапасы.Всего,
		|	АвансовыйОтчетЗапасы.Характеристика,
		|	АвансовыйОтчетЗапасы.Партия,
		|	Вт_СФ.Поставщик,
		|	Вт_СФ.ПредъявленСФ,
		|	Вт_СФ.ДатаСФ,
		|	Вт_СФ.НомерСФ,
		|	Вт_СФ.СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчетЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_СФ КАК Вт_СФ
		|		ПО (ИСТИНА)
		|ГДЕ
		|	АвансовыйОтчетЗапасы.Ссылка = &Ссылка
		|	И АвансовыйОтчетЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетРасходы.ДатаВходящегоДокумента,
		|	АвансовыйОтчетРасходы.НомерВходящегоДокумента,
		|	АвансовыйОтчетРасходы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(АвансовыйОтчетРасходы.Содержание, 1, 10) = """"
		|			ТОГДА АвансовыйОтчетРасходы.Номенклатура.Наименование
		|	КОНЕЦ КАК Содержание,
		|	АвансовыйОтчетРасходы.СтавкаНДС,
		|	АвансовыйОтчетРасходы.Сумма,
		|	АвансовыйОтчетРасходы.СуммаНДС,
		|	АвансовыйОтчетРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
		|	Вт_СФ.Поставщик,
		|	Вт_СФ.ПредъявленСФ,
		|	Вт_СФ.ДатаСФ,
		|	Вт_СФ.НомерСФ,
		|	Вт_СФ.СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Расходы КАК АвансовыйОтчетРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_СФ КАК Вт_СФ
		|		ПО (ИСТИНА)
		|ГДЕ
		|	АвансовыйОтчетРасходы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетОплаты.ДатаВходящегоДокумента,
		|	АвансовыйОтчетОплаты.НомерВходящегоДокумента,
		|	АвансовыйОтчетОплаты.Контрагент,
		|	АвансовыйОтчетОплаты.Договор КАК ДоговорКонтрагента,
		|	АвансовыйОтчетОплаты.Кратность КАК КратностьВзаиморасчетов,
		|	АвансовыйОтчетОплаты.Курс КАК КурсВзаиморасчетов,
		|	АвансовыйОтчетОплаты.СуммаПлатежа КАК Сумма,
		|	АвансовыйОтчетОплаты.СуммаРасчетов КАК СуммаВзаиморасчетов,
		|	АвансовыйОтчетОплаты.ПризнакАванса КАК ПризнакАванса,
		|	АвансовыйОтчетОплаты.Документ КАК Документ
		|ИЗ
		|	Документ.АвансовыйОтчет.Оплаты КАК АвансовыйОтчетОплаты";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаАвансы = РезультатыЗапроса[1].Выгрузить();
		Результат.Вставить("ВыданныеАвансы", ТаблицаАвансы);
		
		ТаблицаТовары = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТовары);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		ТаблицаРасходы = РезультатыЗапроса[3].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаРасходы);
		Результат.Вставить("ПрочиеРасходы", ТаблицаРасходы);
		
		ТаблицаОплаты = РезультатыЗапроса[4].Выгрузить();
		Результат.Вставить("ОплатаПоставщикам", ТаблицаОплаты);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаАктВыполненныхРабот(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктВыполненныхРаботРаботыИУслуги.НомерСтроки КАК НомерСтрокиДокумента,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Количество * АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Цена / АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Цена
		|	КОНЕЦ КАК Цена,
		|	АктВыполненныхРаботРаботыИУслуги.Сумма,
		|	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС,
		|	АктВыполненныхРаботРаботыИУслуги.СуммаНДС,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
		|				И (АктВыполненныхРаботРаботыИУслуги.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
		|					ИЛИ АктВыполненныхРаботРаботыИУслуги.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроизводственныйРасход,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(АктВыполненныхРаботРаботыИУслуги.Содержание, 1, 100) = """"
		|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
		|ГДЕ
		|	АктВыполненныхРаботРаботыИУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктВыполненныхРаботПредоплата.Документ КАК Документ,
		|	АктВыполненныхРаботПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.АктВыполненныхРабот.Предоплата КАК АктВыполненныхРаботПредоплата
		|ГДЕ
		|	АктВыполненныхРаботПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаУслуги = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = РезультатыЗапроса[1].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);		
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаВзаимозачет(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаимозачетДебитор.Договор КАК ДоговорКонтрагента,
		|	ВзаимозачетДебитор.Документ,
		|	ВзаимозачетДебитор.Заказ,
		|	ВзаимозачетДебитор.Курс,
		|	ВзаимозачетДебитор.Кратность,
		|	ВзаимозачетДебитор.ПризнакАванса,
		|	ВзаимозачетДебитор.СуммаРасчетов КАК СуммаВзаиморасчетов,
		|	ВзаимозачетДебитор.СуммаУчета,
		|	ВзаимозачетДебитор.СчетНаОплату
		|ИЗ
		|	Документ.Взаимозачет.Дебитор КАК ВзаимозачетДебитор
		|ГДЕ
		|	ВзаимозачетДебитор.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаимозачетКредитор.Договор КАК ДоговорКонтрагента,
		|	ВзаимозачетКредитор.Документ,
		|	ВзаимозачетКредитор.Заказ,
		|	ВзаимозачетКредитор.Курс,
		|	ВзаимозачетКредитор.Кратность,
		|	ВзаимозачетКредитор.ПризнакАванса,
		|	ВзаимозачетКредитор.СуммаРасчетов КАК СуммаВзаиморасчетов,
		|	ВзаимозачетКредитор.СуммаУчета,
		|	ВзаимозачетКредитор.СчетНаОплату
		|ИЗ
		|	Документ.Взаимозачет.Кредитор КАК ВзаимозачетКредитор
		|ГДЕ
		|	ВзаимозачетКредитор.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаДебитор = РезультатыЗапроса[0].Выгрузить();
		ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаДебитор);
		Результат.Вставить("ДебиторскаяЗадолженность", ТаблицаДебитор);
		
		ТаблицаКредитор = РезультатыЗапроса[1].Выгрузить();
		ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаКредитор);
		Результат.Вставить("КредиторскаяЗадолженность", ТаблицаКредитор);
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		Если ТаблицаДебитор.Количество() > 0 И ЗначениеЗаполнено(ТаблицаДебитор[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда 
			ВалютаДокумента = ТаблицаДебитор[0].ДоговорКонтрагента.ВалютаРасчетов;
		ИначеЕсли ТаблицаКредитор.Количество() > 0 И ЗначениеЗаполнено(ТаблицаКредитор[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда
			ВалютаДокумента = ТаблицаКредитор[0].ДоговорКонтрагента.ВалютаРасчетов;
		Иначе
			ВалютаДокумента = НациональнаяВалюта;
		КонецЕсли;
		
		Результат.Вставить("Валюта", ВалютаДокумента);
		
		Если ВалютаДокумента = НациональнаяВалюта Тогда
			СуммаДтЗадолженности = ТаблицаДебитор.Итог("Сумма");
			СуммаКтЗадолженности = ТаблицаКредитор.Итог("Сумма");
		Иначе
			СуммаДтЗадолженности = ТаблицаДебитор.Итог("СуммаВзаиморасчетов");
			СуммаКтЗадолженности = ТаблицаКредитор.Итог("СуммаВзаиморасчетов");
		КонецЕсли;
		
		Результат.Вставить("СуммаДебиторскойЗадолженности", СуммаДтЗадолженности);
		Результат.Вставить("СуммаКредиторскойЗадолженности", СуммаКтЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаДополнительныеРасходы(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРасходыРасходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ДополнительныеРасходыРасходы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДополнительныеРасходыРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ДополнительныеРасходыРасходы.Количество * ДополнительныеРасходыРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ДополнительныеРасходыРасходы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДополнительныеРасходыРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ДополнительныеРасходыРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ДополнительныеРасходыРасходы.Цена / ДополнительныеРасходыРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ДополнительныеРасходыРасходы.Цена
		|	КОНЕЦ КАК Цена,
		|	ДополнительныеРасходыРасходы.Сумма,
		|	ДополнительныеРасходыРасходы.СтавкаНДС,
		|	ДополнительныеРасходыРасходы.СуммаНДС,
		|	ДополнительныеРасходыРасходы.Номенклатура.НаименованиеПолное КАК Содержание,
		|	ИСТИНА КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ДополнительныеРасходы.Расходы КАК ДополнительныеРасходыРасходы
		|ГДЕ
		|	ДополнительныеРасходыРасходы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРасходыЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДополнительныеРасходыЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ДополнительныеРасходыЗапасы.Количество * ДополнительныеРасходыЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ДополнительныеРасходыЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ДополнительныеРасходыЗапасы.Всего КАК СтоимостьТоваров,
		|	ДополнительныеРасходыЗапасы.ДокументПоступления КАК ДокументПоступления,
		|	ДополнительныеРасходыЗапасы.СуммаРасходов КАК Сумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ДополнительныеРасходыЗапасы.Ссылка.СуммаВключаетНДС
		|				ТОГДА ДополнительныеРасходыЗапасы.СуммаРасходов - ДополнительныеРасходыЗапасы.СуммаРасходов / ((ДополнительныеРасходыЗапасы.СтавкаНДС.Ставка + 100) / 100)
		|			ИНАЧЕ ДополнительныеРасходыЗапасы.СуммаРасходов * ДополнительныеРасходыЗапасы.СтавкаНДС.Ставка / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС
		|ИЗ
		|	Документ.ДополнительныеРасходы.Запасы КАК ДополнительныеРасходыЗапасы
		|ГДЕ
		|	ДополнительныеРасходыЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРасходыПредоплата.Документ КАК Документ,
		|	ДополнительныеРасходыПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ДополнительныеРасходы.Предоплата КАК ДополнительныеРасходыПредоплата
		|ГДЕ
		|	ДополнительныеРасходыПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаУслуги = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Результат.Вставить("РасшифровкаДопРасходов", РезультатыЗапроса[1].Выгрузить());
		
		ПогашениеЗадолженности = РезультатыЗапроса[2].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаЗаказНаряд(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяРаботы.НомерСтроки,
		|	ЗаказПокупателяРаботы.Номенклатура,
		|	ЗаказПокупателяРаботы.Спецификация,
		|	ЗаказПокупателяРаботы.Количество,
		|	ЗаказПокупателяРаботы.Цена,
		|	ЗаказПокупателяРаботы.Сумма,
		|	ЗаказПокупателяРаботы.СтавкаНДС,
		|	ЗаказПокупателяРаботы.СуммаНДС,
		|	ЗаказПокупателяРаботы.Номенклатура.КатегорияНоменклатуры КАК НоменклатурнаяГруппа,
		|	ЗаказПокупателяРаботы.Содержание
		|ПОМЕСТИТЬ Вт_Работы
		|ИЗ
		|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|ГДЕ
		|	ЗаказПокупателяРаботы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяМатериалы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяМатериалы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяМатериалы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяМатериалы.Количество * ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество
		|	КОНЕЦ КАК Количество,
		|	ПОДСТРОКА(ЗаказПокупателяМатериалы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	ЗаказПокупателяМатериалы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяМатериалы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЗаказПокупателяМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЗаказПокупателяМатериалы.Характеристика,
		|	ЗаказПокупателяМатериалы.Партия,
		|	НЕОПРЕДЕЛЕНО КАК Заказчик
		|ИЗ
		|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
		|ГДЕ
		|	ЗаказПокупателяМатериалы.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяМатериалыЗаказчика.НомерСтроки,
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяМатериалыЗаказчика.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяМатериалыЗаказчика.Количество * ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.Количество
		|	КОНЕЦ,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)),
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
		|	ВЫРАЗИТЬ(""ДавальческиеСырьеИМатериалы"" КАК СТРОКА(27)),
		|	ЗаказПокупателяМатериалыЗаказчика.Характеристика,
		|	ЗаказПокупателяМатериалыЗаказчика.ДатаПоступления,
		|	ЗаказПокупателяМатериалыЗаказчика.Ссылка.Контрагент
		|ИЗ
		|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалыЗаказчика
		|ГДЕ
		|	ЗаказПокупателяМатериалыЗаказчика.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЗаказПокупателяЗапасы.Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС,
		|	ПОДСТРОКА(ЗаказПокупателяЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	ЗаказПокупателяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЗаказПокупателяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЗаказПокупателяЗапасы.Всего,
		|	ЗаказПокупателяЗапасы.Характеристика,
		|	ЗаказПокупателяЗапасы.Партия
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт_Работы.НомерСтроки КАК НомерСтрокиДокумента,
		|	Вт_Работы.Номенклатура,
		|	Вт_Работы.Количество КАК Количество,
		|	Вт_Работы.Цена КАК Цена,
		|	Вт_Работы.Сумма,
		|	Вт_Работы.СтавкаНДС,
		|	Вт_Работы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Вт_Работы.Содержание, 1, 100) = """"
		|			ТОГДА Вт_Работы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ Вт_Работы.Содержание
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Вт_Работы КАК Вт_Работы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки,
		|	ЗаказПокупателяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ,
		|	ЗаказПокупателяЗапасы.Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЗаказПокупателяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Содержание
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяПредоплата.Документ КАК Документ,
		|	ЗаказПокупателяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ЗаказПокупателя.Предоплата КАК ЗаказПокупателяПредоплата
		|ГДЕ
		|	ЗаказПокупателяПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаМатериалы = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаМатериалы, ДанныеИБ.Ссылка);
		Результат.Вставить("Материалы", ТаблицаМатериалы);
		
		ТаблицаТовары = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТовары);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		ТаблицаУслуги = РезультатыЗапроса[3].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = РезультатыЗапроса[4].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаИнвентаризацияЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
		Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУчета.Получить());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ИнвентаризацияЗапасовЗапасы.Количество * ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ИнвентаризацияЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ИнвентаризацияЗапасовЗапасы.КоличествоУчет * ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ИнвентаризацияЗапасовЗапасы.КоличествоУчет
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоУчет,
		|	ВЫРАЗИТЬ(ИнвентаризацияЗапасовЗапасы.Сумма * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ / ВЫБОР
		|			КОГДА ИнвентаризацияЗапасовЗапасы.Количество = 0
		|				ТОГДА 1
		|			КОГДА ТИПЗНАЧЕНИЯ(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ИнвентаризацияЗапасовЗапасы.Количество * ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ИнвентаризацияЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ(ИнвентаризацияЗапасовЗапасы.Сумма * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ВЫРАЗИТЬ(ИнвентаризацияЗапасовЗапасы.СуммаУчет * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУчет,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ИнвентаризацияЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ИнвентаризацияЗапасовЗапасы.Ссылка = &Ссылка";
		
		РезультатыЗапроса = Запрос.Выполнить();
		
		ТаблицаТоваров = РезультатыЗапроса.Выгрузить();
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаКорректировкаПоступления(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаПоступленияЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаПоступленияЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА КорректировкаПоступленияЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.Количество * КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.Цена / КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаПоступленияЗапасы.Сумма,
		|	КорректировкаПоступленияЗапасы.СтавкаНДС,
		|	КорректировкаПоступленияЗапасы.СуммаНДС,
		|	ПОДСТРОКА(КорректировкаПоступленияЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	КорректировкаПоступленияЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТДДоИзменения,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПУстаяСсылка) КАК СтранаПроисхожденияДоИзменения,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
		|				И КорректировкаПоступленияЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И КорректировкаПоступленияЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	КорректировкаПоступленияЗапасы.Всего,
		|	КорректировкаПоступленияЗапасы.Характеристика,
		|	КорректировкаПоступленияЗапасы.Партия,
		|	КорректировкаПоступленияЗапасы.КоличествоДоКорректировки,
		|	КорректировкаПоступленияЗапасы.КоличествоДоИзменения,
		|	КорректировкаПоступленияЗапасы.ЦенаДоКорректировки,
		|	КорректировкаПоступленияЗапасы.ЦенаДоИзменения,
		|	КорректировкаПоступленияЗапасы.СуммаДоКорректировки,
		|	КорректировкаПоступленияЗапасы.СуммаДоИзменения,
		|	КорректировкаПоступленияЗапасы.СтавкаНДСДоИзменения,
		|	КорректировкаПоступленияЗапасы.СуммаНДСДоКорректировки,
		|	КорректировкаПоступленияЗапасы.СуммаНДСДоИзменения,
		|	КорректировкаПоступленияЗапасы.ВсегоДоКорректировки,
		|	КорректировкаПоступленияЗапасы.ВсегоДоИзменения,
		|	КорректировкаПоступленияЗапасы.ЕстьВДокументеПоступления
		|ИЗ
		|	Документ.КорректировкаПоступления.Запасы КАК КорректировкаПоступленияЗапасы
		|ГДЕ
		|	КорректировкаПоступленияЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаПоступленияРасходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаПоступленияРасходы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.Количество * КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.Цена / КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаПоступленияРасходы.Сумма,
		|	КорректировкаПоступленияРасходы.СтавкаНДС,
		|	КорректировкаПоступленияРасходы.СуммаНДС,
		|	КорректировкаПоступленияРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияРасходы.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
		|				И (КорректировкаПоступленияРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
		|					ИЛИ КорректировкаПоступленияРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроизводственныйРасход,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаПоступленияРасходы.Содержание, 1, 100) = """"
		|			ТОГДА КорректировкаПоступленияРасходы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияРасходы.Ссылка.ВключатьРасходыВСебестоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоДопРасходы,
		|	КорректировкаПоступленияРасходы.КоличествоДоКорректировки,
		|	КорректировкаПоступленияРасходы.КоличествоДоИзменения,
		|	КорректировкаПоступленияРасходы.ЦенаДоКорректировки,
		|	КорректировкаПоступленияРасходы.ЦенаДоИзменения,
		|	КорректировкаПоступленияРасходы.СуммаДоКорректировки,
		|	КорректировкаПоступленияРасходы.СуммаДоИзменения,
		|	КорректировкаПоступленияРасходы.СтавкаНДСДоИзменения,
		|	КорректировкаПоступленияРасходы.СуммаНДСДоКорректировки,
		|	КорректировкаПоступленияРасходы.СуммаНДСДоИзменения,
		|	КорректировкаПоступленияРасходы.ВсегоДоКорректировки,
		|	КорректировкаПоступленияРасходы.ВсегоДоИзменения,
		|	КорректировкаПоступленияРасходы.СодержаниеДоИзменения,
		|	КорректировкаПоступленияРасходы.ЕстьВДокументеПоступления
		|ИЗ
		|	Документ.КорректировкаПоступления.Расходы КАК КорректировкаПоступленияРасходы
		|ГДЕ
		|	КорректировкаПоступленияРасходы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаКорректировкаРеализации(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеализацииЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаРеализацииЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Количество * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаРеализацииЗапасы.Сумма,
		|	КорректировкаРеализацииЗапасы.СтавкаНДС,
		|	КорректировкаРеализацииЗапасы.СуммаНДС,
		|	ПОДСТРОКА(КорректировкаРеализацииЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	КорректировкаРеализацииЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТДДоИзменения,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПУстаяСсылка) КАК СтранаПроисхожденияДоИзменения,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализацииЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И КорректировкаРеализацииЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	КорректировкаРеализацииЗапасы.Всего,
		|	КорректировкаРеализацииЗапасы.Характеристика,
		|	КорректировкаРеализацииЗапасы.Партия,
		|	КорректировкаРеализацииЗапасы.КоличествоДоКорректировки,
		|	КорректировкаРеализацииЗапасы.КоличествоДоИзменения,
		|	КорректировкаРеализацииЗапасы.ЦенаДоКорректировки,
		|	КорректировкаРеализацииЗапасы.ЦенаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СтавкаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации,
		|	КорректировкаРеализацииЗапасы.ВсегоДоКорректировки,
		|	КорректировкаРеализацииЗапасы.ВсегоДоИзменения
		|ИЗ
		|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
		|ГДЕ
		|	КорректировкаРеализацииЗапасы.Ссылка = &Ссылка
		|	И КорректировкаРеализацииЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаРеализацииЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаРеализацииЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Количество * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаРеализацииЗапасы.Сумма,
		|	КорректировкаРеализацииЗапасы.СтавкаНДС,
		|	КорректировкаРеализацииЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаРеализацииЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА КорректировкаРеализацииЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание,
		|	КорректировкаРеализацииЗапасы.КоличествоДоКорректировки,
		|	КорректировкаРеализацииЗапасы.КоличествоДоИзменения,
		|	КорректировкаРеализацииЗапасы.ЦенаДоКорректировки,
		|	КорректировкаРеализацииЗапасы.ЦенаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СтавкаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации,
		|	КорректировкаРеализацииЗапасы.ВсегоДоКорректировки,
		|	КорректировкаРеализацииЗапасы.ВсегоДоИзменения,
		|	КорректировкаРеализацииЗапасы.СодержаниеДоИзменения
		|ИЗ
		|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
		|ГДЕ
		|	КорректировкаРеализацииЗапасы.Ссылка = &Ссылка
		|	И КорректировкаРеализацииЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаНачисленияПоКредитамИЗаймам(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияПоКредитамИЗаймамНачисления.НомерСтроки,
		|	НачисленияПоКредитамИЗаймамНачисления.Дата,
		|	ВЫБОР
		|		КОГДА НачисленияПоКредитамИЗаймамНачисления.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИЗаймов.Проценты)
		|			ТОГДА ""Проценты""
		|		ИНАЧЕ ""Комиссия""
		|	КОНЕЦ КАК ТипСуммыГрафика,
		|	НачисленияПоКредитамИЗаймамНачисления.Сотрудник,
		|	НачисленияПоКредитамИЗаймамНачисления.Контрагент КАК Кредитор,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма,
		|	НачисленияПоКредитамИЗаймамНачисления.Сумма,
		|	НачисленияПоКредитамИЗаймамНачисления.Сумма КАК СуммаВзаиморасчетов,
		|	НачисленияПоКредитамИЗаймамНачисления.ВалютаРасчетов КАК ВалютаВзаиморасчетов,
		|	НачисленияПоКредитамИЗаймамНачисления.ТипСуммы КАК ТипСуммы,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчета.ТипСчета КАК ТипСчета,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчета КАК СчетУчета,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчетаПроцентов КАК СчетУчетаПроцентов,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчетаКомиссии КАК СчетУчетаКомиссии,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетЗатрат КАК СчетЗатрат
		|ИЗ
		|	Документ.НачисленияПоКредитамИЗаймам.Начисления КАК НачисленияПоКредитамИЗаймамНачисления
		|ГДЕ
		|	НачисленияПоКредитамИЗаймамНачисления.Ссылка = &Ссылка
		|	И (НачисленияПоКредитамИЗаймамНачисления.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИЗаймов.Проценты)
		|			ИЛИ НачисленияПоКредитамИЗаймамНачисления.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИЗаймов.Комиссия))";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаНачисления = РезультатЗапроса.Выгрузить();
		Результат.Вставить("Начисления", ТаблицаНачисления);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОприходованиеЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОприходованиеЗапасовЗапасы.Номенклатура,
		|	ОприходованиеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ОприходованиеЗапасовЗапасы.Количество * ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ ОприходованиеЗапасовЗапасы.Количество
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ОприходованиеЗапасовЗапасы.Сумма * ВЫБОР
		|		КОГДА &РегВалюта <> &УпрВалюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ / ВЫБОР
		|		КОГДА ОприходованиеЗапасовЗапасы.Количество = 0
		|			ТОГДА 1
		|		КОГДА ТИПЗНАЧЕНИЯ(ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ОприходованиеЗапасовЗапасы.Количество * ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ ОприходованиеЗапасовЗапасы.Количество
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ(ОприходованиеЗапасовЗапасы.Сумма * ВЫБОР
		|		КОГДА &РегВалюта <> &УпрВалюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ПОДСТРОКА(ОприходованиеЗапасовЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	ОприходованиеЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОприходованиеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОприходованиеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ОприходованиеЗапасовЗапасы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
		Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУчета.Получить());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТовары = РезультатЗапроса.Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетКомиссионера(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомиссионераЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетКомиссионераЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетКомиссионераЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетКомиссионераЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетКомиссионераЗапасы.Количество * ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетКомиссионераЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетКомиссионераЗапасы.Цена / ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетКомиссионераЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетКомиссионераЗапасы.Сумма,
		|	ОтчетКомиссионераЗапасы.СтавкаНДС,
		|	ОтчетКомиссионераЗапасы.СуммаНДС,
		|	ПОДСТРОКА(ОтчетКомиссионераЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	ОтчетКомиссионераЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетКомиссионераЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетКомиссионераЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетКомиссионераЗапасы.Всего,
		|	ОтчетКомиссионераЗапасы.Характеристика,
		|	ОтчетКомиссионераЗапасы.Партия,
		|	ОтчетКомиссионераЗапасы.ЦенаПередачи,
		|	ОтчетКомиссионераЗапасы.СуммаПередачи,
		|	ОтчетКомиссионераЗапасы.СуммаВознаграждения,
		|	ОтчетКомиссионераЗапасы.СуммаНДСВознаграждения,
		|	ОтчетКомиссионераЗапасы.КлючСвязи+1 КАК КлючСтроки
		|ИЗ
		|	Документ.ОтчетКомиссионера.Запасы КАК ОтчетКомиссионераЗапасы
		|ГДЕ
		|	ОтчетКомиссионераЗапасы.Ссылка = &Ссылка
		|	И ОтчетКомиссионераЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетКомиссионераПокупатели.НомерСтроки,
		|	ОтчетКомиссионераПокупатели.Покупатель,
		|	ОтчетКомиссионераПокупатели.ВыставленСФ,
		|	ОтчетКомиссионераПокупатели.ДатаСФ,
		|	ОтчетКомиссионераПокупатели.СчетФактура,
		|	ОтчетКомиссионераПокупатели.КлючСвязи+1 КАК КлючСтроки
		|ИЗ
		|	Документ.ОтчетКомиссионера.Покупатели КАК ОтчетКомиссионераПокупатели
		|ГДЕ
		|	ОтчетКомиссионераПокупатели.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетКомиссионераПредоплата.Документ КАК Документ,
		|	ОтчетКомиссионераПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ОтчетКомиссионера.Предоплата КАК ОтчетКомиссионераПредоплата
		|ГДЕ
		|	ОтчетКомиссионераПредоплата.Ссылка = &Ссылка";
			
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаПокупатели = РезультатыЗапроса[1].Выгрузить();
		Результат.Вставить("Покупатели", ТаблицаПокупатели);
		
		ПогашениеЗадолженности = РезультатыЗапроса[2].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетКомитента(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомитентуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетКомитентуЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомитентуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетКомитентуЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетКомитентуЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомитентуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетКомитентуЗапасы.Количество * ОтчетКомитентуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетКомитентуЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомитентуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетКомитентуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетКомитентуЗапасы.Цена / ОтчетКомитентуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетКомитентуЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетКомитентуЗапасы.Сумма,
		|	ОтчетКомитентуЗапасы.СтавкаНДС,
		|	ОтчетКомитентуЗапасы.СуммаНДС,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетКомитентуЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетКомитентуЗапасы.Всего,
		|	ОтчетКомитентуЗапасы.Характеристика,
		|	ОтчетКомитентуЗапасы.Партия,
		|	ОтчетКомитентуЗапасы.ЦенаПоступления,
		|	ОтчетКомитентуЗапасы.СуммаПоступления,
		|	ОтчетКомитентуЗапасы.СуммаВознаграждения,
		|	ОтчетКомитентуЗапасы.СуммаНДСВознаграждения,
		|	ОтчетКомитентуЗапасы.Покупатель,
		|	ОтчетКомитентуЗапасы.ДатаРеализации
		|ИЗ
		|	Документ.ОтчетКомитенту.Запасы КАК ОтчетКомитентуЗапасы
		|ГДЕ
		|	ОтчетКомитентуЗапасы.Ссылка = &Ссылка
		|	И ОтчетКомитентуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТоваров = РезультатЗапроса.Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетОПереработке(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОПереработкеПродукция.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОПереработкеПродукция.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОПереработкеПродукция.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОПереработкеПродукция.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеПродукция.Количество * ОтчетОПереработкеПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОПереработкеПродукция.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетОПереработкеПродукция.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеПродукция.Цена / ОтчетОПереработкеПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетОПереработкеПродукция.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетОПереработкеПродукция.Сумма,
		|	ОтчетОПереработкеПродукция.СтавкаНДС,
		|	ОтчетОПереработкеПродукция.СуммаНДС,
		|	ОтчетОПереработкеПродукция.Номенклатура.НаименованиеПолное КАК Содержание,
		|	""СобственныеТовары"" КАК ТипЗапасов
		|ИЗ
		|	Документ.ОтчетОПереработке.Продукция КАК ОтчетОПереработкеПродукция
		|ГДЕ
		|	ОтчетОПереработкеПродукция.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОПереработкеЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОПереработкеЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОПереработкеЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеЗапасы.Количество * ОтчетОПереработкеЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетОПереработкеЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетОПереработкеЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
		|			ТОГДА ""ДавальческиеСырьеИМатериалы""
		|		ИНАЧЕ ""СобственныеТовары""
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетОПереработкеЗапасы.Ссылка.Контрагент КАК Заказчик
		|ИЗ
		|	Документ.ОтчетОПереработке.Запасы КАК ОтчетОПереработкеЗапасы
		|ГДЕ
		|	ОтчетОПереработкеЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОПереработкеЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОПереработкеЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОПереработкеЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеЗапасы.Количество * ОтчетОПереработкеЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	""ДавальческиеСырьеИМатериалы"" КАК ТипЗапасов
		|ИЗ
		|	Документ.ОтчетОПереработке.Запасы КАК ОтчетОПереработкеЗапасы
		|ГДЕ
		|	ОтчетОПереработкеЗапасы.Ссылка = &Ссылка
		|	И ОтчетОПереработкеЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОПереработкеПредоплата.Документ КАК Документ,
		|	ОтчетОПереработкеПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ОтчетОПереработке.Предоплата КАК ОтчетОПереработкеПредоплата
		|ГДЕ
		|	ОтчетОПереработкеПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаУслуги = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаМатериалы = РезультатыЗапроса[1].Выгрузить();
		Результат.Вставить("Материалы", ТаблицаМатериалы);
		
		ТаблицаМатериалыЗаказчика = РезультатыЗапроса[2].Выгрузить();
		Результат.Вставить("МатериалыЗаказчика", ТаблицаМатериалыЗаказчика);
		
		ПогашениеЗадолженности = РезультатыЗапроса[3].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетПереработчика(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетПереработчика.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчика.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетПереработчика.Количество * ОтчетПереработчика.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетПереработчика.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчика.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетПереработчика.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетПереработчика.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ОтчетПереработчика.Спецификация
		|ИЗ
		|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
		|ГДЕ
		|	ОтчетПереработчика.Ссылка = &Ссылка
		|	И ОтчетПереработчика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ОтчетПереработчика.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетПереработчика.Расход КАК Номенклатура,
		|	ОтчетПереработчика.Сумма,
		|	ОтчетПереработчика.СтавкаНДС,
		|	ОтчетПереработчика.СуммаНДС,
		|	1 КАК Количество,
		|	ОтчетПереработчика.Сумма КАК Цена,
		|	ОтчетПереработчика.Расход.НаименованиеПолное КАК Содержание
		|ИЗ
		|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
		|ГДЕ
		|	ОтчетПереработчика.Ссылка = &Ссылка
		|	И ОтчетПереработчика.Расход <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ОтчетПереработчика.Сумма > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетПереработчикаЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетПереработчикаЗапасы.Количество * ОтчетПереработчикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетПереработчикаЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетПереработчикаЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетПереработчикаЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ОтчетПереработчикаЗапасы.Спецификация,
		|	ВЫБОР
		|		КОГДА ОтчетПереработчикаЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетПереработчикаЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ПОДСТРОКА(ОтчетПереработчикаЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	ОтчетПереработчикаЗапасы.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Документ.ОтчетПереработчика.Запасы КАК ОтчетПереработчикаЗапасы
		|ГДЕ
		|	ОтчетПереработчикаЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетПереработчикаПредоплата.Документ КАК Документ,
		|	ОтчетПереработчикаПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ОтчетПереработчика.Предоплата КАК ОтчетПереработчикаПредоплата
		|ГДЕ
		|	ОтчетПереработчикаПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаПродукция = РезультатыЗапроса[0].Выгрузить();
		Результат.Вставить("Продукция", ТаблицаПродукция);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаМатериалы = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаМатериалы, ДанныеИБ.Ссылка);
		Результат.Вставить("Материалы", ТаблицаМатериалы);
		
		ПогашениеЗадолженности = РезультатыЗапроса[3].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПеремещениеЗапасов(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовЗапасы.Количество * ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫБОР
	|		КОГДА ПеремещениеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ПеремещениеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ПОДСТРОКА(ПеремещениеЗапасовЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
	|	ПеремещениеЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель КАК ПодразделениеЗатрат,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.КатегорияНоменклатуры КАК ГруппаАналитическогоУчетаНоменклатуры
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПеремещениеЗапасов_ВозвратИзЭкспл(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовЗапасы.Количество * ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.МОЛ КАК ФизическоеЛицо,
	|	ПеремещениеЗапасовЗапасы.Ссылка.Дата
	|ПОМЕСТИТЬ Вт_Спецодежда
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура,
	|	МАКСИМУМ(ПеремещениеЗапасовЗапасы.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ Вт_ДокументыПередачи
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_Спецодежда КАК Вт_Спецодежда
	|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = Вт_Спецодежда.Номенклатура
	|			И ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель = Вт_Спецодежда.СтруктурнаяЕдиница
	|			И (ПеремещениеЗапасовЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию))
	|			И ПеремещениеЗапасовЗапасы.Ссылка.Дата <= Вт_Спецодежда.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Спецодежда.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура,
	|	Вт_Спецодежда.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Вт_Спецодежда.Количество КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18)) КАК ТипЗапасов,
	|	1 КАК СрокЭксплуатации,
	|	Вт_Спецодежда.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вт_ДокументыПередачи.Ссылка.СчетЗатрат.Наименование КАК НаименованиеНазначенияИспользования,
	|	Вт_ДокументыПередачи.Ссылка.СчетЗатрат.Наименование КАК НаименованиеСпособаОтраженияРасходов,
	|	NULL КАК НомерГТД,
	|	NULL КАК СтранаПроисхождения,
	|	ЕСТЬNULL(Вт_ДокументыПередачи.Ссылка, Неопределено) КАК ДокументПередачи
	|ИЗ
	|	Вт_Спецодежда КАК Вт_Спецодежда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ДокументыПередачи КАК Вт_ДокументыПередачи
	|		ПО Вт_Спецодежда.Номенклатура = Вт_ДокументыПередачи.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПеремещениеЗапасов_ВЭксплуатацию(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовЗапасы.Количество * ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18)) КАК ТипЗапасов,
	|	1 КАК СрокЭксплуатации,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель.МОЛ КАК ФизическоеЛицо,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СчетЗатрат.Наименование КАК НаименованиеНазначенияИспользования,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СчетЗатрат.Наименование КАК НаименованиеСпособаОтраженияРасходов,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПереоценкаВРозницеСуммовойУчет(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ПереоценкаВРозницеСуммовойУчетЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ПереоценкаВРозницеСуммовойУчетЗапасы.Количество * ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ПереоценкаВРозницеСуммовойУчетЗапасы.Цена / ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.Цена
		|	КОНЕЦ КАК ЦенаВРозницеСтарая,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Сумма,
		|	ВЫБОР
		|		КОГДА ПереоценкаВРозницеСуммовойУчетЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ПереоценкаВРозницеСуммовойУчетЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Характеристика,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ПереоценкаВРозницеСуммовойУчетЗапасы.НоваяЦена / ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.НоваяЦена
		|	КОНЕЦ КАК ЦенаВРознице,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Сумма КАК СуммаПереоценки
		|ИЗ
		|	Документ.ПереоценкаВРозницеСуммовойУчет.Запасы КАК ПереоценкаВРозницеСуммовойУчетЗапасы
		|ГДЕ
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Ссылка = &Ссылка
		|	И ПереоценкаВРозницеСуммовойУчетЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТоваров = РезультатЗапроса.Выгрузить();
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПриходнаяНакладная(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Цена / ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Цена
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ПриходнаяНакладнаяЗапасы.Сумма,
		|	ПриходнаяНакладнаяЗапасы.СтавкаНДС,
		|	ПриходнаяНакладнаяЗапасы.СуммаНДС,
		|	ПОДСТРОКА(ПриходнаяНакладнаяЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
		|				И ПриходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ПриходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ПриходнаяНакладнаяЗапасы.Всего,
		|	ПриходнаяНакладнаяЗапасы.Характеристика,
		|	ПриходнаяНакладнаяЗапасы.Партия
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриходнаяНакладнаяРасходы.Номенклатура,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяРасходы.Количество * ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ПриходнаяНакладнаяРасходы.Цена / ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Цена
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ПриходнаяНакладнаяРасходы.Сумма,
		|	ПриходнаяНакладнаяРасходы.СтавкаНДС,
		|	ПриходнаяНакладнаяРасходы.СуммаНДС,
		|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
		|				И (ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
		|					ИЛИ ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроизводственныйРасход,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ПриходнаяНакладнаяРасходы.Содержание, 1, 100) = """"
		|			ТОГДА ПриходнаяНакладнаяРасходы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВключатьРасходыВСебестоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоДопРасходы,
		|	ПриходнаяНакладнаяРасходы.Номенклатура.КатегорияНоменклатуры КАК ГруппаАналитическогоУчетаНоменклатуры
		|ИЗ
		|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
		|ГДЕ
		|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПриходнаяНакладнаяЗапасы.Всего КАК СтоимостьТоваров,
		|	ПриходнаяНакладнаяЗапасы.Ссылка КАК ДокументПоступления,
		|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
		|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК Сумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
		|				ТОГДА ПриходнаяНакладнаяЗапасы.СуммаРасходов - ПриходнаяНакладнаяЗапасы.СуммаРасходов / ((ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка + 100) / 100)
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаРасходов * ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВключатьРасходыВСебестоимость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяПредоплата.Документ КАК Документ,
		|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ПриходнаяНакладная.Предоплата КАК ПриходнаяНакладнаяПредоплата
		|ГДЕ
		|	ПриходнаяНакладнаяПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Результат.Вставить("РасшифровкаДопРасходов", РезультатыЗапроса[2].Выгрузить());
			
		ПогашениеЗадолженности = РезультатыЗапроса[3].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
			
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПроизводство(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СборкаЗапасовПродукция.НомерСтроки) КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Ссылка КАК Документ,
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Номенклатура.КатегорияНоменклатуры КАК НоменклатурнаяГруппа,
	|	СборкаЗапасовПродукция.Спецификация,
	|	СУММА(СборкаЗапасовПродукция.Количество) КАК КоличествоМест,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ВЫРАЗИТЬ(СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ СборкаЗапасовПродукция.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовПродукция.Спецификация,
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Ссылка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	СборкаЗапасовПродукция.Номенклатура.КатегорияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Запасы.Регистратор,
	|	Запасы.КоррНоменклатура КАК Продукция,
	|	Запасы.КоррСпецификация КАК СпецификацияПродукции,
	|	СУММА(Запасы.Сумма * ВЫБОР
	|			КОГДА &РегВалюта <> &УпрВалюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаЗатрат
	|ПОМЕСТИТЬ ВременнаяТаблицаЗатраты
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Запасы.Регистратор = &Документ
	|	И Запасы.ЗатратыНаВыпуск
	|	И Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.КоррНоменклатура,
	|	Запасы.КоррСпецификация,
	|	Запасы.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаПродукция.Спецификация КАК СпецификацияНоменклатуры,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаПродукция.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаЗатраты.СуммаЗатрат ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВременнаяТаблицаЗатраты.СуммаЗатрат / ВременнаяТаблицаПродукция.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаЗатраты.СуммаЗатрат КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВременнаяТаблицаПродукция.НоменклатурнаяГруппа КАК ГруппаАналитическогоУчетаНоменклатуры,
	|	ВременнаяТаблицаПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ВременнаяТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗатраты КАК ВременнаяТаблицаЗатраты
	|		ПО ВременнаяТаблицаПродукция.Документ = ВременнаяТаблицаЗатраты.Регистратор
	|			И ВременнаяТаблицаПродукция.Номенклатура = ВременнаяТаблицаЗатраты.Продукция
	|			И ВременнаяТаблицаПродукция.Спецификация = ВременнаяТаблицаЗатраты.СпецификацияПродукции
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаПродукция.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент > 0
	|			ТОГДА ВЫРАЗИТЬ(СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество
	|	КОНЕЦ КАК Количество,
	|	СборкаЗапасовОтходы.ЕдиницаИзмерения,
	|	СборкаЗапасовОтходы.Номенклатура.КатегорияНоменклатуры КАК ГруппаАналитическогоУчетаНоменклатуры
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Документ";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СборкаЗапасов.Продукция", "Документ.СборкаЗапасов.Запасы");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУчета.Получить());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаПродукция = РезультатыЗапроса[2].Выгрузить();
	Результат.Вставить("Продукция", ТаблицаПродукция);
	
	ТаблицаОтходы = РезультатыЗапроса[3].Выгрузить();
	Если ТаблицаПродукция.Количество() = 1 Тогда
		Для каждого СтрокаТаблицы Из ТаблицаОтходы Цикл
			СтрокаТаблицы.ГруппаАналитическогоУчетаНоменклатуры = ТаблицаПродукция[0].ГруппаАналитическогоУчетаНоменклатуры;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("ВозвратныеОтходы", ТаблицаОтходы);
	
	ТаблицаМатериалы = ТаблицаРаспределенияМатериалов(ДанныеИБ);
	ТаблицаМатериалы.Колонки.НоменклатурнаяГруппа.Имя = "ГруппаАналитическогоУчетаНоменклатуры";
	Результат.Вставить("Материалы", ТаблицаМатериалы);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПроизводствоВПеремещениеОтходов(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СборкаЗапасовОтходы.НомерСтроки) КАК НомерСтроки,
	|	СборкаЗапасовОтходы.Номенклатура,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовОтходы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ВЫРАЗИТЬ(СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ СборкаЗапасовОтходы.Количество
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаОтходы
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовОтходы.Номенклатура,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовОтходы.ЕдиницаИзмерения
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОтходы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаОтходы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаОтходы.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	ВременнаяТаблицаОтходы КАК ВременнаяТаблицаОтходы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаОтходы.НомерСтроки";
	
	Запрос.УстановитьПараметр("Документ", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтходы = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Отходы", ТаблицаОтходы);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПроизводствоВПеремещениеПродукции(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СборкаЗапасовПродукция.НомерСтроки) КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Номенклатура,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ВЫРАЗИТЬ(СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ СборкаЗапасовПродукция.Количество
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовПродукция.Номенклатура,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаПродукция.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ВременнаяТаблицаПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаПродукция.НомерСтроки";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СборкаЗапасов.Продукция", "Документ.СборкаЗапасов.Запасы");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПродукция = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Продукция", ТаблицаПродукция);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаРаспределениеЗатрат(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеЗатратЗапасы.Номенклатура КАК Номенклатура,
	|	РаспределениеЗатратЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(РаспределениеЗатратЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|						И РаспределениеЗатратЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|					ТОГДА РаспределениеЗатратРаспределениеЗапасов.Количество * РаспределениеЗатратЗапасы.ЕдиницаИзмерения.Коэффициент
	|				ИНАЧЕ РаспределениеЗатратРаспределениеЗапасов.Количество
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК Количество,
	|	ВЫБОР
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ""КомиссионныеТовары""
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ""ДавальческиеСырьеИМатериалы""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	РаспределениеЗатратРаспределениеЗапасов.Номенклатура.КатегорияНоменклатуры КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(РаспределениеЗатратРаспределениеЗапасов.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.РаспределениеЗатрат.Запасы КАК РаспределениеЗатратЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспределениеЗатрат.РаспределениеЗапасов КАК РаспределениеЗатратРаспределениеЗапасов
	|		ПО РаспределениеЗатратЗапасы.КлючСвязи = РаспределениеЗатратРаспределениеЗапасов.КлючСвязи
	|			И РаспределениеЗатратЗапасы.Ссылка = РаспределениеЗатратРаспределениеЗапасов.Ссылка
	|ГДЕ
	|	РаспределениеЗатратЗапасы.Ссылка = &Ссылка
	|	И РаспределениеЗатратРаспределениеЗапасов.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗатратЗапасы.Номенклатура,
	|	РаспределениеЗатратЗапасы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ""КомиссионныеТовары""
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ""ДавальческиеСырьеИМатериалы""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ,
	|	РаспределениеЗатратРаспределениеЗапасов.Номенклатура.КатегорияНоменклатуры,
	|	РаспределениеЗатратЗапасы.Номенклатура.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаРасходнаяНакладная(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС,
		|	ПОДСТРОКА(РасходнаяНакладнаяЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И РасходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	РасходнаяНакладнаяЗапасы.Всего,
		|	РасходнаяНакладнаяЗапасы.Характеристика,
		|	РасходнаяНакладнаяЗапасы.Партия
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РасходнаяНакладнаяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяПредоплата.Документ КАК Документ,
		|	РасходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.РасходнаяНакладная.Предоплата КАК РасходнаяНакладнаяПредоплата
		|ГДЕ
		|	РасходнаяНакладнаяПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = РезультатыЗапроса[2].Выгрузить();
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		Для каждого СтрокаТаблицы Из ПогашениеЗадолженности Цикл
			СтрокаТаблицы.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Документ, ИмяПКОДляДокумента(СтрокаТаблицы.Документ));
		КонецЦикла;
		ПогашениеЗадолженности.Колонки.Удалить("Документ");
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаРасходыПриИмпорте(ДанныеИБ)
	Результат = Новый Структура;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТовары.НомерРаздела КАК НомерРаздела,
	|	ДанныеТовары.Номенклатура КАК Номенклатура,
	|	ДанныеТовары.ДокументПартии КАК ДокументПоступления,
	|	ДанныеТовары.Количество КАК Количество,
	|	ДанныеТовары.ФактурнаяСтоимость КАК ТаможеннаяСтоимость,
	|	ДанныеТовары.СуммаНДС КАК СуммаНДС,
	|	ДанныеТовары.СуммаПошлины КАК СуммаПошлины,
	|	ДанныеТовары.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.РасходыПриИмпорте.Запасы КАК ДанныеТовары
	|ГДЕ
	|	ДанныеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРазделы.НомерСтроки КАК НомерРаздела,
	|	ДанныеРазделы.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	ДанныеРазделы.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРазделы.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ДанныеРазделы.СтавкаПошлины КАК ЧИСЛО(10, 2)) КАК СтавкаПошлины,
	|	ДанныеРазделы.СуммаПошлины КАК СуммаПошлины
	|ИЗ
	|	Документ.РасходыПриИмпорте.Разделы КАК ДанныеРазделы
	|ГДЕ
	|	ДанныеРазделы.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = МассивРезультатов[0].Выгрузить();
	Результат.Вставить("Товары", ТаблицаТоваров);
		
	ТаблицаРазделы = МассивРезультатов[1].Выгрузить();
	ЗаполнитьСтавкиНДС_Отправка(ТаблицаРазделы);
	Результат.Вставить("Разделы", ТаблицаРазделы);
		
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаСписаниеЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеЗапасовЗапасы.Номенклатура,
		|	СписаниеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(СписаниеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА СписаниеЗапасовЗапасы.Количество * СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ СписаниеЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПОДСТРОКА(СписаниеЗапасовЗапасы.НомерГТД.Код,1,30) КАК НомерГТД,
		|	СписаниеЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА СписаниеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СписаниеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
		|ГДЕ
		|	СписаниеЗапасовЗапасы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТовары = РезультатЗапроса.Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаСписаниеЗапасов_СписаниеИзЭкспл(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеЗапасовЗапасы.Номенклатура,
	|	СписаниеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СписаниеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА СписаниеЗапасовЗапасы.Количество * СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ СписаниеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	СписаниеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница,
	|	СписаниеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.МОЛ КАК ФизическоеЛицо,
	|	СписаниеЗапасовЗапасы.Ссылка.Дата,
	|	""СпецоснасткаИСпецодеждаНаСкладе"" КАК ТипЗапасов
	|ПОМЕСТИТЬ Вт_Спецодежда
	|ИЗ
	|	Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|ГДЕ
	|	СписаниеЗапасовЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура,
	|	МАКСИМУМ(ПеремещениеЗапасовЗапасы.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ Вт_ДокументыПередачи
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_Спецодежда КАК Вт_Спецодежда
	|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = Вт_Спецодежда.Номенклатура
	|			И ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель = Вт_Спецодежда.СтруктурнаяЕдиница
	|			И (ПеремещениеЗапасовЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию))
	|			И ПеремещениеЗапасовЗапасы.Ссылка.Дата <= Вт_Спецодежда.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Спецодежда.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура,
	|	Вт_Спецодежда.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Вт_Спецодежда.Количество КАК Количество,
	|	Вт_Спецодежда.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вт_Спецодежда.ТипЗапасов КАК ТипЗапасов,
	|	ЕСТЬNULL(Вт_ДокументыПередачи.Ссылка, Неопределено) КАК ДокументПередачи
	|ИЗ
	|	Вт_Спецодежда КАК Вт_Спецодежда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ДокументыПередачи КАК Вт_ДокументыПередачи
	|		ПО Вт_Спецодежда.Номенклатура = Вт_ДокументыПередачи.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаСчетНаОплату(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА СчетНаОплатуЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ СчетНаОплатуЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Количество * СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Цена / СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуЗапасы.Сумма,
		|	СчетНаОплатуЗапасы.СтавкаНДС,
		|	СчетНаОплатуЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СчетНаОплатуЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	СчетНаОплатуЗапасы.Всего,
		|	СчетНаОплатуЗапасы.Характеристика,
		|	СчетНаОплатуЗапасы.Партия,
		|	СчетНаОплатуЗапасы.Содержание
		|ИЗ
		|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
		|ГДЕ
		|	СчетНаОплатуЗапасы.Ссылка = &Ссылка
		|	И СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Количество * СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Цена / СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуЗапасы.Сумма,
		|	СчетНаОплатуЗапасы.СтавкаНДС,
		|	СчетНаОплатуЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СчетНаОплатуЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА СчетНаОплатуЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
		|ГДЕ
		|	СчетНаОплатуЗапасы.Ссылка = &Ссылка
		|	И СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаСчетНаОплатуПоставщика(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПоставщикаЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуПоставщикаЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА СчетНаОплатуПоставщикаЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Количество * СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Цена / СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуПоставщикаЗапасы.Сумма,
		|	СчетНаОплатуПоставщикаЗапасы.СтавкаНДС,
		|	СчетНаОплатуПоставщикаЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщикаЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СчетНаОплатуПоставщикаЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	СчетНаОплатуПоставщикаЗапасы.Всего,
		|	СчетНаОплатуПоставщикаЗапасы.Характеристика,
		|	СчетНаОплатуПоставщикаЗапасы.Партия,
		|	СчетНаОплатуПоставщикаЗапасы.Содержание
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика.Запасы КАК СчетНаОплатуПоставщикаЗапасы
		|ГДЕ
		|	СчетНаОплатуПоставщикаЗапасы.Ссылка = &Ссылка
		|	И СчетНаОплатуПоставщикаЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетНаОплатуПоставщикаЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуПоставщикаЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Количество * СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Цена / СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуПоставщикаЗапасы.Сумма,
		|	СчетНаОплатуПоставщикаЗапасы.СтавкаНДС,
		|	СчетНаОплатуПоставщикаЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СчетНаОплатуПоставщикаЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА СчетНаОплатуПоставщикаЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика.Запасы КАК СчетНаОплатуПоставщикаЗапасы
		|ГДЕ
		|	СчетНаОплатуПоставщикаЗапасы.Ссылка = &Ссылка
		|	И СчетНаОплатуПоставщикаЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Функция ДанныеОтчетОРозничныхПродажах(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Количество * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Цена / ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетОРозничныхПродажахЗапасы.Сумма,
		|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаНДС,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетОРозничныхПродажахЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетОРозничныхПродажахЗапасы.Всего,
		|	ОтчетОРозничныхПродажахЗапасы.Характеристика,
		|	ОтчетОРозничныхПродажахЗапасы.Партия
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка = &Ссылка
		|	И ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Количество * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Цена / ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетОРозничныхПродажахЗапасы.Сумма,
		|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаНДС,
		|	""Собственные"" КАК ТипУслуги
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка = &Ссылка
		|	И ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерКарты,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма КАК СуммаОплаты,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаОплатаПлатежнымиКартами = РезультатыЗапроса[2].Выгрузить();
	
		Результат.Вставить("ОплатаПлатежнымиКартами", ТаблицаОплатаПлатежнымиКартами);
		
		Возврат Результат;
КонецФункции
Функция ДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации = Неопределено)
	Если Не ЗначениеЗаполнено(Контрагент)
		ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
		
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
		
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
		
	Возврат ДоговорПоУмолчанию;
КонецФункции
Процедура ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья",ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизЛицо.Установить(ФизЛицоСсылка);
		
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
			// Набор записей полностью заменяется на полученные данные
			Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
				МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписиФИО, СтрокаФИО);
		
				Если ЗначениеЗаполнено(СтрокаФИО.НачалоПериода) Тогда
				   МенеджерЗаписиФИО.Период = СтрокаФИО.НачалоПериода;
				Иначе
					Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
						МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
					Иначе
						МенеджерЗаписиФИО.Период = '18991231000000';
					КонецЕсли;
				КонецЕсли;
				
				МенеджерЗаписиФИО.ФизЛицо = ФизЛицоСсылка;
			КонецЦикла;
		
		Иначе
			
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолученныеДанные.ФИО);
			МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
			МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
			МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
			МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
			Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
				МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
			Иначе
				МенеджерЗаписиФИО.Период = '18991231000000';
			КонецЕсли;
			МенеджерЗаписиФИО.ФизЛицо = ФизЛицоСсылка;
				
		КонецЕсли;
			
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейФИО);
КонецПроцедуры
Процедура ЗакрытьКассовуюСмену(Объект)
	Объект.ДополнительныеСвойства.Вставить("ЗагрузкаИзВнешнегоИсточника", Истина);
	Документы.ОтчетОРозничныхПродажах.ЗакрытьКассовуюСмену(Объект);
КонецПроцедуры
Процедура ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, XDTOДокументаОснования)
	Документ = Неопределено;
		
		Попытка
			ТипДокументаОснования = XDTOДокументаОснования.ТипЗначения;
			ИДОбъектаXDTO = XDTOДокументаОснования.Ссылка.Значение;
		
			Если СтрНайти(ТипДокументаОснования, "ОтчетКомиссионера") > 0 Тогда
				Документ = Документы.ОтчетКомиссионера.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				Документ = Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураПолученный") > 0 Тогда
				Документ = Документы.СчетФактураПолученный.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураВыданный") > 0 Тогда
				Документ = Документы.СчетФактура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				Документ = Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
				Если Не (ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ)) Тогда
					Документ = Документы.АктВыполненныхРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
					Если Не (ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ)) Тогда
						Документ = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетКомитенту") > 0 Тогда
				Документ = Документы.ОтчетКомитенту.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
				Документ = Документы.АктВыполненныхРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				Документ = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				Документ = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
				Если Не (ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ)) Тогда
					Документ = Документы.ДополнительныеРасходы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
				Документ = Документы.АвансовыйОтчет.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.ПоступлениеВКассу.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.РасходСоСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.ПоступлениеНаСчет.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
				Документ = Документы.Взаимозачет.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаПоступленияТоваров") > 0 Тогда
				Документ = Документы.КорректировкаПоступления.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаРеализацииТоваров") > 0 Тогда
				Документ = Документы.КорректировкаРеализации.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетПереработчика") > 0 Тогда
				Документ = Документы.ОтчетПереработчика.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетДавальцу") > 0 Тогда
				Документ = Документы.ОтчетОПереработке.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОперацияПоПлатежнойКарте") > 0 Тогда
				Документ = Документы.ОперацияПоПлатежнымКартам.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ) Тогда
			СтруктураДанныхСтроки.Вставить("Документ", Документ);
		КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, Организация, ДатаДокумента)
	Если СтруктураДанныхСтроки.Свойство("СтавкаНДС") И ЗначениеЗаполнено(СтруктураДанныхСтроки.СтавкаНДС) Тогда
		ТекСтавкаНДС = СтавкаНДСПоСтроке(СтруктураДанныхСтроки.СтавкаНДС.Значение);
		СтруктураДанныхСтроки.Вставить("СтавкаНДС", ТекСтавкаНДС);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		
		НалогообложениеНДС = НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ДатаДокумента);
		ПлательщикНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС; 
		ТекСтавкаНДС = ?(НЕ ПлательщикНДС, УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(), Организация.СтавкаНДСПоУмолчанию);
	Иначе
		ТекСтавкаНДС = СтавкаНДСПоСтроке("НДС18");
	КонецЕсли;
	
	ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекСтавкаНДС);
	ТекСуммаНДС = СтруктураДанныхСтроки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
	СтруктураДанныхСтроки.Вставить("СтавкаНДС", ТекСтавкаНДС);
	СтруктураДанныхСтроки.Вставить("СуммаНДС", ТекСуммаНДС);
КонецПроцедуры
Процедура ЗаполнитьДокументВыдачиДенег(Объект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасчетыСПодотчетникамиОстатки.Документ
	|ИЗ
	|	РегистрНакопления.РасчетыСПодотчетниками.Остатки(
	|			&ДатаДокументаВозврата,
	|			(Документ ССЫЛКА Документ.РасходИзКассы
	|				ИЛИ Документ ССЫЛКА Документ.РасходСоСчета)
	|				И Валюта = &Валюта
	|				И (&УчетПоКомпании
	|					ИЛИ Организация = &Организация)
	|				И Сотрудник = &Сотрудник) КАК РасчетыСПодотчетникамиОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетникамиОстатки.Документ.Дата";
	
	Запрос.УстановитьПараметр("ДатаДокументаВозврата", Объект.Дата);
	Запрос.УстановитьПараметр("Валюта", Объект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("УчетПоКомпании", Константы.УчетПоКомпании.Получить());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Подотчетник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Документ = Выборка.Документ;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКассуККМПоУмолчанию(Объект)
	Если ЗначениеЗаполнено(Объект.Организация)
		И ОбщегоНазначения.СсылкаСуществует(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ВалютаДенежныхСредств) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	КассыККМ.Ссылка
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|	И КассыККМ.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1
			И Выборка.Следующий() Тогда
			КассаККМПоУмолчанию = Выборка.Ссылка;
		Иначе
			КассаККМПоУмолчанию = Справочники.КассыККМ.ПустаяСсылка();
		КонецЕсли;
		
		Объект.КассаККМ = КассаККМПоУмолчанию;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКассуПоУмолчанию(Объект, ЭтоПеремещениеВКассу = Ложь)
	КассаПоУмолчанию = Неопределено;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		КассаПоУмолчанию = Объект.Организация.КассаПоУмолчанию;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КассаПоУмолчанию) Тогда 
		НаименованиеКассыПоУмолчанию = "Основная касса";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Кассы.Ссылка
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	Кассы.Наименование = &НаименованиеКассыПоУмолчанию";
		
		Запрос.УстановитьПараметр("НаименованиеКассыПоУмолчанию", НаименованиеКассыПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КассаПоУмолчанию = Выборка.Ссылка;
		Иначе
			
			НоваяКасса = Справочники.Кассы.СоздатьЭлемент();
			НоваяКасса.Наименование = НаименованиеКассыПоУмолчанию;
			НоваяКасса.ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
			НоваяКасса.СчетУчета = ПланыСчетов.Управленческий.Касса;
			
			Попытка
				НоваяКасса.Записать();
				КассаПоУмолчанию = НоваяКасса.Ссылка;
			Исключение
				КассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПеремещениеВКассу Тогда
		Объект.КассаПолучатель = КассаПоУмолчанию;
	Иначе
		Объект.Касса = КассаПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, Документ)
	Если ТаблицаТоваров.Колонки.Найти("НомерГТД") = Неопределено Тогда 
			ТаблицаТоваров.Колонки.Добавить("НомерГТД");
			ТаблицаТоваров.Колонки.Добавить("СтранаПроисхождения");
		КонецЕсли;
	
		ГТДЕстьВТабличнойЧасти = Ложь;
		Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
				ГТДЕстьВТабличнойЧасти = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
		Если Не ГТДЕстьВТабличнойЧасти
			И ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений")
			И ТаблицаТоваров.Количество() > 0 Тогда
			
			ТаблицаНомеровГТД = Новый ТаблицаЗначений;
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходнаяНакладная")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомитенту")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СчетФактураПолученныйЗапасы.Номенклатура,
				|	СчетФактураПолученныйЗапасы.Характеристика,
				|	СчетФактураПолученныйЗапасы.Партия,
				|	СчетФактураПолученныйЗапасы.НомерГТД,
				|	СчетФактураПолученныйЗапасы.СтранаПроисхождения,
				|	СУММА(СчетФактураПолученныйЗапасы.Количество) КАК КоличествоВСФ
				|ИЗ
				|	Документ.СчетФактураПолученный.Запасы КАК СчетФактураПолученныйЗапасы
				|ГДЕ
				|	СчетФактураПолученныйЗапасы.Ссылка.ДокументОснование = &ДокументОснование
				|
				|СГРУППИРОВАТЬ ПО
				|	СчетФактураПолученныйЗапасы.Характеристика,
				|	СчетФактураПолученныйЗапасы.Номенклатура,
				|	СчетФактураПолученныйЗапасы.СтранаПроисхождения,
				|	СчетФактураПолученныйЗапасы.НомерГТД,
				|	СчетФактураПолученныйЗапасы.Партия";
				
				Запрос.УстановитьПараметр("ДокументОснование", Документ);
				ТаблицаНомеровГТД = Запрос.Выполнить().Выгрузить();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
				ИЛИ (ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидОперации") = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка
				|ПОМЕСТИТЬ СчетаФактуры
				|ИЗ
				|	Документ.СчетФактура КАК СчетФактура
				|ГДЕ
				|	СчетФактура.ДокументОснование = &ДокументОснование
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	СчетФактураДокументыОснования.Ссылка
				|ИЗ
				|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
				|ГДЕ
				|	СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СчетФактураЗапасы.Номенклатура,
				|	СчетФактураЗапасы.Характеристика,
				|	СчетФактураЗапасы.Партия,
				|	СчетФактураЗапасы.НомерГТД,
				|	СчетФактураЗапасы.СтранаПроисхождения,
				|	СУММА(СчетФактураЗапасы.Количество) КАК КоличествоВСФ
				|ИЗ
				|	СчетаФактуры КАК СчетаФактуры
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактура.Запасы КАК СчетФактураЗапасы
				|		ПО СчетаФактуры.Ссылка = СчетФактураЗапасы.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	СчетФактураЗапасы.Партия,
				|	СчетФактураЗапасы.Номенклатура,
				|	СчетФактураЗапасы.НомерГТД,
				|	СчетФактураЗапасы.Характеристика,
				|	СчетФактураЗапасы.СтранаПроисхождения";
				
				Запрос.УстановитьПараметр("ДокументОснование", Документ.Ссылка);
				ТаблицаНомеровГТД = Запрос.Выполнить().Выгрузить();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ОтчетКомиссионераПокупатели.КлючСвязи,
				|	СчетФактураЗапасы.Номенклатура,
				|	СчетФактураЗапасы.Характеристика,
				|	СчетФактураЗапасы.Партия,
				|	СчетФактураЗапасы.НомерГТД,
				|	СчетФактураЗапасы.СтранаПроисхождения,
				|	СУММА(СчетФактураЗапасы.Количество) КАК КоличествоВСФ
				|ИЗ
				|	Документ.ОтчетКомиссионера.Покупатели КАК ОтчетКомиссионераПокупатели
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактура.Запасы КАК СчетФактураЗапасы
				|		ПО ОтчетКомиссионераПокупатели.СчетФактура = СчетФактураЗапасы.Ссылка
				|ГДЕ
				|	ОтчетКомиссионераПокупатели.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	СчетФактураЗапасы.Характеристика,
				|	СчетФактураЗапасы.Номенклатура,
				|	СчетФактураЗапасы.СтранаПроисхождения,
				|	СчетФактураЗапасы.НомерГТД,
				|	СчетФактураЗапасы.Партия,
				|	ОтчетКомиссионераПокупатели.КлючСвязи";
				
				Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
				ТаблицаНомеровГТД = Запрос.Выполнить().Выгрузить();
				
			КонецЕсли;
			
			Если ТаблицаНомеровГТД.Количество() > 0 Тогда
			
				// Распределение номеров ГТД
				ТаблицаЗапасы	= ТаблицаТоваров.СкопироватьКолонки();
				
				СтруктураПоиска	= Новый Структура("Номенклатура, Характеристика, Партия");
				Если ТипЗнч(Документ) = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
					СтруктураПоиска.Вставить("КлючСвязи");
				КонецЕсли;
				
				Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
					
					СуммаПоСтроке		= СтрокаТаблицы.Сумма;
					СуммаНДСПоСтроке	= СтрокаТаблицы.СуммаНДС;
					ВсегоПоСтроке		= СтрокаТаблицы.Всего;
					
					СтруктураПоиска.Номенклатура	= СтрокаТаблицы.Номенклатура;
					СтруктураПоиска.Характеристика	= СтрокаТаблицы.Характеристика;
					СтруктураПоиска.Партия			= СтрокаТаблицы.Партия;
					Если СтруктураПоиска.Свойство("КлючСвязи") Тогда
						СтруктураПоиска.КлючСвязи = СтрокаТаблицы.КлючСвязи;
					КонецЕсли;
					
					МассивСтрокГТД		= ТаблицаНомеровГТД.НайтиСтроки(СтруктураПоиска);
					
					КоличествоОстаток	= СтрокаТаблицы.Количество;
					Для каждого СтрокаМассива Из МассивСтрокГТД Цикл
						
						НоваяСтрока = ТаблицаЗапасы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						
						НоваяСтрока.НомерГТД			= СтрокаМассива.НомерГТД.Код;
						НоваяСтрока.СтранаПроисхождения	= СтрокаМассива.СтранаПроисхождения;
						
						Если КоличествоОстаток <= СтрокаМассива.КоличествоВСФ Тогда
							
							НоваяСтрока.Количество		= КоличествоОстаток;
							СтрокаМассива.КоличествоВСФ	= СтрокаМассива.КоличествоВСФ - КоличествоОстаток;
							КоличествоОстаток			= 0;
							
							Если СтрокаМассива.КоличествоВСФ = 0 Тогда
								ТаблицаНомеровГТД.Удалить(СтрокаМассива);
							КонецЕсли;
							
							НоваяСтрока.Сумма		= СуммаПоСтроке;
							НоваяСтрока.СуммаНДС	= СуммаНДСПоСтроке;
							НоваяСтрока.Всего		= ВсегоПоСтроке;
							
							Прервать;
							
						Иначе
							
							НоваяСтрока.Количество	= СтрокаМассива.КоличествоВСФ;
							КоличествоОстаток		= КоличествоОстаток - СтрокаМассива.КоличествоВСФ;
							ТаблицаНомеровГТД.Удалить(СтрокаМассива);
							
							НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
							
							Если ТаблицаТоваров.Колонки.Найти("ПроцентСкидкиНаценки") <> Неопределено Тогда
								Если СтрокаТаблицы.ПроцентСкидкиНаценки = 100 Тогда
									НоваяСтрока.Сумма = 0;
								ИначеЕсли НЕ СтрокаТаблицы.ПроцентСкидкиНаценки = 0
									И НЕ НоваяСтрока.Количество = 0 Тогда
									
									НоваяСтрока.Сумма = НоваяСтрока.Сумма * (1 - СтрокаТаблицы.ПроцентСкидкиНаценки / 100);
								КонецЕсли;
							КонецЕсли;
							
							СтавкаНДС			 = ?(ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС), НоваяСтрока.СтавкаНДС.Ставка, 0);
							НоваяСтрока.СуммаНДС = ?(Документ.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
							
							НоваяСтрока.Всего    = НоваяСтрока.Сумма + ?(Документ.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
							
							СуммаПоСтроке		 = СуммаПоСтроке - НоваяСтрока.Сумма;
							СуммаНДСПоСтроке	 = СуммаНДСПоСтроке - НоваяСтрока.СуммаНДС;
							ВсегоПоСтроке		 = ВсегоПоСтроке - НоваяСтрока.Всего;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если КоличествоОстаток > 0 Тогда
						
						НоваяСтрока				= ТаблицаЗапасы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						
						НоваяСтрока.Количество			= КоличествоОстаток;
						
						НоваяСтрока.Сумма				= СуммаПоСтроке;
						НоваяСтрока.СуммаНДС			= СуммаНДСПоСтроке;
						НоваяСтрока.Всего				= ВсегоПоСтроке;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаТоваров = ТаблицаЗапасы;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КолонкаКУдалению = ТаблицаТоваров.Колонки.Найти("Характеристика");
		Если КолонкаКУдалению <> Неопределено Тогда
			ТаблицаТоваров.Колонки.Удалить(КолонкаКУдалению);
		КонецЕсли;
		
		КолонкаКУдалению = ТаблицаТоваров.Колонки.Найти("Партия");
		Если КолонкаКУдалению <> Неопределено Тогда
			ТаблицаТоваров.Колонки.Удалить(КолонкаКУдалению);
		КонецЕсли;
		
		КолонкаКУдалению = ТаблицаТоваров.Колонки.Найти("Всего");
		Если КолонкаКУдалению <> Неопределено Тогда
			ТаблицаТоваров.Колонки.Удалить(КолонкаКУдалению);
		КонецЕсли;
		
		КолонкаКУдалению = ТаблицаТоваров.Колонки.Найти("КлючСвязи");
		Если КолонкаКУдалению <> Неопределено Тогда
			ТаблицаТоваров.Колонки.Удалить(КолонкаКУдалению);
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) И Не ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)
				ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) И ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения) Тогда
			    СтрокаТаблицы.НомерГТД = "";
			    СтрокаТаблицы.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	АвтоЗачетАвансов = КомпонентыОбмена.УзелКорреспондента.АвтоматическиЗачитыватьАвансы;
		Если АвтоЗачетАвансов Тогда
			СпособПогашенияЗадолженности = "Автоматически";
		ИначеЕсли ДанныеИБ.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено
			И (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку
			
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию) Тогда
			
			СпособПогашенияЗадолженности = "НеПогашать";
		Иначе
			Если ДанныеИБ.Предоплата.Количество() > 0 Тогда
				СпособПогашенияЗадолженности = "ПоДокументу";
			Иначе
				ВедутсяРасчетыПоДокументам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "ВестиРасчетыПоДокументам");
				Если ВедутсяРасчетыПоДокументам = Истина Тогда
					СпособПогашенияЗадолженности = "НеПогашать";
				Иначе
					СпособПогашенияЗадолженности = "Автоматически";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
			
		ДанныеXDTO.Вставить("СпособПогашенияЗадолженности", СпособПогашенияЗадолженности);
КонецПроцедуры
Процедура ЗаполнитьСтавкиНДС_Отправка(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.СтавкаНДС.Ставка = 18
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС18";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 18
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС18_118";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС10";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС10_110";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 0 Тогда
				Строка.СтавкаНДССтрокой = "НДС0"; 
			Иначе
				Строка.СтавкаНДССтрокой = "БезНДС";
			КонецЕсли;
			
		КонецЦикла;
		ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
		ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
КонецПроцедуры
Процедура ЗаполнитьСтавкиНДСКорректировка_Отправка(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
		ТабличнаяЧасть.Колонки.Добавить("СтавкаНДСДоИзмененияСтрокой");
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.СтавкаНДССтрокой = СтавкаНДССтрокой_Отправка(Строка.СтавкаНДС);
			Строка.СтавкаНДСДоИзмененияСтрокой = СтавкаНДССтрокой_Отправка(Строка.СтавкаНДСДоИзменения);
			
		КонецЦикла;
		
		ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
		ТабличнаяЧасть.Колонки.Удалить("СтавкаНДСДоИзменения");
		ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
		ТабличнаяЧасть.Колонки.СтавкаНДСДоИзмененияСтрокой.Имя = "СтавкаНДСДоИзменения";
КонецПроцедуры
Процедура ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ)
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, );
	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
	
		ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	
		СтрокаКИ.НомерТелефона = XDTOКонтактная.Представление;
	
		СтрокаКИ.НомерТелефонаБезКодов = XDTOКонтактная.Состав.Номер;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	
		СтрокаКИ.Страна = XDTOКонтактная.Состав.Страна;
	
		Если ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
	
			СтрокаКИ.Регион = XDTOКонтактная.Состав.Состав.СубъектРФ;
	
			СтрокаКИ.Город = XDTOКонтактная.Состав.Состав.Город;
	
		КонецЕсли;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	
		СтрокаКИ.АдресЭП = XDTOКонтактная.Состав.Значение;
	
		ПозицияСобаки = Найти(XDTOКонтактная.Состав.Значение, "@");
	
		Если ПозицияСобаки <> 0 Тогда
	
			СтрокаКИ.ДоменноеИмяСервера = Сред(XDTOКонтактная.Состав.Значение, ПозицияСобаки + 1);
	
		КонецЕсли;
	
	КонецЕсли;
	
	// Заполнение представления
	
	Если Найти(XDTOКонтактная.Представление, Символы.ПС) = 0 Тогда
	
		СтрокаКИ.Представление = XDTOКонтактная.Представление;
	
	Иначе
	
		СтрокаПредставление = "";
	
		Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейКИ, СтрокаПредставление);
	
		ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
	
			ИЛИ СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			
			СтруктураПолейКИПолная = Новый Структура("КодСтраны,КодГорода,НомерТелефона,Добавочный,Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураПолейКИПолная, СтруктураПолейКИ);
	
			СтрокаПредставление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураПолейКИПолная.КодСтраны, СтруктураПолейКИПолная.КодГорода,
				СтруктураПолейКИПолная.НомерТелефона, СтруктураПолейКИПолная.Добавочный, 
				СтруктураПолейКИПолная.Комментарий);
			
	
		Иначе
	
			СтрокаПредставление = СтрЗаменить(XDTOКонтактная.Представление, Символы.ПС, ",");
	
		КонецЕсли;
	
		
	
		СтрокаКИ.Представление = СтрокаПредставление;
	
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Функция ИмяПКОДляДокумента(Документ)
	ТипСсылки = ТипЗнч(Документ);
		ИмяПКО = "";
		
		Если ТипСсылки = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
				ИмяПКО = "Документ_ЗаказНарядРасходнаяНакладная_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
				ИмяПКО = "Документ_РасходнаяНакладная_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку Тогда
				ИмяПКО = "Документ_ПередачаПереработчику_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки Тогда
				ИмяПКО = "Документ_ВозвратСырьяДавальцу_Отправка";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_РасходнаяНакладная_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
				ИмяПКО = "Документ_ПриходнаяНакладная_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку Тогда
				ИмяПКО = "Документ_ПоступлениеСырьяОтДавальца_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика Тогда
				ИмяПКО = "Документ_ВозвратСырьяОтПереработчика_Отправка";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_ПриходнаяНакладная_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
			ИмяПКО = "Документ_АктВыполненныхРабот_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
			
			ИмяПКО = "Документ_ДополнительныеРасходы_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПереоценкаВРозницеСуммовойУчет") Тогда
			
			ИмяПКО = "Документ_ПереоценкаВРозницеСуммовойУчет_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			
			ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
			
			ИмяПКО = "Документ_ОтчетОПереработке_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
			
			ИмяПКО = "Документ_ОтчетПереработчика_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			
			ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника
				Или Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
				
				ИмяПКО = "Документ_ПБДСРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
				
				ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_ПБДСПрочиеДоходы_Отправка";
				Иначе
					ИмяПКО = "Документ_ПБДСПрочееПоступление_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
				
				ИмяПКО = "Документ_ПБДСПрочееПоступление_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
				
				ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходСоСчета") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
				Или Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
				
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
				
				ИмяПКО = "Документ_СБДСПеречислениеЗаработнойПлаты_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
				
				ИмяПКО = "Документ_СБДСПлатежиВБюджет_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_СБДСПрочиеРасходы_Отправка";
				Иначе
					ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
				
				ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
				
				ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_ПКОПрочиеДоходы_Отправка";
				Иначе
					ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника
				Или Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
				
				ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
				
				ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда 
				
				ИмяПКО = "Документ_ПКОРозничнаяВыручка_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходИзКассы") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
				
				ИмяПКО = "Документ_РКОВыплатаЗарплаты_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_РКОПрочийРасход_Отправка";
				Иначе
					ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
				
				ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику
				Или Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
				
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
				
				ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			
			ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПеремещениеДС") Тогда
			
			Если Документ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
				И Документ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные Тогда
				
				ИмяПКО = "Документ_ПДС_ПолучениеНаличныхВБанке_Отправка";
				
			ИначеЕсли Документ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные
				И Документ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
				
				ИмяПКО = "Документ_ПДС_НаБанковскийСчет_Отправка";
				
			ИначеЕсли Документ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
				И Документ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
				
				ИмяПКО = "Документ_ПДС_ПереводНаДругойСчет_Отправка";
				
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетНаОплату") Тогда
			
			ИмяПКО = "Документ_СчетНаОплатуПокупателю_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			ИмяПКО = "Документ_СчетНаОплатуПоставщика_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетФактура") Тогда
			
			ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			ИмяПКО = "Документ_СчетФактураПолученный_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Взаимозачет") Тогда
			
			ИмяПКО = "Документ_Взаимозачет_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПрочиеРасходы") Тогда
			
			ИмяПКО = "Документ_ПрочиеРасходы_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
			
			ИмяПКО = "Документ_ИнвентаризацияЗапасов_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОприходованиеЗапасов") Тогда
			
			ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
				ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
				ИмяПКО = "Документ_ПеремещениеЗапасов_НаРасходы_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию Тогда
				ИмяПКО = "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
				ИмяПКО = "Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СписаниеЗапасов") Тогда
			
			Если Документ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение
				И Документ.СписатьЗапасыИзЭксплуатации Тогда
				ИмяПКО = "Документ_СписаниеЗапасов_ИзЭксплуатации";
			Иначе
				ИмяПКО = "Документ_СписаниеТоваров_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СборкаЗапасов") Тогда
			
			ИмяПКО = "Документ_Производство_Отправка";
				
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РаспределениеЗатрат") Тогда
			
			ИмяПКО = "Документ_РаспределениеЗатрат_Отправка";
			
		КонецЕсли;
		
		Возврат ИмяПКО;
КонецФункции
Процедура ОбработатьРасшифровкуПлатежа(Объект)
	Если ЗначениеЗаполнено(Объект.Контрагент)
			И ОбщегоНазначения.СсылкаСуществует(Объект.Контрагент) Тогда
	
			ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
			ВестиРасчетыПоДоговорам = Объект.Контрагент.ВестиРасчетыПоДоговорам;
			ДоговорПоУмолчанию = Объект.Контрагент.ДоговорПоУмолчанию;
		Иначе
			ВестиРасчетыПоДокументам = Ложь;
			ВестиРасчетыПоДоговорам = Ложь;
			ДоговорПоУмолчанию = Неопределено;
		КонецЕсли;
		
		// Заполнение обязательных реквизитов.
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
				Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
				Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
				Строка.Кратность = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.СуммаНДС)
				И ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				РассчитатьСуммуНДСВСтрокеДДС(Строка);	
			КонецЕсли;
			
			Если ВестиРасчетыПоДокументам
				И (Не ЗначениеЗаполнено(Строка.Документ) 
					ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.Документ = Неопределено;
			КонецЕсли;
			
			Если Не ВестиРасчетыПоДоговорам Тогда
				Строка.Договор = ДоговорПоУмолчанию;
			КонецЕсли;	
			
		КонецЦикла;
КонецПроцедуры
Функция ОбъектСуществуетВБазе(Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|ИСТИНА
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
		
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции
Процедура ОтложеннаяОбработка_ПБДС(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Курс) Тогда
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
		    Объект.Курс = ВалютаУчетаКурсКратность.Курс;
		    Объект.Кратность = ВалютаУчетаКурсКратность.Кратность;
		КонецЕсли;
		
		Объект.Курс = ?(Объект.Курс = 0, 1, Объект.Курс);
		Объект.Кратность = ?(Объект.Кратность = 0, 1, Объект.Кратность);
		
		// Очистка реквизитов не используемых для видов операций.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
			Объект.Контрагент = Неопределено;
			Объект.Документ = Неопределено;
			
			Если ЗначениеЗаполнено(Объект.Подотчетник) Тогда
				Объект.ДоговорКредитаЗайма = Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Объект.Подотчетник, Объект.Организация);
			КонецЕсли;
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
			
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			
			Если Объект.РасшифровкаПлатежа.Количество() <> 1 Тогда
				Объект.РасшифровкаПлатежа.Очистить();
				
				НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
				НоваяСтрока.Курс = 1;
				НоваяСтрока.Кратность = 1;
				НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			КонецЕсли;
			
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
			
			КурсВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Курс);
			КратностьВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Кратность);
			
			Объект.СуммаУчета = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				Объект.Курс,
				КурсВалютыУчета,
				Объект.Кратность,
				КратностьВалютыУчета
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
			
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Дебиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогооблажения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПДС(Объект)
	Если Объект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
		И Объект.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
			ЗаполнитьКассуПоУмолчанию(Объект, Истина);
		КонецЕсли;
		
	ИначеЕсли Объект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные
		И Объект.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
			ЗаполнитьКассуПоУмолчанию(Объект);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
		ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕслИ;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКО(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Объект.Курс) Тогда
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
		    Объект.Курс = ВалютаУчетаКурсКратность.Курс;
		    Объект.Кратность = ВалютаУчетаКурсКратность.Кратность;
		КонецЕсли;
		
		Объект.Курс = ?(Объект.Курс = 0, 1, Объект.Курс);
		Объект.Кратность = ?(Объект.Кратность = 0, 1, Объект.Кратность);
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
			Если Не ЗначениеЗаполнено(Объект.Документ)
				И ЗначениеЗаполнено(Объект.Подотчетник) Тогда
				ЗаполнитьДокументВыдачиДенег(Объект);
			КонецЕсли;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
			
			Объект.Контрагент = Неопределено;
			Объект.Документ = Неопределено;
			
			Если ЗначениеЗаполнено(Объект.Подотчетник)
				И Не ЗначениеЗаполнено(Объект.ДоговорКредитаЗайма) Тогда
				Объект.ДоговорКредитаЗайма = Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Объект.Подотчетник, Объект.Организация);
			КонецЕсли;
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			Договор = Неопределено;
			Если Не ЗначениеЗаполнено(Договор)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Договор = ДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = Договор;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
				И Не ЗначениеЗаполнено(Объект.КассаККМ) Тогда
				ЗаполнитьКассуККМПоУмолчанию(Объект);
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
			
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			
			Если Объект.РасшифровкаПлатежа.Количество() <> 1 Тогда
				Объект.РасшифровкаПлатежа.Очистить();
				
				НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
				НоваяСтрока.Курс = 1;
				НоваяСтрока.Кратность = 1;
				НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			КонецЕсли;
			
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
			
			КурсВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Курс);
			КратностьВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Кратность);
			
			Объект.СуммаУчета = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				Объект.Курс,
				КурсВалютыУчета,
				Объект.Кратность,
				КратностьВалютыУчета
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
			
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
			ЗаполнитьКассуПоУмолчанию(Объект);
		КонецЕсли;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Дебиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогооблажения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
			Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка Тогда
			Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, Объект.КассаККМ.СтруктурнаяЕдиница, Объект.Дата);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_РКО(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			Объект.ВидНалога = Неопределено;
			Объект.ВыплатаЗаработнойПлаты.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
			
			Объект.Контрагент = Неопределено;
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			
			Если ЗначениеЗаполнено(Объект.Подотчетник) Тогда
				Объект.ДоговорКредитаЗайма = Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Объект.Подотчетник, Объект.Организация);
			КонецЕсли;
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			Договор = Неопределено;
			Если Не ЗначениеЗаполнено(Договор)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Договор = ДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = Договор;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			Объект.ВыплатаЗаработнойПлаты.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.Корреспонденция = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
			
			Если Не ЗначениеЗаполнено(Объект.КассаККМ) Тогда
				ЗаполнитьКассуККМПоУмолчанию(Объект);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
			ЗаполнитьКассуПоУмолчанию(Объект);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Кредиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогооблажения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
			Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДС(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		// Очистка реквизитов не используемых для видов операций.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			Объект.ВидНалога = Неопределено;
			Объект.ВыплатаЗаработнойПлаты.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
			Объект.Контрагент = Неопределено;
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			
			Если ЗначениеЗаполнено(Объект.Подотчетник) Тогда
				Объект.ДоговорКредитаЗайма = Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Объект.Подотчетник, Объект.Организация);
			КонецЕсли;
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			Договор = Неопределено;
			Если Не ЗначениеЗаполнено(Договор)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Договор = ДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = Договор;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.Корреспонденция = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
			
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.Корреспонденция = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
			Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(Объект.БанковскийСчет, Объект.Организация, Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
			
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Кредиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогооблажения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
	
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, ПолучатьДанныеПлатежаВБюджет = Ложь)
	//Заполняем реквизиты платежа пустыми значениями
	ДанныеXDTO.Вставить("ВидПлатежа");
	ДанныеXDTO.Вставить("Очередность");
	ДанныеXDTO.Вставить("Код");
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДанныеXDTO.Вставить("СтатусСоставителя");
		ДанныеXDTO.Вставить("ПоказательКБК");
		ДанныеXDTO.Вставить("ОКАТО");
		ДанныеXDTO.Вставить("ПоказательОснования");
		ДанныеXDTO.Вставить("ПоказательПериода");
		ДанныеXDTO.Вставить("ПоказательНомера");
		ДанныеXDTO.Вставить("ПоказательДаты");
		ДанныеXDTO.Вставить("ПоказательТипа");
	КонецЕсли;
	//Банковский счет получателя берем из реквизита документа
	ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
	
	
	Запрос = Новый Запрос;
	
	ДополнениеЗапросаПлатежВБюджет = "";
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДополнениеЗапросаПлатежВБюджет = ", ПлатежныеПоручения.Ссылка.СтатусСоставителя КАК СтатусСоставителя,
			|ПлатежныеПоручения.Ссылка.КодБК КАК ПоказательКБК, 
			|ПлатежныеПоручения.Ссылка.ПоказательОснования КАК ПоказательОснования, 
			|ПлатежныеПоручения.Ссылка.ПоказательПериода КАК ПоказательПериода, 
			|ПлатежныеПоручения.Ссылка.ПоказательНомера КАК ПоказательНомера, 
			|ПлатежныеПоручения.Ссылка.ПоказательДаты КАК ПоказательДаты, 
			|ПлатежныеПоручения.Ссылка.ПоказательТипа КАК ПоказательТипа, 
			|ПлатежныеПоручения.Ссылка.КодОКАТО КАК ОКАТО";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.ДокументОснование КАК Ссылка
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|ИЗ
	|	Документ.РасходСоСчета КАК Док
	|ГДЕ
	|	Док.ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|	И Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &Ссылка
	|	И ПлатежноеПоручение.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежныеПоручения.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежныеПоручения.Ссылка.ОчередностьПлатежа КАК Очередность,
	|	ПлатежныеПоручения.Ссылка.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежныеПоручения.Ссылка.ИдентификаторПлатежа КАК Код
	|" + ДополнениеЗапросаПлатежВБюджет + "
	|ИЗ
	|	ПлатежныеПоручения КАК ПлатежныеПоручения";
	
	 
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РеквизитыПлатежа = Запрос.Выполнить().Выбрать();
	Если РеквизитыПлатежа.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, РеквизитыПлатежа);
		//Если счет указан в платежке но не указан в документе - подставим счет получателя из платежки
		Если ЗначениеЗаполнено(РеквизитыПлатежа.СчетКонтрагента) 
			И НЕ ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			ДанныеXDTO.Вставить("БанковскийСчет", РеквизитыПлатежа.СчетКонтрагента);
		КонецЕсли;
		Если ПолучатьДанныеПлатежаВБюджет И СтрДлина(ДанныеXDTO.ПоказательКБК) < 20 Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + ДанныеXDTO.ПоказательКБК, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ПКОДляСтруктурнойЕдиницы(СтруктурнаяЕдиница)
	Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
	Иначе
		ИмяПКО = "ПодразделениеВПроизводственныйСклад_Отправка";
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Процедура ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, Договор)
	СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, Договор);	
		
	ДанныеXDTO.Вставить("Договор", СтруктураДоговора);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресФизЛицаЗаПределамиРФ
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента Тогда
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Процедура ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаВзаимозачет, ИмяТабличнойЧасти = "Дебитор")
	ТаблицаВзаимозачет.Колонки.Добавить("Договор");
		ТаблицаВзаимозачет.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаВзаимозачет.Колонки.Добавить("КратностьВзаиморасчетов");
		ТаблицаВзаимозачет.Колонки.Добавить("Сумма");
		ТаблицаВзаимозачет.Колонки.Добавить("ДокументРасчетов");
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		
		Для каждого СтрокаДебитор Из ТаблицаВзаимозачет Цикл
			
			Контрагент = ?(ИмяТабличнойЧасти = "Дебитор", ДанныеИБ.КонтрагентИсточник, ДанныеИБ.Контрагент); 
		    СтрокаДебитор.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаДебитор.ДоговорКонтрагента, Контрагент);
		
			ВалютаДоговора = СтрокаДебитор.ДоговорКонтрагента.ВалютаРасчетов;
			Если ВалютаДоговора = НациональнаяВалюта Тогда
				СтрокаДебитор.КурсВзаиморасчетов	   = 1;
				СтрокаДебитор.КратностьВзаиморасчетов  = 1;
				СтрокаДебитор.Сумма = СтрокаДебитор.СуммаВзаиморасчетов;
			Иначе
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, ДанныеИБ.Дата);
				СтрокаДебитор.КурсВзаиморасчетов	   = СтруктураКурса.Курс;
				СтрокаДебитор.КратностьВзаиморасчетов  = СтруктураКурса.Кратность;
				
				Если СтрокаДебитор.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
					СтрокаДебитор.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДебитор.СуммаВзаиморасчетов,
							ВалютаДоговора, НациональнаяВалюта,
							СтрокаДебитор.КурсВзаиморасчетов, 1,
							СтрокаДебитор.КратностьВзаиморасчетов, 1
						);
				Иначе
					СтрокаДебитор.Сумма = СтрокаДебитор.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			//ДокументРасчетов
			Если ЗначениеЗаполнено(СтрокаДебитор.Документ) Тогда
				
				ИмяПКО = ИмяПКОДляДокумента(СтрокаДебитор.Документ);
				Если ИмяПКО <> "" Тогда
					СтрокаДебитор.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаДебитор.Документ, ИмяПКО);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
КонецПроцедуры
Функция ПолучитьКассовуюСмену(Объект)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ Документ.ОтчетОРозничныхПродажах КАК КассоваяСмена
	|ГДЕ КассоваяСмена.Номер = &Номер
	| И КассоваяСмена.Организация = &Организация И КассоваяСмена.КассаККМ = &КассаККМ");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	Запрос.УстановитьПараметр("Номер", Строка(Объект.НомерСменыККМ));
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КассоваяСмена;
	КонецЕсли;
	
	НоваяКассоваяСмена = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	НоваяКассоваяСмена.Заполнить(Новый Структура("КассаККМ", Объект.КассаККМ));
		
	НоваяКассоваяСмена.СтатусКассовойСмены    = Перечисления.СтатусыКассовойСмены.Открыта;
	НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
	НоваяКассоваяСмена.ВидЦен = РозничныйВидЦены();
	
	НоваяКассоваяСмена.Номер = Объект.НомерСменыККМ;
	НоваяКассоваяСмена.Дата = НачалоДня(Объект.Дата);
	НоваяКассоваяСмена.НачалоКассовойСмены = НачалоДня(Объект.Дата);
	
	НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НоваяКассоваяСмена.Ссылка;
КонецФункции
Процедура ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			ТекВидКИ = Неопределено;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Мобильный телефон",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;	
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;		
			Иначе
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
	
			ТекТипКИ = ТекВидКИ.Тип;	
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Функция ПолучитьПрайсЛистПоУмолчанию(Организация)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПрайсЛист.Ссылка КАК ПрайсЛист
	|ИЗ Справочник.ПрайсЛисты КАК ПрайсЛист
	|ГДЕ ПрайсЛист.Наименование = ""Прайс-лист кассы Штрих-М""");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПрайсЛист;
	Иначе
		НовыйПрайсЛист = Справочники.ПрайсЛисты.СоздатьЭлемент();
		НовыйПрайсЛист.Наименование = "Прайс-лист кассы Штрих-М";
		НовыйПрайсЛист.Валюта = Константы.НациональнаяВалюта.Получить();
		НовыйПрайсЛист.Организация = Организация;
		НовыйПрайсЛист.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияНоменклатуры;
		НовыйПрайсЛист.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Полотно;
		СтрокаВидаЦены = НовыйПрайсЛист.ВидыЦен.Добавить();
		СтрокаВидаЦены.ВидЦен = РозничныйВидЦены();
		НовыйПрайсЛист.Записать();
		
		Возврат НовыйПрайсЛист.Ссылка;
		
	КонецЕсли;
КонецФункции
Функция ПолучитьЭквайринговыйТерминалПоУмолчанию(ПолученныеДанные)
	НайденныйЭТ = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ПолученныеДанные.КассаККМ);
	
	Если ЗначениеЗаполнено(НайденныйЭТ) Тогда
		Возврат НайденныйЭТ;
	КонецЕсли;
	
	НовыйЭТ = Справочники.ЭквайринговыеТерминалы.СоздатьЭлемент();
	
	// базовые реквизиты
	НовыйЭТ.Наименование = "Терминал кассы Штрих-М";
	НовыйЭТ.Организация = ПолученныеДанные.Организация;
	НовыйЭТ.Касса = ПолученныеДанные.КассаККМ;
	НовыйЭТ.СчетУчета = ПланыСчетов.Управленческий.ПереводыВПути;
	НовыйЭТ.СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеРасходы;
	НовыйЭТ.ИспользоватьБезПодключенияОборудования = Истина;
	НовыйЭТ.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	НовыйЭТ.ВидыПлатежныхКарт.Добавить().ВидПлатежнойКарты = "Банковская карта";
	
	// ссылочные типы
	
	
	// контрагент
	КонтрагентБанк = Справочники.Контрагенты.СоздатьЭлемент();
	КонтрагентБанк.Наименование = "Банк эквайрингового терминала";
	КонтрагентБанк.НаименованиеПолное = "Банк эквайрингового терминала кассы Штрих-М";
	КонтрагентБанк.Записать();
	
	НовыйЭТ.Эквайрер = КонтрагентБанк.Ссылка;
	
	// договор
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|Договоры.Ссылка КАК Договор
	|ИЗ Справочник.ДоговорыКонтрагентов КАК Договоры
	|ГДЕ Договоры.Владелец = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентБанк.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НовыйЭТ.Договор = Выборка.Договор;
	Иначе
		ВызватьИсключение(НСтр("ru='Не найден основной договор только что созданного контрагента.'"));
	КонецЕсли;
	
	// Банковский счет
	
	НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	НовыйБанковскийСчет.Заполнить(ПолученныеДанные.Организация);
	НовыйБанковскийСчет.Наименование = "Банковский счет для эквайрингового терминала";
	НовыйБанковскийСчет.Записать();                         
	
	НовыйЭТ.БанковскийСчетЭквайринг = НовыйБанковскийСчет.Ссылка;
	
	НовыйЭТ.Записать();
	
	Возврат НовыйЭТ.Ссылка;
КонецФункции
Процедура ПроверитьИспНесколькихОрганизаций()
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	КОЛИЧЕСТВО(Организации.Ссылка) КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Организации.Ссылка) > 1";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПроверитьНеобходимостьФормСкладаПроизводства(СтруктурнаяЕдиница, КомпонентыОбмена)
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница)
			И СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
			
			МассивСкладов = КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады;
			Если МассивСкладов = Неопределено Тогда
				МассивСкладов = Новый Массив;
			КонецЕсли;
			
			Если МассивСкладов.Найти(СтруктурнаяЕдиница) = Неопределено Тогда
				МассивСкладов.Добавить(СтруктурнаяЕдиница);
			КонецЕсли;
			КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады = МассивСкладов;
		КонецЕсли;
КонецПроцедуры
Процедура ПровестиЧекККМ(Объект)
	Объект.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры
Процедура РассчитатьСуммуНДСВСтрокеДДС(СтрокаТаблицы)
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТаблицы.СтавкаНДС);
		
	СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.СуммаПлатежа - (СтрокаТаблицы.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
КонецПроцедуры
Функция РозничныйВидЦены()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК ВидЦен
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	(ВидыЦен.Наименование = ""Розничные""
	|			ИЛИ ВидыЦен.Наименование = ""Розничная"")");
	
	// найден вид цен с названием розничные, розничная
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидЦеныКассы = Выборка.ВидЦен;
		Возврат ВидЦеныКассы;
	КонецЕсли;
	
	РозничнаяЦена = Справочники.ВидыЦен.СоздатьЭлемент();
	РозничнаяЦена.Наименование = "Розничная";
	РозничнаяЦена.ВалютаЦены = Константы.НациональнаяВалюта.Получить();
	РозничнаяЦена.ЦенаВключаетНДС = Истина;
	РозничнаяЦена.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
	
	РозничнаяЦена.Записать();
	
	Возврат РозничнаяЦена.Ссылка;
КонецФункции
Функция СотрудникПоФизЛицу(ФизЛицо)
	Сотрудник = Неопределено;
		
		Если Не ЗначениеЗаполнено(ФизЛицо)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(ФизЛицо) Тогда
			Возврат Сотрудник;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Физлицо = &ФизЛицо";
		
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Сотрудник;
		Иначе
			Попытка
				ДанныеНовогоСотрудника = Новый Структура;
				ДанныеНовогоСотрудника.Вставить("Наименование", ФизЛицо.Наименование);
				ДанныеНовогоСотрудника.Вставить("Физлицо", ФизЛицо);
				ДанныеНовогоСотрудника.Вставить("ТипЗанятости", Перечисления.ТипыЗанятости.ОсновноеМестоРаботы);
				ДанныеНовогоСотрудника.Вставить("СчетРасчетовСПерсоналом", ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда);
				ДанныеНовогоСотрудника.Вставить("СчетРасчетовСПодотчетниками", ПланыСчетов.Управленческий.РасчетыСПодотчетниками);
				ДанныеНовогоСотрудника.Вставить("СчетРасчетовПоПерерасходу", ПланыСчетов.Управленческий.ПерерасходПодотчетников);
				
				Сотрудник = Справочники.Сотрудники.СоздатьНовогоСотрудника(ДанныеНовогоСотрудника);
			Исключение
			КонецПопытки;
			
			Возврат Сотрудник;
		КонецЕсли;
КонецФункции
Функция СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаРП)
	АвтоЗачетАвансов = КомпонентыОбмена.УзелКорреспондента.АвтоматическиЗачитыватьАвансы;
	Если АвтоЗачетАвансов Тогда
		СпособПогашенияЗадолженности = "Автоматически";
	Иначе
		Если СтрокаРП.ПризнакАванса Тогда
			СпособПогашенияЗадолженности = "НеПогашать";
		ИначеЕсли ЗначениеЗаполнено(СтрокаРП.Документ) Тогда
			СпособПогашенияЗадолженности = "ПоДокументу";
		Иначе
			СпособПогашенияЗадолженности = "Автоматически";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособПогашенияЗадолженности;
КонецФункции
Функция СтавкаНДСПоСтроке(СтавкаСтрокой)
	Если СтавкаСтрокой = "НДС18" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС18_118" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10_110" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС0" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 0
		|	И НЕ СтавкиНДС.НеОблагается";
	ИначеЕсли СтавкаСтрокой = "НДС20" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС20_120" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";	
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
КонецФункции
Функция СтавкаНДССтрокой_Отправка(СтавкаНДС)
	Если СтавкаНДС.Ставка = 18
			И НЕ СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС18";
		ИначеЕсли СтавкаНДС.Ставка = 18
			И СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС18_118";
		ИначеЕсли СтавкаНДС.Ставка = 10 
			И НЕ СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС10";
		ИначеЕсли СтавкаНДС.Ставка = 10 
			И СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС10_110";
		ИначеЕсли СтавкаНДС.Ставка = 0 Тогда
			СтавкаНДССтрокой = "НДС0"; 
		Иначе
			СтавкаНДССтрокой = "БезНДС";
		КонецЕсли;
		
		Возврат СтавкаНДССтрокой;
КонецФункции
Функция СтруктураДоговораКонтрагента(ДанныеИБ, Договор, Контрагент = Неопределено)
	Если ЗначениеЗаполнено(Контрагент) Тогда
			ВестиРасчетыПоДоговорам = Контрагент.ВестиРасчетыПоДоговорам = Истина;
		Иначе
			ВестиРасчетыПоДоговорам = ДанныеИБ.Контрагент.ВестиРасчетыПоДоговорам = Истина;
		КонецЕсли;
		
		Если Не ВестиРасчетыПоДоговорам 
			И ЗначениеЗаполнено(Договор) Тогда
				
			Если ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.СчетФактура") 
				ИЛИ ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
				
				Документ = ДанныеИБ.ДокументОснование;
			Иначе
				Документ = ДанныеИБ.Ссылка;
			КонецЕсли;
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ДополнительныеРасходы")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионера") 
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомитенту")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОПереработке")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетПереработчика")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплату")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				
				СписокВидовДоговора = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
			Иначе
				СписокВидовДоговора = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, Документ.ВидОперации);
			КонецЕсли;
			
			СтруктураДоговора = Новый Структура;
			
			СтруктураДоговора.Вставить("ВидДоговора");
			СтруктураДоговора.Вставить("Наименование");
			СтруктураДоговора.Вставить("Организация");
			СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах");
			СтруктураДоговора.Вставить("Контрагент");
			СтруктураДоговора.Вставить("Номер");
			СтруктураДоговора.Вставить("Дата");
			СтруктураДоговора.Вставить("ВалютаВзаиморасчетов");
			СтруктураДоговора.Вставить("ВидЦен");
			
			ЗаполнитьЗначенияСвойств(СтруктураДоговора, Договор);
			
			СтруктураДоговора.Контрагент = Договор.Владелец;
			СтруктураДоговора.ВалютаВзаиморасчетов = Договор.ВалютаРасчетов;
			СтруктураДоговора.Дата = Договор.ДатаДоговора;
			СтруктураДоговора.Номер = Договор.НомерДоговора;
			
			СтруктураДоговора.Организация = ДанныеИБ.Организация;
			
			Если СписокВидовДоговора.Количество() > 0
				И СписокВидовДоговора.НайтиПоЗначению(СтруктураДоговора.ВидДоговора) = Неопределено Тогда
				СтруктураДоговора.ВидДоговора = СписокВидовДоговора[0].Значение;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.ДополнительныеРасходы") Тогда
				
				Для каждого СтрокаТабличнойЧасти Из ДанныеИБ.Запасы Цикл
					Если ТипЗнч(СтрокаТабличнойЧасти.ДокументПоступления) = Тип("ДокументСсылка.ПриходнаяНакладная")
						И СтрокаТабличнойЧасти.ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
						
						СтруктураДоговора.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураДоговора = Новый Структура("Значение, ИмяПКО", СтруктураДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		Иначе
			СтруктураДоговора = Новый Структура("Значение, ИмяПКО", Договор, "Справочник_ДоговорыКонтрагентов_Отправка");
		КонецЕсли;
		
		Возврат СтруктураДоговора;
КонецФункции
Функция СтруктураДоговораКредитаИЗайма(ДанныеИБ, Договор)
	СтруктураДоговора = Новый Структура;
			
	СтруктураДоговора.Вставить("ВидДоговора");
	СтруктураДоговора.Вставить("Наименование");
	СтруктураДоговора.Вставить("Организация");
	СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах");
	СтруктураДоговора.Вставить("Контрагент");
	СтруктураДоговора.Вставить("Номер");
	СтруктураДоговора.Вставить("Дата");
	СтруктураДоговора.Вставить("ВалютаВзаиморасчетов");
	СтруктураДоговора.Вставить("ВидЦен");
			
	ЗаполнитьЗначенияСвойств(СтруктураДоговора, Договор);
	
	Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СтруктураДоговора.Контрагент = Договор.Владелец;
	КонецЕсли;
			
	СтруктураДоговора.ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
	СтруктураДоговора.ВалютаВзаиморасчетов = Договор.ВалютаРасчетов;
	
	СтруктураДоговора.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Договор кредита (займа) номер %1 от %2'"),
		ДанныеИБ.Номер,
		ДанныеИБ.Дата);
		
	СтруктураДоговора = Новый Структура("Значение, ИмяПКО", СтруктураДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
	Возврат СтруктураДоговора;
КонецФункции
Функция ТаблицаРаспределенияМатериалов(ДанныеИБ)
	ТаблицаРаспределенияМатериалов = Новый ТаблицаЗначений;
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("Номенклатура");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("Количество");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("КоличествоМест");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("Коэффициент");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("НоменклатурнаяГруппа");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		
		Если ДанныеИБ.Продукция.Количество() = 1 Тогда
			
			Для каждого СтрокаТаблицы Из ДанныеИБ.Запасы Цикл
				ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "ТипНоменклатуры");
				Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.КоличествоМест = СтрокаТаблицы.Количество;
					НоваяСтрока.НоменклатурнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Продукция[0].Номенклатура, "КатегорияНоменклатуры"); 
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ДокументСсылкаСборкаЗапасов = ДанныеИБ.Ссылка;
			
			СтруктураДополнительныеСвойства = Новый Структура;
			УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборкаЗапасовПродукция.НомерСтроки КАК КоррНомерСтроки,
			|	СборкаЗапасовПродукция.Номенклатура КАК КоррНоменклатура,
			|	ВЫБОР
			|		КОГДА &ИспользоватьХарактеристики
			|			ТОГДА СборкаЗапасовПродукция.Характеристика
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК КоррХарактеристика,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПартии
			|			ТОГДА СборкаЗапасовПродукция.Партия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК КоррПартия,
			|	СборкаЗапасовПродукция.Спецификация КАК КоррСпецификация,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|	КОНЕЦ КАК КоррСчетУчета,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|	КОНЕЦ КАК СчетУчетаПродукции,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|	КОНЕЦ КАК СчетДт,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|	КОНЕЦ КАК СчетДтПродукции,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ ВЫБОР
			|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|			КОНЕЦ
			|	КОНЕЦ КАК СчетКтПродукции,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
			|			ТОГДА СборкаЗапасовПродукция.Количество
			|		ИНАЧЕ СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
			|	КОНЕЦ КАК КоррКоличество,
			|	ЛОЖЬ КАК Распределено
			|ПОМЕСТИТЬ Вт_Продукция
			|ИЗ
			|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
			|ГДЕ
			|	СборкаЗапасовПродукция.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(Вт_Продукция.КоррНомерСтроки) КАК КоррНомерСтроки,
			|	Вт_Продукция.КоррНоменклатура,
			|	Вт_Продукция.КоррХарактеристика,
			|	Вт_Продукция.КоррПартия,
			|	Вт_Продукция.КоррСпецификация,
			|	Вт_Продукция.КоррСчетУчета,
			|	Вт_Продукция.СчетУчетаПродукции,
			|	Вт_Продукция.СчетДт,
			|	Вт_Продукция.СчетДтПродукции,
			|	Вт_Продукция.СчетКтПродукции,
			|	СУММА(Вт_Продукция.КоррКоличество) КАК КоррКоличество,
			|	Вт_Продукция.Распределено
			|ИЗ
			|	Вт_Продукция КАК Вт_Продукция
			|
			|СГРУППИРОВАТЬ ПО
			|	Вт_Продукция.КоррНоменклатура,
			|	Вт_Продукция.КоррХарактеристика,
			|	Вт_Продукция.КоррПартия,
			|	Вт_Продукция.КоррСпецификация,
			|	Вт_Продукция.КоррСчетУчета,
			|	Вт_Продукция.СчетУчетаПродукции,
			|	Вт_Продукция.СчетДт,
			|	Вт_Продукция.СчетДтПродукции,
			|	Вт_Продукция.СчетКтПродукции,
			|	Вт_Продукция.Распределено";
			
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
			Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
			Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
			
			ТаблицаПродукция = Запрос.Выполнить().Выгрузить();
			Документы.СборкаЗапасов.СформироватьТаблицуРаспределенияМатериаловСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция);
			
			ТаблицаРаспределенияМатериаловСборка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспределенияМатериаловСборка;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаРаспределенияМатериаловСборка.НомерСтроки,
			|	ТаблицаРаспределенияМатериаловСборка.Номенклатура,
			|	ТаблицаРаспределенияМатериаловСборка.Количество,
			|	ТаблицаРаспределенияМатериаловСборка.КоррНоменклатура КАК Продукция
			|ПОМЕСТИТЬ ВТ_ТаблицаРаспределенияМатериаловСборка
			|ИЗ
			|	&ТаблицаРаспределенияМатериаловСборка КАК ТаблицаРаспределенияМатериаловСборка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВТ_ТаблицаРаспределенияМатериаловСборка.НомерСтроки) КАК НомерСтроки,
			|	ВТ_ТаблицаРаспределенияМатериаловСборка.Номенклатура КАК Номенклатура,
			|	СУММА(ВТ_ТаблицаРаспределенияМатериаловСборка.Количество) КАК Количество,
			|	СУММА(ВТ_ТаблицаРаспределенияМатериаловСборка.Количество) КАК КоличествоМест,
			|	ВТ_ТаблицаРаспределенияМатериаловСборка.Продукция.КатегорияНоменклатуры КАК НоменклатурнаяГруппа,
			|	ВТ_ТаблицаРаспределенияМатериаловСборка.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	МАКСИМУМ(1) КАК Коэффициент
			|ИЗ
			|	ВТ_ТаблицаРаспределенияМатериаловСборка КАК ВТ_ТаблицаРаспределенияМатериаловСборка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ТаблицаРаспределенияМатериаловСборка.Номенклатура,
			|	ВТ_ТаблицаРаспределенияМатериаловСборка.Продукция.КатегорияНоменклатуры,
			|	ВТ_ТаблицаРаспределенияМатериаловСборка.Номенклатура.ЕдиницаИзмерения
			|
			|УПОРЯДОЧИТЬ ПО
			|	МАКСИМУМ(ВТ_ТаблицаРаспределенияМатериаловСборка.НомерСтроки)";
			
			Запрос.УстановитьПараметр("ТаблицаРаспределенияМатериаловСборка", ТаблицаРаспределенияМатериаловСборка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеИБ.Запасы.Количество() = 1 Тогда
			
			Для каждого СтрокаТаблицы Из ДанныеИБ.Продукция Цикл
				ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "ТипНоменклатуры");
				Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.КоличествоМест = СтрокаТаблицы.Количество;
					НоваяСтрока.НоменклатурнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Запасы[0].Номенклатура, "КатегорияНоменклатуры"); 
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ДокументСсылкаСборкаЗапасов = ДанныеИБ.Ссылка;
			
			СтруктураДополнительныеСвойства = Новый Структура;
			УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборкаЗапасовПродукция.НомерСтроки КАК НомерСтроки,
			|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА &ИспользоватьХарактеристики
			|			ТОГДА СборкаЗапасовПродукция.Характеристика
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК Характеристика,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПартии
			|			ТОГДА СборкаЗапасовПродукция.Партия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК Партия,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПартии
			|			ТОГДА СборкаЗапасовПродукция.Партия.Статус
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка)
			|	КОНЕЦ КАК ПартияСтатус,
			|	СборкаЗапасовПродукция.Спецификация КАК Спецификация,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ ВЫБОР
			|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|			КОНЕЦ
			|	КОНЕЦ КАК СчетУчета,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ ВЫБОР
			|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаЗапасов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|			КОНЕЦ
			|	КОНЕЦ КАК СчетУчетаЗапасов,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
			|			ТОГДА СборкаЗапасовПродукция.Количество
			|		ИНАЧЕ СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
			|	КОНЕЦ КАК Количество,
			|	ВЫБОР
			|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
			|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
			|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|		ИНАЧЕ ВЫБОР
			|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
			|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
			|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
			|			КОНЕЦ
			|	КОНЕЦ КАК СчетКт,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
			|			ТОГДА СборкаЗапасовПродукция.Резерв
			|		ИНАЧЕ СборкаЗапасовПродукция.Резерв * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
			|	КОНЕЦ КАК Резерв
			|ПОМЕСТИТЬ Вт_Продукция
			|ИЗ
			|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
			|ГДЕ
			|	СборкаЗапасовПродукция.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(Вт_Продукция.НомерСтроки) КАК НомерСтроки,
			|	Вт_Продукция.Номенклатура,
			|	Вт_Продукция.Характеристика,
			|	Вт_Продукция.Партия,
			|	Вт_Продукция.ПартияСтатус,
			|	Вт_Продукция.СчетУчета,
			|	Вт_Продукция.СчетУчетаЗапасов,
			|	Вт_Продукция.Спецификация,
			|	СУММА(Вт_Продукция.Количество) КАК Количество,
			|	СУММА(Вт_Продукция.Резерв) КАК Резерв,
			|	Вт_Продукция.СчетКт,
			|	ЛОЖЬ КАК Распределено
			|ИЗ
			|	Вт_Продукция КАК Вт_Продукция
			|
			|СГРУППИРОВАТЬ ПО
			|	Вт_Продукция.Номенклатура,
			|	Вт_Продукция.Характеристика,
			|	Вт_Продукция.Партия,
			|	Вт_Продукция.ПартияСтатус,
			|	Вт_Продукция.СчетУчета,
			|	Вт_Продукция.СчетУчетаЗапасов,
			|	Вт_Продукция.Спецификация,
			|	Вт_Продукция.СчетКт";
			
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
			Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
			Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
			
			ТаблицаПродукция = Запрос.Выполнить().Выгрузить();
			Документы.СборкаЗапасов.СформироватьТаблицуРаспределенияМатериаловРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция);
			
			ТаблицаРаспределенияМатериаловРазборка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспределенияМатериаловРазборка;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаРаспределенияМатериаловРазборка.НомерСтроки,
			|	ТаблицаРаспределенияМатериаловРазборка.Номенклатура,
			|	ТаблицаРаспределенияМатериаловРазборка.Количество,
			|	ТаблицаРаспределенияМатериаловРазборка.КоррНоменклатура КАК Продукция
			|ПОМЕСТИТЬ Вт_ТаблицаРаспределенияМатериаловРазборка
			|ИЗ
			|	&ТаблицаРаспределенияМатериаловРазборка КАК ТаблицаРаспределенияМатериаловРазборка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(Вт_ТаблицаРаспределенияМатериаловРазборка.НомерСтроки) КАК НомерСтроки,
			|	Вт_ТаблицаРаспределенияМатериаловРазборка.Номенклатура КАК Номенклатура,
			|	СУММА(Вт_ТаблицаРаспределенияМатериаловРазборка.Количество) КАК Количество,
			|	СУММА(Вт_ТаблицаРаспределенияМатериаловРазборка.Количество) КАК КоличествоМест,
			|	Вт_ТаблицаРаспределенияМатериаловРазборка.Продукция.КатегорияНоменклатуры КАК НоменклатурнаяГруппа,
			|	Вт_ТаблицаРаспределенияМатериаловРазборка.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	МАКСИМУМ(1) КАК Коэффициент
			|ИЗ
			|	Вт_ТаблицаРаспределенияМатериаловРазборка КАК Вт_ТаблицаРаспределенияМатериаловРазборка
			|
			|СГРУППИРОВАТЬ ПО
			|	Вт_ТаблицаРаспределенияМатериаловРазборка.Номенклатура,
			|	Вт_ТаблицаРаспределенияМатериаловРазборка.Продукция.КатегорияНоменклатуры,
			|	Вт_ТаблицаРаспределенияМатериаловРазборка.Номенклатура.ЕдиницаИзмерения
			|
			|УПОРЯДОЧИТЬ ПО
			|	МАКСИМУМ(Вт_ТаблицаРаспределенияМатериаловРазборка.НомерСтроки)";
			
			Запрос.УстановитьПараметр("ТаблицаРаспределенияМатериаловРазборка", ТаблицаРаспределенияМатериаловРазборка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаРаспределенияМатериалов;
КонецФункции
Процедура УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект)
	АвтопогашениеЗадолженности = Истина;
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		    АвтопогашениеЗадолженности = Ложь;
		    Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если АвтопогашениеЗадолженности Тогда
		Объект.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически;
		
		Объект.ДоговорыАвтоЗачетаДолгов.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = Объект.ДоговорыАвтоЗачетаДолгов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		Объект.ДоговорыАвтоЗачетаДолгов.Свернуть("Договор", "СуммаПлатежа");
	Иначе
		Объект.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации)
	ПризнакПроведенПолученный = Неопределено;
	// Устанавливается в особых случаях, когда проведение документа зависит от других данных.
	ПолученныеДанные.ДополнительныеСвойства.Свойство("Проведен", ПризнакПроведенПолученный);
		
	// Если признак проведения не был задан явно, считается что он взведен.
	Если ПризнакПроведенПолученный = Неопределено Тогда
		ПризнакПроведенПолученный = Истина;
	КонецЕсли;
	ПолученныеДанные.Проведен = ПризнакПроведенПолученный;
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.Проведен = ПолученныеДанные.Проведен;
	КонецЕсли;
КонецПроцедуры
Процедура УстановкаНастройкиКассыККМ(Объект)
	МенеджерЗаписи = РегистрыСведений.НастройкиКассыШтрихМ.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.КассаККМ = Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.КассаККМ = Объект.Ссылка;
	МенеджерЗаписи.РегистрационныйНомер = Объект.Код;
	МенеджерЗаписи.ПрайсЛист = ПолучитьПрайсЛистПоУмолчанию(Объект.Владелец);
	МенеджерЗаписи.Записать();
КонецПроцедуры
Функция ФизЛицоПоДаннымXDTO(ДанныеXDTO)
	ФизЛицо = Неопределено;	
	Попытка
		ФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.Сотрудник.Ссылка.Значение));
		Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
			ФизЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеXDTO.Сотрудник.ФИО);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ФизЛицо;
КонецФункции
Функция ФизЛицоПоСотруднику(Сотрудник)
	Если ЗначениеЗаполнено(Сотрудник.Физлицо) Тогда
		СтруктураФизЛица = Новый Структура("Значение, ИмяПКО", Сотрудник.Физлицо, "Справочник_ФизическиеЛица_Отправка");
	Иначе
		
		НаименованиеФизЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Наименование");
		
		СтруктураФизЛица = Новый Структура;
		СтруктураФизЛица.Вставить("ФИО", НаименованиеФизЛица);
		СтруктураФизЛица.Вставить("УточнениеНаименования", НаименованиеФизЛица);
		
		СтруктураФизЛица = Новый Структура("Значение, ИмяПКО", СтруктураФизЛица, "Справочник_ФизическиеЛицаИзСтруктуры_Отправка");
	
	КонецЕсли;
	
	Возврат СтруктураФизЛица;
КонецФункции
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("НациональнаяВалюта");
	ПараметрыКонвертации.Вставить("ПроизводственныеСклады");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Производство_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Производство_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Организации_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Организации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСПоПлатежнымКартам_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСПоПлатежнымКартам_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОПереработкеПередачаДавальц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОПереработкеПередачаДавальц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОПереработкеТребованиеНакл_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОПереработкеТребованиеНакл_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеЗапасов_ВозврИзЭкспл_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Производство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Производство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПроизводствоВПеремещениеОтходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПроизводствоВПеремещениеОтходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПроизводствоВПеремещениеПродук_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПроизводствоВПеремещениеПродук_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ДокументыФизическихЛиц_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_РС_ДокументыФизическихЛиц_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОткрытиеКассовойСмены_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПДС_ПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_ПДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОЧекККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОЧекККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОЧекККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОЧекККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_ПДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ЦеныНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РС_ЦеныНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КассыККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ЗакрытьКассовуюСмену" Тогда 
		ЗакрытьКассовуюСмену(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПБДС" Тогда 
		ОтложеннаяОбработка_ПБДС(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПДС" Тогда 
		ОтложеннаяОбработка_ПДС(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКО" Тогда 
		ОтложеннаяОбработка_ПКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РКО" Тогда 
		ОтложеннаяОбработка_РКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДС" Тогда 
		ОтложеннаяОбработка_СБДС(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ПровестиЧекККМ" Тогда 
		ПровестиЧекККМ(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "УстановкаНастройкиКассыККМ" Тогда 
		УстановкаНастройкиКассыККМ(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
