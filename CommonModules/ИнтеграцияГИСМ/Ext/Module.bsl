////////////////////////////////////////////////////////////////////////////////
//
// ИнтеграцияГИСМ: серверные процедуры и функции подсистемы "Интеграция с ГИСМ"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбменГИСМ

// Выполнить обмен с ГИСМ
//
Процедура ВыполнитьОбменРегламентноеЗадание() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СертификатыДляПодписанияНаСервере = СертификатыДляПодписанияНаСервере();
	
	Если СертификатыДляПодписанияНаСервере = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СертификатыДляПодписанияНаСервере.Сертификаты Цикл
		
		ОбработатьОчередьПолученияДанныхРегламентнымЗаданием(СтрокаТЧ.GLN, СертификатыДляПодписанияНаСервере);
		ОбработатьОчередьПолученияКвитанцийОФиксацииРегламентнымЗаданием(СтрокаТЧ.GLN, СертификатыДляПодписанияНаСервере);
		
	КонецЦикла;
	
	ОбработатьОчередьПередачиДанных(СертификатыДляПодписанияНаСервере);
	
КонецПроцедуры

// Добавляет документ в очередь получения данных
//
// Параметры:
//  ДанныеДляПолученияДокумента - Структура - со свойствами:
//    * GLN       - Число - Регистрационный номер предприятия.
//    * output_id - Число - Идентификатор документа.
//    * action_id - Число - Номер операции маркировки.
//
Процедура ДобавитьВОчередьПолученияДанных(ДанныеДляПолученияДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьПолученияДанныхГИСМ.СоздатьМенеджерЗаписи();
	Запись.GLN             = ДанныеДляПолученияДокумента.GLN;
	Запись.output_id       = ДанныеДляПолученияДокумента.output_id;
	Запись.action_id       = ДанныеДляПолученияДокумента.action_id;
	Запись.Данные          = Новый ХранилищеЗначения(ДанныеДляПолученияДокумента.Данные);
	Запись.ДатаРегистрации = ДанныеДляПолученияДокумента.ДатаРегистрации;
	Запись.Записать();
	
	ДанныеДляПолученияДокумента.ДобавленВОчередь = Истина;
	
КонецПроцедуры

// Удаляет документ из очереди получения данных
//
// Параметры:
//  ДанныеДляПолученияДокумента - Структура - со свойствами:
//    * GLN       - Число - Регистрационный номер предприятия.
//    * output_id - Число - Идентификатор документа.
//
Процедура УдалитьИзОчередиПолученияДанных(ДанныеДляПолученияДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьПолученияДанныхГИСМ.СоздатьМенеджерЗаписи();
	Запись.GLN       = ДанныеДляПолученияДокумента.GLN;
	Запись.output_id = ДанныеДляПолученияДокумента.output_id;
	Запись.Удалить();
	
КонецПроцедуры

// Обработать очередь передачи данных в ГИСМ
//
// Параметры:
//  СертификатыДляПодписанияНаСервере - Структура - со свойствами (Можно получить функцией СертификатыДляПодписанияНаСервере):
//    * МенеджерКриптографии - МенеджерКриптографии - Менеджер криптографии.
//    * Сертификаты - ТаблицаЗначений - Таблица сертификатов организации.
//
// Возвращаемое значение:
// Структура - со свойствами:
//  * Изменения - Массив - Структуры со свойствами
//
Функция ОбработатьОчередьПередачиДанных(СертификатыДляПодписанияНаСервере = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
	
	Категории = КатегорииОпераций();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьПередачиДанных.Сообщение          КАК Сообщение,
	|	ОчередьПередачиДанных.Сообщение.Операция КАК Операция
	|ИЗ
	|	РегистрСведений.ОчередьПередачиДанныхГИСМ КАК ОчередьПередачиДанных");
	
	СтатусыЦветТекстаТребуетВниманияГИСМ = СтатусыЦветТекстаТребуетВниманияГИСМ();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Категории.ПередачаДанных.Получить(Выборка.Операция) <> Неопределено Тогда
			Результат = ИнтеграцияГИСМВызовСервера.ПередатьДанные(
				Выборка.Сообщение, СертификатыДляПодписанияНаСервере);
		ИначеЕсли Категории.ПолучениеКвитанции.Получить(Выборка.Операция) <> Неопределено Тогда
			Результат = ИнтеграцияГИСМВызовСервера.ПолучитьКвитанциюОФиксации(Выборка.Сообщение);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			
			Выполнено = СтатусыЦветТекстаТребуетВниманияГИСМ.Найти(Результат.РезультатОбработкиОтвета.НовыйСтатус) <> Неопределено
			            Или Не ЗначениеЗаполнено(Результат.РезультатОбработкиОтвета.ТекстОшибки);
			
			СтрокаРезультата = Новый Структура;
			СтрокаРезультата.Вставить("Документ",           Результат.Документ);
			СтрокаРезультата.Вставить("Основание",          Результат.Основание);
			СтрокаРезультата.Вставить("Выполнено",          ЗначениеЗаполнено(Результат.РезультатОбработкиОтвета.НовыйСтатус));
			СтрокаРезультата.Вставить("ТекстОшибки",        Результат.РезультатОбработкиОтвета.ТекстОшибки);
			СтрокаРезультата.Вставить("НовыйСтатус",        Результат.РезультатОбработкиОтвета.НовыйСтатус);
			СтрокаРезультата.Вставить("ИсходящееСообщение", Результат.ИсходящееСообщение);
			СтрокаРезультата.Вставить("ВходящееСообщение",  Результат.ВходящееСообщение);
			
			ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить выборку из регистра ОчередьПолученияКвитанцийОФиксацииГИСМ по регистрационному номеру предприятия (GLN)
//
// Параметры:
//  GLN - Число - Регистрационный номер предприятия.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка из результата запроса.
//
Функция ВыборкаОчередьПолученияКвитанцийОФиксации(GLN) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьПолученияКвитанцийОФиксацииГИСМ.Сообщение.ВладелецФайла КАК Документ,
	|	ОчередьПолученияКвитанцийОФиксацииГИСМ.Сообщение.Операция      КАК Операция,
	|	ОчередьПолученияКвитанцийОФиксацииГИСМ.Сообщение               КАК Сообщение,
	|	ОчередьПолученияКвитанцийОФиксацииГИСМ.Данные                  КАК Данные
	|ИЗ
	|	РегистрСведений.ОчередьПолученияКвитанцийОФиксацииГИСМ КАК ОчередьПолученияКвитанцийОФиксацииГИСМ
	|ГДЕ
	|	ОчередьПолученияКвитанцийОФиксацииГИСМ.GLN = &GLN");
	
	Запрос.УстановитьПараметр("GLN", GLN);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать();
	
КонецФункции

// Подготовить сообщение получения квитанции к передаче
//
// Параметры:
//  КонвертSOAP - Строка - Конверт SOAP
//  Реквизиты - Структура - со свойствами:
//    * Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция обмена
//    * ТипСообщения - ПеречислениеСсылка.ТипыСообщенийГИСМ - Тип сообщения
//    * Документ - ДокументСсылка - Документ
//    * СообщениеОснование - СправочникСсылка.ГИСМПрисоединенныеФайлы - Исходящее сообщение
//    * СообщениеОснованиеСтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийГИСМ - Статус обработки
//    * ТекстСообщенияXML - Строка - Текст сообщения XML
// 
// Возвращаемое значение:
// Структура - со свойствами:
//    * Документ - ДокументСсылка - Документ
//    * Основание - ДокументСсылка - Документ
//    * Выполнено - Булево - Признак выполнения операции
//    * ТекстОшибки - Строка - Текст ошибки
//    * НовыйСтатус - Статусы<*>ГИСМ - Новый статус
//    * ИсходящееСообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Исходящее сообщение
//
Функция ПодготовитьСообщениеПолученияКвитанцииКПередаче(КонвертSOAP, Реквизиты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Попытка
			Результат = ИнтеграцияГИСМВызовСервера.ПодготовитьСообщениеКПередаче(КонвертSOAP, Реквизиты);
			НовыйСтатус = Результат.НовыйСтатус;
			ИсходящееСообщение = Результат.ИсходящееСообщение;
			Выполнено = Истина;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Выполнено = Ложь;
		КонецПопытки;
		
		Попытка
			Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Документ, "Основание");
		Исключение
			Основание = Неопределено;
		КонецПопытки;
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Документ",           Реквизиты.Документ);
		ВозвращаемоеЗначение.Вставить("Основание",          Основание);
		ВозвращаемоеЗначение.Вставить("Выполнено",          Выполнено);
		ВозвращаемоеЗначение.Вставить("ТекстОшибки",        ТекстОшибки);
		ВозвращаемоеЗначение.Вставить("НовыйСтатус",        НовыйСтатус);
		ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", ИсходящееСообщение);
		
		ИнтеграцияГИСМВызовСервера.УдалитьСообщениеИзОчередиПолученияКвитанций(Реквизиты.СообщениеОснование);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаголовокТекстаОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при подготовке к передаче сообщения по документу %1'"),
			Реквизиты.Документ);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ГИСМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ЗаголовокТекстаОшибки + Символы.ПС + ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает сертификаты организаций, для предназначены для подписания на сервере.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Сертификаты - ТаблицаЗначений - содержит сертификат и пароль.
//   * МенеджерКриптографии - МенеджерКриптографии - менеджер криптографии.
//
Функция СертификатыДляПодписанияНаСервере() Экспорт
	
	НастройкиОбмена = НастройкиОбменаГИСМ();
	
	Если НастройкиОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Организация           КАК Организация,
	|	Т.Подразделение         КАК Подразделение,
	|	Т.Сертификат            КАК Сертификат,
	|	Т.ИспользоватьНаСервере КАК ИспользоватьНаСервере
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Организация          КАК Организация,
	|	ТаблицаДанных.Подразделение        КАК Подразделение,
	|	ОрганизацииДляОбменаГИСМ.GLN       КАК GLN,
	|	ТаблицаДанных.Сертификат           КАК Сертификат,
	|	ТаблицаДанных.Сертификат.Отпечаток КАК Отпечаток
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМ
	|		ПО ОрганизацииДляОбменаГИСМ.Организация   = ТаблицаДанных.Организация
	|		 И ОрганизацииДляОбменаГИСМ.Подразделение = ТаблицаДанных.Подразделение
	|ГДЕ
	|	ТаблицаДанных.ИспользоватьНаСервере");
	
	Если НастройкиОбмена.Колонки.Найти("Подразделение") = Неопределено Тогда
		НастройкиОбмена.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.Подразделение.Тип);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Таблица", НастройкиОбмена);
	
	СертификатыОрганизацийДляОбменаНаСервере = Запрос.Выполнить().Выгрузить();
	СертификатыОрганизацийДляОбменаНаСервере.Колонки.Добавить("СертификатКриптографии");
	СертификатыОрганизацийДляОбменаНаСервере.Колонки.Добавить("Пароль");
	
	Для Каждого СтрокаТЧ Из СертификатыОрганизацийДляОбменаНаСервере Цикл
		
		Пароль = ПарольКСертификату(СтрокаТЧ.Сертификат);
		
		СтрокаТЧ.СертификатКриптографии = ЭлектроннаяПодписьСлужебный.ПолучитьСертификатПоОтпечатку(СтрокаТЧ.Отпечаток, Ложь);
		
		Если Пароль <> Неопределено Тогда
			СтрокаТЧ.Пароль = Пароль;
		Иначе
			СтрокаТЧ.Пароль = "";
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("Подписание", Ложь);
	
	СертификатыДляПодписанияНаСервере = Новый Структура;
	СертификатыДляПодписанияНаСервере.Вставить("Сертификаты", СертификатыОрганизацийДляОбменаНаСервере);
	СертификатыДляПодписанияНаСервере.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Возврат СертификатыДляПодписанияНаСервере;
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  Описание - Строка - Описание операции
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено) Экспорт
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		Возврат Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		Возврат СтрШаблон(НСтр("ru = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		Возврат СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция обмена с ГИСМ
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПередачиДанных(ОперацияПередачиДанных, ДокументСсылка = Неопределено, НомерВерсии = Неопределено) Экспорт
	
	КатегорииОпераций = ИнтеграцияГИСМ.КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПередачаДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, ДокументСсылка, НомерВерсии);
	
КонецФункции

// Возвращает операций обмена с ГИСМ, разбитые на категории
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПередачаДанных - Соответствие - Операции передачи данных.
//    * ПолучениеКвитанции - Соответствие - Операции получения квитанций.
//    * ПолучениеСпискаВходящихДокументов - Соответствие - Операции получения списка входящих документов.
//
Функция КатегорииОпераций() Экспорт
	
	ПолучениеСпискаВходящихДокументов = Новый Соответствие;
	ПолучениеСпискаВходящихДокументов.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПолучениеСпискаВходящихДокументов,
		НСтр("ru = 'Получение списка входящих документов'"));
	
	ПередачаДанных = Новый Соответствие;
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанных,
		НСтр("ru = 'Передача данных'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваров,
		НСтр("ru = 'Передача сведений об отгрузке маркированных товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхИмпортМаркированнойПродукции,
		НСтр("ru = 'Передача сведений об импорте маркированной продукции на территорию РФ'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаАннулирования,
		НСтр("ru = 'Передача аннулирования'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки,
		НСтр("ru = 'Передача запрос на закрытие заявки'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения, 
		НСтр("ru = 'Передача подтверждения поступления КиЗ'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ,
		НСтр("ru = 'Передача заявки на выпуск КиЗ'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя,
		НСтр("ru = 'Передача сведений о возврате товара от розничного покупателя'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа,
		НСтр("ru = 'Передача сведений о КиЗ, реализованных в розницу'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВыбраковкаКиЗ,
		НСтр("ru = 'Передача сведений о выбраковке неиндивидуализированных КиЗ'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхСписаниеКиЗ,
		НСтр("ru = 'Передача сведений о списанных КиЗ'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхСписаниеТоваров,
		НСтр("ru = 'Передача сведений о списании маркированной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхМаркировкаТоваров,
		НСтр("ru = 'Передача сведений о маркированной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПеремаркировкаТоваров,
		НСтр("ru = 'Передача сведений о перемаркированной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссия,
		НСтр("ru = 'Передача сведений о возврате маркированной продукции физическому лицу (комиссия)'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭС,
		НСтр("ru = 'Передача сведений об экспорте маркированной продукции за пределы ЕАЭС'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС,
		НСтр("ru = 'Передача сведений об экспорте маркированной продукции в страны ЕАЭС'"));
	ПередачаДанных.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВвозМаркированнойПродукцииИзЕАЭС,
		НСтр("ru = 'Передача сведений о ввозе маркированной продукции из стран ЕАЭС на территорию РФ'"));
	
	ТекстПолучениеКвитанции = НСтр("ru = 'Получение квитанции'");
	
	ПолучениеКвитанции = Новый Соответствие;
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаАннулированияПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваровПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхИмпортМаркированнойПродукцииПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявкиПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаПодтвержденияПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажаПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателяПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхСписаниеКиЗПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВыбраковкаКиЗПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхСписаниеТоваровПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхМаркировкаТоваровПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПеремаркировкаТоваровПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссияПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭСПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭСПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	ПолучениеКвитанции.Вставить(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВвозМаркированнойПродукцииИзЕАЭСПолучениеКвитанции,
		ТекстПолучениеКвитанции);
	
	Категории = Новый Структура;
	Категории.Вставить("ПередачаДанных", ПередачаДанных);
	Категории.Вставить("ПолучениеКвитанции", ПолучениеКвитанции);
	Категории.Вставить("ПолучениеСпискаВходящихДокументов", ПолучениеСпискаВходящихДокументов);
	
	Возврат Категории;
	
КонецФункции

// Поддерживаемые операции обмена с ГИСМ
//
// Возвращаемое значение:
//  Соответствие - Соответствие номера операции и структуры со свойствами:
//   * Операция - Перечисление.ОперацииОбменаГИСМ
//   * Описание - Строка
//
Функция ПоддерживаемыеТипыДокументов() Экспорт
	
	ПоддерживаемыеТипыДокументов = Новый Соответствие;
	
	ОписаниеТипаДокумента = Новый Структура;
	ОписаниеТипаДокумента.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПолучениеНовогоСтатуса);
	ОписаниеТипаДокумента.Вставить("Описание", НСтр("ru = 'Уведомление об изменении статуса заявки на выпуск КиЗ'"));
	ПоддерживаемыеТипыДокументов.Вставить(11, ОписаниеТипаДокумента);
	
	ОписаниеТипаДокумента = Новый Структура;
	ОписаниеТипаДокумента.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПолучениеТоваров);
	ОписаниеТипаДокумента.Вставить("Описание", НСтр("ru = 'Уведомление о выпущенных КиЗ'"));
	ПоддерживаемыеТипыДокументов.Вставить(12, ОписаниеТипаДокумента);
	
	ОписаниеТипаДокумента = Новый Структура;
	ОписаниеТипаДокумента.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПолучениеТоваров);
	ОписаниеТипаДокумента.Вставить("Описание", НСтр("ru = 'Уведомление о поступлении маркированных товаров'"));
	ПоддерживаемыеТипыДокументов.Вставить(30, ОписаниеТипаДокумента);
	
	ОписаниеТипаДокумента = Новый Структура;
	ОписаниеТипаДокумента.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПолучениеАннулирования);
	ОписаниеТипаДокумента.Вставить("Описание", НСтр("ru = 'Аннулирование уведомления об отгрузке маркированных товаров'"));
	ПоддерживаемыеТипыДокументов.Вставить(31, ОписаниеТипаДокумента);
	
	ОписаниеТипаДокумента = Новый Структура;
	ОписаниеТипаДокумента.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПолучениеПодтверждения);
	ОписаниеТипаДокумента.Вставить("Описание", НСтр("ru = 'Подтверждение получения маркированных товаров'"));
	ПоддерживаемыеТипыДокументов.Вставить(32, ОписаниеТипаДокумента);
	
	ОписаниеТипаДокумента = Новый Структура;
	ОписаниеТипаДокумента.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПолучениеЗакрытияЗаявки);
	ОписаниеТипаДокумента.Вставить("Описание", НСтр("ru = 'Закрытие уведомления об отгрузке маркированных товаров'"));
	ПоддерживаемыеТипыДокументов.Вставить(33, ОписаниеТипаДокумента);
	
	ОписаниеТипаДокумента = Новый Структура;
	ОписаниеТипаДокумента.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПолучениеТоваров);
	ОписаниеТипаДокумента.Вставить("Описание", НСтр("ru = 'Уведомление о поступлении маркированных товаров незарегистрированному покупателю'"));
	ПоддерживаемыеТипыДокументов.Вставить(34, ОписаниеТипаДокумента);
	
	Возврат ПоддерживаемыеТипыДокументов;
	
КонецФункции

// Возвращает форматированную строку - представление статуса ГИСМ
//
// Параметры:
//  СтатусГИСМ - ПеречислениеСсылка.СтатусыЗаявокНаВыпускКиЗГИСМ - Статус ГИСМ.
//             - ПеречислениеСсылка.СтатусыИнформированияГИСМ - Статус ГИСМ.
//             - ПеречислениеСсылка.СтатусыПоступленийГИСМ - Статус ГИСМ.
//             - ПеречислениеСсылка.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ - Статус ГИСМ.
//             - ПеречислениеСсылка.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ - Статус ГИСМ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюГИСМ - Дальнейшее действие.
//  ДопустимыеДействия - Массив - Массив с действиями ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюГИСМ, разрешенными
//                                к выводу на форму, например ПередайтеДанные.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса.
//
Функция ПредставлениеСтатусаГИСМ(СтатусГИСМ, ДальнейшееДействие, ДопустимыеДействия) Экспорт
	
	МассивДопустимыеДействия = Новый Массив;
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюГИСМ") Тогда
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(СтатусГИСМ) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВниманияГИСМ = СтатусыЦветТекстаТребуетВниманияГИСМ();
		
		Если СтатусыЦветТекстаТребуетВниманияГИСМ.Найти(СтатусГИСМ) <> Неопределено Тогда
			СтатусГИСМПредставление = Новый ФорматированнаяСтрока(Строка(СтатусГИСМ),,ЦветаСтиля.ЦветТекстаТребуетВниманияГИСМ);
		Иначе
			СтатусГИСМПредставление = Новый ФорматированнаяСтрока(Строка(СтатусГИСМ));
		КонецЕсли;
		
	Иначе
		СтатусГИСМПредставление = СтатусГИСМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДальнейшееДействие) Тогда
		
		ТекстГиперссылки = "";
		Если ДопустимоеДальнейшееДействие(ДальнейшееДействие, МассивДопустимыеДействия) Тогда
			Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные Тогда
				ТекстГиперссылки = "ПередатьДанные";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанныеМаркировкаТоваров Тогда
				ТекстГиперссылки = "ПередатьДанныеМаркировкаТоваров";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанныеПеремаркировкаТоваров Тогда
				ТекстГиперссылки = "ПередатьДанныеПеремаркировкаТоваров";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанныеСписаниеКиЗ Тогда
				ТекстГиперссылки = "ПередатьДанныеСписаниеКиЗ";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение Тогда
				ТекстГиперссылки = "ПодтвердитьПолучение";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку Тогда
				ТекстГиперссылки = "ЗакрытьЗаявку";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
				НРег(Строка(ДальнейшееДействие)),
				Новый Шрифт(,,,,Истина),
				ЦветаСтиля.ЦветГиперссылкиГИСМ,
				,
				ТекстГиперссылки);
			
			СтатусГИСМПредставление = Новый ФорматированнаяСтрока(СтатусГИСМПредставление, ", ", СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусГИСМПредставление;
	
КонецФункции

#КонецОбласти

#Область ЭлектроннаяПодпись

// Подписать сообщение XML
//
// Параметры:
//  ТекстСообщенияXML - Строка - Подсисываемое сообщение XML
//  СертификатКриптографии - Сертификат криптографии
//  МенеджерКриптографии - Менеджер криптографии
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//   * Успех       - Булево - Признак успешности подписания.
//   * КонвертSOAP - Строка - Конверт SOAP.
//   * ТекстОшибки - Строка - Текст ошибки.
//
Функция Подписать(ТекстСообщенияXML, СертификатКриптографии, МенеджерКриптографии) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Успех");
	ВозвращаемоеЗначение.Вставить("КонвертSOAP");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	Попытка
		
		КонвертSOAP = ЭлектроннаяПодписьСлужебный.Подписать(
			ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML),
			ИнтеграцияГИСМКлиентСервер.ПараметрыXMLDSig(),
			СертификатКриптографии, МенеджерКриптографии);
		
		ВозвращаемоеЗначение.Успех = Истина;
		ВозвращаемоеЗначение.КонвертSOAP = КонвертSOAP;
		
	Исключение
		
		ВозвращаемоеЗначение.Успех = Ложь;
		ВозвращаемоеЗначение.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область КиЗ

// Возвращает информацию о КиЗ, которые организация получала от эмитента
//
// Параметры:
//  RFIDTID - Строка - TID RFID-метки КиЗ 
// 
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияГИСМ.СтруктураИнформацииОКиЗ
//
Функция ИнформацияОКиЗПоRFIDTID(RFIDTID) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УведомлениеОВыпускеКиЗГИСМ.ВидКиЗ                КАК ВидКиЗ,
	|	УведомлениеОВыпускеКиЗГИСМ.RFIDTID               КАК RFIDTID,
	|	УведомлениеОВыпускеКиЗГИСМ.RFIDEPC               КАК RFIDEPC,
	|	УведомлениеОВыпускеКиЗГИСМ.НомерКиЗ              КАК НомерКиЗ,
	|	УведомлениеОВыпускеКиЗГИСМ.GTIN                  КАК GTIN,
	|	УведомлениеОВыпускеКиЗГИСМ.СерийныйНомер         КАК СерийныйНомер,
	|	УведомлениеОВыпускеКиЗГИСМ.СпособВыпускаВОборот  КАК СпособВыпускаВОборот,
	|	УведомлениеОВыпускеКиЗГИСМ.ДляМаркировкиОстатков КАК ДляМаркировкиОстатков,
	|	УведомлениеОВыпускеКиЗГИСМ.РазмерКиЗ             КАК РазмерКиЗ
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК УведомлениеОВыпускеКиЗГИСМ
	|ГДЕ
	|	УведомлениеОВыпускеКиЗГИСМ.RFIDTID = &RFIDTID
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКиЗГИСМ.ПустаяСсылка)               КАК ВидКиЗ,
	|	УведомлениеОПоступленииМаркированныхТоваров.RFIDTID           КАК RFIDTID,
	|	УведомлениеОПоступленииМаркированныхТоваров.RFIDEPC           КАК RFIDEPC,
	|	УведомлениеОПоступленииМаркированныхТоваров.НомерКиЗ          КАК НомерКиЗ,
	|	""""                                                          КАК GTIN,
	|	""""                                                          КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВыпускаВОборотГИСМ.ПустаяСсылка) КАК СпособВыпускаВОборот,
	|	Неопределено                                                  КАК ДляМаркировкиОстатков,
	|	ЗНАЧЕНИЕ(Перечисление.РазмерыКиЗГИСМ.ПустаяСсылка)            КАК РазмерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПоступленииМаркированныхТоваровГИСМ.НомераКиЗ КАК УведомлениеОПоступленииМаркированныхТоваров
	|ГДЕ
	|	УведомлениеОПоступленииМаркированныхТоваров.RFIDTID = &RFIDTID
	|	И УведомлениеОПоступленииМаркированныхТоваров.НомерКиЗ <> """"
	|");
	
	Запрос.УстановитьПараметр("RFIDTID", RFIDTID);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = СтруктураИнформацииОКиЗ();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Если ЗначениеЗаполнено(Результат.RFIDEPC)
			 И (Не ЗначениеЗаполнено(Результат.GTIN)
			Или Не ЗначениеЗаполнено(Результат.СерийныйНомер)) Тогда
			
			ДанныеДекодирования     = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(Результат.RFIDEPC);
			Результат.GTIN          = ДанныеДекодирования.GTIN;
			Результат.СерийныйНомер = ДанныеДекодирования.СерийныйНомер;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о КиЗ, которые организация получала от эмитента
//
// Параметры:
//  НомерКиЗ - Строка - номер КиЗ 
// 
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияГИСМ.СтруктураИнформацииОКиЗ
//
Функция ИнформацияОКиЗПоНомеру(НомерКиЗ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УведомлениеОВыпускеКиЗГИСМ.ВидКиЗ               КАК ВидКиЗ,
	|	УведомлениеОВыпускеКиЗГИСМ.RFIDTID              КАК RFIDTID,
	|	УведомлениеОВыпускеКиЗГИСМ.RFIDEPC              КАК RFIDEPC,
	|	УведомлениеОВыпускеКиЗГИСМ.НомерКиЗ             КАК НомерКиЗ,
	|	УведомлениеОВыпускеКиЗГИСМ.GTIN                 КАК GTIN,
	|	УведомлениеОВыпускеКиЗГИСМ.СерийныйНомер        КАК СерийныйНомер,
	|	УведомлениеОВыпускеКиЗГИСМ.СпособВыпускаВОборот  КАК СпособВыпускаВОборот,
	|	УведомлениеОВыпускеКиЗГИСМ.ДляМаркировкиОстатков КАК ДляМаркировкиОстатков,
	|	УведомлениеОВыпускеКиЗГИСМ.РазмерКиЗ             КАК РазмерКиЗ
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК УведомлениеОВыпускеКиЗГИСМ
	|ГДЕ
	|	УведомлениеОВыпускеКиЗГИСМ.НомерКиЗ = &НомерКиЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКиЗГИСМ.ПустаяСсылка)               КАК ВидКиЗ,
	|	УведомлениеОПоступленииМаркированныхТоваров.RFIDTID           КАК RFIDTID,
	|	УведомлениеОПоступленииМаркированныхТоваров.RFIDEPC           КАК RFIDEPC,
	|	УведомлениеОПоступленииМаркированныхТоваров.НомерКиЗ          КАК НомерКиЗ,
	|	""""                                                          КАК GTIN,
	|	""""                                                          КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВыпускаВОборотГИСМ.ПустаяСсылка) КАК СпособВыпускаВОборот,
	|	Неопределено                                                  КАК ДляМаркировкиОстатков,
	|	ЗНАЧЕНИЕ(Перечисление.РазмерыКиЗГИСМ.ПустаяСсылка)            КАК РазмерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПоступленииМаркированныхТоваровГИСМ.НомераКиЗ КАК УведомлениеОПоступленииМаркированныхТоваров
	|ГДЕ
	|	УведомлениеОПоступленииМаркированныхТоваров.НомерКиЗ = &НомерКиЗ
	|	И УведомлениеОПоступленииМаркированныхТоваров.RFIDTID <> """"
	|");
	
	Запрос.УстановитьПараметр("НомерКиЗ", НомерКиЗ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = СтруктураИнформацииОКиЗ();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Если ЗначениеЗаполнено(Результат.RFIDEPC)
			 И (Не ЗначениеЗаполнено(Результат.GTIN)
			Или Не ЗначениеЗаполнено(Результат.СерийныйНомер)) Тогда
			
			ДанныеДекодирования     = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(Результат.RFIDEPC);
			Результат.GTIN          = ДанныеДекодирования.GTIN;
			Результат.СерийныйНомер = ДанныеДекодирования.СерийныйНомер;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Структура информации о КиЗ, которая возвращается фукнкциями получения информации о КиЗ
// 
// Возвращаемое значение:
//  Структура - поля:
//  * ВидКиЗ - ПеречислениеСсылка.ВидыКиЗГИСМ - Вид КиЗ
//  * RFIDTID - Строка - TID
//  * НомерКиЗ - Строка - Номер КиЗ
//  * GTIN - Строка - GTIN, записанный в КиЗ эмитентом
//  * СерийныйНомер - Строка - серийный номер, записанный в КиЗ эмитентом
//  * СпособВыпускаВОборот - ПеречислениеСсылка.СпособыВыпускаВОборотГИСМ - Способ выпуска в оборот
//  * РазмерКиЗ - ПеречислениеСсылка.РазмерыКиЗГИСМ - Размер КиЗ
//
Функция СтруктураИнформацииОКиЗ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("RFIDTID",       "");
	Результат.Вставить("RFIDEPC",       "");
	Результат.Вставить("НомерКиЗ",      "");
	Результат.Вставить("GTIN",          "");
	Результат.Вставить("СерийныйНомер", "");
	Результат.Вставить("ВидКиЗ",                Перечисления.ВидыКиЗГИСМ.ПустаяСсылка());
	Результат.Вставить("СпособВыпускаВОборот",  Перечисления.СпособыВыпускаВОборотГИСМ.ПустаяСсылка());
	Результат.Вставить("РазмерКиЗ",             Перечисления.РазмерыКиЗГИСМ.ПустаяСсылка());
	Результат.Вставить("ДляМаркировкиОстатков", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВерсииСхемОбмена

// Возращает URI пространства имен системы маркировки заданной версии.
//
// Возращаемое значение:
//  Строка - URI пространства имен.
Функция URIПространстваИмен(Версия) Экспорт
	
	Возврат СтрШаблон("http://nalog.ru/MarkInfo/%1", Версия);
	
КонецФункции

// Возращает URI текущего пространства имен системы маркировки.
//
// Возращаемое значение:
//  Строка - URI пространства имен.
Функция URIПространстваИменИспользуемойВерсииСхемОбмена(Версия = Неопределено) Экспорт
	
	СоответствиеВерсийСхемОбмена = СоответствиеВерсийСхемОбмена();
	
	Если Версия = Неопределено Тогда
		ВерсияДляЧтения = ВерсииСхемОбмена().Клиент;
	Иначе
		ВерсияДляЧтения = Версия;
	КонецЕсли;
	
	ПространствоИмен = СоответствиеВерсийСхемОбмена.Получить(ВерсияДляЧтения);
	Если ПространствоИмен = Неопределено Тогда
		ПространствоИмен = СоответствиеВерсийСхемОбмена.Получить(ВерсияСхемОбменаПоследняяПоддерживаемая());
	КонецЕсли;
	
	Возврат ПространствоИмен;
	
КонецФункции

// Получить версии схем обмена с ГИСМ.
// 
// Возвращаемое значение:
//  Структура со свойствами:
//   *Клиент - Строка - Версия клиента.
//   *Сервер - Строка - Версия сервера.
//
Функция ВерсииСхемОбмена() Экспорт
	
	ВерсииСхемОбмена = Константы.ВерсииСхемОбменаГИСМ.Получить();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Клиент",              ВерсияСхемОбменаПоУмолчанию());
	ВозвращаемоеЗначение.Вставить("Сервер",              ВерсияСхемОбменаПоУмолчанию());
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновление", Истина);
	
	Версии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсииСхемОбмена, ",");
	Если Версии.Количество() = 2 Тогда
		ВозвращаемоеЗначение.Клиент              = Версии[0];
		ВозвращаемоеЗначение.Сервер              = Версии[1];
		ВозвращаемоеЗначение.ТребуетсяОбновление = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверить возможность использовать возможностей версии
//
// Параметры:
//  ТребуемаяВерсия - Строка - Требуемая версия
// 
// Возвращаемое значение:
//  Булево - Возможность использования
//
Функция ИспользоватьВозможностиВерсии(ТребуемаяВерсия) Экспорт
	
	НомерИспользуемойВерсии = ВерсииСхемОбмена().Клиент;
	
	ЗначенияТребуемойВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТребуемаяВерсия, ".");
	ЗначенияИспользуемойВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомерИспользуемойВерсии, ".");
	
	Возврат Число(ЗначенияТребуемойВерсии[0]) <= Число(ЗначенияИспользуемойВерсии[0])
	        И Число(ЗначенияТребуемойВерсии[1]) <= Число(ЗначенияИспользуемойВерсии[1]);
	
КонецФункции

// Проверить возможность использовать возможностей версии
//
// Параметры:
//  ПроверяемаяВерсия - Строка - Требуемая версия
//  ТребуемаяВерсия - Строка - Используемая версия
// 
// Возвращаемое значение:
//  Булево - Возможность использования
//
Функция ВерсияНеМенееТребуемой(ПроверяемаяВерсия, ТребуемаяВерсия) Экспорт
	
	ЗначенияПроверяемойВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроверяемаяВерсия, ".");
	ЗначенияТребуемойВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТребуемаяВерсия, ".");
	
	Возврат Число(ЗначенияПроверяемойВерсии[0]) >= Число(ЗначенияТребуемойВерсии[0])
	        И Число(ЗначенияПроверяемойВерсии[1]) >= Число(ЗначенияТребуемойВерсии[1]);
	
КонецФункции

// Получить последнюю поддерживаемую версию схем обмена с ГИСМ.
// 
// Возвращаемое значение:
//  Строка - Номер версии
//
Функция ВерсияСхемОбменаПоследняяПоддерживаемая() Экспорт
	
	Возврат "2.41";
	
КонецФункции

// Получить версию схем обмена с ГИСМ по умолчанию.
// 
// Возвращаемое значение:
//  Строка - Номер версии
//
Функция ВерсияСхемОбменаПоУмолчанию() Экспорт
	
	Возврат "2.41";
	
КонецФункции

// Записывает в константу ВерсииСхемОбменаГИСМ версии схем обмена
//
// Параметры:
//  Клиент - Строка - Версия клиента
//  Сервер - Строка - Версия сервера
//
Процедура ЗаписатьВерсииСхемОбмена(Клиент, Сервер) Экспорт
	
	Константы.ВерсииСхемОбменаГИСМ.Установить(Клиент + "," + Сервер);
	
КонецПроцедуры

// Проверить и обновить версию схем обмена. Вызывается при обмене с ГИСМ.
//
// Параметры:
//  ВерсияСхемОбмена - Строка - Версия схем ГИСМ
//
Функция ПроверитьОбновитьВерсиюСхемОбмена(НоваяВерсияСхемОбмена) Экспорт
	
	ВерсииСхемОбмена = ВерсииСхемОбмена();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Клиент",              ВерсииСхемОбмена.Клиент);
	ВозвращаемоеЗначение.Вставить("Сервер",              ВерсииСхемОбмена.Сервер);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновление", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстСообщения",      "");
	
	Если НоваяВерсияСхемОбмена = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СообщениеОбОбновленииСервера = СтрШаблон(
		НСтр("ru = 'Текущая версия конфигурации не поддерживает актуальный формат обмена с ГИСМ (%1).
		           |Необходимо выполнить обновление конфигурации.
		           |До выполнения обновления загрузка данных из ГИСМ будет выполнятся не в полном объеме.'"), НоваяВерсияСхемОбмена);
	
	Если ВерсииСхемОбмена.Клиент <> НоваяВерсияСхемОбмена
		Или ВерсииСхемОбмена.Сервер <> НоваяВерсияСхемОбмена Тогда
		
		Если СоответствиеВерсийСхемОбмена().Получить(НоваяВерсияСхемОбмена) <> Неопределено Тогда
			
			ЗаписатьВерсииСхемОбмена(НоваяВерсияСхемОбмена, НоваяВерсияСхемОбмена);
			
			ВозвращаемоеЗначение.ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Версия Формата обмена с ГИСМ обновлена до %2.'"),
				ВерсииСхемОбмена.Клиент,
				НоваяВерсияСхемОбмена);
			
		Иначе
			
			Если ВерсииСхемОбмена.Сервер <> НоваяВерсияСхемОбмена Тогда
				ЗаписатьВерсииСхемОбмена(ВерсииСхемОбмена.Клиент, НоваяВерсияСхемОбмена);
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТребуетсяОбновление = Истина;
			ВозвращаемоеЗначение.ТекстСообщения = СообщениеОбОбновленииСервера;
			
		КонецЕсли;
		
	ИначеЕсли ВерсииСхемОбмена.ТребуетсяОбновление Тогда
		
		ЗаписатьВерсииСхемОбмена(ВерсииСхемОбмена.Клиент, ВерсииСхемОбмена.Сервер);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает соответствие схем обмена и Имен пространств XDTO
Функция СоответствиеВерсийСхемОбмена() Экспорт
	
	СоответствиеВерсийСхемОбмена = Новый Соответствие;
	
	СоответствиеВерсийСхемОбмена.Вставить(ВерсияСхемОбменаПоУмолчанию(),             URIПространстваИмен(ВерсияСхемОбменаПоУмолчанию()));
	СоответствиеВерсийСхемОбмена.Вставить(ВерсияСхемОбменаПоследняяПоддерживаемая(), URIПространстваИмен(ВерсияСхемОбменаПоследняяПоддерживаемая()));
	
	Возврат СоответствиеВерсийСхемОбмена;
	
КонецФункции

#КонецОбласти

#Область XDTO

// Возвращает Объект XDTO, получаемый из текста сообщения XML
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Возвращает объект XDTO по имени типа из пространства имен ГИСМ
//
// Параметры:
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ОбъектXDTO(ИмяТипа, Версия = Неопределено) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ТипФабрикаXDTO(ИмяТипа, Версия));
	
КонецФункции

// Возвращает Объект XDTO, получаемый из текста сообщения XML
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML
//  Тип - Строка, Неопределено, ТипОбъектаXDTO - Тип объекта
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML, Тип = Неопределено, Версия = Неопределено) Экспорт
	
	ПространствоИменПоУмолчанию = СтрШаблон("xmlns=""%1""", URIПространстваИменИспользуемойВерсииСхемОбмена(Версия));
	
	Если СтрНайти(ТекстСообщенияXML, ПространствоИменПоУмолчанию) = 0 Тогда
		
		ПространствоИменXSD = "xmlns:xsd=""http://www.w3.org/2001/XMLSchema""";
		ПространствоИменXS  = "xmlns:xs=""http://www.w3.org/2001/XMLSchema""";
		
		ТекстСообщенияXML = СтрЗаменить(ТекстСообщенияXML, ПространствоИменXSD, ПространствоИменПоУмолчанию + " " + ПространствоИменXSD);
		ТекстСообщенияXML = СтрЗаменить(ТекстСообщенияXML, ПространствоИменXS,  ПространствоИменПоУмолчанию + " " + ПространствоИменXS);
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	Если Тип = Неопределено Тогда
		СоздаваемыйТип = ОбъектXDTOПоИмениСвойства(Неопределено, ИмяКорневогоЭлементаXML(ТекстСообщенияXML), Версия).Тип();
	ИначеЕсли ТипЗнч(Тип) = Тип("Строка") Тогда
		СоздаваемыйТип = ОбъектXDTOПоИмениСвойства(Неопределено, Тип, Версия).Тип();
	Иначе
		СоздаваемыйТип = Тип;
	КонецЕсли;
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СоздаваемыйТип);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Функция - Объект XDTOПо имени свойства
//
// Параметры:
//  ОбъектXDTOРодитель - ОбъектXDTO - ОбъектXDTO в контексте которого запрашивается свойство
//  ИмяСвойства - Строка - Имя свойства
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ОбъектXDTOПоИмениСвойства(ОбъектXDTOРодитель, ИмяСвойства, Версия = Неопределено) Экспорт
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		СвойствоXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИменИспользуемойВерсииСхемОбмена(Версия)).КорневыеСвойства.Получить(ИмяСвойства);
	Иначе
		СвойствоXDTO = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства);
	КонецЕсли;
	
	Если СвойствоXDTO = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Свойство %1 отсутствует в составе типов информационной системы маркировки.'"), ИмяСвойства);
	Иначе
		Возврат ФабрикаXDTO.Создать(СвойствоXDTO.Тип);
	КонецЕсли;
	
КонецФункции

// Преобразует объект XDTO в XML
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция ОбъектXDTOВXML(ОбъектXDTO, ИмяТипа) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ИнтеграцияГИСМ.ПараметрыФорматированияXML(Ложь));
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	ТекстXML = ЗаписьXML.Закрыть();
	
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns:d2p1=""" + URIПространстваИменИспользуемойВерсииСхемОбмена() + """", "");
	ТекстXML = СтрЗаменить(ТекстXML, URIПространстваИменИспользуемойВерсииСхемОбмена(), "");
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""""", "");
	
	Возврат ТекстXML;
	
КонецФункции

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
// 
// Возвращаемое значение:
//  Структура - Структура объекта
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO) Экспорт
	
	Структура = Новый Структура;
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Возвращает тип значения (объекта) XDTO из пространства имен ГИСМ по имени
//
// Параметры:
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  ТипЗначенияXDTO - Тип значения (объекта)
//
Функция ТипФабрикаXDTO(ИмяТипа, Версия = Неопределено) Экспорт
	
	Возврат ФабрикаXDTO.Тип(URIПространстваИменИспользуемойВерсииСхемОбмена(Версия), ИмяТипа);
	
КонецФункции

#КонецОбласти

#Область XML

// Инициализирует объект ПараметрыЗаписиXML.
//
// Параметры:
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//   -  ПараметрыЗаписиXML - набор параметров, который используется при записи XML.
//
Функция ПараметрыФорматированияXML(ИспользоватьОтступы = Истина, СимволОтступа = "  ") Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиXML(
		"UTF-8",
		"1.0",
		ИспользоватьОтступы,
		ИспользоватьОтступы,
		СимволОтступа);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Получает имя корневого узла текста в формате XML.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст в формате XML.
// 
// Возвращаемое значение:
//  Строка - имя корневого узла.
//
Функция ИмяКорневогоЭлементаXML(ТекстСообщенияXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM.ПервыйДочерний.ИмяУзла;
	
КонецФункции

#КонецОбласти

#Область Перечисления

// Преобразует значение перечисления в код, которое соответствует формату обмена с ГИСМ.
//
// Параметры:
//  ЗначениеПеречисления - Перечисление.СпособыВыпускаВОборотГИСМ - преобразуемое значение перечисления.
//
// Возвращаемое значение:
//  Число - код способа выпуска в оборот в формате обмена с ГИСМ.
//
Функция СпособВыпускаВОборот(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеПеречисления = Перечисления.СпособыВыпускаВОборотГИСМ.ПроизводствоНаТерриторииРФ Тогда
		Возврат 1;
	ИначеЕсли ЗначениеПеречисления = Перечисления.СпособыВыпускаВОборотГИСМ.ВвозНаТерриториюРФ Тогда
		Возврат 2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает значение перечисления СпособыВыпускаВОборотГИСМ соответствующее числовому значению в формате обмена с ГИСМ.
//
// Параметры:
//  Код - Число - код способа выпуска в оборот в формате обмена с ГИСМ.
//
// Возвращаемое значение:
//  Перечисление.СпособыВыпускаВОборотГИСМ - полученное значение перечисления.
//
Функция СпособВыпускаВОборотПоКоду(Код) Экспорт
	
	Если 1 = Код Тогда
		Возврат Перечисления.СпособыВыпускаВОборотГИСМ.ПроизводствоНаТерриторииРФ;
	ИначеЕсли 2 = Код Тогда
		Возврат Перечисления.СпособыВыпускаВОборотГИСМ.ВвозНаТерриториюРФ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразует значение перечисления в код, который соответствует формату обмена с ГИСМ.
//
// Параметры:
//  ЗначениеПеречисления - Перечисление.СпособыПолученияИзготовленныхКИЗГИСМ - преобразуемое значение перечисления.
//
// Возвращаемое значение:
//  Число - код способа получения изготовленных КиЗ в формате обмена с ГИСМ.
//
Функция СпособПолученияИзготовленныхКиЗ(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеПеречисления = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.СамостоятельноеПолучениеУЭмитента Тогда
		Возврат 1;
	ИначеЕсли ЗначениеПеречисления = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ДоставкаЭмитентомДоУказанногоМеста Тогда
		Возврат 2;
	ИначеЕсли ЗначениеПеречисления = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ЧерезМногофункциональныйЦентр Тогда
		Возврат 3;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает значение перечисления СпособыВыпускаВОборотГИСМ соответствующее числовому значению в формате обмена с ГИСМ.
//
// Параметры:
//  Код - Число - код способа выпуска в оборот в формате обмена с ГИСМ.
//
// Возвращаемое значение:
//  Перечисление.СпособыВыпускаВОборотГИСМ - полученное значение перечисления.
//
Функция СпособПолученияИзготовленныхКиЗПоКоду(Код) Экспорт
	
	Если 1 = Код Тогда
		Возврат Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.СамостоятельноеПолучениеУЭмитента;
	ИначеЕсли 2 = Код Тогда
		Возврат Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ДоставкаЭмитентомДоУказанногоМеста;
	ИначеЕсли 3 = Код Тогда
		Возврат Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ЧерезМногофункциональныйЦентр;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразует значение перечисления РазмерыКиЗГИСМ в код, который соответствует формату обмена с ГИСМ.
//
// Параметры:
//  ЗначениеПеречисления - Перечисление.СпособыПолученияИзготовленныхКИЗГИСМ - преобразуемое значение перечисления.
//
// Возвращаемое значение:
//  Число - код способа получения изготовленных КиЗ в формате обмена с ГИСМ.
//
Функция РазмерКиЗ(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеПеречисления = Перечисления.РазмерыКиЗГИСМ.Размер25x160 Тогда
		Возврат 2;
	ИначеЕсли ЗначениеПеречисления = Перечисления.РазмерыКиЗГИСМ.Размер53x80 Тогда
		Возврат 1;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает значение перечисления РазмерыКиЗГИСМ соответствующее числовому значению в формате обмена с ГИСМ.
//
// Параметры:
//  Код - Число - код размера КиЗ в формате обмена с ГИСМ.
//
// Возвращаемое значение:
//  Перечисление.РазмерыКиЗГИСМ - полученное значение перечисления.
//
Функция РазмерКиЗПоКоду(Код) Экспорт
	
	Если 2 = Код Тогда
		Возврат Перечисления.РазмерыКиЗГИСМ.Размер25x160;
	ИначеЕсли 1 = Код Тогда
		Возврат Перечисления.РазмерыКиЗГИСМ.Размер53x80;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразует значение перечисления ВидыКиЗГИСМ в код, который соответствует формату обмена с ГИСМ.
//
// Параметры:
//  ЗначениеПеречисления - Перечисление.ВидыКиЗГИСМ - преобразуемое значение перечисления.
//
// Возвращаемое значение:
//  Число - код вида КиЗ в формате обмена с ГИСМ.
//
Функция ВидКиЗ(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеПеречисления = Перечисления.ВидыКиЗГИСМ.Клеевой Тогда
		Возврат 1;
	ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыКиЗГИСМ.Вшивной Тогда
		Возврат 2;
	ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыКиЗГИСМ.Навесной Тогда
		Возврат 3;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает значение перечисления ВидыКиЗГИСМ соответствующее числовому значению в формате обмена с ГИСМ.
//
// Параметры:
//  Код - Число - код вида КиЗ в формате обмена с ГИСМ.
//
// Возвращаемое значение:
//  Перечисление.ВидыКиЗГИСМ - полученное значение перечисления.
//
Функция ВидКиЗПоКоду(Код) Экспорт
	
	Если 1 = Код Тогда
		Возврат Перечисления.ВидыКиЗГИСМ.Клеевой;
	ИначеЕсли 2 = Код Тогда
		Возврат Перечисления.ВидыКиЗГИСМ.Вшивной;
	ИначеЕсли 3 = Код Тогда
		Возврат Перечисления.ВидыКиЗГИСМ.Навесной;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразует признак ДляМаркировкиОстатков в код, который соответствует формату обмена с ГИСМ.
//
// Параметры:
//  ДляМаркировкиОстатков - Булево - преобразуемое значение.
//
// Возвращаемое значение:
//  Число - код признака ДляМаркировкиОстатков в формате обмена с ГИСМ.
//
Функция СпособВводаТовараВОбращение(ДляМаркировкиОстатков) Экспорт
	
	Если ДляМаркировкиОстатков Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;
	
КонецФункции

// Получает значение ДляМаркировкиОстатков, соответствующее числовому значению в формате обмена с ГИСМ.
//
// Параметры:
//  Код - Число - код значения ДляМаркировкиОстатков в формате обмена с ГИСМ.
//
// Возвращаемое значение:
//  Булево - полученное значение признака ДляМаркировкиОстатков.
//
Функция СпособВводаТовараВОбращениеПоКоду(Код) Экспорт
	
	Если Код = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Преобразует значение перечисления ВидОборотаТовараГИСМ в код, который соответствует формату обмена с ГИСМ.
//
// Параметры:
//  ЗначениеПеречисления - Перечисление.ВидОборотаТовараГИСМ - преобразуемое значение перечисления.
//
// Возвращаемое значение:
//  Число - код вида оборота товара в формате обмена с ГИСМ.
//
Функция ВидОборотаТовара(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеПеречисления = Перечисления.ВидОборотаТовараГИСМ.Продажа Тогда
		Возврат 1;
	ИначеЕсли ЗначениеПеречисления = Перечисления.ВидОборотаТовараГИСМ.Комиссия Тогда
		Возврат 2;
	ИначеЕсли ЗначениеПеречисления = Перечисления.ВидОборотаТовараГИСМ.АгентскийДоговор Тогда
		Возврат 3;
	ИначеЕсли ЗначениеПеречисления = Перечисления.ВидОборотаТовараГИСМ.Прочее Тогда
		Возврат 4;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает значение перечисления ВидОборотаТовараГИСМ соответствующее числовому значению в формате обмена с ГИСМ.
//
// Параметры:
//  Код - Число - код вида оборота товаров в формате обмена с ГИСМ.
//
// Возвращаемое значение:
//  Перечисление.ВидОборотаТовараГИСМ - полученное значение перечисления.
//
Функция ВидОборотаТовараПоКоду(Код) Экспорт
	
	Если 1 = Код Тогда
		Возврат Перечисления.ВидОборотаТовараГИСМ.Продажа;
	ИначеЕсли 2 = Код Тогда
		Возврат Перечисления.ВидОборотаТовараГИСМ.Комиссия;
	ИначеЕсли 3 = Код Тогда
		Возврат Перечисления.ВидОборотаТовараГИСМ.АгентскийДоговор;
	ИначеЕсли 4 = Код Тогда
		Возврат Перечисления.ВидОборотаТовараГИСМ.Прочее;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает значение перечисления ПричиныСписанияКиЗГИСМ соответствующее числовому значению в формате обмена с ГИСМ.
//
// Параметры:
//  Код - Число - код вида оборота товаров в формате обмена с ГИСМ.
//
// Возвращаемое значение:
//  Перечисление.ПричиныСписанияКиЗГИСМ - полученное значение перечисления.
//
Функция ПричинаСписанияПоКоду(Код) Экспорт
	
	Если 1 = Код Тогда
		Возврат Перечисления.ПричиныСписанияКиЗГИСМ.Поврежден;
	ИначеЕсли 2 = Код Тогда
		Возврат Перечисления.ПричиныСписанияКиЗГИСМ.Утерян;
	ИначеЕсли 3 = Код Тогда
		Возврат Перечисления.ПричиныСписанияКиЗГИСМ.Уничтожен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразует значение перечисления ПричиныСписанияКиЗГИСМ в код, который соответствует формату обмена с ГИСМ.
//
// Параметры:
//  ЗначениеПеречисления - Перечисление.ПричиныСписанияКиЗГИСМ - преобразуемое значение перечисления.
//
// Возвращаемое значение:
//  Число - причина списания в формате обмена с ГИСМ.
//
Функция ПричинаСписания(ЗначениеПеречисления) Экспорт
	
	Если Перечисления.ПричиныСписанияКиЗГИСМ.Поврежден = ЗначениеПеречисления Тогда
		Возврат 1;
	ИначеЕсли Перечисления.ПричиныСписанияКиЗГИСМ.Утерян = ЗначениеПеречисления Тогда
		Возврат 2;
	ИначеЕсли Перечисления.ПричиныСписанияКиЗГИСМ.Уничтожен = ЗначениеПеречисления Тогда
		Возврат 3;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСЧасовымиПоясами

// Формирует представление даты с часовым поясом.
//
// Параметры:
//  Дата        - ДатаВремя - дата, для которой нужно вывести представление.
//  ЧасовойПояс - Строка - идентификатор часового пояса.
// 
// Возвращаемое значение:
//  Строка - предаставление даты с часовым поясом.
//
Функция ДатаСЧасовымПоясом(Дата, Знач ЧасовойПояс = Неопределено) Экспорт
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ЧасовойПоясСеанса();
	КонецЕсли;
	
	Смещение = (Дата - УниверсальноеВремя(Дата, ЧасовойПояс)) / 3600;
	Если Смещение > 0 Тогда
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "+" + Формат(+Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	Иначе
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "-" + Формат(-Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление даты в формате Coordinated Universal Time
//
// Параметры:
//  Дата - ДатаВремя - дата, представление которой необходимо получить.
// 
// Возвращаемое значение:
//  Строка - представление даты в формате Coordinated Universal Time(UTC)
//
Функция ДатаUTC(Дата) Экспорт
	
	Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z";
	
	Возврат Результат;
	
КонецФункции

// Возвращает временную дату, которая будет в дальнейшем преобразована в дату с часовым поясом.
//
// Параметры:
//  Дата - Дата - Дата для преобразования.
// 
// Возвращаемое значение:
//  Дата - Временная дата
//
Функция ВременнаяДата(Дата) Экспорт
	
	Возврат ДобавитьМесяц(Дата, -12 * 1000);
	
КонецФункции

// Устанавливает в ОбъектXDTO вместо даты со смещением временную дату. В дальнейшем временная дата будет заменена датой со смещением в результирующем ХМL.
// Тем самым обходится ограничение ОбъектXDTO, который не позволяет уставливать в свойство дату со смещением.
//
// Параметры:
//  ОбъектXDTO            - ОбъектXDTO - в свойство данного объекта помещается дата.
//  ИмяСвойства           - ИмяСвойства - имя свойства, в которое устанавливается дата.
//  Дата                  - ДатаВремя - дата, которая устанавливается в свойство.
//  ХранилищеВременныхДат - Соответствие - в нем хранится соответствие временных дат и дат со смещением.
//
Процедура УстановитьДатуСЧасовымПоясом(ОбъектXDTO, ИмяСвойства, Дата, ХранилищеВременныхДат) Экспорт
	
	ДатаСЧасовымПоясом = ДатаСЧасовымПоясом(Дата);
	
	ВременнаяДатаUTC = ДатаUTC(ВременнаяДата(Дата));
	
	ОбъектXDTO[ИмяСвойства] = ВременнаяДатаUTC;
	ЛексическоеЗначениеВременнойДаты = ОбъектXDTO.ПолучитьXDTO(ИмяСвойства).ЛексическоеЗначение;
	
	ХранилищеВременныхДат.Вставить(ЛексическоеЗначениеВременнойДаты, ДатаСЧасовымПоясом);
	
КонецПроцедуры

// Заменяет временные даты в тексте сообщения в формает XML на даты со смещением, согласно соответствию
//
// Параметры:
//  ХранилищеВременныхДат - Соответствие - хранит временные даты, которые нужно заменить на даты со смещением
//  ТекстСообщенияXML     - Строка - текст сообщения, в котором выполняется замена
// 
// Возвращаемое значение:
//  Строка - ТекстСообщенияXML, в котором выполнена замена.
//
Функция ПреобразоватьВременныеДаты(ХранилищеВременныхДат, Знач ТекстСообщенияXML) Экспорт
	
	Текст = ТекстСообщенияXML;
	
	Для Каждого КлючИЗначение Из ХранилищеВременныхДат Цикл
		
		ВременнаяДата = КлючИЗначение.Ключ;
		Дата = КлючИЗначение.Значение;
		
		Текст = СтрЗаменить(Текст, ВременнаяДата, Дата);
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

// Обработчик подисики на событие "Перед записью" для документов, влиящий на расчет статуса поступления Заявок на выпуск КиЗ.
//
// Параметры:
//  Источник        - ДокументОбъект - источник события.
//  Отказ           - см. описание в синтаксис помощнике к обработчику события объекта ПередЗаписью.
//  РежимЗаписи     - см. описание в синтаксис помощнике к обработчику события объекта ПередЗаписью.
//  РежимПроведения - см. описание в синтаксис помощнике к обработчику события объекта ПередЗаписью.
//
Процедура ВлияющийНаСтатусПоступленияКиЗДокументПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ") Тогда 
		Возврат;
	КонецЕсли;
	
	ИнтеграцияГИСМПереопределяемый.ВлияющийНаСтатусПоступленияКиЗДокументПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Обработчик подисики на событие "При проведении" для документов, влиящий на расчет статуса поступления Заявок на выпуск КиЗ.
//
// Параметры:
//  Источник        - ДокументОбъект - источник события.
//  Отказ           - см. описание в синтаксис помощнике к обработчику события объекта ПриПроведении.
//  РежимПроведения - см. описание в синтаксис помощнике к обработчику события объекта ПриПроведении.
//
Процедура ВлияющийНаСтатусПоступленияКиЗДокументПриПроведении(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияГИСМПереопределяемый.ВлияющийНаСтатусПоступленияКиЗДокументПриПроведении(Источник, Отказ, РежимПроведения);
	
КонецПроцедуры

// Обработчик подисики на событие "При записи" для документов, влиящий на расчет статуса поступления Заявок на выпуск КиЗ.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусЗаявкиНаВыпускКиЗ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусЗаявкиНаВыпускКиЗ(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подисики на событие "При записи" для документов, влиящий на расчет статуса Уведомлений о поступлении маркированного товара.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусУведомленияОПоступлении(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусУведомленияОПоступлении(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подисики на событие "При записи" для документов, влиящий на расчет статуса Уведомлений о поступлении маркированного товара.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусУведомленияОбОтгрузке(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусУведомленияОбОтгрузке(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подисики на событие "При записи" для документов, влиящий на расчет статуса Информирования ГИСМ.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусИнформированияГИСМ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусИнформированияГИСМ(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборДальнейшиеДействия

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена с ГИСМ в форме документа.
// 
// Возвращаемое значение:
//  Массив - содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт

	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПодтверждениеПолучения);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПоступлениеТоваров);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеУведомлениеОВыпускеКиЗ);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеУтверждениеФНС);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеФормированиеСчетаНаОплату);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОплатитеСчет);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПолучитеСчетНаОплату);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеЗакрытияУведомления);
	
	Возврат Действия;

КонецФункции

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений - формируемый список значений.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru='Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru='Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru='Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется);
	
КонецПроцедуры

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  ДинамическийСписок     - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействиеГИСМ - Перечисление.ДальнейшееДействиеГИСМ, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(ДинамическийСписок, ДальнейшееДействиеГИСМ, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	Если ДальнейшееДействиеГИСМ = "ВсеТребующиеДействия" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, "ДальнейшееДействиеГИСМ", ВсеТребующиеДействия, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействиеГИСМ = "ВсеТребующиеОжидания" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, "ДальнейшееДействиеГИСМ", ВсеТребующиеОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействиеГИСМ = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый Массив;
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, "ДальнейшееДействиеГИСМ", ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, "ДальнейшееДействиеГИСМ", ДальнейшееДействиеГИСМ, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействиеГИСМ));
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив дальнейших действий, которые требуют выполнения пользователем для документов, статус которых хранится в регистре "Состояния информирования ГИСМ".
// 
// Возвращаемое значение:
//  Массив - действия, которые необходимо выполнить пользователю.
//
Функция ВсеТребующиеДействияСтатусыИнформирования() Экспорт
	
	МассивДействий = Новый Массив();
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

// Формирует массив дальнейших действий, выполнения которых необходимо ожидать пользователю для документов, статус которых хранится в регистре "Состояния информирования ГИСМ".
// 
// Возвращаемое значение:
//   Массив - действия, выполнения которых ожидает пользователь.
//
Функция ВсеТребующиеОжиданияСтатусыИнформирования() Экспорт
	
	МассивДействий = Новый Массив();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации);
	
	Возврат МассивДействий;
	
КонецФункции

// Добавляет на форму списка условное оформление поля Дата
//
//  Параметры:
//   Форма - УправляемаяФорма – форма документа.
//   ИмяСписка - Строка – имя динамического списка.
//   ИмяПоляДата - Строка - условное оформление формы.
//
Процедура УстановитьУсловноеОформлениеПоляДата(Форма, ИмяСписка = "Список", ИмяПоляДата = "Дата") Экспорт
	
	УсловноеОформлениеКД = Форма.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// Представление даты сегодня "09:46"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты сегодня: ""09:46""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + "Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	// Отображение даты отличной от сегодня "10.06.2012"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты до начала этого дня: ""10.06.2012""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + "Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	// Отображение даты отличной от сегодня "10.06.2012"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты после начала этого дня: ""10.06.2012""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + "Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаявкаНаВыпускКиЗ

// Если строка ТЧ соответствует не заказанной номенклтуре - формирует описание проблемы
//
//  Параметры:
//   Выборка - Выборка – Выборка из результата запроса.
//
Процедура ОтразитьНеЗаказаннуюНоменклатуруВСтроке(Выборка, Объект) Экспорт

	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидКиЗ",               Выборка.ВидКиЗ);
		СтруктураПоиска.Вставить("GTIN",                 Выборка.GTIN);
		СтруктураПоиска.Вставить("СпособВыпускаВОборот", Выборка.СпособВыпускаВОборот);
		СтруктураПоиска.Вставить("РазмерКиЗ",            Выборка.РазмерКиЗ);
		
		НайденныеСтроки = Объект.ВыпущенныеКиЗ.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЕстьПроблема = Истина;
			ТекстОписанияПроблемы = НСтр("ru = '""%1"" отстуствует в списке заказанных КиЗ.'");
			НайденнаяСтрока.ОписаниеПроблемы = СтрШаблон(ТекстОписанияПроблемы, Выборка.Номенклатура);
		КонецЦикла;
		
	КонецЦикла

КонецПроцедуры

// Если строка ТЧ соответствует не найденной номенклтуре - формирует описание проблемы
//
//  Параметры:
//   Выборка - Выборка – Выборка из результата запроса.
//
Процедура ОтразитьНеНайденнуюНоменклатуруВСтроке(Выборка, Объект) Экспорт

	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидКиЗ",               Выборка.ВидКиЗ);
		СтруктураПоиска.Вставить("GTIN",                 Выборка.GTIN);
		СтруктураПоиска.Вставить("СпособВыпускаВОборот", Выборка.СпособВыпускаВОборот);
		СтруктураПоиска.Вставить("РазмерКиЗ",            Выборка.РазмерКиЗ);
		
		НайденныеСтроки = Объект.ВыпущенныеКиЗ.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЕстьПроблема = Истина;
			НайденнаяСтрока.ОписаниеПроблемы = НСтр("ru = 'Для данной строки в информационной базе не найдена позиция номенклатуры.'");
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

// Распределить выпущенные полученные КиЗ на заказанные
//
// Параметры:
//   Выборка - Выборка – Выборка из результата запроса.
//
Процедура РаспределитьВыпущенныеПолученныеКиЗНаЗаказанные(Выборка, Объект) Экспорт

	Пока Выборка.Следующий() Цикл
		
		ВыпущеноКРаспределению  = Выборка.Выпущено;
		ПоступилоКРаспределению = Выборка.Поступило;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		
		НайденныеСтроки = Объект.ЗаказанныеКиЗ.НайтиСтроки(СтруктураПоиска);
		
		ИндексСтроки = 1;
		КоличествоНайденныйСтрок = НайденныеСтроки.Количество();
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.ПоступилоБольшеЧемЗаказано = Ложь;
			НайденнаяСтрока.ВыпущеноБольшеЧемЗаказано  = Ложь;
			
			Если ВыпущеноКРаспределению <= НайденнаяСтрока.Количество Тогда
				
				НайденнаяСтрока.Выпущено = ВыпущеноКРаспределению;
				ВыпущеноКРаспределению   = 0;
				
			Иначе
				
				Если ИндексСтроки < КоличествоНайденныйСтрок Тогда
					НайденнаяСтрока.Выпущено                  = НайденнаяСтрока.Количество;
					ВыпущеноКРаспределению                    = ВыпущеноКРаспределению - НайденнаяСтрока.Количество;
				Иначе
					НайденнаяСтрока.Выпущено = ВыпущеноКРаспределению;
					ВыпущеноКРаспределению   = 0;
					НайденнаяСтрока.ВыпущеноБольшеЧемЗаказано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоступилоКРаспределению <= НайденнаяСтрока.Количество Тогда
				
				НайденнаяСтрока.Поступило = ПоступилоКРаспределению;
				ПоступилоКРаспределению   = 0;
				
			Иначе
				
				Если ИндексСтроки < КоличествоНайденныйСтрок Тогда
					НайденнаяСтрока.Поступило                  = НайденнаяСтрока.Количество;
					ПоступилоКРаспределению                    = ПоступилоКРаспределению - НайденнаяСтрока.Количество;
				Иначе
					НайденнаяСтрока.Поступило = ПоступилоКРаспределению;
					ПоступилоКРаспределению   = 0;
					НайденнаяСтрока.ПоступилоБольшеЧемЗаказано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область Прочее

// Возвращает пароль к сертификату, если доступен текущему пользователю.
// При вызове в привилегированном режиме текущий пользователь не учитывается.
//
// Параметры:
//  Сертификат - Неопределено - вернуть пароли ко всем сертификатам, доступным текущему пользователю.
//             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - вернуть пароль
//                 к указанному сертификату.
//              
// Возвращаемое значение:
//  Неопределено - пароль для указанного сертификата не указан.
//  Строка       - пароль для указанного сертификата.
//  Соответствие - все заданные пароли, доступные текущему пользователю
//                 в виде ключ - сертификат и значение - пароль.
//
Функция ПарольКСертификату(Сертификат = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Константы.КонтекстРаботыГИСМ.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеЭлектронныхПодписейИШифрование") Тогда
		Если Сертификат <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Если Сертификат <> Неопределено Тогда
		Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойства = Данные.Получить(Сертификат);
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
				
				Возврат Свойства.Пароль;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ПаролиСертификатов = Новый Соответствие;
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Возврат ПаролиСертификатов;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Данные Цикл
		Свойства = КлючИЗначение.Значение;
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка()
			 Или ПривилегированныйРежим() Тогда
				ПаролиСертификатов.Вставить(КлючИЗначение.Ключ, Свойства.Пароль);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПаролиСертификатов;
	
КонецФункции

// Возвращает полное имя объекта метаданных, определенного в качестве первого типа в определяемом типе.
// При этом выполняется проверка, что указанный тип ссылочный. В противнром случае вызывается исключение.
//
// Параметры:
//  ИмяОпределяемогоТипа          - Строка - имя определяемого типа.
//  ДолженБытьУказанТолькоОдинТип - Булево - если Истина, то вызывается исключение, в случае если задан больше чем один тип.
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных.
//
Функция ПолноеИмяСсылочногоТипаПоДаннымОпределяемогоТипа(ИмяОпределяемогоТипа, ДолженБытьУказанТолькоОдинТип = Истина) Экспорт
	
	МетаданныеОпределяемогоТипа = Метаданные.ОпределяемыеТипы[ИмяОпределяемогоТипа];
	ТипыЗаданныеВОпределяемомТипе = Метаданные.ОпределяемыеТипы[ИмяОпределяемогоТипа].Тип.Типы();
	
	Если ДолженБытьУказанТолькоОдинТип И ТипыЗаданныеВОпределяемомТипе.Количество() > 1 Тогда
		ВызватьИсключение(СтрШаблон(НСтр("ru = 'В определяемом типе ""%1"" должен быть указан только один тип.'"), МетаданныеОпределяемогоТипа.Имя));
	КонецЕсли;
	
	МетаданныеНоменклатура = Метаданные.НайтиПоТипу(ТипыЗаданныеВОпределяемомТипе[0]);
	
	Если МетаданныеНоменклатура = Неопределено Тогда
		ВызватьИсключение(СтрШаблон(НСтр("ru = 'В определяемом типе ""%1"" должен быть указан ссылочный тип.'"), МетаданныеОпределяемогоТипа.Имя));
	Иначе
		Возврат МетаданныеНоменклатура.ПолноеИмя();
	КонецЕсли;
	
КонецФункции

// Получает организацию и подразделение по GLN.
//
// Параметры:
//  GLN - Строка - GLN.
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *Организация - ОпределяемыйТип.Организация - Организация
//  *Организация - ОпределяемыйТип.Подразделение - Подразделение
//
Функция ОрганизацияПодразделениеПоGLN(GLN) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОрганизацииДляОбменаГИСМ.Организация   КАК Организация,
	|	ОрганизацииДляОбменаГИСМ.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМ
	|ГДЕ
	|	ОрганизацииДляОбменаГИСМ.GLN = &GLN");
	
	Запрос.УстановитьПараметр("GLN", GLN);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Организация");
		ВозвращаемоеЗначение.Вставить("Подразделение");
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает данные контрагента по данным XML
//
// Параметры:
//  ДанныеДокумента    - Структура - должна содержать свойство sender_gln, содержащее GLN отправителя.
//  ДанныеОтправителя  - ДанныеОтправителя - структура содержащая данные отправителя
// 
// Возвращаемое значение:
//  Контрагент - ОпределяемыйТип.Контрагент - найденный в ИБ контрагент.
//
Функция КонтрагентПоДаннымXML(ДанныеДокумента, ДанныеОтправителя) Экспорт
	
	Данные = ИнтеграцияГИСМКлиентСервер.ДанныеКонтрагентаПоДаннымXML(ДанныеДокумента, ДанныеОтправителя);
	
	Контрагент = ИнтеграцияГИСМПереопределяемый.КонтрагентПоИННКПП(Данные.ИНН, Данные.КПП);
	
	Возврат Контрагент;
	
КонецФункции

// Возвращает GLN, указанный для контрагента, указанный в последнем документе подсистемы ГИСМ.
//
// Параметры:
//  Контрагент	 - ОпределяемыйТип.Контрагент - контрагент, для 
// 
// Возвращаемое значение:
//  Строка - GLN контрагента, указанный для него в последнем документе подсистемы ГИСМ.
//
Функция ПоследнийУказанныйВДокументахGLNКонтрагента(Контрагент) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.GLNКонтрагента,
	|	ВложенныйЗапрос.Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.GLNКонтрагента КАК GLNКонтрагента,
	|		УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Дата КАК Дата
	|	ИЗ
	|		Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|	ГДЕ
	|		УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Контрагент = &Контрагент
	|		И УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.GLNКонтрагента <> """"
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		УведомлениеОПоступленииМаркированныхТоваровГИСМ.GLNКонтрагента,
	|		УведомлениеОПоступленииМаркированныхТоваровГИСМ.Дата
	|	ИЗ
	|		Документ.УведомлениеОПоступленииМаркированныхТоваровГИСМ КАК УведомлениеОПоступленииМаркированныхТоваровГИСМ
	|	ГДЕ
	|		УведомлениеОПоступленииМаркированныхТоваровГИСМ.Контрагент = &Контрагент
	|		И УведомлениеОПоступленииМаркированныхТоваровГИСМ.GLNКонтрагента <> """"
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЗаявкаНаВыпускКиЗГИСМ.GLNКонтрагента,
	|		ЗаявкаНаВыпускКиЗГИСМ.Дата
	|	ИЗ
	|		Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ
	|	ГДЕ
	|		ЗаявкаНаВыпускКиЗГИСМ.Контрагент = &Контрагент
	|		И ЗаявкаНаВыпускКиЗГИСМ.GLNКонтрагента <> """") КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.GLNКонтрагента;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Устанавливает условное оформление для полей Статус и Дальнейшее действие в динамических списках, в случае, когда дейстие или статус не требуются.
//
// Параметры:
//  УсловноеОформление               - УсловноеОформление - условное оформление динамического списка.
//  Элементы                         - ЭлементыФормы - элементы формы, в которой устанавливается условное оформление.
//  ИмяСтатусГИСМ                    - Строка - имя элемента формы в которое выводится "Статус ГИСМ".
//  ИмяДальнейшееДействиеГИСМ        - Строка - имя элемента формы в которое выводится "Дальнейшее действие".
//  ПутьКПолюСтатусГИСМ              - Строка - путь к данным, содержащим "Статус ГИСМ".
//  ПутьКПолюДальнейшееДействиеГИСМ  - Строка - путь к данным, содержащим "Дальнейшее действие".
//
Процедура УстановитьУсловноеОформлениеСтатусДальнейшееДействиеГИСМ(УсловноеОформление,
	                                                               Элементы,
	                                                               ИмяСтатусГИСМ,
	                                                               ИмяДальнейшееДействиеГИСМ,
	                                                               ПутьКПолюСтатусГИСМ,
	                                                               ПутьКПолюДальнейшееДействиеГИСМ) Экспорт
	
	// Статус не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСтатусГИСМ);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюСтатусГИСМ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	// Дальнейшее действие не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяДальнейшееДействиеГИСМ);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюДальнейшееДействиеГИСМ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	// Дальнейшее действие не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяДальнейшееДействиеГИСМ);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюДальнейшееДействиеГИСМ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
КонецПроцедуры

// Устанавливает условное оформление для поля Статус в динамических списках для значений "ПринятоГИСМ" и "ОтклоненоГИСМ".
//
// Параметры:
//  УсловноеОформление               - УсловноеОформление - условное оформление динамического списка.
//  Элементы                         - ЭлементыФормы - элементы формы, в которой устанавливается условное оформление.
//  ИмяСтатусГИСМ                    - Строка - имя элемента формы в которое выводится "Статус ГИСМ".
//  ПутьКПолюСтатусГИСМ              - Строка - путь к данным, содержащим "Статус ГИСМ".
//
Процедура УстановитьУсловноеОформлениеСтатусИнформированияГИСМ(УсловноеОформление,
	                                                           Элементы,
	                                                           ИмяСтатусГИСМ,
	                                                           ПутьКПолюСтатусГИСМ) Экспорт

	// Статус ПринятоГИСМ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСтатусГИСМ);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюСтатусГИСМ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	// Статус ОтклоненоГИСМ
	СписокСтатусовОтказ = Новый СписокЗначений;
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСММаркировкаТоваров);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМПеремаркировкаТоваров);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМСписаниеКиЗ);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСтатусГИСМ);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюСтатусГИСМ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусовОтказ;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГИСМ);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Номер ГИСМ" в динамических списках".
//
// Параметры:
//  УсловноеОформление  - УсловноеОформление - условное оформление динамического списка.
//  Элементы            - ЭлементыФормы - элементы формы, в которой устанавливается условное оформление.
//  ИмяНомерГИСМ        - Строка - имя элемента формы в которое выводится "Номер ГИСМ".
//  ПутьКПолюНомерГИСМ  - Строка - путь к данным, содержащим "Номер ГИСМ".
//
Процедура УстановитьУсловноеОформлениеНомерГИСМ(УсловноеОформление,
	                                                    Элементы,
	                                                    ИмяНомерГИСМ,
	                                                    ПутьКПолюНомерГИСМ) Экспорт

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяНомерГИСМ);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ПутьКПолюНомерГИСМ);
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не получен>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
КонецПроцедуры

// Проверяет наличие права создания котрагента у пользователя
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	ЕстьПравоСозданияКонтрагента = Ложь;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.КонтрагентГИСМ.Тип;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипов.Типы()[0]);
		Если МетаданныеТипа <> Неопределено Тогда
			ЕстьПравоСозданияКонтрагента = ПравоДоступа("Добавление", МетаданныеТипа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьПравоСозданияКонтрагента;
	
КонецФункции

// Проверяет, входит ли проверяемых тип в состав определяемого типа "Владелец присоединенных файлов ГИСМ"
//
// Параметры:
//  ПроверяемыйТип - Тип - тип, который проверяется на вхождение
// 
// Возвращаемое значение:
//  Булево - Истина, если тип входит в состав определяемого типа "Владелец присоединенных файлов ГИСМ".
//
Функция ТипПодсистемыГИСМ(ПроверяемыйТип) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайловГИСМ.Тип.СодержитТип(ПроверяемыйТип);
	
КонецФункции

// Формирует массив пустых ссылок документов, являющихся документами поступления маркированной продукции и Неопределено.
// 
// Возвращаемое значение:
//  Массив - сформированный массив.
//
Функция МассивПустыхЗначенийДокументовПоступленияМаркированнойПродукции() Экспорт
	
	МассивПустыхЗначений = Новый Массив;
	МассивПустыхЗначений.Добавить(Неопределено);
	Для Каждого ТипыДокументаПоступления Из Метаданные.ОпределяемыеТипы.ДокументПоступленияМаркированныхТоваровГИСМ.Тип.Типы() Цикл
		МассивПустыхЗначений.Добавить(Документы[Метаданные.НайтиПоТипу(ТипыДокументаПоступления).Имя].ПустаяСсылка());
	КонецЦикла;
	
	Возврат МассивПустыхЗначений;
	
КонецФункции

// Проверяет использование подразделений в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Подразделения используются.
//
Функция ИспользоватьПодразделения() Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ИспользоватьПодразделения();
	
КонецФункции

// Проверяет использование заявок на выпуск КиЗ.
// 
// Возвращаемое значение:
//  Булево - Заявки используются.
//
Функция ИспользоватьЗаявкиНаВыпускКиЗ() Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ИспользоватьЗаявкиНаВыпускКиЗ();
	
КонецФункции

// Проверяет использование нескольких организаций в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Несколько организаций используются.
//
Функция ИспользоватьНесколькоОрганизаций() Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ИспользоватьНесколькоОрганизаций();
	
КонецФункции

// Документ-основание является возвратом поставщику
//
// Параметры:
//  ДокументСсылка - ДокументСсылка- Документ-основание
// 
// Возвращаемое значение:
//  Булево - Основание является возвратом поставщику
//
Функция ДокументОснованиеВозвратПоставщику(ДокументСсылка) Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ДокументОснованиеВозвратПоставщику(ДокументСсылка);
	
КонецФункции

// Получить организацию и подразделение документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, подразделение и организацию которого необходимо получить.
// 
// Возвращаемое значение:
//  Структура со свойствами:
//    * Организация - ОпределяемыйТип.Организация - Организация документа.
//    * Подразделение - ОпределяемыйТип.Подразделение - Подразделение документа.
//
Функция ОрганизацияПодразделениеДокумента(ДокументСсылка) Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ОрганизацияПодразделениеДокумента(ДокументСсылка);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаДокументов

// Ищет документ "Заявка на выпуск Киз" по номеру ГИСМ
//
// Параметры:
//  НомерГИСМ - Строка - номер, присвоенный заявке ГИСМ
// 
// Возвращаемое значение:
//  Структура - 
//     * Ссылка - ДокументСсылка.ЗаявкаНаВыпускКиз - найденная заявка.
//     * Основание - ДокументСсылка - документ-основание, по которому сформирована заявка.
//
Функция ЗаявкаНаВыпускКиЗПоНомеру(НомерГИСМ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка КАК Ссылка,
	|	ЗаявкаНаВыпускКиЗГИСМ.Основание КАК Основание
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ
	|ГДЕ
	|	ЗаявкаНаВыпускКиЗГИСМ.НомерГИСМ = &НомерГИСМ");
	
	Запрос.УстановитьПараметр("НомерГИСМ", НомерГИСМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",    Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("Основание", Выборка.Основание);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Ищет документ "Уведомление об отгрузке маркированных товаров" по номеру ГИСМ
//
// Параметры:
//  НомерГИСМ - Строка - номер, присвоенный уведомлению ГИСМ
// 
// Возвращаемое значение:
//  Структура - 
//     * Ссылка    - ДокументСсылка.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ - найденная заявка.
//     * Основание - ДокументСсылка - документ-основание, по которому будет сформировано уведомление.
//
Функция УведомлениеОбОтгрузкеМаркированныхТоваровПоНомеру(НомерГИСМ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка    КАК Ссылка,
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Основание КАК Основание
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|ГДЕ
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.НомерГИСМ = &НомерГИСМ");
	
	Запрос.УстановитьПараметр("НомерГИСМ", НомерГИСМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",    Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("Основание", Выборка.Основание);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Ищет документ "Уведомление об отгрузке маркированных товаров" по реквизитам.
//
// Параметры:
//  Реквизиты - Структура со свойствами:
//  *НомерДокументаОснования - Строка - Номер документа основания.
//  *ДатаДокументаОснования - Дата - Дата документа основания.
//  *ИННКонтрагента - Строка - ИНН контрагента.
//  *Организация - ОпределяемыйТип.Организация - Организация.
//  *Подразделение - ОпределяемыйТип.Подразделение - Подразделение.
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *Ссылка    - ДокументСсылка.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ - найденная заявка.
//  *Основание - ДокументСсылка - документ-основание, по которому будет сформировано уведомление.
//
Функция УведомлениеОбОтгрузкеМаркированныхТоваровПоРеквизитам(Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка КАК Ссылка,
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Основание КАК Основание
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|ГДЕ
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Организация = &Организация
	|	И УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Подразделение = &Подразделение
	|
	|	И УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Основание.Номер = &НомерДокументаОснования
	|	И НАЧАЛОПЕРИОДА(ЕСТЬNULL(УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Основание.Дата, ДатаВремя(1,1,1)), ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДокументаОснования, ДЕНЬ)
	|	И УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Контрагент.ИНН  = &ИННКонтрагента
	|	И УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.КонтрагентНеЗарегистрированВГИСМ");
	
	Запрос.УстановитьПараметр("НомерДокументаОснования", Реквизиты.НомерДокументаОснования);
	Запрос.УстановитьПараметр("ДатаДокументаОснования",  Реквизиты.ДатаДокументаОснования);
	Запрос.УстановитьПараметр("ИННКонтрагента",          Реквизиты.ИННКонтрагента);
	Запрос.УстановитьПараметр("Организация",             Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",           Реквизиты.Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",    Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("Основание", Выборка.Основание);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать загрузку документа
//
// Параметры:
//  ТекстВходящегоСообщенияXML - Строка - Текст сообщения SOAP
//  ДанныеДляПолученияДокумента - Структура со свойствами:
//  *Свойство - Свойство
//  ВозвращаемоеЗначение - Неопределено, Структура со свойствами:
//  *Свойство - Свойство
// Возвращаемое значение:
//  Структура со свойствами:
//	*Ссылка - ДокументСсылка - Ссылка на загруженный документ
//	*Основание - ДокументСсылка - Документ-основание загруженного документа
//	*НовыйСтатус - Статус - Новый статус документа
//
Функция ОбработатьЗагрузкуДокумента(ТекстВходящегоСообщенияXML, ТекстИсходящегоСообщенияXML, ДанныеДляПолученияДокумента, ВозвращаемоеЗначение = Неопределено) Экспорт
	
	ДанныеОбработки = ИнтеграцияГИСМВызовСервера.ОбработатьОтветНаЗапросПолученияДокумента(ТекстВходящегоСообщенияXML, ДанныеДляПолученияДокумента);
	
	Если ДанныеОбработки.Результат = Неопределено Тогда
		
		Если ВозвращаемоеЗначение<> Неопределено Тогда
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
		КонецЕсли;
		
	Иначе
		
		Если ВозвращаемоеЗначение<> Неопределено Тогда
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.Результат = ДанныеОбработки.Результат;
		КонецЕсли;
		
		ДанныеДокумента   = ДанныеОбработки.Результат.ДанныеДокумента;
		ДанныеОтправителя = ДанныеОбработки.Результат.ДанныеОтправителя;
		НомерДокумента    = ДанныеОбработки.Результат.НомерДокумента;
		
		Сообщения = Новый Структура;
		Сообщения.Вставить("ТекстИсходящегоСообщенияXML", ТекстИсходящегоСообщенияXML);
		Сообщения.Вставить("ТекстВходящегоСообщенияXML",  ТекстВходящегоСообщенияXML);
		Сообщения.Вставить("ВерсияВходящегоСообщенияXML", ДанныеОбработки.Версия);
		
		Если ДанныеДляПолученияДокумента.Данные = Неопределено Тогда
			
			Данные = Новый Структура;
			Данные.Вставить("ТекстИсходящегоСообщенияXML", ТекстИсходящегоСообщенияXML);
			Данные.Вставить("ТекстВходящегоСообщенияXML",  ТекстВходящегоСообщенияXML);
			
			ДанныеДляПолученияДокумента.Данные = Данные;
			ИнтеграцияГИСМ.ДобавитьВОчередьПолученияДанных(ДанныеДляПолученияДокумента);
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			action_id = ДанныеДокумента.action_id;
			Если action_id = 11 Тогда
				ДанныеЗагруженногоДокумента = ЗагрузитьУведомлениеОбИзмененииСтатусаПриВыпускеКиЗ(ДанныеДокумента, Сообщения);
			ИначеЕсли action_id = 12 Тогда
				ДанныеЗагруженногоДокумента = ЗагрузитьУведомлениеОВыпускеКиЗ(ДанныеДокумента, Сообщения);
			ИначеЕсли action_id = 30 Тогда
				ДанныеЗагруженногоДокумента = ЗагрузитьУведомлениеОПоступленииМаркированныхТоваров(ДанныеДокумента, ДанныеОтправителя, НомерДокумента, Сообщения);
			ИначеЕсли action_id = 31 Тогда
				ДанныеЗагруженногоДокумента = ЗагрузитьАннулированиеУведомленияОбОтгрузкеМаркированныхТоваров(ДанныеДокумента, Сообщения);
			ИначеЕсли action_id = 32 Тогда
				ДанныеЗагруженногоДокумента = ЗагрузитьПодтверждениеПолученияМаркированныхТоваров(ДанныеДокумента, Сообщения);
			ИначеЕсли action_id = 33 Тогда
				ДанныеЗагруженногоДокумента = ЗагрузитьЗакрытиеУведомленияОбОтгрузкеМаркированныхТоваров(ДанныеДокумента, Сообщения);
			ИначеЕсли action_id = 34 Тогда
				
				Если ДанныеДляПолученияДокумента.GLN <> ДанныеДокумента.sender_gln Тогда
					
					ДанныеЗагруженногоДокумента = ЗагрузитьУведомлениеОПоступленииМаркированныхТоваровНезарегистрированномуПокупателю(
						ДанныеДокумента,
						ДанныеОтправителя,
						НомерДокумента,
						Сообщения,
						ДанныеДляПолученияДокумента.GLN);
					
				Иначе
					
					ДанныеЗагруженногоДокумента = ЗагрузитьНомерГИСМУведомленияОбОтгрузкеМаркированныхТоваров(
						ДанныеДокумента,
						ДанныеОтправителя,
						НомерДокумента,
						Сообщения);
					
				КонецЕсли;
				
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип загружаемого документа action_id %1'"), action_id);
			КонецЕсли;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
				ИнтеграцияГИСМ.УдалитьИзОчередиПолученияДанных(ДанныеДляПолученияДокумента);
			КонецЕсли;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено И ВозвращаемоеЗначение <> Неопределено Тогда
				ВозвращаемоеЗначение.Документ    = ДанныеЗагруженногоДокумента.Ссылка;
				ВозвращаемоеЗначение.Основание   = ДанныеЗагруженногоДокумента.Основание;
				ВозвращаемоеЗначение.НовыйСтатус = ДанныеЗагруженногоДокумента.НовыйСтатус;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОписаниеПоддерживаемоегоТипа = ПоддерживаемыеТипыДокументов().Получить(ДанныеДляПолученияДокумента.action_id);
			Если ОписаниеПоддерживаемоегоТипа <> Неопределено Тогда
				НаименованиеДокумента = ОписаниеПоддерживаемоегоТипа.Описание;
			Иначе
				НаименованиеДокумента = НСтр("ru = 'Неподдерживаемый документ'");
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При загрузке документа %5 (action_id=%1) с output_id=%2 возникла ошибка:
				           |Текст ошибки: %3
				           |Данные документа доступны для просмотра и повторной загрузке в списке ""Очередь получения данных из ГИСМ""
				           |Текст сообщения SOAP:
				           |%4'"),
				ДанныеДляПолученияДокумента.action_id,
				ДанныеДляПолученияДокумента.output_id,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстВходящегоСообщенияXML,
				НаименованиеДокумента);
			
			ИнтеграцияГИСМВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			Если ВозвращаемоеЗначение <> Неопределено Тогда
				ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ТекстОшибки;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДанныеЗагруженногоДокумента;
	
КонецФункции

// 11
Функция ЗагрузитьУведомлениеОбИзмененииСтатусаПриВыпускеКиЗ(ДанныеДокумента, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаявкиНаВыпускКиЗ = ЗаявкаНаВыпускКиЗПоНомеру(ДанныеДокумента.emit_order_id);
	Если ДанныеЗаявкиНаВыпускКиЗ = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке уведомления об изменении состояния обработки эмитентом заявки на выпуск КиЗ возникла ошибка:
			           |Не найдена заявка с id %1.
			           |Текст входящего сообщения SOAP:
			           |%2'"),
			ДанныеДокумента.emit_order_id,
			Сообщения.ТекстВходящегоСообщенияXML);
			
	КонецЕсли;
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеЗаявкиНаВыпускКиЗ.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", Неопределено);
	
	ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстИсходящегоСообщенияXML,
		Реквизиты);
	
	Если ДанныеДокумента.order_status = 1 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.Отклонена;
	ИначеЕсли ДанныеДокумента.order_status = 2 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.Приостановлена;
	ИначеЕсли ДанныеДокумента.order_status = 3 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.ФормированиеСчета;
	ИначеЕсли ДанныеДокумента.order_status = 4 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.ОжидаетсяОплата;
	ИначеЕсли ДанныеДокумента.order_status = 5 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.ПереданоВПроизводство;
	ИначеЕсли ДанныеДокумента.order_status = 6 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.ПереданоГрузоперевозчику;
	ИначеЕсли ДанныеДокумента.order_status = 7 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.ЖдетСамовывоза;
	ИначеЕсли ДанныеДокумента.order_status = 8 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.ОтгруженоЗаказчику;
	ИначеЕсли ДанныеДокумента.order_status = 9 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.Возвращено;
	ИначеЕсли ДанныеДокумента.order_status = 10 Тогда
		СтатусОбработкиЭмитентом = Перечисления.СтатусыОбработкиЭмитентомКиЗГИСМ.Уничтожено;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Статус обработки %1 не поддерживается в данной версии'"), ДанныеДокумента.order_status);
	КонецЕсли;
	
	Если ДанныеДокумента.reason = 1 Тогда
		Описание = НСтр("ru = 'Отсутствуют ИНН/КПП'");
	ИначеЕсли ДанныеДокумента.reason = 2 Тогда
		Описание = НСтр("ru = 'По указанным ИНН/КПП не найден контрагент'");
	ИначеЕсли ДанныеДокумента.reason = 3 Тогда
		Описание = НСтр("ru = 'Отсутствуют реквизиты договора'");
	ИначеЕсли ДанныеДокумента.reason = 4 Тогда
		Описание = НСтр("ru = 'Истекли 5 рабочих дней для исправления некорректных реквизитов заявления'");
	ИначеЕсли ДанныеДокумента.reason = 5 Тогда
		Описание = НСтр("ru = 'Не заполнен реквизит заявления (с указанием конкретного реквизита)'");
	ИначеЕсли ДанныеДокумента.reason = 6 Тогда
		Описание = НСтр("ru = 'Значение реквизита заявления не найдено в справочнике (с указанием конкретного реквизита)'");
	ИначеЕсли ДанныеДокумента.reason = 7 Тогда
		Описание = НСтр("ru = 'Не найден договор с указанными реквизитами'");
	ИначеЕсли ДанныеДокумента.reason = 8 Тогда
		Описание = НСтр("ru = 'Возвращено грузоперевозчиком'");
	ИначеЕсли ДанныеДокумента.reason = 9 Тогда
		Описание = НСтр("ru = 'Возвращено заказчиком'");
	ИначеЕсли ДанныеДокумента.reason = Неопределено Тогда
		Описание = "";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Причина изменения статуса %1 не поддерживается в данной версии'"), ДанныеДокумента.reason);
	КонецЕсли;
	
	ДатаОперации = ДанныеДокумента.status_date;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",             Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",                 ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",                 ДанныеЗаявкиНаВыпускКиЗ.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",       ИсходящееСообщение);
	Реквизиты.Вставить("СтатусОбработкиЭмитентом", СтатусОбработкиЭмитентом);
	Реквизиты.Вставить("Описание",                 Описание);
	Реквизиты.Вставить("ДатаСоздания",             ДатаОперации);
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	НовыйСтатус = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбновитьСтатусОбработкиЭмитентом(ДанныеЗаявкиНаВыпускКиЗ.Ссылка, СтатусОбработкиЭмитентом);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",      ДанныеЗаявкиНаВыпускКиЗ.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание",   ДанныеЗаявкиНаВыпускКиЗ.Основание);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", НовыйСтатус);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 12
Функция ЗагрузитьУведомлениеОВыпускеКиЗ(ДанныеДокумента, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаявкиНаВыпускКиЗ = ЗаявкаНаВыпускКиЗПоНомеру(ДанныеДокумента.emit_order_id);
	Если ДанныеЗаявкиНаВыпускКиЗ = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о выпуске КиЗ эмитентом возникла ошибка:
			           |Не найдена заявка с id %1.
			           |Текст входящего сообщения SOAP:
			           |%2'"),
			ДанныеДокумента.emit_order_id,
			Сообщения.ТекстВходящегоСообщенияXML);
		
	КонецЕсли;
	
	ДокументОбъект = ДанныеЗаявкиНаВыпускКиЗ.Ссылка.ПолучитьОбъект();
	
	// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
	// Документ будет получен в следующий итерации загрузки данных.
	ДокументОбъект.Заблокировать();
	
	ДатаВыпуска    = ДанныеДокумента.emit_date;
	ДатаРеализации = ДанныеДокумента.send_date;
	
	Если ДанныеДокумента.emits.by_sign_type.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Данные о выпущенных КиЗ не загружены'");
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДанныеДокумента.emits.by_sign_type Цикл
		
		ДляМаркировкиОстатков = (ИнтеграцияГИСМ.СпособВводаТовараВОбращениеПоКоду(СтрокаТЧ.sign_initial_type) = ИнтеграцияГИСМ.СпособВводаТовараВОбращение(Истина));
		СпособВыпускаВОборот  = ИнтеграцияГИСМ.СпособВыпускаВОборотПоКоду(СтрокаТЧ.origin_id);
		РазмерКиЗ             = ИнтеграцияГИСМ.РазмерКиЗПоКоду(СтрокаТЧ.sign_size_type);
		ВидКиЗ                = ИнтеграцияГИСМ.ВидКиЗПоКоду(СтрокаТЧ.sign_type);
		
		НеперсонализированныеКиЗ = СтрокаТЧ.signs.sign;
		Для Каждого СтрокаТЧКиЗ Из НеперсонализированныеКиЗ Цикл
			
			НоваяСтрока = ДокументОбъект.ВыпущенныеКиЗ.Добавить();
			НоваяСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление;
			НоваяСтрока.СпособВыпускаВОборот  = СпособВыпускаВОборот;
			НоваяСтрока.ДляМаркировкиОстатков = ДляМаркировкиОстатков;
			НоваяСтрока.РазмерКиЗ             = РазмерКиЗ;
			НоваяСтрока.ВидКиЗ                = ВидКиЗ;
			
			НоваяСтрока.НомерКиЗ = СтрокаТЧКиЗ.sign_num;
			НоваяСтрока.RFIDTID  = СтрокаТЧКиЗ.sign_tid;
			
			НоваяСтрока.ДатаВыпуска    = ДатаВыпуска;
			НоваяСтрока.ДатаРеализации = ДатаРеализации;
			
		КонецЦикла;
		
		ПерсонализированныеКиЗ = СтрокаТЧ.signs.unify;
		Для Каждого СтрокаТЧКиЗ Из ПерсонализированныеКиЗ Цикл
			
			НоваяСтрока = ДокументОбъект.ВыпущенныеКиЗ.Добавить();
			НоваяСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление;
			НоваяСтрока.СпособВыпускаВОборот   = СпособВыпускаВОборот;
			НоваяСтрока.ДляМаркировкиОстатков  = ДляМаркировкиОстатков;
			НоваяСтрока.РазмерКиЗ              = РазмерКиЗ;
			НоваяСтрока.ВидКиЗ                 = ВидКиЗ;
			
			НоваяСтрока.НомерКиЗ      = СтрокаТЧКиЗ.sign_num;
			НоваяСтрока.RFIDTID       = СтрокаТЧКиЗ.sign_tid;
			
			НоваяСтрока.ДатаВыпуска    = ДатаВыпуска;
			НоваяСтрока.ДатаРеализации = ДатаРеализации;
			
			ДанныеДекодирования = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(
				МенеджерОборудованияКлиентСервер.ПреобразоватьБинарнуюСтрокуВHEX(СтрокаТЧКиЗ.gs1_sgtin));
			
			НоваяСтрока.RFIDEPC       = ДанныеДекодирования.EPC;
			НоваяСтрока.СерийныйНомер = Формат(Число(ДанныеДекодирования.СерийныйНомер), "ЧГ=");
			НоваяСтрока.GTIN          = СтрокаТЧКиЗ.sign_gtin;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДокументОбъект.Записать(
		РежимЗаписиДокумента.Запись,
		РежимПроведенияДокумента.Неоперативный);
	
	ДокументОбъект.Разблокировать();
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеЗаявкиНаВыпускКиЗ.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", Неопределено);
	
	ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстИсходящегоСообщенияXML,
		Реквизиты);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеЗаявкиНаВыпускКиЗ.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", ИсходящееСообщение);
	Реквизиты.Вставить("ДатаСоздания",       ДатаРеализации);
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",      ДанныеЗаявкиНаВыпускКиЗ.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание",   ДанныеЗаявкиНаВыпускКиЗ.Основание);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяПоступление);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 30
Функция ЗагрузитьУведомлениеОПоступленииМаркированныхТоваров(ДанныеДокумента, ДанныеОтправителя, НомерДокумента, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект = Документы.УведомлениеОПоступленииМаркированныхТоваровГИСМ.СоздатьДокумент();
	
	ДокументОбъект.НомерГИСМ        = НомерДокумента;
	ДокументОбъект.Дата             = ДанныеДокумента.move_date;
	ДокументОбъект.ВидОборотаТовара = ИнтеграцияГИСМ.ВидОборотаТовараПоКоду(ДанныеДокумента.turnover_type);
	ДокументОбъект.GLNКонтрагента   = ДанныеДокумента.sender_gln;
	
	ДокументОбъект.ДатаВходящегоДокумента = ДанныеДокумента.move_doc_date;
	ДокументОбъект.НомерВходящегоДокумента = ДанныеДокумента.move_doc_num;
	
	ОрганизацияПодразделение = ИнтеграцияГИСМ.ОрганизацияПодразделениеПоGLN(ДанныеДокумента.receiver_gln);
	Если ОрганизацияПодразделение <> Неопределено Тогда
		ДокументОбъект.Организация   = ОрганизацияПодразделение.Организация;
		ДокументОбъект.Подразделение = ОрганизацияПодразделение.Подразделение;
	КонецЕсли;
	
	Контрагент = ИнтеграцияГИСМ.КонтрагентПоДаннымXML(ДанныеДокумента, ДанныеОтправителя);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДокументОбъект.Контрагент = Контрагент;
	КонецЕсли;
	
	// Если версия сообщения >= 2.41
	Если ВерсияНеМенееТребуемой(Сообщения.ВерсияВходящегоСообщенияXML, "2.41") Тогда
		
		Если ДанныеДокумента.order_details.sign.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Данные о поступивших КиЗ не загружены'");
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ДанныеДокумента.order_details.sign Цикл
			
			НоваяСтрока = ДокументОбъект.НомераКиЗ.Добавить();
			
			НоваяСтрока.НомерКиЗ = ИдентификаторЗнака(СтрокаТЧ, "sign_num");
			НоваяСтрока.RFIDTID  = ИдентификаторЗнака(СтрокаТЧ, "sign_tid");
			НоваяСтрока.RFIDEPC  = RFIDEPCИзБинарногоВида(СтрокаТЧ);
			
			НоваяСтрока.Стоимость              = СтрокаТЧ.cost;
			НоваяСтрока.СуммаНДС               = СтрокаТЧ.vat_value;
			
			НоваяСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление;
			
		КонецЦикла;
		
	// Версия сообщения < 2.41
	Иначе
		
		Если ДанныеДокумента.order_details.detail.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Данные о поступивших КиЗ не загружены'");
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ДанныеДокумента.order_details.detail Цикл
			
			НоваяСтрока = ДокументОбъект.НомераКиЗ.Добавить();
			НоваяСтрока.НомерКиЗ               = СтрокаТЧ.sign_num;
			
			НоваяСтрока.Стоимость              = СтрокаТЧ.cost;
			
			НоваяСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОбъект.Записать(
		РежимЗаписиДокумента.Запись,
		РежимПроведенияДокумента.Неоперативный);
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДокументОбъект.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", Неопределено);
	
	ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстИсходящегоСообщенияXML,
		Реквизиты);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДокументОбъект.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", ИсходящееСообщение);
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",    ДокументОбъект.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание", Неопределено);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", Перечисления.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.Получено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 31
Функция ЗагрузитьАннулированиеУведомленияОбОтгрузкеМаркированныхТоваров(ДанныеДокумента, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУведомленияОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровПоНомеру(ДанныеДокумента.move_order_id);
	Если ДанныеУведомленияОбОтгрузке = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке аннулирования клиентом уведомления об отгрузке возникла ошибка:
			           |Не найдена заявка с id %1.
			           |Текст входящего сообщения SOAP:
			           |%2'"),
			ДанныеДокумента.move_order_id,
			Сообщения.ТекстВходящегоСообщенияXML);
		
	КонецЕсли;
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", Неопределено);
	
	ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстИсходящегоСообщенияXML,
		Реквизиты);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", ИсходящееСообщение);
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	НовыйСтатус = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОбновитьСтатус(
		ДанныеУведомленияОбОтгрузке.Ссылка,
		Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоКлиентом,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",      ДанныеУведомленияОбОтгрузке.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание",   ДанныеУведомленияОбОтгрузке.Основание);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", НовыйСтатус);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 32
Функция ЗагрузитьПодтверждениеПолученияМаркированныхТоваров(ДанныеДокумента, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаголовокТекстаОшибки = НСтр("ru = 'Ошибка при загрузке подтверждения клиентом получения маркированных товаров:'");
	
	ДанныеУведомленияОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровПоНомеру(ДанныеДокумента.move_order_id);
	Если ДанныеУведомленияОбОтгрузке = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке подтверждения клиентом получения маркированных товаров возникла ошибка:
			           |Не найдена заявка с id %1.
			           |Текст входящего сообщения SOAP:
			           |%2'"),
			ДанныеДокумента.move_order_id,
			Сообщения.ТекстВходящегоСообщенияXML);
		
	КонецЕсли;
	
	ДокументОбъект = ДанныеУведомленияОбОтгрузке.Ссылка.ПолучитьОбъект();
	
	// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
	// Документ будет получен в следующий итерации загрузки данных.
	ДокументОбъект.Заблокировать();
	
	ДатаПодтверждения = ДанныеДокумента.receive_date;
	
	// Если версия сообщения >= 2.41
	Если ВерсияНеМенееТребуемой(Сообщения.ВерсияВходящегоСообщенияXML, "2.41") Тогда
		
		Если ДанныеДокумента.details.sign.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Номера КиЗ для подтверждения не загружены'");
		КонецЕсли;
		
		Для Каждого ДанныеКиЗ Из ДанныеДокумента.details.sign Цикл
			
			НомерКиЗ = ИдентификаторЗнака(ДанныеКиЗ, "sign_num");
			
			СтрокаТЧ = ДокументОбъект.НомераКиЗ.Найти(НомерКиЗ, "НомерКиЗ");
			Если СтрокаТЧ = Неопределено Тогда
				
				RFIDTID  = ИдентификаторЗнака(ДанныеКиЗ, "sign_tid");
				СтрокаТЧ = ДокументОбъект.НомераКиЗ.Найти(RFIDTID, "RFIDTID");
				Если СтрокаТЧ = Неопределено Тогда
					
					RFIDEPC = RFIDEPCИзБинарногоВида(ДанныеКиЗ);
					СтрокаТЧ = ДокументОбъект.НомераКиЗ.Найти(RFIDEPC, "RFIDEPC");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ = Неопределено Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При загрузке подтверждения клиентом получения маркированных товаров по заявке %1 возникла ошибка:
					           |В документе %2 в табличной части ""Товары"" не найден товар с номером КиЗ %3.
					           |Текст входящего сообщения SOAP:
					           |%4'"),
					ДанныеДокумента.move_order_id,
					ДанныеУведомленияОбОтгрузке.Ссылка,
					НомерКиЗ,
					Сообщения.ТекстВходящегоСообщенияXML);
				
				ИнтеграцияГИСМВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ.Подтверждено      = Истина;
			СтрокаТЧ.ДатаПодтверждения = ДатаПодтверждения;
			
		КонецЦикла;
		
	// Версия сообщения < 2.41
	Иначе
		
		Если ДанныеДокумента.commits.sign_num.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Номера КиЗ для подтверждения не загружены'");
		КонецЕсли;
		
		Для Каждого НомерКиЗ Из ДанныеДокумента.commits.sign_num Цикл
			
			СтрокаТЧ = ДокументОбъект.НомераКиЗ.Найти(НомерКиЗ, "НомерКиЗ");
			Если СтрокаТЧ = Неопределено Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При загрузке подтверждения клиентом получения маркированных товаров по заявке %1 возникла ошибка:
					           |В документе %2 в табличной части ""Товары"" не найден товар с номером КиЗ %3.
					           |Текст входящего сообщения SOAP:
					           |%4'"),
					ДанныеДокумента.move_order_id,
					ДанныеУведомленияОбОтгрузке.Ссылка,
					НомерКиЗ,
					Сообщения.ТекстВходящегоСообщенияXML);
				
				ИнтеграцияГИСМВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ.Подтверждено      = Истина;
			СтрокаТЧ.ДатаПодтверждения = ДатаПодтверждения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОбъект.Записать(
		РежимЗаписиДокумента.Запись,
		РежимПроведенияДокумента.Неоперативный);
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", Неопределено);
	
	ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстИсходящегоСообщенияXML,
		Реквизиты);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", ИсходящееСообщение);
	Реквизиты.Вставить("ДатаСоздания",       ДатаПодтверждения);
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	НовыйСтатус = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОбновитьСтатус(
		ДанныеУведомленияОбОтгрузке.Ссылка,
		Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОбрабатываетсяПоступление,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеЗакрытияУведомления);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",      ДанныеУведомленияОбОтгрузке.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание",   ДанныеУведомленияОбОтгрузке.Основание);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", НовыйСтатус);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 33
Функция ЗагрузитьЗакрытиеУведомленияОбОтгрузкеМаркированныхТоваров(ДанныеДокумента, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУведомленияОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровПоНомеру(ДанныеДокумента.move_order_id);
	Если ДанныеУведомленияОбОтгрузке = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке закрытия клиентом уведомления об отгрузке возникла ошибка:
			           |Не найдена заявка с id %1.
			           |Текст входящего сообщения SOAP:
			           |%2'"),
			ДанныеДокумента.move_order_id,
			Сообщения.ТекстВходящегоСообщенияXML);
		
	КонецЕсли;
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", Неопределено);
	
	ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстИсходящегоСообщенияXML,
		Реквизиты);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", ИсходящееСообщение);
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	НовыйСтатус = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОбновитьСтатус(
		ДанныеУведомленияОбОтгрузке.Ссылка,
		Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Закрыто,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",      ДанныеУведомленияОбОтгрузке.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание",   ДанныеУведомленияОбОтгрузке.Основание);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", НовыйСтатус);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 34
Функция ЗагрузитьНомерГИСМУведомленияОбОтгрузкеМаркированныхТоваров(ДанныеДокумента, ДанныеОтправителя, НомерДокумента, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОрганизацияПодразделение = ОрганизацияПодразделениеПоGLN(ДанныеДокумента.sender_gln);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("НомерДокументаОснования", ДанныеДокумента.move_doc_num);
	Реквизиты.Вставить("ДатаДокументаОснования",  ДанныеДокумента.move_doc_date);
	Реквизиты.Вставить("Организация",   ОрганизацияПодразделение.Организация);
	Реквизиты.Вставить("Подразделение", ОрганизацияПодразделение.Подразделение);
	Попытка
		Реквизиты.Вставить("ИННКонтрагента", ДанныеДокумента.subject.ul.inn);
		Реквизиты.Вставить("КППКонтрагента", ДанныеДокумента.subject.ul.kpp);
	Исключение
		Реквизиты.Вставить("ИННКонтрагента", ДанныеДокумента.subject.fl.inn);
		Реквизиты.Вставить("КППКонтрагента", "");
	КонецПопытки;
	
	ДанныеУведомленияОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровПоРеквизитам(Реквизиты);
	Если ДанныеУведомленияОбОтгрузке = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке номера уведомления об отгрузке незарегистрированному покупателю возникла ошибка:
			           |Не найден документ-основание с номером документа %1 для контрагента с ИНН %2
			           |Текст входящего сообщения SOAP:
			           |%3'"),
			Реквизиты.НомерДокументаОснования,
			Реквизиты.ИННКонтрагента,
			Сообщения.ТекстВходящегоСообщенияXML);
		
	КонецЕсли;
	
	ДокументОбъект = ДанныеУведомленияОбОтгрузке.Ссылка.ПолучитьОбъект();
	
	// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
	// Документ будет получен в следующий итерации загрузки данных.
	ДокументОбъект.Заблокировать();
	
	Документы.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.ОбновитьНомерГИСМ(ДокументОбъект, НомерДокумента);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	ДокументОбъект.Разблокировать();
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Если ЗначениеЗаполнено(Сообщения.ТекстИсходящегоСообщенияXML) Тогда
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
		Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
		Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
		Реквизиты.Вставить("СообщениеОснование", Неопределено);
		
		ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
			Сообщения.ТекстИсходящегоСообщенияXML,
			Реквизиты);
		
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДанныеУведомленияОбОтгрузке.Ссылка);
	Если ЗначениеЗаполнено(Сообщения.ТекстИсходящегоСообщенияXML) Тогда
		Реквизиты.Вставить("СообщениеОснование", ИсходящееСообщение);
	КонецЕсли;
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	НовыйСтатус = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОбновитьСтатус(
		ДанныеУведомленияОбОтгрузке.Ссылка,
		Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПринятоВОбработкуГИСМ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПодтверждениеПолучения);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",      ДанныеУведомленияОбОтгрузке.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание",   ДанныеУведомленияОбОтгрузке.Основание);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", НовыйСтатус);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 34
Функция ЗагрузитьУведомлениеОПоступленииМаркированныхТоваровНезарегистрированномуПокупателю(ДанныеДокумента, ДанныеОтправителя, НомерДокумента, Сообщения, receiver_gln)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект = Документы.УведомлениеОПоступленииМаркированныхТоваровГИСМ.СоздатьДокумент();
	
	ДокументОбъект.НомерГИСМ        = НомерДокумента;
	ДокументОбъект.Дата             = ДанныеДокумента.move_date;
	ДокументОбъект.ВидОборотаТовара = ИнтеграцияГИСМ.ВидОборотаТовараПоКоду(ДанныеДокумента.turnover_type);
	ДокументОбъект.GLNКонтрагента   = ДанныеДокумента.sender_gln;
	
	ДокументОбъект.ДатаВходящегоДокумента = ДанныеДокумента.move_doc_date;
	ДокументОбъект.НомерВходящегоДокумента = ДанныеДокумента.move_doc_num;
	
	ОрганизацияПодразделение = ОрганизацияПодразделениеПоGLN(receiver_gln);
	Если ОрганизацияПодразделение <> Неопределено Тогда
		ДокументОбъект.Организация   = ОрганизацияПодразделение.Организация;
		ДокументОбъект.Подразделение = ОрганизацияПодразделение.Подразделение;
	КонецЕсли;
	
	Контрагент = ИнтеграцияГИСМ.КонтрагентПоДаннымXML(ДанныеДокумента, ДанныеОтправителя);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДокументОбъект.Контрагент = Контрагент;
	КонецЕсли;
	
	Если ДанныеДокумента.order_details.sign.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Данные о поступивших КиЗ не загружены'");
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДанныеДокумента.order_details.sign Цикл
		
		НоваяСтрока = ДокументОбъект.НомераКиЗ.Добавить();
		
		НоваяСтрока.НомерКиЗ = ИдентификаторЗнака(СтрокаТЧ, "sign_num");
		НоваяСтрока.RFIDTID  = ИдентификаторЗнака(СтрокаТЧ, "sign_tid");
		НоваяСтрока.RFIDEPC  = RFIDEPCИзБинарногоВида(СтрокаТЧ);
		
		НоваяСтрока.Стоимость              = СтрокаТЧ.cost;
		НоваяСтрока.СуммаНДС               = СтрокаТЧ.vat_value;
		НоваяСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление;
		
	КонецЦикла;
	
	ДокументОбъект.Записать(
		РежимЗаписиДокумента.Запись,
		РежимПроведенияДокумента.Неоперативный);
	
	ОписаниеТипаДокумента = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДокумента.action_id);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДокументОбъект.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", Неопределено);
	
	ИсходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстИсходящегоСообщенияXML,
		Реквизиты);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Входящее);
	Реквизиты.Вставить("Операция",           ОписаниеТипаДокумента.Операция);
	Реквизиты.Вставить("Документ",           ДокументОбъект.Ссылка);
	Реквизиты.Вставить("СообщениеОснование", ИсходящееСообщение);
	
	ВходящееСообщение = ИнтеграцияГИСМВызовСервера.ДобавитьЗаписьВПротоколОбмена(
		Сообщения.ТекстВходящегоСообщенияXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ссылка",    ДокументОбъект.Ссылка);
	ВозвращаемоеЗначение.Вставить("Основание", Неопределено);
	ВозвращаемоеЗначение.Вставить("НовыйСтатус", Перечисления.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.Получено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Обработать очередь получения данных по регистрационному номеру предприятия (GLN).
// Запускается из регламетного задания.
//
// Параметры:
//  GLN - Число - Регистрационный номер предприятия.
//
//  СертификатыДляПодписанияНаСервере - Структура - со свойствами (Можно получить функцией СертификатыДляПодписанияНаСервере):
//    * МенеджерКриптографии - МенеджерКриптографии - Менеджер криптографии.
//    * Сертификаты - ТаблицаЗначений - Таблица сертификатов организации.
//
// Возвращаемое значение:
// Структура - со свойствами:
//    * Изменения - Массив - Структуры со свойствами
//
Функция ОбработатьОчередьПолученияДанныхРегламентнымЗаданием(GLN, СертификатыДляПодписанияНаСервере)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
	
	СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(GLN, "GLN");
	Если СтрокаСертификата = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
	РезультатПодписания = Подписать(
		ИнтеграцияГИСМВызовСервера.ЗапросВходящихДокументовXML(GLN),
		СтрокаСертификата.СертификатКриптографии, СертификатыДляПодписанияНаСервере.МенеджерКриптографии);
		
	Если НЕ РезультатПодписания.Успех Тогда
		
		ИнтеграцияГИСМВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтрШаблон(
				НСтр("ru = 'При выполнении обмена с ГИСМ возникла ошибка:
				           |Текст ошибки: %1'"), РезультатПодписания.ТекстОшибки));
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	РезультатПередачиИОбработки = ИнтеграцияГИСМВызовСервера.ПолучитьВходящиеДокументы(РезультатПодписания.КонвертSOAP, GLN);
	
	ПоддерживаемыеТипыДокументовГИСМ = ПоддерживаемыеТипыДокументов();
	
	Для Каждого ДанныеДляПолученияДокумента Из РезультатПередачиИОбработки.РезультатОбработкиОтвета.Документы Цикл
		
		РезультатПодписания = Подписать(
			ДанныеДляПолученияДокумента.ТекстСообщенияXML,
			СтрокаСертификата.СертификатКриптографии, СертификатыДляПодписанияНаСервере.МенеджерКриптографии);
			
		Если НЕ РезультатПодписания.Успех Тогда
			
			ИнтеграцияГИСМВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(
					НСтр("ru = 'При выполнении обмена с ГИСМ возникла ошибка:
					           |Текст ошибки: %1'"), РезультатПодписания.ТекстОшибки));
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПоддерживаемыеТипыДокументовГИСМ.Получить(ДанныеДляПолученияДокумента.action_id) <> Неопределено Тогда
			
			Если Не ДанныеДляПолученияДокумента.ДобавленВОчередь Тогда
				ДобавитьВОчередьПолученияДанных(ДанныеДляПолученияДокумента);
			КонецЕсли;
			
			Результат = ИнтеграцияГИСМВызовСервера.ПолучитьДокумент(РезультатПодписания.КонвертSOAP, ДанныеДляПолученияДокумента);
			
			СтрокаРезультата = Новый Структура;
			СтрокаРезультата.Вставить("Документ",           Результат.Документ);
			СтрокаРезультата.Вставить("Основание",          Результат.Основание);
			СтрокаРезультата.Вставить("Выполнено",          Истина);
			СтрокаРезультата.Вставить("ТекстОшибки",        "");
			СтрокаРезультата.Вставить("НовыйСтатус",        Неопределено);
			СтрокаРезультата.Вставить("ИсходящееСообщение", Неопределено);
			
			ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать очередь получения квитанций о фиксации по регистрационному номеру предприятия (GLN)
// Запускается из регламетного задания.
//
// Параметры:
//  GLN - Число - Регистрационный номер предприятия.
//
//  СертификатыДляПодписанияНаСервере - Структура - со свойствами (Можно получить функцией СертификатыДляПодписанияНаСервере):
//    * МенеджерКриптографии - МенеджерКриптографии - Менеджер криптографии.
//    * Сертификаты - ТаблицаЗначений - Таблица сертификатов организации.
//
// Возвращаемое значение:
// Структура - со свойствами:
//    * Изменения - Массив - Структуры со свойствами
//
Функция ОбработатьОчередьПолученияКвитанцийОФиксацииРегламентнымЗаданием(GLN, СертификатыДляПодписанияНаСервере)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
	
	СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(GLN, "GLN");
	Если СтрокаСертификата = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДанныеДляПолученияКвитанцииИзОчереди = ВыборкаОчередьПолученияКвитанцийОФиксации(GLN);
	
	Пока ДанныеДляПолученияКвитанцииИзОчереди.Следующий() Цикл
		
		Данные = ДанныеДляПолученияКвитанцииИзОчереди.Данные.Получить();
		
		РезультатПодписания = Подписать(
			ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииXML(Данные),
			СтрокаСертификата.СертификатКриптографии, СертификатыДляПодписанияНаСервере.МенеджерКриптографии);
			
		Если Не РезультатПодписания.Успех = Неопределено Тогда
			
			ИнтеграцияГИСМВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(
					НСтр("ru = 'При выполнении обмена с ГИСМ возникла ошибка:
					           |Текст ошибки: %1'"), РезультатПодписания.ТекстОшибки));
			
			Продолжить;
			
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
		Реквизиты.Вставить("Операция",           ИнтеграцияГИСМВызовСервера.ОперацияЗапросаКвитанции(ДанныеДляПолученияКвитанцииИзОчереди.Операция));
		Реквизиты.Вставить("Документ",           ДанныеДляПолученияКвитанцииИзОчереди.Документ);
		Реквизиты.Вставить("СообщениеОснование", ДанныеДляПолученияКвитанцииИзОчереди.Сообщение);
		
		Результат = ПодготовитьСообщениеПолученияКвитанцииКПередаче(РезультатПодписания.КонвертSOAP, Реквизиты);
		Если Результат <> Неопределено Тогда
			ВозвращаемоеЗначение.Изменения.Добавить(Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить статусы ГИСМ, цвет текста которых "требует внимания ГИСМ"
// 
// Возвращаемое значение:
//  Массив - Статусы ГИСМ, для которых требуется устанавливать цвет "требует внимания ГИСМ"
//
Функция СтатусыЦветТекстаТребуетВниманияГИСМ()
	
	СтатусыЦветТекстаТребуетВниманияГИСМ = Новый Массив;
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.Аннулировано);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоКлиентом);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаФНС);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ);
	
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСММаркировкаТоваров);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМПеремаркировкаТоваров);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМСписаниеКиЗ);
	
	Возврат СтатусыЦветТекстаТребуетВниманияГИСМ;
	
КонецФункции

// Получить операции передачи данных
// 
// Возвращаемое значение:
//  Массив - Операции передачи данных
//
Функция ОперацииПередачиДанных() Экспорт
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	
	Для Каждого Операция Из ОперацииДетальнойПередачиДанных() Цикл
		Операции.Добавить(Операция);
	КонецЦикла;
	
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаАннулирования);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения);
	
	Возврат Операции;
	
КонецФункции

// Получить операции детальной передачи данных
// 
// Возвращаемое значение:
//  Массив - Операции передачи данных
//
Функция ОперацииДетальнойПередачиДанных() Экспорт
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваров);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхИмпортМаркированнойПродукции);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхСписаниеКиЗ);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВыбраковкаКиЗ);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхСписаниеТоваров);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхМаркировкаТоваров);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПеремаркировкаТоваров);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссия);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭС);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВвозМаркированнойПродукцииИзЕАЭС);
	
	Возврат Операции;
	
КонецФункции

// Получить операции получения данных
// 
// Возвращаемое значение:
//  Массив - Операции получения данных
//
Функция ОперацииПолученияДанных() Экспорт
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПолучениеНовогоСтатуса);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПолучениеТоваров);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПолучениеАннулирования);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПолучениеПодтверждения);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПолучениеЗакрытияЗаявки);
	Операции.Добавить(Перечисления.ОперацииОбменаГИСМ.ПолучениеGLNПоИННКПП);
	
	Возврат Операции;
	
КонецФункции

// Преобразовывает EPC из бинарного вида в шестнадцатиричный.
//
// Параметры:
//  СтрокаТЧ - СтрокаТабличнойЧасти - Строка табличной части с номерами КиЗ.
// 
// Возвращаемое значение:
//  Строка - EPC в шестнадцатиричном виде.
//
Функция RFIDEPCИзБинарногоВида(СтрокаТЧ)
	
	RFIDEPC = ИдентификаторЗнака(СтрокаТЧ, "sign_sgtin");
	Если ЗначениеЗаполнено(RFIDEPC) Тогда
		
		ДанныеДекодирования = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(
			МенеджерОборудованияКлиентСервер.ПреобразоватьБинарнуюСтрокуВHEX(RFIDEPC));
		RFIDEPC = ДанныеДекодирования.EPC;
		
	КонецЕсли;
	
	Возврат RFIDEPC;
	
КонецФункции

// Получить идентификатор знака.
//
// Параметры:
//  СтрокаТЧ - СтрокаТабличнойЧасти - Строка табличной части с номерами КиЗ.
//  НаименованиеИдентификатора	 - Строка - Наименование идентификатора для извлечения из объекта XDTO.
// 
// Возвращаемое значение:
//  Строка - Запрашиваемый идентификатор знака.
//
Функция ИдентификаторЗнака(СтрокаТЧ, НаименованиеИдентификатора)
	
	Если СтрокаТЧ[НаименованиеИдентификатора].Количество() > 0 Тогда
		Возврат СтрокаТЧ[НаименованиеИдентификатора][0];
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Получает структуру настроек обмена ГИСМ, извлекая из константы НастройкиОбменаГИСМ.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Настройки обмена.
//
Функция НастройкиОбменаГИСМ() Экспорт

	ХранилищеЗначения = Константы.НастройкиОбменаГИСМ.Получить();
	
	Если ХранилищеЗначения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиОбмена = ХранилищеЗначения.Получить();
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Проверяет, имеется ли выбранное действие в массиве допустимых действий
//
// Параметры:
//  ДальнейшееДействие - Перечисления.ДальнейшееДействиеГИСМ - выбранное действие.
//  ДопустимыеДействия - Массив - массив допустимых действий.
// 
// Возвращаемое значение:
//  Булево - Истина, если действие допустимо, Ложь в обратном случае.
//
Функция ДопустимоеДальнейшееДействие(ДальнейшееДействие, ДопустимыеДействия)
	
	Возврат ДопустимыеДействия.Найти(ДальнейшееДействие) <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти