
#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания СостояниеКомпании
//
Процедура ЗаданиеСостояниеКомпании(Ключ) Экспорт
	
	ПериодОтчета = ТекущаяДатаСеанса();
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаНастройки = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ));
	
	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросНастройкиОтчета = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиРассылкиСостояниеКомпании.УчетнаяЗапись,
	|	НастройкиРассылкиСостояниеКомпании.Организация
	|ИЗ
	|	Справочник.НастройкиРассылкиСостояниеКомпании КАК НастройкиРассылкиСостояниеКомпании
	|ГДЕ
	|	НастройкиРассылкиСостояниеКомпании.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРассылкиСостояниеКомпанииПолучатели.Получатель
	|ИЗ
	|	Справочник.НастройкиРассылкиСостояниеКомпании.Получатели КАК НастройкиРассылкиСостояниеКомпанииПолучатели
	|ГДЕ
	|	НастройкиРассылкиСостояниеКомпанииПолучатели.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.ИдентификаторСекции,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.ИмяОбласти,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.ИмяПоля,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.Путь,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.ПредставлениеПоля,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.ВидСравнения,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.Значение
	|ИЗ
	|	Справочник.НастройкиРассылкиСостояниеКомпании.НастройкиФильтров КАК НастройкиРассылкиСостояниеКомпанииНастройкиФильтров
	|ГДЕ
	|	НастройкиРассылкиСостояниеКомпанииНастройкиФильтров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРассылкиСостояниеКомпанииНастройкиСекций.НомерСтроки КАК НомерСтроки,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиСекций.Использование,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиСекций.ЗаголовокСекции,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиСекций.ИдентификаторСекции,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиСекций.ТипСекции,
	|	НастройкиРассылкиСостояниеКомпанииНастройкиСекций.ВидЦенПродажи
	|ИЗ
	|	Справочник.НастройкиРассылкиСостояниеКомпании.НастройкиСекций КАК НастройкиРассылкиСостояниеКомпанииНастройкиСекций
	|ГДЕ
	|	НастройкиРассылкиСостояниеКомпанииНастройкиСекций.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	ЗапросНастройкиОтчета.УстановитьПараметр("Ссылка", СсылкаНаНастройки);
	РезультатыЗапроса = ЗапросНастройкиОтчета.ВыполнитьПакет();
	ВыборкаНастройкиОтчета = РезультатыЗапроса[0].Выбрать();
	ВыборкаНастройкиОтчета.Следующий();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПериодОтчета", ПериодОтчета);
	ПараметрыЗадания.Вставить("УчетнаяЗапись", ВыборкаНастройкиОтчета.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("Организация", ВыборкаНастройкиОтчета.Организация);
	ПараметрыЗадания.Вставить("Получатели", ПолучателиОтчета(РезультатыЗапроса[1].Выгрузить()));
	ПараметрыЗадания.Вставить("Секции", СекцииОтчета(РезультатыЗапроса[2].Выгрузить(), РезультатыЗапроса[3].Выгрузить()));
	
	ОтправитьОтчетПоЭлектроннойПочте(ПараметрыЗадания);
	
КонецПроцедуры

Функция ПолучателиОтчета(Знач ТаблицаПолучателей) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаПолучателей Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Получатель) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресИПредставление = Новый Структура("Адрес, Представление", "", "");
		АдресИПредставление.Адрес = ТекСтрока.Получатель;
		Результат.Добавить(АдресИПредставление);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СекцииОтчета(Знач ТаблицаНастройкиФильтров, Знач ТаблицаНастройкиСекций) Экспорт
	
	Результат = Новый Массив;
	
	НастройкиФильтров = Новый Соответствие;
	Для Каждого ТекСтрокаНастройкиФильтров Из ТаблицаНастройкиФильтров Цикл
		
		Если НастройкиФильтров[ТекСтрокаНастройкиФильтров.ИдентификаторСекции] = Неопределено Тогда
			НастройкиФильтров[ТекСтрокаНастройкиФильтров.ИдентификаторСекции] = Новый Массив;
		КонецЕсли;
		
		ТекНастройкаФильтра = Новый Структура;
		ТекНастройкаФильтра.Вставить("ИмяОбласти", ТекСтрокаНастройкиФильтров.ИмяОбласти);
		ТекНастройкаФильтра.Вставить("ИмяПоля", ТекСтрокаНастройкиФильтров.ИмяПоля);
		ТекНастройкаФильтра.Вставить("Путь", ТекСтрокаНастройкиФильтров.Путь);
		ТекНастройкаФильтра.Вставить("ПредставлениеПоля", ТекСтрокаНастройкиФильтров.ПредставлениеПоля);
		ТекНастройкаФильтра.Вставить("ВидСравнения", ТекСтрокаНастройкиФильтров.ВидСравнения);
		ТекНастройкаФильтра.Вставить("Значение", ТекСтрокаНастройкиФильтров.Значение);
		
		НастройкиФильтров[ТекСтрокаНастройкиФильтров.ИдентификаторСекции].Добавить(ТекНастройкаФильтра);
		
	КонецЦикла;
	
	ОписанияВсехСекций = СостояниеКомпанииКлиентСервер.ОписанияВсехСекций();
	
	Для Каждого ТекСтрокаНастройкиСекций Из ТаблицаНастройкиСекций Цикл
		
		Если Не ОписанияВсехСекций.Свойство(ТекСтрокаНастройкиСекций.ТипСекции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекСтрокаНастройкиСекций.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиСекции = Новый Структура;
		НастройкиСекции.Вставить("ИдентификаторСекции", ТекСтрокаНастройкиСекций.ИдентификаторСекции);
		НастройкиСекции.Вставить("ТипСекции", ТекСтрокаНастройкиСекций.ТипСекции);
		НастройкиСекции.Вставить("ВидЦенПродажи", ТекСтрокаНастройкиСекций.ВидЦенПродажи);
		НастройкиСекции.Вставить("ЗаголовокСекции", ТекСтрокаНастройкиСекций.ЗаголовокСекции);
		НастройкиСекции.Вставить("НастройкиФильтров", НастройкиФильтров[ТекСтрокаНастройкиСекций.ИдентификаторСекции]);
		
		Результат.Добавить(НастройкиСекции);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнтерактивноПодготовитьОтчетДляПросмотраНаЭкране(Знач ПараметрыЗадания, Знач АдресХранилища) Экспорт
	
	Попытка
		
		ОтчетТабДок = ОтчетКакТабличныйДокумент(ПараметрыЗадания);
		
		ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(ОтчетТабДок, Новый СжатиеДанных), АдресХранилища);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Подготовка отчета ""Состояние компании"" для просмотра на экране'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		СообщитьОбОшибкеДлительногоЗадания(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ИнтерактивноОтправитьОтчетПоЭлектроннойПочте(Знач ПараметрыЗадания, Знач АдресХранилища) Экспорт
	
	Попытка
		
		ОтправитьОтчетПоЭлектроннойПочте(ПараметрыЗадания);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка отчета ""Состояние компании"" по электронной почте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		СообщитьОбОшибкеДлительногоЗадания(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьОтчетПоЭлектроннойПочте(Знач ПараметрыЗадания)
	
	ОтчетТабДок = ОтчетКакТабличныйДокумент(ПараметрыЗадания);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("html");
	
	ОтчетТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", ПараметрыЗадания.Получатели);
	ПараметрыПисьма.Вставить("Тема", СтрШаблон("Состояние компании %1 на %2",
	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗадания.Организация, "НаименованиеПолное"),
	Формат(ПараметрыЗадания.ПериодОтчета, "ДЛФ=DD")));
	ПараметрыПисьма.Вставить("Вложения", Новый Соответствие);
	
	ИмяВложения = СтрШаблон("Состояние компании %1.pdf", Формат(ПараметрыЗадания.ПериодОтчета, "ДФ=yyyyMMdd"));
	ПараметрыПисьма.Вложения[ИмяВложения] = Новый ДвоичныеДанные(ИмяФайла);
	
	ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, ПараметрыЗадания.УчетнаяЗапись);

КонецПроцедуры

Функция АвтоНаименованиеНастройки() Экспорт
	
	КоличествоНастроек = 1;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоНастроек
	|ИЗ
	|	Справочник.НастройкиРассылкиСостояниеКомпании КАК НастройкиРассылкиСостояниеКомпании");
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КоличествоНастроек = Выборка.КоличествоНастроек + 1;
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'Сводный отчет о состоянии компании %1'"), КоличествоНастроек);
	
КонецФункции

Функция РасписаниеПоУмолчанию() Экспорт
	
	Результат = Новый РасписаниеРегламентногоЗадания;
	Результат.ВремяНачала = Дата(1, 1, 1, 23, 0, 0);
	Результат.ПериодПовтораДней = 1;
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(5);
	Результат.ДниНедели = ДниНедели;
	
	Возврат Результат;
	
КонецФункции

// Обработчик подписки на событие ПриЗаписи элемента справочника УчетныеЗаписиЭлектроннойПочты
//
// Параметры:
//  Источник - СправочникОбъект.УчетныеЗаписиЭлектроннойПочты,
//  Отказ	 - Булево.
//
Процедура НастроитьРассылкуСостояниеКомпании(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ИспользоватьДляОтправки Тогда
		Возврат;
	КонецЕсли;
	
	Если УжеИмеютсяНастройкиРассылкиСостояниеКомпании() Тогда
		Возврат;
	КонецЕсли;
	
	Пользователь = ПолучательСПолнымиПравами(Источник.АдресЭлектроннойПочты);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ЗаписатьНовуюНастройкуРассылки(Пользователь, Источник.Ссылка, Источник.АдресЭлектроннойПочты);
	КонецЕсли;
	
КонецПроцедуры

// Записывает новую настройку отчета "Состояние компании" по данным переданной учетной записи электронной почты.
// Запись выполняется только когда пользователь с адресом АдресЭП имеет полные права в текущей инфобазе.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, из настроек которого будет заполняться ВидЦенПродажи,
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на элемент справочника учетные записи электронной почты,
//  АдресЭП - Строка - адрес получателя,
//
Процедура ЗаписатьНовуюНастройкуРассылки(Пользователь, УчетнаяЗапись, АдресЭП) Экспорт
	
	НоваяНастройкаРассылки = Справочники.НастройкиРассылкиСостояниеКомпании.СоздатьЭлемент();
	НоваяНастройкаРассылки.Заполнить(Неопределено);
	НоваяНастройкаРассылки.УчетнаяЗапись = УчетнаяЗапись;
	НоваяСтрокаПолучатель = НоваяНастройкаРассылки.Получатели.Добавить();
	НоваяСтрокаПолучатель.Получатель = АдресЭП;
	НоваяНастройкаРассылки.Использование = Истина;
	
	ЗаполнитьВидЦенПродажи(НоваяНастройкаРассылки, Пользователь);
	
	НоваяНастройкаРассылки.Записать();

КонецПроцедуры

// Возвращает ИСТИНА если в текущей инфобазе уже имеются настройки отчета состояние компании
// 
// Возвращаемое значение:
//  Булево.
//
Функция УжеИмеютсяНастройкиРассылкиСостояниеКомпании() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРассылкиСостояниеКомпании.Ссылка
	|ИЗ
	|	Справочник.НастройкиРассылкиСостояниеКомпании КАК НастройкиРассылкиСостояниеКомпании");
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает ссылку на пользователя с указанным адресом электронной почты,
// имеющего роль "Полные права" в текущей инфобазе.
//
// Параметры:
//  АдресЭП	 - Строка - адрес электронной почты.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПолучательСПолнымиПравами(АдресЭП) Экспорт
	
	Для Каждого ТекПользователь Из ПользователиПоАдресуЭП(АдресЭП) Цикл
		Если УправлениеДоступом.ЕстьРоль("ПолныеПрава",, ТекПользователь) Тогда
			Возврат ТекПользователь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Возвращает признак "Иерархический" объекта метаданных по типу поля.
//
// Параметры:
//  ТипПоля	 - ОписаниеТипов.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПризнакИерархическийПоТипуПоля(ТипПоля) Экспорт
	
	Результат = Истина;
	
	Для Каждого ТекТип Из ТипПоля.Типы() Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекТип);
		Если ОбъектМетаданных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных) Тогда
			Продолжить; // План счетов всегда иерархический
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
			И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Результат = Результат И ОбъектМетаданных.Иерархический;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтчетКакТабличныйДокумент(Знач ПараметрыЗадания)
	
	Результат = Новый ТабличныйДокумент;
	
	ОбщийМакет = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Общий");
	
	ОбластьЗаголовокОтчета = ОбщийМакет.ПолучитьОбласть("СтрокаЗаголовокОтчета");
	ОбластьЗаголовокОтчета.Параметры.ПериодОтчета = Формат(ПараметрыЗадания.ПериодОтчета, "ДЛФ=DD");
	ОбластьЗаголовокОтчета.Параметры.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗадания.Организация, "НаименованиеПолное");
	Результат.Вывести(ОбластьЗаголовокОтчета);
	
	ОписанияВсехСекций = СостояниеКомпанииКлиентСервер.ОписанияВсехСекций();
	
	Для Каждого ТекНастройкаСекции Из ПараметрыЗадания.Секции Цикл
		
		Если Не ОписанияВсехСекций.Свойство(ТекНастройкаСекции.ТипСекции) Тогда
			Продолжить;
		КонецЕсли;
		
		ПромежуточныйРезультат = Новый ТабличныйДокумент;
		ЗаполнитьСодержимоеСекции(
		ТекНастройкаСекции,
		ПромежуточныйРезультат,
		ПараметрыЗадания.Организация,
		ПараметрыЗадания.ПериодОтчета,
		ОписанияВсехСекций);
		
		Таблицы = Новый Массив;
		Таблицы.Добавить(ОбщийМакет.ПолучитьОбласть("СтрокаОтступ"));
		Таблицы.Добавить(ПромежуточныйРезультат);
		
		Если Не Результат.ПроверитьВывод(Таблицы) Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВывестиОтступ(Результат);
		Результат.Вывести(ПромежуточныйРезультат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиЗаголовокСекции(Знач ТабличныйДокумент, Знач НастройкаСекции)
	
	МакетЗаголовокСекции = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Общий");
	ОбластьЗаголовокСекции = МакетЗаголовокСекции.ПолучитьОбласть("СтрокаЗаголовокСекции");
	ОбластьЗаголовокСекции.Параметры.ЗаголовокСекции = НастройкаСекции.ЗаголовокСекции;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
	
	Если Не ЗначениеЗаполнено(НастройкаСекции.НастройкиФильтров) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьФильтр = МакетЗаголовокСекции.ПолучитьОбласть("СтрокаФильтр");
	Для Каждого ТекФильтр Из НастройкаСекции.НастройкиФильтров Цикл
		
		Если ТекФильтр.ВидСравнения = "Равно" Тогда
			ОбластьФильтр.Параметры.Фильтр = СтрШаблон("%1 = ""%2""", ТекФильтр.ПредставлениеПоля, ТекФильтр.Значение);
		ИначеЕсли ТекФильтр.ВидСравнения = "НеРавно" Тогда
			ОбластьФильтр.Параметры.Фильтр = СтрШаблон("%1 ≠ ""%2""", ТекФильтр.ПредставлениеПоля, ТекФильтр.Значение);
		ИначеЕсли ТекФильтр.ВидСравнения = "ВИерархии" Тогда
			ОбластьФильтр.Параметры.Фильтр = СтрШаблон("%1 в группе ""%2""", ТекФильтр.ПредставлениеПоля, ТекФильтр.Значение);
		ИначеЕсли ТекФильтр.ВидСравнения = "НеВИерархии" Тогда
			ОбластьФильтр.Параметры.Фильтр = СтрШаблон("%1 не в группе ""%2""", ТекФильтр.ПредставлениеПоля, ТекФильтр.Значение);
		ИначеЕсли ТекФильтр.ВидСравнения = "Содержит" Тогда
			ОбластьФильтр.Параметры.Фильтр = СтрШаблон("%1 содержит ""%2""", ТекФильтр.ПредставлениеПоля, ТекФильтр.Значение);
		ИначеЕсли ТекФильтр.ВидСравнения = "НеСодержит" Тогда
			ОбластьФильтр.Параметры.Фильтр = СтрШаблон("%1 не содержит ""%2""", ТекФильтр.ПредставлениеПоля, ТекФильтр.Значение);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьФильтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиОтступ(Знач ТабличныйДокумент)
	
	Если ТабличныйДокумент.Области.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийМакет = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Общий");
	
	ТабличныйДокумент.Вывести(ОбщийМакет.ПолучитьОбласть("СтрокаОтступ"));
	
КонецПроцедуры

Процедура ЗаполнитьСодержимоеСекции(Знач НастройкаСекции, Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач ОписанияВсехСекций)
	
	Если Не ОписанияВсехСекций.Свойство(НастройкаСекции.ТипСекции) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Указан недопустимый ключ секции: ""%1"".'"), НастройкаСекции.ТипСекции);
	КонецЕсли;
	
	Выполнить СтрШаблон("Подключаемый_Секция%1(ТабличныйДокумент, Организация, ПериодОтчета, НастройкаСекции)", НастройкаСекции.ТипСекции);
	
КонецПроцедуры

Процедура ВывестиСообщениеДанныеОтсутствуют(Знач ТабличныйДокумент)
	
	ОбщийМакет = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Общий");
	
	ТабличныйДокумент.Вывести(ОбщийМакет.ПолучитьОбласть("СтрокаОтступ"));
	ТабличныйДокумент.Вывести(ОбщийМакет.ПолучитьОбласть("СтрокаДанныеОтсутствуют"));
	
КонецПроцедуры

Процедура СообщитьОбОшибкеДлительногоЗадания(ИнформацияОбОшибке)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроизошлаОшибка", Истина);
	ДополнительныеПараметры.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ДлительныеОперации.СообщитьПрогресс(0,
	ДополнительныеПараметры.ОписаниеОшибки,
	ДополнительныеПараметры);

КонецПроцедуры

Функция ПользователиПоАдресуЭП(АдресЭП)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.АдресЭП = &АдресЭП");
	Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаПользователи = РезультатЗапроса.Выбрать();
	Пока ВыборкаПользователи.Следующий() Цикл
		Результат.Добавить(ВыборкаПользователи.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьВидЦенПродажи(НастройкаРассылки, Пользователь)
	
	Для Каждого ТекНастройкаСекции Из НастройкаРассылки.НастройкиСекций Цикл
		Если ТекНастройкаСекции.ТипСекции = "Товары" Тогда
			ТекНастройкаСекции.ВидЦенПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователь,
			"ОсновнойВидЦенПродажи");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НаложитьФильтры(Знач Запрос, Знач ИмяОбласти, Знач НастройкиФильтров)
	
	Запрос.УстановитьПараметр(ИмяОбласти, Истина);
	
	Если Не ЗначениеЗаполнено(НастройкиФильтров) Тогда
		Возврат;
	КонецЕсли;
	
	// С помощью этих соответствий будет выполняться группировка фильтров по именам параметров и их значениям.
	// Группировка параметров осуществляется по пути к полю и вида сравнения.
	ИменаПараметров = Новый Соответствие;
	ЗначенияПараметров = Новый Соответствие;
	
	Для Каждого ТекФильтр Из НастройкиФильтров Цикл
		
		Если ТекФильтр.ИмяОбласти <> ИмяОбласти Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаПараметров[КлючФильтра(ТекФильтр)] = Неопределено Тогда
			ИменаПараметров[КлючФильтра(ТекФильтр)] = СтрШаблон("Параметр%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
		КонецЕсли;
		
		Если ЗначенияПараметров[КлючФильтра(ТекФильтр)] = Неопределено Тогда
			ЗначенияПараметров[КлючФильтра(ТекФильтр)] = НовоеЗначениеПараметра(ТекФильтр);
		КонецЕсли;
		
		Если ТипЗнч(ЗначенияПараметров[КлючФильтра(ТекФильтр)]) = Тип("Массив") Тогда
			ЗначенияПараметров[КлючФильтра(ТекФильтр)].Добавить(ТекФильтр.Значение);
		Иначе
			ЗначенияПараметров[КлючФильтра(ТекФильтр)] = СтрШаблон("%%%1%%", СокрЛП(ТекФильтр.Значение));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИменаПараметров) Тогда
		ТекстыФильтров = Новый Массив;
		ГруппаИ = Новый Массив;
		ГруппаИЛИ = Новый Массив;
		Для Каждого ТекФильтр Из НастройкиФильтров Цикл
			
			Если ТекФильтр.ИмяОбласти <> ИмяОбласти Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запрос.Параметры.Свойство(ИменаПараметров[КлючФильтра(ТекФильтр)]) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИменаПараметров[КлючФильтра(ТекФильтр)], ЗначенияПараметров[КлючФильтра(ТекФильтр)]);
			
			Если СтрНачинаетсяС(КлючФильтра(ТекФильтр), ПрефиксВИерархии()) Тогда
				ГруппаИ.Добавить(СтрШаблон("%1 В ИЕРАРХИИ (&%2)", ТекФильтр.Путь, ИменаПараметров[КлючФильтра(ТекФильтр)]));
			ИначеЕсли СтрНачинаетсяС(КлючФильтра(ТекФильтр), ПрефиксНеВИерархии()) Тогда
				ГруппаИ.Добавить(СтрШаблон("НЕ %1 В ИЕРАРХИИ (&%2)", ТекФильтр.Путь, ИменаПараметров[КлючФильтра(ТекФильтр)]));
			ИначеЕсли СтрНачинаетсяС(КлючФильтра(ТекФильтр), ПрефиксСодержит()) Тогда
				ГруппаИЛИ.Добавить(СтрШаблон("%1 ПОДОБНО &%2", ТекФильтр.Путь, ИменаПараметров[КлючФильтра(ТекФильтр)]));
			ИначеЕсли СтрНачинаетсяС(КлючФильтра(ТекФильтр), ПрефиксНеСодержит()) Тогда
				ГруппаИЛИ.Добавить(СтрШаблон("НЕ (%1 ПОДОБНО &%2)", ТекФильтр.Путь, ИменаПараметров[КлючФильтра(ТекФильтр)]));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ГруппаИ) Тогда
			ТекстыФильтров.Добавить(СтрШаблон("(%1)", СтрСоединить(ГруппаИ, " И ")));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГруппаИЛИ) Тогда
			ТекстыФильтров.Добавить(СтрШаблон("(%1)", СтрСоединить(ГруппаИЛИ, " ИЛИ ")));
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, СтрШаблон("&%1", ИмяОбласти), СтрСоединить(ТекстыФильтров, " И "));
		
	ИначеЕсли ЗначениеЗаполнено(НастройкиФильтров) Тогда
		
		// Наложены фильтры на другие области, а для текущей области фильтров не нашлось - отключаем всю область
		Запрос.УстановитьПараметр(ИмяОбласти, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КлючФильтра(ТекФильтр)
	
	Если ТекФильтр.ВидСравнения = "Равно"
		Или ТекФильтр.ВидСравнения = "ВИерархии" Тогда
		Возврат СтрШаблон("%1%2", ПрефиксВИерархии(), ТекФильтр.Путь);
	КонецЕсли;
	
	Если ТекФильтр.ВидСравнения = "НеРавно"
		Или ТекФильтр.ВидСравнения = "НеВИерархии" Тогда
		Возврат СтрШаблон("%1%2", ПрефиксНеВИерархии(), ТекФильтр.Путь);
	КонецЕсли;
	
	Если ТекФильтр.ВидСравнения = "Содержит" Тогда
		Возврат СтрШаблон("%1%2%3", ПрефиксСодержит(), ТекФильтр.Путь, ХешЗначения(ТекФильтр.Значение));
	КонецЕсли;
	
	Если ТекФильтр.ВидСравнения = "НеСодержит" Тогда
		Возврат СтрШаблон("%1%2%3", ПрефиксНеСодержит(), ТекФильтр.Путь, ХешЗначения(ТекФильтр.Значение));
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(
	НСтр("ru = 'Для поля ""%1"" указан неподдерживаемый вид сравнения ""%2"".'"),
	ТекФильтр.Путь,
	ТекФильтр.ВидСравнения);
	
КонецФункции

Функция ХешЗначения(ПараметрСтрока)
	
	ХД = Новый ХешированиеДанных(ХешФункция.MD5);
	ХД.Добавить(ПараметрСтрока);
	Возврат СтрЗаменить(ХД.ХешСумма, " ", "");
	
КонецФункции

Функция НовоеЗначениеПараметра(ТекФильтр)
	
	Если ТекФильтр.ВидСравнения = "Содержит"
		Или ТекФильтр.ВидСравнения = "НеСодержит" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

Функция ПрефиксВИерархии()
	
	Возврат "#ВИерархии#";
	
КонецФункции

Функция ПрефиксНеВИерархии()
	
	Возврат "#НеВИерархии#";
	
КонецФункции

Функция ПрефиксСодержит()
	
	Возврат "#Содержит#";
	
КонецФункции

Функция ПрефиксНеСодержит()
	
	Возврат "#НеСодержит#";
	
КонецФункции

#Область ЧистыеАктивы

Процедура Подключаемый_СекцияЧистыеАктивы(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	ПараметрыСекцииЧистыеАктивы = НовыеПараметрыСекцииЧистыеАктивы(ПериодОтчета);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""ДЕНЬ"" КАК НачалоПериода,
	|	УправленческийОстатки.Счет.ТипСчета КАК ТипСчета,
	|	УправленческийОстатки.Счет,
	|	УправленческийОстатки.Организация,
	|	УправленческийОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&ПериодОтчета,
	|			&Фильтры,
	|			Организация = &Организация
	|				И СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)) КАК УправленческийОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""МЕСЯЦ"",
	|	УправленческийОстатки.Счет.ТипСчета,
	|	УправленческийОстатки.Счет,
	|	УправленческийОстатки.Организация,
	|	УправленческийОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&КНачалуМесяца,
	|			&Фильтры,
	|			Организация = &Организация
	|				И СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)) КАК УправленческийОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ГОД"",
	|	УправленческийОстатки.Счет.ТипСчета,
	|	УправленческийОстатки.Счет,
	|	УправленческийОстатки.Организация,
	|	УправленческийОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&КНачалуГода,
	|			&Фильтры,
	|			Организация = &Организация
	|				И СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)) КАК УправленческийОстатки");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодОтчета", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КНачалуМесяца", Новый Граница(НачалоМесяца(ПериодОтчета) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КНачалуГода", Новый Граница(НачалоГода(ПериодОтчета) - 1, ВидГраницы.Включая));
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьПараметрыСекцииЧистыеАктивы(ПараметрыСекцииЧистыеАктивы, Выборка);
	КонецЦикла;
	
	ПараметрыСекцииЧистыеАктивы["ЧистыеАктивы"] = ПараметрыСекцииЧистыеАктивы["Активы"] - ПараметрыСекцииЧистыеАктивы["Обязательства"];
	ПараметрыСекцииЧистыеАктивы["ЧистыеАктивыКНачалуМесяца"] = ПараметрыСекцииЧистыеАктивы["АктивыКНачалуМесяца"] - ПараметрыСекцииЧистыеАктивы["ОбязательстваКНачалуМесяца"];
	ПараметрыСекцииЧистыеАктивы["ЧистыеАктивыКНачалуГода"] = ПараметрыСекцииЧистыеАктивы["АктивыКНачалуГода"] - ПараметрыСекцииЧистыеАктивы["ОбязательстваКНачалуГода"];
	
	МакетЧистыеАктивы = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("ЧистыеАктивы");
	
	ОбластьЧистыеАктивы = МакетЧистыеАктивы.ПолучитьОбласть("ОбластьЧистыеАктивы");
	ОбластьЧистыеАктивы.Параметры.Заполнить(ФорматироватьСуммы(ПараметрыСекцииЧистыеАктивы));
	
	ТабличныйДокумент.Вывести(ОбластьЧистыеАктивы);
	
КонецПроцедуры

Функция ФорматироватьСуммы(Знач ПараметрыСекции)
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение Из ПараметрыСекции Цикл
		
		Если СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "КНачалуМесяца") Тогда
			Результат.Вставить(КлючИЗначение.Ключ, ФорматированнаяДельта(КлючИЗначение, ПараметрыСекции, "КНачалуМесяца"));
			Продолжить;
		КонецЕсли;
		
		Если СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "КНачалуГода") Тогда
			Результат.Вставить(КлючИЗначение.Ключ, ФорматированнаяДельта(КлючИЗначение, ПараметрыСекции, "КНачалуГода"));
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда
			Результат.Вставить(КлючИЗначение.Ключ, Формат(КлючИЗначение.Значение, "ЧДЦ=2; ЧН=0.00"));
		Иначе
			Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыСекцииЧистыеАктивы(Знач ПараметрыСекцииЧистыеАктивы, Знач Выборка)
	
	Для Каждого ТекСтатья Из СтатьиБаланса(Выборка.Счет, Выборка.ТипСчета) Цикл
		Если Выборка.НачалоПериода = "ДЕНЬ" Тогда
			ПараметрыСекцииЧистыеАктивы[ТекСтатья.Ключ] = ПараметрыСекцииЧистыеАктивы[ТекСтатья.Ключ] + Выборка.СуммаОстаток * ТекСтатья.Значение;
		ИначеЕсли Выборка.НачалоПериода = "МЕСЯЦ" Тогда
			ПараметрыСекцииЧистыеАктивы[ТекСтатья.Ключ + "КНачалуМесяца"] = ПараметрыСекцииЧистыеАктивы[ТекСтатья.Ключ + "КНачалуМесяца"] + Выборка.СуммаОстаток * ТекСтатья.Значение;
		ИначеЕсли Выборка.НачалоПериода = "ГОД" Тогда
			ПараметрыСекцииЧистыеАктивы[ТекСтатья.Ключ + "КНачалуГода"] = ПараметрыСекцииЧистыеАктивы[ТекСтатья.Ключ + "КНачалуГода"] + Выборка.СуммаОстаток * ТекСтатья.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание статей баланса  ввиде структуры, где:
//   * Ключ - наименвоание статьи баланса,
//   * Значение - Число - +1 для активов, -1 - пассивов.
Функция СтатьиБаланса(Знач Счет, Знач ТипСчета)
	
	Результат = Новый Структура;
	
	Если ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства Тогда
		
		Результат.Вставить("Активы", 1);
		Результат.Вставить("Деньги", 1)
		
	ИначеЕсли ТипСчета = Перечисления.ТипыСчетов.Дебиторы Тогда
		
		Результат.Вставить("Активы", 1);
		Результат.Вставить("Дебиторка", 1);
		Если Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным Тогда
			Результат.Вставить("АвансыПоставщикам", 1);
		КонецЕсли;
		
	ИначеЕсли ТипСчета = Перечисления.ТипыСчетов.Запасы Тогда
		
		Результат.Вставить("Активы", 1);
		Результат.Вставить("Товары", 1);
		
	ИначеЕсли ТипСчета = Перечисления.ТипыСчетов.ВнеоборотныеАктивы
		ИЛИ ТипСчета = Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов Тогда
		
		Результат.Вставить("Активы", 1);
		Результат.Вставить("Имущество", 1);
		
	ИначеЕсли ТипСчета = Перечисления.ТипыСчетов.Кредиторы Тогда
		
		Результат.Вставить("Обязательства", -1);
		Если Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда Тогда
			Результат.Вставить("ДолгиПоЗарплате", -1);
		Иначе
			Результат.Вставить("Кредиторка", -1);
		КонецЕсли;
		Если Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным Тогда
			Результат.Вставить("АвансыПокупателей", -1);
		КонецЕсли;
		
	ИначеЕсли ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы Тогда
		
		Результат.Вставить("Активы", 1);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыСекцииЧистыеАктивы(Знач ПериодОтчета)
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаОтчета", Формат(ПериодОтчета, "ДЛФ=D"));
	Результат.Вставить("Активы", 0);
	Результат.Вставить("АктивыКНачалуМесяца", 0);
	Результат.Вставить("АктивыКНачалуГода", 0);
	Результат.Вставить("Деньги", 0);
	Результат.Вставить("ДеньгиКНачалуМесяца", 0);
	Результат.Вставить("ДеньгиКНачалуГода", 0);
	Результат.Вставить("Дебиторка", 0);
	Результат.Вставить("ДебиторкаКНачалуМесяца", 0);
	Результат.Вставить("ДебиторкаКНачалуМесяца", 0);
	Результат.Вставить("ДебиторкаКНачалуГода", 0);
	Результат.Вставить("АвансыПоставщикам", 0);
	Результат.Вставить("АвансыПоставщикамКНачалуМесяца", 0);
	Результат.Вставить("АвансыПоставщикамКНачалуГода", 0);
	Результат.Вставить("Товары", 0);
	Результат.Вставить("ТоварыКНачалуМесяца", 0);
	Результат.Вставить("ТоварыКНачалуГода", 0);
	Результат.Вставить("Имущество", 0);
	Результат.Вставить("ИмуществоКНачалуМесяца", 0);
	Результат.Вставить("ИмуществоКНачалуГода", 0);
	Результат.Вставить("Обязательства", 0);
	Результат.Вставить("ОбязательстваКНачалуМесяца", 0);
	Результат.Вставить("ОбязательстваКНачалуГода", 0);
	Результат.Вставить("Кредиторка", 0);
	Результат.Вставить("КредиторкаКНачалуМесяца", 0);
	Результат.Вставить("КредиторкаКНачалуГода", 0);
	Результат.Вставить("АвансыПокупателей", 0);
	Результат.Вставить("АвансыПокупателейКНачалуМесяца", 0);
	Результат.Вставить("АвансыПокупателейКНачалуГода", 0);
	Результат.Вставить("ДолгиПоЗарплате", 0);
	Результат.Вставить("ДолгиПоЗарплатеКНачалуМесяца", 0);
	Результат.Вставить("ДолгиПоЗарплатеКНачалуГода", 0);
	Результат.Вставить("ЧистыеАктивы", 0);
	Результат.Вставить("ЧистыеАктивыКНачалуМесяца", 0);
	Результат.Вставить("ЧистыеАктивыКНачалуГода", 0);
	Возврат Результат;

КонецФункции

Функция ФорматированнаяДельта(Знач КлючИЗначение, Знач ПараметрыСекции, Знач Постфикс)
	
	ИмяПоля = СтрЗаменить(КлючИЗначение.Ключ, Постфикс, "");
	
	Дельта = ПараметрыСекции[ИмяПоля] - КлючИЗначение.Значение;
	
	Если Дельта = 0 Тогда
		Возврат "=";
	КонецЕсли;
	
	Результат = Формат(Дельта, "ЧДЦ=2; ЧН=0.00");
	
	Если Дельта > 0 Тогда
		Возврат СтрШаблон("+%1", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Деньги

Процедура Подключаемый_СекцияДеньги(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	МакетДеньги = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Деньги");
	
	ОбластьЗаголовок = МакетДеньги.ПолучитьОбласть("КолонкаЗаголовок|СтрокаЗаголовок");
	ОбластьЗаголовок.Параметры.ЗаголовокСекции = НастройкаСекции.ЗаголовокСекции;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);

	ОбластьЗаголовокВалюта = МакетДеньги.ПолучитьОбласть("КолонкаВалюта|СтрокаЗаголовок");
	ТабличныйДокумент.Присоединить(ОбластьЗаголовокВалюта);
	ТабличныйДокумент.Присоединить(ОбластьЗаголовокВалюта);
	
	ТаблицаВалют = НоваяТаблицаВалют();
	ДобавитьОписаниеВалюты(Константы.НациональнаяВалюта.Получить(), ТаблицаВалют);
	ДобавитьОписаниеВалюты(Константы.ВалютаУчета.Получить(), ТаблицаВалют);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваОстатки.Валюта
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ПериодОтчета, Организация = &Организация) КАК ДенежныеСредстваОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПодотчетникамиОстатки.Валюта
	|ИЗ
	|	РегистрНакопления.РасчетыСПодотчетниками.Остатки(&ПериодОтчета, Организация = &Организация) КАК РасчетыСПодотчетникамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.Валюта КАК Валюта,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса КАК МестоХраненияДенег,
	|	СУММА(ДенежныеСредстваОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|			&ПериодОтчета,
	|			Организация = &Организация
	|				И БанковскийСчетКасса ССЫЛКА Справочник.Кассы
	|				И &ФильтрыКассы) КАК ДенежныеСредстваОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваОстатки.Валюта,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.Валюта КАК Валюта,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса КАК МестоХраненияДенег,
	|	СУММА(ДенежныеСредстваОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|			&ПериодОтчета,
	|			Организация = &Организация
	|				И БанковскийСчетКасса ССЫЛКА Справочник.БанковскиеСчета
	|				И &ФильтрыБанковскиеСчета) КАК ДенежныеСредстваОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваОстатки.Валюта,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетникамиОстатки.Валюта КАК Валюта,
	|	РасчетыСПодотчетникамиОстатки.Сотрудник КАК МестоХраненияДенег,
	|	СУММА(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПодотчетниками.Остатки(
	|			&ПериодОтчета,
	|			Организация = &Организация
	|				И &ФильтрыСотрудники) КАК РасчетыСПодотчетникамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПодотчетникамиОстатки.Валюта,
	|	РасчетыСПодотчетникамиОстатки.Сотрудник");
	Запрос.УстановитьПараметр("ПериодОтчета", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "ФильтрыКассы", НастройкаСекции.НастройкиФильтров);
	НаложитьФильтры(Запрос, "ФильтрыБанковскиеСчета", НастройкаСекции.НастройкиФильтров);
	НаложитьФильтры(Запрос, "ФильтрыСотрудники", НастройкаСекции.НастройкиФильтров);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ВыборкаВалюты = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаВалюты.Следующий() Цикл
		ДобавитьОписаниеВалюты(ВыборкаВалюты.Валюта, ТаблицаВалют);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(МакетДеньги.ПолучитьОбласть("КолонкаЗаголовок|СтрокаВалюта"));
	
	ДеньгиВКассах = НоваяТаблицаДеньгиПоМестамХранения();
	ДеньгиНаСчетах = НоваяТаблицаДеньгиПоМестамХранения();
	ДеньгиУПодотчетников = НоваяТаблицаДеньгиПоМестамХранения();
	
	Для Каждого ТекОписаниеВалюты Из ТаблицаВалют Цикл
		
		ОбластьВалюта = МакетДеньги.ПолучитьОбласть("КолонкаВалюта|СтрокаВалюта");
		ОбластьВалюта.Параметры.Валюта = ТекОписаниеВалюты.Заголовок;
		ТабличныйДокумент.Присоединить(ОбластьВалюта);
		
		ДеньгиВКассах.Колонки.Добавить(ТекОписаниеВалюты.ИмяКолонки);
		ДеньгиНаСчетах.Колонки.Добавить(ТекОписаниеВалюты.ИмяКолонки);
		ДеньгиУПодотчетников.Колонки.Добавить(ТекОписаниеВалюты.ИмяКолонки);
		
	КонецЦикла;
	
	ВыборкаДеньгиВКассах = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаДеньгиВКассах.Следующий() Цикл
		ДобавитьСтрокуМестоХранения(ДеньгиВКассах, ВыборкаДеньгиВКассах, ТаблицаВалют);
	КонецЦикла;
	
	ВыборкаДеньгиНаСчетах = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаДеньгиНаСчетах.Следующий() Цикл
		ДобавитьСтрокуМестоХранения(ДеньгиНаСчетах, ВыборкаДеньгиНаСчетах, ТаблицаВалют);
	КонецЦикла;
	
	ВыборкаДеньгиУПодотчетников = РезультатыЗапроса[3].Выбрать();
	Пока ВыборкаДеньгиУПодотчетников.Следующий() Цикл
		ДобавитьСтрокуМестоХранения(ДеньгиУПодотчетников, ВыборкаДеньгиУПодотчетников, ТаблицаВалют);
	КонецЦикла;
	
	ВывестиЗаголовокПоМестамХранения(ТабличныйДокумент, ДеньгиВКассах, НСтр("ru = 'В кассах'"), ТаблицаВалют);
	ВывестиЗаголовокПоМестамХранения(ТабличныйДокумент, ДеньгиНаСчетах, НСтр("ru = 'На счетах'"), ТаблицаВалют);
	ВывестиЗаголовокПоМестамХранения(ТабличныйДокумент, ДеньгиУПодотчетников, НСтр("ru = 'У подотчетников'"), ТаблицаВалют);
	
	ВывестиИтогиПоВалютам(ТабличныйДокумент, ТаблицаВалют);
	
	Если ТаблицаВалют.Количество() > 1 Тогда
		ОстатокНацВал = 0;
		ОстатокУпрВал = 0;
		ОбластьПодвал = МакетДеньги.ПолучитьОбласть("СтрокаПодвал");
		ОбластьПодвал.Параметры.ПериодОтчета = Формат(ПериодОтчета, "ДЛФ=D");
		ОбластьПодвал.Параметры.Курс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТаблицаВалют[1].Валюта, ПериодОтчета).Курс;
		Для Каждого ТекСтрока Из ТаблицаВалют Цикл
			ОстатокНацВал = ОстатокНацВал + РаботаСКурсамиВалют.ПересчитатьВВалюту(ТекСтрока.Итог, ТекСтрока.Валюта, ТаблицаВалют[0].Валюта, ПериодОтчета);
			ОстатокУпрВал = ОстатокУпрВал + РаботаСКурсамиВалют.ПересчитатьВВалюту(ТекСтрока.Итог, ТекСтрока.Валюта, ТаблицаВалют[1].Валюта, ПериодОтчета);
		КонецЦикла;
		ОбластьПодвал.Параметры.НацВал = ТаблицаВалют[0].Валюта;
		ОбластьПодвал.Параметры.УпрВал = ТаблицаВалют[1].Валюта;
		ОбластьПодвал.Параметры.ОстатокНацВал = Формат(ОстатокНацВал, "ЧЦ=15; ЧДЦ=2");
		ОбластьПодвал.Параметры.ОстатокУпрВал = Формат(ОстатокУпрВал, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьПодвал);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуМестоХранения(Знач ДеньгиПоМестамХранения, Знач ВыборкаДеньгиПоМестамХранения, Знач ТаблицаВалют)
	
	ОписаниеВалюты = ТаблицаВалют.Найти(ВыборкаДеньгиПоМестамХранения.Валюта, "Валюта");
	
	Если ОписаниеВалюты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрокаДеньгиПоМестамХранения = ДеньгиПоМестамХранения.Добавить();
	НоваяСтрокаДеньгиПоМестамХранения.МестоХраненияДенег = ВыборкаДеньгиПоМестамХранения.МестоХраненияДенег;
	НоваяСтрокаДеньгиПоМестамХранения[ОписаниеВалюты.ИмяКолонки] = ВыборкаДеньгиПоМестамХранения.СуммаВалОстаток;
	ОписаниеВалюты.Итог = ОписаниеВалюты.Итог + ВыборкаДеньгиПоМестамХранения.СуммаВалОстаток;
	
КонецПроцедуры

Функция НоваяТаблицаДеньгиПоМестамХранения()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("МестоХраненияДенег");
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаВалют()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Результат.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить(
	"Итог",
	Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	Результат.Индексы.Добавить("Валюта");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОписаниеВалюты(Знач Валюта, Знач ТаблицаВалют)
	
	Если ТаблицаВалют.Найти(Валюта, "Валюта") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаВалют.Добавить();
	
	ЗначенияРеквизитовВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Код, Наименование");
	
	НоваяСтрока.Валюта = Валюта;
	НоваяСтрока.Заголовок = ЗначенияРеквизитовВалюты.Наименование;
	НоваяСтрока.ИмяКолонки = СтрШаблон("Валюта%1", ЗначенияРеквизитовВалюты.Код);
	
КонецПроцедуры

Процедура ВывестиЗаголовокПоМестамХранения(Знач ТабличныйДокумент, Знач ТаблицаПоМестамХранения, Знач Заголовок, Знач ТаблицаВалют)
	
	МакетДеньги = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Деньги");
	
	ОбластьПоМестамХраненияЗаголовок = МакетДеньги.ПолучитьОбласть("КолонкаЗаголовок|СтрокаПоМестамХранения");
	ОбластьПоМестамХраненияЗаголовок.Параметры.МестоХраненияДенег = Заголовок;
	
	ТабличныйДокумент.Вывести(ОбластьПоМестамХраненияЗаголовок);
	
	ОбластьПоМестамХраненияЗаголовокВалюта = МакетДеньги.ПолучитьОбласть("КолонкаВалюта|СтрокаПоМестамХранения");
	
	Для Каждого ТекОписаниеВалюты Из ТаблицаВалют Цикл
		
		ОбластьПоМестамХраненияЗаголовокВалюта.Параметры.СуммаВалюта = Формат(ТаблицаПоМестамХранения.Итог(ТекОписаниеВалюты.ИмяКолонки), "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Присоединить(ОбластьПоМестамХраненияЗаголовокВалюта);
		
	КонецЦикла;
	
	ОбластьПоМестамХраненияДетали = МакетДеньги.ПолучитьОбласть("КолонкаЗаголовок|СтрокаПоМестамХраненияДетали");
	ОбластьПоМестамХраненияДеталиВалюта = МакетДеньги.ПолучитьОбласть("КолонкаВалюта|СтрокаПоМестамХраненияДетали");
	
	Для Каждого ТекСтрока Из ТаблицаПоМестамХранения Цикл
		
		ОбластьПоМестамХраненияДетали.Параметры.МестоХраненияДенег = ТекСтрока.МестоХраненияДенег;
		ТабличныйДокумент.Вывести(ОбластьПоМестамХраненияДетали);
		
		Для Каждого ТекОписаниеВалюты Из ТаблицаВалют Цикл
			
			ОбластьПоМестамХраненияДеталиВалюта.Параметры.СуммаВалюта = Формат(ТекСтрока[ТекОписаниеВалюты.ИмяКолонки], "ЧЦ=15; ЧДЦ=2");
			ТабличныйДокумент.Присоединить(ОбластьПоМестамХраненияДеталиВалюта);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИтогиПоВалютам(Знач ТабличныйДокумент, Знач ТаблицаВалют)
	
	МакетДеньги = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Деньги");
	
	ТабличныйДокумент.Вывести(МакетДеньги.ПолучитьОбласть("КолонкаЗаголовок|СтрокаИтог"));
	
	ОбластьПоМестамХраненияИтог = МакетДеньги.ПолучитьОбласть("КолонкаВалюта|СтрокаИтог");
	
	Для Каждого ТекОписаниеВалюты Из ТаблицаВалют Цикл
		
		ОбластьПоМестамХраненияИтог.Параметры.СуммаВалюта = Формат(ТекОписаниеВалюты.Итог, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Присоединить(ОбластьПоМестамХраненияИтог);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Товары

Процедура Подключаемый_СекцияТовары(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетТовары = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Товары");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура.КатегорияНоменклатуры КАК КатегорияТовара,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.КоличествоОстаток КАК Количество,
	|	ЗапасыОстатки.СуммаОстаток КАК Себестоимость
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&ПериодОтчета,
	|			Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Организация = &Организация
	|				И &Фильтры) КАК ЗапасыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент,
	|	ЦеныНоменклатурыСрезПоследних.ВключаяХарактеристики
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ПериодОтчета,
	|			ВидЦен = &ВидЦенПродажи
	|				И Актуальность = ИСТИНА
	|				И &Фильтры) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&ПериодОтчета,
	|			Актуальность = ИСТИНА
	|				И &Фильтры) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	Запрос.УстановитьПараметр("ПериодОтчета", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидЦенПродажи", НастройкаСекции.ВидЦенПродажи);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить(КолонкаКатегорияТовара(), Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры"));
	СводнаяТаблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СводнаяТаблица.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СводнаяТаблица.Колонки.Добавить("Закупочная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СводнаяТаблица.Колонки.Добавить("Продажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	СводнаяТаблица.Индексы.Добавить(КолонкаКатегорияТовара());
	
	ПродажнаяОценка = РезультатыЗапроса[1].Выгрузить();
	ПродажнаяОценка.Индексы.Добавить("Номенклатура,Характеристика,ЕдиницаИзмерения");
	
	ЗакупочнаяОценка = РезультатыЗапроса[2].Выгрузить();
	ЗакупочнаяОценка.Индексы.Добавить("Номенклатура,Характеристика,ЕдиницаИзмерения");
	
	ВыборкаСебестоимость = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаСебестоимость.Следующий() Цикл
		
		ТекСтрокаКатегория = СводнаяТаблица.Найти(ВыборкаСебестоимость[КолонкаКатегорияТовара()], КолонкаКатегорияТовара());
		Если ТекСтрокаКатегория = Неопределено Тогда
			ТекСтрокаКатегория = СводнаяТаблица.Добавить();
			ТекСтрокаКатегория[КолонкаКатегорияТовара()] = ВыборкаСебестоимость[КолонкаКатегорияТовара()];
		КонецЕсли;
		
		ТекСтрокаКатегория.Количество = ТекСтрокаКатегория.Количество + ВыборкаСебестоимость.Количество;
		ТекСтрокаКатегория.Себестоимость = ТекСтрокаКатегория.Себестоимость + ВыборкаСебестоимость.Себестоимость;
		
		ТекСтрокаКатегория.Закупочная = ТекСтрокаКатегория.Закупочная + ОценкаНоменклатурнойПозиции(ВыборкаСебестоимость, ЗакупочнаяОценка);
		ТекСтрокаКатегория.Продажная = ТекСтрокаКатегория.Продажная + ОценкаНоменклатурнойПозиции(ВыборкаСебестоимость, ПродажнаяОценка);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(МакетТовары.ПолучитьОбласть("СтрокаШапка"));
	
	ОбластьСтрокаКатегорияТовара = МакетТовары.ПолучитьОбласть("СтрокаКатегорияТовара");
	
	Для Каждого ТекСтрокаКатегория Из СводнаяТаблица Цикл
		
		ОбластьСтрокаКатегорияТовара.Параметры.КатегорияТовара = ТекСтрокаКатегория[КолонкаКатегорияТовара()];
		ОбластьСтрокаКатегорияТовара.Параметры.Количество = Формат(ТекСтрокаКатегория.Количество, "ЧЦ=15; ЧДЦ=3; ЧН=0,000");
		ОбластьСтрокаКатегорияТовара.Параметры.Себестоимость = Формат(ТекСтрокаКатегория.Себестоимость, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
		ОбластьСтрокаКатегорияТовара.Параметры.Закупочная = Формат(ТекСтрокаКатегория.Закупочная, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
		ОбластьСтрокаКатегорияТовара.Параметры.Продажная = Формат(ТекСтрокаКатегория.Продажная, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаКатегорияТовара);
		
	КонецЦикла;
	
	ОбластьСтрокаИтог = МакетТовары.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.КоличествоИтог = Формат(СводнаяТаблица.Итог("Количество"),  "ЧЦ=15; ЧДЦ=3; ЧН=0,000");
	ОбластьСтрокаИтог.Параметры.СебестоимостьИтог = Формат(СводнаяТаблица.Итог("Себестоимость"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
	ОбластьСтрокаИтог.Параметры.ЗакупочнаяИтог = Формат(СводнаяТаблица.Итог("Закупочная"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
	ОбластьСтрокаИтог.Параметры.ПродажнаяИтог = Формат(СводнаяТаблица.Итог("Продажная"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
	
	ТабличныйДокумент.Вывести(ОбластьСтрокаИтог);
	
КонецПроцедуры

Функция ОценкаНоменклатурнойПозиции(ВыборкаСебестоимость, ТабОценка)
	
	Если Не ЗначениеЗаполнено(ТабОценка) Тогда
		Возврат ВыборкаСебестоимость.Себестоимость;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ВыборкаСебестоимость.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ВыборкаСебестоимость.Характеристика);
	ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ВыборкаСебестоимость.ЕдиницаИзмерения);
	
	НайденныеСтроки = ТабОценка.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат ВыборкаСебестоимость.Количество * НайденныеСтроки[0].Цена;
	КонецЕсли;
	
	ПараметрыОтбора.Удалить("ЕдиницаИзмерения");
	
	Для Каждого ТекСтрока Из ТабОценка.НайтиСтроки(ПараметрыОтбора) Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмеренияКоэффициент) Тогда
			Возврат ВыборкаСебестоимость.Количество * ТекСтрока.Цена * ТекСтрока.ЕдиницаИзмеренияКоэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтбора.Удалить("Характеристика");
	
	Если ТабОценка.Колонки.Найти("ВключаяХарактеристики") <> Неопределено Тогда
		ПараметрыОтбора.Вставить("ВключаяХарактеристики", Истина);
	КонецЕсли;
	
	НайденныеСтроки = ТабОценка.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат ВыборкаСебестоимость.Количество * НайденныеСтроки[0].Цена;
	КонецЕсли;
	
	Возврат ВыборкаСебестоимость.Себестоимость;
	
КонецФункции

Процедура Подключаемый_СекцияТоварыНаСобственныхСкладах(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетТовары = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("ТоварыПоМестамХранения");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗапасыНаСкладахОстатки.Номенклатура.КатегорияНоменклатуры КАК КатегорияТовара,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК МестоХранения,
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			&ПериодОтчета,
	|			Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Организация = &Организация
	|				И &Фильтры) КАК ЗапасыНаСкладахОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	МестоХранения,
	|	КатегорияТовара");
	Запрос.УстановитьПараметр("ПериодОтчета", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	КолонкиПоМестамХранения = Новый Соответствие;
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить(КолонкаКатегорияТовара(), Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры"));
	СводнаяТаблица.Индексы.Добавить(КолонкаКатегорияТовара());
	
	ОбластьШапка = МакетТовары.ПолучитьОбласть("КолонкаМестоХранения|СтрокаШапка");
	ОбластьКатегория = МакетТовары.ПолучитьОбласть("КолонкаЗаголовок|СтрокаКатегорияТовара");
	ОбластьСтрока = МакетТовары.ПолучитьОбласть("КолонкаМестоХранения|СтрокаКатегорияТовара");
	
	ИндексКолонки = 0;
	ВыборкаМестоХранения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМестоХранения.Следующий() Цикл
		
		ИндексКолонки = ИндексКолонки + 1;
		КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения] = СтрШаблон("Колонка%1", Формат(ИндексКолонки, "ЧГ="));
		
		СводнаяТаблица.Колонки.Добавить(КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения],
		Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
		
	КонецЦикла;
	
	ВыборкаМестоХранения.Сбросить();
	Пока ВыборкаМестоХранения.Следующий() Цикл
		ВыборкаКатегорияТовара = ВыборкаМестоХранения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКатегорияТовара.Следующий() Цикл
			ТекСтрока = СводнаяТаблица.Найти(ВыборкаКатегорияТовара.КатегорияТовара, КолонкаКатегорияТовара());
			Если ТекСтрока = Неопределено Тогда
				ТекСтрока = СводнаяТаблица.Добавить();
				ТекСтрока[КолонкаКатегорияТовара()] = ВыборкаКатегорияТовара[КолонкаКатегорияТовара()];
			КонецЕсли;
			ТекСтрока[КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения]] = ТекСтрока[КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения]] + ВыборкаКатегорияТовара.КоличествоОстаток;
		КонецЦикла;
	КонецЦикла;
	
	МестаХраненияПоКолонкам = ИнвертированноеСоответствие(КолонкиПоМестамХранения);
	ИндексКолонки = 1;
	
	ВывестиТоварыПоМестамХраненияРекурсивно(
	ТабличныйДокумент,
	МакетТовары,
	ОбластьШапка,
	ОбластьКатегория,
	ОбластьСтрока,
	СводнаяТаблица,
	КолонкиПоМестамХранения,
	МестаХраненияПоКолонкам,
	ИндексКолонки);
	
КонецПроцедуры

Процедура Подключаемый_СекцияТоварыУРеализаторов(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетТовары = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("ТоварыПоМестамХранения");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗапасыПереданныеОстатки.Номенклатура.КатегорияНоменклатуры КАК КатегорияТовара,
	|	ЗапасыПереданныеОстатки.Контрагент КАК МестоХранения,
	|	ЗапасыПереданныеОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗапасыПереданные.Остатки(
	|			&ПериодОтчета,
	|			Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Организация = &Организация
	|				И &Фильтры) КАК ЗапасыПереданныеОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	МестоХранения,
	|	КатегорияТовара");
	Запрос.УстановитьПараметр("ПериодОтчета", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	КолонкиПоМестамХранения = Новый Соответствие;
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить(КолонкаКатегорияТовара(), Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры"));
	СводнаяТаблица.Индексы.Добавить(КолонкаКатегорияТовара());
	
	ОбластьШапка = МакетТовары.ПолучитьОбласть("КолонкаМестоХранения|СтрокаШапка");
	ОбластьКатегория = МакетТовары.ПолучитьОбласть("КолонкаЗаголовок|СтрокаКатегорияТовара");
	ОбластьСтрока = МакетТовары.ПолучитьОбласть("КолонкаМестоХранения|СтрокаКатегорияТовара");
	
	ИндексКолонки = 0;
	ВыборкаМестоХранения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМестоХранения.Следующий() Цикл
		
		ИндексКолонки = ИндексКолонки + 1;
		КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения] = СтрШаблон("Колонка%1", Формат(ИндексКолонки, "ЧГ="));
		
		СводнаяТаблица.Колонки.Добавить(КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения],
		Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
		
	КонецЦикла;
	
	ВыборкаМестоХранения.Сбросить();
	Пока ВыборкаМестоХранения.Следующий() Цикл
		ВыборкаКатегорияТовара = ВыборкаМестоХранения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКатегорияТовара.Следующий() Цикл
			ТекСтрока = СводнаяТаблица.Найти(ВыборкаКатегорияТовара.КатегорияТовара, КолонкаКатегорияТовара());
			Если ТекСтрока = Неопределено Тогда
				ТекСтрока = СводнаяТаблица.Добавить();
				ТекСтрока[КолонкаКатегорияТовара()] = ВыборкаКатегорияТовара[КолонкаКатегорияТовара()];
			КонецЕсли;
			ТекСтрока[КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения]] = ТекСтрока[КолонкиПоМестамХранения[ВыборкаМестоХранения.МестоХранения]] + ВыборкаКатегорияТовара.КоличествоОстаток;
		КонецЦикла;
	КонецЦикла;
	
	МестаХраненияПоКолонкам = ИнвертированноеСоответствие(КолонкиПоМестамХранения);
	ИндексКолонки = 1;
	
	ВывестиТоварыПоМестамХраненияРекурсивно(
	ТабличныйДокумент,
	МакетТовары,
	ОбластьШапка,
	ОбластьКатегория,
	ОбластьСтрока,
	СводнаяТаблица,
	КолонкиПоМестамХранения,
	МестаХраненияПоКолонкам,
	ИндексКолонки);
	
КонецПроцедуры

Процедура ВывестиТоварыПоМестамХраненияРекурсивно(ТабличныйДокумент, МакетТовары, ОбластьШапка, ОбластьКатегория, ОбластьСтрока, СводнаяТаблица, КолонкиПоМестамХранения, МестаХраненияПоКолонкам, ИндексКолонки)
	
	Если ИндексКолонки >= СводнаяТаблица.Колонки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетТовары.ПолучитьОбласть("КолонкаЗаголовок|СтрокаШапка"));
	
	Для ТекИндексКолонки = ИндексКолонки По ИндексКолонки + КоличествоКолонокНаСтранице() - 1 Цикл
		
		Если ТекИндексКолонки >= СводнаяТаблица.Колонки.Количество()  Тогда
			Прервать;
		КонецЕсли;
		
		ТекКолонка = СводнаяТаблица.Колонки[ТекИндексКолонки];
		ОбластьШапка.Параметры.МестоХранения = МестаХраненияПоКолонкам[ТекКолонка.Имя];
		ТабличныйДокумент.Присоединить(ОбластьШапка);
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СводнаяТаблица Цикл
		
		ОбластьКатегория.Параметры.КатегорияТовара = ТекСтрока[КолонкаКатегорияТовара()];
		ТабличныйДокумент.Вывести(ОбластьКатегория);
		
		Для ТекИндексКолонки = ИндексКолонки По ИндексКолонки + КоличествоКолонокНаСтранице() - 1 Цикл
			
			Если ТекИндексКолонки >= СводнаяТаблица.Колонки.Количество()  Тогда
				Прервать;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Остаток = ТекСтрока[ТекИндексКолонки];
			ТабличныйДокумент.Присоединить(ОбластьСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(МакетТовары.ПолучитьОбласть("КолонкаЗаголовок|СтрокаОтступ"));
	ОбластьОступ = МакетТовары.ПолучитьОбласть("КолонкаМестоХранения|СтрокаОтступ");
	
	Для ТекИндексКолонки = ИндексКолонки По ИндексКолонки + КоличествоКолонокНаСтранице() - 1 Цикл
		
		Если ТекИндексКолонки >= СводнаяТаблица.Колонки.Количество()  Тогда
			Прервать;
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьОступ);
		
	КонецЦикла;
	
	ВывестиТоварыПоМестамХраненияРекурсивно(
	ТабличныйДокумент,
	МакетТовары,
	ОбластьШапка,
	ОбластьКатегория,
	ОбластьСтрока,
	СводнаяТаблица,
	КолонкиПоМестамХранения,
	МестаХраненияПоКолонкам,
	ИндексКолонки + КоличествоКолонокНаСтранице());
	
КонецПроцедуры

Функция ИнвертированноеСоответствие(ПараметрСоответствие)
	
	Результат = Новый Соответствие;
	Для Каждого КлючИЗначение ИЗ ПараметрСоответствие Цикл
		Результат[КлючИЗначение.Значение] = КлючИЗначение.Ключ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КолонкаКатегорияТовара()
	
	Возврат "КатегорияТовара";
	
КонецФункции

Функция КоличествоКолонокНаСтранице()
	
	Возврат 5;
	
КонецФункции

#КонецОбласти

#Область Дебиторка

Процедура Подключаемый_СекцияДебиторкаДолгиПокупателей(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетДолгиПокупателей = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("ДолгиПокупателей");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Контрагент,
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК ДЗадолженность,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПокупателямиОстатки.Документ) = ТИП(Документ.ЗаказПокупателя)
	|				И РасчетыСПокупателямиОстатки.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА РасчетыСПокупателямиОстатки.Документ.Финиш
	|		ИНАЧЕ РасчетыСПокупателямиОстатки.Документ.Дата
	|	КОНЕЦ КАК ДатаРасчетногоДокумента,
	|	РасчетыСПокупателямиОстатки.Договор.СрокОплатыПокупателя КАК СрокОплатыОтПокупателя,
	|	РасчетыСПокупателямиОстатки.СуммаОстаток
	|ПОМЕСТИТЬ Вт_РасчетыСПокупателями
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И &Фильтры) КАК РасчетыСПокупателямиОстатки
	|ГДЕ
	|	РасчетыСПокупателямиОстатки.Документ <> НЕОПРЕДЕЛЕНО
	|	И РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|	И РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|	И РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|	И РАЗНОСТЬДАТ(РасчетыСПокупателямиОстатки.Документ.Дата, &Период, ДЕНЬ) >= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Контрагент,
	|	СУММА(РасчетыСПокупателями.СуммаОстаток) КАК ДЗадолженность,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПокупателями.СрокОплатыОтПокупателя > 0
	|					И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > РасчетыСПокупателями.СрокОплатыОтПокупателя
	|				ТОГДА РасчетыСПокупателями.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДПросроченнаяЗадолженность,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал1
	|					И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) >= 0
	|				ТОГДА РасчетыСПокупателями.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д1,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал2
	|					И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал1
	|				ТОГДА РасчетыСПокупателями.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д2,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал3
	|					И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал2
	|				ТОГДА РасчетыСПокупателями.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д3,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал4
	|					И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал3
	|				ТОГДА РасчетыСПокупателями.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д4,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал4
	|				ТОГДА РасчетыСПокупателями.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д5,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПокупателями.СрокОплатыОтПокупателя > 0
	|					И РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > РасчетыСПокупателями.СрокОплатыОтПокупателя
	|				ТОГДА РАЗНОСТЬДАТ(РасчетыСПокупателями.ДатаРасчетногоДокумента, &Период, ДЕНЬ) - РасчетыСПокупателями.СрокОплатыОтПокупателя
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СрокПросрочки
	|ИЗ
	|	Вт_РасчетыСПокупателями КАК РасчетыСПокупателями
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДЗадолженность УБЫВ");
	Запрос.УстановитьПараметр("Период", КонецДня(ПериодОтчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Интервал1", 7);
	Запрос.УстановитьПараметр("Интервал2", 14);
	Запрос.УстановитьПараметр("Интервал3", 30);
	Запрос.УстановитьПараметр("Интервал4", 60);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетДолгиПокупателей.ПолучитьОбласть("СтрокаШапка"));
	
	ОбластьСтрокаКонтрагент = МакетДолгиПокупателей.ПолучитьОбласть("СтрокаКонтрагент");
	
	ДЗадолженностьИтог = 0;
	Д1Итог = 0;
	Д2Итог = 0;
	Д3Итог = 0;
	Д4Итог = 0;
	Д5Итог = 0;
	
	ДЗадолженностьОстальные = 0;
	Д1Остальные = 0;
	Д2Остальные = 0;
	Д3Остальные = 0;
	Д4Остальные = 0;
	Д5Остальные = 0;
	Счетчик = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик <= 10 Тогда
			ОбластьСтрокаКонтрагент.Параметры.Контрагент = Выборка.Контрагент;
			ОбластьСтрокаКонтрагент.Параметры.ДЗадолженность = Формат(Выборка.ДЗадолженность, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д1 = Формат(Выборка.Д1, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д2 = Формат(Выборка.Д2, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д3 = Формат(Выборка.Д3, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д4 = Формат(Выборка.Д4, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д5 = Формат(Выборка.Д5, "ЧЦ=15; ЧДЦ=2");
			ТабличныйДокумент.Вывести(ОбластьСтрокаКонтрагент);
		Иначе
			ДЗадолженностьОстальные = ДЗадолженностьОстальные + Выборка.ДЗадолженность;
			Д1Остальные = Д1Остальные + Выборка.Д1;
			Д2Остальные = Д2Остальные + Выборка.Д2;
			Д3Остальные = Д3Остальные + Выборка.Д3;
			Д4Остальные = Д4Остальные + Выборка.Д4;
			Д5Остальные = Д5Остальные + Выборка.Д5;
		КонецЕсли;
		
		ДЗадолженностьИтог = ДЗадолженностьИтог + Выборка.ДЗадолженность;
		Д1Итог = Д1Итог + Выборка.Д1;
		Д2Итог = Д2Итог + Выборка.Д2;
		Д3Итог = Д3Итог + Выборка.Д3;
		Д4Итог = Д4Итог + Выборка.Д4;
		Д5Итог = Д5Итог + Выборка.Д5;
		
	КонецЦикла;
	
	Если ДЗадолженностьОстальные <> 0 Тогда
		ТабличныйДокумент.Вывести(МакетДолгиПокупателей.ПолучитьОбласть("СтрокаОтступ"));
		ОбластьСтрокаКонтрагент.Параметры.Контрагент = СтрШаблон(НСтр("ru = 'Остальные (%1)'"), Счетчик - 10);
		ОбластьСтрокаКонтрагент.Параметры.ДЗадолженность = Формат(ДЗадолженностьОстальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д1 = Формат(Д1Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д2 = Формат(Д2Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д3 = Формат(Д3Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д4 = Формат(Д4Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д5 = Формат(Д5Остальные, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьСтрокаКонтрагент);
	КонецЕсли;
	
	ОбластьСтрокаИтог = МакетДолгиПокупателей.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ДЗадолженностьИтог = Формат(ДЗадолженностьИтог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д1Итог = Формат(Д1Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д2Итог = Формат(Д2Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д3Итог = Формат(Д3Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д4Итог = Формат(Д4Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д5Итог = Формат(Д5Итог, "ЧЦ=15; ЧДЦ=2");
	
	ТабличныйДокумент.Вывести(ОбластьСтрокаИтог);
	
КонецПроцедуры

Процедура Подключаемый_СекцияДебиторкаАвансыПоставщикам(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетАвансыПоставщикам = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("АвансыПоставщикам");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|	-РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Долг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			&ПериодОтчета,
	|			ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				И Организация = &Организация
	|				И &Фильтры) КАК РасчетыСПоставщикамиОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток");
	Запрос.УстановитьПараметр("ПериодОтчета", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетАвансыПоставщикам.ПолучитьОбласть("СтрокаШапка"));
	
	ОбластьСтрокаКонтрагент = МакетАвансыПоставщикам.ПолучитьОбласть("СтрокаКонтрагент");
	
	Итог = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбластьСтрокаКонтрагент.Параметры.Контрагент = Выборка.Контрагент;
		ОбластьСтрокаКонтрагент.Параметры.Долг = Формат(Выборка.Долг, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьСтрокаКонтрагент);
		Итог = Итог + Выборка.Долг;
	КонецЦикла;
	
	ОбластьСтрокаИтог = МакетАвансыПоставщикам.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.Итог = Формат(Итог, "ЧЦ=15; ЧДЦ=2");
	
	ТабличныйДокумент.Вывести(ОбластьСтрокаИтог);
	
КонецПроцедуры

#КонецОбласти

#Область Кредиторка

Процедура Подключаемый_СекцияКредиторкаДолгиПоставщикам(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетДолгиПоставщикам = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("ДолгиПоставщикам");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Контрагент,
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК ДЗадолженность,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДатаРасчетногоДокумента,
	|	РасчетыСПоставщикамиОстатки.Договор.СрокОплатыПокупателя КАК СрокОплатыОтПокупателя,
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток
	|ПОМЕСТИТЬ Вт_РасчетыСПоставщиками
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И &Фильтры) КАК РасчетыСПоставщикамиОстатки
	|ГДЕ
	|	РасчетыСПоставщикамиОстатки.Документ <> НЕОПРЕДЕЛЕНО
	|	И РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	|	И РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|	И РасчетыСПоставщикамиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|	И РАЗНОСТЬДАТ(РасчетыСПоставщикамиОстатки.Документ.Дата, &Период, ДЕНЬ) >= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Контрагент,
	|	СУММА(РасчетыСПоставщиками.СуммаОстаток) КАК ДЗадолженность,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщиками.СрокОплатыОтПокупателя > 0
	|					И РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > РасчетыСПоставщиками.СрокОплатыОтПокупателя
	|				ТОГДА РасчетыСПоставщиками.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДПросроченнаяЗадолженность,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал1
	|					И РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) >= 0
	|				ТОГДА РасчетыСПоставщиками.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д1,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал2
	|					И РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал1
	|				ТОГДА РасчетыСПоставщиками.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д2,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал3
	|					И РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал2
	|				ТОГДА РасчетыСПоставщиками.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д3,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) <= &Интервал4
	|					И РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал3
	|				ТОГДА РасчетыСПоставщиками.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д4,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > &Интервал4
	|				ТОГДА РасчетыСПоставщиками.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Д5,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщиками.СрокОплатыОтПокупателя > 0
	|					И РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) > РасчетыСПоставщиками.СрокОплатыОтПокупателя
	|				ТОГДА РАЗНОСТЬДАТ(РасчетыСПоставщиками.ДатаРасчетногоДокумента, &Период, ДЕНЬ) - РасчетыСПоставщиками.СрокОплатыОтПокупателя
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СрокПросрочки
	|ИЗ
	|	Вт_РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДЗадолженность УБЫВ");
	Запрос.УстановитьПараметр("Период", КонецДня(ПериодОтчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Интервал1", 7);
	Запрос.УстановитьПараметр("Интервал2", 14);
	Запрос.УстановитьПараметр("Интервал3", 30);
	Запрос.УстановитьПараметр("Интервал4", 60);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетДолгиПоставщикам.ПолучитьОбласть("СтрокаШапка"));
	
	ОбластьСтрокаКонтрагент = МакетДолгиПоставщикам.ПолучитьОбласть("СтрокаКонтрагент");
	
	ДЗадолженностьИтог = 0;
	Д1Итог = 0;
	Д2Итог = 0;
	Д3Итог = 0;
	Д4Итог = 0;
	Д5Итог = 0;
	
	ДЗадолженностьОстальные = 0;
	Д1Остальные = 0;
	Д2Остальные = 0;
	Д3Остальные = 0;
	Д4Остальные = 0;
	Д5Остальные = 0;
	Счетчик = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик <= 10 Тогда
			ОбластьСтрокаКонтрагент.Параметры.Контрагент = Выборка.Контрагент;
			ОбластьСтрокаКонтрагент.Параметры.ДЗадолженность = Формат(Выборка.ДЗадолженность, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д1 = Формат(Выборка.Д1, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д2 = Формат(Выборка.Д2, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д3 = Формат(Выборка.Д3, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д4 = Формат(Выборка.Д4, "ЧЦ=15; ЧДЦ=2");
			ОбластьСтрокаКонтрагент.Параметры.Д5 = Формат(Выборка.Д5, "ЧЦ=15; ЧДЦ=2");
			ТабличныйДокумент.Вывести(ОбластьСтрокаКонтрагент);
		Иначе
			ДЗадолженностьОстальные = ДЗадолженностьОстальные + Выборка.ДЗадолженность;
			Д1Остальные = Д1Остальные + Выборка.Д1;
			Д2Остальные = Д2Остальные + Выборка.Д2;
			Д3Остальные = Д3Остальные + Выборка.Д3;
			Д4Остальные = Д4Остальные + Выборка.Д4;
			Д5Остальные = Д5Остальные + Выборка.Д5;
		КонецЕсли;
		
		ДЗадолженностьИтог = ДЗадолженностьИтог + Выборка.ДЗадолженность;
		Д1Итог = Д1Итог + Выборка.Д1;
		Д2Итог = Д2Итог + Выборка.Д2;
		Д3Итог = Д3Итог + Выборка.Д3;
		Д4Итог = Д4Итог + Выборка.Д4;
		Д5Итог = Д5Итог + Выборка.Д5;
		
	КонецЦикла;
	
	Если ДЗадолженностьОстальные <> 0 Тогда
		ТабличныйДокумент.Вывести(МакетДолгиПоставщикам.ПолучитьОбласть("СтрокаОтступ"));
		ОбластьСтрокаКонтрагент.Параметры.Контрагент = СтрШаблон(НСтр("ru = 'Остальные (%1)'"), Счетчик - 10);
		ОбластьСтрокаКонтрагент.Параметры.ДЗадолженность = Формат(ДЗадолженностьОстальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д1 = Формат(Д1Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д2 = Формат(Д2Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д3 = Формат(Д3Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д4 = Формат(Д4Остальные, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаКонтрагент.Параметры.Д5 = Формат(Д5Остальные, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьСтрокаКонтрагент);
	КонецЕсли;
	
	ОбластьСтрокаИтог = МакетДолгиПоставщикам.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ДЗадолженностьИтог = Формат(ДЗадолженностьИтог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д1Итог = Формат(Д1Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д2Итог = Формат(Д2Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д3Итог = Формат(Д3Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д4Итог = Формат(Д4Итог, "ЧЦ=15; ЧДЦ=2");
	ОбластьСтрокаИтог.Параметры.Д5Итог = Формат(Д5Итог, "ЧЦ=15; ЧДЦ=2");
	
	ТабличныйДокумент.Вывести(ОбластьСтрокаИтог);
	
КонецПроцедуры

Процедура Подключаемый_СекцияКредиторкаАвансыОтПокупателей(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетАвансыОтПокупателей = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("АвансыОтПокупателей");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	-РасчетыСПокупателямиОстатки.СуммаОстаток КАК Долг
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&ПериодОтчета,
	|			ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				И Организация = &Организация
	|				И &Фильтры) КАК РасчетыСПокупателямиОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Долг УБЫВ");
	Запрос.УстановитьПараметр("ПериодОтчета", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетАвансыОтПокупателей.ПолучитьОбласть("СтрокаШапка"));
	
	ОбластьСтрокаКонтрагент = МакетАвансыОтПокупателей.ПолучитьОбласть("СтрокаКонтрагент");
	
	Итог = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбластьСтрокаКонтрагент.Параметры.Контрагент = Выборка.Контрагент;
		ОбластьСтрокаКонтрагент.Параметры.Долг = Формат(Выборка.Долг, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьСтрокаКонтрагент);
		Итог = Итог + Выборка.Долг;
	КонецЦикла;
	
	ОбластьСтрокаИтог = МакетАвансыОтПокупателей.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.Итог = Формат(Итог, "ЧЦ=15; ЧДЦ=2");
	
	ТабличныйДокумент.Вывести(ОбластьСтрокаИтог);
	
КонецПроцедуры

#КонецОбласти

#Область Продажи

Процедура Подключаемый_СекцияПродажиВыручка(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетВыручка = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Выручка");
	
	НачПериода = НачалоГода(НачалоГода(ПериодОтчета) - 1);
	КонПериода = КонецГода(ПериодОтчета);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПродажиОбороты.Период,
	|	ПродажиОбороты.СуммаОборот КАК Выручка
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Месяц,
	|			Организация = &Организация
	|				И &Фильтры) КАК ПродажиОбороты");
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ОбластьДиаграмма = МакетВыручка.ПолучитьОбласть("СтрокаДиаграмма");
	
	ДиаграммаОбъект = ОбластьДиаграмма.Рисунки.Диаграмма.Объект;
	УстановитьЦветТекстаДиаграммы(ДиаграммаОбъект);
	УстановитьСериюГод(ДиаграммаОбъект, НачПериода);
	УстановитьСериюГод(ДиаграммаОбъект, КонПериода);
	
	Для Индекс = 0 По 11 Цикл
		ПредставлениеМесяца = Формат(ДобавитьМесяц(НачПериода, Индекс), "ДФ=MMMM");
		Точка = ДиаграммаОбъект.УстановитьТочку(ПредставлениеМесяца);
		Точка.Текст = ПредставлениеМесяца;
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СерияДиаграммы = ДиаграммаОбъект.УстановитьСерию(Формат(Выборка.Период, "ДФ=yyyy"));
		ТочкаДиаграммы = ДиаграммаОбъект.УстановитьТочку(Формат(Выборка.Период, "ДФ=MMMM"));
		ДиаграммаОбъект.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, Выборка.Выручка);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьДиаграмма);
	
КонецПроцедуры

Процедура Подключаемый_СекцияПродажиКоличество(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетКоличество = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Количество");
	
	НачПериода = НачалоГода(НачалоГода(ПериодОтчета) - 1);
	КонПериода = КонецГода(ПериодОтчета);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПродажиОбороты.Период,
	|	ПродажиОбороты.КоличествоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Месяц,
	|			Организация = &Организация
	|				И &Фильтры) КАК ПродажиОбороты");
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ОбластьДиаграмма = МакетКоличество.ПолучитьОбласть("СтрокаДиаграмма");
	
	ДиаграммаОбъект = ОбластьДиаграмма.Рисунки.Диаграмма.Объект;
	УстановитьЦветТекстаДиаграммы(ДиаграммаОбъект);
	УстановитьСериюГод(ДиаграммаОбъект, НачПериода);
	УстановитьСериюГод(ДиаграммаОбъект, КонПериода);
	
	Для Индекс = 0 По 11 Цикл
		ПредставлениеМесяца = Формат(ДобавитьМесяц(НачПериода, Индекс), "ДФ=MMMM");
		Точка = ДиаграммаОбъект.УстановитьТочку(ПредставлениеМесяца);
		Точка.Текст = ПредставлениеМесяца;
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СерияДиаграммы = ДиаграммаОбъект.УстановитьСерию(Формат(Выборка.Период, "ДФ=yyyy"));
		ТочкаДиаграммы = ДиаграммаОбъект.УстановитьТочку(Формат(Выборка.Период, "ДФ=MMMM"));
		ДиаграммаОбъект.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, Выборка.Количество);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьДиаграмма);
	
КонецПроцедуры

Процедура УстановитьЦветТекстаДиаграммы(Диаграмма)
	
	Диаграмма.ЦветТекстаПодписей = ЦветаСтиля.ЦветТекстаОтчетаСостояниеКомпании;
	Диаграмма.ОбластьПостроения.ЦветТекста = ЦветаСтиля.ЦветТекстаОтчетаСостояниеКомпании;
	Диаграмма.ОбластьЛегенды.ЦветТекста = ЦветаСтиля.ЦветТекстаОтчетаСостояниеКомпании;
	
КонецПроцедуры

Процедура УстановитьСериюГод(Диаграмма, Период)
	
	ПредставлениеПериода = Формат(Период, "ДФ=yyyy");
	Серия = Диаграмма.УстановитьСерию(ПредставлениеПериода);
	Серия.Текст = ПредставлениеПериода;
	
КонецПроцедуры

Процедура Подключаемый_СекцияПродажиДинамика(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетДинамика = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Динамика");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПродажиСНачалаГода.Номенклатура.КатегорияНоменклатуры КАК КатегорияТовара,
	|	СУММА(ПродажиСНачалаГода.СуммаОборот) КАК ВыручкаСНачалаГода,
	|	СУММА(ПродажиСНачалаГода.КоличествоОборот) КАК КоличествоСНачалаГода,
	|	СУММА(ЕСТЬNULL(ПродажиСНачалаПрошлогоГода.КоличествоОборот, 0)) КАК КоличествоСНачалаПрошлогоГода,
	|	СУММА(ЕСТЬNULL(ПродажиЗа30Дней.СуммаОборот, 0)) КАК ВыручкаЗа30Дней,
	|	СУММА(ЕСТЬNULL(ПродажиЗа30Дней.КоличествоОборот, 0)) КАК КоличествоЗа30Дней,
	|	СУММА(ЕСТЬNULL(ПродажиЗаПрошлые30Дней.КоличествоОборот, 0)) КАК КоличествоЗаПрошлые30Дней,
	|	СУММА(ЕСТЬNULL(ПродажиСНачалаМесяца.СуммаОборот, 0)) КАК ВыручкаСНачалаМесяца,
	|	СУММА(ЕСТЬNULL(ПродажиСНачалаМесяца.КоличествоОборот, 0)) КАК КоличествоСНачалаМесяца,
	|	СУММА(ЕСТЬNULL(ПродажиСНачалаПрошлогоМесяца.КоличествоОборот, 0)) КАК КоличествоСНачалаПрошлогоМесяца,
	|	СУММА(ЕСТЬNULL(ПродажиСНачалаНедели.СуммаОборот, 0)) КАК ВыручкаСНачалаНедели,
	|	СУММА(ЕСТЬNULL(ПродажиСНачалаНедели.КоличествоОборот, 0)) КАК КоличествоСНачалаНедели,
	|	СУММА(ЕСТЬNULL(ПродажиСНачалаПрошлойНедели.КоличествоОборот, 0)) КАК КоличествоСНачалаПрошлойНедели
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&СНачалаГода,
	|			&Период,
	|			,
	|			Организация = &Организация
	|				И &Фильтры) КАК ПродажиСНачалаГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&СНачалаПрошлогоГода,
	|				&ПериодПрошлогоГода,
	|				,
	|				Организация = &Организация
	|					И &Фильтры) КАК ПродажиСНачалаПрошлогоГода
	|		ПО ПродажиСНачалаГода.Номенклатура = ПродажиСНачалаПрошлогоГода.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&За30Дней,
	|				&Период,
	|				,
	|				Организация = &Организация
	|					И &Фильтры) КАК ПродажиЗа30Дней
	|		ПО ПродажиСНачалаГода.Номенклатура = ПродажиЗа30Дней.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&За60Дней,
	|				&ПериодЗаПрошлые30Дней,
	|				,
	|				Организация = &Организация
	|					И &Фильтры) КАК ПродажиЗаПрошлые30Дней
	|		ПО ПродажиСНачалаГода.Номенклатура = ПродажиЗаПрошлые30Дней.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&СНачалаМесяца,
	|				&Период,
	|				,
	|				Организация = &Организация
	|					И &Фильтры) КАК ПродажиСНачалаМесяца
	|		ПО ПродажиСНачалаГода.Номенклатура = ПродажиСНачалаМесяца.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&СНачалаПрошлогоМесяца,
	|				&ПериодПрошлогоМесяца,
	|				,
	|				Организация = &Организация
	|					И &Фильтры) КАК ПродажиСНачалаПрошлогоМесяца
	|		ПО ПродажиСНачалаГода.Номенклатура = ПродажиСНачалаПрошлогоМесяца.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&СНачалаНедели,
	|				&Период,
	|				,
	|				Организация = &Организация
	|					И &Фильтры) КАК ПродажиСНачалаНедели
	|		ПО ПродажиСНачалаГода.Номенклатура = ПродажиСНачалаНедели.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&СНачалаПрошлойНедели,
	|				&ПериодПрошлойНедели,
	|				,
	|				Организация = &Организация
	|					И &Фильтры) КАК ПродажиСНачалаПрошлойНедели
	|		ПО ПродажиСНачалаГода.Номенклатура = ПродажиСНачалаПрошлойНедели.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиСНачалаГода.Номенклатура.КатегорияНоменклатуры");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СНачалаГода", НачалоГода(ПериодОтчета));
	Запрос.УстановитьПараметр("ПериодПрошлогоГода", Новый Граница(КонецДня(ДобавитьМесяц(ПериодОтчета, -12)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СНачалаПрошлогоГода", НачалоГода(ДобавитьМесяц(ПериодОтчета, -12)));
	Запрос.УстановитьПараметр("За30Дней", НачалоДня(ПериодОтчета - 29 * (60 * 60 * 24)));
	Запрос.УстановитьПараметр("За60Дней", НачалоДня(ПериодОтчета - 59 * (60 * 60 * 24)));
	Запрос.УстановитьПараметр("ПериодЗаПрошлые30Дней", Новый Граница(КонецДня(Запрос.Параметры.За30Дней), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СНачалаМесяца", НачалоМесяца(ПериодОтчета));
	Запрос.УстановитьПараметр("СНачалаПрошлогоМесяца", ДобавитьМесяц(НачалоМесяца(ПериодОтчета), -1));
	Запрос.УстановитьПараметр("ПериодПрошлогоМесяца", Новый Граница(КонецДня(ДобавитьМесяц(ПериодОтчета, -1)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СНачалаНедели", НачалоНедели(ПериодОтчета));
	Запрос.УстановитьПараметр("СНачалаПрошлойНедели", НачалоНедели(НачалоНедели(ПериодОтчета) - 1));
	Запрос.УстановитьПараметр("ПериодПрошлойНедели", Новый Граница(КонецДня(ПериодОтчета - 7 * (60 * 60 * 24)), ВидГраницы.Включая));
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетДинамика.ПолучитьОбласть("ШапкаКоличество"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрокаКоличество = МакетДинамика.ПолучитьОбласть("СтрокаКоличество");
		
		ОбластьСтрокаКоличество.Параметры.Заполнить(Выборка);
		
		УстановитьЗначокСравнения(ОбластьСтрокаКоличество, 11, Выборка.КоличествоСНачалаНедели, Выборка.КоличествоСНачалаПрошлойНедели);
		УстановитьЗначокСравнения(ОбластьСтрокаКоличество, 14, Выборка.КоличествоСНачалаМесяца, Выборка.КоличествоСНачалаПрошлогоМесяца);
		УстановитьЗначокСравнения(ОбластьСтрокаКоличество, 17, Выборка.КоличествоЗа30Дней, Выборка.КоличествоЗаПрошлые30Дней);
		УстановитьЗначокСравнения(ОбластьСтрокаКоличество, 20, Выборка.КоличествоСНачалаГода, Выборка.КоличествоСНачалаПрошлогоГода);
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаКоличество);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(МакетДинамика.ПолучитьОбласть("ШапкаВыручка"));
	
	ОбластьСтрокаВыручка = МакетДинамика.ПолучитьОбласть("СтрокаВыручка");
	
	Итоги = Новый Структура;
	Итоги.Вставить("ВыручкаСНачалаНедели", 0);
	Итоги.Вставить("ВыручкаСНачалаМесяца", 0);
	Итоги.Вставить("ВыручкаЗа30Дней", 0);
	Итоги.Вставить("ВыручкаСНачалаГода", 0);
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрокаВыручка.Параметры.КатегорияТовара = Выборка.КатегорияТовара;
		
		Для Каждого КлючИЗначение Из Итоги Цикл
			ОбластьСтрокаВыручка.Параметры[КлючИЗначение.Ключ] = Формат(Выборка[КлючИЗначение.Ключ], "ЧЦ=15; ЧДЦ=2");
			Итоги[КлючИЗначение.Ключ] = Итоги[КлючИЗначение.Ключ] + Выборка[КлючИЗначение.Ключ];
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаВыручка);
		
	КонецЦикла;
	
	ОбластьИтогВыручка = МакетДинамика.ПолучитьОбласть("ИтогВыручка");
	Для Каждого КлючИЗначение Из Итоги Цикл
		ОбластьИтогВыручка.Параметры[КлючИЗначение.Ключ] = Формат(Итоги[КлючИЗначение.Ключ], "ЧЦ=15; ЧДЦ=2");
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьИтогВыручка);
	
	ТабличныйДокумент.Вывести(МакетДинамика.ПолучитьОбласть("Подвал"));
	
КонецПроцедуры

Процедура УстановитьЗначокСравнения(Знач ОбластьТабДок, Знач Колонка, Знач Значение1, Знач Значение2)
	
	Если Значение1 > Значение2 Тогда
		Картинка = БиблиотекаКартинок.ЗначениеУвеличилось;
	ИначеЕсли Значение1 < Значение2 Тогда
		Картинка = БиблиотекаКартинок.ЗначениеУменьшилось;
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Изображение = ОбластьТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Изображение.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Изображение.Картинка = Картинка;
	Изображение.ГраницаСверху = Ложь;
	Изображение.ГраницаСнизу = Ложь;
	Изображение.ГраницаСправа = Ложь;
	Изображение.ГраницаСлева = Ложь;
	Изображение.ГраницаСлева = Ложь;
	Изображение.ЦветФона = Новый Цвет;
	Изображение.Расположить(ОбластьТабДок.Область(1, Колонка, 1, Колонка));
	
КонецПроцедуры

Процедура Подключаемый_СекцияПродажиПокупатели(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетПокупатели = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("Покупатели");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПродажиОбороты.Контрагент КАК Покупатель,
	|	ПродажиОбороты.СуммаОборот КАК Выручка,
	|	ПродажиОбороты.СебестоимостьОборот КАК Себестоимость
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Организация = &Организация
	|				И &Фильтры) КАК ПродажиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выручка УБЫВ
	|ИТОГИ
	|	СУММА(Выручка),
	|	СУММА(Себестоимость)
	|ПО
	|	ОБЩИЕ");
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ПериодОтчета - 364 * (60 * 60 * 24)));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетПокупатели.ПолучитьОбласть("СтрокаШапка"));
	
	ОбластьПокупатель = МакетПокупатели.ПолучитьОбласть("СтрокаПокупатель");
	
	ВыручкаИтог = 0;
	ВыручкаОстаток = 0;
	СебестоимостьОстаток = 0;
	ПокупателиОстаток = 0;
	
	ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтог.Следующий();
	
	ВыборкаДетали = ВыборкаИтог.Выбрать();
	
	Пока ВыборкаДетали.Следующий() Цикл
		
		Если ВыручкаИтог >= ВыборкаИтог.Выручка * 0.8 Тогда
			ВыручкаОстаток = ВыручкаОстаток + ВыборкаДетали.Выручка;
			СебестоимостьОстаток = СебестоимостьОстаток + ВыборкаДетали.Себестоимость;
			ПокупателиОстаток = ПокупателиОстаток + 1;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетали.Покупатель) Тогда
			ОбластьПокупатель.Параметры.Покупатель = ВыборкаДетали.Покупатель;
		Иначе
			ОбластьПокупатель.Параметры.Покупатель = НСтр("ru = 'Розничный покупатель'");
		КонецЕсли;
		
		ОбластьПокупатель.Параметры.Выручка = Формат(ВыборкаДетали.Выручка, "ЧЦ=15; ЧДЦ=2");
		Если ЗначениеЗаполнено(ВыборкаИтог.Выручка) Тогда
			ОбластьПокупатель.Параметры.Доля = СтрШаблон("%1%%", Формат(ВыборкаДетали.Выручка / ВыборкаИтог.Выручка * 100, "ЧЦ=5; ЧДЦ=2"));
		Иначе
			ОбластьПокупатель.Параметры.Доля = "";
		КонецЕсли;
		ОбластьПокупатель.Параметры.Прибыль = Формат(ВыборкаДетали.Выручка - ВыборкаДетали.Себестоимость, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьПокупатель);
		ВыручкаИтог = ВыручкаИтог + ВыборкаДетали.Выручка;
		
	КонецЦикла;
	
	Если ПокупателиОстаток > 0 Тогда
		ОбластьОстальные = МакетПокупатели.ПолучитьОбласть("СтрокаОстальные");
		ОбластьОстальные.Параметры.Остальные = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
		ПокупателиОстаток, НСтр("ru = 'покупатель,покупателя,покупателей'"));
		ОбластьОстальные.Параметры.Выручка = Формат(ВыручкаОстаток, "ЧЦ=15; ЧДЦ=2");
		Если ЗначениеЗаполнено(ВыборкаИтог.Выручка) Тогда
			ОбластьОстальные.Параметры.Доля = СтрШаблон("%1%%", Формат(ВыручкаОстаток / ВыборкаИтог.Выручка * 100, "ЧЦ=5; ЧДЦ=2"));
		Иначе
			ОбластьОстальные.Параметры.Доля = "";
		КонецЕсли;
		ОбластьОстальные.Параметры.Прибыль = Формат(ВыручкаОстаток - СебестоимостьОстаток, "ЧЦ=15; ЧДЦ=2");
		ТабличныйДокумент.Вывести(ОбластьОстальные);
	КонецЕсли;
	
	ОбластьИтог = МакетПокупатели.ПолучитьОбласть("СтрокаИтог");
	ОбластьИтог.Параметры.ВыручкаИтог = Формат(ВыборкаИтог.Выручка, "ЧЦ=15; ЧДЦ=2");
	ОбластьИтог.Параметры.ПрибыльИтог = Формат(ВыборкаИтог.Выручка - ВыборкаИтог.Себестоимость, "ЧЦ=15; ЧДЦ=2");
	ТабличныйДокумент.Вывести(ОбластьИтог);
	
КонецПроцедуры

Процедура Подключаемый_СекцияПродажиСамыеПродаваемыеТовары(Знач ТабличныйДокумент, Знач Организация, Знач ПериодОтчета, Знач НастройкаСекции)
	
	ВывестиЗаголовокСекции(ТабличныйДокумент, НастройкаСекции);
	
	МакетСамыеПродаваемыеТовары = Справочники.НастройкиРассылкиСостояниеКомпании.ПолучитьМакет("СамыеПродаваемыеТовары");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПродажиОбороты.КоличествоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Организация = &Организация
	|				И &Фильтры) КАК ПродажиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПродажиОбороты.КоличествоОборот УБЫВ");
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ПериодОтчета - 364 * (60 * 60 * 24)));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(КонецДня(ПериодОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	НаложитьФильтры(Запрос, "Фильтры", НастройкаСекции.НастройкиФильтров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВывестиСообщениеДанныеОтсутствуют(ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетСамыеПродаваемыеТовары.ПолучитьОбласть("СтрокаШапка"));
	
	ОбластьНоменклатура = МакетСамыеПродаваемыеТовары.ПолучитьОбласть("СтрокаНоменклатура");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьНоменклатура);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
