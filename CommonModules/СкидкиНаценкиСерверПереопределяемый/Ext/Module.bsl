////////////////////////////////////////////////////////////////////////////////
// СкидкиНаценкиСерверПереопределяемый: содержит ряд функций и процедур,
// используемых для расчета скидок и обработки связанных со скидками объектов
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список значений возможных получателей скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийСпособовПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Процент);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сумма);
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийСпособовПредоставленияСкидки()

// Формирует список значений возможных условий скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийУсловийПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийУсловийПредоставленияСкидки()

#КонецОбласти

#Область ПроцедурыИФункцииРасчетаСкидок

// Процедура выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") ИЛИ
		ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")
	Тогда
		
		ДеревоСкидок = РассчитатьПоЧекуККМ(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ДеревоСкидок = РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		ДеревоСкидок = РассчитатьПоСчетуНаОплату(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ДеревоСкидок = РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДеревоСкидок = РассчитатьПоЗаказНаряду(Объект, ВходныеПараметры);
		Иначе
			ДеревоСкидок = РассчитатьПоЗаказуПокупателя(Объект, ВходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		
		ДеревоСкидок = РассчитатьПоОтчетуОПереработке(Объект, ВходныеПараметры);
		
	КонецЕсли;
	Если ВходныеПараметры.Свойство("СведенияДокумента") Тогда
		ДеревоСкидок.Вставить("СведенияДокумента", ВходныеПараметры.СведенияДокумента);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетАвтоматическихСкидок", ВремяНачала);
	
	Возврат ДеревоСкидок;
	
КонецФункции // Рассчитать()

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаКурсыВалют() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	КурсыВалют
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "КурсыВалют");
	
КонецФункции

#КонецОбласти

#Область ОтображениеСкидки

// Обновляет табличную Части скидки
//
// Параметры:
//  Объект - Чек ККМ или Реализация Товаров
//  ИмяТЧ - Имя табличной части
//  ИмяОсновнойТЧ - Имя табличной части
//
Процедура ОбновитьОтображениеСкидки(Объект, ИмяОсновнойТЧ = "Товары", ИмяТЧ = "СкидкиНаценки") Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для каждого СтрокаСкидкиНаценки Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаСкидкиНаценки.КлючСвязи;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, "КлючСвязи");
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
			
			СтрокаСкидкиНаценки.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаСкидкиНаценки.Характеристика             = СтрокаОсновнойТаблицы.Характеристика;
			СтрокаСкидкиНаценки.НомерСтрокиОсновойТаблицы  = СтрокаОсновнойТаблицы.НомерСтроки;
			СтрокаСкидкиНаценки.ХарактеристикиИспользуются = СтрокаОсновнойТаблицы.Номенклатура.ИспользоватьХарактеристики;
			
		КонецЕсли;
		
		СтрокаСкидкиНаценки.СкидкаЗапрещенаКПросмору = НЕ ПроверитьДоступКРеквизиту(СтрокаСкидкиНаценки, "СкидкаНаценка", "Справочник.АвтоматическиеСкидки");
		
	КонецЦикла;
	

КонецПроцедуры // ОбновитьОтображениеСкидки()

// Проверка доступа к реквизиту объекта
//
Функция ПроверитьДоступКРеквизиту(Объект, ИмяРеквизита, ИмяТаблицыЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеЗначенияРеквизита.Ссылка
	|ИЗ
	|	" + ИмяТаблицыЗначений + " КАК ДоступныеЗначенияРеквизита";
	
	Результат = Запрос.Выполнить();
	МассивРазрешенныхЗначенийРеквизита = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРеквизита = Объект[ИмяРеквизита];
	
	Возврат МассивРазрешенныхЗначенийРеквизита.Найти(ЗначениеРеквизита) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(Объект, СтруктурнаяЕдиница, ВходныеПараметры)
	
	ТекущаяДата = Объект.Дата;
	
	// Нам нужно получить список всех автоматических скидок, которые нужно рассчитывать.
	// 1. Получим все скидки, которые подходят по времени действия.
	// 2. Получим все скидки, которые подходят по получателями по равенству получателя скидки и контрагента, который выбран в документе.
	// 3. Отдельно обработаем скидки, в которых встречаются группы в качестве получателей скидки.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка КАК Ссылка,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямСкладам
	|ПОМЕСТИТЬ ВТ_СкидкиПослеОтбораПоДнямНедели
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ВремяПоДнямНедели КАК АвтоматическиеСкидкиВремяПоДнямНедели
	|ГДЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьРасписание
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ДеньНедели = &ДеньНедели
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяНачала <= &ТекущееВремя
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяОкончания >= &ТекущееВремя
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|				И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Розница
	|			ИЛИ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Везде)
	|	И ( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента >= НачалоПериода( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала, День))
	|	И ( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента <= КонецПериода( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания, День))
	|	И НЕ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ПометкаУдаления
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Выбран
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямСкладам
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	НЕ АвтоматическиеСкидки.ЕстьРасписание
	|	И АвтоматическиеСкидки.Действует
	|	И ( АвтоматическиеСкидки.ДатаНачала = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента >= НачалоПериода( АвтоматическиеСкидки.ДатаНачала, День))
	|	И ( АвтоматическиеСкидки.ДатаОкончания = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента <= КонецПериода( АвтоматическиеСкидки.ДатаОкончания, День))
	|	И (АвтоматическиеСкидки.Ссылка.Назначение = &Розница
	|			ИЛИ АвтоматическиеСкидки.Ссылка.Назначение = &Везде)
	|	И НЕ АвтоматическиеСкидки.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель
	|ПОМЕСТИТЬ ВТ_СкидкиПоРавенствуПолучателя
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиСклады КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка
	|			И (АвтоматическиеСкидкиПолучателиСкидки.Получатель = &СтруктурнаяЕдиница)
	|ГДЕ
	|	(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Розница
	|			ИЛИ АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Везде)
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Действует
	|	И ( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента >= НачалоПериода( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала, День))
	|	И ( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента <= КонецПериода( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания, День))
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ЕстьОграниченияПоПолучателямСкладам
	|
	|СГРУППИРОВАТЬ ПО
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка,
	|	NULL
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|ГДЕ
	|	НЕ ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямСкладам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка
	|ПОМЕСТИТЬ ВТ_СкидкиНеПрошедшиеОтборПоПолучателю
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя
	|		ПО ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка = ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка
	|ГДЕ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямСкладам
	|	И ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка
	|ИЗ
	|	ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Розница", Перечисления.НазначенияАвтоматическихСкидок.Розница);
	Запрос.УстановитьПараметр("Везде", Перечисления.НазначенияАвтоматическихСкидок.Везде);
	// Для скидки "За время продажи".
	Запрос.УстановитьПараметр("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(ТекущаяДата) - 1));
	Запрос.УстановитьПараметр("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗСкидок = МРезультатов[3].Выгрузить();
	
	Возврат ТЗСкидок;
	
КонецФункции // ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли()

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, СтруктурнаяЕдиница, ВходныеПараметры)
	
	ТекущаяДата = Объект.Дата;
	
	// Нам нужно получить список всех автоматических скидок, которые нужно рассчитывать.
	// 1. Получим все скидки, которые подходят по времени действия.
	// 2. Получим все скидки, которые подходят по получателями по равенству получателя скидки и контрагента, который выбран в документе.
	// 3. Отдельно обработаем скидки, в которых встречаются группы в качестве получателей скидки.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка КАК Ссылка,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямКонтрагентам
	|ПОМЕСТИТЬ ВТ_СкидкиПослеОтбораПоДнямНедели
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ВремяПоДнямНедели КАК АвтоматическиеСкидкиВремяПоДнямНедели
	|ГДЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьРасписание
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ДеньНедели = &ДеньНедели
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяНачала <= &ТекущееВремя
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяОкончания >= &ТекущееВремя
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|				И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Везде)
	|	И ( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента >= НачалоПериода( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала, День))
	|	И ( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента <= КонецПериода( АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания, День))
	|	И НЕ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ПометкаУдаления
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Выбран
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямКонтрагентам
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	НЕ АвтоматическиеСкидки.ЕстьРасписание
	|	И АвтоматическиеСкидки.Действует
	|	И (АвтоматическиеСкидки.ДатаНачала = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента >= НачалоПериода(АвтоматическиеСкидки.ДатаНачала, День))
	|	И (АвтоматическиеСкидки.ДатаОкончания = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента <= КонецПериода(АвтоматическиеСкидки.ДатаОкончания, День))
	|	И (АвтоматическиеСкидки.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидки.Ссылка.Назначение = &Везде)
	|	И НЕ АвтоматическиеСкидки.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель
	|ПОМЕСТИТЬ ВТ_СкидкиПоРавенствуПолучателя
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка
	|			И (АвтоматическиеСкидкиПолучателиСкидки.Получатель = &СтруктурнаяЕдиница)
	|ГДЕ
	|	(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Везде)
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Действует
	|	И ( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента >= НачалоПериода( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала, День))
	|	И ( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания = ДатаВремя(1, 1, 1) ИЛИ &ДатаДокумента <= КонецПериода( АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания, День))
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ЕстьОграниченияПоПолучателямКонтрагентам
	|
	|СГРУППИРОВАТЬ ПО
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка,
	|	NULL
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|ГДЕ
	|	НЕ ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямКонтрагентам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка
	|ПОМЕСТИТЬ ВТ_СкидкиНеПрошедшиеОтборПоПолучателю
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя
	|		ПО ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка = ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка
	|ГДЕ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямКонтрагентам
	|	И ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка
	|ИЗ
	|	ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиНеПрошедшиеОтборПоПолучателю КАК ВТ_СкидкиНеПрошедшиеОтборПоПолучателю
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_СкидкиНеПрошедшиеОтборПоПолучателю.Ссылка
	|ГДЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Опт", Перечисления.НазначенияАвтоматическихСкидок.Опт);
	Запрос.УстановитьПараметр("Везде", Перечисления.НазначенияАвтоматическихСкидок.Везде);
	// Для скидки "За время продажи".
	Запрос.УстановитьПараметр("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(ТекущаяДата) - 1));
	Запрос.УстановитьПараметр("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));	
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗСкидок = МРезультатов[3].Выгрузить();
	
	Если Не МРезультатов[4].Пустой() Тогда
		ШаблонТекстаЗапроса = "ВЫБРАТЬ
		                      |	АвтоматическиеСкидкиПолучателиСкидки.Получатель КАК Получатель,
		                      |	АвтоматическиеСкидкиПолучателиСкидки.Ссылка
		                      |ПОМЕСТИТЬ ВТ_ПолучателиСкидки
		                      |ИЗ
		                      |	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
		                      |ГДЕ
		                      |	АвтоматическиеСкидкиПолучателиСкидки.Ссылка = &СсылкаАвтоСкидка
		                      |	И АвтоматическиеСкидкиПолучателиСкидки.Получатель.ЭтоГруппа
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	Получатель
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	&СсылкаАвтоСкидка КАК СкидкаНаценка
		                      |ГДЕ
		                      |	&СсылкаКонтрагент В ИЕРАРХИИ
		                      |			(ВЫБРАТЬ
		                      |				ВТ_ПолучателиСкидки.Получатель
		                      |			ИЗ
		                      |				ВТ_ПолучателиСкидки КАК ВТ_ПолучателиСкидки)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ ВТ_ПолучателиСкидки";
	
		СчЗапросов = 0;
		ТекстЗапроса = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаКонтрагент", СтруктурнаяЕдиница);
		ВыборкаСкидокДляДополнительнойОбработки = МРезультатов[4].Выбрать();
		Пока ВыборкаСкидокДляДополнительнойОбработки.Следующий() Цикл
			СчЗапросов = СчЗапросов + 1;
			ТекСкидка = ВыборкаСкидокДляДополнительнойОбработки.Ссылка;
			
			Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонТекстаЗапроса, "&СсылкаАвтоСкидка", "&СсылкаАвтоСкидка"+СчЗапросов)+Символы.ПС+"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
			Запрос.УстановитьПараметр("СсылкаАвтоСкидка"+СчЗапросов, ТекСкидка);
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		МРезультатовСкидок = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		СчЗапросов = 1;
		Пока СчЗапросов < МРезультатовСкидок.Количество() Цикл
			Если НЕ МРезультатовСкидок[СчЗапросов].Пустой() Тогда
				СтрСкидок = ТЗСкидок.Добавить();
				СтрСкидок.СкидкаНаценка = МРезультатовСкидок[СчЗапросов].Выгрузить()[0].СкидкаНаценка;
			КонецЕсли;
			СчЗапросов = СчЗапросов + 3;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗСкидок;
	
КонецФункции // ПолучитьТаблицуСкидокНаценокДляОптовойТорговли()

// Функция выполняет расчет скидок по заказу покупателя.
//
Функция РассчитатьПоЗаказуПокупателя(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	Товары = Объект.Запасы.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|ЕдиницаИзмерения,
		|Количество,
		|Цена"
	);
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиницаРезерв);
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.СтруктурнаяЕдиницаПродажи);
	//ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки,,,, ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуПокупателя()

// Функция выполняет расчет скидок по заказу покупателя.
//
Функция РассчитатьПоЗаказНаряду(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы", "Работы");
	
	// Обработка табличной части "Запасы".
	Товары = Объект.Запасы.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|ЕдиницаИзмерения,
		|Количество,
		|Цена"
	);
	
	Для Каждого ТекущаяСтрока Из Объект.Работы Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.КлючСвязи = ТекущаяСтрока.КлючСвязиДляСкидокНаценок;
		НоваяСтрока.Количество = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент * ТекущаяСтрока.Кратность;
	КонецЦикла;
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиницаРезерв);
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.СтруктурнаяЕдиницаПродажи);
	//ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , "Работы");
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуПокупателя()

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Функция выполняет расчет скидок по чеку ККМ.
//
Функция РассчитатьПоЧекуККМ(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	Товары = Объект.Запасы.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|ЕдиницаИзмерения,
		|Количество,
		|Цена"
	);
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(Объект, Объект.СтруктурнаяЕдиница, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиница);
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	//ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЧекуККМ()

// Функция выполняет расчет скидок по реализации товаров.
//
Функция РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "Запасы".
	Товары = Объект.Запасы.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|ЕдиницаИзмерения,
		|Количество,
		|Цена,
		|Заказ"
	);
	
	Если РеализацияСверхЗаказа Тогда
		ТоварыСверхЗаказа = Товары.СкопироватьКолонки();
		
		Для каждого ТекущаяСтрока Из Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
				НоваяСтрока = ТоварыСверхЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСверхЗаказа = "";
	КонецЕсли;
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиница);
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	//ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, РеализацияСверхЗаказа, ТоварыСверхЗаказа);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по отчету о переработке.
//
Функция РассчитатьПоОтчетуОПереработке(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Продукция");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "Продукция".
	Товары = Объект.Продукция.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|ЕдиницаИзмерения,
		|Количество,
		|Цена"
	);
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиница);
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	//ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Продукция", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по реализации товаров.
//
Функция РассчитатьПоСчетуНаОплату(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	Товары = Объект.Запасы.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|ЕдиницаИзмерения,
		|Количество,
		|Цена"
	);
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	//ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по реализации товаров.
//
Функция РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "РаботыИУслуги");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "РаботыИУслуги".
	Товары = Объект.РаботыИУслуги.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|ЕдиницаИзмерения,
		|Количество,
		|Цена,
		|ЗаказПокупателя"
	);
	
	Если РеализацияСверхЗаказа Тогда
		ТоварыСверхЗаказа = Товары.СкопироватьКолонки();
		
		Для каждого ТекущаяСтрока Из Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗаказПокупателя) Тогда
				НоваяСтрока = ТоварыСверхЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСверхЗаказа = "";
	КонецЕсли;
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	//ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "РаботыИУслуги", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, РеализацияСверхЗаказа, ТоварыСверхЗаказа);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

#КонецОбласти
