////////////////////////////////////////////////////////////////////////////////
// Обработка сообщений информационного центра
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает список обработчиков сообщений, которые обрабатывает данная подсистема.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений.
// 
Процедура ПолучитьОбработчикиКаналовСообщений(Знач Обработчики) Экспорт
	
	ДобавитьОбработчикКаналаСообщений("ИнформационныйЦентр\Недоступность\Добавление",        СообщенияИнформационногоЦентраОбработчикСообщения, Обработчики);
	ДобавитьОбработчикКаналаСообщений("ИнформационныйЦентр\Недоступность\Удаление",          СообщенияИнформационногоЦентраОбработчикСообщения, Обработчики);
	ДобавитьОбработчикКаналаСообщений("ИнформационныйЦентр\Новость\Добавление",              СообщенияИнформационногоЦентраОбработчикСообщения, Обработчики);
	ДобавитьОбработчикКаналаСообщений("ИнформационныйЦентр\Новость\Удаление",                СообщенияИнформационногоЦентраОбработчикСообщения, Обработчики);
	
КонецПроцедуры

// Выполняет обработку тела сообщения из канала в соответствии с алгоритмом текущего канала сообщений.
//
// Параметры:
//  <КаналСообщений> (обязательный). Тип:Строка. Идентификатор канала сообщений, из которого получено сообщение.
//  <ТелоСообщения> (обязательный). Тип: Произвольный. Тело сообщения, полученное из канала, которое подлежит обработке.
//  <Отправитель> (обязательный). Тип: ПланОбменаСсылка.ОбменСообщениями. Конечная точка, которая является отправителем сообщения.
//
Процедура ОбработатьСообщение(Знач КаналСообщений, Знач ТелоСообщения, Знач Отправитель) Экспорт
	
	Если КаналСообщений = "ИнформационныйЦентр\Недоступность\Добавление" Тогда
		ОбработатьНедоступность(ТелоСообщения);
	ИначеЕсли КаналСообщений = "ИнформационныйЦентр\Недоступность\Удаление" Тогда
		Если ТелоСообщения.Свойство("Идентификатор") Тогда 
			УдалитьДанныеИнформационногоЦентра(ТелоСообщения.Идентификатор);
		КонецЕсли;
	ИначеЕсли КаналСообщений = "ИнформационныйЦентр\Новость\Добавление" Тогда
		ОбработатьНовость(ТелоСообщения);
	ИначеЕсли КаналСообщений = "ИнформационныйЦентр\Новость\Удаление" Тогда
		Если ТелоСообщения.Свойство("Идентификатор") Тогда 
			УдалитьДанныеИнформационногоЦентра(ТелоСообщения.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет обработчик канала.
//
Процедура ДобавитьОбработчикКаналаСообщений(Канал, ОбработчикКанала, Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Канал = Канал;
	Обработчик.Обработчик = ОбработчикКанала;
	
КонецПроцедуры

// Обрабатывает недоступность.
//
// Параметры:
//	ТелоСообщения - Структура - тело сообщения.
//
Процедура ОбработатьНедоступность(ТелоСообщения)
	
	Объект = ПолучитьДанныеПоИдентификатору(ТелоСообщения.Идентификатор);
	Если Объект = Неопределено Тогда
		СоздатьНедоступность(ТелоСообщения);
	Иначе
		ОбновитьНедоступность(Объект, ТелоСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Создает недоступность в справочнике общих данных информационного центра.
//
// Параметры:
//	ТелоСообщения - Структура - тело сообщения.
//
Процедура СоздатьНедоступность(ТелоСообщения)
	
	Недоступность = Справочники.ОбщиеДанныеИнформационногоЦентра.СоздатьЭлемент();
	Недоступность.УстановитьНовыйКод();
	
	Недоступность.Идентификатор             = ТелоСообщения.Идентификатор;
	Недоступность.Наименование              = СформироватьЗаголовокНедоступности(ТелоСообщения.Наименование, ТелоСообщения.ДатаНачалаАктуальности, ТелоСообщения.ДатаОкончанияАктуальности);
	Недоступность.Дата                      = ТелоСообщения.Дата;
	Недоступность.ДатаНачалаАктуальности    = ТелоСообщения.ДатаНачалаАктуальности - (60 * 60 * 24);
	Недоступность.ДатаОкончанияАктуальности = ТелоСообщения.ДатаОкончанияАктуальности;
	Недоступность.Критичность               = ТелоСообщения.Критичность;
	Если ТелоСообщения.Свойство("ТекстHTML") Тогда 
		Недоступность.ТекстHTML = ТелоСообщения.ТекстHTML;
	КонецЕсли;
	Если ТелоСообщения.Свойство("Вложения") Тогда 
		Недоступность.Вложения = Новый ХранилищеЗначения(ТелоСообщения.Вложения);
	КонецЕсли;
	Если ТелоСообщения.Свойство("ВнешняяСсылка") Тогда 
		Недоступность.ВнешняяСсылка	= ТелоСообщения.ВнешняяСсылка;
	КонецЕсли;
	Если ТелоСообщения.Свойство("ТипИнформации") Тогда 
		Недоступность.ТипИнформации = ИнформационныйЦентрСервер.ОпределитьСсылкуТипаИнформации(ТелоСообщения.ТипИнформации);
	Иначе
		Недоступность.ТипИнформации = ИнформационныйЦентрСервер.ОпределитьСсылкуТипаИнформации("Недоступность");
	КонецЕсли;
	
	Недоступность.Записать();
	
КонецПроцедуры	

// Обновляет недоступность.
//
// Параметры:
//	Недоступность - СправочникСсылка.ОбщиеДанныеИнформационногоЦентра - ссылка на недоступность.
//	ТелоСообщения - Структура - тело сообщения.
//
Процедура ОбновитьНедоступность(Недоступность, ТелоСообщения)
	
	Недоступность.ТипИнформации             = ИнформационныйЦентрСервер.ОпределитьСсылкуТипаИнформации("Недоступность");
	Недоступность.Идентификатор             = ТелоСообщения.Идентификатор;
	Недоступность.Наименование              = СформироватьЗаголовокНедоступности(ТелоСообщения.Наименование, ТелоСообщения.ДатаНачалаАктуальности, ТелоСообщения.ДатаОкончанияАктуальности);
	Недоступность.Дата                      = ТелоСообщения.Дата;
	Недоступность.ДатаНачалаАктуальности    = ТелоСообщения.ДатаНачалаАктуальности - (60 * 60 * 24);
	Недоступность.ДатаОкончанияАктуальности = ТелоСообщения.ДатаОкончанияАктуальности;
	Недоступность.Критичность               = ТелоСообщения.Критичность;
	Недоступность.ПометкаУдаления           = Ложь;
	Если ТелоСообщения.Свойство("ТекстHTML") Тогда 
		Недоступность.ТекстHTML = ТелоСообщения.ТекстHTML;
	КонецЕсли;
	Если ТелоСообщения.Свойство("Вложения") Тогда 
		Недоступность.Вложения = Новый ХранилищеЗначения(ТелоСообщения.Вложения);
	КонецЕсли;
	Если ТелоСообщения.Свойство("ВнешняяСсылка") Тогда 
		Недоступность.ВнешняяСсылка = ТелоСообщения.ВнешняяСсылка;
	КонецЕсли;
	Недоступность.Записать();
	
КонецПроцедуры	

// Обрабатывает новость.
//
// Параметры:
//	ТелоСообщения - Структура - тело сообщения.
//
Процедура ОбработатьНовость(ТелоСообщения)
	
	Объект = ПолучитьДанныеПоИдентификатору(ТелоСообщения.Идентификатор);
	Если Объект = Неопределено Тогда
		СоздатьНовость(ТелоСообщения);
	Иначе
		ОбновитьНовость(Объект, ТелоСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Создает новость в справочнике общих данных информационного центра.
//
// Параметры:
//	ТелоСообщения - Структура - тело сообщения.
//
Процедура СоздатьНовость(ТелоСообщения)
	
	Новость = Справочники.ОбщиеДанныеИнформационногоЦентра.СоздатьЭлемент();
	Новость.УстановитьНовыйКод();
	
	Новость.Идентификатор             = ТелоСообщения.Идентификатор;
	Новость.Наименование              = СокрЛП(ТелоСообщения.Наименование);
	Новость.Дата                      = ТелоСообщения.Дата;
	Новость.ДатаНачалаАктуальности    = ТелоСообщения.ДатаНачалаАктуальности;
	Новость.ДатаОкончанияАктуальности = ТелоСообщения.ДатаОкончанияАктуальности;
	Новость.Критичность               = ТелоСообщения.Критичность;
	Если ТелоСообщения.Свойство("ТекстHTML") Тогда 
		Новость.ТекстHTML = ТелоСообщения.ТекстHTML;
	КонецЕсли;
	Если ТелоСообщения.Свойство("Вложения") Тогда 
		Новость.Вложения = Новый ХранилищеЗначения(ТелоСообщения.Вложения);
	КонецЕсли;
	Если ТелоСообщения.Свойство("ВнешняяСсылка") Тогда 
		Новость.ВнешняяСсылка	= ТелоСообщения.ВнешняяСсылка;
	КонецЕсли;
	Если ТелоСообщения.Свойство("ТипИнформации") Тогда 
		Новость.ТипИнформации = ИнформационныйЦентрСервер.ОпределитьСсылкуТипаИнформации(ТелоСообщения.ТипИнформации);
	Иначе
		Новость.ТипИнформации = ИнформационныйЦентрСервер.ОпределитьСсылкуТипаИнформации("Новость");
	КонецЕсли;
	
	Новость.Записать();
	
КонецПроцедуры

// Обновляет новость.
//
// Параметры:
//	Новость - СправочникСсылка.ОбщиеДанныеИнформационногоЦентра - ссылка на новость.
//	ТелоСообщения - Структура - тело сообщения.
//
Процедура ОбновитьНовость(Новость, ТелоСообщения)
	
	Новость.ТипИнформации             = ИнформационныйЦентрСервер.ОпределитьСсылкуТипаИнформации("Новость");
	Новость.Идентификатор             = ТелоСообщения.Идентификатор;
	Новость.Наименование              = СокрЛП(ТелоСообщения.Наименование);
	Новость.Дата                      = ТелоСообщения.Дата;
	Новость.ДатаНачалаАктуальности    = ТелоСообщения.ДатаНачалаАктуальности;
	Новость.ДатаОкончанияАктуальности = ТелоСообщения.ДатаОкончанияАктуальности;
	Новость.Критичность               = ТелоСообщения.Критичность;
	Новость.ПометкаУдаления           = Ложь;
	Если ТелоСообщения.Свойство("ТекстHTML") Тогда 
		Новость.ТекстHTML = ТелоСообщения.ТекстHTML;
	КонецЕсли;
	Если ТелоСообщения.Свойство("Вложения") Тогда 
		Новость.Вложения = Новый ХранилищеЗначения(ТелоСообщения.Вложения);
	КонецЕсли;
	Если ТелоСообщения.Свойство("ВнешняяСсылка") Тогда 
		Новость.ВнешняяСсылка	= ТелоСообщения.ВнешняяСсылка;
	КонецЕсли;
	Новость.Записать();
	
КонецПроцедуры

// Удаляет данное информационного центра по идентификатору.
//
// Параметры:
//	ТелоСообщения - УникальныйИдентификатор - уникальный идентификатор новости.
//
Процедура УдалитьДанныеИнформационногоЦентра(Идентификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	Объект = ПолучитьДанныеПоИдентификатору(Идентификатор);
	Если Объект = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// Возвращает объект Справочника ОбщиеДанныеИнформационногоЦентра по идентификатору.
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - уникальный идентификатор данного.
//
// Возвращаемое значение:
//	СправочникОбъект.ОбщиеДанныеИнформационногоЦентра, Неопределено.
//
Функция ПолучитьДанныеПоИдентификатору(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбщиеДанныеИнформационногоЦентра.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбщиеДанныеИнформационногоЦентра КАК ОбщиеДанныеИнформационногоЦентра
	|ГДЕ
	|	ОбщиеДанныеИнформационногоЦентра.Идентификатор = &Идентификатор";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка.ПолучитьОбъект();
	КонецЦикла;
	
КонецФункции

// Возвращает заголовок недоступности.
//
// Параметры:
//	Заголовок - Строка - заголовок сообщения.
//	ДатаНачала - Дата - дата начала недоступности.
//	ДатаОкончания - Дата - дата окончания недоступности.
//
// Возвращаемое значение:
//	Строка - заголовок недоступности.
//
Функция СформироватьЗаголовокНедоступности(Заголовок, ДатаНачала, ДатаОкончания)
	
	ДатаНачалаНедоступности	= Формат(ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
	ДлительностьОбновления	= РазностьДатВМинутах(ДатаНачала, ДатаОкончания);
	Шаблон = НСтр("ru = '%1 %2 (%3 мин.)'");
	Шаблон = СтрШаблон(Шаблон, Строка(ДатаНачалаНедоступности), СокрЛП(Заголовок), ДлительностьОбновления);
	Возврат Шаблон;
	
КонецФункции

// Возвращает разность дат в минутах.
//
// Параметры:
//	ДатаНачала - Дата - дата начала.
//	ДатаОкончания - Дата - дата окончания.
//
// Возвращаемое значение:
//	Число - количество минут.
//
Функция РазностьДатВМинутах(ДатаНачала, ДатаОкончания)
	
	КоличествоВСекундах = ДатаОкончания - ДатаНачала;
	
	Возврат Окр(КоличествоВСекундах / 60);
	
КонецФункции

#КонецОбласти

