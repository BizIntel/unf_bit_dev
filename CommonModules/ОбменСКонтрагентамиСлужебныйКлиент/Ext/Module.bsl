////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Признак использования библиотеки интернет поддержки пользователей
//
// Возвращаемое значение:
//  Булево - Истина, если используется библиотека интернет поддержки пользователей.
//
Функция ИспользуетсяИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ОбменСКонтрагентамиКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	
	Если Использование = Неопределено Тогда
		
		Использование = Ложь;
		Если Подключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском() Тогда
			ОшибкаОбращенияКВебСервису = Ложь;
			Использование = ИнтернетПоддержкаПользователейКлиент.КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису);
			Если ОшибкаОбращенияКВебСервису Тогда
				Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра.
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//  ВладелецФормы     - управляемая форма.
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено,
	ОткрытьАктуальныйЭД = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ЭД = СсылкаНаЭД;
	Если ОткрытьАктуальныйЭД Тогда
		ВходящийТитул = ОбменСКонтрагентамиСлужебныйВызовСервера.ВходящийТитул(СсылкаНаЭД);
		Если Не ВходящийТитул = Неопределено Тогда
			ЭД = ВходящийТитул;
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СсылкаНаЭД", ЭД);
	Параметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	Параметры.Вставить("ВладелецФормы", ВладелецФормы);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьЭДДляПросмотраПослеПолученияОтпечатков", ЭтотОбъект, Параметры);
	
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);

КонецПроцедуры

// Получение настроек ЭДО и параметров сертификатов.
//
// Параметры:
//  ОбработчикОповещения		 - ОписаниеОповещения - обработчик оповещения.
//  СписокНастроекЭДО			 - Массив - список настроек ЭДО.
//  СписокЭлектронныхДокументов	 - Массив - список электронных документов.
//
Процедура ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, СписокНастроекЭДО = Неопределено,
	СписокЭлектронныхДокументов = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	МассивСтруктурСертификатов = Новый Массив;
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	СтМассивовСтруктурСертификатов = Новый Структура;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("МассивСоглашений", СписокНастроекЭДО);
	ДополнительныеПараметры.Вставить("МассивЭД", СписокЭлектронныхДокументов);
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	ПоказатьОшибку = (ИспользуютсяЭП И НЕ ВыполнятьКриптооперацииНаСервере);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПолученияОтпечатковСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(ОписаниеОповещения, Истина, ПоказатьОшибку);
	
КонецПроцедуры

// Заполняет данные о способах получения технической поддержки по ЭДО.
//
Процедура ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки) Экспорт

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-333-9313";
	АдресЭлектроннойПочтыСлужбыПоддержки = "edo@1c.ru";

КонецПроцедуры

// Только для внутреннего использования
Процедура ОткрытьИнструкциюПо1СБухфон() Экспорт
	
	ПерейтиПоНавигационнойСсылке("https://1c-connect.com/ru/forcustomers/");
	
КонецПроцедуры

// Открывает форму ПроверкаСертификата и возвращает результат проверки.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//
//  ОбработкаЗавершения  - ОписаниеОповещения - вызывается при закрытии формы.
//  ПроверитьАвторизацию - Булево - если Истина, то к проверкам сертификата будет добавлен тест связи
//                                  с сервером Такском.
//  ВладелецФормы        - УправляемаяФорма - другая форма.
//  ПроверкаПриВыборе    - Булево - если Истина, тогда кнопка Проверить будет называться
//                                  "Проверить и продолжить", а кнопка Закрыть будет называться "Отмена".
//  БезПодтверждения     - Булево - если установить Истина, тогда при наличии пароля
//                            проверка будет выполнена сразу без открытия формы.
//                            Если режим ПроверкаПриВыборе и установлен параметр ОбработкаРезультата, то
//                            форма не будет открыта, если параметр ПроверкиПройдены установлен Истина.
//
Процедура ТестНастроекСПроверкойСертификата(Сертификат, ВладелецФормы, ПроверитьАвторизацию,
	ПроверкаПриВыборе, БезПодтверждения, ОбработкаЗавершения = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаТестаСертификата", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ВладелецФормы",       Неопределено);
	ДополнительныеПараметры.Вставить("ПроверкаПриВыборе",   ПроверкаПриВыборе);
	ДополнительныеПараметры.Вставить("БезПодтверждения",    БезПодтверждения);
	
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ЗаголовокФормы = НСтр("ru = 'Проверка сертификата %1'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%1", Сертификат);
	ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ДополнительныеПараметры.Вставить("ОбработкаЗавершения",
		Новый ОписаниеОповещения("ОбработкаЗавершенияТестаСертификата", ЭтотОбъект, Контекст));
	
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ЭлектроннаяПодписьКлиент.ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработкаРезультатаТестаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		
		СтруктураПроверокСертификатаНаКлиенте = ДополнительныеПараметры.Результат.ПроверкиНаСервере;
		СтруктураПроверокСертификатаНаСервере = ДополнительныеПараметры.Результат.ПроверкиНаКлиенте;
		
		РезультатСервер = Ложь;
		Если ТипЗнч(СтруктураПроверокСертификатаНаСервере) = Тип("Структура") Тогда
			РезультатСервер = СтруктураПроверокСертификатаНаСервере.Количество() > 0;
			Для каждого ЭлементСтруктуры Из СтруктураПроверокСертификатаНаСервере Цикл
				Если Не ЭлементСтруктуры.Значение Тогда
					РезультатСервер = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РезультатКлиент = Ложь;
		Если ТипЗнч(СтруктураПроверокСертификатаНаКлиенте) = Тип("Структура") Тогда
			РезультатКлиент = СтруктураПроверокСертификатаНаКлиенте.Количество() > 0;
			Для каждого ЭлементСтруктуры Из СтруктураПроверокСертификатаНаКлиенте Цикл
				Если Не ЭлементСтруктуры.Значение Тогда
					РезультатКлиент = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = РезультатКлиент ИЛИ РезультатСервер;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, ПараметрыЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	Если ПараметрыЭД.Отклонить Тогда
		ФормироватьЭД = Ложь;
		ПродолжитьОбработку = ОбменСКонтрагентамиСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД, ФормироватьЭД);
		Если ОтклонитьАннулирование Тогда
			Заголовок = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
		Иначе
			
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСчетФактура(СсылкаНаЭД) Тогда
				Заголовок = НСтр("ru = 'Укажите текст запроса на уточнение'");
			Иначе
				Заголовок = НСтр("ru = 'Укажите причины отклонения документа'");
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ФормироватьЭД = Истина;
		ПродолжитьОбработку = ОбменСКонтрагентамиСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
		Заголовок = НСтр("ru = 'Укажите причины аннулирования документа'");
	КонецЕсли;
	Если ПродолжитьОбработку Тогда
		ТекстУточнения = "";
		ПараметрыЭД.Вставить("СсылкаНаЭД", СсылкаНаЭД);
		ПараметрыЭД.Вставить("ФормироватьЭД", ФормироватьЭД);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтклонениеАннулированиеЭДЗавершить", ЭтотОбъект, ПараметрыЭД);
		ПоказатьВводСтроки(ОписаниеОповещения, ТекстУточнения, Заголовок, , Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьПредложениеОбАннулировании(ПервичныйЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	СтруктураЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьСсылкиНаЭДДляПОА(ПервичныйЭД);
	СтруктураЭД.Вставить("Отклонить", ОтклонитьАннулирование);
	Если ЗначениеЗаполнено(СтруктураЭД) Тогда
		Если ОтклонитьАннулирование Тогда
			
			ДокументыУчета = Новый Массив;
			ДокументыУчета.Добавить(ПервичныйЭД);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДокументыУчета", ДокументыУчета);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПредложениеОбАннулированииЗавершить", ЭтотОбъект, ДополнительныеПараметры);

			СтруктураЭД.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			ОбработатьОтклонениеАннулированиеЭД(СтруктураЭД.ПОА, СтруктураЭД, ОтклонитьАннулирование);
		Иначе
			ОтправитьПодтверждениеЭД(СтруктураЭД.ВладелецФайла, СтруктураЭД.ПОА);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, ДопПараметры = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ (ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
КонецПроцедуры

// Вызывается из процедуры ПодготовитьИОтправитьПЭДПродолжить(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры).
//
// Параметры:
//   Результат - МенеджерКриптографии - инициализированный менеджер криптографии.
//               Строка - описание ошибки при создании менеджера криптографии.
//               Неопределено - первый вызов метода
//   ДопПараметры - Структура:
//      Параметры                                  - Структура - входящие параметры для отправки ЭД.
//      РезультатОтправкиПЭД                        - Структура:
//         МассивПакетовДляОбработкиНаКлиенте - Массив - элементы - ДокументСсылка.ПакетыЭД.
//         КолОтправленных                    - Число.
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//
Процедура ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры) Экспорт
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	ПерейтиКЗавершениюОтправки = Истина;
	МассивПакетовДляОбработкиНаКлиенте = Неопределено;
	Если ТипЗнч(РезультатОтправкиПЭД) = Тип("Структура")
		И РезультатОтправкиПЭД.Свойство("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте)
		И МассивПакетовДляОбработкиНаКлиенте.Количество() > 0 Тогда
		
		Если Результат = Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтправкиПЭД", ЭтотОбъект, ДопПараметры);
			ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "Шифрование");

			ПерейтиКЗавершениюОтправки = Ложь;
		ИначеЕсли ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
			ПерейтиКЗавершениюОтправки = Ложь;
			// По концепции БЭД электронный документ в пакете один.
			СоответствиеДанныхПакетов = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДанныхПакетов(
													РезультатОтправкиПЭД.МассивПакетовДляОбработкиНаКлиенте);
													
			Параметры.Вставить("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
			Параметры.Вставить("МенеджерКриптографии", Результат);
			ПодготовитьПакетыДляОтправки(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ПерейтиКЗавершениюОтправки Тогда
		ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры ПодготовитьИОтправитьПЭД(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры).
//
// Параметры:
//   Результат    - Структура:
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//   ДопПараметры - Структура:
//      Параметры                  - Структура.
//      ПризнакПодписи             - Булево.
//      ДобавленныеФайлы           - СправочникСсылка.ЭДПрисоединенныеФайлы.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения.
//
Процедура ПодготовитьИОтправитьПЭДПродолжить(Результат, ДопПараметры) Экспорт
	
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	Если НЕ (ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ТипЗнч(СоответствиеПрофилейИПараметровСертификатов) = Тип("Соответствие")) Тогда
		
		СоответствиеПрофилейИПараметровСертификатов = Новый Соответствие;
	КонецЕсли;
	
	Параметры = Неопределено;
	ПризнакПодписи = Неопределено;
	ДобавленныеФайлы = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Свойство("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	РезультатОтправкиПЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы,
																								ПризнакПодписи,
																								СоответствиеПрофилейИПараметровСертификатов);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	ДопПараметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	ВыполнитьДействияПослеОтправкиПЭД(Неопределено, ДопПараметры);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьМассивПакетовЭД(Знач МассивПЭД, ОбработкаОповещения = Неопределено) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОбработкаОповещения", ОбработкаОповещения);
	ДопПараметры.Вставить("МассивПЭД", МассивПЭД);
	Оповещение = Новый ОписаниеОповещения("ОтправитьМассивПакетовОповещение", ЭтотОбъект, ДопПараметры);
	МассивПрофилей = ОбменСКонтрагентамиСлужебныйВызовСервера.МассивПрофилейПакетовЭД(МассивПЭД);
	ПолучитьНастройкиЭДОИПараметрыСертификатов(Оповещение, МассивПрофилей, МассивПЭД);
	
КонецПроцедуры

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Процедура ОпределитьСтатусыПодписей(ЭД) Экспорт

	РезультатПроверки = Новый Массив;
	СтруктураСодержимогоЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	СтруктураСодержимогоЭД.Вставить("ИндексПроверки", -1);
	СтруктураСодержимогоЭД.Вставить("ПроверяемыйЭД", ЭД);
	Если СтруктураСодержимогоЭД.Подписи.Количество() Тогда
		ОпределитьСтатусОчереднойПодписи(Неопределено, СтруктураСодержимогоЭД);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать.
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами.
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы,
//       если нужно обработать только один ЭД.
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект,
	Действие, ДопПараметры = "", Знач ЭД = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
			
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	Параметры.Вставить("Действие", Действие);
	Параметры.Вставить("ДопПараметры", ДопПараметры);
	Параметры.Вставить("ЭД", ЭД);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Если (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Подписать")
			ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Отправить"))
		И ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи() Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьЭДПослеПолученияОтпечатков", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	Иначе
		ОбработатьЭДПослеПолученияОтпечатков(Неопределено, Параметры)
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПолучитьДвоичныеДанныеДляЭД(Результат, ДополнительныеПараметры) Экспорт
	
	ЭД = Неопределено;
	ОписаниеДанных = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЭД", ЭД)
		И ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		ВыбранныйСертификат = Неопределено;
		Если НЕ (ДополнительныеПараметры.Свойство("ОписаниеДанных", ОписаниеДанных)
			И ТипЗнч(ОписаниеДанных) = Тип("Структура")
			И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
			И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")) Тогда
			
			ВыбранныйСертификат = Неопределено;
		КонецЕсли;
		ДвоичныеДанныеЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ЭД, ВыбранныйСертификат);
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", ДвоичныеДанныеЭД);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

// Подписывает ЭД и переходит в процедуру ДействияПослеПодписанияЭД(Параметры).
//
// Параметры:
//   РезультатВыполнения - Неопределено - в логике работы процедуры не участвует.
//   Параметры - Структура:
//      Результат                    - Структура:
//         СтруктСтруктурМассивовЭДИСертификатов - Структура:
//            МассивСертификатов - Массив - один или несколько сертификатов, которыми могут быть подписаны
//               ЭД, находящиеся в следующем параметре структуры.
//            СоответствиеЭДИДД  - Соответствие:
//               Ключ     - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на подписываемый ЭД.
//               Значение - Неопределено, Строка - Адрес временного хранилища, ссылающийся на двоичные
//                  данные ЭД. Если значение не заполнено, то двоичные данные ЭД будут определяться
//                  непосредственно перед подписанием ЭД в процедуре указанной в обработчике оповещения,
//                  например: ПолучитьДвоичныеДанныеДляЭД.
//            ДанныеДляСпецОбработки - Соответствие - данные для подписания банковских ЭД.
//         МассивЭдКОбновлениюСтатуса            - Массив - массив ЭД, для которых после подписания всех документов
//            надо будет обновить статусы.
//      СоответствиеЭДИПодписей      - Соответствие.
//      СоотвСертификатовИИхСтруктур - Соответствие:
//         Ключ     - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//         Значение - Структура - параметры сертификата.
//
Процедура ПодписатьЭД(РезультатВыполнения, Параметры) Экспорт
	
	СтруктСтруктурМассивовЭДИСертификатов = Неопределено;
	ВходящаяСтруктура = Параметры.Результат;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных
		+ ЭлектронноеВзаимодействиеСлужебныйКлиент.КоличествоПодписанныхЭД(РезультатВыполнения);
		
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие ЭД надо добавить в массив "МассивЭД" для обновления их статусов.
			МассивЭД = Неопределено;
			Если НЕ (Параметры.Свойство("МассивЭдКОбновлениюСтатуса", МассивЭД)
						ИЛИ ТипЗнч(МассивЭД) = Тип("Массив")) Тогда
						
				Параметры.Вставить("МассивЭдКОбновлениюСтатуса", Новый Массив);
				МассивЭД = Параметры.МассивЭдКОбновлениюСтатуса;
				
			КонецЕсли;

			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					Параметры.МассивЭДКУдалениюИзОтправки.Добавить(ПодписываемыеДанные.Объект);
					Продолжить;
				КонецЕсли;
				МассивЭД.Добавить(ПодписываемыеДанные.Объект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВходящаяСтруктура.Свойство("СтруктСтруктурМассивовЭДИСертификатов", СтруктСтруктурМассивовЭДИСертификатов)
		И СтруктСтруктурМассивовЭДИСертификатов.Количество() > 0 Тогда
		
		СоответствиеЭДИПодписей = Неопределено;
		Если НЕ (Параметры.Свойство("СоответствиеЭДИПодписей", СоответствиеЭДИПодписей)
			ИЛИ ТипЗнч(СоответствиеЭДИПодписей) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеЭДИПодписей", Новый Соответствие);
		КонецЕсли;
		
		Для Каждого Элемент Из СтруктСтруктурМассивовЭДИСертификатов Цикл
			
			Структура = Элемент.Значение;
			СтруктСтруктурМассивовЭДИСертификатов.Удалить(Элемент.Ключ);
			
			МассивСертификатов = Структура.МассивСертификатов;
			ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодписатьЭД", ЭтотОбъект, Параметры);
			ДанныеДляСпецОбработки = Неопределено;
			СоответствиеЭдИДд = Неопределено;
			Если Структура.Свойство("СоответствиеЭдИДд", СоответствиеЭдИДд)
				И ТипЗнч(СоответствиеЭдИДд) = Тип("Соответствие") Тогда
				
				Если СоответствиеЭдИДд.Количество() = 1 Тогда
					Операция = НСтр("ru = 'Подписание электронного документа'");
				Иначе
					Операция = НСтр("ru = 'Подписание электронных документов'");
				КонецЕсли;
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("Операция",            Операция);
				ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
				ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
				ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
				ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Документ'"));
				ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
				
				НаборДанных = ОписаниеДанных.НаборДанных;
				МассивЭДДляПредставления = Новый Массив;
				Для Каждого ЭлементДанных Из СоответствиеЭдИДд Цикл
					ЭД = ЭлементДанных.Ключ;
					Данные = Новый Структура;
					Если ЭлементДанных.Значение = Неопределено ИЛИ НЕ ЭтоАдресВременногоХранилища(ЭлементДанных.Значение) Тогда
						ПараметрыДляПолученияДД = Новый Структура("ЭД, ОписаниеДанных", ЭД, ОписаниеДанных);
						СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляЭД", ЭтотОбъект, ПараметрыДляПолученияДД);
					Иначе
						СсылкаНаДД = ЭлементДанных.Значение;
					КонецЕсли;
					Данные.Вставить("Данные", СсылкаНаДД);
					Данные.Вставить("Объект", ЭД);
					
					НаборДанных.Добавить(Данные);
					МассивЭДДляПредставления.Добавить(ЭД);
				КонецЦикла;
				
				Если МассивЭДДляПредставления.Количество() = 1 Тогда
					ПредставлениеЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПредставлениеЭД(МассивЭДДляПредставления[0]);
					НаборДанных[0].Вставить("Представление", ПредставлениеЭД);
				Иначе
					ПредставлениеЭД = НСтр("ru = 'Электронные документы (%1)'");
					ПредставлениеЭД = СтрЗаменить(ПредставлениеЭД, "%1", МассивЭДДляПредставления.Количество());
					ПредставлениеЭД = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПредставлениеЭД);
					СписокПредставленийЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СписокПредставленийЭД(МассивЭДДляПредставления);
					ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставленийЭД);
					ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеЭД);
				КонецЕсли;
				
				ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
			Иначе
				ПодписатьЭД(Неопределено, Параметры);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		
		ДействияПослеПодписанияЭД(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы просмотра Входящего, Исходящего ЭД.
// Проверяет совпадение переданных в оповещение параметров свойствам формы.
// 
// Параметры:
//  Форма - УправляемаяФорма - ФормаПросмотраЭД документов ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий.
//  Параметр - Структура - параметр передаваемый в обработку оповещение формы.
//  ОбработатьОповещение - Булево - признак выхода из обработки оповещения формы.
//
Процедура ПриОбработкеОповещенияФормыПросмотраЭД(Форма, Параметр, ОбработатьОповещение) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФлагВыхода = Ложь;
		Если Параметр.Свойство("ЭлектронныеДокументы") Тогда
			ФлагВыхода = Истина;
			Если ТипЗнч(Параметр.ЭлектронныеДокументы) = Тип("Массив")
				И Параметр.ЭлектронныеДокументы.Найти(Форма.ПрисоединенныйФайлСсылка) <> Неопределено Тогда
				ФлагВыхода = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ФлагВыхода2 = Ложь;
		Если Параметр.Свойство("ДокументыВладельцы") Тогда
			ФлагВыхода2 = Истина;
			Если ТипЗнч(Параметр.ДокументыВладельцы) = Тип("Массив")
				И Параметр.ДокументыВладельцы.Найти(Форма.Объект.Ссылка) <> Неопределено Тогда
					ФлагВыхода2 = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагВыхода И ФлагВыхода2 Тогда
			ОбработатьОповещение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Открывает страницу опроса на сайте ИТС
//
Процедура ОткрытьСтраницуОпроса() Экспорт
	
	ПараметрыЕстьИдея = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыЕстьИдея();
	
	ПерейтиПоНавигационнойСсылке("http://its.1c.ru/survey/service1cedo" + ПараметрыЕстьИдея);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД.
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭП.
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров.
//  Параметры - дополнительные параметры обработки.
//
Процедура ПодготовитьИОтправитьПЭД(
	ДобавленныеФайлы,
	ПризнакПодписи,
	СоответствиеПрофилейИПараметровСертификатов = Неопределено,
	Параметры = Неопределено,
	ОбработчикПослеОтправкиПЭД = Неопределено)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Вставить("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	НемедленнаяОтправкаЭД = Истина;
	Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД)
		И ТипЗнч(НемедленнаяОтправкаЭД) = Тип("Булево")) Тогда
		
		ВыполнятьКриптооперацииНаСервере = Неопределено;
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодготовитьИОтправитьПЭДПродолжить", ЭтотОбъект, ДопПараметры);
	Если (СоответствиеПрофилейИПараметровСертификатов = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов)) И НемедленнаяОтправкаЭД Тогда
		
		ПолучитьНастройкиЭДОИПараметрыСертификатов(ОписаниеОповещения, , ДобавленныеФайлы);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Получение соответствия сертификатов.
//
// Параметры:
//  СоответствиеПрофилей - Структура - данные сертификатов.
// 
// Возвращаемое значение:
//  Соответствие - сертификат и значение.
//
Функция ПараметрыСертификатов(СоответствиеПрофилей)
	
	Результат = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеПрофилей Цикл
		Результат.Вставить(КлючЗначение.Значение.СертификатПодписи, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Вызывается из процедуры ВыполнитьДействияПослеОтправкиПЭД(...).
// Выполняет описание оповещения переданное в параметре ОбработчикПослеОтправкиПЭД.
//
// Параметры:
//   ДопПараметры - Структура:
//      РезультатОтправкиПЭД       - Структура:
//         
//      Параметры                  - Структура - необязательный параметр, дополнительные параметры,
//                                               переданные из метода инициировавшего отправку ПЭД.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - необязательный параметр, обработка результата отправки ПЭД.
//
Процедура ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры)
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
		
	Если ТипЗнч(ОбработчикПослеОтправкиПЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПослеОтправкиПЭД, РезультатОтправкиПЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьСлужебныйЭД(СсылкаНаЭД,
	ВидЭД, ТекстУточнения = "", ДопПараметры = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(СсылкаНаЭД) <> Тип("Массив") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(СсылкаНаЭД);
	Иначе
		МассивЭД = СсылкаНаЭД;
	КонецЕсли;
	
	ОбменСКонтрагентамиКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД,
		ТекстУточнения, ДопПараметры, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено, ДопПараметры = Неопределено)
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", ДопПараметры, ЭД);;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументыВладельцы", МассивСсылок);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
КонецПроцедуры

Процедура ЗаполнитьПароли(ПараметрыСертификата, Результат)
	
	ПараметрыСертификата.ПарольПользователя = Результат.ПарольПользователя;
	Если ПараметрыСертификата.Свойство("Пользователь") И Результат.Свойство("Пользователь") Тогда
		ПараметрыСертификата.Пользователь = Результат.Пользователь;
	КонецЕсли;
	ПараметрыСертификата.ПарольПолучен = Истина;
	
КонецПроцедуры

// Проверка статусов подписей после подписания электронных документов
//
// Параметры:
//  Параметры - Структура - данные электронных документов.
//
Процедура ДействияПослеПодписанияЭД(Параметры)
	
	МассивЭдКОбновлениюСтатуса = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("МассивЭдКОбновлениюСтатуса", МассивЭдКОбновлениюСтатуса)
		И ТипЗнч(МассивЭдКОбновлениюСтатуса) = Тип("Массив") Тогда
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ДействияПослеПодписанияЭДНаСервере(МассивЭдКОбновлениюСтатуса);
		
		Для Каждого ЭД Из МассивЭдКОбновлениюСтатуса Цикл
			ОпределитьСтатусыПодписей(ЭД);
		КонецЦикла;
	КонецЕсли;
	
	ОтправкаЭД(Параметры);
	
КонецПроцедуры

// Выполнение отправки электронного документа.
// Параметры:
//   Параметры - Структура - данные электронного документа.
//
Процедура ОтправкаЭД(Параметры)
	
	Результат = Параметры.Результат;
	МассивЭДКУдалениюИзОтправки = Параметры.МассивЭДКУдалениюИзОтправки;
	НемедленнаяОтправкаЭД = Параметры.НемедленнаяОтправкаЭД;
	СоотвСертификатовИИхСтруктур = Параметры.СоотвСертификатовИИхСтруктур;
	СоотвСоглашенийИСертификатовАвторизации = Неопределено;
	СоотвСоглашенийИМассивовЭДКОтправке = Неопределено;
	НастройкиЭДОСЭДКОтправке = Неопределено;
	СтруктураКОтправке = Неопределено;
	Если Результат.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
		МассивЭД = Неопределено;
		Если СтруктураКОтправке.Свойство("БезПодписи", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив")
			И МассивЭД.Количество() > 0 Тогда
			
			Параметры.Вставить("МассивКОтправкеБезПодписи", МассивЭД);
		КонецЕсли;
		
		Если СтруктураКОтправке.Свойство("СПодписью", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив") Тогда
			Если МассивЭДКУдалениюИзОтправки.Количество() > 0 И МассивЭД.Количество() > 0 Тогда
				Для Каждого УдаляемыйЭД Из МассивЭДКУдалениюИзОтправки Цикл
					ТекИндекс = МассивЭД.Найти(УдаляемыйЭД);
					Если ТекИндекс <> Неопределено Тогда
						МассивЭД.Удалить(ТекИндекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			МассивЭД = Новый Массив;
		КонецЕсли;
		
		Параметры.Вставить("МассивКОтправке", МассивЭД);
		МассивКОтправке = Параметры.МассивКОтправке;
		
		Если НЕ (Результат.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
			И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")) Тогда
			СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
		КонецЕсли;
			
		РасшифроватьМаркер = Ложь;
		Если СтруктураКОтправке.Свойство("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке)
			И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие")
			И СоотвСоглашенийИМассивовЭДКОтправке.Количество() Тогда
			Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				ПрофильНастроекЭДО = ТекЭл.Ключ;
				РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(
					ПрофильНастроекЭДО);
				ЕстьЭдКОтправке = Ложь;
				Для Каждого ОтправляемыйЭД Из ТекЭл.Значение Цикл
					Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) = Неопределено Тогда
						МассивКОтправке.Добавить(ОтправляемыйЭД);
						ЕстьЭдКОтправке = Истина;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьЭдКОтправке Тогда
					МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
					Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(МассивСертификатов) Тогда
						// На клиента массив ЭД к отправке через ОЭДО, может прийти только в том случае,
						// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату).
						ЕстьМаркер = Ложь;
						Для Каждого Сертификат Из МассивСертификатов Цикл
							
							КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
							СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
							
							МаркерРасшифрованный = Неопределено;
							Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								
								СоотвСоглашенийИСтруктурСертификатов.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
								ЕстьМаркер = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ ЕстьМаркер Тогда
							// Отправка будет продолжена после расшифровки маркеров.
							РасшифроватьМаркер = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РасшифроватьМаркер Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуЭДПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
			ИД_Параметров = Строка(Новый УникальныйИдентификатор);
			ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, Параметры);
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИД_Параметров", ИД_Параметров);
			ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
			ДопПараметры.Вставить("СоответствиеСоглашенийИСертификатов", СоотвСоглашенийИСертификатовАвторизации);
			
			РасшифроватьМаркер(, ДопПараметры);
		Иначе
			ЗавершитьОтправкуЭД(Неопределено, Параметры);
		КонецЕсли;
	Иначе
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры РасшифроватьМаркер(), по выполнению Описания Оповещения созданного
// в процедуре ОтправкаЭД(Параметры).
//
// Параметры:
//   Результат - Структура:
//               СоответствиеПрофилейИПараметровСертификатов - Соответствие:
//                                   Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                   Значение - Структура:
//                                              МаркерРасшифрованный - ДвоичныеДанные - расшифрованного маркера.
//                                              прочие реквизиты сертификата (необязательно).
//
//   Параметры - Структура:
//               СоотвСоглашенийИСтруктурСертификатов - Соответствие
//                                                      Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                                      Значение - Структура - Параметры сертификата.
//               МассивКОтправке - Массив - ЭД подготовленные к отправке.
//
Процедура ПродолжитьОтправкуЭДПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Неопределено;
	Если НЕ (Параметры.Свойство("СоотвСоглашенийИСтруктурСертификатов", СоотвСоглашенийИСтруктурСертификатов)
			 И ТипЗнч(СоотвСоглашенийИСтруктурСертификатов) = Тип("Соответствие")) Тогда
		
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	КонецЕсли;
	
	ВозврСоответствие = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
		И ТипЗнч(ВозврСоответствие) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ВозврСоответствие Цикл
			СоотвСоглашенийИСтруктурСертификатов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗавершитьОтправкуЭД(Неопределено, Параметры);
	
КонецПроцедуры

// Обрабатывает результаты очередной итерации отправки ЭД, при необходимости (во входящих параметрах есть
// не отправленные ЭД) начинает следующую итерацию отправки ЭД.
//
// Параметры:
//    Результат - Структура, Неопределено - в структуре возвращается результат прошедшей итерации отправки ЭД:
//       КолПодготовленных - Число.
//       КолОтправленных   - Число.
//    Параметры - Структура:
//    МассивКОтправке           - Массив.
//    МассивКОтправкеБезПодписи - Массив.
//    Прочие параметры.
//
Процедура ЗавершитьОтправкуЭД(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	ПродолжитьВыполнитьДействияПослеОтправки = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КолПодготовленных = 0;
		КолОтправленных = 0;
		Если НЕ(Результат.Свойство("КолПодготовленных", КолПодготовленных)
				И ТипЗнч(КолПодготовленных) = Тип("Число")) Тогда
			
			КолПодготовленных = 0;
		КонецЕсли;
		Если НЕ(Результат.Свойство("КолОтправленных", КолОтправленных)
				И ТипЗнч(КолОтправленных) = Тип("Число")) Тогда
			
			КолОтправленных = 0;
		КонецЕсли;
		Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + КолПодготовленных;
		Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КолОтправленных;
	КонецЕсли;
	
	МассивЭД = Неопределено;
	МассивКОтправке = Неопределено;
	МассивКОтправкеБезПодписи = Неопределено;
	Если Параметры.Свойство("МассивКОтправке", МассивКОтправке)
		И ТипЗнч(МассивКОтправке) = Тип("Массив")
		И МассивКОтправке.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправке;
		Параметры.Удалить("МассивКОтправке");
		ПризнакПодписи = Истина;
	ИначеЕсли Параметры.Свойство("МассивКОтправкеБезПодписи", МассивКОтправкеБезПодписи)
		И ТипЗнч(МассивКОтправкеБезПодписи) = Тип("Массив")
		И МассивКОтправкеБезПодписи.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправкеБезПодписи;
		Параметры.Удалить("МассивКОтправкеБезПодписи");
		ПризнакПодписи = Ложь;
	КонецЕсли;
	
	Если МассивЭД <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтправкуЭД", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивЭД, ПризнакПодписи, СоотвСоглашенийИСтруктурСертификатов, Параметры, ОписаниеОповещения);
		ПродолжитьВыполнитьДействияПослеОтправки = Ложь;
	КонецЕсли;
	
	Если ПродолжитьВыполнитьДействияПослеОтправки Тогда
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Оповещение после отправки электронных документов.
//
// Параметры:
//  Параметры - Структура - показатели отправки.
//
Процедура ВыполнитьДействияПослеОтправки(Параметры)
	
	Перем Действие, ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных;
	
	Если НЕ Параметры.Свойство("ИтогКолНовыхЭД", ИтогКолНовыхЭД) Тогда
		ИтогКолНовыхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД) Тогда
		ИтогКолУтвержденныхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодписанных", ИтогКолПодписанных) Тогда
		ИтогКолПодписанных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодготовленных", ИтогКолПодготовленных) Тогда
		ИтогКолПодготовленных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолОтправленных", ИтогКолОтправленных) Тогда
		ИтогКолОтправленных = 0;
	КонецЕсли;

	ОтправленныеДокументы = Неопределено;
	Если Параметры.Свойство("МассивЭдКОбновлениюСтатуса") Тогда
		ОтправленныеДокументы = Параметры.МассивЭдКОбновлениюСтатуса;
	КонецЕсли;
	
	ДокументыУчета = Неопределено;
	Если Параметры.Свойство("МассивСсылокНаОбъект") Тогда
		ДокументыУчета = Параметры.МассивСсылокНаОбъект;
	КонецЕсли;
	Если ДокументыУчета = Неопределено
		Или (ТипЗнч(ДокументыУчета) = Тип("Массив") И ДокументыУчета.Количество() = 0) Тогда
		Результат = Неопределено;
		Если Параметры.Свойство("Результат", Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Результат.Свойство("ДокументыУчета") Тогда
				ДокументыУчета = Результат.ДокументыУчета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", ОтправленныеДокументы);
	ПараметрыОповещения.Вставить("ДокументыУчета", ДокументыУчета);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);

	Если Параметры.Свойство("Действие")
		И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действие, "Показать") Тогда
		Результат = Параметры.Результат;
		МассивОбработки = "";
		Если Результат.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ОткрытьЭДДляПросмотра(ТекЭл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВывестиИнформациюОбОбработанныхЭД(ТекстЗаголовка,
		ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных);
	
	ВсегоОбработано = ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД + ИтогКолПодписанных + ИтогКолПодготовленных
					+ ИтогКолОтправленных;
	
	Если Параметры.Свойство("ОповеститьОСозданииУведомления") И ВсегоОбработано > 0 Тогда
		Оповестить("СозданоУведомление", Параметры.ОповеститьОСозданииУведомления);
	КонецЕсли;
	
	ОписаниеОповещения = Неопределено;
	Если Параметры.Свойство("ОписаниеОповещения", ОписаниеОповещения)
		И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, (ВсегоОбработано > 0));
	КонецЕсли;
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьОбменСКонтрагентами(ТребуетсяПовторитьПолучение = Ложь) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТребуетсяПовторитьПолучение", ТребуетсяПовторитьПолучение);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтправитьПолучитьЭДВыполнить", ЭтотОбъект, ДопПараметры);
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	Если ИспользоватьЭП Тогда
		ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
		ОтправитьПолучитьЭДВыполнить(Результат, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьПолучитьЭДВыполнить(Результат, ДополнительныеПараметры) Экспорт
	
	СоответствиеПрофилейПараметровСертификатов = Неопределено;
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ Не Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейПараметровСертификатов) Тогда
		Возврат;
	КонецЕсли;
	
	// Блок обновления статусов настроек ЭДО и получения новых приглашений.
	ТекстСообщения = НСтр("ru = 'Выполняется получение информации о приглашениях. Подождите...'");
	Состояние(НСтр("ru = 'Получение.'"), , ТекстСообщения);
	ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоответствиеПрофилейПараметровСертификатов);
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Выполняется отправка и получение пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Отправка и получение.'"), , ТекстСообщения);
	
	// Получение и отправка документов.
	
	ТребуетсяПовторитьПолучение = ДополнительныеПараметры.ТребуетсяПовторитьПолучение;
	СтруктураВозврата = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
		СоответствиеПрофилейПараметровСертификатов,
		ТребуетсяПовторитьПолучение);
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения,
		СтруктураВозврата.КолОтправленныхПакетов, СтруктураВозврата.НовыеДокументы.МассивПакетовЭД.Количество());
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	// Распаковываем принятые пакеты с электронными документами.
	
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	РаспаковатьПакетыЭДНаКлиенте(СтруктураВозврата.НовыеДокументы.МассивПакетовЭД);
	
	// Если использование маркера превысило 5 минут, необходимо повторное получение.
	Если ТребуетсяПовторитьПолучение Тогда
		ОтправитьПолучитьОбменСКонтрагентами(ТребуетсяПовторитьПолучение);
	КонецЕсли;
	
	Оповестить("ОбновитьНаличиеЭДО");
	
КонецПроцедуры

// Получает расшифрованный маркер профиля настроек ЭДО.
//
// Параметры:
//  Оповещение		 - ОписаниеОповещений - метод в который передается выполнение после получения маркера.
//  СвойстваПрофиля	 - Структура - Дополнительные параметры.
//   Профиль - СправочникСсылка.ПрофилиНастроекЭДО - ссылка на профиль для которого нужно получить маркер.
//   ИдентификаторОрганизации - строка - Идентификатор организации в сервисе ЭДО.
//
Процедура ПолучитьМаркерПрофиляЭДО(Оповещение, СвойстваПрофиля, ПредставлениеОперации = "") Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвойстваПрофиля", СвойстваПрофиля);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("ПредставлениеОперации", ПредставлениеОперации);
	ПолучениеОтпечатковПродолжить = Новый ОписаниеОповещения("ПолучитьМаркерПродолжить", ЭтотОбъект, ДополнительныеПараметры);
	
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(ПолучениеОтпечатковПродолжить, Истина, Ложь);
	
КонецПроцедуры

// Описание оповещения процедуры получения отпечатков сертификатов "ПолучитьМаркерПрофиляЭДО".
//
// Параметры:
//  Отпечатки				 - Массив - Массив отпечатков сертификатов.
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры переданные в описание оповещения.
//
Процедура ПолучитьМаркерПродолжить(Отпечатки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Отпечатки) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Отпечатки);
		Возврат;
	КонецЕсли;

	МассивОтпечатковСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;

	СвойстваПрофиля = ДополнительныеПараметры.СвойстваПрофиля;
	
	СвойстваСертификата = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, СвойстваПрофиля.Профиль);

	Если СвойстваСертификата.Количество() = 0 Тогда
		
		ПредставлениеОперации = ДополнительныеПараметры.ПредставлениеОперации;
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов. Выполнение операции %1 прервано.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеОперации);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СвойстваСертификата Цикл
		
		ПараметрыСертификата = КлючЗначение.Значение;
		Прервать;
	КонецЦикла;
	
	СпособОбмена = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО");
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи", ПараметрыСертификата.Сертификат);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", СпособОбмена);
	
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", СвойстваПрофиля.Идентификатор);
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера);
	
	Если ЗашифрованныеДанные = Неопределено Тогда
		
		ПредставлениеОперации = ДополнительныеПараметры.ПредставлениеОперации;
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных от сервиса ЭДО. Выполнение операции %1 прервано.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеОперации);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ПараметрыСертификата.Сертификат);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",   НСтр("ru = 'Аутентификация в сервисе ЭДО'"));
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ЗашифрованныеДанные);
	
	ОписаниеДанных.Вставить("БезПодтверждения",    ПараметрыСертификата.ПарольПолучен И МассивСертификатов.Количество() = 1);
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("ОписаниеОповещения", ДополнительныеПараметры.Оповещение);

	ОбработкаЗавершения = Новый ОписаниеОповещения("РасшифроватьМаркетПродолжить", ЭтотОбъект, ПараметрыРасшифровки);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);

	
КонецПроцедуры

// Описание оповещения процедуры расшифровки маркера "ПолучитьМаркерПродолжить".
//
Процедура РасшифроватьМаркетПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	РасшифрованныйМаркер = Результат.РасшифрованныеДанные;
	
	ОбработкаОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	
	ВыполнитьОбработкуОповещения(ОбработкаОповещения, РасшифрованныйМаркер);
	
	
КонецПроцедуры

// Подключает обработчик ожидания клиентского сеанса.
//
Процедура ПодключитьОповещенияЭДО() Экспорт
	
	ОповещатьОНовыхЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО();
	
	Если Не ОповещатьОНовыхЭД Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОповеститьОНовыхЭД", 15, Истина);
	
КонецПроцедуры

// Возвращает картинку оповещений 1С-ЭДО.
//
Функция КартинкаОповещенияЭДО() Экспорт
	
	КартинкаОповещений = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьСобытияЭДО() Тогда
		КартинкаОповещений = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	
	Возврат КартинкаОповещений;
	
КонецФункции

// Только для внутреннего использования
Процедура РаспаковатьПакетыЭДНаКлиенте(Знач МассивПакетовЭД) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	
	// Подготовим данные по пакетам ЭД для занесения в базу.
	ДанныеПакетовЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ДанныеПакетовЭД(МассивПакетовЭД);
	
	// Расшифруем электронные документы.
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеПакетовЭД", ДанныеПакетовЭД);
	Контекст.Вставить("Индекс", -1);
	
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

#Область РаспаковкаПакетовЭД

// Продолжение процедуры РаспаковатьПакетыЭДНаКлиенте.
Процедура ОбработатьПакетыЭДЦиклНачало(Контекст)
	
	Если Контекст.ДанныеПакетовЭД.Количество() <= Контекст.Индекс + 1 Тогда
		ОбработатьПакетыЭДПослеЦикла(Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("СтруктураПакетаЭД", Контекст.ДанныеПакетовЭД[Контекст.Индекс]);
	
	// ПакетЭД структура из элементов: МассивЭД, МассивЭП, ПакетЭДСсылка, ОписаниеОшибки.
	
	Контекст.Вставить("МассивЭД", Контекст.СтруктураПакетаЭД.МассивЭД);
	Контекст.Вставить("МассивЭП", Контекст.СтруктураПакетаЭД.МассивЭП);
	Контекст.Вставить("Счетчик", -1);
	
	РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПакетыЭДЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст)
	
	Если Контекст.МассивЭД.Количество() <= Контекст.Счетчик + 1 Тогда
		РасшифроватьЭлектронныеДокументыПослеВнутреннегоЦикла(Контекст);
		Возврат;
	КонецЕсли;

	Контекст.Счетчик = Контекст.Счетчик + 1;
	Контекст.Вставить("ЭлектронныйДокумент", Контекст.МассивЭД[Контекст.Счетчик]);
	
	Если Не Контекст.ЭлектронныйДокумент.Зашифрован Тогда
		РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("РасшифроватьЭлектронныеДокументыВнутреннийЦиклПослеРасшифровкиЭД", ЭтотОбъект, Контекст);

	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Расшифровка электронного документа'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(Контекст.ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий",       Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",             Ложь);
	ОписаниеДанных.Вставить("Данные",                    Контекст.ЭлектронныйДокумент.АдресЭД);
	ОписаниеДанных.Вставить("ЗаголовокДанных",           НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("БезПодтверждения",          Истина);
	ОписаниеДанных.Вставить("Представление",             Контекст.ЭлектронныйДокумент.ИмяБезРасширения);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

// Завершение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыВнутреннийЦиклПослеРасшифровкиЭД(РезультатВыполнения, Контекст) Экспорт
	
	Если Не РезультатВыполнения.Успех Тогда
		Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", НСтр("ru = 'Не удалось расшифровать электронный документ из пакета.'"));
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресЭД = ПоместитьВоВременноеХранилище(РезультатВыполнения.РасшифрованныеДанные, Контекст.ЭлектронныйДокумент.АдресЭД);
	Иначе
		РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РезультатВыполнения.РасшифрованныеДанные);
		АдресЭД = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, Контекст.ЭлектронныйДокумент.АдресЭД);
	КонецЕсли;
	
	РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыПослеВнутреннегоЦикла(Контекст)
	
	Если Контекст.МассивЭП.Количество() = 0 Тогда
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = Неопределено;
	Контекст.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
			"ПолучениеСертификатов", Ложь);
	Иначе
		ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Контекст.МенеджерКриптографии, Контекст)
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		
		// Если на клиенте нет менеджера криптографии то проверка сертификата, извлекаемого из подписи, производится на сервере.
		ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьСертификатыПодписей(Контекст);
		
		ОбработатьПакетыЭДПослеЦикла(Контекст);
		Возврат;
		
	КонецЕсли;
	
	Контекст.Вставить("Счетчик", -1);
	Контекст.Вставить("МенеджерКриптографии", Результат);
	ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст)
	
	Если Контекст.МассивЭП.Количество() <= Контекст.Счетчик + 1 Тогда
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Счетчик = Контекст.Счетчик + 1;
	Контекст.Вставить("Подпись", Контекст.МассивЭП[Контекст.Счетчик]);
	
	Если ЗначениеЗаполнено(Контекст.Подпись.Отпечаток) Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	// Подпись не была прочитана при записи объекта.
	ДвоичныеДанныеФайлаЭП = ПолучитьИзВременногоХранилища(Контекст.Подпись.АдресЭП);
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеФайлаЭП) Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеПолученияСертификатовИзПодписи", ЭтотОбъект, Контекст,
			"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиПолученияСертификатовИзПодписи", ЭтотОбъект),
		ДвоичныеДанныеФайлаЭП);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиПолученияСертификатовИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке);
	
	Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", ТекстСообщения);
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеПолученияСертификатовИзПодписи(Сертификаты, Контекст) Экспорт
	
	Если Сертификаты.Количество() = 0 Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Сертификат", Сертификаты[0]);
	
	Контекст.Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
		"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеВыгрузкиСертификата", ЭтотОбъект, Контекст,
		"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиВыгрузкиСертификата", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонСообщения = НСтр("ru = 'Выгрузка сертификата: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке);
	
	Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", ТекстСообщения);
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеВыгрузкиСертификата(ДанныеСертификата, Контекст) Экспорт
	
	Контекст.Подпись.Вставить("Отпечаток", Base64Строка(Контекст.Сертификат.Отпечаток));
	Контекст.Подпись.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(ДанныеСертификата, Новый УникальныйИдентификатор));
	Контекст.Подпись.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Контекст.Сертификат));
	
	Если НЕ ЗначениеЗаполнено(Контекст.Подпись.АдресЭД) Тогда
		Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", НСтр("ru = 'Не удалось найти исходные данные для проверки ответной подписи.'"));
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		Новый ОписаниеОповещения("ПроверитьПодписиПослеПослеВыгрузкиСертификата", ЭтотОбъект, Контекст),
		Контекст.Подпись.АдресЭД,
		Контекст.Подпись.АдресЭП,
		Контекст.МенеджерКриптографии);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПроверитьПодписиПослеПослеВыгрузкиСертификата(Результат, Контекст) Экспорт
	
	Контекст.Подпись.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаУниверсальная());
	Если Результат = Истина Тогда
		Контекст.Подпись.Вставить("ПодписьВерна", Истина);
	Иначе
		Контекст.Подпись.Вставить("ПодписьВерна", Ложь);
	КонецЕсли;
	
	ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПакетыЭДЦиклНачало.
Процедура ОбработатьПакетыЭДПослеЦикла(Контекст)
	
	// Перебор массива ДанныеПакетовЭД. Отобразить ошибки и удалить ошибочные пакеты из массива.
	КоличествоЭлементовКоллекции = Контекст.ДанныеПакетовЭД.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Счетчик = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		ПакетЭД = Контекст.ДанныеПакетовЭД[Счетчик];
		
		Если ПакетЭД.Свойство("ОписаниеОшибки") Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД.ПакетЭДСсылка,
				ПакетЭД.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Контекст.ДанныеПакетовЭД.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
	
	// Если в массиве остались пакеты, то отправим их на запись в базу.
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", Новый Массив);
	РаспакованныеДокументы.Вставить("НовыеДокументы", Новый Массив);
	КолРаспакованныхЭД = 0;
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаписатьДанныеПакетовЭД(Контекст.ДанныеПакетовЭД, РаспакованныеДокументы, КолРаспакованныхЭД);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	
	Если МассивСлужебныхЭД.Количество() > 0 Тогда
		
		Действия = "ПодписатьОтправить";
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(Новый Массив, Действия, , МассивСлужебныхЭД);
		
	КонецЕсли;
	
	ШаблонОповещения = НСтр("ru = 'Распаковано пакетов: %1.'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолРаспакованныхЭД);
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	НовыеДокументы = РаспакованныеДокументы.НовыеДокументы;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеДокументы, МассивСлужебныхЭД);
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", НовыеДокументы);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ПолучитьДанныеЗашифрованногоМаркера(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	МаркерЗашифрованный = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// В переменной Параметры получаем структуру (СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие).
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения (ДополнительныеПараметры.ОбработкаОповещения).
		СоотвСертификатовИИхСтруктур = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур) Тогда
			
			// Результат - структура - ОписаниеДанных которая была передана в метод Расшифровать(),
			// дополненная параметром ВыбранныйСертификат на стороне БСП:
			ОписаниеДанных = Неопределено;
			ВыбранныйСертификат = Неопределено;
			Если ДополнительныеПараметры.Свойство("ОписаниеДанных", ОписаниеДанных)
				И ТипЗнч(ОписаниеДанных) = Тип("Структура")
				И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
				И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
				И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
				И СоотвСертификатовИИхСтруктур.Получить(Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации) <> Неопределено Тогда
				
				СтруктураПараметровЗапросаМаркера = Параметры.СоотвСертификатовИИхСтруктур[Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации];
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", ДополнительныеПараметры.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ДополнительныеПараметры.ИдентификаторОрганизации);
				
				МаркерЗашифрованный = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", МаркерЗашифрованный);
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

Процедура РасшифроватьМаркер(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// В переменной Параметры получаем структуру (СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие).
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения (ДополнительныеПараметры.ОбработкаОповещения).
		ВозврСоответствие = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
			И ТипЗнч(ВозврСоответствие) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
			ВозврСоответствие = Параметры.СоответствиеПрофилейИПараметровСертификатов;
		КонецЕсли;
		
		// В результате приходят расшифрованные данные маркера, поместим их в ВозврСоответствие:
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Успех = Ложь;
			РасшифрованныеДанные = Неопределено;
			ПрофильНастроекЭДО = Неопределено;
			Если Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные) Тогда
				Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные) Тогда
					РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
				КонецЕсли;
				Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные")
					И ДополнительныеПараметры.Свойство("ПрофильНастроекЭДО", ПрофильНастроекЭДО) Тогда
					
					ВыбранныйСертификат = Неопределено;
					РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
					Если Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
						И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
						И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
						И Параметры.СоотвСертификатовИИхСтруктур.Получить(Строка(ВыбранныйСертификат.УникальныйИдентификатор())
							+ "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации) <> Неопределено Тогда
						
						ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[Строка(ВыбранныйСертификат.УникальныйИдентификатор())
							+ "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации];
						ПараметрыСертификата.Вставить("МаркерРасшифрованный", РасшифрованныеДанные);
						
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСертификата);
					Иначе
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, Новый Структура("МаркерРасшифрованный", РасшифрованныеДанные));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗапуститьФинальныйОбработчикОповещения = Истина;
		ОбработчикОповещения = Неопределено;
		СоответствиеСоглашенийИСертификатов = Неопределено;
		Если ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов)
			И ТипЗнч(СоответствиеСоглашенийИСертификатов) = Тип("Соответствие")
			И СоответствиеСоглашенийИСертификатов.Количество() > 0 Тогда
			
			Для Каждого Элемент Из СоответствиеСоглашенийИСертификатов Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				Сертификаты = Элемент.Значение;
				
				// Аутентификация на 1С Логин для сервиса 1С:ЭДО.
				ПараметрыАутентификации = Неопределено;
				РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				Если РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
					Если ДополнительныеПараметры.Свойство("ПараметрыАутентификации", ПараметрыАутентификации) Тогда
						
						Если ПараметрыАутентификации <> Неопределено И ТипЗнч(ПараметрыАутентификации) <> Тип("Структура")
							И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
							
							ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
								Новый ОписаниеОповещения("АутентификацияНаСервисе1СЭДО", ЭтотОбъект, ДополнительныеПараметры),
								ЭтотОбъект);
							Возврат;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ (ТипЗнч(Сертификаты) = Тип("Массив") И ЗначениеЗаполнено(ПрофильНастроекЭДО)) Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСертификатов = Новый Массив;
				Для Каждого Сертификат Из Сертификаты Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСтруктура = Параметры.СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					Если ПараметрыСтруктура.Свойство("МаркерРасшифрованный") Тогда
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСтруктура);
						МассивСертификатов = Новый Массив;
						Прервать;
					Иначе
						ПараметрыСтруктура.Свойство("МаркерЗашифрованный");
						Если ПараметрыСтруктура.ПарольПолучен Тогда
							// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
							// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
							// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
							// диалог выбора сертификата.
							МассивСертификатов = Новый Массив;
							МассивСертификатов.Добавить(Сертификат);
							Прервать;
						Иначе
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Если массив сертификатов пустой, значит либо уже есть расшифрованный маркер, либо нет сертификатов,
				// в обоих случаях переходим к обработке следующей Настройки ЭДО.
				Если МассивСертификатов.Количество() > 0 Тогда
					ОписаниеДанных = Новый Структура;
					ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
					ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
					ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
					ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация в сервисе ЭДО'"));
					ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
					
					СтруктураПараметровЗапросаМаркера = Новый Структура();
					СтруктураПараметровЗапросаМаркера.Вставить("ИД_Параметров", ИД_Параметров);
					СтруктураПараметровЗапросаМаркера.Вставить("ОписаниеДанных", ОписаниеДанных);
					
					СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
					СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
					
					Маркер = Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркера", ЭтотОбъект, СтруктураПараметровЗапросаМаркера);
					
					ОписаниеДанных.Вставить("Данные", Маркер);
					
					ДополнительныеПараметры.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ДополнительныеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
					
					// Удалим из соответствия обработанный элемент:
					СоответствиеСоглашенийИСертификатов.Удалить(ПрофильНастроекЭДО);
					ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьМаркер", ЭтотОбъект, ДополнительныеПараметры);
					
					ЗапуститьФинальныйОбработчикОповещения = Ложь;
					ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗапуститьФинальныйОбработчикОповещения
			И ДополнительныеПараметры.Свойство("ОбработчикОповещения", ОбработчикОповещения)
			И ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие);
			
			Если ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров] <> Неопределено Тогда
				ПараметрыПриложения.Удалить("ЭлектронноеВзаимодействие." + ИД_Параметров);
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьМассивПакетовОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоотвСоглашенийИСтруктурСертификатов = Результат.СоответствиеПрофилейИПараметровСертификатов;
	МассивПЭД = ДополнительныеПараметры.МассивПЭД;
	
	ОтправленныеДокументы = Новый Массив;
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов, ОтправленныеДокументы);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", ОтправленныеДокументы);
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	ОбработкаОповещения = ДополнительныеПараметры.ОбработкаОповещения;
		
	Если Не ОбработкаОповещения = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПредложениеОбАннулировании.
Процедура ОбработатьПредложениеОбАннулированииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьСостояниеЭД", ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьОтклонениеАннулированиеЭД.
Процедура ОбработатьОтклонениеАннулированиеЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Текст = НСтр("ru = '%1, %2:
			|%3'");
		ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст,
			ДополнительныеПараметры.Организация, ПользователиКлиентСервер.ТекущийПользователь(), Результат);
		
		Если ДополнительныеПараметры.Отклонить Тогда
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.УведомлениеОбУточнении");
		Иначе
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПредложениеОбАннулировании");
		КонецЕсли;
		// При аннулировании параметр ФормироватьЭД всегда имеет значение Истина,
		// при отклонении может иметь значение как Истина, так и Ложь.
		ОписаниеОповещения = Неопределено;
		ДополнительныеПараметры.Свойство("ОписаниеОповещения", ОписаниеОповещения);
		ФормироватьЭД = Ложь;
		Если НЕ (ДополнительныеПараметры.Свойство("ФормироватьЭД", ФормироватьЭД) И ФормироватьЭД = Истина) Тогда
			НовыйСтатусЭД = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отклонен");
			СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, Результат);
			СсылкаНаЭД = ДополнительныеПараметры.СсылкаНаЭД;
			ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДополнительныеПараметры.СсылкаНаЭД, СтруктураПараметров, Ложь);
			Если ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
			КонецЕсли;
		Иначе
			СформироватьПодписатьСлужебныйЭД(ДополнительныеПараметры.СсылкаНаЭД,
				ВидСлужебногоЭД, ТекстУточнения, , ОписаниеОповещения);
		КонецЕсли;
	ИначеЕсли Результат <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Причина не указана, действие отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификаты

Процедура ПослеПолученияОтпечатковСертификатов(Отпечатки, Параметры) Экспорт
		
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ОтпечаткиСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, ОтпечаткиСервера);
	
	ОбработчикОповещения = Параметры.ОбработчикОповещения;
	МассивСоглашений = Параметры.МассивСоглашений;
	МассивЭД = Параметры.МассивЭД;
	
	СтМассивовСтруктурСертификатов = Новый Структура;
	СтМассивовСтруктурСертификатов.Вставить("МассивОтпечатковКлиент", МассивОтпечатков);
	
	ПараметрыАутентификации = Неопределено;
	СтСоответствий = ОбменСКонтрагентамиСлужебныйВызовСервера.НастройкиЭДОИСертификатыАвторизации(
		МассивСоглашений, МассивЭД, СтМассивовСтруктурСертификатов, ПараметрыАутентификации);
	
	СтСоответствий.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
	
	СоответствиеСоглашенийИСертификатов = Неопределено;
	Если СтСоответствий.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоответствиеСоглашенийИСертификатов) Тогда
		ИД_Параметров = Строка(Новый УникальныйИдентификатор);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, СтСоответствий);
		Параметры = Новый Структура;
		Параметры.Вставить("ИД_Параметров", ИД_Параметров);
		Параметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
		Параметры.Вставить("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		
		Параметры.Вставить("ПараметрыАутентификации", ПараметрыАутентификации);
		
		
		РасшифроватьМаркер(, Параметры);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов",
			СтСоответствий.СоответствиеПрофилейИПараметровСертификатов);
		
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭП

Процедура ОпределитьСтатусОчереднойПодписи(Результат, Параметры) Экспорт
	
	// Проверка создания менеджера криптографии.
	Если Результат = Неопределено И Параметры.Свойство("РезультатПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ИндексПроверки = Параметры.ИндексПроверки + 1;
	
	Если Не Параметры.Свойство("РезультатПроверки") Тогда
		РезультатПроверки = Новый Массив;
		Параметры.Вставить("РезультатПроверки", РезультатПроверки);
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура("НомерСтроки", Параметры.ИндексПроверки);
	
	Если Результат = Истина Тогда
		СтруктураЗаписи.Вставить("Результат", Истина);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ВидОперации = НСтр("ru = 'Проверка подписи'");
		ТекстСообщения = НСтр("ru = 'При проверке подписи электронного документа:
									|%1
									|произошла ошибка: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			Параметры.ПроверяемыйЭД,Результат);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения, ТекстСообщения, 0);
		СтруктураЗаписи.Вставить("Результат", Ложь);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
		Параметры.Вставить("ПодписьНеверна");
	КонецЕсли;

	Если Параметры.Подписи.Количество() > Параметры.ИндексПроверки Тогда
		Оповещение = Новый ОписаниеОповещения("ОпределитьСтатусОчереднойПодписи", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Параметры.ДанныеЭД,
			Параметры.Подписи[Параметры.ИндексПроверки].Подпись);
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ПроверяемыйЭД") Тогда
		ОбменСКонтрагентамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(Параметры.ПроверяемыйЭД,
			Параметры.РезультатПроверки);
	КонецЕсли;
	
	Если Параметры.Свойство("ПроверяемыйЭД") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(Параметры.ПроверяемыйЭД);
		Если Параметры.Свойство("ЭлектронныйДокументВладелец")
			И ЗначениеЗаполнено(Параметры.ЭлектронныйДокументВладелец) Тогда
			МассивЭД.Добавить(Параметры.ЭлектронныйДокументВладелец);
		КонецЕсли;
		Оповестить("ПроведенаПроверкаЭП", МассивЭД);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументов

Процедура ОткрытьЭДДляПросмотраПослеПолученияОтпечатков(Отпечатки, Параметры) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	СсылкаНаЭД = Параметры.СсылкаНаЭД;
	ПараметрыОткрытия = Параметры.ПараметрыОткрытия;
	ВладелецФормы = Параметры.ВладелецФормы;

	ИмяФормыЭлектронногоДокумента = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьИмяФормыЭД(СсылкаНаЭД);
	
	Если Не ЗначениеЗаполнено(ИмяФормыЭлектронногоДокумента) Тогда
		ВызватьИсключение НСтр("ru='Электронный документ не предназначен для просмотра.'");
		Возврат;
	КонецЕсли;
	
	ВладелецЭД = Неопределено;
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			СтруктураЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СтруктураСодержимогоЭД(СсылкаНаЭД);
			ВладелецЭД = СтруктураЭД.ВладелецФайла;
		Иначе
			ВладелецЭД = СсылкаНаЭД;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Ключ, МассивОтпечатков", ВладелецЭД, МассивОтпечатков);
	
	Если ВладелецФормы = Неопределено Тогда
		ОткрытьФорму(ИмяФормыЭлектронногоДокумента, ПараметрыФормы, , СсылкаНаЭД);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму(ИмяФормыЭлектронногоДокумента, ПараметрыФормы, ВладелецФормы, СсылкаНаЭД);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			Уникальность = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Уникальность") Тогда
				
				Уникальность = ПараметрыОткрытия.Уникальность;
			КонецЕсли;
			
			ОткрытьФорму(ИмяФормыЭлектронногоДокумента, ПараметрыФормы,
				ВладелецФормы, Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЭДПослеПолученияОтпечатков(ОтпечаткиСертификатов, Параметры) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	МассивСсылокНаОбъект = Параметры.МассивСсылокНаОбъект;
	Действие = Параметры.Действие;
	ДопПараметры = Параметры.ДопПараметры;
	ЭД = Параметры.ЭД;
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	
	МассивОтпечатковСертификатов = Новый Массив;
	ОшибкаНастройкиКриптографии =Ложь;
	
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Строка") Тогда
		МассивОтпечатковСертификатов = Новый Массив;
		ОшибкаНастройкиКриптографии = Истина;
		ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии);
	ИначеЕсли ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭД) И Не ОшибкаНастройкиКриптографии Тогда
		Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, ЭД) Тогда
			ДопПараметры.Вставить("ОшибкаНастройкиСертификата", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеСертификатаИПароля = Новый Соответствие;
	
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
																				МассивОтпечатковСертификатов,
																				Действие,
																				ДопПараметры,
																				ЭД,
																				СоответствиеСертификатаИПароля);
	
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	НемедленнаяОтправкаЭД = Неопределено;
	ВыполнитьОповещение = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Свойство("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		Результат.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		
		Если НЕ Результат.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
			ИтогКолПодписанных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
			ИтогКолПодготовленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
			ИтогКолОтправленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
			ИтогКолНовыхЭД = 0;
		КонецЕсли;
		
		Если ИтогКолУтвержденныхЭД = 0 И Результат.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = Результат.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		Если ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД > 0 Тогда
			
			ОбработанныеДокументы = Неопределено;
			Если Параметры.Свойство("ЭД") Тогда
				ОбработанныеДокументы = Новый Массив;
				
				Если ТипЗнч(Параметры.ЭД) = Тип("Массив") Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбработанныеДокументы, Параметры.ЭД);
				Иначе
					
					ОбработанныеДокументы.Добавить(Параметры.ЭД);
				КонецЕсли;
			КонецЕсли;
			
			СсылкиНаОбъект = Неопределено;
			Если Параметры.Свойство("МассивСсылокНаОбъект") Тогда
				СсылкиНаОбъект = Параметры.МассивСсылокНаОбъект;
			КонецЕсли;
			
			ДокументыВладельцы = Неопределено;
			Если Результат.Свойство("МассивНовыхЭД") Тогда
				ДокументыВладельцы = Результат.МассивНовыхЭД;
			КонецЕсли;
			
			Если СсылкиНаОбъект = Неопределено Тогда
				Если Результат.Свойство("ДокументыУчета") Тогда
					СсылкиНаОбъект = Результат.ДокументыУчета;
				КонецЕсли;
				
			КонецЕсли;
						
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ЭлектронныеДокументы" ,ОбработанныеДокументы);
			ПараметрыОповещения.Вставить("ДокументыУчета", СсылкиНаОбъект);
			
			Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
			
		КонецЕсли;
		
		// Подписание ЭД:
		
		СоотвСертификатовИМассивовЭДКПодписи = Новый Соответствие;
		
		МассивЭДКУдалениюИзОтправки = Новый Массив;
		СтруктСтруктурМассивовЭДИСертификатов = Неопределено;
		СоотвЭДИСоглашений = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		
		ПараметрыКонтекста = Новый Структура();
		ПараметрыКонтекста.Вставить("Результат", Результат);
		ПараметрыКонтекста.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыКонтекста.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		ПараметрыКонтекста.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		ПараметрыКонтекста.Вставить("ИтогКолОтправленных", ИтогКолОтправленных);
		ПараметрыКонтекста.Вставить("ИтогКолПодготовленных", ИтогКолПодготовленных);
		ПараметрыКонтекста.Вставить("ИтогКолНовыхЭД", ИтогКолНовыхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолПодписанных", ИтогКолПодписанных);
		ПараметрыКонтекста.Вставить("Действие", Действие);
		ПараметрыКонтекста.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
		ПараметрыКонтекста.Вставить("МассивЭДКУдалениюИзОтправки", МассивЭДКУдалениюИзОтправки);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИМассивовЭДКПодписи", СоотвСертификатовИМассивовЭДКПодписи);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ОповеститьОСозданииУведомления") Тогда
			ПараметрыКонтекста.Вставить("ОповеститьОСозданииУведомления", ДопПараметры.ОповеститьОСозданииУведомления);
		КонецЕсли;

		Если Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И Результат.Свойство("СтруктСтруктурМассивовЭДИСертификатов", СтруктСтруктурМассивовЭДИСертификатов)
			И Результат.Свойство("СоотвЭДИСоглашений", СоотвЭДИСоглашений) Тогда
			
			СоответствиеПрофилейИСертификатов = Неопределено;
			Если ДопПараметры.Свойство("СоответствиеСертификатов", СоответствиеПрофилейИСертификатов) И ЗначениеЗаполнено(СоответствиеПрофилейИСертификатов) Тогда
				СоответствиеСертификатов = ПараметрыСертификатов(СоответствиеПрофилейИСертификатов);
				Для Каждого КлючЗначение Из СоотвСертификатовИИхСтруктур Цикл
					ПараметрыСертификата = СоответствиеСертификатов.Получить(КлючЗначение.Ключ);
					ЗаполнитьПароли(КлючЗначение.Значение, ПараметрыСертификата);
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыКонтекста.Вставить("СтруктСтруктурМассивовЭДИСертификатов", СтруктСтруктурМассивовЭДИСертификатов);
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			ПараметрыКонтекста.Вставить("ИндексПервойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексВторойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексТретьейИтерации", 0);
			ВыполнитьОповещение = Ложь;
			ПодписатьЭД(Неопределено, ПараметрыКонтекста);
		Иначе
			Если СоотвСертификатовИИхСтруктур = Неопределено Тогда
				СоотвСертификатовИИхСтруктур = Новый Соответствие;
			КонецЕсли;
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			// Отправка ЭД:
			ВыполнитьОповещение = Ложь;
			ОтправкаЭД(ПараметрыКонтекста);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьОповещение И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	НовыйЭД = Неопределено;
	ИДПараметра = Неопределено;
	// Если выполнялось утверждение входящего титула ТОРГ-12 или Акта, то надо открыть
	// ответный титул для подписания, в окне первичного титула.
	Если ДопПараметры.Свойство("НовыйЭД", НовыйЭД) И ЗначениеЗаполнено(НовыйЭД)
		И ДопПараметры.Свойство("ИДПараметра", ИДПараметра) Тогда
		
		ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
		Если ТипЗнч(ПараметрыФормы) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ПараметрыФормы, НовыйЭД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьПакетыДляОтправки(Параметры)
	
	Если Не Параметры.Свойство("ИндексПеребораПакетов") Тогда
		Параметры.Вставить("ИндексПеребораПакетов", 0);
	КонецЕсли;
	
	Если Не Параметры.Свойство("ИндексПеребораДанных") Тогда
		Параметры.Вставить("ИндексПеребораДанных", -1);
	КонецЕсли;
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		Если СоответствиеДанныхПакетов.Количество() > Параметры.ИндексПеребораПакетов Тогда
			ТекИндексПакета = -1;
			// Определяем текущий обрабатываемый пакет
			Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
				ТекИндексПакета = ТекИндексПакета + 1;
				Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			МассивДанныхЭД = КлючЗначение.Значение;
			
			Если Параметры.ИндексПеребораДанных + 1 < МассивДанныхЭД.Количество() Тогда
				Параметры.ИндексПеребораДанных = Параметры.ИндексПеребораДанных + 1;
				
				ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
				
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				МассивСертификатов = Новый Массив;
				Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
					ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
					Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
				НеЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				
				Оповещение = Новый ОписаниеОповещения("СоздатьПакетЭДПослеШифрования", ЭтотОбъект, Параметры);
				
				Попытка
					МенеджерКриптографии.НачатьШифрование(Оповещение, НеЗашифрованныеДанные, МассивСертификатов);
				Исключение
					ВидОперации = НСтр("ru = 'Шифрование данных'");
					ТекстСообщения = НСтр("ru = 'При шифровании данных произошла ошибка: %1'");
					КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки());
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ТекстСообщения, КраткоеПредставлениеОшибки);
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
									ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 0);
					ПодготовитьПакетыДляОтправки(Параметры);
				КонецПопытки
				
			Иначе
				Параметры.ИндексПеребораДанных = -1;
				Параметры.ИндексПеребораПакетов = Параметры.ИндексПеребораПакетов + 1; // переходим к обработке следующего пакета
				ПодготовитьПакетыДляОтправки(Параметры);
			КонецЕсли;
			Возврат
		КонецЕсли;
		
		Параметры.Удалить("ИндексПеребораПакетов");
		Параметры.Удалить("ИндексПеребораДанных");
		
		КолОтправленных = 0;
		ОбменСКонтрагентамиСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(
				СоответствиеДанныхПакетов, Параметры.СоответствиеПрофилейИПараметровСертификатов, КолОтправленных);
		Параметры.РезультатОтправкиПЭД.КолОтправленных = Параметры.РезультатОтправкиПЭД.КолОтправленных + КолОтправленных;
	КонецЕсли;
	ВыполнитьДействияПослеОтправкиПЭДЗавершить(Параметры);
	
КонецПроцедуры

// Выводит оповещение о смене ответственного.
Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОтветственного(Знач МассивЭД, Знач ОбработкаОповещения) Экспорт
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭД", МассивЭД);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПеренаправлениеЭД", ПараметрыФормы, , , , , ОбработкаОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

Процедура СоздатьПакетЭДПослеШифрования(ЗашифрованныеДанные, Параметры) Экспорт
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		ТекИндексПакета = -1;
		Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
			ТекИндексПакета = ТекИндексПакета + 1;
			Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		МассивДанныхЭД = КлючЗначение.Значение;
		ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
		
		ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
	КонецЕсли;
	
	ПодготовитьПакетыДляОтправки(Параметры)
	
КонецПроцедуры

Процедура СформироватьНовыйЭДКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Организация", Организация) Тогда
		
		СтруктураКаталога = Новый Структура;
		СтруктураКаталога.Вставить("Организация", Организация);
		СтруктураКаталога.Вставить("ТоварыКаталога", Результат);
		Параметры = Новый Структура("СтруктураКаталога", СтруктураКаталога);
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	СоглашениеЭД = Неопределено;
	ОткрыватьФормыЭД = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("СоглашениеОбИспользованииЭД", СоглашениеЭД) Тогда
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(СоглашениеЭД);
		
		МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(СоглашениеЭД);
		Если МассивСсылок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТоварыКаталога", Результат);
		
		ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить",
			СтруктураПараметров);
		
		Если ДополнительныеПараметры.Свойство("ОткрыватьФормыЭД", ОткрыватьФормыЭД)
			И ОткрыватьФормыЭД = Истина Тогда
			ОбменСКонтрагентамиКлиент.ОткрытьАктуальныйЭД(СоглашениеЭД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура АутентификацияНаСервисе1СЭДО(ПараметрыАутентификации, Параметры) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		Параметры.Удалить("ПараметрыАутентификации");
	Иначе
		
		Параметры.Вставить("ПараметрыАутентификации", ПараметрыАутентификации);
	КонецЕсли;
	
	РасшифроватьМаркер(, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыПодменюЭДО

// Команда открытия электронного документа.
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.ОткрытьАктуальныйЭД(ПараметрКоманды, ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды);
	
КонецПроцедуры

// Команда формирования электронного документа.
Процедура СформироватьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьНовыйЭД", ОбменСКонтрагентамиКлиент, Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрКоманды", ПараметрКоманды);
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
		
	Если ПараметрКоманды.Количество() > 1 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Создать электронные документы для выделенных элементов?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения вопроса проведения объекта.
Процедура ПроверитьПроведениеПослеВопросаПользователю(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

// Выполнение проверки проведения документов.
Процедура ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры)
	
	ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
		ДополнительныеПараметры.ПараметрКоманды, ДополнительныеПараметры.Обработчик, ДополнительныеПараметры.Источник);

КонецПроцедуры

// Команда Создать, Подписать и отправить электронный документ.
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭД", ОбменСКонтрагентамиКлиент);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрКоманды", ПараметрКоманды);
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
	
	Если ПараметрКоманды.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Отправить электронные документы выделенных элементов?
			|Если электронных документов нет, они будут созданы автоматически.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Команда открытия формы просмотра электронных документов.
Процедура ДеревоЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьДеревоЭД(ПараметрКоманды, ПараметрыВыполненияКоманды);
		
КонецПроцедуры

// Команда создания произвольного документа на основании текущего.
Процедура СоздатьПроизвольныйЭДНаОсновании(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры
// Команда выгрузки данных в файл.
Процедура ВыгрузитьДанныеВФайл(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
		
	ОбменСКонтрагентамиКлиент.БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды);
	
КонецПроцедуры

// Команда перезаполнения объекта из электронного документа.
Процедура ПерезаполнитьДокумент(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.ПерезаполнитьДокумент(ПараметрКоманды, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры

// Команда загрузки документа из файла.
Процедура ЗагрузитьДанныеИзФайла(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.БыстрыйОбменЗагрузитьЭДИзФайла();
	
КонецПроцедуры

// Команда открытия обработки "ТекущиеДелаПоЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.ОткрытьТекущиеДелаЭДО();
	
КонецПроцедуры

// Открыть дерево электронных документов.
//
// Параметры:
//  СсылкаНаОбъект		 - Ссылка - документ учета.
//  ПараметрыОткрытия	 - Структура - параметры открытия.
//  ЭД					 - Ссылка - электронный документ.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДеревоЭД", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
			ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
			И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		
		Если Не ЭД = Неопределено Тогда
			ПараметрыФормы.Вставить("ИсходныйДокумент", ЭД)
		КонецЕсли;
		
		ФормаДерева = ПолучитьФорму("Обработка.ОбменСКонтрагентами.Форма.ДеревоЭД", ПараметрыФормы,
			СсылкаНаОбъект, СсылкаНаОбъект.УникальныйИдентификатор(), Окно);
		
		Если Не ФормаДерева.Открыта() Тогда
			ФормаДерева.Открыть();
		Иначе
			Если Не ЭД = Неопределено Тогда
				ПараметрыОповещения = Новый Структура("ОбъектСсылка, ИсходныйДокумент", СсылкаНаОбъект, ЭД);
				Оповестить("ОбновитьПозиционироватьСтрокуДереваЭД", ПараметрыОповещения);
			КонецЕсли;
			ФормаДерева.Активизировать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФорм

Функция СвойстваДокументооборотаЭД() Экспорт
	
	СвойстваРедактирования= Новый Структура("ИсходящийДокумент,
		|ИспользоватьЭП,
		|ТребуетсяИзвещениеОПолучении,
		|ПрофильНастроекЭДО,
		|ТребуетсяОтветнаяПодпись,
		|СпособОбменаЭД,
		|ИдентификаторОрганизации");
	
	Возврат СвойстваРедактирования;
	
КонецФункции

Функция НастройкиРегламентаЭДО(ВидЭД, ВерсияФормата, СпособОбменаЭДО) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("РедактироватьПодпись", Ложь);
	Настройки.Вставить("РедактироватьИзвещение", Ложь);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Ложь);
	
	Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель")
		И (ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)")
			Или ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (УПД:Первичный документ)"))Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав")
		И ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (УПД:Первичный документ)") Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
		Настройки.РедактироватьИзвещение = Истина;
		Если ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (УПД:Счет-фактура и первичный документ)") Тогда
			Настройки.РедактироватьОтветнуюПодпись = Истина;
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") Тогда
		Настройки.РедактироватьИзвещение = Истина;
		Если ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)") Тогда
			Настройки.РедактироватьОтветнуюПодпись = Истина;
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель") Тогда
		Если ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (УКД:Первичный документ)") Тогда
			Настройки.РедактироватьОтветнуюПодпись = Истина;
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭДО) Тогда
		Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
			Настройки.РедактироватьПодпись = Ложь;
		Иначе
			Настройки.РедактироватьПодпись = Истина;
			Настройки.РедактироватьОтветнуюПодпись = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Только для внутреннего использования
Процедура ОбработкаЗавершенияТестаСертификата(Результат, Контекст) Экспорт
	
	ОбработкаЗавершения = Контекст.ОбработкаЗавершения;
	Контекст.ДополнительныеПараметры.Очистить();
	Контекст.Очистить();
	
	Если ТипЗнч(ОбработкаЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ПерейтиПоНавигационнойСсылке("https://portal.1c.ru/applications/30/licenseAgreement");
	
КонецПроцедуры

Процедура ОбработатьПредставлениеДанныхДляОператораЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ШаблонИмениВременногоФайла = НСтр("ru = 'Данные для регистрации у оператора ЭДО_%1'");
	ИмяВременногоФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениВременногоФайла,
		Контекст.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяВременногоФайла, "xml");
	
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(Контекст.ДвоичныеДанныеДляОператораЭДО, Контекст.УникальныйИдентификатор);
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	Результат.Вставить("ОтносительныйПуть",            Контекст.УникальныйИдентификаторЗаявки1СЭДО + "\");
	Результат.Вставить("ИмяФайла",                     ИмяВременногоФайлаСРасширением);
	Результат.Вставить("Наименование",                 ИмяВременногоФайла);
	Результат.Вставить("Расширение",                   "xml");
	Результат.Вставить("Редактирует",                  "");
	Результат.Вставить("Размер",                       "");
	Результат.Вставить("ДатаМодификацииУниверсальная", ОбщегоНазначенияКлиент.ДатаУниверсальная());
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(Результат);
	
КонецПроцедуры

#КонецОбласти
