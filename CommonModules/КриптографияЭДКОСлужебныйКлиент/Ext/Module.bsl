////////////////////////////////////////////////////////////////////////////////
// Подсистема "Криптография (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СоздатьМенеджерКриптографии

Процедура СоздатьМенеджерКриптографии(ОповещениеОЗавершении, ВыводитьСообщения, ПараметрыКриптографии = Неопределено, ПредлагатьУстановкуРасширения = Неопределено, ПослеУстановки = Ложь) Экспорт
	
	Попытка
		МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПутьВК", ПутьВК);
	Контекст.Вставить("ПослеУстановки", ПослеУстановки);
	Контекст.Вставить("ПараметрыКриптографии", ПараметрыКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ПредлагатьУстановкуРасширения", ПредлагатьУстановкуРасширения);
	
	Если МенеджерКриптографии = Неопределено Тогда // компонента еще не подключена
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияКомпоненты", ЭтотОбъект, Контекст);
		НачатьПодключениеВнешнейКомпоненты(Оповещение, ПутьВК, "ЭДОNative");
	Иначе
		СоздатьМенеджерКриптографииИнициализацияНачало(Контекст);
	КонецЕсли;
			
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПодключенияКомпоненты(Подключена, ВходящийКонтекст) Экспорт
	
	Если Подключена Тогда
		СоздатьМенеджерКриптографииИнициализацияНачало(ВходящийКонтекст);
	Иначе
		Если ВходящийКонтекст.ПослеУстановки Тогда
			// Побробовали установить компоненту, но не вышло
			
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии();
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		Иначе
			// Возможно компонента еще не установлена
			Если ВходящийКонтекст.ПредлагатьУстановкуРасширения = Истина
				ИЛИ ВходящийКонтекст.ПредлагатьУстановкуРасширения = Неопределено И ВходящийКонтекст.ВыводитьСообщения Тогда
				Оповещение = Новый ОписаниеОповещения(
					"СоздатьМенеджерКриптографииПослеУстановкиКомпоненты", ЭтотОбъект, ВходящийКонтекст);
				НачатьУстановкуВнешнейКомпоненты(Оповещение, ВходящийКонтекст.ПутьВК);
			Иначе
				ВыполнитьОбработкуОповещения(
					ВходящийКонтекст.ОповещениеОЗавершении,
					ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии()));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиКомпоненты(ВходящийКонтекст) Экспорт
	
	СоздатьМенеджерКриптографии(
		ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.ВыводитьСообщения,
		ВходящийКонтекст.ПараметрыКриптографии,, Истина);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииИнициализацияНачало(ВходящийКонтекст) Экспорт
	
	МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
	
	ВходящийКонтекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках", ЭтотОбъект, ВходящийКонтекст,
		"СоздатьМенеджерКриптографииПриОшибкеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках", ЭтотОбъект);	
		
	// Отключим вывод сообщений об ошибках пользователю. 
	// Ошибки будем получать из свойства СписокОшибок.
	МенеджерКриптографии.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Оповещение, Истина);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках(ВходящийКонтекст) Экспорт
	
	// Если в СоздатьМенеджерКриптографии были переданы значения параметров криптопровайдера,
	// то будут использованы они, иначе будут получены данные из ИБ или выполнен перебор по поддерживаемых криптопровайдерам.
	Если ВходящийКонтекст.ПараметрыКриптографии <> Неопределено Тогда
		ДоступныеКриптопровайдеры = Новый Массив;
		ДоступныеКриптопровайдеры.Добавить(ВходящийКонтекст.ПараметрыКриптографии);
	Иначе
		ДоступныеКриптопровайдеры = Неопределено;
		ОписаниеОшибки = "";
		Если Не ЗаполнитьПараметрыКриптографии(ДоступныеКриптопровайдеры, ОписаниеОшибки) Тогда
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщение, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДоступныеКриптопровайдеры", ДоступныеКриптопровайдеры);
	Контекст.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
	Контекст.Вставить("ТекущийКриптопровайдер", 0);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииПослеИнициализации", ЭтотОбъект, Контекст);
		
	СоздатьМенеджерКриптографииИнициализация(Оповещение, Контекст);

КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПриОшибкеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "НеВыводитьСообщенияОбОшибках",, ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииИнициализация(ОповещениеОЗавершении, ВходящийКонтекст)
	
	ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСоздатьМенеджераКриптографии(
		ОповещениеОЗавершении, 
		ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Имя, 
		ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Путь, 
		ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Тип);
		
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеИнициализации(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	// Надо проверить не было ли ошибок при инициализации - проверить свойство СписокОшибок.
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации", ЭтотОбъект, ВходящийКонтекст);
	
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации(СписокОшибок, ВходящийКонтекст) Экспорт
	
	// Менеджер криптографии инициализовать не удалось.
	// Попробуем следующий криптопровайдер.
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		// Сохраним информацию в журнал регистрации.
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка создания менеджер криптографии (%2, %3, %4) по причине:
	              |%1'"),
			СписокОшибок,
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Имя, 
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Путь, 
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Тип); 
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия(), "Информация", ОписаниеОшибки,,Истина);
		
		// Попробуем следующий криптопровайдер.		
		Если ВходящийКонтекст.ТекущийКриптопровайдер < ВходящийКонтекст.ДоступныеКриптопровайдеры.ВГраница() Тогда
			ВходящийКонтекст.ТекущийКриптопровайдер = ВходящийКонтекст.ТекущийКриптопровайдер + 1;
			Оповещение = Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографииПослеИнициализации", ЭтотОбъект, ВходящийКонтекст);
			
			СоздатьМенеджерКриптографииИнициализация(Оповещение, ВходящийКонтекст);	
		Иначе
			// Менеджер криптографии инициализовать не удалось.
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии();
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		КонецЕсли;	
	Иначе
		// Криптопровайдеры могут маскироваться под другие, например, ViPNet может маскироваться под CryptoPro.
		// Поэтому проверим установлен ли криптопровайдер в системе.
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПолученияСпискаКриптопровайдеров", ЭтотОбъект, ВходящийКонтекст);
		ПолучитьКриптопровайдеры(Оповещение, Истина, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПолученияСпискаКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		ТекущийКриптопровайдер = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер];
		КриптопровайдерУстановленВСистеме = Ложь;
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если ТекущийКриптопровайдер.Имя = Криптопровайдер.Имя
				И ТекущийКриптопровайдер.Тип = Криптопровайдер.Тип Тогда
				КриптопровайдерУстановленВСистеме = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КриптопровайдерУстановленВСистеме Тогда
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии));
		Иначе
			СписокОшибок = НСтр("ru = 'Менеджер криптографии успешно инициализирован с указанными параметрами криптопровайдера, но криптопровайдер не найден в системе.'");		
			СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации(СписокОшибок, ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьКриптопровайдеры

Процедура ПолучитьКриптопровайдеры(ОповещениеОЗавершении, ТолькоПоддерживаемые, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ТолькоПоддерживаемые);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, 
		"ПолучитьКриптопровайдерыПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, 
		ВыводитьСообщения, 
		МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("Криптопровайдеры", Новый Массив);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьКриптопровайдерыЗавершение", ЭтотОбъект, Контекст);
			ПолучитьКриптопровайдерыПолучитьСледующий(Оповещение, Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Криптопровайдеры = Новый Массив;
		
		CryptoProCSP = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro();
		ViPNetCSP = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet();
		
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если ВходящийКонтекст.ВходящиеПараметры[0] // ТолькоПоддерживаемые
				И НЕ (CryptoProCSP.Имя = Криптопровайдер.Имя И CryptoProCSP.Тип = Криптопровайдер.Тип)
				И НЕ (ViPNetCSP.Имя = Криптопровайдер.Имя И ViPNetCSP.Тип = Криптопровайдер.Тип) Тогда
				Продолжить;
			КонецЕсли;		
			Криптопровайдеры.Добавить(Криптопровайдер);
		КонецЦикла;
		
		Результат = ПодготовитьРезультат(Истина, "Криптопровайдеры", Новый ФиксированныйМассив(Криптопровайдеры), ВходящийКонтекст);
	Иначе
		Результат = ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПолучитьСледующий(ОповещениеОЗавершении, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьКриптопровайдерыПослеПолучитьСледующийКриптопровайдер", ЭтотОбъект, Контекст,
		"ПолучитьКриптопровайдерыПриОшибкеПолучитьСледующийКриптопровайдер", ЭтотОбъект);
		
	Имя = "";
	Путь = "";
	Тип = 0;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийКриптопровайдер(Оповещение, Имя, Путь, Тип);
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПослеПолучитьСледующийКриптопровайдер(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // Криптопровайдер получен
		Криптопровайдер = Новый Структура("Имя,Путь,Тип", "", "", 0);
		Криптопровайдер.Имя = Параметры[0];
		Криптопровайдер.Путь = Параметры[1];
		Криптопровайдер.Тип = Параметры[2];
		
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Криптопровайдеры.Добавить(Новый ФиксированнаяСтруктура(Криптопровайдер));		
		ПолучитьКриптопровайдерыПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "Криптопровайдеры", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Криптопровайдеры, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПриОшибкеПолучитьСледующийКриптопровайдер(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийКриптопровайдер",, ИнформацияОбОшибке);			  
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьАлгоритмы

Процедура ПолучитьАлгоритмы(ОповещениеОЗавершении, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПолучитьАлгоритмыПослеСозданияМенеджераКриптографии",, ВыводитьСообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПолучитьАлгоритмыПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("Алгоритмы", Новый Массив);
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьАлгоритмыЗавершение", ЭтотОбъект, Контекст);
		ПолучитьАлгоритмыПолучитьСледующий(Оповещение, Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Результат = ПодготовитьРезультат(Истина, "Алгоритмы", Новый ФиксированныйМассив(Результат.Алгоритмы), ВходящийКонтекст);
	Иначе
		Результат = ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыПолучитьСледующий(ОповещениеОЗавершении, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьАлгоритмыПослеПолучитьСледующийАлгоритм", ЭтотОбъект, Контекст,
		"ПолучитьАлгоритмыПриОшибкеПолучитьСледующийАлгоритм", ЭтотОбъект);
		
	Алгоритмы = ОповещениеОЗавершении.ДополнительныеПараметры.Алгоритмы;
	
	Если Алгоритмы.Количество() > 0 Тогда
		Идентификатор = Алгоритмы[Алгоритмы.ВГраница()].Идентификатор;
		Имя = Алгоритмы[Алгоритмы.ВГраница()].Имя;
		ДлинаКлюча = Алгоритмы[Алгоритмы.ВГраница()].ДлинаКлюча;
	Иначе
		Идентификатор = 0;
		Имя = "";
		ДлинаКлюча = 0;
	КонецЕсли;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийАлгоритм(Оповещение, Идентификатор, Имя, ДлинаКлюча);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыПослеПолучитьСледующийАлгоритм(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // Алгоритм получен
		Алгоритм = Новый Структура("Идентификатор,Имя,ДлинаКлюча", "", "", 0);
		Алгоритм.Идентификатор = Параметры[0];
		Алгоритм.Имя = Параметры[1];
		Алгоритм.ДлинаКлюча = Параметры[2];
		
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Алгоритмы.Добавить(Новый ФиксированнаяСтруктура(Алгоритм));		
		ПолучитьАлгоритмыПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "Алгоритмы", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Алгоритмы, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыПриОшибкеПолучитьСледующийАлгоритм(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийАлгоритм",, ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьКонтейнерыКлючей

Процедура ПолучитьКонтейнерыКлючей(ОповещениеОЗавершении, ПолучатьУникальныеИмена, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ПолучатьУникальныеИмена);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПолучитьКонтейнерыКлючейПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("КонтейнерыКлючей", Новый Массив);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьКонтейнерыКлючейЗавершение", ЭтотОбъект, Контекст);
		ПолучитьКонтейнерыКлючейПолучитьСледующий(
			Оповещение, ВходящийКонтекст.ВходящиеПараметры[0], Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейЗавершение(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		Результат = ПодготовитьРезультат(Истина, "КонтейнерыКлючей", Новый ФиксированныйМассив(Результат.КонтейнерыКлючей), ВходящийКонтекст);
	Иначе
		Результат = ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПолучитьСледующий(ОповещениеОЗавершении, ПолучатьУникальныеИмена, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьКонтейнерыКлючейПослеПолучитьСледующийКонтейнерКлючей", ЭтотОбъект, Контекст,
		"ПолучитьКонтейнерыКлючейПриОшибкеПолучитьСледующийКонтейнерКлючей", ЭтотОбъект);
		
	КонтейнерыКлючей = ОповещениеОЗавершении.ДополнительныеПараметры.КонтейнерыКлючей;
	
	Если КонтейнерыКлючей.Количество() > 0 Тогда
		ИмяКонтейнера = КонтейнерыКлючей[КонтейнерыКлючей.ВГраница()];
	Иначе
		ИмяКонтейнера = "";
	КонецЕсли;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийКонтейнерКлючей(Оповещение, ИмяКонтейнера, ПолучатьУникальныеИмена);
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПослеПолучитьСледующийКонтейнерКлючей(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // Контейнер получен
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.КонтейнерыКлючей.Добавить(Параметры[0]);		
		ПолучитьКонтейнерыКлючейПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении, Параметры[1], ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "КонтейнерыКлючей", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.КонтейнерыКлючей, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПриОшибкеПолучитьСледующийКонтейнерКлючей(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийКонтейнерКлючей",, ИнформацияОбОшибке);
		
КонецПроцедуры

#КонецОбласти

#Область СгенерироватьИмяКонтейнера

Функция СгенерироватьИмяКонтейнера(ОсноваИмени) Экспорт
	
	ТекущаяДатаНаСервере = ОбщегоНазначенияКлиент.ДатаСеанса();
	ОсноваИмениБезНедопустимыхСимволов = ЗаменитьНедопустимыеСимволы(ОсноваИмени);
	Возврат Формат(ТекущаяДатаНаСервере, "ДФ='гггг-ММ-дд ЧЧ-мм-сс'") + " " + Лев(ОсноваИмениБезНедопустимыхСимволов, 43);
	
КонецФункции

#КонецОбласти

#Область СоздатьКонтейнерКлючей

Процедура СоздатьКонтейнерКлючей(ОповещениеОЗавершении, ИмяКонтейнера, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ИмяКонтейнера);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "СоздатьКонтейнерКлючейПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура СоздатьКонтейнерКлючейПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		
		Оповещение = Новый ОписаниеОповещения("СоздатьКонтейнерКлючейПослеСоздания", ЭтотОбъект, Контекст);
		Результат.МенеджерКриптографии.НачатьВызовСоздатьКонтейнер(
			Оповещение, ВходящийКонтекст.ВходящиеПараметры[0]);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

// НачатьВызовСоздатьКонтейнер - не вызывает исключение
Процедура СоздатьКонтейнерКлючейПослеСоздания(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "УникальноеИмяКонтейнера", Результат, ВходящийКонтекст));	
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьКонтейнерКлючейПослеПолученияОшибки", ЭтотОбъект, ВходящийКонтекст);
	
		ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьКонтейнерКлючейПослеПолученияОшибки(СписокОшибок, ВходящийКонтекст) Экспорт
	
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, СписокОшибок);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Ложь, "ОписаниеОшибки", СписокОшибок, ВходящийКонтекст));
		
КонецПроцедуры

#КонецОбласти

#Область СоздатьЗапросНаСертификат

Процедура СоздатьЗапросНаСертификат(ОповещениеОЗавершении, ТелоЗапросаНаСертификат, ИмяКонтейнера, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	Флаг = 67108864; // Квалифицированная ЭП
	
	ВходящиеПараметры = ПараметрыВМассив(3, ТелоЗапросаНаСертификат, ИмяКонтейнера, Флаг);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "СоздатьЗапросНаСертификатПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		ПолучитьИмяФайла(Неопределено, ВходящийКонтекст, "СоздатьЗапросНаСертификатПослеПолученияИмениФайла");
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьЗапросНаСертификатПослеСоздания", ЭтотОбъект, ВходящийКонтекст);
				
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСоздатьЗапросНаСертификат(
			Оповещение, 
			ВходящиеПараметры[0], // тело запроса 
			ВходящиеПараметры[1], // имя контейнера 
			Результат.ИмяФайла, // файл запроса
			ВходящиеПараметры[2] // флаг
			);	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеСоздания(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаЗапросаНаСертификат", Параметры[2]);
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьЗапросНаСертификатПослеЧтенияИзФайла", ЭтотОбъект, ВходящийКонтекст);
			
		ОперацииСФайламиЭДКОКлиент.ФайлВТекст(Оповещение, Параметры[2], "UTF-8", ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.ДвоичныеДанные);	
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "СоздатьЗапросНаСертификат",
			ОписаниеОшибкиНеУдалосьСформироватьЗапросНаСертификат());
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеЧтенияИзФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "ЗапросНаСертификат", Результат.Текст, ВходящийКонтекст));
			
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.ИмяФайлаЗапросаНаСертификат);
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "СоздатьЗапросНаСертификат",
			ОписаниеОшибкиНеУдалосьСформироватьЗапросНаСертификат());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СвязатьСертификатСКонтейнеромКлючей

Процедура СвязатьСертификатСКонтейнеромКлючей(ОповещениеОЗавершении, Сертификат, ИмяКонтейнераКлючей, ВыводитьСообщения, МенеджерКриптографии) Экспорт
		
	ВходящиеПараметры = ПараметрыВМассив(2, Сертификат, ИмяКонтейнераКлючей);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "СвязатьСертификатСКонтейнеромКлючейПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура СвязатьСертификатСКонтейнеромКлючейПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);

		Оповещение = Новый ОписаниеОповещения(
			"СвязатьСертификатСКонтейнеромКлючейПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"СвязатьСертификатСКонтейнеромКлючейПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСвязатьСертификатСКонтейнеромКлючей(
			Оповещение, 
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат в хранилище
			ВходящиеПараметры[1] // контейнер
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СвязатьСертификатСКонтейнеромКлючейПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина,,, ВходящийКонтекст));
	
КонецПроцедуры

Процедура СвязатьСертификатСКонтейнеромКлючейПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "СвязатьСертификатСКонтейнеромКлючей",
		ОписаниеОшибкиНеУдалосьПривязатьСертификатКЗакрытомуКлючу(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьСертификатВКонтейнерИХранилище

Процедура УстановитьСертификатВКонтейнерИХранилище(ОповещениеОЗавершении, ИмяФайлаСертификата, ИмяКонтейнераКлючей, ВыводитьСообщения, МенеджерКриптографии) Экспорт
		
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяФайлаСертификата, ИмяКонтейнераКлючей);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "УстановитьСертификатВКонтейнерИХранилищеПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура УстановитьСертификатВКонтейнерИХранилищеПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);

		Оповещение = Новый ОписаниеОповещения(
			"УстановитьСертификатВКонтейнерИХранилищеПослеВыполнения", ЭтотОбъект, ВходящийКонтекст);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовУстановитьСертификатВКонтейнерИХранилище(
			Оповещение, 
			ВходящиеПараметры[0], // файл сертификата 
			ВходящиеПараметры[1] // контейнер
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификатВКонтейнерИХранилищеПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина,,, ВходящийКонтекст));	
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "УстановитьСертификатВКонтейнерИХранилище",
			ОписаниеОшибкиНеУдалосьУстановитьЛичныйСертификат());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПолучитьСертификаты

Процедура ПолучитьСертификаты(ОповещениеОЗавершении, ХранилищеСертификатов, ВыводитьСообщения, МенеджерКриптографии, ТолькоКлючевыеСвойства = Ложь) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ПолучитьСписокХранилищСертификатов(ХранилищеСертификатов), ТолькоКлючевыеСвойства);
	Если ЗначениеЗаполнено(ВходящиеПараметры[0].ЛокальныеХранилища) Тогда
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ПолучитьСертификатыПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии); 
	Иначе
		ПолучитьСертификатыЗавершение(
			Новый Структура("Выполнено, Сертификаты", Истина, Новый Массив),
			Новый Структура("ОповещениеОЗавершении, ВходящиеПараметры", ОповещениеОЗавершении, ВходящиеПараметры));
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСертификатыПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		МенеджерКриптографии = Результат.МенеджерКриптографии;
		ВходящийКонтекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыЗавершение", ЭтотОбъект, ВходящийКонтекст);
		
		Если Не КлиентПоддерживаетСинхронныеВызовы() Тогда			
			ПолучитьСертификатыПолучитьСледующий(
				Оповещение, ВходящиеПараметры[0].ЛокальныеХранилища, 0, ВходящиеПараметры[1],
				Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);			
		Иначе
			Сертификаты = Новый Массив;
			Для Каждого ТекущееХранилищеСертификатов Из ВходящиеПараметры[0].ЛокальныеХранилища Цикл
				Пока МенеджерКриптографии.ПолучитьСледующийСертификат(ТекущееХранилищеСертификатов) Цикл
					СвойстваСертификатаСтрока = СтрСоединить(ПолучитьСписокСвойствСертификата(), ",");
					Сертификат = Новый Структура(СвойстваСертификатаСтрока);
					Сертификат.Наименование              = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЗаменитьНечитаемыеСимволы(МенеджерКриптографии.ИмяСертификата);
					Сертификат.Версия                    = МенеджерКриптографии.Версия;
					Сертификат.СерийныйНомер             = МенеджерКриптографии.СерийныйНомер;
					Сертификат.Поставщик                 = МенеджерКриптографии.Поставщик;
					Сертификат.Владелец                  = МенеджерКриптографии.Субъект;
					Сертификат.Отпечаток                 = МенеджерКриптографии.Отпечаток;
					Сертификат.ИспользоватьДляПодписи    = МенеджерКриптографии.ПригоденДляПодписывания;
					Сертификат.ИспользоватьДляШифрования = МенеджерКриптографии.ПригоденДляШифрования;
					Сертификат.ДействителенС             = МенеджерКриптографии.ДействителенС;
					Сертификат.ДействителенПо            = МенеджерКриптографии.ДействителенДо;
					Сертификат.Хранилище                 = МенеджерКриптографии.ИмяХранилища;
					
					Сертификаты.Добавить(Новый ФиксированнаяСтруктура(Сертификат));			
				КонецЦикла;
			КонецЦикла;
						
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "Сертификаты", Сертификаты, ВходящийКонтекст));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ВходящийКонтекст.ВходящиеПараметры[0].ХранилищаНаСервере) Тогда
			ПолучитьСертификатыЗавершение(
				Новый Структура("Выполнено, Сертификаты", Истина, Новый Массив),
				ВходящийКонтекст);
		Иначе
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении, 
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификаты = Результат.Сертификаты;
		Если ВходящийКонтекст.ВходящиеПараметры[0].ХранилищаНаСервере.Количество() > 0 Тогда
			СертификатыНаСервере = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСертификаты(
				ВходящийКонтекст.ВходящиеПараметры[0].ХранилищаНаСервере);
			Для Каждого Сертификат Из СертификатыНаСервере Цикл
				Сертификаты.Добавить(Сертификат);
			КонецЦикла;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Истина, "Сертификаты", Сертификаты, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСертификатыПолучитьСледующий(ОповещениеОЗавершении, ХранилищаСертификатов, ТекущееХранилище,
												ТолькоКлючевыеСвойства, МенеджерКриптографии, ВыводитьСообщения) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ХранилищаСертификатов", ХранилищаСертификатов);
	Контекст.Вставить("ТекущееХранилище", ТекущееХранилище);
	Контекст.Вставить("ТолькоКлючевыеСвойства", ТолькоКлючевыеСвойства);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолучитьСледующийСертификат", ЭтотОбъект, Контекст,
		"ПолучитьСертификатыПриОшибкеПолучитьСледующийСертификат", ЭтотОбъект);
		
	МенеджерКриптографии.НачатьВызовПолучитьСледующийСертификат(ОписаниеОповещения, ХранилищаСертификатов[ТекущееХранилище]);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолучитьСледующийСертификат(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда	
		Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыПослеПолученияСвойств", ЭтотОбъект, ВходящийКонтекст);
			
		ПолучитьСвойстваСертификата(Оповещение, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ТолькоКлючевыеСвойства);	
	Иначе
		Если ВходящийКонтекст.ТекущееХранилище < ВходящийКонтекст.ХранилищаСертификатов.ВГраница() Тогда				
			ПолучитьСертификатыПолучитьСледующий(
				ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.ХранилищаСертификатов, ВходящийКонтекст.ТекущееХранилище + 1,
				ВходящийКонтекст.ТолькоКлючевыеСвойства, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
		Иначе
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "Сертификаты", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Сертификаты, ВходящийКонтекст));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыПриОшибкеПолучитьСледующийСертификат(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийСертификат",, ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияСвойств(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
			
		СвойстваСертификата = Результат.СвойстваСертификата;

		ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;	
		Если ОповещениеОЗавершении.ДополнительныеПараметры.Свойство("Сертификаты") Тогда
			ОповещениеОЗавершении.ДополнительныеПараметры.Сертификаты.Добавить(Новый ФиксированнаяСтруктура(СвойстваСертификата));
		Иначе
			Сертификаты = Новый Массив;
			Сертификаты.Добавить(Новый ФиксированнаяСтруктура(СвойстваСертификата));
			ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("Сертификаты", Сертификаты);
		КонецЕсли;
		ПолучитьСертификатыПолучитьСледующий(
			ОповещениеОЗавершении, ВходящийКонтекст.ХранилищаСертификатов, ВходящийКонтекст.ТекущееХранилище, 
			ВходящийКонтекст.ТолькоКлючевыеСвойства, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе 
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокСвойствСертификата(ТолькоКлючевыеСвойства = Ложь)
	
	СписокСвойствСертификата = Новый Массив;
	СписокСвойствСертификата.Добавить("СерийныйНомер");
	СписокСвойствСертификата.Добавить("Поставщик");
	СписокСвойствСертификата.Добавить("Отпечаток");
	
	Если Не ТолькоКлючевыеСвойства Тогда
		СписокСвойствСертификата.Добавить("Версия");
		СписокСвойствСертификата.Добавить("Наименование");
		СписокСвойствСертификата.Добавить("Владелец");		
		СписокСвойствСертификата.Добавить("ИспользоватьДляПодписи");
		СписокСвойствСертификата.Добавить("ИспользоватьДляШифрования");
		СписокСвойствСертификата.Добавить("ДействителенС");
		СписокСвойствСертификата.Добавить("ДействителенПо");
		СписокСвойствСертификата.Добавить("Хранилище");
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(СписокСвойствСертификата);
	
КонецФункции

#КонецОбласти

#Область ПолучитьСвойстваСертификата

Процедура ПолучитьСвойстваСертификата(ОповещениеОЗавершении, ВыводитьСообщения, МенеджерКриптографии, ТолькоКлючевыеСвойства = Ложь) 
	
	Контекст = Новый Структура;
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	СписокСвойствСертификатаСтрокой = СтрСоединить(ПолучитьСписокСвойствСертификата(ТолькоКлючевыеСвойства), ",");
	СвойстваСертификата = Новый Структура(СписокСвойствСертификатаСтрокой);
	Контекст.Вставить("СвойстваСертификата", СвойстваСертификата); 
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСвойстваСертификатаПослеПолучения", ЭтотОбъект, Контекст);
		
	ПолучитьСвойствоСертификата(0, ВыводитьСообщения, МенеджерКриптографии, Оповещение, ТолькоКлючевыеСвойства);
	
КонецПроцедуры

Процедура ПолучитьСвойстваСертификатаПослеПолучения(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящийКонтекст.СвойстваСертификата, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойствоСертификата(ИндексСвойства, ВыводитьСообщения, МенеджерКриптографии, ОповещениеОЗавершении, ТолькоКлючевыеСвойства)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИндексСвойства", ИндексСвойства);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ТолькоКлючевыеСвойства", ТолькоКлючевыеСвойства);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСвойствоСертификатаПослеПолучения", ЭтотОбъект, Контекст,
		"ПолучитьСвойствоСертификатаПриОшибкеПолучения", ЭтотОбъект);
		
	СписокСвойствСертификата = ПолучитьСписокСвойствСертификата();
	Свойство = СписокСвойствСертификата[ИндексСвойства];
	Если Свойство = "Версия" Тогда
		МенеджерКриптографии.НачатьПолучениеВерсия(Оповещение);
	ИначеЕсли Свойство = "Наименование" Тогда
		МенеджерКриптографии.НачатьПолучениеИмяСертификата(Оповещение);
	ИначеЕсли Свойство = "СерийныйНомер" Тогда
		МенеджерКриптографии.НачатьПолучениеСерийныйНомер(Оповещение);
	ИначеЕсли Свойство = "Поставщик" Тогда
		МенеджерКриптографии.НачатьПолучениеПоставщик(Оповещение);
	ИначеЕсли Свойство = "Владелец" Тогда
		МенеджерКриптографии.НачатьПолучениеСубъект(Оповещение);
	ИначеЕсли Свойство = "Отпечаток" Тогда
		МенеджерКриптографии.НачатьПолучениеОтпечаток(Оповещение);
	ИначеЕсли Свойство = "ИспользоватьДляПодписи" Тогда
		МенеджерКриптографии.НачатьПолучениеПригоденДляПодписывания(Оповещение);
	ИначеЕсли Свойство = "ИспользоватьДляШифрования" Тогда
		МенеджерКриптографии.НачатьПолучениеПригоденДляШифрования(Оповещение);
	ИначеЕсли Свойство = "ДействителенС" Тогда
		МенеджерКриптографии.НачатьПолучениеДействителенС(Оповещение);
	ИначеЕсли Свойство = "ДействителенПо" Тогда
		МенеджерКриптографии.НачатьПолучениеДействителенДо(Оповещение);
	ИначеЕсли Свойство = "Хранилище" Тогда
		МенеджерКриптографии.НачатьПолучениеИмяХранилища(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойствоСертификатаПослеПолучения(Значение, ВходящийКонтекст) Экспорт
	
	СписокСвойствСертификата = ПолучитьСписокСвойствСертификата(ВходящийКонтекст.ТолькоКлючевыеСвойства);
	Свойство = СписокСвойствСертификата[ВходящийКонтекст.ИндексСвойства];
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	Если Свойство = "Наименование" Тогда
		Значение = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЗаменитьНечитаемыеСимволы(Значение);
	КонецЕсли;
	ОповещениеОЗавершении.ДополнительныеПараметры.СвойстваСертификата[Свойство] = Значение;
	
	Если ВходящийКонтекст.ИндексСвойства >= СписокСвойствСертификата.ВГраница() Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении, 
			ПодготовитьРезультат(
				Истина, "СвойстваСертификата", 
				ОповещениеОЗавершении.ДополнительныеПараметры.СвойстваСертификата,
				ВходящийКонтекст));
	Иначе 
		ПолучитьСвойствоСертификата(
			ВходящийКонтекст.ИндексСвойства + 1, ВходящийКонтекст.ВыводитьСообщения, 
			ВходящийКонтекст.МенеджерКриптографии, ОповещениеОЗавершении, ВходящийКонтекст.ТолькоКлючевыеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойствоСертификатаПриОшибкеПолучения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, 
		ПолучитьСписокСвойствСертификата()[ВходящийКонтекст.ИндексСвойства],, ИнформацияОбОшибке);
			
КонецПроцедуры

#КонецОбласти

#Область ЭкспортироватьСертификатВФайл

Процедура ЭкспортироватьСертификатВФайл(ОповещениеОЗавершении, Сертификат, ИмяФайлаСертификата, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, Сертификат, ИмяФайлаСертификата);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ЭкспортироватьСертификатВФайлПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[1], ВходящийКонтекст, "ЭкспортироватьСертификатВФайлПослеПолученияИмениФайла");
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		Оповещение = Новый ОписаниеОповещения(
			"ЭкспортироватьСертификатВФайлПослеПолученияСертификата", ЭтотОбъект, ВходящийКонтекст);
			
		Если ЗаполненСерийныйНомерСертификата(ВходящиеПараметры[0]) Тогда
			РезультатВыполнения = ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящиеПараметры[0], ВходящийКонтекст);
			РезультатВыполнения.Вставить("СертификатНайден", Истина);
			ВыполнитьОбработкуОповещения(
				Оповещение,
				РезультатВыполнения);
		Иначе
			НайтиСертификат(
				Оповещение, ВходящиеПараметры[0], Ложь, 
				ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии); 	
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПолученияСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
					
		Оповещение = Новый ОписаниеОповещения(
			"ЭкспортироватьСертификатВФайлПослеЭкспорта", ЭтотОбъект, ВходящийКонтекст,
			"ЭкспортироватьСертификатВФайлПриОшибкеЭкспорта", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	 	ВходящийКонтекст.МенеджерКриптографии.НачатьВызовЭкспортироватьСертификат(
			Оповещение, 
			ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, ВходящийКонтекст.СвойстваСертификата.Поставщик, // сертификат для экспорта
			ВходящийКонтекст.ИмяФайлаРезультата // файл сертификата
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеЭкспорта(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "ИмяФайлаСертификата", Параметры[2], ВходящийКонтекст));	
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПриОшибкеЭкспорта(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ЭкспортироватьСертификат",
		ОписаниеОшибкиНеУдалосьВыгрузитьСертификат(), ИнформацияОбОшибке);

КонецПроцедуры

#КонецОбласти

#Область ЭкспортироватьСертификатВBase64

Процедура ЭкспортироватьСертификатВBase64(ОповещениеОЗавершении, Сертификат, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Если СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			ПодготовитьРезультат(
				Истина, "СтрокаBase64", 
				КриптографияЭДКОСлужебныйВызовСервера.ЭкспортироватьСертификатВBase64(Сертификат), Контекст));
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВBase64ПослеЭкспортВФайл", ЭтотОбъект, Контекст);
	ЭкспортироватьСертификатВФайл(
		Оповещение, Сертификат, ".cer", ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВBase64ПослеЭкспортВФайл(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаСертификата", Результат.ИмяФайлаСертификата);
		Оповещение = Новый ОписаниеОповещения("ЭкспортироватьСертификатВBase64ПослеКонвертацииВBase64", ЭтотОбъект, ВходящийКонтекст);
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			ВходящийКонтекст.ОповещениеОЗавершении, Результат.ИмяФайлаСертификата, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВBase64ПослеКонвертацииВBase64(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.ИмяФайлаСертификата);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИмпортироватьСертификат

Процедура ИмпортироватьСертификат(ОповещениеОЗавершении, ИмяФайлаСертификата, ХранилищеСертификатов, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяФайлаСертификата, ХранилищеСертификатов);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ИмпортироватьСертификатПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);

		Оповещение = Новый ОписаниеОповещения(
			"ИмпортироватьСертификатПослеИмпорта", ЭтотОбъект, ВходящийКонтекст,
			"ИмпортироватьСертификатПриОшибкеИмпорта", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовИмпортироватьСертификат(
			Оповещение, 
			ВходящиеПараметры[0], // файл сертификата 
			ВходящиеПараметры[1] // хранилище
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПослеИмпорта(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ИмпортироватьСертификатПослеИмпортаПослеПолученияСвойствСертификата", ЭтотОбъект, ВходящийКонтекст);
	
	ПолучитьСвойстваСертификата(Оповещение, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПослеИмпортаПослеПолученияСвойствСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "СвойстваСертификата", Результат.СвойстваСертификата, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПриОшибкеИмпорта(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
		
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ИмпортироватьСертификат",
		ОписаниеОшибкиНеУдалосьИмпортироватьСертификат(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификат

Процедура НайтиСертификат(ОповещениеОЗавершении, Сертификат, ВыполнятьПроверку, ВыводитьСообщения, МенеджерКриптографии, ТолькоКлючевыеСвойства = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатПослеПоиска", ЭтотОбъект, Контекст);
	
	Сертификаты = Новый Массив;
	Сертификаты.Добавить(Сертификат);
		
	НайтиСертификаты(Оповещение, Сертификаты, ВыполнятьПроверку, ВыводитьСообщения, МенеджерКриптографии, ТолькоКлючевыеСвойства);
		
КонецПроцедуры

Процедура НайтиСертификатПослеПоиска(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификаты = Результат.Сертификаты;
		Если Сертификаты.Количество() >= 1 Тогда
			СертификатНайден = Истина;
		Иначе
			СертификатНайден = Ложь;
		КонецЕсли;
		
		РезультатВыполнения = ПодготовитьРезультат(Истина, "СертификатНайден", СертификатНайден, ВходящийКонтекст);
		Если СертификатНайден Тогда
			РезультатВыполнения.Вставить("СвойстваСертификата", Сертификаты[0]);
		КонецЕсли;
		РезультатВыполнения.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			РезультатВыполнения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификаты

Процедура НайтиСертификаты(ОповещениеОЗавершении, Сертификаты, ВыполнятьПроверку, ВыводитьСообщения, МенеджерКриптографии, ТолькоКлючевыеСвойства = Ложь) Экспорт
	
	СертификатыВЗащищенномХранилищеНаСервере = Новый Массив;
	СертификатыВЛокальномХранилищеПоискПоОтпечатку = Новый Массив;
	СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру = Новый Массив;
	
	Для Каждого Сертификат Из Сертификаты Цикл
		Если СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
			СертификатыВЗащищенномХранилищеНаСервере.Добавить(Сертификат);
		Иначе
			Если ЗаполненСерийныйНомерСертификата(Сертификат) Тогда
				СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру.Добавить(Сертификат);
			Иначе
				СертификатыВЛокальномХранилищеПоискПоОтпечатку.Добавить(Сертификат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("СертификатыВЗащищенномХранилищеНаСервере", СертификатыВЗащищенномХранилищеНаСервере);
	Контекст.Вставить("СертификатыВЛокальномХранилищеПоискПоОтпечатку", СертификатыВЛокальномХранилищеПоискПоОтпечатку);
	Контекст.Вставить("СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру", СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру);
	Контекст.Вставить("ВыполнятьПроверку", ВыполнятьПроверку);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);

	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатПослеПоискаПоОтпечаткам", ЭтотОбъект, Контекст);
		
	Отпечатки = Новый Массив;
	Для Каждого Сертификат Из СертификатыВЛокальномХранилищеПоискПоОтпечатку Цикл
		Отпечатки.Добавить(Сертификат.Отпечаток);
	КонецЦикла;
	
	Если Отпечатки.Количество() = 0 Тогда
		Результат = Новый Структура("Выполнено,Сертификаты,НенайденныеСертификаты", Истина, Новый Массив, Новый Массив); 
		НайтиСертификатПослеПоискаПоОтпечаткам(Результат , Контекст);
	Иначе
		СписокХранилищСертификатов = Новый Массив;
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "MY", Истина));
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "AddressBook", Истина));
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "CA", Истина));
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "ROOT", Истина));
		
		НайтиСертификатыПоОтпечаткам(Оповещение, Отпечатки, СписокХранилищСертификатов, ВыполнятьПроверку, ВыводитьСообщения, МенеджерКриптографии);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПослеПоискаПоОтпечаткам(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("НайденныеСертификаты", Результат.Сертификаты);
		ВходящийКонтекст.Вставить("МенеджерКриптографии", ?(Результат.Свойство("МенеджерКриптографии"), Результат.МенеджерКриптографии, Неопределено));
		НенайденныеСертификаты = Новый Массив;
		Для Каждого НенайденныйСертификат Из Результат.НенайденныеСертификаты Цикл
			НенайденныеСертификаты.Добавить(Новый Структура("Отпечаток", НенайденныйСертификат));
		КонецЦикла;
		
		ВходящийКонтекст.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
	Иначе 
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
			Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатыПослеПоискаПоСерийнымНомерам", ЭтотОбъект, ВходящийКонтекст);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Оповещение);
	Контекст.Вставить("Сертификаты", ВходящийКонтекст.СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру);
	Контекст.Вставить("ТекущийСертификат", 0);
	Контекст.Вставить("ВыполнятьПроверку", ВходящийКонтекст.ВыполнятьПроверку);
	Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
	Контекст.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
	Контекст.Вставить("НайденныеСертификаты", Новый Массив);
	Контекст.Вставить("НенайденныеСертификаты", Новый Массив);

	Если ВходящийКонтекст.СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру.Количество() = 0 Тогда
		Результат = Новый Структура("Выполнено,НайденныеСертификаты,НенайденныеСертификаты", Истина, Новый Массив, Новый Массив);
		НайтиСертификатыПослеПоискаПоСерийнымНомерам(Результат, ВходящийКонтекст);
	Иначе
		НайтиСертификатыПоСерийнымНомерам(Контекст);
	КонецЕсли;

КонецПроцедуры

Процедура НайтиСертификатыПоСерийнымНомерам(ВходящийКонтекст)
	
	Если ВходящийКонтекст.ТекущийСертификат < ВходящийКонтекст.Сертификаты.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатыПослеПоискаПоСерийномуНомеру", ЭтотОбъект, ВходящийКонтекст);
		НайтиСертификатПоСерийномуНомеру(
			Оповещение, 
			ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат].СерийныйНомер, 
			ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат].Поставщик,
			ВходящийКонтекст.ВыполнятьПроверку, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);			
	Иначе
		Результат = ПодготовитьРезультат(Истина, "НайденныеСертификаты", ВходящийКонтекст.НайденныеСертификаты, ВходящийКонтекст);
		Результат.Вставить("НенайденныеСертификаты", ВходящийКонтекст.НенайденныеСертификаты);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПослеПоискаПоСерийномуНомеру(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		ВходящийКонтекст.НайденныеСертификаты.Добавить(Результат.СвойстваСертификата);
	ИначеЕсли Результат.Выполнено И Не Результат.СертификатНайден Тогда
		ВходящийКонтекст.НенайденныеСертификаты.Добавить(ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат]);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
		Возврат;
	КонецЕсли;
	ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
	НайтиСертификатыПоСерийнымНомерам(ВходящийКонтекст);
	
КонецПроцедуры

Процедура НайтиСертификатыПослеПоискаПоСерийнымНомерам(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		НайденныеСертификаты = ВходящийКонтекст.НайденныеСертификаты;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеСертификаты, Результат.НайденныеСертификаты);
		
		НенайденныеСертификаты = ВходящийКонтекст.НенайденныеСертификаты;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НенайденныеСертификаты, Результат.НенайденныеСертификаты);
		
		Если ВходящийКонтекст.СертификатыВЗащищенномХранилищеНаСервере.Количество() > 0 Тогда
			РезультатПоиска = КриптографияЭДКОСлужебныйВызовСервера.НайтиСертификатыВЗащищенномХранилищеНаСервере(
				ВходящийКонтекст.СертификатыВЗащищенномХранилищеНаСервере, ВходящийКонтекст.ВыполнятьПроверку);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеСертификаты, РезультатПоиска.Сертификаты);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НенайденныеСертификаты, РезультатПоиска.НенайденныеСертификаты);
		КонецЕсли;
		
		Результат = ПодготовитьРезультат(Истина, "Сертификаты", НайденныеСертификаты, ВходящийКонтекст);
		Результат.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификатПоСерийномуНомеру

Процедура НайтиСертификатПоСерийномуНомеру(ОповещениеОЗавершении, СерийныйНомер, Поставщик, ВыполнятьПроверку, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(3, СерийныйНомер, Поставщик, ВыполнятьПроверку);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "НайтиСертификатПоСерийномуНомеруПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);

		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатПоСерийномуНомеруПослеПоиска", ЭтотОбъект, ВходящийКонтекст,
			"НайтиСертификатПоСерийномуНомеруПриОшибкеПоиска", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовНайтиСертификат(
			Оповещение, 
			ВходящиеПараметры[0], // серийный номер 
			ВходящиеПараметры[1] // поставщик
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеПоиска(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатПоСерийномуНомеруПослеПолученияСвойствСертификата", ЭтотОбъект, ВходящийКонтекст);
			
		ПолучитьСвойстваСертификата(Оповещение, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Истина, "СертификатНайден", Ложь, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеПолученияСвойствСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		Контекст.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
		
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатПоСерийномуНомеруПослеПроверкиСертификата", ЭтотОбъект, Контекст);
			
		Если ВходящийКонтекст.ВходящиеПараметры[2] Тогда // выполнять проверку
			ПроверитьСертификат(
				Оповещение, Результат.СвойстваСертификата, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина,,, ВходящийКонтекст));
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеПроверкиСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если ВходящийКонтекст.ВходящиеПараметры[2] Тогда // выполнять проверку
			ВходящийКонтекст.СвойстваСертификата.Вставить("Валиден", Результат.Валиден);
		КонецЕсли;
		СвойстваСертификата = Новый ФиксированнаяСтруктура(ВходящийКонтекст.СвойстваСертификата);
		Результат = ПодготовитьРезультат(Истина, "СертификатНайден", Истина, ВходящийКонтекст);
		Результат.Вставить("СвойстваСертификата", СвойстваСертификата);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			Результат);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры
	
Процедура НайтиСертификатПоСерийномуНомеруПриОшибкеПоиска(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "НайтиСертификат",
		ОписаниеОшибкиНеУдалосьНайтиСертификат(), ИнформацияОбОшибке);
		
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификатыПоОтпечаткам

Процедура НайтиСертификатыПоОтпечаткам(ОповещениеОЗавершении, Отпечатки, ХранилищеСертификатов,
										ВыполнятьПроверку, ВыводитьСообщения, МенеджерКриптографии) Экспорт
										
	Контекст = Новый Структура;
	Контекст.Вставить("ВходящиеПараметры", ПараметрыВМассив(3, Отпечатки, ХранилищеСертификатов, ВыполнятьПроверку));
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
			
	КешСертификатов = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСохраненныеСертификаты();
	
	Контекст.Вставить("КешСертификатов", КешСертификатов);
	Контекст.Вставить("Отпечатки", Отпечатки);
		
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатыПоОтпечаткамПослеПолученияКлючевыхСвойств", ЭтотОбъект, Контекст);
		
	ОсталосьНайти = Новый Массив;
	Для Каждого Отпечаток Из Отпечатки Цикл
		Если Не КешСертификатов.Свойство("Отпечаток_" + Отпечаток) Тогда
			ОсталосьНайти.Добавить(Отпечаток);
		КонецЕсли;
	КонецЦикла;
	
	Если ОсталосьНайти.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ХранилищеСертификатов) Тогда
			Если ТипЗнч(ХранилищеСертификатов) = Тип("Строка") Тогда
				Хранилище = Новый Структура("Хранилище, ЭтоЛокальноеХранилище", ХранилищеСертификатов, Истина);
			Иначе
				Хранилище = ХранилищеСертификатов;
			КонецЕсли;
		Иначе
			Хранилище = Неопределено;
		КонецЕсли;
		ПолучитьСертификаты(Оповещение, Хранилище, ВыводитьСообщения, МенеджерКриптографии, Истина);
		
	Иначе
		НайтиСертификатыПоОтпечаткамПослеПолученияКлючевыхСвойств(
			Новый Структура("Выполнено, МенеджерКриптографии", Истина, МенеджерКриптографии), Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПослеПолученияКлючевыхСвойств(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатыПоОтпечаткамПослеПолученияСертификатов", ЭтотОбъект, ВходящийКонтекст);
		Контекст = Новый Структура;	
		Если Результат.Свойство("Сертификаты") Тогда
			КешСертификатов = Новый Структура;
			Для Каждого Сертификат Из Результат.Сертификаты Цикл
				КешСертификатов.Вставить(
					"Отпечаток_" + Сертификат.Отпечаток,
					Новый Структура("СерийныйНомер, Поставщик", Сертификат.СерийныйНомер, Сертификат.Поставщик));
			КонецЦикла;
			Контекст.Вставить("КешСертификатов", КешСертификатов);	
		Иначе 
			Контекст.Вставить("КешСертификатов", ВходящийКонтекст.КешСертификатов);
		КонецЕсли;
		Контекст.Вставить("ТекущийСертификат", 0);
		Контекст.Вставить("Сертификаты", Новый Массив);
		Контекст.Вставить("Отпечатки", ВходящийКонтекст.Отпечатки);
		Контекст.Вставить("ОповещениеОЗавершении", Оповещение);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		НайтиСертификатыПоОтпечаткамПоискомПоСерийномуНомеру(Контекст);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, Контекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПоискомПоСерийномуНомеру(ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.ТекущийСертификат <= ВходящийКонтекст.Отпечатки.ВГраница() Тогда
		Отпечаток = "Отпечаток_" + ВходящийКонтекст.Отпечатки[ВходящийКонтекст.ТекущийСертификат];
		Если ВходящийКонтекст.КешСертификатов.Свойство(Отпечаток) Тогда
			Оповещение = Новый ОписаниеОповещения(
				"НайтиСертификатыПоОтпечаткамПослеПоискаПоСерийномуНомеру", ЭтотОбъект, ВходящийКонтекст);
			Сертификат = ВходящийКонтекст.КешСертификатов[Отпечаток];
			НайтиСертификатПоСерийномуНомеру(
				Оповещение,
				Сертификат.СерийныйНомер, Сертификат.Поставщик,
				Ложь, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
		Иначе
			НайтиСертификатыПоОтпечаткамПослеПоискаПоСерийномуНомеру(
				Новый Структура("Выполнено,СертификатНайден", Истина, Ложь), ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "Сертификаты", ВходящийКонтекст.Сертификаты, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПослеПоискаПоСерийномуНомеру(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		ВходящийКонтекст.Сертификаты.Добавить(Результат.СвойстваСертификата);	
	КонецЕсли;
	ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
	НайтиСертификатыПоОтпечаткамПоискомПоСерийномуНомеру(ВходящийКонтекст);
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПослеПолученияСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Отпечатки = ВходящийКонтекст.ВходящиеПараметры[0];
	
		НайденныеСертификаты = Новый Массив;
		НайденныеСертификатыОтпечатки = Новый Массив;
		Для Каждого Сертификат Из Результат.Сертификаты Цикл
			Если Отпечатки.Найти(Сертификат.Отпечаток) <> Неопределено 
				И НайденныеСертификатыОтпечатки.Найти(Сертификат.Отпечаток) = Неопределено Тогда
				НайденныеСертификаты.Добавить(Сертификат);
				НайденныеСертификатыОтпечатки.Добавить(Сертификат.Отпечаток);
			КонецЕсли;
		КонецЦикла;
		НенайденныеСертификаты = ОбщегоНазначенияКлиентСервер.СократитьМассив(Отпечатки, НайденныеСертификатыОтпечатки);
		
		КриптографияЭДКОСлужебныйВызовСервера.СохранитьНайденныеСертификаты(НайденныеСертификаты);
		
		Контекст = Новый Структура;
		Контекст.Вставить("Сертификаты", НайденныеСертификаты);
		Контекст.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ТекущийСертификат", 0);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		
		Если ВходящийКонтекст.ВходящиеПараметры[2] Тогда
			НайтиСертификатыПоОтпечаткамПроверитьСертификаты(Контекст);
		Иначе
			Результат = ПодготовитьРезультат(Истина, "Сертификаты", НайденныеСертификаты, Контекст);
			Результат.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				Результат);
		КонецЕсли;		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, Контекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПроверитьСертификаты(ВходящийКонтекст)
	
	Если ВходящийКонтекст.ТекущийСертификат <= ВходящийКонтекст.Сертификаты.ВГраница() Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатыПоОтпечаткамПроверитьСертификатыПослеПроверки", ЭтотОбъект, ВходящийКонтекст);
		
		ПроверитьСертификат(
			Оповещение, ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат],
			ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	Иначе
		Результат = ПодготовитьРезультат(Истина, "Сертификаты", ВходящийКонтекст.Сертификаты, ВходящийКонтекст);
		Результат.Вставить("НенайденныеСертификаты", ВходящийКонтекст.НенайденныеСертификаты);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			Результат);
	КонецЕсли;
		
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПроверитьСертификатыПослеПроверки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификат = Новый Структура(ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат]);
		Сертификат.Вставить("Валиден", Результат.Валиден);
		ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат] = Новый ФиксированнаяСтруктура(Сертификат);
		ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
		НайтиСертификатыПоОтпечаткамПроверитьСертификаты(ВходящийКонтекст);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификатПоОтпечатку

Процедура НайтиСертификатПоОтпечатку(ОповещениеОЗавершении, Отпечаток, ХранилищеСертификатов,
									ВыполнятьПроверку, ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	Отпечатки = Новый Массив;
	Отпечатки.Добавить(Отпечаток);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатПоОтпечаткуПослеПолученияСертификатов", ЭтотОбъект, Контекст);
		
	НайтиСертификатыПоОтпечаткам(Оповещение, Отпечатки, ХранилищеСертификатов,
								ВыполнятьПроверку, ВыводитьСоообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура НайтиСертификатПоОтпечаткуПослеПолученияСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификаты = Результат.Сертификаты;
		Если Сертификаты.Количество() = 1 Тогда
			СертификатНайден = Истина;
		Иначе
			СертификатНайден = Ложь;
		КонецЕсли;
		
		РезультатВыполнения = ПодготовитьРезультат(Истина, "СертификатНайден", СертификатНайден, ВходящийКонтекст);
		Если СертификатНайден Тогда
			РезультатВыполнения.Вставить("СвойстваСертификата", Сертификаты[0]);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			РезультатВыполнения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверитьСертификат

Процедура ПроверитьСертификат(ОповещениеОЗавершении, Сертификат, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	Если СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
		 	ПодготовитьРезультат(
				Истина, "Валиден", 
				КриптографияЭДКОСлужебныйВызовСервера.ПроверитьСертификат(Сертификат)));
		Возврат;
	КонецЕсли;
	
	ВходящиеПараметры = ПараметрыВМассив(1, Сертификат);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПроверитьСертификатПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);

		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьСертификатПослеПоискаСертификата", ЭтотОбъект, ВходящийКонтекст);
		НайтиСертификат(
			Оповещение, ВходящийКонтекст.ВходящиеПараметры[0], Ложь, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПоискаСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда					
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьСертификатПослеПроверки", ЭтотОбъект, ВходящийКонтекст,
			"ПроверитьСертификатПриОшибкеПроверки", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПроверитьСертификат(
			Оповещение, 
			Результат.СвойстваСертификата.СерийныйНомер, 
			Результат.СвойстваСертификата.Поставщик);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверки(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "Валиден", Результат, ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПроверитьСертификатПриОшибкеПроверки(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПолученияОшибки", ЭтотОбъект, ВходящийКонтекст);

	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПолученияОшибки(СписокОшибок, ВходящийКонтекст) Экспорт
	
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, СписокОшибок);
	Результат = ПодготовитьРезультат(Истина, "ОписаниеОшибки", СписокОшибок, ВходящийКонтекст);
	Результат.Вставить("Валиден", Ложь);
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПоказатьСертификат

Процедура ПоказатьСертификат(Сертификат, ФормаВладелец = Неопределено) Экспорт
	
	Если ТипЗнч(Сертификат) <> Тип("Массив")
		И ТипЗнч(Сертификат) <> Тип("ФиксированныйМассив") Тогда
		Если Сертификат.Свойство("Адрес") Тогда
			ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(Сертификат.Адрес, "Сертификат.cer");
			Возврат;
		КонецЕсли;
		
	    Сертификаты = Новый Массив;
		Сертификаты.Добавить(Сертификат);
	Иначе
		Сертификаты = Сертификат;
	КонецЕсли;
	
	Контекст = Новый Структура("ФормаВладелец", ФормаВладелец);
	Оповещение = Новый ОписаниеОповещения(
		"ПоказатьСертификатПослеПоиска", ЭтотОбъект, Контекст);
	НайтиСертификаты(Оповещение, Сертификаты, Ложь, Истина, Неопределено);
		
КонецПроцедуры

Процедура ПоказатьСертификатПослеПоиска(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если Результат.Сертификаты.Количество() = 1 И Результат.НенайденныеСертификаты.Количество() = 0 Тогда
			ПоказатьСертификатПослеВыбораСертификата(
				Новый Структура("Значение", Результат.Сертификаты[0]), ВходящийКонтекст);
		Иначе
			СписокСертификатов = Новый СписокЗначений;
			Для Каждого НайденныйСертификат Из Результат.Сертификаты Цикл
				СписокСертификатов.Добавить(НайденныйСертификат, НайденныйСертификат.Наименование);
			КонецЦикла;
			Для Каждого НенайденныйСертификат Из Результат.НенайденныеСертификаты Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОписаниеОшибкиНеУдалосьНайтиСертификат(НенайденныйСертификат));
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения(
				"ПоказатьСертификатПослеВыбораСертификата", ЭтотОбъект, ВходящийКонтекст);
			СписокСертификатов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите сертификат для детального просмотра'"));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, ОписаниеОшибкиНеУдалосьОткрытьСертификат());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСертификатПослеВыбораСертификата(ВыбранныйЭлемент, ВходящийКонтекст) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ТипЗнч(ВходящийКонтекст.ФормаВладелец) = Тип("УправляемаяФорма")
			И ВходящийКонтекст.ФормаВладелец.Открыта() Тогда
			ФормаВладелец = ВходящийКонтекст.ФормаВладелец;
		Иначе
			ФормаВладелец = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Сертификат", ВыбранныйЭлемент.Значение);
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСертификата", ПараметрыФормы,
			ФормаВладелец,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ВыбратьСертификат

Процедура ВыбратьСертификат(ОповещениеОЗавершении, ЭтоЭлектроннаяПодписьВМоделиСервиса, НачальноеЗначениеВыбора, ХранилищеСертификатов, ПоказыватьПросроченные, МножественныйВыбор) Экспорт
	
	ПараметрыФормы = Новый Структура("Хранилище, ПоказыватьПросроченные, НачальноеЗначениеВыбора, МножественныйВыбор",
									ХранилищеСертификатов, ПоказыватьПросроченные, НачальноеЗначениеВыбора, МножественныйВыбор);
	
	Контекст = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);								
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатПослеВыбора", ЭтотОбъект, Контекст);
		
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ОткрытьФорму(
			"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ВыборСертификатаЭлектроннаяПодписьВМоделиСервиса", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму(
			"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ВыборСертификатаИзСистемногоХранилища", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьСертификатПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь,, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "ВыбранноеЗначение", Результат, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтобразитьПредставлениеСертификата

Процедура ОтобразитьПредставлениеСертификата(
		ЭтоЭлектроннаяПодписьВМоделиСервиса, 
		ПолеВвода, 
		Сертификат, 
		Форма, 
		ИмяРеквизитаПредставлениеСертификата, 
		ВыполняемоеОповещение,
		ИспользоватьКомпонентуЕслиНеМодельСервиса) Экспорт
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", 		ЭтоЭлектроннаяПодписьВМоделиСервиса);
	ДополнительныеПараметры.Вставить("ПолеВвода",									ПолеВвода);
	ДополнительныеПараметры.Вставить("Форма", 										Форма);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставлениеСертификата", 		ИмяРеквизитаПредставлениеСертификата);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 						ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", 	ИспользоватьКомпонентуЕслиНеМодельСервиса);
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = "";
		ПолеВвода.ПодсказкаВвода = "Выберите сертификат";
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ДополнительныеПараметры);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// возможные варианты параметра Сертификат на входе: строка, структура, соответствие или табличная часть
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	Если ТипЗнчСертификат <> Тип("Строка") И ТипЗнчСертификат <> Тип("Структура") 
		И ТипЗнчСертификат <> Тип("Соответствие") И Сертификат.Количество() = 1 Тогда
		Сертификат = Сертификат[0].Сертификат;
		ТипЗнчСертификат = Тип("Строка");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);

	Если ТипЗнчСертификат = Тип("Строка") ИЛИ ТипЗнчСертификат = Тип("Структура") ИЛИ ТипЗнчСертификат = Тип("Соответствие") Тогда
		ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры);
	Иначе
		ОтобразитьНесколькоСертификатовВПолеВвода(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры)
	
	Сертификат 									= ДополнительныеПараметры.Сертификат;
	ЭтоЭлектроннаяПодписьВМоделиСервиса 		= ДополнительныеПараметры.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	ИспользоватьКомпонентуЕслиНеМодельСервиса 	= ДополнительныеПараметры.ИспользоватьКомпонентуЕслиНеМодельСервиса;
	
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	
	Если ТипЗнчСертификат <> Тип("Структура") И ТипЗнчСертификат <> Тип("Соответствие") Тогда
		
		ДополнительныеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Ложь);
		Если ИспользоватьКомпонентуЕслиНеМодельСервиса ИЛИ ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата", 
				ЭтотОбъект, 
				ДополнительныеПараметры);
			
			ПараметрыСертификата = Новый Структура();
			ПараметрыСертификата.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", 	ЭтоЭлектроннаяПодписьВМоделиСервиса);
			ПараметрыСертификата.Вставить("Отпечаток", 								Сертификат);
			
			НайтиСертификат(ОписаниеОповещения, ПараметрыСертификата, Ложь, Истина, Неопределено);
		Иначе
			
			// Ветка для предотвращения повторного предложения установить компоненту, если первый раз получили отказ
			
			Результат = Новый Структура;
			Результат.Вставить("Выполнено", 		Ложь);
			Результат.Вставить("ОписаниеОшибки", 	НСтр("ru = 'Не установлена компонента работы с криптографией'"));
			
			ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата(Результат, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		СвойстваСертифката = Сертификат;
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(СвойстваСертифката, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата(Результат, ВходящиеПараметры) Экспорт
	
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	Сертификат 								= ВходящиеПараметры.Сертификат;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		
		ВходящиеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Истина);
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Результат.СвойстваСертификата, ВходящиеПараметры);
		
	Иначе
		
		ПолеВвода.ЦветТекста 						= Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = Сертификат;
		ПолеВвода.РасширеннаяПодсказка.Заголовок	= Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат не зарегистрирован в системном хранилище сертификатов'"),,
			Новый Цвет(255, 0, 0));
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Знач СвойстваСертифката, ВходящиеПараметры)
	
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	ПредставлениеСертификата = ПолноеПредставлениеСертификата(СвойстваСертифката);
	
	ТекДата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ТекущаяДатаНаСервере();
	Если ТекДата > СвойстваСертифката.ДействителенПо Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата истек'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ИначеЕсли ТекДата < СвойстваСертифката.ДействителенС Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата еще не наступил'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = "";
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьНесколькоСертификатовВПолеВвода(ДополнительныеПараметры)
	
	ЭтоЭлектроннаяПодписьВМоделиСервиса 		= ДополнительныеПараметры.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	ИспользоватьКомпонентуЕслиНеМодельСервиса 	= ДополнительныеПараметры.ИспользоватьКомпонентуЕслиНеМодельСервиса;
	Сертификат 									= ДополнительныеПараметры.Сертификат;
	
	// получаем свойства сертификатов
	Сертификаты = Новый Массив;
	Для Каждого СтрСертификат Из Сертификат Цикл		
		СвойствоСертификата = Новый Структура();
		СвойствоСертификата.Вставить("Отпечаток", 							СтрСертификат.Сертификат);
		СвойствоСертификата.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", ДополнительныеПараметры.ЭтоЭлектроннаяПодписьВМоделиСервиса);
		
		Сертификаты.Добавить(СвойствоСертификата);	
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Ложь);
	Если ИспользоватьКомпонентуЕслиНеМодельСервиса ИЛИ ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтобразитьНесколькоСертификатовВПолеВводаПослеПолученияСвойствСертификатов", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
			
		ДополнительныеПараметры.Вставить("Сертификаты", Сертификаты);
			
		НайтиСертификаты(ОписаниеОповещения, Сертификаты, Ложь, Истина, Неопределено);
	Иначе
		
		// Ветка для предотвращения повторного предложения установить компоненту, если первый раз получили отказ
		
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Не установлена компонента работы с криптографией'"));
			
		ОтобразитьНесколькоСертификатовВПолеВводаПослеПолученияСвойствСертификатов(Результат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьНесколькоСертификатовВПолеВводаПослеПолученияСвойствСертификатов(Результат, ВходящиеПараметры) Экспорт
	
	// Получаем представление сертификатов
	ЧислоСертификатов 				= ВходящиеПараметры.Сертификаты.Количество();
	ПредставлениеЧислаСертификатов 	= ПредставлениеЧислаСертификатов(ЧислоСертификатов);
	
	Форма 									= ВходящиеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	Если Результат.Выполнено Тогда
		
		ВходящиеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Истина);
		
		// проверяем, есть ли ошибки связанные хотя бы с одним сертификатом
		ОшибкиЕсть 	= Ложь;
		ТекДата 	= ОперацииСФайламиЭДКОСлужебныйВызовСервера.ТекущаяДатаНаСервере();
		
		Для Каждого Сертификат Из Результат.Сертификаты Цикл
			
			Если Сертификат.ДействителенПо < ТекДата ИЛИ Сертификат.ДействителенС > ТекДата Тогда
				ОшибкиЕсть = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// прорисовываем поле
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеЧислаСертификатов;
		Если ОшибкиЕсть Тогда
			ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
			Подсказка = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Один или несколько сертификатов недействительны'"),,
				Новый Цвет(255, 0, 0));
			ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
			ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ИначеЕсли Результат.НенайденныеСертификаты.Количество() > 0 Тогда
			ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
			Подсказка = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Обратите внимание, один или несколько сертификатов 
                      |не зарегистрированы в системном хранилище сертификатов'"),,
				Новый Цвет(255, 0, 0));
			ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
			ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Иначе
			ПолеВвода.ЦветТекста = Новый Цвет;
			ПолеВвода.РасширеннаяПодсказка.Заголовок = "";
			ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьАвто;
		КонецЕсли;
		
	Иначе
		
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеЧислаСертификатов;
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Результат.ОписаниеОшибки;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
	КонецЕсли;
		
КонецПроцедуры

Функция ПредставлениеЧислаСертификатов(ЧислоСертификатов)
	
	Если ЧислоСертификатов = 0 Тогда
		Результат = НСтр("ru = 'Сертификат не выбран'");
	ИначеЕсли ЧислоСертификатов = 1 Тогда
		Результат = НСтр("ru = '1 сертификат'");
	ИначеЕсли ЧислоСертификатов >= 2 И ЧислоСертификатов <= 4 Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1  сертификата'"), ЧислоСертификатов);
	Иначе // считаем, что больше 20 сертификатов не будет, иначе следует дописать
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1  сертификатов'"), ЧислоСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолноеПредставлениеСертификата(Сертификат)
	
	СертификатДействителенС = Сертификат.ДействителенС;
	СертификатДействителенПо = Сертификат.ДействителенПо;
	
	Если ТипЗнч(СертификатДействителенС) = Тип("Строка") Тогда 
		СертификатДействителенС = СтрЗаменить(СертификатДействителенС, Символ(10), "");
	КонецЕсли;
		
	Если ТипЗнч(СертификатДействителенПо) = Тип("Строка") Тогда 
		СертификатДействителенПо = СтрЗаменить(СертификатДействителенПо, Символ(10), "");
	КонецЕсли;
	
	Возврат СокрЛП(Сертификат.Наименование) + " (" + СертификатДействителенС + " - " + СертификатДействителенПо + ")";
	
КонецФункции

#КонецОбласти

#Область ОтобразитьПредставлениеСертификата

Процедура ОтобразитьПредставленияСертификатов(ПараметрыОтображенияСертификатов, Форма, ЭтоЭлектроннаяПодписьВМоделиСервиса, ВыполняемоеОповещение) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияСертификатов", 	ПараметрыОтображенияСертификатов);
	ДополнительныеПараметры.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", ЭтоЭлектроннаяПодписьВМоделиСервиса);
	ДополнительныеПараметры.Вставить("Форма", 								Форма);
	ДополнительныеПараметры.Вставить("НомерПараметра", 					 	0);
	ДополнительныеПараметры.Вставить("КоличествоПараметров", 			 	ПараметрыОтображенияСертификатов.Количество());
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 			 	ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтобразитьПредставлениеКаждогоСертификата", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	
КонецПроцедуры

Процедура ОтобразитьПредставлениеКаждогоСертификата(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыОтображенияСертификатов 	= ВходящийКонтекст.ПараметрыОтображенияСертификатов;
	НомерПараметра 						= ВходящийКонтекст.НомерПараметра;
	КоличествоПараметров				= ВходящийКонтекст.КоличествоПараметров;
	ВыполняемоеОповещение 				= ВходящийКонтекст.ВыполняемоеОповещение; 
	ЭтоЭлектроннаяПодписьВМоделиСервиса = ВходящийКонтекст.ЭтоЭлектроннаяПодписьВМоделиСервиса; 
	Форма 								= ВходящийКонтекст.Форма; 
	
	Если НомерПараметра + 1 > КоличествоПараметров Тогда
		
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтображенияСертификата = ПараметрыОтображенияСертификатов[НомерПараметра];
		
		НомерПараметра = НомерПараметра + 1;
		ВходящийКонтекст.Вставить("НомерПараметра", НомерПараметра);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтобразитьПредставлениеКаждогоСертификата", 
			ЭтотОбъект, 
			ВходящийКонтекст);
			
		ПолеВвода							 = ПараметрыОтображенияСертификата.ПолеВвода;
		Сертификат							 = ПараметрыОтображенияСертификата.Сертификат;
		ИмяРеквизитаПредставлениеСертификата = ПараметрыОтображенияСертификата.ИмяРеквизитаПредставлениеСертификата;
		
		Если НомерПараметра = 1 Тогда
			ИспользоватьКомпонентуЕслиНеМодельСервиса = Истина;
		Иначе
			ИспользоватьКомпонентуЕслиНеМодельСервиса = Результат.ИспользоватьКомпонентуЕслиНеМодельСервиса;
		КонецЕсли;
			
		ОтобразитьПредставлениеСертификата(
			ЭтоЭлектроннаяПодписьВМоделиСервиса, 
			ПолеВвода, 
			Сертификат, 
			Форма, 
			ИмяРеквизитаПредставлениеСертификата, 
			ОписаниеОповещения,
			ИспользоватьКомпонентуЕслиНеМодельСервиса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодписатьPKCS7

Процедура ПодписатьPKCS7(ОповещениеОЗавершении, Сертификат, ИмяФайлаДанных, ВключатьИсходныеДанные, ИмяФайлаПодписи, ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	Если Не СертификатЗаполнен(Сертификат) Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУказаныКлючевыеПараметрыСертификатаДляПоиска()));
		Возврат;
	КонецЕсли;
	
	ВходящиеПараметры = ПараметрыВМассив(4, Сертификат, ИмяФайлаДанных, ВключатьИсходныеДанные, ИмяФайлаПодписи);
	
	Если СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеАвторизации", ЭтотОбъект, Контекст);
		
		КриптосервисВМоделиСервисаКлиент.ИнициализацияСАвторизацией(
			Новый Структура("ИдентификаторДокументооборота", Сертификат.КлючевойКонтейнер),, Оповещение);
		Возврат;
	КонецЕсли;
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПодписатьPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры
	
Процедура ПодписатьPKCS7ПослеАвторизации(Авторизован, ВходящийКонтекст) Экспорт
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	Если Авторизован Тогда
		Если ЗначениеЗаполнено(ВходящиеПараметры[3]) И ЭтоАдресВоВременномХранилище(ВходящиеПараметры[3]) Тогда
			АдресРезультата = ВходящиеПараметры[3];
		Иначе
			АдресРезультата = ВходящиеПараметры[1];
		КонецЕсли;
		Попытка
			АдресРезультата = КриптографияЭДКОСлужебныйВызовСервера.ПодписатьPKCS7(
				ВходящиеПараметры[0], ВходящиеПараметры[1], ВходящиеПараметры[2], АдресРезультата);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "ФайлПодписи", АдресРезультата));
		Исключение
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПодписатьФайл()));
		КонецПопытки;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиОшибкаАвторизации()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПолученияФайлаДляПодписания", ЭтотОбъект, ВходящийКонтекст);
		
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[1]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[1],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[1])); 
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПолученияФайлаДляПодписания(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаДанных", Результат.ИмяФайла);
		
		ПолучитьИмяФайла(
			?(ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[3]), Неопределено, ВходящийКонтекст.ВходящиеПараметры[3]),
			ВходящийКонтекст, "ПодписатьPKCS7ПослеПолученияИмениФайлаРезультата");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ПодписатьPKCS7ПослеПолученияИмениФайлаРезультата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПолученияСертификатаПодписанта", ЭтотОбъект, ВходящийКонтекст);
			 
		Если ЗаполненСерийныйНомерСертификата(ВходящиеПараметры[0]) Тогда
			РезультатВыполнения = ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящиеПараметры[0], ВходящийКонтекст);
			РезультатВыполнения.Вставить("СертификатНайден", Истина);
			ВыполнитьОбработкуОповещения(
				Оповещение,
				РезультатВыполнения);
		Иначе
			НайтиСертификат(
				Оповещение, ВходящиеПараметры[0], Ложь, 
				ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии); 	
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПолученияСертификатаПодписанта(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если Результат.СертификатНайден Тогда
			ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
			
			Оповещение = Новый ОписаниеОповещения(
				"ПодписатьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу", ЭтотОбъект, ВходящийКонтекст);
				
			ЗаполнитьПарольДоступаКЗакрытомуКлючу(Оповещение, Результат.СвойстваСертификата, ВходящийКонтекст.МенеджерКриптографии);
		Иначе
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении, 
				ПодготовитьРезультат(
					Ложь, "ОписаниеОшибки", 
					ОписаниеОшибкиНеУдалосьНайтиСертификат(ВходящийКонтекст.ВходящиеПараметры[0])));
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПодписатьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		Если ВходящиеПараметры[2] Тогда // Включать исходные данные
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПодписатьСДанными(
				Оповещение, 
				ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, ВходящийКонтекст.СвойстваСертификата.Поставщик, // сертификат подписанта
				ВходящийКонтекст.ИмяФайлаДанных, // файл данных
				ВходящийКонтекст.ИмяФайлаРезультата // файл подписи
				);	
		Иначе
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7Подписать(
				Оповещение, 
				ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, ВходящийКонтекст.СвойстваСертификата.Поставщик, // сертификат подписанта
				ВходящийКонтекст.ИмяФайлаДанных, // файл данных 
				ВходящийКонтекст.ИмяФайлаРезультата // файл подписи
				);
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры
	
Процедура ПодписатьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	АдресРезультата = ПолучитьАдресРезультата(ВходящийКонтекст.ВходящиеПараметры[3], ВходящийКонтекст.ВходящиеПараметры[1]);
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ВходящийКонтекст.Вставить("АдресРезультата", АдресРезультата);
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПреобразованияРезультатаВBase64", ЭтотОбъект, ВходящийКонтекст);
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			Оповещение, Параметры[3], ВходящийКонтекст.ВыводитьСообщения);	
	Иначе		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "ФайлПодписи", Параметры[3], ВходящийКонтекст));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		?(ВходящийКонтекст.ВходящиеПараметры[2], "PKCS7ПодписатьСДанными", "PKCS7Подписать"),
		ОписаниеОшибкиНеУдалосьПодписатьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПреобразованияРезультатаВBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда                                      
		АдресРезультата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.Base64ВоВременноеХранилище(
			Результат.СтрокаBase64, ВходящийКонтекст.АдресРезультата);
			
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "ФайлПодписи", АдресРезультата, ВходящийКонтекст));	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПроверитьПодписьPKCS7

Процедура ПроверитьПодписьPKCS7(ОповещениеОЗавершении, ФайлПодписи, ФайлДанных, ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ФайлПодписи, ФайлДанных);
	
	// FIX: временно, до исправления проблемы с получением подписанта.
	ВыполнитьОбработкуОповещения(
		ОповещениеОЗавершении,
		Новый Структура("Выполнено, ПодписьВалидна, Подписант", Истина, Истина, Неопределено));
	Возврат;
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПроверитьПодписьPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
	
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеПолученияФайлаПодписи", ЭтотОбъект, ВходящийКонтекст);
			
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0])); 
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияФайлаПодписи(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаПодписи", Результат.ИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеПолученияФайлаДанных", ЭтотОбъект, ВходящийКонтекст);
			
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[1]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[1],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[1])); 
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияФайлаДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаДанных", Результат.ИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеПолученияПодписанта", ЭтотОбъект, ВходящийКонтекст);
			
		ПолучитьПодписантаPKCS7(
			Оповещение, ВходящийКонтекст.ИмяФайлаПодписи, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияПодписанта(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("Подписант", Результат.Подписант);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПроверитьПодписьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПроверитьПодпись(
			Оповещение, 
			ВходящийКонтекст.Подписант.СерийныйНомер, ВходящийКонтекст.Подписант.Поставщик,
			ВходящийКонтекст.ИмяФайлаПодписи, // файл подписи 
			ВходящийКонтекст.ИмяФайлаДанных  // файл данных
			);	
	Иначе
		Результат = ПодготовитьРезультат(Истина, "ПодписьВалидна", Истина, ВходящийКонтекст);
		Результат.Вставить("Подписант", Неопределено);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			// FIX: извлечение подписанта из подписи требует привязки к ключу.
			// в результате много ложных срабатываний. После исправления убрать.
			Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Результат = ПодготовитьРезультат(Истина, "ПодписьВалидна", Результат, ВходящийКонтекст);
	Результат.Вставить("Подписант", ВходящийКонтекст.Подписант);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"PKCS7ПроверитьПодпись",
		ОписаниеОшибкиНеУдалосьПроверитьПодпись(), 
		ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ЗашифроватьPKCS7

Процедура ЗашифроватьPKCS7(ОповещениеОЗавершении, ИсходныйФайл, Сертификаты, ИмяФайлаИлиРасширениеИлиАдрес, ВыводитьСоообщения, МенеджерКриптографии, КлючевойКонтейнер = Неопределено) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(4, ИсходныйФайл, Сертификаты, ИмяФайлаИлиРасширениеИлиАдрес, КлючевойКонтейнер);
	
	Если КлючевойКонтейнер <> Неопределено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеАвторизации", ЭтотОбъект, Контекст);
		
		КриптосервисВМоделиСервисаКлиент.ИнициализацияСАвторизацией(
			Новый Структура("ИдентификаторДокументооборота", КлючевойКонтейнер),, Оповещение);
		Возврат;
	КонецЕсли;
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеАвторизации(Авторизован, ВходящийКонтекст) Экспорт
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	Если Авторизован Тогда
		Если ЗначениеЗаполнено(ВходящиеПараметры[2]) И ЭтоАдресВоВременномХранилище(ВходящиеПараметры[2]) Тогда
			АдресРезультата = ВходящиеПараметры[2];
		Иначе
			АдресРезультата = ВходящиеПараметры[0];
		КонецЕсли;
		Попытка
			АдресРезультата = КриптографияЭДКОСлужебныйВызовСервера.ЗашифроватьPKCS7(ВходящиеПараметры[3], ВходящиеПараметры[1], ВходящиеПараметры[0], АдресРезультата);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "ЗашифрованныйФайл", АдресРезультата));
		Исключение
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьЗашифроватьФайл()));
		КонецПопытки;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиОшибкаАвторизации()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеПолученияФайлаДляШифрования", ЭтотОбъект, ВходящийКонтекст);
		
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0])); 
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеПолученияФайлаДляШифрования(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайла", Результат.ИмяФайла);
		
		ПолучитьИмяФайла(
			?(ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[2]), Неопределено, ВходящийКонтекст.ВходящиеПараметры[2]),
			ВходящийКонтекст, "ЗашифроватьPKCS7ПослеПолученияИмениФайлаРезультата");
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеПолученияИмениФайлаРезультата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ЗашифроватьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
			
		МассивСерийныхНомеров = Новый Массив;
		МассивПоставщиков = Новый Массив;
		Для Каждого Сертификат Из ВходящиеПараметры[1] Цикл
			МассивПоставщиков.Добавить(Сертификат.Поставщик);
			МассивСерийныхНомеров.Добавить(Сертификат.СерийныйНомер);
		КонецЦикла;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ЗашифроватьДляНескольких(
			Оповещение,
			ВходящийКонтекст.ИмяФайла, // файл данных 
			МассивВСтрокуСРазделителями(МассивСерийныхНомеров), // получатель 
			МассивВСтрокуСРазделителями(МассивПоставщиков), // получатель 
			Результат.ИмяФайла // зашифрованный файл
			);	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	АдресРезультата = Неопределено;
	Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[2]) Тогда
		АдресРезультата = ВходящийКонтекст.ВходящиеПараметры[2]; // поместить расшифрованные данные по указанному адресу
	ИначеЕсли ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0])
		И Не ЗначениеЗаполнено(ВходящийКонтекст.ВходящиеПараметры[2]) Тогда
		АдресРезультата = ВходящийКонтекст.ВходящиеПараметры[0]; // заместить исходный файл
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ВходящийКонтекст.Вставить("АдресРезультата", АдресРезультата);
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеПреобразованияРезультатаВBase64", ЭтотОбъект, ВходящийКонтекст);
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			Оповещение, Параметры[3], ВходящийКонтекст.ВыводитьСообщения);	
	Иначе		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "ЗашифрованныйФайл", Параметры[3], ВходящийКонтекст));	
	КонецЕсли;
	
	// Удаление исходного файла.	
	ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, Параметры[0]);
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"PKCS7ЗашифроватьДляНескольких",
		ОписаниеОшибкиНеУдалосьЗашифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеПреобразованияРезультатаВBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда                                      
		АдресРезультата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.Base64ВоВременноеХранилище(
			Результат.СтрокаBase64, ВходящийКонтекст.АдресРезультата);
			
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "ЗашифрованныйФайл", АдресРезультата, ВходящийКонтекст));	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПодписатьИЗашифроватьPKCS7

Процедура ПодписатьИЗашифроватьPKCS7(ОповещениеОЗавершении, СертификатПодписанта, ИмяФайлаДанных, ВключатьИсходныеДанные, СертификатыПолучателей,
									ИмяЗашифрованногоФайла, ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(5, СертификатПодписанта, ИмяФайлаДанных, ВключатьИсходныеДанные, СертификатыПолучателей, ИмяЗашифрованногоФайла);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПодписатьИЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[4], ВходящийКонтекст, "ПодписатьИЗашифроватьPKCS7ПослеПолученияИмениФайла");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьИЗашифроватьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПодписатьИЗашифроватьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		
		Если ВходящиеПараметры[2] Тогда // Включать исходные данные
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПодписатьСДаннымиИЗашифровать(
				Оповещение, 
				ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат подписанта
				ВходящиеПараметры[1], // файл данных 
				ВходящиеПараметры[3][0].СерийныйНомер, ВходящиеПараметры[3][0].Поставщик, // сертификат получателя
				Результат.ИмяФайла // зашифрованный файл
				);	
		Иначе
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПодписатьИЗашифровать(
				Оповещение, 
				ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат подписанта
				ВходящиеПараметры[1], // файл данных 
				ВходящиеПараметры[3][0].СерийныйНомер, ВходящиеПараметры[3][0].Поставщик, // сертификат получателя
				Результат.ИмяФайла // зашифрованный файл
				);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "ИмяЗашифрованногоФайла", Параметры[5], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		?(ВходящийКонтекст.ВходящиеПараметры[2], "PKCS7ПодписатьСДаннымиИЗашифровать", "PKCS7ПодписатьИЗашифровать"),
		ОписаниеОшибкиНеУдалосьПодписатьИЗашифроватьФайл(), ИнформацияОбОшибке);

КонецПроцедуры

#КонецОбласти

#Область РасшифроватьPKCS7

Процедура РасшифроватьPKCS7(ОповещениеОЗавершении, ЗашифрованныйФайл, ИмяФайлаИлиРасширениеИлиАдрес, Сертификат, ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(3, ЗашифрованныйФайл, ИмяФайлаИлиРасширениеИлиАдрес, Сертификат);
	
	Если СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеАвторизации", ЭтотОбъект, Контекст);
		
		КриптосервисВМоделиСервисаКлиент.ИнициализацияСАвторизацией(
			Новый Структура("ИдентификаторДокументооборота", Сертификат.КлючевойКонтейнер),, Оповещение);
		Возврат;
	КонецЕсли;
		
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "РасшифроватьPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры
	
Процедура РасшифроватьPKCS7ПослеАвторизации(Авторизован, ВходящийКонтекст) Экспорт
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	Если Авторизован Тогда
		Если ЗначениеЗаполнено(ВходящиеПараметры[1]) И ЭтоАдресВоВременномХранилище(ВходящиеПараметры[1]) Тогда
			АдресРезультата = ВходящиеПараметры[1];
		Иначе
			АдресРезультата = ВходящиеПараметры[0];
		КонецЕсли;
		Попытка
			Идентификаторы = Новый Массив;
			АдресРезультата = КриптографияЭДКОСлужебныйВызовСервера.РасшифроватьPKCS7(
				ВходящиеПараметры[2], ВходящиеПараметры[0], АдресРезультата, Идентификаторы);
				
			Если ЗначениеЗаполнено(Идентификаторы) Тогда
				ВходящиеПараметры[2].КлючевойКонтейнер = Идентификаторы[0];	
				Контекст = Новый Структура;
				Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
				Контекст.Вставить("ВыводитьСоообщения", ВходящийКонтекст.ВыводитьСоообщения);
				Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
				Оповещение = Новый ОписаниеОповещения(
					"РасшифроватьPKCS7ПослеАвторизации", ЭтотОбъект, Контекст);
					
				КриптосервисВМоделиСервисаКлиент.ИнициализацияСАвторизацией(
					Новый Структура("ИдентификаторДокументооборота", Идентификаторы[0]),, Оповещение);	
				Возврат;
			КонецЕсли;
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "РасшифрованныйФайл", АдресРезультата));
		Исключение
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьРасшифроватьФайл()));
		КонецПопытки;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиОшибкаАвторизации()));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеПолученияФайлаДляРасшифровки", ЭтотОбъект, ВходящийКонтекст);
		
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0])); 
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПолученияФайлаДляРасшифровки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяИсходногоФайла", Результат.ИмяФайла);
		
		ПолучитьИмяФайла(
			?(ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[1]), Неопределено, ВходящийКонтекст.ВходящиеПараметры[1]),
			ВходящийКонтекст, "РасшифроватьPKCS7ПослеПолученияИмениФайлаРезультата");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПолученияИмениФайлаРезультата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеПолученияСертификата", ЭтотОбъект, ВходящийКонтекст);
			 
		Если СертификатЗаполнен(ВходящиеПараметры[2]) Тогда // указан приоритетный сертификат
			Если ЗаполненСерийныйНомерСертификата(ВходящиеПараметры[2]) Тогда
				РезультатВыполнения = ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящиеПараметры[2], ВходящийКонтекст);
				РезультатВыполнения.Вставить("СертификатНайден", Истина);
				ВыполнитьОбработкуОповещения(Оповещение, РезультатВыполнения);
			Иначе
				НайтиСертификат(
					Оповещение, ВходящиеПараметры[2], Ложь, 
					ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии); 	
			КонецЕсли;
		Иначе
			РасшифроватьPKCS7ПослеПолученияСертификата(
				Новый Структура("Выполнено, СертификатНайден", Истина, Ложь), ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПолученияСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если Результат.СертификатНайден Тогда
			ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
			
			Оповещение = Новый ОписаниеОповещения(
				"РасшифроватьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу", ЭтотОбъект, ВходящийКонтекст);
				
			ЗаполнитьПарольДоступаКЗакрытомуКлючу(
				Оповещение, Результат.СвойстваСертификата, ВходящийКонтекст.МенеджерКриптографии);
		Иначе
			РасшифроватьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу(
				Новый Структура("Выполнено", Истина), ВходящийКонтекст);	
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"РасшифроватьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
				
		Если ВходящийКонтекст.Свойство("СвойстваСертификата") 
			И СертификатЗаполнен(ВходящийКонтекст.СвойстваСертификата) Тогда // указан приоритетный сертификат
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7Расшифровать(
				Оповещение,
				ВходящийКонтекст.ИмяИсходногоФайла, // зашифрованный файл
				ВходящийКонтекст.ИмяФайлаРезультата, // расшифрованный файл
				ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, 
				ВходящийКонтекст.СвойстваСертификата.Поставщик // приоритетный сертификат
				);	
		Иначе
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7Расшифровать(
				Оповещение,
				ВходящийКонтекст.ИмяИсходногоФайла, // зашифрованный файл
				ВходящийКонтекст.ИмяФайлаРезультата // расшифрованный файл
				);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	АдресРезультата = ПолучитьАдресРезультата(ВходящийКонтекст.ВходящиеПараметры[1], ВходящийКонтекст.ВходящиеПараметры[0]);
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ВходящийКонтекст.Вставить("АдресРезультата", АдресРезультата);
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеПреобразованияРезультатаВBase64", ЭтотОбъект, ВходящийКонтекст);
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			Оповещение, Параметры[1], ВходящийКонтекст.ВыводитьСообщения);	
	Иначе		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "РасшифрованныйФайл", Параметры[1], ВходящийКонтекст));	
	КонецЕсли;
	
	// Удаление исходного файла.	
	ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, Параметры[0]);
		
КонецПроцедуры

Процедура РасшифроватьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"PKCS7Расшифровать",
		ОписаниеОшибкиНеУдалосьРасшифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПреобразованияРезультатаВBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда                                      
		АдресРезультата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.Base64ВоВременноеХранилище(
			Результат.СтрокаBase64, ВходящийКонтекст.АдресРезультата);
			
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "РасшифрованныйФайл", АдресРезультата, ВходящийКонтекст));	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПолучитьПодписантаPKCS7

Процедура ПолучитьПодписантаPKCS7(ОповещениеОЗавершении, ИмяФайлаПодписи, ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ИмяФайлаПодписи);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПолучитьПодписантаPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПолучитьПодписантаPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьПодписантаPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПолучитьПодписантаPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПолучитьСвойстваПодписи(
			Оповещение, ВходящийКонтекст.ВходящиеПараметры[0], "", "");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПодписантаPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	СертификатПодписанта = Новый Структура("СерийныйНомер, Поставщик", Параметры[1], Параметры[2]);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "Подписант", СертификатПодписанта, ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПолучитьПодписантаPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"PKCS7ПолучитьСвойстваПодписи",
		ОписаниеОшибкиНеУдалосьПолучитьСвойстваПодписи(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область Подписать

Процедура Подписать(ОповещениеОЗавершении, Сертификат, ИмяФайлаДанных, ПараметрыКриптографии, ИмяФайлаПодписи,
					ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(4, Сертификат, ИмяФайлаДанных, ПараметрыКриптографии, ИмяФайлаПодписи);
	
	Если СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьПослеАвторизации", ЭтотОбъект, Контекст);
		
		КриптосервисВМоделиСервисаКлиент.ИнициализацияСАвторизацией(
			Новый Структура("ИдентификаторДокументооборота", Сертификат.КлючевойКонтейнер),, Оповещение);
		Возврат;
	КонецЕсли;
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПодписатьПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПодписатьПослеАвторизации(Авторизован, ВходящийКонтекст) Экспорт
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	Если Авторизован Тогда
		Попытка
			Результат = КриптографияЭДКОСлужебныйВызовСервера.Подписать(
				ВходящиеПараметры[0], ВходящиеПараметры[1]);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "ИмяФайлаПодписи", Результат));
		Исключение
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПодписатьДанные()));
		КонецПопытки;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиОшибкаАвторизации()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[3], ВходящийКонтекст, "ПодписатьПослеПолученияИмениФайла");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПодписатьПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПодписать(
			Оповещение,
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат подписанта
			ВходящиеПараметры[1], // файл данных
			Результат.ИмяФайла, // файл подписи
			ВходящиеПараметры[2].АлгоритмХеширования // идентификатор алгоритма хеширования
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "ИмяФайлаПодписи", Параметры[3], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПодписатьПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"Подписать",
		ОписаниеОшибкиНеУдалосьПодписатьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверитьПодпись

Процедура ПроверитьПодпись(ОповещениеОЗавершении, Сертификат, ИмяФайлаПодписи, ИмяФайлаДанных, ПараметрыКриптографии,
					ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(4, Сертификат, ИмяФайлаПодписи, ИмяФайлаДанных, ПараметрыКриптографии);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПроверитьПодписьПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПроверитьПодписьПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПроверитьПодписьПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПроверитьПодпись(
			Оповещение,
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат подписанта
			ВходящиеПараметры[2], // файл данных
			ВходящиеПараметры[1], // файл подписи
			ВходящиеПараметры[3].АлгоритмХеширования // идентификатор алгоритма хеширования
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Результат = ПодготовитьРезультат(Истина, "ПодписьВалидна", Результат, ВходящийКонтекст);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"ПроверитьПодпись",
		ОписаниеОшибкиНеУдалосьПроверитьПодпись(), 
		ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область Зашифровать

Процедура Зашифровать(ОповещениеОЗавершении, СертификатОтправителя, ИмяФайлаДанных, СертификатПолучателя, ПараметрыКриптографии,
						КаталогРезультата, ВыводитьСоообщения, МенеджерКриптографии) Экспорт

	
	ВходящиеПараметры = ПараметрыВМассив(5, СертификатОтправителя, ИмяФайлаДанных, СертификатПолучателя, ПараметрыКриптографии, КаталогРезультата);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ЗашифроватьПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ЗашифроватьПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Оповещение = Новый ОписаниеОповещения("ЗашифроватьПослеПолученияИмениКаталога", ЭтотОбъект, ВходящийКонтекст);
		Если ЗначениеЗаполнено(ВходящийКонтекст.ВходящиеПараметры[4]) Тогда // Каталог результата
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяКаталога", ВходящийКонтекст.ВходящиеПараметры[4], ВходящийКонтекст));
		Иначе
			ОперацииСФайламиЭДКОКлиент.СоздатьКаталогНаКлиенте(Оповещение, ВходящийКонтекст.ВыводитьСообщения);
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеПолученияИмениКаталога(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ЗашифроватьПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		
		Если ЗначениеЗаполнено(ВходящиеПараметры[0]) Тогда
			СертификатОтправителяСерийныйНомер = ВходящиеПараметры[0].СерийныйНомер;
			СертификатОтправителяПоставщик = ВходящиеПараметры[0].Поставщик;	
		Иначе
			СертификатОтправителяСерийныйНомер = "";
			СертификатОтправителяПоставщик = "";
		КонецЕсли;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовЗашифровать(
			Оповещение,
			ВходящиеПараметры[1], // исходный файл
			СертификатОтправителяСерийныйНомер, СертификатОтправителяПоставщик, // сертификат отправителя
			ВходящиеПараметры[2].СерийныйНомер, ВходящиеПараметры[2].Поставщик, // сертификат получателя
			Результат.ИмяКаталога, // каталог с результатом
			ВходящиеПараметры[3].АлгоритмШифрования, 
			ВходящиеПараметры[3].АлгоритмКлюча,
			ВходящиеПараметры[3].Режим
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "КаталогРезультата", Параметры[5], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ЗашифроватьПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"Зашифровать",
		ОписаниеОшибкиНеУдалосьЗашифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область РасшифроватьФайл

Процедура РасшифроватьФайл(ОповещениеОЗавершении, СертификатПолучателя, ИмяЗашифрованногоФайла, ПубличныйКлючОтправителя, СессионныйКлюч,
							ИнициализационныйВектор, ИмяФайлаИлиРасширениеИлиАдрес = Неопределено, ВыводитьСоообщения = Истина, МенеджерКриптографии = Неопределено) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(6, СертификатПолучателя, ИмяЗашифрованногоФайла, ПубличныйКлючОтправителя, СессионныйКлюч, ИнициализационныйВектор, ИмяФайлаИлиРасширениеИлиАдрес);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "РасшифроватьФайлПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[5], ВходящийКонтекст, "РасшифроватьФайлПослеПолученияИмениФайла");
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьФайлПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"РасшифроватьФайлПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовРасшифроватьФайл(
			Оповещение,
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат получателя
			ВходящиеПараметры[1], // зашифрованный файл
			ВходящийКонтекст.ИмяФайлаРезультата, // расшифрованны файл
			ВходящиеПараметры[2], // файл публичного ключа
			ВходящиеПараметры[3], // файл сессионного ключа
			ВходящиеПараметры[4] // файл инициализационного вектора
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "РасшифрованныйФайл", ВходящийКонтекст.ИмяФайлаРезультата, ВходящийКонтекст));
	
КонецПроцедуры

Процедура РасшифроватьФайлПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"РасшифрованныйФайл",
		ОписаниеОшибкиНеУдалосьРасшифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ХешироватьДанные

Процедура ХешироватьДанные(ОповещениеОЗавершении, ЭтоЭлектроннаяПодписьВМоделиСервиса, ИмяФайлаДанных, ПараметрыКриптографии,
	ВыводитьСоообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяФайлаДанных, ПараметрыКриптографии);
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		Попытка
			Результат = КриптографияЭДКОСлужебныйВызовСервера.ХешироватьДанные(
				ВходящиеПараметры[0]);
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "Хеш", Результат));
		Исключение
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПолучитьХешФайла()));
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ХешироватьДанныеПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ХешироватьДанныеПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"ХешироватьДанныеПослеПолученияФайлаДляХеширования", ЭтотОбъект, ВходящийКонтекст);
		
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0],, ВходящийКонтекст.ВыводитьСообщения);
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0]));
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ХешироватьДанныеПослеПолученияФайлаДляХеширования(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ХешироватьДанныеПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ХешироватьДанныеПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовХешироватьДанные(
			Оповещение,
			Результат.ИмяФайла, // файл данных
			?(ВходящиеПараметры[1] <> Неопределено, ВходящиеПараметры[1].АлгоритмХеширования, 32798) // идентификатор алгоритма хеширования
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ХешироватьДанныеПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "Хеш", Результат, ВходящийКонтекст));
	
КонецПроцедуры

Процедура ХешироватьДанныеПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"ХешироватьДанные",
		ОписаниеОшибкиНеУдалосьПолучитьХешФайла(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОшибок

Функция ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии()

	Возврат НСтр("ru='Не удалось подключить внешнюю компоненту для работы с криптографией.'");

КонецФункции

Функция ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии()
	
	Возврат НСтр("ru = 'Не удалось создать объект для работы с криптографией. В системе не обнаружен криптопровайдер.'");
	
КонецФункции

Функция ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии()
	
	Возврат НСтр("ru = 'Ошибка внешней компоненты для работы с криптографией.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьСформироватьЗапросНаСертификат()
	
	Возврат НСтр("ru = 'Криптографическая ошибка: не удалось сформировать запрос на сертификат для контролирующих органов.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПривязатьСертификатКЗакрытомуКлючу()
	
	Возврат НСтр("ru = 'Не удалось привязать сертификат к закрытому ключу.
                  |Возможно выбран не верный закрытый ключ.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьУстановитьЛичныйСертификат()
	
	Возврат НСтр("ru = 'Не удалось установить личный сертификат.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьВыгрузитьСертификат()
	
	Возврат НСтр("ru = 'Не удалось выгрузить сертификат.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьИмпортироватьСертификат()
	
	Возврат НСтр("ru = 'Не удалось зарегистрировать сертификат в системном хранилище.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПодписатьФайл()

	Возврат НСтр("ru = 'Не удалось подписать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПодписатьДанные()
	
	Возврат НСтр("ru = 'Не удалось подписать данные.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПроверитьПодпись()

	Возврат НСтр("ru = 'Не удалось проверить подпись.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьЗашифроватьФайл()

	Возврат НСтр("ru = 'Не удалось зашифровать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПодписатьИЗашифроватьФайл()

	Возврат НСтр("ru = 'Не удалось подписать и зашифровать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьРасшифроватьФайл()

	Возврат НСтр("ru = 'Не удалось расшифровать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПолучитьСвойстваПодписи()

	Возврат НСтр("ru = 'Не удалось получить свойства подписи.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПолучитьХешФайла()
	
	Возврат НСтр("ru = 'Не удалось получить хеш файла.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьНайтиСертификат(Сертификат = Неопределено)

	ПредставлениеСертификата = "";
	Если ЗначениеЗаполнено(Сертификат) Тогда
		Если ЗаполненОтпечатокСертификата(Сертификат) Тогда
			ПредставлениеСертификата = Сертификат.Отпечаток;
		ИначеЕсли ЗаполненСерийныйНомерСертификата(Сертификат) Тогда
			ПредставлениеСертификата = Сертификат.СерийныйНомер + " : " + Сертификат.Поставщик;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось найти сертификат <%1>  в системном хранилище.'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ПредставлениеСертификата);
	
КонецФункции

Функция ОписаниеОшибкиНеВведенПарольДоступаКЗакрытомуКлючу()

	Возврат НСтр("ru = 'Операция прервана: требуется ввести пароль доступа к закрытому ключу!'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьОткрытьСертификат()

	Возврат НСтр("ru = 'Не удалось открыть сертификат.'");
	
КонецФункции

Функция ОписаниеОшибкиОшибкаАвторизации()
	
	Возврат НСтр("ru = 'Ошибка авторизации на сервере криптографии.'");
	
КонецФункции

#КонецОбласти

Функция МассивВСтрокуСРазделителями(ИсходныйМассив)
	
	СтроксСРазделителями = "";
	Для Инд = 1 По ИсходныйМассив.Количество() Цикл
		СтроксСРазделителями = СтроксСРазделителями + ИсходныйМассив[Инд - 1] + Символы.ПС;
	КонецЦикла;
	Возврат СокрЛП(СтроксСРазделителями);
	
КонецФункции

Функция ЗаменитьНедопустимыеСимволы(СтрокаДляОбработки)
	
	СтрокаПослеОбработки = СтрЗаменить(СтрокаДляОбработки, "\", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "/", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "*", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "<", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, ">", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "|", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, ":", "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, """", "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "?", "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.ВК, "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.ПС, " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.Таб, " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.НПП, " ");
	// замена символов кавычек
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(171), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(187), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8195), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8194), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8216), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8218), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8217), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8220), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8222), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8221), "");
	
	Возврат СтрокаПослеОбработки;
	
КонецФункции

Функция ПолучитьСписокХранилищСертификатов(ХранилищеСертификатов)
	
	СписокЛокальныхХранилищСертификатов = Новый Массив;
	СписокЗащищенныхХранилищСертификатовНаСервере = Новый Массив;
	Если Не ЗначениеЗаполнено(ХранилищеСертификатов) Тогда
		СписокЛокальныхХранилищСертификатов.Добавить("MY");
		СписокЛокальныхХранилищСертификатов.Добавить("AddressBook");
		СписокЛокальныхХранилищСертификатов.Добавить("CA");
		СписокЛокальныхХранилищСертификатов.Добавить("ROOT");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("MY");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("AddressBook");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("CA");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("ROOT");
	ИначеЕсли ТипЗнч(ХранилищеСертификатов) = Тип("Массив") Тогда
		Для Каждого Хранилище Из ХранилищеСертификатов Цикл
			Если Хранилище.ЭтоЛокальноеХранилище Тогда
				СписокЛокальныхХранилищСертификатов.Добавить(Хранилище.Хранилище);
			Иначе
				СписокЗащищенныхХранилищСертификатовНаСервере.Добавить(Хранилище.Хранилище);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ХранилищеСертификатов) = Тип("Структура") Тогда
		Если ХранилищеСертификатов.ЭтоЛокальноеХранилище Тогда
			СписокЛокальныхХранилищСертификатов.Добавить(ХранилищеСертификатов.Хранилище);
		Иначе
			СписокЗащищенныхХранилищСертификатовНаСервере.Добавить(ХранилищеСертификатов.Хранилище);
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Параметр <ХранилищеСертификатов> должен иметь тип Структура, Массив или Неопределено.'"));
	КонецЕсли;
	
	Результат = Новый Структура("ЛокальныеХранилища, ХранилищаНаСервере", 
		СписокЛокальныхХранилищСертификатов, СписокЗащищенныхХранилищСертификатовНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыВМассив(КоличествоПараметров, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено,
						Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено)
						
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Параметр1);
	
	Если КоличествоПараметров > 1 Тогда
		МассивПараметров.Добавить(Параметр2);
	КонецЕсли;
	
	Если КоличествоПараметров > 2 Тогда
		МассивПараметров.Добавить(Параметр3);
	КонецЕсли;
	
	Если КоличествоПараметров > 3 Тогда
		МассивПараметров.Добавить(Параметр4);
	КонецЕсли;
	
	Если КоличествоПараметров > 4 Тогда
		МассивПараметров.Добавить(Параметр5);
	КонецЕсли;
	
	Если КоличествоПараметров > 5 Тогда
		МассивПараметров.Добавить(Параметр6);
	КонецЕсли;
	
	Если КоличествоПараметров > 6 Тогда
		МассивПараметров.Добавить(Параметр7);
	КонецЕсли;
	
	Возврат МассивПараметров;
						
КонецФункции
	
Процедура ПредварительноСоздатьМенеджерКриптографии(ОповещениеОЗавершении, ИмяМетода, ВходящиеПараметры = Неопределено, ВыводитьСообщения = Истина, МенеджерКриптографии = Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Если ЗначениеЗаполнено(ВходящиеПараметры) Тогда
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
	КонецЕсли;
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения(
		ИмяМетода, ЭтотОбъект, Контекст);
		
	Если МенеджерКриптографии <> Неопределено Тогда
		Результат = ПодготовитьРезультат(Истина, "МенеджерКриптографии", МенеджерКриптографии);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	Иначе
		СоздатьМенеджерКриптографии(Оповещение, ВыводитьСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибке(ИмяМетода, ОписаниеОшибки, ИнформацияОбОшибке = Неопределено)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове ""%1"" менеджера криптографии.
                  |по причине:
                  |%2
                  |по причине:
                  |%3'"),
			ИмяМетода, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ОписаниеОшибки);
	Иначе
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове ""%1"" менеджера криптографии.
                  |по причине:
                  |%2'"),
			ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия(), 
		"Ошибка",
		Комментарий, 
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		Истина);
		
КонецПроцедуры
	
Процедура СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, ИмяМетода, ОписаниеОшибки = Неопределено, ИнформацияОбОшибке = Неопределено)
	
	ВходящийКонтекст.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	ВходящийКонтекст.Вставить("ИмяМетода", ИмяМетода);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ВходящийКонтекст.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения(
		"МенеджерКриптографииПослеПолученияЗначенияСвойстваСписокОшибок", ЭтотОбъект, ВходящийКонтекст,
		"МенеджерКриптографииПриОшибкеПолученияЗначенияСвойстваСписокОшибок", ЭтотОбъект);
		
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура МенеджерКриптографииПослеПолученияЗначенияСвойстваСписокОшибок(ЗначениеСвойства, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.Свойство("ИнформацияОбОшибке") Тогда
		ИнформацияОбОшибке = ВходящийКонтекст.ИнформацияОбОшибке;
	Иначе
		ИнформацияОбОшибке = Неопределено;
	КонецЕсли;
	
	ЗаписатьИнформациюОбОшибке(ВходящийКонтекст.ИмяМетода, ЗначениеСвойства, ИнформацияОбОшибке);
	
	Если ВходящийКонтекст.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ВходящийКонтекст.ОписаниеОшибки) Тогда
		ОписаниеОшибки = ВходящийКонтекст.ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии();
	КонецЕсли;
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры

Процедура МенеджерКриптографииПриОшибкеПолученияЗначенияСвойстваСписокОшибок(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Ошибка чтения свойства ""СписокОшибок"" менеджера криптографии.'");
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия(), "Ошибка", ОписаниеОшибки,, Истина);
	
	ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии();
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры
	
Процедура ВывестиСообщениеПриНеобходимости(ВыводитьСообщения, Сообщение)
	
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьРезультат(Выполнено, ИмяПоляРезультат = Неопределено, ЗначениеРезультат = Неопределено, ВходящийКонтекст = Неопределено)
	
	Результат = Новый Структура("Выполнено", Выполнено);
	
	Если ВходящийКонтекст <> Неопределено Тогда
		Если ВходящийКонтекст.Свойство("МенеджерКриптографии") Тогда
			Результат.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ДвоичныеДанные") Тогда
			Результат.Вставить("ДвоичныеДанные", ВходящийКонтекст.ДвоичныеДанные);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ОписаниеОшибки") Тогда
			Результат.Вставить("ОписаниеОшибки", ВходящийКонтекст.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляРезультат) Тогда
		Результат.Вставить(ИмяПоляРезультат, ЗначениеРезультат);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ИмяСобытия()
	
	Возврат НСтр("ru = 'Электронный документооборот с контролирующими органами. Менеджер криптографии'");
	
КонецФункции

Функция ЗаполнитьПараметрыКриптографии(ДоступныеКриптопровайдеры, ОписаниеОшибки)
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ПутьМодуляКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии();
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			ОписаниеОшибки = НСтр("ru='Не указан путь модуля криптографии в настройках программы.'");
			Возврат Ложь;
		КонецЕсли;            
		КриптопровайдерCryptoPro = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro();
		
		ДоступныеКриптопровайдеры = Новый Массив;
		ДоступныеКриптопровайдеры.Добавить(Новый ФиксированнаяСтруктура(Новый Структура("Имя, Путь, Тип", КриптопровайдерCryptoPro.Имя, ПутьМодуляКриптографии, КриптопровайдерCryptoPro.Тип)));
		Возврат Истина;
	Иначе
		ПоддерживаемыеКриптопровайдеры = КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры();
		ДоступныеКриптопровайдеры = ПоддерживаемыеКриптопровайдеры;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьИмяФайла(ИмяФайлаИлиРасширение, Контекст, ИмяМетода)
		
	Оповещение = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект, Контекст);
	Если СтрНайти(ИмяФайлаИлиРасширение, "|") Тогда
		СоставляющиеПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаИлиРасширение, "|");
		ИмяФайлаИлиРасширение = СоставляющиеПути[0] + СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", "") + СоставляющиеПути[1];
	КонецЕсли;                                 
	
	Если ЗначениеЗаполнено(ИмяФайлаИлиРасширение) И Лев(ИмяФайлаИлиРасширение, 1) <> "." Тогда
		ВыполнитьОбработкуОповещения(
			Оповещение,
			ПодготовитьРезультат(Истина, "ИмяФайла", ИмяФайлаИлиРасширение, Контекст));
	Иначе
		ОперацииСФайламиЭДКОКлиент.ПолучитьИмяВременногоФайлаНаКлиенте(
			Оповещение, ИмяФайлаИлиРасширение, Контекст.ВыводитьСообщения);
	КонецЕсли;
		
КонецПроцедуры

Функция КлиентПоддерживаетСинхронныеВызовы()
	
#Если ВебКлиент Тогда
	// В Chrome и Firefox синхронные методы не поддерживаются.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияПрограммыМассив = СтрРазделить(СистемнаяИнформация.ИнформацияПрограммыПросмотра, " ", Ложь);
	
	Для Каждого ИнформацияПрограммы Из ИнформацияПрограммыМассив Цикл
		Если СтрНайти(ИнформацияПрограммы, "Chrome") > 0 ИЛИ СтрНайти(ИнформацияПрограммы, "Firefox") > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоАдресВоВременномХранилище(Адрес)
	
	Если СтрНайти(Адрес, "e1cib/tempstorage/") = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СертификатВЗащищенномХранилищеНаСервере(Сертификат)
	
	Возврат ЗначениеЗаполнено(Сертификат) 
			И (Сертификат.Свойство("ЭтоЭлектроннаяПодписьВМоделиСервиса") И Сертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса = Истина
			ИЛИ Сертификат.Свойство("ЭлектроннаяПодписьВМоделиСервиса") И Сертификат.ЭлектроннаяПодписьВМоделиСервиса = Истина);
	
КонецФункции   

Процедура ЗаполнитьПарольДоступаКЗакрытомуКлючу(ОповещениеОЗавершении, Сертификат, МенеджерКриптографии)
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СерийныйНомер", Сертификат.СерийныйНомер);
		ПараметрыФормы.Вставить("Поставщик", Сертификат.Поставщик);
		
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗаполнитьПарольДоступаКЗакрытомуКлючуЗавершение", ЭтотОбъект, Контекст);
			
		ОткрытьФорму(
			"ОбщаяФорма.ФормаВводаПароляЗакрытогоКлюча",
			ПараметрыФормы,,,,, 
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении, 
			ПодготовитьРезультат(Истина, "МенеджерКриптографии", МенеджерКриптографии));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПарольДоступаКЗакрытомуКлючуЗавершение(Пароль, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"МенеджерКриптографииПослеУстановкиЗначенияСвойстваПарольДоступаКЗакрытомуКлючу", ЭтотОбъект, ВходящийКонтекст);
	Если ТипЗнч(Пароль) = Тип("Строка") Тогда
		ВходящийКонтекст.МенеджерКриптографии.НачатьУстановкуПарольДоступаКЗакрытомуКлючу(Оповещение, Пароль);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(
				Ложь, "ОписаниеОшибки", 
				ОписаниеОшибкиНеВведенПарольДоступаКЗакрытомуКлючу(),
				ВходящийКонтекст));	
	КонецЕсли;
		
КонецПроцедуры

Процедура МенеджерКриптографииПослеУстановкиЗначенияСвойстваПарольДоступаКЗакрытомуКлючу(ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии));
	
КонецПроцедуры

Функция СертификатЗаполнен(Сертификат)
	
	Возврат ЗаполненОтпечатокСертификата(Сертификат) ИЛИ ЗаполненСерийныйНомерСертификата(Сертификат);
	
КонецФункции

Функция ЗаполненСерийныйНомерСертификата(Сертификат)
	
	Если ЗначениеЗаполнено(Сертификат)
		И Сертификат.Свойство("СерийныйНомер") И Сертификат.Свойство("Поставщик")
		И ЗначениеЗаполнено(Сертификат.СерийныйНомер) И ЗначениеЗаполнено(Сертификат.Поставщик) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЗаполненОтпечатокСертификата(Сертификат)
	
	Если ЗначениеЗаполнено(Сертификат)
		И Сертификат.Свойство("Отпечаток") 
		И ЗначениеЗаполнено(Сертификат.Отпечаток) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАдресРезультата(ФайлРезультата, ИсходныйФайл)
	
	АдресРезультата = Неопределено;
	Если ЭтоАдресВоВременномХранилище(ФайлРезультата) Тогда
		АдресРезультата = ФайлРезультата; // поместить расшифрованные данные по указанному адресу
	ИначеЕсли ЭтоАдресВоВременномХранилище(ИсходныйФайл)
		И Не ЗначениеЗаполнено(ФайлРезультата) Тогда
		АдресРезультата = ИсходныйФайл; // заместить исходный файл
	КонецЕсли;
	
	Возврат АдресРезультата;
	
КонецФункции

Функция ОписаниеОшибкиНеУказаныКлючевыеПараметрыСертификатаДляПоиска()
	
	Возврат НСтр("ru = 'Не указаны ключевые параметры сертификата для поиска.'");
	
КонецФункции

#КонецОбласти