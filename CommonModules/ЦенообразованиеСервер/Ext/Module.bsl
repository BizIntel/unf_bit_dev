
#Область СлужебныеПроцедурыИФункции

Процедура ОтразитьЦеныКонтрагентов(ТаблицаНовыеЦены, ТаблицаТекущиеЦены, НаборЗаписейРегистра) Экспорт
	
	Если ТаблицаНовыеЦены.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборЦен = Новый Структура("ВидЦенКонтрагента, Номенклатура, Характеристика");
	Для каждого СтрокаТаблицы Из ТаблицаНовыеЦены Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборЦен, СтрокаТаблицы);
		
		МассивТекущихЦен = ТаблицаТекущиеЦены.НайтиСтроки(ОтборЦен);
		Если МассивТекущихЦен.Количество() > 0 Тогда
			
			Для каждого СтрокаМассива Из МассивТекущихЦен Цикл
				
				ТаблицаТекущиеЦены.Удалить(СтрокаМассива);
				
			КонецЦикла;
			
		конецЕсли;
		
		НоваяЗапись = ТаблицаТекущиеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
	КонецЦикла; 
	
	НаборЗаписейРегистра.Загрузить(ТаблицаТекущиеЦены);
	НаборЗаписейРегистра.Записать(Истина);
	
КонецПроцедуры

Функция ЗаписьОЦенеСуществует(КлючЗаписи) Экспорт
	
	СтруктураВозврата = Новый Структура("ЗаписьСуществует, Период, ВидЦен, Номенклатура, Характеристика", Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, КлючЗаписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РС.Период
	|	,РС.Актуальность
	|	,РС.ВидЦен
	|	,РС.Номенклатура
	|	,РС.Характеристика
	|	,РС.ЕдиницаИзмерения
	|	,РС.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РС
	|ГДЕ
	|	РС.Период = &Период
	|	И РС.ВидЦен = &ВидЦен
	|	И РС.Номенклатура = &Номенклатура
	|	И РС.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Период", НачалоДня(КлючЗаписи.Период));
	Запрос.УстановитьПараметр("ВидЦен", КлючЗаписи.ВидЦен);
	Запрос.УстановитьПараметр("Номенклатура", КлючЗаписи.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", КлючЗаписи.Характеристика);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	СтруктураВозврата.ЗаписьСуществует = (ТаблицаРезультат.Количество() > 0);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбновитьПризнакиАктуальностиВидовЦен()
	
	// Актуальность не ключевой признак, поэтому использование блокировок считаем не целесообразным...
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= 
	"Выбрать различные 
	|	ВидыЦенДинамические.Ссылка КАК Ссылка
	|	,ВидыЦенДинамические.ЦеныАктуальны КАК ЦеныАктуальны
	|Поместить ВидыЦенДинамические
	|Из Справочник.ВидыЦен КАК ВидыЦенДинамические
	|Где ВидыЦенДинамические.ТипВидаЦен <> Значение(Перечисление.ТипыВидовЦен.Статический)
	|
	|;Выбрать различные
	|	ВидыЦенОчередиЦен.ВидЦенРасчетный КАК Ссылка
	|Поместить ВидыЦенОчередиЦен
	|Из РегистрСведений.ОчередьРасчетаЦен КАК ВидыЦенОчередиЦен
	|
	|;Выбрать 
	|	ВидыЦенДинамические.Ссылка КАК ВидЦен
	|	,ВидыЦенДинамические.ЦеныАктуальны КАК ЦеныАктуальны
	|	,Выбор когда ВидыЦенОчередиЦен.Ссылка Есть NULL
	|		Тогда Ложь 
	|		Иначе Истина Конец КАК ЕстьЗаписиОчередиЦен
	|Из ВидыЦенДинамические КАК ВидыЦенДинамические
	|	Левое Соединение ВидыЦенОчередиЦен КАК ВидыЦенОчередиЦен
	|	По ВидыЦенДинамические.Ссылка = ВидыЦенОчередиЦен.Ссылка
	|
	|;Выбрать Первые 1 * Из ВидыЦенОчередиЦен";
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВидовЦен = РезультатЗапроса[2].Выгрузить();
	Для каждого ЗаписьОВидеЦен Из ТаблицаВидовЦен Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗаписьОВидеЦен.ВидЦен) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗаписьОВидеЦен.ЦеныАктуальны = Истина
			И ЗаписьОВидеЦен.ЕстьЗаписиОчередиЦен = Истина Тогда
			
			ИзменитьПризнакАктуальностиУВидаЦен(ЗаписьОВидеЦен.ВидЦен, Ложь);
			
		КонецЕсли;
			
		Если ЗаписьОВидеЦен.ЦеныАктуальны = Ложь
			И ЗаписьОВидеЦен.ЕстьЗаписиОчередиЦен = Ложь Тогда
			
			ИзменитьПризнакАктуальностиУВидаЦен(ЗаписьОВидеЦен.ВидЦен, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатЗапроса[3].Пустой() Тогда
		
		ВыключитьВключитьИспользованиеЗаданияРасчетаОчередиЦен(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки = "", ЗаписыватьЦены = Истина) Экспорт
	
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	ПериодЗаписи 			= ПараметрыРасчета.ПериодЗаписи;
	ФормаВладелец			= ПараметрыРасчета.УникальныйИдентификатор;
	ЦеныРасчитаны			= Ложь;
	БазовыйВидЦен			= ВидЦенРасчетный.БазовыйВидЦен;
	ОкруглятьВБольшуюСторону= ВидЦенРасчетный.ОкруглятьВБольшуюСторону;
	ПравилоОкругления		= ВидЦенРасчетный.ПорядокОкругления;
	
	БлокировкаДанных		= Новый БлокировкаДанных;
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатурыКонтрагентов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("ВидЦенРасчетный",	ВидЦенРасчетный);
	Запрос.УстановитьПараметр("Период", 			НачалоДня(ПериодЗаписи));
	Запрос.УстановитьПараметр("БазовыйВидЦен", 		БазовыйВидЦен);
	Запрос.УстановитьПараметр("Процент", 			ВидЦенРасчетный.Процент);
	
	Запрос.Текст			=
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦен,
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РасчитываемыеЗаписи
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|ГДЕ
	|	ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И ОчередьЦен.ПериодЗаписи = &Период
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаннееРасчитаныеЦены.Период,
	|	РаннееРасчитаныеЦены.ВидЦен,
	|	РаннееРасчитаныеЦены.Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика,
	|	РаннееРасчитаныеЦены.Цена,
	|	РаннееРасчитаныеЦены.Актуальность,
	|	РаннееРасчитаныеЦены.ЕдиницаИзмерения,
	|	РаннееРасчитаныеЦены.ВключаяХарактеристики,
	|	РаннееРасчитаныеЦены.Автор,
	|	ЛОЖЬ КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РаннееРасчитаныеЦены
	|ГДЕ
	|	РаннееРасчитаныеЦены.Период = &Период
	|	И РаннееРасчитаныеЦены.ВидЦен = &ВидЦенРасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаннееРасчитаныеЦены.Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеЦеныРасчетногоВидаЦен.Период,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВидЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.Номенклатура,
	|	ТекущиеЦеныРасчетногоВидаЦен.Характеристика,
	|	ВЫБОР
	|		КОГДА РасчитываемыеЗаписи.ТребуетсяРасчет = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ ТекущиеЦеныРасчетногоВидаЦен.Цена
	|	КОНЕЦ КАК Цена,
	|	ТекущиеЦеныРасчетногоВидаЦен.Актуальность,
	|	ТекущиеЦеныРасчетногоВидаЦен.ЕдиницаИзмерения,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВключаяХарактеристики,
	|	ТекущиеЦеныРасчетногоВидаЦен.Автор
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦен КАК ТекущиеЦеныРасчетногоВидаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|		ПО ТекущиеЦеныРасчетногоВидаЦен.Номенклатура = РасчитываемыеЗаписи.Номенклатура
	|			И ТекущиеЦеныРасчетногоВидаЦен.Характеристика = РасчитываемыеЗаписи.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период,
	|	НеТребующиеПерерасчета.ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика,
	|	НеТребующиеПерерасчета.Цена,
	|	НеТребующиеПерерасчета.Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор
	|ПОМЕСТИТЬ НеТребующиеПерерасчета
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения КАК НеТребующиеПерерасчета
	|ГДЕ
	|	НеТребующиеПерерасчета.Цена <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период,
	|	НеТребующиеПерерасчета.ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика,
	|	НеТребующиеПерерасчета.Цена,
	|	НеТребующиеПерерасчета.Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор,
	|	ИСТИНА КАК ПересчетВыполнен
	|ПОМЕСТИТЬ ВсеЗаписиОЦенах
	|ИЗ
	|	НеТребующиеПерерасчета КАК НеТребующиеПерерасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	РасчитываемыеЗаписи.ВидЦен,
	|	РасчитываемыеЗаписи.Номенклатура,
	|	РасчитываемыеЗаписи.Характеристика,
	|	0,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА
	|ИЗ
	|	РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗаписиОЦенах.Период,
	|	ВсеЗаписиОЦенах.ВидЦен,
	|	ВсеЗаписиОЦенах.Номенклатура,
	|	ВсеЗаписиОЦенах.Характеристика,
	|	ЕСТЬNULL(РСЦены.Цена, 0) + ЕСТЬNULL(РСЦены.Цена, 0) * &Процент / 100 КАК Цена,
	|	ВсеЗаписиОЦенах.Актуальность,
	|	ВЫБОР
	|		КОГДА ВсеЗаписиОЦенах.Цена = 0
	|			ТОГДА ЕСТЬNULL(РСЦены.ЕдиницаИзмерения, ВсеЗаписиОЦенах.Номенклатура.ЕдиницаИзмерения)
	|		КОГДА ВсеЗаписиОЦенах.ЕдиницаИзмерения В (ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка), НЕОПРЕДЕЛЕНО, NULL)
	|			ТОГДА ВсеЗаписиОЦенах.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВсеЗаписиОЦенах.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВсеЗаписиОЦенах.ВключаяХарактеристики,
	|	ВсеЗаписиОЦенах.Автор,
	|	ВсеЗаписиОЦенах.ПересчетВыполнен
	|ИЗ
	|	ВсеЗаписиОЦенах КАК ВсеЗаписиОЦенах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦен = &БазовыйВидЦен) КАК РСЦены
	|		ПО ВсеЗаписиОЦенах.Номенклатура = РСЦены.Номенклатура
	|			И ВсеЗаписиОЦенах.Характеристика = РСЦены.Характеристика";
	
	Попытка
		
		НачатьТранзакцию();
		БлокировкаДанных.Заблокировать();
		
		ЗаписиРегистраЗаПериода = Запрос.Выполнить().Выгрузить();
		КоличествоЗаписей		= ЗаписиРегистраЗаПериода.Количество();
		Пока КоличествоЗаписей > 0 Цикл
			
			ЗаписьРегистра = ЗаписиРегистраЗаПериода.Получить(КоличествоЗаписей - 1);
			
			ЗаписьРегистра.Цена = ЦенообразованиеФормулыСервер.ОкруглитьЧислоПоПравилу(ЗаписьРегистра.Цена, ОкруглятьВБольшуюСторону, ПравилоОкругления);
			Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.Цена) Тогда
				
				ЗаписиРегистраЗаПериода.Удалить(ЗаписьРегистра);
				
			КонецЕсли;
			
			КоличествоЗаписей = КоличествоЗаписей - 1;
			
		КонецЦикла;
		
		Если ЗаписыватьЦены Тогда
			
			ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, ЗаписиРегистраЗаПериода);
			
		Иначе
			
			ПараметрыРасчета.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ЗаписиРегистраЗаПериода, ФормаВладелец));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРасчитаны = Истина;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Расчет очереди цен", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки = "", ЗаписыватьЦены = Истина) Экспорт
	
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	Формула					= ПараметрыРасчета.ВидЦенРасчетный.Формула;
	ПериодЗаписи 			= ПараметрыРасчета.ПериодЗаписи;
	ФормаВладелец			= ПараметрыРасчета.УникальныйИдентификатор;
	ТаблицаОперандов		= ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(Формула);
	
	БлокировкаДанных		= Новый БлокировкаДанных;
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатурыКонтрагентов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("ВидЦенРасчетный",	ВидЦенРасчетный);
	Запрос.УстановитьПараметр("ПериодЗаписи", 		ПериодЗаписи);
	
	Запрос.Текст			=
	"ВЫБРАТЬ
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦен,
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РасчитываемыеЗаписи
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|ГДЕ
	|	ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И ОчередьЦен.ПериодЗаписи = &ПериодЗаписи
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаннееРасчитаныеЦены.Период,
	|	РаннееРасчитаныеЦены.ВидЦен,
	|	РаннееРасчитаныеЦены.Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика,
	|	РаннееРасчитаныеЦены.Цена,
	|	РаннееРасчитаныеЦены.Актуальность,
	|	РаннееРасчитаныеЦены.ЕдиницаИзмерения,
	|	РаннееРасчитаныеЦены.ВключаяХарактеристики,
	|	РаннееРасчитаныеЦены.Автор,
	|	ЛОЖЬ КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РаннееРасчитаныеЦены
	|ГДЕ
	|	РаннееРасчитаныеЦены.Период = &ПериодЗаписи
	|	И РаннееРасчитаныеЦены.ВидЦен = &ВидЦенРасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаннееРасчитаныеЦены.Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеЦеныРасчетногоВидаЦен.Период,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВидЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.Номенклатура,
	|	ТекущиеЦеныРасчетногоВидаЦен.Характеристика,
	|	ВЫБОР
	|		КОГДА РасчитываемыеЗаписи.ТребуетсяРасчет = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ ТекущиеЦеныРасчетногоВидаЦен.Цена
	|	КОНЕЦ КАК Цена,
	|	ТекущиеЦеныРасчетногоВидаЦен.Актуальность,
	|	ТекущиеЦеныРасчетногоВидаЦен.ЕдиницаИзмерения,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВключаяХарактеристики,
	|	ТекущиеЦеныРасчетногоВидаЦен.Автор
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦен КАК ТекущиеЦеныРасчетногоВидаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|		ПО ТекущиеЦеныРасчетногоВидаЦен.Номенклатура = РасчитываемыеЗаписи.Номенклатура
	|			И ТекущиеЦеныРасчетногоВидаЦен.Характеристика = РасчитываемыеЗаписи.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период,
	|	НеТребующиеПерерасчета.ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика,
	|	НеТребующиеПерерасчета.Цена,
	|	НеТребующиеПерерасчета.Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор
	|ПОМЕСТИТЬ НеТребующиеПерерасчета
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения КАК НеТребующиеПерерасчета
	|ГДЕ
	|	НеТребующиеПерерасчета.Цена <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период,
	|	НеТребующиеПерерасчета.ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика,
	|	НеТребующиеПерерасчета.Цена,
	|	НеТребующиеПерерасчета.Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор,
	|	ИСТИНА КАК ПересчетВыполнен
	|ИЗ
	|	НеТребующиеПерерасчета КАК НеТребующиеПерерасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПериодЗаписи,
	|	РасчитываемыеЗаписи.ВидЦен,
	|	РасчитываемыеЗаписи.Номенклатура,
	|	РасчитываемыеЗаписи.Характеристика,
	|	0,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА
	|ИЗ
	|	РасчитываемыеЗаписи КАК РасчитываемыеЗаписи";
	
	МассивЦеныНоменклатуры = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Истина));
	Если МассивЦеныНоменклатуры.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивВидовЦен", ТаблицаОперандов.ВыгрузитьКолонку("ВидЦен"));
		
		Запрос.Текст	= Запрос.Текст + ";" + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦен,
		|	ЦеныНоменклатуры.ВидЦен.ИдентификаторФормул КАК Идентификатор,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатуры.Цена КАК Значение
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ПериодЗаписи,
		|			Актуальность
		|				И ВидЦен В (&МассивВидовЦен)) КАК ЦеныНоменклатуры";
		
	КонецЕсли;
	
	МассивЦеныКонтрагентов = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Ложь));
	Если МассивЦеныКонтрагентов.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивВидовЦенКонтрагентов", ТаблицаОперандов.ВыгрузитьКолонку("ВидЦен"));
		
		Запрос.Текст	= Запрос.Текст + ";" + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныКонтраентов.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
		|	ЦеныКонтраентов.ВидЦенКонтрагента.ИдентификаторФормул КАК Идентификатор,
		|	ЦеныКонтраентов.Номенклатура КАК Номенклатура,
		|	ЦеныКонтраентов.Характеристика КАК Характеристика,
		|	ЦеныКонтраентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЦеныКонтраентов.Цена КАК Значение
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
		|			&ПериодЗаписи,
		|			Актуальность
		|				И ВидЦенКонтрагента В (&МассивВидовЦенКонтрагентов)) КАК ЦеныКонтраентов";
		
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		БлокировкаДанных.Заблокировать();
		
		РезультатВыполнения		= Запрос.ВыполнитьПакет();
		ЗаписиРегистраЗаПериода	= РезультатВыполнения[4].Выгрузить();
		
		Если МассивЦеныНоменклатуры.Количество() > 0
			ИЛИ МассивЦеныКонтрагентов.Количество() > 0 Тогда
			
			ТаблицаОперандов.Колонки.Добавить("Значение");
			
			Если МассивЦеныНоменклатуры.Количество() > 0 Тогда
				
				Для каждого Строка Из МассивЦеныНоменклатуры Цикл
					
					Строка.Значение = РезультатВыполнения[5].Выгрузить();
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если МассивЦеныКонтрагентов.Количество() > 0 Тогда
				
				ИндексЗапроса = ?(МассивЦеныНоменклатуры.Количество() > 0, 6, 5);
				
				Для каждого Строка Из МассивЦеныКонтрагентов Цикл
					
					Строка.Значение = РезультатВыполнения[ИндексЗапроса].Выгрузить();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЦенообразованиеФормулыСервер.РасчитатьДанныеКоллекции(Формула, ЗаписиРегистраЗаПериода, ТаблицаОперандов, ВидЦенРасчетный);
		
		Если ЗаписыватьЦены Тогда
			
			ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, ЗаписиРегистраЗаПериода);
			
		Иначе
			
			ПараметрыРасчета.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ЗаписиРегистраЗаПериода, ФормаВладелец));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРасчитаны = Истина;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Расчет очереди цен", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, ЗаписиРегистраЗаПериода) Экспорт
	
	ЦеныНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	ЦеныНоменклатуры.Отбор.Период.Установить(ПериодЗаписи, Истина);
	ЦеныНоменклатуры.Отбор.ВидЦен.Установить(ВидЦенРасчетный, Истина);
	ЦеныНоменклатуры.Загрузить(ЗаписиРегистраЗаПериода);
	ЦеныНоменклатуры.Записать(Истина);
	
	ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
	ОчередьРасчетаЦен.Отбор.ПериодЗаписи.Установить(ПериодЗаписи, Истина);
	ОчередьРасчетаЦен.Отбор.ВидЦенРасчетный.Установить(ВидЦенРасчетный, Истина);
	ОчередьРасчетаЦен.Очистить();
	ОчередьРасчетаЦен.Записать();
	
КонецПроцедуры

Процедура РассчитатьЦеныИзОчередиЦен()
	
	Запрос = Новый Запрос("Выбрать Различные РС.ВидЦенРасчетный, РС.ПериодЗаписи Из РегистрСведений.ОчередьРасчетаЦен КАК РС 
							|Где РС.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2 И РС.ВидЦенРасчетный.РассчитыватьАвтоматически");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("ВидЦенРасчетный", Выборка.ВидЦенРасчетный);
		ПараметрыРасчета.Вставить("ПериодЗаписи", НачалоДня(Выборка.ПериодЗаписи));
		ПараметрыРасчета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
		
		ЦеныРасчитаны	= Ложь;
		ОписаниеОшибки	= "";
		Если Выборка.ВидЦенРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
			
			РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, Истина);
			
		ИначеЕсли Выборка.ВидЦенРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
			
			РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, Истина);
			
		КонецЕсли;
		
		Если НЕ ЦеныРасчитаны Тогда
			
			ВидЦенОбъект							= Выборка.ВидЦенРасчетный.ПолучитьОбъект();
			ВидЦенОбъект.КоличествоПопытокСлужебный = ВидЦенОбъект.КоличествоПопытокСлужебный + 1;
			ВидЦенОбъект.ОписаниеОшибки				= ОписаниеОшибки;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦенОбъект, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетОчередиЦен() Экспорт
	
	РасчетОчередиЦенРазовымЗаданием();
	
КонецПроцедуры

Процедура РасчетОчередиЦенРазовымЗаданием() Экспорт
	
	ЗаписьЖурналаРегистрации("Расчет очереди цен", УровеньЖурналаРегистрации.Информация, , , НСтр("ru ='Начало выполнения расчета очереди цен'"));
	
	РассчитатьЦеныИзОчередиЦен();
	
	ОбновитьПризнакиАктуальностиВидовЦен();
	
КонецПроцедуры

Процедура ПодпискаНаСобытиеПриЗаписиЦены(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыеЦены = Источник.Выгрузить();
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыКонтрагентов") Тогда
		
		НовыеЦены.Колонки.ВидЦенКонтрагента.Имя = "ВидЦен";
		
	КонецЕсли;
	
	Если НовыеЦены.Количество() > 0 Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаЦен");
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыЦен");
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НовыеЦены", НовыеЦены);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НовыеЦены.Период КАК ПериодЗаписи,
			|	НовыеЦены.ВидЦен,
			|	НовыеЦены.Номенклатура,
			|	НовыеЦены.Характеристика
			|ПОМЕСТИТЬ НовыеЦены
			|ИЗ
			|	&НовыеЦены КАК НовыеЦены
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
			|	НовыеЦены.Номенклатура,
			|	НовыеЦены.Характеристика,
			|	НовыеЦены.ПериодЗаписи
			|ПОМЕСТИТЬ НовыеЗаписиОчередиЦен
			|ИЗ
			|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НовыеЦены КАК НовыеЦены
			|		ПО СвязиВидовЦен.ВидЦенБазовый = НовыеЦены.ВидЦен
			|			И (НовыеЦены.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеЗаписиОчередиЦен.ВидЦенРасчетный,
			|	НовыеЗаписиОчередиЦен.Номенклатура,
			|	НовыеЗаписиОчередиЦен.Характеристика,
			|	НовыеЗаписиОчередиЦен.ПериодЗаписи
			|ИЗ
			|	НовыеЗаписиОчередиЦен КАК НовыеЗаписиОчередиЦен
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьРасчетаЦен КАК ОчередьРасчетаЦен
			|		ПО (ОчередьРасчетаЦен.ВидЦенРасчетный = НовыеЗаписиОчередиЦен.ВидЦенРасчетный)
			|			И (ОчередьРасчетаЦен.Номенклатура = НовыеЗаписиОчередиЦен.Номенклатура)
			|			И (ОчередьРасчетаЦен.Характеристика = НовыеЗаписиОчередиЦен.Характеристика)
			|			И (ОчередьРасчетаЦен.ПериодЗаписи = НовыеЗаписиОчередиЦен.ПериодЗаписи)
			|ГДЕ
			|	ОчередьРасчетаЦен.ВидЦенРасчетный ЕСТЬ NULL";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
					ОчередьРасчетаЦен.Отбор.ВидЦенРасчетный.Установить(Выборка.ВидЦенРасчетный);
					
					Если ЗначениеЗаполнено(Выборка.ВидЦенРасчетный)
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ВидЦенРасчетный, "ЦеныАктуальны") = Истина Тогда
						
						ВидЦенОбъект 				= Выборка.ВидЦенРасчетный.ПолучитьОбъект();
						ВидЦенОбъект.ЦеныАктуальны	= Ложь;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦенОбъект, Ложь, Ложь);
						
					КонецЕсли;
					
					ОчередьРасчетаЦен.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
					ОчередьРасчетаЦен.Отбор.Характеристика.Установить(Выборка.Характеристика);
					ОчередьРасчетаЦен.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
					ЗаписьОчереди = ОчередьРасчетаЦен.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьОчереди, Выборка);
					ОчередьРасчетаЦен.Записать(Ложь);
					
				КонецЦикла;
				
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
					И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
					
					ВыключитьВключитьИспользованиеЗаданияРасчетаОчередиЦен(Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
	Иначе
		
		ПроверитьЗавимыеЦены = Ложь;
		Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыКонтрагентов") Тогда
			
			ВидЦен = Источник.Отбор.ВидЦенКонтрагента.Значение;
			ПроверитьЗавимыеЦены = Истина;
			
		Иначе
			
			ВидЦен = Источник.Отбор.ВидЦен.Значение;
			ПроверитьЗавимыеЦены = ЗначениеЗаполнено(ВидЦен) И ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
			
		КонецЕсли;
		
		Если ПроверитьЗавимыеЦены тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "Выбрать РегистрСведений.СвязиВидовЦенСлужебный.ВидЦенРасчетный КАК ВидЦенРасчетный Где ВидЦенБазовый = &ВидЦен";
			Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписейРС = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
				НаборЗаписейРС.Отбор.Период.Установить(Источник.Отбор.Период.Значение);
				НаборЗаписейРС.Отбор.ВидЦен.Установить(Выборка.ВидЦенРасчетный);
				НаборЗаписейРС.Отбор.Номенклатура.Установить(Источник.Отбор.Номенклатура.Значение);
				НаборЗаписейРС.Отбор.Характеристика.Установить(Источник.Отбор.Характеристика.Значение);
				НаборЗаписейРС.Записать();
				
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьПризнакНовинка() Экспорт
	
	// Расписание 14 400 секунд, т.е. 2 раза в течении 8 часов
	
	СрокДействияФлагаНовинка = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос 			= Новый Запрос;
	Запрос.Текст	= "Выбрать СпрНоменклатура.Ссылка Из Справочник.Номенклатура КАК СпрНоменклатура Где СпрНоменклатура.ЭтоНовинка И СпрНоменклатура.СрокДействияФлагаНовинка <= &СрокДействияФлагаНовинка И СпрНоменклатура.СрокДействияФлагаНовинка <> ДАТАВРЕМЯ(01, 01, 01, 00, 00, 00)";
	Запрос.УстановитьПараметр("СрокДействияФлагаНовинка", СрокДействияФлагаНовинка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		МассивНоменклатуры = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Номенклатура");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Попытка
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Блокировка.Заблокировать();
			Для каждого ЭлементМассива Из МассивНоменклатуры Цикл
				
				СправочникОбъект = ЭлементМассива.ПолучитьОбъект();
				СправочникОбъект.ЭтоНовинка = Ложь;
				СправочникОбъект.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Комментарий = НСтр("ru = 'Ошибка работы фонового регламентного задания: СнятиеПризнакаНовинка'")
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации("Снятие признака новинка", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , Комментарий);
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбновлениеИБ

Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.РасчетОчередиЦен");
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.РасчетОчередиЦенРазовымЗаданием");
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ИзменитьРасписаниеОчередиЦен() Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяМетода = Метаданные.РегламентныеЗадания.ОбработкаОчередиЦен.ИмяМетода;
	
	Запрос = Новый Запрос("Выбрать Первые 1 ШаблоныРЗ.Ссылка КАК Шаблон Из Справочник.ШаблоныЗаданийОчереди КАК ШаблоныРЗ Где ШаблоныРЗ.ИмяМетода = &ИмяМетода");
	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	ТаблицаНайденныхШаблоновЗаданий = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаНайденныхШаблоновЗаданий.Количество() > 0 Тогда
		
		ШаблонЗадания = ТаблицаНайденныхШаблоновЗаданий[0].Шаблон.ПолучитьОбъект();
		ШаблонЗадания.Расписание = Новый ХранилищеЗначения(РасписаниеРегламентногоЗаданияПоУмолчанию());
		ШаблонЗадания.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасписаниеРегламентногоЗаданияПоУмолчанию() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание							= Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели				= ДниНедели;
	Расписание.ПериодПовтораВТечениеДня	= 180; // 3 минуты
	Расписание.ПериодПовтораДней		= 1; // каждый день
	Расписание.Месяцы					= Месяцы;
	
	Возврат Расписание;
	
КонецФункции

Процедура ИзменитьПризнакАктуальностиУВидаЦен(ВидЦен, ЦеныАктуальны)

	ВидЦенОбъект 				= ВидЦен.ПолучитьОбъект();
	ВидЦенОбъект.ЦеныАктуальны	= ЦеныАктуальны;
	ВидЦенОбъект.КоличествоПопытокСлужебный = 0;
	ВидЦенОбъект.ОписаниеОшибки	= "";
	
	Попытка
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦенОбъект, Ложь, Ложь);
		
	Исключение
		
		ТекстОшибки = НСтр("ru ='Ошибка обновления свойства ""Цены актуальны"" вида цен [%1]'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидЦен);
		
		ЗаписьЖурналаРегистрации("Расчет очереди цен", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦен, ТекстОшибки);
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ИзменитьЗаданиеРасчетаОчередиЦен (ЗаданиеСсылка, Использование, ЗапланированныйМоментЗапуска = Неопределено)
	
	НовыеПараметрыЗадания = Новый Структура;
	НовыеПараметрыЗадания.Вставить("Использование", Использование);
	
	Если ЗапланированныйМоментЗапуска <> Неопределено Тогда
		
		НовыеПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ЗапланированныйМоментЗапуска);
		
	КонецЕсли;
	
	ОчередьЗаданий.ИзменитьЗадание(ЗаданиеСсылка, НовыеПараметрыЗадания);
	
КонецПроцедуры

Процедура ВыключитьВключитьИспользованиеЗаданияРасчетаОчередиЦен(Использования) Экспорт
	
	ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	Если ОбластьДанных < 1 Тогда
		
		Возврат; // в локальном решение очередь не используется;
		
	КонецЕсли;
	
	ИмяМетода = "ЦенообразованиеСервер.РасчетОчередиЦен";
	
	// Параметры:
	//   ОбластьДанных
	//   Использование
	//   ЗапланированныйМоментЗапуска
	//   ЭксклюзивноеВыполнение.
	//   ИмяМетода - обязательно для указания.
	//   Параметры
	//   Ключ
	//   ИнтервалПовтораПриАварийномЗавершении.
	//   Расписание
	//   КоличествоПовторовПриАварийномЗавершении
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода",		ИмяМетода);
	ПараметрыЗадания.Вставить("ОбластьДанных",	ОбластьДанных);
	
	ТаблицаНайденныхЗаданий = ОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);

	Если ТаблицаНайденныхЗаданий.Количество() = 0 Тогда
	
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование",								Использования);
		ПараметрыЗадания.Вставить("ИмяМетода",									ИмяМетода);
		ПараметрыЗадания.Вставить("ОбластьДанных",								ОбластьДанных);
		ПараметрыЗадания.Вставить("Расписание",									РасписаниеРегламентногоЗаданияПоУмолчанию());
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска",				Дата(1980, 1, 1));
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",		3);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении",	3);
			
		ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		
	Иначе
		
		Если ТаблицаНайденныхЗаданий.Количество() > 1 Тогда
			
			ЭтоПервоеЗадание = Истина;
			Для каждого ЗапланированноеРЗ Из ТаблицаНайденныхЗаданий Цикл
				
				Если ЭтоПервоеЗадание Тогда
					
					ЭтоПервоеЗадание = Ложь;
					Продолжить;
					
				КонецЕсли;
				
				ОчередьЗаданий.УдалитьЗадание(ЗапланированноеРЗ.Идентификатор);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаданиеСсылка = ТаблицаНайденныхЗаданий[0].Идентификатор;
		
		ЗапланированныйМоментЗапуска = ?(ЗаданиеСсылка.ЗапланированныйМоментЗапуска <> Дата(1980, 1, 1), Дата(1980, 1, 1), Неопределено);
		
		ИзменитьЗаданиеРасчетаОчередиЦен(ЗаданиеСсылка, Использования, ЗапланированныйМоментЗапуска);
		
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


