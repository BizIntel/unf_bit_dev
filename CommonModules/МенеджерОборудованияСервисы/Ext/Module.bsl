
#Область ПрограммныйИнтерфейс

// Метод Connect Web-сервиса EquipmentService.
//
Функция Соединиться(ИДУстройства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.УстройствоИспользуется
	|	И ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.WebСервисОборудование)
	|	И ПодключаемоеОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторСервисОборудования";
	
	Запрос.УстановитьПараметр("ИдентификаторСервисОборудования", ИДУстройства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Метод GetSettings Web-сервиса EquipmentService.
//
Функция ПолучитьНастройки(ИДУстройства) Экспорт
	
	СтруктураНастроек = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруНастроек();
	
	МенеджерОборудованияСервисыПереопределяемый.ЗаполнитьНастройкиУстройства(ИДУстройства, СтруктураНастроек);
	
	ПодключаемоеОборудование = ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
	
	ТекстСообщения = МенеджерОборудованияСервисыВызовСервера.ПолучитьТекстXMLНастроек(СтруктураНастроек, ДанныеУстройства.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод GetPriceList Web-сервиса EquipmentService.
//
Функция ПолучитьПрайсЛист(ИДУстройства) Экспорт
	
	СтруктураПрайсЛиста = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
	
	ПодключаемоеОборудование = ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
	
	МенеджерОборудованияСервисыПереопределяемый.ЗаполнитьПрайсЛист(ИДУстройства, СтруктураПрайсЛиста);
	
	ТекстСообщения = МенеджерОборудованияСервисыВызовСервера.ПолучитьТекстXMLПрайсЛиста(СтруктураПрайсЛиста, ДанныеУстройства.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

//Метод GetGood Web-сервиса EquipmentService
Функция ПолучитьТовар(ИДУстройства, Штрихкод) Экспорт
	
	СтруктураТовара = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
	
	ПодключаемоеОборудование = ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
	
	МенеджерОборудованияСервисыПереопределяемый.ЗагрузитьТовар(ИДУстройства, СтруктураТовара, Штрихкод);
	ТекстСообщения = МенеджерОборудованияСервисыВызовСервера.ПолучитьТекстXMLПрайсЛиста(СтруктураТовара, ДанныеУстройства.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод PreparePriceList Web-сервиса EquipmentService.
//
Функция ПолучитьИдентификаторПередачиПрайсЛиста(ИДУстройства) Экспорт
	
	СтруктураПрайсЛиста = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
	
	ПодключаемоеОборудование = ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	
	ИдентификаторПередачи = ПолучитьНеотправленныйИдентификаторИзОчередиСообщений(ПодключаемоеОборудование);
	
	Если ИдентификаторПередачи = Неопределено Тогда
		ИдентификаторПередачи = Строка(Новый УникальныйИдентификатор);
		ЗапуститьФормированиеОчередиСообщенийОбмена(ПодключаемоеОборудование, ИдентификаторПередачи);
	КонецЕсли;
	
	Возврат ИдентификаторПередачи;
	
КонецФункции

// Метод GetPriceListPackage Web-сервиса EquipmentService.
//
Функция ПолучитьПакетПрайсЛиста(ИДУстройства, ИдентификаторПередачи, Рестарт) Экспорт
	
	ПодключаемоеОборудование = ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	
	СтруктураОтвета = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруОтветаПриВыгрузкеПакетаПрайсЛиста();
	
	СтруктураСообщения = ПолучитьСообщениеИзОчередиОбмена(ПодключаемоеОборудование, ИдентификаторПередачи, Рестарт);
	
	Если СтруктураСообщения = Неопределено Тогда
		
		СтруктураОтвета.Успешно = Ложь; // Пакет еще не готов
		
	Иначе
		
		ПометитьСообщениеОбменаВОчередиКакОтправленное(СтруктураСообщения);
		СтруктураОтвета.Успешно  = Истина;
		СтруктураОтвета.ПакетПрайсЛиста = СтруктураСообщения.ДанныеПакета.Получить();
		
	КонецЕсли;
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
	
	ТекстСообщения = СформироватьТекстСообщенияОтветаПолученияПакетаПрайсЛиста(СтруктураОтвета, ДанныеУстройства.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод PostDoc Web-сервиса EquipmentService.
//
Функция ЗагрузитьДокумент(ИДУстройства, ТипДокумента, XMLТекст) Экспорт
	
	СтруктураОтвета = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруОтветаПриЗагрузке();
	СтруктураДокумента = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗагружаемогоДокумента();
	
	ПодключаемоеОборудование = ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
	
	МенеджерОборудованияСервисыВызовСервера.ЗаполнитьСтруктуруДокумента(СтруктураДокумента, ТипДокумента, XMLТекст, ДанныеУстройства.ВерсияФорматаОбмена);
	
	Если НЕ СтруктураДокумента.Отказ Тогда
		МенеджерОборудованияСервисыПереопределяемый.ЗагрузитьДокумент(ИДУстройства, СтруктураОтвета, СтруктураДокумента);
	Иначе
		СтруктураОтвета.Успешно = Ложь;
		СтруктураОтвета.Описание = СтруктураДокумента.СообщениеОбОшибке;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщенияОтветаЗагрузкиДокумента(СтруктураОтвета, ДанныеУстройства.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод GetDocTypes Web-сервиса EquipmentService.
//
Функция ПолучитьТипыДокументов() Экспорт
	
	МассивТипов = Новый Массив;
	МенеджерОборудованияСервисыПереопределяемый.ЗаполнитьТипыДокументов(МассивТипов);
	ТекстСообщения = ПолучитьТекстXMLТиповДокументов(МассивТипов);
	
	Возврат ТекстСообщения;
КонецФункции

// Метод GetVersion Web-сервиса EquipmentService.
//
Функция ПолучитьВерсиюФорматаОбмена(ИДУстройства) Экспорт
	
	ПодключаемоеОборудование = ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	
	Если ПодключаемоеОборудование = Неопределено Тогда
		
		Возврат 0;
	Иначе
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
		
		Возврат ДанныеУстройства.ВерсияФорматаОбмена;
		
	КонецЕсли;
	
	
КонецФункции

// Функция возвращает XML-текст прайс-листа (DocTypes) в формате XDTO-пакета EquipmentService.
//
Функция ПолучитьТекстXMLТиповДокументов(МассивТипов) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен      = МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен();
	ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "DocTypes");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для Каждого ТипДокумента Из МассивТипов Цикл
		ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ТипыДокументовЗапись");
		ЗаписьТипДокумента = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ЗаполнитьЗначенияСвойств(ЗаписьТипДокумента, ТипДокумента);
		ОбъектОбмена.ТипыДокументов.Добавить(ЗаписьТипДокумента);
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Процедура СформироватьОчередьСообщенийОбмена(ПодключаемоеОборудование, ИдентификаторПередачи) Экспорт
	
	ОчиститьОчередьСообщенийОбменаЭкземпляраОборудования(ПодключаемоеОборудование);
	СтруктураПрайсЛиста = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
	
	МенеджерОборудованияСервисыПереопределяемый.ЗаполнитьПрайсЛист(ПодключаемоеОборудование.ИдентификаторWebСервисОборудования, 
		СтруктураПрайсЛиста);
	
	КоличествоЭлементовВПакете = ПолучитьКоличествоЭлементовВПакете(ПодключаемоеОборудование);
	
	МассивПакетов = МенеджерОборудованияКлиентСервер.РазбитьПрайсЛистПоПакетам(СтруктураПрайсЛиста, КоличествоЭлементовВПакете);
	
	Если МассивПакетов.Количество() = 0 Тогда
		
		XMLТекстСообщения = МенеджерОборудованияСервисыВызовСервера.ПолучитьТекстXMLПрайсЛиста(СтруктураПрайсЛиста, ДанныеУстройства.ВерсияФорматаОбмена);
		ДобавитьПакетДанныхВОчередьСообщенийОбмена(ПодключаемоеОборудование, ИдентификаторПередачи, XMLТекстСообщения);
		
	Иначе
		
		ПорядковыйНомер = 1;
		Для Каждого Пакет Из МассивПакетов Цикл
			
			XMLТекстСообщения = МенеджерОборудованияСервисыВызовСервера.ПолучитьТекстXMLПрайсЛиста(Пакет, ДанныеУстройства.ВерсияФорматаОбмена);
			
			ДобавитьПакетДанныхВОчередьСообщенийОбмена(ПодключаемоеОборудование, ИдентификаторПередачи, XMLТекстСообщения, ПорядковыйНомер);
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоЭлементовВПакете(ПодключаемоеОборудование)
	
	ПараметрыУстройства = Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(ПодключаемоеОборудование);
	
	КоличествоЭлементовВПакете = 0;
	
	Если ПараметрыУстройства.Свойство("КоличествоЭлементовВПакете") Тогда
		
		КоличествоЭлементовВПакете = ПараметрыУстройства.КоличествоЭлементовВПакете;
	КонецЕсли;
	
	Возврат КоличествоЭлементовВПакете;
	
КонецФункции

Процедура ЗапуститьФормированиеОчередиСообщенийОбмена(ПодключаемоеОборудование, ИдентификаторПередачи)
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяБаза Тогда
		
		// В файловом варианте сообщение готовится в момент вызова с клиента
		СформироватьОчередьСообщенийОбмена(ПодключаемоеОборудование, ИдентификаторПередачи);
		
	Иначе
		// В клиент-серверном варианте сообщения готовятся в фоновом задании.
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПодключаемоеОборудование);
		МассивПараметров.Добавить(ИдентификаторПередачи);
		
		ИмяФункции = "МенеджерОборудованияСервисы.СформироватьОчередьСообщенийОбмена";
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			ИмяФункции,
			МассивПараметров,
			ИдентификаторПередачи,
			ПодключаемоеОборудование);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЭкземплярОборудованияПоИдентификатору(ИДУстройства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.УстройствоИспользуется
	|	И ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.WebСервисОборудование)
	|	И ПодключаемоеОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторСервисОборудования";
	
	Запрос.УстановитьПараметр("ИдентификаторСервисОборудования", ИДУстройства);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПакетДанныхВОчередьСообщенийОбмена(ПодключаемоеОборудование, ИдентификаторПередачи, ТекстСообщения, ПорядковыйНомер = 1)
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийОбменаСПодключаемымОборудованием.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодключаемоеОборудование.Установить(ПодключаемоеОборудование);
	НаборЗаписей.Отбор.ИдентификаторПередачи.Установить(ИдентификаторПередачи);
	НаборЗаписей.Отбор.ПорядковыйНомер.Установить(ПорядковыйНомер);
	НаборЗаписей.Прочитать();
	
	// Если сообщение с таким номером уже есть в очереди, генерируем исключение.
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ВызватьИсключение(НСтр("ru='Не удалось выполнить отправку данных. Очередь сообщений обмена уже содержит сообщение с номером" + " " + ПорядковыйНомер + ".'"));
		
	КонецЕсли;
	
	НоваяЗапись                          = НаборЗаписей.Добавить();
	НоваяЗапись.ПодключаемоеОборудование = ПодключаемоеОборудование;
	НоваяЗапись.ИдентификаторПередачи    = ИдентификаторПередачи;
	НоваяЗапись.ПорядковыйНомер          = ПорядковыйНомер;
	НоваяЗапись.ДанныеПакета             = Новый ХранилищеЗначения(ТекстСообщения, Новый СжатиеДанных(9)); 
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьОчередьСообщенийОбменаЭкземпляраОборудования(ПодключаемоеОборудование)
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийОбменаСПодключаемымОборудованием.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодключаемоеОборудование.Установить(ПодключаемоеОборудование);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

Функция ПолучитьНеотправленныйИдентификаторИзОчередиСообщений(ПодключаемоеОборудование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ИдентификаторПередачи КАК ИдентификаторПередачи
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийОбменаСПодключаемымОборудованием КАК ОчередьСообщенийОбменаСПодключаемымОборудованием
		|ГДЕ
		|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ПодключаемоеОборудование = &ПодключаемоеОборудование
		|	И НЕ ОчередьСообщенийОбменаСПодключаемымОборудованием.Отправлен";
	
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", ПодключаемоеОборудование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторПередачи;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСообщениеИзОчередиОбмена(ПодключаемоеОборудование, ИдентификаторПередачи, Рестарт)
	
	Если Рестарт Тогда
		СброситьФлагОтправкиВОчередиОбмена(ПодключаемоеОборудование, ИдентификаторПередачи);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ПодключаемоеОборудование,
	|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ИдентификаторПередачи,
	|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ПорядковыйНомер,
	|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ДанныеПакета
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийОбменаСПодключаемымОборудованием КАК ОчередьСообщенийОбменаСПодключаемымОборудованием
	|ГДЕ
	|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ПодключаемоеОборудование = &ПодключаемоеОборудование
	|	И НЕ ОчередьСообщенийОбменаСПодключаемымОборудованием.Отправлен
	|	И ОчередьСообщенийОбменаСПодключаемымОборудованием.ИдентификаторПередачи = &ИдентификаторПередачи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьСообщенийОбменаСПодключаемымОборудованием.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", ПодключаемоеОборудование);
	Запрос.УстановитьПараметр("ИдентификаторПередачи",    ИдентификаторПередачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПакета = Новый Структура;
		СтруктураПакета.Вставить("ПодключаемоеОборудование", Выборка.ПодключаемоеОборудование);
		СтруктураПакета.Вставить("ИдентификаторПередачи",    Выборка.ИдентификаторПередачи);
		СтруктураПакета.Вставить("ПорядковыйНомер",          Выборка.ПорядковыйНомер);
		СтруктураПакета.Вставить("ДанныеПакета",             Выборка.ДанныеПакета);
		
		Возврат СтруктураПакета;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПометитьСообщениеОбменаВОчередиКакОтправленное(СтруктураСообщения)
	
	МенеджерЗаписи = РегистрыСведений.ОчередьСообщенийОбменаСПодключаемымОборудованием.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодключаемоеОборудование = СтруктураСообщения.ПодключаемоеОборудование;
	МенеджерЗаписи.ИдентификаторПередачи = СтруктураСообщения.ИдентификаторПередачи;
	МенеджерЗаписи.ИдентификаторПередачи = СтруктураСообщения.ИдентификаторПередачи;
	
	МенеджерЗаписи.Прочитать();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураСообщения);
	
	МенеджерЗаписи.Отправлен = Истина;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура СброситьФлагОтправкиВОчередиОбмена(ПодключаемоеОборудование, ИдентификаторПередачи);
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийОбменаСПодключаемымОборудованием.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодключаемоеОборудование.Установить(ПодключаемоеОборудование);
	НаборЗаписей.Отбор.ИдентификаторПередачи.Установить(ИдентификаторПередачи);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Отправлен = Ложь;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция СформироватьТекстСообщенияОтветаЗагрузкиДокумента(СтруктураОтвета, ВерсияФорматаОбмена)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен      = МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен(ВерсияФорматаОбмена);
	
	Если ВерсияФорматаОбмена >= 1006 Тогда
		ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "PostDocsResponse");
	Иначе
		ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "Response");
	КонецЕсли;
	
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтруктураОтвета);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СформироватьТекстСообщенияОтветаПолученияПакетаПрайсЛиста(СтруктураОтвета, ВерсияФорматаОбмена)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен      = МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "PriceListPackage");
	
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектОбмена.Успешно = СтруктураОтвета.Успешно;
	
	Если ЗначениеЗаполнено(СтруктураОтвета.ПакетПрайсЛиста) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтруктураОтвета.ПакетПрайсЛиста);
		ТипОбъектаПрайсЛист   = ФабрикаXDTO.Тип(URIИмен, "PriceList");
		ДанныеПрайсЛист = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаПрайсЛист);
		ЧтениеXML.Закрыть();
		ОбъектОбмена.ПрайсЛист = ДанныеПрайсЛист;
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция возвращает XML-текст настроек (Settings) в формате XDTO-пакета EquipmentService.
//
Функция ПолучитьТекстXMLНастроек(СтруктураНастроек, ВерсияФорматаОбмена) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен      = МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен(ВерсияФорматаОбмена);
	ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "Settings");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	СписокПолей = "ВидыОплаты";
	Если ВерсияФорматаОбмена >= 1006 Тогда
		СписокПолей = СписокПолей + ", Налоги, КомбинацииНалогов";
		
		СтруктураНастроек.ВерсияФормата = ВерсияФорматаОбмена;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтруктураНастроек,,СписокПолей);
	
	// Виды оплаты.
	Если СтруктураНастроек.ВидыОплаты <> Неопределено И НЕ СтруктураНастроек.ВидыОплаты.Количество() = 0 Тогда
		
		ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ВидыОплаты");
		ВидОплатыXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
		
		Для Каждого ВидОплаты Из СтруктураНастроек.ВидыОплаты Цикл
			
			ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ВидыОплатыЗапись");
			ЗаписьВидыОплаты = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ЗаполнитьЗначенияСвойств(ЗаписьВидыОплаты, ВидОплаты);
			ВидОплатыXDTO.ВидыОплатыЗапись.Добавить(ЗаписьВидыОплаты);
			
		КонецЦикла;
		
		ОбъектОбмена.ВидыОплаты = ВидОплатыXDTO;
	КонецЕсли;
	
	Если ВерсияФорматаОбмена >= 1006 Тогда
		// Налоги.
		Если СтруктураНастроек.Налоги <> Неопределено И СтруктураНастроек.Налоги.Количество() > 0 Тогда
			
			ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "Налоги");
			НалогиXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
			
			Для Каждого ТекущийНалог Из СтруктураНастроек.Налоги Цикл
				
				ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "НалогиЗапись");
				НалогиЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
				
				ЗаполнитьЗначенияСвойств(НалогиЗапись, ТекущийНалог, , "Ставки");
				
				ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "СтавкиНалогов");
				СтавкиНалоговXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
				
				Для Каждого ТекущаяСтавка Из ТекущийНалог.Ставки Цикл
					
					ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "СтавкиНалоговЗапись");
					СтавкиНалоговЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
					
					ЗаполнитьЗначенияСвойств(СтавкиНалоговЗапись, ТекущаяСтавка);
					
					СтавкиНалоговXDTO.СтавкиНалоговЗапись.Добавить(СтавкиНалоговЗапись);
					
				КонецЦикла;
				
				НалогиЗапись.Ставки = СтавкиНалоговXDTO;
			
				НалогиXDTO.НалогиЗапись.Добавить(НалогиЗапись);
				
			КонецЦикла;
			
			ОбъектОбмена.Налоги = НалогиXDTO;
			
		КонецЕсли;
		
		// Комбинации.
		Если СтруктураНастроек.КомбинацииНалогов <> Неопределено И СтруктураНастроек.КомбинацииНалогов.Количество() > 0 Тогда
			
			ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "КомбинацииНалогов");
			КомбинацииНалоговXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
			
			Для Каждого ТекущаяКомбинация Из СтруктураНастроек.КомбинацииНалогов Цикл
				
				ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "КомбинацииНалоговЗапись");
				КомбинацииНалоговЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
				
				ЗаполнитьЗначенияСвойств(КомбинацииНалоговЗапись, ТекущаяКомбинация, , "Ставки");
				
				ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "СтавкиКомбинаций");
				СтавкиКомбинацийXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
				
				Для Каждого ТекущаяСтавка Из ТекущаяКомбинация.Ставки Цикл
					
					ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "СписокСтавокЗапись");
					СписокСтавокЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
					
					ЗаполнитьЗначенияСвойств(СписокСтавокЗапись, ТекущаяСтавка);
					
					СтавкиКомбинацийXDTO.СписокСтавокЗапись.Добавить(СписокСтавокЗапись);
					
				КонецЦикла;
				
				КомбинацииНалоговЗапись.Ставки = СтавкиКомбинацийXDTO;
			
				КомбинацииНалоговXDTO.КомбинацииНалоговЗапись.Добавить(КомбинацииНалоговЗапись);
				
			КонецЦикла;
			
			ОбъектОбмена.КомбинацииНалогов = КомбинацииНалоговXDTO;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция возвращает XML-текст прайс-листа (PriceList) в формате XDTO-пакета EquipmentService.
//
Функция ПолучитьТекстXMLПрайсЛиста(СтруктураПрайсЛиста, ВерсияФорматаОбмена) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	URIИмен      = МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта      = ФабрикаXDTO.Тип(URIИмен, "PriceList");
	ОбъектПрайсЛист = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектПрайсЛист.ПолнаяЗагрузка = СтруктураПрайсЛиста.ПолнаяЗагрузка;
	
	Если ВерсияФорматаОбмена > 1005 Тогда
		
		ОбъектПрайсЛист.НомерПакета = ?(СтруктураПрайсЛиста.Свойство("НомерПакета") И ЗначениеЗаполнено(СтруктураПрайсЛиста.НомерПакета), СтруктураПрайсЛиста.НомерПакета, 1);
		ОбъектПрайсЛист.ПакетовВсего = ?(СтруктураПрайсЛиста.Свойство("ПакетовВсего") И ЗначениеЗаполнено(СтруктураПрайсЛиста.ПакетовВсего), СтруктураПрайсЛиста.ПакетовВсего, 1);
		
		ОбъектПрайсЛист.ВерсияФормата = ВерсияФорматаОбмена;
		
	КонецЕсли;
	
	// Группы товаров
	Если НЕ СтруктураПрайсЛиста.ГруппыТоваров.Количество() = 0 Тогда
		
		ТипОбъекта                    = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваров");
		ОбъектПрайсЛист.ГруппыТоваров = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъекта                = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваровЗапись");
		
		Для Каждого ГруппаТоваров Из СтруктураПрайсЛиста.ГруппыТоваров Цикл
			
			ОбъектГруппыТоваровЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ЗаполнитьЗначенияСвойств(ОбъектГруппыТоваровЗапись, ГруппаТоваров);
			ОбъектПрайсЛист.ГруппыТоваров.ГруппыТоваровЗапись.Добавить(ОбъектГруппыТоваровЗапись);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СтруктураПрайсЛиста.Товары.Количество() = 0 Тогда
		
		ТипОбъектаТовары         = ФабрикаXDTO.Тип(URIИмен, "Товары");
		ТипОбъектаТоварыЗапись   = ФабрикаXDTO.Тип(URIИмен, "ТоварыЗапись");
		
		ОбъектПрайсЛист.Товары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
		
		Для Каждого СтрокаДерева Из СтруктураПрайсЛиста.Товары Цикл
			
			Если СтрокаДерева.ИмеетХарактеристики И НЕ СтрокаДерева.ИмеетУпаковки Тогда
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена);
				ЗаписатьХарактеристики(ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена);
				
			ИначеЕсли СтрокаДерева.ИмеетУпаковки И НЕ СтрокаДерева.ИмеетХарактеристики Тогда
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена);
				
				ЗаписатьУпаковки(ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена);
				
			ИначеЕсли СтрокаДерева.ИмеетУпаковки И СтрокаДерева.ИмеетХарактеристики Тогда
				
			Иначе
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектПрайсЛист);
	
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Процедура заполняет структуру загружаемого документа из XML-текста.
//
Процедура ЗаполнитьСтруктуруДокумента(СтруктураДокумента, ТипДокумента, XMLТекст, ВерсияФорматаОбмена) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLТекст);
	
	Если ТипДокумента = "SalesReport" Тогда
		
		СтруктураДокумента.ТипДокумента = "ОтчетОПродажах";
		
		Фабрика = МенеджерОборудованияСервисыКлиентСервер.ФабрикаXDTOСервисаОборудования(ВерсияФорматаОбмена);
		
		ТипXDTO = Фабрика.Тип(МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен(ВерсияФорматаОбмена), "SalesReports");
		
		Попытка
			Данные = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
			
		Исключение
			ТекстСообщения = НСтр("ru='При чтении файла-отчета произошла ошибка. Формат отчета не соответствует версии формата обмена.'") 
				+ Символы.ПС + ОписаниеОшибки();
				
			СтруктураДокумента.Отказ = Истина;
			СтруктураДокумента.СообщениеОбОшибке = ТекстСообщения;
			
			Возврат;
		КонецПопытки;
			
		Если ВерсияФорматаОбмена >= 1006
			И НЕ Данные.Свойства().Получить("ВерсияФормата") = Неопределено
			И ЗначениеЗаполнено(Данные.ВерсияФормата) Тогда
			
			ВерсияФорматаФайла = Данные.ВерсияФормата;
		Иначе
			ВерсияФорматаФайла = 1005;
		КонецЕсли;
		
		Если ВерсияФорматаФайла <> ВерсияФорматаОбмена Тогда
			ТекстСообщения = НСтр("ru='При чтении файла-отчета произошла ошибка. Формат отчета не соответствует версии формата обмена.'") + Символы.ПС + ОписаниеОшибки();
			СтруктураДокумента.Отказ = Истина;
			СтруктураДокумента.СообщениеОбОшибке = ТекстСообщения;
			Возврат;
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		
		Если ЗначениеЗаполнено(Данные.Обработан) Тогда
			СтруктураДокумента.Обработан = Данные.Обработан;
			Возврат;
		КонецЕсли;
		
		Для Каждого Отчет Из Данные.ОтчетОПродажах Цикл
			
			СтруктураОтчета = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруОтчетаОПродажах();
			
			ЗаполнитьЗначенияСвойств(СтруктураОтчета, Отчет, "НомерСмены, ДатаОткрытияСмены, ДатаЗакрытияСмены");
			
			Для Каждого СтрокаТовары Из Отчет.ОтчетОПродажахТовары.ОтчетОПродажахТоварыЗапись Цикл
				
				ЗаписьТовары = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТоварыОтчетаОПродажах();
				ЗаполнитьЗначенияСвойств(ЗаписьТовары, СтрокаТовары);
				СтруктураОтчета.Товары.Добавить(ЗаписьТовары);
				
			КонецЦикла;
			
			Для Каждого СтрокаОплаты Из Отчет.ОтчетОПродажахОплаты.ОтчетОПродажахОплатыЗапись Цикл
				
				ЗаписьОплаты = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваОплаты();
				ЗаполнитьЗначенияСвойств(ЗаписьОплаты, СтрокаОплаты);
				СтруктураОтчета.Оплаты.Добавить(ЗаписьОплаты);
				
			КонецЦикла;
			
			Если ВерсияФорматаОбмена >= 1006 И Отчет.ОтчетОПродажахВскрытияТары <> Неопределено Тогда
				
				Для Каждого СтрокаВскрытияТары Из Отчет.ОтчетОПродажахВскрытияТары.ОтчетОПродажахВскрытияТарыЗапись Цикл
					
					ЗаписьВскрытияТары = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваВскрытияТары();
					ЗаполнитьЗначенияСвойств(ЗаписьВскрытияТары, СтрокаВскрытияТары);
					СтруктураОтчета.ВскрытияТары.Добавить(ЗаписьВскрытияТары);
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураДокумента.Документы.Добавить(СтруктураОтчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТовар(ОбъектПрайсЛист, Запись, Источник, ВерсияФорматаОбмена)
	
	Если Источник.ИмеетУпаковки ИЛИ Источник.ИмеетХарактеристики Тогда
		
		СписокСвойств =
		"КодГруппы,
		|Наименование,
		|Артикул,
		|Весовой,
		|ЕдиницаИзмерения,
		|ИмеетУпаковки,
		|ИмеетХарактеристики,
		|СтавкаНДС,"
		+ ?(ВерсияФорматаОбмена >= 1006,
		?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "Алкоголь,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "Маркируемый,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "КодВидаАлкогольнойПродукции,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "ЕмкостьТары,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "Крепость,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "ИННПроизводителя,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "КПППроизводителя,", "")
		+ ?(ЗначениеЗаполнено(Источник.КодНалога), Символы.ПС + "КодНалога,", "") + "
		|УникальныйИдентификатор,", "") + "
		|Услуга
		|";
		
	Иначе
		
		СписокСвойств =
		"Код,
		|КодГруппы,
		|Наименование,
		|Артикул,
		|Весовой,
		|ЕдиницаИзмерения,
		|ИмеетУпаковки,
		|ИмеетХарактеристики,
		|СтавкаНДС,"
		+ ?(ВерсияФорматаОбмена >= 1006,
		?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "Алкоголь,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "Маркируемый,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "КодВидаАлкогольнойПродукции,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "ЕмкостьТары,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "Крепость,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "ИННПроизводителя,", "")
		+ ?(ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь, Символы.ПС + "КПППроизводителя,", "")
		+ ?(ЗначениеЗаполнено(Источник.КодНалога), Символы.ПС + "КодНалога,", "") + "
		|УникальныйИдентификатор,", "") + "
		|Услуга,
		|Цена,
		|Штрихкод,
		|Остаток
		|";
		
		Источник.Штрихкод = РазложитьШтрихкод(Источник.Штрихкод);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, Источник, СписокСвойств);
	ОбъектПрайсЛист.Товары.ТоварыЗапись.Добавить(Запись);
	
КонецПроцедуры

Процедура ЗаписатьУпаковки(Запись, Источник, ВерсияФорматаОбмена)
	
	URIИмен      = МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаУпаковки       = ФабрикаXDTO.Тип(URIИмен, "Упаковки");
	ТипОбъектаУпаковкиЗапись = ФабрикаXDTO.Тип(URIИмен, "УпаковкиЗапись");
	
	Запись.Упаковки = ФабрикаXDTO.Создать(ТипОбъектаУпаковки);
	
	Для Каждого СтрокаУпаковка Из Источник.Упаковки Цикл
		
		ОбъектУпаковкиЗапись = ФабрикаXDTO.Создать(ТипОбъектаУпаковкиЗапись);
		
		СписокСвойств = "Код,
		|Наименование,
		|Коэффициент,
		|Штрихкод,
		|Цена,
		|Остаток
		|";
		
		СтрокаУпаковка.Штрихкод = РазложитьШтрихкод(СтрокаУпаковка.Штрихкод);
		
		ЗаполнитьЗначенияСвойств(ОбъектУпаковкиЗапись, СтрокаУпаковка, СписокСвойств);
		
		Если ВерсияФорматаОбмена >= 1006 И ЗначениеЗаполнено(СтрокаУпаковка.УникальныйИдентификатор) Тогда
			ОбъектУпаковкиЗапись.УникальныйИдентификатор = СтрокаУпаковка.УникальныйИдентификатор;
		КонецЕсли;
		
		Запись.Упаковки.УпаковкиЗапись.Добавить(ОбъектУпаковкиЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьХарактеристики(Запись, Источник, ВерсияФорматаОбмена)
	
	URIИмен      = МенеджерОборудованияСервисыКлиентСервер.URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаХарактеристики       = ФабрикаXDTO.Тип(URIИмен, "Характеристики");
	ТипОбъектаХарактеристикиЗапись = ФабрикаXDTO.Тип(URIИмен, "ХарактеристикиЗапись");
	
	Запись.Характеристики = ФабрикаXDTO.Создать(ТипОбъектаХарактеристики);
	
	Для Каждого СтрокаХарактеристика Из Источник.Характеристики Цикл
		
		ОбъектХарактеристикиЗапись = ФабрикаXDTO.Создать(ТипОбъектаХарактеристикиЗапись);
		
		Если СтрокаХарактеристика.ИмеетУпаковки Тогда
			СписокСвойств = "Наименование," + ?(ВерсияФорматаОбмена >= 1006,"
			|УникальныйИдентификатор,", "") + "
			|ИмеетУпаковки
			|";
			
		Иначе
			СписокСвойств = "Код," + ?(ВерсияФорматаОбмена >= 1006,"
			|УникальныйИдентификатор,", "") + "
			|Наименование,
			|Штрихкод,
			|Цена,
			|Остаток,
			|ИмеетУпаковки
			|";
			
			СтрокаХарактеристика.Штрихкод = РазложитьШтрихкод(СтрокаХарактеристика.Штрихкод);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектХарактеристикиЗапись, СтрокаХарактеристика, СписокСвойств);
		Запись.Характеристики.ХарактеристикиЗапись.Добавить(ОбъектХарактеристикиЗапись);
		
		Если СтрокаХарактеристика.ИмеетУпаковки Тогда
			ЗаписатьУпаковки(ОбъектХарактеристикиЗапись, СтрокаХарактеристика, ВерсияФорматаОбмена);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазложитьШтрихкод(Штрихкод);
	
	Штрихкод = СокрЛП(Штрихкод);
	
	СписокРазделителей = Новый Массив;
	
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(" ");
	
	Для Каждого Разделитель ИЗ СписокРазделителей Цикл
		
		Если Найти(Штрихкод, Разделитель) > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Штрихкод = СтрЗаменить(СокрЛП(Штрихкод), Разделитель, ",");
	
	Возврат Штрихкод;
	
КонецФункции

#КонецОбласти
