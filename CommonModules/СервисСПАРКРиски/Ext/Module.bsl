////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРКРиски".
// ОбщийМодуль.СПАРКРиски.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИндексыСПАРККонтрагента

// Загружает агрегированную информацию о контрагентах и сохраняет ее в кэше.
// Предназначена для запуска в фоне.
//
// Параметры:
//  Параметры - Структура - структура с ключами:
//    * ОбластьДанных - Число - номер области данных или "-1", если ИБ работает не в модели сервиса;
//    * МассивОписанийКонтрагентов - Массив структур - список элементов, см.СПАРКРискиКлиентСервер.НовыйОписаниеКонтрагента();
//  АдресРезультата - Строка - адрес временного хранилища, куда будет помещен результат.
//
Процедура ЗагрузитьИндексыКонтрагентовВФоне(Параметры, АдресРезультата) Экспорт

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");
	Если (ТипЗнч(Параметры) = ТипСтруктура)
			И (Параметры.Свойство("МассивОписанийКонтрагентов"))
			И (ТипЗнч(Параметры.МассивОписанийКонтрагентов) = ТипМассив) Тогда
		Результат = ЗагрузитьИндексыКонтрагентов(
			Параметры.ОбластьДанных,
			Параметры.МассивОписанийКонтрагентов,
			Неопределено,
			Неопределено);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	Иначе
		ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	КонецЕсли;

	ДлительныеОперации.СообщитьПрогресс(
		100,
		НСтр("ru='СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентовВФоне завершено'"),
		Новый Структура("АдресРезультата", АдресРезультата));

КонецПроцедуры

// Загружает агрегированную информацию о контрагентах и сохраняет ее в кэше.
//
// Параметры:
//  ОбластьДанных - Число - номер области данных или "-1", если ИБ работает не в модели сервиса;
//  МассивОписанийКонтрагентов - Массив структур - список элементов, см.СПАРКРискиКлиентСервер.НовыйОписаниеКонтрагента();
//  ПараметрыВыполнения - Структура - Структура с ключами:
//   * ПроверитьСохраненноеСостояниеПодключенияКСервису - Булево - выполнить проверку подключения;
//  КонтекстВыполнения - Неопределено или Структура - контекст выполнения для сохранения лога.
//
// Возвращаемое значение:
//	Структура:
//		* ЗначенияИндексов - ТаблицаЗначений:
//			** ИНН                           - <>
//			** ПодлежитПроверке              - <>
//			** ИндексДолжнойОсмотрительности - <>
//			** ИндексФинансовогоРиска        - <>
//			** ИндексПлатежнойДисциплины     - <>
//			** ИДОГрадация                   - <>
//			** ИФРГрадация                   - <>
//			** ИПДГрадация                   - <>
//			** Активен                       - <>
//			** ТекстСтатуса                  - <>
//			** ДатаСтатуса                   - <>
//			** КодСтатуса                    - <>
//			** ИдентификаторСобытия          - <>
//			** ИдентификаторТипаСобытия      - <>
//			** ДатаСобытия                   - <>
//			** ЗначениеСтарое                - <>
//			** ЗначениеНовое                 - <>
//			** ВидОшибки                     - <>
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - общий для всего запроса Вид ошибки;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ЗагрузитьИндексыКонтрагентов(
			ОбластьДанных,
			МассивОписанийКонтрагентов,
			ПараметрыВыполнения = Неопределено,
			КонтекстВыполнения = Неопределено) Экспорт

	// Если извне передали контекст выполнения для записи подробного лога, то в журнал регистрации НЕ писать
	//  (запись в журнал регистрации будет сделана в вызывающем коде).
	ТребуетсяЗаписьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		ТребуетсяЗаписьВЖурналРегистрации = Истина;
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;
	КонтекстВыполнения.Вставить("ВремяНачалаОбщее", ТекущаяУниверсальнаяДатаВМиллисекундах());

	ДатаДляРегистров = ТекущаяДатаСеанса();

	ТипСтрока          = Тип("Строка");
	ТипСтруктура       = Тип("Структура");
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");

	Результат = НовыйРезультатВызоваСервиса();

#Область ПроверкаПодключенияИнтернетПоддержки

	// Проверка, подключена ли интернет-поддержка.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ЗагрузитьИндексыКонтрагентов_ПередВызовомОперацииСервиса", // Идентификатор
		НСтр("ru='Выполнение ЗагрузитьИндексыКонтрагентов, ПередВызовомОперацииСервиса'"));

		ДанныеАутентификации = Неопределено;
		ПередВызовомОперацииСервиса(Результат, ?(ОбластьДанных = -1, Неопределено, ОбластьДанных), ДанныеАутентификации);
		Если НЕ Результат.ВидОшибки.Пустая() Тогда
			КодРезультата = 1;
			ОписаниеРезультата = СтрШаблон(
				НСтр("ru='Ошибка выполнения: %1'"),
				Результат.ВидОшибки);
			ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполнения,
				КодРезультата, // Код результата.
				ОписаниеРезультата, // Описание результата.
				Неопределено); // Вложенный контекст выполнения.
			Возврат Результат;
		КонецЕсли;

	ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Код результата.
		ОписаниеРезультата, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

#КонецОбласти

#Область СозданиеТаблицыЗначений

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ЗагрузитьИндексыКонтрагентов_СозданиеТаблицыЗначений", // Идентификатор
		НСтр("ru='Выполнение ЗагрузитьИндексыКонтрагентов, СозданиеТаблицыЗначений'"));

	УстановитьПривилегированныйРежим(Истина);

	ОписаниеТипаСобытия                 = Новый ОписаниеТипов("СправочникСсылка.ТипыСобытийСПАРКРиски");
	ОписаниеТипаГрадацияИндекса         = Новый ОписаниеТипов("ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски");
	ОписаниеТипаСтрока                  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло                   = Новый ОписаниеТипов("Число");
	ОписаниеТипаБулево                  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата                    = Новый ОписаниеТипов("Дата");
	ОписаниеТипаУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаКонтрагентБИП           = Метаданные.ОпределяемыеТипы.КонтрагентБИП.Тип;
	ОписаниеТипаВидОшибки               = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОшибокСПАРКРиски");

	ИндексыТаблица = Новый ТаблицаЗначений;
	// Основные данные (results.inn);
	ИндексыТаблица.Колонки.Добавить("ИНН"                           , ОписаниеТипаСтрока);
	// Индексы (results.aggregatedIndex);
	ИндексыТаблица.Колонки.Добавить("ИндексДолжнойОсмотрительности" , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("ИндексПлатежнойДисциплины"     , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("ИндексФинансовогоРиска"        , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("Активен"                       , ОписаниеТипаБулево);
	ИндексыТаблица.Колонки.Добавить("ТекстСтатуса"                  , ОписаниеТипаСтрока);
	ИндексыТаблица.Колонки.Добавить("ДатаСтатуса"                   , ОписаниеТипаДата);
	ИндексыТаблица.Колонки.Добавить("КодСтатуса"                    , ОписаниеТипаЧисло);
	// results.monitoringEvent;
	ИндексыТаблица.Колонки.Добавить("ИдентификаторСобытия"          , ОписаниеТипаСтрока);
	ИндексыТаблица.Колонки.Добавить("ИдентификаторТипаСобытия"      , ОписаниеТипаСтрока);
	ИндексыТаблица.Колонки.Добавить("ТипСобытияНазвание"            , ОписаниеТипаСтрока);
	ИндексыТаблица.Колонки.Добавить("ДатаСобытия"                   , ОписаниеТипаДата);
	ИндексыТаблица.Колонки.Добавить("ЗначениеСтарое"                , ОписаниеТипаСтрока);
	ИндексыТаблица.Колонки.Добавить("ЗначениеНовое"                 , ОписаниеТипаСтрока);
	// Прочее;
	ИндексыТаблица.Колонки.Добавить("ИДОГрадация"                   , ОписаниеТипаГрадацияИндекса);
	ИндексыТаблица.Колонки.Добавить("ИФРГрадация"                   , ОписаниеТипаГрадацияИндекса);
	ИндексыТаблица.Колонки.Добавить("ИПДГрадация"                   , ОписаниеТипаГрадацияИндекса);
	ИндексыТаблица.Колонки.Добавить("ПодлежитПроверке"              , ОписаниеТипаБулево);
	ИндексыТаблица.Колонки.Добавить("ВидОшибки"                     , ОписаниеТипаВидОшибки);
	// Ссылка на контрагента необходима для последующего заполнения кэша на клиенте.
	ИндексыТаблица.Колонки.Добавить("Контрагент"                    , ОписаниеТипаКонтрагентБИП);

	// Индексирование данных.
	ИндексыТаблица.Индексы.Добавить("ИНН");

	// Предзаполним таблицу по списку ИНН.
	Для Каждого ТекущийКонтрагент Из МассивОписанийКонтрагентов Цикл
		НоваяСтрока = ИндексыТаблица.Добавить();
		НоваяСтрока.Контрагент = ТекущийКонтрагент.Контрагент;
		НоваяСтрока.ИНН        = ТекущийКонтрагент.ИНН; // Уже без пробелов.
		НоваяСтрока.Активен    = Истина;
		НоваяСтрока.ВидОшибки  = Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН; // Вид ошибки есть общий (для всего результата) и для каждого ИНН.
		НоваяСтрока.ИндексДолжнойОсмотрительности = -1;
		НоваяСтрока.ИндексПлатежнойДисциплины     = -1;
		НоваяСтрока.ИндексФинансовогоРиска        = -1;
	КонецЦикла;
	Результат.Вставить("ЗначенияИндексов", ИндексыТаблица);

	ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Код результата.
		ОписаниеРезультата, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

#КонецОбласти

#Область ДополнительныеПараметрыВызоваОперацииСервиса

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ЗагрузитьИндексыКонтрагентов_ДополнительныеПараметрыВызоваОперацииСервиса", // Идентификатор
		НСтр("ru='Выполнение ЗагрузитьИндексыКонтрагентов, ДополнительныеПараметрыВызоваОперацииСервиса'"));

		// В сервисе существует ограничение по количеству ИНН в вызове.
		// Для потребителя сервис вызывается прозрачно - без разбиения списка.
		ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();

	ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Код результата.
		ОписаниеРезультата, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

#КонецОбласти

#Область ВызовВебСервиса

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ЗагрузитьИндексыКонтрагентов_ВызовВебСервиса", // Идентификатор
		НСтр("ru='Выполнение ЗагрузитьИндексыКонтрагентов, ВызовВебСервиса'"));

	ОписаниеРезультата = СтрШаблон(
		НСтр("ru='Вызов метода веб-сервиса для %1 записей (пачками).'"),
		МассивОписанийКонтрагентов.Количество());

	НомерПачки        = 1;
	ПараметрСписокИНН = Новый Массив;
	ОбработанныеИНН   = Новый Соответствие;
	РазмерЗапроса     = 0;
	Для Каждого ТекущийКонтрагент Из МассивОписанийКонтрагентов Цикл

		Если ОбработанныеИНН[ТекущийКонтрагент.ИНН] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ОбработанныеИНН.Вставить(ТекущийКонтрагент.ИНН, Истина);

		ПараметрСписокИНН.Добавить(ТекущийКонтрагент.ИНН);
		РазмерЗапроса = РазмерЗапроса + 1;
		Если РазмерЗапроса >= 100 Тогда
			ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ВызватьОперациюИндексыСПАРККонтрагента(
				ПараметрСписокИНН,
				Результат,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса);
			ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОписаниеРезультата = ОписаниеРезультата
				+ Символы.ПС
				+ СтрШаблон(
					НСтр("ru='Обработка пачки %1: %2 мс; %3'"),
					НомерПачки,
					ТКонец - ТНачало,
					?(Результат.ВидОшибки.Пустая(),
						"",
						СтрШаблон(
							НСтр("ru='Вид ошибки: %1'"),
							Результат.ВидОшибки)));
			НомерПачки = НомерПачки + 1;
			ПараметрСписокИНН = Новый Массив;
			РазмерЗапроса = 0;
			Если НЕ Результат.ВидОшибки.Пустая() Тогда
				// При ошибке вызова - возвратить результат.
				// При наличии успешных вызовов возвращается частичный результат.
				Прервать;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если РазмерЗапроса > 0 Тогда
		ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВызватьОперациюИндексыСПАРККонтрагента(
			ПараметрСписокИНН,
			Результат,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса);
		ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОписаниеРезультата = ОписаниеРезультата
			+ Символы.ПС
			+ СтрШаблон(
				НСтр("ru='Обработка пачки %1 (последней): %2 мс; %3'"),
				НомерПачки,
				ТКонец - ТНачало,
				?(Результат.ВидОшибки.Пустая(),
					"",
					СтрШаблон(
						НСтр("ru='Вид ошибки: %1'"),
						Результат.ВидОшибки)));
	КонецЕсли;

	ПослеВызоваОперацииСервиса(Результат);

	ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Код результата.
		ОписаниеРезультата, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

#КонецОбласти

#Область ЗаполнениеГрадациямиИндексовИРеквизитами

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ЗагрузитьИндексыКонтрагентов_ЗаполнениеГрадациямиИндексовИРеквизитами", // Идентификатор
		НСтр("ru='Выполнение ЗагрузитьИндексыКонтрагентов, ЗаполнениеГрадациямиИндексовИРеквизитами'"));

	ОписаниеРезультата = СтрШаблон(
		НСтр("ru='Обработка результата веб-сервиса для %1 записей.'"),
		МассивОписанийКонтрагентов.Количество());

	// Заполнить градации индексов и признак ЮрЛица.
	ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МассивКонтрагентов = Новый Массив;
	Для Каждого ТекущийКонтрагент Из МассивОписанийКонтрагентов Цикл
		Если ЗначениеЗаполнено(ТекущийКонтрагент.Контрагент) Тогда
			МассивКонтрагентов.Добавить(ТекущийКонтрагент.Контрагент);
		КонецЕсли;
	КонецЦикла;
	ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеРезультата = ОписаниеРезультата
		+ Символы.ПС
		+ СтрШаблон(
			НСтр("ru='Подготовка массива контрагентов (%1 элементов): %2 мс'"),
			МассивКонтрагентов.Количество(),
			ТКонец - ТНачало);

	ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если МассивКонтрагентов.Количество() > 0 Тогда
		ТаблицаЗначенийРеквизитов = СПАРКРиски.ЗначенияРеквизитовКонтрагентов(МассивКонтрагентов);
	Иначе
		ТаблицаЗначенийРеквизитов = Новый ТаблицаЗначений;
	КонецЕсли;
	ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеРезультата = ОписаниеРезультата
		+ Символы.ПС
		+ СтрШаблон(
			НСтр("ru='Получение реквизитов для массива контрагентов (%1 элементов): %2 мс'"),
			МассивКонтрагентов.Количество(),
			ТКонец - ТНачало);

	ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Для Каждого ТекущаяСтрока Из Результат.ЗначенияИндексов Цикл
		ТекущаяСтрока.ИДОГрадация = СПАРКРискиКлиентСервер.ГрадацияИндекса(ТекущаяСтрока.ИндексДолжнойОсмотрительности, "ИндексДолжнойОсмотрительности");
		ТекущаяСтрока.ИФРГрадация = СПАРКРискиКлиентСервер.ГрадацияИндекса(ТекущаяСтрока.ИндексФинансовогоРиска, "ИндексФинансовогоРиска");
		ТекущаяСтрока.ИПДГрадация = СПАРКРискиКлиентСервер.ГрадацияИндекса(ТекущаяСтрока.ИндексПлатежнойДисциплины, "ИндексПлатежнойДисциплины");
		// В таблице Результат.ЗначенияИндексов невозможно корректно установить признак "ПодлежитПроверке" из таблицы ТаблицаЗначенийРеквизитов,
		//  потому что в ТаблицаЗначенийРеквизитов данные хранятся по контрагентам - т.е. для одного ИНН, но разного контрагента
		//  может быть разное значение "ПодлежитПроверке".
		ТекущаяСтрока.ПодлежитПроверке = Истина;
	КонецЦикла;
	ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеРезультата = ОписаниеРезультата
		+ Символы.ПС
		+ СтрШаблон(
			НСтр("ru='Заполнение результата веб-сервиса (%1 элементов) реквизитами и градациями индексов: %2 мс'"),
			Результат.ЗначенияИндексов.Количество(),
			ТКонец - ТНачало);

	ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Код результата.
		ОписаниеРезультата, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

#КонецОбласти

#Область ДозаполнениеРезультатаИСохранениеВКэше

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ЗагрузитьИндексыКонтрагентов_ДозаполнениеРезультатаИСохранениеВКэше", // Идентификатор
		НСтр("ru='Выполнение ЗагрузитьИндексыКонтрагентов, ДозаполнениеРезультатаИСохранениеВКэше'"));

	ОписаниеРезультата = НСтр("ru='Дозаполнение результата веб-сервиса.'");

	// После вызова сервиса в Результат.Индексы хранятся только ИНН.
	// Необходимо по ИНН найти контрагента из МассивОписанийКонтрагентов и сохранить значение в кэше.

	Если Результат.ВидОшибки.Пустая() Тогда
		Если (ТипЗнч(Результат.ЗначенияИндексов) = ТипТаблицаЗначений) И (Результат.ЗначенияИндексов.Количество() > 0) Тогда

			ЛокальныйЗначенияИндексов = Результат.ЗначенияИндексов;

			Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда

				ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				// Сохранить типы событий в справочнике, если их нет.
				// При работе в модели сервиса загрузка типов событий выполняется
				// средствами подсистемы "Поставляемые данные".
				ТаблицаИдентификаторовТипаСобытия = ЛокальныйЗначенияИндексов.Скопировать(, "ИдентификаторТипаСобытия");
				ТаблицаИдентификаторовТипаСобытия.Свернуть("ИдентификаторТипаСобытия");
				МассивИдентификаторовТиповСобытий = Новый Массив;
				Для Каждого ТекущийТипСобытия Из ТаблицаИдентификаторовТипаСобытия Цикл
					Если НЕ ПустаяСтрока(ТекущийТипСобытия.ИдентификаторТипаСобытия) Тогда
						МассивИдентификаторовТиповСобытий.Добавить(Новый УникальныйИдентификатор(ТекущийТипСобытия.ИдентификаторТипаСобытия));
					КонецЕсли;
				КонецЦикла;
				ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ОписаниеРезультата = ОписаниеРезультата
					+ Символы.ПС
					+ СтрШаблон(
						НСтр("ru='Идентификаторы типов событий, подготовка списка из %1 в %2 элементов: %3 мс'"),
						ЛокальныйЗначенияИндексов.Количество(),
						ТаблицаИдентификаторовТипаСобытия.Количество(),
						ТКонец - ТНачало);

				ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Если МассивИдентификаторовТиповСобытий.Количество() > 0 Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ
						|	Спр.Идентификатор КАК Идентификатор,
						|	Спр.Ссылка        КАК ТипСобытияСсылка
						|ИЗ
						|	Справочник.ТипыСобытийСПАРКРиски КАК Спр
						|ГДЕ
						|	Спр.Идентификатор В (&ИдентификаторыТиповСобытий)
						|";
					Запрос.УстановитьПараметр("ИдентификаторыТиповСобытий", МассивИдентификаторовТиповСобытий);
					РезультатЗапроса = Запрос.Выполнить();
					ТипыСобытийСохраненныеВИБ = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					ТипыСобытийСохраненныеВИБ.Индексы.Добавить("Идентификатор");
					Если ТипыСобытийСохраненныеВИБ.Количество() < МассивИдентификаторовТиповСобытий.Количество() Тогда
						// В ТипыСобытий добавляются недостающие типы событий.
						ВидОшибкиДобавленияТиповСобытий = Неопределено;
						СПАРКРискиМониторингСобытий.ЗагрузитьНовыеТипыСобытий(МассивИдентификаторовТиповСобытий, ТипыСобытийСохраненныеВИБ, ВидОшибкиДобавленияТиповСобытий);
						Если (ВидОшибкиДобавленияТиповСобытий <> Неопределено) И (ВидОшибкиДобавленияТиповСобытий <> Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка()) Тогда
							Результат.Вставить("ВидОшибки", ВидОшибкиДобавленияТиповСобытий);
							Возврат Результат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ОписаниеРезультата = ОписаниеРезультата
					+ Символы.ПС
					+ СтрШаблон(
						НСтр("ru='Идентификаторы типов событий, загрузка списка новых событий (%1 элементов): %2 мс'"),
						МассивИдентификаторовТиповСобытий.Количество(),
						ТКонец - ТНачало);

			КонецЕсли;

			// Заполнить типы событий.
			ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Для Каждого ТекущаяСтрока Из ЛокальныйЗначенияИндексов Цикл
				Если НЕ ПустаяСтрока(ТекущаяСтрока.ИдентификаторТипаСобытия) Тогда
					ТекущаяСтрока.ТипСобытияНазвание = СПАРКРИски.НазваниеТипаСобытия(
						ТекущаяСтрока.ИдентификаторТипаСобытия);
				КонецЕсли;
			КонецЦикла;
			ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОписаниеРезультата = ОписаниеРезультата
				+ Символы.ПС
				+ СтрШаблон(
					НСтр("ru='Заполнение списка событий в результате (%1 элементов): %2 мс'"),
					ЛокальныйЗначенияИндексов.Количество(),
					ТКонец - ТНачало);

			// Сохранять в кэше можно только в том случае, когда передали ссылку на Контрагента.
			ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ДописыватьОбластьДанных = (ТаблицаЗначенийРеквизитов.Колонки.Найти("ОбластьДанных") <> Неопределено);
			Для Каждого ТекущийКонтрагент Из МассивОписанийКонтрагентов Цикл

				Если НЕ ЗначениеЗаполнено(ТекущийКонтрагент.Контрагент) Тогда
					// Получение индексов инициировано,например, в форме нового элемента Контрагенты.
					// В этом случае ссылки еще нет и сохранять эти данные не нужно.
					Продолжить;
				КонецЕсли;

				// Найти данные для контрагента в результате веб-сервиса по ИНН.
				НайденнаяСтрока = ЛокальныйЗначенияИндексов.Найти(ТекущийКонтрагент.ИНН, "ИНН");
				Если НайденнаяСтрока <> Неопределено Тогда
					// Сохранение данных в кэше

					Если ДописыватьОбластьДанных Тогда
						СтрокиРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(
							Новый Структура("ИНН, Контрагент", ТекущийКонтрагент.ИНН, ТекущийКонтрагент.Контрагент));
						Если СтрокиРеквизитов.Количество() > 0 Тогда
							Для Каждого ТекущаяСтрокаСРеквизитами Из СтрокиРеквизитов Цикл
								ДанныеЗаписи = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденнаяСтрока);
								ДанныеЗаписи.Вставить("Контрагент"                        , ТекущийКонтрагент.Контрагент);
								ДанныеЗаписи.Вставить("ДатаОбновления"                    , ДатаДляРегистров);
								ДанныеЗаписи.Вставить("ТекстОшибки"                       , "");
								ДанныеЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", ТекущаяСтрокаСРеквизитами.ОбластьДанных);
								СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
							КонецЦикла;
						КонецЕсли;
					Иначе
						ДанныеЗаписи = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденнаяСтрока);
						ДанныеЗаписи.Вставить("Контрагент"    , ТекущийКонтрагент.Контрагент);
						ДанныеЗаписи.Вставить("ДатаОбновления", ДатаДляРегистров);
						ДанныеЗаписи.Вставить("ТекстОшибки"   , "");
						СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
					КонецЕсли;

				Иначе

					// Если значение по данному ИНН не вернули, значит этих данных нет в веб-сервисах.
					// Это может означать, что ИНН некорректный, передан ИНН НЕ юрлица (ИП?) и т.п.
					// В таком случае в регистр сведений необходимо в явном виде записать ошибку.

					Если ДописыватьОбластьДанных Тогда
						СтрокиРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(
							Новый Структура("ИНН, Контрагент", ТекущийКонтрагент.ИНН, ТекущийКонтрагент.Контрагент));
						Если СтрокиРеквизитов.Количество() > 0 Тогда
							Для Каждого ТекущаяСтрокаСРеквизитами Из СтрокиРеквизитов Цикл
								ДанныеЗаписи = Новый Структура();
								ДанныеЗаписи.Вставить("Контрагент"                        , ТекущийКонтрагент.Контрагент);
								ДанныеЗаписи.Вставить("ИНН"                               , ТекущийКонтрагент.ИНН);
								ДанныеЗаписи.Вставить("ДатаОбновления"                    , ДатаДляРегистров);
								ДанныеЗаписи.Вставить("ВидОшибки"                         , Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН);
								ДанныеЗаписи.Вставить("ТекстОшибки"                       , "");
								ДанныеЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", ТекущаяСтрокаСРеквизитами.ОбластьДанных);
								СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
							КонецЦикла;
						КонецЕсли;
					Иначе
						ДанныеЗаписи = Новый Структура();
						ДанныеЗаписи.Вставить("Контрагент"    , ТекущийКонтрагент.Контрагент);
						ДанныеЗаписи.Вставить("ИНН"           , ТекущийКонтрагент.ИНН);
						ДанныеЗаписи.Вставить("ДатаОбновления", ДатаДляРегистров);
						ДанныеЗаписи.Вставить("ВидОшибки"     , Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН);
						ДанныеЗаписи.Вставить("ТекстОшибки"   , "");
						СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
			ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОписаниеРезультата = ОписаниеРезультата
				+ Символы.ПС
				+ СтрШаблон(
					НСтр("ru='Сохранение результата (%1 элементов) в кэше: %2 мс'"),
					МассивОписанийКонтрагентов.Количество(),
					ТКонец - ТНачало);

			// Сохранить таблицу обратно.
			Результат.Вставить("ЗначенияИндексов", ЛокальныйЗначенияИндексов);

		КонецЕсли;
	КонецЕсли;

	ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Код результата.
		ОписаниеРезультата, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

	Если ТребуетсяЗаписьВЖурналРегистрации = Истина Тогда
		КонтекстВыполнения.Вставить("ВремяОкончанияОбщее", ТекущаяУниверсальнаяДатаВМиллисекундах());
		ТекстСообщения = СтрШаблон(
			НСтр("ru='СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов, результат.
				|Длительность (мс): %1
				|Результат выполнения:
				|%2
				|
				|Возвращаемые значения:
				|  Вид ошибки: %3
				|  Значения индексов (количество): %4
				|
				|Прочие параметры:
				|  Это разделенная конфигурация: %5
				|  Разделение включено: %6
				|  Доступно использование разделенных данных: %7
				|  Сеанс запущен без разделителей: %8
				|'"),
			СтрШаблон(
				"%1 (%2 - %3)",
				КонтекстВыполнения.ВремяОкончанияОбщее - КонтекстВыполнения.ВремяНачалаОбщее,
				КонтекстВыполнения.ВремяОкончанияОбщее,
				КонтекстВыполнения.ВремяНачалаОбщее),
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
				КонтекстВыполнения,
				Истина, // ВключаяВложенные
				"ПодробноПоШагам",
				1), // Уровень вложенности, текущий.
			Результат.ВидОшибки,
			Результат.ЗначенияИндексов.Количество(),
			ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация(),
			ОбщегоНазначенияПовтИсп.РазделениеВключено(),
			ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных(),
			ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());

		// Запись в журнал регистрации.
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			СПАРКРиски.ИмяСобытияЖурналаРегистрации(), // ИмяСобытия
			НСтр("ru='СПАРК Риски. Отладка. ЗагрузитьИндексыКонтрагентов'"), // ИдентификаторШага
			?(КонтекстВыполнения.КодРезультата = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(КонтекстВыполнения.ВремяОкончанияОбщее - КонтекстВыполнения.ВремяНачалаОбщее), // Данные
			ТекстСообщения, // Комментарий
			СПАРКРискиКлиентСервер.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

#КонецОбласти

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПолучениеСправок

// Начинает процесс подготовки справок по контрагентам в сервисе СПАРК.
// Возвращает идентификаторы справок, подготовка которых была начата в сервисе.
// Для проверки состояния подготовки справок необходимо использовать метод
// СостояниеПодготовкиСправок().
// При возникновении ошибки может быть возвращен неполный результат.
//
// Параметры:
//	СписокИНН - Массив - содержит элементы типа Строка.
//		ИНН контрагентов, справки по которым необходимо подготовить.
//
// Возвращаемое значение:
//	Структура:
//		* ДатаЗапроса - Дата - Дата запроса справок, возвращенная сервисом;
//		* ИдентификаторыСправок - Соответствие - идентификаторы справок,
//			по контрагентам:
//			** Ключ - Строка - ИНН контрагента;
//			** Значение - УникальныйИдентификатор - идентификатор
//					справки по контрагенту;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации.
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция НачатьПодготовкуСправок(СписокИНН) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ИдентификаторыСправок", Новый Соответствие);
	Результат.Вставить("ДатаЗапроса"          , '00010101');
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не Пользователи.РолиДоступны("ЗапросНовойСправкиСПАРКРиски", , Ложь) Тогда
		Результат.ВидОшибки          = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Недостаточно прав для запроса новой справки 1СПАРК Риски.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
	КонецЕсли;
	
	Если Результат.ВидОшибки.Пустая() Тогда
		РазмерПорцииЗапроса = 100;
		ВГраница            = СписокИНН.ВГраница();
		НачальныйИндекс     = 0;
		// В сервисе существует ограничение по количеству ИНН в вызове.
		// Для потребителя сервис вызывается прозрачно - без разбиения списка.
		ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();
		Пока НачальныйИндекс <= ВГраница Цикл
			КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорцииЗапроса - 1, ВГраница);
			ВызватьОперациюНачатьПодготовкуСправок(
				СписокИНН,
				НачальныйИндекс,
				КонечныйИндекс,
				Результат,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса);
			Если Не Результат.ВидОшибки.Пустая() Тогда
				// При ошибке вызова - возвратить результат.
				// При наличии успешных вызовов возвращается частичный результат.
				Прервать;
			КонецЕсли;
			НачальныйИндекс = КонечныйИндекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Проверяет состояние подготовки справок по контрагентам в сервисе СПАРК.
// При возникновении ошибки может быть возвращен неполный результат.
//
// Параметры:
//	ИдентификаторыСправок - Массив - содержит элементы типа УникальныйИдентификатор.
//		Список идентификаторов справок, состояние подготовки
//		которых необходимо проверить.
//
// Возвращаемое значение:
//	Структура:
//		* СостояниеСправок - Соответствие - состояние подготовки справок:
//			** Ключ - УникальныйИдентификатор - идентификатор справки;
//			** Значение - Строка - состояние справки:
//				- "ВПроцессеПодготовки" - справка в процессе подготовки;
//				- "Подготовлена" - справка готова;
//				- "ОтсутствуетФайл" - файл справки отсутствует;
//				- "НеизвестныйИдентификатор" - передан неизвестный идентификатор справки;
//				- "НеизвестныйИНН" - передан неизвестный ИНН контрагента при
//					вызове метода НачатьПодготовкуСправок();
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция СостояниеПодготовкиСправок(ИдентификаторыСправок) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("СостояниеСправок", Новый Соответствие);
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	РазмерПорцииЗапроса = 100;
	ВГраница            = ИдентификаторыСправок.ВГраница();
	НачальныйИндекс     = 0;
	// В сервисе существует ограничение по количеству идентификаторов в вызове.
	// Для потребителя сервис вызывается прозрачно - без разбиения списка.
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();
	Пока НачальныйИндекс <= ВГраница Цикл
		КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорцииЗапроса - 1, ВГраница);
		ВызватьОперациюСостояниеПодготовкиСправок(
			ИдентификаторыСправок,
			НачальныйИндекс,
			КонечныйИндекс,
			Результат,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса);
		Если Не Результат.ВидОшибки.Пустая() Тогда
			// При ошибке вызова - возвратить результат.
			// При наличии успешных вызовов возвращается частичный результат.
			Прервать;
		КонецЕсли;
		НачальныйИндекс = КонечныйИндекс + 1;
	КонецЦикла;
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Получает файл подготовленной справки из сервиса СПАРК.
//
// Параметры:
//	ИдентификаторСправки - УникальныйИдентификатор - идентификатор
//		подготовленной справки (см. метод НачатьПодготовкуСправок()).
//
// Возвращаемое значение:
//	Структура:
//		* ФайлСправки - ДвоичныеДанные - двоичные данные полученного
//			файла справки;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ЗагрузитьФайлСправки(ИдентификаторСправки) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ФайлСправки", Неопределено);
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюЗагрузитьФайлСправки(
		ИдентификаторСправки,
		Результат,
		ДанныеАутентификации);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МониторингСобытий

// Включает в сервисе СПАРК мониторинг событий по указанным контрагентам.
// Для проверки результата включения мониторинга событий необходимо использовать
// метод РезультатВключенияМониторингаСобытийПоКонтрагентам().
// Важно: при вызове допускается передавать не более 100 ИНН, при превышении
// количества ИНН вызывается исключение.
//
// Параметры:
//	СписокИНН - Массив - содержит элементы типа Строка.
//		Список ИНН контрагентов, мониторинг событий по
//		которым необходимо включить.
//		Допустимое количество ИНН - не более 100.
//
// Возвращаемое значение:
//	Структура:
//		* ИдентификаторЗаявки
//			- УникальныйИдентификатор - идентификатор заявки на включение мониторинга.
//			- Неопределено - при неуспешном вызове;
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - ошибка, возникшая при
//			обращении к сервису 1СПАРК Риски;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ВключитьМониторингСобытийПоКонтрагентам(СписокИНН, ДанныеАутентификации, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	Если СписокИНН.Количество() > 100 Тогда
		ВызватьИсключение НСтр("ru = 'Исключительная ситуация при вызове метода СПАРК.ВключитьМониторингСобытийПоКонтрагентам().
			|Некорректное значение параметра СписокИНН. Количество элементов списка превышает 100.'");
	КонецЕсли;
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ИдентификаторЗаявки", Неопределено);

	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюВключитьМониторингСобытийПоКонтрагентам(
		СписокИНН,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку результата запроса на включение мониторинга событий по контрагентам
// (метод ВключитьМониторингСобытийПоКонтрагентам()).
//
// Параметры:
//	ИдентификаторЗаявки - УникальныйИдентификатор - идентификатор заявки на включение мониторинга,
//		возвращенный методом ВключитьМониторингСобытийПоКонтрагентам().
//
// Возвращаемое значение:
//	Структура:
//		* Завершено - Булево - операция включения мониторинга завершена;
//		* РезультатВключенияМониторинга - Соответствие - результат включения
//			мониторинга по контрагентам.
//			** Ключ - Строка - ИНН контрагента;
//			** Значение - Булево - результат включения мониторинга.
//				Истина - мониторинг по контрагенту успешно включен,
//				Ложь - в противном случае;
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - ошибка, возникшая при
//			обращении к сервису 1СПАРК Риски;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция РезультатВключенияМониторингаСобытийПоКонтрагентам(
	ИдентификаторЗаявки,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("Завершено"                    , Ложь);
	Результат.Вставить("РезультатВключенияМониторинга", Новый Соответствие);

	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюРезультатВключенияМониторингаСобытийПоКонтрагентам(
		ИдентификаторЗаявки,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает список событий мониторинга в соответствии с указанным отбором.
//
// Параметры:
//	ПолучатьСобытияОт
//		- Дата - получить все события, возникшие начиная с указанной даты.
//			Если разница с текущей датой превышает 15 дней, тогда будут
//			возвращены события за последние 15 дней;
//		- УникальныйИдентификатор - идентификатор последнего полученного события,
//			задает точку начала возникновения событий.
//
// Возвращаемое значение:
//	Структура:
//		* СообщенияМониторинга - Соответствие - сообщения мониторинга:
//			** Ключ - Строка - ИНН контрагента;
//			** Значение - Массив - содержит элементы типа Структура.
//				Сообщения мониторинга по контрагенту.
//				Поля структуры:
//				*** ИдентификаторТипаСобытия - УникальныйИдентификатор - идентификатор типа
//					события мониторинга. Для получения описания типов событий мониторинга
//					необходимо использовать метод ТипыСобытийСообщенийМониторинга();
//				*** ДатаМониторинга - Дата - дата мониторинга события;
//				*** НовоеЗначение - Строка - новое значение;
//				*** СтароеЗначение - Строка - старое значение;
//		* ИдентификаторПоследнегоСобытия
//			- УникальныйИдентификатор - идентификатор последнего события;
//			- Неопределено - при отсутствии событий;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция СобытияМониторинга(
	СписокИННИлиИдентификатор,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ИдентификаторыТиповСобытий,
	ДополнительныеПараметрыЗапроса) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();

	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеТипаСтрока                  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаДата                    = Новый ОписаниеТипов("Дата");
	ОписаниеТипаУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	СобытияТаблица = Новый ТаблицаЗначений;
	СобытияТаблица.Колонки.Добавить("ИНН"                     , ОписаниеТипаСтрока);
	СобытияТаблица.Колонки.Добавить("Идентификатор"           , ОписаниеТипаУникальныйИдентификатор);
	СобытияТаблица.Колонки.Добавить("ИдентификаторТипаСобытия", ОписаниеТипаУникальныйИдентификатор);
	СобытияТаблица.Колонки.Добавить("ДатаМониторинга"         , ОписаниеТипаДата);
	СобытияТаблица.Колонки.Добавить("НовоеЗначение"           , ОписаниеТипаСтрока);
	СобытияТаблица.Колонки.Добавить("СтароеЗначение"          , ОписаниеТипаСтрока);
	СобытияТаблица.Индексы.Добавить("ИНН"); // Для поиска событий по ИНН.
	
	Результат.Вставить("События"                       , СобытияТаблица);
	Результат.Вставить("ИдентификаторПоследнегоСобытия", Неопределено);
	
	ВызватьОперациюСобытияМониторинга(
		СписокИННИлиИдентификатор,
		НачальныйИндекс,
		КонечныйИндекс,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	ИННВСобытиях = Новый Соответствие;
	Для Каждого ТекущееСобытие Из СобытияТаблица Цикл
		ИдентификаторыТиповСобытий[ТекущееСобытие.ИдентификаторТипаСобытия] = Истина;
		ИННВСобытиях[ТекущееСобытие.ИНН] = Истина;
	КонецЦикла;
	
	Результат.Вставить("СписокИНН", КлючиСоответствияВМассив(ИННВСобытиях));
	
	Возврат Результат;
	
КонецФункции

Функция КлючиСоответствияВМассив(ПараметрСоответствие) Экспорт
	
	Результат = Новый Массив;
	Для Каждого КлючЗначение Из ПараметрСоответствие Цикл
		Результат.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список типов событий сообщений мониторинга.
//
// Возвращаемое значение:
//	Структура:
//		* ТипыСобытий - Соответствие - сообщения мониторинга:
//			** Ключ - УникальныйИдентификатор - идентификатор типа события;
//			** Значение - Структура - описание типа события. Поля структуры:
//				*** Название - Строка - название типа события события;
//				*** Описание - Строка - описание типа события;
//				*** Критичное - Булево - признак критичности событий данного типа.
//					Истина - событие критичное, Ложь - не критичное;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ТипыСобытийСообщенийМониторинга(ТелоОтвета = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ТипыСобытий", Новый Соответствие);

	ПередВызовомОперацииСервиса(Результат, , , Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюТипыСобытийСообщенийМониторинга(Результат, ТелоОтвета);
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция НовыйРезультатВызоваСервиса() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОшибки"         , Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка());
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("СвойстваОшибки"    , Новый Структура("Код", 0));
	Возврат Результат;
	
КонецФункции

Процедура ПередВызовомОперацииСервиса(
	Результат,
	ОбластьДанных = Неопределено,
	ДанныеАутентификации = Неопределено,
	ЗаполнитьДанныеАутентификации = Истина)
	
	Если Не Пользователи.РолиДоступны("ЧтениеДанныхСПАРКРиски", , Ложь) Тогда
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав для работы с сервисом 1СПАРК Риски.
			|Обратитесь к администратору.'");
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Недостаточно прав для работы с сервисом 1СПАРК Риски.'");
		СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
	КонецЕсли;
	
	Если ЗаполнитьДанныеАутентификации И Результат.ВидОшибки.Пустая() Тогда
		ДанныеАутентификации = СПАРКРиски.ДанныеАутентификацииПользователяИнтернетПоддержки(ОбластьДанных);
		Если ДанныеАутентификации = Неопределено Тогда
			Результат.ВидОшибки          = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
			Результат.СообщениеОбОшибке  = НСтр("ru = 'Интернет-поддержка пользователей не подключена.'");
			Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
			// Ветвь сценария, не является ошибкой.
			СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВызоваОперацииСервиса(Результат)
	
	ВидыОшибок = Перечисления.ВидыОшибокСПАРКРиски;
	Если Результат.ВидОшибки = ВидыОшибок.ТребуетсяОплатаИлиПревышенЛимит Тогда
		// Ветвь сценария, не является ошибкой.
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
	ИначеЕсли Не Результат.ВидОшибки.Пустая() Тогда
		СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	Если ДанныеАутентификации.Свойство("Тикет") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	КонецЕсли;
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРККонтрагента

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /organizationInfo

Процедура ВызватьОперациюИндексыСПАРККонтрагента(
			СписокИНН,
			Результат,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса)

	URLОперации = URLОперацииСервиса("organizationInfo");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ТелоЗапроса = НовыйТелоЗапросаOrganizationInfo(
		СписокИНН,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);

	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ОбработатьТелоОтветаOrganizationInfo(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;

КонецПроцедуры

Функция НовыйТелоЗапросаOrganizationInfo(
	СписокИНН,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		0,
		СписокИНН.ВГраница(),
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаOrganizationInfo(ТелоОтвета, Результат)

	//{
	//  "results": [
	//    {
	//      "inn": String,
	//      "indexes": {
	//        "indexOfDueDiligence": Long,
	//        "failureScore": Long,
	//        "paymentIndex": Long,
	//        "acting": Boolean,
	//        "code": Long,
	//        "date": String(ISO),
	//        "text": String
	//      },
	//      "monitoringEvent": {
	//        "guid": String,
	//        "eventTypeGuid": String,
	//        "eventDate": String(ISO),
	//        "newValue": String,
	//        "oldValue": String
	//      }
	//    }
	//  ]
	//}

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");
	ТипЧисло     = Тип("Число");
	ТипБулево    = Тип("Булево");
	ТипСтрока    = Тип("Строка");
	ТипДата      = Тип("Дата");

	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	ЧтениеОтвета.Закрыть();

	Если ТипЗнч(СтруктураОтвета) = ТипСтруктура Тогда
		Если СтруктураОтвета.Свойство("results")
				И ТипЗнч(СтруктураОтвета.results) = ТипМассив Тогда
			Для Каждого ТекущийРезультат Из СтруктураОтвета.results Цикл
				Если ТипЗнч(ТекущийРезультат) = ТипСтруктура Тогда
					Если ТекущийРезультат.Свойство("inn") Тогда
						// Таблица уже предзаполнена данными по ИНН. Надо найти строку с таким ИНН и дозаполнить ее.
						СтрокиЗначенияИндекса = Результат.ЗначенияИндексов.НайтиСтроки(Новый Структура("ИНН", ТекущийРезультат.inn));
						Для Каждого СтрокаЗначенияИндекса Из СтрокиЗначенияИндекса Цикл
							// Найден ИНН - очистить вид ошибки.
							СтрокаЗначенияИндекса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
							Если ТекущийРезультат.Свойство("aggregatedIndex")
									И ТипЗнч(ТекущийРезультат.aggregatedIndex) = ТипСтруктура Тогда
								ИндексыСПАРККонтрагента = ТекущийРезультат.aggregatedIndex;
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, ИндексыСПАРККонтрагента, "ИндексДолжнойОсмотрительности", "indexOfDueDiligence", ТипЧисло, -1);
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, ИндексыСПАРККонтрагента, "ИндексФинансовогоРиска", "failureScore", ТипЧисло, -1);
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, ИндексыСПАРККонтрагента, "ИндексПлатежнойДисциплины", "paymentIndex", ТипЧисло, -1);
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, ИндексыСПАРККонтрагента, "Активен", "acting", ТипБулево, Ложь);
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, ИндексыСПАРККонтрагента, "ДатаСтатуса", "date", ТипДата, '00010101');
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, ИндексыСПАРККонтрагента, "ТекстСтатуса", "text", ТипСтрока, "");
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, ИндексыСПАРККонтрагента, "КодСтатуса", "code", ТипЧисло, 0);
							КонецЕсли;
							Если ТекущийРезультат.Свойство("monitoringEvent")
									И ТипЗнч(ТекущийРезультат.monitoringEvent) = ТипСтруктура Тогда
								СобытияКонтрагента = ТекущийРезультат.monitoringEvent;
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, СобытияКонтрагента, "ИдентификаторСобытия", "guid", ТипСтрока, "");
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, СобытияКонтрагента, "ИдентификаторТипаСобытия", "eventTypeGuid", ТипСтрока, "");
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, СобытияКонтрагента, "ДатаСобытия", "eventDate", ТипДата, '00010101');
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, СобытияКонтрагента, "ЗначениеНовое", "newValue", ТипСтрока, "");
								ПрочитатьЗначениеИзСтруктуры(СтрокаЗначенияИндекса, СобытияКонтрагента, "ЗначениеСтарое", "oldValue", ТипСтрока, "");
								Если НЕ ПустаяСтрока(СтрокаЗначенияИндекса.ИдентификаторТипаСобытия) Тогда
									Попытка
										СтрокаЗначенияИндекса.ТипСобытияНазвание = СПАРКРиски.НазваниеТипаСобытия(СтрокаЗначенияИндекса.ИдентификаторТипаСобытия);
									Исключение
										ИнформацияОбОшибке = ИнформацияОбОшибке();
										СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									КонецПопытки;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет строку таблицы значений значениями из структуры.
// В структуре может не быть какого-то значения - это проверяется.
//
// Параметры:
//  СтрокаТаблицыЗначений - Строка таблицы значений - приемник;
//  Данные                - Структура - Источник;
//  ИмяКолонки            - Строка - имя колонки приемника;
//  ИмяКлюча              - Строка - имя ключа источника;
//  ТипЗначения           - Тип - ожидаемое значение источника;
//  ЗначениеПоУмолчанию   - Произвольный - значение по-умолчанию.
//
Процедура ПрочитатьЗначениеИзСтруктуры(СтрокаТаблицыЗначений, Данные, ИмяКолонки, ИмяКлюча, ТипЗначения, ЗначениеПоУмолчанию)

	Если Данные.Свойство(ИмяКлюча) Тогда
		Если ТипЗнч(Данные[ИмяКлюча]) = ТипЗначения Тогда
			СтрокаТаблицыЗначений[ИмяКолонки] = Данные[ИмяКлюча];
		Иначе
			// Только "дата" может передаться как строка.
			ТипСтрока = Тип("Строка");
			ТипДата   = Тип("Дата");
			Если (ТипЗнч(Данные[ИмяКлюча]) = ТипСтрока)
					И (ТипЗначения = ТипДата) Тогда
				СтрокаТаблицыЗначений[ИмяКолонки] = ПрочитатьДатуJSON(Данные[ИмяКлюча], ФорматДатыJSON.ISO);
			Иначе
				СтрокаТаблицыЗначений[ИмяКолонки] = ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаТаблицыЗначений[ИмяКолонки] = ЗначениеПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеСправок

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /report/pdf/request

Процедура ВызватьОперациюНачатьПодготовкуСправок(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("report/pdf/request");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаReportPdfRequest(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаReportPdfRequest(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

// Получает тикет аутентификации при работе в модели сервиса.
//
Процедура ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат)

	Если ДанныеАутентификации.Свойство("Тикет") Тогда

		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации,
				ДанныеАутентификации.НомерОбласти);

		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			ДанныеАутентификации.Тикет = РезультатПолученияТикета.Тикет;
		Иначе
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаАутентификации;
			Результат.СообщениеОбОшибке  = РезультатПолученияТикета.СообщениеОбОшибке;
			Результат.ИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1. Ошибка аутентификации.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция НовыйТелоЗапросаReportPdfRequest(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаReportPdfRequest(ТелоОтвета, Результат)
	
	//{
	//    "date": String(ISO),
	//    "results": [{
	//        "inn": String,
	//        "guid": String
	//    }]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "date" Тогда
				
				Результат.ДатаЗапроса = ПрочитатьДатуJSON(
					ЗначениеСвойстваJSON(
						ЧтениеОтвета,
						"0001-01-01T00:00:00"),
					ФорматДатыJSON.ISO);
				
			ИначеЕсли ИмяСвойства = "results" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					Продолжить;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
						И ТекущийУровень = 1 Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИНН                  = "";
							ИдентификаторЗапроса = "";
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						ТекущийУровень = ТекущийУровень - 1;
						Если ТекущийУровень = 1 Тогда
							// Прочитан очередной объект из results.
							Результат.ИдентификаторыСправок.Вставить(
								ИНН,
								Новый УникальныйИдентификатор(ИдентификаторЗапроса));
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "inn" Тогда
							ИНН = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "guid" Тогда
							ИдентификаторЗапроса = ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вызов операции /report/pdf/check

Процедура ВызватьОперациюСостояниеПодготовкиСправок(
	ИдентификаторыЗапросов,
	НачальныйИндекс,
	КонечныйИндекс,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("report/pdf/check");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаReportPdfCheck(
		ИдентификаторыЗапросов,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета  = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаReportPdfCheck(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаReportPdfCheck(
	ИдентификаторыЗапросов,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "guidList": [String],
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("guidList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторыЗапросов[Итератор]));
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаReportPdfCheck(ТелоОтвета, Результат)
	
	//{
	//    "results": [{
	//        "guid": String("InProgress", "Done", ...),
	//        "status": String
	//    }]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "results" Тогда
			
			ЧтениеОтвета.Прочитать();
			Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ЧтениеОтвета.Прочитать() Цикл
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
					И ТекущийУровень = 1 Тогда
					// Закончено чтение объектов из results.
					Прервать;
				КонецЕсли;
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
					ТекущийУровень = ТекущийУровень + 1;
					Если ТекущийУровень > 2 Тогда
						Продолжить;
					Иначе
						ИдентификаторСправки = "";
						СостояниеСправки     = "";
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
					ТекущийУровень = ТекущийУровень - 1;
					Если ТекущийУровень = 1 Тогда
						// Прочитан очередной объект из results.
						Результат.СостояниеСправок.Вставить(
							Новый УникальныйИдентификатор(ИдентификаторСправки),
							СостояниеСправки);
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
					И ТекущийУровень = 2 Тогда
					ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
					Если ИмяСвойства = "guid" Тогда
						ИдентификаторСправки = ЗначениеСвойстваJSON(
							ЧтениеОтвета,
							"");
					ИначеЕсли ИмяСвойства = "status" Тогда
						СостояниеСправки = ПредставлениеСостоянияСправкиВПрограммномИнтерфейсе(
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								""));
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вызов операции /report/pdf/download

Процедура ВызватьОперациюЗагрузитьФайлСправки(
	ИдентификаторСправки,
	Результат,
	ДанныеАутентификации)
	
	URLОперации = URLОперацииСервиса("report/pdf/download");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаReportPdfDownload(
		ИдентификаторСправки,
		ДанныеАутентификации);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета, 18); // Возвратить HTTPОтвет
	Если Результат.ВидОшибки.Пустая() Тогда
		Результат.ФайлСправки = ТелоОтвета;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйТелоЗапросаReportPdfDownload(ИдентификаторСправки, ДанныеАутентификации)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "guid ": String,
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("guid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторСправки));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область МониторингСобытий

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/organizations

Процедура ВызватьОперациюВключитьМониторингСобытийПоКонтрагентам(
	СписокИНН,
	Результат,
	ДанныеАутентификации,
	ДопПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/organizations");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringOrganizations(
		СписокИНН,
		ДанныеАутентификации,
		ДопПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringOrganizations(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringOrganizations(
	СписокИНН,
	ДанныеАутентификации,
	ДопПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		0,
		СписокИНН.ВГраница(),
		ДанныеАутентификации,
		ДопПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringOrganizations(ТелоОтвета, Результат)
	
	//{
	//    "queryGuid": String
	//}
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "queryGuid" Тогда
			
			Результат.ИдентификаторЗаявки = Новый УникальныйИдентификатор(
				ЗначениеСвойстваJSON(ЧтениеОтвета));
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/queryStatus

Процедура ВызватьОперациюРезультатВключенияМониторингаСобытийПоКонтрагентам(
	ИдентификаторЗаявки,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/queryStatus");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringQueryStatus(
		ИдентификаторЗаявки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringQueryStatus(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringQueryStatus(ИдентификаторЗаявки, ДанныеАутентификации, ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "queryGuid" : String,
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryGuid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторЗаявки));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringQueryStatus(ТелоОтвета, Результат)
	
	//{
	//    "status": String("InProgress", "Done"),
	//    "results": [{
	//        "inn": String,
	//        "isMonitoringEnabled": Boolean
	//    }]
	//}
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "status" Тогда
				
				Результат.Завершено = (ЗначениеСвойстваJSON(ЧтениеОтвета) = "Done");
				
			ИначеЕсли ИмяСвойства = "results" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда
					Продолжить;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректное значение свойства results. Ожидается тип значения Массив; Фактический тип значения: %1.'"),
						Строка(ЧтениеОтвета.ТипТекущегоЗначения));
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
						И ТекущийУровень = 1 Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИНН               = "";
							МониторингВключен = Ложь;
						КонецЕсли;
						
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						
						ТекущийУровень = ТекущийУровень - 1;
						Если ТекущийУровень = 1 Тогда
							// Прочитан очередной объект из results.
							Результат.РезультатВключенияМониторинга.Вставить(ИНН, МониторингВключен);
						КонецЕсли;
						
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "inn" Тогда
							ИНН = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "monitoringEnabled" Тогда
							МониторингВключен = ЗначениеСвойстваJSON(ЧтениеОтвета, Ложь);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/events

Процедура ВызватьОперациюСобытияМониторинга(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/events");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringEvents(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringEvents(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringEvents(
	ПараметрОтбора,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "eventStartDate" : String,
	//    "lastEventGuid": String,
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ТипПараметрОтбора = ТипЗнч(ПараметрОтбора);
	Если ТипПараметрОтбора = Тип("Дата") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("eventStartDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаписатьДатуJSON(ПараметрОтбора, ФорматДатыJSON.ISO));
	ИначеЕсли ТипПараметрОтбора = Тип("УникальныйИдентификатор") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastEventGuid");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрОтбора));
	ИначеЕсли ТипПараметрОтбора = Тип("Массив") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("innList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
		Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
			ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрОтбора[Итератор]));
		КонецЦикла;
		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringEvents(ТелоОтвета, Результат)
	
	//{
	//  "lastEventGuid": String,
	//  "results": [
	//    {
	//      "inn": String,
	//      "events": [
	//        {
	//          "guid": String,
	//          "eventTypeGuid": String,
	//          "eventDate": String(ISO),
	//          "newValue": String,
	//          "oldValue": String,
	//          "IsActingNew": Boolean,
	//          "IsActingOld": Boolean
	//        },
	//      ]
	//    }
	//  ]
	//}
	
	// Метод гл. контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "lastEventGuid" Тогда
				
				ИдентификаторПоследнегоСобытияСтр = ЗначениеСвойстваJSON(ЧтениеОтвета);
				Если ИдентификаторПоследнегоСобытияСтр <> Неопределено Тогда
					Результат.ИдентификаторПоследнегоСобытия =
						Новый УникальныйИдентификатор(ИдентификаторПоследнегоСобытияСтр);
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "results" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда
					Продолжить;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректное значение свойства results. Ожидается тип значения Массив; Фактический тип значения: %1.'"),
						Строка(ЧтениеОтвета.ТипТекущегоЗначения));
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИНН = "";
						КонецЕсли;
						
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						
						ТекущийУровень = ТекущийУровень - 1;
						
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "inn" Тогда
							ИНН = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "events" Тогда
							ПрочитатьСобытияМониторинга(ЧтениеОтвета, Результат, ИНН);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Процедура ПрочитатьСобытияМониторинга(ЧтениеОтвета, Результат, ИНН)
	
	ЧтениеОтвета.Прочитать();
	Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда
		Возврат;
	ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение свойства results[].events. Ожидается тип значения Массив; Фактический тип значения: %1.'"),
			Строка(ЧтениеОтвета.ТипТекущегоЗначения));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			// Закончено чтение объектов.
			Прервать;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ДанныеСобытия = Результат.События.Добавить();
			ДанныеСобытия.ИНН = ИНН;
			ПрочитатьТекущееСобытиеМониторинга(ЧтениеОтвета, ДанныеСобытия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьТекущееСобытиеМониторинга(ЧтениеОтвета, ДанныеСобытия)
	
	ТекущийУровень = 1;
	Пока ЧтениеОтвета.Прочитать() И ТекущийУровень > 0 Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			ТекущийУровень = ТекущийУровень - 1;
			Если ТекущийУровень = 0 Тогда
				// Закончено чтение объекта.
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "guid" Тогда
				ДанныеСобытия.Идентификатор =
					Новый УникальныйИдентификатор(ЗначениеСвойстваJSON(ЧтениеОтвета));
			ИначеЕсли ИмяСвойства = "eventTypeGuid" Тогда
				ДанныеСобытия.ИдентификаторТипаСобытия =
					Новый УникальныйИдентификатор(ЗначениеСвойстваJSON(ЧтениеОтвета));
			ИначеЕсли ИмяСвойства = "eventDate" Тогда
				ДатаСобытияСтр = ЗначениеСвойстваJSON(ЧтениеОтвета, "0001-01-01T00:00:00");
				ДанныеСобытия.ДатаМониторинга = ПрочитатьДатуJSON(ДатаСобытияСтр, ФорматДатыJSON.ISO);
			ИначеЕсли ИмяСвойства = "newValue" Тогда
				ДанныеСобытия.НовоеЗначение = ЗначениеСвойстваJSON( ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "oldValue" Тогда
				ДанныеСобытия.СтароеЗначение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/eventTypeList

Функция ВызватьОперациюТипыСобытийСообщенийМониторинга(Результат, ТелоОтвета)
	
	Если ТелоОтвета = Неопределено Тогда
		URLОперации = URLОперацииСервиса("monitoring/eventTypeList");
		ТелоЗапроса = НовыйТелоЗапросаMonitoringEventTypeList();
		ТелоОтвета = "";
		ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
		Если Не Результат.ВидОшибки.Пустая() Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringEventTypeList(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТелоЗапросаMonitoringEventTypeList()
	
	//{
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringEventTypeList(ТелоОтвета, Результат)
	
	//{
	//  "results": [
	//    {
	//      "eventTypeGuid": String,
	//      "name": String,
	//      "description": String,
	//      "critical": Boolean}]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "results" Тогда
			
			ЧтениеОтвета.Прочитать();
			Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ЧтениеОтвета.Прочитать() Цикл
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
					И ТекущийУровень = 1 Тогда
					// Закончено чтение объектов из results.
					Прервать;
				КонецЕсли;
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
					ТекущийУровень = ТекущийУровень + 1;
					Если ТекущийУровень > 2 Тогда
						Продолжить;
					Иначе
						ИдентификаторТипаСобытия = ПустойИдентификатор;
						ДанныеТипаСобытия = Новый Структура;
						ДанныеТипаСобытия.Вставить("Название" , "");
						ДанныеТипаСобытия.Вставить("Описание" , "");
						ДанныеТипаСобытия.Вставить("Критичное", Ложь);
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
					ТекущийУровень = ТекущийУровень - 1;
					Если ТекущийУровень = 1 Тогда
						// Прочитан очередной объект из results.
						Результат.ТипыСобытий.Вставить(ИдентификаторТипаСобытия, ДанныеТипаСобытия);
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
					И ТекущийУровень = 2 Тогда
					
					ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
					Если ИмяСвойства = "eventTypeGuid" Тогда
						ИдентификаторТипаСобытия =
							Новый УникальныйИдентификатор(
								ЗначениеСвойстваJSON(
									ЧтениеОтвета,
									""));
					ИначеЕсли ИмяСвойства = "name" Тогда
						ДанныеТипаСобытия.Название =
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
					ИначеЕсли ИмяСвойства = "description" Тогда
						ДанныеТипаСобытия.Описание =
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
					ИначеЕсли ИмяСвойства = "critical" Тогда
						ДанныеТипаСобытия.Критичное =
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВызововОперацийСервиса

Функция ХостСервиса(Домен)
	
	Возврат "assessment.1c.ru";
	
КонецФункции

Функция URLОперацииСервиса(Операция)
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	Возврат "https://"
		+ ХостСервиса(НастройкиСоединения.ДоменРасположенияСерверовИПП)
		+ "/api/rest/"
		+ Операция;
	
КонецФункции

Процедура ПроверитьДоступностьСервиса(РезультатОперации)
	
	URLОперацииPing = URLОперацииСервиса("ping");
	РезультатПроверки = ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьURLДоступен(URLОперацииPing);
	
	Если ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Возврат;
		
	ИначеЕсли РезультатПроверки.ИмяОшибки = "ServerError" Тогда
		
		РезультатОперации.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса;
		РезультатОперации.СообщениеОбОшибке =
			НСтр("ru = 'Сервис временно недоступен.'")
			+ Символы.ПС
			+ РезультатПроверки.СообщениеОбОшибке;
		
	Иначе
		
		РезультатОперации.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения;
		РезультатОперации.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось подключиться к сервису.'")
			+ Символы.ПС
			+ РезультатПроверки.СообщениеОбОшибке;
		
	КонецЕсли;
	
	РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не удалось проверить доступность сервиса.'")
		+ Символы.ПС + РезультатПроверки.ИнформацияОбОшибке;
	
КонецПроцедуры

Процедура ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета, ФорматТелаОтвета = 1)
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	ПроверитьДоступностьСервиса(Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыПолученияСодержимого = Новый Структура;
	ПараметрыПолученияСодержимого.Вставить("Метод"                   , "POST");
	ПараметрыПолученияСодержимого.Вставить("ФорматОтвета"            , ФорматТелаОтвета);
	ПараметрыПолученияСодержимого.Вставить("Заголовки"               , Заголовки);
	ПараметрыПолученияСодержимого.Вставить("Таймаут"                 , НастройкиСоединения.ТаймаутПодключения);
	ПараметрыПолученияСодержимого.Вставить("ДанныеДляОбработки"      , ТелоЗапроса);
	ПараметрыПолученияСодержимого.Вставить("ФорматДанныхДляОбработки", 1);
	
	РезультатЗагрузкиСодержимого = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыПолученияСодержимого);
	
	Если ПустаяСтрока(РезультатЗагрузкиСодержимого.КодОшибки) Тогда
		
		Если ТипЗнч(РезультатЗагрузкиСодержимого.Содержимое) = Тип("HTTPОтвет") Тогда
			ТелоОтвета = РезультатЗагрузкиСодержимого.Содержимое.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			ТелоОтвета = РезультатЗагрузкиСодержимого.Содержимое;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(РезультатЗагрузкиСодержимого.Содержимое) = Тип("HTTPОтвет") Тогда
			// Обработать тело ответа как строку.
			РезультатЗагрузкиСодержимого.Содержимое =
				РезультатЗагрузкиСодержимого.Содержимое.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		ПриОшибкеВызоваОперацииСервиса(РезультатЗагрузкиСодержимого, URLОперации, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеПараметрыВызоваОперацииСервиса() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса();
	
КонецФункции

Функция НовыйТелоЗапросаСписокИНН(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "innList": [String],
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("innList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(СписокИНН[Итератор]);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ПредставлениеСостоянияСправкиВПрограммномИнтерфейсе(СостояниеВСервисе)
	
	Если СостояниеВСервисе = "InProgress" Тогда
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.Готовится;
	ИначеЕсли СостояниеВСервисе = "Done" Тогда
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.Получена;
	ИначеЕсли СостояниеВСервисе = "UnknownINN" Тогда
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.НеизвестныйИНН;
	Иначе
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.ОшибкаПодготовки;
	КонецЕсли;
	
КонецФункции

Процедура ПриОшибкеВызоваОперацииСервиса(РезультатЗагрузкиСодержимого, URLОперации, Результат)
	
	ШапкаИнформацииОбОшибке =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове операции %1 сервиса СПАРК.'"),
			URLОперации);
	
	Результат.СвойстваОшибки.Код = РезультатЗагрузкиСодержимого.КодСостояния;
	ПодвалСообщенияЖурналаРегистрации = "";
	Если ЭтоОбрабатываемыйКодОшибкиСервиса(РезультатЗагрузкиСодержимого.КодСостояния) Тогда
		// Если получен код состояния ответа, при котором тело описания ошибки
		// передается в установленном формате.
		Попытка
			// Заполняются Результат.СообщениеОбОшибке и Результат.СвойстваОшибки.
			ОбработатьТелоОшибки(РезультатЗагрузкиСодержимого, Результат);
		Исключение
			ПодвалСообщенияЖурналаРегистрации =
				НСтр("ru = 'Не удалось обработать описание ошибки.'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатЗагрузкиСодержимого.КодСостояния = 402 Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит;
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Требуется оплата сервиса.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 403 Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаАутентификации;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации в сервисе 1СПАРК Риски.'");
			
		Иначе
			
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
			Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
				Результат.СообщениеОбОшибке = НСтр("ru = 'Неверный логин или пароль пользователя Интернет-поддержки.'");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 404 Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.НекорректныйЗапрос;
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Запрошенные данные не найдены.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 429 Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПревышеноКоличествоПопытокАутентификации;
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодОшибки = "ConnectError" Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось подключиться к сервису.'")
			+ Символы.ПС + РезультатЗагрузкиСодержимого.СообщениеОбОшибке;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодОшибки = "ClientError" Тогда
		
		// Был передан некорректный запрос к серверу.
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить данные из сервиса СПАРК.'")
			+ Символы.ПС
			+ ?(ПустаяСтрока(Результат.СообщениеОбОшибке),
				РезультатЗагрузкиСодержимого.СообщениеОбОшибке,
				Результат.СообщениеОбОшибке);
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодОшибки = "ServerError" Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса;
		Результат.СообщениеОбОшибке = НСтр("ru = 'В сервисе возникли неполадки.'")
			+ Символы.ПС
			+ ?(ПустаяСтрока(Результат.СообщениеОбОшибке),
				РезультатЗагрузкиСодержимого.СообщениеОбОшибке,
				Результат.СообщениеОбОшибке);
		
	Иначе
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка при получении данных из сервиса 1СПАРК Риски.'")
			+ Символы.ПС + РезультатЗагрузкиСодержимого.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Результат.ИнформацияОбОшибке = ШапкаИнформацииОбОшибке
		+ Символы.ПС + Результат.СообщениеОбОшибке
		+ Символы.ПС + РезультатЗагрузкиСодержимого.ИнформацияОбОшибке
		+ Символы.ПС + ПодвалСообщенияЖурналаРегистрации;
	
КонецПроцедуры

Процедура ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке, URLОперации, ТелоОтвета, Результат)
	
	Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при вызове операции %1 сервиса СПАРК.
			|Ошибка при обработке ответа сервиса. %2
			|Тело ответа: %3'"),
		URLОперации,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
		Лев(ТелоОтвета, 5120));
	
	Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса;
	Результат.СообщениеОбОшибке = НСтр("ru = 'Некорректный ответ сервиса.'");
	
КонецПроцедуры

Процедура ОбработатьТелоОшибки(РезультатЗагрузкиСодержимого, Результат)
	
	//{
	// "errorText": String,
	// "errorParams": [{
	//    "key": String,
	//    "value": String}]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(РезультатЗагрузкиСодержимого.Содержимое);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorText" Тогда
				
				Результат.СообщениеОбОшибке =
					ЗначениеСвойстваJSON(
						ЧтениеОтвета,
						"");
				
			ИначеЕсли ИмяСвойства = "errorParams" Тогда
				
				// Обработка свойств ошибки.
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					Продолжить;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
						И ТекущийУровень = 1 Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИмяСвойстваОшибки      = "";
							ЗначениеСвойстваОшибки = "";
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						ТекущийУровень = ТекущийУровень - 1;
						Если ТекущийУровень = 1 И Не ПустаяСтрока(ИмяСвойстваОшибки) Тогда
							// Прочитан очередной объект из errorParams.
							Результат.СвойстваОшибки.Вставить(ИмяСвойстваОшибки, ЗначениеСвойстваОшибки);
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "key" Тогда
							ИмяСвойстваОшибки = ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
						ИначеЕсли ИмяСвойства = "value" Тогда
							ЗначениеСвойстваОшибки = ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Функция ЭтоОбрабатываемыйКодОшибкиСервиса(КодСостояния)
	
	Возврат (КодСостояния = 500
		Или КодСостояния = 400
		Или КодСостояния = 402
		Или КодСостояния = 403
		Или КодСостояния = 404
		Или КодСостояния = 429);
	
КонецФункции


Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1. Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьДополнительныеПараметрыЗапроса(
	ЗаписьПараметровЗапроса,
	ДополнительныеПараметрыЗапроса = Неопределено)
	
	ДопПараметрыЗапроса = ?(
		ДополнительныеПараметрыЗапроса = Неопределено,
		ДополнительныеПараметрыВызоваОперацииСервиса(),
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьПараметровЗапроса.ЗаписатьНачалоМассива();
	
	Для каждого КлючЗначение Из ДопПараметрыЗапроса Цикл
		ЗаписатьДопПараметрЗапроса(
			ЗаписьПараметровЗапроса,
			КлючЗначение.Ключ,
			КлючЗначение.Значение);
	КонецЦикла;
	
	ЗаписьПараметровЗапроса.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ЗаписатьДопПараметрЗапроса(ЗаписьПараметровЗапроса, Имя, Значение)
	
	ЗаписьПараметровЗапроса.ЗаписатьНачалоОбъекта();
	ЗаписьПараметровЗапроса.ЗаписатьИмяСвойства("key");
	ЗаписьПараметровЗапроса.ЗаписатьЗначение(Имя);
	ЗаписьПараметровЗапроса.ЗаписатьИмяСвойства("value");
	ЗаписьПараметровЗапроса.ЗаписатьЗначение(Строка(Значение));
	ЗаписьПараметровЗапроса.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
