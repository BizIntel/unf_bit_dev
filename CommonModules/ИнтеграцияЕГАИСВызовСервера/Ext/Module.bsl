
#Область СлужебныеПроцедурыИФункции

// Функция возвращает параметры запроса документа, который нужно выгрузить в ЕГАИС.
//
Функция ПодготовитьДанныеЗапросаВУТМ(ТранспортныйМодуль, ВидДокумента, Знач ВходныеПараметры, ТекстОшибки) Экспорт

	Результат = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("POST");
	
	РезультатПроверки = ПроверитьВозможностьВыгрузкиДокумента(ВидДокумента, ВходныеПараметры);
	Если НЕ РезультатПроверки.Результат Тогда
		ТекстОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ФорматОбмена = ТранспортныйМодуль.ФорматОбмена;
	Если НЕ ЗначениеЗаполнено(ФорматОбмена) Тогда
		ТекстОшибки = НСтр("ru='Не заполнен формат обмена в настройках обмена с ЕГАИС.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
		
		Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузополучатель");
		ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
			ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузоотправитель");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ФорматОбмена = ФорматОбменаОрганизацииЕГАИС(ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЧекККМ Тогда
		ТекстXML = ИнтеграцияЕГАИС.ТекстXMLВыгрузкиЧека(ВидДокумента, ВходныеПараметры[0], ВходныеПараметры[1], ТекстОшибки);
	Иначе
		ТекстXML = ИнтеграцияЕГАИС.ТекстXMLВыгрузкиДокумента(ТранспортныйМодуль, ФорматОбмена, ВидДокумента, ВходныеПараметры, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВремГраница = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ТелоЗапроса = Новый ТекстовыйДокумент();
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница);
	ТелоЗапроса.ДобавитьСтроку("Content-Disposition: form-data; name=""xml_file""");
	ТелоЗапроса.ДобавитьСтроку("Content-Type: text/xml; charset=utf-8");
	ТелоЗапроса.ДобавитьСтроку("");
	ТелоЗапроса.ДобавитьСтроку(ТекстXML);
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница + "--");
	
	Результат.АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(ВидДокумента, ФорматОбмена, ТекстОшибки);
	Результат.ТелоЗапроса  = ТелоЗапроса.ПолучитьТекст();
	Результат.ТекстXML     = ТекстXML;
	
	Результат.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + ВремГраница);
	
	Возврат Результат;

КонецФункции

// Функция возвращает параметры запроса документа, который нужно выгрузить в ЕГАИС.
//
Функция ПодготовитьДанныеЗапросаВУТМЧерезОбработкуОбслуживания(ТранспортныйМодуль, ВидДокумента, Знач ВходныеПараметры, ТекстОшибки) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("POST");
	
	РезультатПроверки = ПроверитьВозможностьВыгрузкиДокумента(ВидДокумента, ВходныеПараметры);
	Если НЕ РезультатПроверки.Результат Тогда
		ТекстОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ФорматОбмена = ТранспортныйМодуль.ФорматОбмена;
	Если НЕ ЗначениеЗаполнено(ФорматОбмена) Тогда
		ТекстОшибки = НСтр("ru='Не заполнен формат обмена в настройках обмена с ЕГАИС.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
		
		Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузополучатель");
		ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
			ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузоотправитель");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ФорматОбмена = ФорматОбменаОрганизацииЕГАИС(ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	ПараметрыВыполненияКоманды.Вставить("ВидДокумента"      , ВидДокумента);
	ПараметрыВыполненияКоманды.Вставить("ВходныеПараметры"  , ВходныеПараметры);
	ПараметрыВыполненияКоманды.Вставить("ФорматОбмена"      , ФорматОбмена);
	
	Попытка
		ОбработкаОбслуживания = ВнешниеОбработки.Создать(ТранспортныйМодуль.ИмяОбработкиОбслуживания);
		ОбработкаОбслуживания.ВыполнитьКоманду("ПодготовитьДанныеЗапросаВУТМ", ПараметрыВыполненияКоманды);
		
		Если НЕ ПараметрыВыполненияКоманды.Свойство("Результат") Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды.'");
		ИначеЕсли ПараметрыВыполненияКоманды.Свойство("ТекстОшибки") И НЕ ПустаяСтрока(ПараметрыВыполненияКоманды.ТекстОшибки) Тогда
			ТекстОшибки = ПараметрыВыполненияКоманды.ТекстОшибки;
		Иначе
			Результат = ПараметрыВыполненияКоманды.Результат;
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка при вызове обработки обслуживания.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Формирует запрос в ТМ ЕГАИС.
//
Функция СформироватьЗапросВУТМ(ТранспортныйМодуль, ВидДокумента, Знач ВходныеПараметры, ДокументОснование) Экспорт
	
	ТекстОшибки = "";
	Если НЕ ПустаяСтрока(ТранспортныйМодуль.ИмяОбработкиОбслуживания) Тогда
		ДанныеЗапроса = ПодготовитьДанныеЗапросаВУТМЧерезОбработкуОбслуживания(
			ТранспортныйМодуль,
			ВидДокумента,
			ВходныеПараметры,
			ТекстОшибки);
	Иначе
		ДанныеЗапроса = ПодготовитьДанныеЗапросаВУТМ(
			ТранспортныйМодуль,
			ВидДокумента,
			ВходныеПараметры,
			ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ТекстОшибки);
	КонецЕсли;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ Результат.Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("ИдентификаторЗапроса", Результат.ИдентификаторЗапроса);
	
	ЗавершитьФормированиеИсходящегоЗапроса(ДанныеЗапроса, ВидДокумента, ДокументОснование);
	
	Возврат Результат;
	
КонецФункции

// Загружает новые документы из транспортного модуля.
//
Функция ЗагрузитьДокументыИзУТМ(ТранспортныйМодуль, Знач ДополнительныеПараметры) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	СписокURL = ИнтеграцияЕГАИСКлиентСервер.ПодготовитьСписокURLДокументовКЗагрузке(РезультатОперации.ОтветМодуляЕГАИС);
	
	МассивДокументов = Новый Массив;
	
	Для Каждого URLДокумента Из СписокURL Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДокумента.АдресURL);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", URLДокумента.АдресURL);
			Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
		
		СтруктураДокумента = ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента();
		СтруктураДокумента.АдресЗапроса = URLДокумента.АдресURL;
		СтруктураДокумента.ТекстXML = РезультатОперации.ОтветМодуляЕГАИС;
		
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(ТранспортныйМодуль, МассивДокументов, Ложь, ДополнительныеПараметры);
	
	Для Каждого URLДокумента Из Результат.ЗагруженныеДокументы Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДокумента);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось удалить входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", URLДокумента);
			ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает ответы из транспортного модуля.
//
Функция ОбработатьОтветыИзУТМ(ТранспортныйМодуль, ДополнительныеПараметры) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/in";
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить список исходящих запросов.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	СоответствиеЗапросов = Новый Соответствие;
	ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(СоответствиеЗапросов, РезультатОперации.ОтветМодуляЕГАИС, "АдресЗапроса");
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить список ответов.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(СоответствиеЗапросов, РезультатОперации.ОтветМодуляЕГАИС, "АдресаОтветов");
	
	СписокURL = ПодготовитьСписокURLОтветовКЗагрузке(СоответствиеЗапросов);
	
	МассивДокументов = Новый Массив;
	
	Для Каждого Ответ Из СписокURL Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Ответ.АдресURL);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить ответ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Ответ.АдресURL);
			Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
		
		СтруктураДокумента = ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента();
		СтруктураДокумента.ИдентификаторЗапроса = Ответ.ИдентификаторЗапроса;
		СтруктураДокумента.АдресЗапроса = Ответ.АдресURL;
		СтруктураДокумента.ТекстXML = РезультатОперации.ОтветМодуляЕГАИС;
		
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(ТранспортныйМодуль, МассивДокументов, Ложь, ДополнительныеПараметры);
	
	УдаленныеURL = Новый Массив;
	
	Для Каждого URLОтвета Из Результат.ЗагруженныеДокументы Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLОтвета);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось удалить ответ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", URLОтвета);
			ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
		КонецЕсли;
			
		Для Каждого КлючЗначение Из СоответствиеЗапросов Цикл
			Если КлючЗначение.Значение.АдресаОтветов.Найти(URLОтвета) <> Неопределено Тогда
				Если УдаленныеURL.Найти(КлючЗначение.Значение.АдресЗапроса) = Неопределено
					И НЕ ПустаяСтрока(КлючЗначение.Значение.АдресЗапроса) Тогда
					СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(КлючЗначение.Значение.АдресЗапроса);
		
					ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
					ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
					РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
					
					Если РезультатОперации.Результат Тогда
						УдаленныеURL.Добавить(КлючЗначение.Значение.АдресЗапроса);
					КонецЕсли;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверят использование механизма регистрации розничных продаж в ЕГАИС.
//
Функция ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Знач ДатаПродажи = Неопределено) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаПродажи) Тогда
		ДатаПродажи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДатаНачалаРегистрации = ПолучитьЗначениеКонстанты("ДатаНачалаРегистрацииРозничныхПродажВЕГАИС");
	
	Возврат ДатаПродажи >= ДатаНачалаРегистрации И ЗначениеЗаполнено(ДатаНачалаРегистрации);

КонецФункции

// Получение значения константы.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

// Разбирает список входящих документов и подготавливает список URL-адресов документов к загрузке.
//
Функция ПодготовитьСписокURLДокументовКЗагрузке(ОтветМодуляЕГАИС) Экспорт
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.ПодготовитьСписокURLДокументовКЗагрузке(ОтветМодуляЕГАИС);
	
КонецФункции

// Разбирает список входящих документов и подготавливает массив URL-адресов ответов к загрузке.
//
Функция ПодготовитьСписокURLОтветовКЗагрузке(СоответствиеЗапросов) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого КлючЗначение Из СоответствиеЗапросов Цикл
		
		Если НЕ ЕстьИсходящийЗапрос(КлючЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого АдресОтвета Из КлючЗначение.Значение.АдресаОтветов Цикл
			Результат.Добавить(Новый Структура("ИдентификаторЗапроса, АдресURL", КлючЗначение.Ключ, АдресОтвета));
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает соответствие между исходящим запросом и полученным ответом.
//
Процедура УстановитьСоответствиеЗапросов(СоответствиеЗапросов, ОтветМодуляЕГАИС, ПолеАдреса) Экспорт
	
	ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(СоответствиеЗапросов, ОтветМодуляЕГАИС, ПолеАдреса);
	
КонецПроцедуры

// Загружает список документов, полученных из УТМ.
//
Функция ОбработатьВходящиеДокументы(Знач ТранспортныйМодуль, Знач МассивДокументов, Знач ДополнительныеПараметры) Экспорт
	
	Результат = Новый Соответствие;
	
	Если НЕ ПустаяСтрока(ТранспортныйМодуль.ИмяОбработкиОбслуживания) Тогда
		ПараметрыВыполненияКоманды = Новый Структура;
		ПараметрыВыполненияКоманды.Вставить("МассивДокументов", МассивДокументов);
		ПараметрыВыполненияКоманды.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		
		Попытка
			ОбработкаОбслуживания = ВнешниеОбработки.Создать(ТранспортныйМодуль.ИмяОбработкиОбслуживания);
			ОбработкаОбслуживания.ВыполнитьКоманду("ОбработатьВходящиеДокументы", ПараметрыВыполненияКоманды);
			
			Если НЕ ПараметрыВыполненияКоманды.Свойство("Результат") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка выполнения команды.'"));
			Иначе
				Результат = ПараметрыВыполненияКоманды.Результат;
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка при вызове обработки обслуживания.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
		
	Иначе
		Результат = ИнтеграцияЕГАИС.ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет возможность формирования XML-файла перед выгрузкой в УТМ.
//
Функция ПроверитьВозможностьВыгрузкиДокумента(ВидДокумента, ВходныеПараметры)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Если ТипЗнч(ВходныеПараметры) <> Тип("Структура") ИЛИ НЕ ВходныеПараметры.Свойство("ДокументСсылка") Тогда
		Результат.Результат = Истина;
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВходныеПараметры.ДокументСсылка, "СтатусОбработки, Проведен");
	
	Если НЕ РеквизитыДокумента.Проведен Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Документ не проведен.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru = 'Акт отказа требует только отправленный в ЕГАИС документ.'");
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС) Тогда
			
			Если ТипЗнч(ВходныеПараметры.ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
				Результат.ОписаниеОшибки = НСтр("ru = 'Документ уже обработан грузополучателем. Отозвать документ нельзя.'");
			Иначе
				Результат.ОписаниеОшибки = НСтр("ru = 'Документ не требует подтверждения.'");
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтАктаРасхождений Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтАктаРасхождений) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru = 'Для документа не был принят акт расхождений.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru='Документ не подтвержден.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru='Документ не проведен в ЕГАИС.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВЕГАИС
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru='Документ не проведен в ЕГАИС.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВТорговомЗале Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписания
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатков
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков)Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru = 'По документу уже были получены остатки.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст ошибки, отображаемый пользователю в окне сообщений.
//
Функция ТекстОшибкиПередаваемогоДокумента()
	
	Возврат НСтр("ru='Документ передается в ЕГАИС, дождитесь уведомления о фиксации.'");
	
КонецФункции

// Возвращает текст ошибки, отображаемый пользователю в окне сообщений.
//
Функция ТекстОшибкиПереданногоДокумента()
	
	Возврат НСтр("ru='Документ уже передан в ЕГАИС.'");
	
КонецФункции

// Получает список доступных транспортных модулей ЕГАИС.
//
// Параметры:
//  Отбор - Структура, Массив - структура с ключами: Поле, Значение. Или массив таких структур.
//
// Возвращаемое значение:
//   Массив - список доступных модулей.
//
Функция ДоступныеТранспортныеМодули(Отбор = Неопределено) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(Отбор);

КонецФункции

// Проверяет возможность загрузки ответов из УТМ.
//
Функция ДоступнаОбработкаОтветов() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПротоколОбменаЕГАИС);
	
КонецФункции

// Возвращает настройки прокси-сервера.
//
Функция НастройкиПроксиСервера(URLИлиПротокол) Экспорт
	
	Возврат ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(URLИлиПротокол);
	
КонецФункции

// Проверяет, требуется ли запуск события на дату проверки.
//
Функция ПроверитьРасписание(Расписание, ДатаПроверки, ДатаПоследнегоЗапуска) Экспорт
	
	Возврат Расписание.ТребуетсяВыполнение(ДатаПроверки, ДатаПоследнегоЗапуска);
	
КонецФункции

// Проверяет наличие исходящего запроса по идентификатору.
//
Функция ЕстьИсходящийЗапрос(ИдентификаторЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.ИдентификаторЗапроса КАК ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.ПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|ГДЕ
	|	ПротоколОбменаЕГАИС.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И ПротоколОбменаЕГАИС.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Разбирает ответ, полученный из УТМ.
//
Функция ПрочитатьОтветМодуляЕГАИС(КодСостояния, ОтветМодуляЕГАИС, РазбиратьОтвет) Экспорт
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.ПрочитатьОтветМодуляЕГАИС(КодСостояния, ОтветМодуляЕГАИС, РазбиратьОтвет);
	
КонецФункции

// См. описание функции ОбщегоНазначения.ЗначенияРеквизитовОбъекта().
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

// См. описание функции ОбщегоНазначения.ЗначениеРеквизитаОбъекта().
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Изменяет статус обработки документа основания и делает запись в протокол обмена с УТМ.
//
Процедура ЗавершитьФормированиеИсходящегоЗапроса(ДанныеЗапроса, ВидДокумента, ДокументОснование) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		НовыйСтатус = СтатусВыгруженногоДокумента(ВидДокумента, ДокументОснование);
		
		Если НЕ НовыйСтатус = Неопределено Тогда
			РезультатОперации = ИнтеграцияЕГАИС.ИзменитьСтатусОбработкиДокумента(ДокументОснование, НовыйСтатус);
			
			Если НЕ РезультатОперации.Результат Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,
					ДокументОснование.Метаданные(),
					ДокументОснование,
					РезультатОперации.ОписаниеОшибки);
					
				ТекстСообщения = НСтр("ru = 'Не удалось изменить статус обработки документа %1.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(ДокументОснование));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДокумента <> Перечисления.ВидыДокументовЕГАИС.ЧекККМ Тогда
		ПараметрыСессии = ИнтеграцияЕГАИСКлиентСервер.ПараметрыСессииОбмена();
		ПараметрыСессии.ТипЗапроса = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
		ПараметрыСессии.ВидДокумента = ВидДокумента;
		ПараметрыСессии.ИдентификаторЗапроса = ДанныеЗапроса.ИдентификаторЗапроса;
		ПараметрыСессии.ДокументОснование = ДокументОснование;
		
		ЗаписатьСессиюОбменаСУТМ(ПараметрыСессии, ДанныеЗапроса.ТекстXML);
	КонецЕсли;
	
КонецПроцедуры

// Возвращет новый статус обработки документа в случае удачной выгрузки в УТМ.
//
Функция СтатусВыгруженногоДокумента(ВидДокумента, ДокументОснование)
	
	СоответствиеСтатусовВидам = Новый Соответствие;
	
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН,
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН,
		?(ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС"),
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа));
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН,
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений);
	
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс,
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВТорговомЗале,
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктСписания,
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала,
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОстатков,
		Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале,
		Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал,
		Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала,
		Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПередаетсяВЕГАИС);
		
	Возврат СоответствиеСтатусовВидам[ВидДокумента];
	
КонецФункции

// Записывает сессию обмена с УТМ.
//
// Параметры:
//  ПараметрыСессии - Структура - параметры сессии обмена,
//  ТекстXML - Строка - текст xml файла обмена.
//
Процедура ЗаписатьСессиюОбменаСУТМ(Знач ПараметрыСессии, Знач ТекстXML)
	
	ПараметрыСессии.ФайлОбмена = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
	
	РегистрыСведений.ПротоколОбменаЕГАИС.ЗаписатьСессиюОбменаСУТМ(ПараметрыСессии);
	
КонецПроцедуры

// Устанавливает блокировку на регистр сведений для предотвращения одновременной загрузки данных из УТМ.
//
Функция ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента = Неопределено) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Истина, "");
	
	Если ИдентификаторКлиента = Неопределено Тогда
		ИдентификаторКлиента = ПараметрыСеанса.ИдентификаторСеансаЕГАИС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторФСРАР", ТранспортныйМодуль.ИдентификаторФСРАР);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	НастройкиОбменаЕГАИС.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|ГДЕ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР = &ИдентификаторФСРАР";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ИдентификаторФСРАР", Выборка.ИдентификаторФСРАР);
		СтруктураКлюча.Вставить("РабочееМесто", Выборка.РабочееМесто);
		
		КлючБлокировки = РегистрыСведений.НастройкиОбменаЕГАИС.СоздатьКлючЗаписи(СтруктураКлюча);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(КлючБлокировки,, ИдентификаторКлиента);
		Исключение
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			СтрокаПоиска = НСтр("ru = 'Объект уже заблокирован:'");
			Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
				ПозицияСимвола = СтрНайти(ОписаниеОшибки, СтрокаПоиска);
				Если ПозицияСимвола > 0 Тогда
					ДлинаСообщения = СтрДлина(ОписаниеОшибки);
					ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
					
					КонецСообщения = Прав(ОписаниеОшибки, ДлинаСообщения - ПозицияСимвола - ДлинаСтрокиПоиска);
					
					ОписаниеОшибки = НСтр("ru = 'Обмен с УТМ по адресу %1 уже выполняется:'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ТранспортныйМодуль.АдресУТМ);
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + КонецСообщения;
				КонецЕсли;
			КонецЕсли;
			
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// Снимает блокировку с регистра сведений, установленную при начале обмена с УТМ.
//
Функция РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторФСРАР", ТранспортныйМодуль.ИдентификаторФСРАР);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	НастройкиОбменаЕГАИС.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|ГДЕ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР = &ИдентификаторФСРАР";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ИдентификаторФСРАР", Выборка.ИдентификаторФСРАР);
		СтруктураКлюча.Вставить("РабочееМесто", Выборка.РабочееМесто);
		
		КлючБлокировки = РегистрыСведений.НастройкиОбменаЕГАИС.СоздатьКлючЗаписи(СтруктураКлюча);
		
		Попытка
			РазблокироватьДанныеДляРедактирования(КлючБлокировки, ИдентификаторКлиента);
		Исключение
			Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриПолученииФормыСправочника(
		ИмяСправочника,
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриПолученииФормыДокумента(
		ИмяДокумента,
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриПолученииФормыРегистраСведений(
		ИмяРегистра,
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Возвращает формат обмена с УТМ организации ЕГАИС.
//
Функция ФорматОбменаОрганизацииЕГАИС(ОрганизацияЕГАИС)
	
	Результат = Перечисления.ФорматыОбменаЕГАИС.V1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка
	|	И КлассификаторОрганизацийЕГАИС.ФорматОбмена <> ЗНАЧЕНИЕ(Перечисление.ФорматыОбменаЕГАИС.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].ФорматОбмена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти