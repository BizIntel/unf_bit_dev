
// Функция формирует пакет обмена, который будет отправлен узлу УзелОбмена
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//
// Возвращаемое значение:
//  сформированный пакет, помещенный в хранилище значения
Функция СформироватьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого, НужнаИнициализацияУзла = Ложь, ЭтоНовыйОбмен = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если НужнаИнициализацияУзла Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
		ОбменМобильноеПриложениеПереопределяемый.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена);
		ОбменМобильноеПриложениеПереопределяемый.ЗарегистрироватьИзмененияДанных(УзелОбмена);
	Иначе
		ОбменМобильноеПриложениеПереопределяемый.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена, НомерПринятого);
	КонецЕсли;
	
	НомерСообщенияОчереди = УзелОбмена.НомерОтправленного;
	
	// Запись данных в очередь.
	ОбменМобильноеПриложениеПереопределяемый.ЗаписатьЗарегистрированныеДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, ЭтоНовыйОбмен);
	
	// Проверка порядка следования сообщений обмена.
	ОбменМобильноеПриложениеПереопределяемый.ПроверитьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого);
	
	// Удаляем регистрацию изменений для сообщений обмена, помещенных в очередь.
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
	
КонецФункции // СформироватьОчередьСообщенийОбмена()

// Процедура вносит в информационную базу данные, которые присланы из узла УзелОбмена 
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//  ДанныеОбмена - пакет обмена полученный из узла УзелОбмена, помещенный в ХранилищеЗначения
//  ОчиститьИзменения - параметр определяет, нужно ли очищать ранее отправленные изменения
//
Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена, ОчиститьИзменения = Ложь, ЭтоНовыйОбмен = Ложь) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Если ОчиститьИзменения Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	КонецЕсли;
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://www.1c.ru/SB/MobileExchange", "Objects");
	
	Объекты = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	
	ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьОбъекты(УзелОбмена, Объекты, ЭтоНовыйОбмен);
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
КонецПроцедуры // ПринятьПакетОбмена()

// Запускает формирование очереди обмена.
//
Процедура ЗапуститьФормированиеОчередиСообщенийОбмена(УзелОбмена, КодМобильногоКомпьютера, НомерПринятого, НужнаИнициализацияУзла, ИдентификаторЗадания, ЭтоНовыйОбмен = Ложь) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(УзелОбмена);
	МассивПараметров.Добавить(НомерПринятого);
	МассивПараметров.Добавить(НужнаИнициализацияУзла);
	МассивПараметров.Добавить(ЭтоНовыйОбмен);
	
	ИмяФункции = "ОбменМобильноеПриложениеОбщее.СформироватьОчередьСообщенийОбмена";
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить(
		ИмяФункции,
		МассивПараметров,
		,
		КодМобильногоКомпьютера);
		
	ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	
КонецПроцедуры

// Получает сообщение обмена по номеру сообщения.
//
Функция ПолучитьСообщениеОбмена(УзелОбмена, НомерСообщенияОбмена, ИдентификаторЗадания) Экспорт

	СтруктураОтвета = Новый Структура("Подождать, ПродолжитьЗагрузку, ПрерватьЗагрузку, СообщениеОбмена", Ложь, Истина, Ложь, Неопределено);
	
	СообщениеОбмена = ОбменМобильноеПриложениеПереопределяемый.ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена);
	Если СообщениеОбмена <> Неопределено Тогда
		СтруктураОтвета.СообщениеОбмена = СообщениеОбмена;
		Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));
	КонецЕсли;
	
	// Если сообщения нет в очереди, проверим состояние выполнения фонового задания.
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ОчередьСообщенийСформирована = ОбменМобильноеПриложениеПереопределяемый.ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки, СообщениеОбОшибке);
	
	НужноОчиститьОчередьСообщений = Ложь;
	// Если есть ошибки, сбрасываем счетчики сообщений для переотправки данных при следующем сеансе обмена.
	Если ЕстьОшибки Тогда
		ОбменМобильноеПриложениеПереопределяемый.ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
		НужноОчиститьОчередьСообщений = Истина;
		ВызватьИсключение(СообщениеОбОшибке);
	КонецЕсли;
	
	// Если нет сообщений и очередь была сформирована, считаем что все пакеты успешно получены, иначе ожидаем пакеты.
	Если ОчередьСообщенийСформирована Тогда
		СтруктураОтвета.Подождать = Ложь;
		СтруктураОтвета.ПродолжитьЗагрузку = Ложь;
		НужноОчиститьОчередьСообщений = Истина;
	Иначе
		СтруктураОтвета.Подождать = Истина;
		СтруктураОтвета.ПродолжитьЗагрузку = НЕ ЕстьОшибки;
	КонецЕсли;
	
	СтруктураОтвета.ПрерватьЗагрузку = ЕстьОшибки;
	
	Если НужноОчиститьОчередьСообщений Тогда
		
		ОтборЗадания = Новый Структура("Ключ", Строка(ИдентификаторЗадания));
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗадания);
		
		Если МассивЗаданий.Количество() = 0  Тогда // Если очистка не запускалась, то запустить.
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(УзелОбмена);
			
			ИмяФункции = "ОбменМобильноеПриложениеПереопределяемый.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом";
			
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(
				ИмяФункции,
				МассивПараметров,
				Строка(ИдентификаторЗадания),
				НСтр("ru='Очистка очереди сообщений с мобильным клиентом'"));
				
			СтруктураОтвета.Подождать = Истина; // Подождем очистку.
			СтруктураОтвета.ПродолжитьЗагрузку = Истина;
			
		Иначе
			
			Если МассивЗаданий[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
				СтруктураОтвета.Подождать = Истина; // Подождем очистку.
				СтруктураОтвета.ПродолжитьЗагрузку = Истина;
			КонецЕсли;
			
		КонецЕСли;
		
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));

КонецФункции

// Функция формирует пакет обмена, который будет отправлен узлу УзелОбмена
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//
// Возвращаемое значение:
//  сформированный пакет, помещенный в хранилище значения
Функция СформироватьПакетОбмена(УзелОбмена) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ТипДанныхУдаления = Тип("УдалениеОбъекта");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	ВозвращаемыйСписок = ОбменМобильноеПриложениеПереопределяемый.СоздатьОбъектXDTO("Objects");
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если НЕ ОбменМобильноеПриложениеПереопределяемый.НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных.
			ОбменМобильноеПриложениеПереопределяемый.УдалениеДанных(Данные);
			
		КонецЕсли;
		
		ОбменМобильноеПриложениеПереопределяемый.ЗаписатьДанные(ВозвращаемыйСписок, Данные);
		
	КонецЦикла;
	
	ОбменМобильноеПриложениеПереопределяемый.ЗаписатьОстатки(ВозвращаемыйСписок, Данные);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	
КонецФункции // СформироватьПакетОбмена()

