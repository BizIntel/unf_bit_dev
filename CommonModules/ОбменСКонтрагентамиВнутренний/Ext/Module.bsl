////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентами: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует электронный документ счет фактура по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на объект ИБ, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - параметры настроек обмена.
//  ПризнакЭД - Булево - признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - реквизиты продавца.
//
Функция СформироватьИнформациюПродавца(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	РезультатФормирования = Ложь;
	ТекстОшибки = "";
	
	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("КНД",            "1115125");
	СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_SCHFDOPPR");
	СтруктураЭД.Вставить("ВидЭД",          НастройкиОбменаЭД.ВидЭД);
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УПД_ИнформацияПродавца");
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	Если НастройкиОбменаЭД.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)" Тогда
	
		СтруктураЭД.Вставить("Функция",        "СЧФДОП");
		СтруктураЭД.Вставить("ПоФактХЖ",       "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
		СтруктураЭД.Вставить("НаимДокОпр",     "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
		
		ВидОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации");
		ВидСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
		Если ЗначениеЗаполнено(ВидСчетаФактуры) И ВидСчетаФактуры = "Авансовый" Тогда
			СтруктураЭД.Вставить("Функция",        "СЧФ");
			СтруктураЭД.Вставить("ПоФактХЖ",       "");
			СтруктураЭД.Вставить("НаимДокОпр",     "");
			СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
			
		ИначеЕсли ЗначениеЗаполнено(ВидОперации) И ВидОперации = Перечисления.ВидыОперацийЭД.Комиссия Тогда
			СтруктураЭД.Вставить("Функция",        "ДОП");
			СтруктураЭД.Вставить("ПоФактХЖ",       "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
			СтруктураЭД.Вставить("НаимДокОпр",     "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (Документ об оказании услуг)");
			СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
			СтруктураЭД.Вставить("ВидЭД",               Перечисления.ВидыЭД.ТОРГ12Продавец);
			
		Иначе
			СсылкаСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры");
			Если ЗначениеЗаполнено(СсылкаСчетаФактуры) Тогда
				
				СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаСчетаФактуры));
				ДокументыОснования = Новый Массив;
				ДокументыОснования.Добавить(СсылкаСчетаФактуры);
				СтруктураЭД.Вставить("ДокументыОснования", ДокументыОснования);
			Иначе
				ТекстОшибки = НСтр("ru = 'Не заполнено обязательное поле: ""СсылкаСчетаФактуры.""'");
				Возврат Неопределено;
			КонецЕсли;
			
			МассивПервичныхДокументовУПД = Новый Массив;
			СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
			Если ЗначениеЗаполнено(СтрокаДокументыОснования.Значение) Тогда
				Если ТипЗнч(СтрокаДокументыОснования.Значение) = Тип("Массив") Тогда
					МассивПервичныхДокументовУПД = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СтрокаДокументыОснования.Значение);
				Иначе
					МассивПервичныхДокументовУПД.Добавить(СтрокаДокументыОснования.Значение);
				КонецЕсли;
				ИмяСчетаФактурыВыданного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"СчетФактураВыданныйВМетаданных");
				Индекс = МассивПервичныхДокументовУПД.Количество() - 1;
				Пока Индекс >=0 Цикл
					Документ = МассивПервичныхДокументовУПД.Получить(Индекс);
					Если ИмяСчетаФактурыВыданного <> Неопределено
						И ТипЗнч(Документ) <> Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного) Тогда
						
						СтруктураЭД.ДокументыОснования.Добавить(Документ);
					КонецЕсли;
					Индекс = Индекс - 1;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОбменаЭД.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура)" Тогда
		СтруктураЭД.Вставить("Функция",        "СЧФ");
		СтруктураЭД.Вставить("ПоФактХЖ",       "");
		СтруктураЭД.Вставить("НаимДокОпр",     "");
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	КонецЕсли;
	
	Если НастройкиОбменаЭД.ВерсияФормата = "ФНС 5.01 (УПД:Первичный документ)" Тогда
		СтруктураЭД.Вставить("Функция",        "ДОП");
		СтруктураЭД.Вставить("ПоФактХЖ",       "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
		СтруктураЭД.Вставить("НаимДокОпр",     "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (Документ об оказании услуг)");
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерДокумента"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента"));
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			НомерСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерСчетаФактуры, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "Функция",    СтруктураЭД.Функция);
		ВставитьЗначениеВДерево(ДеревоДанных, "НаимДокОпр", СтруктураЭД.НаимДокОпр);
		ВставитьЗначениеВДерево(ДеревоДанных, "ПоФактХЖ",   СтруктураЭД.ПоФактХЖ);
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
		Если ЗначениеЗаполнено(СтрокаДокументыОснования.Значение) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтрокаДокументыОснования.Значение, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
			
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				Если ЗначениеЗаполнено(Строка.Наименование) Тогда
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "ИДЭДДокументаОснования";
					НоваяСтрока.Значение = Строка.Наименование;
					ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторДокументаОснования) Тогда
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
					НоваяСтрока.Значение = Строка.ИдентификаторДокументаОснования;
					ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ВидСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
		Если ЗначениеЗаполнено(ВидСчетаФактуры)Тогда
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ВидСчетаФактуры";
			НоваяСтрока.Значение = ВидСчетаФактуры;
			ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОКомиссионере")) Тогда
			СвКомиссионера = ПолучитьОбъектТипаCML("УчастникТип", "ON_SCHFDOPPR");
			ЗаполнитьСведенияОбУчастникеУПД(СвКомиссионера, ДеревоДанных, ТекстОшибки, "ON_SCHFDOPPR", "СведенияОКомиссионере");
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СвКомиссионера);
			
			СтрXML = ЗаписьXML.Закрыть();
			НачПоз = Найти(СтрXML, "<ИдСв>");
			КолСимв = Найти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
			СтрXML = Сред(СтрXML, НачПоз, КолСимв);
			
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ДанныеКомиссионера";
			НоваяСтрока.Значение = СтрXML;
			ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
		
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснованияДокументаОтгрузки", "ПолныйПуть");
		Если ЗначениеЗаполнено(СтрокаДокументыОснования.Значение) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтрокаДокументыОснования.Значение, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
			
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				Если ЗначениеЗаполнено(Строка.Наименование) Тогда
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "ИДЭДДокументаОснования";
					НоваяСтрока.Значение = Строка.Наименование;
					ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторДокументаОснования) Тогда
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
					НоваяСтрока.Значение = Строка.ИдентификаторДокументаОснования;
					ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИныеСведенияОбОтгрузке = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбОтгрузке");
		Если ЗначениеЗаполнено(ИныеСведенияОбОтгрузке) Тогда
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИныеСведенияОбОтгрузке";
			НоваяСтрока.Значение = ИныеСведенияОбОтгрузке;
			ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
		КонецЕсли;
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ДокументОснование");
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ДокументОснование, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
				Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
					Если ЗначениеЗаполнено(Строка.Наименование) Тогда
						НоваяСтрока = ТекстоваяИнформация.Добавить();
						НоваяСтрока.Идентификатор = "ИДЭДДокументаОснования";
						НоваяСтрока.Значение = Строка.Наименование;
						ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
					КонецЕсли;
						
					Если ЗначениеЗаполнено(Строка.ИдентификаторДокументаОснования) Тогда
						НоваяСтрока = ТекстоваяИнформация.Добавить();
						НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
						НоваяСтрока.Значение = Строка.ИдентификаторДокументаОснования;
						ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Характеристика = ""; Упаковка = "";
			// Формирование идентификатора товара.
			ИД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
			Если НЕ ЗначениеЗаполнено(ИД) Тогда
				ТоварИдентификатор = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварИдентификатор");
				ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
				ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
				ИД = Строка(ТоварИдентификатор) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
			КонецЕсли;
			
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИД";
			НоваяСтрока.Значение = ИД;
			ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
			
		КонецЦикла;
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		РезультатФормирования = СформироватьИнформациюПродавцаXML(ДеревоДанных);
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		СтруктураПараметров = Новый Структура;
		СуммаДокумента = 0;
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СуммаДокумента = СуммаДокумента + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		КонецЦикла;
		СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
			СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
		КонецЕсли;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
			СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
		КонецЕсли;
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует элемент справочника ЭДПрисоединенныеФайлы для ТОРГ-12 покупатель.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент.
//
// Возвращаемое значение:
//  Ссылка - заполненный электронный документ.
//
Функция СформироватьЭДИнформацияПокупателя(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							СсылкаНаЭД,
							"ВладелецФайла, УникальныйИД, НаименованиеФайла");
	
	СтруктураЭД = СформироватьИнформациюПокупателя(СсылкаНаЭД);
	
	Если ТипЗнч(СтруктураЭД) = Тип("Структура") И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", РеквизитыЭД.ВладелецФайла);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
			ПараметрыФайла, АдресВоВременномХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	
		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаЭД);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		СтруктураЭД.Вставить("НаименованиеФайла",              СтруктураЭД.ИдФайла);
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаФайлНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - структура электронного документа.
//
Функция СформироватьИнформациюПокупателя(СсылкаФайлНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаФайлНаЭД, "НаименованиеФайла, ВладелецФайла,
		|ОтправительЭД, ПолучательЭД, ДатаФормированияЭДОтправителем");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента, ТипЭлементаВерсииЭД");
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("НаправлениеЭД",                    Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",                          Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор",          Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель",                       РеквизитыФайлаЭД.ОтправительЭД);
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "ON_SCHFDOPPOK");
	СтруктураЭД.Вставить("КНД",                              "1115126");
	
	Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
		СтруктураЭД.Вставить("ВидЭД",      Перечисления.ВидыЭД.СчетФактура);
		СтруктураЭД.Вставить("Функция",    "СЧФДОП");
		СтруктураЭД.Вставить("НаимДокОпр", "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
		
	ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД Тогда
		СтруктураЭД.Вставить("ВидЭД",      Перечисления.ВидыЭД.СчетФактура);
		СтруктураЭД.Вставить("Функция",    "СЧФ");
		СтруктураЭД.Вставить("НаимДокОпр", "");
	
	ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
		СтруктураЭД.Вставить("ВидЭД",      Перечисления.ВидыЭД.ТОРГ12Покупатель);
		СтруктураЭД.Вставить("Функция",    "ДОП");
		СтруктураЭД.Вставить("НаимДокОпр", "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
	
	КонецЕсли;
	
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УПД_ИнформацияПокупателя");
	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаФайлНаЭД, СтруктураЭД, ДеревоДокумента);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "Функция",    СтруктураЭД.Функция);
		ВставитьЗначениеВДерево(ДеревоДокумента, "НаимДокОпр", СтруктураЭД.НаимДокОпр);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ДатаФайлаИнфПр",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D"));
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ВремФайлаИнфПр",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss"));
								
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИдФайлаИнфПр", РеквизитыФайлаЭД.НаименованиеФайла);
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерИнфПр", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаИнфПр",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаФайлНаЭД.УникальныйИдентификатор());
		ИдФайл = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолученныеЭП", ЭППолученногоФайла(СсылкаФайлНаЭД));
		
		Если СформироватьИнформациюПокупателяXML(ДеревоДокумента) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
		|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаФайлНаЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаФайлНаЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ счет фактура по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на объект ИБ, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - параметры обмена.
//  ПризнакЭД - Булево - признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - реквизиты продавца УКД.
//
Функция СформироватьИнформациюПродавцаУКД(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	РезультатФормирования = Ложь;
	ТекстОшибки = "";
	
	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("КНД",            "1115127");
	СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_KORSCHFDOPPR");
	СтруктураЭД.Вставить("ВидЭД",          НастройкиОбменаЭД.ВидЭД);
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УКД_ИнформацияПродавца");
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	Если НастройкиОбменаЭД.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
	
		СтруктураЭД.Вставить("Функция",        "КСЧФДИС");
		СтруктураЭД.Вставить("ПоФактХЖ",       "Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав)");
		СтруктураЭД.Вставить("НаимДокОпр",     "Корректировочный счет-фактура и документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав");
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
		
		СсылкаКорректировочногоСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СсылкаКорректировочногоСчетаФактуры");
		Если ЗначениеЗаполнено(СсылкаКорректировочногоСчетаФактуры) Тогда
			СтруктураЭД.Вставить("НомерЭД",    ВернутьИдЭД(СсылкаКорректировочногоСчетаФактуры));
			
			ДокументыОснования = Новый Массив;
			ДокументыОснования.Добавить(СсылкаКорректировочногоСчетаФактуры);
			СтруктураЭД.Вставить("ДокументыОснования", ДокументыОснования);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не заполнено обязательное поле: ""СсылкаКорректировочногоСчетаФактуры.""'");
			Возврат Неопределено;
		КонецЕсли;
		
		МассивПервичныхДокументовУКД = Новый Массив;
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
		Если ЗначениеЗаполнено(СтрокаДокументыОснования.Значение) Тогда
			Если ТипЗнч(СтрокаДокументыОснования.Значение) = Тип("Массив") Тогда
				МассивПервичныхДокументовУКД = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СтрокаДокументыОснования.Значение);
			Иначе
				МассивПервичныхДокументовУКД.Добавить(СтрокаДокументыОснования.Значение);
			КонецЕсли;
			ИмяСчетаФактурыВыданного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			Индекс = МассивПервичныхДокументовУКД.Количество() - 1;
			Пока Индекс >=0 Цикл
				Документ = МассивПервичныхДокументовУКД.Получить(Индекс);
				Если ИмяСчетаФактурыВыданного <> Неопределено
					И ТипЗнч(Документ) <> Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного) Тогда
					
					СтруктураЭД.ДокументыОснования.Добавить(Документ);
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли НастройкиОбменаЭД.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура)" Тогда
		СтруктураЭД.Вставить("Функция",        "КСЧФ");
		СтруктураЭД.Вставить("ПоФактХЖ",       "");
		СтруктураЭД.Вставить("НаимДокОпр",     "");
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	ИначеЕсли НастройкиОбменаЭД.ВерсияФормата = "ФНС 5.01 (УКД:Первичный документ)" Тогда
		СтруктураЭД.Вставить("Функция",        "ДИС");
		СтруктураЭД.Вставить("ПоФактХЖ",       "Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав)");
		СтруктураЭД.Вставить("НаимДокОпр",     "Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав)");
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерДокумента"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента"));
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			НомерСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерСчетаФактуры, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "Функция",    СтруктураЭД.Функция);
		ВставитьЗначениеВДерево(ДеревоДанных, "НаимДокОпр", СтруктураЭД.НаимДокОпр);
		ВставитьЗначениеВДерево(ДеревоДанных, "ПоФактХЖ",   СтруктураЭД.ПоФактХЖ);
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
		Если ЗначениеЗаполнено(СтрокаДокументыОснования.Значение) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(
				СтрокаДокументыОснования.Значение, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
			
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				Если ЗначениеЗаполнено(Строка.Наименование) Тогда
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "ИДЭДДокументаОснования";
					НоваяСтрока.Значение = Строка.Наименование;
					ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(
						ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторДокументаОснования) Тогда
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
					НоваяСтрока.Значение = Строка.ИдентификаторДокументаОснования;
					ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(
						ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОКомиссионере")) Тогда
			СвКомиссионера = ПолучитьОбъектТипаCML("СвПродПокТип", "ON_KORSCHFDOPPR");
			ЗаполнитьСведенияОбУчастникеУКД(СвКомиссионера, ДеревоДанных, ТекстОшибки, "ON_KORSCHFDOPPR", "СведенияОКомиссионере");
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СвКомиссионера);
			
			СтрXML = ЗаписьXML.Закрыть();
			НачПоз = Найти(СтрXML, "<ИдСв>");
			КолСимв = Найти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
			СтрXML = Сред(СтрXML, НачПоз, КолСимв);
			
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ДанныеКомиссионера";
			НоваяСтрока.Значение = СтрXML;
			ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				Товар, "СведенияОТоварах.НомерСтроки.ДокументОснование");
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(
					ДокументОснование, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
				Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
					Если ЗначениеЗаполнено(Строка.Наименование) Тогда
						НоваяСтрока = ТекстоваяИнформация.Добавить();
						НоваяСтрока.Идентификатор = "ИДЭДДокументаОснования";
						НоваяСтрока.Значение = Строка.Наименование;
						ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(
							Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
					КонецЕсли;
						
					Если ЗначениеЗаполнено(Строка.ИдентификаторДокументаОснования) Тогда
						НоваяСтрока = ТекстоваяИнформация.Добавить();
						НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
						НоваяСтрока.Значение = Строка.ИдентификаторДокументаОснования;
						ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(
							Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Характеристика = ""; Упаковка = "";
			// Формирование идентификатора товара.
			ИД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
			Если НЕ ЗначениеЗаполнено(ИД) Тогда
				ТоварИдентификатор = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварИдентификатор");
				ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
				ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
				ИД = Строка(ТоварИдентификатор) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
			КонецЕсли;
			
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИД";
			НоваяСтрока.Значение = ИД;
			ЭлектронноеВзаимодействие.ДобавитьЗаписьВТаблицуДерева(
				Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
			
		КонецЦикла;
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла",
			АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		РезультатФормирования = СформироватьИнформациюПродавцаУКДXML(ДеревоДанных);
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		СтруктураПараметров = Новый Структура;
		СуммаДокумента = 0;
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СуммаДокумента = СуммаДокумента + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		КонецЦикла;
		СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
			СтруктураЭД.Вставить("ДополнительнаяИнформация",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
		КонецЕсли;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		СтруктураПараметров.Вставить("УникальныйИдентификатор",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
			СтруктураПараметров.Вставить("ПолноеИмяДопФайла",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			СтруктураПараметров.Вставить("ИдентификаторДопФайла",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
		КонецЕсли;
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует элемент справочника ЭДПрисоединенныеФайлы для ТОРГ-12 покупатель.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент.
//
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - заполненный электронный документ.
//
Функция СформироватьЭДИнформацияПокупателяУКД(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							СсылкаНаЭД,
							"ВладелецФайла, УникальныйИД, НаименованиеФайла");
	
	СтруктураЭД = СформироватьИнформациюПокупателяУКД(СсылкаНаЭД);
	
	Если ТипЗнч(СтруктураЭД) = Тип("Структура") И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", РеквизитыЭД.ВладелецФайла);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
			ПараметрыФайла, АдресВоВременномХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	
		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаЭД);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		СтруктураЭД.Вставить("НаименованиеФайла",              СтруктураЭД.ИдФайла);
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаФайлНаЭД - Ссылка - ЭД, по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - реквизиты покупателя УКД.
//
Функция СформироватьИнформациюПокупателяУКД(СсылкаФайлНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаФайлНаЭД, "НаименованиеФайла, ВладелецФайла,
		|ОтправительЭД, ПолучательЭД, ДатаФормированияЭДОтправителем");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента, ТипЭлементаВерсииЭД");
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("НаправлениеЭД",                    Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",                          Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор",          Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель",                       РеквизитыФайлаЭД.ОтправительЭД);
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "ON_KORSCHFDOPPOK");
	СтруктураЭД.Вставить("КНД",                              "1115128");
	
	Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		СтруктураЭД.Вставить("ВидЭД",      Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		СтруктураЭД.Вставить("Функция",    "КСЧФДИС");
		СтруктураЭД.Вставить("НаимДокОпр", "Корректировочный счет-фактура и документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав");
		
	ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		СтруктураЭД.Вставить("ВидЭД",      Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		СтруктураЭД.Вставить("Функция",    "КСЧФ");
		СтруктураЭД.Вставить("НаимДокОпр", "");
	
	ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		СтруктураЭД.Вставить("ВидЭД",      Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		СтруктураЭД.Вставить("Функция",    "ДИС");
		СтруктураЭД.Вставить("НаимДокОпр", "Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав)");
	
	КонецЕсли;
	
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УКД_ИнформацияПокупателя");
	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаФайлНаЭД, СтруктураЭД, ДеревоДокумента);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "Функция",    СтруктураЭД.Функция);
		ВставитьЗначениеВДерево(ДеревоДокумента, "НаимДокОпр", СтруктураЭД.НаимДокОпр);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ДатаФайлаИнфПр",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D"));
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ВремФайлаИнфПр",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss"));
								
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИдФайлаИнфПр", РеквизитыФайлаЭД.НаименованиеФайла);
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерИнфПр", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаИнфПр",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаФайлНаЭД.УникальныйИдентификатор());
		ИдФайл = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолученныеЭП", ЭППолученногоФайла(СсылкаФайлНаЭД));
		
		Если СформироватьИнформациюПокупателяУКДXML(ДеревоДокумента) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаФайлНаЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаФайлНаЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Расходная накладная по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьНакладнуюПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	СтруктураПараметров = НакладнаяСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога
			+ ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьНакладнуюCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.СуммаСНДС);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
		|%3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Расходная накладная по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьТорг12ПродавецФНС(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_OTORG12");
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Продавец);
	СтруктураЭД.Вставить("КНД", "1175004");
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ТОРГ12_Продавец");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		ПоместитьДокументыОснованияВДопДанныеШапкиФНС(СтрокаДопДанных, СтрокаДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		// Передадим параметр "ВидОперации" документа через механизм доп. параметров.
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации")) Тогда
			ВидОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВидОперации", XMLСтрока(ВидОперации));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод")) Тогда
			ВалютаКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВалютаКод", XMLСтрока(ВалютаКод));
		КонецЕсли;
		
		// Добавляем в ДопДанные информацию о документе сделки
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", Ложь);
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНаименование", Реквизит);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНомер", Реквизит);
			КонецЕсли;
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиДата", Реквизит);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
		// Добавляем в ДопДанные информацию о документе исправления
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.НомерИсправления", НомерИсправления);
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			НомерТоварнойНакладной = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерТоварнойНакладной, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		
		ДатаИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", Ложь);
		Если ЗначениеЗаполнено(ДатаИсправления) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДатаИсправления", ДатаИсправления);
		КонецЕсли;
		
		ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, "ТаблицаТоваров", СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		// В "ДопДанные" помещается табличную часть "Серии номенклатуры".
		ЗаполнитьКлючСерий(ДеревоДанных);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		Если СформироватьТОРГ12ПродавецФНСCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС"));
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
				СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
				СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
			КонецЕсли;
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
		|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарела. Формирование электронного документа Расходная накладная по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция УдалитьСформироватьТорг12ФНСПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Продавец);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_OTORG12");
	СтруктураЭД.Вставить("КНД", "1175004");
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	ОтправительФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(СсылкаНаОбъект.Организация);
	СтруктураПараметров = Торг12СтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		// Передадим параметр "ВидОперации" кор. документа через механизм доп. параметров.
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("ВидОперации",             XMLСтрока(СтруктураПараметров.ВидОперации));
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		
		// Разберем документы основания.
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокументыОснования) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтруктураПараметров.ДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				СтруктураДопДанных = Новый Структура;
				СтруктураДопДанных.Вставить("ВидДокументаОснования",    Строка.ВидЭД);
				СтруктураДопДанных.Вставить("НомерДокументаОснования",  Строка.НомерДокументаОтправителя);
				СтруктураДопДанных.Вставить("ДатаДокументаОтправителя", Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
				СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",   Строка.Наименование);
				ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из СтруктураПараметров.ТаблицаТоваров Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтрокаТаблицы.ДокументОснование, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
				Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
					СтруктураДопДанных = Новый Структура;
					СтруктураДопДанных.Вставить("ВидДокументаОснования",    Строка.ВидЭД);
					СтруктураДопДанных.Вставить("НомерДокументаОснования",  Строка.НомерДокументаОтправителя);
					СтруктураДопДанных.Вставить("ДатаДокументаОтправителя", Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
					СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",   Строка.Наименование);
					ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Товары", Истина,
						СтрокаТаблицы.НомерСтроки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		
		Если УдалитьСформироватьТорг12CML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
		|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует элемент справочника ЭДПрисоединенныеФайлы для ТОРГ-12 покупатель.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент.
//
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрсоединенныеФайлы - заполненный электронный документ.
//
Функция СформироватьЭДТорг12Покупатель(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							СсылкаНаЭД,
							"ВладелецФайла, УникальныйИД, НаименованиеФайла");
	
	Если СтрНачинаетсяС(РеквизитыЭД.НаименованиеФайла, "DP_TOVTORGPR") Тогда
		СтруктураЭД = СформироватьПередачаТоваровПокупатель(СсылкаНаЭД);
	Иначе
		СтруктураЭД = СформироватьФайлТорг12ПокупательФНС(СсылкаНаЭД);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЭД) = Тип("Структура") И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", РеквизитыЭД.ВладелецФайла);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
			ПараметрыФайла, АдресВоВременномХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(СтруктураЭД.УникальныйИдентификатор));
	
		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаЭД);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		СтруктураЭД.Вставить("НаименованиеФайла",              СтруктураЭД.ИдФайла);
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирование электронного документа Расходная накладная (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаФайлНаЭД - Ссылка - объект по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьФайлТорг12ПокупательФНС(СсылкаФайлНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
		
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаФайлНаЭД, "НаименованиеФайла, ВладелецФайла,
		|ОтправительЭД, ПолучательЭД, ДатаФормированияЭДОтправителем");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента");
		
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("НаправлениеЭД",                    Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("УникальныйИдентификатор",          Новый  УникальныйИдентификатор);
	СтруктураЭД.Вставить("НомерЭД",                          Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель",                       РеквизитыФайлаЭД.ОтправительЭД);
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_PTORG12");
	СтруктураЭД.Вставить("ВидЭД",                            Перечисления.ВидыЭД.ТОРГ12Покупатель);
	СтруктураЭД.Вставить("КНД",                              "1175005");
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	ПространствоИменВходящегоТитула = ЗначениеДопРеквизитаЭД(СсылкаФайлНаЭД, "ПространствоИмен");
	СтруктураЭД.Вставить("ПространствоИмен", ПространствоИменОтветногоТитула(ПространствоИменВходящегоТитула));
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ТОРГ12_Покупатель");

	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоТОРГ12ПокупательФНС(СсылкаФайлНаЭД, СтруктураЭД, ДеревоДокумента);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ВремДокТН",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss"));
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ДатаДокТН",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D"));
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерТоварнойНакладной", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаТоварнойНакладной",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаФайлНаЭД.УникальныйИдентификатор());
		ИдФайл = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		СтруктураПараметров.Вставить("ПолученныеЭП", ЭППолученногоФайла(СсылкаФайлНаЭД));
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИдФайлТН", РеквизитыФайлаЭД.НаименованиеФайла);
		
		Если СформироватьТорг12ПокупательФНСCML(ДеревоДокумента) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
		|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаФайлНаЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаФайлНаЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Передача товаров по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьПередачаТоваровПродавец(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_TOVTORGPR");
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Продавец);
	СтруктураЭД.Вставить("КНД", "1175010");
	СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ТОРГ12_Продавец");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		ПоместитьДокументыОснованияВДопДанныеШапкиФНС(СтрокаДопДанных, СтрокаДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, "ТаблицаТоваров", СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		// В "ДопДанные"помещается табличная часть "Серии номенклатуры".
		ЗаполнитьКлючСерий(ДеревоДанных);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЗначениеРеквизитаДерева(ДеревоДанных, "НомерТоварнойНакладной"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя", ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаТоварнойНакладной"));
		
		НомерИсправления = ЗначениеРеквизитаДерева(ДеревоДанных, "НомерИсправления");
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			НомерТоварнойНакладной = ЗначениеРеквизитаДерева(ДеревоДанных, "НомерТоварнойНакладной");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерТоварнойНакладной, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		
		// Добавляем в ДопДанные информацию о документе сделки
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", Ложь);
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНаименование", Реквизит);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНомер", Реквизит);
			КонецЕсли;
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиДата", Реквизит);
			КонецЕсли;
		КонецЕсли;
		
		Если СформироватьПередачаТоваровПродавецCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС"));
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
				СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
				СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
			КонецЕсли;
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
		|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа передача товаров (данные покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - объект по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьПередачаТоваровПокупатель(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
		
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "НаименованиеФайла,
		|ВладелецФайла, ОтправительЭД, ПолучательЭД, ДатаФормированияЭДОтправителем");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		| НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента");
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("НаправлениеЭД",                    Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",                          Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор",          Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель",                       РеквизитыФайлаЭД.ОтправительЭД);
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_TOVTORGPOK");
	СтруктураЭД.Вставить("ВидЭД",                            Перечисления.ВидыЭД.ТОРГ12Покупатель);
	СтруктураЭД.Вставить("КНД",                              "1175011");
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ТОРГ12_Покупатель");

	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоТОРГ12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДокумента);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ВремДокТН",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss"));
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ДатаДокТН",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D"));
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерТоварнойНакладной", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаТоварнойНакладной",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.Организация, "Наименование");
		ВставитьЗначениеВДерево(ДеревоДокумента, "НаименованиеОрганизации", НаименованиеОрганизации);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
		ИдФайл = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		СтруктураПараметров.Вставить("ПолученныеЭП", ЭППолученногоФайла(СсылкаНаЭД));
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИмяФайлаПродавца", РеквизитыФайлаЭД.НаименованиеФайла);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ПолученныеЭП",
								ЭППолученногоФайла(СсылкаНаЭД));
								
		Если СформироватьПередачаТоваровПокупательCML(ДеревоДокумента) Тогда
			
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			
			ВозвращаемоеЗначение = СтруктураЭД;
			
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

	
КонецФункции

// Устарела. Формирование электронного документа расходной накладной (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаФайлЭД - Ссылка - объект по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция УдалитьСформироватьФайлТорг12Покупатель(СсылкаНаФайлЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;

	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НаименованиеФайла, ВладелецФайла,
		|ДатаФормированияЭДОтправителем, ОтправительЭД, ПолучательЭД");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента");
		
	НастройкиОбменаЭД = РеквизитыЭД.НастройкаЭДО;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Покупатель);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД", РеквизитыЭД.НомерЭД);
	СтруктураЭД.Вставить("УникальныйИдентификатор",       Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель", РеквизитыФайлаЭД.ОтправительЭД);
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_PTORG12");
	СтруктураЭД.Вставить("КНД",                              "1175005");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	ОтправительФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(РеквизитыЭД.Организация);
	СтруктураПараметров = Торг12ПокупательСтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоТорг12Покупатель(
												СсылкаНаФайлЭД,
												СтруктураЭД,
												СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(РеквизитыФайлаЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		СтруктураПараметров.Вставить("ВремДокТН", Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss"));
		СтруктураПараметров.Вставить("ДатаДокТН", Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D"));
		СтруктураПараметров.Вставить("НомерТоварнойНакладной", РеквизитыЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаТоварнойНакладной", РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаФайлЭД.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		
		СтруктураПараметров.Вставить("ПолученныеЭП", ЭППолученногоФайла(СсылкаНаФайлЭД));
		
		ИдФайлТН = РеквизитыФайлаЭД.НаименованиеФайла;
		СтруктураПараметров.Вставить("ИдФайлТН", ИдФайлТН);
		Если Сред(СтруктураПараметров.ИННЮЛ, 6, 2) = (Символ(49) + Символ(54)) Тогда
			СтруктураПараметров.ИННЮЛ = Лев(СтруктураПараметров.ИННЮЛ, 5) + Символ(54) + Символ(49) + Сред(СтруктураПараметров.ИННЮЛ, 8);
		КонецЕсли;

		Если УдалитьСформироватьТорг12ПокупательCML(СтруктураПараметров) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаФайлЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаФайлЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьКорДокументПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "OKORDOC");
	СтруктураЭД.Вставить("КНД", "");
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("СоглашениеОбИзмененииСтоимостиОтправитель");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКорректировочномуДокументу(
													СсылкаНаОбъект,
													СтруктураЭД,
													ДеревоДанных);
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			НомерТоварнойНакладной = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерТоварнойНакладной, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		// Передадим параметр "ВидОперации" кор. документа через механизм доп. параметров.
		ВидОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанные.Подписанные.ВидОперации");
		ВставитьЗначениеВДерево(ДеревоДанных,
								"ДопДанные.Подписанные.ВидОперации",
								XMLСтрока(ВидОперации));
		
		// Добавляем в доп. данные сведения о номерах и датах исправления.
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		ПоместитьДокументыОснованияВДопДанныеШапкиФНС(СтрокаДопДанных, СтрокаДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.НомерИсправления", НомерИсправления);
		КонецЕсли;
		
		ДатаИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", Ложь);
		Если ЗначениеЗаполнено(ДатаИсправления) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДатаИсправления", ДатаИсправления);
		КонецЕсли;
			
		НомерИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", Ложь);
		Если ЗначениеЗаполнено(НомерИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.НомерИсходногоДокумента", НомерИсходногоДокумента);
		КонецЕсли;
		
		ДатаИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Ложь);
		Если ЗначениеЗаполнено(ДатаИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДатаИсходногоДокумента", ДатаИсходногоДокумента);
		КонецЕсли;
		
		НомерИсправленияИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента", Ложь);
		Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
		КонецЕсли;
		
		ДатаИсправленияИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента", Ложь);
		Если ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДатаИсправленияИсходногоДокумента", ДатаИсправленияИсходногоДокумента);
		КонецЕсли;

		ПредставлениеИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПредставлениеИсходногоДокумента", Ложь);
		Если ЗначениеЗаполнено(ПредставлениеИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ПредставлениеИсходногоДокумента", ПредставлениеИсходногоДокумента);
		КонецЕсли;
		
		ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, "ТаблицаТоваров", СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных,
								"ПолноеИмяФайла",
								АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		Если СформироватьКорректировочныйДокументCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураЭД.Вставить(
					"СуммаДокумента",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС"));
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить(
									"ПолноеИмяФайла",
									ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			СтруктураПараметров.Вставить(
									"УникальныйИдентификатор",
									ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
				СтруктураПараметров.Вставить(
										"ПолноеИмяДопФайла",
										ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			
				СтруктураПараметров.Вставить(
										"ИдентификаторДопФайла",
										ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
			КонецЕсли;
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует элемент справочника ЭДПрисоединенныеФайлы для соглашения об изменении стоимости получателя.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка - ссылка на новый элемент.
//
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - заполненный электронный документ.
//
Функция СформироватьЭДКорДокументаПолучатель(СсылкаНаФайлЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаФайлЭД,
						"ВладелецФайла, УникальныйИД");
	СтруктураЭД = СформироватьФайлКорДокументаПолучателя(СсылкаНаФайлЭД);
	Если ТипЗнч(СтруктураЭД) = Тип("Структура")
			И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", РеквизитыЭД.ВладелецФайла);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(СтруктураЭД.УникальныйИдентификатор);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
			ПараметрыФайла, АдресВоВременномХранилище, , , НоваяСсылкаЭД);
			
		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаФайлЭД);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель); 
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ТекущаяДатаСеанса());
		СтруктураЭД.Вставить("НаименованиеФайла",              СтруктураЭД.ИдФайла);
		СтруктураЭД.Вставить("НомерЭД",              		   СтруктураЭД.УникальныйИдентификатор);
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирование электронного документа Корректировочная расходная накладная (титул отправителя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаФайлЭД - Ссылка - объект по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьФайлКорДокументаПолучателя(СсылкаНаФайлЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
		
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НаименованиеФайла, ВладелецФайла,
		|ДатаФормированияЭДОтправителем, ОтправительЭД, ПолучательЭД");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента");

			
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД",                   Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	СтруктураЭД.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",                 Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель", РеквизитыФайлаЭД.ОтправительЭД);
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "PKORDOC");
	СтруктураЭД.Вставить("КНД",                              "");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("СоглашениеОбИзмененииСтоимостиПолучатель");

	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(
																				СсылкаНаФайлЭД,
																				СтруктураЭД,
																				ДеревоДокумента);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ВремДокТН",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss"));
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ДатаДокТН",
								Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D"));
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерТоварнойНакладной", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаТоварнойНакладной",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаФайлЭД.УникальныйИдентификатор());
		ИдФайл = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		СтруктураПараметров.Вставить("ПолученныеЭП", ЭППолученногоФайла(СсылкаНаФайлЭД));
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИдФайлТН", РеквизитыФайлаЭД.НаименованиеФайла);
		
		Если СформироватьКорректировочныйДокументПокупательCML(ДеревоДокумента) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаФайлЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаФайлЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Счет на оплату покупателю по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("СчетНаОплату");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
			
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "ХозОперация", НСтр("ru = 'Счет на оплату'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Ид", СтруктураЭД.НомерЭД);
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "НалогообложениеНДС");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "НазначениеПлатежа");
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогоПоДокументу.Сумма");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогоПоДокументу.СуммаСкидки");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогоПоДокументу.СуммаБезСкидки");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогиПрописью");
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "УникальныйИдентификаторПлатежа");
		
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ДокументыСделки");
		ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ГрафикОплаты");
		
		Если СформироватьСчетНаОплатуCML(ДеревоДанных) И ПризнакЭД Тогда
			
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
			
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарела. Формирование электронного документа Счет на оплату покупателю по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция УдалитьСформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	СтруктураПараметров = СчетНаОплатуСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);

	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьСчетНаОплатуCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа заказа поставщику по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьЗаказПоставщикуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗаказТовара);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ЗаказТовара");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);

	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
		
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "Номер",          СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Дата",           СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "ХозОперация",    НСтр("ru = 'Заказ товара'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Роль",           "Покупатель");
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "НомерДокументаОснования");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ДатаДокументаОснования");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогиПрописью");
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ДокументыСделки");
		ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		ПоместитьГруппуДереваВДопДанные(ДеревоДанных, "ИтогоПоДокументу");
		
		Если СформироватьЗаказCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарела. Формирование электронного документа Заказ поставщику по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция УдалитьСформироватьЗаказПоставщикуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗаказТовара);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	СтруктураПараметров = ЗаказПоставщикуСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Заказа клиента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьЗаказКлиентаПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтветНаЗаказ);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
						ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ОтветНаЗаказ");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтветуНаЗаказ(
												СсылкаНаОбъект,
												СтруктураЭД,
												ДеревоДанных);
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "ХозОперация", НСтр("ru = 'Заказ товара'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Роль", "Продавец");
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "НомерДокументаОснования");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ДатаДокументаОснования");
		
		ПоместитьГруппуДереваВДопДанные(ДеревоДанных, "ИтогоПоДокументу");
		
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ДокументыСделки");
		ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		Если СформироватьЗаказCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
			
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
			
		КонецЕсли;
		
	КонецЕсли;

	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарела. Формирование электронного документа заказа клиента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция УдалитьСформироватьЗаказКлиентаПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтветНаЗаказ);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
						ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	СтруктураПараметров = ЗаказКлиентаСтруктураПараметров();
	
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоОтветуНаЗаказ(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
			
		Если УдалитьСформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Каталог товаров по ссылке на документ ИБ.
//
// Параметры:
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//    * ТоварыКаталога - таблица значений - таблица содержащая перечень номенклатуры.
//  ПризнакЭД      - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьКаталогНоменклатуры(НастройкиОбменаЭД, ДополнительныеПараметры, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВерсияСхемы",          ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("ВидЭД",                Перечисления.ВидыЭД.КаталогТоваров);
	СтруктураЭД.Вставить("НаправлениеЭД",        Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",              ВернутьИдЭД(НастройкиОбменаЭД.Организация));
	СтруктураЭД.Вставить("ДатаЭД",               ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",  Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
	СтруктураЭД.Вставить("Отправитель",   НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Организация",   НастройкиОбменаЭД.Организация);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Если НастройкиОбменаЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		
		ШаблонСообщения = НСтр("ru = 'Каталог %1 от %2'");
		НаименованиеКаталога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			НастройкиОбменаЭД.Организация, Формат(СтруктураЭД.ДатаЭД, "ДЛФ=Д"));
	Иначе
		СтруктураЭД.Вставить("Контрагент",    НастройкиОбменаЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель",    НастройкиОбменаЭД.ИдентификаторКонтрагента);
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(НастройкиОбменаЭД.СоглашениеЭД);
		СтруктураЭД.Вставить("ДокументыОснования",      ДокументыОснования);
		СтруктураЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.ПрофильНастроекЭДО);
		СтруктураЭД.Вставить("СоглашениеЭД",  НастройкиОбменаЭД.СоглашениеЭД);
		СтруктураЭД.Вставить("НомерВерсииЭД", ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(
			НастройкиОбменаЭД.СоглашениеЭД));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
		
		ШаблонСообщения = НСтр("ru = 'Каталог %1 для %2 от %3'");
		НаименованиеКаталога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			НастройкиОбменаЭД.Организация, НастройкиОбменаЭД.Контрагент, Формат(СтруктураЭД.ДатаЭД, "ДЛФ=Д"));
	КонецЕсли;
	
	// Получение таблицы товаров из временного хранилища.
	ТоварыКаталога = "";
	ДополнительныеПараметры.Свойство("ТоварыКаталога", ТоварыКаталога);
	ТоварыКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("КаталогТоваров");

	// Формирование и заполнение дерева по макету.
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКаталогуТоваровCML(
																НастройкиОбменаЭД.Организация,
																ТоварыКаталога,
																ДеревоДанных);
		
	// Проверяем заполнение полей, отмеченных в макете как обязательные.
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
		НаименованиеКаталога = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКаталога);
		ВставитьЗначениеВДерево(ДеревоДанных, "Наименование", НаименованиеКаталога);
		
		НаименованиеКаталога = ОбменСКонтрагентамиСлужебный.КорректноеИмяФайла(НаименованиеКаталога, Истина);
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, НастройкиОбменаЭД.Организация.УникальныйИдентификатор()),
			СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НаименованиеКаталога));
		
		ШаблонИмениФайла = НСтр("ru = '%1.xml'");
		ПолноеИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		
		МассивФайлов = Новый Массив;
		Если СформироватьКаталогCML(ДеревоДанных, МассивФайлов) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   НаименованиеКаталога);
			СтруктураПараметров.Вставить("МассивФайлов",   МассивФайлов);
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
		
	Иначе
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ТекстСообщения);

	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует xml файл вида "Прайс лист" согласно механизму однократной сделки.
// От стандартного алгоритма отличается тем, что вызов команды может быть сделан без привязки к документу ИБ.
//
// Параметры:
//  СтруктураЭД - Структура - содержит следующие поля:
//   * ВидЭД - Перечисление видыЭД.
//   * АдресТаблицыЦен - Адрес во временном хранилище, по которому находится таблица значений, источник данных.
//   * ДатаФормирования - дата формирования ЭД.
//   * ВладелецЭД - организация которой принадлежит ЭД.
//   * Организация - организация от имени которой формируется ЭД.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция ФайлБыстрогоОбмена(СтруктураЭД) Экспорт
	
	Если СтруктураЭД.ВидЭД =  Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ПрайсЛист");

		ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоПрайсЛисту(Неопределено, СтруктураЭД, ДеревоДанных);
		
		ТекстОшибки = "";
		ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			СвойстваОбъекта = Новый Структура;
			СвойстваОбъекта.Вставить("Номер", "");
			СвойстваОбъекта.Вставить("Дата", СтруктураЭД.ДатаФормирования);
			
			АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, Новый УникальныйИдентификатор);
			ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СвойстваОбъекта, СтруктураЭД.ДатаФормирования);
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ДатаФормирования", СтруктураЭД.ДатаФормирования);
			ВставитьЗначениеВДерево(ДеревоДанных, "ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
			ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД", СтруктураЭД.ВидЭД);
			ВставитьЗначениеВДерево(ДеревоДанных, "НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВставитьЗначениеВДерево(ДеревоДанных, "УникальныйИдентификатор", Новый УникальныйИдентификатор);
			ВставитьЗначениеВДерево(ДеревоДанных, "Ид", Строка(Новый УникальныйИдентификатор));
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ИдКаталога", Новый УникальныйИдентификатор);
			ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
			
			Если СформироватьПрайсЛистCML(ДеревоДанных) Тогда
				
				СтруктураПараметров = Новый Структура;
				
				СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураЭД.Вставить("НомерЭД", Строка(Новый УникальныйИдентификатор));
				СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
				СтруктураЭД.Вставить("Отправитель", Строка(Новый УникальныйИдентификатор));
				
				
				НаименованиеФайла = НСтр("ru = 'Прайс лист от %1'");
				НаименованиеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеФайла, Формат(СтруктураЭД.ДатаЭД, "ДЛФ=Д"));
				
				СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
				СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
				СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
				СтруктураПараметров.Вставить("Наименование",   НаименованиеФайла);
				СтруктураПараметров.Вставить("ВладелецЭД",   "Price list");
				
				ВозвращаемоеЗначение = СтруктураПараметров;
				
				Возврат ВозвращаемоеЗначение;
				
			КонецЕсли;
			
		Иначе
			
			ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
				|%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураЭД.ВидЭД, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВидОперации = НСтр("ru = 'Формирование ЭД'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

// Формирование электронного документа в формате CML2 прайс-листа по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект  по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьПрайсПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПрайсЛист);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));

	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ПрайсЛист");
	
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);

	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		// Служебные поля добавим пока в отдельную ветку, их возможно можно вынести в корень.
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ИдКаталога", Новый УникальныйИдентификатор);
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		
		Если СформироватьПрайсЛистCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

	
КонецФункции

// Устарела. Формирование электронного документа прайс-листа по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект  по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция УдалитьСформироватьПрайсПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПрайсЛист);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	
	СтруктураПараметров = ПрайсЛистСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьПрайсЛистCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа выполнения работ по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект  по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьАктВыполненныхРаботПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ТекстОшибки = "";
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктВыполненныхРабот);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	СтруктураПараметров = АктВыполненныхРаботСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоАктуВыполненныхРабот(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьАктCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.СуммаДокумента);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Акт выполненных работ формата 5.01 по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект  по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьАкт501ИсполнительФНС(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_IAKTPRM");
	СтруктураЭД.Вставить("КНД", "1175006");
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("Акт501_Исполнитель");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	// Проверка корректности заполнения табличной части товаров.
	// Заполнены должны быть или Номенклатура или Описание.
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ДеревоДанных, ТекстОшибки, Ложь);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		ПоместитьДокументыОснованияВДопДанныеШапкиФНС(СтрокаДопДанных, СтрокаДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		// Передадим параметр "ВидОперации" документа через механизм доп. параметров.
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации")) Тогда
			ВидОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВидОперации", XMLСтрока(ВидОперации));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод")) Тогда
			ВалютаКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВалютаКод", XMLСтрока(ВалютаКод));
		КонецЕсли;
		
		// Добавляем в ДопДанные информацию о документе сделки
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", Ложь);
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНаименование", Реквизит);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНомер", Реквизит);
			КонецЕсли;
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиДата", Реквизит);
			КонецЕсли;
		КонецЕсли;
		
		НомерДокументаОтправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта");
		Если НЕ ЗначениеЗаполнено(НомерДокументаОтправителя) Тогда
			НомерДокументаОтправителя = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
		КонецЕсли;
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		// Добавим в доп. данные номер и дату исправления.
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.НомерИсправления", НомерИсправления);
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
		
		ДатаИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", Ложь);
		Если ЗначениеЗаполнено(ДатаИсправления) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДатаИсправления", ДатаИсправления);
		КонецЕсли;
		
		// Заполняем таблицу товаров.
		ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, "ТаблицаУслуг", СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		ВставитьЗначениеВДерево(ДеревоДанных, "ВерсияРегламентаЭДО", НастройкиОбменаЭД.ВерсияРегламентаЭДО);
		
		Если СформироватьАкт501ИсполнительФНСCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого"));
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
				СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			
				СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
			КонецЕсли;
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Передача работ исполнитель по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция СформироватьПередачаРаботИсполнитель(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_REZRUISP");
	СтруктураЭД.Вставить("КНД", "1175012");
	СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("Акт501_Исполнитель");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	// Проверка корректности заполнения табличной части товаров.
	// Заполнены должны быть или Номенклатура или Описание.
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ДеревоДанных, ТекстОшибки, Истина);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		ПоместитьДокументыОснованияВДопДанныеШапкиФНС(СтрокаДопДанных, СтрокаДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
			
		// Добавляем в ДопДанные информацию о документе сделки
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", Ложь);
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНаименование", Реквизит);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНомер", Реквизит);
			КонецЕсли;
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиДата", Реквизит);
			КонецЕсли;
		КонецЕсли;
		
		НомерДокументаОтправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта");
		Если НЕ ЗначениеЗаполнено(НомерДокументаОтправителя) Тогда
			НомерДокументаОтправителя = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
		КонецЕсли;
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		// Добавим в доп. данные номер и дату исправления.
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.НомерИсправления", НомерИсправления);
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
		
		ДатаИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", Ложь);
		Если ЗначениеЗаполнено(ДатаИсправления) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДатаИсправления", ДатаИсправления);
		КонецЕсли;
		
		// Заполняем таблицу товаров.
		ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, "ТаблицаУслуг", СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		ВставитьЗначениеВДерево(ДеревоДанных, "ВерсияРегламентаЭДО", НастройкиОбменаЭД.ВерсияРегламентаЭДО);
		
		Если СформироватьПередачаРаботИсполнительCML(ДеревоДанных) И ПризнакЭД Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого"));
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
				СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			
				СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
			КонецЕсли;
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

// Формирование электронного документа Акт выполненных работ формата 5.01 по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на объект ИБ, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - структура содержащая настройки обмена.
//  ПризнакЭД - Булево - признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - сформированный документ.
//
Функция УдалитьСформироватьАкт501ФНСПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_IAKTPRM");
	СтруктураЭД.Вставить("КНД", "1175006");
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(
		СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	ОтправительФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(СсылкаНаОбъект.Организация);
	СтруктураПараметров = Акт501СтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		// Передадим параметр "ВидОперации" кор. документа через механизм доп. параметров.
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("ВидОперации",             XMLСтрока(СтруктураПараметров.ВидОперации));
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		
		// Разберем документы основания.
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокументыОснования) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтруктураПараметров.ДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				СтруктураДопДанных = Новый Структура;
				СтруктураДопДанных.Вставить("ВидДокументаОснования",   Строка.ВидЭД);
				СтруктураДопДанных.Вставить("НомерДокументаОснования", Строка.НомерДокументаОтправителя);
				СтруктураДопДанных.Вставить("ДатаДокументаОснования",  Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
				СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",  Строка.Наименование);
				ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаОписанийУслуг Из СтруктураПараметров.ТаблицаОписанийУслуг Цикл
			Для Каждого СтрокаТаблицы Из СтрокаОписанийУслуг.Услуги Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
					ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтрокаТаблицы.ДокументОснование, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
					Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
						СтруктураДопДанных = Новый Структура;
						СтруктураДопДанных.Вставить("ВидДокументаОснования",    Строка.ВидЭД);
						СтруктураДопДанных.Вставить("НомерДокументаОснования",  Строка.НомерДокументаОтправителя);
						СтруктураДопДанных.Вставить("ДатаДокументаОтправителя", Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
						СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",   Строка.Наименование);
						ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Услуги", Истина,
							Строка(СтрокаОписанийУслуг.НомерСтроки) + "." + СтрокаТаблицы.НомерСтроки);
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",          АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		СтруктураПараметров.Вставить("ВерсияРегламентаЭДО",     НастройкиОбменаЭД.ВерсияРегламентаЭДО);
		Если УдалитьСформироватьАкт501CML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.ТаблицаУслуг.Итог("СуммаСНДС"));
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует элемент справочника ЭДПрисоединенныеФайлы для акта заказчика.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент.
//
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - заполненный электронный документ.
//
Функция СформироватьЭДАкт501Заказчик(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаЭД,
						"ВладелецФайла, УникальныйИД,  НаименованиеФайла"); 
						
	Если СтрНачинаетсяС(РеквизитыЭД.НаименованиеФайла, "DP_REZRUISP") Тогда
		СтруктураЭД = СформироватьПередачаРаботЗаказчик(СсылкаНаЭД);
	Иначе
		СтруктураЭД = СформироватьФайлАкт501ЗаказчикФНС(СсылкаНаЭД);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЭД) = Тип("Структура")
		И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", РеквизитыЭД.ВладелецФайла);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(СтруктураЭД.УникальныйИдентификатор);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
			ПараметрыФайла, АдресВоВременномХранилище, , , НоваяСсылкаЭД);

		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаЭД);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик); 
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		СтруктураЭД.Вставить("НаименованиеФайла",              СтруктураЭД.ИдФайла);
		СтруктураЭД.Вставить("НомерЭД",              		   СтруктураЭД.УникальныйИдентификатор);
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирование электронного документа Расходная накладная (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - объект, по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция СформироватьФайлАкт501ЗаказчикФНС(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "НаименованиеФайла, ВладелецФайла,
		|ДатаФормированияЭДОтправителем, ОтправительЭД, ПолучательЭД");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента, ВерсияРегламентаЭДО");
		
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД",                   Перечисления.ВидыЭД.АктЗаказчик);
	СтруктураЭД.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",                 Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель", 				РеквизитыФайлаЭД.ОтправительЭД);
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_ZAKTPRM");
	СтруктураЭД.Вставить("КНД",                              "1175007");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	ПространствоИменВходящегоТитула = ЗначениеДопРеквизитаЭД(СсылкаНаЭД, "ПространствоИмен");
	СтруктураЭД.Вставить("ПространствоИмен", ПространствоИменОтветногоТитула(ПространствоИменВходящегоТитула));
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("Акт501_Заказчик");

	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДокумента);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		Реквизит = Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ВремДокАктИ", Реквизит);
		Реквизит = Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаДокАктИ", Реквизит);
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерАкт", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаАкт",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
		ИдФайл = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		СтруктураПараметров.Вставить("ПолученныеЭП", ЭППолученногоФайла(СсылкаНаЭД));
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИдФайлАктИ", РеквизитыФайлаЭД.НаименованиеФайла);
		
		Если СформироватьАкт501ЗаказчикФНСCML(ДеревоДокумента, РеквизитыЭД.ВерсияРегламентаЭДО) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарела. Формирование электронного документа Расходная накладная (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаФайлЭД - ДокументСсылка.ИсходящийЭлектронныйДокумент - ЭД, по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция УдалитьСформироватьФайлАкт501Заказчик(СсылкаНаФайлЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
		
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НаименованиеФайла, ВладелецФайла,
		|ДатаФормированияЭДОтправителем, ОтправительЭД, ПолучательЭД");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента, ВерсияРегламентаЭДО");
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктЗаказчик);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор",  Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель", РеквизитыЭД.ОтправительЭД);
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыЭД.Наименование);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_ZAKTPRM");
	СтруктураЭД.Вставить("КНД",                              "1175007");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	ОтправительФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(РеквизитыЭД.Организация);
	СтруктураПараметров = Акт501ЗаказчикСтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаФайлЭД, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(РеквизитыЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		СтруктураПараметров.Вставить("ВремДокАкт", Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss"));
		СтруктураПараметров.Вставить("ДатаДокАкт", Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D"));
		СтруктураПараметров.Вставить("НомерАкта", РеквизитыЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаАкта", РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаФайлЭД.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		
		СтруктураПараметров.Вставить("ПолученныеЭП", ЭППолученногоФайла(СсылкаНаФайлЭД));
		
		ИдФайлАкт = РеквизитыЭД.Наименование;
		СтруктураПараметров.Вставить("ИдФайлАкт", ИдФайлАкт);
		
		Если УдалитьСформироватьАкт501ЗаказчикCML(СтруктураПараметров, РеквизитыЭД.ВерсияРегламентаЭДО) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаФайлЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаФайлЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Счет-фактура по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - параметры обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция СформироватьСчетФактуруФНС(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ЭтоКорректировочныйСФ = ОбменСКонтрагентамиПереопределяемый.ЭтоКорректировочныйДокумент(СсылкаНаОбъект);
	
	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
	Если ЭтоКорректировочныйСФ Тогда
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Иначе
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.СчетФактура);
	КонецЕсли;
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	ОтправительФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(НастройкиОбменаЭД.Организация);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	ТекстОшибки = "";
	РезультатФормирования = Ложь;
	
	Если ЭтоКорректировочныйСФ Тогда
		Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("КорректировочныйСчетФактура");

		ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
		СтруктураЭД.Вставить("КНД", "1115108");
		СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_KORSFAKT");
	Иначе
		Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("СчетФактура");
		ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
		СтруктураЭД.Вставить("КНД", "1115101");
		СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_SFAKT");
	КонецЕсли;
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры"));
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			НомерСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерСчетаФактуры, НомерИсправления);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		
		ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		СтрокаДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		ПоместитьДокументыОснованияВДопДанныеШапкиФНС(СтрокаДопДанных, СтрокаДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		// Передадим параметр "ВидОперации" документа через механизм доп. параметров.
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ВидОперации") Тогда
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации")) Тогда
				ВидОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации");
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВидОперации", XMLСтрока(ВидОперации));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод")) Тогда
			ВалютаКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВалютаКод", XMLСтрока(ВалютаКод));
		КонецЕсли;
		
		// Добавляем в ДопДанные информацию о документе сделки
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", Ложь);
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНаименование", Реквизит);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиНомер", Реквизит);
			КонецЕсли;
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", Ложь);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДокументСделкиДата", Реквизит);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, "ТаблицаТоваров", СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		Если ЭтоКорректировочныйСФ Тогда
			РезультатФормирования = СформироватьКорректировочныйСчетФактуруФНСCML(ДеревоДанных);
		Иначе
			СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
			ВидСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
			Если ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВидСчетаФактуры", XMLСтрока(ВидСчетаФактуры));
			КонецЕсли;
			РезультатФормирования = СформироватьСчетФактуруФНСCML(ДеревоДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего"));
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
			СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
		КонецЕсли;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
			СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
		КонецЕсли;
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарела. Формирование электронного документа Счет-фактура по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - параметры обмена электронными документами.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция УдалитьСформироватьСчетФактуру(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ЭтоКорректировочныйСФ = ОбменСКонтрагентамиПереопределяемый.ЭтоКорректировочныйДокумент(СсылкаНаОбъект);
	
	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	Если ЭтоКорректировочныйСФ Тогда
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Иначе
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.СчетФактура);
	КонецЕсли;
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",  СсылкаНаОбъект.Дата);
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	ОтправительФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(НастройкиОбменаЭД.Организация);
	СтруктураПараметров = ЭСФСтруктураПараметров(ЭтоКорректировочныйСФ, ОтправительФизЛицо);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	ТекстОшибки = "";
	РезультатФормирования = Ложь;
	
	Если ЭтоКорректировочныйСФ Тогда
		ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Иначе
		ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	КонецЕсли;

	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтруктураПараметров.ДокументыОснования, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		ДокументыОснования = Новый Массив;
		Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
			ДокументОснование  = Новый Структура;
			ДокументОснование.Вставить("ВидДокументаОснования",   Строка.ВидЭД);
			ДокументОснование.Вставить("НомерДокументаОснования", Строка.НомерДокументаОтправителя);
			ДокументОснование.Вставить("ДатаДокументаОснования",  Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
			ДокументОснование.Вставить("ИДЭДДокументаОснования",  Строка.Наименование);
			
			ДокументыОснования.Добавить(ДокументОснование);
		КонецЦикла;
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("ДокументыОснования", ДокументыОснования);
		
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		Если ЭтоКорректировочныйСФ Тогда
			СтруктураЭД.Вставить("КНД", "1115108");
			СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_KORSFAKT");
			ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
			РезультатФормирования = УдалитьСформироватьКорректировочныйСчетФактуруCML(СтруктураПараметров);
		Иначе
			СтруктураЭД.Вставить("КНД", "1115101");
			СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_SFAKT");
			ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
			РезультатФормирования = УдалитьСформироватьСчетФактуруCML(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		Если ЭтоКорректировочныйСФ Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.ТаблицаТоваров.Итог("Сумма"));
		Иначе
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.СуммаСНДСВсего);
		КонецЕсли;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Отчета комитента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ОтчетКомиссионераОПродажах");

	// Сформируем структуру параметров для ОтчетаОПродажахКомиссионногоТовара и заполним ее.
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	// заполняем дерево значений данными документа
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(
																				СсылкаНаОбъект,
																				СтруктураЭД,
																				ДеревоДанных);
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "ХозОперация", НСтр("ru = 'Отчет о продажах комиссионного товара'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Роль", "Комитент");
		
		ПоместитьГруппуДереваВДопДанные(ДеревоДанных, "ИтогоПоДокументу");
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ГрафикОплаты");
		ПоместитьГруппуДереваВДопДанные(ДеревоДанных, "Услуга");
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ДокументыСделки");
		
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ДокументыСделки");
		ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		Если СформироватьОтчетОПродажахКомиссионногоТовараCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
			
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарела. Формирование электронного документа Отчет комитента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция УдалитьСформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СтруктураЭД.Вставить("ВерсияСхемы", "4.02");
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	// Сформируем структуру параметров для ОтчетаОПродажахКомиссионногоТовара и заполним ее.
	СтруктураПараметров = СтруктураПараметровПоОтчетуОПродажахКомиссионногоТовара();
	
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(
																СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	
	СтруктураСлужебныхПолей(СтруктураПараметров);
	ЗаполнитьСтруктуруСлужебныхПолей(СтруктураЭД, СтруктураПараметров);
	
	ТекстОшибки = "";
	ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки);
	Если ТекстОшибки = "" Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Отчета комитента о списании по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ОтчетКомиссионераОСписании");

	// Сформируем структуру параметров для ОтчетаОПродажахКомиссионногоТовара и заполним ее.
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(
												СсылкаНаОбъект,
												СтруктураЭД,
												ДеревоДанных);
		
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "ХозОперация", НСтр("ru = 'Отчет о списании комиссионного товара'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Роль", "Комитент");
		
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ДокументыСделки");
		ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		Если СформироватьОтчетОСписанииКомиссионногоТовараCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
			
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

	
КонецФункции

// Устарела. Формирование электронного документа отчета комитента о списании по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры данных.
//
Функция УдалитьСформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	// Сформируем структуру параметров для ОтчетаОПродажахКомиссионногоТовара и заполним ее.
	СтруктураПараметров = ОтчетОСписанииКомиссионногоТовараСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Передача товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция СформироватьПередачуТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ДокументОснование", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ПередачаТоваровМеждуОрганизациямиСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа Возврат товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект, по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция СформироватьВозвратТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ДокументОснование", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ВозвратТоваровМеждуОрганизациямиСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
	
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует элемент справочника ЭДПрисоединенныеФайлы для извещения или уведомления.
// об уточнении.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ТекстУточнения - Строка - содержимое уточнения.
//
// Возвращаемое значение:
//  Структура - структура с данными документа.
//
Функция СформироватьФайлСлужебногоДокументаПоЭД(СсылкаНаЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВладелецФайла, ДатаСоздания, ТипЭлементаВерсииЭД,
		|Наименование, ОтправительЭД, ПолучательЭД");
		
	НастройкиОбменаЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(РеквизитыЭД.ВладелецФайла, , , СсылкаНаЭД);
	Если ТипЗнч(НастройкиОбменаЭД) = Тип("Структура") Тогда
		СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
		СтруктураЭД.Вставить("ВидЭД",         ВидЭД);
		СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		СтруктураЭД.Вставить("НомерЭД",       Новый УникальныйИдентификатор());
		
		СтруктураЭД.Вставить("ИдПолучателя", НастройкиОбменаЭД.ИдентификаторКонтрагента);
		
		Если НастройкиОбменаЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
			
			Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
				
				СтруктураЭД.Вставить("ОператорЭДО", СтруктураНастроекТакском());
			КонецЕсли;
		КонецЕсли;
		Если НастройкиОбменаЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
				
				РеквизитыПрофиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ВладелецФайла,"ПрофильНастроекЭДО.ОператорЭДОИНН,
					|ПрофильНастроекЭДО.ОператорЭДО, ПрофильНастроекЭДО.ОператорЭДОИд");
				
				ОператорЭДО = Новый Структура;
				ОператорЭДО.Вставить("ИНН", РеквизитыПрофиля.ПрофильНастроекЭДООператорЭДОИНН);
				ОператорЭДО.Вставить("Наименование", РеквизитыПрофиля.ПрофильНастроекЭДООператорЭДО);
				ОператорЭДО.Вставить("ИдентификаторОператора", РеквизитыПрофиля.ПрофильНастроекЭДООператорЭДОИд);
				
				СтруктураЭД.Вставить("ОператорЭДО", ОператорЭДО);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидЭД <> Перечисления.ВидыЭД.ПредложениеОбАннулировании
			И (РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП) Тогда
			
			РеквизитыПервичногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ВладелецФайла,
				"ДатаДокументаОтправителя, НомерДокументаОтправителя");
			
			СтруктураЭД.Вставить("НаименованиеДокументаОтправителя",
				ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(РеквизитыЭД.ВладелецФайла));
			СтруктураЭД.Вставить("ДатаДокументаОтправителя",  РеквизитыПервичногоДокумента.ДатаДокументаОтправителя);
			СтруктураЭД.Вставить("НомерДокументаОтправителя", РеквизитыПервичногоДокумента.НомерДокументаОтправителя);
		КонецЕсли;
		
		СтруктураЭД.Вставить("ИдОтправителя", НастройкиОбменаЭД.ИдентификаторОрганизации);
		СтруктураЭД.Вставить("ВладелецФайла", РеквизитыЭД.ВладелецФайла);
		СтруктураЭД.Вставить("ИдФайла",       ОпределитьИдФайлаЭД(СтруктураЭД));
		СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыЭД.Наименование);
		// Дата и время получения файла.
		СтруктураЭД.Вставить("ДатаВремяПолучения", РеквизитыЭД.ДатаСоздания);
		Если ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			СтруктураЭД.Вставить("ТекстУточнения", ТекстУточнения);
			Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				ИмяМакета = "УведомлениеОбУточнении";
			Иначе
				ИмяМакета = "ПредложениеОбАннулировании";
			КонецЕсли;
		Иначе
			ИмяМакета = "ИзвещениеОПолучении";
		КонецЕсли;
		
		Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет(ИмяМакета);

		Дерево = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
		Если ПодготовитьДанныеПоСлужебномуДокументу(СсылкаНаЭД, СтруктураЭД, Дерево)
			И ЗаполнитьФайлСлужебногоДокумента(Дерево, ВидЭД) Тогда
			ФайлДанных = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ПолноеИмяФайла");
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлДанных));
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлДанных);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование электронного документа расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - объект по которому необходимо сформировать электронный документ.
//  НастройкиОбменаЭД - Структура - настройки обмена.
//  ПризнакЭД - Булево - признак необходимости вернуть структуру реквизитов электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры документа.
//
Функция СформироватьАктНаПередачуПрав(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("АктНаПередачуПрав");

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		НомерДокументаОтправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		Если Не ЗначениеЗаполнено(НомерДокументаОтправителя) Тогда
			НомерДокументаОтправителя = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
			ВставитьЗначениеВДерево(ДеревоДанных, "Номер", НомерДокументаОтправителя);
		КонецЕсли;
		ДатаДокументаОтправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		Если Не ЗначениеЗаполнено(ДатаДокументаОтправителя) Тогда
			ВставитьЗначениеВДерево(ДеревоДанных, "Дата", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Дата"));
		КонецЕсли;
		НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
		КонецЕсли;
		СтруктураЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ДатаДокументаОтправителя);
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных,
								"ПолноеИмяФайла",
								АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		ВставитьЗначениеВДерево(ДеревоДанных, "ХозОперация", НСтр("ru = 'Передача прав'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Роль", "Лицензиар");
		СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ВидОперации");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ДатаИсправления");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "НомерИсправления");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "КодПартнера");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "УсловияПередачи");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ОсобыеУсловия");
		
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ДокументыСделки");
		
		ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		ПоместитьРеквизитСтрокиТаблицыВДопДанные(ДеревоДанных, "Товары", "СерийныйНомер");
		ПоместитьРеквизитСтрокиТаблицыВДопДанные(ДеревоДанных, "Товары", "СерийныеНомера");
		
		Если СформироватьАктНаПередачуПравCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
			
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование реквизитов организации.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект.
//  НастройкиОбменаЭД - Параметры - настройки обмена.
// 
// Возвращаемое значение:
//  Структура - реквизиты организации.
//
Функция СформироватьРеквизитыОрганизации(СсылкаНаОбъект, НастройкиОбменаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", "РеквизитыОрганизации");
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("НомерВерсииЭД", ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	
	ДокументыОснования = Новый Массив;
	ДокументыОснования.Добавить(СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДокументыОснования", ДокументыОснования);
	
	СтруктураЭД.Вставить("НомерДокументаОтправителя","");
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("РеквизитыОрганизации");
	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеРеквизитыОрганизации(
												СсылкаНаОбъект,
												СтруктураЭД,
												ДеревоДокумента);
		
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДокумента, СтруктураЭД);
		
			
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", ПолноеИмяФайла);
		
		Если СформироватьРеквизитыОрганизацииCML(ДеревоДокумента) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			ВозвращаемоеЗначение = СтруктураПараметров;

		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

// Заполняет свойство объекта XDTO.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - объект заполнения.
//  ИмяСвойства - Строка - свойство объекта.
//  Значение - Произвольный - устанавливаемое значение.
//  Обязательное - Булево - признак обязательности заполнения свойства;
//  ТекстОшибки - Строка - текст ошибки в случае неудачного заполнения;
//  УстанавливатьПустыеЗначения - Булево - если Истина, то пустое значение будет записано в ОбъектXDTO.
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификационный номер электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на электронный документ, идентификационный номер которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - строка формата "ИдОтправителя#ИДСсылкиОбъектаИБ##НомерВерсии".
//
Функция ВернутьИдЭД(СсылкаНаОбъект) Экспорт
	
	ИдЭД = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	
	Возврат ИдЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// CML

// Функция получает тип значения CML.
//
// Параметры:
//  Тип - Тип - исходный тип.
//  ВерсияСхемы - Строка - версия схемы CML.
//
// Возвращаемое значение:
//  ТипЗначения - тип значения CML.
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы = "4.02") Экспорт
	
	Попытка
		Если ВерсияСхемы <> "4.02" Тогда
			ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);
		Иначе
			ТипЗначения = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", Тип);
		КонецЕсли
	Исключение
		
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Получение объекта типа CML.
//
// Параметры:
//  Тип - Строка, Тип  - тип данных.
//  ВерсияСхемы - Строка - версия схемы.
// 
// Возвращаемое значение:
//  ТипЗначенияXDTO - тип XDTO.
//
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

// Осуществляет разбор файла с реквизитами контрагента.
//
// Параметры:
//  СсылкаНаФайл - Строка - адрес хранилища файла с реквизитами контрагента.
//  СтруктураВозврата - Структура - данные контрагента.
//  ОшибкаРазбора - Булево - если Истина, то при разборе файла произошла ошибка.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора) Экспорт
	
	ОшибкаРазбора = Ложь;
	СтруктураВозврата.Вставить("ТелефонПартнера");
	СтруктураВозврата.Вставить("ТелефонКЛ");
	СтруктураВозврата.Вставить("АдресЭППартнера");
	СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("БИКБанка");
	СтруктураВозврата.Вставить("КоррСчетБанка");
	СтруктураВозврата.Вставить("ПредставлениеБанка");
	СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента");
	СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов");
	СтруктураВозврата.Вставить("БИКБанкаДляРасчетов");
	СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ВидКомпании");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("НаименованиеКонтрагента");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей");
	СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица");
	СтруктураВозврата.Вставить("ФамилияКЛ");
	СтруктураВозврата.Вставить("ИмяКЛ");
	СтруктураВозврата.Вставить("ОтчествоКЛ");
	СтруктураВозврата.Вставить("ФамилияКонтрагента");
	СтруктураВозврата.Вставить("ИмяКонтрагента");
	СтруктураВозврата.Вставить("ОтчествоКонтрагента");
	СтруктураВозврата.Вставить("Название");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей");

	РезультатРазбора = Ложь;
	ОбменСКонтрагентамиПереопределяемый.РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора);
	
	Если ТипЗнч(РезультатРазбора) <> Тип("Булево") ИЛИ РезультатРазбора = Ложь Тогда
		ОбъектXML = Новый ЧтениеXML;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
		ВремФайл = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ВремФайл);
		
		Попытка
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Исключение
			ОбъектXML.Закрыть();
			ОшибкаРазбора = Истина;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
			Возврат;
		КонецПопытки;
		
		Если НЕ ЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент", "4.02") Тогда
			ОбъектXML.Закрыть();
			ОшибкаРазбора = Истина;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
			Возврат;
		КонецЕсли;
		
		Попытка
			СвойствоЭД = ЭД.Свойства().Получить("Контакты");
			Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
				Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
					Если ТекКонтакт.Тип = НСтр("ru = 'Телефон рабочий'") Тогда
						СтруктураВозврата.ТелефонПартнера = ТекКонтакт.Значение;
						СтруктураВозврата.ТелефонКЛ = ТекКонтакт.Значение;
					ИначеЕсли ТекКонтакт.Тип = НСтр("ru = 'Почта'") Тогда
						СтруктураВозврата.АдресЭППартнера = ТекКонтакт.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
			Если СвойствоЭД <> Неопределено Тогда
				
				ЗначениеСвойства = ЭД.Получить(СвойствоЭД);
				Если ЗначениеСвойства <> Неопределено Тогда
					Для Каждого ТекущееСвойство Из ЗначениеСвойства.РасчетныйСчет Цикл
						
						СтруктураВозврата.НомерСчета = ТекущееСвойство.НомерСчета;
						СтруктураВозврата.БИКБанка = ТекущееСвойство.Банк.БИК;
						СтруктураВозврата.КоррСчетБанка = ТекущееСвойство.Банк.СчетКорреспондентский;
						СтруктураВозврата.ПредставлениеБанка = ТекущееСвойство.Банк.Наименование;
						СтруктураВозврата.УказатьБанковскийСчетКонтрагента = Истина;
						
						Если НЕ ТекущееСвойство.БанкКорреспондент = Неопределено Тогда
							СтруктураВозврата.ИспользуетсяБанкДляРасчетов = Истина;
							СтруктураВозврата.БИКБанкаДляРасчетов = ТекущееСвойство.БанкКорреспондент.БИК;
							СтруктураВозврата.КоррСчетБанкаДляРасчетов = ТекущееСвойство.БанкКорреспондент.СчетКорреспондентский;
							СтруктураВозврата.ПредставлениеБанкаДляРасчетов = ТекущееСвойство.БанкКорреспондент.Наименование;
						КонецЕсли;
						Прервать;
					КонецЦикла
				КонецЕсли;
			КонецЕсли;
			
			СтруктураВозврата.УказыватьЮридическиеРеквизиты = Истина;
			ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
			
			СвойствоЭД = ЭД.Свойства().Получить("ЮрЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗначениеСвойства = ЭД.Получить(СвойствоЭД);
				Если ЗначениеСвойства <> Неопределено Тогда
					СтруктураВозврата.ВидКомпании = 0;
					СвойствоИНН = ЗначениеСвойства.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗначениеСвойства.Получить(СвойствоИНН);
					КонецЕсли;
					СвойствоКПП = ЗначениеСвойства.Свойства().Получить("КПП");
					Если СвойствоКПП <> Неопределено Тогда
						СтруктураВозврата.КПП = ЗначениеСвойства.Получить(СвойствоКПП);
					КонецЕсли;
					СвойствоОКПО = ЗначениеСвойства.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						СтруктураВозврата.КодПоОКПО = ЗначениеСвойства.Получить(СвойствоОКПО);
					КонецЕсли;
					ОфициальноеНаименование = ЗначениеСвойства.Свойства().Получить("ОфициальноеНаименование");
					Если ОфициальноеНаименование <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗначениеСвойства.Получить(ОфициальноеНаименование);
					КонецЕсли;
					
					СвойствоАдрес = ЗначениеСвойства.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоАдрес <> Неопределено Тогда
						ЗначениеАдреса = ЗначениеСвойства.Получить(СвойствоАдрес);
						Если ЗначениеАдреса <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗначениеАдреса.Представление;
							ЮридическийАдрес = Новый СписокЗначений;
							Для Каждого ТекущееСвойство Из ЗначениеАдреса.АдресноеПоле Цикл
								Если ТекущееСвойство.Тип = НСтр("ru ='Почтовый индекс'") Тогда
									ЗначениеПоляАдреса = ЮридическийАдрес.Добавить();
									ЗначениеПоляАдреса.Представление =  "Индекс";
									ЗначениеПоляАдреса.Значение = ТекущееСвойство.Значение;
								ИначеЕсли ТекущееСвойство.Тип = НСтр("ru ='Населенный пункт'") Тогда
									ЗначениеПоляАдреса = ЮридическийАдрес.Добавить();
									ЗначениеПоляАдреса.Представление = "НаселенныйПункт";
									ЗначениеПоляАдреса.Значение = ТекущееСвойство.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекущееСвойство.Тип) > 0 Тогда
									ЗначениеПоляАдреса = ЮридическийАдрес.Добавить();
									ЗначениеПоляАдреса.Представление = ТекущееСвойство.Тип;
									ЗначениеПоляАдреса.Значение = ТекущееСвойство.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдрес;
						КонецЕсли
					КонецЕсли;
					
					СвойствоРуководитель = ЗначениеСвойства.Свойства().Получить("Руководитель");
					Если СвойствоРуководитель <> Неопределено Тогда
						РуководительЗначение = ЗначениеСвойства.Получить(СвойствоРуководитель);
						Если РуководительЗначение <> Неопределено Тогда
							СвойствоФизЛицо = РуководительЗначение.Свойства().Получить("ФизЛицо");
							Если СвойствоФизЛицо<> Неопределено Тогда
								ФизЛицо = РуководительЗначение.Получить(СвойствоФизЛицо);
								Если ФизЛицо <> Неопределено Тогда
									СтруктураВозврата.УказатьДанныеКонтактногоЛица = Истина;
									ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизЛицо.ПолноеНаименование);
									СтруктураВозврата.ФамилияКЛ = ФИО.Фамилия;
									СтруктураВозврата.ИмяКЛ = ФИО.Имя;
									СтруктураВозврата.ОтчествоКЛ = ФИО.Отчество;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("ФизЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗначениеСвойства = ЭД.Получить(СвойствоЭД);
				Если ЗначениеСвойства <> Неопределено Тогда
					
					СтруктураВозврата.ВидКомпании = 2;
					СвойствоИНН = ЗначениеСвойства.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗначениеСвойства.Получить(СвойствоИНН);
					КонецЕсли;
					
					СвойствоОКПО = ЗначениеСвойства.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						КодПоОКПО = ЗначениеСвойства.Получить(СвойствоОКПО);
						СтруктураВозврата.КодПоОКПО = ЗначениеСвойства.Получить(СвойствоОКПО);
					КонецЕсли;
					
					ОфициальноеНаименование = ЗначениеСвойства.Свойства().Получить("ПолноеНаименование");
					Если ОфициальноеНаименование <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗначениеСвойства.Получить(ОфициальноеНаименование);
						ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СтруктураВозврата.НаименованиеКонтрагента);
						СтруктураВозврата.ФамилияКонтрагента =  ФИО.Фамилия;
						СтруктураВозврата.ИмяКонтрагента =      ФИО.Имя;
						СтруктураВозврата.ОтчествоКонтрагента = ФИО.Отчество;
					КонецЕсли;
					
					СвойствоАдрес = ЗначениеСвойства.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоАдрес <> Неопределено Тогда
						
						ЗначениеАдреса = ЗначениеСвойства.Получить(СвойствоАдрес);
						Если ЗначениеАдреса <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗначениеАдреса.Представление;
							ЮридическийАдрес = Новый СписокЗначений;
							Для Каждого ТекущееСвойство Из ЗначениеАдреса.АдресноеПоле Цикл
								Если ТекущееСвойство.Тип = НСтр("ru ='Почтовый индекс'") Тогда
									ЗначениеПоляАдреса = ЮридическийАдрес.Добавить();
									ЗначениеПоляАдреса.Представление = "Индекс";
									ЗначениеПоляАдреса.Значение = ТекущееСвойство.Значение;
								ИначеЕсли ТекущееСвойство.Тип = НСтр("ru ='Населенный пункт'") Тогда
									ЗначениеПоляАдреса = ЮридическийАдрес.Добавить();
									ЗначениеПоляАдреса.Представление = "НаселенныйПункт";
									ЗначениеПоляАдреса.Значение = ТекущееСвойство.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекущееСвойство.Тип)>0 Тогда
									ЗначениеПоляАдреса = ЮридическийАдрес.Добавить();
									ЗначениеПоляАдреса.Представление = ТекущееСвойство.Тип;
									ЗначениеПоляАдреса.Значение = ТекущееСвойство.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдрес;
						КонецЕсли
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Наименование");
			Если СвойствоЭД <> Неопределено Тогда
				СтруктураВозврата.Название = ЭД.Получить(СвойствоЭД);
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Адрес");
			Если СвойствоЭД <> Неопределено Тогда
				ЗначениеСвойства = ЭД.Получить(СвойствоЭД);
				Если ЗначениеСвойства <> Неопределено Тогда
					
					СтруктураВозврата.ФактическийАдрес = ЗначениеСвойства.Представление;
					ФактическийАдресЗначенияПолей = Новый СписокЗначений;
					Для Каждого ТекущееСвойство Из ЗначениеСвойства.АдресноеПоле Цикл
						Если ТекущееСвойство.Тип = НСтр("ru ='Почтовый индекс'") Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "Индекс";
							ФактАдресЗначения.Значение = ТекущееСвойство.Значение;
						ИначеЕсли ТекущееСвойство.Тип = НСтр("ru ='Населенный пункт'") Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "НаселенныйПункт";
							ФактАдресЗначения.Значение = ТекущееСвойство.Значение;
						ИначеЕсли Найти(ДопустимыеТипы, ТекущееСвойство.Тип)>0 Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Значение = ТекущееСвойство.Значение;
							ФактАдресЗначения.Представление = ТекущееСвойство.Тип;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураВозврата.ФактическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей;
				КонецЕсли;
			КонецЕсли;
		Исключение
			ОшибкаРазбора = Истина;
		КонецПопытки;
		ОбъектXML.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет пространство имен из файла
//
// Параметры:
//   ИмяФайла - Строка - путь к файлу на диске
//   ПространствоИмен - Строка - удаляемое пространство имен.
//
Процедура УдалитьПространствоИмен(ИмяФайла, ПространствоИмен) Экспорт
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла,"windows-1251");
	СтрокаФайл = Текст.ПолучитьСтроку(2);
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """", "");
	Текст.ЗаменитьСтроку(2, СтрокаФайл);
	Текст.Записать(ИмяФайла, "windows-1251");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

// Получает информацию о товаре в массиве ЭД
//
// Параметры:
//  МассивЭД - Массив - массив ссылок на элементы справочника ЭДПрисоединенныеФайлы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений, содержащая информацию о товаре.
//
Функция ПолучитьИнформациюОТоваре(МассивЭД) Экспорт
	
	ТаблицаВозврата = Неопределено;
	ИменаДопКолонок = "";
	
	Для Каждого ТекЭД Из МассивЭД Цикл
		Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ТекЭД.ТипЭлементаВерсииЭД) Тогда
			
			ЭД = ТекЭД.ЭлектронныйДокументВладелец;
		Иначе
			ЭД = ТекЭД;
		КонецЕсли;
		ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭД, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла = Неопределено Тогда
				ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
				|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДеревоДопДанных = Неопределено;
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВладелецФайла.ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
				ВыборкаЭДДопДанных = ОбменСКонтрагентамиСлужебный.ВыборкаДопДанныеЭД(ЭД);
				Если ВыборкаЭДДопДанных.Следующий() Тогда
					ДопДанныеЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(
					                                                           ВыборкаЭДДопДанных.Ссылка,
					                                                           ВыборкаЭДДопДанных.Ссылка.УникальныйИдентификатор(),
					                                                           Истина);
					СсылкаНаДДДопДанныхЭД = "";
					Если ДопДанныеЭД.Свойство("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДДДопДанныхЭД)
						И ЗначениеЗаполнено(СсылкаНаДДДопДанныхЭД) Тогда
						ВремФайл = ПолучитьИмяВременногоФайла("xml");
						ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СсылкаНаДДДопДанныхЭД);
						ДвоичныеДанныеФайла.Записать(ВремФайл);
						ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ВремФайл);
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 ИЛИ Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, ЭД.УникальныйИдентификатор());
				Если ПапкаДляРаспаковки = Неопределено Тогда
					ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
					|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
					Продолжить;
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки, "*.*");
				Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
					ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
					Попытка
						ЗИПЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если Не ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"),
							ТекстОшибки, ТекстСообщения);
						ЗИПЧтение.Закрыть();
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
						Продолжить;
					КонецПопытки;
				Иначе
					ФайлПриемник = ПапкаДляРаспаковки + "\" + Новый УникальныйИдентификатор + ".xml";
					ОбменСКонтрагентамиСлужебный.УдалитьЛишнийСлэшВПути(ФайлПриемник);
					КопироватьФайл(ИмяФайла, ФайлПриемник);
				КонецЕсли;
				ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
					ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
					Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
						Продолжить;
					КонецЕсли;
					ИнформацияОТовареИзФайлаXML(ИмяФайлаДанных, ТаблицаВозврата, ЭД, ДеревоДопДанных, ИменаДопКолонок);
				КонецЦикла;
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ТаблицаВозврата) = Тип("ТаблицаЗначений") Тогда
		ТаблицаВозврата.Свернуть("ИД, Артикул, Наименование, БазоваяЕдиницаКод, БазоваяЕдиницаНаименование,
			|БазоваяЕдиницаНаименованиеПолное, БазоваяЕдиницаМеждународноеСокращение, Описание, ЭД, НаименованиеХарактеристики"
			+ ИменаДопКолонок);
	КонецЕсли;

	Возврат ТаблицаВозврата;
	
КонецФункции

// Получает информацию о товаре из электронного документа.
//
// Параметры:
//  ПолноеИмяФайла - Строка - путь к файлу с содержимым электронного документа;
//  ТаблицаВозврата - ТаблицаЗначений - таблица товаров;
//  СсылкаНаЭД - ДокументСсылка.ЭлектронныйДокументВходящий - ссылка на электронный документ;
//  ДеревоДопДанных - ДеревоЗначений - дополнительные данные о товаре;
//  ИменаДопКолонок - Строка - имена дополнительных колонок через запятую.
//
Процедура ИнформацияОТовареИзФайлаXML(ПолноеИмяФайла,
									  ТаблицаВозврата,
									  СсылкаНаЭД,
									  ДеревоДопДанных = Неопределено,
									  ИменаДопКолонок = "") Экспорт
	
	ОписаниеОшибки = "";
	ДанныеФайлаЭД = ДанныеФайлаЭД(ПолноеИмяФайла, ОписаниеОшибки);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		НаборДанных = Неопределено;
		
		Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация", "urn:1C.ru:commerceml_2") Тогда
			Если ТипЗнч(ДанныеФайлаЭД.Каталог) = Тип("ОбъектXDTO") Тогда
				НаборДанных = ДанныеФайлаЭД.Каталог["Товары"].Товар;
			ИначеЕсли ТипЗнч(ДанныеФайлаЭД.Документ) = Тип("СписокXDTO") И (ДанныеФайлаЭД.Документ.Количество() > 0) Тогда
				НаборДанных = ДанныеФайлаЭД.Документ[0]["Товары"].Товар;
			ИначеЕсли ТипЗнч(ДанныеФайлаЭД.ПакетПредложений) = Тип("ОбъектXDTO") 
				И ТипЗнч(ДанныеФайлаЭД.ПакетПредложений.Предложения) = Тип("ОбъектXDTO")
				И ТипЗнч(ДанныеФайлаЭД.ПакетПредложений.Предложения.Предложение) = Тип("СписокXDTO")
				И ДанныеФайлаЭД.ПакетПредложений.Предложения.Предложение.Количество() > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.ПакетПредложений.Предложения.Предложение;
				
			КонецЕсли;
			ДопПараметры = Новый Структура("ИменаДопКолонок", ИменаДопКолонок);
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
		КонецЕсли;
		
		Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			НаборДанных = ДанныеФайлаЭД["Предложения"].Предложение;
			ДопПараметры = Новый Структура("ИменаДопКолонок", ИменаДопКолонок);
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
		ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			Если ДанныеФайлаЭД["Товары"] <> Неопределено Тогда
				НаборДанных = ДанныеФайлаЭД["Товары"].Товар;
				ДопПараметры = Новый Структура("ИменаДопКолонок", ИменаДопКолонок);
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
			КонецЕсли;
		КонецЕсли;
			
		Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
			
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("ДеревоДопДанных", ДеревоДопДанных);
			ДопПараметры.Вставить("ЕстьСвойствоИдФайл", Истина);
			ДопПараметры.Вставить("ИменаДопКолонок", ИменаДопКолонок);
			
			Если Найти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPR") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.ТаблСчФакт.СведТов;
				ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPR") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.ТаблКСчФ.СведТов;
				ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.СвТНО.ТН.Таблица.СвТов;
				ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.СвТНО.ТН.Таблица.СвТов;
				ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда
				
				НаборДанныхОписанияРабот = ДанныеФайлаЭД.Документ.СвАктИ.ОписРабот;
				// Переберем номенклатуру из всех табличных частей акта.
				Для Сч = 0 По НаборДанныхОписанияРабот.Количество() - 1 Цикл
					ЭлементОписания = НаборДанныхОписанияРабот.ПолучитьXDTO(Сч);
					НаборДанных = ЭлементОписания.ПолучитьСписок("Работа");
					ДопПараметры.Вставить("ИмяТЧ", "Услуги");
					ДопПараметры.Вставить("НомерСтроки", Сч + 1);
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
				КонецЦикла;
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "KORSFAKT") > 0 Тогда
				НаборДанных = ДанныеФайлаЭД.Документ.ТаблКСчФ.СведТов;
				ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "SFAKT") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.ТаблСчФакт.СведТов;
				ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
					
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов;
				ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
					
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда
				
				НаборДанныхОписанияРабот = ДанныеФайлаЭД.Документ.СвДокПРУ.СодФХЖ1.ОписРабот;
				Для Сч = 0 По НаборДанныхОписанияРабот.Количество() - 1 Цикл
					ЭлементОписания = НаборДанныхОписанияРабот.ПолучитьXDTO(Сч);
					НаборДанных = ЭлементОписания.ПолучитьСписок("Работа");
					ДопПараметры.Вставить("ИмяТЧ", "Услуги");
					ДопПараметры.Вставить("НомерСтроки", Сч + 1);
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ДопПараметры);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаВозврата = Неопределено Тогда
			Если Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип при чтении данных из ЭД %1.'"), СсылкаНаЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Если Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из ЭД %1: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СсылкаНаЭД, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Определение типа электронного документа по типу владельца.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - электронный документ.
// 
// Возвращаемое значение:
//  Перечисление.ТипыЭлементовВерсииЭД - возвращаемый тип.
//
Функция ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД) Экспорт
	
	ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
			
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		Иначе
			ВозвращаемыйТип = Неопределено;
		КонецЕсли;
	Иначе
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ВозвращаемыйТип = Неопределено;
		Иначе
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемыйТип;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирование печатной формы электронного документа
//
// Параметры:
//  СсылкаНаФайлЭД - Ссылка - ссылка на электронный документ.
//  ПараметрыПросмотра - Структура - параметры формирования.
// 
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция ФайлДанныхЭД(СсылкаНаФайлЭД, ПараметрыПросмотра) Экспорт
	
	// Структура содержащая поля "ИмяФайла", "Наименование", "Расширение".
	ПараметрыФайла = СвойстваФайла();
	СохранитьЭДВФайл(СсылкаНаФайлЭД, ПараметрыФайла);
	ИмяФайла = ПараметрыФайла.ИмяФайла;
	
	Если ИмяФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПросмотра.Вставить("ИмяФайла", ИмяФайла);
	ИмяФайлаДопДанных = Неопределено;
	СохранитьДопДанныеВФайл(СсылкаНаФайлЭД, ИмяФайлаДопДанных);
	ПараметрыПросмотра.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);
	УникальныйИдентификатор = ЗначениеПараметра(ПараметрыПросмотра, "УникальныйИдентификатор");
	Идентификатор = ЗначениеПараметра(ПараметрыПросмотра, "Идентификатор");
	СтруктураПодписей = ЗначениеПараметра(ПараметрыПросмотра, "СтруктураПодписей");
	ИмяФайлаПодчиненногоЭД = ЗначениеПараметра(ПараметрыПросмотра, "ИмяФайлаПодчиненногоЭД");
	
	ПечатьЭД = ЗначениеПараметра(ПараметрыПросмотра, "ПечатьЭД");
	Если ПечатьЭД = Неопределено Тогда
		ПечатьЭД = Ложь;
	КонецЕсли;
	
	СвойстваФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "ТипЭлементаВерсииЭД,НаправлениеЭД,ВладелецФайла");
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваФайлаЭД.ВладелецФайла, "ВидЭД");
	
	ИмяФайлаВторогоТитула = ИмяФайлаПодчиненногоЭД;
	Если ИмяФайлаПодчиненногоЭД = Неопределено Тогда
		Если ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(СсылкаНаФайлЭД.ВладелецФайла) Тогда
			ФайлВторогоТитула = ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(СсылкаНаФайлЭД);
			Если НЕ ФайлВторогоТитула = Неопределено Тогда
				ПараметрыФайла = СвойстваФайла();
				СохранитьЭДВФайл(ФайлВторогоТитула, ПараметрыФайла);
				ИмяФайлаВторогоТитула = ПараметрыФайла.ИмяФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(ПараметрыФайла.Расширение, "zip") > 0 Тогда
		
		ZipЧтение = Новый ЧтениеZipФайла(ИмяФайла);
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(,СсылкаНаФайлЭД.УникальныйИдентификатор());
		
		Если ПапкаДляРаспаковки = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			ZipЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ZipЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"),
			ТекстОшибки, ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат Неопределено;
		КонецПопытки;
		
		ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
		
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
			ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Возврат СсылкаНаФайл;
			КонецЕсли;
			ПараметрыПечати = Новый Структура;
			ПараметрыПечати.Вставить("ИД",СсылкаНаФайлЭД.УникальныйИдентификатор());
			ПараметрыПечати.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);
			ПараметрыПечати.Вставить("СтруктураПодписей", СтруктураПодписей);
			ПараметрыПечати.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаВторогоТитула);
			ТабличныйДокумент = СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя, СвойстваФайлаЭД.НаправлениеЭД,
				ПараметрыПечати);
			Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Возврат ТабличныйДокумент;
			КонецЕсли;
		КонецЦикла;
		
		ФайлыАрхиваMXL = НайтиФайлы(ПапкаДляРаспаковки, "*.mxl");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваMXL Цикл
			ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Прочитать(ИмяФайлаДанных);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат ТабличныйДокумент;
		КонецЦикла;
		
		Если СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав И Не ПечатьЭД Тогда
			ФайлыАрхиваPDF = НайтиФайлы(ПапкаДляРаспаковки, "*.pdf");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваPDF Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Возврат СсылкаНаФайл;
			КонецЦикла;
		КонецЕсли;
		
		ФайлыАрхиваHTML = НайтиФайлы(ПапкаДляРаспаковки, "*.html");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваHTML Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваDOCX = НайтиФайлы(ПапкаДляРаспаковки, "*.docx");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваDOCX Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваXLS = НайтиФайлы(ПапкаДляРаспаковки, "*.xls");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXLS Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		
	ИначеЕсли Найти(ПараметрыФайла.Расширение, "xml") > 0 Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ИД", СсылкаНаФайлЭД.УникальныйИдентификатор());
		ПараметрыПечати.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаВторогоТитула);
		ПараметрыПечати.Вставить("СтруктураПодписей", СтруктураПодписей);
		ПараметрыПечати.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);

		Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СвойстваФайлаЭД.ТипЭлементаВерсииЭД) Тогда
			
			// Для ответных титулов передадим номер и дату документа ИБ первого титула
			ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаФайлЭД, "ВладелецФайла"); 
			СвойстваДокументаПервогоТитула = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПервыйТитул, "НомерДокументаОтправителя, ДатаДокументаОтправителя");
			ПараметрыПечати.Вставить("СвойстваДокументаПервогоТитула", СвойстваДокументаПервогоТитула);

		ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоПодтверждение(СвойстваФайлаЭД.ТипЭлементаВерсииЭД)
			ИЛИ ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(СвойстваФайлаЭД.ТипЭлементаВерсииЭД)
			ИЛИ ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(СвойстваФайлаЭД.ТипЭлементаВерсииЭД)
			ИЛИ СвойстваФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				ПараметрыПечати.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);
				ПараметрыПечати.Вставить("Идентификатор", Идентификатор);
			
		КонецЕсли;
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭД(ИмяФайла, СсылкаНаФайлЭД.НаправлениеЭД, ПараметрыПечати);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		
		Если ТипЗнч(ТабличныйДокумент)=Тип("ТабличныйДокумент") Тогда
			Возврат ТабличныйДокумент;
		КонецЕсли;
		
	Иначе
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		Возврат СсылкаНаФайл;
		
	КонецЕсли;
	
КонецФункции

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  ПолноеИмяФайла - Строка - путь к файлу, по которому необходимо сформировать печатную форму.
//  НаправлениеЭД - ПеречислениеСсылка.НаправлениеЭД - НаправлениеЭД.
//  ПараметрыПечати - Структура - содержит параметры для печати документа:
//   * ИД - УникальныйИдентификатор - уникальный идентификатор объекта ЭД.
//   * ИмяФайлаПодчиненногоЭД - Строка - путь к файлу доп.данных.
//   * ВидЭД - ПеречислениеСсылка.ВидыЭД -  возвращает в вызывающую процедуру вид обрабатываемого ЭД.
//   * ИдентификаторДокумента - Строка - идентификатор.
//   * СтруктураПодписей - Структура - установленные электронные подписи.
//        ** КомуВыданСертификат - Строка - представление сертификата.
//        ** НомерСтроки - Число - Номер строки формы просмотра.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Табличный документ с данными электронного документа.
//
Функция СформироватьПечатнуюФормуЭД(ПолноеИмяФайла, НаправлениеЭД, ПараметрыПечати) Экспорт
									
	ИмяФайлаДопДанных = ЗначениеПараметра(ПараметрыПечати, "ИмяФайлаДопДанных");
	Результат = СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ИмяФайлаДопДанных);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПечатнаяФормаЭД(Результат, НаправлениеЭД, ПараметрыПечати);
	
КонецФункции

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  СтруктураРазбораФайла - Структура - содержит дерево разбора ЭД.
//  НаправлениеЭД - ПеречислениеСсылка.НаправлениеЭД - направление.
//  ПараметрыПечати - Структура - содержит параметры для печати документа:
//   * ИД - УникальныйИдентификатор - уникальный идентификатор объекта ЭД.
//   * ИмяФайлаПодчиненногоЭД - Строка - путь к файлу доп.данных.
//   * ВидЭД - ПеречислениеСсылка.ВидыЭД - возвращает в вызывающую процедуру вид обрабатываемого ЭД.
//   * ИдентификаторДокумента - Строка - идентификатор.
//   * СтруктураПодписей - Структура - установленные электронные подписи.
//        ** КомуВыданСертификат - Строка - представление сертификата.
//        ** НомерСтроки - Число - Номер строки формы просмотра.
//
// Возвращаемое значение:
//  ТабличныйДокумент - данные электронного документа.
//
Функция ПечатнаяФормаЭД(СтруктураРазбораФайла, НаправлениеЭД, ПараметрыПечати) Экспорт
	
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	
	ИдентификаторДокумента = ЗначениеПараметра(ПараметрыПечати, "ИдентификаторДокумента");
	Если ИдентификаторДокумента = Неопределено Тогда
		ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
			"ИдентификаторДокумента");
	КонецЕсли;
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	МакетИдентификатораДокумента = ПолучитьОбщийМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ИдентификаторДокумента_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	СтруктураПодписей = ЗначениеПараметра(ПараметрыПечати, "СтруктураПодписей");
	ТекстЭлектроннаяПодпись = "";
	Подписан = Ложь;
	Если ЗначениеЗаполнено(СтруктураПодписей) И СтруктураПодписей.Подписи.Количество() Тогда
		Подписан = Истина;
		ТекстЭлектроннаяПодпись = НСтр("ru='электронная подпись'");
		ОбластьПодпись = МакетИдентификатораДокумента.ПолучитьОбласть("Подпись");
		Для каждого СтрокаПодписи Из СтруктураПодписей.Подписи Цикл
			ОбластьПодпись.Параметры.Значение = СтрокаПодписи.КомуВыданСертификат;
			ОбластьПодпись.Параметры.НомерСтрокиПодписи = СтрокаПодписи.НомерСтроки;
			ОбщийТабДок.Вывести(ОбластьПодпись);
		КонецЦикла;
		ОбластьЗаголовокПодписи = МакетИдентификатораДокумента.ПолучитьОбласть("ЗаголовокПодписей");
		ОбщийТабДок.Вывести(ОбластьЗаголовокПодписи);
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяФайлаПодчиненногоЭД = ЗначениеПараметра(ПараметрыПечати, "ИмяФайлаПодчиненногоЭД");
	ИД = ЗначениеПараметра(ПараметрыПечати, "ИД");
	
	Попытка
		
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
			
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				ИнформацияПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеИнформацииПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя);
				КонецЕсли;
				
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если Не ДанныеЭДДляПечати.ПодвалНакладной.Свойство("ФИОКладовщика") Тогда
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ДолжностьКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ДолжностьРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ФИОКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ФИОРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодписьКладовщик", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					Если ИнформацияПокупателя.Количество() Тогда
						ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
						Если Не ИнформацияПокупателя.Свойство("ФИОКладовщикаПолучателя") Тогда
							Если ИнформацияПокупателя.Свойство("ДолжностьРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ДолжностьКладовщикаПолучателя", ИнформацияПокупателя.ДолжностьРуководителяПолучателя);
							КонецЕсли;
							Если ИнформацияПокупателя.Свойство("ФИОРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ФИОКладовщикаПолучателя", ИнформацияПокупателя.ФИОРуководителяПолучателя);
							КонецЕсли;
							ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьКладовщикПолучателя", ТекстЭлектроннаяПодпись);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавца(ТабличныйДокумент, ДанныеЭДДляПечати, ИнформацияПокупателя);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
					
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД Тогда
				
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаДляПечати(СтрокаОбъекта, ДеревоРазбора);
					
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавца(ТабличныйДокумент, ДанныеЭДДляПечати, Неопределено);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД Тогда
				
				ИнформацияПокупателя = ДанныеИнформацииПокупателя(СтрокаОбъекта.ЗначениеРеквизита);
				Если Подписан Тогда
					ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = ПараметрыПечати.СвойстваДокументаПервогоТитула;
				ИнформацияПокупателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
				ИнформацияПокупателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				
				ЗаполнитьТабличныйДокумент_ИнформацияПокупателя(ТабличныйДокумент, ИнформацияПокупателя);
				
			Иначе
				ДанныеЭДДляПечати = ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				Если Подписан Тогда
					Если ДанныеЭДДляПечати.Шапка.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Шапка.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаУКДДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				ИнформацияПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеИнформацииПокупателяУКД(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя);
				КонецЕсли;
				
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если ИнформацияПокупателя.Количество() Тогда
						ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавцаУКД(ТабличныйДокумент, ДанныеЭДДляПечати, ИнформацияПокупателя);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
			
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаУКДДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавцаУКД(ТабличныйДокумент, ДанныеЭДДляПечати, Неопределено);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
				
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
				ИнформацияПокупателя = ДанныеИнформацииПокупателяУКД(СтрокаОбъекта.ЗначениеРеквизита);
				Если Подписан Тогда
					ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				СвойстваДокументаПервогоТитула = ПараметрыПечати.СвойстваДокументаПервогоТитула;
				ИнформацияПокупателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
				ИнформацияПокупателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				ЗаполнитьТабличныйДокумент_ИнформацияПокупателяУКД(ТабличныйДокумент, ИнформацияПокупателя);
				
			Иначе
				
				ДанныеЭДДляПечати = ПолучитьДанныеКорректировочногоСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора);
				Если Подписан Тогда
					Если ДанныеЭДДляПечати.Шапка.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Шапка.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьТабличныйДокументКорректировочныйСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
			Или СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
			
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				ИнформацияПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеИнформацииПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя);
				КонецЕсли;
				
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если Не ДанныеЭДДляПечати.ПодвалНакладной.Свойство("ФИОКладовщика") Тогда
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ДолжностьКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ДолжностьРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ФИОКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ФИОРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодписьКладовщик", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					Если ИнформацияПокупателя.Количество() Тогда
						ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
						Если Не ИнформацияПокупателя.Свойство("ФИОКладовщикаПолучателя") Тогда
							Если ИнформацияПокупателя.Свойство("ДолжностьРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ДолжностьКладовщикаПолучателя", ИнформацияПокупателя.ДолжностьРуководителяПолучателя);
							КонецЕсли;
							Если ИнформацияПокупателя.Свойство("ФИОРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ФИОКладовщикаПолучателя", ИнформацияПокупателя.ФИОРуководителяПолучателя);
							КонецЕсли;
							ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьКладовщикПолучателя", ТекстЭлектроннаяПодпись);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавца(ТабличныйДокумент, ДанныеЭДДляПечати, ИнформацияПокупателя);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
					
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
			Иначе
				
				ЭтоДокументПередачи = (ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаТоваров"));
				ДанныеПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя, ЭтоДокументПередачи);
				КонецЕсли;
					
				Если ЭтоДокументПередачи Тогда
					ДанныеЭДДляПечати = ДанныеДляПечатиПередачаТоваров(СтрокаОбъекта, ДеревоРазбора);
					
				Иначе
					ДанныеЭДДляПечати = ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора);
					
				КонецЕсли;
				
				Если Подписан Тогда
					Если ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОРуководителя) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					Если ДанныеЭДДляПечати.Свойство("ДанныеОПередаче") Тогда
						ДанныеЭДДляПечати.ДанныеОПередаче.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					
					Если ДанныеПокупателя.Количество() Тогда
						ДанныеПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
					
				Если ЭтоДокументПередачи Тогда
					ЗаполнитьТабличныйДокументПередачаТоваров(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеПокупателя);
				Иначе
					ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеПокупателя);
				КонецЕсли;
			
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД Тогда
				
				ИнформацияПокупателя = ДанныеИнформацииПокупателя(СтрокаОбъекта.ЗначениеРеквизита);
				Если Подписан Тогда
					ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = ПараметрыПечати.СвойстваДокументаПервогоТитула;
				ИнформацияПокупателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
				ИнформацияПокупателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				
				ЗаполнитьТабличныйДокумент_ИнформацияПокупателя(ТабличныйДокумент, ИнформацияПокупателя);
				
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
			Иначе
				ДанныеПокупателя = ДанныеВторогоТитула(СтрокаОбъекта, ДеревоРазбора);
				Если Подписан Тогда
					ДанныеПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = Неопределено;
				Если ПараметрыПечати.Свойство("СвойстваДокументаПервогоТитула", СвойстваДокументаПервогоТитула)
					И Не СвойстваДокументаПервогоТитула = Неопределено Тогда
					
					ДанныеПокупателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
					ДанныеПокупателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				КонецЕсли;
				
				ЗаполнитьТабличныйДокумент_ТОРГ12Покупателя(ТабличныйДокумент, ДанныеПокупателя);
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаУКДДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				ИнформацияПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеИнформацииПокупателяУКД(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя);
				КонецЕсли;
				
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если ИнформацияПокупателя.Количество() Тогда
						ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавцаУКД(ТабличныйДокумент, ДанныеЭДДляПечати, ИнформацияПокупателя);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			Иначе
				
				ДанныеПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, 
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя);
				КонецЕсли;
				
				ДанныеЭДДляПечати = ПолучитьДанныеКорректировочногоДокументаДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				Если Подписан Тогда
					ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если ДанныеПокупателя.Количество() Тогда
						ДанныеПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументКорректировочныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеПокупателя);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
				ИнформацияПокупателя = ДанныеИнформацииПокупателяУКД(СтрокаОбъекта.ЗначениеРеквизита);
				Если Подписан Тогда
					ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = ПараметрыПечати.СвойстваДокументаПервогоТитула;
				ИнформацияПокупателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
				ИнформацияПокупателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				
				ЗаполнитьТабличныйДокумент_ИнформацияПокупателяУКД(ТабличныйДокумент, ИнформацияПокупателя);
				
			Иначе
				ДанныеПолучателя = ДанныеСоглашенияПолучатель(СтрокаОбъекта, ДеревоРазбора);
				
				Если Подписан Тогда
					ДанныеПолучателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = Неопределено;
				Если ПараметрыПечати.Свойство("СвойстваДокументаПервогоТитула", СвойстваДокументаПервогоТитула)
					И Не СвойстваДокументаПервогоТитула = Неопределено Тогда
					ДанныеПолучателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
					ДанныеПолучателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				КонецЕсли;
				ЗаполнитьТабличныйДокумент_СоглашениеПолучателя(ТабличныйДокумент, ДанныеПолучателя);
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
			
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				ИнформацияПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеИнформацииПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя);
				КонецЕсли;
				
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если Не ДанныеЭДДляПечати.ПодвалНакладной.Свойство("ФИОКладовщика") Тогда
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ДолжностьКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ДолжностьРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ФИОКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ФИОРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодписьКладовщик", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					Если ИнформацияПокупателя.Количество() Тогда
						ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
						Если Не ИнформацияПокупателя.Свойство("ФИОКладовщикаПолучателя") Тогда
							Если ИнформацияПокупателя.Свойство("ДолжностьРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ДолжностьКладовщикаПолучателя", ИнформацияПокупателя.ДолжностьРуководителяПолучателя);
							КонецЕсли;
							Если ИнформацияПокупателя.Свойство("ФИОРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ФИОКладовщикаПолучателя", ИнформацияПокупателя.ФИОРуководителяПолучателя);
							КонецЕсли;
							ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьКладовщикПолучателя", ТекстЭлектроннаяПодпись);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавца(ТабличныйДокумент, ДанныеЭДДляПечати, ИнформацияПокупателя);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
					
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
			Иначе
				ДанныеЗаказчика = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеЗаказчика(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеЗаказчика);
				КонецЕсли;
				
				Если ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаРезультатовРабот") Тогда
					ДанныеЭДДляПечати = ДанныеДляПечатиПередачаРезультатовРабот(СтрокаОбъекта, ДеревоРазбора);
					
				Иначе
					ДанныеЭДДляПечати = ПолучитьДанныеАкта501ДляПечати(СтрокаОбъекта, ДеревоРазбора);
					
				КонецЕсли;
				
				Если Подписан Тогда
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
						ДанныеЗаказчика.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументАкт501(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеЗаказчика);
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД Тогда
				
				ИнформацияПокупателя = ДанныеИнформацииПокупателя(СтрокаОбъекта.ЗначениеРеквизита);
				Если Подписан Тогда
					ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = ПараметрыПечати.СвойстваДокументаПервогоТитула;
				ИнформацияПокупателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
				ИнформацияПокупателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				
				ЗаполнитьТабличныйДокумент_ИнформацияПокупателя(ТабличныйДокумент, ИнформацияПокупателя);
				
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
			Иначе
				ДанныеЗаказчика = ДанныеАктаЗаказчика(СтрокаОбъекта, ДеревоРазбора);
				Если Подписан Тогда
					ДанныеЗаказчика.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = Неопределено;
				Если ПараметрыПечати.Свойство("СвойстваДокументаПервогоТитула", СвойстваДокументаПервогоТитула) 
					И Не СвойстваДокументаПервогоТитула = Неопределено Тогда
					ДанныеЗаказчика.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
					ДанныеЗаказчика.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				КонецЕсли;
				ЗаполнитьТабличныйДокумент_АктЗаказчик(ТабличныйДокумент, ДанныеЗаказчика);
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			
			Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
			
				ДанныеЭДДляПечати = ПолучитьДанныеИнформацияПродавцаДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				ИнформацияПокупателя = Новый Структура;
				Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
					НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
						Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
					ЗаполнитьДанныеИнформацииПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя);
				КонецЕсли;
				
				Если Подписан Тогда
					// Если подписант ИП, то выведем информацию о нем в отдельной строке.
					Если ДанныеЭДДляПечати.Подвал.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Подвал.ФИОПБОЮЛ) Тогда
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
					Иначе
						ДанныеЭДДляПечати.Подвал.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если Не ДанныеЭДДляПечати.ПодвалНакладной.Свойство("ФИОКладовщика") Тогда
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ДолжностьКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ДолжностьРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ФИОКладовщика", ДанныеЭДДляПечати.ПодвалНакладной.ФИОРуководителя);
						ДанныеЭДДляПечати.ПодвалНакладной.Вставить("ЭлектроннаяПодписьКладовщик", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					Если ИнформацияПокупателя.Количество() Тогда
						ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
						Если Не ИнформацияПокупателя.Свойство("ФИОКладовщикаПолучателя") Тогда
							Если ИнформацияПокупателя.Свойство("ДолжностьРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ДолжностьКладовщикаПолучателя", ИнформацияПокупателя.ДолжностьРуководителяПолучателя);
							КонецЕсли;
							Если ИнформацияПокупателя.Свойство("ФИОРуководителяПолучателя") Тогда
								ИнформацияПокупателя.Вставить("ФИОКладовщикаПолучателя", ИнформацияПокупателя.ФИОРуководителяПолучателя);
							КонецЕсли;
							ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьКладовщикПолучателя", ТекстЭлектроннаяПодпись);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументИнформацияПродавца(ТабличныйДокумент, ДанныеЭДДляПечати, ИнформацияПокупателя);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
					
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД Тогда
				
				ИнформацияПокупателя = ДанныеИнформацииПокупателя(СтрокаОбъекта.ЗначениеРеквизита);
				Если Подписан Тогда
					ИнформацияПокупателя.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
				КонецЕсли;
				
				СвойстваДокументаПервогоТитула = ПараметрыПечати.СвойстваДокументаПервогоТитула;
				ИнформацияПокупателя.Вставить("НомерДокументаОтправителя", СвойстваДокументаПервогоТитула.НомерДокументаОтправителя);
				ИнформацияПокупателя.Вставить("ДатаДокументаОтправителя", СвойстваДокументаПервогоТитула.ДатаДокументаОтправителя);
				
				ЗаполнитьТабличныйДокумент_ИнформацияПокупателя(ТабличныйДокумент, ИнформацияПокупателя);
				
			ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
			Иначе
				ДанныеЭДДляПечати = ПолучитьДанныеАктаНаПередачуПравДляПечати(СтрокаОбъекта, ДеревоРазбора);
				
				Если Подписан Тогда
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
					Если ЗначениеЗаполнено(СтруктураПодписей) И СтруктураПодписей.Подписи.Количество() > 1 Тогда
						ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодписьПолучателя", ТекстЭлектроннаяПодпись);
					КонецЕсли;
					
					// Проверка второй подписи.
					Если ПараметрыПечати.Свойство("СтруктураПодписей") И ЗначениеЗаполнено(ПараметрыПечати.СтруктураПодписей)
						И ПараметрыПечати.СтруктураПодписей.Свойство("Подписи")
						И ТипЗнч(ПараметрыПечати.СтруктураПодписей.Подписи) = Тип("ТаблицаЗначений")
						И ПараметрыПечати.СтруктураПодписей.Подписи.Количество() > 1 Тогда
						
							ХранилищеДанныхСертификата = ПараметрыПечати.СтруктураПодписей.Подписи[1].Сертификат;
							ДвоичныеДанныеСертификата = ХранилищеДанныхСертификата.Получить();
							Если ЗначениеЗаполнено(ДвоичныеДанныеСертификата) Тогда
							
								Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
								СвойстваВладельца = СвойстваВладельцаСертификата(Сертификат);
								ДанныеЭДДляПечати.Шапка.Вставить("ДолжностьПолучателя", СвойстваВладельца.Должность);
								ДанныеЭДДляПечати.Шапка.Вставить("ФИОПолучателя", СвойстваВладельца.Фамилия
									+ ?(ЗначениеЗаполнено(СвойстваВладельца.Имя), " " + ВРег(Лев(СвойстваВладельца.Имя, 1)) + "."
										+ ?(ЗначениеЗаполнено(СвойстваВладельца.Отчество), " " + ВРег(Лев(СвойстваВладельца.Отчество, 1) + "."), ""), ""));
								ДанныеЭДДляПечати.Шапка.Вставить("ДатаПодписанияПолучателя", ПараметрыПечати.СтруктураПодписей.Подписи[1].ДатаПодписи);
							КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТабличныйДокументАктНаПередачуПрав(ТабличныйДокумент, ДанныеЭДДляПечати);
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, "Заказ");
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, "Заказ");
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПодтвержденияДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументПодтверждение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеИзвещенияДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументИзвещение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеУточненияДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД);
			ЗаполнитьТабличныйДокументУточнение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПредложенияОбАннулированииДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД);
			ЗаполнитьТабличныйДокументПредложениеОбАннулировании(ТабличныйДокумент, ДанныеЭДДляПечати);
		
		ИначеЕсли ВРег(СтрокаОбъекта.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда 
			
			ДанныеЭДДляПечати = ПолучитьРеквизитыОрганизацииДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументРеквизитыОрганизации_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
		
		КонецЕсли;
		
		ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ТабличныйДокумент);
		
		ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
		ОбщийТабДок.АвтоМасштаб = Истина;
		ОбщийТабДок.ОтображатьЗаголовки = Ложь;
		ОбщийТабДок.ОтображатьСетку = Ложь;
		ОбщийТабДок.ТолькоПросмотр = Истина;
		
		Если ПараметрыПечати.Свойство("СкрыватьСлужебныеОбласти") И ПараметрыПечати.СкрыватьСлужебныеОбласти Тогда
			ИменаОбластей = "ИдентификаторДокумента, ОбластьДД, ОбластьДДСЭП, ОбластьДДБезЭП, ОбластьДДСЭП_УС, ОбластьДДСЭП_У, ОбластьДДСЭП_С";
			ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ОбщийТабДок, ИменаОбластей,
				ТипСмещенияТабличногоДокумента.БезСмещения);
			ИменаОбластей = "ДопДанныеШапки_Шапка";
			ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ОбщийТабДок, ИменаОбластей,
				ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Возврат ОбщийТабДок;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Ошибка формирования табличного документа:
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'формирования табличного документа'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Получает значение реквизита шапки электронного документа по его имени из строки разобранных данных.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - параметры разбора электронного документа.
//  ИмяРеквизита - Строка - имя реквизита, значение которого надо получить.
//  ДеревоРазбора - ДеревоЗначений - полная структура с данными разбора электронного документа.
//
// Возвращаемое значение:
//  Произвольный - значение реквизита шапки электронного документа.
//
Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
			// тогда нашли всего лишь индекс строки.
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает маркер.
//
// Параметры:
//  СтруктураПараметровЗапросаМаркера - Структура - содержит параметры запроса маркера.
//  Соединение - HTTPСоединение - соединение с сервисом.
//  Расшифровывать - Булево - указание, производить ли расшифровку маркера.
//                   Используется если расшифровка будет производиться на клиенте.
//  ПараметрыАутентификации - Структура - параметры аутентификации на сервере интернет-поддержки.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные маркера.
//
Функция ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Расшифровывать = Истина, ПараметрыАутентификации = Неопределено, ПоказыватьОшибки = Ложь) Экспорт
	
	Маркер = Неопределено;
	СертификатПодписи = Неопределено;
	СтруктураПараметровЗапросаМаркера.Свойство("СертификатПодписи", СертификатПодписи);
	Если НЕ Расшифровывать ИЛИ ЗначениеЗаполнено(СертификатПодписи) Тогда
		ПарольКСертификату = Неопределено;
		СтруктураПараметровЗапросаМаркера.Свойство("ПарольПользователя", ПарольКСертификату);
		Если ПарольКСертификату <> Неопределено ИЛИ НЕ Расшифровывать Тогда
			
			// Аутентификация на сайте 1С Логин для сервиса 1С ЭДО.
			ИдентификаторОрганизации = Неопределено;
			СпособОбменаЭД = Неопределено;
			ПолученныйБилет = Неопределено;
			
			СтруктураПараметровЗапросаМаркера.Свойство("СпособОбменаЭД", СпособОбменаЭД);
			Если ЗначениеЗаполнено(СпособОбменаЭД) Тогда
				Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					
					ПолученныйБилет = ОбменСКонтрагентамиСлужебный.БилетНаСайтПоддержки(ПоказыватьОшибки);
					Если Не ЗначениеЗаполнено(ПолученныйБилет) Тогда
						ПараметрыАутентификации = Ложь;
						Возврат Неопределено;
					КонецЕсли;
					СтруктураПараметровЗапросаМаркера.Свойство("ИдентификаторОрганизации", ИдентификаторОрганизации);
					
					// Если доступа к ВебСервису нет, то работу с ним прекращаем.
					Если Не ОбменСКонтрагентамиСлужебный.ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			АдресРесурса = "CertificateLogin";
			АдресРесурса = ?(ПолученныйБилет = Неопределено, АдресРесурса, АдресРесурса + "?ticket=" + ПолученныйБилет);
			АдресРесурса = ?(ИдентификаторОрганизации = Неопределено, АдресРесурса, АдресРесурса + "&edxClientId=" + ИдентификаторОрганизации);
			
			ДанныеСертификата = Неопределено;
			Если НЕ СтруктураПараметровЗапросаМаркера.Свойство("ДанныеСертификата", ДанныеСертификата) Тогда
				ДанныеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатПодписи, "ДанныеСертификата");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
				ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("txt");
				ФайлДДСертификата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("cer");
				Если ТипЗнч(ДанныеСертификата) = Тип("ДвоичныеДанные") Тогда
					ДвоичныеДанныеСертификата = ДанныеСертификата;
				Иначе
					ДвоичныеДанныеСертификата = ДанныеСертификата.Получить();
				КонецЕсли;
				ДвоичныеДанныеСертификата.Записать(ФайлДДСертификата);
				
				Заголовки = "";
				ДобавитьПараметрВЗаголовок(Заголовки, "Integrator-Id", "1C_22BFE9D5-E77D-424A-BC6D-D8A3496C05FE");
				
				Попытка
					Соединение.ОтправитьДляОбработки(ФайлДДСертификата, АдресРесурса, ИмяФайлаРезультата, Заголовки);
				Исключение
					ФайлРезультата = Новый ТекстовыйДокумент;
					ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
					Результат = ФайлРезультата.ПолучитьТекст();
					
					ТекстЗаголовкаСообщения = НСтр("ru = 'Ошибка аутентификации в сервисе 1С-ЭДО'");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
						ТекстЗаголовкаСообщения = НСтр("ru = 'Ошибка аутентификации в сервисе 1С-Такском'");
					КонецЕсли;
					
					ТекстСообщения = "";
					Если ЗначениеЗаполнено(Результат) Тогда
						Результат = СтрЗаменить(Результат, """", "");
						Результат = СтрЗаменить(Результат, ":", ",");
						МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
						Если МассивПараметровОшибки.Количество() >= 7 Тогда
							
							ШаблонОшибки = НСтр("ru = '%1: %2.'");
							ТекстОшибкиОператора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
								МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
							
							КодОшибки = МассивПараметровОшибки[5];
							
							ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
								КодОшибки, ТекстОшибкиОператора);
							
							ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
						ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
					КонецЕсли;
					
					ШаблонСообщения = НСтр("ru = '%1
						|Необходимо:
						|Проверить верность введения логина\пароля;
						|Проверить наличие ИТС по рег. номеру;
						|Проверить окончание срока действия договора ИТС на сайте;
						|Проверить актуальность платформы (доступ 80 и 443 порта);
						|Проверить авторизацию на сайте интернет-поддержки;
						|Добавить в исключения антивируса\брандмауэра платформы 1С.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ТекстСообщения);
					
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
						Результат,
						ТекстСообщения);
					
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлДДСертификата);
					Возврат Неопределено;
				КонецПопытки;
				
				Если Расшифровывать Тогда
					Маркер = РасшифроватьМаркер(ИмяФайлаРезультата, ПарольКСертификату);
					СтруктураПараметровЗапросаМаркера.Вставить("МаркерРасшифрованный", Маркер);
				Иначе
					Маркер = Новый ДвоичныеДанные(ИмяФайлаРезультата);
					СтруктураПараметровЗапросаМаркера.Вставить("МаркерЗашифрованный", Маркер);
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлДДСертификата);
			Иначе
				ПодробноеПредставлениеОшибки = НСтр("ru = 'Не удалось получить данные сертификата криптографии %1.'");
				ПодробноеПредставлениеОшибки = СтрЗаменить(ПодробноеПредставлениеОшибки, "%1", СертификатПодписи);
				ТекстСообщения = НСтр("ru = 'Ошибка аутентификации в сервисе ЭДО.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
															НСтр("ru = 'Аутентификация в сервисе ЭДО'"),
															ПодробноеПредставлениеОшибки,
															ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не указан сертификат аутентификации в сервисе ЭДО.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Маркер;
	
КонецФункции

// Получение объекта соединение.
//
// Параметры:
//  СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД - способ обмена.
// 
// Возвращаемое значение:
//  HTTPСоединение - HTTP соединение.
//
Функция ПолучитьСоединение(СпособОбменаЭД) Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		НастройкиСервисаЭДО = СтруктураНастроекТакском();
	
	ИначеЕсли СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		НастройкиСервисаЭДО = СтруктураНастроек1СЭДО();
	
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(
		НастройкиСервисаЭДО.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронноеВзаимодействиеСлужебный.СформироватьПрокси(Протокол);
	Таймаут = 30;
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

// Функция - Результат операции ЭДОПолучить
//
// Параметры:
//  РасшифрованныйМаркер - строка - расшифрованный маркет полученный от сервера ЭДО.
//  СпособОбмена		 - перечисленияСсылка.СпособыОбменаЭД - способ обмена (ЭДО или Такском).
//  АдресРесурса		 - строка - адрес вызываемого метода.
//  ВидОперации			 - строка - представление выполняемой операции.
// 
// Возвращаемое значение:
//  ОбъектXDTO - объект XDTO, полученный чтением xml полученного с сервера.
//
Функция РезультатОперацииЭДОПолучить(РасшифрованныйМаркер, СпособОбмена, АдресРесурса, ВидОперации) Экспорт
	
	Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныйМаркер);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Assistant-Key", Маркер);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	Соединение = ПолучитьСоединение(СпособОбмена);
	
	
	ВидОперации = НСтр("ru = 'Получение информации о свойствах подписки ЭДО'");

	Попытка
		Ответ = Соединение.Получить(Запрос);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщения,);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Если Не Ответ.КодСостояния = 200 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщения);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	ХМЛ = Новый ЧтениеXML;
	
	Попытка
		
		ХМЛ.УстановитьСтроку(ТелоОтвета);
		РезультатXDTO = ФабрикаXDTO.ПрочитатьXML(ХМЛ);
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО.'");
		ОписаниеОперации = НСтр("ru = 'Чтение ответа сервиса ЭДО'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 2);
		
	КонецПопытки;
		
	Возврат РезультатXDTO;
	
КонецФункции

// Получает данные электронного документа из файла, заполняет дерево значений для загрузки в ИБ,
// создает/изменяет необходимые объекты ИБ.
// 
// Параметры:
//  СтруктураПараметров - Структура - структура параметров для разбора электронного документа.
//
// Возвращаемое значение:
//  Структура - структура параметров с реквизитами созданных/измененных объектов ИБ.
//
Функция ПолучитьДанныеИзФайла(СтруктураПараметров) Экспорт
	
	ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	Если НЕ СтруктураПараметров.Свойство("ФайлДанныхСсылка") Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НЕ (СтруктураПараметров.Свойство("НаправлениеЭД", НовыйЭД.НаправлениеЭД)
			И ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД)) Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	КонецЕсли;
	
	ФайлДопДанныхСсылка = "";
	ДеревоДопДанных = Неопределено;
	Если СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанныхСсылка) И ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлДопДанныхСсылка);
		ДвоичныеДанныеФайла.Записать(ВремФайл);
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ВремФайл);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
		СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ОшибкаЗаписи = Ложь;
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураПараметров.ФайлДанныхСсылка);
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОшибкаЧтенияЭД = Ложь;
	ПрочитатьФайлCMLпоXDTO(ВремФайл, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Если Не ОшибкаЧтенияЭД Тогда
		
		// Дозаполняем структуру параметров из файла данных.
		ДополнительныеРеквизиты = Новый Структура;
		Если (НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
			И (НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				ИЛИ НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД)
			
			ИЛИ (НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)
				И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				
			ИЛИ (НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
				
			ДеревоДанных = НовыйЭД.ЗначениеРеквизита;
			
			НомерДокументаОтправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "НомерДокумента");
			НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
			Если ЗначениеЗаполнено(НомерИсправления) Тогда
				ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
				НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
			КонецЕсли;
			ДатаДокументаОтправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ДатаДокумента");
				
			СуммаДокумента = 0;
			СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
			Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
				СуммаДокумента = СуммаДокумента + ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			КонецЦикла;
		Иначе
			НомерДокументаОтправителя = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Номер");
			НомерИсправления = ПолучитьРеквизитШапкиЭД(НовыйЭД, "НомерИсправления");
			Если ЗначениеЗаполнено(НомерИсправления) Тогда
				ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
				НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
			КонецЕсли;
			ДатаДокументаОтправителя = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Дата");
			
			СуммаДокумента = ПолучитьРеквизитШапкиЭД(НовыйЭД, "СуммаДокумента");
			Если Не ЗначениеЗаполнено(СуммаДокумента) Тогда
				СуммаДокумента = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Сумма");
			КонецЕсли;
			
			ОрганизацияПолучатель = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
			Контрагент = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора);
			
			Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				Или НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				
				ИдентификаторДокументаОснования = ПолучитьРеквизитШапкиЭД(НовыйЭД, "ИдентификаторДокументаОснования", ДеревоРазбора);
			КонецЕсли;
			
			ПространствоИмен = ПолучитьРеквизитШапкиЭД(НовыйЭД, "ПространствоИмен", ДеревоРазбора);
			Если ЗначениеЗаполнено(ПространствоИмен) Тогда
				ДополнительныеРеквизиты.Вставить("ПространствоИмен", ПространствоИмен);
			КонецЕсли;
		КонецЕсли;
	
		СтруктураПараметров.Вставить("ВидЭД",      НовыйЭД.ВидЭД);
		НомерЭД = НовыйЭД.ИД;
		Если Не ЗначениеЗаполнено(НомерЭД) Тогда
			УИД = Новый УникальныйИдентификатор;
			НомерЭД = Строка(УИД) + "##1";
		КонецЕсли;
		СтруктураПараметров.Вставить("НомерЭД", НомерЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерВерсииЭД = ОписаниеТипа.ПривестиЗначение(НомерВерсииЭД);
		СтруктураПараметров.Вставить("НомерВерсииЭД", НомерВерсииЭД);
		СтруктураПараметров.Вставить("НаправлениеЭД", НовыйЭД.НаправлениеЭД);
		СтруктураПараметров.Вставить("Загружен",      НЕ ОшибкаЗаписи);
		
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ДатаДокументаОтправителя);
		Если ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
			СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель);
		КонецЕсли;
		СтруктураПараметров.Вставить("Контрагент",                      Контрагент);
		СтруктураПараметров.Вставить("СуммаДокумента",                  СуммаДокумента);
		СтруктураПараметров.Вставить("ИдентификаторДокументаОснования", ИдентификаторДокументаОснования);
		СтруктураПараметров.Вставить("ДополнительныеРеквизиты",         ДополнительныеРеквизиты);
		
	КонецЕсли;
	СтруктураПараметров.Вставить("Загружен", НЕ ОшибкаЗаписи);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Сохранение данных объекта.
//
// Параметры:
//  СтруктураПараметров	 - Структура - параметры сохранения.
//  СпособОбработки		 - Строка - способ обработки электронного документа.
// 
// Возвращаемое значение:
//  ДокументСсылка - документ учета.
//
Функция СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки = "") Экспорт 
	
	ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	Если НЕ СтруктураПараметров.Свойство("ФайлДанныхСсылка") Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ДокументыУчета") Тогда
		
		ДокументыУчета = СтруктураПараметров.ДокументыУчета;
	Иначе
		ДокументыУчета = Неопределено;
	КонецЕсли;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НЕ (СтруктураПараметров.Свойство("НаправлениеЭД", НовыйЭД.НаправлениеЭД)
		И ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД)) Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	КонецЕсли;
	
	ФайлДопДанныхСсылка = "";
	ДеревоДопДанных = Неопределено;
	Если СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанныхСсылка) И ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлДопДанныхСсылка);
		ДвоичныеДанныеФайла.Записать(ВремФайл);
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ВремФайл);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
		СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ОшибкаЗаписи = Ложь;
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураПараметров.ФайлДанныхСсылка);
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОшибкаЧтенияЭД = Ложь;
	ПрочитатьФайлCMLпоXDTO(ВремФайл, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Если Не ОшибкаЧтенияЭД Тогда
		
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты.
		Если Не ЗначениеЗаполнено(ДокументыУчета) Или СтруктураПараметров.Свойство("ЗаполнитьДокумент") Тогда
			
			ЗаполнитьДокументыУчета = Истина;
			
			ДокументУчета = Неопределено;
			Если ЗначениеЗаполнено(ДокументыУчета) Тогда
				ДокументУчета = ДокументыУчета[0];
			КонецЕсли;
			
			Попытка
				Если ВРег(НовыйЭД.ОписаниеОбъекта) = ВРег("ПередачаТоваров") Тогда
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров(НовыйЭД.ЗначениеРеквизита, ДокументУчета, , СпособОбработки);
					
				ИначеЕсли ВРег(НовыйЭД.ОписаниеОбъекта) = ВРег("ПередачаРезультатовРабот") Тогда
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот(НовыйЭД.ЗначениеРеквизита, ДокументУчета, , СпособОбработки);
					
				ИначеЕсли НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент(НовыйЭД.ЗначениеРеквизита, ДокументыУчета, , СпособОбработки);
					ЗаполнитьДокументыУчета = Ложь;
					
				ИначеЕсли НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД Тогда
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДСчетФактуру(НовыйЭД.ЗначениеРеквизита, ДокументУчета, , СпособОбработки);
					
				ИначеЕсли НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
					
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйКорректировочныйДокумент(НовыйЭД.ЗначениеРеквизита, ДокументыУчета, , СпособОбработки);
					ЗаполнитьДокументыУчета = Ложь;
					
				ИначеЕсли НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДСчетФактуру(НовыйЭД.ЗначениеРеквизита, ДокументУчета, , СпособОбработки);
					
				ИначеЕсли (НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)
					И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДДокументОПередаче(НовыйЭД.ЗначениеРеквизита, ДокументУчета, , СпособОбработки);
					
				ИначеЕсли НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДДокументОбИзмененииСтоимости(НовыйЭД.ЗначениеРеквизита, ДокументУчета, , СпособОбработки);
					
				Иначе
			
					ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
					
					ДокументУчета = ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора,
						ДокументУчета, , СпособОбработки);
					Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
						ЗаполнитьДокументыУчета = Ложь;
					КонецЕсли;
				КонецЕсли;
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ТекстСообщения);
				ОшибкаЗаписи = Истина;
			КонецПопытки;
				
			
			Если ЗаполнитьДокументыУчета Тогда
				ДокументыУчета = Новый Массив;
				ДокументыУчета.Добавить(ДокументУчета);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДокументыУчета) Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось создать документ базы данных.'");
				АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
				Если АктуальныеВидыЭД.Найти(НовыйЭД.ВидЭД) = Неопределено Тогда
					ШаблонСообщения = НСтр("ru = 'Электронный документ вида ""%1"" в текущей конфигурации не поддерживается'");
					ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НовыйЭД.ВидЭД);
				Иначе
					ТекстЖурналаРегистрации = НСтр("ru = 'Необходимо проверить работу функции
						|ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД'");
				КонецЕсли;
				ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					ВидОперации, ТекстЖурналаРегистрации, ТекстСообщения);
					ОшибкаЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументыУчета;
	
КонецФункции

// Возвращает дерево с данными файла.
//
// Параметры:
//  ПолноеИмяФайла - Строка - Строка, путь к файлу.
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа.
//  ФайлДопДанных - Строка - путь к файлу с дополнительными данными.
//  ФайлКартинок - Строка - путь к файлу - архиву, содержащему картинки.
//
// Возвращаемое значение:
//  Структура - данные дерева.
//
Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено, ФайлДопДанных = Неопределено, ФайлКартинок = Неопределено) Экспорт
	
	ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;
	
	Если ФайлДопДанных <> Неопределено Тогда
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Если ФайлКартинок <> Неопределено Тогда
		ДеревоКартинок = ДеревоКартинок(ФайлКартинок);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоКартинок", ДеревоКартинок);
	КонецЕсли;
	
	ОшибкаЧтенияЭД = Ложь;
	ПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД);
	
	Если ОшибкаЧтенияЭД Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, НовыйЭД);
	
КонецФункции

// Устанавливает состояние ЭД в "Обмен завершен с исправлением"
//
Процедура УстановитьСостояниеОбменЗавершенСИсправлением(ИзменяемыеДокументы) Экспорт
	
	Если ИзменяемыеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением;
	
	Исключения = Новый Массив;
	Исключения.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка);
	Исключения.Добавить(Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, Состояние, Исключения);
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка) Экспорт
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов();
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбъектCML = ПолучитьОбъектТипаCML(ИмяОбъекта, ПространствоИменСхемы);
	
	Если ОбъектCML <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO") Тогда
		СвойстваОбъекта = ОбъектCML.Свойства();
		ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);
		Если ИскомоеСвойство <> Неопределено Тогда
			Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);
			ВозвращаемоеЗначение = Фасет.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция определяет документы-основания для ВладелецФайла по идентификаторам документов ИБ.
//
// Параметры:
//   МассивИД                  - Массив - содержит строки идентификаторов документов-оснований (из базы отправителя).
//   СтруктураПараметровПоиска - Структура - дополнительные отборы для оптимизации запроса:
//      Ключ     - Строка - Наименование отбора, совпадает с именем реквизита справочника ЭДПрисоединенныеФайлы.
//      Значение - Произвольный - отбираемое значение реквизита ЭД.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит 2 колонки:
//      Ссылка  - ДокументСсылка - ссылка на документ-основание.
//      НомерЭД - Строка - идентификатор документа-основания.
//
Функция ТаблицаЗначенийДокументовОснованийПоИдентификаторам(МассивИД, СтруктураПараметровПоиска) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.НомерЭД
		|ПОМЕСТИТЬ вт_ЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы";
		
	Если МассивИД.Количество() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + " Где (ЭДПрисоединенныеФайлы.НомерЭД = &ИДОснованийВладельца)";
		Запрос.УстановитьПараметр("ИДОснованийВладельца", МассивИД[0]);
	Иначе
		ТекстЗапроса = ТекстЗапроса + " Где (ЭДПрисоединенныеФайлы.НомерЭД В (&ИДОснованийВладельца))";
		Запрос.УстановитьПараметр("ИДОснованийВладельца", МассивИД);
	КонецЕсли;
	
	НаправлениеЭД = Неопределено;
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровПоиска Цикл
		ИмяРеквизита = ЭлементСтруктуры.Ключ;
		Если ВРег(ИмяРеквизита) = ВРег("НаправлениеЭД") Тогда
			НаправлениеЭД = ЭлементСтруктуры.Значение;
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДПрисоединенныеФайлы.ВладелецФайла Ссылка Документ.ЭлектронныйДокументВходящий";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " И ЭДПрисоединенныеФайлы.ВладелецФайла Ссылка Документ.ЭлектронныйДокументИсходящий";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаправлениеЭД = Неопределено Тогда
		
		Запрос.Текст = ТекстЗапроса
		+ ТекстРазделитель()
		+ ТекстЗапросаВходящийДокумент()
		+ "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
		+ ТекстЗапросаДокументИсходящий();
		
	Иначе
		
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			Запрос.Текст = ТекстЗапроса
			+ ТекстРазделитель()
			+ ТекстЗапросаВходящийДокумент();
			
		Иначе
			
			Запрос.Текст = ТекстЗапроса
			+ ТекстРазделитель()
			+ ТекстЗапросаДокументИсходящий();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТЗ = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТЗ;
	
КонецФункции

Функция ТипДокументаПоСтроке(ТипДокумента) Экспорт
	
	ФорматированнаяСтрока = НРег(СокрЛП(ТипДокумента));
	Если ФорматированнаяСтрока = "account" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.СчетНаОплату;
	ИначеЕсли ФорматированнаяСтрока = "statement" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.АктВыполненныхРабот;
	ИначеЕсли ФорматированнаяСтрока = "consignment" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ТоварнаяНакладная;
	ИначеЕсли ФорматированнаяСтрока = "paymentorder" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ПлатежноеПоручение;
	ИначеЕсли ФорматированнаяСтрока = "contract" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Договор;
	ИначеЕсли ФорматированнаяСтрока = "statementappendix" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ПриложениеКАкту;
	ИначеЕсли ФорматированнаяСтрока = "guaranteeletter" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ГарантийноеПисьмо;
	ИначеЕсли ФорматированнаяСтрока = "other" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Прочее;
	ИначеЕсли ФорматированнаяСтрока = "reconciliationstatement" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.АктСверки;
	ИначеЕсли ФорматированнаяСтрока = "offsettingstatement" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.АктВзаимозачета;
	ИначеЕсли ФорматированнаяСтрока = "ks11" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.КС11;
	ИначеЕсли ФорматированнаяСтрока = "ks2" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.КС2;
	ИначеЕсли ФорматированнаяСтрока = "ks3" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.КС3;
	ИначеЕсли ФорматированнаяСтрока = "report" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Отчет;
	ИначеЕсли ФорматированнаяСтрока = "notification" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Уведомление;
	ИначеЕсли ФорматированнаяСтрока = "edoagreement" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.СоглашениеОбЭДО;
	ИначеЕсли ФорматированнаяСтрока = "formalizedstatementcustomer"
		ИЛИ ФорматированнаяСтрока = "formalizedstatementvendor"
		ИЛИ ФорматированнаяСтрока = "formalizedconsignmentcustomer"
		ИЛИ ФорматированнаяСтрока = "formalizedconsignmentvendor"
		ИЛИ ФорматированнаяСтрока = "invoice"
		ИЛИ ФорматированнаяСтрока = "correctiveinvoice"
		ИЛИ ФорматированнаяСтрока = "receivenotification"
		ИЛИ ФорматированнаяСтрока = "specificationnotice"
		ИЛИ ФорматированнаяСтрока = "sendingtimeconfirmation"
		ИЛИ ФорматированнаяСтрока = "cancellationoffer"
		ИЛИ ФорматированнаяСтрока = "formalizedworkresultvendor"
		ИЛИ ФорматированнаяСтрока = "formalizedtradingvendor"
		ИЛИ ФорматированнаяСтрока = "formalizedworkresultcustomer"
		ИЛИ ФорматированнаяСтрока = "formalizedtradingcustomer"
		ИЛИ ФорматированнаяСтрока = "expinvoice"
		ИЛИ ФорматированнаяСтрока = "corexpinvoice"
		ИЛИ ФорматированнаяСтрока = "expinvoiceandprimaryaccountingdocumentvendor"
		ИЛИ ФорматированнаяСтрока = "expinvoiceandprimaryaccountingdocumentcustomer"
		ИЛИ ФорматированнаяСтрока = "corexpinvoiceandprimaryaccountingdocumentvendor"
		ИЛИ ФорматированнаяСтрока = "corexpinvoiceandprimaryaccountingdocumentcustomer"
		ИЛИ ФорматированнаяСтрока = "corprimaryaccountingdocumentcustomer"
		ИЛИ ФорматированнаяСтрока = "corprimaryaccountingdocumentvendor"
		ИЛИ ФорматированнаяСтрока = "primaryaccountingdocumentcustomer"
		ИЛИ ФорматированнаяСтрока = "primaryaccountingdocumentvendor"
		ИЛИ ФорматированнаяСтрока = "other" Тогда
		
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Прочее;
	Иначе
		ЗаписьВЖурнал = НСтр("ru = 'Не задано сопоставление типа документа из карточки пакета ЭД ""%1"",
			|с перечислением конфигурации ""Типы ЭД""'");
		ЗаписьВЖурнал = СтрЗаменить(ЗаписьВЖурнал, "%1", ТипДокумента);
		ВидОперации = НСтр("ru = 'Чтение карточки пакета ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ЗаписьВЖурнал);
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Прочее;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает ключевые данные файла из заголовка электронного документа с помощью XDTO-пакета.
//
// Параметры:
//  ИмяФайла - Строка - путь к файлу, данные которого надо получить;
//  Структура - Структура параметров с реквизитами электронного документа;
//  ОписаниеОшибки - Строка - подробное описание ошибки.
//
Процедура ПрочитатьШапкуФайлаCMLпоXDTO(ДанныеФайлаЭД, СтруктураПараметров, ОписаниеОшибки) Экспорт
	
	ВидЭД = Неопределено;
	
	Отправитель = Неопределено;
	ДатаФормированияЭДОтправителем = Неопределено;
	ИдЭДВладельца = Неопределено;
	
	Если НЕ ДанныеФайлаЭД.Свойства().Получить("ИД") = Неопределено Тогда
		ИдЭД = ДанныеФайлаЭД.Ид;
	КонецЕсли;
	
	// Блок для форматов ФНС
	Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
		
		ИдЭД = ДанныеФайлаЭД.ИдФайл;
		Если Найти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPR") > 0 Тогда
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			ПризнакПродавца = Истина;
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаИнфПр;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
				+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремИнфПр, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPOK") > 0 Тогда
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			ПризнакПродавца = Ложь;
			ИдЭДВладельца = Прав(СокрП(ДанныеФайлаЭД.ИнфПок.ИдИнфПрод.ИдФайлИнфПр), 36);
			ДатаДок = ДанныеФайлаЭД.ИнфПок.ДатаИнфПок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.ИнфПок.ВремИнфПок, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPR") > 0 Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
			ПризнакПродавца = Истина;
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаИнфПр;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
				+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремИнфПр, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPOK") > 0 Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
			ПризнакПродавца = Ложь;
			ИдЭДВладельца = Прав(СокрП(ДанныеФайлаЭД.ИнфПок.ИдИнфПрод.ИдФайлИнфПр), 36);
			ДатаДок = ДанныеФайлаЭД.ИнфПок.ДатаИнфПок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.ИнфПок.ВремИнфПок, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			ПризнакПродавца = Истина;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
			ПризнакПродавца = Истина;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			ПризнакПродавца = Истина;
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаДок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремДок, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда // торг-12 титул продавца
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			ПризнакПродавца = Истина;
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаДок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремДок, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PTORG12") > 0 Тогда // торг-12 титул покупателя
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
			ПризнакПродавца = Ложь;
			ИдЭДВладельца = Прав(СокрП(ДанныеФайлаЭД.Документ.ИдТНО.ИдФайлТН), 36);
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаДок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремДок, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PKORDOC") > 0 Тогда // корректировочный торг-12 титул покупателя
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			ПризнакПродавца = Ложь;
			ИдЭДВладельца = Прав(СокрП(ДанныеФайлаЭД.Документ.ИдТНО.ИдФайлТН), 36);
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаДок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремДок, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
			ПространствоИмен = ПространствоИменАкта(ДанныеФайлаЭД, "IAKTPRM");
			АктВНовомФормате = (ПространствоИмен = "IAKTPRM2");
			
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			ПризнакПродавца = Истина;
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаДок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ ?(АктВНовомФормате, "", СтрЗаменить(ДанныеФайлаЭД.Документ.ВремДок, ".", "")));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
			ПространствоИмен = ПространствоИменАкта(ДанныеФайлаЭД, "ZAKTPRM");
			АктВНовомФормате = (ПространствоИмен = "ZAKTPRM2");
			
			ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
			ПризнакПродавца = Ложь;
			ИдЭДВладельца = Прав(СокрП(ДанныеФайлаЭД.Документ.СвАктИ.ИдАктИ.ИдФайлАктИ), 36);
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаДок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ ?(АктВНовомФормате, "", СтрЗаменить(ДанныеФайлаЭД.Документ.ВремДок, ".", "")));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда // Передача товаров продавец
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			ПризнакПродавца = Истина;
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаИнфПр;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремИнфПр, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPOK") > 0 Тогда // Передача товаров покупатель
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
			ПризнакПродавца = Ложь;
			ИдЭДВладельца = Прав(СокрП(ДанныеФайлаЭД.Документ.ИдДокПТПр.ИдФайлИнфПр), 36);
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаИнфПок;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремИнфПок, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда // Передача работ исполнитель
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			ПризнакПродавца = Истина;
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаИнфИсп;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремИнфИсп, ".", ""));
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUZAK") > 0 Тогда // Передача работ исполнитель
			ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
			ПризнакПродавца = Ложь;
			ИдЭДВладельца = Прав(СокрП(ДанныеФайлаЭД.Документ.ИдДокПРУИсп.ИдФайлИнфИсп), 36);
			ДатаДок = ДанныеФайлаЭД.Документ.ДатаИнфЗак;
			ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
			+ СтрЗаменить(ДанныеФайлаЭД.Документ.ВремИнфЗак, ".", ""));

		КонецЕсли;
	КонецЕсли;
	
	// Блок для формата 4.02
	Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
		Отправитель = "Продавец";
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Отправитель = "Продавец";
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		Отправитель = "Продавец";
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		Отправитель = "Покупатель";
		ПризнакПродавца = Ложь;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		Отправитель = "Покупатель";
		ПризнакПродавца = Ложь;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
		Если ДанныеФайлаЭД.Роль = "Продавец" Тогда
			ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
		ИначеЕсли ДанныеФайлаЭД.Роль = "Покупатель" Тогда	
			ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
		КонецЕсли;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02") Тогда
		ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
		ДатаДокументаОтправителя  = ДанныеФайлаЭД.ДатаФормирования;
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		ПризнакПродавца = Истина;
	КонецЕсли;
	
	// Блок для формата 2.08
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация", ПространствоИменСхемы) Тогда
		Если Не ДанныеФайлаЭД.Каталог = Неопределено Тогда
			ИдЭД = ДанныеФайлаЭД.Каталог.Ид;
			ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
			ПризнакПродавца = Истина;
			ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
		ИначеЕсли Не ДанныеФайлаЭД.Документ = Неопределено И ДанныеФайлаЭД.Документ.Количество() > 0 Тогда
			ЭДокумент = ДанныеФайлаЭД.Документ[0];
			Если ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Отчет о продажах комиссионного товара'")) Тогда
				ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
				Отправитель = "Покупатель";
				ПризнакПродавца = Ложь;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Отчет о списании комиссионного товара'")) Тогда
				
				ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
				Отправитель = "Покупатель";
				ПризнакПродавца = Ложь;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Счет на оплату'")) Тогда
				
				ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
				Отправитель = "Продавец";
				ПризнакПродавца = Истина;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Заказ товара'")) Тогда
				
				Если ЭДокумент.Роль = "Продавец" Тогда
					ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
					Отправитель = "Продавец";
					ПризнакПродавца = Истина;
				ИначеЕсли ЭДокумент.Роль = "Покупатель" Тогда	
					ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
					Отправитель = "Покупатель";
					ПризнакПродавца = Ложь;
				КонецЕсли;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Передача прав'")) Тогда
				
				ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
			КонецЕсли;
			
		ИначеЕсли Не ДанныеФайлаЭД.ПакетПредложений = Неопределено Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
			ПризнакПродавца = Истина;
			ДатаДокументаОтправителя  = ДанныеФайлаЭД.ПакетПредложений.ДействительноС;
			ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
			ПризнакПродавца = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЭД) Тогда
		ОписаниеОшибки = НСтр("ru = 'Неизвестный тип ЭД при чтении данных.'");
		Возврат;
	Иначе
		АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
		Если АктуальныеВидыЭД.Найти(ВидЭД) = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Документы вида ""%1"" не поддерживаются в текущей конфигурации.'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ВидЭД);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерЭД", ИдЭД);
	СтруктураПараметров.Вставить("ВидЭД",   ВидЭД);
	СтруктураПараметров.Вставить("ПризнакПродавца", ПризнакПродавца);
	СтруктураПараметров.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
	СтруктураПараметров.Вставить("ИдЭДВладельца", ИдЭДВладельца);
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
	
КонецПроцедуры

Процедура ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(ИмяФайла, КодРегламента, КодТранзакции, СтруктураФайлаЭД) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	ИдЭД                      = Неопределено;
	ВидЭД                     = Неопределено;
	НаправлениеЭД             = Неопределено;
	НомерДокументаОтправителя = Неопределено;
	ДатаДокументаОтправителя  = Неопределено;
	ТипЭлементаВерсииЭД       = Неопределено;
	СтатусЭДВладельца         = Неопределено;
	ТекстСообщения            = Неопределено;
	ОписаниеОшибки            = Неопределено;
	ДополнительныеДанные      = Новый Структура;
	ТекстУточнения            = Неопределено;
	
	СтруктураУчастников = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		Если КодТранзакции = "ErrorMessage" Тогда
			ОписаниеОшибки      = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(ЭД.КодОшибки, ЭД.Описание);
			ВидЭД               = Перечисления.ВидыЭД.Ошибка;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка;
			СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОшибкаПередачи;
		Иначе
			ИдЭД = ЭД.ИдФайл;
			НомерВерсииЭД = 0;
			
			Если КодРегламента = "Nonformalized" ИЛИ КодРегламента = "Formalized" Тогда
				
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД               = Перечисления.ВидыЭД.Подтверждение;
					Если ЭД.Документ.КНД = "1115112" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
					Иначе
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО;
					КонецЕсли;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "CorrectionNotice"
					ИЛИ КодТранзакции = "MainDocumentReject"
					ИЛИ КодТранзакции = "CancellationOfferReject" Тогда
					ВидЭД               = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					
					СвойстваСвУведУточ = ЭД.Документ.СвУведУточ.Свойства();
					Если СвойстваСвУведУточ.Получить("ДатаВремяПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = ПолучитьДатуВремяИзСтроки(ЭД.Документ.СвУведУточ.ДатаВремяПол);
					ИначеЕсли СвойстваСвУведУточ.Получить("ДатаПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
							+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
					КонецЕсли;
					
					ТекстУточнения = "";
					Если СвойстваСвУведУточ.Получить("ТекстУведУточ") <> Неопределено
						И ЭД.Документ.СвУведУточ.ТекстУведУточ <> Неопределено
						И ТипЗнч(ЭД.Документ.СвУведУточ.ТекстУведУточ) = Тип("Строка") Тогда
						
						ТекстУточнения = ЭД.Документ.СвУведУточ.ТекстУведУточ;
					КонецЕсли;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД               = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Доставлен;
					
					СвойстваСвИзвПолуч = ЭД.Документ.СвИзвПолуч.Свойства();
					Если СвойстваСвИзвПолуч.Получить("ДатаВремяПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = ПолучитьДатуВремяИзСтроки(ЭД.Документ.СвИзвПолуч.ДатаВремяПол);
					ИначеЕсли СвойстваСвИзвПолуч.Получить("ДатаПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
							+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
					КонецЕсли;
				ИначеЕсли КодТранзакции = "CancellationOffer" Тогда
					ВидЭД               = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании;
					ДатаДокументаОтправителя  = Дата(1, 1, 1);
					ТекстУточнения      = ЭД.Документ.СвПредАн.ТекстПредАн;
					ДополнительныеДанные.Вставить("НаименованиеВладельца", СокрЛП(ЭД.Документ.СвПредАн.СведАнФайл.ИмяАнФайла));
				Иначе
					ТекстСообщения = НСтр("ru = 'Данный вид электронного документа ""%1"" не поддерживается в текущей версии программы.
						|Необходимо обновить конфигурацию до актуальной версии.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодТранзакции);
					ТекстОшибки = НСтр("ru = 'При чтении данных из файла ""%1"" возникла ошибка: неизвестный код транзакции ""%2"".'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяФайла, КодТранзакции);
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
						ТекстОшибки, ТекстСообщения);
				КонецЕсли;
			Иначе
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "CustomerInformationPostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "SendConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Доставлен;
					
					СвойстваСвИзвПолуч = ЭД.Документ.СвИзвПолуч.Свойства();
					Если СвойстваСвИзвПолуч.Получить("ДатаВремяПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = ПолучитьДатуВремяИзСтроки(ЭД.Документ.СвИзвПолуч.ДатаВремяПол);
					ИначеЕсли СвойстваСвИзвПолуч.Получить("ДатаПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
							+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
					КонецЕсли;
				ИначеЕсли КодТранзакции = "CorrectionNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
						
					ТекстУточнения = "";
					СвойстваСвУведУточ = ЭД.Документ.СвУведУточ.Свойства();
					Если СвойстваСвУведУточ.Получить("ТекстУведУточ") <> Неопределено
						И ЭД.Документ.СвУведУточ.ТекстУведУточ <> Неопределено
						И ТипЗнч(ЭД.Документ.СвУведУточ.ТекстУведУточ) = Тип("Строка") Тогда
						
						ТекстУточнения = ЭД.Документ.СвУведУточ.ТекстУведУточ;
					КонецЕсли;
				ИначеЕсли КодТранзакции = "CorrectionNoticeReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отклонен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				ИначеЕсли КодТранзакции = "CancellationOffer" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании;
					ДатаДокументаОтправителя = Дата(1, 1, 1);
					ТекстУточнения           = ЭД.Документ.СвПредАн.ТекстПредАн;
					ДополнительныеДанные.Вставить("НаименованиеВладельца", СокрЛП(ЭД.Документ.СвПредАн.СведАнФайл.ИмяАнФайла));
				Иначе
					ТекстСообщения = НСтр("ru = 'Данный вид электронного документа ""%1"" не поддерживается в текущей версии программы.
						|Необходимо обновить конфигурацию до актуальной версии.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодТранзакции);
					ТекстОшибки = НСтр("ru = 'При чтении данных из файла ""%1"" возникла ошибка: неизвестный код транзакции ""%2"".'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяФайла, КодТранзакции);
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
						ТекстОшибки, ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		СтруктураФайлаЭД.НомерЭД                   = ИдЭД;
		СтруктураФайлаЭД.НаправлениеЭД             = НаправлениеЭД;
		СтруктураФайлаЭД.СтатусЭДВладельца         = СтатусЭДВладельца;
		СтруктураФайлаЭД.ТипЭлементаВерсииЭД       = ТипЭлементаВерсииЭД;
		СтруктураФайлаЭД.ОписаниеОшибки            = ОписаниеОшибки;
		СтруктураФайлаЭД.ТекстУточнения            = ТекстУточнения;
		СтруктураФайлаЭД.ДополнительныеДанные      = ДополнительныеДанные;
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Параметры файлов ЭДО.
//
// Параметры:
//  ФайлИнформации	 - Строка - имя файла электронного документа.
//  ФайлКарточки	 - Строка - имя файла карточки.
// 
// Возвращаемое значение:
//  Соответствие - параметры файлов.
//
Функция ПараметрыФайловЭДО(ФайлИнформации, ФайлКарточки) Экспорт
	
	МассивПутейКПодписям = Новый Массив;
	СоответствиеВозврата  = Новый Соответствие;
	КодТранзакции = "";
	КодРегламента = "";
	ТипКарточкиЭД = Перечисления.ТипыЭД.Прочее;
	ТипКарточкиЭДПолучен = Ложь;
	НомерЭДКарточки = Строка(Новый УникальныйИдентификатор);
	НомерЭД = "";
	СтруктураДопДанных = Новый Структура;
	ТребуетсяПодтверждение = Истина;
	ПроизвольныйЭД = Ложь;
	МассивИдентификаторовДокументовОснований = Новый Массив;
	
	ОбъектXML = Новый ЧтениеXML;
	СтруктураЗначений = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
			ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card"));
		ОбъектXML.Закрыть();
		Если ЭД.Identifiers.ExternalIdentifier <> Неопределено Тогда
			НомерЭДКарточки = ЭД.Identifiers.ExternalIdentifier;
		КонецЕсли;
		Если ЭД.Description <> Неопределено Тогда
			Если ЭД.Description.AdditionalData <> Неопределено И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				СтруктураДопПараметров = Новый Структура;
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					Если Свойство.Name = "ParentDocument" Тогда
						МассивИдентификаторовДокументовОснований.Добавить(Свойство.Value);
					ИначеЕсли Свойство.Name = "DocumentType" Тогда
						// После расширения состава типов документов, типы передаются в доп.данных
						ТипКарточкиЭД = ТипДокументаПоСтроке(Свойство.Value);
						ТипКарточкиЭДПолучен = Истина;
					ИначеЕсли Свойство.Name = "Комментарий" Тогда
						СтруктураДопДанных.Вставить("КомментарийЭД", Свойство.Value);
					Иначе
						СтруктураДопПараметров.Вставить(Свойство.Name, Свойство.Value);
					КонецЕсли;
				КонецЦикла;
				Если СтруктураДопПараметров.Количество() > 0 Тогда
					СтруктураДопДанных.Вставить("ДопПараметры", СтруктураДопПараметров);
				КонецЕсли;
			КонецЕсли;
			// Определим заголовок произвольного ЭД.
			Если ЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
				Если ЭД.Description.Title <> Неопределено Тогда
					ПроизвольныйЭД = (ЭД.Description.Title = Строка(Перечисления.ВидыЭД.ПроизвольныйЭД));
				КонецЕсли;
			КонецЕсли;
				
			КомментарийЭД = ЭД.Description.Comment;
		КонецЕсли;
		Если ЭД.Type <> Неопределено Тогда
			Если НЕ ТипКарточкиЭДПолучен Тогда
				ТипКарточкиЭД = ТипДокументаПоСтроке(ЭД.Type.Name);
			КонецЕсли;
			Если ЭД.Type.ResignRequired <> Неопределено Тогда
				ТребуетсяПодтверждение = Булево(ЭД.Type.ResignRequired);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
			ПолучитьТипЗначенияCML("ContainerDescription", "http://api-invoice.taxcom.ru/meta"));
		ОбъектXML.Закрыть();
		Для Каждого ДокОборот Из ЭД.DocFlow Цикл
			НомерЭДТИ = ДокОборот.Id;
			Для Каждого Документ Из ДокОборот.Documents.Document Цикл
				КодТранзакции = Документ.TransactionCode;
				КодРегламента = Документ.ReglamentCode;
				НомерЭД = ?(Найти(КодТранзакции, "Resign") > 0, НомерЭДКарточки, НомерЭДТИ);
				
				// Определим произвольный документ по типу ЭД в карточке и по коду транзакции в файле информации пакета.
				Если КодТранзакции = "MainDocument" И ПроизвольныйЭД Тогда
					СтруктураДопДанных.Вставить("КомментарийЭД", КомментарийЭД);
				КонецЕсли;
				
				ПутьКДокументу = "";
				ДокументСодержитПодписи = Ложь;
				Если Документ.Files.MainImage <> Неопределено Тогда
					ПутьКДокументу = ПолучитьИмяФайлаДанных(Документ.Files.MainImage.Path);
				КонецЕсли;
				Если Документ.Files.MainImageSignature <> Неопределено Тогда
					МассивПутейКПодписям = Новый Массив;
					ДокументСодержитПодписи = Истина;
					Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл
						ПредставлениеПодписи = ПолучитьИмяФайлаДанных(Подпись.Path);
						Если НЕ ЗначениеЗаполнено(ПутьКДокументу) Тогда
							// Если MainImage - пустое, значит пришел контейнер с подтверждением (подписью).
							СтруктураВложения = Новый Структура();
							СтруктураВложения.Вставить("Подписи",       МассивПутейКПодписям);
							СтруктураВложения.Вставить("УникальныйИД",  НомерЭД);
							СтруктураВложения.Вставить("НомерЭД",       НомерЭДКарточки);
							СтруктураВложения.Вставить("КодТранзакции", КодТранзакции);
							СтруктураВложения.Вставить("КодРегламента", КодРегламента);
							СтруктураВложения.Вставить("ДопДанные",     СтруктураДопДанных);
							СтруктураВложения.Вставить("НомерЭДТИ",     НомерЭДТИ);
							СтруктураВложения.Вставить("ТипДокумента",  ТипКарточкиЭД);
							СтруктураВложения.Вставить("ПроизвольныйЭД",ПроизвольныйЭД);
							СтруктураВложения.Вставить("ДокументСодержитПодписи", ДокументСодержитПодписи);
							СоответствиеВозврата.Вставить(ПредставлениеПодписи, СтруктураВложения);
						Иначе
							МассивПутейКПодписям.Добавить(ПредставлениеПодписи);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Документ.Files.DataImage <> Неопределено Тогда
					ПодписиДопДанных = Новый Массив;
					ДокументСодержитПодписи = Истина;
					Если Документ.Files.DataImageSignature <> Неопределено Тогда
						Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл
							ПодписиДопДанных.Добавить(ПолучитьИмяФайлаДанных(Подпись.Path));
						КонецЦикла;
					КонецЕсли;
					СтруктураДопДанных.Вставить("ФайлДопДанных", ПолучитьИмяФайлаДанных(Документ.Files.DataImage.Path));
					СтруктураДопДанных.Вставить("ПодписиДопДанных", ПодписиДопДанных);
				КонецЕсли;
				Если ЗначениеЗаполнено(ПутьКДокументу) Тогда
					СтруктураВложения = Новый Структура();
					СтруктураВложения.Вставить("Подписи",                МассивПутейКПодписям);
					СтруктураВложения.Вставить("УникальныйИД",           НомерЭД);
					СтруктураВложения.Вставить("НомерЭД",                НомерЭДКарточки);
					СтруктураВложения.Вставить("КодТранзакции",          КодТранзакции);
					СтруктураВложения.Вставить("КодРегламента",          КодРегламента);
					СтруктураВложения.Вставить("ДопДанные",              СтруктураДопДанных);
					СтруктураВложения.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
					СтруктураВложения.Вставить("ТипДокумента",           ТипКарточкиЭД);
					СтруктураВложения.Вставить("ПроизвольныйЭД",         ПроизвольныйЭД);
					СтруктураВложения.Вставить("ДокументСодержитПодписи",ДокументСодержитПодписи);
					СтруктураВложения.Вставить("МассивИдентификаторовДокументовОснований", МассивИдентификаторовДокументовОснований);
					СоответствиеВозврата.Вставить(ПутьКДокументу, СтруктураВложения);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ФайлИнформации.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		СоответствиеВозврата.Очистить();
	КонецПопытки;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с извещением о получении

// Формирует пакет электронных документов.
//
// Параметры:
//  ТекСтрокаПЭД  - ТаблицаЗначений - перечень электронных документов для включения в пакет.
//  АдресЗашифрованныхДанныхНаКлиенте - Строка - адрес временного хранилища зашифрованных данных,
//												если они были зашифрованы на клиенте.
//	ТребуетсяИзвещениеОПолучении - Булево - признак ожидания извещения о получении от принимающей стороны.
// Возвращаемое значение:
//  Булево - Истина - извещение сформировано, иначе Ложь.
//
Функция СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(Конверт, АдресЗашифрованныхДанныхНаКлиенте = Неопределено,
	ТребуетсяИзвещениеОПолучении = Истина) Экспорт
	
	КонтейнерСформирован = Ложь;
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	Если ПодготовленныеДокументы.Количество() = 1 Тогда
		
		ТекстОшибки = "";
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", ПодготовленныеДокументы[0].УникальныйИдентификатор());
		
		Для Каждого ДокументНаОтправку Из ПодготовленныеДокументы Цикл
			
			// Сохраняем основной файл и дополнительный файл с подписями.
			СтруктураФайловЭД = Новый Структура;
			СтруктураФайловЭД.Вставить("ГлавныйФайл");
			СтруктураФайловЭД.Вставить("ДополнительныйФайл");
			
			// Создадим таблицу подписей для загрузки в дерево транспортной информации такском
			ТаблицаПодписей = Новый ТаблицаЗначений;
			ТаблицаПодписей.Колонки.Добавить("Имя");
			ТаблицаПодписей.Колонки.Добавить("Путь");
			
			СтруктураФайловЭД.Вставить("ГлавныйФайлПодписи", ТаблицаПодписей);
			СтруктураФайловЭД.Вставить("ДополнительныйФайлПодписи", ТаблицаПодписей);
			
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ДокументНаОтправку);
			
			// Шифрование ЭД
			Если Конверт.ДанныеЗашифрованы Тогда
				Если АдресЗашифрованныхДанныхНаКлиенте <> Неопределено Тогда // шифрование произведено на клиенте
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = АдресЗашифрованныхДанныхНаКлиенте;
				Иначе
					ПараметрыШифрования = ОбменСКонтрагентамиСлужебный.АдресаСертификатовШифрования(ДокументНаОтправку);
					Если ПараметрыШифрования <> Неопределено Тогда
						Отказ = Ложь;
						МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
						Если Отказ Тогда
							ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
							ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога, "*");
							Возврат КонтейнерСформирован;
						КонецЕсли;
						
						МассивСертификатов = Новый Массив;
						Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
							
							ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
							Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
							МассивСертификатов.Добавить(Сертификат);
						КонецЦикла;
						
						ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
						ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументНаОтправку.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий  Тогда
				ОбменСКонтрагентамиСлужебный.СохранитьВместеСПоследнейЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога,
					СтруктураФайловЭД);
			Иначе
				ОбменСКонтрагентамиСлужебный.СохранитьВместеСЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СтруктураФайловЭД);
				ОбменСКонтрагентамиСлужебный.СохранитьФайлыДопДанныхЭД(ДокументНаОтправку, АдресКаталога, СтруктураФайловЭД);
			КонецЕсли;
			
			// Формируем meta.xml.
			СформироватьТранспортнуюИнформацию(ДокументНаОтправку, СтруктураФайловЭД, АдресКаталога, ТекстОшибки);
			
			// Формируем card.xml
			СформироватьКарточку(ДокументНаОтправку, АдресКаталога, ТекстОшибки, Конверт.ДанныеЗашифрованы, ТребуетсяИзвещениеОПолучении);
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			// Формируем пакет ЭД через создание zip-контейнера.
			ЗипКонтейнер = Новый ЗаписьZipФайла();
			ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
			ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
			
			ОбъектыДобавляемыеВАрхив = АдресКаталога + "*";
			ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив, РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			
			Попытка
				ЗипКонтейнер.Записать();
				// Сохраним зип-контейнер в присоединенных файлах к конверту.
				ОбменСКонтрагентамиСлужебный.ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
				КонтейнерСформирован = Истина;
			Исключение
				ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование пакета ЭД'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
			КонецПопытки;
		Иначе
			ШаблонСообщения = НСтр("ru = 'При формировании пакета возникли следующие ошибки:
			|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	Иначе
		ШаблонСообщения = НСтр("ru = 'Ошибка при обработке пакета ЭД %1.
		|Для передачи через сервис ЭДО, пакет ЭД должен содержать 1 электронный документ.
		|Необходимо повторно сформировать электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Конверт.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КонтейнерСформирован;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

// Функция выполняет отправку файлов, находящихся в каталоге "АдресКаталогаОтправки".
//
// Параметры:
//  Маркер                - двоичные данные, маркер, полученный на клиенте.
//  АдресКаталогаОтправки - строка, полный путь к каталогу с передаваемыми файлами.
//  АдресРесурса          - строка, адрес веб-сервиса.
//  ПрофильНастроекЭДО    - СправочникСсылка.ПрофилиНастроекЭДО - профиль настроек ЭДО, по которому происходит отправка.
//  ФлагОтладки - Булево.
//
// Возвращаемое значение:
//  РезультатОтправки - Число (количество отправленных документов).
//
Функция ОтправитьЧерезОператораЭДО(Маркер, АдресКаталогаОтправки, АдресРесурса, ПрофильНастроекЭДО) Экспорт
	
	РезультатОтправки = 0;
	
	Соединение = ПолучитьСоединение(ПрофильНастроекЭДО.СпособОбменаЭД);
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		Если ТипЗнч(Маркер) <> Тип("Строка") Тогда
			Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
		КонецЕсли;
		ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
		Для Каждого Файл Из ФайлыОтправки Цикл
			ПромежуточныйРезультат = ПередатьПакетЭДОператораЭДО(
													Файл,
													Маркер,
													Соединение,
													АдресРесурса,
													ПрофильНастроекЭДО);
			РезультатОтправки = РезультатОтправки + ПромежуточныйРезультат;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

// Получить новые электронные документы от оператора ЭДО.
//
// Параметры:
//  СтруктураВозврата - структура с полями: "ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение"
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - соответствие соглашений и структур сертификатов авторизации;
//  ПолучитьВесьСписок - получить список ЭД без ограничения выборки по дате
//  ПовторноеПолучение - Булево - признак, что получение вызвано повторно, т.к. маркер протух.
//
Процедура ПолучитьНовыеЭДОператораЭДО(
			СтруктураВозврата,
			СоотвСоглашенийИСтруктурСертификатов,
			ПолучитьВесьСписок = Ложь,
			ПовторноеПолучение = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СоотвСоглашенийИСтруктурСертификатов) Тогда
		Соответствие = Неопределено;
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ДоступныПараметрыДляАвторизацииНаСервереОператора(, Соответствие) Тогда
			Возврат;
		КонецЕсли;
		СоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
		Для Каждого Элемент Из Соответствие Цикл
			ПрофильНастроекЭДО = Элемент.Ключ;
			Для Каждого Элемент1 Из Элемент.Значение Цикл
				СоотвСоглашенийИСтруктурСертификатов.Вставить(ПрофильНастроекЭДО, Элемент1.Значение);
				Прервать;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДОЧерезОЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД КАК ДатаПолученияЭД
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДОЧерезОЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|		ПО (СостоянияОбменовЭДЧерезОператоровЭДО.ПрофильНастроекЭДО = ПрофилиНастроекЭДОЧерезОЭДО.Ссылка)
	|ГДЕ
	|	ПрофилиНастроекЭДОЧерезОЭДО.СпособОбменаЭД В (ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском), ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
	|	И НЕ ПрофилиНастроекЭДОЧерезОЭДО.ПометкаУдаления";
	
	ТаблицаДатПолученияЭД = Запрос.Выполнить().Выгрузить();
	
	ИдентификаторыЭДО = Новый Массив;
	Для Каждого Элемент Из СоотвСоглашенийИСтруктурСертификатов Цикл
		
		ПрофильНастроекЭДО = Элемент.Ключ;
		СтруктураСертификата = Элемент.Значение;
		
		ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"СпособОбменаЭД, ИдентификаторОрганизации");
		СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
		СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД);
		СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ПараметрыПрофиляНастроекЭДО.ИдентификаторОрганизации);
		
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		ПарольКСертификату = Неопределено;
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
			И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
			И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
			СтруктураСертификата.Свойство("ПарольПользователя", ПарольКСертификату);
			Если НЕ ЗначениеЗаполнено(МаркерРасшифрованный) И ПарольКСертификату = Неопределено
				ИЛИ НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Тогда
				Продолжить;
			Иначе
				МаркерРасшифрованный = СтруктураСертификата.МаркерРасшифрованный;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаДатПолученияЭД.Найти(ПрофильНастроекЭДО);
			ДатаВремяЗапроса = Неопределено;
			Если СтрокаТаблицы <> Неопределено Тогда
				ДатаВремяЗапроса = СтрокаТаблицы.ДатаПолученияЭД;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Соединение = ПолучитьСоединение(ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД);
		Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(МаркерРасшифрованный);
		
		СдвигатьДату = Истина;
		ПолученыВсеДокументы = Ложь;
		Пока Не ПолученыВсеДокументы Цикл
			
			ДатаВремяЗапроса = Формат(ДатаВремяЗапроса, "ДФ='yyyy-MM-dd HH:mm:ss'");
			АдресРесурса = "GetMessageList" + ?(ЗначениеЗаполнено(ДатаВремяЗапроса), "?date=" + ДатаВремяЗапроса, "");
			СписокЭД_XML = ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, АдресРесурса, ПовторноеПолучение);
			
			Если ПовторноеПолучение Тогда
				Возврат;
			КонецЕсли;
			
			СписокИДДокументов = "";
			ДатаВремяЗапроса = РазобратьТекстСпискаЭД(СписокЭД_XML, СписокИДДокументов);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СписокЭД_XML);
			
			Если СписокИДДокументов.Количество() = 0 Тогда
				ПолученыВсеДокументы = Истина;
				Прервать;
			КонецЕсли;
					
			Для Каждого Стр Из СписокИДДокументов Цикл
				
				Если НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента) Тогда
					
					ФайлЭД = ПолучитьЭДОператораЭДО(Маркер, Соединение, СтруктураПараметровЗапросаМаркера, Стр.ИДДокумента, ПовторноеПолучение);
					
					Если ПовторноеПолучение Тогда
						Возврат;
					КонецЕсли;
					
					Если ФайлЭД <> Неопределено Тогда
						ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ФайлЭД);
						
						СтруктураПараметров = ПолучитьДанныеВходящегоЭД(ДвоичныеДанныеЭлемента,
																		Стр.КодТранзакции,
																		Стр.ИДДокументооборота,
																		Стр.ИДДокумента);
						Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
							ПакетЭД = ОбменСКонтрагентамиСлужебный.СформироватьНовыйПакетЭД(СтруктураПараметров);
							
							Если ЗначениеЗаполнено(ПакетЭД.Ссылка) Тогда
								ИмяФайла = "EDI_" + СтруктураПараметров.ВнешнийУИД;
								АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
								
								ПараметрыФайла = Новый Структура();
								ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
								ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД.Ссылка);
								ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
								ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
								ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

								ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
									ПараметрыФайла, АдресВХранилище);
						
								СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
							Иначе
								СдвигатьДату = Ложь;
							КонецЕсли;
						ИначеЕсли Стр.КодТранзакции = "PostDateConfirmation"
							ИЛИ Стр.КодТранзакции = "SendConfirmation"
							ИЛИ Стр.КодТранзакции = "ReceiveNoticePostDateConfirmation"
							ИЛИ Стр.КодТранзакции = "CustomerInformationPostDateConfirmation" Тогда
							СдвигатьДату = Ложь;
						Иначе
							СохранитьНеизвестныйПакет(ДвоичныеДанныеЭлемента, ПрофильНастроекЭДО, Стр.ИДДокумента);
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЭД);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СдвигатьДату И ЗначениеЗаполнено(ДатаВремяЗапроса) И СписокИДДокументов.Количество() > 0 Тогда
				
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				Запись.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
				Запись.Прочитать();
				Запись.ДатаПолученияЭД = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Сред(ДатаВремяЗапроса, 0,
					Найти(ДатаВремяЗапроса, ".") - 1), "-", ""), " ", ""), ":", ""));
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолученыВсеДокументы И ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			 ИдентификаторыЭДО.Добавить(ПараметрыПрофиляНастроекЭДО.ИдентификаторОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ИдентификаторыЭДО", ИдентификаторыЭДО);
	
КонецПроцедуры

// Отправляет запрос приглашений оператора ЭДО.
//
// Параметры:
//  ТаблицаОбработки  - Таблица значений - таблица приглашений
//                      продолжение описания параметра
//  СтруктураДопПараметров  - структура - перечень дополнительных параметров.
//
// Возвращаемое значение:
//  ИмяФайла - Строка, имя файла либо пустая.
//
Функция ИсходящийЗапросПриглашенияОператораЭДО(ТаблицаОбработки, СтруктураДопПараметров) Экспорт
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/contacts}.Contacts";
	Попытка
		Контакты = ПолучитьОбъектТипаCML(ПутьКОписанию);
		ЗаполнитьСвойствоXDTO(Контакты, "Asof", ТекущаяДатаСеанса(), , ТекстОшибки);
		Для Каждого ТекСтрока Из ТаблицаОбработки Цикл
			Контакт = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Contact");
			ЗаполнитьСвойствоXDTO(Контакт, "Name",              ТекСтрока.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Inn",               ТекСтрока.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Kpp",               ТекСтрока.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Email",             ТекСтрока.АдресЭП, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Comment",           ТекСтрока.ТекстПриглашения, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "ExternalContactId", ТекСтрока.ВнешнийКод, , ТекстОшибки);
			Контакты.Contact.Добавить(Контакт);
		КонецЦикла;
		Контакты.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Контакты, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование приглашения к обмену'"),
																					ТекстОшибки,
																					ТекстОшибки);
			
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Отправляет спец. оператору информацию об принятии или отклонении приглашения
// 
// Возвращаемое значение - Булево (Истина - операция выполнена успешно, иначе Ложь)
//
Функция ПринятьОтклонитьКонтактЧерезОператораЭДО(Идентификатор, ПриглашениеПринято, Маркер, ПрофильНастроекЭДО) Экспорт
	
	Соединение = ПолучитьСоединение(ПрофильНастроекЭДО.СпособОбменаЭД);
	Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
	
	ОперацияВыполнена = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		Если ПриглашениеПринято Тогда
			АдресРесурса = "AcceptContact?id=" + Идентификатор;
		Иначе
			АдресРесурса = "RejectContact?id=" + Идентификатор;
		КонецЕсли;
		
		Заголовки = "";
		ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ОперацияВыполнена = Истина;
		Исключение
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяФайлаРезультата, "UTF-8");
			СтрокаТекста = ТекстовыйДокумент.ПолучитьТекст();
			Если Найти(СтрокаТекста, НСтр("ru ='Статус контакта'") + " ") * Найти(СтрокаТекста, " "+ НСтр("ru =', ожидался'")) > 0 Тогда
				// Если пришла строка вида: "Статус контакта Accepted, ожидался Incoming" или подобная,
				// то это не ошибка, а особенность работы сервиса.
				НачПозСтатуса = Найти(СтрокаТекста, НСтр("ru ='Статус контакта'")) + СтрДлина(НСтр("ru ='Статус контакта'") + " ");
				КонПозСтатуса = Найти(СтрокаТекста, " "+ НСтр("ru =', ожидался'"));
				ТекСтатусКонтакта = СокрЛП(Сред(СтрокаТекста, НачПозСтатуса, КонПозСтатуса - НачПозСтатуса));
				ТекСтатусКонтакта = ПреобразоватьТекстСтатуса(ТекСтатусКонтакта);
				Если ТекСтатусКонтакта = "Присоединен" Тогда
					ОперацияВыполнена = Истина;
				Иначе
					ТекстСообщения = НСтр("ru = 'Текущий статус подключения Контрагента в настройке ЭДО 
												|не соответствует действительному статусу %1 на сервере оператора ЭДО.
												|Необходимо выполнить команду ""Обновить статусы настроек ЭДО"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекСтатусКонтакта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОперацияВыполнена = Ложь;
				КонецЕсли;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Ошибка обработки %1 приглашения на сервере оператора ЭДО.'");
				СтрокаПараметра = ?(ПриглашениеПринято, НСтр("ru = 'принятия'"), НСтр("ru = 'отклонения'"));
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаПараметра);
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Получение ЭД.'"),
																							ПодробноеПредставлениеОшибки,
																							ТекстСообщения);
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОперацияВыполнена;
	
КонецФункции

Функция ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	АдресРесурса = "GetContactListUpdates";
	ТаблицаПриглашений = ИнициализироватьТаблицуДанныхУчастниковОбмена();
	
	Для Каждого Элемент Из СоотвСоглашенийИСтруктурСертификатов Цикл
		
		ПрофильНастроекЭДО = Элемент.Ключ;
		СтруктураСертификата = Элемент.Значение;
		
		ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"СпособОбменаЭД, ИдентификаторОрганизации");
		СтруктураСертификата.Вставить("СпособОбменаЭД", ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД);
		СтруктураСертификата.Вставить("ИдентификаторОрганизации", ПараметрыПрофиляНастроекЭДО.ИдентификаторОрганизации);
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолученыВсеЗаписи = Ложь;
		
		ДатаПоследнегоЗапроса = Формат(ДатаПоследнегоПолученияПриглашений(ПрофильНастроекЭДО), "ДФ='yyyy-MM-dd HH:mm:ss'");
		Пока Не ПолученыВсеЗаписи Цикл
			АдресРесурсаПолный = АдресРесурса + "?date=" + ДатаПоследнегоЗапроса;
			Если ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				АдресРесурсаПолный = АдресРесурсаПолный + "&status=ContactStatus.Incoming";
			КонецЕсли;
			
			ФайлПриглашения = ПолучитьЧерезОператораЭДО(АдресРесурсаПолный, , Маркер, СтруктураСертификата);
			Если ФайлПриглашения = Неопределено Тогда
				Прервать;
			КонецЕсли;
				
			КолСтрокТзДоЧтения = ТаблицаПриглашений.Количество();
			ПрочитатьЗапросПриглашенияОператораЭДО(ФайлПриглашения, ТаблицаПриглашений, ДатаПоследнегоЗапроса, ПрофильНастроекЭДО);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПриглашения);
				
			Если КолСтрокТзДоЧтения = ТаблицаПриглашений.Количество() Тогда
				ПолученыВсеЗаписи = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПриглашений;
	
КонецФункции

// Формирование электронного документа каталога товаров по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ТоварыКаталога - таблица значений, содержащая перечень номенклатуры,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция УдалитьСформироватьКаталогНоменклатуры(СсылкаНаОбъект, ТоварыКаталога, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.КаталогТоваров);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
	
	СтруктураПараметров = УдалитьКаталогТоваровСтруктураПараметров();
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект,
																			ТоварыКаталога,
																			СтруктураЭД,
																			СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьКаталогCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура СформироватьКарточку(ЭлектронныйДокумент, АдресКаталога, ТекстОшибки, Зашифрован = Ложь, ТребуетсяИзвещениеОПолучении = Истина) Экспорт

	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("КарточкаПередаваемыхДанных");

	ДеревоКарточкиТакском = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	// Готовим дерево данных для карточки пакета.
	ПодготовитьДанныеПоКарточке(ЭлектронныйДокумент, ДеревоКарточкиТакском, Зашифрован, ТребуетсяИзвещениеОПолучении);
	
	// Выполним проверку на заполненность обязательных полей.
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоКарточкиТакском, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		Карточка = СформироватьКарточкуCML(ДеревоКарточкиТакском, ТекстОшибки);
		КопироватьФайл(Карточка, АдресКаталога + "card.xml");
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Карточка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТранспортнуюИнформацию(ЭлектронныйДокумент, СтруктураФайловЭД, АдресКаталога, ТекстОшибки) Экспорт
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ТранспортнаяИнформация");

	ДеревоТранспортнойИнформации = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	// Готовим дерево данных с транспортной информацией.
	ПодготовитьДанныеПоТранспортнойИнформации(ЭлектронныйДокумент, СтруктураФайловЭД, ДеревоТранспортнойИнформации);
	
	// Выполним проверку на заполненность обязательных полей.
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоТранспортнойИнформации, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		ИмяФайлаТранспортнойИнформации = СформироватьТранспортнуюИнформациюCML(ДеревоТранспортнойИнформации, ТекстОшибки);
		КопироватьФайл(ИмяФайлаТранспортнойИнформации, АдресКаталога + "meta.xml");
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаТранспортнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Ищет документы основания для ЭД счет фактура
// 1. Находит документ Торг- 12 (например) на основании которого был введен
// 2. Ищет все основания для найденного Торг-12
// 3. Находит все с.ф. для всех торг-12 из п.2
// 4. Устанавливает состояние "Обмен завершен с исправлением" для найденных в п. 3 с.ф.
//
// Параметры:
//  ПервичныйЭД - Ссылка, Массив - ссылка ЭД вида счет-фактура
//  НаправлениеЭД - Перечисление.НаправленияЭД - направление для поиска основания.
//
Процедура ИзменитьСостояниеСФОснований(ПервичныйЭД, НаправлениеЭД) Экспорт
	
	Если Не ТипЗнч(ПервичныйЭД) = Тип("Массив") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ПервичныйЭД);
	Иначе
		МассивЭД = ПервичныйЭД;
	КонецЕсли;
	
	ОснованияИБ = Новый Массив;
	
	МассивВладельцев = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЭД,"ВладелецФайла");
	
	// Для каждой счет фактуры ищем ссылку на документ ИБ основания
	// и НомерЭД документа, на основании которого введен документ основания.
	Для Каждого ЭлементМассива Из МассивВладельцев Цикл
		
		НомераЭД = ЭлементМассива.Значение.ИдентификаторыОснованийВладельцаФайла.ВыгрузитьКолонку("ИдентификаторДокументаОснования");
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.НайтиДокументыОснования(НомераЭД, НаправлениеЭД, ОснованияИБ);
		
	КонецЦикла;
	
	Если ОснованияИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	СФДляИзменения = Новый Массив;
	// Из них получает массив введенных сф.
	ЗаполнитьСФПоДокументамОснования(СФДляИзменения, ОснованияИБ, НаправлениеЭД);
	
	// Для списка СФ меняем состояние ЭД.
	УстановитьСостояниеОбменЗавершенСИсправлением(СФДляИзменения);
		
КонецПроцедуры

Процедура ИзменитьСостояниеОснованийРТУ(УтвержденныеРТУ) Экспорт
	
	Для Каждого УтвержденныйЭД Из УтвержденныеРТУ Цикл
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСостояниеЗавершен(УтвержденныйЭД, Перечисления.НаправленияЭД.Исходящий);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДатуИзмененияСтатуса(НастройкаЭДО) Экспорт
	
	ДатаСтатуса = ТекущаяДатаСеанса();
	НастройкаЭДО.ДатаИзмененияСтатуса = ДатаСтатуса;
	
КонецПроцедуры

Функция РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации) Экспорт
	
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	
	// Выполним проверку на заполненность обязательных полей.
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоРегистрационнойИнформации, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
	
		ИмяФайлаРегистрационнойИнформации = СформироватьРегистрационнуюИнформациюCML(ДеревоРегистрационнойИнформации);
		Если ЗначениеЗаполнено(ИмяФайлаРегистрационнойИнформации) Тогда
			ДвоичныеДанныеДляОператораЭДО = Новый ДвоичныеДанные(ИмяФайлаРегистрационнойИнформации);
		КонецЕсли;
		
	Иначе
		ШаблонСообщения = НСтр("ru = 'При формировании регистрационного пакета возникли следующие ошибки:
		|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ДвоичныеДанныеДляОператораЭДО;
	
КонецФункции

Функция ДанныеФайлаЭД(ИмяФайлаЭД, ОписаниеОшибки, ПространствоИменФНС = Неопределено) Экспорт
	
	ДанныеФайлаЭД = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаЭД);
		ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла:
									|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаЭД);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	// Чтение файлов без namespace по форматам ФНС
	Если ДанныеФайлаЭД <> Неопределено И ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
		
		ЧтениеXML.ОткрытьФайл(ИмяФайлаЭД);
		
		// Считаем содержимое XML файла
		ПостроительDOM = Новый ПостроительDOM();
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
		// Освободим временный файл для записи
		ЧтениеXML.Закрыть();
		
		// Определим наше пространство имен
		URIПространстваИмен = "";
		Если Найти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPR") > 0 Тогда
			URIПространстваИмен = "ON_SCHFDOPPR";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPOK") > 0 Тогда
			URIПространстваИмен = "ON_SCHFDOPPOK";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPR") > 0 Тогда
			URIПространстваИмен = "ON_KORSCHFDOPPR";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPOK") > 0 Тогда
			URIПространстваИмен = "ON_KORSCHFDOPPOK";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
			
			Если ДанныеФайлаЭД.ВерсФорм = "5.01" Тогда //ВерсияФормата
				URIПространстваИмен = "SFAKT";
			Иначе
				URIПространстваИмен = "SFAKT_5_02";
			КонецЕсли;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
			
			Если ДанныеФайлаЭД.ВерсФорм = "5.01" Тогда //ВерсияФормата
				URIПространстваИмен = "KORSFAKT";
			Иначе
				URIПространстваИмен = "KORSFAKT_5_02";
			КонецЕсли;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда // торг-12 титул продавца
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "OTORG12");
			ПространствоИменФНС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
			URIПространстваИмен = "OKORDOC";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
			URIПространстваИмен = "PKORDOC";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PTORG12") > 0 Тогда // торг-12 титул покупателя
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "PTORG12");
			ПространствоИменФНС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "IAKTPRM");
			ПространствоИменФНС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "ZAKTPRM");
			ПространствоИменФНС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_IZVPOL") > 0 И ДанныеФайлаЭД.ВерсФорм <> "1.01" Тогда
			URIПространстваИмен = "DP_IZVPOL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_UVUTOCH") > 0 Тогда
			URIПространстваИмен = "DP_UVUTOCH";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PRANNUL") > 0 Тогда
			URIПространстваИмен = "DP_PRANNUL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
			URIПространстваИмен = "DP_IZVPOL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PDOTPR") > 0 Тогда
			URIПространстваИмен = "DP_PDOTPR";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PDPOL") > 0 Тогда
			URIПространстваИмен = "DP_PDPOL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "POD") > 0 Тогда
			URIПространстваИмен = "PDO";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда // Передача товаров продавец
			URIПространстваИмен = "TORGPR";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPOK") > 0 Тогда // Передача товаров покупатель
			URIПространстваИмен = "TORGPOK";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда // Передача товаров покупатель
			URIПространстваИмен = "RUISP";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUZAK") > 0 Тогда // Передача товаров покупатель
			URIПространстваИмен = "RUZAK";
	
		КонецЕсли;
		
		// Установим пространство имен 1С
		Если НЕ ЗначениеЗаполнено(ДокументDOM.ЭлементДокумента.URIПространстваИмен) Тогда
			ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", URIПространстваИмен);
		КонецЕсли;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаЭД);
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
		ЗаписьXML.Закрыть();
		
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаЭД);
			ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ПолучитьТипЗначенияCML("Файл", URIПространстваИмен));
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла:
										|%2'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаЭД);
		
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДанныеФайлаЭД;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстРазделитель()
	
	Разделитель =
	"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Разделитель;
	
КонецФункции

Функция ТекстЗапросаДокументИсходящий()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка,
	|	вт_ЭД.НомерЭД
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ЭД КАК вт_ЭД
	|		ПО ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = вт_ЭД.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВходящийДокумент()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК Ссылка,
	|	вт_ЭД.НомерЭД КАК УникальныйИД
	|ИЗ
	|	вт_ЭД КАК вт_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет, умещаются ли переданные табличные документы
// на страницу при печати.
//
// Параметры
//  ТабДокумент        - Табличный документ.
//  ВыводимыеОбласти   - Массив из проверяемых таблиц или табличный документ.
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки.
//
// Возвращаемое значение:
//  Булево - умещаются или нет переданные документы.
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина)

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции

// Собирает из элементов структуры адреса строку записи адреса в формате 8 запятых.
Функция СобратьАдрес(Знач СтруктураАдрес)
	
	Адрес = "";
	
	Для Каждого КлючЗначение Из СтруктураАдрес Цикл
		
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеАдресногоПоля = КлючЗначение.Значение;
		Если Врег(КлючЗначение.Ключ) = Врег("КодРегион") Тогда
			ЗначениеАдресногоПоля = ОбменСКонтрагентамиПереопределяемый.НазваниеРегиона(ЗначениеАдресногоПоля);
		КонецЕсли;
		
		Адрес = Адрес + ?(ЗначениеЗаполнено(Адрес), ","+ " " + ЗначениеАдресногоПоля, ЗначениеАдресногоПоля);
		
	КонецЦикла;
	
	Возврат Адрес;
	
КонецФункции

// Раскладывание строки с данными об адресе (в формате 8 запятых) на элементы структуры.
//
// Параметры:
//  СтрокаАдрес - Строка - исходное представление адреса.
//
// Возвращаемое значение:
//  Структура - адрес в структуре.
//
Функция РазложитьАдрес(Знач СтрокаАдрес)
	
	Индекс = "";
	КодРегион = "";
	Район = "";
	Город = "";
	НаселПункт = "";
	Улица = "";
	Дом = "";
	Корпус = "";
	Кварт = "";

	МассивАдрес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();

	Если ЭлементовВМассиве > 0 Тогда
		Индекс = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		КодРегион = СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Город = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		НаселПункт = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве > 5 Тогда
		Улица = СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве > 6 Тогда
		Дом = СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве > 7 Тогда
		Корпус = СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве > 8 Тогда
		Кварт = СокрЛП(МассивАдрес[8]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Индекс", Индекс);
	СтруктураВозврата.Вставить("КодРегион", КодРегион);
	СтруктураВозврата.Вставить("Район", Район);
	СтруктураВозврата.Вставить("Город", Город);
	СтруктураВозврата.Вставить("НаселПункт", НаселПункт);
	СтруктураВозврата.Вставить("Улица", Улица);
	СтруктураВозврата.Вставить("Дом", Дом);
	СтруктураВозврата.Вставить("Корпус", Корпус);
	СтруктураВозврата.Вставить("Кварт", Кварт);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Структура настроек Такском
// 
// Возвращаемое значение:
//  Структура - параметра настроек Такском.
//
Функция СтруктураНастроекТакском()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Наименование", НСтр("ru ='ООО Такском'"));
	СтруктураНастроек.Вставить("АдресВебСервиса", "https://1C-api.taxcom.ru/v1.2/API/");
	СтруктураНастроек.Вставить("ИНН", "7704211201");
	СтруктураНастроек.Вставить("ИдентификаторОператора", "2AL");
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД ТОРГ12(ответный титул).
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьИнформациюПокупателяУКДXML(ДеревоДанных)
	
	ПространствоИменСхемы = "ON_KORSCHFDOPPOK";
	ТекстОшибки = "";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		ИнфПок = ПолучитьОбъектТипаCML("Файл.ИнфПок", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(ИнфПок, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок"));
		ЗаполнитьСвойствоXDTO(ИнфПок, "ДатаИнфПок", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИнфПок, "ВремИнфПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИнфПок, "НаимЭконСубСост",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИнфПок, "ОснДоверОргСост",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , ТекстОшибки);
		
		ИдИнфПрод = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИдИнфПрод", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ИдФайлИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайлаИнфПр"), Истина, ТекстОшибки);
		ДатаДокИнфПр = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФайлаИнфПр"));
		ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ДатаФайлИнфПр", ДатаДокИнфПр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ВремФайлИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремФайлаИнфПр"), Истина, ТекстОшибки);
		
		Подписи = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолученныеЭП");
		Если Не ЗначениеЗаполнено(Подписи) Тогда
			Подписи = Новый Массив;
			Подписи.Добавить("---");
		КонецЕсли;
		Для Каждого Подпись Из Подписи Цикл
			ИдИнфПрод.ЭП.Добавить(Подпись);
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(ИнфПок, "ИдИнфПрод", ИдИнфПрод, Истина, ТекстОшибки);
		
		СодФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "НаимДокОпрПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НаимДокОпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "ФункцияПр", Лев(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция"), 1), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "НомДокИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИнфПр"), , ТекстОшибки);
		ДатаИнформацииПродавца = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИнфПр"));
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "ДатаДокИнфПр", ДатаИнформацииПродавца, Истина, ТекстОшибки);
		
		СвСоглас = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвСоглас", ПространствоИменСхемы);
		ДатаСогласования = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования"));
		ЗаполнитьСвойствоXDTO(СвСоглас, "ДатаСоглас", ДатаСогласования, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСоглас, "СодОпер",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "СвСоглас", СвСоглас, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаПолучения")) Тогда
			ИнфПолФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "ИдФайлИнфПол",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаПолучения.ИдентификаторФайла"), , ТекстОшибки);
			
			СтрокиДопДанныеДокументаПолучения = ДеревоДанных.Строки.Найти("ДопДанныеДокументаПолучения", "ПолныйПуть");
			СтрокаТаблицы = СтрокиДопДанныеДокументаПолучения.Строки.Найти("ДопДанныеДокументаПолучения.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнф = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф", ПространствоИменСхемы);
					
					ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, ТекстОшибки);
					
					ИнфПолФХЖ4.ТекстИнф.Добавить(ТекстИнф);
				КонецЦикла;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СодФХЖ4, "ИнфПолФХЖ4", ИнфПолФХЖ4, Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИнфПок, "СодФХЖ4", СодФХЖ4, Истина, ТекстОшибки);
		
		// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, ТекстОшибки);
		
		ФЛ = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ", ПространствоИменСхемы);
		ФИО = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ.ФИО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, ТекстОшибки);
		
		ИнфПок.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "ИнфПок", ИнфПок, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД УПД.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьИнформациюПродавцаXML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"));
	
	ВерсияФормата = "5.01";
	ПространствоИменСхемы = "ON_SCHFDOPPR";
	
	ТекстОшибки = "";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Техническая информация по документу.
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ВерсияФормата, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		НаимОрг = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
		ИННЮЛ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
		ИдЭДО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Функция", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ПоФактХЖ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПоФактХЖ"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "НаимДокОпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НаимДокОпр"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ОснДоверОргСост", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , ТекстОшибки);
		
		// Сведения о счете-фактуре.
		ДанныеСчетаФактуры = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИменСхемы);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "НомерСчФ", НомерДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДатаСчФ", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "КодОКВ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"), Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
		Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
			ДатаДок = ДатаДД_ММ_ГГГГ(ДатаДок);
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомерДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры,"ИспрСчФ", ИспрСчФ, , ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ЗаполнитьСведенияОбУчастникеУПД(СвПрод, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОПродавце");
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПрод", СвПрод, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе")) Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе") = "ОнЖе" Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", НСтр("ru = 'он же'"), , ТекстОшибки);
			Иначе
				ГрузОтпр = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
				ЗаполнитьСведенияОбУчастникеУПД(ГрузОтпр, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОГрузоотправителе.Грузоотправитель");
				ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", ГрузОтпр, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузополучателе")) Тогда
			ГрузПолуч = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
			ЗаполнитьСведенияОбУчастникеУПД(ГрузПолуч, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОГрузополучателе");
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ГрузПолуч", ГрузПолуч, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвПокуп = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ЗаполнитьСведенияОбУчастникеУПД(СвПокуп, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОПокупателе");
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		
		СтрокаТаблицы = ДеревоДанных.Строки.Найти("ПлатежноРасчетныеДокументы", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого ПРД Из СтрокаТаблицы.Строки Цикл
				СвПРД = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.СвПРД", ПространствоИменСхемы);
				
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ПРД, "ПлатежноРасчетныеДокументы.НомерСтроки.НомерПРД");
				ЗаполнитьСвойствоXDTO(СвПРД, "НомерПРД", Реквизит, Истина, ТекстОшибки);
				Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ПРД, "ПлатежноРасчетныеДокументы.НомерСтроки.ДатаПРД"));
				ЗаполнитьСвойствоXDTO(СвПРД, "ДатаПРД", Реквизит, Истина, ТекстОшибки);
				ДанныеСчетаФактуры.СвПРД.Добавить(СвПРД);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках")) Тогда
			ДопСвФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ДопСвФХЖ1", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ИдГосКон",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "НаимОКВ",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаНаименование"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "КурсВал",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс"), , ТекстОшибки);
				
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДопСвФХЖ1", ДопСвФХЖ1, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры")) Тогда
			ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИнфПолФХЖ1", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИнфПолФХЖ1, "ИдФайлИнфПол",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры.ИдентификаторФайла"), , ТекстОшибки);
				
			СтрокиДопДанныеСчетаФактуры = ДеревоДанных.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
			СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИменСхемы);
					
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, ТекстОшибки);
					
					ИнфПолФХЖ1.ТекстИнф.Добавить(ТекстИнфТип);
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ИнфПолФХЖ1", ИнфПолФХЖ1, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", ДанныеСчетаФактуры, Истина, ТекстОшибки);
		
		// Сведения таблицы счета-фактуры.
		ТабличнаяЧасть = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведенияОТоваре = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИменСхемы);
			
			// Обязательные реквизиты:
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НомСтр", Товар.Значение, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НаимТов", Реквизит, Истина, ТекстОшибки);
			
			РеквизитСтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСт", СтавкаXDTO, Истина, ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовУчНал", Реквизит, Истина, ТекстОшибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкциза");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", НСтр("ru ='без акциза'"), Истина, ТекстОшибки);
			Иначе
				ЗначениеСумАкцизТип = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
				ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", ЗначениеСумАкцизТип, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "Акциз", СумАкцизТип, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
			Иначе
				ЗначениеСумНДСТип = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНал", ЗначениеСумНДСТип, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			
			// Необязательные реквизиты:
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_Тов", Реквизит, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.Количество");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТов", Реквизит, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТов", Реквизит, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовБезНДС", Реквизит, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
			Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
				СтрокиТД = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
				Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
					СвТД = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.СвТД", ПространствоИменСхемы);
					КодСтраны = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТД, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
					НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТД, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
					ЗаполнитьСвойствоXDTO(СвТД, "КодПроисх", КодСтраны, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвТД, "НомерТД", НомерТД, Истина, ТекстОшибки);
					СведенияОТоваре.СвТД.Добавить(СвТД);
				КонецЦикла;
			КонецЕсли;
			
			ДопСведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.ДопСведТов", ПространствоИменСхемы);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.Признак");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "ПрТовРаб", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ПризнакДополнительнаяИнформация");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "ДопПризн", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварКод");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "КодТов", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "НаимЕдИзм", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтранаПроисхожденияНаименование");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "КрНаимСтрПр", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КоличествоНадлежитОтпустить");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "НадлОтп", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КорреспондирующиеСчетаДебет");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "КорСчДебет", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КорреспондирующиеСчетаКредит");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "КорСчКредит", Реквизит, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ДопСведТов", ДопСведТов, Истина, ТекстОшибки);
			
			СтрокаТаблицы = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИменСхемы);
					
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, ТекстОшибки);
					
					СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
				КонецЦикла;
			КонецЕсли;
			ТабличнаяЧасть.СведТов.Добавить(СведенияОТоваре);
		КонецЦикла;
		
		ВсегоОпл = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога");
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", Реквизит, , ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом");
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", Реквизит, Истина, ТекстОшибки);
		
		СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога");
		Если Не ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
		Иначе
			ЗначениеСумНДСТип = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
			ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНал", ЗначениеСумНДСТип, Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНДСТип, Истина, ТекстОшибки);
		
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоКоличество");
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "НеттоВс", Реквизит, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоОпл", ВсегоОпл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТабличнаяЧасть, Истина, ТекстОшибки);
		
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") <> "СЧФ" Тогда
			
			// Сведения о факте отгрузки товаров.
			ДанныеОбОтгрузкеТоваров = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер", ПространствоИменСхемы);
			ОтгрузкаТоваров = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "СодОпер",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ВидОпер",
				XMLСтрока(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации")), , ТекстОшибки);
			ДатаОтгрузкиТоваров = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров"));
			ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ДатаПер", ДатаОтгрузкиТоваров, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОснованиеОтгрузкиТоваров");
			Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
				СтрокаТаблицы = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
				Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
					Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
						ОснПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ОснПер", ПространствоИменСхемы);
						
						ЗаполнитьСвойствоXDTO(ОснПер, "НаимОсн",
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
							"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНаименование"), Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ОснПер, "НомОсн",
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
							"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер"), , ТекстОшибки);
						ДокументДата = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
							"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата"));
						ЗаполнитьСвойствоXDTO(ОснПер, "ДатаОсн", ДокументДата, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ОснПер, "ДопСвОсн",
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
							"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДопСведения"), , ТекстОшибки);
						
						ОтгрузкаТоваров.ОснПер.Добавить(ОснПер);
					КонецЦикла;
				КонецЕсли;
			Иначе
				ОснПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ОснПер", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ОснПер, "НаимОсн", "Отсутствует", Истина, ТекстОшибки);
				ОтгрузкаТоваров.ОснПер.Добавить(ОснПер);
			КонецЕсли;
			
			ТранГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ТранГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ТранГруз, "СвТранГруз",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке"), , ТекстОшибки);
				
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары")) Тогда
				
				СвЛицПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер", ПространствоИменСхемы);
				Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "РаботникОрганизацииПродавца" Тогда
					
					РабОргПрод = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод", ПространствоИменСхемы);
					
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность");
					ЗаполнитьСвойствоXDTO(РабОргПрод, "Должность", Реквизит, Истина, ТекстОшибки);
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения");
					ЗаполнитьСвойствоXDTO(РабОргПрод, "ИныеСвед", Реквизит, , ТекстОшибки);
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий");
					ЗаполнитьСвойствоXDTO(РабОргПрод, "ОснПолн", Реквизит, , ТекстОшибки);
					
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
					Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия");
					ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
					Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя");
					ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
					Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество");
					ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(РабОргПрод, "ФИО", ФИО,  , ТекстОшибки);
					
					ЗаполнитьСвойствоXDTO(СвЛицПер, "РабОргПрод", РабОргПрод, , ТекстОшибки);
					
				ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "ИноеЛицо" Тогда
					
					ИнЛицо = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо", ПространствоИменСхемы);
					Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
						ПредОргПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер", ПространствоИменСхемы);
						
						Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
						ЗаполнитьСвойствоXDTO(ПредОргПер, "Должность", Реквизит, Истина, ТекстОшибки);
						Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения");
						ЗаполнитьСвойствоXDTO(ПредОргПер, "ИныеСвед", Реквизит, , ТекстОшибки);
						Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации");
						ЗаполнитьСвойствоXDTO(ПредОргПер, "НаимОргПер", Реквизит, Истина, ТекстОшибки);
						Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку");
						ЗаполнитьСвойствоXDTO(ПредОргПер, "ОснДоверОргПер", Реквизит, , ТекстОшибки);
						Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий");
						ЗаполнитьСвойствоXDTO(ПредОргПер, "ОснПолнПредПер", Реквизит, , ТекстОшибки);
						
						ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия");
						ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
						Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя");
						ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
						Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество");
						ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ПредОргПер, "ФИО", ФИО,  , ТекстОшибки);
							
						ЗаполнитьСвойствоXDTO(ИнЛицо, "ПредОргПер", ПредОргПер, , ТекстОшибки);
					ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ФЛ" Тогда
						ФЛПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер", ПространствоИменСхемы);
						
						Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения");
						ЗаполнитьСвойствоXDTO(ФЛПер, "ИныеСвед", Реквизит, , ТекстОшибки);
						Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку");
						ЗаполнитьСвойствоXDTO(ФЛПер, "ОснДоверФЛ", Реквизит, , ТекстОшибки);
						
						ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия");
						ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
						Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя");
						ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
						Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
							"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество");
						ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ФЛПер, "ФИО", ФИО,  , ТекстОшибки);
						
						ЗаполнитьСвойствоXDTO(ИнЛицо, "ФЛПер", ФЛПер, , ТекстОшибки);
						
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(СвЛицПер, "ИнЛицо", ИнЛицо, , ТекстОшибки);
					
				КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "СвЛицПер", СвЛицПер, , ТекстОшибки);
				
			КонецЕсли;
				
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ТранспортнаяНакладная");
			Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
				СтрокаТаблицы = ДеревоДанных.Строки.Найти("ТранспортнаяНакладная", "ПолныйПуть");
				Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
					Для Каждого Накладная Из СтрокаТаблицы.Строки Цикл
						ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл", ПространствоИменСхемы);
						
						ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл",
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Накладная,
							"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер"), Истина, ТекстОшибки);
						ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Накладная,
							"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата"));
						ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаДок, Истина, ТекстОшибки);
							
						ТранГруз.ТранНакл.Добавить(ТранНакл);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПеревозчике")) Тогда
				Перевозчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
				ЗаполнитьСведенияОбУчастникеУПД(Перевозчик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОПеревозчике");
				ЗаполнитьСвойствоXDTO(ТранГруз, "Перевозчик", Перевозчик, Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ТранГруз", ТранГруз, , ТекстОшибки);
			
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПередачеВещи")) Тогда
				СвПерВещи = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвПерВещи", ПространствоИменСхемы);
				
				ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПередачеВещи.ПередачаВещиДата"));
				ЗаполнитьСвойствоXDTO(СвПерВещи, "ДатаПерВещ", ДатаДок, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвПерВещи, "СвПерВещ",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПередачеВещи.ПередачаВещиСведения"), , ТекстОшибки);
					
				ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "СвПерВещи", СвПерВещи, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДанныеОбОтгрузкеТоваров, "СвПер", ОтгрузкаТоваров, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаОтгрузки")) Тогда
				ИнфПолФХЖ3 = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.ИнфПолФХЖ3", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "ИдФайлИнфПол",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаОтгрузки.ИдентификаторФайла"), , ТекстОшибки);
				
				СтрокиДопДанныеДокументаОтгрузки = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки", "ПолныйПуть");
				СтрокаТаблицы = СтрокиДопДанныеДокументаОтгрузки.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть");
				Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
					Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
						ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИменСхемы);
						
						ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
							"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
							"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, ТекстОшибки);
						
						ИнфПолФХЖ3.ТекстИнф.Добавить(ТекстИнфТип);
					КонецЦикла;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ДанныеОбОтгрузкеТоваров, "ИнфПолФХЖ3", ИнфПолФХЖ3, Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Документ, "СвПродПер", ДанныеОбОтгрузкеТоваров, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары")) Тогда
			ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "5", Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "6", Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, ТекстОшибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		Документ.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД ТОРГ12(ответный титул).
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьИнформациюПокупателяXML(ДеревоДанных)
	
	ПространствоИменСхемы = "ON_SCHFDOPPOK";
	ТекстОшибки = "";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		ИнфПок = ПолучитьОбъектТипаCML("Файл.ИнфПок", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(ИнфПок, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок"));
		ЗаполнитьСвойствоXDTO(ИнфПок, "ДатаИнфПок", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИнфПок, "ВремИнфПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИнфПок, "НаимЭконСубСост",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "СоставительДокументаНаименование"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИнфПок, "ОснДоверОргСост",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "СоставительДокументаДоверенность"), , ТекстОшибки);
		
		ИдИнфПрод = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИдИнфПрод", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ИдФайлИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ИдФайлаИнфПр"), Истина, ТекстОшибки);
		ДатаДокИнфПр = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаФайлаИнфПр"));
		ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ДатаФайлИнфПр", ДатаДокИнфПр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ВремФайлИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ВремФайлаИнфПр"), Истина, ТекстОшибки);
		
		Подписи = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолученныеЭП");
		Если Не ЗначениеЗаполнено(Подписи) Тогда
			Подписи = Новый Массив;
			Подписи.Добавить("---");
		КонецЕсли;
		Для Каждого Подпись Из Подписи Цикл
			ИдИнфПрод.ЭП.Добавить(Подпись);
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(ИнфПок, "ИдИнфПрод", ИдИнфПрод, Истина, ТекстОшибки);
		
		СодФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "НаимДокОпрПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НаимДокОпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "Функция", Лев(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "Функция"), 1), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "НомСчФИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерИнфПр"), , ТекстОшибки);
		ДатаИнформацииПродавца = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаИнфПр"));
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "ДатаСчФИнфПр", ДатаИнформацииПродавца, Истина, ТекстОшибки);
		
		СвПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин", ПространствоИменСхемы);
		ДатаПолучения = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров"));
		ЗаполнитьСвойствоXDTO(СвПрин, "ДатаПрин", ДатаПолучения, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвПрин, "СодОпер",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации"), Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары")) Тогда
			
			СвЛицПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин", ПространствоИменСхемы);
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "РаботникОрганизацииПокупателя" Тогда
				
				РабОргПок = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок", ПространствоИменСхемы);
				
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность");
				ЗаполнитьСвойствоXDTO(РабОргПок, "Должность", Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ИныеСведения");
				ЗаполнитьСвойствоXDTO(РабОргПок, "ИныеСвед", Реквизит, , ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий");
				ЗаполнитьСвойствоXDTO(РабОргПок, "ОснПолн", Реквизит, , ТекстОшибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия");
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
				Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя");
				ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
				Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество");
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(РабОргПок, "ФИО", ФИО,  , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(СвЛицПрин, "РабОргПок", РабОргПок, , ТекстОшибки);
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "ИноеЛицо" Тогда
				
				ИнЛицо = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо", ПространствоИменСхемы);
				Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
					ПредОргПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ПредОргПрин", ПространствоИменСхемы);
					
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
					ЗаполнитьСвойствоXDTO(ПредОргПрин, "Должность", Реквизит, Истина, ТекстОшибки);
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения");
					ЗаполнитьСвойствоXDTO(ПредОргПрин, "ИныеСвед", Реквизит, , ТекстОшибки);
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации");
					ЗаполнитьСвойствоXDTO(ПредОргПрин, "НаимОргПрин", Реквизит, Истина, ТекстОшибки);
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку");
					ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснДоверОргПрин", Реквизит, , ТекстОшибки);
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий");
					ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснПолнПредПрин", Реквизит, , ТекстОшибки);
					
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
					Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия");
					ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
					Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Имя");
					ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
					Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество");
					ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ПредОргПрин, "ФИО", ФИО,  , ТекстОшибки);
					
					ЗаполнитьСвойствоXDTO(ИнЛицо, "ПредОргПрин", ПредОргПрин, , ТекстОшибки);
				ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ФЛ" Тогда
					ФЛПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ФЛПрин", ПространствоИменСхемы);
					
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ИныеСведения");
					ЗаполнитьСвойствоXDTO(ФЛПрин, "ИныеСвед", Реквизит, , ТекстОшибки);
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ОснованиеПолномочий");
					ЗаполнитьСвойствоXDTO(ФЛПрин, "ОснДоверФЛ", Реквизит, , ТекстОшибки);
					
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
					Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия");
					ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
					Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя");
					ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
					Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество");
					ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ФЛПрин, "ФИО", ФИО,  , ТекстОшибки);
					
					ЗаполнитьСвойствоXDTO(ИнЛицо, "ФЛПрин", ФЛПрин, , ТекстОшибки);
					
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СвЛицПрин, "ИнЛицо", ИнЛицо, , ТекстОшибки);
				
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СвПрин, "СвЛицПрин", СвЛицПрин, , ТекстОшибки);
			
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(СодФХЖ4, "СвПрин", СвПрин, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаПолучения")) Тогда
			ИнфПолФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "ИдФайлИнфПол",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ДопДанныеДокументаПолучения.ИдентификаторФайла"), , ТекстОшибки);
			
			СтрокиДопДанныеДокументаПолучения = ДеревоДанных.Строки.Найти("ДопДанныеДокументаПолучения", "ПолныйПуть");
			СтрокаТаблицы = СтрокиДопДанныеДокументаПолучения.Строки.Найти("ДопДанныеДокументаПолучения.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнф = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф", ПространствоИменСхемы);
					
					ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, ТекстОшибки);
					
					ИнфПолФХЖ4.ТекстИнф.Добавить(ТекстИнф);
				КонецЦикла;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СодФХЖ4, "ИнфПолФХЖ4", ИнфПолФХЖ4, Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИнфПок, "СодФХЖ4", СодФХЖ4, Истина, ТекстОшибки);
		
		// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары")) Тогда
			ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "2", Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, ТекстОшибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ФЛ = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ", ПространствоИменСхемы);
		ФИО = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ.ФИО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, ТекстОшибки);
		
		ИнфПок.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "ИнфПок", ИнфПок, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл,
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД УПД.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьИнформациюПродавцаУКДXML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"));
	
	ВерсияФормата = "5.01";
	ПространствоИменСхемы = "ON_KORSCHFDOPPR";
	
	ТекстОшибки = "";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Техническая информация по документу.
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ВерсияФормата, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		НаимОрг = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
		ИННЮЛ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
		ИдЭДО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Функция", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ПоФактХЖ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПоФактХЖ"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "НаимДокОпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НаимДокОпр"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ОснДоверОргСост", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , ТекстОшибки);
		
		// Сведения о счете-фактуре.
		ДанныеСчетаФактуры = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИменСхемы);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "НомерКСчФ", НомерДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДатаКСчФ", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "КодОКВ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"), Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
		Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
			ДатаДок = ДатаДД_ММ_ГГГГ(ДатаДок);
			ИспрКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "НомИспрКСчФ", НомерДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "ДатаИспрКСчФ", ДатаДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры,"ИспрКСчФ", ИспрКСчФ, , ТекстОшибки);
		КонецЕсли;
		
		СчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ", ПространствоИменСхемы);
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента");
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
		ЗаполнитьСвойствоXDTO(СчФ, "НомерСчФ", НомерДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СчФ, "ДатаСчФ", ДатаДок, Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента");
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента");
		
		Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
			ДатаДок = ДатаДД_ММ_ГГГГ(ДатаДок);
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ.ИспрСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомерДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДок, Истина, ТекстОшибки);
			СчФ.ИспрСчФ.Добавить(ИспрСчФ);
		КонецЕсли;
		ДанныеСчетаФактуры.СчФ.Добавить(СчФ);
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		ЗаполнитьСведенияОбУчастникеУКД(СвПрод, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОПродавце");
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПрод", СвПрод, Истина, ТекстОшибки);
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		ЗаполнитьСведенияОбУчастникеУКД(СвПокуп, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОПокупателе");
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках")) Тогда
			ДопСвФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ДопСвФХЖ1", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ИдГосКон",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "НаимОКВ",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаНаименование"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "КурсВал",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс"), , ТекстОшибки);
				
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДопСвФХЖ1", ДопСвФХЖ1, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры")) Тогда
			ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИнфПолФХЖ1", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИнфПолФХЖ1, "ИдФайлИнфПол",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры.ИдентификаторФайла"), , ТекстОшибки);
				
			СтрокиДопДанныеСчетаФактуры = ДеревоДанных.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
			СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИменСхемы);
					
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, ТекстОшибки);
					
					ИнфПолФХЖ1.ТекстИнф.Добавить(ТекстИнфТип);
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ИнфПолФХЖ1", ИнфПолФХЖ1, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", ДанныеСчетаФактуры, Истина, ТекстОшибки);
		
		// Сведения таблицы счета-фактуры.
		ТабличнаяЧасть = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведенияОТоваре = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов", ПространствоИменСхемы);
			
			// Обязательные реквизиты:
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НомСтр", Товар.Значение, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НаимТов", Реквизит, Истина, ТекстОшибки);
			
			РеквизитСтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
			СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтДо", СтавкаXDTO, Истина, ТекстОшибки);
			РеквизитСтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтПосле", СтавкаXDTO, Истина, ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовДо", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовПосле", Реквизит, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовДо", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.Количество");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовПосле", Реквизит, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовДо", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовПосле", Реквизит, , ТекстОшибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаДоКорректировки");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", НСтр("ru ='без акциза'"), Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизДо", СумАкцизТип, Истина, ТекстОшибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкциза");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", НСтр("ru ='без акциза'"), Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизПосле", СумАкцизТип, Истина, ТекстОшибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			СумУвел = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаУвеличение");
			СумУм = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаУменьшение");
			Если Не ЗначениеЗаполнено(СумУвел) И Не ЗначениеЗаполнено(СумУм) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", 0, Истина, ТекстОшибки);
			ИначеЕсли ЗначениеЗаполнено(СумУвел) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", Реквизит, Истина, ТекстОшибки);
			ИначеЕсли ЗначениеЗаполнено(СумУм) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", Реквизит, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизРазн", РазнСумНалТип, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалДо", СумНДСТип, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалПосле", СумНДСТип, Истина, ТекстОшибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			СумУвел = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаУвеличение");
			СумУм = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение");
			Если Не ЗначениеЗаполнено(СумУвел) И Не ЗначениеЗаполнено(СумУм) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", 0, Истина, ТекстОшибки);
				
			ИначеЕсли ЗначениеЗаполнено(СумУвел) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", СумУвел, Истина, ТекстОшибки);
				
			ИначеЕсли ЗначениеЗаполнено(СумУм) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", СумУм, Истина, ТекстОшибки);
				
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалРазн", РазнСумНалТип, Истина, ТекстОшибки);
			
			// Стоимость без налога
			СуммаДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
			СуммаПосле = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
			Если ЗначениеЗаполнено(СуммаДо) И ЗначениеЗаполнено(СуммаПосле) Тогда
				СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", СуммаДо, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", СуммаПосле, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаУвеличение");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", Реквизит, , ТекстОшибки);
				КонецЕсли;
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаУменьшение");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Реквизит, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовБезНДС", СтоимТип, , ТекстОшибки);
			КонецЕсли;
			
			// Стоимость с налогом
			СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);
			СуммаДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки");
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", СуммаДо, Истина, ТекстОшибки);
			СуммаПосле = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", СуммаПосле, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУвеличение");
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", Реквизит, Истина, ТекстОшибки);
			КонецЕсли;
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУменьшение");
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Реквизит, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовУчНал", СтоимТип, Истина, ТекстОшибки);
			
			// Дополнительные сведения о товаре
			ДопСведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ДопСведТов", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КорреспондирующиеСчетаДебет");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "КорСчДебет", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КорреспондирующиеСчетаКредит");
			ЗаполнитьСвойствоXDTO(ДопСведТов, "КорСчКредит", Реквизит, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ДопСведТов", ДопСведТов, Истина, ТекстОшибки);
			
			СтрокаТаблицы = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИменСхемы);
					
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, ТекстОшибки);
					
					СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
				КонецЦикла;
			КонецЕсли;
			ТабличнаяЧасть.СведТов.Добавить(СведенияОТоваре);
		КонецЦикла;
		
		// Всего увеличение/уменьшение.
		ВсегоУвел = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение");
		ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовБезНДСВсего", Реквизит, Истина, ТекстОшибки, Истина);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение");
		ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовУчНалВсего", Реквизит, Истина, ТекстОшибки, Истина);
		
		СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение");
		Если Не ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
		Иначе
			ЗначениеСумНДСТип = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
			ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", ЗначениеСумНДСТип, Истина, ТекстОшибки, Истина);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ВсегоУвел, "СумНал", СумНДСТип, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУвел", ВсегоУвел, Истина, ТекстОшибки);
		
		ВсегоУм = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение");
		ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовБезНДСВсего", Реквизит, Истина, ТекстОшибки, Истина);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение");
		ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовУчНалВсего", Реквизит, Истина, ТекстОшибки, Истина);
		
		СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение");
		Если Не ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
		Иначе
			ЗначениеСумНДСТип = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
			ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", ЗначениеСумНДСТип, Истина, ТекстОшибки, Истина);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ВсегоУм, "СумНал", СумНДСТип, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУм", ВсегоУм, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТабличнаяЧасть, Истина, ТекстОшибки);
	
		// Сведения о факте отгрузки товаров.
		ДанныеОбИзмененииСтоимости = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "СодОпер",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации"), Истина, ТекстОшибки);
		ДатаНаправленияНаСогласование = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаНаправленияНаСогласование"));
		ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ДатаНапр", ДатаНаправленияНаСогласование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ИныеСвИзмСтоим",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ПередатДокум",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов"), Истина, ТекстОшибки);
			
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОснованиеКорректировки");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокаТаблицы = ДеревоДанных.Строки.Найти("ОснованиеКорректировки", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
					ОснКор = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.ОснКор", ПространствоИменСхемы);
					
					ЗаполнитьСвойствоXDTO(ОснКор, "НаимОсн",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументНаименование"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ОснКор, "НомОсн",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументНомер"), , ТекстОшибки);
						
					ДокументДата = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументДата"));
					ЗаполнитьСвойствоXDTO(ОснКор, "ДатаОсн", ДокументДата, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ОснКор, "ДопСвОсн",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументДопСведения"), , ТекстОшибки);
					
					ДанныеОбИзмененииСтоимости.ОснКор.Добавить(ОснКор);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОснКор = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ОснПер", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ОснКор, "НаимОсн", "Отсутствует", Истина, ТекстОшибки);
			ДанныеОбИзмененииСтоимости.ОснКор.Добавить(ОснКор);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ3", ДанныеОбИзмененииСтоимости, Истина, ТекстОшибки);
	
		// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "6", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, ТекстОшибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		Документ.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Формирование электронного документа Передача работ заказчику по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - объект, по которому необходимо сформировать электронный документ.
//
// Возвращаемое значение: 
//  Структура - параметры данных.
//
Функция СформироватьПередачаРаботЗаказчик(СсылкаНаЭД)
	
	ВозвращаемоеЗначение = Неопределено;
			
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "НаименованиеФайла, ВладелецФайла,
		|ДатаФормированияЭДОтправителем, ОтправительЭД, ПолучательЭД");
		
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО, НастройкаЭДО, Контрагент,
		|НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента, ВерсияРегламентаЭДО");
			
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",                   Перечисления.ВидыЭД.АктЗаказчик);
	СтруктураЭД.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",                 Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Получатель", РеквизитыФайлаЭД.ОтправительЭД);
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      РеквизитыФайлаЭД.ПолучательЭД);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыФайлаЭД.НаименованиеФайла);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыФайлаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",               РеквизитыЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.НастройкаЭДО);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_REZRUZAK");
	СтруктураЭД.Вставить("КНД",                              "1175013");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("Акт501_Заказчик");

	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДокумента);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		Реквизит = Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДФ=HH.mm.ss");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ВремДокАктИ", Реквизит);
		Реквизит = Формат(РеквизитыФайлаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=D");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаДокАктИ", Реквизит);
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерАкт", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаАкт",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.Организация, "Наименование");
		ВставитьЗначениеВДерево(ДеревоДокумента, "НаименованиеОрганизации", НаименованиеОрганизации);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИмяФайлаПродавца", РеквизитыФайлаЭД.НаименованиеФайла);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ПолученныеЭП",
								ЭППолученногоФайла(СсылкаНаЭД));
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
		ИдФайл = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		СтруктураПараметров.Вставить("ПолученныеЭП", ЭППолученногоФайла(СсылкаНаЭД));
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИдФайлАктИ", РеквизитыФайлаЭД.НаименованиеФайла);
		
		Если СформироватьПередачаРаботЗаказчикCML(ДеревоДокумента) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаЭД, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаЭД);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки)
	
	ФЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ", ПространствоИменСхемы);
	ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ.ФИО", ПространствоИменСхемы);
	ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаполнитьИППодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки)
	
	ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
	ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
	ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", "011000000000", , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

Процедура ПрочитатьИнформациюПродавцаXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УПД_ИнформацияПродавца");
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Если ЭД.Документ.Функция = "СЧФДОП" Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
	ИначеЕсли ЭД.Документ.Функция = "СЧФ" Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД;
		
	ИначеЕсли ЭД.Документ.Функция = "ДОП" Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД;
		
	КонецЕсли;
	
	// Характеристики электронного документа.
	ВставитьЗначениеВДерево(ДеревоДанных, "Функция", ЭД.Документ.Функция);
	ВставитьЗначениеВДерево(ДеревоДанных, "Наименование", ЭД.Документ.ПоФактХЖ);
	ВставитьЗначениеВДерево(ДеревоДанных, "ПервичныйДокументНаименование", ЭД.Документ.НаимДокОпр);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", ЭД.Документ.НаимЭконСубСост);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность", ЭД.Документ.ОснДоверОргСост);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ЭД.Документ.СвСчФакт.НомерСчФ);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ДатаСчФ));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ЭД.Документ.СвСчФакт.КодОКВ);
	
	Если ЭД.Документ.СвСчФакт.ИспрСчФ <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ЭД.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	
	Если ЭД.Документ.СвСчФакт.ГрузОт <> Неопределено Тогда
		Если ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр <> Неопределено Тогда
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр, "СведенияОГрузоотправителе.Грузоотправитель");
		ИначеЕсли ЭД.Документ.СвСчФакт.ГрузОт.ОнЖе <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвСчФакт.ГрузПолуч <> Неопределено Тогда
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, ЭД.Документ.СвСчФакт.ГрузПолуч, "СведенияОГрузополучателе");
	КонецЕсли;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, ЭД.Документ.СвСчФакт.СвПрод, "СведенияОПродавце");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, ЭД.Документ.СвСчФакт.СвПокуп, "СведенияОПокупателе");
	
	Если ЭД.Документ.СвСчФакт.СвПРД <> Неопределено И ЭД.Документ.СвСчФакт.СвПРД.Количество() > 0 Тогда
		ПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
		ПлатежноРасчетныеДокументы.Колонки.Добавить("НомерПРД");
		ПлатежноРасчетныеДокументы.Колонки.Добавить("ДатаПРД");

		Для Каждого СтрокаПлатежа Из ЭД.Документ.СвСчФакт.СвПРД Цикл
			НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
			НоваяСтрока.НомерПРД = СтрокаПлатежа.НомерПРД;
			НоваяСтрока.ДатаПРД = ДатаИзСтроки(СтрокаПлатежа.ДатаПРД);
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежноРасчетныеДокументы, "ПлатежноРасчетныеДокументы");
	КонецЕсли;
	
	Если ЭД.Документ.СвСчФакт.ДопСвФХЖ1 <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ЭД.Документ.СвСчФакт.ДопСвФХЖ1.ИдГосКон);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ЭД.Документ.СвСчФакт.ДопСвФХЖ1.НаимОКВ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ЭД.Документ.СвСчФакт.ДопСвФХЖ1.КурсВал);
	КонецЕсли;
	
	Если ЭД.Документ.СвСчФакт.ИнфПолФХЖ1 <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеСчетаФактуры.ИдентификаторФайла", ЭД.Документ.СвСчФакт.ИнфПолФХЖ1.ИдФайлИнфПол);
			
		Если ЭД.Документ.СвСчФакт.ИнфПолФХЖ1.ТекстИнф <> Неопределено
			И ЭД.Документ.СвСчФакт.ИнфПолФХЖ1.ТекстИнф.Количество() > 0 Тогда
			
			// Сведения о организации.
			ИННОрганизации = ""; КППОрганизации = "";
			ВидУчастника = "СведенияОПродавце";
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ВидУчастника = "СведенияОПокупателе";
			КонецЕсли;
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
				
				ИННОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
				КППОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
				
				ИННОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
				
				ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
			КонецЕсли;
			Организация = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации, КППОрганизации);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ЭД.Документ.СвСчФакт.ИнфПолФХЖ1.ТекстИнф Цикл
				
				Если СтрокаИнформации.Идентиф = "ИдентификаторДокументаОснования" Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Организация",   Организация);
					СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					
					ДокументОснование = ДокументОснованиеПоИдентификатору(СтрокаИнформации.Значен, СтруктураОтбора, НовыйЭД.ТипЭлементаВерсииЭД);
					Если ДокументОснование <> Неопределено Тогда
						ДокументыОснованияСчетаФактуры.Добавить(ДокументОснование);
					КонецЕсли;
				ИначеЕсли СтрокаИнформации.Идентиф = "ИДЭДДокументаОснования" Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Организация",   Организация);
					СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					ДокументОснование = ПолучитьДокументОснование(СтрокаИнформации.Значен, СтруктураОтбора);
					Если ДокументОснование <> Неопределено Тогда
						ДокументыОснованияСчетаФактуры.Добавить(ДокументОснование);
					КонецЕсли;
					
				ИначеЕсли СтрокаИнформации.Идентиф = "ДанныеКомиссионера" Тогда
					ПространствоИменСхемы = "ON_SCHFDOPPR";
					ОбъектXML = Новый ЧтениеXML;
					СтрокаXML = "<УчастникТип xmlns=""" + ПространствоИменСхемы + """> " + СтрокаИнформации.Значен + " </УчастникТип>";
					ОбъектXML.УстановитьСтроку(СтрокаXML);
					СведенияОКомиссионере = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("УчастникТип", ПространствоИменСхемы));
					ОбъектXML.Закрыть();
					ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере");
				ИначеЕсли СтрокаИнформации.Идентиф = "ВидСчетаФактуры" Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ВидСчетаФактуры", СтрокаИнформации.Значен);
				Иначе
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = СтрокаИнформации.Идентиф;
					НоваяСтрока.Значение      = СтрокаИнформации.Значен;
				КонецЕсли;
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры",
				ДокументыОснованияСчетаФактуры);
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.ТаблСчФакт <> Неопределено Тогда
		
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("ИдТовараУКонтрагента");
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("Количество");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом");
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога");
		СведенияОТоварах.Колонки.Добавить("СведенияОТаможеннойДекларации");
		СведенияОТоварах.Колонки.Добавить("ДокументОснование");
		СведенияОТоварах.Колонки.Добавить("Признак");
		СведенияОТоварах.Колонки.Добавить("ПризнакДополнительнаяИнформация");
		СведенияОТоварах.Колонки.Добавить("ТоварКод");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		СведенияОТоварах.Колонки.Добавить("СтранаПроисхожденияНаименование");
		СведенияОТоварах.Колонки.Добавить("КоличествоНадлежитОтпустить");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаДебет");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаКредит");
		СведенияОТоварах.Колонки.Добавить("ТекстоваяИнформация");
		
		Для Каждого Товар Из ЭД.Документ.ТаблСчФакт.СведТов Цикл
			
			// Основные характеристики товара.
			НоваяСтрока = СведенияОТоварах.Добавить();
			НоваяСтрока.ТоварНаименование = Товар.НаимТов;
			НоваяСтрока.ЕдиницаИзмеренияКод = Товар.ОКЕИ_Тов;
			НоваяСтрока.Количество = Товар.КолТов;
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Товар.ЦенаТов;
			НоваяСтрока.СтоимостьТоваровБезНалога = Товар.СтТовБезНДС;
			НоваяСтрока.НалоговаяСтавка = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(Товар.НалСт);
			НоваяСтрока.СтоимостьТоваровСНалогом = Товар.СтТовУчНал;
			НоваяСтрока.СуммаАкциза = ?(Товар.Акциз.СумАкциз <> Неопределено, Число(Товар.Акциз.СумАкциз), НСтр("ru ='без акциза'"));
			НоваяСтрока.СуммаНалога = ?(Товар.СумНал.СумНал <> Неопределено, Число(Товар.СумНал.СумНал), 0);
			
			// Сведения о таможенной декларации.
			Если Товар.СвТД <> Неопределено Тогда
			
				СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
				СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
				СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(29)));
				Для Каждого СведенияТД Из Товар.СвТД Цикл
					СтрокаТаблицы = СведенияОТаможеннойДекларации.Добавить();
					СтрокаТаблицы.СтранаПроисхожденияКод    = СведенияТД.КодПроисх;
					СтрокаТаблицы.ТаможеннаяДекларацияНомер = СведенияТД.НомерТД;
				КонецЦикла;
				НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			КонецЕсли;
			
			Если Товар.ИнфПолФХЖ2 <> Неопределено И Товар.ИнфПолФХЖ2.Количество() > 0 Тогда
				
				ТекстоваяИнформация = Новый ТаблицаЗначений;
				ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
				ТекстоваяИнформация.Колонки.Добавить("Значение");
				
				ДокументОснованиеНайден = Ложь;
				
				Для Каждого СтрокаИнформации Из Товар.ИнфПолФХЖ2 Цикл
					
					Если СтрокаИнформации.Идентиф = "ИдентификаторДокументаОснования" И НЕ ДокументОснованиеНайден Тогда
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						НоваяСтрока.ДокументОснование = ДокументОснованиеПоИдентификатору(СтрокаИнформации.Значен, СтруктураОтбора);
						ДокументОснованиеНайден = Истина;
					ИначеЕсли СтрокаИнформации.Идентиф = "ИДЭДДокументаОснования" И НЕ ДокументОснованиеНайден Тогда
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						НоваяСтрока.ДокументОснование = ПолучитьДокументОснование(СтрокаИнформации.Значен, СтруктураОтбора);
						
					ИначеЕсли СтрокаИнформации.Идентиф = "ИД" Тогда
						
						НоваяСтрока.ИдТовараУКонтрагента = СтрокаИнформации.Значен;
					Иначе
						СтрокаТаблицы = ТекстоваяИнформация.Добавить();
						СтрокаТаблицы.Идентификатор = СтрокаИнформации.Идентиф;
						СтрокаТаблицы.Значение      = СтрокаИнформации.Значен;
					КонецЕсли;
				КонецЦикла;
				
				НоваяСтрока.ТекстоваяИнформация = ТекстоваяИнформация;
			КонецЕсли;
			
			// Дополнительные характеристики товара.
			Если Товар.ДопСведТов <> Неопределено Тогда
				НоваяСтрока.Признак                         = Товар.ДопСведТов.ПрТовРаб;
				НоваяСтрока.ПризнакДополнительнаяИнформация = Товар.ДопСведТов.ДопПризн;
				НоваяСтрока.ТоварКод                        = Товар.ДопСведТов.КодТов;
				НоваяСтрока.ЕдиницаИзмеренияНаименование    = Товар.ДопСведТов.НаимЕдИзм;
				НоваяСтрока.СтранаПроисхожденияНаименование = Товар.ДопСведТов.КрНаимСтрПр;
				НоваяСтрока.КоличествоНадлежитОтпустить     = Товар.ДопСведТов.НадлОтп;
				НоваяСтрока.КорреспондирующиеСчетаДебет     = Товар.ДопСведТов.КорСчДебет;
				НоваяСтрока.КорреспондирующиеСчетаКредит    = Товар.ДопСведТов.КорСчКредит;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСуммаНалога",
			СуммаНДССФПривестиКТребуемомуФормату(ЭД.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНал));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоКоличество", ЭД.Документ.ТаблСчФакт.ВсегоОпл.НеттоВс);
	КонецЕсли;
	
	Если ЭД.Документ.СвПродПер <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", ЭД.Документ.СвПродПер.СвПер.СодОпер);
		
		Если ЭД.Документ.СвПродПер.СвПер.ВидОпер <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации",
				XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ЭД.Документ.СвПродПер.СвПер.ВидОпер));
		КонецЕсли;
		
		Если ЭД.Документ.СвПродПер.СвПер.ДатаПер <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров",
				ДатаИзСтроки(ЭД.Документ.СвПродПер.СвПер.ДатаПер));
		КонецЕсли;
		
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		Для Каждого Основание Из ЭД.Документ.СвПродПер.СвПер.ОснПер Цикл
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = Основание.НаимОсн;
			НоваяСтрока.ДокументНомер        = Основание.НомОсн;
			Если Основание.ДатаОсн <> Неопределено Тогда
				НоваяСтрока.ДокументДата     = ДатаИзСтроки(Основание.ДатаОсн);
			КонецЕсли;
			НоваяСтрока.ДокументДопСведения  = Основание.ДопСвОсн;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
		
		Если ЭД.Документ.СвПродПер.СвПер.СвЛицПер <> Неопределено Тогда
			
			Если ЭД.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод <> Неопределено Тогда
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность",
					ЭД.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.Должность);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения",
					ЭД.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ИныеСвед);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий",
					ЭД.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ОснПолн);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия",
					ЭД.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя",
					ЭД.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество",
					ЭД.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Отчество);
				
			ИначеЕсли ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо <> Неопределено Тогда
				Если ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер <> Неопределено Тогда
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.Должность);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ИныеСвед);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.НаимОргПер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснДоверОргПер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснПолнПредПер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Фамилия);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Имя);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Отчество);
					
				ИначеЕсли ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер <> Неопределено Тогда
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ИныеСвед);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ОснДоверФЛ);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Фамилия);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Имя);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество",
						ЭД.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭД.Документ.СвПродПер.СвПер.ТранГруз <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОТранспортировке", ЭД.Документ.СвПродПер.СвПер.ТранГруз.СвТранГруз);
			
			Если ЭД.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл <> Неопределено
				И ЭД.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл.Количество() > 0 Тогда
				
				ТранспортнаяНакладная = Новый ТаблицаЗначений;
				ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
				ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
				Для Каждого Накладная Из ЭД.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл Цикл
					НоваяСтрока = ТранспортнаяНакладная.Добавить();
					НоваяСтрока.ТранспортнаяНакладнаяНомер = Накладная.НомТранНакл;
					НоваяСтрока.ТранспортнаяНакладнаяДата  = ДатаИзСтроки(Накладная.ДатаТранНакл);
				КонецЦикла;
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
			КонецЕсли;
			
			Если ЭД.Документ.СвПродПер.СвПер.ТранГруз.Перевозчик <> Неопределено Тогда
				ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, ЭД.Документ.СвПродПер.СвПер.ТранГруз.Перевозчик, "СведенияОПеревозчике");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭД.Документ.СвПродПер.СвПер.СвПерВещи <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОПередачеВещи.ПередачаВещиДата", ДатаИзСтроки(ЭД.Документ.СвПродПер.СвПер.СвПерВещи.ДатаПерВещ));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОПередачеВещи.ПередачаВещиСведения", ЭД.Документ.СвПродПер.СвПер.СвПерВещи.СвПерВещ);
		КонецЕсли;
		
		Если ЭД.Документ.СвПродПер.ИнфПолФХЖ3 <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДопДанныеДокументаОтгрузки.ИдентификаторФайла", ЭД.Документ.СвПродПер.ИнфПолФХЖ3.ИдФайлИнфПол);
				
			Если ЭД.Документ.СвПродПер.ИнфПолФХЖ3.ТекстИнф <> Неопределено
				И ЭД.Документ.СвПродПер.ИнфПолФХЖ3.ТекстИнф.Количество() > 0 Тогда
				
				ДокументыОснованияДокументаОтгрузки = Новый Массив;
				
				ТекстоваяИнформация = Новый ТаблицаЗначений;
				ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
				ТекстоваяИнформация.Колонки.Добавить("Значение");
				
				Для Каждого СтрокаИнформации Из ЭД.Документ.СвПродПер.ИнфПолФХЖ3.ТекстИнф Цикл
					
					Если СтрокаИнформации.Идентиф = "ИдентификаторДокументаОснования" Тогда
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						ДокументОснование = ДокументОснованиеПоИдентификатору(СтрокаИнформации.Значен, СтруктураОтбора);
						Если ДокументОснование <> Неопределено Тогда
							ДокументыОснованияДокументаОтгрузки.Добавить(ДокументОснование);
						КонецЕсли;
					ИначеЕсли СтрокаИнформации.Идентиф = "ИДЭДДокументаОснования" Тогда
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						ДокументОснование = ПолучитьДокументОснование(СтрокаИнформации.Значен, СтруктураОтбора);
						Если ДокументОснование <> Неопределено Тогда
							ДокументыОснованияДокументаОтгрузки.Добавить(ДокументОснование);
						КонецЕсли;
					ИначеЕсли СтрокаИнформации.Идентиф = "ИныеСведенияОбОтгрузке" Тогда
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
							"ИныеСведенияОбОтгрузке", СтрокаИнформации.Значен);
					Иначе
						НоваяСтрока = ТекстоваяИнформация.Добавить();
						НоваяСтрока.Идентификатор = СтрокаИнформации.Идентиф;
						НоваяСтрока.Значение      = СтрокаИнформации.Значен;
					КонецЕсли;
				КонецЦикла;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки",
					ДокументыОснованияДокументаОтгрузки);
					
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.Подписант <> Неопределено
		И ЭД.Документ.Подписант.Количество() > 0 Тогда
		
		Если ЭД.Документ.Подписант[0].ФЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.Документ.Подписант[0].ФЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.Документ.Подписант[0].ФЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.Документ.Подписант[0].ФЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
			ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", ЭД.Документ.Подписант[0].ФЛ.ГосРегИПВыдДов);
		ИначеЕсли ЭД.Документ.Подписант[0].ИП <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.Документ.Подписант[0].ИП.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.Документ.Подписант[0].ИП.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.Документ.Подписант[0].ИП.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
			ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", ЭД.Документ.Подписант[0].ИП.СвГосРегИП);
		ИначеЕсли ЭД.Документ.Подписант[0].ЮЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.Документ.Подписант[0].ЮЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.Документ.Подписант[0].ЮЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.Документ.Подписант[0].ЮЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", ЭД.Документ.Подписант[0].ЮЛ.Должн);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", "");
			ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", "");
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПродавцаУКДXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УКД_ИнформацияПродавца");
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Если ЭД.Документ.Функция = "КСЧФДИС" Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД;
	ИначеЕсли ЭД.Документ.Функция = "КСЧФ" Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД;
		
	ИначеЕсли ЭД.Документ.Функция = "ДИС" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД;
	КонецЕсли;
	
	// Характеристики электронного документа.
	ВставитьЗначениеВДерево(ДеревоДанных, "Функция", ЭД.Документ.Функция);
	ВставитьЗначениеВДерево(ДеревоДанных, "Наименование", ЭД.Документ.ПоФактХЖ);
	ВставитьЗначениеВДерево(ДеревоДанных, "ПервичныйДокументНаименование", ЭД.Документ.НаимДокОпр);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", ЭД.Документ.НаимЭконСубСост);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность", ЭД.Документ.ОснДоверОргСост);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ЭД.Документ.СвКСчФ.НомерКСчФ);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаКСчФ));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ЭД.Документ.СвКСчФ.КодОКВ);
	
	Если ЭД.Документ.СвКСчФ.ИспрКСчФ <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
	КонецЕсли;
	
	СчФ = ЭД.Документ.СвКСчФ.СчФ;
	Если СчФ.Количество() > 0 Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", СчФ[0].НомерСчФ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", ДатаИзСтроки(СчФ[0].ДатаСчФ));
		ИспрСчФ = СчФ[0].ИспрСчФ;
		Если ИспрСчФ.Количество() > 0 Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента", ИспрСчФ[0].НомИспрСчФ);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента", ДатаИзСтроки(ИспрСчФ[0].ДатаИспрСчФ));
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, ЭД.Документ.СвКСчФ.СвПрод, "СведенияОПродавце");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, ЭД.Документ.СвКСчФ.СвПокуп, "СведенияОПокупателе");
	
	Если ЭД.Документ.СвКСчФ.ДопСвФХЖ1 <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ЭД.Документ.СвКСчФ.ДопСвФХЖ1.ИдГосКон);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ЭД.Документ.СвКСчФ.ДопСвФХЖ1.НаимОКВ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ЭД.Документ.СвКСчФ.ДопСвФХЖ1.КурсВал);
	КонецЕсли;
	
	Если ЭД.Документ.СвКСчФ.ИнфПолФХЖ1 <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеСчетаФактуры.ИдентификаторФайла", ЭД.Документ.СвКСчФ.ИнфПолФХЖ1.ИдФайлИнфПол);
			
		Если ЭД.Документ.СвКСчФ.ИнфПолФХЖ1.ТекстИнф <> Неопределено
			И ЭД.Документ.СвКСчФ.ИнфПолФХЖ1.ТекстИнф.Количество() > 0 Тогда
			
			// Сведения о организации.
			ИННОрганизации = ""; КППОрганизации = "";
			ВидУчастника = "СведенияОПродавце";
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ВидУчастника = "СведенияОПокупателе";
			КонецЕсли;
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
				
				ИННОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
				КППОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
				
				ИННОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
				
				ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
			КонецЕсли;
			Организация = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации, КППОрганизации);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ЭД.Документ.СвКСчФ.ИнфПолФХЖ1.ТекстИнф Цикл
				
				Если СтрокаИнформации.Идентиф = "ИдентификаторДокументаОснования" Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Организация",         Организация);
					СтруктураОтбора.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Входящий);

					ДокументОснование = ДокументОснованиеПоИдентификатору(СтрокаИнформации.Значен, СтруктураОтбора, НовыйЭД.ТипЭлементаВерсииЭД);
					Если ДокументОснование <> Неопределено Тогда
						ДокументыОснованияСчетаФактуры.Добавить(ДокументОснование);
					КонецЕсли;
				ИначеЕсли СтрокаИнформации.Идентиф = "ИДЭДДокументаОснования" Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Организация",   Организация);
					СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					ДокументОснование = ПолучитьДокументОснование(СтрокаИнформации.Значен, СтруктураОтбора);
					Если ДокументОснование <> Неопределено Тогда
						ДокументыОснованияСчетаФактуры.Добавить(ДокументОснование);
					КонецЕсли;
				
				ИначеЕсли СтрокаИнформации.Идентиф = "ДанныеКомиссионера" Тогда
					ПространствоИменСхемы = "ON_KORSCHFDOPPR";
					ОбъектXML = Новый ЧтениеXML;
					СтрокаXML = "<СвПродПокТип xmlns=""" + ПространствоИменСхемы + """> " + СтрокаИнформации.Значен
						+ " <Адрес> <АдрРФ КодРегион=""00""/> </Адрес> </СвПродПокТип>";
					ОбъектXML.УстановитьСтроку(СтрокаXML);
					СведенияОКомиссионере = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("СвПродПокТип", ПространствоИменСхемы));
					ОбъектXML.Закрыть();
					ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере");
				Иначе
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = СтрокаИнформации.Идентиф;
					НоваяСтрока.Значение      = СтрокаИнформации.Значен;
				КонецЕсли;
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры",
				ДокументыОснованияСчетаФактуры);
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.ТаблКСчФ <> Неопределено Тогда
		
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("ИдТовараУКонтрагента");
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("КоличествоДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("Количество");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаУменьшение");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаУменьшение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение");
		СведенияОТоварах.Колонки.Добавить("ДокументОснование");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаДебет");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаКредит");
		СведенияОТоварах.Колонки.Добавить("ТекстоваяИнформация");
		
		Для Каждого Товар Из ЭД.Документ.ТаблКСчФ.СведТов Цикл
			
			// Основные характеристики товара.
			НоваяСтрока = СведенияОТоварах.Добавить();
			НоваяСтрока.ТоварНаименование = Товар.НаимТов;
			НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = Товар.ОКЕИ_ТовДо;
			НоваяСтрока.ЕдиницаИзмеренияКод = Товар.ОКЕИ_ТовПосле;
			НоваяСтрока.КоличествоДоКорректировки = Товар.КолТовДо;
			НоваяСтрока.Количество = Товар.КолТовПосле;
			НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = Товар.ЦенаТовДо;
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Товар.ЦенаТовПосле;
			
			Если Товар.СтТовБезНДС <> Неопределено Тогда
				НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Товар.СтТовБезНДС.СтоимДоИзм;
				НоваяСтрока.СтоимостьТоваровБезНалога = Товар.СтТовБезНДС.СтоимПослеИзм;
				НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение = ?(Товар.СтТовБезНДС.СтоимУвел <> Неопределено, Число(Товар.СтТовБезНДС.СтоимУвел), 0);
				НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение = ?(Товар.СтТовБезНДС.СтоимУм <> Неопределено, Число(Товар.СтТовБезНДС.СтоимУм), 0);
			КонецЕсли;
			
			НоваяСтрока.НалоговаяСтавкаДоКорректировки = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(Товар.НалСтДо);
			НоваяСтрока.НалоговаяСтавка = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(Товар.НалСтПосле);
			
			НоваяСтрока.СуммаНалогаДоКорректировки = ?(Товар.СумНалДо.СумНДС <> Неопределено, Число(Товар.СумНалДо.СумНДС), 0);
			НоваяСтрока.СуммаНалога = ?(Товар.СумНалПосле.СумНДС <> Неопределено, Число(Товар.СумНалПосле.СумНДС), 0);
			Если Товар.СумНалРазн <> Неопределено Тогда
				НоваяСтрока.СуммаНалогаУвеличение = ?(Товар.СумНалРазн.СумУвел <> Неопределено, Число(Товар.СумНалРазн.СумУвел), 0);
				НоваяСтрока.СуммаНалогаУменьшение = ?(Товар.СумНалРазн.СумУм <> Неопределено, Число(Товар.СумНалРазн.СумУм), 0);
			КонецЕсли;
			
			НоваяСтрока.СуммаАкцизаДоКорректировки = ?(Товар.АкцизДо.СумАкциз <> Неопределено, Число(Товар.АкцизДо.СумАкциз), НСтр("ru ='без акциза'"));
			НоваяСтрока.СуммаАкциза = ?(Товар.АкцизПосле.СумАкциз <> Неопределено, Число(Товар.АкцизПосле.СумАкциз), НСтр("ru ='без акциза'"));
			Если Товар.АкцизРазн <> Неопределено Тогда
				НоваяСтрока.СуммаАкцизаУвеличение = ?(Товар.АкцизРазн.СумУвел <> Неопределено, Число(Товар.АкцизРазн.СумУвел), 0);
				НоваяСтрока.СуммаАкцизаУменьшение = ?(Товар.АкцизРазн.СумУм <> Неопределено, Число(Товар.АкцизРазн.СумУм), 0);
			КонецЕсли;
			
			НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = Товар.СтТовУчНал.СтоимДоИзм;
			НоваяСтрока.СтоимостьТоваровСНалогом = Товар.СтТовУчНал.СтоимПослеИзм;
			НоваяСтрока.СтоимостьТоваровСНалогомУвеличение = ?(Товар.СтТовУчНал.СтоимУвел <> Неопределено, Число(Товар.СтТовУчНал.СтоимУвел), 0);
			НоваяСтрока.СтоимостьТоваровСНалогомУменьшение = ?(Товар.СтТовУчНал.СтоимУм <> Неопределено, Число(Товар.СтТовУчНал.СтоимУм), 0);
			
			Если Товар.ИнфПолФХЖ2 <> Неопределено И Товар.ИнфПолФХЖ2.Количество() > 0 Тогда
				
				ТекстоваяИнформация = Новый ТаблицаЗначений;
				ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
				ТекстоваяИнформация.Колонки.Добавить("Значение");
				
				ДокументОснованиеНайден = Ложь;
				
				Для Каждого СтрокаИнформации Из Товар.ИнфПолФХЖ2 Цикл
					
					Если СтрокаИнформации.Идентиф = "ИдентификаторДокументаОснования" И НЕ ДокументОснованиеНайден Тогда
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						НоваяСтрока.ДокументОснование = ДокументОснованиеПоИдентификатору(СтрокаИнформации.Значен, СтруктураОтбора);
						ДокументОснованиеНайден = Истина;
					ИначеЕсли СтрокаИнформации.Идентиф = "ИДЭДДокументаОснования" И НЕ ДокументОснованиеНайден Тогда
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						НоваяСтрока.ДокументОснование = ПолучитьДокументОснование(СтрокаИнформации.Значен, СтруктураОтбора);
						
					ИначеЕсли СтрокаИнформации.Идентиф = "ИД" Тогда
						
						НоваяСтрока.ИдТовараУКонтрагента = СтрокаИнформации.Значен;
					Иначе
						СтрокаТаблицы = ТекстоваяИнформация.Добавить();
						СтрокаТаблицы.Идентификатор = СтрокаИнформации.Идентиф;
						СтрокаТаблицы.Значение      = СтрокаИнформации.Значен;
					КонецЕсли;
				КонецЦикла;
				
				НоваяСтрока.ТекстоваяИнформация = ТекстоваяИнформация;
			КонецЕсли;
			
			// Дополнительные характеристики товара.
			Если Товар.ДопСведТов <> Неопределено Тогда
				НоваяСтрока.КорреспондирующиеСчетаДебет     = Товар.ДопСведТов.КорСчДебет;
				НоваяСтрока.КорреспондирующиеСчетаКредит    = Товар.ДопСведТов.КорСчКредит;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		Если ЭД.Документ.ТаблКСчФ.ВсегоУвел <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
				СуммаНДССФПривестиКТребуемомуФормату(ЭД.Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС));
		КонецЕсли;
		
		Если ЭД.Документ.ТаблКСчФ.ВсегоУм <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
				СуммаНДССФПривестиКТребуемомуФормату(ЭД.Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС));
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СодФХЖ3 <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", ЭД.Документ.СодФХЖ3.СодОпер);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов",
			ЭД.Документ.СодФХЖ3.ПередатДокум);
		
		Если ЭД.Документ.СодФХЖ3.ДатаНапр <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование",
				ДатаИзСтроки(ЭД.Документ.СодФХЖ3.ДатаНапр));
		КонецЕсли;
		Если ЭД.Документ.СодФХЖ3.ИныеСвИзмСтоим <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости",
				ЭД.Документ.СодФХЖ3.ИныеСвИзмСтоим);
		КонецЕсли;
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		Для Каждого Основание Из ЭД.Документ.СодФХЖ3.ОснКор Цикл
			НоваяСтрока = ОснованиеКорректировки.Добавить();
			НоваяСтрока.ДокументНаименование = Основание.НаимОсн;
			НоваяСтрока.ДокументНомер        = Основание.НомОсн;
			Если Основание.ДатаОсн <> Неопределено Тогда
				НоваяСтрока.ДокументДата     = ДатаИзСтроки(Основание.ДатаОсн);
			КонецЕсли;
			НоваяСтрока.ДокументДопСведения  = Основание.ДопСвОсн;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
	КонецЕсли;
	
	Если ЭД.Документ.Подписант <> Неопределено
		И ЭД.Документ.Подписант.Количество() > 0 Тогда
		
		Если ЭД.Документ.Подписант[0].ФЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.Документ.Подписант[0].ФЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.Документ.Подписант[0].ФЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.Документ.Подписант[0].ФЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
			ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", ЭД.Документ.Подписант[0].ФЛ.ГосРегИППодп);
		ИначеЕсли ЭД.Документ.Подписант[0].ИП <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.Документ.Подписант[0].ИП.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.Документ.Подписант[0].ИП.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.Документ.Подписант[0].ИП.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
			ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", ЭД.Документ.Подписант[0].ИП.СвГосРегИП);
		ИначеЕсли ЭД.Документ.Подписант[0].ЮЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.Документ.Подписант[0].ЮЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.Документ.Подписант[0].ЮЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.Документ.Подписант[0].ЮЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", ЭД.Документ.Подписант[0].ЮЛ.Должн);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", "");
			ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", "");
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника)
	
	Если СведенияОбУчастнике.ИдСв.СвЮЛУч <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ИдСв.СвЮЛУч.НаимОрг);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИдСв.СвЮЛУч.ИННЮЛ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.ИдСв.СвЮЛУч.КПП);

	ИначеЕсли СведенияОбУчастнике.ИдСв.СвИнНеУч <> Неопределено Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ИдСв.СвИнНеУч.НаимОрг);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения",
									СведенияОбУчастнике.ИдСв.СвИнНеУч.ИныеСвед);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИдСв.СвИП.ИННФЛ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
									СведенияОбУчастнике.ИдСв.СвИП.СвГосРегИП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИныеСведения",
									СведенияОбУчастнике.ИдСв.СвИП.ИныеСвед);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									СведенияОбУчастнике.ИдСв.СвИП.ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									СведенияОбУчастнике.ИдСв.СвИП.ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									СведенияОбУчастнике.ИдСв.СвИП.ФИО.Отчество);
	КонецЕсли;
	
	Если СведенияОбУчастнике.Адрес <> Неопределено Тогда

		Если СведенияОбУчастнике.Адрес.АдрРФ <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Индекс",
										СведенияОбУчастнике.Адрес.АдрРФ.Индекс);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.КодРегиона",
										СведенияОбУчастнике.Адрес.АдрРФ.КодРегион);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Район",
										СведенияОбУчастнике.Адрес.АдрРФ.Район);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Город",
										СведенияОбУчастнике.Адрес.АдрРФ.Город);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт",
										СведенияОбУчастнике.Адрес.АдрРФ.НаселПункт);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Улица",
										СведенияОбУчастнике.Адрес.АдрРФ.Улица);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Дом",
										СведенияОбУчастнике.Адрес.АдрРФ.Дом);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Корпус",
										СведенияОбУчастнике.Адрес.АдрРФ.Корпус);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Квартира",
										СведенияОбУчастнике.Адрес.АдрРФ.Кварт);
										
		ИначеЕсли СведенияОбУчастнике.Адрес.АдрИнф <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресИнформация.КодСтраны",
										СведенияОбУчастнике.Адрес.АдрИнф.КодСтр);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресИнформация.АдресТекст",
										СведенияОбУчастнике.Адрес.АдрИнф.АдрТекст);
										
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.КодГАР",
										СведенияОбУчастнике.Адрес.КодГАР);
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОбУчастнике.Контакт <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Контакт.Тлф);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.Контакт.ЭлПочта);
	КонецЕсли;
	
	Если СведенияОбУчастнике.БанкРекв <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				СведенияОбУчастнике.БанкРекв.НомерСчета);
				
		Если СведенияОбУчастнике.БанкРекв.СвБанк <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										СведенияОбУчастнике.БанкРекв.СвБанк.НаимБанк);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										СведенияОбУчастнике.БанкРекв.СвБанк.БИК);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										СведенияОбУчастнике.БанкРекв.СвБанк.КорСчет);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.ОКПО);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение", СведенияОбУчастнике.СтруктПодр);
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".ИнформацияДляУчастника", СведенияОбУчастнике.ИнфДляУчаст);
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПокупателяXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УПД_ИнформацияПокупателя");
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Если СтрНайти(ЭД.ИнфПок.СодФХЖ4.Функция, "С") > 0 Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
	ИначеЕсли СтрНайти(ЭД.ИнфПок.СодФХЖ4.Функция, "Д") > 0 Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", ЭД.ИнфПок.НаимЭконСубСост);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность", ЭД.ИнфПок.ОснДоверОргСост);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаИзСтроки(ЭД.ИнфПок.СодФХЖ4.СвПрин.ДатаПрин));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", ЭД.ИнфПок.СодФХЖ4.СвПрин.СодОпер);
	
	Если ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин <> Неопределено Тогда
		
		Если ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.Должность);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ИныеСведения",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ИныеСвед);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ОснПолн);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Отчество);
			
		ИначеЕсли ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо <> Неопределено Тогда
			Если ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.Должность);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ИныеСвед);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.НаимОргПрин);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаПринятие",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснДоверОргПрин);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснПолнПредПрин);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Отчество);
				
			ИначеЕсли ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ИныеСвед);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаПринятие",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ОснДоверФЛ);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество",
					ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4 <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеДокументаПолучения.ИдентификаторФайла", ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ИдФайлИнфПол);
			
		Если ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф <> Неопределено
			И ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф.Количество() > 0 Тогда
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф Цикл
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = СтрокаИнформации.Идентиф;
				НоваяСтрока.Значение      = СтрокаИнформации.Значен;
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.ИнфПок.Подписант <> Неопределено
		И ЭД.ИнфПок.Подписант.Количество() > 0 Тогда
		
		Если ЭД.ИнфПок.Подписант[0].ФЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.ИнфПок.Подписант[0].ФЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.ИнфПок.Подписант[0].ФЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.ИнфПок.Подписант[0].ФЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
		ИначеЕсли ЭД.ИнфПок.Подписант[0].ИП <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.ИнфПок.Подписант[0].ИП.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.ИнфПок.Подписант[0].ИП.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.ИнфПок.Подписант[0].ИП.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
		ИначеЕсли ЭД.ИнфПок.Подписант[0].ЮЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.ИнфПок.Подписант[0].ЮЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.ИнфПок.Подписант[0].ЮЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.ИнфПок.Подписант[0].ЮЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", ЭД.ИнфПок.Подписант[0].ЮЛ.Должн);
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПокупателяУКДXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("УКД_ИнформацияПокупателя");
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Если СтрНайти(ЭД.ИнфПок.СодФХЖ4.ФункцияПр, "К") > 0 Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
	ИначеЕсли СтрНайти(ЭД.ИнфПок.СодФХЖ4.ФункцияПр, "Д") > 0 Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
		НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", ЭД.ИнфПок.НаимЭконСубСост);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность", ЭД.ИнфПок.ОснДоверОргСост);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", ДатаИзСтроки(ЭД.ИнфПок.СодФХЖ4.СвСоглас.ДатаСоглас));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", ЭД.ИнфПок.СодФХЖ4.СвСоглас.СодОпер);
	
	Если ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4 <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеДокументаПолучения.ИдентификаторФайла", ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ИдФайлИнфПол);
			
		Если ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф <> Неопределено
			И ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф.Количество() > 0 Тогда
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ЭД.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф Цикл
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = СтрокаИнформации.Идентиф;
				НоваяСтрока.Значение      = СтрокаИнформации.Значен;
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.ИнфПок.Подписант <> Неопределено
		И ЭД.ИнфПок.Подписант.Количество() > 0 Тогда
		
		Если ЭД.ИнфПок.Подписант[0].ФЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.ИнфПок.Подписант[0].ФЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.ИнфПок.Подписант[0].ФЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.ИнфПок.Подписант[0].ФЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
		ИначеЕсли ЭД.ИнфПок.Подписант[0].ИП <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.ИнфПок.Подписант[0].ИП.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.ИнфПок.Подписант[0].ИП.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.ИнфПок.Подписант[0].ИП.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "Директор");
		ИначеЕсли ЭД.ИнфПок.Подписант[0].ЮЛ <> Неопределено Тогда
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия", ЭД.ИнфПок.Подписант[0].ЮЛ.ФИО.Фамилия);
			ФИО.Вставить("Имя", ЭД.ИнфПок.Подписант[0].ЮЛ.ФИО.Имя);
			ФИО.Вставить("Отчество", ЭД.ИнфПок.Подписант[0].ЮЛ.ФИО.Отчество);
			ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", ЭД.ИнфПок.Подписант[0].ЮЛ.Должн);
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Функция ПолучитьДанныеИнформацияПродавцаДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДеревоДанных = СтрокаОбъекта.ЗначениеРеквизита;
	
	// Общие сведения по документу.
	СтатусУПД = "1";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") = "ДОП" Тогда
		СтатусУПД = "2";
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") = "СЧФ" Тогда
		СтатусУПД = "3";
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("СтатусУПД", СтатусУПД);
	
	ДанныеЗаполненияШапки.Вставить("Номер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерДокумента"));
	ДанныеЗаполненияШапки.Вставить("Дата", Формат(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаДокумента"), "ДЛФ='ДД'"));
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления = Формат(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"), "ДЛФ='ДД'");
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(НомерИсправления), НомерИсправления, "--"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, "--"));
	
	ШаблонВалюта = НСтр("ru ='%1, %2'");
	Валюта = СтрШаблон(ШаблонВалюта,
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаНаименование"),
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеЗаполненияШапки.Вставить("Валюта", Валюта);
	
	// Сведения о поставщике.
	ПредставлениеПоставщика = "";
	ИННПоставщика = "";
	АдресПоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
		ИННПоставщика = "" + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		
		ПредставлениеПоставщика = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "")
			+ ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", ИННПоставщика);
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		СтруктураАдресаПоставщика = Новый Структура();
		
		СтруктураАдресаПоставщика.Вставить("Индекс",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"));
		СтруктураАдресаПоставщика.Вставить("КодРегион",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"));
		СтруктураАдресаПоставщика.Вставить("Район",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район"));
		СтруктураАдресаПоставщика.Вставить("Город",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город"));
		СтруктураАдресаПоставщика.Вставить("НаселПункт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"));
		СтруктураАдресаПоставщика.Вставить("Улица",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"));
		СтруктураАдресаПоставщика.Вставить("Дом",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"));
		СтруктураАдресаПоставщика.Вставить("Корпус",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"));
		СтруктураАдресаПоставщика.Вставить("Кварт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"));
		
		АдресПоставщика = СобратьАдрес(СтруктураАдресаПоставщика);
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		
		КодСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
		АдрТекст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст");
		
		АдресПоставщика = КодСтр + ", " + АдрТекст;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		АдресПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.КодГАР");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", АдресПоставщика);
	
	// Сведения о покупателе.
	ПредставлениеПокупателя = "";
	ИННПокупателя = "";
	АдресПокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
		ИННПокупателя = "" + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		
		ПредставлениеПокупателя = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "")
			+ ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", ИННПокупателя);
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		СтруктураАдресаПокупателя = Новый Структура();
		
		СтруктураАдресаПокупателя.Вставить("Индекс",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"));
		СтруктураАдресаПокупателя.Вставить("КодРегион",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"));
		СтруктураАдресаПокупателя.Вставить("Район",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район"));
		СтруктураАдресаПокупателя.Вставить("Город",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город"));
		СтруктураАдресаПокупателя.Вставить("НаселПункт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"));
		СтруктураАдресаПокупателя.Вставить("Улица",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"));
		СтруктураАдресаПокупателя.Вставить("Дом",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"));
		СтруктураАдресаПокупателя.Вставить("Корпус",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"));
		СтруктураАдресаПокупателя.Вставить("Кварт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"));
		
		АдресПокупателя = СобратьАдрес(СтруктураАдресаПокупателя);
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		
		КодСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
		АдрТекст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст");
		
		АдресПокупателя = КодСтр + ", " + АдрТекст;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		АдресПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.КодГАР");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", АдресПокупателя);

	ПредставлениеГрузоотправителя = "";
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе")) Тогда
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе") = "ОнЖе" Тогда
			ПредставлениеГрузоотправителя = НСтр("ru = 'он же'");
		Иначе
			НаименованиеГрузоотправителя = "";
			АдресГрузоотправителя = "";
			ВидУчастника = "СведенияОГрузоотправителе.Грузоотправитель";
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
				
				НаименованиеГрузоотправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
				
				Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
				Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
				Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
				
				НаименованиеГрузоотправителя = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "") + ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
				
				НаименованиеГрузоотправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
			КонецЕсли;
			
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
				СтруктураАдресаГрузоотправителя = Новый Структура();
				
				СтруктураАдресаГрузоотправителя.Вставить("Индекс",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"));
				СтруктураАдресаГрузоотправителя.Вставить("КодРегион",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"));
				СтруктураАдресаГрузоотправителя.Вставить("Район",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район"));
				СтруктураАдресаГрузоотправителя.Вставить("Город",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город"));
				СтруктураАдресаГрузоотправителя.Вставить("НаселПункт",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"));
				СтруктураАдресаГрузоотправителя.Вставить("Улица",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"));
				СтруктураАдресаГрузоотправителя.Вставить("Дом",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"));
				СтруктураАдресаГрузоотправителя.Вставить("Корпус",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"));
				СтруктураАдресаГрузоотправителя.Вставить("Кварт",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"));
				
				АдресГрузоотправителя = СобратьАдрес(СтруктураАдресаГрузоотправителя);
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
				
				КодСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
				АдрТекст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст");
				
				АдресГрузоотправителя = КодСтр + ", " + АдрТекст;
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
				
				АдресГрузоотправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					ДеревоДанных, ВидУчастника + ".Адрес.КодГАР");
			КонецЕсли;
			ПредставлениеГрузоотправителя = НаименованиеГрузоотправителя + ", " + АдресГрузоотправителя;
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	ПредставлениеГрузополучателя = "";
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузополучателе")) Тогда
		НаименованиеГрузополучателя = "";
		АдресГрузополучателя = "";
		ВидУчастника = "СведенияОГрузополучателе";
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
			
			НаименованиеГрузополучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
			
			Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
			Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
			Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
			
			НаименованиеГрузополучателя = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "")
				+ ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
			
			НаименованиеГрузополучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		КонецЕсли;
		
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
			СтруктураАдресаГрузополучателя = Новый Структура();
			
			СтруктураАдресаГрузополучателя.Вставить("Индекс",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"));
			СтруктураАдресаГрузополучателя.Вставить("КодРегион",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"));
			СтруктураАдресаГрузополучателя.Вставить("Район",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район"));
			СтруктураАдресаГрузополучателя.Вставить("Город",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город"));
			СтруктураАдресаГрузополучателя.Вставить("НаселПункт",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"));
			СтруктураАдресаГрузополучателя.Вставить("Улица",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"));
			СтруктураАдресаГрузополучателя.Вставить("Дом",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"));
			СтруктураАдресаГрузополучателя.Вставить("Корпус",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"));
			СтруктураАдресаГрузополучателя.Вставить("Кварт",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"));
			
			АдресГрузополучателя = СобратьАдрес(СтруктураАдресаГрузополучателя);
			
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
			
			КодСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
			АдрТекст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст");
			
			АдресГрузополучателя = КодСтр + ", " + АдрТекст;
			
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
			
			АдресГрузополучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".Адрес.КодГАР");
		КонецЕсли;
		ПредставлениеГрузополучателя = НаименованиеГрузополучателя + ", " + АдресГрузополучателя;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	// Сведения по платежным документам.
	ПоДокументу = "";
	СтрокаТаблицы = ДеревоДанных.Строки.Найти("ПлатежноРасчетныеДокументы", "ПолныйПуть");
	Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
		
		ШаблонПоДокументу = НСтр("ru ='%1 от %2'");
		Для Каждого ПРД Из СтрокаТаблицы.Строки Цикл
			НомерПРД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ПРД,
				"ПлатежноРасчетныеДокументы.НомерСтроки.НомерПРД");
			ДатаПРД = Формат(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ПРД,
				"ПлатежноРасчетныеДокументы.НомерСтроки.ДатаПРД"), "ДЛФ='ДД'");
			
			ПоДокументу = СтрШаблон(ШаблонПоДокументу, НомерПРД, ДатаПРД)
				+ ?(ЗначениеЗаполнено(ПоДокументу), ", " + ПоДокументу, "");
		КонецЦикла;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ПоДокументу", ПоДокументу);
	
	// Сведения таблицы счета-фактуры.
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки");
	ТаблицаЗначений.Колонки.Добавить("ТоварНаименование");
	ТаблицаЗначений.Колонки.Добавить("ТоварКод");
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаЗначений.Колонки.Добавить("Количество");
	ТаблицаЗначений.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровБезНалога");
	ТаблицаЗначений.Колонки.Добавить("СуммаАкциза");
	ТаблицаЗначений.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаЗначений.Колонки.Добавить("СуммаНалога");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровСНалогом");
	ТаблицаЗначений.Колонки.Добавить("СтранаПроисхожденияКод");
	ТаблицаЗначений.Колонки.Добавить("ПредставлениеСтраны");
	ТаблицаЗначений.Колонки.Добавить("ПредставлениеГТД");
	ТаблицаЗначений.Колонки.Добавить("ДополнительныеДанные");
	
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НомерСтроки = Товар.Значение;
		
		// Обязательные реквизиты:
		НоваяСтрока.ТоварНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		НоваяСтрока.НалоговаяСтавка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтоимостьТоваровСНалогом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.СуммаАкциза = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаАкциза");
		НоваяСтрока.СуммаНалога = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.ТоварКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ТоварКод");
		НоваяСтрока.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
		НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование");

		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.СтоимостьТоваровБезНалога = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		СтранаПроисхожденияКод = "";
		ПредставлениеГТД = "";
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокиТД = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
				СтранаПроисхожденияКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					СтрокаТД, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
					СтрокаТД, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				ПредставлениеГТД = НомерТД + ?(ЗначениеЗаполнено(ПредставлениеГТД), ", " + ПредставлениеГТД, "");
			КонецЦикла;
		КонецЕсли;

		НоваяСтрока.ПредставлениеГТД = ПредставлениеГТД;
		НоваяСтрока.СтранаПроисхожденияКод = СтранаПроисхожденияКод;
		НоваяСтрока.ПредставлениеСтраны = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтранаПроисхожденияНаименование");
		
		ДополнительныеДанные = Новый Соответствие;
		СтрокаТаблицы = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				ДополнительныеДанные.Вставить(
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Идентификатор"),
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
					"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Значение"));
			КонецЦикла;
		КонецЕсли;
		НоваяСтрока.ДополнительныеДанные = ДополнительныеДанные;
	КонецЦикла;
	
	ВсегоСтоимостьТоваровБезНалога = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога");
	ДанныеЗаполненияШапки.Вставить("ВсегоСтоимостьТоваровБезНалога", ВсегоСтоимостьТоваровБезНалога);
	ВсегоСтоимостьТоваровСНалогом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом");
	ДанныеЗаполненияШапки.Вставить("ВсегоСтоимостьТоваровСНалогом", ВсегоСтоимостьТоваровСНалогом);
	ВсегоСуммаНалога = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога");
	ДанныеЗаполненияШапки.Вставить("ВсегоСуммаНалога", ВсегоСуммаНалога);
	ВсегоКоличество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ВсегоКОплате.ВсегоКоличество");
	ДанныеЗаполненияШапки.Вставить("ВсегоКоличество", ВсегоКоличество);
	
	ДополнительныеДанные = Новый Соответствие;
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры")) Тогда
		
		СтрокиДопДанныеСчетаФактуры = ДеревоДанных.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ДополнительныеДанные.Вставить(
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"),
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сведения о подписантах СФ.
	ДанныеЗаполненияПодвала = Новый Структура();
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОРуководителя") Тогда
		ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОПБОЮЛ") Тогда
		ДанныеЗаполненияПодвала.Вставить("ФИОПБОЮЛ",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОПБОЮЛ"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "Свидетельство") Тогда
		ДанныеЗаполненияПодвала.Вставить("Свидетельство",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Свидетельство"));
	КонецЕсли;
	
	// Общие сведения по накладной.
	ДанныеЗаполненияПодвалаНакладной = Новый Структура();
	ДатаОтгрузкиТоваров = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров");
	ДанныеЗаполненияПодвалаНакладной.Вставить("ДатаОтгрузкиТоваров", ДатаОтгрузкиТоваров);
	
	ИныеСведенияОбОтгрузке = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбОтгрузке");
	ДанныеЗаполненияПодвалаНакладной.Вставить("ИныеСведенияОбОтгрузке", ИныеСведенияОбОтгрузке);
	
	ПредставлениеОснования = "";
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОснованиеОтгрузкиТоваров");
	Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
		СтрокаТаблицы = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			ШаблонПоДокументу = НСтр("ru ='№ %1 от %2'");
			Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
				
				ДокументНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
					"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНаименование");
				ДокументНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
					"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер");
				ДокументДата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
					"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата");
				
				ПредставлениеОснования = ДокументНаименование
					+ ?(ЗначениеЗаполнено(ДокументНомер), " " + СтрШаблон(ШаблонПоДокументу, ДокументНомер, Формат(ДокументДата, "ДЛФ=D")), "")
					+ ?(ЗначениеЗаполнено(ПредставлениеОснования), ", " + ПредставлениеОснования, "");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаполненияПодвалаНакладной.Вставить("ПредставлениеОснования", ПредставлениеОснования);
	
	// Сведения о транспортировке и грузе.
	ПредставлениеПеревозчика = "";
	ИННПеревозчика = "";
	ВидУчастника = "СведенияОПеревозчике";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ПредставлениеПеревозчика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
		ИННПеревозчика = "" + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		
		ПредставлениеПеревозчика = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "")
			+ ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		
		ИННПеревозчика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПеревозчика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	
	ПредставлениеТранспортнойНакладной = "";
	Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
		СтрокаТаблицы = ДеревоДанных.Строки.Найти("ТранспортнаяНакладная", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			
			ШаблонТН = НСтр("ru ='ТН №%1 от %2'");
			Для Каждого Накладная Из СтрокаТаблицы.Строки Цикл
				ТранспортнаяНакладнаяНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Накладная,
					"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер");
				ТранспортнаяНакладнаяДата = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Накладная,
					"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата"));
				
				ПредставлениеТранспортнойНакладной = СтрШаблон(ШаблонТН, ТранспортнаяНакладнаяНомер, ТранспортнаяНакладнаяДата)
					+ ?(ЗначениеЗаполнено(ПредставлениеТранспортнойНакладной), ", " + ПредставлениеТранспортнойНакладной, "");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОТранспортировке = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке");
	
	ДанныеЗаполненияПодвалаНакладной.Вставить("ПредставлениеДанныхОТранспортировкеИГрузе",
		?(ЗначениеЗаполнено(ПредставлениеПеревозчика), ПредставлениеПеревозчика + ", ", "")
		+ ?(ЗначениеЗаполнено(ИННПеревозчика), ИННПеревозчика + ", ", "")
		+ ?(ЗначениеЗаполнено(ПредставлениеТранспортнойНакладной), ПредставлениеТранспортнойНакладной + ", ", "")
		+ ?(ЗначениеЗаполнено(СведенияОТранспортировке), СведенияОТранспортировке, ""));
	
	// Иные сведения о грузе.
	ИныеСведенияОбОтгрузке = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбОтгрузке");
	ДанныеЗаполненияПодвалаНакладной.Вставить("ИныеСведенияОбОтгрузке", ИныеСведенияОбОтгрузке);
	
	// Сведения о подписантах накладной.
	ДолжностьКладовщика = "";
	ФИОКладовщика = "";
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары")) Тогда
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "РаботникОрганизацииПродавца" Тогда
			ДолжностьКладовщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность");
				
			ФИО = Новый Структура();
			ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия"));
			ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя"));
			ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество"));
			ФИОКладовщика = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "ИноеЛицо" Тогда
			
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
				ДолжностьКладовщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
					
				ФИО = Новый Структура();
				ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия"));
				ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя"));
				ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество"));
				ФИОКладовщика = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ФЛ" Тогда
				

				ФИО = Новый Структура();
				ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия"));
				ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя"));
				ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество"));
				ФИОКладовщика = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИОКладовщика) Тогда
		ДанныеЗаполненияПодвалаНакладной.Вставить("ДолжностьКладовщика", ДолжностьКладовщика);
		ДанныеЗаполненияПодвалаНакладной.Вставить("ФИОКладовщика", ФИОКладовщика);
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ДолжностьРуководителя") Тогда
		ДанныеЗаполненияПодвалаНакладной.Вставить("ДолжностьРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДолжностьРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОРуководителя")
		И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя")) Тогда
		ДанныеЗаполненияПодвалаНакладной.Вставить("ФИОРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОПБОЮЛ")
		И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОПБОЮЛ")) Тогда
		ДанныеЗаполненияПодвалаНакладной.Вставить("ФИОРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОПБОЮЛ"));
	КонецЕсли;
	
	ПредставлениеОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование");
	ДанныеЗаполненияПодвалаНакладной.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаОтгрузки")) Тогда
		СтрокиДопДанныеДокументаОтгрузки = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеДокументаОтгрузки.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ДополнительныеДанные.Вставить(
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор"),
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение"));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",           ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал",          ДанныеЗаполненияПодвала);
	Если СтатусУПД <> "3" Тогда
		ДанныеДляОбъекта.Вставить("ПодвалНакладной", ДанныеЗаполненияПодвалаНакладной);
	КонецЕсли;
	ДанныеДляОбъекта.Вставить("Товары",          ТаблицаЗначений);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "УПД".
//
Процедура ЗаполнитьТабличныйДокументИнформацияПродавца(ТабличныйДокумент, ДанныеПечати, ИнформацияПокупателя)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_УПД_ИнформацияПродавца_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЗаголовокШапка = Макет.ПолучитьОбласть("ЗаголовокШапка");
	Если ДанныеПечати.Шапка.СтатусУПД = "3" Тогда
		ЗаголовокШапка = Макет.ПолучитьОбласть("ЗаголовокШапка|ЗаголовокШапкаОсновныеДанные");
	КонецЕсли;
	ЗаголовокШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ЗаголовокШапка);
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Если ДанныеПечати.Шапка.СтатусУПД = "3" Тогда
		Шапка = Макет.ПолучитьОбласть("Шапка|ШапкаОсновныеДанные");
	КонецЕсли;
	Шапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(Шапка);
	
	// Выводим заголовок таблицы.
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	Если ДанныеПечати.Шапка.СтатусУПД = "3" Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ТаблицаОсновныеДанные");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода.
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа.
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	Если ДанныеПечати.Шапка.СтатусУПД = "3" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Строка|ТаблицаОсновныеДанные");
	КонецЕсли;
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого|ОсновныеДанныеТаблицы");
	Если ДанныеПечати.Шапка.СтатусУПД = "3" Тогда
		ОбластьИтого = Макет.ПолучитьОбласть("Итого|ТаблицаОсновныеДанные");
	КонецЕсли;
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	Если ДанныеПечати.Шапка.СтатусУПД = "3" Тогда
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|ПодвалОсновныеДанные");
	КонецЕсли;
	
	ОбластьПодвалаНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	
	ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыСЭЦП");
	ОбластьМакетаДДСЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
	ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
		КонецЕсли;
		
		Если СтрокаТовары.СтранаПроисхожденияКод = "643" Тогда
			СтрокаТовары.СтранаПроисхожденияКод = "--";
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ДополнительныеДанные = СтрокаТовары.ДополнительныеДанные;
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			
			Для каждого Данные Из ДополнительныеДанные Цикл
				ПодписанныеДанные = ?(ЗначениеЗаполнено(ПодписанныеДанные),
					ПодписанныеДанные + Символы.ПС, "") + Данные.Ключ + " = " + Данные.Значение;
			КонецЦикла;
			ОбластьМакетаДДСЭП.Параметры.Подписанные = ПодписанныеДанные;
			ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Подвал);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
	Если ДанныеПечати.Свойство("ПодвалНакладной") Тогда
		ОбластьПодвалаНакладной.Параметры.Заполнить(ДанныеПечати.ПодвалНакладной);
		ОбластьПодвалаНакладной.Параметры.Заполнить(ИнформацияПокупателя);
		ОбластьПодвалаНакладной.Параметры.ДатаОтгрузкиТоваров = Формат(ДанныеПечати.ПодвалНакладной.ДатаОтгрузкиТоваров, "ДЛФ=DD");
		Если ИнформацияПокупателя.Свойство("ДатаПолученияТоваров") Тогда
			ОбластьПодвалаНакладной.Параметры.ДатаПолученияТоваров = Формат(ИнформацияПокупателя.ДатаПолученияТоваров, "ДЛФ=DD");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПодвалаНакладной);
	КонецЕсли;
	
	ДополнительныеДанные = ДанныеПечати.Шапка.ДополнительныеДанные;
	Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		МакетДД = ПолучитьОбщийМакет(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ИдентификаторДокумента_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		НомСтр = 1;
		ОбластьМакета = МакетДД.ПолучитьОбласть("ДопДанныеШапки_Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Для каждого Данные Из ДополнительныеДанные Цикл
			
			ОбластьМакетаСЭП = МакетДД.ПолучитьОбласть("ДопДанныеШапки_Строка");
			ОбластьМакетаСЭП.Параметры.Нпп               = НомСтр;
			ОбластьМакетаСЭП.Параметры.ИмяРеквизита      = Данные.Ключ;
			ОбластьМакетаСЭП.Параметры.ЗначениеРеквизита = Данные.Значение;
			ТабличныйДокумент.Вывести(ОбластьМакетаСЭП);
			НомСтр = НомСтр + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИнформацииПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
		ИнформацияПокупателя = ДанныеИнформацииПокупателя(Результат.СтрокаОбъекта.ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникеУПД(УчастникXDTO, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИнфДляУчаст",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ИнформацияДляУчастника"), , ТекстОшибки);
	
	ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		СвЮЛУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛУч", ПространствоИменСхемы);
		
		Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(СвЮЛУч, "НаимОрг", Наименование, Истина, ТекстОшибки);
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		ЗаполнитьСвойствоXDTO(СвЮЛУч, "ИННЮЛ", ИНН, Истина, ТекстОшибки);
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		ЗаполнитьСвойствоXDTO(СвЮЛУч, "КПП", КПП, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛУч", СвЮЛУч, , ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		СвИПТип = ПолучитьОбъектТипаCML("СвИПТип", ПространствоИменСхемы);
		
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		ЗаполнитьСвойствоXDTO(СвИПТип, "ИННФЛ", ИНН, Истина, ТекстОшибки);
		
		СвидетельствоОГосРегистрации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации");
		ЗаполнитьСвойствоXDTO(СвИПТип, "СвГосРегИП", СвидетельствоОГосРегистрации, , ТекстОшибки);
		ИныеСведения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		ЗаполнитьСвойствоXDTO(СвИПТип, "ИныеСвед", ИныеСведения, , ТекстОшибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвИПТип, "ФИО", ФИО,  , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИПТип, , ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		СвИнНеУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛНеУч", ПространствоИменСхемы);
		
		Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(СвИнНеУч, "НаимОрг", Наименование, , ТекстОшибки);
		ИныеСведения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения");
		ЗаполнитьСвойствоXDTO(СвИнНеУч, "ИныеСвед", ИныеСведения, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИдСв, "СвИнНеУч",  СвИнНеУч, , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, ТекстОшибки);
	
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Район", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Район"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Город", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Город"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"), , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, Истина, ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдрИнфТип, Истина, ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		ЗаполнитьСвойствоXDTO(АдресТип, "КодГАР",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР"), Истина, ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", АдресТип, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения")) Тогда
		КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.Телефон"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта"), , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты")) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета"), , ТекстОшибки);
		
		СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвБанк, "БИК", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвБанк, "КорСчет", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БанкРекв, "СвБанк", СвБанк, Истина, ТекстОшибки);
			
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, Истина, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные, выводимые на печать
Функция ДанныеИнформацииПокупателя(ДеревоДанных)
	
	// Общие сведения по документу.
	ИнформацияПокупателя = Новый Структура;
	
	ДатаПолученияТоваров = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров");
	ИнформацияПокупателя.Вставить("ДатаПолученияТоваров", ДатаПолученияТоваров);
	
	ИныеСведенияОПолучении = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации");
	ИнформацияПокупателя.Вставить("ИныеСведенияОПолучении", ИныеСведенияОПолучении);
	
	// Сведения о подписантах накладной.
	ДолжностьКладовщикаПолучателя = "";
	ФИОКладовщикаПолучателя = "";
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары")) Тогда
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "РаботникОрганизацииПокупателя" Тогда
			ДолжностьКладовщикаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность");
				
			ФИО = Новый Структура();
			ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия"));
			ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя"));
			ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество"));
			ФИОКладовщикаПолучателя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "ИноеЛицо" Тогда
			
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
				ДолжностьКладовщикаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
					
				ФИО = Новый Структура();
				ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия"));
				ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Имя"));
				ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество"));
				ФИОКладовщикаПолучателя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ФЛ" Тогда
				
				ФИО = Новый Структура();
				ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия"));
				ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя"));
				ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество"));
				ФИОКладовщикаПолучателя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИОКладовщикаПолучателя) Тогда
		ИнформацияПокупателя.Вставить("ДолжностьКладовщикаПолучателя", ДолжностьКладовщикаПолучателя);
		ИнформацияПокупателя.Вставить("ФИОКладовщикаПолучателя", ФИОКладовщикаПолучателя);
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ДолжностьРуководителя") Тогда
		ИнформацияПокупателя.Вставить("ДолжностьРуководителяПолучателя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДолжностьРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОРуководителя") Тогда
		ИнформацияПокупателя.Вставить("ФИОРуководителяПолучателя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя"));
	КонецЕсли;
	
	ПредставлениеКонтрагента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование");
	ИнформацияПокупателя.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	Возврат ИнформацияПокупателя;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокумент_ИнформацияПокупателя(ТабличныйДокумент, ИнформацияПокупателя)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_УПД_ИнформацияПокупателя_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ИнформацияПокупателя);
	ОбластьМакета.Параметры.ДатаПолученияТоваров = Формат(ИнформацияПокупателя.ДатаПолученияТоваров, "ДЛФ=DD");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция ПолучитьДанныеИнформацияПродавцаУКДДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДеревоДанных = СтрокаОбъекта.ЗначениеРеквизита;
	
	// Общие сведения по документу.
	СтатусУКД = "1";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") = "ДИС" Тогда
		СтатусУКД = "2";
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") = "КСЧФ" Тогда
		СтатусУКД = "3";
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("СтатусУКД", СтатусУКД);
	
	ДанныеЗаполненияШапки.Вставить("Номер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеЗаполненияШапки.Вставить("Дата", Формат(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"), "ДЛФ='ДД'"));
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления = Формат(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"), "ДЛФ='ДД'");
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(НомерИсправления), НомерИсправления, "--"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, "--"));
	
	НомерИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента");
	ДатаИсходногоДокумента = Формат(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"), "ДЛФ='ДД'");
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", ?(ЗначениеЗаполнено(НомерИсходногоДокумента), НомерИсходногоДокумента, "--"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ?(ЗначениеЗаполнено(ДатаИсходногоДокумента), ДатаИсходногоДокумента, "--"));
	
	НомерИсправленияИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента");
	ДатаИсправленияИсходногоДокумента = Формат(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента"), "ДЛФ='ДД'");
	ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",
		?(ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента), НомерИсправленияИсходногоДокумента, "--"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента",
		?(ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента), ДатаИсправленияИсходногоДокумента, "--"));
	
	ШаблонВалюта = НСтр("ru ='%1, %2'");
	Валюта = СтрШаблон(ШаблонВалюта,
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаНаименование"),
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеЗаполненияШапки.Вставить("Валюта", Валюта);
	
	// Сведения о поставщике.
	ПредставлениеПоставщика = "";
	ИННПоставщика = "";
	АдресПоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
		ИННПоставщика = "" + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		
		ПредставлениеПоставщика = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "") + ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", ИННПоставщика);
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		СтруктураАдресаПоставщика = Новый Структура();
		
		СтруктураАдресаПоставщика.Вставить("Индекс",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"));
		СтруктураАдресаПоставщика.Вставить("КодРегион",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"));
		СтруктураАдресаПоставщика.Вставить("Район",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район"));
		СтруктураАдресаПоставщика.Вставить("Город",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город"));
		СтруктураАдресаПоставщика.Вставить("НаселПункт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"));
		СтруктураАдресаПоставщика.Вставить("Улица",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"));
		СтруктураАдресаПоставщика.Вставить("Дом",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"));
		СтруктураАдресаПоставщика.Вставить("Корпус",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"));
		СтруктураАдресаПоставщика.Вставить("Кварт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"));
		
		АдресПоставщика = СобратьАдрес(СтруктураАдресаПоставщика);
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		
		КодСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
		АдрТекст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст");
		
		АдресПоставщика = КодСтр + ", " + АдрТекст;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		АдресПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.КодГАР");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", АдресПоставщика);
	
	// Сведения о покупателе.
	ПредставлениеПокупателя = "";
	ИННПокупателя = "";
	АдресПокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
		ИННПокупателя = "" + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		
		ПредставлениеПокупателя = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "") + ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", ИННПокупателя);
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		СтруктураАдресаПокупателя = Новый Структура();
		
		СтруктураАдресаПокупателя.Вставить("Индекс",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"));
		СтруктураАдресаПокупателя.Вставить("КодРегион",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"));
		СтруктураАдресаПокупателя.Вставить("Район",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район"));
		СтруктураАдресаПокупателя.Вставить("Город",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город"));
		СтруктураАдресаПокупателя.Вставить("НаселПункт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"));
		СтруктураАдресаПокупателя.Вставить("Улица",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"));
		СтруктураАдресаПокупателя.Вставить("Дом",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"));
		СтруктураАдресаПокупателя.Вставить("Корпус",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"));
		СтруктураАдресаПокупателя.Вставить("Кварт",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"));
		
		АдресПокупателя = СобратьАдрес(СтруктураАдресаПокупателя);
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		
		КодСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
		АдрТекст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст");
		
		АдресПокупателя = КодСтр + ", " + АдрТекст;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		АдресПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.КодГАР");
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", АдресПокупателя);
	
	// Сведения таблицы счета-фактуры.
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки");
	ТаблицаЗначений.Колонки.Добавить("ТоварНаименование");
	ТаблицаЗначений.Колонки.Добавить("ТоварКод");
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмеренияДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаЗначений.Колонки.Добавить("КоличествоДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("Количество");
	ТаблицаЗначений.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровБезНалога");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение");
	ТаблицаЗначений.Колонки.Добавить("СуммаАкцизаДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("СуммаАкциза");
	ТаблицаЗначений.Колонки.Добавить("СуммаАкцизаУвеличение");
	ТаблицаЗначений.Колонки.Добавить("СуммаАкцизаУменьшение");
	ТаблицаЗначений.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаЗначений.Колонки.Добавить("СуммаНалогаДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("СуммаНалога");
	ТаблицаЗначений.Колонки.Добавить("СуммаНалогаУвеличение");
	ТаблицаЗначений.Колонки.Добавить("СуммаНалогаУменьшение");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровСНалогом");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение");
	ТаблицаЗначений.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение");
	ТаблицаЗначений.Колонки.Добавить("ДополнительныеДанные");
	
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НомерСтроки = Товар.Значение;
		
		НоваяСтрока.ТоварНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки");
		НоваяСтрока.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
		
		НоваяСтрока.ЕдиницаИзмеренияДоКорректировки = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки"));
		НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
			
		НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
			
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
		НоваяСтрока.СтоимостьТоваровБезНалога = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаУвеличение");
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаУменьшение");
			
			
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
		НоваяСтрока.НалоговаяСтавка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			
		НоваяСтрока.СуммаНалогаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
		НоваяСтрока.СуммаНалога = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		НоваяСтрока.СуммаНалогаУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаУвеличение");
		НоваяСтрока.СуммаНалогаУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение");
			
		НоваяСтрока.СуммаАкцизаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаДоКорректировки");
		НоваяСтрока.СуммаАкциза = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаАкциза");
		НоваяСтрока.СуммаАкцизаУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаУвеличение");
		НоваяСтрока.СуммаАкцизаУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаУменьшение");
			
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки");
		НоваяСтрока.СтоимостьТоваровСНалогом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУвеличение");
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУменьшение");
		
		ДополнительныеДанные = Новый Соответствие;
		СтрокаТаблицы = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				ДополнительныеДанные.Вставить(
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Идентификатор"),
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
					"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Значение"));
			КонецЦикла;
		КонецЕсли;
		НоваяСтрока.ДополнительныеДанные = ДополнительныеДанные;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ВсегоСтоимостьТоваровБезНалогаУвеличение",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение"));
	ДанныеЗаполненияШапки.Вставить("ВсегоСтоимостьТоваровСНалогомУвеличение",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение"));
	ДанныеЗаполненияШапки.Вставить("ВсегоСуммаНалогаУвеличение",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение"));
	ДанныеЗаполненияШапки.Вставить("ВсегоСтоимостьТоваровБезНалогаУменьшение",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение"));
	ДанныеЗаполненияШапки.Вставить("ВсегоСтоимостьТоваровСНалогомУменьшение",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	ДанныеЗаполненияШапки.Вставить("ВсегоСуммаНалогаУменьшение",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение"));
	
	ДополнительныеДанные = Новый Соответствие;
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры")) Тогда
		
		СтрокиДопДанныеСчетаФактуры = ДеревоДанных.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ДополнительныеДанные.Вставить(
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"),
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	// Сведения о подписантах КСФ.
	ДанныеЗаполненияПодвала = Новый Структура();
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОРуководителя") Тогда
		ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОПБОЮЛ") Тогда
		ДанныеЗаполненияПодвала.Вставить("ФИОПБОЮЛ",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОПБОЮЛ"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "Свидетельство") Тогда
		ДанныеЗаполненияПодвала.Вставить("Свидетельство",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Свидетельство"));
	КонецЕсли;
	
	// Общие сведения по изменению стоимости.
	ДанныеЗаполненияПодвалаНакладной = Новый Структура();
	
	ДанныеЗаполненияПодвалаНакладной.Вставить("ИныеСведенияОбИзмененииСтоимости",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости"));
	ДанныеЗаполненияПодвалаНакладной.Вставить("РеквизитыПередаточныхДокументов",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов"));
	
	ПредставлениеОснования = "";
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОснованиеКорректировки");
	Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
		СтрокаТаблицы = ДеревоДанных.Строки.Найти("ОснованиеКорректировки", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			ШаблонПоДокументу = НСтр("ru ='№%1 от %2'");
			Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
				
				ДокументНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
					"ОснованиеКорректировки.НомерСтроки.ДокументНаименование");
				ДокументНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
					"ОснованиеКорректировки.НомерСтроки.ДокументНомер");
				ДокументДата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Основание,
					"ОснованиеКорректировки.НомерСтроки.ДокументДата");
				
				ПредставлениеОснования = ДокументНаименование
					+ ?(ЗначениеЗаполнено(ДокументНомер), " " + СтрШаблон(ШаблонПоДокументу, ДокументНомер, ДокументДата), "")
					+ ?(ЗначениеЗаполнено(ПредставлениеОснования), ", " + ПредставлениеОснования, "");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаполненияПодвалаНакладной.Вставить("ПредставлениеОснования", ПредставлениеОснования);
	
	// Сведения о подписантах накладной.
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ДолжностьРуководителя") Тогда
		ДанныеЗаполненияПодвалаНакладной.Вставить("ДолжностьРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДолжностьРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОРуководителя")
		И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя")) Тогда
		ДанныеЗаполненияПодвалаНакладной.Вставить("ФИОРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОПБОЮЛ")
		И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОПБОЮЛ")) Тогда
		ДанныеЗаполненияПодвалаНакладной.Вставить("ФИОРуководителя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОПБОЮЛ"));
	КонецЕсли;
	
	ПредставлениеОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование");
	ДанныеЗаполненияПодвалаНакладной.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",           ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал",          ДанныеЗаполненияПодвала);
	Если СтатусУКД <> "3" Тогда
		ДанныеДляОбъекта.Вставить("ПодвалНакладной", ДанныеЗаполненияПодвалаНакладной);
	КонецЕсли;
	ДанныеДляОбъекта.Вставить("Товары",          ТаблицаЗначений);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументИнформацияПродавцаУКД(ТабличныйДокумент, ДанныеПечати, ИнформацияПокупателя)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_УКД_ИнформацияПродавца_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	Если ДанныеПечати.Шапка.СтатусУКД = "3" Тогда
		ЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента|ЗаголовокДокументаОсновныеДанные");
	КонецЕсли;
	ЗаголовокДокумента.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ЗаголовокДокумента);
	
	ОбластьОснования = Макет.ПолучитьОбласть("ОбластьОснования");
	Если ДанныеПечати.Шапка.СтатусУКД = "3" Тогда
		ОбластьОснования = Макет.ПолучитьОбласть("ОбластьОснования|ОбластьОснованияОсновныеДанные");
	КонецЕсли;
	ОбластьОснования.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьОснования);
	
	ШапкаДокумента = Макет.ПолучитьОбласть("Шапка");
	Если ДанныеПечати.Шапка.СтатусУКД = "3" Тогда
		ШапкаДокумента = Макет.ПолучитьОбласть("Шапка|ШапкаОсновныеДанные");
	КонецЕсли;
	ШапкаДокумента.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ШапкаДокумента);
	
	// Выводим заголовок таблицы.
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	Если ДанныеПечати.Шапка.СтатусУКД = "3" Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ТаблицаОсновныеДанные");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода.
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа.
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	Если ДанныеПечати.Шапка.СтатусУКД = "3" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Строка|ТаблицаОсновныеДанные");
	КонецЕсли;
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого|ОсновныеДанныеТаблицы");
	Если ДанныеПечати.Шапка.СтатусУКД = "3" Тогда
		ОбластьИтого = Макет.ПолучитьОбласть("Итого|ТаблицаОсновныеДанные");
	КонецЕсли;
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	Если ДанныеПечати.Шапка.СтатусУКД = "3" Тогда
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|ПодвалОсновныеДанные");
	КонецЕсли;
	
	ОбластьПодвалаНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	
	ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыСЭЦП");
	ОбластьМакетаДДСЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
	ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ДополнительныеДанные = СтрокаТовары.ДополнительныеДанные;
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			
			Для каждого Данные Из ДополнительныеДанные Цикл
				ПодписанныеДанные = ?(ЗначениеЗаполнено(ПодписанныеДанные),
					ПодписанныеДанные + Символы.ПС, "") + Данные.Ключ + " = " + Данные.Значение;
			КонецЦикла;
			ОбластьМакетаДДСЭП.Параметры.Подписанные = ПодписанныеДанные;
			ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Подвал);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
	Если ДанныеПечати.Свойство("ПодвалНакладной") Тогда
		ОбластьПодвалаНакладной.Параметры.Заполнить(ДанныеПечати.ПодвалНакладной);
		ОбластьПодвалаНакладной.Параметры.Заполнить(ИнформацияПокупателя);
		Если ИнформацияПокупателя.Свойство("ДатаСогласования") Тогда
			ОбластьПодвалаНакладной.Параметры.ДатаСогласования = Формат(ИнформацияПокупателя.ДатаСогласования, "ДЛФ=DD");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПодвалаНакладной);
	КонецЕсли;
	
	ДополнительныеДанные = ДанныеПечати.Шапка.ДополнительныеДанные;
	Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		МакетДД = ПолучитьОбщийМакет(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ИдентификаторДокумента_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		НомСтр = 1;
		ОбластьМакета = МакетДД.ПолучитьОбласть("ДопДанныеШапки_Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Для каждого Данные Из ДополнительныеДанные Цикл
			
			ОбластьМакетаСЭП = МакетДД.ПолучитьОбласть("ДопДанныеШапки_Строка");
			ОбластьМакетаСЭП.Параметры.Нпп               = НомСтр;
			ОбластьМакетаСЭП.Параметры.ИмяРеквизита      = Данные.Ключ;
			ОбластьМакетаСЭП.Параметры.ЗначениеРеквизита = Данные.Значение;
			ТабличныйДокумент.Вывести(ОбластьМакетаСЭП);
			НомСтр = НомСтр + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИнформацииПокупателяУКД(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ИнформацияПокупателя)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
		ИнформацияПокупателя = ДанныеИнформацииПокупателяУКД(Результат.СтрокаОбъекта.ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникеУКД(УчастникXDTO, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИнфДляУчаст", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		СтрокаДереваДанных, ВидУчастника + ".ИнформацияДляУчастника"), , ТекстОшибки);
	
	ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		СвЮЛУч = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛУч", ПространствоИменСхемы);
		
		Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(СвЮЛУч, "НаимОрг", Наименование, Истина, ТекстОшибки);
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		ЗаполнитьСвойствоXDTO(СвЮЛУч, "ИННЮЛ", ИНН, Истина, ТекстОшибки);
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		ЗаполнитьСвойствоXDTO(СвЮЛУч, "КПП", КПП, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛУч", СвЮЛУч, , ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		СвИПТип = ПолучитьОбъектТипаCML("СвИПТип", ПространствоИменСхемы);
		
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		ЗаполнитьСвойствоXDTO(СвИПТип, "ИННФЛ", ИНН, Истина, ТекстОшибки);
		
		СвидетельствоОГосРегистрации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации");
		ЗаполнитьСвойствоXDTO(СвИПТип, "СвГосРегИП", СвидетельствоОГосРегистрации, , ТекстОшибки);
		ИныеСведения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		ЗаполнитьСвойствоXDTO(СвИПТип, "ИныеСвед", ИныеСведения, , ТекстОшибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвИПТип, "ФИО", ФИО,  , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИПТип, , ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		СвИнНеУч = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвИнНеУч", ПространствоИменСхемы);
		
		Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(СвИнНеУч, "НаимОрг", Наименование, , ТекстОшибки);
		ИныеСведения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения");
		ЗаполнитьСвойствоXDTO(СвИнНеУч, "ИныеСвед", ИныеСведения, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИдСв, "СвИнНеУч",  СвИнНеУч, , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, ТекстОшибки);
	
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Район",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Район"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Город",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Город"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Улица",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Дом",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"), , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, Истина, ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдрИнфТип, Истина, ТекстОшибки);
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		ЗаполнитьСвойствоXDTO(АдресТип, "КодГАР",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР"), Истина, ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", АдресТип, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения")) Тогда
		КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.Телефон"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта"), , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты")) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("СвПродПокТип.БанкРекв", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета"), , ТекстОшибки);
		
		СвБанк = ПолучитьОбъектТипаCML("СвПродПокТип.БанкРекв.СвБанк", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвБанк, "БИК",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвБанк, "КорСчет",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БанкРекв, "СвБанк", СвБанк, Истина, ТекстОшибки);
			
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, Истина, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеИнформацииПокупателяУКД(ДеревоДанных)
	
	// Общие сведения по документу.
	ИнформацияПокупателя = Новый Структура;
	
	ИнформацияПокупателя.Вставить("ДатаСогласования",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования"));
	
	// Сведения о подписантах накладной.
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ДолжностьРуководителя") Тогда
		ИнформацияПокупателя.Вставить("ДолжностьРуководителяПолучателя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДолжностьРуководителя"));
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ФИОРуководителя") Тогда
		ИнформацияПокупателя.Вставить("ФИОРуководителяПолучателя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ФИОРуководителя"));
	КонецЕсли;
	
	ПредставлениеКонтрагента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве
		(ДеревоДанных, "СоставительДокументаНаименование");
	ИнформацияПокупателя.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	Возврат ИнформацияПокупателя;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокумент_ИнформацияПокупателяУКД(ТабличныйДокумент, ИнформацияПокупателя)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_УКД_ИнформацияПокупателя_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ИнформацияПокупателя);
	ОбластьМакета.Параметры.ДатаСогласования = Формат(ИнформацияПокупателя.ДатаСогласования, "ДЛФ=DD");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД ФНС из документов БД

Функция СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД)
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",             НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",              НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",           ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("Структура") И СсылкаНаОбъект.Свойство("Идентификатор") Тогда
		// Бизнес-сеть.
		СтруктураЭД.Вставить("НомерЭД",             СсылкаНаОбъект.Идентификатор);
	Иначе
		СтруктураЭД.Вставить("НомерЭД",             ВернутьИдЭД(СсылкаНаОбъект));
	КонецЕсли;
	
	СтруктураЭД.Вставить("ДатаЭД",                  ТекущаяДатаСеанса());
	
	СтруктураЭД.Вставить("Организация",             СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",              НастройкиОбменаЭД.Контрагент);
	
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",      НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",            НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",     Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
	ДокументыОснования = Новый Массив;
	ДокументыОснования.Добавить(СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДокументыОснования",      ДокументыОснования);
	
	ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
	СтруктураЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);
	
	Возврат СтруктураЭД;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Корректировочный счет-фактура.
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьКорректировочныйСчетФактуруФНСCML(ДеревоДанных)

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	ВерсияФормата = "5.02";
	ПространствоИменСхемы = "KORSFAKT_5_02";
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),  Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ВерсияФормата, Истина, ТекстОшибки);;
		
		СведенияУчастника = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СведенияУчастника, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияУчастника, "ИдПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		НаимОрг = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
		ИННЮЛ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
		ИдЭДО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияУчастника, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СведенияУчастника, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		
		КорректировочныйСчетФактура = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИменСхемы);
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерКорСчетаФактуры");
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаКорСчетаФактуры"));
		ЗаполнитьСвойствоXDTO(КорректировочныйСчетФактура, "НомерКСчФ", НомерДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КорректировочныйСчетФактура, "ДатаКСчФ", ДатаДок, Истина, ТекстОшибки);
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры");
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры"));
		
		СФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СФ, "ДатаСчФ", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СФ, "НомерСчФ", НомерДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КорректировочныйСчетФактура, "КодОКВ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"), Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
		Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
			
			ДатаДок = ДатаДД_ММ_ГГГГ(ДатаДок);
			ИсправленныйДокумент = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ.ИспрСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИсправленныйДокумент, "ДатаИспрСчФ", ДатаДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИсправленныйДокумент, "НомИспрСчФ", НомерДок, Истина, ТекстОшибки);
			СФ.ИспрСчФ.Добавить(ИсправленныйДокумент);
			
		КонецЕсли;
		КорректировочныйСчетФактура.СчФ.Добавить(СФ);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияКорСчетаФактуры");
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияКорСчетаФактуры");
		Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
			ДатаДок = ДатаДД_ММ_ГГГГ(ДатаДок);
			ИсправленныйДокумент = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИсправленныйДокумент, "НомИспрКСчФ", НомерДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИсправленныйДокумент, "ДатаИспрКСчФ", ДатаДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(КорректировочныйСчетФактура,"ИспрКСчФ", ИсправленныйДокумент,,ТекстОшибки);
		КонецЕсли;
		
		Продавец = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеПокупателяПродавцаФНСДляСФ(Продавец, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Продавец") Тогда
			ЗаполнитьСвойствоXDTO(КорректировочныйСчетФактура, "СвПрод", Продавец, Истина, ТекстОшибки);
		КонецЕсли;
		
		Покупатель = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеПокупателяПродавцаФНСДляСФ(Покупатель, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Покупатель") Тогда
			ЗаполнитьСвойствоXDTO(КорректировочныйСчетФактура, "СвПокуп", Покупатель, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника")) Тогда
			ПоместитьДанныеКомиссионераВДопДанные(ДеревоДанных, ПространствоИменСхемы, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", КорректировочныйСчетФактура, Истина, ТекстОшибки);
		ТабличнаяЧасть = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
		СуммаБезНДСРазность = 0;
		СуммаНДСРазность = 0;
		СуммаСНДСРазность = 0;
		ВсеСтрокиБезНДС = Истина;
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведенияОТоваре = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НомСтр", Товар.Значение, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НаимТов", Реквизит, Истина, ТекстОшибки);
			
			ЕдиницаИзмеренияКодДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияКодДо");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовДо", ЕдиницаИзмеренияКодДо, , ТекстОшибки);
			
			ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияКод");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовПосле", ЕдиницаИзмеренияКод, , ТекстОшибки);
			
			КоличествоДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоДо");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовДо", КоличествоДо, , ТекстОшибки);
			
			Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Количество");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовПосле", Количество, , ТекстОшибки);
			
			ЦенаДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЦенаДо");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовДо", ЦенаДо, , ТекстОшибки);
			
			Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Цена");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовПосле", Цена, , ТекстОшибки);
			
			// Стоимость без НДС
			СуммаДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДСДо");
			СуммаПосле = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
			Если ЗначениеЗаполнено(СуммаДо) И ЗначениеЗаполнено(СуммаПосле) Тогда
				СтТовБезНДС = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СтТовБезНДС, "СтоимДоИзм", СуммаДо, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтТовБезНДС, "СтоимПослеИзм", СуммаПосле, Истина, ТекстОшибки);
				СуммаБезНДСРазность = СуммаБезНДСРазность + СуммаДо - СуммаПосле;
				Если СуммаДо < СуммаПосле Тогда
					ЗаполнитьСвойствоXDTO(СтТовБезНДС, "СтоимУвел", СуммаПосле - СуммаДо, , ТекстОшибки);
				ИначеЕсли СуммаДо > СуммаПосле Тогда
					ЗаполнитьСвойствоXDTO(СтТовБезНДС, "СтоимУм", СуммаДо - СуммаПосле, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовБезНДС", СтТовБезНДС, , ТекстОшибки);
			КонецЕсли;
			
			// акциза
			Акциз = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.АкцизаДо");
			Если НЕ ЗначениеЗаполнено(Реквизит) ИЛИ Найти(Реквизит, НСтр("ru ='без акциза'")) > 0 Тогда
				ЗначениеАкциза = НСтр("ru ='без акциза'");
				СуммаДо = 0;
			Иначе
				Если ТипЗнч(Реквизит) = Тип("Число") Тогда
					ЗначениеАкциза = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
					СуммаДо = Реквизит;
				Иначе
					ЗначениеАкциза = СокрЛП(Реквизит);
					СуммаДо = Число(Реквизит);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеАкциза = НСтр("ru ='без акциза'") Тогда
				ЗаполнитьСвойствоXDTO(Акциз, "БезАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(Акциз, "СумАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизДо", Акциз, Истина, ТекстОшибки);
			
			Акциз = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Акциза");
			Если НЕ ЗначениеЗаполнено(Реквизит) ИЛИ Найти(Реквизит, НСтр("ru ='без акциза'")) > 0 Тогда
				ЗначениеАкциза = НСтр("ru ='без акциза'");
				СуммаПосле = 0;
			Иначе
				Если ТипЗнч(Реквизит) = Тип("Число") Тогда
					ЗначениеАкциза = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
					СуммаПосле = Реквизит;
				Иначе
					ЗначениеАкциза = СокрЛП(Реквизит);
					СуммаПосле = Число(Реквизит);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеАкциза = НСтр("ru ='без акциза'") Тогда
				ЗаполнитьСвойствоXDTO(Акциз, "БезАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(Акциз, "СумАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизПосле", Акциз, Истина, ТекстОшибки);
			
			АкцизРазн = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.АкцизРазн", ПространствоИменСхемы);
			Если СуммаДо <= СуммаПосле Тогда
				ЗаполнитьСвойствоXDTO(АкцизРазн, "СумУвел", СуммаПосле - СуммаДо, Истина, ТекстОшибки);
			ИначеЕсли СуммаДо > СуммаПосле Тогда
				ЗаполнитьСвойствоXDTO(АкцизРазн, "СумУм", СуммаДо - СуммаПосле, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизРазн", АкцизРазн, Истина, ТекстОшибки);
			
			// Ставка НДС
			СтавкаНДСДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДСДо");
			СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
			
			СтавкаНДСДо = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , СтавкаНДСДо);
			СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , СтавкаНДС);
				
			СтавкаДоXDTO = СтавкаНДСXDTO(СтавкаНДСДо);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтДо", СтавкаДоXDTO, Истина, ТекстОшибки);
			
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтПосле", СтавкаXDTO, Истина, ТекстОшибки);
				
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДСДо");
			СтрСуммаНДСДо = СокрЛП(Реквизит);
			Если ВРег(СтрСуммаНДСДо) = ВРег(НСтр("ru = 'без НДС'")) ИЛИ СтрСуммаНДСДо = "-" Тогда
				СуммаНДС = СтрСуммаНДСДо;
				СуммаДо = 0;
			Иначе
				Если Реквизит = 0 Тогда
					СуммаНДС = "-";
					СуммаДо = 0;
				Иначе
					СуммаНДС = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
					СуммаДо = Число(Реквизит);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", СуммаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалДо", СумНДСТип, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			СтрСуммаНДС = СокрЛП(Реквизит);
			Если ВРег(СтрСуммаНДС) = ВРег(НСтр("ru = 'без НДС'")) ИЛИ СтрСуммаНДС = "-" Тогда
				СуммаНДС = СтрСуммаНДС;
				СуммаПосле = 0;
			Иначе
				Если Реквизит = 0 Тогда
					СуммаНДС = "-";
					СуммаПосле = 0;
				Иначе
					СуммаНДС = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
					СуммаПосле = Число(Реквизит);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", СуммаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалПосле", СумНДСТип, Истина, ТекстОшибки);
			Если ВсеСтрокиБезНДС И (ВРег(СтрСуммаНДСДо) <> ВРег(НСтр("ru = 'без НДС'")) ИЛИ ВРег(СтрСуммаНДС) <> ВРег(НСтр("ru = 'без НДС'"))) Тогда
				ВсеСтрокиБезНДС = Ложь;
			КонецЕсли;
			
			СумНалРазн = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.СумНалРазн", ПространствоИменСхемы);
			СуммаНДСРазность = СуммаНДСРазность + СуммаДо - СуммаПосле;
			Если СуммаДо <= СуммаПосле Тогда
				ЗаполнитьСвойствоXDTO(СумНалРазн, "СумУвел", СуммаПосле - СуммаДо, Истина, ТекстОшибки);
			ИначеЕсли СуммаДо > СуммаПосле Тогда
				ЗаполнитьСвойствоXDTO(СумНалРазн, "СумУм", СуммаДо - СуммаПосле, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалРазн", СумНалРазн, Истина, ТекстОшибки);
			
			// Стоимость с НДС
			СтТовУчНал = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);
			СуммаДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДСДо");
			ЗаполнитьСвойствоXDTO(СтТовУчНал, "СтоимДоИзм", СуммаДо, Истина, ТекстОшибки);
			СуммаПосле = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(СтТовУчНал, "СтоимПослеИзм", СуммаПосле, Истина, ТекстОшибки);
			СуммаСНДСРазность = СуммаСНДСРазность + СуммаДо - СуммаПосле;
			Если СуммаДо <= СуммаПосле Тогда
				ЗаполнитьСвойствоXDTO(СтТовУчНал, "СтоимУвел", СуммаПосле - СуммаДо, Истина, ТекстОшибки);
			ИначеЕсли СуммаДо > СуммаПосле Тогда
				ЗаполнитьСвойствоXDTO(СтТовУчНал, "СтоимУм", СуммаДо - СуммаПосле, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовУчНал", СтТовУчНал, Истина, ТекстОшибки);
			
			// заполняем дополнительные Данные формата 5.02
			ЗаполнитьДопДанныеСтрокиТЧ(СведенияОТоваре, Товар, СтруктураПараметров, ПространствоИменСхемы, ТекстОшибки);
			
			ТабличнаяЧасть.СведТов.Добавить(СведенияОТоваре);
		КонецЦикла;
		
		ЗаполнитьДопДанныеШапкиДокумента(КорректировочныйСчетФактура, ДеревоДанных, ПространствоИменСхемы, СтруктураПараметров, ТекстОшибки);
		
		// Всего увеличение
		ВсегоУвеличение = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИменСхемы);
		ВсегоУменьшение = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИменСхемы);
		УвеличениеЗаполнено = Ложь;
		УменьшениеЗаполнено = Ложь;
		Если СуммаБезНДСРазность < 0 Тогда
			ЗаполнитьСвойствоXDTO(ВсегоУвеличение, "СтТовБезНДСВсего", - СуммаБезНДСРазность, , ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(ВсегоУменьшение, "СтТовБезНДСВсего", СуммаБезНДСРазность, , ТекстОшибки);
		КонецЕсли;
		Если СуммаСНДСРазность < 0 Тогда
			ЗаполнитьСвойствоXDTO(ВсегоУвеличение, "СтТовУчНалВсего", - СуммаСНДСРазность, Истина, ТекстОшибки);
			УвеличениеЗаполнено = Истина;
		Иначе
			ЗаполнитьСвойствоXDTO(ВсегоУменьшение, "СтТовУчНалВсего", СуммаСНДСРазность, Истина, ТекстОшибки);
			УменьшениеЗаполнено = Истина;
		КонецЕсли;
		СумНалВсего = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
		АбсСуммаНДС = ?(СуммаНДСРазность < 0, - СуммаНДСРазность, СуммаНДСРазность);
		АбсСуммаНДС = ?(ВсеСтрокиБезНДС, НСтр("ru = 'без НДС'"),
			?(АбсСуммаНДС = 0, "-", Формат(АбсСуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ=")));
		Если УвеличениеЗаполнено Тогда
			ЗаполнитьСвойствоXDTO(СумНалВсего, "СумНДС", АбсСуммаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУвеличение, "СумНал", СумНалВсего, Истина, ТекстОшибки);
		Иначе
			УвеличениеЗаполнено = Ложь;
			ЗаполнитьСвойствоXDTO(СумНалВсего, "СумНДС", АбсСуммаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУменьшение, "СумНал", СумНалВсего, Истина, ТекстОшибки);
		КонецЕсли;
		Если УвеличениеЗаполнено Тогда
			ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУвел", ВсегоУвеличение, , ТекстОшибки);
		ИначеЕсли УменьшениеЗаполнено Тогда
			ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУм", ВсегоУменьшение, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТабличнаяЧасть, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьСчетФактуруФНСCML(ДеревоДанных)

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	ВерсияФормата = "5.02";
	ПространствоИменСхемы = "SFAKT_5_02";
	
	ТекстОшибки = "";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ВерсияФормата, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		НаимОрг = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
		ИННЮЛ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
		ИдЭДО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО");
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		
		ДанныеСчетаФактуры = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИменСхемы);
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры");
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры"));
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "НомерСчФ", НомерДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДатаСчФ", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "КодОКВ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"), Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
		Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
			ДатаДок = ДатаДД_ММ_ГГГГ(ДатаДок);
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомерДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДок, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры,"ИспрСчФ", ИспрСчФ,,ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеПокупателяПродавцаФНСДляСФ(СвПрод, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Продавец") Тогда
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПрод", СвПрод, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвГрузоотправителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе");
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги") <> Истина И ЗначениеЗаполнено(СвГрузоотправителя) Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);
			Если СвГрузоотправителя = "ОнЖе" Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", НСтр("ru = 'он же'"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
			Иначе
				Грузоотправитель = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.Грузоотправитель");
				СвГрузПолуч = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
				Если Грузоотправитель = Истина
					И ЗаполнитьДанныеГрузоОтправителяПолучателяФНСДляСФ(СвГрузПолуч,
						ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "СведенияОГрузоотправителе.Грузоотправитель") Тогда
					ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", СвГрузПолуч, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Грузополучатель = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузополучатель");
		СвГрузПолуч = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги") <> Истина И Грузополучатель = Истина
			И ЗаполнитьДанныеГрузоОтправителяПолучателяФНСДляСФ(СвГрузПолуч,
				ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Грузополучатель") Тогда
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ГрузПолуч", СвГрузПолуч, Истина, ТекстОшибки);
		КонецЕсли;
		
		СтрокаТаблицы = ДеревоДанных.Строки.Найти("ПлатежноРасчетныеДокументы", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого ПРД Из СтрокаТаблицы.Строки Цикл
				СвПРД = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.СвПРД", ПространствоИменСхемы);
				
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ПРД, "ПлатежноРасчетныеДокументы.НомерСтроки.НомерПРД");
				ЗаполнитьСвойствоXDTO(СвПРД, "НомерПРД", Реквизит, Истина, ТекстОшибки);
				Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ПРД, "ПлатежноРасчетныеДокументы.НомерСтроки.ДатаПРД"));
				ЗаполнитьСвойствоXDTO(СвПРД, "ДатаПРД", Реквизит, Истина, ТекстОшибки);
				ДанныеСчетаФактуры.СвПРД.Добавить(СвПРД);
			КонецЦикла;
		КонецЕсли;
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеПокупателяПродавцаФНСДляСФ(СвПокуп, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Покупатель") Тогда
			ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника")) Тогда
			ПоместитьДанныеКомиссионераВДопДанные(ДеревоДанных, ПространствоИменСхемы, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", ДанныеСчетаФактуры, Истина, ТекстОшибки);
		ТабличнаяЧасть = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");

		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведенияОТоваре = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НомСтр", Товар.Значение, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НаимТов", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовУчНал", Реквизит, Истина, ТекстОшибки);
			
			Акциз = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.Акциз", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Акциза");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				ЗначениеАкциза = НСтр("ru ='без акциза'");
				ЗаполнитьСвойствоXDTO(Акциз, "БезАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			Иначе
				Если ТипЗнч(Реквизит) = Тип("Число") Тогда
					ЗначениеАкциза = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
					ЗаполнитьСвойствоXDTO(Акциз, "СумАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
				Иначе
					ЗначениеАкциза = СокрЛП(Реквизит);
					ЗаполнитьСвойствоXDTO(Акциз, "БезАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "Акциз", Акциз, Истина, ТекстОшибки);
			
			РеквизитСтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
			СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСт", СтавкаXDTO, Истина, ТекстОшибки);
				
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			СтрРеквизит = СокрЛП(Реквизит);
			Если ВРег(СтрРеквизит) = ВРег(НСтр("ru = 'без НДС'")) ИЛИ СтрРеквизит = "-" Тогда
				СуммаНДС = СтрРеквизит;
			Иначе
				Если Реквизит = 0 Тогда
					СуммаНДС = "-";
				Иначе
					СуммаНДС = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", СуммаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			
			// необязательные реквизиты:
			ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияКод");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_Тов", ЕдиницаИзмеренияКод, , ТекстОшибки);
			
			Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Количество");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТов", Количество, , ТекстОшибки);
			
			Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Цена");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТов", Цена, , ТекстОшибки);
			
			СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовБезНДС", СуммаБезНДС, , ТекстОшибки);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ТаможеннаяДекларация", Ложь);
			Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
				СтрокиТД = Товар.Строки.Найти("ТаблицаТоваров.НомерСтроки.ТаможеннаяДекларация", "ПолныйПуть", Истина);
				Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
					ВладелецТД = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.СвТД", ПространствоИменСхемы);
					КодСтраны = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТД, "ТаблицаТоваров.НомерСтроки.ТаможеннаяДекларация.НомерСтроки.КодСтраныПроисхождения");
					НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТД, "ТаблицаТоваров.НомерСтроки.ТаможеннаяДекларация.НомерСтроки.НомерТаможеннойДекларации");
					ЗаполнитьСвойствоXDTO(ВладелецТД, "КодПроисх", КодСтраны, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ВладелецТД, "НомерТД", НомерТД, Истина, ТекстОшибки);
					СведенияОТоваре.СвТД.Добавить(ВладелецТД);
				КонецЦикла;
			КонецЕсли;
				
			// заполняем дополнительные Данные формата 5.02
			ЗаполнитьДопДанныеСтрокиТЧ(СведенияОТоваре, Товар, СтруктураПараметров, ПространствоИменСхемы, ТекстОшибки);
				
			ТабличнаяЧасть.СведТов.Добавить(СведенияОТоваре);
		КонецЦикла;
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			
			ЗаполнитьДопДанныеШапкиДокумента(ДанныеСчетаФактуры, ДеревоДанных, ПространствоИменСхемы, СтруктураПараметров, ТекстОшибки);
			
		КонецЕсли;
		
		Итоги = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего");
		ЗаполнитьСвойствоXDTO(Итоги, "СтТовУчНалВсего", Реквизит, Истина, ТекстОшибки);
		СуммаБезНДСВсего = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаБезНДСВсего");
		ЗаполнитьСвойствоXDTO(Итоги, "СтТовБезНДСВсего", СуммаБезНДСВсего, , ТекстОшибки);
		
		НаличныеВсего = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаНДСВсего");
		СтрРеквизит = СокрЛП(Реквизит);
		Если ВРег(СтрРеквизит) = ВРег(НСтр("ru = 'без НДС'")) ИЛИ СтрРеквизит = "-" Тогда
			СуммаНДС = СтрРеквизит;
		Иначе
			Если Реквизит = 0 Тогда
				СуммаНДС = "-";
			Иначе
				СуммаНДС = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=");
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(НаличныеВсего, "СумНДС", СуммаНДС, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Итоги, "СумНалВсего", НаличныеВсего, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоОпл", Итоги, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТабличнаяЧасть, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД ТОРГ12.
//
// Параметры:
//  СтруктураПараметров - Структура - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьТОРГ12ПродавецФНСCML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	ПространствоИменСхемы = "OTORG_5_01_02";
	НаименованиеОтправителя = "СвОЭДОтпрСФ";
	НаименованиеИД = "ИдЭДОСФ";
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор." + НаименованиеОтправителя, ПространствоИменСхемы);
			НаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаименованиеОрганизации, Истина, ТекстОшибки);
			ИННЮЛ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
			ИдЭДО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, НаименованиеИД, ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, НаименованиеОтправителя, СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"КНД"), Истина, ТекстОшибки);
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВремДок"), Истина, ТекстОшибки);
		
		СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"НаимПервДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ОКУДПервДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"НомФорм"), Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНС(Поставщик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Поставщик") Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);
		КонецЕсли;
		
		Плательщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНС(Плательщик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Плательщик") Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик", Плательщик, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		
		ГрузоотправительЗаполнен = ЗаполнитьДанныеУчастникаФНС(Грузоотправитель, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Грузоотправитель");
		
		Если ГрузоотправительЗаполнен Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ГрузОт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);
			КодОКДП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.КодОКДП");
			ЗаполнитьСвойствоXDTO(ГрузОт, "ОКДП", КодОКДП, , ТекстОшибки);
			СтруктурноеПодразделение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.СтруктурноеПодразделение");
			ЗаполнитьСвойствоXDTO(ГрузОт, "СтруктПодр", СтруктурноеПодразделение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузОт", ГрузОт, , ТекстОшибки);
		КонецЕсли;
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ГрузополучательЗаполнен = ЗаполнитьДанныеУчастникаФНС(Грузополучатель, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Грузополучатель");
		
		Если ГрузополучательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		КонецЕсли;
		
		ДеревоДанныхОснование = ЗначениеТаблицыДереваЭД(ДеревоДанных, "Основание");
		
		Если ЗначениеЗаполнено(ДеревоДанныхОснование) Тогда
			Для Каждого СтрокаДереваОснование Из ДеревоДанныхОснование.Строки Цикл
				Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);
				
				НаименованиеОснования = ЗначениеРеквизитаДерева(СтрокаДереваОснование, "Основание.НомерСтроки.ДокОснованиеНаименование");
				Если Не ЗначениеЗаполнено(НаименованиеОснования) Тогда
					НаименованиеОснования = "-";
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", НаименованиеОснования, , ТекстОшибки);
				
				НомерОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "Основание.НомерСтроки.ДокОснованиеНомер");
				ЗаполнитьСвойствоXDTO(Основание, "НомОсн", НомерОснования, , ТекстОшибки);
				
				ДатаОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "Основание.НомерСтроки.ДокОснованиеДата");
				Если ЗначениеЗаполнено(ДатаОснования) Тогда
					ДатаОснования = ДатаДД_ММ_ГГГГ(ДатаОснования);
					ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаОснования, , ТекстОшибки);
				КонецЕсли;
				
				ДопСведенияОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "Основание.НомерСтроки.ДокОснованиеДопСведения");
				ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", ДопСведенияОснования, , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(СвТНО, "Основание", Основание, , ТекстОшибки);
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполняем таблицу ТранспортнаяНакладная
		ТранспортнаяНакладнаяДеревоДанных = ЗначениеТаблицыДереваЭД(ДеревоДанных, "ТранспортнаяНакладная");
		Если ЗначениеЗаполнено(ТранспортнаяНакладнаяДеревоДанных) Тогда
			
			ТранспортнаяНакладная = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТранНакл", ПространствоИменСхемы);
		
			Для Каждого СтрокаТранспортнаяНакладная Из ТранспортнаяНакладнаяДеревоДанных.Строки Цикл
				
				НомерНакладной = ЗначениеРеквизитаДерева(СтрокаТранспортнаяНакладная, "ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер");
				ДатаНакладной = ЗначениеРеквизитаДерева(СтрокаТранспортнаяНакладная, "ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата");
				Если ЗначениеЗаполнено(НомерНакладной) И ЗначениеЗаполнено(ДатаНакладной) Тогда
					ЗаполнитьСвойствоXDTO(ТранспортнаяНакладная, "НомТранНакл", НомерНакладной, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТранспортнаяНакладная, "ДатаТранНакл", ДатаДД_ММ_ГГГГ(ДатаНакладной), , ТекстОшибки);
				КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(СвТНО, "ТранНакл", ТранспортнаяНакладная, , ТекстОшибки);
				
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(СвТНО, "ВидОперации", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"КодВидаОперации"), , ТекстОшибки);
		
		ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ТН, "НомТН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"НомерТоварнойНакладной"), Истина, ТекстОшибки);
		Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаТоварнойНакладной"));
		ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", Реквизит, Истина, ТекстОшибки);
		
		Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");

		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.Значение, Истина, ТекстОшибки);
			Реквизит = Строка(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмерения"));
			ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", Реквизит, Истина, ТекстОшибки);
			МассаНетто = ?(ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто")),
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто"),
							0);
			ЗаполнитьСвойствоXDTO(СведТов, "Нетто", МассаНетто, Истина, ТекстОшибки);
			
			НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", НаименованиеНоменклатуры, , ТекстОшибки);
			
			БазоваяЕдиницаКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод");
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", БазоваяЕдиницаКод, , ТекстОшибки);
			
			НаименованиеХарактеристики = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар,
			                                                      "ТаблицаТоваров.НомерСтроки.НаименованиеХарактеристики");
			ЗаполнитьСвойствоXDTO(СведТов, "ХарактерТов", НаименованиеХарактеристики, , ТекстОшибки);
			
			Сорт = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Сорт");
			ЗаполнитьСвойствоXDTO(СведТов, "СортТов", Сорт, , ТекстОшибки);
			
			Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Артикул");
			ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Артикул, , ТекстОшибки);
			
			КодТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КодТовара");
			ЗаполнитьСвойствоXDTO(СведТов, "КодТов", КодТовара, , ТекстОшибки);
			
			ВидУпаковки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ВидУпаковки");
			ЗаполнитьСвойствоXDTO(СведТов, "ВидУпак", ВидУпаковки, , ТекстОшибки);
			
			КоличествоВОдномМесте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоВОдномМесте");
			ЗаполнитьСвойствоXDTO(СведТов, "Место", КоличествоВОдномМесте, , ТекстОшибки);
			
			КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
			ЗаполнитьСвойствоXDTO(СведТов, "КолМест", КоличествоМест, , ТекстОшибки);
			
			МассаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаБрутто");
			ЗаполнитьСвойствоXDTO(СведТов, "Брутто", МассаБрутто, , ТекстОшибки);
			
			Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Цена");
			ЗаполнитьСвойствоXDTO(СведТов, "Цена", Цена, , ТекстОшибки);
			
			СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", СуммаБезНДС, , ТекстОшибки);
			
			СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
			СтрокаСтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
			Если ЗначениеЗаполнено(СтрокаСтавкаНДС) И ВРег(СтрокаСтавкаНДС) <> НСтр("ru ='БЕЗ НДС'") Тогда
				СтавкаЧислом = ОбменСКонтрагентамиПовтИсп.СтавкаНДСЧислом(СтрокаСтавкаНДС);
				ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", СтавкаЧислом, , ТекстОшибки, Истина);
			КонецЕсли;
			
			СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", СуммаНДС, , ТекстОшибки);
			
			СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", СуммаСНДС, Истина, ТекстОшибки);
			
			ЗаполнитьДопДанныеИзДереваДанных(СведТов,
			                                 Товар,
			                                 "ТаблицаТоваров.НомерСтроки",
			                                 СтруктураПараметров,
			                                 ПространствоИменСхемы,
			                                 "Файл.Документ.СвТНО.ТН.Таблица.СвТов",
			                                 "ИнфПолСтр",
			                                 "Товары",
			                                 Строка(Товар.Значение),
			                                 ТекстОшибки);
			
			Таблица.СвТов.Добавить(СведТов);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.КоличествоМест"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаБрутто"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДС"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДС"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДС")) Тогда
			
			ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
			КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.КоличествоМест");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "КолМестВс", КоличествоМест, , ТекстОшибки);
			
			МассаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаБрутто");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "БруттоВс", МассаБрутто, , ТекстОшибки);
			
			МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоВс", МассаНетто, , ТекстОшибки);
			
			СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СуммаБезНДС, , ТекстОшибки);
			
			СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДС");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СуммаНДС, , ТекстОшибки);
			
			СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СуммаСНДС, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		КонецЕсли;
		
		КоличествоПорядковыхНомеровЗаписей = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей");
		ВсегоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест");
		КоличествоПорядковыхНомеровЗаписейПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью");
		ВсегоМестПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью");
		МассаГрузаНеттоПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью");
		МассаГрузаБруттоПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью");
		МассаГрузаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто");
		МассаГрузаНетто  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто");
		
		Если ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписей) ИЛИ ЗначениеЗаполнено(ВсегоМест)
			ИЛИ ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписейПрописью) ИЛИ ЗначениеЗаполнено(ВсегоМестПрописью)
			ИЛИ ЗначениеЗаполнено(МассаГрузаНеттоПрописью) ИЛИ ЗначениеЗаполнено(МассаГрузаБруттоПрописью)
			ИЛИ ЗначениеЗаполнено(МассаГрузаБрутто) ИЛИ ЗначениеЗаполнено(МассаГрузаНетто) Тогда
			
			ТНОбщ = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.ТНОбщ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗап", КоличествоПорядковыхНомеровЗаписей, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗапПр", КоличествоПорядковыхНомеровЗаписейПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМест", ВсегоМест, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМестПр", ВсегоМестПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "Нетто", МассаГрузаНетто, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "НеттоПр", МассаГрузаНеттоПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "Брутто", МассаГрузаБрутто, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "БруттоПр", МассаГрузаБруттоПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТН, "ТНОбщ", ТНОбщ, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза")) Тогда
			ОтпускГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз", ПространствоИменСхемы);
			
			ОтпущеноНаСумму = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму");
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпуск", ОтпущеноНаСумму, Истина, ТекстОшибки);
			
			ОтпущеноНаСуммуПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью");
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпускПр", ОтпущеноНаСуммуПрописью, , ТекстОшибки);
			
			ПриложениеКоличествоЛистов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ПриложениеКоличествоЛистов");
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрил", ПриложениеКоличествоЛистов, , ТекстОшибки);
			
			ПриложениеКоличествоЛистовПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияПоОтпускуГруза.ПриложениеКоличествоЛистовПрописью");
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрилПр", ПриложениеКоличествоЛистовПрописью, , ТекстОшибки);
			
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска")) Тогда
				Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска"));
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ДатаОтпуск", Реквизит, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ОтпускГруз", ОтпускГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			ЗаполнитьДопДанныеИзДереваДанных(СвТНО, СтрокаДопДанных, "", СтруктураПараметров, ПространствоИменСхемы,
				"Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", "Шапка", Неопределено, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		ЗаполнитьИППодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД ТОРГ12(ответный титул).
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьТорг12ПокупательФНСCML(ДеревоДанных)
	
	ПространствоИменСхемы = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ПространствоИмен");
	
	Если ВРег(ПространствоИменСхемы) = ВРег("PTORG_5_01_02") Тогда
		
		НаименованиеОтправителя = "СвОЭДОтпрСФ";
		НаименованиеИД = "ИдЭДОСФ";
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ПространствоИменСхемы) Тогда
			ПространствоИменСхемы = "PTORG12";
		КонецЕсли;
		НаименованиеОтправителя = "СвОЭДОтпр";
		НаименованиеИД = "ИдЭДО";
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор." + НаименованиеОтправителя, ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"НаимОрг",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"ИННЮЛ",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					НаименованиеИД,
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, НаименованиеОтправителя, СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		
		ИдТНО = ПолучитьОбъектТипаCML("Файл.Документ.ИдТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ИдФайлТН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайлТН"), Истина, ТекстОшибки);
		ДатаДокТН = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокТН"));
		ЗаполнитьСвойствоXDTO(ИдТНО, "ДатаДокТН", ДатаДокТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ВремДокТН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДокТН"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ИдТНО", ИдТНО, Истина, ТекстОшибки);
		
		СвТНП = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНП, "НаимПервДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НаимПервДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "ОКУДПервДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОКУДПервДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомФорм"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомТН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"), , ТекстОшибки);
		ДатаТоварнойНакладной = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
		ЗаполнитьСвойствоXDTO(СвТНП, "ДатаТН", ДатаТоварнойНакладной, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза")) Тогда
			ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз", ПространствоИменСхемы);
			ДатаПолучения = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза"));
			ЗаполнитьСвойствоXDTO(ПолучилГруз, "ДатаПолуч", ДатаПолучения, Истина, ТекстОшибки);
			
			Доверенность = ПолучитьОбъектТипаCML("ДоверенностьТип", ПространствоИменСхемы);
			Если ЗаполнитьДанныеДоверенностиCML(Доверенность, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ПолучилГруз, "Доверенность", Доверенность, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНП, "ПолучилГруз", ПолучилГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			ЗаполнитьДопДанныеИзДереваДанных(СвТНП, СтрокаДопДанных, "", СтруктураПараметров, ПространствоИменСхемы,
				"Файл.Документ.СвТНП.ИнфПол", "ТекстИнф", "Шапка", Неопределено, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНП", СвТНП, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		ЗаполнитьИППодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Акта выполненных работ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьАкт501ИсполнительФНСCML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	ВерсияРегламентаЭДО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВерсияРегламентаЭДО");
	ФНСВерсия2 = Ложь;
	
	Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		ПространствоИменСхемы = "IAKTPRM_5_01_02";
		ФНСВерсия2 = Истина;
		
	Иначе
		ПространствоИменСхемы = "IAKTPRM";
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"), Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог")) Тогда
			ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"), , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО")) Тогда
			Если ФНСВерсия2 Тогда
				НаименованиеОтправителя = "СвОЭДОтпрСФ";
				НаименованиеИдЭДО = "ИдЭДОСФ";
			Иначе
				НаименованиеОтправителя = "СвОЭДОтпр";
				НаименованиеИдЭДО = "ИдЭДО";
			КонецЕсли;
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор."+ НаименованиеОтправителя, ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, НаименованиеИдЭДО, Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, НаименованиеОтправителя, СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"КНД"), Истина, ТекстОшибки);
		Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", Реквизит, Истина, ТекстОшибки);
		Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			Если ФНСВерсия2 Тогда
				ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Реквизит, Истина, ТекстОшибки);
			КонецЕсли;
		Иначе
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		КонецЕсли;
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НаимПервДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"НаимПервДок"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"), Истина, ТекстОшибки);
		
		Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", Реквизит, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СвАктИ, "Заголовок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок"), Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНС(Исполнитель, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Исполнитель") Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Исполнитель", Исполнитель, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника")) Тогда
				СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
				Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника") = "ФЛ" Тогда
					ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника.ФЛ.ИНН");
					Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника.ФЛ.Фамилия");
					Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника.ФЛ.Имя");
					Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника.ФЛ.Отчество");
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикФамилия", Фамилия);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикИмя", Имя);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикОтчество", Отчество);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикИНН", ИНН);
				Иначе
					Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника.ЮЛ.НаименованиеОрганизации");
					ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника.ЮЛ.ИНН");
					КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.ТипУчастника.ЮЛ.КПП");
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.Заказчик", Наименование);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикИНН", ИНН);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикКПП", КПП);
				КонецЕсли;
				
				// Банковский счет Заказчика
				НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.БанковскийСчет.НомерСчета");
				НаимБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.БанковскийСчет.НаимБанк");
				БИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.БанковскийСчет.БИК");
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикНомерСчета", НомерСчета);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикНаимБанк", НаимБанк);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикБИК", БИК);
				
				АдресЗаказчика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.Адрес");
				Если Врег(АдресЗаказчика) = ВРег("Структурированный") Тогда
					СтруктураАдресаЗаказчика = Новый Структура;
					СтруктураАдресаЗаказчика.Вставить("Индекс",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.Индекс"));
					СтруктураАдресаЗаказчика.Вставить("КодРегион",
					ЗначениеРеквизитаДерева(ДеревоДанных,"Заказчик.Адрес.Структурированный.КодРегион"));
					СтруктураАдресаЗаказчика.Вставить("Район",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.Район"));
					СтруктураАдресаЗаказчика.Вставить("Город",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.Город"));
					СтруктураАдресаЗаказчика.Вставить("НаселПункт",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.НаселПункт"));
					СтруктураАдресаЗаказчика.Вставить("Улица",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.Улица"));
					СтруктураАдресаЗаказчика.Вставить("Дом",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.Дом"));
					СтруктураАдресаЗаказчика.Вставить("Корпус",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.Корпус"));
					СтруктураАдресаЗаказчика.Вставить("Кварт",
					ЗначениеРеквизитаДерева(ДеревоДанных, "Заказчик.Адрес.Структурированный.Кварт"));
					
					ПредставлениеАдреса = СобратьАдрес(СтруктураАдресаЗаказчика);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикАдрес_Представление",
						ПредставлениеАдреса);
				ИначеЕсли Врег(АдресЗаказчика) = ВРег("Произвольный") Тогда
					АдресПроизвольный = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.Адрес.Произвольный");
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикАдрес_Представление",
						АдресПроизвольный);
				ИначеЕсли Врег(АдресЗаказчика) = ВРег("Иностранный") Тогда
					
					КодСтраны = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.Адрес.Иностранный.КодСтраны");
					АдресТекст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заказчик.Адрес.Иностранный.АдресТекст");
					ПредставлениеАдреса = КодСтраны + "," + " " + АдресТекст;
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ЗаказчикАдрес_Представление",
						ПредставлениеАдреса);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Заказчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
			Если ЗаполнитьДанныеУчастникаФНС(Заказчик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Заказчик") Тогда
				ЗаполнитьСвойствоXDTO(СвАктИ, "Заказчик", Заказчик, Истина, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеРаботы = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот")) Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот"));
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "НачРабот", Реквизит, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот")) Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот"));
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "КонРабот", Реквизит, , ТекстОшибки);
		КонецЕсли;
		
		СуммаБезНДСИтого = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого");
		ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "СумБезНДСИт", СуммаБезНДСИтого, , ТекстОшибки);
		
		СуммаНДСИтого = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого");
		ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "СумНДСИт", СуммаНДСИтого, , ТекстОшибки);
		
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого");
		ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "СумУчНДСИт", Реквизит, Истина, ТекстОшибки);
		
		СтрокаТаблицаУслуг = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");

		Для Каждого Услуга Из СтрокаТаблицаУслуг.Строки Цикл
			Работа = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот.Работа", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(Работа, "Номер", Услуга.Значение, Истина, ТекстОшибки);
			НаименованиеЕдиницыИзмерения = Строка(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование"));
			ЗаполнитьСвойствоXDTO(Работа, "НаимЕдИзм", Строка(НаименованиеЕдиницыИзмерения), Истина, ТекстОшибки);
			
			НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
			Описание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.Описание");
			// Требование стандарта: код единицы измерения обязателен, если присутствует поле НаимРабот.
			// Поэтому если кода единицы нет, но не заполняет НаимРабот, а помещаем его в доп данные.
			// Если нет НаимРабот, то обязательно поле Описание, поэтому его заполняем всегда.
			КодОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияКод");
			Если ЗначениеЗаполнено(КодОКЕИ) И ТипЗнч(КодОКЕИ) = Тип("Строка") И ЭтоЧисло(КодОКЕИ) Тогда
				ЗаполнитьСвойствоXDTO(Работа, "ОКЕИ", КодОКЕИ, , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Работа, "НаимРабот", НаименованиеНоменклатуры, , ТекстОшибки);
				
				Если Не ЗначениеЗаполнено(Описание) Тогда
					Описание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
				КонецЕсли;
				
			Иначе
				
				ПоместитьВДопДанныеСтрокиТабличнойЧасти(Услуга, "ТаблицаУслуг.НомерСтроки.ДопДанныеПодписанные.Наименование", 
					НаименованиеНоменклатуры, "ТаблицаУслуг");
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Работа, "Описание", Описание, , ТекстОшибки);
			
			Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.Количество");
			ЗаполнитьСвойствоXDTO(Работа, "Количество", Количество, , ТекстОшибки);
		
			Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.Цена");
			ЗаполнитьСвойствоXDTO(Работа, "Цена", Цена, , ТекстОшибки);
			
			СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(Работа, "СумБезНДС", СуммаБезНДС, , ТекстОшибки);
			
			СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СуммаНДС");
			ЗаполнитьСвойствоXDTO(Работа, "СумНДС", СуммаНДС, , ТекстОшибки);
			
			СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(Работа, "СумУчНДС", СуммаСНДС, , ТекстОшибки);
						
			ЗаполнитьДопДанныеИзДереваДанных(
									Работа,
									Услуга,
									"ТаблицаУслуг.НомерСтроки",
									СтруктураПараметров,
									ПространствоИменСхемы,
									"Файл.Документ.СвАктИ.ОписРабот.Работа",
									"ИнфПолСтр",
									"Услуги",
									Строка(Услуга.Значение),
									ТекстОшибки);
			
			ОписаниеРаботы.Работа.Добавить(Работа);
		КонецЦикла;
		
		СвАктИ.ОписРабот.Добавить(ОписаниеРаботы);
		
		
		Сдал = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения")) Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения"));
			ЗаполнитьСвойствоXDTO(Сдал, "ДатаИсполн", Реквизит, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(СвАктИ, "Сдал", Сдал, , ТекстОшибки);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			ЗаполнитьДопДанныеИзДереваДанных(СвАктИ, СтрокаДопДанных, "", СтруктураПараметров, ПространствоИменСхемы,
				"Файл.Документ.СвАктИ.ИнфПол", "ТекстИнф", "Шапка", Неопределено, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		ЗаполнитьИППодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьАкт501ЗаказчикФНСCML(ДеревоДанных, ВерсияРегламентаЭДО)
	
	ФНСВерсия2 = Ложь;
	Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		
		ПространствоИменСхемы = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПространствоИмен");
		
		Если Не ЗначениеЗаполнено(ПространствоИменСхемы) Тогда
			ПространствоИменСхемы = "ZAKTPRM_5_01_02";
		КонецЕсли;
		
		Если ПространствоИменСхемы = "ZAKTPRM_5_01_02" Тогда
			ФНСВерсия2 = Истина;
		КонецЕсли;
		
	Иначе
		ПространствоИменСхемы = "ZAKTPRM";
	КонецЕсли;;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			Если ФНСВерсия2 Тогда
				НаименованиеОтправителя = "СвОЭДОтпрСФ";
				НаименованиеИд = "ИдЭДОСФ";
			Иначе
				НаименованиеОтправителя = "СвОЭДОтпр";
				НаименованиеИд = "ИдЭДО";
			КонецЕсли;
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор."+ НаименованиеОтправителя, ПространствоИменСхемы);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, НаименованиеИд, Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, НаименованиеОтправителя, СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", Реквизит, Истина, ТекстОшибки);
		Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			Если ФНСВерсия2 Тогда
				ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Реквизит, Истина, ТекстОшибки);
			КонецЕсли;
		Иначе
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		
		ИдАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИдАктИ", ПространствоИменСхемы);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайлАктИ");
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ИдФайлАктИ", Реквизит, Истина, ТекстОшибки);
		Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокАктИ"));
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ДатаДокАктИ", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДокАктИ");
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ВремДокАктИ", Реквизит, Истина, ТекстОшибки);
		
		СведенияАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "ИдАктИ", ИдАктИ, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НаимПервДок");
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "НаимПервДок", Реквизит, Истина, ТекстОшибки);
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкт"), , ТекстОшибки);
		Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкт"));
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", Реквизит, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		ПринялАкт = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа")) Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа"));
			ЗаполнитьСвойствоXDTO(ПринялАкт, "ДатаЗаказ", Реквизит, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.Претензия")) Тогда
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.Претензия");
			ЗаполнитьСвойствоXDTO(ПринялАкт, "Претензия", Реквизит, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "Принял", ПринялАкт, Истина, ТекстОшибки);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			ЗаполнитьДопДанныеИзДереваДанных(СведенияАктИ, СтрокаДопДанных, "", СтруктураПараметров, ПространствоИменСхемы,
				"Файл.Документ.СвАктИ.ИнфПол", "ТекстИнф", "Шапка", Неопределено, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СведенияАктИ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		ЗаполнитьИППодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Корректировочный документ.
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьКорректировочныйДокументCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
		
	ПространствоИменСхемы = "OKORDOC";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			НаимОрг = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
			ИННЮЛ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
			ИдЭДО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
			
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(
				Документ,
				"ДатаДок",
				ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаДок")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВремДок"), Истина, ТекстОшибки);
		
		СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		
		Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНС(Поставщик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Поставщик") Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);
		КонецЕсли;
		
		Плательщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНС(Плательщик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Плательщик") Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик", Плательщик, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		
		ГрузоотправительЗаполнен = ЗаполнитьДанныеУчастникаФНС(
											Грузоотправитель,
											ДеревоДанных,
											ТекстОшибки,
											ПространствоИменСхемы,
											"Грузоотправитель");
		
		Если ГрузоотправительЗаполнен Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ГрузОт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);
			КодОКПД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.КодОКПД");
			ЗаполнитьСвойствоXDTO(ГрузОт, "ОКДП", КодОКПД, , ТекстОшибки);
			СтруктурноеПодразделение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.СтруктурноеПодразделение");
			ЗаполнитьСвойствоXDTO(ГрузОт, "СтруктПодр", СтруктурноеПодразделение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузОт", ГрузОт, , ТекстОшибки);
		КонецЕсли;
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ГрузополучательЗаполнен = ЗаполнитьДанныеУчастникаФНС(
											Грузополучатель,
											ДеревоДанных,
											ТекстОшибки,
											ПространствоИменСхемы,
											"Грузополучатель");
		
		Если ГрузополучательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНаименование"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНомер"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДата"))
			ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДопСведения")) Тогда
			
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);
			ДокОснованиеНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНаименование");
			ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", ДокОснованиеНаименование, , ТекстОшибки);
			
			ДокОснованиеНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНомер");
			ЗаполнитьСвойствоXDTO(Основание, "НомОсн", ДокОснованиеНомер, , ТекстОшибки);
			
			ДокОснованиеДата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДата");
			Если ЗначениеЗаполнено(ДокОснованиеДата) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаДД_ММ_ГГГГ(ДокОснованиеДата), , ТекстОшибки);
			КонецЕсли;
			ДокОснованиеДопСведения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДопСведения");
			ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", ДокОснованиеДопСведения, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвТНО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяНомер"))
		 ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяДата")) Тогда
			ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТранНакл", ПространствоИменСхемы);
			ТранспортнаяНакладнаяНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяНомер");
			ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл", ТранспортнаяНакладнаяНомер, , ТекстОшибки);
			
			ТранспортнаяНакладнаяДата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяДата");
			Если ТранспортнаяНакладнаяДата Тогда
				ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаДД_ММ_ГГГГ(ТранспортнаяНакладнаяДата), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ТранНакл", ТранНакл, , ТекстОшибки);
		КонецЕсли;
		
		КодВидаОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"КодВидаОперации");
		ЗаполнитьСвойствоXDTO(СвТНО, "ВидОперации", КодВидаОперации, , ТекстОшибки);
		
		ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(
				ТН,
				"НомТН",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"НомерТоварнойНакладной"),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				ТН,
				"ДатаТН",
				ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаТоварнойНакладной")),
				Истина,
				ТекстОшибки);
		
		Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");

		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.Значение, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СведТов,
					"НаимЕдИзм",
					Строка(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмерения")),
					Истина,
					ТекстОшибки);
			МассаНеттоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНеттоДоКорректировки");
			МассаНеттоДоКорректировки = ?(ЗначениеЗаполнено(МассаНеттоДоКорректировки), МассаНеттоДоКорректировки, 0);
			ЗаполнитьСвойствоXDTO(СведТов, "НеттоДоКорректировки", МассаНеттоДоКорректировки, Истина, ТекстОшибки);
			МассаНетто = ?(ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто")),
							ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто"),
							0);
			ЗаполнитьСвойствоXDTO(СведТов, "Нетто", МассаНетто, Истина, ТекстОшибки);
			НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", НаименованиеНоменклатуры, , ТекстОшибки);
			
			БазоваяЕдиницаКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод");
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", БазоваяЕдиницаКод, , ТекстОшибки);
			
			НаименованиеХарактеристики = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеХарактеристики");
			ЗаполнитьСвойствоXDTO(СведТов, "ХарактерТов", НаименованиеХарактеристики, , ТекстОшибки);
			
			Сорт = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Сорт");
			ЗаполнитьСвойствоXDTO(СведТов, "СортТов", Сорт, , ТекстОшибки);
			
			Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Артикул");
			ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Артикул, , ТекстОшибки);
			
			КодТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КодТовара");
			ЗаполнитьСвойствоXDTO(СведТов, "КодТов", КодТовара, , ТекстОшибки);
			
			ВидУпаковки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ВидУпаковки");
			ЗаполнитьСвойствоXDTO(СведТов, "ВидУпак", ВидУпаковки, , ТекстОшибки);
			
			КоличествоВОдномМесте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоВОдномМесте");
			ЗаполнитьСвойствоXDTO(СведТов, "Место", КоличествоВОдномМесте, , ТекстОшибки);
			
			КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
			ЗаполнитьСвойствоXDTO(СведТов, "КолМест", КоличествоМест, , ТекстОшибки);
			
			МассаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаБрутто");
			ЗаполнитьСвойствоXDTO(СведТов, "Брутто", МассаБрутто, , ТекстОшибки);
			
			ЦенаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЦенаДоКорректировки");
			ЗаполнитьСвойствоXDTO(СведТов, "ЦенаДоКорректировки", ЦенаДоКорректировки, , ТекстОшибки);
			
			Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Цена");
			ЗаполнитьСвойствоXDTO(СведТов, "Цена", Цена, , ТекстОшибки);
			
			СумБезНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДСДоКорректировки");
			ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДСДоКорректировки", СумБезНДСДоКорректировки, , ТекстОшибки);
			
			СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", СуммаБезНДС, , ТекстОшибки);
			
			СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
			СтрокаСтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
			Если ЗначениеЗаполнено(СтрокаСтавкаНДС) И ВРег(СтрокаСтавкаНДС) <> НСтр("ru ='БЕЗ НДС'") Тогда
				СтавкаЧислом = ОбменСКонтрагентамиПовтИсп.СтавкаНДСЧислом(СтрокаСтавкаНДС);
				ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", СтавкаЧислом, , ТекстОшибки, Истина);
			КонецЕсли;
			
			СуммаНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДСДоКорректировки");
			ЗаполнитьСвойствоXDTO(СведТов, "СумНДСДоКорректировки", СуммаНДСДоКорректировки, , ТекстОшибки);
			
			СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", СуммаНДС, , ТекстОшибки);
			
			СуммаСНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДСДоКорректировки");
			ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДСДоКорректировки", СуммаСНДСДоКорректировки, , ТекстОшибки);
			
			СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", СуммаСНДС, , ТекстОшибки);
			
			ЗаполнитьДопДанныеИзДереваДанных(
									СведТов,
									Товар,
									"ТаблицаТоваров.НомерСтроки",
									СтруктураПараметров,
									ПространствоИменСхемы,
									"Файл.Документ.СвТНО.ТН.Таблица.СвТов",
									"ИнфПолСтр",
									"Товары",
									Строка(Товар.Значение),
									ТекстОшибки);
						
			Таблица.СвТов.Добавить(СведТов);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.КоличествоМест"))
		 ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаБрутто"))
		 ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто"))
		 ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДС"))
		 ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДС"))
		 ИЛИ ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДС")) Тогда
			
			ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
			КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.КоличествоМест");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "КолМестВс", КоличествоМест, , ТекстОшибки);
			
			МассаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаБрутто");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "БруттоВс", МассаБрутто, , ТекстОшибки);
			
			МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоВс", МассаНетто, , ТекстОшибки);
			
			МассаНеттоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНеттоДоКорректировки");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоДоКорректировкиВс", МассаНеттоДоКорректировки, , ТекстОшибки);
			
			СумБезНДСДоКорректировкиВс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДСДоКорректировки");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСДоКорректировкиВс", СумБезНДСДоКорректировкиВс, , ТекстОшибки);
			
			СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СуммаБезНДС, , ТекстОшибки);
			
			СуммаНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДСДоКорректировки");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСДоКорректировкиВс", СуммаНДСДоКорректировки, , ТекстОшибки);
			
			СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДС");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СуммаНДС, , ТекстОшибки);
			
			СуммаСНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДСДоКорректировки");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСДоКорректировкиВс", СуммаСНДСДоКорректировки, , ТекстОшибки);
			
			СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СуммаСНДС, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		КонецЕсли;
		
		КоличествоПорядковыхНомеровЗаписей = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей", Ложь);
		ВсегоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест");
		КоличествоПорядковыхНомеровЗаписейПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
													ДеревоДанных,
													"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью", Ложь);
		ВсегоМестПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью");
		МассаГрузаНеттоПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
											ДеревоДанных,
											"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью");
		МассаГрузаБруттоПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
															"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью");
		МассаГрузаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто");
		МассаГрузаНетто  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто");
		
		Если ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписей) ИЛИ ЗначениеЗаполнено(ВсегоМест)
			ИЛИ ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписейПрописью) ИЛИ ЗначениеЗаполнено(ВсегоМестПрописью)
			ИЛИ ЗначениеЗаполнено(МассаГрузаНеттоПрописью) ИЛИ ЗначениеЗаполнено(МассаГрузаБруттоПрописью)
			ИЛИ ЗначениеЗаполнено(МассаГрузаБрутто) ИЛИ ЗначениеЗаполнено(МассаГрузаНетто) Тогда
		
			ТНОбщ = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.ТНОбщ", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗап", КоличествоПорядковыхНомеровЗаписей, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗапПр", КоличествоПорядковыхНомеровЗаписейПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМест", ВсегоМест, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМестПр", ВсегоМестПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "Нетто", МассаГрузаНетто, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "НеттоПр", МассаГрузаНеттоПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "Брутто", МассаГрузаБрутто, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТНОбщ, "БруттоПр", МассаГрузаБруттоПрописью, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТН, "ТНОбщ", ТНОбщ, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза")) Тогда
			ОтпускГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз", ПространствоИменСхемы);
			ОтпущеноНаСумму = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму");
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпуск", ОтпущеноНаСумму, Истина, ТекстОшибки);
			
			ОтпущеноНаСуммуПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью");
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпускПр", ОтпущеноНаСуммуПрописью, , ТекстОшибки);
			ПриложениеКоличествоЛистов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			                                                      "СведенияПоОтпускуГруза.ПриложениеКоличествоЛистов",
			                                                      Ложь);
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрил", ПриложениеКоличествоЛистов, , ТекстОшибки);
			ПриложениеКоличествоЛистовПрописью = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
													ДеревоДанных,
													"СведенияПоОтпускуГруза.ПриложениеКоличествоЛистовПрописью", Ложь);
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрилПр", ПриложениеКоличествоЛистовПрописью, , ТекстОшибки);
			
			ДатаОтпуска = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска");
			Если ЗначениеЗаполнено(ДатаОтпуска) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ДатаОтпуск", ДатаДД_ММ_ГГГГ(ДатаОтпуска), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ОтпускГруз", ОтпускГруз, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьДопДанныеИзДереваДанных(СвТНО, ДеревоДанных, "", СтруктураПараметров, ПространствоИменСхемы,
			"Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", "Шапка", Неопределено, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Корректировочный документ(ответный титул).
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьКорректировочныйДокументПокупательCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = "PKORDOC";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок"),  Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"НаимОрг",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"ИННЮЛ",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"ИдЭДО",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(
				Документ,
				"ДатаДок",
				ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				Документ,
				"ВремДок",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"),
				Истина,
				ТекстОшибки);
		
		ИдТНО = ПолучитьОбъектТипаCML("Файл.Документ.ИдТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ИдФайлТН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайлТН"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				ИдТНО,
				"ДатаДокТН",
				ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокТН")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ВремДокТН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДокТН"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ИдТНО", ИдТНО, Истина, ТекстОшибки);
		
		СвТНП = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомФорм"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				СвТНП,
				"НомТН",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"),
				,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				СвТНП,
				"ДатаТН",
				ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной")),
				Истина,
				ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза")) Тогда
			ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					ПолучилГруз,
					"ДатаПолуч",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза")),
					Истина,
					ТекстОшибки);
					
			ЗаполнитьСвойствоXDTO(СвТНП, "ПолучилГруз", ПолучилГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			ЗаполнитьДопДанныеИзДереваДанных(СвТНП, СтрокаДопДанных, "", СтруктураПараметров, ПространствоИменСхемы,
				"Файл.Документ.СвТНП.ИнфПол", "ТекстИнф", "Шапка", Неопределено, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНП", СвТНП, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Передача товаров данные продавца.
//
// Параметры:
//  ДеревоДокумента - дерево значений - данные для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьПередачаТоваровПродавецCML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЗначениеРеквизитаДерева(ДеревоДанных,"ИдФайл"));
	
	ПространствоИменСхемы = ПространствоИменПередачаТоваровПродавец();
	НаименованиеОтправителя = "СвОЭДОтпр";
	НаименованиеИД = "ИдЭДО";
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаДерева(ДеревоДанных,"ПолноеИмяФайла"));
		
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЗначениеРеквизитаДерева(ДеревоДанных,"ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЗначениеРеквизитаДерева(ДеревоДанных, "ВерсПрог"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЗначениеРеквизитаДерева(ДеревоДанных,"ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЗначениеРеквизитаДерева(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", ЗначениеРеквизитаДерева(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор." + НаименованиеОтправителя, ПространствоИменСхемы);
			НаимОрг = ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
			ИННЮЛ = ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
			ИдЭДО = ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, НаименованиеИД, ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, НаименованиеОтправителя, СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЗначениеРеквизитаДерева(ДеревоДанных,"КНД"), Истина, ТекстОшибки);
		ДатаДок = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных,"ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", ЗначениеРеквизитаДерева(ДеревоДанных,"ВремДок"), Истина, ТекстОшибки);
		
		// Поля уникальные для документа "Передача товаров".
		НаименованиеПродавца = НаименованиеУчастникаЭДО(ДеревоДанных,"Поставщик");
		ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", НаименованиеПродавца, Истина, ТекстОшибки);
		
		НаименованиеДокумента = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.НаимДок", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(НаименованиеДокумента, "ПоФактХЖ", НаименованиеФактаПередачаТоваров(), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(НаименованиеДокумента, "НаимДокОпр", НаименованиеДокументаПередачаТоваров(), Истина, ТекстОшибки);
		
		СведенияПродавца = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияПродавца, "НаимДок", НаименованиеДокумента, Истина, ТекстОшибки);
	
		НомерДатаДокумента = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок", ПространствоИменСхемы);
		НомерНакладной = ЗначениеРеквизитаДерева(ДеревоДанных, "НомерТоварнойНакладной");
		ЗаполнитьСвойствоXDTO(НомерДатаДокумента, "НомДокПТ", НомерНакладной, Истина, ТекстОшибки);
		
		ДатаНакладной = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаТоварнойНакладной"));
		ЗаполнитьСвойствоXDTO(НомерДатаДокумента, "ДатаДокПТ", ДатаНакладной, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияПродавца, "ИдентДок", НомерДатаДокумента);
		
		НомерИсправления = ЗначениеРеквизитаДерева(ДеревоДанных, "НомерИсправления");
		ДатаИсправления = ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаИсправления");
		Если ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления) Тогда
			НомерДатаИсправления = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.ИспрДокПТ", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(НомерДатаИсправления, "НомИспрДокПТ", НомерИсправления, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НомерДатаИсправления, "ДатаИспрДокПТ", ДатаДД_ММ_ГГГГ(ДатаИсправления), Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СведенияПродавца, "ИспрДокПТ", НомерДатаИсправления);
			
		КонецЕсли;
		
		ДенежныеПоказатели = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм", ПространствоИменСхемы);
		КодВалюты = ЗначениеРеквизитаДерева(ДеревоДанных, "ВалютаКод");
		ЗаполнитьСвойствоXDTO(ДенежныеПоказатели, "КодОКВ", КодВалюты, Истина, ТекстОшибки);
		НаименованиеВалюты = ЗначениеРеквизитаДерева(ДеревоДанных, "ВалютаНаименование");
		ЗаполнитьСвойствоXDTO(ДенежныеПоказатели, "НаимОКВ", НаименованиеВалюты, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияПродавца, "ДенИзм", ДенежныеПоказатели, Истина, ТекстОшибки);
			
		СведенияСделки = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1", ПространствоИменСхемы);
		
		ВидОперации = ЗначениеРеквизитаДерева(ДеревоДанных, "ВидОперации");
		ЗаполнитьСвойствоXDTO(СведенияСделки, "ВидОперации", XMLСтрока(ВидОперации), , ТекстОшибки);
		
		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ГрузоотправительЗаполнен = ЗаполнитьДанныеУчастникаФНС(Грузоотправитель, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Грузоотправитель");
		Если ГрузоотправительЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СведенияСделки, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);
		КонецЕсли;
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ГрузополучательЗаполнен = ЗаполнитьДанныеУчастникаФНС(Грузополучатель, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Грузополучатель");
		Если ГрузополучательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СведенияСделки, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		КонецЕсли;
		
		Продавец = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ПродавецЗаполнен = ЗаполнитьДанныеУчастникаФНС(Продавец, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Поставщик");
		Если ПродавецЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СведенияСделки, "Продавец", Продавец, Истина, ТекстОшибки);
		КонецЕсли;
		
		Покупатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ПокупательЗаполнен = ЗаполнитьДанныеУчастникаФНС(Покупатель, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Плательщик");
		Если ПокупательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СведенияСделки, "Покупатель", Покупатель, Истина, ТекстОшибки);
		КонецЕсли;
		
		ДеревоДанныхОснование = ЗначениеТаблицыДереваЭД(ДеревоДанных, "Основание");
		Если ЗначениеЗаполнено(ДеревоДанныхОснование) Тогда
			Для Каждого СтрокаДереваОснование Из ДеревоДанныхОснование.Строки Цикл
				Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание", ПространствоИменСхемы);
				
				ДокОснованиеНаименование = ЗначениеРеквизитаДерева(СтрокаДереваОснование, "Основание.НомерСтроки.ДокОснованиеНаименование");
				Если Не ЗначениеЗаполнено(ДокОснованиеНаименование) Тогда
					ДокОснованиеНаименование = "-";
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", ДокОснованиеНаименование, Истина, ТекстОшибки);
				
				НомерОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "Основание.НомерСтроки.ДокОснованиеНомер");
				ЗаполнитьСвойствоXDTO(Основание, "НомОсн", НомерОснования, , ТекстОшибки);
				
				ДатаОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "Основание.НомерСтроки.ДокОснованиеДата");
				Если ЗначениеЗаполнено(ДатаОснования) Тогда
					ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаДД_ММ_ГГГГ(ДатаОснования), , ТекстОшибки);
				КонецЕсли;
				
				ДопСведенияОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "Основание.НомерСтроки.ДокОснованиеДопСведения");
				ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", ДопСведенияОснования, , ТекстОшибки);
				
				СведенияСделки.Основание.Добавить(Основание);
				
			КонецЦикла;
				
		Иначе
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", "-", Истина, ТекстОшибки);
			СведенияСделки.Основание.Добавить(Основание);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(СведенияПродавца, "СодФХЖ1", СведенияСделки, Истина, ТекстОшибки);
		
		СведенияДокумента = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияДокумента, "СвДокПТПр", СведенияПродавца, Истина, ТекстОшибки);
		
		СведенияОТоварах = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СодФХЖ2", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			СведТов =  ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.Значение, Истина, ТекстОшибки);
			
			Реквизит = Строка(ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмерения"));
			ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", Реквизит, Истина, ТекстОшибки);
			МассаНетто = ?(ЗначениеЗаполнено(ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто")),
							ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто"),
							0);
			ЗаполнитьСвойствоXDTO(СведТов, "НеттоПередано", МассаНетто, Истина, ТекстОшибки);
			
			НаименованиеНоменклатуры = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", НаименованиеНоменклатуры, , ТекстОшибки);
			
			БазоваяЕдиницаКод = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод");
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", БазоваяЕдиницаКод, , ТекстОшибки);
			
			НаименованиеХарактеристики = ЗначениеРеквизитаДерева(Товар,
			                                                      "ТаблицаТоваров.НомерСтроки.НаименованиеХарактеристики");
			ЗаполнитьСвойствоXDTO(СведТов, "ХарактерТов", НаименованиеХарактеристики, , ТекстОшибки);
			
			Сорт = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.Сорт");
			ЗаполнитьСвойствоXDTO(СведТов, "СортТов", Сорт, , ТекстОшибки);
			
			Артикул = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.Артикул");
			ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Артикул, , ТекстОшибки);
			
			КодТовара = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.КодТовара");
			ЗаполнитьСвойствоXDTO(СведТов, "КодТов", КодТовара, , ТекстОшибки);
			
			ВидУпаковки = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.ВидУпаковки");
			ЗаполнитьСвойствоXDTO(СведТов, "ВидУпак", ВидУпаковки, , ТекстОшибки);
			
			КоличествоВОдномМесте = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоВОдномМесте");
			ЗаполнитьСвойствоXDTO(СведТов, "Место", КоличествоВОдномМесте, , ТекстОшибки);
			
			КоличествоМест = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
			ЗаполнитьСвойствоXDTO(СведТов, "КолМест", КоличествоМест, , ТекстОшибки);
			
			МассаБрутто = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.МассаБрутто");
			ЗаполнитьСвойствоXDTO(СведТов, "Брутто", МассаБрутто, , ТекстОшибки);
			
			МассаНетто = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто");
			ЗаполнитьСвойствоXDTO(СведТов, "НеттоПередано", МассаНетто, , ТекстОшибки);
			
			Цена = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.Цена");
			ЗаполнитьСвойствоXDTO(СведТов, "Цена", Цена, , ТекстОшибки);
			
			СуммаБезНДС = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СтБезНДС", СуммаБезНДС, , ТекстОшибки);
			
			СтавкаНДС = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
			ПеречислениеСтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСПеречисление(СтавкаНДС);
			Если ЗначениеЗаполнено(ПеречислениеСтавкаНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "НалСт", ПеречислениеСтавкаНДС, , ТекстОшибки);
			КонецЕсли;
			
			СуммаСНДС = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СтУчНДС", СуммаСНДС, Истина, ТекстОшибки);
			
			СуммаНДС = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", СуммаНДС, , ТекстОшибки);
			
			ЗаполнитьДопДанныеТаблицыПередачиТоваров(СведТов, Товар, СтруктураПараметров, ПространствоИменСхемы, ТекстОшибки);
			
			СведенияОТоварах.СвТов.Добавить(СведТов);
			
		КонецЦикла;
		
		// Заполняем Итоги табличной части
		КоличествоМест = ЗначениеРеквизитаДерева(ДеревоДанных, "ВсегоПоНакладной.КоличествоМест");
		МассаБрутто = ЗначениеРеквизитаДерева(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто");
		МассаНетто = ЗначениеРеквизитаДерева(ДеревоДанных, "ВсегоПоНакладной.МассаНетто");
		СуммаБезНДС = ЗначениеРеквизитаДерева(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС");
		СуммаНДС = ЗначениеРеквизитаДерева(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС");
		СуммаСНДС = ЗначениеРеквизитаДерева(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС");
		Если ЗначениеЗаполнено(КоличествоМест) 
			Или ЗначениеЗаполнено(МассаБрутто)
			Или ЗначениеЗаполнено(МассаНетто)
			Или ЗначениеЗаполнено(СуммаБезНДС)
			Или ЗначениеЗаполнено(СуммаНДС) Тогда
			
			Итоги = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СодФХЖ2.Всего", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Итоги, "КолМестВс", КоличествоМест, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Итоги, "БруттоВс", МассаБрутто, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Итоги, "НеттоВс", МассаНетто, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Итоги, "СтБезНДСВс", СуммаБезНДС, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Итоги, "СумНДСВс", СуммаНДС, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Итоги, "СтУчНДСВс", СуммаСНДС, Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СведенияОТоварах, "Всего", Итоги, , ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(СведенияДокумента, "СодФХЖ2", СведенияОТоварах, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "СвДокПТПрКроме", СведенияДокумента, Истина, ТекстОшибки);

		СведенияОПередаче = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3", ПространствоИменСхемы);
		
		СодержаниеОперации = СодержаниеОперацииПередачаТоваров();
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "СодОпер", СодержаниеОперации, ,ТекстОшибки);
		
		КоличествоЛистов = ЗначениеРеквизитаДерева(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей");
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "КолПрил", КоличествоЛистов, ,ТекстОшибки);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			ЗаполнитьДопДанныеШапкиДокумента(СведенияОПередаче, ДеревоДанных, ПространствоИменСхемы, СтруктураПараметров, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска")) Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска"));
			ЗаполнитьСвойствоXDTO(СведенияОПередаче, "ДатаОтпуск", Реквизит, , ТекстОшибки);
		КонецЕсли;
		
		// Заполняем таблицу ТранспортнаяНакладная
		ТранспортнаяНакладнаяДеревоДанных = ЗначениеТаблицыДереваЭД(ДеревоДанных, "ТранспортнаяНакладная");
		Если ЗначениеЗаполнено(ТранспортнаяНакладнаяДеревоДанных) Тогда
			
			Для Каждого СтрокаТранспортнаяНакладная Из ТранспортнаяНакладнаяДеревоДанных.Строки Цикл
				
				НомерНакладной = ЗначениеРеквизитаДерева(СтрокаТранспортнаяНакладная, "ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер");
				ДатаНакладной = ЗначениеРеквизитаДерева(СтрокаТранспортнаяНакладная, "ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата");
				Если ЗначениеЗаполнено(НомерНакладной) И ЗначениеЗаполнено(ДатаНакладной) Тогда
					ТранспортнаяНакладная = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.ТранНакл", ПространствоИменСхемы);
					ЗаполнитьСвойствоXDTO(ТранспортнаяНакладная, "НомТранНакл", НомерНакладной, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТранспортнаяНакладная, "ДатаТранНакл", ДатаДД_ММ_ГГГГ(ДатаНакладной), , ТекстОшибки);
					СведенияОПередаче.ТранНакл.Добавить(ТранспортнаяНакладная);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьСведенияОЛицеПередавшемТовар(ДеревоДанных, СведенияОПередаче, ПространствоИменСхемы, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ3", СведенияОПередаче, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", ДолжностныеОбязанности(), Истина, ТекстОшибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		Документ.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат формирования файла ЭД Передача товаров данные покупателя.
//
// Параметры:
//  ДеревоДокумента - дерево значений - данные для формирования.
//
// Возвращаемое значение:
//  Булево - результат корректного формирования.
//
Функция СформироватьПередачаТоваровПокупательCML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЗначениеРеквизитаДерева(ДеревоДанных,"ИдФайл"));
	
	ПространствоИменСхемы = "TORGPOK";
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаДерева(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЗначениеРеквизитаДерева(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЗначениеРеквизитаДерева(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЗначениеРеквизитаДерева(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СведенияУчастника = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СведенияУчастника, "ИдОтпр", ЗначениеРеквизитаДерева(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияУчастника, "ИдПол", ЗначениеРеквизитаДерева(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СведенияОтправителя = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					СведенияОтправителя,
					"НаимОрг",
					ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СведенияОтправителя,
					"ИННЮЛ",
					ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СведенияОтправителя,
					"ИдЭДО",
					ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияУчастника, "СвОЭДОтпр", СведенияОтправителя, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СведенияУчастника, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		
		НаименованиеСубъекта = ЗначениеРеквизитаДерева(ДеревоДанных, "НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", НаименованиеСубъекта, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЗначениеРеквизитаДерева(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		ДатаДок = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПок", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПок", ЗначениеРеквизитаДерева(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		
		ИнформацияПродавца = ПолучитьОбъектТипаCML("Файл.Документ.ИдДокПТПр", ПространствоИменСхемы);
		ИмяФайлаПродавца = ЗначениеРеквизитаДерева(ДеревоДанных, "ИмяФайлаПродавца");
		ЗаполнитьСвойствоXDTO(ИнформацияПродавца, "ИдФайлИнфПр", ИмяФайлаПродавца, Истина, ТекстОшибки);
		ДатаДокТН = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаДокТН"));
		ЗаполнитьСвойствоXDTO(ИнформацияПродавца, "ДатаФайлИнфПр", ДатаДокТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИнформацияПродавца, "ВремФайлИнфПр", ЗначениеРеквизитаДерева(ДеревоДанных, "ВремДокТН"), Истина, ТекстОшибки);
		
		Подписи = ЗначениеРеквизитаДерева(ДеревоДанных, "ПолученныеЭП");
		Если Не ЗначениеЗаполнено(Подписи) Тогда
			Подписи = Новый Массив;
			Подписи.Добавить("---");
		КонецЕсли;
		Для Каждого Подпись Из Подписи Цикл
			ИнформацияПродавца.ЭП.Добавить(Подпись);
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Документ, "ИдДокПТПр", ИнформацияПродавца, Истина, ТекстОшибки);
		
		СведенияОбОперации = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияОбОперации, "НаимДокОпрПр", НаименованиеДокументаПередачаТоваров(), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияОбОперации, "НомДокПТПр", ЗначениеРеквизитаДерева(ДеревоДанных, "НомерТоварнойНакладной"), , ТекстОшибки);
		ДатаТоварнойНакладной = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаТоварнойНакладной"));
		ЗаполнитьСвойствоXDTO(СведенияОбОперации, "ДатаДокПТПр", ДатаТоварнойНакладной, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаПолученияГруза")) Тогда
			ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4.ГрузПолучил", ПространствоИменСхемы);
			ДатаПолучения = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаПолученияГруза"));
			ЗаполнитьСвойствоXDTO(ПолучилГруз, "ДатаПолуч", ДатаПолучения, Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(ПолучилГруз, "СодОпер", СодержаниеОперацииПередачаТоваров(), , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СведенияОбОперации, "ГрузПолучил", ПолучилГруз, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ4", СведенияОбОперации, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", ДолжностныеОбязанности(), Истина, ТекстОшибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		Документ.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат формирования файла ЭД Передача работ данные исполнителя.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - данные для формирования.
//
// Возвращаемое значение:
//  Булево - признак корректного формирования.
//
Функция СформироватьПередачаРаботИсполнительCML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЗначениеРеквизитаДерева(ДеревоДанных,"ИдФайл"));
	
	ПространствоИменСхемы = ПространствоИменПередачаРаботИсполнитель();
	НаименованиеОтправителя = "СвОЭДОтпр";
	НаименованиеИД = "ИдЭДО";
	
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаДерева(ДеревоДанных,"ПолноеИмяФайла"));
		
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЗначениеРеквизитаДерева(ДеревоДанных,"ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЗначениеРеквизитаДерева(ДеревоДанных, "ВерсПрог"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЗначениеРеквизитаДерева(ДеревоДанных,"ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЗначениеРеквизитаДерева(ДеревоДанных, "ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", ЗначениеРеквизитаДерева(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор." + НаименованиеОтправителя, ПространствоИменСхемы);
			НаимОрг = ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
			ИННЮЛ = ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
			ИдЭДО = ЗначениеРеквизитаДерева(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, НаименованиеИД, ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, НаименованиеОтправителя, СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЗначениеРеквизитаДерева(ДеревоДанных,"КНД"), Истина, ТекстОшибки);
		ДатаДок = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных,"ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфИсп", ДатаДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремИнфИсп", ЗначениеРеквизитаДерева(ДеревоДанных,"ВремДок"), Истина, ТекстОшибки);
		
		// Поля уникальные для документа "Передача товаров".
		НаименованиеПродавца = НаименованиеУчастникаЭДО(ДеревоДанных,"Исполнитель");
		ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", НаименованиеПродавца, Истина, ТекстОшибки);
		
		НаименованиеДокумента = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.НаимДок", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(НаименованиеДокумента, "ПоФактХЖ", НаименованиеФактаПередачаРабот(), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(НаименованиеДокумента, "НаимДокОпр", НаименованиеДокументаПередачаРабот(), Истина, ТекстОшибки);
		
		СведенияДокумента = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияДокумента, "НаимДок", НаименованиеДокумента, Истина, ТекстОшибки);
	
		НомерДатаДокумента = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.ИдентДок", ПространствоИменСхемы);
		НомерАкта = ЗначениеРеквизитаДерева(ДеревоДанных, "НомерАкта");
		ЗаполнитьСвойствоXDTO(НомерДатаДокумента, "НомДокПРУ", НомерАкта, Истина, ТекстОшибки);
		
		ДатаАкта = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаАкта"));
		ЗаполнитьСвойствоXDTO(НомерДатаДокумента, "ДатаДокПРУ", ДатаАкта, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияДокумента, "ИдентДок", НомерДатаДокумента);
		
		НомерИсправления = ЗначениеРеквизитаДерева(ДеревоДанных, "НомерИсправления");
		ДатаИсправления = ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаИсправления");
		Если ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления) Тогда
			НомерДатаИсправления = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.ИспрДокПРУ", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(НомерДатаИсправления, "НомИспрДокПРУ", НомерИсправления, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НомерДатаИсправления, "ДатаИспрДокПРУ", ДатаДД_ММ_ГГГГ(ДатаИсправления), Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СведенияДокумента, "ИспрДокПРУ", НомерДатаИсправления);
			
		КонецЕсли;
		
		ДенежныеПоказатели = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.ДенИзм", ПространствоИменСхемы);
		КодВалюты = ЗначениеРеквизитаДерева(ДеревоДанных, "ВалютаКод");
		
		ЗаполнитьСвойствоXDTO(ДенежныеПоказатели, "КодОКВ", КодВалюты, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДенежныеПоказатели, "НаимОКВ", КодВалюты, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияДокумента, "ДенИзм", ДенежныеПоказатели, Истина, ТекстОшибки);
		
		СведенияСделки = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1", ПространствоИменСхемы);
		
		ЗаголовокОперации = ЗначениеРеквизитаДерева(ДеревоДанных, "Заголовок");
		ЗаполнитьСвойствоXDTO(СведенияСделки, "ЗагСодОпер", ЗаголовокОперации, , ТекстОшибки);
		
		ВидОперации = ЗначениеРеквизитаДерева(ДеревоДанных, "ВидОперации");
		ЗаполнитьСвойствоXDTO(СведенияСделки, "ВидОперации",  XMLСтрока(ВидОперации), , ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИсполнительЗаполнен = ЗаполнитьДанныеУчастникаФНС(Исполнитель, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Исполнитель");
		Если ИсполнительЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СведенияСделки, "Исполнитель", Исполнитель, , ТекстОшибки);
		КонецЕсли;
		
		Заказчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ЗаказчикЗаполнен = ЗаполнитьДанныеУчастникаФНС(Заказчик, ДеревоДанных, ТекстОшибки,
			ПространствоИменСхемы, "Заказчик");
		Если ЗаказчикЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СведенияСделки, "Заказчик", Заказчик, , ТекстОшибки);
		КонецЕсли;
		
		Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.Основание", ПространствоИменСхемы);
		НаименованиеОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "ДокОснованиеНаименование", Ложь);
		Если ЗначениеЗаполнено(НаименованиеОснования) Тогда
			ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", НаименованиеОснования, Истина, ТекстОшибки);
			НомерОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "ДокОснованиеНомер");
			Если ЗначениеЗаполнено(НомерОснования) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "НомОсн", НомерОснования, Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(Основание, "НомОсн", "НеУказан", Истина, ТекстОшибки);
			КонецЕсли;
			
			ДатаОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "ДокОснованиеДата");
			Если ЗначениеЗаполнено(ДатаОснования) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаДД_ММ_ГГГГ(ДатаОснования), , ТекстОшибки);
			КонецЕсли;
			
			ДопСведенияОснования = ЗначениеРеквизитаДерева(ДеревоДанных, "ДокОснованиеДопСведения");
			ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", ДопСведенияОснования, , ТекстОшибки);
			
		Иначе
			ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", "-", Истина, ТекстОшибки);
		КонецЕсли;
		СведенияСделки.Основание.Добавить(Основание);
		
		СведенияОРаботах = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.ОписРабот", ПространствоИменСхемы);
		
		СтрокаТаблицаРабот = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
		
		Для Каждого Работа Из СтрокаТаблицаРабот.Строки Цикл
			
			ОписаниеРаботы =  ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.ОписРабот.Работа", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "Номер", Работа.Значение, Истина, ТекстОшибки);
			
			НаименованиеЕдиницы = Строка(ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование"));
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "НаимЕдИзм", НаименованиеЕдиницы, ,ТекстОшибки);
			
			НаименованиеНоменклатуры = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "НаимРабот", НаименованиеНоменклатуры, , ТекстОшибки);
			
			ОписаниеНоменклатуры = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.Описание");
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "Описание", ОписаниеНоменклатуры, , ТекстОшибки);
			
			БазоваяЕдиницаКод = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияКод");
			// Требования стандарта: Если код ОКЕИ не заполнен передавать вместо него "0000".
			Если Не ЗначениеЗаполнено(БазоваяЕдиницаКод) Тогда
				БазоваяЕдиницаКод = "0000";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "ОКЕИ", БазоваяЕдиницаКод, , ТекстОшибки);
			
			МассаБрутто = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.Количество");
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "Количество", МассаБрутто, , ТекстОшибки);
			
			Цена = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.Цена");
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "Цена", Цена, , ТекстОшибки);
			
			// Сведения о стоимости работ.
			СуммаБезНДС = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "СтоимБезНДС", СуммаБезНДС, , ТекстОшибки);
			
			СтавкаНДС = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
			ПеречислениеСтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСПеречисление(СтавкаНДС);
			Если ЗначениеЗаполнено(ПеречислениеСтавкаНДС) Тогда
				ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "НалСт", ПеречислениеСтавкаНДС, , ТекстОшибки);
			КонецЕсли;
			
			СуммаСНДС = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "СтоимУчНДС", СуммаСНДС, , ТекстОшибки);
			
			СуммаНДС = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.СуммаНДС");
			ЗаполнитьСвойствоXDTO(ОписаниеРаботы, "СумНДС", СуммаНДС, , ТекстОшибки);
			
			ЗаполнитьДопДанныеТаблицыПередачиТоваров(ОписаниеРаботы, Работа, СтруктураПараметров, ПространствоИменСхемы, ТекстОшибки);
			
			СведенияОРаботах.Работа.Добавить(ОписаниеРаботы);
			
		КонецЦикла;
		
		// Заполняем Итоги табличной части.
		НачалоРабот = ЗначениеРеквизитаДерева(ДеревоДанных, "ОписаниеУслуги.НачалоРабот");
		КонецРабот = ЗначениеРеквизитаДерева(ДеревоДанных, "ОписаниеУслуги.КонецРабот");
		СуммаБезНДС = ЗначениеРеквизитаДерева(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого");
		СуммаНДС = ЗначениеРеквизитаДерева(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого");
		СуммаСНДС = ЗначениеРеквизитаДерева(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого");
		
		Если ЗначениеЗаполнено(НачалоРабот) 
			Или ЗначениеЗаполнено(КонецРабот)
			Или ЗначениеЗаполнено(СуммаБезНДС)
			Или ЗначениеЗаполнено(СуммаНДС)
			Или ЗначениеЗаполнено(СуммаСНДС) Тогда
			
			ЗаполнитьСвойствоXDTO(СведенияОРаботах, "НачРабот", ДатаДД_ММ_ГГГГ(НачалоРабот), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОРаботах, "КонРабот", ДатаДД_ММ_ГГГГ(КонецРабот), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОРаботах, "СтБезНДСИт", СуммаБезНДС, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОРаботах, "СумНДСИт", СуммаНДС, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведенияОРаботах, "СтУчНДСИт", СуммаСНДС, , ТекстОшибки);
			
		КонецЕсли;
		
		СведенияСделки.ОписРабот.Добавить(СведенияОРаботах);
		
		ЗаполнитьСвойствоXDTO(СведенияДокумента, "СодФХЖ1", СведенияСделки, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "СвДокПРУ", СведенияДокумента, Истина, ТекстОшибки);

		СведенияОПередаче = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2", ПространствоИменСхемы);
		
		СодержаниеОперации = СодержаниеОперацииПередачаТоваров();
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "СодОпер", СодержаниеОперации, ,ТекстОшибки);
		
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных <> Неопределено Тогда
			ЗаполнитьДопДанныеШапкиДокумента(СведенияОПередаче, ДеревоДанных, ПространствоИменСхемы, СтруктураПараметров, ТекстОшибки);
		КонецЕсли;
		
		ДатаИсполнения = ЗначениеРеквизитаДерева(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения");
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "ДатаПер", ДатаДД_ММ_ГГГГ(ДатаИсполнения), ,ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ2", СведенияОПередаче, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолнПодп", ДолжностныеОбязанности(), Истина, ТекстОшибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		Документ.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Передача работ заказчик.
//
// Параметры:
//  ДеревоДокумента - дерево значений - данные для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьПередачаРаботЗаказчикCML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	ПространствоИменСхемы = "RUZAK";
	ТекстОшибки = "";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЗначениеРеквизитаДерева(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЗначениеРеквизитаДерева(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЗначениеРеквизитаДерева(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ЗначениеРеквизитаДерева(ДеревоДанных,"ИдОтпр"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", ЗначениеРеквизитаДерева(ДеревоДанных, "ИдПок"), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			Реквизит = ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЗначениеРеквизитаДерева(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		Реквизит = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаДок"));
		ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфЗак", Реквизит, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремИнфЗак", ЗначениеРеквизитаДерева(ДеревоДанных, "ВремДок"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "КНД", ЗначениеРеквизитаДерева(ДеревоДанных, "КНД"), Истина, ТекстОшибки);
		
		НаименованиеСубъекта = ЗначениеРеквизитаДерева(ДеревоДанных, "НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", НаименованиеСубъекта, Истина, ТекстОшибки);
		
		ДанныеДокумента = ПолучитьОбъектТипаCML("Файл.Документ.ИдДокПРУИсп", ПространствоИменСхемы);
		
		ИмяФайлаПродавца = ЗначениеРеквизитаДерева(ДеревоДанных, "ИмяФайлаПродавца");
		ЗаполнитьСвойствоXDTO(ДанныеДокумента, "ИдФайлИнфИсп", ИмяФайлаПродавца, Истина, ТекстОшибки);
		
		Реквизит = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "ДатаДокАктИ"));
		ЗаполнитьСвойствоXDTO(ДанныеДокумента, "ДатаФайлИнфИсп", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЗначениеРеквизитаДерева(ДеревоДанных, "ВремДокАктИ");
		ЗаполнитьСвойствоXDTO(ДанныеДокумента, "ВремФайлИнфИсп", Реквизит, Истина, ТекстОшибки);
		
		Подписи = ЗначениеРеквизитаДерева(ДеревоДанных, "ПолученныеЭП");
		Если Не ЗначениеЗаполнено(Подписи) Тогда
			Подписи = Новый Массив;
			Подписи.Добавить("---");
		КонецЕсли;
		Для Каждого Подпись Из Подписи Цикл
			ДанныеДокумента.ЭП.Добавить(Подпись);
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Документ, "ИдДокПРУИсп", ДанныеДокумента, Истина, ТекстОшибки);
		
		СведенияОПередаче = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3", ПространствоИменСхемы);
		
		ПервичныйДокумент = ЗначениеРеквизитаДерева(ДеревоДанных, "НаимПервДок");
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "НаимДокОпрИсп", ПервичныйДокумент, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "НомДокПРУИсп", ЗначениеРеквизитаДерева(ДеревоДанных, "НомерАкт"), , ТекстОшибки);
		ДатаДокумента = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкт"));
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "ДатаДокПРУИсп", ДатаДокумента, Истина, ТекстОшибки);
		
		ДанныеОПринятии = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.РезПринял", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЗначениеРеквизитаДерева(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа")) Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа"));
			ЗаполнитьСвойствоXDTO(ДанныеОПринятии, "ДатаПрием", Реквизит, , ТекстОшибки);
		КонецЕсли;
		
		Претензия = ЗначениеРеквизитаДерева(ДеревоДанных, "СведенияПоВыполнениюУслуг.Претензия");
		Если Не ЗначениеЗаполнено(Претензия) Тогда
			Претензия = НСтр("ru ='Результаты работ (оказанных услуг) приняты без претензий'");
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ДанныеОПринятии, "СодОпер", Претензия, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "РезПринял", ДанныеОПринятии, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ3", СведенияОПередаче, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Статус", 1, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", ДолжностныеОбязанности(), Истина, ТекстОшибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИменСхемы, ТекстОшибки);
		
		Документ.Подписант.Добавить(Подписант);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЗначениеРеквизитаДерева(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЗначениеРеквизитаДерева(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Устаревшие - Формирование ЭД ФНС из документов БД

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьСчетФактуруCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "SFAKT";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   СтруктураПараметров.ИдФайл,  Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СтруктураПараметров.ИдОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  СтруктураПараметров.ИдПок,  Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		
		СвСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ),Истина,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "КодОКВ", СтруктураПараметров.КодВалюты, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.НомерИсправленияИсходногоСчФ)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаИсправленияИсходногоСчФ) Тогда
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", СтруктураПараметров.НомерИсправленияИсходногоСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаИсправленияИсходногоСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвСчФакт,"ИспрСчФ", ИспрСчФ,,ТекстОшибки);
		КонецЕсли;
		
		Продавец = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(Продавец, СтруктураПараметров.Организация, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПрод", Продавец, Истина, ТекстОшибки);
		КонецЕсли;
		
		Покупатель = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(Покупатель, СтруктураПараметров.Контрагент, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПокуп", Покупатель, Истина, ТекстОшибки);
		КонецЕсли;
		
		ДанныеГрузоотправителя = "";
		Если НЕ СтруктураПараметров.ТолькоУслуги И СтруктураПараметров.Свойство("СведенияОГрузоотправителе", ДанныеГрузоотправителя)
			И ТипЗнч(ДанныеГрузоотправителя) = Тип("Структура") Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);
			ОнЖе = "";
			Если ДанныеГрузоотправителя.Свойство("ОнЖе", ОнЖе) И ОнЖе = Истина Тогда // "=" - т.к. тип ОнЖе может быть не булево
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", НСтр("ru = 'он же'"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
			Иначе
				Грузоотправитель = Неопределено;
				ГрузПолучил = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
				Если ДанныеГрузоотправителя.Свойство("Грузоотправитель", Грузоотправитель)
					И ЗаполнитьДанныеГрузоотправителяПолучателяЭСФCML(ГрузПолучил, Грузоотправитель, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", ГрузПолучил, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Грузополучатель = Неопределено;
		ГрузПолучил = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
		Если НЕ СтруктураПараметров.ТолькоУслуги И СтруктураПараметров.Свойство("Грузополучатель", Грузополучатель)
			И ЗаполнитьДанныеГрузоотправителяПолучателяЭСФCML(ГрузПолучил, Грузополучатель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузПолуч", ГрузПолучил, Истина, ТекстОшибки);
		КонецЕсли;
		
		ПлатежныеДокументы = Неопределено;
		Если СтруктураПараметров.Свойство("ПлатежныеДокументы", ПлатежныеДокументы) И ТипЗнч(ПлатежныеДокументы) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаПлатежки Из ПлатежныеДокументы Цикл
				СвПРД = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.СвПРД", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвПРД, "НомерПРД", СтрокаПлатежки.НомерПРД, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвПРД, "ДатаПРД", ДатаДД_ММ_ГГГГ(СтрокаПлатежки.ДатаПРД), Истина, ТекстОшибки);
				СвСчФакт.СвПРД.Добавить(СвПРД);
			КонецЦикла
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвСчФакт, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", СвСчФакт, Истина, ТекстОшибки);
		ТаблСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);
		
		Для Каждого Товар Из СтруктураПараметров.ТаблицаТоваров Цикл
			КолонкиТЗ = СтруктураПараметров.ТаблицаТоваров.Колонки;
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", Товар.Сумма, Истина, ТекстОшибки);
			
			Акциз = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.Акциз", ПространствоИменСхемы);
			Если НЕ ЗначениеЗаполнено(Товар.Акциза) Тогда
				ЗначениеАкциза = НСтр("ru ='без акциза'");
			Иначе
				Если ТипЗнч(Товар.Акциза) = Тип("Число") Тогда
					ЗначениеАкциза = Формат(Товар.Акциза, "ЧДЦ=2; ЧРД=.; ЧГ=");
				Иначе
					ЗначениеАкциза = СокрЛП(Товар.Акциза);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Акциз, "СумАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Акциз", Акциз, Истина, ТекстОшибки);
			
			НалСт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.НалСт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСт, "НалСтВел", Товар.СтавкаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСт, "НалСтТип", Товар.СтавкаНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСт", НалСт, Истина, ТекстОшибки);
			
			Если КолонкиТЗ.Найти("ЕдиницаИзмеренияКод") <> Неопределено И ЗначениеЗаполнено(Товар.ЕдиницаИзмеренияКод) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ЕдиницаИзмеренияКод, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("Количество") <> Неопределено И ЗначениеЗаполнено(Товар.Количество) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КолТов", Товар.Количество, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("Цена") <> Неопределено И ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТов", Товар.Цена, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("СуммаБезНДС") <> Неопределено И ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", Товар.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			
			Если КолонкиТЗ.Найти("КодСтраныПроисхождения") <> Неопределено Тогда
				Если ТипЗнч(Товар.КодСтраныПроисхождения) = Тип("Массив") Тогда
					Для Каждого КодСтраны Из Товар.КодСтраныПроисхождения Цикл
						СведТов.КодПроисх.Добавить(КодСтраны);
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(Товар.КодСтраныПроисхождения) Тогда
					СведТов.КодПроисх.Добавить(Товар.КодСтраныПроисхождения);
				КонецЕсли;
			КонецЕсли;
			
			СумаНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если ВРег(СокрЛП(Товар.СтавкаНДС)) = ВРег(НСтр("ru = 'без НДС'")) Тогда
				ЗаполнитьСвойствоXDTO(СумаНДСТип, "СумНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
			Иначе
				Если Товар.СуммаНДС = 0 Тогда
					ЗаполнитьСвойствоXDTO(СумаНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
				Иначе
					ЗаполнитьСвойствоXDTO(СумаНДСТип, "СумНДС", Формат(Товар.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНал", СумаНДСТип, Истина, ТекстОшибки);
			
			Если КолонкиТЗ.Найти("НомерТаможеннойДекларации") <> Неопределено Тогда
				Если ТипЗнч(Товар.НомерТаможеннойДекларации) = Тип("Массив") Тогда
					Для Каждого ТД Из Товар.НомерТаможеннойДекларации Цикл
						СведТов.НомерТД.Добавить(ТД);
					КонецЦикла;
				ИначеЕсли ТипЗнч(Товар.НомерТаможеннойДекларации) = Тип("Строка") И ЗначениеЗаполнено(Товар.НомерТаможеннойДекларации) Тогда
					СведТов.НомерТД.Добавить(Товар.НомерТаможеннойДекларации);
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
				Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТаблСчФакт.СведТов.Добавить(СведТов);
		КонецЦикла;
		
		ВсегоОпл = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);
		СуммаБезНДСВсего = Неопределено;
		Если СтруктураПараметров.Свойство("СуммаБезНДСВсего", СуммаБезНДСВсего) Тогда
			ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", СуммаБезНДСВсего, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", СтруктураПараметров.СуммаСНДСВсего, Истина, ТекстОшибки);
		
		СумНалВсего = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего", ПространствоИменСхемы);
		
		Если СтруктураПараметров.СуммаНДСВсего = 0 Тогда
			ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНДС", Формат(СтруктураПараметров.СуммаНДСВсего, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
				ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНалВсего, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТаблСчФакт, "ВсегоОпл", ВсегоОпл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТаблСчФакт, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьКорректировочныйСчетФактуруCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "KORSFAKT";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СтруктураПараметров.ИдОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", СтруктураПараметров.ИдПок, Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг,Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		
		СвКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерКСчФ", СтруктураПараметров.НомерКоррСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаКСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаКоррСчФ), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "КодОКВ", СтруктураПараметров.КодВалюты, Истина, ТекстОшибки);
		
		НомерИсправленияКоррСчФ = Неопределено;
		ДатаИсправленияКоррСчФ = Неопределено;
		Если СтруктураПараметров.Свойство("НомерИсправленияКоррСчФ", НомерИсправленияКоррСчФ)
			И СтруктураПараметров.Свойство("ДатаИсправленияКоррСчФ", ДатаИсправленияКоррСчФ)
			И ЗначениеЗаполнено(НомерИсправленияКоррСчФ)
			И ЗначениеЗаполнено(ДатаИсправленияКоррСчФ) Тогда
			
			ИспрКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "НомИспрКСчФ", НомерИсправленияКоррСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "ДатаИспрКСчФ", ДатаДД_ММ_ГГГГ(ДатаИсправленияКоррСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрКСчФ", ИспрКСчФ, , ТекстОшибки);
		КонецЕсли;
		
		НомерИсправленияСчФ = Неопределено;
		ДатаИсправленияСчФ = Неопределено;
		Если СтруктураПараметров.Свойство("НомерИсправленияИсходногоСчФ", НомерИсправленияСчФ)
			И СтруктураПараметров.Свойство("ДатаИсправленияИсходногоСчФ", ДатаИсправленияСчФ)
			И ЗначениеЗаполнено(НомерИсправленияСчФ)
			И ЗначениеЗаполнено(ДатаИсправленияСчФ) Тогда
			
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомерИсправленияСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ,"ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(ДатаИсправленияСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрСчФ", ИспрСчФ, , ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(СвПрод, СтруктураПараметров.Организация, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПрод", СвПрод, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(СвПокуп, СтруктураПараметров.Контрагент, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", СвКСчФ, Истина, ТекстОшибки);
		
		ТаблКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИменСхемы);
		
		Для Каждого Товар Из СтруктураПараметров.ТаблицаТоваров Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_ТовДо", Товар.ЕдиницаИзмеренияКодДо, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_ТовПосле", Товар.ЕдиницаИзмеренияКод, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "КолТовДо", Товар.КоличествоДо, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "КолТовПосле", Товар.Количество, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТовДо", Окр(Товар.ЦенаДо, 2), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТовПосле", Окр(Товар.Цена, 2), , ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.СуммаБезНДСДо) И ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", Товар.СуммаБезНДСДо, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", Товар.СуммаБезНДС, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", Товар.СуммаБезНДСУвеличение, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Товар.СуммаБезНДСУменьшение, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", СтоимТип, , ТекстОшибки);
			КонецЕсли;
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Товар.АкцизаДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизДо", СумАкцизТип, Истина, ТекстОшибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Товар.Акциза, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизПосле", СумАкцизТип, Истина, ТекстОшибки);
			
			Разница = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			АкцизаДо = ?(Товар.АкцизаДо = НСтр("ru ='без акциза'"), 0, Товар.АкцизаДо);
			АкцизаПосле = ?(Товар.Акциза = НСтр("ru ='без акциза'"), 0, Товар.Акциза);
			Если АкцизаДо < АкцизаПосле Тогда
				ЗаполнитьСвойствоXDTO(Разница, "СумУвел", АкцизаПосле - АкцизаДо, , ТекстОшибки, Истина);
			Иначе
				ЗаполнитьСвойствоXDTO(Разница, "СумУм", АкцизаДо - АкцизаПосле, , ТекстОшибки, Истина);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизРазн", Разница, Истина, ТекстОшибки);
			
			НалСтДо = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НалСтДо", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСтДо, "НалСтВел", Товар.СтавкаНДСДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСтДо, "НалСтТип", Товар.СтавкаНДСТипДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСтДо", НалСтДо, Истина, ТекстОшибки);
			
			НалСтПосле = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НалСтПосле", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСтПосле, "НалСтВел", Товар.СтавкаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСтПосле, "НалСтТип", Товар.СтавкаНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСтПосле", НалСтПосле, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если Товар.СтавкаНДСДо = НСтр("ru = 'без НДС'") Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
			ИначеЕсли Товар.СуммаНДСДо = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СуммаНДСДо, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалДо", СумНДСТип, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если Товар.СтавкаНДС = НСтр("ru = 'без НДС'") Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", НСтр("ru = 'без НДС'"), Истина, ТекстОшибки);
			ИначеЕсли Товар.СуммаНДС = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалПосле", СумНДСТип, Истина, ТекстОшибки);
			
			Разница = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(Товар.СуммаНДСУменьшение) Тогда
				ЗаполнитьСвойствоXDTO(Разница, "СумУм", Товар.СуммаНДСУменьшение, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(Разница, "СумУвел", Товар.СуммаНДСУвеличение, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалРазн", Разница, Истина, ТекстОшибки);
			
			СтоимТип = ПолучитьОбъектТипаCML("СтоимТип",ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", Товар.СуммаДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм",Товар.Сумма, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.СуммаУвеличение) Тогда
				ЗаполнитьСвойствоXDTO(СтоимТип,"СтоимУвел", Товар.СуммаУвеличение, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Товар.СуммаУменьшение, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", СтоимТип, , ТекстОшибки);
			
			Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
				Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТаблКСчФ.СведТов.Добавить(СведТов);
		КонецЦикла;
		
		Если СтруктураПараметров.СуммаСНДСВсегоУвеличение > 0 И СтруктураПараметров.СуммаБезНДСВсегоУвеличение > 0 Тогда
			ВсегоУвел = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовБезНДСВсего", СтруктураПараметров.СуммаБезНДСВсегоУвеличение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовУчНалВсего", СтруктураПараметров.СуммаСНДСВсегоУвеличение, Истина, ТекстОшибки);
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если СтруктураПараметров.СуммаНДСУвеличение = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(СтруктураПараметров.СуммаНДСУвеличение, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУвел", ВсегоУвел, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.СуммаСНДСВсегоУменьшение > 0 И СтруктураПараметров.СуммаБезНДСВсегоУменьшение > 0 Тогда
			ВсегоУм = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовБезНДСВсего", СтруктураПараметров.СуммаБезНДСВсегоУменьшение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовУчНалВсего", СтруктураПараметров.СуммаСНДСВсегоУменьшение, Истина, ТекстОшибки);
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если СтруктураПараметров.СуммаНДСУменьшение = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе	
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(СтруктураПараметров.СуммаНДСУменьшение, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУм", ВсегоУм, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТаблКСчФ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
			
		Файл.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьТорг12CML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "OTORG12";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СтруктураПараметров.ИдОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  СтруктураПараметров.ИдПок,  Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
			
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Поставщик, СтруктураПараметров.Поставщик, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);
		КонецЕсли;
		
		Плательщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Плательщик, СтруктураПараметров.Плательщик, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик", Плательщик, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Грузоотправитель, СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, 
				ТекстОшибки, ПространствоИменСхемы) Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ГрузОт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП) Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОКДП", СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение) Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "СтруктПодр", СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение,,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузОт", ГрузОт, , ТекстОшибки);
		КонецЕсли;
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Грузополучатель, СтруктураПараметров.Грузополучатель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения) Тогда
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", СтруктураПараметров.ДокОснованиеНаименование, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "НомОсн", СтруктураПараметров.ДокОснованиеНомер, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДокОснованиеДата), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", СтруктураПараметров.ДокОснованиеДопСведения, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата) Тогда
			ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТранНакл", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер) Тогда
				ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл", СтруктураПараметров.ТранспортнаяНакладнаяНомер, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата) Тогда
				ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ТранспортнаяНакладнаяДата), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ТранНакл", ТранНакл, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.КодВидаОперации) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ВидОперации", СтруктураПараметров.КодВидаОперации, , ТекстОшибки);
		КонецЕсли;
		
		ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ТН, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина, ТекстОшибки);
		
		Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		
		ТЗТовары = СтруктураПараметров.ТаблицаТоваров;
		
		Для Каждого Товар Из ТЗТовары Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", Строка(Товар.ЕдиницаИзмерения), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Нетто", ?(ЗначениеЗаполнено(Товар.МассаНетто), Товар.МассаНетто, 0), Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.НаименованиеНоменклатуры) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.БазоваяЕдиницаКод) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.БазоваяЕдиницаКод, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.НаименованиеХарактеристики) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ХарактерТов", Товар.НаименованиеХарактеристики, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Сорт) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СортТов", Товар.Сорт, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Артикул) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Товар.Артикул, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КодТовара) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КодТов", Товар.КодТовара, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.ВидУпаковки) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ВидУпак", Товар.ВидУпаковки, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КоличествоВОдномМесте) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Место", Товар.КоличествоВОдномМесте, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КоличествоМест) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КолМест", Товар.КоличествоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.МассаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Брутто", Товар.МассаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Цена", Товар.Цена, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", Товар.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
				СтавкаНДС = Число(СтрЗаменить(Товар.СтавкаНДС, "%", ""));
				ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", СтавкаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", Товар.СуммаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаСНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", Товар.СуммаСНДС, , ТекстОшибки);
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
				Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Таблица.СвТов.Добавить(СведТов);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС) Тогда
			
			ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "КолМестВс", СтруктураПараметров.ВсегоПоНакладной.КоличествоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "БруттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаНетто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		КонецЕсли;
		
		СтОбщСвед = СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной;
		Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМест)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто) Тогда
			ТНОбщ = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.ТНОбщ", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗап", СтОбщСвед.КоличествоПорядковыхНомеровЗаписей, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗапПр", СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.ВсегоМест) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМест", СтОбщСвед.ВсегоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМестПр", СтОбщСвед.ВсегоМестПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНетто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Нетто", СтОбщСвед.МассаГрузаНетто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "НеттоПр", СтОбщСвед.МассаГрузаНеттоПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Брутто", СтОбщСвед.МассаГрузаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "БруттоПр", СтОбщСвед.МассаГрузаБруттоПрописью, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ТН, "ТНОбщ", ТНОбщ, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
		
		СтСведОтпуск = СтруктураПараметров.СведенияПоОтпускуГруза;
		Если ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСумму) Тогда
			ОтпускГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпуск", СтСведОтпуск.ОтпущеноНаСумму, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСуммуПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпускПр", СтСведОтпуск.ОтпущеноНаСуммуПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистов) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрил", СтСведОтпуск.ПриложениеКоличествоЛистов, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистовПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрилПр", СтСведОтпуск.ПриложениеКоличествоЛистовПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ДатаОтпуска) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ДатаОтпуск", ДатаДД_ММ_ГГГГ(СтСведОтпуск.ДатаОтпуска), , ТекстОшибки);
			КонецЕсли;
			ОтпускРазрешил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазрешил, СтСведОтпуск.ОтпускРазрешил,
					ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускРазреш", ОтпускРазрешил, , ТекстОшибки);
			КонецЕсли;
			Бухгалтер = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(Бухгалтер, СтСведОтпуск.Бухгалтер, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "Бухгалтер", Бухгалтер, , ТекстОшибки);
			КонецЕсли;
			ОтпускПроизвел = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(ОтпускПроизвел, СтСведОтпуск.ОтпускПроизвел,
					ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускПроизв", ОтпускПроизвел, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ОтпускГруз", ОтпускГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьТорг12ПокупательCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = "PTORG12";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СтруктураПараметров.ИдОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  СтруктураПараметров.ИдПок,  Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		ИдТНО = ПолучитьОбъектТипаCML("Файл.Документ.ИдТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ИдФайлТН", СтруктураПараметров.ИдФайлТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ДатаДокТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокТН), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ВремДокТН", СтруктураПараметров.ВремДокТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ИдТНО", ИдТНО, Истина, ТекстОшибки);
		
		СвТНП = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНП, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина,
			ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаПолученияГруза) Тогда
			ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ПолучилГруз, "ДатаПолуч", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаПолученияГруза), Истина,
				ТекстОшибки);
			
			Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность", ПространствоИменСхемы);
			Если ЗаполнитьДанныеДоверенности(Доверенность, СтруктураПараметров.Доверенность, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ПолучилГруз, "Доверенность", Доверенность, , ТекстОшибки);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Фамилия) Тогда
				ГрузПринял = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ГрузПринял, СтруктураПараметров.ГрузПринял, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПринял", ГрузПринял, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Фамилия) Тогда
				ГрузПолучил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ГрузПолучил, СтруктураПараметров.ГрузПолучил, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПолучил", ГрузПолучил, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СвТНП, "ПолучилГруз", ПолучилГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНП, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНП", СвТНП, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьАкт501CML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Если СтруктураПараметров.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		ПространствоИменСхемы = "IAKTPRM2";
	Иначе
		ПространствоИменСхемы = "IAKTPRM";
	КонецЕсли;
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.ВерсПрог) Тогда
			ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СтруктураПараметров.ИдОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  СтруктураПараметров.ИдПок,  Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		Если СтруктураПараметров.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.НомерАкта) Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СвАктИ, "Заголовок", СтруктураПараметров.Заголовок, Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Исполнитель, СтруктураПараметров.Исполнитель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Исполнитель", Исполнитель, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			СтруктураДопДанных = Новый Структура;
			Если СтруктураПараметров.Заказчик.ЭтоФизЛицо Тогда
				СтруктураДопДанных.Вставить("ЗаказчикФамилия",  СтруктураПараметров.Заказчик.Фамилия);
				СтруктураДопДанных.Вставить("ЗаказчикИмя",      СтруктураПараметров.Заказчик.Имя);
				СтруктураДопДанных.Вставить("ЗаказчикОтчество", СтруктураПараметров.Заказчик.Отчество);
				СтруктураДопДанных.Вставить("ЗаказчикИНН",      СтруктураПараметров.Заказчик.ИНН);
			Иначе
				СтруктураДопДанных.Вставить("Заказчик",    СтруктураПараметров.Заказчик.НаименованиеОрганизации);
				СтруктураДопДанных.Вставить("ЗаказчикИНН", СтруктураПараметров.Заказчик.ИНН);
				СтруктураДопДанных.Вставить("ЗаказчикКПП", СтруктураПараметров.Заказчик.КПП);
			КонецЕсли;
			ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		Иначе
			Заказчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
			Если ЗаполнитьДанныеУчастникаФНСCML(Заказчик, СтруктураПараметров.Заказчик, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(СвАктИ, "Заказчик", Заказчик, Истина, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		ТЗОписанийУслуг = СтруктураПараметров.ТаблицаОписанийУслуг;
		Для Каждого ОписаниеУслуги Из ТЗОписанийУслуг Цикл
			
			ОписРабот = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ОписаниеУслуги.НачалоРабот) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "НачРабот",    ДатаДД_ММ_ГГГГ(ОписаниеУслуги.НачалоРабот), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.КонецРабот) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "КонРабот",    ДатаДД_ММ_ГГГГ(ОписаниеУслуги.КонецРабот), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.СуммаБезНДСИтого) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "СумБезНДСИт", ОписаниеУслуги.СуммаБезНДСИтого, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.СуммаНДСИтого) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "СумНДСИт",    ОписаниеУслуги.СуммаНДСИтого, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ОписРабот, "СумУчНДСИт",  ОписаниеУслуги.СуммаСНДСИтого, Истина, ТекстОшибки);
			
			ТЗУслуг = ОписаниеУслуги.Услуги;
			
			Для Каждого Услуга Из ТЗУслуг Цикл
				Работа = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот.Работа", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(Работа, "Номер", Услуга.НомерСтроки, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Работа, "НаимЕдИзм", Строка(Услуга.ЕдиницаИзмерения), Истина, ТекстОшибки);
				
				Если ЗначениеЗаполнено(Услуга.НаименованиеНоменклатуры) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "НаимРабот", Услуга.НаименованиеНоменклатуры, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.БазоваяЕдиницаКод) И ТипЗнч(Услуга.БазоваяЕдиницаКод) = Тип("Строка")
						И СтрДлина(Услуга.БазоваяЕдиницаКод) = 3 И ЭтоЧисло(Услуга.БазоваяЕдиницаКод) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "ОКЕИ", Услуга.БазоваяЕдиницаКод, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.Количество) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "Количество", Услуга.Количество, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.Цена) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "Цена", Услуга.Цена, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаБезНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумБезНДС", Услуга.СуммаБезНДС, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумНДС", Услуга.СуммаНДС, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаСНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумУчНДС", Услуга.СуммаСНДС, , ТекстОшибки);
				КонецЕсли;
				
				Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
					Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Услуги",
						Строка(ТЗОписанийУслуг.Индекс(ОписаниеУслуги) + 1) + "." + Услуга.НомерСтроки) Тогда
						
						СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
						ЗаполнитьСвойствоXDTO(Работа, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Работа, "Описание", Услуга.Описание, , ТекстОшибки);
				
				ОписРабот.Работа.Добавить(Работа);
			КонецЦикла;
			
			СвАктИ.ОписРабот.Добавить(ОписРабот);
		КонецЦикла;
		
		СдалЗаполнено = Ложь;
		ДоверенностьЗаполнена = Ложь;
		СведПоУслугам = СтруктураПараметров.СведенияПоВыполнениюУслуг;
		Сдал = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(СведПоУслугам.ДатаИсполнения) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ДатаИсполн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.СведенияПоВыполнениюУслуг.ДатаИсполнения), , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		ПодписьИсполн = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
		Если ЗаполнитьДолжностноеЛицоФНСCML(ПодписьИсполн, СтруктураПараметров.СведенияПоВыполнениюУслуг.ПодписьИсполнителя,
			ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ПодписьИсполн", ПодписьИсполн, , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		
		Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн", ПространствоИменСхемы);
		Если ЗаполнитьДанныеДоверенности(Доверенность, СтруктураПараметров.СведенияПоВыполнениюУслуг.Доверенность, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ДоверенИсполн", Доверенность, , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		
		Если СдалЗаполнено Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Сдал", Сдал, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьАкт501ЗаказчикCML(СтруктураПараметров, ВерсияРегламентаЭДО)
	
	ТекстОшибки = "";
	Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		ПространствоИменСхемы = "ZAKTPRM2";
	Иначе
		ПространствоИменСхемы = "ZAKTPRM";
	КонецЕсли;

	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СтруктураПараметров.ИдОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  СтруктураПараметров.ИдПок,  Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		
		Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		КонецЕсли;

		СведенияАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		
		ИдАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИдАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ИдФайлАктИ", СтруктураПараметров.ИдФайлАкт, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ДатаДокАктИ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокАкт), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ВремДокАктИ", СтруктураПараметров.ВремДокАкт, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "ИдАктИ", ИдАктИ, Истина, ТекстОшибки);
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		// Заполним свойства принимающей стороны Принял
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа) Тогда
			Принял = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "ДатаЗаказ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаЗаказа), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.Претензия) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "Претенз", СтруктураПараметров.Претензия, , ТекстОшибки);
			КонецЕсли;
			
			Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ", ПространствоИменСхемы);
			Если ЗаполнитьДанныеДоверенности(Доверенность, СтруктураПараметров.Доверенность, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "ДоверенЗаказ", Доверенность, , ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Фамилия) Тогда
				ПодписьЗаказ = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ПодписьЗаказ, СтруктураПараметров.ПодписьЗаказ, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(Принял, "ПодписьЗаказ", ПодписьЗаказ, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияАктИ, "Принял", Принял, , ТекстОшибки);
		КонецЕсли;
		
		// Заполним текстовые дополнительные свойства ИнфПол
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СведенияАктИ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Формирование ЭД CML из документов БД

// Возвращает результат успеха формирования файла ЭД Каталог товаров.
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//  МассивФайлов - если имеются присоединенные файлы - то в этом параметре возвращается массив файлов.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования ЭД.
//
Функция СформироватьКаталогCML(ДеревоДанных, МассивФайлов)
	
	ТекстОшибки = "";
	ФайлСформирован = Ложь;
	
	ПространствоИменСхемы = "urn:1C.ru:commerceml_2";
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		Каталог = ПолучитьОбъектТипаCML("Каталог", ПространствоИменСхемы);
		
		// Коммерческая информация.
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", XMLДатаВремя(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаФормирования")), Истина, ТекстОшибки);
		
		// Каталог.
		ЗаполнитьСвойствоXDTO(Каталог, "Ид", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "СодержитТолькоИзменения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СодержитТолькоИзменения"), Ложь, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "Наименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование"), Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Владелец, ДеревоДанных, "Владелец", ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Товары.
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Каталог.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", ПространствоИменСхемы);
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки, МассивФайлов);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Каталог, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Для каталога номенклатуры возможно передать только не подписанные данные
		ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, Каталог, ТекстОшибки);
		
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(Каталог, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "Каталог", Каталог, Истина, ТекстОшибки);
		// Запись файла электронного документа.
		КоммерческаяИнформация.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Прайс-лист.
// 
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьПрайсЛистCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		ПрайсЛист = ПолучитьОбъектТипаCML("ПакетПредложений", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "СодержитТолькоИзменения", Ложь, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Ид", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "ИдКаталога", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Наименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Описание", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "ДействительноС", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДействительноС"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "ДействительноДо", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДействительноДо"), Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Владелец, ДеревоДанных, "Владелец", ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Предложения.
		ТаблицаТоваров = ВеткаТаблицыВДереве(ДеревоДанных, "Товары");
				
		// Если не найдена таблица, например,
		// ошибка в заполнении дерева документа
		// то не будем формировать пустой ЭД.
		Если ТаблицаТоваров = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Если у таблицы товаров нет строк,
		// то не будем формировать пустой ЭД.
		Если ТаблицаТоваров.Строки.Количество() = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Предложения = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения", ПространствоИменСхемы);
		Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров.Строки Цикл
			
			Предложение = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение", ПространствоИменСхемы);
			
			// Заполняем свойства товара.
			СформироватьДанныеПоТоваруCML_206(Предложение, СтрокаТаблицыТоваров, ПространствоИменСхемы, ТекстОшибки);
			// Заполняем свойства предложения.
			СформироватьДанныеПоТоваруПредложенияCML_206(Предложение, СтрокаТаблицыТоваров, ПространствоИменСхемы, ТекстОшибки);
			
			// Добавляем строку в список.
			Предложения.Предложение.Добавить(Предложение);
		КонецЦикла;
		ПрайсЛист.Предложения = Предложения;
		
		//  Заполняем таблицу "Типы цен".
		ТаблицаТипыЦен = ВеткаТаблицыВДереве(ДеревоДанных, "ТипыЦен");
		
		ТипыЦен = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен", ПространствоИменСхемы);
		Если ПустаяТаблицаДерева(ТаблицаТипыЦен) Тогда
			
			// Если тип цен не заполнен - заполним чем нибудь.
			ТипЦены = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены", ПространствоИменСхемы);
			ИдТипаЦены = Строка(Новый УникальныйИдентификатор);
			ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", ИдТипаЦены, Истина, ТекстОшибки);
			ТипыЦен.ТипЦены.Добавить(ТипЦены)
			
		Иначе
			// Или тем, что есть в дереве.
			Для Каждого ТекСтрока Из ТаблицаТипыЦен.Строки Цикл
				
				ТипЦеныXDTO = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены", ПространствоИменСхемы);
				ЗаполнитьТипЦены(ТекСтрока, ТипЦеныXDTO);
				
				ТипыЦен.ТипЦены.Добавить(ТипЦеныXDTO)
			КонецЦикла;
		КонецЕсли;
		// Добавляем типы цен в прайс.
		ПрайсЛист.ТипыЦен = ТипыЦен;
		
		// Для Прайс листа возможно передать только не подписанные данные
		ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, ПрайсЛист, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		// Проверяем XDTO.
		ПрайсЛист.Проверить();
		КоммерческаяИнформация.ПакетПредложений = ПрайсЛист;
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
 	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Заказ поставщику.
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьЗаказCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		// Документ.
		ДокументПродажи = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Ид", Ид, Истина, ТекстОшибки);
		
		Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Номер", Номер, Истина, ТекстОшибки);
		
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Дата", Дата, Истина, ТекстОшибки);
		
		ХозОперация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "ХозОперация", ХозОперация, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Комментарий = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комментарий");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Комментарий", Комментарий, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Курс", Курс, Истина, ТекстОшибки);
		
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Сумма", Сумма, Истина, ТекстОшибки);
		
		Роль = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Роль");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Роль", Роль, Истина, ТекстОшибки);

		// заполняем контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		ВерсияСхемы = ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2();
		
		// Определяем роль Контрагента и организации.
		Если ВРег(Роль) = ВРег("Продавец") Тогда
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		Иначе
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		КонецЕсли;
		
		// Добавим в контрагенты Покупателя.
		Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, РольОрганизации, ТекстОшибки);
		Покупатель.Роль = РольОрганизации;
		
		Если ВРег(Роль) = ВРег("Продавец") Тогда
			// Банковский счет из шапки документа помещаем в расширения контрагента в документе.
			ЗаполнитьБанковскийСчет(Покупатель, ДеревоДанных);
		КонецЕсли;
		
		Контрагенты.Контрагент.Добавить(Покупатель);
		
		// Добавим в контрагенты Организацию.
		Продавец = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Продавец, ДеревоДанных, РольКонтрагента, ТекстОшибки);
		Продавец.Роль = РольКонтрагента;
		
		Если ВРег(Роль) = ВРег("Покупатель") Тогда
			// Банковский счет из шапки документа помещаем в расширения контрагента в документе.
			ЗаполнитьБанковскийСчет(Продавец, ДеревоДанных);
		КонецЕсли;
		
		Контрагенты.Контрагент.Добавить(Продавец);
		
		// Добавим в контрагенты Грузополучателя.
		Получатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Получатель, ДеревоДанных, "Получатель", ТекстОшибки);
		Получатель.Роль = "Получатель";
		Контрагенты.Контрагент.Добавить(Получатель);
		
		ДокументПродажи.Контрагенты = Контрагенты;
		
		// Заполняем товары
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				Товары.Товар.Добавить(Товар);
				
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументПродажи, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Помещаем доп данные в ЗначенияРеквизитов документа.
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПродажи, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи.
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		ДокументПродажи.Проверить();
		КоммерческаяИнформация.Документ.Добавить(ДокументПродажи);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьСчетНаОплатуCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	
	Попытка
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		ДокументЭО = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		ХозОперация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ХозОперация", ХозОперация, Истина, ТекстОшибки);
		
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", Ид, Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", НомерДок, Истина, ТекстОшибки);
		
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", ДатаДок, Истина, ТекстОшибки);
		
		СрокПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокПлатежа");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "СрокПлатежа", СрокПлатежа, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Курс", Курс, Истина, ТекстОшибки);
		
		СуммаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Сумма", СуммаДок, Истина, ТекстОшибки);
		
		// Заполнение контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		
		// Добавление в контрагенты Продавца.
		Поставщик = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Поставщик, ДеревоДанных, "Продавец", ТекстОшибки);
		
		// Заполнение расчетного счета.
		ЗаполнитьРасчетныйСчетПоставщика(ДеревоДанных, Поставщик, ПространствоИменСхемы, ТекстОшибки);

		Контрагенты.Контрагент.Добавить(Поставщик);
		
		// Добавим в контрагенты Покупателя.
		Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, "Покупатель", ТекстОшибки);
		Контрагенты.Контрагент.Добавить(Покупатель);
		
		ДокументЭО.Контрагенты = Контрагенты;
		ДокументЭО.Роль = "Продавец";
		
		НДСИтог = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.СуммаНДС");
		НДСВходитВСтоимость = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.ЦенаВключаетНДС");
		
		Налог = ПолучитьОбъектТипаCML("Документ.Налоги.Налог", ПространствоИменСхемы);
		Налог.Наименование = "НДС";
		Налог.УчтеноВСумме = НДСВходитВСтоимость;
		Налог.Сумма = НДСИтог;
		
		ДокументЭОНалоги = ПолучитьОбъектТипаCML("Документ.Налоги", ПространствоИменСхемы);
		ДокументЭОНалоги.Налог.Добавить(Налог);
		
		ДокументЭО.Налоги = ДокументЭОНалоги;
		
		НомерДокументаОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.НомерДокументаОснования");
		ДатаДокументаОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.ДатаДокументаОснования");
		Если ЗначениеЗаполнено(НомерДокументаОснования) И ЗначениеЗаполнено(ДатаДокументаОснования) Тогда
			
			ДобавитьВЗначенияРеквизитовДокумента("НомерДокументаОснования", НомерДокументаОснования, ДокументЭО);
			ДобавитьВЗначенияРеквизитовДокумента("ДатаДокументаОснования", ДатаДокументаОснования, ДокументЭО);
			
			НаименованиеДокументаОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.НаименованиеДокументаОснования");
			КомментарийДокументаОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.Комментарий");
			
			ДобавитьВЗначенияРеквизитовДокумента("НаименованиеДокументаОснование", НаименованиеДокументаОснование, ДокументЭО);
			ДобавитьВЗначенияРеквизитовДокумента("КомментарийДокументаОснование", КомментарийДокументаОснование, ДокументЭО);
			
		КонецЕсли;
		
		ЧастичнаяОплата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЧастичнаяОплата");
		Если Не ЗначениеЗаполнено(ЧастичнаяОплата) Тогда
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		Если Не ЧастичнаяОплата Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			
			СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
			
			Если СтрокаТаблицаТоваров.Строки.Количество() > 0 И СтрокаТаблицаТоваров.Значение > 0 Тогда
				Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
				Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
					Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
					// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
					СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
					
					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, Истина, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Формируем строку доп данных и файл.
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументЭО, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи.
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		КоммерческаяИнформация.Документ.Добавить(ДокументЭО);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о списании комиссионного товара.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараCML(ДеревоДанных)
	
	ТекстОшибки = "";
		
	Попытка
		
		ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
		
		// Коммерческая информация
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);

		ДокументЭО = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ХозОперация", НСтр("ru = 'Отчет о списании комиссионного товара'"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Роль", "Комитент", Истина, ТекстОшибки);

		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", Ид, Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", НомерДок, Истина, ТекстОшибки);
		
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", ДатаДок, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Курс", Курс, Истина, ТекстОшибки);
		
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Сумма", Сумма, Истина, ТекстОшибки);
		
		// заполняем контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		ВерсияСхемы = ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2();
		
		// Добавим в контрагенты Комитента
		Комитент = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комитент, ДеревоДанных, "Комитент", ТекстОшибки);
		Комитент.Роль = "Комитент";
		Контрагенты.Контрагент.Добавить(Комитент);
		
		// добавим в контрагенты Организацию
		Комиссионер = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комиссионер, ДеревоДанных, "Комиссионер", ТекстОшибки);
		Комиссионер.Роль = "Комиссионер";
		Контрагенты.Контрагент.Добавить(Комиссионер);
		
		ДокументЭО.Контрагенты = Контрагенты;
		
		// Заполняем товары
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		
		// Помещаем доп данные в ЗначенияРеквизитов документа
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументЭО, ТекстОшибки);
		
		ИтоговаяСтрока = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью");
		ДобавитьВЗначенияРеквизитовДокумента("ИтогиПрописью", ИтоговаяСтрока, ДокументЭО);
		
		ИтогоПоДокументу = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу");
		ДобавитьВЗначенияРеквизитовДокумента("ИтогоПоДокументу", ИтогоПоДокументу, ДокументЭО);
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		КоммерческаяИнформация.Документ.Добавить(ДокументЭО);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		// Документ.
		ДокументПродажи = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Ид", Ид, Истина, ТекстОшибки);
		
		Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Номер", Номер, Истина, ТекстОшибки);
		
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Дата", Дата, Истина, ТекстОшибки);
		
		ХозОперация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "ХозОперация", ХозОперация, Истина, ТекстОшибки);
		
		Роль = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Роль");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Роль", Роль, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Курс", Курс, Истина, ТекстОшибки);
		
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Сумма", Сумма, Истина, ТекстОшибки);
		
		ИтоговаяСтрока = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью");
		ДобавитьВЗначенияРеквизитовДокумента("ИтогиПрописью", ИтоговаяСтрока, ДокументПродажи);
		
		// Заполняем контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		ВерсияСхемы = ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2();
		
		// Добавим в контрагенты Комитента.
		Комитент = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комитент, ДеревоДанных, "Комитент", ТекстОшибки);
		Комитент.Роль = "Комитент";
		Контрагенты.Контрагент.Добавить(Комитент);
		
		// Добавим в контрагенты Организацию.
		Комиссионер = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комиссионер, ДеревоДанных, "Комиссионер", ТекстОшибки);
		Комиссионер.Роль = "Комиссионер";
		Контрагенты.Контрагент.Добавить(Комиссионер);
		
		ДокументПродажи.Контрагенты = Контрагенты;
		
		// Помещаем доп данные в ЗначенияРеквизитов документа.
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПродажи, ТекстОшибки);
		
		// Заполняем товары
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			МассивДобавленныхПокупателей = Новый Массив;
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				// Заполняем свойства товара, которые относятся к документу.
				СформироватьДанныеПоТабЧастиТоварыДокументаCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				// Добавим в контрагенты покупателя.
				Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ТекущийТовар, "Товары.НомерСтроки.Покупатель") Тогда
					Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
					ДопДанные = Новый Структура;
					ЗаполнитьДанныеУчастникаCML(Покупатель, ТекущийТовар, "Товары.НомерСтроки.Покупатель", ТекстОшибки, ДопДанные);
					ИдПокупателя = "";
					Если ДопДанные.Свойство("Ид", ИдПокупателя) Тогда
						Если МассивДобавленныхПокупателей.Найти(ИдПокупателя) = Неопределено Тогда
							Покупатель.Роль = "Покупатель";
							Контрагенты.Контрагент.Добавить(Покупатель);
							МассивДобавленныхПокупателей.Добавить(ИдПокупателя);
						КонецЕсли;
						
						ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ДополнительныеЗначенияРеквизитов", ПространствоИменСхемы);
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ИдПокупателя", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ИдПокупателя);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						
						// Для совместимости с более ранними версиями БЭД необходимо передать еще 3 реквизита:
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательНаименование", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ДопДанные.Наименование);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательИНН", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ДопДанные.ИНН);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательКПП", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ДопДанные.КПП);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						Товар.ДополнительныеЗначенияРеквизитов = ЗначенияРеквизитов;
					КонецЕсли;
				КонецЕсли;
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументПродажи, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Добавим заготовку Подписанта для заполнения при подписи.
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		ДокументПродажи.Проверить();
		КоммерческаяИнформация.Документ.Добавить(ДокументПродажи);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;

		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Акт на передачу прав.
//
// Параметры:
//  ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьАктНаПередачуПравCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ФайлСформирован = Ложь;
	
	ПространствоИменСхемы = "urn:1C.ru:commerceml_2";
	Попытка
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		Документ = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		// Коммерческая информация.
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", XMLДатаВремя(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаФормирования")), Истина, ТекстОшибки);
		
		// Документ.
		ЗаполнитьСвойствоXDTO(Документ, "Ид",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Номер",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"),	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Дата",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ХозОперация",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация"),Истина,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Роль",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Роль"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Валюта",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта"),	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Курс",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Сумма",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"),	Истина, ТекстОшибки);
		
		// Лицензиар.
		Лицензиар = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Лицензиар, ДеревоДанных, "Лицензиар", ТекстОшибки);
		
		// Лицензиат.
		Лицензиат = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Лицензиат, ДеревоДанных, "Лицензиат", ТекстОшибки);
		
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		Контрагенты.Контрагент.Добавить(Лицензиар);
		Контрагенты.Контрагент.Добавить(Лицензиат);
		
		// Плательщик.
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Плательщик") = Истина Тогда
			Плательщик = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
			ЗаполнитьДанныеУчастникаCML(Плательщик, ДеревоДанных, "Плательщик", ТекстОшибки);
			Контрагенты.Контрагент.Добавить(Плательщик);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "Контрагенты", Контрагенты, Истина, ТекстОшибки);
		
		// СрокПлатежа.
		СрокПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокПлатежа");
		Если ЗначениеЗаполнено(СрокПлатежа) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "СрокПлатежа", СрокПлатежа, , ТекстОшибки);
		КонецЕсли;
		
		// Комментарий.
		Комментарий = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комментарий");
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Комментарий", Комментарий, , ТекстОшибки);
		КонецЕсли;
		
		// Налоги.
		Налоги = ДеревоДанных.Строки.Найти("Налоги", "ПолныйПуть");
		Если ЗначениеЗаполнено(Налоги.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(Налоги, "Документ.Налоги", "Налог", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "Налоги", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Скидки.
		Скидки = ДеревоДанных.Строки.Найти("Скидки", "ПолныйПуть");
		Если ЗначениеЗаполнено(Скидки.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(Скидки, "Документ.Скидки", "Скидка", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "Скидки", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// ДопРасходы.
		ДопРасходы = ДеревоДанных.Строки.Найти("ДопРасходы", "ПолныйПуть");
		Если ЗначениеЗаполнено(ДопРасходы.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(ДопРасходы, "Документ.ДопРасходы", "ДопРасход", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "ДопРасходы", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Товары.
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
					
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Документ, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Формируем строка и файл доп данных.
		ПоместитьДопДанныеШапки(ДеревоДанных, Документ, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи.
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(Документ, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		КоммерческаяИнформация.Документ.Добавить(Документ);
		
		// Запись файла электронного документа.
		КоммерческаяИнформация.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Реквизиты организации.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьРеквизитыОрганизацииCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	
	Попытка
		
		Контрагент = ПолучитьОбъектТипаCML("Контрагент", ПространствоИменСхемы);
		ЗаполнитьКонтрагентаCML(Контрагент, ДеревоДанных, "Организация", ТекстОшибки);
		
		Контрагент.Проверить();
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(Контрагент, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		ФайлСформирован = Истина;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Устаревшие - Формирование ЭД CML из документов БД

// Возвращает результат успеха формирования файла ЭД с каталогом товаров.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьКаталогCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	Попытка
		КаталогЭО = ПолучитьОбъектТипаCML("Каталог", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Владелец, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Товары.
		ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Каталог.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(КаталогЭО, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Запись файла электронного документа.
		КаталогЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(КаталогЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьСчетНаОплатуCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("СчетНаОплату",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		РеквизитыПолучателя = ПолучитьОбъектТипаCML("СчетНаОплату.РеквизитыПолучателя", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "НомерСчета", СтруктураПараметров.РасчетныйСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", СтруктураПараметров.РасчетныйСчет.КоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", СтруктураПараметров.РасчетныйСчет.Банк, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК", СтруктураПараметров.РасчетныйСчет.БИК, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Банк", Банк, Истина, ТекстОшибки);
		
		// БанкКорреспондент
		Если СтруктураПараметров.Свойство("БанкКорреспондент") Тогда
			БанкКорреспондент =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "СчетКорреспондентский", СтруктураПараметров.БанкКорреспондент.КоррСчет, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "Наименование", СтруктураПараметров.БанкКорреспондент.Банк, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "БИК", СтруктураПараметров.БанкКорреспондент.БИК, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "БанкКорреспондент", БанкКорреспондент, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "НазначениеПлатежа", СтруктураПараметров.НазначениеПлатежа, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОкончанияДействияСчета", СтруктураПараметров.СрокПлатежа, Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("СчетНаОплату.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Поставщик, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Поставщик, , ТекстОшибки);
		
		Покупатель = ПолучитьОбъектТипаCML("СчетНаОплату.Покупатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Покупатель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Покупатель", Покупатель, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("СчетНаОплату.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		Руководитель = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтруктураПараметров.Руководитель);
		ЗаполнитьСвойствоXDTO(Руководитель, "ПолноеНаименование", ФамилияИнициалы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Руководитель", Руководитель, Истина, ТекстОшибки);
		
		Бухгалтер = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтруктураПараметров.Бухгалтер);
		ЗаполнитьСвойствоXDTO(Бухгалтер, "ПолноеНаименование", ФамилияИнициалы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Бухгалтер", Бухгалтер, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента")
			И ЗначениеЗаполнено(СтруктураПараметров.НомерПоДаннымКлиента)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаПоДаннымКлиента) Тогда
			
			ДокументОснования = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НаименованиеДокументаОснования", СтруктураПараметров.ДокументОснование, Истина, ТекстОшибки);
			ДокументЭО.ДокументОснования.Добавить(ДокументОснования);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЧастичнаяОплата") Тогда
			ЧастичнаяОплата = СтруктураПараметров.ЧастичнаяОплата;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		
		Если СтруктураПараметров.Свойство("ТаблицаТоваров") Тогда
			ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		КонецЕсли;
		
		Если НЕ ЧастичнаяОплата Тогда
			Если ТаблицаТоваров.Количество() > 0 Тогда
				
				Товары = ПолучитьОбъектТипаCML("СчетНаОплату.Товары", СтруктураПараметров.ВерсияСхемы);
				Для Каждого ТекТовар Из ТаблицаТоваров Цикл
					
					Товар = ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
					
					ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
					
					ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
					
					СтруктураЕдИзм = Новый Структура();
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
					СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
					СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
					
					Если СтруктураПараметров.ЦенаВключаетНДС Тогда
						СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
					Иначе
						СуммаБезНДС = ТекТовар.Сумма;
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
					
					Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(Стоимость, "СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость, "СуммаОбщая", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
					
					// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
					
					СтавкаНДСЧислом = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					Если СтавкаНДСЧислом <> Неопределено Тогда
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
					КонецЕсли;
					Стоимость.Налог.Добавить(НалогПоСтроке);
					ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
					
					Если НЕ ТаблицаТоваров.Колонки.Найти("СуммаСкидки") = Неопределено И ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
						СкидкиПоСтроке =  ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
						СкидкаПоСтроке =  ПолучитьОбъектТипаCML("Скидка", СтруктураПараметров.ВерсияСхемы);
						
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
						
						СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
						
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
					КонецЕсли;
					
					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") Тогда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				
				МассивКолонок = Новый Массив();
				Для Каждого Колонка Из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о списании комиссионного товара.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(ТекТовар.СуммаСНДС / ТекТовар.Количество, 2), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Сумма", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, ,  ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Устарела. Возвращает результат успеха формирования файла ЭД Заказ поставщику.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьЗаказCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ЗаказКлиента", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Роль", СтруктураПараметров.Роль, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("ЗаказКлиента.Исполнитель", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Контрагент", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли СтруктураПараметров.Роль = "Продавец" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Организация", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Исполнитель, , ТекстОшибки);
		
		Заказчик = ПолучитьОбъектТипаCML("ЗаказКлиента.Заказчик", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Организация", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли СтруктураПараметров.Роль = "Продавец" Тогда
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Контрагент", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Заказчик, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
				
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаОбщая", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				СтавкаНДСЧислом = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				Стоимость.Налог.Добавить(НалогПоСтроке);
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
					СкидкаПоСтроке = ПолучитьОбъектТипаCML("Скидка", СтруктураПараметров.ВерсияСхемы);
					
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Процент", ТекТовар.ПроцентСкидки, Истина, ТекстОшибки);
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ЗаказКлиента.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезСкидкиИтог", ТаблицаТоваров.Итог("Сумма")
			- ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСкидкиИтог", ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымКлиента) Тогда
			
			ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", НСтр("ru = 'По данным клиента'"));
			ДокументЭО.ДокументОснования.Добавить(ДокументОснование);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымПоставщика")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымПоставщика) Тогда
			
			ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования",СтруктураПараметров.ВерсияСхемы);
			
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымПоставщика);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымПоставщика);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", НСтр("ru = 'По данным поставщика'"));
			ДокументЭО.ДокументОснования.Добавить(ДокументОснование);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("АдресДоставки") Тогда
			АдресДоставки = СтруктураПараметров.АдресДоставки;
			АдресДоставкиСклад = ПолучитьОбъектТипаCML("Склад", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(АдресДоставкиСклад, "ИД", Строка(Новый УникальныйИдентификатор), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АдресДоставкиСклад, "Наименование", СтруктураПараметров.АдресДоставки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "АдресДоставкиСклад", АдресДоставкиСклад, , ТекстОшибки);
		КонецЕсли;
		
		// Этапы графика оплаты.
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") Тогда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				МассивКолонок = Новый Массив();
				Для Каждого Колонка Из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Комментарий") И ЗначениеЗаполнено(СтруктураПараметров.Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"Комментарий", СтруктураПараметров.Комментарий, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(ТекТовар.СуммаПродажи / ТекТовар.Количество, 2), Истина, ТекстОшибки);
				СуммыПоТовару = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар.СуммыПоТовару",
					СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаОбщая", ТекТовар.СуммаПродажи, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				СуммыПоТовару.Налог.Добавить(НалогПоСтроке);
				
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", СуммыПоТовару, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЦенаКомитента", Окр(ТекТовар.СуммаСНДС/ТекТовар.Количество, 2), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаКомитента", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаВознаграждения", ТекТовар.СуммаВознаграждения, , ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.ИтогоПоДокументу",
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаКомитентаИтог", ТаблицаТоваров.Итог("СуммаСНДС"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаПродажиИтог", ТаблицаТоваров.Итог("СуммаПродажи"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаВознагражденияИтог", ТаблицаТоваров.Итог("СуммаВознаграждения"), , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Процент") И ЗначениеЗаполнено (СтруктураПараметров.Процент) Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "Процент", СтруктураПараметров.Процент, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Услуга") И ЗначениеЗаполнено (СтруктураПараметров.Услуга) Тогда
			Услуга = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Услуга", СтруктураПараметров.ВерсияСхемы);
			СформироватьДанныеПоТоваруCML(Услуга, СтруктураПараметров.Услуга, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
			Если СтруктураПараметров.Свойство("СуммаНДСВознаграждения")
				И СтруктураПараметров.Свойство("СтавкаНДСВознаграждения") Тогда
				
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", СтруктураПараметров.СуммаНДСВознаграждения, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(СтруктураПараметров.СтавкаНДСВознаграждения);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Услуга, "Налог", НалогПоСтроке, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Услуга", Услуга, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаНачала", СтруктураПараметров.НачалоПериода, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КонецПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаКонца", СтруктураПараметров.КонецПериода, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ФормаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ФормаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ФормаОплаты", СтруктураПараметров.ФормаОплаты, , ТекстОшибки);
		КонецЕсли;
		
		// Этапы графика оплаты.
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") Тогда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				МассивКолонок = Новый Массив();
				Для Каждого Колонка Из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("СпособРасчета") И ЗначениеЗаполнено (СтруктураПараметров.СпособРасчета) Тогда
			Если СтруктураПараметров.СпособРасчета = НСтр("ru = 'Процент от разности суммы продажи и суммы комитента'") Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", НСтр("ru = 'От разницы'"), , ТекстОшибки);
			ИначеЕсли СтруктураПараметров.СпособРасчета = НСтр("ru = 'Процент от суммы продажи'") Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", НСтр("ru = 'От суммы'"), , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДатаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ДатаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОплаты", СтруктураПараметров.ДатаОплаты, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с прайс-листом
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция УдалитьСформироватьПрайсЛистCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		
		ПрайсЭО = ПолучитьОбъектТипаCML("ПрайсЛист", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		
		// Владелец.
		Контрагент = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Владелец", Контрагент, Истина, ТекстОшибки);
		
		ИдТипаЦен = Строка(Новый УникальныйИдентификатор);
		
		// Предложения.
		Если ТаблицаТоваров.Количество()>0 Тогда
			Предложения = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения", СтруктураПараметров.ВерсияСхемы);
			
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Предложение = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Предложение, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				Цены = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены", СтруктураПараметров.ВерсияСхемы);
				Цена = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены.Цена", СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Цена, "ИдТипаЦены", ИдТипаЦен, Истина,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "Цена", ТекТовар.Цена, Истина,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "МинКоличество", ТекТовар.Количество, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Цены.Цена.Добавить(Цена);
				ЗаполнитьСвойствоXDTO(Предложение, "Цены", Цены, Истина, ТекстОшибки);
				
				Предложения.Предложение.Добавить(Предложение);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ПрайсЭО, 	"Предложения",	Предложения, Истина, ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДействительноС",XMLДата(СтруктураПараметров.Дата), , ТекстОшибки);
		
		// ТипыЦен
		ТипыЦен = ПолучитьОбъектТипаCML("ПрайсЛист.ТипыЦен", СтруктураПараметров.ВерсияСхемы);
		ТипЦены = ПолучитьОбъектТипаCML("ТипЦены", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", ИдТипаЦен, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Описание") Тогда
			ЗаполнитьСвойствоXDTO(ТипЦены, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТипЦены, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		ТипыЦен.ТипЦены.Добавить(ТипЦены);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ТипыЦен", ТипыЦен, , ТекстОшибки);
		
		ПрайсЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ПрайсЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Торг-12.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьНакладнуюCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ",СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);
		
		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
		
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);
		
		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента") И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента") Тогда
			
			Основание = ПолучитьОбъектТипаCML("ТОРГ12.Основание", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(Основание,"НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Основание,"ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Основание,"НаименованиеДокументаОснования", НСтр("ru = 'Заказ поставщику'"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", ТаблицаТоваров.Итог("СуммаБезНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ОбменСКонтрагентамиПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			ПП = 0;
			
			Товары= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , ТекстОшибки);
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", ТекТовар.СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС, , ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Налог", НалогПоСтроке, , ТекстОшибки);
				
				Если НЕ (ТаблицаТоваров.Колонки.Найти("НомерПоДаннымКлиента") = Неопределено
					ИЛИ ТаблицаТоваров.Колонки.Найти("ДатаПоДаннымКлиента") = Неопределено)
					И ЗначениеЗаполнено(ТекТовар.НомерПоДаннымКлиента) И ЗначениеЗаполнено(ТекТовар.ДатаПоДаннымКлиента) Тогда
					
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерПоДаннымКлиента);
					
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерПоДаннымКлиента", НовыйОбъект);
					ТипОбъектаДата = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.ДатаПоДаннымКлиента);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "ДатаПоДаннымКлиента", НовыйОбъект);
				КонецЕсли;
				
				Если НЕ ТаблицаТоваров.Колонки.Найти("СрокГодности") = Неопределено
					И ЗначениеЗаполнено(ТекТовар.СрокГодности) Тогда
					
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.СрокГодности);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "СрокГодности", НовыйОбъект);
				КонецЕсли;
				Если (НЕ (ТаблицаТоваров.Колонки.Найти("НомерГТД") = Неопределено)) И ЗначениеЗаполнено(ТекТовар.НомерГТД) Тогда
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерГТД);
					Товар.Добавить(ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерГТД", НовыйОбъект);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Акта выполненных работ.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьАктCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("АктОПриемке",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		
		// Организация
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Исполнитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Контрагент, , ТекстОшибки);
		
		// Контрагент
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Заказчик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Контрагент, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("АктОПриемке.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаОбщая", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалога", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНалога", ТаблицаТоваров.Итог("СуммаБезНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("АктОПриемке.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаБезНалога", ТекТовар.СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				Стоимость.Налог.Добавить(НалогПоСтроке);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСНДС) Тогда
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", ТекТовар.СуммаСНДС, , ТекстОшибки);
				КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, , ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке = ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
					
					СкидкаПоСтроке = ПолучитьОбъектТипаCML("Скидка",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
					
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.СуммаСНДС - ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Если НЕ ТаблицаТоваров.Колонки.Найти("Содержание") = Неопределено
					И ЗначениеЗаполнено(ТекТовар.Содержание) Тогда
					
					ЗаполнитьСвойствоXDTO(Товар, "Описание", ТекТовар.Содержание, , ТекстОшибки);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ТекстДокумента = ПолучитьОбъектТипаCML("АктОПриемке.ТекстДокумента", СтруктураПараметров.ВерсияСхемы);
		
		Заголовок = СтруктураПараметров.ДополнительнаяИнформацияШапки + Символы.ПС
			+ НСтр("ru = 'Мы, нижеподписавшиеся,  представитель ИСПОЛНИТЕЛЯ, с одной стороны и  представитель ЗАКАЗЧИКА с другой стороны,
						|составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):'");
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Заголовок", XMLСтрока(Заголовок), , ТекстОшибки);
		
		Описание =  СтруктураПараметров.ДополнительнаяИнформация;
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "ОписаниеВыполненныхРабот", Описание, , ТекстОшибки);
		
		Претензии = НСтр("ru = 'Вышеперечисленные работы(услуги) выполнены полностью и в срок. Заказчик претензий по объему,
		|качеству и срокам работ (услуг) не имеет.'");
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Претензии", Претензии, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ТекстДокумента", ТекстДокумента, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);
		
		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
		
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);
		
		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);
		Если СтруктураПараметров.ЦенаВключаетНДС Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС",
				ТаблицаТоваров.Итог("Сумма") - ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		Иначе	
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") , , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ОбменСКонтрагентамиПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество()>0 Тогда 
			ПП = 0;
			Товары = ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(СуммаБезНДС / ТекТовар.Количество, 2), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС, , ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Налог", НалогПоСтроке, , ТекстОшибки);
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Структуры параметров, общих для схем ФНС

Процедура ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров)
	
	СтруктураПараметров.ВерсПрог = "1С:Предприятие 8";
	СтруктураПараметров.ВерсФорм = "5.01";
	СтруктураПараметров.ИдОтпр = СтруктураЭД.Отправитель;
	СтруктураПараметров.ИдПок = СтруктураЭД.Получатель;
	Если СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		ИЛИ СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров);
	Иначе // заполним данными Организации или нулевыми значениями, т.к. поля обязательны к заполнению в формате ФНС
		ЗаполнитьРеквизитыПустогоОператораЭДО(СтруктураПараметров, СтруктураЭД.Организация);
	КонецЕсли;
	ТекДатаВремя = ТекущаяДатаСеанса();
	СтруктураПараметров.ДатаДок = Формат(ТекДатаВремя, "ДЛФ=D");
	СтруктураПараметров.ВремДок = Формат(ТекДатаВремя, "ДФ=HH.mm.ss");
	СтруктураПараметров.ВидЭД = СтруктураЭД.ВидЭД;
	СтруктураПараметров.КНД = СтруктураЭД.КНД;
	СтруктураПараметров.УникальныйИдентификатор = СтруктураЭД.УникальныйИдентификатор;
	
	Если СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура Тогда
		Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			СтруктураПараметров.НаимПервДок = НСтр("ru = 'Товарная накладная'");
			СтруктураПараметров.ОКУДПервДок = "0330212";
			СтруктураПараметров.НомФорм = "ТОРГ-12";
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			СтруктураПараметров.НаимПервДок = НСтр("ru = 'Акт о выполнении работ (оказании услуг)'");
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			СтруктураПараметров.НомФорм = НСтр("ru = 'Корректировочный документ получатель'");
		КонецЕсли;
	КонецЕсли;
	ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");
	
	СтруктураФайла = Новый Структура();
	СтруктураФайла.Вставить("Префикс",                 СтруктураЭД.ПрефиксИдФайла);
	СтруктураФайла.Вставить("ИДПолучателя",            СтруктураЭД.Получатель);
	СтруктураФайла.Вставить("ИДОтправителя",           СтруктураЭД.Отправитель);
	СтруктураФайла.Вставить("ГГГГММДД",                ГГГГММДД);
	СтруктураФайла.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
	
	СтруктураПараметров.ИдФайл = ОбменСКонтрагентамиСлужебный.ФНСИмяФайла(СтруктураФайла);
	
КонецПроцедуры

Процедура СтруктураСлужебныхПолейФНС(СтруктураСлужебныеПоля = Неопределено)
	
	Если ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура") Тогда
		СтруктураСлужебныеПоля = Новый Структура;
	КонецЕсли;
	
	СтруктураСлужебныеПоля.Вставить("ВерсПрог");
	СтруктураСлужебныеПоля.Вставить("ВерсФорм");
	СтруктураСлужебныеПоля.Вставить("ИдФайл");
	СтруктураСлужебныеПоля.Вставить("ИдОтпр");
	СтруктураСлужебныеПоля.Вставить("ИдПок");
	СтруктураСлужебныеПоля.Вставить("НаимОрг");
	СтруктураСлужебныеПоля.Вставить("ИННЮЛ");
	СтруктураСлужебныеПоля.Вставить("ИдЭДО");
	СтруктураСлужебныеПоля.Вставить("КНД");
	СтруктураСлужебныеПоля.Вставить("ВидЭД");
	
	СтруктураСлужебныеПоля.Вставить("ДатаДок");
	СтруктураСлужебныеПоля.Вставить("ВремДок");
	СтруктураСлужебныеПоля.Вставить("НаимПервДок");
	СтруктураСлужебныеПоля.Вставить("ОКУДПервДок"); // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("НомФорм");     // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("УникальныйИдентификатор");
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруСлужебныхПолей(СтруктураЭД, СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("ВерсияСхемы", СтруктураЭД.ВерсияСхемы);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	
КонецПроцедуры

Процедура СтруктураСлужебныхПолей(СтруктураСлужебныеПоля = Неопределено)
	
	Если ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура") Тогда
		СтруктураСлужебныеПоля = Новый Структура;
	КонецЕсли;
	
	СтруктураСлужебныеПоля.Вставить("ДатаФормирования");
	СтруктураСлужебныеПоля.Вставить("ВерсияСхемы");
	СтруктураСлужебныеПоля.Вставить("Ид");
	СтруктураСлужебныеПоля.Вставить("ВидЭД");
	СтруктураСлужебныеПоля.Вставить("НаправлениеЭД");
	
КонецПроцедуры

Функция СтруктураРеквизитовДоверенностиФНС()
	
	СтруктураСведений = Новый Структура;
	
	СтруктураСведений.Вставить("НомерДоверенности");
	СтруктураСведений.Вставить("ДатаДоверенности");
	СтруктураСведений.Вставить("ОрганизацияВыдавшаяДоверенность");
	СтруктураСведений.Вставить("ДопСведенияОВыдачеДоверенности");
	СтруктураСведений.Вставить("ДопСведенияОДоверенномЛице");
	СтруктураСведений.Вставить("ЛицоВыдавшееДоверенность", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураСведений.Вставить("ДоверенноеЛицо", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	Возврат СтруктураСведений;
	
КонецФункции

Функция СтруктураРеквизитовУчастникаОбменаФНС()
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("КодОКПО");
	СтруктураУчастника.Вставить("НаименованиеОрганизации");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("КПП");
	СтруктураУчастника.Вставить("КодОКОПФ");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Адрес", СтруктураАдресаФНС());
	СтруктураУчастника.Вставить("Телефон");
	СтруктураУчастника.Вставить("Факс");
	СтруктураУчастника.Вставить("БанковскийСчет", Новый Структура("НомерСчета, НаимБанк, БИК"));
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо = Ложь)
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Должность");
	СтруктураУчастника.Вставить("СвидетельствоОРегистрацииИП");
	СтруктураУчастника.Вставить("ОбязательныеПоля", "ИНН, Фамилия, Имя, ЭтоФизЛицо" + ?(ЭтоФизЛицо,"",", Должность"));
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция СтруктураОбщихСведений()
	
	СтруктураСведений = Новый Структура;
	
	СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписей");
	СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью");
	СтруктураСведений.Вставить("ВсегоМест");
	СтруктураСведений.Вставить("ВсегоМестПрописью");
	СтруктураСведений.Вставить("МассаГрузаНетто");
	СтруктураСведений.Вставить("МассаГрузаНеттоПрописью");
	СтруктураСведений.Вставить("МассаГрузаБрутто");
	СтруктураСведений.Вставить("МассаГрузаБруттоПрописью");
	
	Возврат СтруктураСведений;
	
КонецФункции

Функция ОтчетОПродажахКомиссионногоТовараТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажи");
	ТаблицаТоваров.Колонки.Добавить("СуммаВознаграждения");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция СтруктураПараметровПоОтчетуОПродажахКомиссионногоТовара()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	
	СтруктураПараметров.Вставить("ТаблицаТоваров", ОтчетОПродажахКомиссионногоТовараТаблицаТоваров());
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("СтавкаНДСВознаграждения");
	СтруктураПараметров.Вставить("СуммаНДСВознаграждения");
	СтруктураПараметров.Вставить("СуммаВознаграждения");
	СтруктураПараметров.Вставить("НалогообложениеНДС");
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты");
	СтруктураПараметров.Вставить("НачалоПериода");
	СтруктураПараметров.Вставить("КонецПериода");
	СтруктураПараметров.Вставить("ФормаОплаты");
	СтруктураПараметров.Вставить("СпособРасчета");
	СтруктураПараметров.Вставить("Процент");
	СтруктураПараметров.Вставить("ДатаОплаты");
	СтруктураПараметров.Вставить("Услуга");
	СтруктураПараметров.Вставить("ИтоговаяСтрока");
	
	ДополнительныеРеквизитыДляТаблицыТоваров = Новый Структура;
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ДатаПродажи");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("СтавкаНДС");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательНаименование");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательИНН");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательКПП");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательФактАдрес", СтруктураАдресаФНС());
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательЮрАдрес", СтруктураАдресаФНС());
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыДляТаблицыТоваров", ДополнительныеРеквизитыДляТаблицыТоваров);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Номер, Дата, Исполнитель, Организация, Контрагент, Сумма, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, Количество, БазоваяЕдиницаКод, СуммаПродажи, СуммаСНДС");

	Возврат СтруктураПараметров;
	
КонецФункции

// Структура параметров ТОРГ12

Функция Торг12СтруктураСведенийПоОтпускуГруза()
	
	СтруктураОтпуска = Новый Структура;
	
	СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистов");
	СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистовПрописью");
	СтруктураОтпуска.Вставить("ОтпущеноНаСумму");
	СтруктураОтпуска.Вставить("ОтпущеноНаСуммуПрописью");
	СтруктураОтпуска.Вставить("ДатаОтпуска");
	СтруктураОтпуска.Вставить("ОтпускРазрешил", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураОтпуска.Вставить("Бухгалтер", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураОтпуска.Вставить("ОтпускПроизвел", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	Возврат СтруктураОтпуска;
	
КонецФункции

Функция Торг12СтруктураВсегоПоНакладной()
	
	СтруктураВсего = Новый Структура;
	
	СтруктураВсего.Вставить("КоличествоМест");
	СтруктураВсего.Вставить("МассаБрутто");
	СтруктураВсего.Вставить("МассаНетто");
	СтруктураВсего.Вставить("СуммаБезНДС");
	СтруктураВсего.Вставить("СуммаНДС");
	СтруктураВсего.Вставить("СуммаСНДС");
	
	Возврат СтруктураВсего;
	
КонецФункции

Функция Торг12ТаблицаСведенийОТоваре()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция Торг12СтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерТоварнойНакладной");
	СтруктураПараметров.Вставить("ДатаТоварнойНакладной");
	
	СтруктураПараметров.Вставить("ВидОперации");
	СтруктураПараметров.Вставить("ДокументыОснования");
	
	СтруктураПараметров.Вставить("ТаблицаТоваров", Торг12ТаблицаСведенийОТоваре());
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	СтруктураПараметров.Вставить("ОбщиеСведенияОТоварнойНакладной", СтруктураОбщихСведений());
	СтруктураПараметров.Вставить("ВсегоПоНакладной", Торг12СтруктураВсегоПоНакладной());
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("Грузоотправитель", СтруктураРеквизитовУчастникаОбменаФНС());
	СведенияОГрузоотправителе.Вставить("СтруктурноеПодразделение");
	СведенияОГрузоотправителе.Вставить("КодОКДП");
	
	СтруктураПараметров.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Поставщик", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Плательщик", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("ДокОснованиеНаименование");
	СтруктураПараметров.Вставить("ДокОснованиеНомер");
	СтруктураПараметров.Вставить("ДокОснованиеДата");
	СтруктураПараметров.Вставить("ДокОснованиеДопСведения");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата");
	СтруктураПараметров.Вставить("КодВидаОперации");
	СтруктураПараметров.Вставить("СведенияПоОтпускуГруза", Торг12СтруктураСведенийПоОтпускуГруза());
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "НомерТоварнойНакладной, ДатаТоварнойНакладной, ТаблицаТоваров, Подписант");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НомерСтроки, ЕдиницаИзмерения, СуммаСНДС");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Торг12ПокупательСтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	СтруктураПараметров.Вставить("ДатаПолученияГруза");
	СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	СтруктураПараметров.Вставить("ГрузПринял", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураПараметров.Вставить("ГрузПолучил", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("PTORG12", "Файл.Документ.СвТНП.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЭСФСтруктураПараметров(ЭтоКорректировочныйСФ, ЭтоФизЛицо = Ложь)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерСчФ"); // Порядковый номер счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("ДатаСчФ"); // Дата составления счета-фактуры счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("КодВалюты"); // Валюта: Код (Строка 4) 
	СтруктураПараметров.Вставить("НомерИсправленияИсходногоСчФ"); // (optional) Исправление: № (Строка 1а)
	СтруктураПараметров.Вставить("ДатаИсправленияИсходногоСчФ"); // (optional) Исправление: Дата  (Строка 1а)
	
	СтруктураПараметров.Вставить("Организация", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Организация.Вставить("ОбязательныеПоля", "НаименованиеОрганизации, Адрес, ЭтоФизЛицо" + ?(ЭтоФизЛицо,", Фамилия, Имя",""));
	
	СтруктураПараметров.Вставить("Контрагент", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Контрагент.Вставить("ОбязательныеПоля", "НаименованиеОрганизации, Адрес, ЭтоФизЛицо");
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(Истина)); // в параметрах подписанта для СФ, должность - не обязательный реквизит.
	
	СтруктураПараметров.Вставить("ДокументыОснования");
	
	Если ЭтоКорректировочныйСФ Тогда
		СтруктураПараметров.Вставить("НомерКоррСчФ"); // Порядковый номер корректировочного счета-фактуры (Строка 1)
		СтруктураПараметров.Вставить("ДатаКоррСчФ"); // Дата составления корректировочного счета-фактуры (Строка 1)
		СтруктураПараметров.Вставить("НомерИсправленияКоррСчФ"); // (optional) Исправление: № (Строка 1а)
		СтруктураПараметров.Вставить("ДатаИсправленияКоррСчФ"); // (optional) Исправление: Дата  (Строка 1а)
		
		// Сведения таблицы корректировочного счета-фактуры
		СтруктураПараметров.Вставить("ТаблицаТоваров", КорЭСФТаблицаСведенийОТоваре());
		
		// Реквизиты строки Всего увеличение (сумма строк (В) по графам 5, 8 и 9).
		СтруктураПараметров.Вставить("СуммаБезНДСВсегоУвеличение"); // Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего увеличение/Графа 5).
		СтруктураПараметров.Вставить("СуммаСНДСВсегоУвеличение"); // Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего увеличение/Графа 9).
		СтруктураПараметров.Вставить("СуммаНДСУвеличение"); // Всего увеличение, Сумма налога (строка Всего увеличение/Графа 8)
		
		// Реквизиты строки Всего уменьшение (сумма строк (Г) по графам 5, 8 и 9).
		СтруктураПараметров.Вставить("СуммаБезНДСВсегоУменьшение"); // всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего уменьшение/Графа 5).
		СтруктураПараметров.Вставить("СуммаСНДСВсегоУменьшение"); // всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего уменьшение/Графа 9).
		СтруктураПараметров.Вставить("СуммаНДСУменьшение"); // всего уменьшение, Сумма налога (строка Всего уменьшение/Графа 8)
		МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("KORSFAKT", "Файл.Документ.СвКСчФ.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
		МаксДлинаСтр = ПолучитьСвойствоПоляXDTOСхемы("KORSFAKT", "Файл.Документ.ТаблКСчФ.СведТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	Иначе
		// Если счет-фактура составляется на выполнение работы (оказание услуги), грузоотправитель/грузополучатель) - ставится прочерк.
		СтруктураПараметров.Вставить("ТолькоУслуги", Ложь);
		
		// При формировании ЭСФ, для грузоотправителя/грузополучателя) используются только следующие поля структуры:
		// ЭтоФизЛицо, НаименованиеОрганизации, Фамилия, Имя, Отчество, Адрес.
		СтруктураПараметров.Вставить("Грузополучатель", СтруктураРеквизитовУчастникаОбменаФНС());
		
		СведенияОГрузоотправителе = Новый Структура;
		СведенияОГрузоотправителе.Вставить("Грузоотправитель", СтруктураРеквизитовУчастникаОбменаФНС());
		СведенияОГрузоотправителе.Вставить("ОнЖе", Ложь); // может указываться только для грузоотправителя
		СтруктураПараметров.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
		// Сведения о платежно-расчетном документе (строка 5).
		ПлатежныеДокументы = Новый ТаблицаЗначений();
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД"); // Номер платежно-расчетного документа.
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД"); // Дата составления платежно-расчетного документа.
		СтруктураПараметров.Вставить("ПлатежныеДокументы", ПлатежныеДокументы);
		
		СтруктураПараметров.Вставить("ТаблицаТоваров", ЭСФТаблицаСведенийОТоваре());
		СтруктураПараметров.Вставить("СуммаБезНДСВсего"); // Стоимость товаров (работ, услуг), имущественных прав без налога - всего.
		СтруктураПараметров.Вставить("СуммаСНДСВсего"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего
		СтруктураПараметров.Вставить("СуммаНДСВсего"); // Сумма НДС, предъявляемая покупателю
		МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("SFAKT", "Файл.Документ.СвСчФакт.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
		МаксДлинаСтр = ПолучитьСвойствоПоляXDTOСхемы("SFAKT", "Файл.Документ.ТаблСчФакт.СведТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлинаСтр - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "НомерСчФ, ДатаСчФ, КодВалюты, Организация, Контрагент, Подписант,
	|ТаблицаТоваров" + ?(ЭтоКорректировочныйСФ, "", ", СуммаСНДСВсего"));
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"НомерСтроки, НаименованиеНоменклатуры, Акциза, СтавкаНДС, СтавкаНДСТип, Сумма"
		+ ?(ЭтоКорректировочныйСФ, ", АкцизаДо, СтавкаНДСДо, СтавкаНДСТипДо, СуммаДо", ""));
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Акт501СтруктураСведенийПоВыполнениюУслуг()
	
	СтруктураВыполнения = Новый Структура;
	СтруктураВыполнения.Вставить("ДатаИсполнения");
	СтруктураВыполнения.Вставить("ПодписьИсполнителя", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураВыполнения.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	
	Возврат СтруктураВыполнения;
	
КонецФункции

Функция Акт501ТаблицаСведенийОбУслугах()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("НомерСтроки");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаУслуг.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("ИД");
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция Акт501ТаблицаСведенийОбОписанииУслуг()
	
	ТаблицаОписанийУслуг = Новый ТаблицаЗначений;
	ТаблицаОписанийУслуг.Колонки.Добавить("НомерСтроки");
	ТаблицаОписанийУслуг.Колонки.Добавить("НачалоРабот");
	ТаблицаОписанийУслуг.Колонки.Добавить("КонецРабот");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаБезНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаСНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("Услуги");
	
	Возврат ТаблицаОписанийУслуг;
	
КонецФункции

Функция Акт501СтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерАкта");
	СтруктураПараметров.Вставить("ДатаАкта");
	
	СтруктураПараметров.Вставить("ВидОперации");
	СтруктураПараметров.Вставить("ДокументыОснования");
	
	СтруктураПараметров.Вставить("Заголовок", НСтр("ru = 'Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель
	|ЗАКАЗЧИКА с другой стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).'"));
	
	СтруктураПараметров.Вставить("Исполнитель",  СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Заказчик",     СтруктураРеквизитовУчастникаОбменаФНС());
	
	СтруктураПараметров.Вставить("ТаблицаОписанийУслуг", Акт501ТаблицаСведенийОбОписанииУслуг());
	СтруктураПараметров.Вставить("ТаблицаУслуг", Акт501ТаблицаСведенийОбУслугах());
	
	СтруктураПараметров.Вставить("СведенияПоВыполнениюУслуг", Акт501СтруктураСведенийПоВыполнениюУслуг());
	
	СтруктураПараметров.Вставить("Подписант",    СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("IAKTPRM2", "Файл.Документ.СвАктИ.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("IAKTPRM2", "Файл.Документ.СвАктИ.ОписРабот.Работа", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "ДатаАкта, ТаблицаОписанийУслуг, Подписант");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "СуммаСНДСИтого, Услуги, Услуги.НомерСтроки, Услуги.ЕдиницаИзмерения");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Акт501ЗаказчикСтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	СтруктураПараметров.Вставить("НомерАкта");
	СтруктураПараметров.Вставить("ДатаАкта");
	СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	СтруктураПараметров.Вставить("ПодписьЗаказ", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураПараметров.Вставить("ДатаЗаказа");
	СтруктураПараметров.Вставить("Претензия");
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("ZAKTPRM2", "Файл.Документ.СвАктИ.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Структура адреса содержит все возможные варианты заполнения адреса:
// Структурированный адрес (по КЛАДР), произвольный российский/иностранный.
// Тип адреса выбирается из списка значений ТипыАдресов и заполняется
// соответствующая структура, описанная в значении элемента списка.
// Пометка в списке типов должна быть одна, иначе будет браться первый тип адреса
// с пометкой и по этому типу будут заполняться данные адреса в ЭД.
//
Функция СтруктураАдресаФНС()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	СтруктураАдреса.Вставить("ОбязательныеПоля", "КодРегион");

	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка обязательных полей

Функция ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ТЗ, Знач ПоляТЗ, ИмяТЗ, ТекстОшибки)
	
	Если ТЗ.Количество() > 0 Тогда
		МассивОбязательныхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляТЗ);
		КоличествоКолонок = МассивОбязательныхКолонок.Количество();
		Для Индекс = 1 По КоличествоКолонок Цикл
			Элемент = СокрЛП(МассивОбязательныхКолонок[КоличествоКолонок - Индекс]);
			// Доп. проверка наличия обязательных колонок во вложенных таблицах см. функцию Акт501СтруктураПараметров.
			Если Найти(Элемент, ".") = 0 И ТЗ.Колонки.Найти(Элемент) = Неопределено Тогда
					ШаблонОшибки = НСтр("ru = 'В таблице ""%1"" отсутствует обязательная к заполнению колонка: ""%2.""'");
					ПользовательскоеПредставление = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(
																												Источник,
																												Элемент);
					ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонОшибки,
																	ИмяТЗ,
																	ПользовательскоеПредставление);
					ТекстОшибки = ТекстОшибки + ТекстТекущейОшибки + Символы.ПС;
					МассивОбязательныхКолонок.Удалить(КоличествоКолонок - Индекс);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого Строка Из ТЗ Цикл
			Для Каждого Элемент Из МассивОбязательныхКолонок Цикл
				Элемент = СокрЛП(Элемент);
				// Проверка заполненности обязательных полей во вложенных таблицах см. функцию Акт501СтруктураПараметров.
				Если Найти(Элемент, ".") <> 0 Тогда
					ВложеннаяТаблица = Лев(Элемент, Найти(Элемент, ".") - 1);
					ОбязательныйПараметрВложеннойТаблицы = Сред(Элемент, Найти(Элемент, ".") + 1);
					
					ПользовательскоеПредставлениеТЗ = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(
						Источник, ВложеннаяТаблица);
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, Строка[ВложеннаяТаблица], ОбязательныйПараметрВложеннойТаблицы,
						ПользовательскоеПредставлениеТЗ, ТекстОшибки);
				Иначе
					ЗначениеПараметра = Строка[Элемент];
					Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
						ПроверитьЗаполнениеОбязательныхПолей(ЗначениеПараметра, ТекстОшибки);
						
					ИначеЕсли Не ЗначениеЗаполнено(ЗначениеПараметра) И Не ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
						ШаблонОшибки = НСтр("ru = 'В строке №%1 таблицы ""%2"" не заполнено значение ""%3.""'");
						
						ПользовательскоеПредставление = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
							Элемент);
						ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
							ТЗ.Индекс(Строка) + 1, ИмяТЗ, ПользовательскоеПредставление) + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Не заполнена обязательная таблица: ""%1.""'");
		ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяТЗ) + Символы.ПС;
	КонецЕсли;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

// Проверяет заполнение обязательных полей в СтруктуреПараметров, если значением
// обязательного поля является вложенная структура, то она рекурсивно проверяется
// в этой же функции, если значением обязательного поля является вложенная таблица
// значений, то она передается на проверку в функцию ПроверитьЗаполнениеОбязательныхПолейТЗ.
// Список обязательных полей проверяемой структуры, берется из значения элемента
// структуры с ключем "ОбязательныеПоля".
// Список обязательных колонок таблицы значений, берется из значения элемента структуры
// с ключом "ОбязательныеПоляТаблицыЗначений".
//
// Параметры:
//  Источник             - ссылка - ссылка на объект информационной базы.
//  СтруктураПараметров  - структура - проверяемая структура с данными.
//  ТекстОшибки - Строка - строка содержащая описание незаполненных полей
//    проверяемой структуры, может быть показана пользователю в вызывающей процедуре.
//
// Возвращаемое значение:
//  ПараметрыЗаполнены - Булево - Истина - если обязательные поля заполнены, иначе - Ложь.
//
Функция ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПараметров, ТекстОшибки = "")
	
	ОбязательныеПоля = "";
	ЗначениеПараметра = "";
	ДанныеПодготовлены = Ложь;
	
	Если СтруктураПараметров.Свойство("ДанныеПодготовлены", ДанныеПодготовлены) И НЕ ДанныеПодготовлены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеОбОшибке = Неопределено;
	Если СтруктураПараметров.Свойство("ТекстОшибки", СообщениеОбОшибке) И ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ТекстОшибки = СообщениеОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = СтруктураПараметров;
	Если СтруктураПараметров.Свойство("ОбязательныеПоля", ОбязательныеПоля) Тогда
		СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураОбязательныхПолей Цикл
		Если СтруктураПараметров.Свойство(Элемент.Ключ, ЗначениеПараметра) Тогда
			Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
				ПроверитьЗаполнениеОбязательныхПолей(Источник, ЗначениеПараметра, ТекстОшибки);
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
				ПоляТЗ = "";
				ПользовательскоеПредставлениеТЗ = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
					Элемент.Ключ);
				Если СтруктураПараметров.Свойство("ОбязательныеПоляТаблицыЗначений", ПоляТЗ) Тогда
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ЗначениеПараметра, ПоляТЗ, ПользовательскоеПредставлениеТЗ,
						ТекстОшибки);
				Иначе
					ШаблонОшибки = НСтр("ru = 'Не заполнен перечень обязательных полей таблицы: ""%1"".'");
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставлениеТЗ) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСЗ Из ЗначениеПараметра Цикл
					Если ЭлементСЗ.Пометка Тогда
						СтруктураПроверки = Новый Структура("Элемент", ЭлементСЗ.Значение);
						ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПроверки, ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) И Не ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
					ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле структуры параметров: ""%1"".'");
					
					ПользовательскоеПредставление = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
						Элемент.Ключ);
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставление) + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШаблонОшибки = НСтр("ru = 'Отсутствует обязательное поле в структуре параметров: ""%1"".'");
			ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				Элемент.Ключ) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

Процедура ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя, ЭтоДокументПередачи = Ложь)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ГрузПолучилДолжность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилДолжность");
		Если Не ГрузПолучилДолжность = "---" Тогда
			ДанныеПокупателя.Вставить("ГрузПолучилДолжность", ГрузПолучилДолжность);
		КонецЕсли;
		ДанныеПокупателя.Вставить("ГрузПолучилФИО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилФИО"));
		ДатаПолучения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения");
		Если ЗначениеЗаполнено(ДатаПолучения) Тогда
			Если ЭтоДокументПередачи Тогда
				ДатаПолучения = Формат(ДатаПолучения, "ДЛФ=D");
			КонецЕсли;
			ДанныеПокупателя.Вставить("ДатаПолучения", ДатаПолучения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗаказчика(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеЗаказчика)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
	
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ДанныеЗаказчика.Вставить("Претензии", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Претензии"));
		
		ДанныеЗаказчика.Вставить("ПринялДолжность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПринялДолжность"));
		ДанныеЗаказчика.Вставить("ПринялФИО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПринялФИО"));
		ДанныеЗаказчика.Вставить("ДатаПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеДоверенности(ДоверенностьXDTO, СтруктураДанныхДоверенности, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(СтруктураДанныхДоверенности) = Тип("Структура")
		И (ЗначениеЗаполнено(СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.НомерДоверенности)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДатаДоверенности)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице)) Тогда
		
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.НомерДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "НомДоверен",
			СтруктураДанныхДоверенности.НомерДоверенности, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДатаДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ДатаДоверен",
			ДатаДД_ММ_ГГГГ(СтруктураДанныхДоверенности.ДатаДоверенности), , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Должность)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Фамилия) Тогда
			ВыданаКем = ПолучитьОбъектТипаCML("ДоверенностьТип.ВыданаКем", ПространствоИменСхемы);
			
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем",
				СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем",
				СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Должность) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем",
				СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Должность, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Фамилия) Тогда
				ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия",
				СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Фамилия, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Имя",
				СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Имя, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Отчество) Тогда
					ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество",
					СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Отчество, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ВыданаКем", ВыданаКем, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Должность)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Фамилия) Тогда
			ВыданаКому = ПолучитьОбъектТипаCML("ДоверенностьТип.ВыданаКому", ПространствоИменСхемы);
			
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому",
				СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Должность) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", СтруктураДанныхДоверенности.ДоверенноеЛицо.Должность, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Фамилия) Тогда
				ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", СтруктураДанныхДоверенности.ДоверенноеЛицо.Фамилия, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", СтруктураДанныхДоверенности.ДоверенноеЛицо.Имя, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Отчество) Тогда
					ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", СтруктураДанныхДоверенности.ДоверенноеЛицо.Отчество, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ВыданаКому", ВыданаКому, , ТекстОшибки);
		КонецЕсли;
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеДоверенностиCML(ДоверенностьXDTO, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, Префикс = "")
	
	ОбъектЗаполнен = Ложь;
	Префикс = Префикс + ?(ЗначениеЗаполнено(Префикс), ".", "");
	ВыданаКем = ПолучитьОбъектТипаCML("ДоверенностьТип.ВыданаКем", ПространствоИменСхемы);
	БлокЗаполнен = Ложь;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ОрганизацияВыдавшаяДоверенность") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ОрганизацияВыдавшаяДоверенность");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем", Реквизит, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ЛицоВыдавшееДоверенность.Должность") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ЛицоВыдавшееДоверенность.Должность");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем", Реквизит, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ЛицоВыдавшееДоверенность.Фамилия") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ЛицоВыдавшееДоверенность.Фамилия");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ЛицоВыдавшееДоверенность.Имя");
			ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ЛицоВыдавшееДоверенность.Отчество");
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", Реквизит, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "НомерДоверенности") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "НомерДоверенности");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "НомДоверен", Реквизит, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ДатаДоверенности") Тогда
		Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ДатаДоверенности"));
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ДатаДоверен", Реквизит, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ДопСведенияОВыдачеДоверенности") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ДопСведенияОВыдачеДоверенности");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем", Реквизит, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если БлокЗаполнен Тогда
		ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ВыданаКем", ВыданаКем, , ТекстОшибки);
		ОбъектЗаполнен = Истина;
	КонецЕсли;
	
	ВыданаКому = ПолучитьОбъектТипаCML("ДоверенностьТип.ВыданаКому", ПространствоИменСхемы);
	БлокЗаполнен = Ложь;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ДопСведенияОДоверенномЛице") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ДопСведенияОДоверенномЛице");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому", Реквизит, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ДоверенноеЛицо.Должность") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ДоверенноеЛицо.Должность");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", Реквизит, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, Префикс + "ДоверенноеЛицо.Фамилия") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ДоверенноеЛицо.Фамилия");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ДоверенноеЛицо.Имя");
			ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + "ДоверенноеЛицо.Отчество");
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", Реквизит, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);
			БлокЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если БлокЗаполнен Тогда
		ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ВыданаКому", ВыданаКому, , ТекстОшибки);
		ОбъектЗаполнен = Истина;
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеПодписантаCML(ПодписантXDTO, СтруктураДанныхПодписанта, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(СтруктураДанныхПодписанта) = Тип("Структура") Тогда
		Если ТипЗнч(СтруктураДанныхПодписанта.ЭтоФизЛицо) = Тип("Булево") И СтруктураДанныхПодписанта.ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураДанныхПодписанта.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураДанныхПодписанта.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураДанныхПодписанта.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтруктураДанныхПодписанта.ИНН, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.СвидетельствоОРегистрацииИП) Тогда
				ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтруктураДанныхПодписанта.СвидетельствоОРегистрацииИП, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПодписантXDTO, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураДанныхПодписанта.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураДанныхПодписанта.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураДанныхПодписанта.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", СтруктураДанныхПодписанта.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", СтруктураДанныхПодписанта.Должность, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПодписантXDTO,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазрешилXDTO, ДолжностноеЛицо, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(ДолжностноеЛицо) = Тип("Структура") И ЗначениеЗаполнено(ДолжностноеЛицо.Фамилия) Тогда
		ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ДолжностноеЛицо.Фамилия, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ДолжностноеЛицо.Имя, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ДолжностноеЛицо.Отчество) Тогда
			ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ДолжностноеЛицо.Отчество, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДолжностноеЛицо.Должность) Тогда
			ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "Должность", ДолжностноеЛицо.Должность, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "ФИО", ФИОТип, Истина, ТекстОшибки);
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеУчастникаФНСCML(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника.ЭтоФизЛицо) = Тип("Булево") Тогда
		ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		
		Если СтруктураПараметровУчастника.ЭтоФизЛицо Тогда
			СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", СтруктураПараметровУчастника.ИНН, ,ТекстОшибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураПараметровУчастника.Фамилия,Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураПараметровУчастника.Имя, Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураПараметровУчастника.Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", "---", , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, , ТекстОшибки);
			КонецЕсли;
			Наименование = СтруктураПараметровУчастника.Фамилия + " " + СтруктураПараметровУчастника.Имя + " "
				+ СтруктураПараметровУчастника.Отчество;
		Иначе
			СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СтруктураПараметровУчастника.НаименованиеОрганизации,  ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СтруктураПараметровУчастника.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СтруктураПараметровУчастника.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, , ТекстОшибки);
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "---", Истина ,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Имя",     "---", Истина ,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
			КонецЕсли;
			Наименование = СтруктураПараметровУчастника.НаименованиеОрганизации;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.КодОКПО) Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО", СтруктураПараметровУчастника.КодОКПО, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Адрес = "";
	Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
		ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакт = ПолучитьОбъектТипаCML("УчастникТип.Контакт", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.Телефон) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "УчастникТип.Контакт", "Тлф", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(Лев(СтруктураПараметровУчастника.Телефон, Длина));
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
				|Номер телефона превышает допустимую длину %1 симв. (участник обмена %2).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Тлф", Значение, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.Факс) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "УчастникТип.Контакт", "Факс", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(Лев(СтруктураПараметровУчастника.Факс, Длина));
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
				|Номер факса превышает допустимую длину %1 симв. (участник обмена %2).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Факс", Значение, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", Контакт, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь; 
	РеквизитыБанка = "НомерСчета, НаимБанк, БИК";
	БанковскиеРеквизиты = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИменСхемы);
	СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИменСхемы);
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровУчастника.БанковскийСчет Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) И Найти(РеквизитыБанка, ЭлементСтруктуры.Ключ) > 0 Тогда
			Если ЭлементСтруктуры.Ключ = "НомерСчета" Тогда
				ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ,ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СвБанк, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ,ТекстОшибки);
			КонецЕсли;
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "СвБанк", СвБанк, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанковскиеРеквизиты, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Функция ЗаполнитьДанныеУчастникаФНСДляЭСФCML(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника.ЭтоФизЛицо) = Тип("Булево") Тогда
		ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);
		
		Если СтруктураПараметровУчастника.ЭтоФизЛицо Тогда
			СвФЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", СтруктураПараметровУчастника.ИНН, ,ТекстОшибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураПараметровУчастника.Фамилия,Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураПараметровУчастника.Имя, Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураПараметровУчастника.Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
		Иначе
			СвЮЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СтруктураПараметровУчастника.НаименованиеОрганизации,  ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СтруктураПараметровУчастника.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СтруктураПараметровУчастника.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Адрес = "";
	Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
		ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ВерсияСхемы = "4.01", ИмяСвойства = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяСвойства) Тогда
		ИмяСвойства = ВидКонтрагента;
	КонецЕсли;
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);
	ИдКонтрагента = ОбменСКонтрагентамиПереопределяемый.ПолучитьИДКонтрагента(ДанныеКонтрагента, ВидКонтрагента);
	ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, Истина, ТекстОшибки);
	
	// Заполнение реквизитов юридического или физического лица.
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);
	
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	Если НЕ ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) ИЛИ ПустаяСтрока(ПолноеНаименование) Тогда
		ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
	КонецЕсли;
	
	РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФизЛицо", "ЮрЛицо");
	РеквизитыКонтрагентаXDTO = ПолучитьОбъектТипаCML("Контрагент."+РеквизитыКонтрагентаИмя, ВерсияСхемы);
	
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ПолноеНаименованиеИмя, ПолноеНаименование, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ИНН", ДанныеЮрФизЛица.ИНН, , ТекстОшибки);
	
	Если НЕ ЭтоФизЛицо Тогда
		// КПП есть только в реквизитах ЮрЛица
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "КПП", ДанныеЮрФизЛица.КПП, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ОКПО", ДанныеЮрФизЛица.КодПоОКПО, , ТекстОшибки);
	КонецЕсли;
	
	// Юр.адрес или адрес регистрации.
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ЮридическийАдрес) Тогда
		
		ЮридическийАдресИмя  = ?(ЭтоФизЛицо, "АдресРегистрации", "ЮридическийАдрес");
		ЮридическийАдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		
		ЗаполнитьСвойствоXDTO(ЮридическийАдресXDTO, "Представление", ДанныеЮрФизЛица.ЮридическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ЮридическийАдресИмя, ЮридическийАдресXDTO, , ТекстОшибки);
		
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, РеквизитыКонтрагентаИмя, РеквизитыКонтрагентаXDTO, , ТекстОшибки);
	
	// РасчетныеСчета.
	РасчСчет = Неопределено;
	Если ((ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетОрганизации", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетКонтрагента", РасчСчет))
		ИЛИ (ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузополучателя", РасчСчет)))
		И ЗначениеЗаполнено(РасчСчет) Тогда
		
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемы);
		РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "НомерСчета", РасчСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", РасчСчет.Банк.КоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", РасчСчет.Банк.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК", РасчСчет.Банк.Код, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "Банк", Банк, Истина, ТекстОшибки);
		
		// Банк корреспондент
		Если ЗначениеЗаполнено(РасчСчет.БанкДляРасчетов) Тогда
			БанкКорр = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорр, "СчетКорреспондентский", РасчСчет.БанкДляРасчетов.КоррСчет, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "Наименование", РасчСчет.БанкДляРасчетов.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "БИК", РасчСчет.БанкДляРасчетов.Код, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РасчетныйСчет, "БанкКорреспондент", БанкКорр, , ТекстОшибки);
		КонецЕсли;
		
		РасчетныеСчета.РасчетныйСчет.Добавить(РасчетныйСчет);
		ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);
	КонецЕсли;
	
	// Адрес
	Если ТипЗнч(ДанныеЮрФизЛица) = Тип("Структура") И ДанныеЮрФизЛица.Свойство("ФактическийАдрес")
		И ЗначениеЗаполнено(ДанныеЮрФизЛица.ФактическийАдрес) Тогда
		
		АдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", ДанныеЮрФизЛица.ФактическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресXDTO, , ТекстОшибки);
	КонецЕсли;
	
	// Контакты организации
	Если (ВидКонтрагента = "Организация") Тогда
		ТаблицаКонтактов = ОбменСКонтрагентамиПереопределяемый.ПолучитьКонтактнуюИнформацию(ДанныеКонтрагента);
		Если ТаблицаКонтактов.Количество()>0 Тогда
			Контакты = ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемы);
			ЕстьКонтакты = Ложь;
			Для Каждого СтрокаКонтакта Из ТаблицаКонтактов Цикл
				Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемы);
				ТекстОшибки = "";
				Если СтрокаКонтакта.Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"EmailОрганизации") Тогда
						
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Почта");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип", Тип, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ТелефонОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", НСтр("ru = 'Телефон рабочий'"));
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ФаксОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Факс");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
					
				КонецЕсли;
				Если ТекстОшибки="" Тогда
					Контакты.Контакт.Добавить(Контакт);
					ЕстьКонтакты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьКонтакты Тогда
				ЗаполнитьСвойствоXDTO(Контрагент, "Контакты",	Контакты, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Функция ЗаполнитьДанныеГрузоотправителяПолучателяЭСФCML(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	Перем ЭтоФизЛицо, Адрес, НаименованиеОрганизации, Фамилия, Имя, Отчество;
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника) = Тип("Структура")
		И СтруктураПараметровУчастника.Свойство("ЭтоФизЛицо", ЭтоФизЛицо) И ТипЗнч(ЭтоФизЛицо) = Тип("Булево") Тогда
		НаимГОП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);
		Если ЭтоФизЛицо Тогда
			ФИОИП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП.ФИОИП",  ПространствоИменСхемы);
			СтруктураПараметровУчастника.Свойство("Фамилия", Фамилия);
			СтруктураПараметровУчастника.Свойство("Имя", Имя);
			СтруктураПараметровУчастника.Свойство("Отчество", Отчество);
			ЗаполнитьСвойствоXDTO(ФИОИП, "Фамилия", Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИОИП, "Имя", Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИОИП, "Отчество", Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(НаимГОП, "ФИОИП", ФИОИП, Истина, ТекстОшибки);
		Иначе
			СтруктураПараметровУчастника.Свойство("НаименованиеОрганизации", НаименованиеОрганизации);
			ЗаполнитьСвойствоXDTO(НаимГОП, "НаимОрг", НаименованиеОрганизации, Истина ,ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "НаимГОП", НаимГОП, Истина, ТекстОшибки);
		
		Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
			ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
		КонецЕсли;
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура ЗаполнитьАдресФНС(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы)
	
	Если ТипЗнч(АдресМестонахождения) = Тип("СписокЗначений") Тогда
		ЗаполненныйТип = Неопределено;
		Для Каждого Элемент Из АдресМестонахождения Цикл
			Если Элемент.Пометка Тогда
				ЗаполненныйТип = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
			АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
			СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);
			Адрес = ЗаполненныйТип.Значение;
			Если ЗаполненныйТип.Представление = "Структурированный" Тогда
				АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", Адрес.КодРегион, СхемаСчетаФактуры, ТекстОшибки);
				РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
				Для Каждого Элемент Из Адрес Цикл
					Если Найти(РеквизитыАдреса, Элемент.Ключ) > 0 И ЗначениеЗаполнено(Элемент.Значение) Тогда
						ЗаполнитьСвойствоXDTO(АдрРФ, Элемент.Ключ, Элемент.Значение, , ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);
			ИначеЕсли НЕ СхемаСчетаФактуры И ЗаполненныйТип.Представление = "Произвольный" Тогда
				// В схеме ТОРГ-12 и Акт, адрес в виде строки передается в элементе схемы "АдрТекст".
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрТекст", Адрес.АдресСтрокой, , ТекстОшибки);
			Иначе
				// В схеме счета-фактуры, адрес в виде строки передается в элементе схемы "АдрИНО".
				АдресXDTO = ПолучитьОбъектТипаCML("АдресТип.АдрИНО", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(АдресXDTO, "КодСтр", Адрес.КодСтраны, СхемаСчетаФактуры, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрТекст", Адрес.АдресСтрокой, СхемаСчетаФактуры, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрИНО", АдресXDTO, СхемаСчетаФактуры, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML(Товар, СтруктураПараметров, ТекстОшибки, ВерсияСхемы = "4.01")
	
	// Формируем ИД товара.
	Если ЗначениеЗаполнено(СтруктураПараметров.Ид) Тогда
		ИДТовара = СтруктураПараметров.Ид;
	Иначе
		Номенклатура = СтруктураПараметров.Номенклатура;
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		
		ИДХарактеристики = ""; ИДУпаковки = "";
		Если СтруктураПараметров.Владелец().Колонки.Найти("Характеристика") <> Неопределено Тогда
			Характеристика = СтруктураПараметров.Характеристика;
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		КонецЕсли;
		Если СтруктураПараметров.Владелец().Колонки.Найти("Упаковка") <> Неопределено Тогда
			Упаковка = СтруктураПараметров.Упаковка;
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		КонецЕсли;
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Товар, "Ид", ИДТовара, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ШтрихКод") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", СтруктураПараметров.ШтрихКод, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Артикул") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Артикул", СтруктураПараметров.Артикул, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ИДТовара") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ИДТовара", СтруктураПараметров.ИДТовара, , ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Товар, "Наименование", СтруктураПараметров.Наименование, Истина, ТекстОшибки);
	
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", СтруктураПараметров.БазоваяЕдиницаКод, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование", СтруктураПараметров.БазоваяЕдиницаНаименование, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", СтруктураПараметров.БазоваяЕдиницаНаименованиеПолное, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", СтруктураПараметров.БазоваяЕдиницаМеждународноеСокращение, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Описание") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ДополнительныеРеквизиты") <> Неопределено
		И СтруктураПараметров.ДополнительныеРеквизиты <> Неопределено Тогда
		
		Для Каждого Элемент Из СтруктураПараметров.ДополнительныеРеквизиты Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Элемент.Ключ, Истина, ТекстОшибки);
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из Элемент.Значение Цикл
					// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
					Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
						Если ТипЗнч(ЭлементМассива) = Тип("СписокЗначений") Тогда
							ЗаполненныйТип = Неопределено;
							Для Каждого Элемент Из ЭлементМассива Цикл
								Если Элемент.Пометка Тогда
									ЗаполненныйТип = Элемент;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
								Адрес = ЗаполненныйТип.Значение;
								Если ЗаполненныйТип.Представление = "Структурированный" Тогда
									ЭлементМассива = СобратьАдрес(Адрес);
								Иначе
									ЭлементМассива = Адрес.АдресСтрокой;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЗначениеРеквизита.Значение.Добавить(ЭлементМассива)
				КонецЦикла;
			Иначе
				// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
				Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
					Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
						ЗаполненныйТип = Неопределено;
						Для Каждого Элемент Из Элемент.Значение Цикл
							Если Элемент.Пометка Тогда
								ЗаполненныйТип = Элемент;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
							Адрес = ЗаполненныйТип.Значение;
							Если ЗаполненныйТип.Представление = "Структурированный" Тогда
								Элемент.Значение = СобратьАдрес(Адрес);
							Иначе
								Элемент.Значение = Адрес.АдресСтрокой;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЗначениеРеквизита.Значение.Добавить(Элемент.Значение)
			КонецЕсли;
			
			Товар.ДополнительныеРеквизиты.Добавить(ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, СтруктураПараметров, ТекстОшибки, МассивКолонок)
	
	Для каждого Колонка Из МассивКолонок Цикл
		Если Колонка = "ВидОплаты" Тогда
			
			Если СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", НСтр("ru = 'Аванс (до обеспечения)'"))
				ИЛИ СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", НСтр("ru = 'Аванс (до подтверждения)'")) Тогда
				ВариантОплаты = "Аванс";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", НСтр("ru = 'Кредит (после отгрузки)'"))
				ИЛИ СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", НСтр("ru = 'Кредит (после поступления)'")) Тогда
				ВариантОплаты = "Кредит";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", НСтр("ru = 'Предоплата (до отгрузки)'"))
				ИЛИ СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", НСтр("ru = 'Предоплата (до поступления)'")) Тогда
				ВариантОплаты = "Предоплата";
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ВидОплаты", ВариантОплаты, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ДатаПлатежа" Тогда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ДатаПлатежа", XMLДата(СтруктураПараметров.ДатаПлатежа), Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ПроцентПлатежа" Тогда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ПроцентПлатежа", СтруктураПараметров.ПроцентПлатежа, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "СуммаПлатежа" Тогда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"СуммаПлатежа", СтруктураПараметров.СуммаПлатежа, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураПараметров, ТекстОшибки)
	
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СокрЛП(СтруктураПараметров.ЕдиницаИзмеренияКод), , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование", СтруктураПараметров.ЕдиницаИзмеренияНаименование, ,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент", СтруктураПараметров.Коэффициент, , ТекстОшибки);
	
КонецПроцедуры

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
			|Ошибка установки значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 2);
	КонецПопытки
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция ДатаДД_ММ_ГГГГ(ДатаВремя)
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДЛФ=D");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции

Функция ВернутьНомерВерсииИзИдЭД(ИдОтправителя)
	
	НомерВерсии = 0;
	НачПозиция = Найти(ИдОтправителя, "##");
	Если НачПозиция > 0 Тогда
		НомерВерсии = Сред(ИдОтправителя, НачПозиция + 2, СтрДлина(ИдОтправителя) - (НачПозиция + 1));
	КонецЕсли;
	
	Возврат НомерВерсии;
	
КонецФункции

Процедура ЗаполнитьРасчетныйСчетПоставщика(ДеревоДанных, Контрагент, ПространствоИменСхемы, ТекстОшибки)
	
	НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета");
	
	СтруктураСчет = Новый Структура("НомерСчета, БИК, СчетКорреспондентский, НаименованиеБанка, БикКорр,
			|СчетКорр, НаименованиеКорр");
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		
		// заполняем расчетный счет
		СтруктураСчет.НомерСчета = НомерСчета;
		
		// заполняем банк
		
		БикБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК", Ложь);
		Если ЗначениеЗаполнено(БикБанка) Тогда
			СтруктураСчет.БИК = БикБанка;
		КонецЕсли;
		
		СчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", Ложь);
		Если ЗначениеЗаполнено(СчетКорреспондентский) Тогда	
			СтруктураСчет.СчетКорреспондентский = СчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование", Ложь);
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			СтруктураСчет.НаименованиеБанка = НаименованиеБанка;
		КонецЕсли;
		
		// заполняем банк корреспондент
		
		БикКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК");
		
		Если ЗначениеЗаполнено(БикКорБанка) Тогда
			СтруктураСчет.БикКорр = БикКорБанка;
		КонецЕсли;
		
		КорСчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский");
		Если ЗначениеЗаполнено(КорСчетКорреспондентский) Тогда
			СтруктураСчет.СчетКорр = КорСчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование");
		Если ЗначениеЗаполнено(НаименованиеКорБанка) Тогда
			СтруктураСчет.НаименованиеКорр =  НаименованиеКорБанка;
		КонецЕсли;
		
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", СтруктураСчет.НомерСчета, Истина,ТекстОшибки);
		
		СвБанк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвБанк, "Наименование", СтруктураСчет.НаименованиеБанка, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвБанк, "БИК", СтруктураСчет.БИК, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвБанк, "СчетКорреспондентский", СтруктураСчет.СчетКорреспондентский, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Банк", СвБанк, Истина, ТекстОшибки);
		
		БанкКорреспондент = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(БанкКорреспондент, "Наименование", СтруктураСчет.НаименованиеКорр, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БанкКорреспондент, "БИК", СтруктураСчет.БикКорр, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БанкКорреспондент, "СчетКорреспондентский", СтруктураСчет.СчетКорр, ,ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "БанкКорреспондент", БанкКорреспондент, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныйСчет", БанковскиеРеквизиты, , ТекстОшибки);
	
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// CML

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = ЭлектронноеВзаимодействиеСлужебный.МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьЗначениеТипаCML(Тип, Значение)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипЗначения = ПолучитьТипЗначенияCML(Тип);
	Иначе
		ТипЗначения = Тип;
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	НовоеЗначение = ФабрикаXDTO.Создать(ТипЗначения, Значение);
	
	Возврат НовоеЗначение;
	
КонецФункции


Процедура ДобавитьВЗначенияРеквизитовДокумента(НаименованиеРеквизита, ДобавляемоеЗначение, ДокументXDTO)
	
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	ЗначенияРеквизитаДокумента = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
	ЗначенияРеквизитаДокумента.Наименование = НаименованиеРеквизита;
	
	Если ТипЗнч(ДобавляемоеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ДобавляемоеЗначение Цикл
			ЗначенияРеквизитаДокумента.Значение.Добавить(ЭлементМассива);
		КонецЦикла;
	ИначеЕсли Найти(НаименованиеРеквизита, "СтавкаНДС") > 0 Тогда
		ЗначенияРеквизитаДокумента.Значение.Добавить(ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, ДобавляемоеЗначение));
		
	Иначе
		ЗначенияРеквизитаДокумента.Значение.Добавить(ДобавляемоеЗначение)
		
	КонецЕсли;
	
	Если ДокументXDTO.ЗначенияРеквизитов = Неопределено Тогда
		
		Если ДокументXDTO.Тип() = ПолучитьТипОбъектаCML("Документ", ПространствоИменСхемы) Тогда
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.ЗначенияРеквизитов", ПространствоИменСхемы);
			
		ИначеЕсли ДокументXDTO.Тип() = ПолучитьТипОбъектаCML("ПакетПредложений", ПространствоИменСхемы) Тогда
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("ПакетПредложений.ЗначенияРеквизитов", ПространствоИменСхемы);
	
		Иначе
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
		КонецЕсли;
		
		ДокументXDTOЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
		
		ДокументXDTO.ЗначенияРеквизитов = ДокументXDTOЗначенияРеквизитов;
	Иначе
		
		ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипЦены(СтрокаДерева, ТипЦеныXDTO)
	
	ТипЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ТипЦены");
	ИдТипаЦены = Строка(ТипЦены.УникальныйИдентификатор());
	ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Ид", ИдТипаЦены);
	
	Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.Наименование");
	ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Наименование", Наименование);
	
	Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.Валюта");
	ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Валюта", Валюта);
	
	Налог = ВеткаТаблицыВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ВключаетНДС");
	Если Не ЗначениеЗаполнено(Налог) Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	
	
	НалогТипаЦены =  ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены.Налог", ПространствоИменСхемы);
	
	
	ЗаполнитьСвойствоXDTO(НалогТипаЦены, "Наименование", "НДС");
	
	УчтеноВСумме = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ВключаетНДС");
	ЗаполнитьСвойствоXDTO(НалогТипаЦены, "УчтеноВСумме", УчтеноВСумме);
	
	
	ЗаполнитьСвойствоXDTO(НалогТипаЦены, "Акциз", Ложь);
	
	ТипЦеныXDTO.Налог.Добавить(НалогТипаЦены);
	
КонецПроцедуры

Функция СтавкаНДСXDTO(ЗначениеСтавки)
	
	СтавкиФНС = Новый Соответствие;
	СтавкиФНС.Вставить("0", "0%");
	СтавкиФНС.Вставить("10", "10%");
	СтавкиФНС.Вставить("18", "18%");
	СтавкиФНС.Вставить("10/110", "10/110");
	СтавкиФНС.Вставить("18/118", "18/118");
	СтавкиФНС.Вставить(ВРег(НСтр("ru = 'без НДС'")), НСтр("ru = 'без НДС'"));
	
	СтавкаXDTO = СтавкиФНС.Получить(ВРег(ЗначениеСтавки));
	
	Возврат СтавкаXDTO;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Дерево значений

Функция ВеткаТаблицыВДереве(СтрокаДерева, ИмяРеквизита)
	
	НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита,"ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока;
	КонецЕсли;

КонецФункции

Функция ПустаяТаблицаДерева(ТаблицаТипыЦен)
	
	ТаблицаПустая = Ложь;
	
	Если ТаблицаТипыЦен = Неопределено Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	Если ТаблицаТипыЦен.Строки.Количество() = 0 Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	ЗначениеНомераСтройки = ТаблицаТипыЦен.Строки[0].Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеНомераСтройки) Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	Возврат ТаблицаПустая;
	
КонецФункции

Процедура УдалитьПрочитатьАктОПриемкеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоСуммаОбщая = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаОбщая");
		Если СвойствоСуммаОбщая <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СвойствоСуммаОбщая));
		КонецЕсли;
		СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
		Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Если СвойствоЭД <> Неопределено Тогда
		Исполнитель = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Если СвойствоЭД <> Неопределено Тогда
		Заказчик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ТекстДокумента");
	Если СвойствоЭД <> Неопределено Тогда
		ТекстДокумента = ЭД.Получить(СвойствоЭД);
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Заголовок");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("ОписаниеВыполненныхРабот");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОписаниеВыполненныхРабот", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Претензии");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьАкт501XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	
	Исполнитель = ЭД.Документ.СвАктИ.Исполнитель;
	Если Исполнитель <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
		КонецЕсли;
	КонецЕсли;
	
	Заказчик = Неопределено;
	Если НЕ ЭД.Документ.СвАктИ.Свойства().Получить("Заказчик") = Неопределено Тогда
		Заказчик = ЭД.Документ.СвАктИ.Заказчик;
	ИначеЕсли ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		Заказчик = ДанныеЗаказчикаИзДопДанных(ДеревоДопДанных);
	КонецЕсли;
	
	Если Заказчик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
		КонецЕсли;
	КонецЕсли;
		
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Если Организация = Неопределено Тогда // получен Акт из не-1С системы, подставим Организацию по ИД
		УстановитьПривилегированныйРежим(Истина);
		ИдЗаказчика = ЭД.СвУчДокОбор.ИдПок;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		               |	ПрофилиНастроекЭДО.Организация
		               |ИЗ
		               |	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		               |ГДЕ
		               |	ПрофилиНастроекЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации";
		Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдЗаказчика);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОрганизацияПоИД = Выборка.Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОрганизацияПоИД) Тогда
			Организация = ОрганизацияПоИД;
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Организации");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", Организация.Код);
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдЗаказчика, НСтр("ru = 'ИД организации:'") + " " + ИдЗаказчика,
				Организация, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Организация", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	Структура = Новый Структура("Организация", Организация);
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация);
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвАктИ.НомАкт);
	ДатаДок = ЭД.Документ.СвАктИ.ДатаАкт;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ДатаДок));
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ЭД.Документ.СвАктИ.Заголовок);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Если ЭД.Документ.СвАктИ.Сдал <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвАктИ.Сдал.ДатаИсполн;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсполнения", ДатаИзСтроки(ДатаДок));
		КонецЕсли;
		
		Если ЭД.Документ.СвАктИ.Сдал.ПодписьИсполн <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалДолжность", ЭД.Документ.СвАктИ.Сдал.ПодписьИсполн.Должность);
			ФИО = ЭД.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалФИО", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	НаборДанныхОписанияРабот = ЭД.Документ.СвАктИ.ОписРабот;
	СуммаДокумента = 0;
	Если ТипЗнч(НаборДанныхОписанияРабот) = Тип("СписокXDTO") Тогда
		Сч = 1;
		Для Каждого ЭлементОписания Из НаборДанныхОписанияРабот Цикл
			
			СписокОписаний = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "СписокОписаний");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "НачРабот",  ЭлементОписания.НачРабот);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "КонРабот",  ЭлементОписания.КонРабот);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "Сумма",     ЭлементОписания.СумБезНДСИт);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаНДС",  ЭлементОписания.СумНДСИт);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаСНДС", ЭлементОписания.СумУчНДСИт);
			
			СуммаДокумента = СуммаДокумента + ?(ЗначениеЗаполнено(ЭлементОписания.СумУчНДСИт), ЭлементОписания.СумУчНДСИт, 0);
			
			// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
			АвторЭДПокупатель = Ложь;
			ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
			
			НаборДанных = ЭлементОписания.Работа;
			Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
				Для Каждого Элемент Из НаборДанных Цикл
					НаимТовара = ""; ИдТовара = "";
					ЕстьДопРеквизиты = Ложь;
					
					СписокТЧ = Новый СписокЗначений;
					СписокТЧ.Добавить(Элемент.Номер,      "Номер");
					Если ЗначениеЗаполнено(Элемент.НаимРабот) Тогда
						СписокТЧ.Добавить(Элемент.НаимРабот,  "Наименование");
					КонецЕсли;
					СписокТЧ.Добавить(Элемент.Количество, "Количество");
					СписокТЧ.Добавить(Элемент.Цена,       "Цена");
					СписокТЧ.Добавить(Элемент.СумБезНДС,  "Сумма");
					СписокТЧ.Добавить(Элемент.СумНДС,     "СуммаНДС");
					СписокТЧ.Добавить(Элемент.СумУчНДС,   "СуммаСНДС");
					СписокТЧ.Добавить(Элемент.Описание,   "Описание");
					СписокТЧ.Добавить(Элемент.НаимЕдИзм,  "ЕдиницаИзмеренияНаименование");
					СписокТЧ.Добавить(Элемент.ОКЕИ,       "ЕдиницаИзмеренияКод");
					
					// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
					Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
						Если Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
							// В инф.поле xml-строка неактуального формата.
							ОбъектXML = Новый ЧтениеXML;
							Попытка
								ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
								УслугаXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
								СписокТЧ.Добавить(УслугаXDTO["Ид"], "ИД");
							Исключение
								ВидОперации = НСтр("ru = 'Чтение неактуального формата Акт.'");
								ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
								ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
								ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 2);
							КонецПопытки;
						Иначе
							// В инф.поле xml-строка Актуального формата.
							ИнфПол = Элемент.ИнфПолСтр;
							ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Услуги", Строка(Сч) + "." + Элемент.Номер);
						КонецЕсли;
					КонецЕсли;
					
					ИдТовара = "";
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Строка(Сч) + "." + Элемент.Номер, "Услуги", Ошибка);
					
					РеквизитыНоменклатуры = Новый Структура;
					РеквизитыЕдиницыИзмерения = Новый Структура;
					РеквизитыБазовойЕдиницыИзмерения = Новый Структура;
					
					ДокументОснованиеНайден = Ложь;
					
					Для Каждого ЭлементСЗ Из СписокТЧ Цикл
						
						// Номенклатура.
						Если ЭлементСЗ.Представление = "Наименование" Тогда
							РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаКод" Тогда
							РеквизитыБазовойЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаНаименование" Тогда
							РеквизитыБазовойЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ОКЕИ_Тов" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
							ИдТовара = ЭлементСЗ.Значение;
						ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
							ЭлементСЗ.Значение = ЭлементСЗ.Значение;
						ИначеЕсли ЭлементСЗ.Представление = "ИдентификаторДокументаОснования"
							И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
							И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
							// Актуальный алгоритм передачи связки с документами-основаниями.
							// В качестве идентификатора документа-основания во входящем ЭД приходит
							// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
							// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
							// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
							// будет найдена.
							СтруктураОтбора = Новый Структура;
							СтруктураОтбора.Вставить("Организация",   Организация);
							СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
							ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСЗ.Значение, СтруктураОтбора);
							Если ДокументОснование <> Неопределено Тогда
								СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
								ДокументОснованиеНайден = Истина;
							КонецЕсли;
						ИначеЕсли ЭлементСЗ.Представление = "ИДЭДДокументаОснования"
							И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
							И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
							
							ДокументОснование = ПолучитьДокументОснование(ЭлементСЗ.Значение, Структура);
							Если ДокументОснование <> Неопределено Тогда
								СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
								ДокументОснованиеНайден = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					НаимРабот = "";
					РеквизитыНоменклатуры.Свойство("Наименование", НаимРабот);
					КодЕдИзм = "";
					Если РеквизитыБазовойЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
						НаименованиеЕдИзм = "";
						РеквизитыБазовойЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
							РеквизитыБазовойЕдиницыИзмерения);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм), НаименованиеЕдИзм,
							ЕдИзм, РеквизитыБазовойЕдиницыИзмерения, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
					
					КодЕдИзм = "";
					Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
						НаименованиеЕдИзм = "";
						РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
							РеквизитыЕдиницыИзмерения);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(КодЕдИзм),
							НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
					
					// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
					Если ИдентификацияПоНоменклатуреКомпании Тогда
						СтруктураИд = РазобратьИДТовара(ИдТовара);
						Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Иначе
						// Номенклатура поставщиков.
						РеквизитыНоменклатурыПоставщика = Новый Структура;
						ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
						ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
						
						РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
						
						Если ЗначениеЗаполнено(НаимРабот) Тогда
							РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимРабот);
							
							// Если пришел пустой ИД, используем вместо него наименование товара.
							// Актуально для входящих ЭД из учетных систем отличных от 1С.
							Если Не ЗначениеЗаполнено(ИдТовара) Тогда
								ИдТовара = ВРег(СтрЗаменить(НаимРабот, " ", "")) + "####";
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ИдТовара) Тогда
							
							РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
							
							НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
							РеквизитыНоменклатурыПоставщика);
							
							НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
							НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, НоменклатураПоставщика,
							РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
							
							Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
								РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
								РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
							КонецЕсли;
							СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
							ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
							
							Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Номенклатура) Тогда
						
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, Номенклатура,
						РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
						
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
						
					КонецЕсли;
					
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(СписокОписаний, "Работа", СписокТЧ);
					
				КонецЦикла;
			КонецЕсли;
			Сч = Сч + 1;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СписокОписаний", СписокОписаний);
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьАкт501ЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если ЭД.Документ.СвАктИ.Принял <> Неопределено Тогда
		Если ЭД.Документ.СвАктИ.Принял.ДатаЗаказ <> Неопределено Тогда
			ДатаДок = ЭД.Документ.СвАктИ.Принял.ДатаЗаказ;
			ДатаПолучения = ДатаИзСтроки(ДатаДок);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		КонецЕсли;
		Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.НомДоверен);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		ИначеЕсли ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялДолжность", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.Должность);
			ФИО = ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвАктИ.Принял.Претенз <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ЭД.Документ.СвАктИ.Принял.Претенз);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);
	ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ДатаДок));
	
	СуммаДокумента = 0;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс;
	ИначеЕсли ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск;
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИДФайл);
	
	Грузоотправитель = Неопределено;
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвТНО.Поставщик;
	Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);
		ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);
		Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
		Если Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);
			КонецЕсли;
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	Если Грузоотправитель <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
		Если ДопПараметрыГрузоотправителя.Количество() > 0 Тогда
			ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);
			Если ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита) Тогда
				СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаГрузоотправителя <> Неопределено Тогда
					Для Каждого ДопПараметр Из ДопПараметрыГрузоотправителя Цикл
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаГрузоотправителя, ДопПараметр.Ключ, ДопПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
	// но один из этих элементов обязательно должен быть заполнен
	// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
	Если Поставщик = Неопределено Тогда
		Поставщик = Грузоотправитель;
	КонецЕсли;
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Плательщик = ЭД.Документ.СвТНО.Плательщик;
	Если Плательщик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Структура = Новый Структура("Организация", Организация);
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНО.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация);
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.Основание <> Неопределено Тогда
		ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;
		Если ЗначениеЗаполнено(ДатаПоДаннымКлиента) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Документ.СвТНО.ОКУДПервДок);
	
	Если ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаНеттоПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.НеттоПр);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);
		ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", ДатаИзСтроки(ДатаДок));
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);
	КонецЕсли;
	
	НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
			
		ИдентификаторыСтрокСерии = ИдентификаторыСерийНоменклатуры();

		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			СписокТЧ.Добавить(Элемент.НомТов,      "Номер");
			СписокТЧ.Добавить(Элемент.НаимТов,     "Наименование");
			СписокТЧ.Добавить(Элемент.ХарактерТов, "НаименованиеХарактеристики");
			СписокТЧ.Добавить(Элемент.СортТов,     "Сорт");
			СписокТЧ.Добавить(Элемент.АртикулТов,  "Артикул");
			СписокТЧ.Добавить(Элемент.НаимЕдИзм,   "ЕдиницаИзмеренияНаименование");
			СписокТЧ.Добавить(Элемент.ОКЕИ_Тов,    "ЕдиницаИзмеренияКод");
			СписокТЧ.Добавить(Элемент.КодТов,      "ТоварКод");
	
			СписокТЧ.Добавить(Элемент.Нетто,     "Количество");
			СписокТЧ.Добавить(Элемент.КолМест,   "Мест");
			СписокТЧ.Добавить(Элемент.ВидУпак,   "Упаковка");
			СписокТЧ.Добавить(Элемент.Место,     "КоличествоВОдномМесте");
			СписокТЧ.Добавить(Элемент.Нетто,     "МассаНетто");
			СписокТЧ.Добавить(Элемент.Брутто,    "МассаБрутто");
			СписокТЧ.Добавить(Элемент.Цена,      "Цена");
			СписокТЧ.Добавить(Элемент.СумБезНДС, "Сумма");
			СписокТЧ.Добавить(Элемент.СумНДС,    "СуммаНДС");
			СписокТЧ.Добавить(Элемент.СумУчНДС,  "СуммаСНДС");
			
			// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
			Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
				
				СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				
				// В инф.поле xml-строка неактуального формата.
				ОбъектXML = Новый ЧтениеXML;
				Попытка
					ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
					ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					РазобратьСтрокуТЧCML(ТоварXDTO, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Элемент.НомТов);
				Исключение
					ВидОперации = НСтр("ru = 'Чтение неактуального формата ТОРГ-12.'");
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 2);
				КонецПопытки;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
					// В инф.поле xml-строка Актуального формата.
					ИнфПол = Элемент.ИнфПолСтр;
					ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Элемент.НомТов);
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Элемент.НомТов, "Товары", Ошибка);
				КонецЕсли;
				РеквизитыНоменклатуры = Новый Структура;
				РеквизитыЕдиницыИзмерения = Новый Структура;
				ИдТовара = "";
				СтавкаНДСПереданаДопПараметром = Ложь;
				ДокументОснованиеНайден = Ложь;
				Для Каждого ЭлементСЗ Из СписокТЧ Цикл
					
					// Номенклатура.
					Если ЭлементСЗ.Представление = "Наименование" Тогда
						РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "НаименованиеХарактеристики" Тогда
						РеквизитыНоменклатуры.Вставить("НаименованиеХарактеристики", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
						РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ТоварКод" Тогда
						РеквизитыНоменклатуры.Вставить("ТоварКод", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Сорт" Тогда
						РеквизитыНоменклатуры.Вставить("Сорт", ЭлементСЗ.Значение);
						
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ОКЕИ_Тов" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						
					ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
						ИдТовара = ЭлементСЗ.Значение;
					ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
						ЭлементСЗ.Значение = ЭлементСЗ.Значение;
						СтавкаНДСПереданаДопПараметром = Истина;
					ИначеЕсли ЭлементСЗ.Представление = "ИдентификаторДокументаОснования"
						И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
						И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
						// Актуальный алгоритм передачи связки с документами-основаниями.
						// В качестве идентификатора документа-основания во входящем ЭД приходит
						// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
						// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
						// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
						// будет найдена.
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("Организация",   Организация);
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСЗ.Значение, СтруктураОтбора);
						Если ДокументОснование <> Неопределено Тогда
							СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
							ДокументОснованиеНайден = Истина;
						КонецЕсли;
					ИначеЕсли ЭлементСЗ.Представление = "ИДЭДДокументаОснования"
						И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
						И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
						
						ДокументОснование = ПолучитьДокументОснование(ЭлементСЗ.Значение, Структура);
						Если ДокументОснование <> Неопределено Тогда
							СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
							ДокументОснованиеНайден = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Ставка НДС может прийти в доп. параметрах.
				Если НЕ СтавкаНДСПереданаДопПараметром Тогда
					СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				КонецЕсли;
				
				КодЕдИзм = "";
				Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
					НаименованиеЕдИзм = "";
					РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
					ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
						РеквизитыЕдиницыИзмерения);
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм),
						НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
				// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
				Если ИдентификацияПоНоменклатуреКомпании Тогда
					СтруктураИд = РазобратьИДТовара(ИдТовара);
					Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
						ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
							СтруктураИд.ИДХарактеристики);
						Если СписокТЧ.НайтиПоЗначению(ХарактеристикаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
						УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
							СтруктураИд.ИДУпаковки);
						Если СписокТЧ.НайтиПоЗначению(УпаковкаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Номенклатура поставщиков.
					РеквизитыНоменклатурыПоставщика = Новый Структура;
					
					ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
					ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
					РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
					
					НаименованиеИД = ""; ТоварКодИД = ""; АртикулИД = ""; НаименованиеХарактеристикиИД = "";
					Если РеквизитыНоменклатуры.Свойство("Наименование") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Наименование", РеквизитыНоменклатуры.Наименование);
						НаименованиеИД = ВРег(СтрЗаменить(РеквизитыНоменклатуры.Наименование, " ", ""));
					КонецЕсли;
					Если РеквизитыНоменклатуры.Свойство("ТоварКод") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("ТоварКод", РеквизитыНоменклатуры.ТоварКод);
						ТоварКодИД = ВРег(СтрЗаменить(РеквизитыНоменклатуры.ТоварКод, " ", ""));
					КонецЕсли;
					Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
						АртикулИД = ВРег(СтрЗаменить(РеквизитыНоменклатуры.Артикул, " ", ""));
					КонецЕсли;
					Если РеквизитыНоменклатуры.Свойство("НаименованиеХарактеристики") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("НаименованиеХарактеристики",
							РеквизитыНоменклатуры.НаименованиеХарактеристики);
						НаименованиеХарактеристикиИД = ВРег(СтрЗаменить(РеквизитыНоменклатуры.НаименованиеХарактеристики, " ", ""));
					КонецЕсли;
					
					// Если пришел пустой ИД, используем вместо него наименование товара.
					// Актуально для входящих ЭД из учетных систем отличных от 1С.
					Если Не ЗначениеЗаполнено(ИдТовара) Тогда
						ИдТовара = НаименованиеИД + "#" + НаименованиеХарактеристикиИД + "#" + ТоварКодИД + "#" +АртикулИД;
					КонецЕсли;
					
					РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
					НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
						РеквизитыНоменклатурыПоставщика);
					
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
						РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
					
					Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
						РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
					КонецЕсли;
					СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
					ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
					
					Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
					ХарактеристикаНоменклатуры = СтруктураРеквизитовТовара.Характеристика;
					Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
						СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока = ИдентификаторыСтрокСерии.Добавить();
				НоваяСтрока.Идентификатор = ИдТовара;
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.Характеристика = ХарактеристикаНоменклатуры;
				
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
					РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
				
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПрочитатьСерииНоменклатуры(НовыйЭД, ИдентификаторыСтрокСерии);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12ПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНП.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;
		ДатаПолучения = ДатаИзСтроки(ДатаДок);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		Если ВалютаXDTO <> Неопределено Тогда
			КодВалюты = ВалютаXDTO.КодОКВ;
			Если КодВалюты <> Неопределено Тогда
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
				
				ДопРеквизиты = Новый Структура;
				ДопРеквизиты.Вставить("Код", КодВалюты);
				ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
				ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
				ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
				
				Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
			
			Курс = ВалютаXDTO.Курс;
			Если Курс <> Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("СуммаВсего");
	Если СвойствоЭД <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузоотправитель");
	Если СвойствоЭД <> Неопределено Тогда
		Грузоотправитель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузополучатель");
	Если СвойствоЭД <> Неопределено Тогда
		Грузополучатель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузополучатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Если СвойствоЭД <> Неопределено Тогда
		Поставщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Плательщик");
	Если СвойствоЭД <> Неопределено Тогда
		Плательщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Основание");
	Если СвойствоЭД<>Неопределено Тогда
		Основание = ЭД.Получить(СвойствоЭД);
		Если НЕ Основание=Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Основание.ДатаДокументаОснования);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", Основание.НомерДокументаОснования);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ОКУД");
	Если СвойствоЭД<>Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписей = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписей");
		Если КоличествоЗаписей<>Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ИтогоПоДокументуXDTO.Получить(КоличествоЗаписей));
		КонецЕсли;
		КоличествоМест = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМест");
		Если КоличествоМест <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ИтогоПоДокументуXDTO.Получить(КоличествоМест));
		КонецЕсли;
		СуммаБезНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезНДС");
		Если СуммаБезНДС <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ИтогоПоДокументуXDTO.Получить(СуммаБезНДС));
		КонецЕсли;
		СуммаНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНДС");
		Если СуммаНДС <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ИтогоПоДокументуXDTO.Получить(СуммаНДС));
		КонецЕсли;
		СуммаСУчетомНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСУчетомНДС");
		Если СуммаСУчетомНДС <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСНДС", ИтогоПоДокументуXDTO.Получить(СуммаСУчетомНДС));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогиПрописьюXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписейПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписейПрописью");
		Если КоличествоЗаписейПрописью<>Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ИтогоПоДокументуXDTO.Получить(
				КоличествоЗаписейПрописью));
		КонецЕсли;
		КоличествоМестПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМестПрописью");
		Если КоличествоМестПрописью<>Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ИтогоПоДокументуXDTO.Получить(КоличествоМестПрописью));
		КонецЕсли;
		СуммаВсегоПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаВсегоПрописью");
		Если СуммаВсегоПрописью<>Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ИтогоПоДокументуXDTO.Получить(СуммаВсегоПрописью));
		КонецЕсли;
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Каталог.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Каталог.Ид);
	
	// Заполняем данные о владельце каталога.
	// Контрагент.
	Элемент = ЭД.Каталог.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя + "_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента,
		РеквизитыКонтрагента, ЭД.Каталог.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		РеквизитыПартнера = Новый Структура();
		РеквизитыПартнера.Вставить("Контрагент", Контрагент);
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
		ЗнДопАналитики = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
		
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем данные о товарах каталога.
	НаборДанных = ЭД.Каталог["Товары"].Товар;
	
	ПрочитатьДанныеТЧКаталогТоваров(НаборДанных, ЭД.Каталог, ДеревоРазбора, НовыйЭД, Ошибка);
	
	ПоместитьНеПодписанныеДанныеВШапку(НовыйЭД);
	
КонецПроцедуры

Процедура ПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.ДействительноС);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДействительноПо", ЭД.ДействительноДо);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	// Контрагент
	Владелец = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Роль = "Покупатель";
	ПрочитатьДанныеКонтрагентаCML(Владелец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль, РеквизитыКонтрагента);

	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДействительноС);
	
	// Товары
	НомерСтроки = 0;
	
	Предложения = ЭД.Предложения.ПолучитьСписок("Предложение");
	Для Каждого Элемент Из Предложения Цикл
		
		СписокТЧ = Новый СписокЗначений;
		НаименованиеТовара = "";
		ИдТовара           = "";
		АртикулТовара      = "";
		
		// Номенклатура.
		РеквизитыНоменклатуры = Новый Структура;
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		
		// Читаем доп данные строки т.ч.
		Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Организация", Организация);
		
		НомерСтроки = НомерСтроки + 1;
		ПрочитатьДопДанныеСтрокиТЧ(Элемент, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
 
		
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			// Разберем свойства Товара.
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ЗнДанных);
				ИдТовара = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
				РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
				РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					
					ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.НаименованиеКраткое);
					
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.НаименованиеКраткое, ЕдИзм,
						РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИдТовара) Тогда
			НайтиЗначениеВСписке(ИдТовара, "Ид", СписокТЧ);
			РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
		КонецЕсли;
		
		РеквизитыНоменклатурыПоставщика.Вставить("Наименование", РеквизитыНоменклатуры.Наименование);
		НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ИдТовара,
																								РеквизитыНоменклатурыПоставщика, ЭД.Ид);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, РеквизитыНоменклатурыПоставщика.Наименование,
														НоменклатураПоставщика, РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика,
			СтруктураРеквизитовТовара, ЭД.Ид);
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		КонецЕсли;
		
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара,
			РеквизитыНоменклатурыПоставщика.Наименование, Номенклатура, РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
		
		ЗначениеЦены = 0;
		ЕдиницаИзмерения = "";
		Цены = Элемент.Цены.ПолучитьСписок("Цена");
		Для Каждого Цена Из Цены Цикл
			ЗначениеЦены =Цена.ЦенаЗаЕдиницу;
			СписокТЧ.Добавить(ЗначениеЦены, "Цена");
			
			СвойствоКоличество = Цена.Свойства().Получить("МинКоличество");
			Если СвойствоКоличество<>Неопределено Тогда
				СписокТЧ.Добавить(Цена.МинКоличество, "Количество");
			КонецЕсли;
	
			ЗнДанных = Цена.Единица;
			
			Если Не ЗнДанных = Неопределено Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных);
				
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных, РеквизитыЕдИзм);
				
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					Наименование = ЕдИзм.Наименование;
				Иначе
					Наименование = "шт.";
				КонецЕсли;
				РеквизитыЕдИзм.Вставить("Наименование", Наименование);
				
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных, Наименование, ЕдИзм,
					РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		
	КонецЦикла;
	
	// Читаем таб. часть "Виды цен"
	ТаблицаТипыЦен = Новый ТаблицаЗначений;
	ТаблицаТипыЦен.Колонки.Добавить("ИдТипЦены");
	ТаблицаТипыЦен.Колонки.Добавить("ТипЦены");
	ТаблицаТипыЦен.Колонки.Добавить("Наименование");
	ТаблицаТипыЦен.Колонки.Добавить("Валюта");
	ТаблицаТипыЦен.Колонки.Добавить("ВключаетНДС");
	
	Для Каждого ТекСтрока Из ЭД.ТипыЦен.ТипЦены Цикл
		НоваяСтрока = ТаблицаТипыЦен.Добавить();
		НоваяСтрока.ТипЦены = ТекСтрока.Ид;
		НоваяСтрока.Наименование = ТекСтрока.Наименование;
		НоваяСтрока.Валюта = ТекСтрока.Валюта;
		Для Каждого Налог Из ТекСтрока.Налог Цикл
			НоваяСтрока.ВключаетНДС = Налог.УчтеноВСумме;
		КонецЦикла;
		
	КонецЦикла;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипыЦен", ТаблицаТипыЦен);
	
	ПоместитьНеПодписанныеДанныеВШапку(НовыйЭД);
	
КонецПроцедуры

Процедура УдалитьПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена.
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.ДействительноС);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	// Контрагент
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП.
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента, РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДействительноС);
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		РеквизитыПартнера = Новый Структура();
		РеквизитыПартнера.Вставить("Контрагент", Контрагент);
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
		ЗнДопАналитики = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
		
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Товары
	Предложения = ЭД.Предложения.ПолучитьСписок("Предложение");
	Для Каждого Элемент Из Предложения Цикл
		
		СписокТЧ = Новый СписокЗначений;
		НаименованиеТовара = "";
		ИдТовара           = "";
		АртикулТовара      = "";
		
		// Номенклатура.
		РеквизитыНоменклатуры = Новый Структура;
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			// Разберем свойства Товара.
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ЗнДанных);
				ИдТовара = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
				РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
				РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
						РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					
					ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
						РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыНоменклатурыПоставщика.Вставить("Наименование", РеквизитыНоменклатуры.Наименование);
		НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ИдТовара,
			РеквизитыНоменклатурыПоставщика, ЭД.Ид);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, РеквизитыНоменклатурыПоставщика.Наименование,
			НоменклатураПоставщика, РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика,
			СтруктураРеквизитовТовара, ЭД.Ид);
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		КонецЕсли;
		
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара,
			РеквизитыНоменклатурыПоставщика.Наименование, Номенклатура, РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
		
		ЗначениеЦены = 0;
		ЕдиницаИзмерения = "";
		Цены = Элемент.Цены.ПолучитьСписок("Цена");
		Для Каждого Цена Из Цены Цикл
			ЗначениеЦены = Цена.Цена;
			СписокТЧ.Добавить(ЗначениеЦены, "Цена");
			ЗнДанных = Цена.ЕдиницаИзмерения;
			
			РеквизитыЕдИзм = Новый Структура;
			РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
			РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
			СвойствоКоличество = Цена.Свойства().Получить("МинКоличество");
			Если СвойствоКоличество<>Неопределено Тогда
				СписокТЧ.Добавить(Цена.МинКоличество, "Количество");
			КонецЕсли;
			ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
				РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
	ТаблицаТипыЦен = Новый ТаблицаЗначений;
	ТаблицаТипыЦен.Колонки.Добавить("Валюта");
	ТаблицаТипыЦен.Колонки.Добавить("ВключаетНДС");
	
	Для Каждого ТекСтрока Из ЭД.ТипыЦен.ТипЦены Цикл
		НоваяСтрока = ТаблицаТипыЦен.Добавить();
		Если ТипЗнч(ТекСтрока.Валюта) = Тип("ОбъектXDTO") Тогда
			НоваяСтрока.Валюта = ТекСтрока.Валюта.КодОКВ;
		КонецЕсли;
		НоваяСтрока.ВключаетНДС = Ложь;
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипыЦен", ТаблицаТипыЦен);
	
КонецПроцедуры

Процедура ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Сумма);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", ЭД.СрокПлатежа);
	
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		
		КодВалюты = ЭД.Получить(СвойствоЭД);
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Если ЗначениеЗаполнено(Валюта) Тогда
				ДопРеквизиты.Вставить("Наименование", Валюта.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", Валюта.НаименованиеПолное);
			КонецЕсли;
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ЭД.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметрыКонтрагента = Неопределено;
	СвойствоРасчетныйСчет = ЗначениеДопРеквизитаДокумента("РасчетныйСчет", ЭД);
	
	Если Не СвойствоРасчетныйСчет = Неопределено Тогда
		СтруктураРасчетныйСчет =  РеквизитыРасчетногоСчета(СвойствоРасчетныйСчет, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
		ДопПараметрыКонтрагента = Новый Структура;
		ДопПараметрыКонтрагента.Вставить("РасчетныйСчет", СтруктураРасчетныйСчет);
		
	КонецЕсли;
	
	Для Каждого ТекКонтрагент Из ЭД.Контрагенты.Контрагент Цикл
		
		Если ТекКонтрагент.Роль = "Продавец" Тогда
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				Роль = "Продавец";
	
			ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Роль = "Покупатель";
			КонецЕсли;
	
		КонецЕсли;
		
		Если ТекКонтрагент.Роль = "Покупатель" Тогда
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				Роль = "Покупатель";
				
			ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Роль = "Продавец";
			КонецЕсли;
			
		КонецЕсли;
		
		ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль, ДопПараметрыКонтрагента);
		
	КонецЦикла;
	
	СуммаИтог = ЗначениеДопРеквизитаДокумента("СуммаИтог", ЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", СуммаИтог);
	
	СвойствоЭД = ЭД.Свойства().Получить("Налоги");
	НалогиДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаНалогаИтог = 0;
	СуммаВключаетНДС = Ложь;
	
	Для Каждого НалогДокумента Из НалогиДокументуXDTO.Налог Цикл
		
		СуммаНалогаИтог = СуммаНалогаИтог + НалогДокумента.Сумма;
		
		Если НалогДокумента.Наименование = "НДС" Тогда
			СуммаВключаетНДС = НалогДокумента.УчтеноВСумме;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", СуммаВключаетНДС);
	
	ИтогиПрописью = ЗначениеДопРеквизитаДокумента("ИтогиПрописью", ЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	Если СвойствоЭД <> Неопределено И ЭД.Получить(СвойствоЭД) <> Неопределено Тогда
		НаборДанных = ЭД["Товары"].Товар;
		ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
	КонецЕсли;
	
	Если ТипЗнч(ЭД.Подписанты) = Тип("ОбъектXDTO") Тогда
		Для Каждого Подписант Из ЭД.Подписанты.Подписант Цикл
			
			Если ВРег(Подписант.Должность) = ВРег("Руководитель") ИЛИ ВРег(Подписант.Должность) = ВРег("Директор") Тогда
				Руководитель = Подписант.Фамилия + " " + Подписант.Имя + " " + Подписант.Отчество;
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель);
			ИначеЕсли ВРег(Подписант.Должность) = ВРег("Бухгалтер") Тогда
				Бухгалтер = Подписант.Фамилия + " " + Подписант.Имя + " " + Подписант.Отчество;
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер);
			ИначеЕсли Подписант.Должность = Неопределено И Подписант.Фамилия <> "-" Тогда
				// Заполнение для индивидуального предпринимателя, для которого должность не указывается.
				Руководитель = Подписант.Фамилия + " " + Подписант.Имя + " " + Подписант.Отчество;
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СвойствоЭД = ЗначениеДопРеквизитаДокумента("ГрафикОплаты", ЭД);
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(СвойствоЭД, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	
	// Значения реквизитов
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка, ДопРеквизиты);
	
	Если Не ЭД.ЗначенияРеквизитов = Неопределено Тогда
		ПрочитатьСписокЗначенийРеквизитовCML(ЭД.ЗначенияРеквизитов.ЗначениеРеквизита, НовыйЭД, Ошибка, ДопРеквизиты);
	КонецЕсли;
	
	НомерДокументаОснования = ЗначениеДопРеквизитаДокумента("НомерДокументаОснования", ЭД);
	Если Не НомерДокументаОснования = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокументаОснования", НомерДокументаОснования);
	КонецЕсли;
	
	ДатаДокументаОснования = ЗначениеДопРеквизитаДокумента("ДатаДокументаОснования", ЭД);
	Если Не ДатаДокументаОснования = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокументаОснования", ДатаДокументаОснования);
	КонецЕсли;
	
	ВладелецДоговора = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	// Документы сделки
	ПрочитатьДокументыСделки(ДеревоРазбора, НовыйЭД, ВладелецДоговора, Ошибка);
	
КонецПроцедуры

Процедура УдалитьПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
			
	СвойствоЭД = ЭД.Свойства().Получить("НазначениеПлатежа");
	НазначениеПлатежа = ЭД.Получить(СвойствоЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОкончанияДействияСчета");
	ДатаОкончанияДействияСчета = ЭД.Получить(СвойствоЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", ДатаОкончанияДействияСчета);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		Если Не ВалютаXDTO = Неопределено Тогда
			КодВалюты = ВалютаXDTO.КодОКВ;
			Если КодВалюты <> Неопределено Тогда
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
				
				ДопРеквизиты = Новый Структура;
				ДопРеквизиты.Вставить("Код", КодВалюты);
				ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
				ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
				ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
				
				Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
			
			Курс = ВалютаXDTO.Курс;
			Если Курс <> Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Поставщик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Покупатель");
	Покупатель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог",      ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог <> Неопределено Тогда
		СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;
	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
		ЦенаВключаетНДС =  ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	Если СвойствоЭД <> Неопределено И ЭД.Получить(СвойствоЭД) <> Неопределено Тогда
		НаборДанных = ЭД["Товары"].Товар;
		УдалитьПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Руководитель");
	Если СвойствоЭД <> Неопределено Тогда
		Руководитель = ЭД.Получить(СвойствоЭД);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель.ПолноеНаименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Бухгалтер");
	Если СвойствоЭД <> Неопределено Тогда
		Бухгалтер = ЭД.Получить(СвойствоЭД);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер.ПолноеНаименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		УдалитьПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД <> Неопределено Тогда
		Для Каждого ДокументОснованияXDTO Из ЭД.ДокументОснования Цикл
			СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
			Если СвойствоНомерДокументаОснования <> Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокументаОснования", ДокументОснованияXDTO.НомерДокументаОснования);
			КонецЕсли;
			СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
			Если СвойствоДатаДокументаОснования <> Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокументаОснования", ДокументОснованияXDTO.ДатаДокументаОснования);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	Если ЭД.Роль = "Покупатель" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	ИначеЕсли ЭД.Роль = "Продавец" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Сумма);
	
	НазначениеПлатежа = ЗначениеДопРеквизитаДокумента("НазначениеПлатежа", ЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ВРег(ЭД.Роль) = ВРег("Покупатель") Тогда
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		Иначе
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		КонецЕсли;
		
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Если ВРег(ЭД.Роль) = ВРег("Покупатель") Тогда
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		Иначе
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекКонтрагент Из ЭД.Контрагенты.Контрагент Цикл
		
		Если ВРег(ТекКонтрагент.Роль) = ВРег("Покупатель") Тогда
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, РольКонтрагента);
		ИначеЕсли ВРег(ТекКонтрагент.Роль) = ВРег("Продавец") Тогда
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, РольОрганизации);
		Иначе
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Получатель");
		КонецЕсли;
		
	КонецЦикла;
	
	// Читаем товары.
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	НаборДанных = ЭД["Товары"].Товар;
	
	ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
		
	// Значения реквизитов.
	Если Не ЭД.ЗначенияРеквизитов = Неопределено Тогда
		ПрочитатьСписокЗначенийРеквизитовCML(ЭД.ЗначенияРеквизитов.ЗначениеРеквизита, НовыйЭД, Ошибка, ДопРеквизиты);
	КонецЕсли;
	
	// Читаем доп данные из xdto  и помещаем их в шапку в дерево значений
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка, ДопРеквизиты);
	
	// Договор контрагента
	ДоговорНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорНомер");
	ДоговорДата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорДата");
	Если ЗначениеЗаполнено(ДоговорДата) Тогда
		ДоговорДата = ДатаИзСтроки(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорДата"));
	КонецЕсли;

	ВладелецДоговора = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
		
	РеквизитыДоговора = Новый Структура;
	РеквизитыДоговора.Вставить("НомерДоговора", ДоговорНомер);
	РеквизитыДоговора.Вставить("ДатаДоговора", ДоговорДата);
	РеквизитыДоговора.Вставить("Владелец", ВладелецДоговора);
	
	ДобавитьДоговорВДеревоДокумента(РеквизитыДоговора, НовыйЭД, ДеревоРазбора, Ошибка);
	
	ПрочитатьДокументыСделки(ДеревоРазбора, НовыйЭД, ВладелецДоговора, Ошибка);
	
	// Банковский счет 
	Если РольОрганизации = "Продавец" Тогда
		ВладелецБС = "Организация";
		ТипСчета = "БанковскиеСчетаОрганизаций";
		ИмяСчета = "БанковскийСчетОрганизации";
	Иначе
		ВладелецБС = "Контрагент";
		ТипСчета = "БанковскиеСчетаКонтрагентов";
		ИмяСчета = "БанковскийСчетКонтрагента";
	КонецЕсли;
	
	ВладелецСчета = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, ВладелецБС);
	
	СвойствоРасчетныйСчет = ЗначениеДопРеквизитаДокумента("РасчетныйСчет", ЭД);
	Если Не СвойствоРасчетныйСчет = Неопределено Тогда
		СтруктураРасчетныйСчет = РеквизитыРасчетногоСчета(СвойствоРасчетныйСчет, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
		НомерСчета = СтруктураРасчетныйСчет.НомерСчета;
		
		РеквизитыСчета = Новый Структура;
		РеквизитыСчета.Вставить("Владелец", ВладелецСчета);
		
		БанковскийСчет = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ТипСчета, НомерСчета, РеквизитыСчета);
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ТипСчета);
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, НомерСчета, НСтр("ru = 'Номер счета:'") + " " + НомерСчета, БанковскийСчет,
				РеквизитыСчета, ДеревоРазбора, Ошибка);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчет", НайденнаяСтрока.ИндексСтроки);
		
	Иначе
		
		РасчетныйСчет = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, ИмяСчета);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчет", РасчетныйСчет);
		
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		КодВалюты = ЭД.Получить(СвойствоЭД);
		
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Если ЗначениеЗаполнено(Валюта) Тогда
				ДопРеквизиты.Вставить("Наименование", Валюта.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", Валюта.НаименованиеПолное);
			КонецЕсли;
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ЭД.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЗначениеДопРеквизитаДокумента("ГрафикОплаты", ЭД);

	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(СвойствоЭД, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комментарий");
	Если СвойствоЭД <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", ЭД.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	Если ЭД.Роль = "Покупатель" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	ИначеЕсли ЭД.Роль = "Продавец" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Исполнитель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли ЭД.Роль = "Продавец" Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Заказчик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли ЭД.Роль = "Продавец" Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	НаборДанных = ЭД["Товары"].Товар;
	УдалитьПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог",      ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог <> Неопределено Тогда
		СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;
	
	СвойствоСуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезСкидкиИтог");
	Если СвойствоСуммаБезСкидкиИтог <> Неопределено Тогда
		СуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаБезСкидкиИтог);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезСкидкиИтог", СуммаБезСкидкиИтог);
	КонецЕсли;
	
	СвойствоСуммаСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСкидкиИтог");
	Если СвойствоСуммаСкидкиИтог <> Неопределено Тогда
		СуммаСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаСкидкиИтог);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСкидкиИтог", СуммаСкидкиИтог);
	КонецЕсли;
	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
		ЦенаВключаетНДС = ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД <> Неопределено Тогда
		Для Каждого ДокументОснованияXDTO Из ЭД.ДокументОснования Цикл
			СвойствоНаименованиеДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НаименованиеДокументаОснования");
			Если СвойствоНаименованиеДокументаОснования <> Неопределено Тогда
				Если ДокументОснованияXDTO.НаименованиеДокументаОснования = НСтр("ru = 'По данным клиента'") Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				ИначеЕсли ДокументОснованияXDTO.НаименованиеДокументаОснования = НСтр("ru = 'По данным поставщика'") Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымПоставщика", ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымПоставщика", ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.АдресДоставкиСклад <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "АдресДоставки", ЭД.АдресДоставкиСклад.Наименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		УдалитьПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комментарий");
	Если СвойствоЭД <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", ЭД.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Сумма);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	// читаем контрагентов
	Для Каждого ТекКонтрагент Из ЭД.Контрагенты.Контрагент Цикл
		
		Если ВРег(ТекКонтрагент.Роль) = ВРег("Комитент") Тогда
			
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
				ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекКонтрагент.Роль) = ВРег("Комиссионер") Тогда
			
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
	// Дополнительные реквизиты.
	Если Не ЭД.ЗначенияРеквизитов = Неопределено Тогда
		ПрочитатьСписокЗначенийРеквизитовCML(ЭД.ЗначенияРеквизитов.ЗначениеРеквизита, НовыйЭД, Ошибка);
	КонецЕсли;
	
	// Читаем доп данные.
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка);
	
	ВладелецДоговора = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	// Документы сделки
	ПрочитатьДокументыСделки(ДеревоРазбора, НовыйЭД, ВладелецДоговора, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		КодВалюты = ЭД.Получить(СвойствоЭД);
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Если ЗначениеЗаполнено(Валюта) Тогда
				ДопРеквизиты.Вставить("Наименование", Валюта.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", Валюта.НаименованиеПолное);
			КонецЕсли;
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ЭД.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	УдалитьПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогоПоДокументу", ИтогоПоДокументу);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента",   ИтогоПоДокументу);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Сумма);
	
	// Читаем доп данные.
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка);
	
	МассивИдКонтрагентов = Новый Массив;
	Для Каждого ТекКонтрагент Из ЭД.Контрагенты.Контрагент Цикл
		Если ТекКонтрагент.Роль = "Покупатель" Тогда
			Роль = "ПокупательКомиссионногоТовара";
		Иначе
			Роль = ТекКонтрагент.Роль;
		КонецЕсли;
		ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль, Новый Структура("МассивИдКонтрагентов", МассивИдКонтрагентов));
	КонецЦикла;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	// Значения реквизитов
	Если Не ЭД.ЗначенияРеквизитов = Неопределено Тогда
		ПрочитатьСписокЗначенийРеквизитовCML(ЭД.ЗначенияРеквизитов.ЗначениеРеквизита, НовыйЭД, Ошибка);
	КонецЕсли;
	
	ВладелецДоговора = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	// Документы сделки
	ПрочитатьДокументыСделки(ДеревоРазбора, НовыйЭД, ВладелецДоговора, Ошибка);
	
	ГрафикОплаты = ЗначениеДопРеквизитаДокумента("ГрафикОплаты", ЭД);
	Если ГрафикОплаты <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ГрафикОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;

	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		КодВалюты = ЭД.Получить(СвойствоЭД);
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Если ЗначениеЗаполнено(Валюта) Тогда
				ДопРеквизиты.Вставить("Наименование", Валюта.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", Валюта.НаименованиеПолное);
				ДопРеквизиты.Вставить("КодМКВ", Валюта.Код);
			КонецЕсли;

			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ЭД.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	УдалитьПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
	СвойствоСуммаКомитентаИтог = ИтогоПоДокументу.Свойства().Получить("СуммаКомитентаИтог");
	СуммаКомитентаИтог = ИтогоПоДокументу.Получить(СвойствоСуммаКомитентаИтог);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаКомитента", СуммаКомитентаИтог);
	СвойствоСуммаПродажиИтог = ИтогоПоДокументу.Свойства().Получить("СуммаПродажиИтог");
	СуммаПродажиИтог = ИтогоПоДокументу.Получить(СвойствоСуммаПродажиИтог);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаПродажиИтог);
	СвойствоСуммаВознагражденияИтог = ИтогоПоДокументу.Свойства().Получить("СуммаВознагражденияИтог");
	Если СвойствоСуммаВознагражденияИтог <> Неопределено Тогда
		СуммаВознагражденияИтог = ИтогоПоДокументу.Получить(СвойствоСуммаВознагражденияИтог);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВознаграждения", СуммаВознагражденияИтог);
	КонецЕсли;
	
	СвойствоПроцент = ИтогоПоДокументу.Свойства().Получить("Процент");
	Если СвойствоПроцент <> Неопределено Тогда
		Процент = ИтогоПоДокументу.Получить(СвойствоПроцент);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПроцентВознаграждения", Процент);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		УдалитьПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаНачала");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаНачала = ЭД.Получить(СвойствоЭД);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачалоПериода", ДатаНачала);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаКонца");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаКонца = ЭД.Получить(СвойствоЭД);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонецПериода", ДатаКонца);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ФормаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ФормаОплаты = ЭД.Получить(СвойствоЭД);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФормаОплаты",
			ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ФормыОплаты", ФормаОплаты));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("СпособРасчета");
	Если СвойствоЭД <> Неопределено Тогда
		СпособРасчета = ЭД.Получить(СвойствоЭД);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения",
			ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("СпособРасчета", СпособРасчета));
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения",
			ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("СпособРасчета", НСтр("ru = 'Не рассчитывается'")));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаОплаты = ЭД.Получить(СвойствоЭД);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Услуга");
	Если СвойствоЭД <> Неопределено Тогда
		Услуга = ЭД.Получить(СвойствоЭД);
		Если Услуга <> Неопределено Тогда
			СвойствоНалог = Услуга.Свойства().Получить("Налог");
			Если СвойствоНалог <> Неопределено Тогда
				Налог = Услуга.Получить(СвойствоНалог);
				Если ВРег(Налог.ТипНалога) = "НДС" Тогда
					СтавкаНалога = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(Налог.ВеличинаСтавкиНалога);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтавкаНДСВознаграждения", СтавкаНалога);
					
					СвойствоСумма = Налог.Свойства().Получить("Сумма");
					Если СвойствоСумма <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДСВознаграждения", Налог.Сумма);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Услуга", Услуга.Наименование);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвСчФакт.НомерСчФ);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ДатаСчФ));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвСчФакт.КодОКВ);
	Если НЕ ЭД.Документ.СвСчФакт.ИспрСчФ = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузОт = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр = Неопределено Тогда
			Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг = Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель",
				ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Имя
					+ " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Отчество);
			КонецЕсли;
			Если Не ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно = Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительКодСтраны", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрРФ));
			КонецЕсли
		ИначеЕсли НЕ ЭД.Документ.СвСчФакт.ГрузОт.ОнЖе = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", НСтр("ru = 'он же'"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузополучатель", ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД,
			"Грузополучатель",
			ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Имя
				+ " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Отчество);
		КонецЕсли;
		
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.АдрТекст);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательКодСтраны", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.КодСтр);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрРФ));
		КонецЕсли
	КонецЕсли;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвСчФакт.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		Если ЭД.ВерсФорм = "5.02" Тогда
			
			ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
			
		Иначе
			Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
				ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Комиссионер = Неопределено;
	КомиссионнаяСФ = Ложь;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		КомиссионнаяСФ = ЗаполнитьДанныеКомиссионераИзДопДанных(ДеревоРазбора, НовыйЭД, "SFAKT", Ошибка);
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Продавец = ЭД.Документ.СвСчФакт.СвПрод;
	Покупатель = ЭД.Документ.СвСчФакт.СвПокуп;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВыставленныйКомитентом", КомиссионнаяСФ);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		Если КомиссионнаяСФ Тогда
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "ПокупательКомиссии");
		Иначе
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Структура = Новый Структура("Организация", Организация);
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(Организация) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.СвПРД = Неопределено И ЭД.Документ.СвСчФакт.СвПРД.Количество() > 0 Тогда
		ПлатежныеДокументы = "";
		ПервыйЭлемент = Истина;
		Для Каждого СтрокаПлатежа Из ЭД.Документ.СвСчФакт.СвПРД Цикл
			ПлатежныеДокументы = ПлатежныеДокументы + ?(ПервыйЭлемент,"",", № ") + СтрокаПлатежа.НомерПРД + " от " + СтрокаПлатежа.ДатаПРД;
			ПервыйЭлемент = Ложь;
		КонецЦикла;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежныйДокумент", ПлатежныеДокументы);
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.Свойства().Получить("ИП") = Неопределено
		И Не ЭД.Документ.Подписант.ИП = Неопределено Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	ИначеЕсли Не ЭД.Документ.Подписант.Свойства().Получить("ЮЛ") = Неопределено
		И Не ЭД.Документ.Подписант.ЮЛ = Неопределено Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДС",ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНал", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДС",     СуммаНДССФПривестиКТребуемомуФормату(
		ЭД.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНДС));
	
	Для Каждого Товар Из ЭД.Документ.ТаблСчФакт.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТЧ.Добавить(Товар.НомСтр,         "НомСтр");
		СписокТЧ.Добавить(Товар.НаимТов,        "НаимТов");
		СписокТЧ.Добавить(Товар.ОКЕИ_Тов,       "ОКЕИ_Тов");
		СписокТЧ.Добавить(Товар.КолТов,         "КолТов");
		СписокТЧ.Добавить(Товар.ЦенаТов,        "ЦенаТов");
		СписокТЧ.Добавить(Товар.СтТовБезНДС,    "СтТовБезНДС");
		СписокТЧ.Добавить(Товар.СтТовУчНал,     "СтТовУчНал");
		Если ЭД.ВерсФорм = "5.01" Тогда
			СписокТЧ.Добавить(Товар.НалСт.НалСтВел, "НалСтВел");
			СписокТЧ.Добавить(Товар.НалСт.НалСтТип, "НалСтТип");
		Иначе
			СписокТЧ.Добавить(Товар.НалСт, "НалСтВел");
		КонецЕсли;
		
		СумАкциз = Товар.Акциз.СумАкциз;
		Если Не ЗначениеЗаполнено(СумАкциз) Тогда
			СумАкциз = Товар.Акциз.БезАкциз;
		КонецЕсли;
		СписокТЧ.Добавить(СумАкциз, "СумАкциз");
		
		СписокТЧ.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНал.СумНДС), "СумНДС");
		Если ЗначениеЗаполнено(Товар.ОКЕИ_Тов) Тогда
			ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(Товар.ОКЕИ_Тов));
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				СписокТЧ.Добавить(Строка(ЕдИзм), "ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.ИнфПолСтр) Тогда
			// В инф.поле xml-строка Актуального формата.
			ИнфПол = Товар.ИнфПолСтр;
			Если ЭД.ВерсФорм = "5.01" Тогда
				
				ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
				
			Иначе
				
				ПрочитатьДопДанныеТЧ_ФНС502(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
				
			КонецЕсли;
			ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Товар.НомСтр, "Товары", Ошибка);
		КонецЕсли;
		
		Если ЭД.ВерсФорм = "5.01" Тогда
			
			Если НЕ Товар.НомерТД = Неопределено И Товар.НомерТД.Количество() > 0 Тогда
				НомераТД = "";
				Для Каждого СтрокаТД Из Товар.НомерТД Цикл
					НомераТД = НомераТД + СтрокаТД + ", ";
				КонецЦикла;
				СписокТЧ.Добавить(НомераТД, "НомерТД");
			КонецЕсли;
			
			Если НЕ Товар.КодПроисх = Неопределено И Товар.КодПроисх.Количество() > 0 Тогда
				СписокТЧ.Добавить(Товар.КодПроисх[0], "КодПроисх");
			КонецЕсли;
			
		Иначе
			НомераТД = "";
			КодПроисх = "";
			НаименованиеСтраныПроисхождения = "";
			
			ДопДанныеТаможеннойДекларации = Неопределено;
			СписокТЧДопДанныеТаможеннойДекларации = СписокТЧ.НайтиПоЗначению("ДопДанныеТаможеннойДекларации");
			Если Не СписокТЧДопДанныеТаможеннойДекларации = Неопределено Тогда 
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.УстановитьСтроку(СписокТЧДопДанныеТаможеннойДекларации.Представление);
				ДопДанныеТаможеннойДекларации = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("ТаблицаЗначений"));
			КонецЕсли;
			Для Каждого СведенияТД Из Товар.СвТД Цикл
				НомераТД = НомераТД + СведенияТД.НомерТД;
				КодПроисх = КодПроисх + СведенияТД.КодПроисх;
				Если Не ДопДанныеТаможеннойДекларации = Неопределено Тогда 
					НаименованиеСтраныИзДопДанных = ДопДанныеТаможеннойДекларации.Найти(КодПроисх, "КодСтраныПроисхождения");
					Если Не НаименованиеСтраныИзДопДанных = Неопределено Тогда
						НаименованиеСтраныПроисхождения = НаименованиеСтраныПроисхождения + НаименованиеСтраныИзДопДанных.НаименованиеСтраныПроисхождения;
					КонецЕсли
				КонецЕсли;
			КонецЦикла;
			
			СписокТЧ.Добавить(НомераТД, "НомерТД");
			СписокТЧ.Добавить(КодПроисх, "КодПроисх");
			СписокТЧ.Добавить(НаименованиеСтраныПроисхождения, "НаименованиеСтраныПроисхождения");

			Если Не СписокТЧДопДанныеТаможеннойДекларации = Неопределено Тогда
				СписокТЧ.Удалить(СписокТЧДопДанныеТаможеннойДекларации);
			КонецЕсли;
		КонецЕсли;
		
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
	НовыйЭД.ОписаниеОбъекта = "Корректировочный";
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвКСчФ.НомерКСчФ);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаКСчФ));
	Если ЭД.ВерсФорм = "5.02" Тогда
		ДанныеСФ = ЭД.Документ.СвКСчФ.СчФ;
		Если ДанныеСФ.Количество() > 0 Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаФактуры", ДанныеСФ[0].НомерСчФ);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСчетаФактуры", ДанныеСФ[0].ДатаСчФ);
			ИспрСФ = ДанныеСФ[0].ИспрСчФ;
			Если ИспрСФ.Количество() > 0 Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправленияСчетаФактуры", ИспрСФ[0].НомИспрСчФ);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправленияСчетаФактуры", ДатаИзСтроки(ИспрСФ[0].ДатаИспрСчФ));
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаФактуры", ЭД.Документ.СвКСчФ.НомерСчФ);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаСчФ));
		Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ") = Неопределено
			И НЕ ЭД.Документ.СвКСчФ.ИспрКСчФ = Неопределено Тогда
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвКСчФ.КодОКВ);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрКСчФ = Неопределено Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
	КонецЕсли;
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрСчФ = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправленияСчетаФактуры", ЭД.Документ.СвКСчФ.ИспрСчФ.НомИспрСчФ);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправленияСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвКСчФ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		Если ЭД.ВерсФорм = "5.02" Тогда
			ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
		Иначе
			ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
		КонецЕсли;
	КонецЕсли;
	
	Комиссионер = Неопределено;
	КомиссионнаяСФ = Ложь;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		КомиссионнаяСФ = ЗаполнитьДанныеКомиссионераИзДопДанных(ДеревоРазбора, НовыйЭД, "KORSFAKT", Ошибка);
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Продавец = ЭД.Документ.СвКСчФ.СвПрод;
	Покупатель = ЭД.Документ.СвКСчФ.СвПокуп;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВыставленныйКомитентом", КомиссионнаяСФ);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		Если КомиссионнаяСФ Тогда
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "ПокупательКомиссии");
		Иначе
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Структура = Новый Структура("Организация", Организация);
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		Если ЗначениеЗаполнено(Организация) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.Свойства().Получить("ИП") = Неопределено
		И Не ЭД.Документ.Подписант.ИП = Неопределено Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	ИначеЕсли Не ЭД.Документ.Подписант.Свойства().Получить("ЮЛ") = Неопределено
		И Не ЭД.Документ.Подписант.ЮЛ = Неопределено Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУвел") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУвел = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУвел", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУм") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУм = Неопределено Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУм", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС));
	КонецЕсли;
	
	СуммаДокумента = 0;
	
	Для каждого Товар Из ЭД.Документ.ТаблКСчФ.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТч.Добавить(Товар.НомСтр, "НомСтр");
		СписокТч.Добавить(Товар.НаимТов, "НаимТов");
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовДо") = Неопределено Тогда
			Если ЗначениеЗаполнено(Товар.ОКЕИ_ТовДо) Тогда
				СписокТч.Добавить(Товар.ОКЕИ_ТовДо, "ОКЕИ_ТовДо");
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(Товар.ОКЕИ_ТовДо));
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					СписокТЧ.Добавить(Строка(ЕдИзм), "ЕдиницаИзмеренияДо");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовПосле") = Неопределено Тогда
			Если ЗначениеЗаполнено(Товар.ОКЕИ_ТовПосле) Тогда
				СписокТч.Добавить(Товар.ОКЕИ_ТовПосле, "ОКЕИ_ТовПосле");
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(Товар.ОКЕИ_ТовПосле));
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					СписокТЧ.Добавить(Строка(ЕдИзм), "ЕдиницаИзмерения");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовДо, "КолТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовПосле, "КолТовПосле");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовДо, "ЦенаТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовПосле, "ЦенаТовПосле");
		КонецЕсли;
		
		Если НЕ Товар.Свойства().Получить("СтТовБезНДС") = Неопределено
			И НЕ Товар.СтТовБезНДС = Неопределено Тогда
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимДоИзм, "СтТовБезНДСДоИзм");
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимПослеИзм, "СтТовБезНДСПослеИзм");
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУвел") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУвел, "СтТовБезНДСУвел");
			КонецЕсли;
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУм") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУм, "СтТовБезНДСУм");
			КонецЕсли;
		КонецЕсли;
		
		СписокТч.Добавить(Товар.АкцизДо.СумАкциз, "АкцизДо");
		СписокТч.Добавить(Товар.АкцизПосле.СумАкциз, "АкцизПосле");
		СписокТч.Добавить(Товар.АкцизРазн.СумУвел, "АкцизУвел");
		СписокТч.Добавить(Товар.АкцизРазн.СумУм, "АкцизУм");
		Если ЭД.ВерсФорм = "5.02" Тогда
			СписокТч.Добавить(Товар.НалСтДо, "НалСтВелДо");
			СписокТч.Добавить(Товар.НалСтПосле, "НалСтВелПосле");
			
		Иначе
			СписокТч.Добавить(Товар.НалСтДо.НалСтВел, "НалСтВелДо");
			СписокТч.Добавить(Товар.НалСтДо.НалСтТип, "НалСтТипДо");
			СписокТч.Добавить(Товар.НалСтПосле.НалСтВел, "НалСтВелПосле");
			СписокТч.Добавить(Товар.НалСтПосле.НалСтТип, "НалСтТипПосле");
			
		КонецЕсли;
		
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалДо.СумНДС), "СумНДСДо");
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалПосле.СумНДС), "СумНДСПосле");
		СписокТч.Добавить(Товар.СумНалРазн.СумУвел, "СумНДСУвел");
		СписокТч.Добавить(Товар.СумНалРазн.СумУм, "СумНДСУм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимДоИзм, "СтТовУчНалДоИзм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимПослеИзм, "СтТовУчНалПослеИзм");
		СуммаДокумента = СуммаДокумента
						+ ?(ЗначениеЗаполнено(Товар.СтТовУчНал.СтоимПослеИзм), Товар.СтТовУчНал.СтоимПослеИзм, 0);
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУвел") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУвел, "СтТовУчНалУвел");
		КонецЕсли;
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУм") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУм, "СтТовУчНалУм");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.ИнфПолСтр) Тогда
			// В инф.поле xml-строка Актуального формата.
			ИнфПол = Товар.ИнфПолСтр;
			Если ЭД.ВерсФорм = "5.02" Тогда
				ПрочитатьДопДанныеТЧ_ФНС502(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
			Иначе
				ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
			КонецЕсли;
			ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Товар.НомСтр, "Товары", Ошибка);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйДокументXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
	НовыйЭД.ОписаниеОбъекта = "Корректировочный";
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);
	ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ДатаДок));
	
	СуммаДокумента = 0;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс;
	ИначеЕсли ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск;
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Грузоотправитель = Неопределено;
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвТНО.Поставщик;
	Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);
		ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);
		Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
		Если Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);
			КонецЕсли;
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	Если Грузоотправитель <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
		Если ДопПараметрыГрузоотправителя.Количество() > 0 Тогда
			ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);
			Если ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита) Тогда
				СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаГрузоотправителя <> Неопределено Тогда
					Для Каждого ДопПараметр Из ДопПараметрыГрузоотправителя Цикл
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаГрузоотправителя, ДопПараметр.Ключ, ДопПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
	// но один из этих элементов обязательно должен быть заполнен
	// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
	Если Поставщик = Неопределено Тогда
		Поставщик = Грузоотправитель;
	КонецЕсли;
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Плательщик = ЭД.Документ.СвТНО.Плательщик;
	Если Плательщик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Структура = Новый Структура("Организация", Организация);
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНО.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация);
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.Основание <> Неопределено Тогда
		ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;
		Если ЗначениеЗаполнено(ДатаПоДаннымКлиента) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);
		ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", ДатаИзСтроки(ДатаДок));
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);
	КонецЕсли;
	
	НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			СписокТЧ.Добавить(Элемент.НомТов,      "Номер");
			СписокТЧ.Добавить(Элемент.НаимТов,     "Наименование");
			СписокТЧ.Добавить(Элемент.ХарактерТов, "НаименованиеХарактеристики");
			СписокТЧ.Добавить(Элемент.КодТов,      "ТоварКод");
			СписокТЧ.Добавить(Элемент.СортТов,     "Сорт");
			СписокТЧ.Добавить(Элемент.АртикулТов,  "Артикул");
			СписокТЧ.Добавить(Элемент.НаимЕдИзм,   "ЕдиницаИзмеренияНаименование");
			СписокТЧ.Добавить(Элемент.ОКЕИ_Тов,    "ЕдиницаИзмеренияКод");
	
			СписокТЧ.Добавить(Элемент.НеттоДоКорректировки, "КоличествоДоКорректировки");
			СписокТЧ.Добавить(Элемент.Нетто,     "Количество");
			СписокТЧ.Добавить(Элемент.КолМест,   "Мест");
			СписокТЧ.Добавить(Элемент.ВидУпак,   "Упаковка");
			СписокТЧ.Добавить(Элемент.Место,     "КоличествоВОдномМесте");
			СписокТЧ.Добавить(Элемент.НеттоДоКорректировки, "МассаНеттоДоКорректировки");
			СписокТЧ.Добавить(Элемент.Нетто,     "МассаНетто");
			СписокТЧ.Добавить(Элемент.Брутто,    "МассаБрутто");
			СписокТЧ.Добавить(Элемент.ЦенаДоКорректировки,      "ЦенаДоКорректировки");
			СписокТЧ.Добавить(Элемент.Цена,      "Цена");
			СписокТЧ.Добавить(Элемент.СумБезНДСДоКорректировки, "СуммаДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумБезНДС, "Сумма");
			СписокТЧ.Добавить(Элемент.СумНДСДоКорректировки,    "СуммаНДСДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумНДС,    "СуммаНДС");
			СписокТЧ.Добавить(Элемент.СумУчНДСДоКорректировки,  "СуммаСНДСДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумУчНДС,  "СуммаСНДС");
			
			// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
			Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
				
				СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				
				// В инф.поле xml-строка неактуального формата.
				ОбъектXML = Новый ЧтениеXML;
				Попытка
					ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
					ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					РазобратьСтрокуТЧCML(ТоварXDTO, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Элемент.НомТов);
					Исключение
					ВидОперации = НСтр("ru = 'Чтение неактуального формата Корректировочный документ.'");
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 2);
				КонецПопытки;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
					// В инф.поле xml-строка Актуального формата.
					ИнфПол = Элемент.ИнфПолСтр;
					ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Элемент.НомТов);
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Элемент.НомТов, "Товары", Ошибка);
				КонецЕсли;
				РеквизитыНоменклатуры = Новый Структура;
				РеквизитыЕдиницыИзмерения = Новый Структура;
				ИдТовара = "";
				СтавкаНДСПереданаДопПараметром = Ложь;
				ДокументОснованиеНайден = Ложь;
				Для Каждого ЭлементСЗ Из СписокТЧ Цикл
					
					// Номенклатура.
					Если ЭлементСЗ.Представление = "Наименование" Тогда
						РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Характеристика" Тогда
						РеквизитыНоменклатуры.Вставить("Характеристика", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
						РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
						ИдТовара = ЭлементСЗ.Значение;
						
					// Проверка наличия ставки НДС в доп. параметрах.
					ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
						СтавкаНДСПереданаДопПараметром = Истина;
					ИначеЕсли ЭлементСЗ.Представление = "ИдентификаторДокументаОснования"
						И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
						И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
						// Актуальный алгоритм передачи связки с документами-основаниями.
						// В качестве идентификатора документа-основания во входящем ЭД приходит
						// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
						// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
						// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
						// будет найдена.
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("Организация",   Организация);
						СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСЗ.Значение, СтруктураОтбора);
						Если ДокументОснование <> Неопределено Тогда
							СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
							ДокументОснованиеНайден = Истина;
						КонецЕсли;
					ИначеЕсли ЭлементСЗ.Представление = "ИДЭДДокументаОснования"
						И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
						И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
						
						ДокументОснование = ПолучитьДокументОснование(ЭлементСЗ.Значение, Структура);
						Если ДокументОснование <> Неопределено Тогда
							СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
							ДокументОснованиеНайден = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Ставка НДС может прийти в доп. параметрах.
				Если НЕ СтавкаНДСПереданаДопПараметром Тогда
					СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				КонецЕсли;
				
				НаимТовара = "";
				РеквизитыНоменклатуры.Свойство("Наименование", НаимТовара);
				
				КодЕдИзм = "";
				Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
					НаименованиеЕдИзм = "";
					РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
					ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
						РеквизитыЕдиницыИзмерения);
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм),
						НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
				// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
				Если ИдентификацияПоНоменклатуреКомпании Тогда
					СтруктураИд = РазобратьИДТовара(ИдТовара);
					Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
						ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
						Если СписокТЧ.НайтиПоЗначению(ХарактеристикаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
						УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
						Если СписокТЧ.НайтиПоЗначению(УпаковкаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Номенклатура поставщиков.
					РеквизитыНоменклатурыПоставщика = Новый Структура;
					ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
					ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
					
					РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
					РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
					Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаимТовара) Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
					КонецЕсли;
					
					НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
						РеквизитыНоменклатурыПоставщика);
					
					НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
						РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
					
					Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
						РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
					КонецЕсли;
					СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
					ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
					
					Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
					КонецЕсли;
				КонецЕсли;
				
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
					РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
				
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйДокументПолучательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНП.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;
		ДатаПолучения = ДатаИзСтроки(ДатаДок);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьАктНаПередачуПравXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Документ = ЭД.Документ[0];
	
	Если Документ.ХозОперация = НСтр("ru = 'Передача прав'") Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", Документ.Ид);
	
	// Контрагенты
	Для Каждого Контрагент Из Документ.Контрагенты.Контрагент Цикл
		ПрочитатьДанныеКонтрагентаCML(Контрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Контрагент.Роль);
	КонецЦикла;
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДопРеквизиты.Вставить("НаправлениеЭД", НовыйЭД.НаправлениеЭД);
	
	
	// Значения реквизитов
	Если Не Документ.ЗначенияРеквизитов = Неопределено Тогда
		ПрочитатьСписокЗначенийРеквизитовCML(Документ.ЗначенияРеквизитов.ЗначениеРеквизита, НовыйЭД, Ошибка, ДопРеквизиты);
	КонецЕсли;
	
	// Читаем доп данные из xdto  и помещаем их в шапку в дерево значений
	ПрочитатьДопДанныеШапкиДокумента(Документ, НовыйЭД, Ошибка, ДопРеквизиты);
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	Для Каждого ТекСвойство Из Документ.Свойства() Цикл
		
		Элемент = Документ.Получить(ТекСвойство);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПростойТипЭлементаXDTO(Элемент) Тогда
			Если ТекСвойство.Имя = "Валюта" Тогда
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
				
				ДопРеквизиты = Новый Структура;
				ДопРеквизиты.Вставить("Код", Элемент);
				
				Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(Элемент));
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Элемент, НСтр("ru = 'Код валюты:'") + " " + Элемент, Валюта,
					ДопРеквизиты, ДеревоРазбора, Ошибка);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
			ИначеЕсли ТекСвойство.Имя = "Сумма" Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", Элемент);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ТекСвойство.Имя, Элемент);
			КонецЕсли;
			
		ИначеЕсли ТекСвойство.Имя = "Товары" Тогда
			Если ТипЗнч(Элемент.Товар) = Тип("СписокXDTO") Тогда
				НаборДанных = Документ["Товары"].Товар;
				ПрочитатьДанныеТЧАктаНаПередачу(НаборДанных, Документ, ДеревоРазбора, НовыйЭД, Ошибка);
			КонецЕсли;
		ИначеЕсли Найти(НСтр("ru = 'Налоги Скидки ДопРасходы'"), ТекСвойство.Имя) > 0 Тогда
			ДанныеСпискаЗначенийCML(Элемент, НовыйЭД, Ошибка);
		ИначеЕсли ТекСвойство.Имя = "Подписанты" Тогда
			ДанныеСпискаЗначенийCML(Элемент, НовыйЭД, Ошибка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеТЧАктаНаПередачу(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

Процедура ПрочитатьРеквизитыОрганизацииXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = "РеквизитыОрганизации";

	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН",						ЭД.ИНН);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП",						ЭД.КПП);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКПО",						ЭД.ОКПО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Наименование",				ЭД.Наименование);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОфициальноеНаименование",	ЭД.ОфициальноеНаименование);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОсновнойВидДеятельности",	ЭД.ОсновнойВидДеятельности);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЕГРПО",						ЭД.ЕГРПО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКВЭД",						ЭД.ОКВЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКДП",						ЭД.ОКДП);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКОПФ",						ЭД.ОКОПФ);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКФС",						ЭД.ОКФС);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКПО",						ЭД.ОКПО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаРегистрации",			ЭД.ДатаРегистрации);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолноеНаименование",			ЭД.ПолноеНаименование);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Обращение",					ЭД.Обращение);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Фамилия",					ЭД.Фамилия);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Имя",						ЭД.Имя);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отчество",					ЭД.Отчество);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаРождения",				ЭД.ДатаРождения);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МестоРождения",				ЭД.МестоРождения);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Пол",						ЭД.Пол);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УдостоверениеЛичности",		ЭД.УдостоверениеЛичности);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "АдресРегистрации",			ЭД.АдресРегистрации);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Должность",					ЭД.Должность);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Комментарий",				ЭД.Комментарий);
	
	
	ПрочитатьДанныеКонтрагентаCML(ЭД, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	
КонецПроцедуры

Процедура ПрочитатьПередачаТоваровПродавецXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ТОРГ12_Продавец");
	ДеревоЭД = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	
	ИдентификаторДокумента = ЭД.ИдФайл;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ИдентификаторДокумента);
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	НомерТоварнойНакладной = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.НомДокПТ;
	ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерТоварнойНакладной", НомерТоварнойНакладной);
	ДатаДок = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.ДатаДокПТ;
	ДатаТоварнойНакладной = ДатаИзСтроки(ДатаДок);
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаТоварнойНакладной", ДатаТоварнойНакладной);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", НомерТоварнойНакладной);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаТоварнойНакладной);
	
	Исправление = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.ИспрДокПТ;
	Если Исправление <> Неопределено Тогда
		ДатаИсправления = Исправление.ДатаИспрДокПТ;
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаИсправления", Дата(Сред(ДатаИсправления, 7, 4)
			+ Сред(ДатаИсправления, 4, 2) + Сред(ДатаИсправления, 1, 2)));
		ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерИсправления",
			ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.ИспрДокПТ.НомИспрДокПТ);
	КонецЕсли;
	
	ВидОперации = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ВидОперации;
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ВидОперации", 
			XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации));
	КонецЕсли;
	
	КодВалюты = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм.КодОКВ;
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаКод", КодВалюты);
	НаименованиеВалюты = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм.НаимОКВ;
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаНаименование", НаименованиеВалюты);
	
	Основания = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание;
	
	ОснованияДокумента = ШаблонОснованияДокумента();
	
	Для Каждого СтрокаОснования Из Основания Цикл
		
		Если СтрокаОснования.НаимОсн = "-" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОснованияДокумента.Добавить();
		
		НоваяСтрока.ДокОснованиеНаименование = СтрокаОснования.НаимОсн;
		НоваяСтрока.ДокОснованиеНомер = СтрокаОснования.НомОсн;
		Если ЗначениеЗаполнено(СтрокаОснования.ДатаОсн) Тогда
			ДокОснованиеДата = ДатаДД_ММ_ГГГГ(СтрокаОснования.ДатаОсн);
			НоваяСтрока.ДокОснованиеДата = ДокОснованиеДата;
		КонецЕсли;
		НоваяСтрока.ДокОснованиеДопСведения = СтрокаОснования.ДопСвОсн;
		
	КонецЦикла;
	
	Если ОснованияДокумента.Количество() > 0 Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ОснованияДокумента, "Основание");
	КонецЕсли;
	
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Продавец;
	
	Грузоотправитель = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузОтпр;
	Если Не Грузоотправитель = Неопределено Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Грузоотправитель, "Грузоотправитель");
	КонецЕсли;
	
	Грузополучатель = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузПолуч;
	Если Не Грузополучатель = Неопределено Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Грузополучатель, "Грузополучатель");
	КонецЕсли;
	
	Продавец = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Продавец;
	ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Продавец, "Поставщик");
	
	Покупатель = ЭД.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Покупатель;
	ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Покупатель, "Плательщик");
	
	// Сведения о организации.
	ВидУчастника = "Поставщик";
	ВидКонтрагента = "Плательщик";
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ВидУчастника = "Плательщик";
		ВидКонтрагента = "Поставщик";
	КонецЕсли;
	РеквизитыУчастникаСделки = РеквизитыУчастникаСделки();
	ЗаполнитьРеквизитыУчастникаСделки(ДеревоЭД, ВидУчастника, РеквизитыУчастникаСделки);
		
	Организация = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", РеквизитыУчастникаСделки.ИНН, РеквизитыУчастникаСделки.КПП);
	
	Если ЗначениеЗаполнено(Организация) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация);
	КонецЕсли;
	
	// Поиск по ИНН, КПП ссылки на контрагента.
	РеквизитыКонтрагента = РеквизитыУчастникаСделки();
	ЗаполнитьРеквизитыУчастникаСделки(ДеревоЭД, ВидКонтрагента, РеквизитыКонтрагента);
	
	// Добавление контрагента в дерево разбора.
	// Используется для поиска контрагента в форме однократной сделки.
	ДобавитьКонтрагентаВДеревоРазбора(ДеревоРазбора, НовыйЭД, ВидКонтрагента, РеквизитыКонтрагента, Ошибка);
	
	СведенияОПередаче = ЭД.Документ.СодФХЖ3;
	
	Если Не СведенияОПередаче = Неопределено Тогда
		
		ДатаДок = СведенияОПередаче.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ЗаполнитьРеквизитДерева(ДеревоЭД, "СведенияПоОтпускуГруза.ДатаОтпуска", ДатаИзСтроки(ДатаДок));
		КонецЕсли;
		ЗаполнитьРеквизитДерева(ДеревоЭД, "СведенияПоОтпускуГруза.ПриложениеКоличествоЛистовПрописью", СведенияОПередаче.КолПрил);
		
	КонецЕсли;
	
	Если ЕстьСвойствоXDTO(ЭД.Документ.СодФХЖ3, "СвЛицОтпГруз") Тогда
		ЗаполнитьДанныеЛицаПередавшегоГруз(ДеревоЭД, ЭД.Документ.СодФХЖ3.СвЛицОтпГруз);
	КонецЕсли;
	
	Если ЕстьСвойствоXDTO(ЭД.Документ.СодФХЖ3, "ТранНакл") Тогда
		ТранспортнаяНакладная = ШаблонТранспортнаяНакладная();
		Для Каждого СтрокаНакладная Из ЭД.Документ.СодФХЖ3.ТранНакл Цикл
			
			НоваяСтрока = ТранспортнаяНакладная.Добавить();
			НоваяСтрока.ТранспортнаяНакладнаяНомер = СтрокаНакладная.НомТранНакл;
			НоваяСтрока.ТранспортнаяНакладнаяДата = СтрокаНакладная.ДатаТранНакл;
			
		КонецЦикла;
		
		Если ТранспортнаяНакладная.Количество()> 0 Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТранспортнаяНакладная, "ТранспортнаяНакладная");
		КонецЕсли;
		
	КонецЕсли;
	
	// Чтение дополнительных данных.
	ИнфПол = СведенияОПередаче.ИнфПолФХЖ3;
	Если Не ИнфПол = Неопределено Тогда
		ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
		
		ПоместитьТабличнуюЧастьВШапкуДокумента(ДеревоЭД, ДеревоДопДанных, "Серии");
		
	КонецЕсли;
	
	// Из дерева доп. данных  получаем ИД документа основания.
	// По Ид документа основания находим документа основания.
	ПараметрыПоиска = Новый Структура("Организация, НаправлениеЭД", Организация, Перечисления.НаправленияЭД.Входящий);
	ЗаполнитьДокументыОснования(ДеревоДопДанных, ПараметрыПоиска, ДеревоЭД);
	
	// Чтение табличной части документа.
	НаборДанных = ЭД.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов;
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		
		ТаблицаТоваров = ШаблонТаблицыПередачаТоваров();
		
		Для Каждого Элемент Из НаборДанных Цикл
				
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НаименованиеНоменклатуры = Элемент.НаимТов;
			НоваяСтрока.НаименованиеНоменклатуры = НаименованиеНоменклатуры;
			НаименованиеХарактеристики = Элемент.ХарактерТов;
			НоваяСтрока.НаименованиеХарактеристики = Элемент.ХарактерТов;
			НоваяСтрока.Сорт = Элемент.СортТов;
			НоваяСтрока.Артикул = Элемент.АртикулТов;
			НоваяСтрока.КодТовара = Элемент.КодТов;
			НоваяСтрока.ЕдиницаИзмерения = Элемент.НаимЕдИзм;
			НоваяСтрока.БазоваяЕдиницаКод = Элемент.ОКЕИ_Тов;
			НоваяСтрока.КодТовара = Элемент.КодТов;
			НоваяСтрока.МассаБрутто = Элемент.Брутто;
			НоваяСтрока.МассаНетто = Элемент.НеттоПередано;
			НоваяСтрока.КоличествоВОдномМесте = Элемент.Место;
			НоваяСтрока.КоличествоМест = Элемент.КолМест;
			НоваяСтрока.Цена = Элемент.Цена;
			НоваяСтрока.СуммаБезНДС = Элемент.СтБезНДС;
			НоваяСтрока.СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(Элемент.НалСт);
			НоваяСтрока.СуммаНДС = Элемент.СумНДС;
			НоваяСтрока.СуммаСНДС = Элемент.СтУчНДС;
			
			Если ЗначениеЗаполнено(Элемент.ИнфПолФХЖ2)
				И Элемент.ИнфПолФХЖ2.Количество() > 0 Тогда
				
				ИдентификаторыСтрокСерии = ИдентификаторыСерийНоменклатуры();
				
				ПрочитатьДопДанныеТЧ_ФНС502(Элемент.ИнфПолФХЖ2, ДеревоДопДанных, "Товары", Элемент.НомТов);
				
				ДопРеквизитыСтрокиТч = Новый СписокЗначений;
				ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, ДопРеквизитыСтрокиТч, Элемент.НомТов, "Товары", Ошибка);
				ДопДанные = Новый Структура;
				Для Каждого ЭлементСпискаДопДанные Из ДопРеквизитыСтрокиТч Цикл
					
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("Ид") Тогда
						ИдТовара = ЭлементСпискаДопДанные.Значение;
						НоваяСтрока.ИдТовараУКонтрагента = ИдТовара;
					КонецЕсли;
					
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("НомерСерии") Тогда
						НоваяСтрока.НомерСерии = ЭлементСпискаДопДанные.Значение;
					КонецЕсли;
					
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("СрокГодностиСерии") Тогда
						НоваяСтрока.СрокГодностиСерии = ЭлементСпискаДопДанные.Значение;
					КонецЕсли;
					
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("ИдентификаторДокументаОснования") Тогда
						ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСпискаДопДанные.Значение, ПараметрыПоиска);
						НоваяСтрока.ДокументОснование = ДокументОснование;
					КонецЕсли;
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("ИДЭДДокументаОснования") Тогда
						ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСпискаДопДанные.Значение, ПараметрыПоиска);
						НоваяСтрока.ДокументОснование = ДокументОснование;
					КонецЕсли;
						
					ДопДанные.Вставить(ЭлементСпискаДопДанные.Представление, ЭлементСпискаДопДанные.Значение);
					
				КонецЦикла;
				Если ДопДанные.Количество()> 0 Тогда
					НоваяСтрока.ДопДанныеПодписанные = ДопДанные;
				КонецЕсли;
				
				НоваяСтрока = ИдентификаторыСтрокСерии.Добавить();
				НоваяСтрока.Идентификатор = ИдТовара;
				НоваяСтрока.Номенклатура = НаименованиеНоменклатуры;
				НоваяСтрока.Характеристика = НаименованиеХарактеристики;

			КонецЕсли;
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаТоваров, "ТаблицаТоваров");
		
	КонецЕсли;
	
	СуммаСНДС = 0;
	// Чтение итогов документа
	Если НЕ ЭД.Документ.СвДокПТПрКроме.СодФХЖ2.Всего = Неопределено Тогда
		Итоги = ЭД.Документ.СвДокПТПрКроме.СодФХЖ2.Всего;
		
		Если ЕстьСвойствоXDTO(Итоги, "БруттоВс") Тогда
			МассаБрутто = Итоги.БруттоВс;
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.МассаБрутто", МассаБрутто);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Итоги, "НеттоВс") Тогда
			МассаНетто = Итоги.НеттоВс;
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.МассаНетто", МассаНетто);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Итоги, "СтБезНДСВс") Тогда
			СуммаБезНДС = Итоги.СтБезНДСВс;
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.МассаНетто", СуммаБезНДС);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Итоги, "СтУчНДСВс") Тогда
			СуммаСНДС = ЭД.Документ.СвДокПТПрКроме.СодФХЖ2.Всего.СтУчНДСВс;
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.СуммаСНДС", СуммаСНДС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаСНДС = 0 Тогда
		СуммаСНДС = ТаблицаТоваров.Итог("СуммаСНДС");
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", СуммаСНДС);
	
	ПрочитатьПодписанта(НовыйЭД, ЭД.Документ);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ПоместитьДопДанныеВДеревоЭД(ДеревоЭД, ДеревоДопДанных);
	
	НовыйЭД.ЗначениеРеквизита = ДеревоЭД;
	НовыйЭД.ОписаниеОбъекта = "ПередачаТоваров";
	
КонецПроцедуры

Функция ШаблонТаблицыПередачаТоваров()
	
	МакетПередачаТоваров = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ТОРГ12_Продавец");
	ОбластьТовары = МакетПередачаТоваров.ПолучитьОбласть("Товары");
	ВысотаОбласти = ОбластьТовары.ВысотаТаблицы;
	
	Товары = Новый ТаблицаЗначений;
	
	Для н = 3 По ВысотаОбласти Цикл
		ЯчейкаТовары = ОбластьТовары.Область(н,3);
		Товары.Колонки.Добавить(ЯчейкаТовары.Текст);
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

Функция ШаблонТаблицыПередачаРабот()
	
	МакетПередачаТоваров = Обработки.ОбменСКонтрагентами.ПолучитьМакет("Акт501_Исполнитель");
	ОбластьУслуги = МакетПередачаТоваров.ПолучитьОбласть("Услуги");
	ВысотаОбласти = ОбластьУслуги.ВысотаТаблицы;
	
	Услуги = Новый ТаблицаЗначений;
	
	Для н = 3 По ВысотаОбласти Цикл
		ЯчейкаТовары = ОбластьУслуги.Область(н,3);
		Услуги.Колонки.Добавить(ЯчейкаТовары.Текст);
	КонецЦикла;
	
	Возврат Услуги;

КонецФункции

Процедура ПрочитатьПередачаТоваровПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если ЭД.Документ.СодФХЖ4.ГрузПолучил <> Неопределено Тогда
		
		ДатаДок = ЭД.Документ.СодФХЖ4.ГрузПолучил.ДатаПолуч;
		ДатаПолучения = "";
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ДатаПолучения = ДатаИзСтроки(ДатаДок);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		
		Если ЕстьСвойствоXDTO(ЭД.Документ.СодФХЖ4.ГрузПолучил, "СвЛицПолГруз") Тогда
			ЛицоГрузополучатель = ЭД.Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз;
			Если Не ЛицоГрузополучатель = Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЛицоГрузополучатель.РабОргПок.Должность);
				ФИО = ЛицоГрузополучатель.РабОргПок.ФИО;
				ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ФамилияИнициалы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПередачаРаботИсполнительXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИДФайл);
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	ИнфПол = ЭД.Документ.СодФХЖ2.ИнфПолФХЖ2;
	Если Не ИнфПол = Неопределено Тогда
		ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("Акт501_Исполнитель");
	ДеревоЭД = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	НомерАкта = ЭД.Документ.СвДокПРУ.ИдентДок.НомДокПРУ;
	ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерАкта", НомерАкта);
	ДатаДок = ЭД.Документ.СвДокПРУ.ИдентДок.ДатаДокПРУ;
	ДатаАкта = ДатаИзСтроки(ДатаДок);
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаАкта", ДатаАкта);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", НомерАкта);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаАкта);
	
	Исполнитель = ЭД.Документ.СвДокПРУ.СодФХЖ1.Исполнитель;
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Исполнитель, "Исполнитель");
		
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Исполнитель, "Заказчик");
		
	КонецЕсли;
	
	Заказчик = ЭД.Документ.СвДокПРУ.СодФХЖ1.Заказчик;
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Заказчик, "Заказчик");
		
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Заказчик, "Исполнитель");
		
	КонецЕсли;
	
	ВидУчастника = "Заказчик";
	ВидКонтрагента = "Исполнитель";
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ВидУчастника = "Исполнитель";
		ВидКонтрагента = "Заказчик";
	КонецЕсли;
	РеквизитыУчастникаСделки = РеквизитыУчастникаСделки();
	ЗаполнитьРеквизитыУчастникаСделки(ДеревоЭД, ВидУчастника, РеквизитыУчастникаСделки);
	
	Организация = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", РеквизитыУчастникаСделки.ИНН, РеквизитыУчастникаСделки.КПП);
	Структура = Новый Структура("Организация", Организация);
	
	КодВалюты = ЭД.Документ.СвДокПРУ.ДенИзм.КодОКВ;
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаКод", КодВалюты);
	НаименованиеВалюты = ЭД.Документ.СвДокПРУ.ДенИзм.НаимОКВ;
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаНаименование", КодВалюты);

	Если ЗначениеЗаполнено(Организация) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация);
	КонецЕсли;
	
	ВидОперации = ЭД.Документ.СвДокПРУ.СодФХЖ1.ВидОперации;
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ВидОперации", 
			XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации));
	КонецЕсли;
	
	ЗаполнитьРеквизитДерева(ДеревоЭД, "Заголовок", ЭД.Документ.СвДокПРУ.СодФХЖ1.ЗагСодОпер);
	
	Основания = ЭД.Документ.СвДокПРУ.СодФХЖ1.Основание;
	
	ЗаполнитьТабличнуюЧастьОснование(ДеревоЭД, Основания, "Основание");
	
	// Поиск по ИНН, КПП ссылки на контрагента.
	РеквизитыКонтрагента = РеквизитыУчастникаСделки();
	ЗаполнитьРеквизитыУчастникаСделки(ДеревоЭД, ВидКонтрагента, РеквизитыКонтрагента);
	
	// Добавление контрагента в дерево разбора.
	// Используется для поиска контрагента в форме однократной сделки.
	ДобавитьКонтрагентаВДеревоРазбора(ДеревоРазбора, НовыйЭД, ВидКонтрагента, РеквизитыКонтрагента, Ошибка);
	
	Исправление = ЭД.Документ.СвДокПРУ.ИспрДокПРУ;
	Если Исправление <> Неопределено Тогда
		ДатаИсправления = Исправление.ДатаИспрДокПРУ;
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаИсправления", Дата(Сред(ДатаИсправления, 7, 4)
			+ Сред(ДатаИсправления, 4, 2) + Сред(ДатаИсправления, 1, 2)));
			
		НомерИсправления = Исправление.НомИспрДокПРУ;
		ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерИсправления", НомерИсправления);
	КонецЕсли;

	
	ИтогиДокумента = ЭД.Документ.СвДокПРУ.СодФХЖ1.ОписРабот;
	ИтогДокумента = Неопределено;
	Если ИтогиДокумента.Количество() > 0 Тогда
		ИтогДокумента = ИтогиДокумента[0];
	КонецЕсли;
	
	СуммаСНДС = 0;
	Если Не ИтогДокумента = Неопределено Тогда
		
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.НачалоРабот", ИтогДокумента.НачРабот);
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.КонецРабот", ИтогДокумента.КонРабот);
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.СуммаБезНДСИтого", ИтогДокумента.СтБезНДСИт);
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.СуммаНДСИтого", ИтогДокумента.СумНДСИт);
		СуммаСНДС = ИтогДокумента.СтУчНДСИт;
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.СуммаСНДСИтого", СуммаСНДС);
	КонецЕсли;
	
	// Из дерева доп. данных  получаем ИД документа основания.
	// По Ид документа основания находим документа основания.
	ПараметрыПоиска = Новый Структура("Организация, НаправлениеЭД", Организация, Перечисления.НаправленияЭД.Входящий);
	ЗаполнитьДокументыОснования(ДеревоДопДанных, ПараметрыПоиска, ДеревоЭД);

	СведенияОПередаче = ЭД.Документ.СодФХЖ2;;
	
	ДатаИсполнения = СведенияОПередаче.ДатаПер;
	Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаИсполнения", Дата(Сред(ДатаИсполнения, 7, 4) + Сред(ДатаИсполнения, 4, 2) + Сред(ДатаИсполнения, 1, 2)));
	КонецЕсли;
		
	Если ТипЗнч(ИтогДокумента) = Тип("ОбъектXDTO") Тогда
		
		ТаблицаУслуг = ШаблонТаблицыПередачаРабот();
		ДокументОснованиеНайден = Ложь;
		Для Каждого Элемент Из ИтогДокумента.Работа Цикл
				
			НоваяСтрока = ТаблицаУслуг.Добавить();
			НоваяСтрока.НаименованиеНоменклатуры = Элемент.НаимРабот;
			НоваяСтрока.Описание = Элемент.Описание;
			НоваяСтрока.ЕдиницаИзмеренияНаименование = Элемент.НаимЕдИзм;
			// Код 0000 используется из-за требования стандарта.
			КодОКЕИ = Элемент.ОКЕИ;
			Если КодОКЕИ = "0000" Тогда
				КодОКЕИ = "";
			КонецЕсли;
			НоваяСтрока.ЕдиницаИзмеренияКод = КодОКЕИ;
			НоваяСтрока.Количество = Элемент.Количество;
			НоваяСтрока.Цена = Элемент.Цена;
			НоваяСтрока.СуммаБезНДС = Элемент.СтоимБезНДС;
			НоваяСтрока.СуммаНДС = Элемент.СумНДС;
			НоваяСтрока.СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(Элемент.НалСт);
			НоваяСтрока.СуммаСНДС = Элемент.СтоимУчНДС;
			
			ДопРеквизитыСтрокиТч = Новый СписокЗначений;
							
			Если ЗначениеЗаполнено(Элемент.ИнфПолеОписРабот)
				И Элемент.ИнфПолеОписРабот.Количество() > 0 Тогда
				
				ПрочитатьДопДанныеТЧ_ФНС502(Элемент.ИнфПолеОписРабот, ДеревоДопДанных, "Услуги","1." + Элемент.Номер);
				
				ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, ДопРеквизитыСтрокиТч, "1." + Элемент.Номер, "Услуги", Ошибка);
			КонецЕсли;
			
			Для Каждого ЭлементСЗ Из ДопРеквизитыСтрокиТч Цикл
				
				// Номенклатура.
				Если ЭлементСЗ.Представление = "ИД" Тогда
					НоваяСтрока.ИдТовараУКонтрагента = ЭлементСЗ.Значение;
					
				ИначеЕсли ЭлементСЗ.Представление = "НалСт" Тогда
					ЭлементСЗ.Значение = ЭлементСЗ.Значение;
					НоваяСтрока.СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(ЭлементСЗ.Значение);
					
				ИначеЕсли ЭлементСЗ.Представление = "ИдентификаторДокументаОснования"
					И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
					И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
					// Актуальный алгоритм передачи связки с документами-основаниями.
					// В качестве идентификатора документа-основания во входящем ЭД приходит
					// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
					// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
					// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
					// будет найдена.
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Организация",   Организация);
					СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСЗ.Значение, СтруктураОтбора);
					Если ДокументОснование <> Неопределено Тогда
						ДопРеквизитыСтрокиТч.Добавить(ДокументОснование, "ДокументОснование");
						ДокументОснованиеНайден = Истина;
					КонецЕсли;
					
				ИначеЕсли ЭлементСЗ.Представление = "ИДЭДДокументаОснования"
					И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
					И НЕ ДокументОснованиеНайден И ЗначениеЗаполнено(Организация) Тогда
					
					ДокументОснование = ПолучитьДокументОснование(ЭлементСЗ.Значение, Структура);
					Если ДокументОснование <> Неопределено Тогда
						ДопРеквизитыСтрокиТч.Добавить(ДокументОснование, "ДокументОснование");
						ДокументОснованиеНайден = Истина;
					КонецЕсли;
				КонецЕсли;
				ДопДанные = Новый Структура;
				Для Каждого ЭлементСпискаДопДанные Из ДопРеквизитыСтрокиТч Цикл
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("Ид") Тогда
						НоваяСтрока.ИдТовараУКонтрагента = ЭлементСпискаДопДанные.Значение;
					КонецЕсли;
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("ИдентификаторДокументаОснования") Тогда
						ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСпискаДопДанные.Значение, ПараметрыПоиска);
						НоваяСтрока.ДокументОснование = ДокументОснование;
					КонецЕсли;
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("ИДЭДДокументаОснования") Тогда
						ДокументОснование = ДокументОснованиеПоИдентификатору(ЭлементСпискаДопДанные.Значение, ПараметрыПоиска);
						НоваяСтрока.ДокументОснование = ДокументОснование;
					КонецЕсли;

					ДопДанные.Вставить(ЭлементСпискаДопДанные.Представление, ЭлементСпискаДопДанные.Значение);
					
				КонецЦикла;
				Если ДопДанные.Количество()> 0 Тогда
					НоваяСтрока.ДопДанныеПодписанные = ДопДанные;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаУслуг, "ТаблицаУслуг");
		
	КонецЕсли;
	
	Подписанты = ЭД.Документ.Подписант;
	
	Если Подписанты.Количество() > 0 Тогда
		Подписант = Подписанты[0];
		
		ЮрЛицо = Подписант.ЮЛ;
		Если Не ЮрЛицо = Неопределено Тогда
			
			Должность = ЮрЛицо.Должн;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалДолжность", Должность);
			
			ФИО = ЮрЛицо.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалФИО", ФамилияИнициалы);
			
		КонецЕсли;
		
		ИП = Подписант.ИП;
		Если Не ИП = Неопределено Тогда
			ФИО = ИП.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалФИО", ФамилияИнициалы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаСНДС = 0 Тогда
		СуммаСНДС = ТаблицаУслуг.Итог("СуммаСНДС");
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", СуммаСНДС);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ПоместитьДопДанныеВДеревоЭД(ДеревоЭД, ДеревоДопДанных);
	
	НовыйЭД.ЗначениеРеквизита = ДеревоЭД;
	НовыйЭД.ОписаниеОбъекта = "ПередачаРезультатовРабот";
	
КонецПроцедуры

Процедура ПрочитатьПередачаРаботЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	ДатаДок = ЭД.Документ.СодФХЖ3.РезПринял.ДатаПрием;
	ДатаПолучения = "";
	Если ЗначениеЗаполнено(ДатаДок) Тогда
		ДатаПолучения = ДатаИзСтроки(ДатаДок);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
	
	Подписанты = ЭД.Документ.Подписант;
	Если Подписанты.Количество() > 0 Тогда
		Подписант = Подписанты[0];
	КонецЕсли;
	
	ИП = Подписант.ИП;
	Если Не ИП = Неопределено Тогда
		ФИО = ИП.ФИО;
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ФамилияИнициалы);
		
	КонецЕсли;
	
	ЮрЛицо = Подписант.ЮЛ;
	Если Не ЮрЛицо = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялДолжность", ЮрЛицо.Должн);
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ЮрЛицо.ФИО.Фамилия + " " + ЮрЛицо.ФИО.Имя + " " + ЮрЛицо.ФИО.Отчество);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ФамилияИнициалы);
		
	КонецЕсли;
		
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеКомиссионераИзДопДанных(ДеревоРазбора, НовыйЭД, ПространствоИменСхемы, Ошибка)
	
	КомиссионнаяСФ = Ложь;
	СтрКомиссионер = НовыйЭД.Строки.Найти("ДанныеКомиссионера", "Реквизит", Истина);
	КомиссионерНаименование = НовыйЭД.Строки.Найти("КомиссионерНаименование", "Реквизит", Истина);
	КомиссионерДобавлен = Ложь;
	Если ЗначениеЗаполнено(СтрКомиссионер) Тогда
		КомиссионнаяСФ = Истина;
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ОбъектXML = Новый ЧтениеXML;
			Попытка
				СтрокаXML = "<СвПродПокТип xmlns=""" + ПространствоИменСхемы + """> " + СтрКомиссионер.ЗначениеРеквизита
					+ " <Адрес> <АдрРФ КодРегион=""00""/> </Адрес> </СвПродПокТип>";
				ОбъектXML.УстановитьСтроку(СтрокаXML);
				Комиссионер = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("СвПродПокТип", ПространствоИменСхемы));
				ОбъектXML.Закрыть();
				ПрочитатьДанныеКонтрагента(Комиссионер, Комиссионер, ДеревоРазбора, НовыйЭД, Ошибка, "Комиссионер");
				КомиссионерДобавлен = Истина;
			Исключение
				Ошибка = Истина;
				ТекстСообщения = НСтр("ru = 'Не удалось прочитать данные Комиссионера
					|при извлечении данных ЭД (корр)счет-фактура.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД'"),
																							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																							ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(КомиссионерНаименование) Тогда
		// Из прикладных решений с БЭД версии 1.1.15.3 и меньше могут приходить данные о комиссионере
		// в виде набора данных КомиссионерНаименование, КомиссионерИНН, КомиссионерКПП.
		КомиссионнаяСФ = Истина;
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий И НЕ КомиссионерДобавлен Тогда
			РеквизитыКонтрагента = Новый Структура;
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", КомиссионерНаименование.ЗначениеРеквизита);
			СтрокаИНН = НовыйЭД.Строки.Найти("КомиссионерИНН", "Реквизит", Истина);
			РеквизитыКонтрагента.Вставить("ИНН", ?(ЗначениеЗаполнено(СтрокаИНН), СтрокаИНН.ЗначениеРеквизита, ""));
			СтрокаКПП = НовыйЭД.Строки.Найти("КомиссионерКПП", "Реквизит", Истина);
			РеквизитыКонтрагента.Вставить("КПП", ?(ЗначениеЗаполнено(СтрокаКПП), СтрокаКПП.ЗначениеРеквизита, ""));
			ИдКонтрагента = РеквизитыКонтрагента.ИНН + ?(ЗначениеЗаполнено(РеквизитыКонтрагента.КПП), РеквизитыКонтрагента.КПП, "");
			ВидКонтрагента = "Организации";
			ИмяРеквизита = "Организация";
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
			Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
				Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КомиссионнаяСФ;
	
КонецФункции

// Разбираем строковую конструкцию вида "ИНН_КПП".
//
// Возвращаемое значение:
//  Структура параметров с ИНН и КПП.
//
Функция РазобратьИДКонтрагента(Знач СтрокаИД)
	
	ПозицияРазделителя1 = Найти(СтрокаИД, "#");
	СтруктураПоиска = Новый Структура;
	ПозицияРазделителя1 = Найти(СтрокаИД, "_");
	Если ПозицияРазделителя1 > 0 Тогда
		ИНН = Лев(СтрокаИД, ПозицияРазделителя1 - 1);
		КПП = Сред(СтрокаИД, ПозицияРазделителя1 + 1, СтрДлина(СтрокаИД) - ПозицияРазделителя1);
	ИначеЕсли СтрДлина(СтрокаИД) > 0 Тогда
		ИНН = СокрЛП(СтрокаИД);
		КПП = "";
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ИНН", ИНН);
	СтруктураПоиска.Вставить("КПП", КПП);
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Функция преобразует строку в дату и время.
//
// Параметры:
//  ДатаВремя - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС".
//
// Возвращаемое значение:
//  Значение типа "ДатаВремя".
//
Функция ПолучитьДатуВремяИзСтроки(ДатаВремя)
	
	Результат = Неопределено;
	ДатаВремя = СтрЗаменить(ДатаВремя, "-", "");
	ДатаВремя = СтрЗаменить(ДатаВремя, ":", "");
	Если СтрДлина(ДатаВремя) - Найти(ДатаВремя, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "0");
	ИначеЕсли Найти(ДатаВремя, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		ДатаВремя = СтрЗаменить(ДатаВремя, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(ДатаВремя);  // дата и время в виде "ГГГГММДДЧЧММСС"
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОписаниеТипа.ПривестиЗначение(Лев(ДатаВремя, 8));  // только дата "ГГГГММДД"
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьФайлCMLпоXDTO(ИмяФайла, ДеревоРазбора, НовыйЭД, ОшибкаРазбора)
	
	ОписаниеОшибки = "";
	ПространствоИменФНС = Неопределено;
	ДанныеФайлаЭД = ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки, ПространствоИменФНС);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ОшибкаРазбора = Истина;
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Блок для форматов ФНС
	Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда //чтение файлов без namespace по форматам ФНС
		
		Если Найти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPR") > 0 Тогда
			ПрочитатьИнформациюПродавцаXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPOK") > 0 Тогда
			ПрочитатьИнформациюПокупателяXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPR") > 0 Тогда
			ПрочитатьИнформациюПродавцаУКДXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPOK") > 0 Тогда
			ПрочитатьИнформациюПокупателяУКДXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
			ПрочитатьСчетФактуруXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда
			ПрочитатьКорректировочныйСчетФактуруXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда
			ПрочитатьТОРГ12XDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PTORG12") > 0 Тогда
			ПрочитатьТОРГ12ПокупательXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда
			ПрочитатьАкт501XDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ZAKTPRM") > 0 Тогда
			ПрочитатьАкт501ЗаказчикXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда
			ПрочитатьКорректировочныйДокументXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PKORDOC") > 0 Тогда
			ПрочитатьКорректировочныйДокументПолучательXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_IZVPOL") > 0 Тогда
			ПрочитатьИзвещениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_UVUTOCH") > 0 Тогда
			ПрочитатьУточнениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PRANNUL") > 0 Тогда
			ПрочитатьПредложениеОбАннулированииXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
			ПрочитатьПодтверждениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PDOTPR") > 0 Тогда
			ПрочитатьПодтверждениеДатыОтправкиXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PDPOL") > 0 Тогда
			ПрочитатьПодтверждениеДатыПолученияXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "POD") > 0 Тогда
			ПрочитатьПодтверждениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда
			ПрочитатьПередачаТоваровПродавецXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPOK") > 0 Тогда
			ПрочитатьПередачаТоваровПокупательXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда
			ПрочитатьПередачаРаботИсполнительXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUZAK") > 0 Тогда
			ПрочитатьПередачаРаботЗаказчикXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);

		КонецЕсли;
		
		// Помещаем в шапку имя пространства имен, чтобы по нему формировать ответный титул.
		Если Не ПространствоИменФНС = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПространствоИмен", ПространствоИменФНС);
		КонецЕсли;
		
	КонецЕсли;
	
	// Блок для формата 4.02
	Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02") Тогда
		УдалитьПрочитатьКаталогXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
		УдалитьПрочитатьПрайсXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02") Тогда
		УдалитьПрочитатьАктОПриемкеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02") Тогда
		УдалитьПрочитатьНакладнуюXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02") Тогда
		УдалитьПрочитатьСчетНаОплатуXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02") Тогда
		УдалитьПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02") Тогда
		УдалитьПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
		УдалитьПрочитатьЗаказXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
		
	КонецЕсли;
	
	// Блок для формата 2.08
	ПространствоИменCML = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация", ПространствоИменCML) Тогда
		
		Если ДанныеФайлаЭД.Документ <> Неопределено И ДанныеФайлаЭД.Документ.Количество() > 0 Тогда
			ЭДокумент = ДанныеФайлаЭД.Документ[0];
			Если ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Отчет о продажах комиссионного товара'")) Тогда
				
				ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭДокумент, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Отчет о списании комиссионного товара'")) Тогда
				ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭДокумент, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Счет на оплату'")) Тогда
				ПрочитатьСчетНаОплатуXDTO(ЭДокумент, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Заказ товара'")) Тогда
				ПрочитатьЗаказXDTO(ЭДокумент, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег(НСтр("ru = 'Передача прав'")) Тогда
				ПрочитатьАктНаПередачуПравXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
				
			КонецЕсли;
			
		ИначеЕсли Не ДанныеФайлаЭД.ПакетПредложений = Неопределено Тогда
			ПрочитатьПрайсXDTO(ДанныеФайлаЭД.ПакетПредложений, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли ДанныеФайлаЭД.Свойства().Получить("Каталог") <> Неопределено И ДанныеФайлаЭД.Получить("Каталог") <> Неопределено Тогда
			ПрочитатьКаталогXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		КонецЕсли;
		
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент", ПространствоИменCML) Тогда
		ПрочитатьРеквизитыОрганизацииXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора)
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйЭД.ВидЭД) Тогда
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1.'"), ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ОшибкаРазбора = Истина;
	Иначе
		Строки = ДеревоРазбора.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтавкаНДС"), Истина);
		Для Каждого СтрокаДерева Из Строки Цикл
			СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(СтрокаДерева.ЗначениеРеквизита);
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтрокаДерева.ЗначениеРеквизита = СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СоставнойАдрес(Параметры)
	
	ВозврЗнч = "";
	Для Каждого Свойство Из Параметры.Свойства() Цикл
		ДобПараметр = "";
		Если НЕ ЗначениеЗаполнено(Параметры[Свойство.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		Если Свойство.Имя = "Индекс" Тогда
			ДобПараметр = Параметры[Свойство.Имя];
		ИначеЕсли Свойство.Имя = "КодРегион" Тогда
			ДобПараметр = ОбменСКонтрагентамиПереопределяемый.НазваниеРегиона(Параметры.КодРегион);
		Иначе
			ДобПараметр = "";
			Если Свойство.Имя = "Дом" Тогда
				ДобПараметр = НСтр("ru = 'дом №'") + " ";
			ИначеЕсли Свойство.Имя = "Корпус" Тогда
				ДобПараметр = НСтр("ru = 'корпус'") + " ";
			ИначеЕсли Свойство.Имя = "Кварт" Тогда
				ДобПараметр = НСтр("ru = 'кв.'") + " ";
			КонецЕсли;
			ДобПараметр = ДобПараметр + Параметры[Свойство.Имя];
		КонецЕсли;
		Если ЗначениеЗаполнено(ДобПараметр) Тогда
			ВозврЗнч = ?(ЗначениеЗаполнено(ВозврЗнч), ВозврЗнч + ", ", "") + ДобПараметр;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозврЗнч;
	
КонецФункции

Функция ДатаИзСтроки(Строка)
	
	Возврат Дата(Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2) + "000000");
	
КонецФункции

Процедура ПрочитатьДанныеКонтрагента(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = "")
	
	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани) Тогда
		ВидКонтрагента = "Организации";
		Если Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
			ИмяРеквизита = "Контрагент";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ИначеЕсли Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель" Тогда
			ИмяРеквизита = Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
		
	ИначеЕсли Роль = "Комиссионер" Тогда
		Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий) Тогда
			ВидКонтрагента = "Организации";
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		Иначе
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = "Комиссионер";
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
		
	ИначеЕсли Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		
	ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		
	ИначеЕсли Роль = "Грузоотправитель"  Тогда
		
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = Роль;
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		
	ИначеЕсли Роль = "Грузополучатель"  Тогда
			
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = Роль;
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
			
	ИначеЕсли Роль = "ПокупательКомиссии" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Покупатель";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаПокупателя";
	КонецЕсли;
	
	// Контрагент
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	ИначеЕсли Элемент.Тип().URIПространстваИмен = "OTORG12"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM2"
		ИЛИ Элемент.Тип().URIПространстваИмен = "OKORDOC"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "OTORG_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "PTORG_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "SFAKT_5_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "KORSFAKT_5_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "SFAKT"
		ИЛИ Элемент.Тип().URIПространстваИмен = "KORSFAKT" Тогда
		ИдКонтрагента = "";
		Если Элемент.ИдСв <> Неопределено Тогда
			Если Элемент.ИдСв.СвЮЛ <> Неопределено И НЕ Элемент.ИдСв.СвЮЛ.НаимОрг = "---" Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование", Элемент.ИдСв.СвЮЛ.НаимОрг);
				РеквизитыКонтрагента.Вставить("Наименование", Элемент.ИдСв.СвЮЛ.НаимОрг);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвЮЛ.ИННЮЛ);
				РеквизитыКонтрагента.Вставить("КПП", Элемент.ИдСв.СвЮЛ.КПП);
				Если Элемент.ИдСв.СвЮЛ.Свойства().Получить("ОКОПФ") <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("ОКОПФ", Элемент.ИдСв.СвЮЛ.ОКОПФ);
				КонецЕсли;
				Если ЗначениеЗаполнено(Элемент.ИдСв.СвЮЛ.ИННЮЛ) Тогда
					ИдКонтрагента = Элемент.ИдСв.СвЮЛ.ИННЮЛ + Элемент.ИдСв.СвЮЛ.КПП;
				КонецЕсли;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			ИначеЕсли Элемент.ИдСв.СвФЛ <> Неопределено Тогда
				ПолноеНаименование = Элемент.ИдСв.СвФЛ.ФИОИП.Фамилия +" "+ Элемент.ИдСв.СвФЛ.ФИОИП.Имя
					+ " " + Элемент.ИдСв.СвФЛ.ФИОИП.Отчество;
				РеквизитыКонтрагента.Вставить("ПолноеНаименование", ПолноеНаименование);
				РеквизитыКонтрагента.Вставить("Наименование", ПолноеНаименование);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвФЛ.ИННФЛ);
				ИдКонтрагента = Элемент.ИдСв.СвФЛ.ИННФЛ;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("ОКПО") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		КонецЕсли;
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если ЭлементАдрес.АдрРФ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", СоставнойАдрес(ЭлементАдрес.АдрРФ));
			ИначеЕсли ЭлементАдрес.АдрИно <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
			ИначеЕсли ЗначениеЗаполнено(ЭлементАдрес.АдрТекст) Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("Контакт") <> Неопределено Тогда
			ЭлементКонтакты = Элемент.Контакт;
			Если ЭлементКонтакты <> Неопределено Тогда
				Если ЭлементКонтакты.Тлф <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
				КонецЕсли;
				Если ЭлементКонтакты.Факс <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.Тип().URIПространстваИмен = "TORGPR"
		ИЛИ Элемент.Тип().URIПространстваИмен = "RUISP" Тогда
		
		СведенияЮрЛица = Неопределено;
		Если Не Элемент.ИдСв.СвОрг = Неопределено Тогда
			СведенияЮрЛица = Элемент.ИдСв.СвОрг.СвЮЛ;
		КонецЕсли;
		СведенияФизЛица = Элемент.ИдСв.СвФЛ;
		
		Если Не СведенияЮрЛица = Неопределено И НЕ СведенияЮрЛица.НаимОрг = "---" Тогда
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", СведенияЮрЛица.НаимОрг);
			РеквизитыКонтрагента.Вставить("ИНН", СведенияЮрЛица.ИННЮЛ);
			РеквизитыКонтрагента.Вставить("КПП", СведенияЮрЛица.КПП);
			
			Если ЗначениеЗаполнено(СведенияЮрЛица.ИННЮЛ) Тогда
				ИдКонтрагента = СведенияЮрЛица.ИННЮЛ + СведенияЮрЛица.КПП;
			КонецЕсли;
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			
		ИначеЕсли Не СведенияФизЛица = Неопределено Тогда
			
			ФИОФизЛица = СведенияФизЛица.ФИО;
			РеквизитыКонтрагента.Вставить("ПолноеНаименование",
			ФИОФизЛица.Фамилия +" "+ ФИОФизЛица.Имя
			+ " " + ФИОФизЛица.Отчество);
			РеквизитыКонтрагента.Вставить("ИНН", СведенияФизЛица.ИННФЛ);
			ИдКонтрагента = СведенияФизЛица.ИННФЛ;
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
			
		Иначе
			СведенияИностраннаяОрганизация = Неопределено;
			Если Не Элемент.ИдСв.СвОрг = Неопределено Тогда
				СведенияИностраннаяОрганизация = Элемент.ИдСв.СвОрг.ИнОрг;
			КонецЕсли;
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", СведенияИностраннаяОрганизация.НаимОрг);
			РеквизитыКонтрагента.Вставить("Наименование", СведенияИностраннаяОрганизация.НаимОрг);
			РеквизитыКонтрагента.Вставить("Страна", СведенияИностраннаяОрганизация.Страна);
			РеквизитыКонтрагента.Вставить("ИныеСведения", СведенияИностраннаяОрганизация.ИныеСвед);
			
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("ОКПО") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		КонецЕсли;
		
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если Не ЭлементАдрес.АдрРФ = Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", СоставнойАдрес(ЭлементАдрес.АдрРФ));
				
			ИначеЕсли ЕстьСвойствоXDTO(ЭлементАдрес, "АдрИнф") Тогда
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИнф, "АдрТекст") Тогда
					РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИнф.АдрТекст);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИнф, "КодСтр") Тогда
					РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИнф.КодСтр);
				КонецЕсли;
				
			ИначеЕсли ЕстьСвойствоXDTO(ЭлементАдрес, "АдрИно") Тогда
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИно, "АдрТекст") Тогда
					РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИно, "КодСтр") Тогда
					РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
				КонецЕсли				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "Контакт") Тогда
			ЭлементКонтакты = Элемент.Контакт;
			Если ЭлементКонтакты <> Неопределено Тогда
				Если ЕстьСвойствоXDTO(ЭлементКонтакты, "Тлф") Тогда
					РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(ЭлементКонтакты, "Факс") Тогда
					РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				ИдКонтрагента = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Роль") Тогда
				Если ВРег(ЗнДанных) = ВРег("Продавец") Тогда
					Если НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					Иначе
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
					КонецЕсли;
				ИначеЕсли ВРег(ЗнДанных) = ВРег("Покупатель") Тогда
					Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
					Иначе
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
				РеквизитыУчастника = ЗнДанных;
				Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
					РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
					Если РеквизитУчастника <> Неопределено Тогда
						Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
							РеквизитыКонтрагента.Вставить("ЮридическийАдрес_Представление", РеквизитУчастника.Представление);
						ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
							РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
						Иначе // остальное по именам
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Адрес") Тогда
				РеквизитыКонтрагента.Вставить("ФактическийАдрес_Представление", ЗнДанных.Представление);
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Контакты") Тогда
				ТаблицаКонтактов = Новый ТаблицаЗначений();
				ТаблицаКонтактов.Колонки.Добавить("Вид");
				ТаблицаКонтактов.Колонки.Добавить("Представление");
				ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
				Для Каждого Контакт Из ЗнДанных.Контакт Цикл
					Вид = Неопределено;
					Если Контакт.Тип = НСтр("ru = 'Почта'") Тогда
						Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
					ИначеЕсли Контакт.Тип = НСтр("ru = 'Телефон рабочий'") Тогда
						Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
					ИначеЕсли Контакт.Тип = НСтр("ru = 'Факс'") Тогда
						Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксКонтрагента");
					КонецЕсли;
					Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
						НовКонт = ТаблицаКонтактов.Добавить();
						НовКонт.Вид = Вид;
						НовКонт.Представление = Контакт.Значение;
						НовКонт.ЗначенияПолей = Контакт.Комментарий;
					КонецЕсли;
				КонецЦикла;
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);
			Иначе // остальное по именам
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
			
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено Тогда
			РасчетныеСчета = Элемент.РасчетныеСчета;
			Если РасчетныеСчета <> Неопределено Тогда
				РасчетныеСчетаXDTO = РасчетныеСчета.ПолучитьСписок("РасчетныйСчет");
				Для Каждого РасчетныйСчетXDTO Из РасчетныеСчетаXDTO Цикл
					ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
					Прервать;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Свойства().Получить("БанкРекв") <> Неопределено И Элемент.БанкРекв <> Неопределено Тогда
			ПрочитатьДанныеПоРасчетномуСчетуТорг12(НовыйЭД, Элемент.БанкРекв, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("РеквизитыПолучателя") <> Неопределено Тогда
		СвойствоЭД = ЭД.Свойства().Получить("РеквизитыПолучателя");
		РеквизитыПолучателя = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РеквизитыПолучателя, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
					+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	
	
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");

	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка);
		
		// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
		Если ИдентификацияПоНоменклатуреКомпании Тогда 
			
			НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ);
			
		Иначе
			
			НайтиНоменклатуруПоставщикаТЧ(ПоляПоискаТовара, СписокТЧ, НовыйЭД, ДеревоРазбора, ЭД, Ошибка);
			
		КонецЕсли;
		
		ДобавитьСтрокуТабличнойЧасти(ДеревоРазбора, НовыйЭД, ПоляПоискаТовара, СписокТЧ, Ошибка);
		
	КонецЦикла;

		
КонецПроцедуры

Процедура РазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки = Неопределено)
	
	ИдЭД = ?(ЭД.Свойства().Получить("ИД") = Неопределено, "", ЭД.Ид);
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
				НаимЕдИзм = "";
				Если ЗнДанных.Свойства().Получить("Наименование") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					НаимЕдИзм = ЗнДанных.Наименование;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеКраткое") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.НаименованиеКраткое);
					НаимЕдИзм = ЗнДанных.НаименованиеКраткое;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("НаименованиеПолное", ЗнДанных.НаименованиеПолное);
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("МеждународноеСокращение", ЗнДанных.МеждународноеСокращение);
				КонецЕсли;
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, НаимЕдИзм,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
				Если НЕ ЗнДанных.Свойства().Получить("Наименование") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
				КонецЕсли;
				Если НЕ ЗнДанных.Свойства().Получить("Коэффициент") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Коэффициент", ЗнДанных.Коэффициент);
				КонецЕсли;
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных.Код),
					ЗнДанных.Наименование, ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налог") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				Если ВРег(ЗнДанных.ТипНалога) = "НДС" Тогда
					СписокТЧ.Добавить(ЗнДанных.ВеличинаСтавкиНалога, "СтавкаНДС");
					СписокТЧ.Добавить(ЗнДанных.Сумма, "СуммаНДС");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаБезНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаСУчетомНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "СуммаСНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("СрокГодности") Тогда
			СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			Для Каждого ЭлементДанных Из ЗнДанных Цикл
				МассивЗначений = Новый Массив;
				Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					МассивЗначений.Добавить(ЭлементЗначения)
				КонецЦикла;
				СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
			КонецЦикла;
			
		// Схема 2:
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Единица") Тогда
			РеквизитыЕдИзм = Новый Структура;
			Если ЗначениеЗаполнено(ЗнДанных) Тогда
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных);
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных), РеквизитыЕдИзм);
				НаименованиеЕИ = ?(ЗначениеЗаполнено(ЕдИзм), ЕдИзм.Наименование, Неопределено);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных), НаименованиеЕИ,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
			Если ТипЗнч(ЗнДанных.Налог) = Тип("СписокXDTO") Тогда
				МассивСтруктур = Новый Массив;
				Для Каждого Налог Из ЗнДанных.Налог Цикл
					СтруктураНалога = Новый Структура;
					Для Каждого СвойствоНалога Из Налог.Свойства() Цикл
						ЗначениеНалога = Налог.Получить(СвойствоНалога);
						Если НЕ ЗначениеЗаполнено(ЗначениеНалога) Тогда
							Продолжить;
						КонецЕсли;
						СтруктураНалога.Вставить(СвойствоНалога.Имя, ЗначениеНалога);
					КонецЦикла;
					МассивСтруктур.Добавить(СтруктураНалога);
				КонецЦикла;
				Если МассивСтруктур.Количество() > 0 Тогда
					СтруктураНалога = МассивСтруктур[0];
					СтавкаНДС = "";
					НДСУчтеноВСумме = "";
					СуммаНДС = 0;
					Если НЕ СтруктураНалога.Свойство("Ставка", СтавкаНДС) Тогда
						СтавкаНДС = НСтр("ru = 'без НДС'");
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("УчтеноВСумме", НДСУчтеноВСумме) Тогда
						НДСУчтеноВСумме = Ложь;
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("Сумма", СуммаНДС) Тогда
						СуммаНДС = 0;
					КонецЕсли;
					СписокТЧ.Добавить(СтавкаНДС, "СтавкаНДС");
					СписокТЧ.Добавить(СуммаНДС, "СуммаНДС");
					СписокТЧ.Добавить(НДСУчтеноВСумме, "НДСУчтеноВСумме");
				КонецЕсли;
				Если МассивСтруктур.Количество() > 1 Тогда
					СписокТЧ.Добавить(МассивСтруктур, "Налоги");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ДопРасходы") Тогда
			
			МассивСтруктур = Новый Массив;
			Для Каждого ЭлСписка Из ЗнДанных[ТекСвойство.Имя] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого СвойствоДопСписка Из ЭлСписка.Свойства() Цикл
					ЗначениеДопСписка = Налог.Получить(СвойствоДопСписка);
					Если НЕ ЗначениеЗаполнено(ЗначениеДопСписка) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураНалога.Вставить(СвойствоДопСписка.Имя, ЗначениеДопСписка);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
			СписокТЧ.Добавить(МассивСтруктур, ТекСвойство.Имя);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеЗначенияРеквизитов")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЗначенияРеквизитов") Тогда
			
			ДопРеквизиты = Новый Структура;
			Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
			Если ЗначениеЗаполнено(Организация) Тогда
				ДопРеквизиты.Вставить("Организация", Организация);
			КонецЕсли;
			
			ПрочитатьСписокЗначенийРеквизитовCML(ЗнДанных.ЗначениеРеквизита, СписокТЧ, Ошибка, ДопРеквизиты);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Сумма") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаЗаЕдиницу") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Цена");
			
		Иначе
			СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
	Если ИдентификацияПоНоменклатуреКомпании Тогда
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
	Иначе
		// Номенклатура поставщиков.
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
		Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			РеквизитыНоменклатурыПоставщика, ИдЭД);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
			РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ИдЭД);
		
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		КонецЕсли;
	КонецЕсли;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Организация", Организация);
	
	Если ТипЗНЧ(НомерСтроки) = Тип("Число") Тогда
		НомерСтроки = НомерСтроки + 1;
	КонецЕсли;
	ПрочитатьДопДанныеСтрокиТЧ(Элемент, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Элемент.НомТов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВидаОплаты(ВидОплаты, Роль)
	
	ВозвращаемоеЗначение = "";
	
	Если ВидОплаты = "Аванс" Тогда
		Если Роль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
			НСтр("ru = 'Аванс (до обеспечения)'"));
		ИначеЕсли Роль = "Покупатель"  Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
			НСтр("ru = 'Аванс (до подтверждения)'"));
		КонецЕсли;
	ИначеЕсли ВидОплаты = "Предоплата" Тогда
		Если Роль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
			НСтр("ru = 'Предоплата (до отгрузки)'"));
		ИначеЕсли Роль = "Покупатель" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
			НСтр("ru = 'Предоплата (до поступления)'"));
		КонецЕсли;
	ИначеЕсли ВидОплаты = "Кредит" Тогда
		Если Роль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
			НСтр("ru = 'Кредит (после отгрузки)'"));
		ИначеЕсли Роль = "Покупатель" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
			НСтр("ru = 'Кредит (после поступления)'"));
		КонецЕсли;
	Иначе
		ВозвращаемоеЗначение = ВидОплаты;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если НЕ ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	СписокТЧ = Новый СписокЗначений;
	НомерСтрокиСтар = 1;
	
	Для Каждого Элемент Из НаборДанных Цикл
		СписокТЧ = Новый СписокЗначений;
		ЗаполнитьСписокРеквизитов(СписокТЧ, Элемент, ЭД);
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСписокРеквизитов(СписокТЧ, Знач Элемент, ЭД)
	
	Пока СтрДлина(Элемент) > 0 Цикл
		
		ПозицияРазделителя = Найти(Элемент, "#");
		РеквизитЗначение = Лев(Элемент, ПозицияРазделителя );
		Элемент = СтрЗаменить(Элемент, РеквизитЗначение, "");
		
		Позиция = Найти(РеквизитЗначение, "&");
		
		Реквизит = Лев(РеквизитЗначение, Позиция - 1);
		
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение, Реквизит, "");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"&","");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"#","");
		
		Если ВРег(Реквизит) = ВРег("ВариантОплаты") Тогда
			РеквизитЗначение = ЗначениеВидаОплаты(РеквизитЗначение, ЭД.Роль);
		КонецЕсли;
		
		СписокТЧ.Добавить(РеквизитЗначение, Реквизит);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных)
					И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") 
					И Не ВРег(ТекСвойство.Имя) = ВРег("ПроцентПлатежа") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ВРег(ТекСвойство.Имя) = ВРег("ДатаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ДатаПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ПроцентПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ПроцентПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "СуммаПлатежа");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ВидОплаты") Тогда
					Если ЗнДанных = "Аванс" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								НСтр("ru = 'Аванс (до обеспечения)'")), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель"  Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								НСтр("ru = 'Аванс (до подтверждения)'")), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Предоплата" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								НСтр("ru = 'Предоплата (до отгрузки)'")), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								НСтр("ru = 'Предоплата (до поступления)'")), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Кредит" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								НСтр("ru = 'Кредит (после отгрузки)'")), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								НСтр("ru = 'Кредит (после поступления)'")), "ВариантОплаты");
						КонецЕсли;
					КонецЕсли;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеТЧКаталогТоваров(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	Владелец = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("Владелец", Владелец);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка);
		
		НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			ПоляПоискаТовара, ЭД.Ид);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		
		ИдТовара = ПоляПоискаТовара.Ид;
		НаимТовара = ПоляПоискаТовара.Наименование;
		
		НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
			ПоляПоискаТовара, ДеревоРазбора, Ошибка);
			
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			ПоляПоискаТовара.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		
		Номенклатура = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", ПоляПоискаТовара, ЭД.Ид);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
			ПоляПоискаТовара, ДеревоРазбора, Ошибка);
			
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании = Истина)
	
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");

	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка);
		
		Если ИдентификацияПоНоменклатуреКомпании Тогда
			
			НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ);
			
		Иначе
			
			НайтиНоменклатуруПоставщикаТЧ(ПоляПоискаТовара, СписокТЧ, НовыйЭД, ДеревоРазбора, ЭД, Ошибка);
			
		КонецЕсли;
		
		ДобавитьСтрокуТабличнойЧасти(ДеревоРазбора, НовыйЭД, ПоляПоискаТовара, СписокТЧ, Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчетуТорг12(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
	
	// Обработка банка счета
	
	БанкXDTO = РасчетныйСчетXDTO.СвБанк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",			БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.НаимБанк);
	
	БанкСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора
	ТипБанкиВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	// Обработка самого счета
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета, РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, НСтр("ru = 'Номер счета:'") + " " + РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчету(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
					
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		БанкXDTO = РасчетныйСчетXDTO.Банк;
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
		РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
		РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);
		
	Иначе
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          РасчетныйСчетXDTO.БИК);
		РеквизитыБанка.Вставить("Наименование", РасчетныйСчетXDTO.НаименованиеБанка);
		РеквизитыБанка.Вставить("КоррСчет",     РасчетныйСчетXDTO.СчетКорреспондентский);
		
	КонецЕсли;
	
	БанкСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора.
	ТипБанкиВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	// Обработка банка корреспондента
	ЕстьБанкКорреспондент = Ложь;
	
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
		Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
		
			ЕстьБанкКорреспондент = Истина;
			БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",          БанкКорреспондентXDTO.БИК);
			РеквизитыБанкаКорреспондента.Вставить("Наименование", БанкКорреспондентXDTO.Наименование);
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     БанкКорреспондентXDTO.СчетКорреспондентский);
			
		КонецЕсли;
	ИначеЕсли РасчетныйСчетXDTO.Свойство("БИККорр") И ЗначениеЗаполнено(РасчетныйСчетXDTO.БИККорр) Тогда
		
			ЕстьБанкКорреспондент = Истина;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",          РасчетныйСчетXDTO.БИККорр);
			РеквизитыБанкаКорреспондента.Вставить("Наименование", РасчетныйСчетXDTO.НаименованиеКорр);
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     РасчетныйСчетXDTO.СчетКорр);
			
	КонецЕсли;
	
	Если ЕстьБанкКорреспондент Тогда
		
		БанкКорреспондентСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки",
			РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
		
		// Создаем объект банка в дереве разбора
		ТипБанкиКоррВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
		"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДеревоРазбора,
		Ошибка);
		
	КонецЕсли;
	
	// Обработка самого счета	
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета,
		РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора.
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, НСтр("ru = 'Номер счета:'") + " "
		+ РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ЕстьБанкКорреспондент Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
	КонецЕсли;
	
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетнымСчетамКонтрагентаCML(
					НовыйЭД,
					РасчетныеСчетаXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
					
	НаборДанных = РасчетныеСчетаXDTO.РасчетныйСчет;
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РасчетныйСчетXDTO Из НаборДанных Цикл
		
		СписокТЧ = Новый СписокЗначений;
		
		БанкXDTO = РасчетныйСчетXDTO.Банк;
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
		РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
		РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);
		РеквизитыБанка.Вставить("SWIFT",     	БанкXDTO.SWIFT);

		БанкСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
		
		СписокТЧ.Добавить(БанкXDTO.БИК,						"БанкБИК");
		СписокТЧ.Добавить(БанкXDTO.Наименование,			"БанкНаименование");
		СписокТЧ.Добавить(БанкXDTO.СчетКорреспондентский,	"БанкСчетКорр");
		СписокТЧ.Добавить(БанкXDTO.SWIFT,					"БанкSWIFT");
		
		// Создаем объект банка в дереве разбора.
		ТипБанкиВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
																		БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
		
		// Обработка банка корреспондента
		ЕстьБанкКорреспондент = Ложь;
		СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
		Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
			
			ЕстьБанкКорреспондент = Истина;
			БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",			БанкКорреспондентXDTO.БИК);
			РеквизитыБанкаКорреспондента.Вставить("Наименование",	БанкКорреспондентXDTO.Наименование);
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",		БанкКорреспондентXDTO.СчетКорреспондентский);
			РеквизитыБанкаКорреспондента.Вставить("SWIFT",			БанкКорреспондентXDTO.SWIFT);
			
			СписокТЧ.Добавить(БанкКорреспондентXDTO.БИК,					"БанкКоррБИК");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.Наименование,			"БанкКоррНаименование");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.СчетКорреспондентский,	"БанкКоррСчетКорр");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.SWIFT,					"БанкКоррSWIFT");
			
			БанкКорреспондентСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки",
										РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
			
			// Создаем объект банка в дереве разбора
			ТипБанкиКоррВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
			
			СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
				"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДеревоРазбора,
				Ошибка);
			
		КонецЕсли;	
		
		// Обработка самого счета	
		РеквизитыБанковскогоСчета = Новый Структура;
		РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
		
		СписокТЧ.Добавить(РасчетныйСчетXDTO.НомерСчета,		"НомерСчета");
		СписокТЧ.Добавить(РасчетныйСчетXDTO.Комментарий,	"Комментарий");
		
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
		КонецЕсли;
		
		БанковскийСчетСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета,
												РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
		
		// Создаем объект расчетного счета в дереве разбора.
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
		
		СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве,
					РеквизитыБанковскогоСчета.НомерСчета, НСтр("ru = 'Номер счета:'") + " " + РеквизитыБанковскогоСчета.НомерСчета,
					БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
		
		// Заполняем реквизиты банковского счета
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
		Если ЕстьБанкКорреспондент Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
		КонецЕсли;	
		
		Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
			Если Роль = "Грузоотправитель" Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
			ИначеЕсли Роль = "Грузополучатель" Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
			КонецЕсли	
		ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
			Если Роль = "Грузоотправитель" Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
			Иначе	
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;	
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧРасчетныйСчет", СписокТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗначениеСвойства = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗначениеСвойства);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗначениеСвойства);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗначениеСвойства);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
						СвойстваЕдиницы = Новый Структура;
						СвойстваЕдиницы.Вставить("Код", ЗначениеСвойства.Код);
						СвойстваЕдиницы.Вставить("Наименование", ЗначениеСвойства.Наименование);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗначениеСвойства.Код,
							СвойстваЕдиницы);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗначениеСвойства.Код, ЗначениеСвойства.Наименование,
							ЕдИзм, СвойстваЕдиницы, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
						
						СвойстваЕдиницы = Новый Структура;
						СвойстваЕдиницы.Вставить("Код", Строка(ЗначениеСвойства.Код));
						СвойстваЕдиницы.Вставить("Наименование", ЗначениеСвойства.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗначениеСвойства.Код),
							СвойстваЕдиницы);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗначениеСвойства.Код), ЗначениеСвойства.Наименование,
							ЕдИзм, СвойстваЕдиницы, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗначениеСвойства.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗначениеСвойства.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СписокТЧ.Добавить(Налог.ВеличинаСтавкиНалога, "СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗначениеСвойства.СуммаБезНалога, "Сумма");
							КонецЕсли;
							
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗначениеСвойства.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗначениеСвойства.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗначениеСвойства.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗначениеСвойства), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗначениеСвойства) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") Тогда
					СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗначениеСвойства), ТекСвойство.Имя);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗначениеСвойства Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗначениеСвойства, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе // Все остальные случаи - ищем по номенклатуре поставщика.
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);
		
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СписокТЧ.Добавить(Налог.ВеличинаСтавкиНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;	
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
										СписокТЧ.Добавить(Скидка.Процент,"ПроцентРучнойСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
				КонецЕсли;
			Иначе
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
					РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				
				СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
				ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураРеквизитовТовара, ЭД.Ид);
		
				Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
				КонецЕсли;
				
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных)
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура.
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, 
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СписокТЧ.Добавить(Налог.ВеличинаСтавкиНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаПродажи");
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "СуммаБезНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Цена") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ЦенаПродажи");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Цена");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Сумма");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						
						Если ЭлементДанных.Значение.Количество() > 1 Тогда
							МассивЗначений = Новый Массив;
							Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
							Если ЭлементДанных.Наименование = "ПокупательФактАдрес" ИЛИ ЭлементДанных.Наименование = "ПокупательЮрАдрес" Тогда
								ЭлементЗначения = РазложитьАдрес(ЭлементЗначения);
							ИначеЕсли ЭлементДанных.Наименование = "ДатаПродажи" Тогда
								ЭлементЗначения = ПолучитьДатуВремяИзСтроки(ЭлементЗначения);
							КонецЕсли;
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
							СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
						Иначе
						
							ЭлементЗначения = ЭлементДанных.Значение[0];
							// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
							Если ЭлементДанных.Наименование = "ПокупательФактАдрес" ИЛИ ЭлементДанных.Наименование = "ПокупательЮрАдрес" Тогда
								ЭлементЗначения = РазложитьАдрес(ЭлементЗначения);
							ИначеЕсли ЭлементДанных.Наименование = "ДатаПродажи" Тогда
								ЭлементЗначения = ПолучитьДатуВремяИзСтроки(ЭлементЗначения);
							КонецЕсли;
							СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, ЭлементЗначения);
						КонецЕсли;
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДопРеквизиты Тогда
				СписокТЧ.Добавить(СтруктураДопРеквизитов, "ДополнительныеРеквизиты");
			КонецЕсли;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
					СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
					СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Если НЕ ЭтоНоменклатура(СсылкаНаОбъект) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				// Проверим, что Описания совпадают по одной ссылке
				Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>'"), СсылкаНаОбъект,
						НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
				КонецЕсли;
			Иначе
				// У номенклатуры может быть такое, в случае когда несколько элементов вход.данных
				// имеют ссылку на один элемент справочника.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект",  СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД",              ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект  = СсылкаНаОбъект;
					НайденнаяСтрока.ИД              = ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
					НайденнаяСтрока.ОписаниеТипа    = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
						СтрокаТипаВДереве.ТипОбъекта);
					НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
						НайденнаяСтрока));
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // Непредвиденная ситуация
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>'"),
						ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			Если ЭтоСсылочныйОбъект(СтрокаТипаВДереве.ТипОбъекта) Тогда
				НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
					СтрокаТипаВДереве.ТипОбъекта);
			КонецЕсли;
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Функция ЭтоСсылочныйОбъект(ТипОбъекта)
	
	Если ТипОбъекта = "Штамп" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РазобратьИДТовара(знач ИД)
	
	СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Поз = Найти(ИД, "#");
	Если Поз > 0 Тогда
		
		СтруктураВозврата.ИДТовара = Сред(ИД, 1 , Поз - 1);
		Если СтрДлина(ИД) > Поз Тогда
			
			Ид = Сред(ИД, Поз + 1);
			Поз = Найти(ИД, "#");
			Если Поз > 0 Тогда
				СтруктураВозврата.ИДХарактеристики = Сред(ИД, 1 ,Поз - 1);
			КонецЕсли;
			
			Ид = Сред(ИД, Поз + 1);
			Если СтрДлина(ИД) > Поз Тогда
				СтруктураВозврата.ИДУпаковки = Сред(ИД, Поз);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьСтруктуруТовара()
	
	СтруктураВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеЗаказчикаИзДопДанных(ДеревоДопДанных)
	
	Заказчик = Неопределено;
	СтрокаШапка = ДеревоДопДанных.Строки.Найти("Шапка");
	Если НЕ СтрокаШапка = Неопределено Тогда
		СтруктураДанныхЗаказчика = Новый Структура;
		СформироватьСтруктуруПоДопДанным(СтрокаШапка, СтруктураДанныхЗаказчика);
		Заказчик = Новый Структура;
		НаименованиеЗаказчика = "";
		Если СтруктураДанныхЗаказчика.Свойство("Заказчик", НаименованиеЗаказчика) Тогда //ЮрЛицо
			Заказчик.Вставить("ПолноеНаименование", НаименованиеЗаказчика);
			ИННЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИНН", ИННЗаказчика) Тогда
				Заказчик.Вставить("ИНН", ИННЗаказчика);
			КонецЕсли;
			КППЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикКПП", КППЗаказчика) Тогда
				Заказчик.Вставить("КПП", КППЗаказчика);
			КонецЕсли;
			Заказчик.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			
			// Банковский счет заказчика
			НаимБанк = "";
			Если СтруктураДанныхЗаказчика.Свойство("НаимБанк", НаимБанк) Тогда
				Заказчик.Вставить("НаимБанк", НаимБанк);
			КонецЕсли;
			НомерСчета = "";
			Если СтруктураДанныхЗаказчика.Свойство("НомерСчета", НомерСчета) Тогда
				Заказчик.Вставить("НомерСчета", НомерСчета);
			КонецЕсли;
			БИК = "";
			Если СтруктураДанныхЗаказчика.Свойство("БИК", БИК) Тогда
				Заказчик.Вставить("БИК", БИК);
			КонецЕсли;
			
		Иначе // ФизЛицо
			ФамилияЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикФамилия", ФамилияЗаказчика) Тогда
				НаименованиеЗаказчика = ФамилияЗаказчика;
			КонецЕсли;
			ИмяЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИмя", ИмяЗаказчика) Тогда
				НаименованиеЗаказчика = НаименованиеЗаказчика + " " + ИмяЗаказчика;
			КонецЕсли;
			ОтчествоЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикОтчество", ОтчествоЗаказчика) Тогда
				НаименованиеЗаказчика = НаименованиеЗаказчика + " " + ОтчествоЗаказчика;
			КонецЕсли;
			Заказчик.Вставить("ПолноеНаименование", НаименованиеЗаказчика);
			ИННЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИНН", ИННЗаказчика) Тогда
				Заказчик.Вставить("ИНН", ИННЗаказчика);
			КонецЕсли;
			Заказчик.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
		КонецЕсли;
		
		ЗаказчикАдрес_Представление = "";
		Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикАдрес_Представление", ЗаказчикАдрес_Представление) Тогда
			Заказчик.Вставить("ЮридическийАдрес_Представление", ЗаказчикАдрес_Представление);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Заказчик;

КонецФункции

// Возвращает ссылка на элемент справочника.
//
// Параметры:
//  Наименование - Строка, название справочника в метаданных.
//  ИД - Уникальный идентификатор элемента.
//
// Возвращаемое значение:
//  Ссылка на элемент справочника.
//
Функция ЭлементСправочникаПоИД(Наименование, ИД)
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(Наименование);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Если ЗначениеЗаполнено(ИД) И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИД) Тогда
			UID = Новый УникальныйИдентификатор(ИД);
			Результат = Справочники[ИмяПрикладногоСправочника].ПолучитьСсылку(UID);
		Иначе
			Результат = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку(Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеДопРеквизитаЭД(ЭД, ИмяРеквизита)
	
	ЗначениеРеквизита = Неопределено;
	
	ДополнительныеРеквизиты = ЭД.ДополнительныеРеквизиты.Получить();
	Если ДополнительныеРеквизиты = Неопределено Тогда
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	ДополнительныеРеквизиты.Свойство(ИмяРеквизита, ЗначениеРеквизита);
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Функция ПространствоИменОтветногоТитула(ПространствоИменТитула)
	
	ИменаТитулов = Новый Соответствие;
	ИменаТитулов.Вставить("OTORG12","PTORG12");
	ИменаТитулов.Вставить("OTORG_5_01_02","PTORG_5_01_02");
	ИменаТитулов.Вставить("IAKTPRM","ZAKTPRM");
	ИменаТитулов.Вставить("IAKTPRM2","ZAKTPRM2");
	ИменаТитулов.Вставить("IAKTPRM_5_01_02","ZAKTPRM_5_01_02");
	
	ПространствоОтветногоТитула = ИменаТитулов.Получить(ПространствоИменТитула);
	
	Возврат ПространствоОтветногоТитула;
	
КонецФункции

Процедура ДобавитьКонтрагентаВДеревоРазбора(ДеревоРазбора, НовыйЭД, ВидКонтрагента, РеквизитыКонтрагента, Ошибка)
	
	Контрагент = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП);
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	ИдКонтрагента = РеквизитыКонтрагента.ИНН + РеквизитыКонтрагента;
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Чтение xml по схеме версии CML2

Функция ЗначениеДопРеквизитаДокумента(ИмяРеквизита, ЭД)
	
	ЗначениеРеквизита = Неопределено;
	
	Если ЭД.Свойства().Получить("ЗначенияРеквизитов") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(ЭД.ЗначенияРеквизитов) = Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из ЭД.ЗначенияРеквизитов.ЗначениеРеквизита Цикл
		Если ВРег(ТекРеквизит.Наименование) = ВРег(ИмяРеквизита) Тогда
			Если ТекРеквизит.Значение.Количество() = 1 Тогда
				ЗначениеРеквизита = ТекРеквизит.Значение[0];
			Иначе
				ЗначениеРеквизита = ТекРеквизит.Значение;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Функция ЭтоПростойТипЭлементаXDTO(Элемент)
	
	ЭтоПростойТип = Истина;
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("СписокXDTO")
		ИЛИ ТипЭлемента = Тип("ОбъектXDTO")
		ИЛИ ТипЭлемента = Тип("ЗначениеXDTO") Тогда
		ЭтоПростойТип = Ложь;
	КонецЕсли;
	
	Возврат ЭтоПростойТип;
	
КонецФункции

Функция ЭтоДопРеквизит(НаименованиеРеквизита)
	
	НомерСимвола = Найти(НаименованиеРеквизита, "Доп_");
	
	Возврат НомерСимвола > 0;
	
КонецФункции

// Процедура выполняет чтение универсальной структуры данных схемы 2 (разработанной
// для передачи произвольных данных в шапке и в табличных частях: список из набора пар:
// наименование реквизита и список значений реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - СписокXDTO - список реквизитов и значений.
//  Приемник - строка дерева данных, список значений - строка дерева, в которую помещаются извлеченные из xml-файла данные,
//    либо список значений (при разборе таблицы товаров).
//  Ошибка - Булево - флаг ошибки.
//
Процедура ПрочитатьСписокЗначенийРеквизитовCML(ЗначенияРеквизитов, Приемник, Ошибка, ДопРеквизиты = Неопределено)
	
	ДополнительныеРеквизиты = Новый Структура;
	
	ОбычныеРеквизиты = Новый Структура;

	Для Каждого Реквизит Из ЗначенияРеквизитов Цикл
		
		Если Не ТипЗнч(Реквизит.Значение) = Тип("СписокXDTO") Тогда
			Продолжить;;
		КонецЕсли;
		
		Если Не Реквизит.Значение.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = Реквизит.Значение;
		
		Если ЭтоДопРеквизит(Реквизит.Наименование) Тогда
			ЗапомнитьРеквизитыДерева(ДополнительныеРеквизиты, Реквизит.Наименование, ЗначениеРеквизита, Приемник, ДопРеквизиты);
		Иначе
			ЗапомнитьРеквизитыДерева(ОбычныеРеквизиты, Реквизит.Наименование, ЗначениеРеквизита, Приемник, ДопРеквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеРеквизиты.Количество() > 0 Тогда
		
		ДобавитьРеквизитВПриемник("ДопДанныеПодписанные", ДополнительныеРеквизиты, Приемник)
		
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ОбычныеРеквизиты Цикл
		
		ДобавитьРеквизитВПриемник(КлючЗначение.Ключ, КлючЗначение.Значение, Приемник);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеДополнительногоРеквизита(РеквизитЗначение)
	
	МассивЗначений = Новый Массив;
	Для Каждого Значение Из РеквизитЗначение Цикл
		МассивЗначений.Добавить(Значение);
	КонецЦикла;
	ЗначениеРеквизита = ?(МассивЗначений.Количество() > 1, МассивЗначений, МассивЗначений[0]);
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Процедура ЗапомнитьРеквизитыДерева(СтруктураРеквизитов, НаименованиеРеквизита, ЗначениеРеквизита, Приемник, ДопРеквизиты)
	
	ИмяРеквизита = СтрЗаменить(НаименованиеРеквизита, "Доп_", "");
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Если Найти(ИмяРеквизита, "_Таблица") > 0 Тогда
		
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_Таблица", "");
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
		Если ВРег(ИмяРеквизита) = ВРег("ДокументыОснования")
			Или ВРег(ИмяРеквизита) = ВРег("ДокументОснование") Тогда
			// В актуальных ЭД передаются идентификаторы документов ИБ, для поиска основания:
			ЕстьИДДокументаОснования = РеквизитЗначение.Колонки.Найти("ИдентификаторДокументаОснования") <> Неопределено;
			
			МассивДО = Новый Массив;
			
			Для Каждого ТекСтрока Из РеквизитЗначение Цикл
				Если ЕстьИДДокументаОснования Тогда
					ДокументОснование = ДокументОснованиеПоИдентификатору(ТекСтрока.ИдентификаторДокументаОснования, ДопРеквизиты);
				Иначе
					ДокументОснование = ПолучитьДокументОснование(ТекСтрока.Наименование, ДопРеквизиты);
				КонецЕсли;
				МассивДО.Добавить(ДокументОснование);
			КонецЦикла;
			
			Если МассивДО.Количество() = 1 Тогда
				РеквизитЗначение = МассивДО[0];
			Иначе
				РеквизитЗначение = МассивДО;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДокументыСделки") Тогда
		
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ЦенаВключаетНДС") Тогда
		
		ЦенаВключаетНДС = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
		Если ВРег(ЦенаВключаетНДС) = ВРег("false") Тогда
			РеквизитЗначение = Ложь;
		ИначеЕсли ВРег(ЦенаВключаетНДС) = ВРег("true") Тогда
			РеквизитЗначение = Истина;
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		
		ДатаИсправленияЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		Попытка
			РеквизитЗначение = ДатаИзСтроки(ДатаИсправленияЗначение);
		Исключение
			РеквизитЗначение = ДатаДД_ММ_ГГГГ(ДатаИсправленияЗначение);
		КонецПопытки;
	Иначе
		РеквизитЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, РеквизитЗначение);
	
КонецПроцедуры

Функция ТаблицаИзСтроки(Знач ЗначенияРеквизита)
	
	ПредставлениеТаблицы = ЗначенияРеквизита[0];
	
	Попытка
		ТаблицаРезультат = ЗначениеИзСтрокиВнутр(ПредставлениеТаблицы);
	Исключение
		Попытка
			ТаблицаРезультат = ТаблицаИзСтрокиСРазделителем(ПредставлениеТаблицы);
		Исключение
			Возврат Новый ТаблицаЗначений;
		КонецПопытки;
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ДобавитьРеквизитВПриемник(НаименованиеРеквизита, ЗначениеРеквизита, Приемник)
	
	Если ТипЗнч(Приемник) = Тип("СписокЗначений") Тогда
		Приемник.Добавить(ЗначениеРеквизита, НаименованиеРеквизита);
	Иначе
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(Приемник, НаименованиеРеквизита, ЗначениеРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеКонтрагентаCML(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = "", ДопПараметры = Неопределено)
	Перем МассивИдКонтрагентов;
	
	РасчетныйСчетВДопДанных = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("РасчетныйСчет") Тогда
			РасчетныйСчетВДопДанных = Истина;
		КонецЕсли;
		ДопПараметры.Свойство("МассивИдКонтрагентов", МассивИдКонтрагентов);
	КонецЕсли;
	
	
	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если Роль = "Поставщик"
		ИЛИ (Роль = "Лицензиар" ИЛИ Роль = "Комиссионер") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ (Роль = "Лицензиат" ИЛИ Роль = "Комитент") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		ИЛИ Роль = "Продавец"
		ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
	ИначеЕсли Роль = "Покупатель"
		ИЛИ (Роль = "Лицензиат" ИЛИ Роль = "Комитент") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ (Роль = "Лицензиар" ИЛИ Роль = "Комиссионер") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
		ВидДопАналитики = "Партнеры";
		
	ИначеЕсли Роль = "Плательщик" Или Роль = "Получатель" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = Роль;
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
	ИначеЕсли Роль = "ПокупательКомиссионногоТовара" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Покупатель";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
	КонецЕсли;
	
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
			// При комиссионной торговле в ЭД могут присутствовать несколько контрагентов,
			// у некоторых из них могут совпадать идентификаторы (Комитент/Комиссионер и Покупатель),
			// в этом случае надо в дерево разбора добавить только данные Комитента/Комиссионера.
			Если ВидКонтрагента = "Контрагенты"
				И ТипЗнч(МассивИдКонтрагентов) = Тип("Массив") Тогда
				Если МассивИдКонтрагентов.Найти(ИдКонтрагента) = Неопределено Тогда
					МассивИдКонтрагентов.Добавить(ИдКонтрагента);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ОфициальноеНаименование")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование") Тогда
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ЗнДанных);
			ЮрФизЛицо = ?(ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование"), "ФизЛицо", "ЮрЛицо");
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", ЮрФизЛицо));
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Адрес") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЮридическийАдрес") Тогда
			Если Роль = "Плательщик" ИЛИ Роль = "Поставщик" Тогда
				ПрефиксАдреса = "ЮридическийАдрес";
			Иначе
				ПрефиксАдреса = ?(ВРег(ТекСвойство.Имя) = ВРег("Адрес"), "ФактическийАдрес", "ЮридическийАдрес");
			КонецЕсли;
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ВРег(Свойство.Имя) = ВРег("Представление") Тогда
						РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "_Представление", Реквизит);
					ИначеЕсли ВРег(Свойство.Имя) = ВРег("АдресноеПоле") Тогда
						СтруктураАдреса = Новый Структура;
						Для Каждого ЭлементАдреса Из Реквизит Цикл
							НормТип = ЭлементАдреса.Тип;
							Если НормТип = НСтр("ru = 'Почтовый индекс'") Тогда
								НормТип = "Индекс";
							ИначеЕсли НормТип = "Регион" Тогда
								НормТип = "КодРегион";
							ИначеЕсли НормТип = НСтр("ru = 'Населенный пункт'") Тогда
								НормТип = "НаселПункт";
							ИначеЕсли НормТип = "Квартира" Тогда
								НормТип = "Кварт";
							КонецЕсли;
							СтруктураАдреса.Вставить(НормТип, ЭлементАдреса.Значение);
						КонецЦикла;
						Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
							РеквизитыКонтрагента.Вставить("АдресСтруктурой", СтруктураАдреса);
						КонецЕсли;
					Иначе
						РеквизитыКонтрагента.Вставить(Свойство.Имя, Реквизит);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Руководитель") Тогда
			СтРеквизитов = Новый Структура;
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ЭтоПростойТипЭлементаXDTO(Реквизит) Тогда
						СтРеквизитов.Вставить(Свойство.Имя, Реквизит);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить("Руководитель", СтРеквизитов);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Контакты") Тогда
			ТаблицаКонтактов = Новый ТаблицаЗначений();
			ТаблицаКонтактов.Колонки.Добавить("Вид");
			ТаблицаКонтактов.Колонки.Добавить("Представление");
			ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
			Для Каждого Контакт Из ЗнДанных.Контакт Цикл
				Вид = Неопределено;
				Если Контакт.Тип = НСтр("ru = 'Почта'") Тогда
					Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
				ИначеЕсли Контакт.Тип = НСтр("ru = 'Телефон рабочий'") Тогда
					Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
				ИначеЕсли Контакт.Тип = НСтр("ru = 'Факс'") Тогда
					Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксКонтрагента");
				КонецЕсли;
				Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
					НовКонт = ТаблицаКонтактов.Добавить();
					НовКонт.Вид = Вид;
					НовКонт.Представление = Контакт.Значение;
					НовКонт.ЗначенияПолей = Контакт.Комментарий;
				КонецЕсли;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);

		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	Если Роль <> "ПокупательКомиссионногоТовара" Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныйСчет") <> Неопределено
			И ТипЗнч(Элемент.РасчетныйСчет) = Тип("ОбъектXDTO") Тогда
			
			ВладелецСчета = ?(НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий, "Продавец", "Покупатель");
			
			Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
				Если ВРег(Роль) = ВРег(ВладелецСчета) И Не РасчетныйСчетВДопДанных Тогда
					ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, Элемент.РасчетныйСчет, ДеревоРазбора,
						"БанковскиеСчетаКонтрагентов", Роль, Контрагент, Ошибка);
				КонецЕсли;
			Иначе
				
				ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, Элемент.РасчетныйСчет, ДеревоРазбора,
												 ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
			КонецЕсли;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено
			И ТипЗнч(Элемент.РасчетныеСчета) = Тип("ОбъектXDTO") Тогда
			
			Если ВРег(НовыйЭД.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
				
				// Эта процедура считывает расчетные счета контрагента и добавляет их как строки табличной части документа.
				// Используется при обмене реквизитами организации.
				ПрочитатьДанныеПоРасчетнымСчетамКонтрагентаCML(НовыйЭД, Элемент.РасчетныеСчета, ДеревоРазбора,
					ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
			Иначе
				
				Для Каждого РасчетныйСчет Из Элемент.РасчетныеСчета.РасчетныйСчет Цикл
					ПрочитатьДанныеПоРасчетномуСчету(НайденнаяСтрока, РасчетныйСчет, ДеревоРазбора,
						ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// При чтении документа СчетНаОплату CML в ДопПараметрах передается структура с реквизитами РасчетногоСчета,
	// который находиться в шапке макета "СчетНаОплату" обработки "ОбменСКонтрагентами".
	Если РасчетныйСчетВДопДанных Тогда
		ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, ДопПараметры.РасчетныйСчет, ДеревоРазбора,
										 ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если Не ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				ЗнДопАналитики = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
			КонецЕсли;

			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает простой список содержащий элементы простых типов (строка, число, ...).
// Прочитанные данные элемента списка помещаются в структуру (ключ - наименование параметра, значение - значение),
// структуры параметров помещаются в массив, массив записывается в дерево значений с именем объекта XDTO, элементом
// которого является список.
//
// Параметры:
//  ОбъектXDTO - объект XDTO - объект, содержащий единственный элемент - читаемый список XDTO.
//  НовыйЭД - строка дерева значений - строка дерева данных, в которую помещается массив с прочитанными данными.
//  Ошибка - строка - текст ошибки, возникшей в процессе обработки списка XDTO.
//
Процедура ДанныеСпискаЗначенийCML(ОбъектXDTO, НовыйЭД, Ошибка)
	
	МассивСтруктур = Новый Массив;
	СвойстваОбъекта = ОбъектXDTO.Свойства();
	Если СвойстваОбъекта.Количество() > 0 Тогда
		Если СвойстваОбъекта[0].ВерхняяГраница = -1 Тогда
			ИмяСписка = СвойстваОбъекта[0].Имя;
			Для Каждого ЭлементСписка Из ОбъектXDTO[ИмяСписка] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого Элемент Из ЭлементСписка.Свойства() Цикл
					Значение = ЭлементСписка[Элемент.Имя];
					СтруктураДанных.Вставить(Элемент.Имя, Значение);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСтруктур.Количество() > 0 Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ОбъектXDTO.ВладеющееСвойство().Имя, МассивСтруктур);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеГруппыВДереве(ДеревоДанных, ПолныйПуть) 
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Строки;
	КонецЕсли;
	
КонецФункции

Функция СсылкаРеквизитаДерева(Дерево, СтрокаДерева, ИмяРеквизита)
	
	ИндексРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(Дерево, СтрокаДерева, ИмяРеквизита);
	Если ИндексРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Разделитель = Найти(ИндексРеквизита,"_");
	ПоказательИндекса = Лев(ИндексРеквизита, Разделитель - 1);
	
	СтрокиСсылкаРеквизита = Дерево.Строки.Найти(ПоказательИндекса, "ИндексСтроки");
	Если СтрокиСсылкаРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаРеквизита = СтрокиСсылкаРеквизита.Строки[0];
	
	Возврат СтрокаРеквизита.СсылкаНаОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом разбора

Процедура ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, ИмяТаблицыТоваров, ИдентификаторыДокументовИЭДОснований)
	
	// Заполняем таблицу товаров
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти(ИмяТаблицыТоваров, "ПолныйПуть");
	
	ЗаполнятьСтавкуНДС = Истина;
	
	ИДФайла = ЗначениеРеквизитаДерева(ДеревоДанных, "ИдФайл");
	Если СтрНачинаетсяС(ИДФайла, "DP_REZRUISP") Тогда
		ЗаполнятьСтавкуНДС = Ложь;
	КонецЕсли;
	
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		СтрокаДопДанных = Товар.Строки.Найти(ИмяТаблицыТоваров + ".НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
		ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ДокументОснование, ИдентификаторыДокументовИЭДОснований);
			Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.ВидДокументаОснования", Строка.ВидЭД);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных,
										"ДопДанныеПодписанные.НомерДокументаОснования",
										Строка.НомерДокументаОтправителя);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных,
										"ДопДанныеПодписанные.ДатаДокументаОснования",
										Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.ИДЭДДокументаОснования", Строка.Наименование);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ИдентификаторДокументаОснования", Строка.ИдентификаторДокументаОснования);
			КонецЦикла;
		КонецЕсли;
		
		Характеристика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.Характеристика", Ложь);
		Упаковка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.Упаковка", Ложь);
		
		// Формирование идентификатора товара.
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.ИдТовараУКонтрагента");
		Номенклатура = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.Номенклатура");
		Если НЕ ЗначениеЗаполнено(ИД) И ЗначениеЗаполнено(Номенклатура) Тогда
			ИДТовара = Номенклатура.УникальныйИдентификатор();
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
			ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, ИмяТаблицыТоваров + ".НомерСтроки.ДопДанныеПодписанные.ИД", ИД);
		
		// Характеристики и упаковки.
		Если ЗначениеЗаполнено(Характеристика) ИЛИ ЗначениеЗаполнено(Упаковка) Тогда
			НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.НаименованиеНоменклатуры")
				+ " (" + ?(ЗначениеЗаполнено(Характеристика), Характеристика , "")
				+ ?(ЗначениеЗаполнено(Характеристика) И ЗначениеЗаполнено(Упаковка), ", ", "")
				+ ?(ЗначениеЗаполнено(Упаковка), Упаковка , "") + ")";
			ВставитьЗначениеВДерево(Товар, ИмяТаблицыТоваров + ".НомерСтроки.НаименованиеНоменклатуры", НаименованиеНоменклатуры);
		КонецЕсли;
		
		// Для Акт501 ставка НДС передается в дополнительных данных.
		Если ИмяТаблицыТоваров = "ТаблицаУслуг" И ЗаполнятьСтавкуНДС Тогда
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.СтавкаНДС")) Тогда
				Ставка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.СтавкаНДС");
				СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , Ставка);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.СтавкаНДС", СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		
		НомерСерии = ЗначениеРеквизитаДерева(Товар, ИмяТаблицыТоваров + ".НомерСтроки.НомерСерии", Ложь);
		Если ЗначениеЗаполнено(НомерСерии) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.НомерСерии", НомерСерии);
		КонецЕсли;
		СрокГодностиСерии = ЗначениеРеквизитаДерева(Товар, ИмяТаблицыТоваров + ".НомерСтроки.СрокГодностиСерии", Ложь);
		Если ЗначениеЗаполнено(СрокГодностиСерии) Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.СрокГодностиСерии", СрокГодностиСерии);
		КонецЕсли;
		
		// Наименование страны происхождения пойдет в доп. данных
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров+".НомерСтроки.ТаможеннаяДекларация", Ложь);
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокиТД = Товар.Строки.Найти("ТаблицаТоваров.НомерСтроки.ТаможеннаяДекларация", "ПолныйПуть", Истина);
			
			ДопДанныеТаможеннойДекларации = Новый ТаблицаЗначений;
			ДопДанныеТаможеннойДекларации.Колонки.Добавить("КодСтраныПроисхождения");
			ДопДанныеТаможеннойДекларации.Колонки.Добавить("НаименованиеСтраныПроисхождения");
			Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
				КодСтраны = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТД, ИмяТаблицыТоваров+".НомерСтроки.ТаможеннаяДекларация.НомерСтроки.КодСтраныПроисхождения");
				НаименованиеСтраныПроисхождения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТД, ИмяТаблицыТоваров+".НомерСтроки.ТаможеннаяДекларация.НомерСтроки.НаименованиеСтраныПроисхождения");
				
				Если ЗначениеЗаполнено(КодСтраны) И ЗначениеЗаполнено(НаименованиеСтраныПроисхождения) Тогда 
					СтрокаДДТД =ДопДанныеТаможеннойДекларации.Добавить();
					СтрокаДДТД.КодСтраныПроисхождения = КодСтраны;
					СтрокаДДТД.НаименованиеСтраныПроисхождения = НаименованиеСтраныПроисхождения;
				КонецЕсли;
			КонецЦикла;
			Если ДопДанныеТаможеннойДекларации.Количество() Тогда 
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДопДанныеТаможеннойДекларации);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных,
					ИмяТаблицыТоваров + ".НомерСтроки.ДопДанныеНеПодписанные.ДопДанныеТаможеннойДекларации", ЗаписьXML.Закрыть());
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с Соглашение об изменение стоимости

Процедура ЗаполнитьРеквизитыШапкиКорректировкаСтоимости(ДанныеПечати, Макет, ТабличныйДокумент)

	ЧастьЗаголовка1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Соглашение об изменении стоимости № %1 от %2'"),
		ДанныеПечати.НомерДокумента, Формат(ДанныеПечати.ДатаДокумента, "ДЛФ=D"));
	ЧастьЗаголовка2 = ?(ЗначениеЗаполнено(ДанныеПечати.НомерИсправления), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', исправление № %1 от %2'"),
			ДанныеПечати.НомерИсправления, Формат(Дата(ДанныеПечати.ДатаИсправления), "ДЛФ=D")), "");
				
	ЧастьЗаголовка3 = ?(ЗначениеЗаполнено(ДанныеПечати.ПредставлениеИсходногоДокумента), ДанныеПечати.ПредставлениеИсходногоДокумента
		+ " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='№ %1 от %2'"),
			ДанныеПечати.НомерИсходногоДокумента, Формат(Дата(ДанныеПечати.ДатаИсходногоДокумента), "ДЛФ=D")), "");
						
	ЧастьЗаголовка4 = ?(ЗначениеЗаполнено(ДанныеПечати.НомерИсправленияИсходногоДокумента),
		" " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='с учетом исправления № %1 от %2'"),
			ДанныеПечати.НомерИсправленияИсходногоДокумента, Формат(Дата(ДанныеПечати.ДатаИсправленияИсходногоДокумента),"ДЛФ=D")), "");
				
	ТекстЗаголовка = ЧастьЗаголовка1 + ЧастьЗаголовка2 + Символы.ВК + ЧастьЗаголовка3 + ЧастьЗаголовка4;
		
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаЗаголовок.Параметры.Заголовок = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ОбластьМакета.Параметры.Основание =
		?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеОснования), ДанныеПечати.НаименованиеОснования + " ", "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеНомер), "№ " + ДанныеПечати.ОснованиеНомер + " ", "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеДата), НСтр("ru='от'")
			+ " " + Формат(ДанныеПечати.ОснованиеДата, "ДЛФ=Д"), "");
		
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
		
	ТабличныйДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ТОРГ-12

Функция ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
		
		ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Наименование"));
		ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
		ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",        ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
		ДанныеЗаполненияШапки.Вставить("ГрузополучательПоОКПО",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
		
		ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
		ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Наименование"));
		ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",        ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
		ДанныеЗаполненияШапки.Вставить("ГрузополучательПоОКПО",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ПолноеНаименование"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ИНН"));
	СведенияОГрузоотправителе.Вставить("КПП", 				 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.КПП"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО", 		 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ЮридическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ФактическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.НомерСчета"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Наименование"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Код"));
	СведенияОГрузоотправителе.Вставить("КоррСчет",			 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.КоррСчет"));
	СведенияОГрузоотправителе.Вставить("Телефоны",			 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ПолноеНаименование"));
	СведенияОГрузополучателе.Вставить("ИНН", 			   	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ИНН"));
	СведенияОГрузополучателе.Вставить("КПП", 			   	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.КПП"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО", 		 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ЮридическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ФактическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("НомерСчета",		 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.НомерСчета"));
	СведенияОГрузополучателе.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Наименование"));
	СведенияОГрузополучателе.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Код"));
	СведенияОГрузополучателе.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.КоррСчет"));
	СведенияОГрузополучателе.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.СтруктурноеПодразделение"));
	
	ДанныеЗаполненияШапки.Вставить("ОснованиеНомер",    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ОснованиеДата",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеОснования", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеОснования"));
	ДанныеЗаполненияШапки.Вставить("НомерДокумента",    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаДокумента",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", 	            ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АдресДоставки"));
	
	ДатаИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	Если ЗначениеЗаполнено(ДатаИсправления) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", Дата(ДатаИсправления));
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления"));
	КонецЕсли;
	
	ДанныеЗаполненияПодвала = Новый Структура;
	
	ДанныеЗаполненияПодвала.Вставить("КоличествоЛистовВПриложении", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЛистовВПрилПрописью"));
	ДанныеЗаполненияПодвала.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЗаписейПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ВсегоМестПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоМестПрописью"));
	ДанныеЗаполненияПодвала.Вставить("МассаГрузаПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "МассаГрузаПрописью"));
	ДанныеЗаполненияПодвала.Вставить("МассаГрузаНеттоПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "МассаГрузаНеттоПрописью"));

	ДанныеЗаполненияПодвала.Вставить("СуммаПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВсегоПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ДатаОтпуска", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаОтпуска"));
		
	ДолжностьРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьРуководителя");
	Если Не ДолжностьРуководителя = "---" Тогда
		ДанныеЗаполненияПодвала.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	КонецЕсли;
	ДанныеЗаполненияПодвала.Вставить("ДолжностьГлавБухгалтера", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьКладовщика", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьКладовщика"));
	ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ФИОГлавБухгалтера", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ФИОКладовщика", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОКладовщика"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаБрутто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоВОдномМесте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ИмяНоменклатуры = "Номенклатура";
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ТоварКод");
		НоваяСтрока.ТоварНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Наименование");
		
		НаименованиеХарактеристики = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаименованиеХарактеристики");
		
		Сорт = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сорт");
		Если ЗначениеЗаполнено(Сорт) Тогда
			НоваяСтрока.ТоварНаименование = НоваяСтрока.ТоварНаименование + ", " + Сорт;
		КонецЕсли;
		
		Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Артикул");
		Если ЗначениеЗаполнено(Артикул) Тогда
			НоваяСтрока.ТоварНаименование = НоваяСтрока.ТоварНаименование + ", " + Артикул;
		КонецЕсли;

		НоваяСтрока.БазоваяЕдиницаНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияНаименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияКод");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.КоличествоВОдномМесте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоВОдномМесте");
		
		НоваяСтрока.КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Мест");
		
		НоваяСтрока.МассаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаБрутто");
		НоваяСтрока.МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНетто");
		
		НоваяСтрока.ВидУпаковки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка");
		
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.СуммаНДС),НоваяСтрока.СуммаНДС,0);
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = НСтр("ru = 'без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал", ДанныеЗаполненияПодвала);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ ТОРГ-12.
//
Процедура ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеПечати, ДанныеПокупателя)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ТОРГ12_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ТОРГ12";
	
	ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
	
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб|ОсновныеДанныеТаблицы");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице|ОсновныеДанныеТаблицы");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего|ОсновныеДанныеТаблицы");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;
	
	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
		
		ДанныеСтроки.КоэффициентПересчета  = ?(ЗначениеЗаполнено(СтрокаТовары.КоличествоВОдномМесте),СтрокаТовары.КоличествоВОдномМесте,1);
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
		ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
		
		ДанныеСтроки.Сумма     = СтрокаТовары.Сумма;
		ДанныеСтроки.СуммаНДС  = СтрокаТовары.СуммаНДС;
		ДанныеСтроки.СуммаСНДС = СтрокаТовары.СуммаСНДС;
		
		ДанныеСтроки.Цена = СтрокаТовары.Цена;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
			Если ДанныеСтроки.Номер <> 1 И Не ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// Очистим итоги по странице.
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭП.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице|ОсновныеДанныеТаблицы");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего|ОсновныеДанныеТаблицы");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати.Подвал, Макет, ТабличныйДокумент, ДанныеПокупателя);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки ТОРГ-12.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет ТОРГ-12
//  ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ОбластьМакета.Параметры.Основание = 
		?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеОснования), ДанныеПечати.НаименованиеОснования, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеНомер), " № " + ДанныеПечати.ОснованиеНомер, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеДата), " от " + Формат(ДанныеПечати.ОснованиеДата, "ДЛФ=Д"), "");
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузоотправителе,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузополучателе,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПокупателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
		
	ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.АдресДоставки;
	
	НомерИсправления = Неопределено;
	ДатаИсправления = Неопределено;
	
	ДанныеПечати.Свойство("НомерИсправления", НомерИсправления);
	ДанныеПечати.Свойство("ДатаИсправления", ДатаИсправления);
	
	ЗаполнитьДатуНомерИсправления(ОбластьМакета, ДатаИсправления, НомерИсправления);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьДатуНомерИсправления(ОбластьМакета, ДатаИсправления, НомерИсправления)
	
	Если НЕ( ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления)) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ТекстИсправления = НСтр("ru='Исправление'")+ "   ";
	ОбластьМакета.Параметры.НомерИсправления = НомерИсправления;
	ОбластьМакета.Параметры.ДатаИсправления  = Формат(ДатаИсправления, "ДЛФ=D");
	
	ЛинияГраницыРеквизитовИсправления = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьНомерИсправления = ОбластьМакета.Области.НомерИсправления;
	ОбластьНомерИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
	ОбластьНомерИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
	ОбластьНомерИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;
	
	ОбластьДатаИсправления = ОбластьМакета.Области.ДатаИсправления;
	ОбластьДатаИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
	ОбластьДатаИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
	ОбластьДатаИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала ТОРГ-12.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  Макет - Макет ТОРГ-12
//  ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент, ДанныеПокупателя, КорректировкаСтоимости = Ложь)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Заполнить(ДанныеПокупателя);
	
	ПолнаяДатаДокумента = Формат(ДанныеПечати.ДатаОтпуска, "ДЛФ=DD");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	Если ДанныеПокупателя.Свойство("ДатаПолучения") Тогда
		ПолнаяДатаПринял = Формат(ДанныеПокупателя.ДатаПолучения, "ДЛФ=DD");
		ДлинаСтроки = СтрДлина(ПолнаяДатаПринял);
		ПервыйРазделитель = Найти(ПолнаяДатаПринял, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаПринял, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаПринялДень = """" + Лев(ПолнаяДатаПринял, ПервыйРазделитель -1 ) + """";
		ОбластьМакета.Параметры.ДатаПринялМесяц = Сред(ПолнаяДатаПринял, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакета.Параметры.ДатаПринялГод = Прав(ПолнаяДатаПринял, ДлинаСтроки - ВторойРазделитель);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Процедура заполняет данные, выводимые на печать
Функция ДанныеВторогоТитула(СтрокаОбъекта, ДеревоРазбора)
	
	СвойстваТитула = Новый Структура;
	
	ДатаПолучения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения");
	СвойстваТитула.Вставить("ДатаПолучения", ДатаПолучения);
	
	ГрузПолучилДолжность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилДолжность");
	СвойстваТитула.Вставить("ГрузПолучилДолжность", ГрузПолучилДолжность);
	
	ГрузПолучилФИО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилФИО");
	СвойстваТитула.Вставить("ГрузПолучилФИО", ГрузПолучилФИО);
	
	Возврат СвойстваТитула;
	
КонецФункции

// Заполняет табличный документ ТОРГ12Покупателя
Процедура ЗаполнитьТабличныйДокумент_ТОРГ12Покупателя(ТабличныйДокумент, ДанныеПокупателя)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ТОРГ12Покупателя_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ДанныеПокупателя);
	Если ДанныеПокупателя.Свойство("ДатаДокументаОтправителя") Тогда
		ОбластьМакета.Параметры.ДатаДокументаОтправителя = Формат(ДанныеПокупателя.ДатаДокументаОтправителя, "ДЛФ=DD");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Передача товаров

Функция ДанныеДляПечатиПередачаТоваров(СтрокаОбъекта, ДеревоРазбора)
	
	ДеревоЭД = СтрокаОбъекта.ЗначениеРеквизита;
	
	ДанныеШапки = Новый Структура;
	
	ДанныеШапки.Вставить("НомерДокумента", ЗначениеРеквизитаДерева(ДеревоЭД, "НомерТоварнойНакладной"));
	ДанныеШапки.Вставить("ДатаДокумента", ЗначениеРеквизитаДерева(ДеревоЭД, "ДатаТоварнойНакладной"));
	
	ДанныеШапки.Вставить("НомерИсправления", ЗначениеРеквизитаДерева(ДеревоЭД, "НомерИсправления"));
	ДанныеШапки.Вставить("ДатаИсправления", ЗначениеРеквизитаДерева(ДеревоЭД, "ДатаИсправления"));

	ДанныеПоставщика = ДанныеУчастникаСделки(ДеревоЭД, "Поставщик");
	ДанныеШапки.Вставить("ПредставлениеПоставщика",ДанныеПоставщика.ПредставлениеУчастника);
	ДанныеШапки.Вставить("АдресПоставщика", ДанныеПоставщика.АдресУчастника);
	ДанныеШапки.Вставить("ИННПоставщика", ДанныеПоставщика.ИННКППУчастника);
	
	ДанныеГрузополучателя = ДанныеУчастникаСделки(ДеревоЭД, "Грузополучатель");
	ПредставлениеГрузополучателя = ДанныеГрузополучателя.ПредставлениеУчастника
		+ ?(ЗначениеЗаполнено(ДанныеГрузополучателя.АдресУчастника), "," + " " + ДанныеГрузополучателя.АдресУчастника, "");
	ДанныеШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	ДанныеГрузоотправителя = ДанныеУчастникаСделки(ДеревоЭД, "Грузоотправитель");
	ПредставлениеГрузоотправителя = ДанныеГрузоотправителя.ПредставлениеУчастника
		+ ?(ЗначениеЗаполнено(ДанныеГрузоотправителя.АдресУчастника), "," + " " + ДанныеГрузоотправителя.АдресУчастника, "");
	ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	ДанныеПокупателя = ДанныеУчастникаСделки(ДеревоЭД, "Плательщик");
	ДанныеШапки.Вставить("ПредставлениеПокупателя", ДанныеПокупателя.ПредставлениеУчастника);
	ДанныеШапки.Вставить("АдресПокупателя", ДанныеПокупателя.АдресУчастника);
	ДанныеШапки.Вставить("ИННПокупателя", ДанныеПокупателя.ИННКППУчастника);
	
	ВалютаКод = ЗначениеРеквизитаДерева(ДеревоЭД, "ВалютаКод");
	ВалютаНаименование = ЗначениеРеквизитаДерева(ДеревоЭД, "ВалютаНаименование");
	ВалютаПредставление = ?(ЗначениеЗаполнено(ВалютаНаименование),
		ВалютаНаименование + "," + " " + ВалютаКод, ВалютаКод);
	ДанныеШапки.Вставить("Валюта", ВалютаПредставление);
	
	ДанныеШапки.Вставить("ВсегоСтоимостьТоваровБезНалога", ЗначениеРеквизитаДерева(ДеревоЭД, "ВсегоПоНакладной.СуммаБезНДС"));
	ДанныеШапки.Вставить("ВсегоСуммаНалога", ЗначениеРеквизитаДерева(ДеревоЭД, "ВсегоПоНакладной.СуммаНДС"));
	ДанныеШапки.Вставить("ВсегоСтоимостьТоваровСНалогом", ЗначениеРеквизитаДерева(ДеревоЭД, "ВсегоПоНакладной.СуммаСНДС"));
	
	ДанныеШапки.Вставить("ПредставлениеОснования", ПредставлениеОснования(ДеревоЭД, "Основание"));
	ДанныеШапки.Вставить("ПредставлениеДанныхОТранспортировкеИГрузе", ПредставлениеТранспортнойНакладной(ДеревоЭД, "ТранспортнаяНакладная"));
	
	ДанныеКладовщика = ДанныеЛицаОтпустившегоТовар(ДеревоЭД);
	
	ДанныеОПередаче = Новый Структура;
	
	ДанныеОПередаче.Вставить("ДолжностьКладовщика", ДанныеКладовщика.Должность);
	ДанныеОПередаче.Вставить("ФИОКладовщика",ДанныеКладовщика.ФИО);
	
	ДанныеОПередаче.Вставить("ДатаОтгрузкиТоваров", Формат(ЗначениеРеквизитаДерева(ДеревоЭД, "СведенияПоОтпускуГруза.ДатаОтпуска"), "ДЛФ=D"));
	
	СтрокаДанныеПодписанта = СтрокаОбъекта.Строки.Найти("Подписант","Реквизит");
	Если Не СтрокаДанныеПодписанта = Неопределено Тогда
		ДанныеПодписанта = СтрокаДанныеПодписанта.ЗначениеРеквизита;
		ДолжностьРуководителя = ДанныеПодписанта.Должность;
		
		ФИОРуководителя = ДанныеПодписанта.ФИО;
		ФИОПБОЮЛ = ДанныеПодписанта.ФИОПБОЮЛ;
		
		ПредставлениеОрганизации = ДанныеПодписанта.НаименованиеОрганизации;
	КонецЕсли;
	
	ДанныеОПередаче.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	ДанныеОПередаче.Вставить("ФИОРуководителя", 
		?(ЗначениеЗаполнено(ФИОРуководителя), ФИОРуководителя, ФИОПБОЮЛ));
	ДанныеОПередаче.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	
	Подвал = Новый Структура;
	Подвал.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	Подвал.Вставить("ФИОРуководителя", ФИОРуководителя);
	Подвал.Вставить("ФИОПБОЮЛ", ФИОПБОЮЛ);
	Подвал.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	Товары = ШаблонТабличнойЧастиДокумента();
	
	СтрокаТаблицаТоваров = ДеревоЭД.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
		
		НоваяСтрока.НомерСтроки = Товар.Значение;
		
		НоваяСтрока.ТоварКод = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.КодТовара");
		НоваяСтрока.ТоварНаименование = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
		
		НоваяСтрока.ЕдиницаИзмеренияКод = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод");
		НоваяСтрока.ЕдиницаИзмерения = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмерения");
		
		Количество = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		Если Не ЗначениеЗаполнено(Количество) Тогда
			Количество = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КонецЕсли;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.СтоимостьТоваровБезНалога = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		
		НоваяСтрока.НалоговаяСтавка = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНалога = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		НоваяСтрока.СтоимостьТоваровСНалогом = ЗначениеРеквизитаДерева(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
		
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные";
		Подписанные = ЗначениеГруппыВДереве(Товар, ПутьКДанным);
		Если Не Подписанные = Неопределено Тогда
			ДопДанныеПодписанные = Новый Структура;
			Для Каждого ТекСтрока Из Подписанные Цикл
				Ключ = ИмяПоляДопДанных(ТекСтрока, ПутьКДанным);
				Значение = ТекСтрока.Значение;
				ДопДанныеПодписанные.Вставить(Ключ, Значение);
				
			КонецЦикла;
		НоваяСтрока.Подписанные = ДопДанныеПодписанные;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПередачаТоваров = Новый Структура;
	ДанныеПередачаТоваров.Вставить("Шапка", ДанныеШапки);
	ДанныеПередачаТоваров.Вставить("Подвал", Подвал);
	ДанныеПередачаТоваров.Вставить("Товары", Товары);
	ДанныеПередачаТоваров.Вставить("ДанныеОПередаче", ДанныеОПередаче);
	
	СтрокаДопДанных = СтрокаОбъекта.Строки.Найти("ДеревоДопДанных");
	Если Не СтрокаДопДанных = Неопределено Тогда
		ДопДанные = СтрокаДопДанных.ЗначениеРеквизита;
		ДанныеПередачаТоваров.Вставить("ДеревоДопДанных", ДопДанные);
	КонецЕсли;

	
	Возврат ДанныеПередачаТоваров;
	
КонецФункции

Функция ШаблонТабличнойЧастиДокумента()
	
	Шаблон = Новый ТаблицаЗначений;
	Шаблон.Колонки.Добавить("НомерСтроки");
	Шаблон.Колонки.Добавить("ТоварКод");
	Шаблон.Колонки.Добавить("ТоварНаименование");
	Шаблон.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Шаблон.Колонки.Добавить("ЕдиницаИзмерения");
	Шаблон.Колонки.Добавить("Количество");
	Шаблон.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	Шаблон.Колонки.Добавить("СтоимостьТоваровБезНалога");
	Шаблон.Колонки.Добавить("НалоговаяСтавка");
	Шаблон.Колонки.Добавить("СуммаНалога");
	Шаблон.Колонки.Добавить("СтоимостьТоваровСНалогом");
	Шаблон.Колонки.Добавить("Подписанные");
	Шаблон.Колонки.Добавить("Неподписанные");
	Возврат Шаблон;
	
КонецФункции

Функция ИмяПоляДопДанных(ТекСтрока, Префикс)
	
	ИмяПоля = ТекСтрока.ПолныйПуть;
	ИмяПоля = СтрЗаменить(ИмяПоля, Префикс+".", "");
	Возврат ИмяПоля;
	
КонецФункции

// Возвращает данные лица, отпустившего товар.
// Параметры:
//  ДеревоЭд - Дерево значений - данные электронного документа.
// Возвращаемое значение:
//  - Структура с полями ФИО, Должность.
//
Функция ДанныеЛицаОтпустившегоТовар(ДеревоЭд)
	
	Должность = "";
	ФИО = Новый Структура;
	ДанныеЛица = Новый Структура;
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд, "СведенияОЛицеПередавшемТовары")) Тогда
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд, "СведенияОЛицеПередавшемТовары") = "РаботникОрганизацииПродавца" Тогда
			Должность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность");
				
			ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия"));
			ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя"));
			ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество"));
			ФИООтветственного = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд, "СведенияОЛицеПередавшемТовары") = "ИноеЛицо" Тогда
			
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
				Должность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
					
				ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия"));
				ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя"));
				ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество"));
				ФИООтветственного = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
				
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ФЛ" Тогда
				
				
				ФИО.Вставить("Фамилия", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия"));
				ФИО.Вставить("Имя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя"));
				ФИО.Вставить("Отчество", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭд,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество"));
				ФИООтветственного = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЛица.Вставить("ФИО", ФИООтветственного);
	ДанныеЛица.Вставить("Должность", Должность);
	
	Возврат ДанныеЛица;
	
КонецФункции

// Возвращает данные контрагента документа
// Параметры:
//  ДеревоЭД - деревоЗначений - данные электронного документа.
//  ВидУчастника - строка - наименование участника сделки.
//  ЗаполнятьАдрес - булево - флаг, определяющий нужно ли искать в дереве значение адреса участника сделки.
//
// Возвращаемое значение:
//  - Структура с полями ПредставлениеУчастника, ИННКППУчастника, ИННУчастника, КППУчастника, АдресУчастника.
//
Функция ДанныеУчастникаСделки(ДеревоЭД, ВидУчастника, ЗаполнятьАдрес = Истина)
	
	ПредставлениеУчастника = "";
	ИННКППУчастника = "";
	ИННУчастника = "";
	КППУчастника = "";
	АдресУчастника = "";
	ДанныеУчастникаСделки = Новый Структура;
	
	Если ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ПредставлениеУчастника = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИННУчастника = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КППУчастника = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		ИННКППУчастника = "" + ИННУчастника + ?(ЗначениеЗаполнено(КППУчастника), "/" + КППУчастника, "");
		
	ИначеЕсли ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Фамилия = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		Имя = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.Имя");
		Отчество = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		ПредставлениеУчастника = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "") + ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		ИННУчастника = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		ИННКППУчастника = ИННУчастника;
		
	ИначеЕсли ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеУчастника = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		
	ИначеЕсли ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		Фамилия = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		ПредставлениеУчастника = "" + Фамилия + ?(ЗначениеЗаполнено(Имя), ", " + Имя, "") + ?(ЗначениеЗаполнено(Отчество), ", " + Отчество, "");
		ИННУчастника = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		ИННКППУчастника = ИННУчастника;
		
	КонецЕсли;
	ДанныеУчастникаСделки.Вставить("ПредставлениеУчастника", ПредставлениеУчастника);
	ДанныеУчастникаСделки.Вставить("ИННКППУчастника", ИННКППУчастника);
	ДанныеУчастникаСделки.Вставить("ИННУчастника", ИННУчастника);
	ДанныеУчастникаСделки.Вставить("КППУчастника", КППУчастника);
	
	Если Не ЗаполнятьАдрес Тогда
		
		ДанныеУчастникаСделки.Вставить("АдресПоставщика", АдресУчастника);
		Возврат ДанныеУчастникаСделки;
		
	КонецЕсли;
	
	Если ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес") = "Структурированный" Тогда
		СтруктураАдресаПоставщика = Новый Структура();
		
		Индекс = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Индекс", Ложь);
		Если ЗначениеЗаполнено(Индекс) Тогда
			СтруктураАдресаПоставщика.Вставить("Индекс", Индекс);
		КонецЕсли;
		
		КодРегиона = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.КодРегион", Ложь);
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			СтруктураАдресаПоставщика.Вставить("КодРегион", КодРегиона);
		КонецЕсли;
		
		Район = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Район", Ложь);
		Если ЗначениеЗаполнено(Район) Тогда
			СтруктураАдресаПоставщика.Вставить("Район", Район);
		КонецЕсли;
		
		Город = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Город", Ложь);
		Если ЗначениеЗаполнено(Город) Тогда
			СтруктураАдресаПоставщика.Вставить("Город", Город);
		КонецЕсли;
		
		НаселенныйПункт = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.НаселенныйПункт", Ложь);
		Если ЗначениеЗаполнено(НаселенныйПункт) Тогда
			СтруктураАдресаПоставщика.Вставить("НаселПункт", НаселенныйПункт);
		КонецЕсли;
		
		Улица = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Улица", Ложь);
		Если ЗначениеЗаполнено(Улица) Тогда
			СтруктураАдресаПоставщика.Вставить("Улица", Улица);
		КонецЕсли;
			
		Дом = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Дом", Ложь);
		Если ЗначениеЗаполнено(Дом) Тогда
			СтруктураАдресаПоставщика.Вставить("Дом", НСтр("ru = 'дом №'") + " " + Дом);
		КонецЕсли;
		
		Корпус = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Корпус", Ложь);
		Если ЗначениеЗаполнено(Корпус) Тогда
			СтруктураАдресаПоставщика.Вставить("Корпус", НСтр("ru = 'корпус'") + " " + Корпус);
		КонецЕсли;
	
		Квартира = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Квартира", Ложь);
		Если ЗначениеЗаполнено(Квартира) Тогда
			СтруктураАдресаПоставщика.Вставить("Кварт", НСтр("ru = 'кв.'") + " " + Квартира);
		КонецЕсли;
		
		АдресУчастника = СобратьАдрес(СтруктураАдресаПоставщика);
		
		
	ИначеЕсли ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес") = "Произвольный" Тогда
		
		КодСтр = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны", Ложь);
		АдрТекст = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст", Ложь);
		
		Если ЗначениеЗаполнено(КодСтр) И ЗначениеЗаполнено(АдрТекст) Тогда
			АдресУчастника = КодСтр + ", " + АдрТекст;
		Иначе
			// Совместимость со старым представлением адреса в макете э.д.
			АдресУчастника = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Произвольный", Ложь);
		КонецЕсли;
		
	ИначеЕсли ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес") = "Иностранный" Тогда
		
		КодСтраны = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Иностранный.КодСтраны", Ложь);
		АдресТекст = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".Адрес.Иностранный.АдресТекст", Ложь);
		
		АдресУчастника = КодСтраны + "," + " " + АдресТекст;
		
	КонецЕсли;
	
	ДанныеУчастникаСделки.Вставить("АдресУчастника", АдресУчастника);
	
	БанковскийСчет = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".БанковскийСчет");
	РеквизитыСчета = Новый Структура;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		РеквизитыСчета.Вставить("НомерСчета", ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".БанковскийСчет.НомерСчета"));
		РеквизитыСчета.Вставить("НаименованиеБанка", ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".БанковскийСчет.НаимБанк"));
		РеквизитыСчета.Вставить("БИК", ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".БанковскийСчет.БИК"));
		
	Иначе
		РеквизитыСчета.Вставить("НомерСчета", "");
		РеквизитыСчета.Вставить("НаименованиеБанка", "");
		РеквизитыСчета.Вставить("БИК", "");
		
	КонецЕсли;
	
	ДанныеУчастникаСделки.Вставить("БанковскийСчет", РеквизитыСчета);
	
	Возврат ДанныеУчастникаСделки;
	
КонецФункции

// Возвращает строкое представление документов основания
// Параметры:
//  ДеревоЭД - деревоЗначений - данные электронного документа.
//  ИмяТаблицыОснования - строка - имя таблицы документов основания.
//
// Возвращаемое значение:
//  - Строка - <Наименование документа> <номер документа> <дата документа>.
//
Функция ПредставлениеОснования(ДеревоЭД, ИмяТаблицыОснования)
	
	ПредставлениеОснования = "";
	СтрокаТаблицы = ДеревоЭД.Строки.Найти(ИмяТаблицыОснования, "ПолныйПуть");
	Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
		ШаблонПоДокументу = НСтр("ru ='№ %1 от %2'");
		Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
			
			ДокументНаименование = ЗначениеРеквизитаДерева(Основание,
			ИмяТаблицыОснования+".НомерСтроки.ДокОснованиеНаименование");
			
			Если Не ЗначениеЗаполнено(ДокументНаименование) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументНомер = ЗначениеРеквизитаДерева(Основание,
				ИмяТаблицыОснования+".НомерСтроки.ДокОснованиеНомер");
			ДокументДата = ЗначениеРеквизитаДерева(Основание,
				ИмяТаблицыОснования+".НомерСтроки.ДокОснованиеДата");
			
			ПредставлениеОснования = ДокументНаименование
				+ ?(ЗначениеЗаполнено(ДокументНомер), " " + СтрШаблон(ШаблонПоДокументу, ДокументНомер, Формат(ДокументДата, "ДЛФ=D")), "")
				+ ?(ЗначениеЗаполнено(ПредставлениеОснования), ", " + ПредставлениеОснования, "");
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПредставлениеОснования;
	
КонецФункции

// Возвращает строкое представление документов транспортной накладной
// Параметры:
//  ДеревоЭД - деревоЗначений - данные электронного документа.
//  ИмяТаблицыТранспортнойНакладной - строка - имя таблицы документов транспортной накладной.
//
// Возвращаемое значение:
//  - Строка - <Наименование документа> <номер документа> <дата документа>.
//
Функция ПредставлениеТранспортнойНакладной(ДеревоЭД, ИмяТаблицыТранспортнойНакладной)
	
	ПредставлениеТранспортнойНакладной = "";
	СтрокаТаблицы = ДеревоЭД.Строки.Найти(ИмяТаблицыТранспортнойНакладной, "ПолныйПуть");
	Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
		
		ШаблонТН = НСтр("ru ='ТН №%1 от %2'");
		Для Каждого Накладная Из СтрокаТаблицы.Строки Цикл
			
			ТранспортнаяНакладнаяНомер = ЗначениеРеквизитаДерева(Накладная,
				ИмяТаблицыТранспортнойНакладной+".НомерСтроки.ТранспортнаяНакладнаяНомер");
				
			Если Не ЗначениеЗаполнено(ТранспортнаяНакладнаяНомер) Тогда
				Продолжить;
			КонецЕсли;
			
			ТранспортнаяНакладнаяДата = ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаДерева(Накладная,
				ИмяТаблицыТранспортнойНакладной+".НомерСтроки.ТранспортнаяНакладнаяДата"));
			
			ПредставлениеТранспортнойНакладной = СтрШаблон(ШаблонТН, ТранспортнаяНакладнаяНомер, ТранспортнаяНакладнаяДата)
			+ ?(ЗначениеЗаполнено(ПредставлениеТранспортнойНакладной), ", " + ПредставлениеТранспортнойНакладной, "");
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПредставлениеТранспортнойНакладной;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПередачаТоваров(ТабличныйДокумент, ДанныеПечати, ДанныеПокупателя)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ПередачаТоваров_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ПередачаТоваров";
	
	ЗаполнитьРеквизитыШапкиПередачаТоваров(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
	
	// Вывод табличной части
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	ЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыСЭЦП");
	
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ТабличныйДокумент.Присоединить(ЗаголовокТаблицыДДСЭП);
	
	// Массив для проверки вывода последней строки табличной части и подвала.
	МассивВыводимыхОбластей = Новый Массив;
	
	Строка = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	СтрокаДДСЭП = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	
	ДанныеТовары = ДанныеПечати.Товары;
	КоличествоСтрок = ДанныеТовары.Количество();
	
	Для Каждого ТекСтрока Из ДанныеТовары Цикл
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(Строка);
		
		Если ТекСтрока.НомерСтроки = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(Итоги);
			МассивВыводимыхОбластей.Добавить(Подвал);
		КонецЕсли;
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			ТабличныйДокумент.Присоединить(ЗаголовокТаблицыДДСЭП);
		КонецЕсли;
		
		Строка.Параметры.Заполнить(ТекСтрока);
		ТабличныйДокумент.Вывести(Строка);
		
		ДополнительныеДанные = ТекСтрока.Подписанные;
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			
			Для каждого Данные Из ДополнительныеДанные Цикл
				ПодписанныеДанные = ?(ЗначениеЗаполнено(ПодписанныеДанные),
					ПодписанныеДанные + Символы.ПС, "") + Данные.Ключ + " = " + Данные.Значение;
			КонецЦикла;
			СтрокаДДСЭП.Параметры.Подписанные = ПодписанныеДанные;
			ТабличныйДокумент.Присоединить(СтрокаДДСЭП);
		КонецЕсли;
		
	КонецЦикла;
	
	// Итоги
	Итоги.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(Итоги);
	
	// Подвал
	Подвал.Параметры.Заполнить(ДанныеПечати.Подвал);
	ТабличныйДокумент.Вывести(Подвал);
	
	// Данные о передаче груза
	ДанныеОПередачеГруза = Макет.ПолучитьОбласть("ДанныеОПередачеГруза");
	ДанныеОПередачеГруза.Параметры.Заполнить(ДанныеПечати.Шапка);
	ДанныеОПередачеГруза.Параметры.Заполнить(ДанныеПечати.ДанныеОПередаче);
	ДанныеОПередачеГруза.Параметры.Заполнить(ДанныеПокупателя);

	ТабличныйДокумент.Вывести(ДанныеОПередачеГруза);
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиПередачаТоваров(Шапка, Макет, ТабличныйДокумент)
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(Шапка);
	
	НомерИсправления = Неопределено;
	ДатаИсправления = Неопределено;
	
	Шапка.Свойство("НомерИсправления", НомерИсправления);
	Шапка.Свойство("ДатаИсправления", ДатаИсправления);
	
	ЗаполнитьДатуНомерИсправления(ОбластьШапка, ДатаИсправления, НомерИсправления);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ (ЗАКАЗ КЛИЕНТА)

Функция ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, Тип = "Счет")
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	Если Не ЗначениеЗаполнено(СведенияОКонтрагенте.ЮридическийАдрес) Тогда
		СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	КонецЕсли;
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	Если Не ЗначениеЗаполнено(СведенияООрганизации.ЮридическийАдрес) Тогда
		СведенияООрганизации.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	КонецЕсли;
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",               ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",           ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",             ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",              ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СрокПлатежа"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОкончанияДействияСчета"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("Руководитель",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Руководитель"));
	ДанныеЗаполненияШапки.Вставить("Бухгалтер",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Бухгалтер"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("Сумма",             ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаИтог"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"АдресДоставки"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Описание");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если Тип = "Счет" Тогда
				НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
				ИДТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			Иначе
				НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
				ИДТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			КонецЕсли; 
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.Код   = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		КонецЕсли;
		
		НоваяСтрока.Описание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Описание");
		НоваяСтрока.Артикул          = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		Упаковка                     = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"ЕдиницаИзмерения.Наименование");
		БазоваяЕдиницаИзмерения      = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.БазоваяЕдиница.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество       = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"КоличествоУпаковок");
		НоваяСтрока.Цена             = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма            = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		
		СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		Если Не ЗначениеЗаполнено(СуммаНДС) Тогда
			НоваяСтрока.СуммаНДС         = 0;
		Иначе
			НоваяСтрока.СуммаНДС         = СуммаНДС;
		КонецЕсли;
		НоваяСтрока.СтавкаНДС        = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки      = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		
	КонецЦикла;
	
	// ЭтапыОплаты
	ТЗЭтапыОплаты = Новый ТаблицаЗначений;
	
	Если Тип = "Заказ" Тогда
		ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");
	КонецЕсли;
	ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");
	НомерСтроки = 1;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗЭтапыОплаты.Добавить();
		Если Тип = "Заказ" Тогда
			НоваяСтрока.ВариантОплаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВариантОплаты");
		КонецЕсли;
		НоваяСтрока.ДатаПлатежа    = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПлатежа");
		НоваяСтрока.ПроцентПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПроцентПлатежа");
		НоваяСтрока.СуммаПлатежа   = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПлатежа");
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",       ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",      ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыОплаты", ТЗЭтапыОплаты);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Счет-заказ.
//
Процедура ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеПечати, Тип = "Счет")
	
	ИспользоватьРучныеСкидки         = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки();
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_СчетЗаказ_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СчетЗаказ";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЧастичнаяОплата = Ложь;
	Иначе
		ЧастичнаяОплата = Истина;
	КонецЕсли;
	
	ЕстьСкидки = ОбменСКонтрагентамиПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки
		ИЛИ ИспользоватьАвтоматическиеСкидки);
	
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	Если ДанныеПечати.Свойство("ДатаПлатежа") Тогда
		НовСтрока = ТаблицаЭтапыОплаты.Добавить();
		НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;
	КонецЕсли; 
	
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	ЕстьДопДанные = Ложь;
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		
		ЕстьДопДанные = Истина;
		
		Если ЕстьСкидки Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);
	СоответствиеСтавокНДС = Новый Соответствие;
	Если ЧастичнаяОплата Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;
		ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
		ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтого);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС) Тогда
			
			ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
			ОбластьНДС.Параметры.НДС = НСтр("ru = 'В т.ч. НДС:'");
			ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьДопДанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		КонецЕсли;
		
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок	   = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ТоварПредставление = ?(ЗначениеЗаполнено(СтрокаТовары.Описание), СтрокаТовары.Описание, СтрокаТовары.Товар);
			ОбластьТовар.Параметры.Товар = ТоварПредставление;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
			Иначе
				СуммаПоСтроке = СтрокаТовары.Сумма;
			КонецЕсли;
			
			ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
			
			Если ЕстьСкидки Тогда
				СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
				ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных, НомерСтроки,ТабличныйДокумент, ОбластьМакетаДД);
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			Сумма = Сумма + СуммаПоСтроке;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.Всего = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма);
		
		Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСуммаНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(СуммаНДС);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСкидок = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(ВсегоБезСкидок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			ТаблицаТоварыНДС = ТаблицаТовары.Скопировать( , "СтавкаНДС, СуммаНДС");
			ТаблицаТоварыНДС.Свернуть("СтавкаНДС", "СуммаНДС");
			Для Каждого ТекСтавкаНДС Из ТаблицаТоварыНДС Цикл
				СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.СтавкаНДС, ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				ОбластьДанных.Параметры.НДС = ОбменСКонтрагентамиПереопределяемый.ТекстНДСПоСтавке(ТекСтавкаНДС.СтавкаНДС,
					ДанныеПечати.Шапка.ЦенаВключаетНДС);
				ОбластьДанных.Параметры.ВсегоНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЦикла;
			
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				ВсегоСНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма);
			Иначе
				ВсегоСНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма + СуммаНДС);
			КонецЕсли;
			
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = ВсегоСНДС;
			ТабличныйДокумент.Вывести(ОбластьИтогоСНДС)
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));
		Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			Область.Параметры.Заполнить(ТекЭтап);
			Область.Параметры.ТекстНДС = ОбменСКонтрагентамиПереопределяемый.СформироватьТекстНДСЭтапаОплаты(
				СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));
	КонецЕсли;
	
	ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип);
	
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип)
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;
	
	Если Тип = "Счет" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%.'");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%",
				Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент) Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
		Иначе	
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкПолучателяПредставление;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетПолучателяПредставление;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Тип = "Счет" Тогда
		ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента%'");
	ИначеЕсли Тип = "Заказ" Тогда
		ТекстЗаголовка = НСтр("ru='Заказ клиента № %НомерДокумента% от %ДатаДокумента%'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДЛФ=DD"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:'"), НСтр("ru='Исполнитель:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,ФактическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:'"), НСтр("ru='Заказчик:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(СведенияОПолучателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,ФактическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
		ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип)
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;
		ОбластьМакета.Параметры.ФИОБухгалтера   = ДанныеПечати.Шапка.Бухгалтер;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЗАКАЗОМ ПОСТАВЩИКУ

Функция ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер",                    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",                     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",                 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",            ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",            ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "АдресДоставки"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("НаименованиеНоменклатурыПоставщика");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			Или СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			НоваяСтрока.Код = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			НоваяСтрока.Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			ИДТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
			НоваяСтрока.Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Артикул");
		КонецЕсли;
		Упаковка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения.Наименование");
		БазоваяЕдиницаИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.БазоваяЕдиница.Наименование");
					
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоУпаковок");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Заказ поставщику".
//
Процедура ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	ИспользоватьРучныеСкидки = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьРучныеСкидкиВЗакупках");
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ЗаказПоставщику_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ЗаказПоставщику";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	КолонкаКодов  = ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	ЕстьСкидки = ОбменСКонтрагентамиПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);
	
	Если ЕстьСкидки Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
	КонецЕсли;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	КонецЕсли;
	
	// Заполнить реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Заказ поставщику № %НомерДокумента% от %ДатаДокумента%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДЛФ=DD"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.АдресДоставки) Тогда
		ОбластьАдресДоставки = Макет.ПолучитьОбласть("АдресДоставки");
		ОбластьАдресДоставки.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
		ТабличныйДокумент.Вывести(ОбластьАдресДоставки);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		
		ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
		ТабличныйДокумент.Присоединить(ОбластьКодов);
		
	КонецЕсли;
	
	ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		
		Если ЕстьСкидки Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
	КонецЕсли;
	
	Если ЕстьСкидки Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
	КонецЕсли;
	
	Сумма          = 0;
	СуммаНДС       = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НомерСтроки    = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = СтрокаТовары.НаименованиеНоменклатурыПоставщика;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
		СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
		СуммаНДСТовара = ?(ТипЗнч(СтрокаТовары.СуммаНДС) = Тип("Число"), СтрокаТовары.СуммаНДС, 0);
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаТовары.Сумма + СуммаНДСТовара;
		Иначе
			СуммаПоСтроке = СтрокаТовары.Сумма;
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
		ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Сумма     = Сумма + СуммаПоСтроке;
		СуммаНДС  = СуммаНДС + СуммаНДСТовара;
		
		Если ЕстьСкидки Тогда
			ВсегоСкидок    = ВсегоСкидок    + СуммаСкидки;
			ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
		ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных, НомерСтроки, ТабличныйДокумент, ОбластьМакетаДД);
		
	КонецЦикла;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Если ЕстьСкидки Тогда
		
		ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
	КонецЕсли;
	
	ОбластьДанных.Параметры.Всего = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	// Вывести ИтогоНДС
	Если ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьДанных.Параметры.НДС = НСтр("ru='В том числе НДС:'");
		Иначе
			ОбластьДанных.Параметры.НДС = НСтр("ru='Сумма НДС:'");
		КонецЕсли;
		ОбластьДанных.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью
		+ ?(ЗначениеЗаполнено(ДанныеПечати.Шапка.ИтогиПрописью) И ЗначениеЗаполнено(ДанныеПечати.Шапка.НаименованиеВалюты),
			" " +ДанныеПечати.Шапка.НаименованиеВалюты, "");
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим доп данные документа
	
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ-ФАКТУРА

Функция ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ШаблонНомераСФ = НСтр("ru = 'Счет-фактура № %1 от %2'");
	ДанныеЗаполненияШапки.Вставить("Номер", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНомераСФ, НомерДокумента,
		Формат(ДатаДокумента,"ДЛФ=DD")));
	
	ДатаИспрСтрокой = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления");
	
	ШаблонНомераИсправленияСФ = НСтр("ru = 'Исправление № %1 от %2'");
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонНомераИсправленияСФ,
		?(ЗначениеЗаполнено(НомерИсправления), НомерИсправления, "--"),
		?(ЗначениеЗаполнено(ДатаИспрСтрокой), Формат(ДатаИспрСтрокой, "ДЛФ=DD"), "--")));
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	ВыставленныйКомитентом = (ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВыставленныйКомитентом") = Истина);
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ИмяРеквОрганизации = "Организация";
		ИмяБанкСчета = "БанковскийСчетОрганизации";
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ИмяРеквОрганизации = ?(ВыставленныйКомитентом, "Покупатель", "Организация");
		ИмяБанкСчета = ?(ВыставленныйКомитентом, "БанковскийСчетПокупателя", "БанковскийСчетОрганизации");
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета + ".НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета + ".Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета + ".Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета + ".Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ГрузоотправительАдрес"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузополучатель"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ГрузополучательАдрес"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", НСтр("ru ='Продавец:'") + " " + ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПоставщике.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", НСтр("ru ='ИНН/КПП продавца:'") + " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru ='Грузоотправитель и его адрес:'") + " "
			+ СведенияОГрузоотправителе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузоотправителе.ФактическийАдрес), ", "
			+ СведенияОГрузоотправителе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru ='Грузоотправитель и его адрес: --'")); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru ='Грузополучатель и его адрес:'") + " "
			+ СведенияОГрузополучателе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ФактическийАдрес), ", "
			+ СведенияОГрузополучателе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru ='Грузополучатель и его адрес: --'")); 
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПоДокументу", НСтр("ru ='К платежно-расчетному документу №'") + " "
		+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлатежныйДокумент"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя",НСтр("ru ='Покупатель:'") + " " + ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", НСтр("ru ='Адрес:'") + " "+ ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПокупателе.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", НСтр("ru ='ИНН/КПП покупателя:'") + " "  + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='Валюта: код %1'"), КодВалюты);
	ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовБезНДС"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДС"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНал"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("СуммаБезНДС");
	ТЗ.Колонки.Добавить("Акциз");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтранаПроисхожденияКод");
	ТЗ.Колонки.Добавить("ПредставлениеСтраны");
	ТЗ.Колонки.Добавить("ПредставлениеГТД");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаимТов");
		ОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_Тов");
		НоваяСтрока.ЕдиницаИзмеренияКод = ОКЕИ;
		НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения");

		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТов");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТов");
		НоваяСтрока.СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДС");
		НоваяСтрока.Акциз = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумАкциз");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВел");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНал");
		СтранаПроисхожденияКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодПроисх");
		НоваяСтрока.СтранаПроисхожденияКод = СтранаПроисхожденияКод;

		НоваяСтрока.ПредставлениеГТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерТД");
		ПредставлениеСтраны = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаименованиеСтраныПроисхождения"); 
		НоваяСтрока.ПредставлениеСтраны = ПредставлениеСтраны;
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_СчетФактура1137_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	// Выводим заголовок таблицы.
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода.
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа.
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого|ОсновныеДанныеТаблицы");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|ПодвалТаблицы");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
		Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		Иначе
			Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
			КонецЕсли;
			Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовары.СтранаПроисхожденияКод = "643" Тогда
			СтрокаТовары.СтранаПроисхожденияКод = "--";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭП.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с КОРРЕКТИРОВОЧНЫЙ СЧЕТ-ФАКТУРА

Функция ПолучитьДанныеКорректировочногоСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	НомерСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	ДанныеЗаполненияШапки.Вставить("Номер", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ДанныеЗаполненияШапки.Вставить("Дата", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления");
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправленияСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("НомерИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправленияСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("ДатаИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	ВыставленныйКомитентом = (ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВыставленныйКомитентом") = Истина);
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ИмяРеквОрганизации = "Организация";
		ИмяБанкСчета = "БанковскийСчетОрганизации";
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ИмяРеквОрганизации = ?(ВыставленныйКомитентом, "Покупатель", "Организация");
		ИмяБанкСчета = ?(ВыставленныйКомитентом, "БанковскийСчетПокупателя", "БанковскийСчетОрганизации");
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета +".НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета +".Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета +".Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяБанкСчета +".Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", "Продавец: " + ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
		
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПоставщике.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", НСтр("ru ='ИНН/КПП продавца:'") + " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя","Покупатель: " + ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", "Адрес: " + ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
		
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПокупателе.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", НСтр("ru ='ИНН/КПП покупателя:'") + " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='Валюта: код %1'"), КодВалюты);
	ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);
	
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУвеличение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУвеличение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУвеличение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУменьшение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУменьшение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУм"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУменьшение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияДо");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("КоличествоДо");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("ЦенаДо");
	ТЗ.Колонки.Добавить("СуммаБезНДС");
	ТЗ.Колонки.Добавить("СуммаБезНДСДо");
	ТЗ.Колонки.Добавить("Акциз");
	ТЗ.Колонки.Добавить("АкцизДо");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДСДо");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаНДСДо");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СуммаСНДСДо");
	ТЗ.Колонки.Добавить("РазницаБезНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаБезНДСУменьшение");
	ТЗ.Колонки.Добавить("РазницаНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаНДСУменьшение");
	ТЗ.Колонки.Добавить("РазницаСНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаСНДСУменьшение");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаимТов");
		
		ОКЕИДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_ТовДо");
		ОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_ТовПосле");
		НоваяСтрока.ЕдиницаИзмеренияКод = ОКЕИ;
		НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения");
		НоваяСтрока.ЕдиницаИзмеренияКодДо = ОКЕИДо;
		НоваяСтрока.ЕдиницаИзмеренияДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияДо");
		
		НоваяСтрока.КоличествоДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТовДо");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТовПосле");
		НоваяСтрока.ЦенаДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТовДо");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТовПосле");
		НоваяСтрока.СуммаБезНДСДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСДоИзм");
		НоваяСтрока.СуммаБезНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСПослеИзм");
		НоваяСтрока.АкцизДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "АкцизДо");
		НоваяСтрока.Акциз = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "АкцизПосле");
		НоваяСтрока.СтавкаНДСДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВелДо");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВелПосле");
		НоваяСтрока.СуммаНДСДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСДо");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСПосле");
		НоваяСтрока.СуммаСНДСДо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалДоИзм");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалПослеИзм");
		НоваяСтрока.РазницаБезНДСУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"СтТовБезНДСУвел");
		НоваяСтрока.РазницаНДСУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСУвел");
		НоваяСтрока.РазницаСНДСУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалУвел");
		НоваяСтрока.РазницаБезНДСУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСУм");
		НоваяСтрока.РазницаНДСУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСУм");
		НоваяСтрока.РазницаСНДСУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалУм");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Корректировочный Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументКорректировочныйСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_СчетФактураКорректировочный1137_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого|ОсновныеДанныеТаблицы");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
		Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		Иначе
			Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
			КонецЕсли;
			Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭП.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с КОРРЕКТИРОВОЧНЫМ ДОКУМЕНТОМ

Функция ПолучитьДанныеКорректировочногоДокументаДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ПолноеНаименование"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ИНН"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО", 		 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ЮридическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ФактическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.НомерСчета"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Наименование"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Код"));
	СведенияОГрузоотправителе.Вставить("КоррСчет",			 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.КоррСчет"));
	СведенияОГрузоотправителе.Вставить("Телефоны",			 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ПолноеНаименование"));
	СведенияОГрузополучателе.Вставить("ИНН", 			   	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ИНН"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО", 		 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ЮридическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ФактическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("НомерСчета",		 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.НомерСчета"));
	СведенияОГрузополучателе.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Наименование"));
	СведенияОГрузополучателе.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Код"));
	СведенияОГрузополучателе.Вставить("КоррСчет",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.КоррСчет"));
	СведенияОГрузополучателе.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.СтруктурноеПодразделение"));
	ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО", 		 ДанныеЗаполненияШапки.СведенияОПоставщике.КодПоОКПО);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",	"");
	ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",			ДанныеЗаполненияШапки.СведенияОПокупателе.КодПоОКПО);

	ДанныеЗаполненияШапки.Вставить("ОснованиеНомер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ОснованиеДата", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеОснования", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеОснования"));
	
	ДанныеЗаполненияШапки.Вставить("НомерДокумента",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаДокумента",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("НомерОснования",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерДокументаОснования"));
	ДанныеЗаполненияШапки.Вставить("ДатаОснования",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДокументаОснования"));
	
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеИсходногоДокумента",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																					СтрокаОбъекта,	"ПредставлениеИсходногоДокумента"));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсправления",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, 
																					СтрокаОбъекта,	"НомерИсправления"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаИсправления",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																					СтрокаОбъекта,	"ДатаИсправления"));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																					СтрокаОбъекта, "НомерИсправленияИсходногоДокумента"));
																					
	ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																					СтрокаОбъекта, "ДатаИсправленияИсходногоДокумента"));
																					
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																					СтрокаОбъекта, "НомерИсходногоДокумента"));
																					
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																					СтрокаОбъекта, "ДатаИсходногоДокумента"));


	
	ДанныеЗаполненияШапки.Вставить("Курс", 				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АдресДоставки"));
	
	ДанныеЗаполненияПодвала = Новый Структура;
	ДанныеЗаполненияПодвала.Вставить("ДатаОтпуска", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаОтпуска"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьРуководителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОРуководителя"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("ЦенаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДСДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДСДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНеттоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаБрутто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоВОдномМесте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ТоварКод");
		НоваяСтрока.ТоварНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		НоваяСтрока.БазоваяЕдиницаНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоДоКорректировки");
		НоваяСтрока.КоличествоВОдномМесте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоВОдномМесте");
		
		НоваяСтрока.КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Мест");
		НоваяСтрока.МассаБрутто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаБрутто");
		
		НоваяСтрока.МассаНеттоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНеттоДоКорректировки");
		НоваяСтрока.МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНетто");
		
		НоваяСтрока.ВидУпаковки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка");
		
		НоваяСтрока.ЦенаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаДоКорректировки");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.СуммаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаДоКорректировки");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДСДоКорректировки");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДСДоКорректировки");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.СуммаНДС), НоваяСтрока.СуммаНДС, 0);
		Если Не ЗначениеЗаполнено (НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = НСтр("ru ='без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал", ДанныеЗаполненияПодвала);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Корректировочный Торг-12".
//
Процедура ЗаполнитьТабличныйДокументКорректировочныйДокумент_ЭД(ТабличныйДокумент, ДанныеПечати, ДанныеПокупателя)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_СоглашениеОбИзмененииСтоимостиОтправитель_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СогласованиеСторон";
	
	ЗаполнитьРеквизитыШапкиКорректировкаСтоимости(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
	
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб|ОсновныеДанныеТаблицы");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице|ОсновныеДанныеТаблицы");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего|ОсновныеДанныеТаблицы");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;
	
	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
		
		ДанныеСтроки.КоэффициентПересчета  = ?(ЗначениеЗаполнено(СтрокаТовары.КоличествоВОдномМесте), СтрокаТовары.КоличествоВОдномМесте, 1);
		
		ДанныеСтроки.КоличествоДоКорректировки  = СтрокаТовары.КоличествоДоКорректировки;
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
		ДанныеСтроки.МассаНеттоДоКорректировки = СтрокаТовары.МассаНеттоДоКорректировки;
		ДанныеСтроки.МассаНетто = СтрокаТовары.МассаНетто;
		
		ДанныеСтроки.СуммаДоКорректировки     = СтрокаТовары.СуммаДоКорректировки;
		ДанныеСтроки.Сумма                    = СтрокаТовары.Сумма;
		ДанныеСтроки.СуммаНДСДоКорректировки  = СтрокаТовары.СуммаНДСДоКорректировки;
		ДанныеСтроки.СуммаНДС                 = СтрокаТовары.СуммаНДС;
		ДанныеСтроки.СуммаСНДСДоКорректировки = СтрокаТовары.СуммаСНДСДоКорректировки;
		ДанныеСтроки.СуммаСНДС                = СтрокаТовары.СуммаСНДС;
		
		ДанныеСтроки.ЦенаДоКорректировки = СтрокаТовары.ЦенаДоКорректировки;
		ДанныеСтроки.Цена = СтрокаТовары.Цена;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭП.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати.Подвал, Макет, ТабличныйДокумент, ДанныеПокупателя, Истина);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

Функция ДанныеСоглашенияПолучатель(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеПокупателя = Новый Структура;
	
	ДанныеПокупателя.Вставить("ГрузПолучилДолжность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилДолжность"));
	ДанныеПокупателя.Вставить("ГрузПолучилФИО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилФИО"));
	ДанныеПокупателя.Вставить("ДатаПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения"));
	
	Возврат ДанныеПокупателя;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокумент_СоглашениеПолучателя(ТабличныйДокумент, ДанныеПолучателя)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_СоглашениеОбИзмененииСтоимостиПолучатель_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ДанныеПолучателя);
	Если ДанныеПолучателя.Свойство("ДатаДокументаОтправителя") Тогда
		ОбластьМакета.Параметры.ДатаДокументаОтправителя = Формат(ДанныеПолучателя.ДатаДокументаОтправителя, "ДЛФ=DD");
	КонецЕсли;
	
	ПолнаяДатаПринял = Формат(ДанныеПолучателя.ДатаПолучения, "ДЛФ=DD");
	ДлинаСтроки = СтрДлина(ПолнаяДатаПринял);
	ПервыйРазделитель = Найти(ПолнаяДатаПринял, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаПринял, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаПринялДень = """" + Лев(ПолнаяДатаПринял, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаПринялМесяц = Сред(ПолнаяДатаПринял, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаПринялГод = Прав(ПолнаяДатаПринял, ДлинаСтроки - ВторойРазделитель);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ПРАЙС-ЛИСТ

Функция ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));
	СведенияОПоставщике.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОПоставщике.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Цена");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул          = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Код              = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.Товар            = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Цена             = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Количество       = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ПрайсЛист_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок|Данные");
	ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
	ОбластьПодвал    = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	ЕстьДопДанные = Ложь;
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ЕстьДопДанные = Истина;
		
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
		
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ=DD");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если ЕстьДопДанные Тогда
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
	КонецЕсли;
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		
		ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных,
			НомерСтроки, ТабличныйДокумент, ОбластьМакетаДД);
		
		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет,ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭД прочитанными по схеме CML2

Функция СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, ТипУчастника, ТипБанковскогоСчета)
	
	Структура = Новый Структура;
	Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + ".Наименование");
	ПолнНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + ".ПолноеНаименование");
	Структура.Вставить("Представление", 	?(ЗначениеЗаполнено(Наименование), Наименование, ПолнНаименование));
	Структура.Вставить("ПолноеНаименование",?(ЗначениеЗаполнено(ПолнНаименование), ПолнНаименование, Наименование));
	Структура.Вставить("ИНН",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + ".ИНН"));
	Структура.Вставить("КПП",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + ".КПП"));
	Структура.Вставить("ЮридическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + ".ЮридическийАдрес_Представление"));
	Структура.Вставить("ФактическийАдрес",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + ".ФактическийАдрес_Представление"));
	Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
	Если ЗначениеЗаполнено(Вид) Тогда
		Структура.Вставить("Телефоны",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + "." + Вид));
	КонецЕсли;
	Структура.Вставить("НомерСчета",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + "." + ТипБанковскогоСчета + ".НомерСчета"));
	Структура.Вставить("Банк",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + "." + ТипБанковскогоСчета + ".Банк.Наименование"));
	Структура.Вставить("БИК",				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ТипУчастника + "." + ТипБанковскогоСчета + ".Банк.Код"));
	
	Возврат Структура;
	
КонецФункции

Функция ТаблицаТоваров(ДанныеШапки, СтрокаОбъекта, ДеревоРазбора, ИмяТаблицы)
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("НДСУчтеноВСумме");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ТЗ.Колонки.Добавить("СерийныеНомера");
	
	ДопДанныеПодписанные = Новый Структура;
	
	ТаблицаСерийныеНомера = Новый ТаблицаЗначений;
	ТаблицаСерийныеНомера.Колонки.Добавить("КлючСтроки");
	ТаблицаСерийныеНомера.Колонки.Добавить("ЗначениеРеквизита");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", ИмяТаблицы));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НоваяСтрока.ТоварКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НаименованиеТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Описание");
		Если Не ЗначениеЗаполнено(НаименованиеТовара) Тогда
			НаименованиеТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		КонецЕсли;
		НоваяСтрока.ТоварНаименование =НаименованиеТовара;
		
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.НДСУчтеноВСумме = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НДСУчтеноВСумме");
		НоваяСтрока.ВидУпаковки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВидУпаковки");
		
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НДСВСумме = ?(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НДСУчтеноВСумме") = Истина, Истина, Ложь);
		Сумма = ?(ТипЗнч(Сумма) = Тип("Число"), Сумма, 0);
		СуммаНДС = ?(ТипЗнч(СуммаНДС) = Тип("Число"), СуммаНДС, 0);
		
		НоваяСтрока.Сумма = Сумма - ?(НДСВСумме, СуммаНДС, 0);
		НоваяСтрока.СуммаНДС = СуммаНДС;
		НоваяСтрока.СуммаСНДС = Сумма + ?(НДСВСумме, 0, СуммаНДС);
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		
		ЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиница");
		Если ЗначениеЗаполнено(ЕИ) Тогда
			НоваяСтрока.БазоваяЕдиницаНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиница.Наименование");
			НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиница.Код");
		Иначе
			НоваяСтрока.БазоваяЕдиницаНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
			НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		КонецЕсли;
		
		СерийныеНомера = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СерийныеНомера");
		Если ЗначениеЗаполнено(СерийныеНомера) Тогда
			
			Если ТипЗнч(СерийныеНомера) = Тип("Строка") Тогда
				МассивНомера = Новый Массив;
				МассивНомера.Добавить(СерийныеНомера);
			Иначе
				МассивНомера = СерийныеНомера;
			КонецЕсли;
			
			СерийныеНомера = СтрСоединить(МассивНомера, ";");
			
			ЗначенияРеквизитовНоваяСтрока = ТаблицаСерийныеНомера.Добавить();
			ЗначенияРеквизитовНоваяСтрока.КлючСтроки = ТЗ.Индекс(НоваяСтрока);
			ЗначенияРеквизитовНоваяСтрока.ЗначениеРеквизита = НСтр("ru ='Серийные номера:'") + " "+ СерийныеНомера;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаСерийныеНомера.Количество() Тогда
		ДанныеШапки.Вставить("ЗначенияРеквизитов", ТаблицаСерийныеНомера);
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с Актом на передачу прав (CML2)

Функция ПолучитьДанныеАктаНаПередачуПравДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, "Контрагент", "БанковскийСчетКонтрагента");
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиате", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиаре", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияОбОрганизации = СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, "Организация", "БанковскийСчетОрганизации");
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиаре", СведенияОбОрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиате", СведенияОбОрганизации);
	КонецЕсли;
	
	// В строке Основание выводится на просмотр содержимое таблицы "ДокументыСделки".
	ДокументыСделки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДокументыСделки");
	Если ЗначениеЗаполнено(ДокументыСделки) Тогда
		Основание = "";
		Если ТипЗнч(ДокументыСделки) = Тип("ТаблицаЗначений") Тогда
			Для Каждого ТекущаяСтрока Из ДокументыСделки Цикл
				Основание = ?(ЗначениеЗаполнено(Основание), "; ", "") + ТекущаяСтрока.Представление;
			КонецЦикла;
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("Основание", Основание);
	КонецЕсли;
	
	СведенияОПлательщике = СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, "Плательщик", "БанковскийСчетКонтрагента");
	ДанныеЗаполненияШапки.Вставить("СведенияОПлательщике", СведенияОПлательщике);
	
	ДанныеЗаполненияШапки.Вставить("НомерДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаДокумента", Дата(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата")));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления"));
	
	ДанныеЗаполненияШапки.Вставить("УсловияПередачи", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "УсловияПередачи"));
	ДанныеЗаполненияШапки.Вставить("КодПартнера", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодПартнера"));
	
	ОсобыеУсловия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОсобыеУсловия");
	ДанныеЗаполненияШапки.Вставить("ОсобыеУсловия", ОсобыеУсловия);
	
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаФормирования"));
	
	СуммаДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаДокумента");
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код");
	ДанныеЗаполненияШапки.Вставить("СуммаПрописью", ОбменСКонтрагентамиПереопределяемый.СуммаПрописью(СуммаДокумента, КодВалюты));
	
	Подписанты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Подписанты");
	Если ТипЗнч(Подписанты) = Тип("Массив") И Подписанты.Количество() > 0 Тогда
		ДанныеЗаполненияШапки.Вставить("ДолжностьРуководителя", Подписанты[0].Должность);
		ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Подписанты[0]));
	КонецЕсли;
	
	Товары = ТаблицаТоваров(ДанныеЗаполненияШапки, СтрокаОбъекта, ДеревоРазбора, "СтрокаТЧ");
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАктНаПередачуПрав(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	Шапка = ДанныеПечати.Шапка;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_АктНаПередачуПрав_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ЗаполнитьДатуНомерИсправления(ОбластьМакета, Шапка.ДатаИсправления, Шапка.НомерИсправления);
	
	Если НЕ ЗначениеЗаполнено(Шапка.КодПартнера) Тогда
		ОбластьМакета.Области.Найти("ОбластьКодПартнера").Очистить();
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеЛицензиара = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		Шапка.СведенияОЛицензиаре,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеЛицензиата = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		Шапка.СведенияОЛицензиате,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		Шапка.СведенияОПлательщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
		
	Если ЗначениеЗаполнено(Шапка.УсловияПередачи) Тогда
		ОбластьМакета.Области.ОбластьУсловияПередачи.Текст = Шапка.УсловияПередачи;
	Иначе
		ОбластьМакета.Параметры.ЛицензиарНаименование = ?(ЗначениеЗаполнено(Шапка.СведенияОЛицензиаре.Представление),
			Шапка.СведенияОЛицензиаре.Представление, Шапка.СведенияОЛицензиаре.ПолноеНаименование);
		ОбластьМакета.Параметры.ЛицензиатНаименование = ?(ЗначениеЗаполнено(Шапка.СведенияОЛицензиате.Представление),
			Шапка.СведенияОЛицензиате.Представление, Шапка.СведенияОЛицензиате.ПолноеНаименование);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб|ОсновныеДанныеТаблицы");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице|ОсновныеДанныеТаблицы");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего|ОсновныеДанныеТаблицы");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;

	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	Если ТЧТовары.Колонки.Найти("СуммаНДС") <> Неопределено И ТЧТовары.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = Истина;
	Иначе
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТовары);
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
			Если ДанныеСтроки.Номер <> 1 И Не ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// Очистим итоги по странице.
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭП.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаФормирования, "ДЛФ=DD");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	Если ДанныеПечати.Шапка.Свойство("ДатаПодписанияПолучателя") Тогда
		ДатаПодписанияПолучателя = Формат(ДанныеПечати.Шапка.ДатаПодписанияПолучателя, "ДЛФ=DD");
		ДлинаСтроки = СтрДлина(ДатаПодписанияПолучателя);
		ПервыйРазделитель = Найти(ДатаПодписанияПолучателя, " ");
		ВторойРазделитель = Найти(Прав(ДатаПодписанияПолучателя, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаПодписанияПолучателяДень = """" + Лев(ДатаПодписанияПолучателя, ПервыйРазделитель -1 ) + """";
		ОбластьМакета.Параметры.ДатаПодписанияПолучателяМесяц = Сред(ДатаПодписанияПолучателя, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакета.Параметры.ДатаПодписанияПолучателяГод = Прав(ДатаПодписанияПолучателя, ДлинаСтроки - ВторойРазделитель);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с каталогом файлов

Функция ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОПоставщике.Вставить("ОфициальноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОфициальноеНаименование"));
	СведенияОПоставщике.Вставить("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Контрагент.ИНН"));
	СведенияОПоставщике.Вставить("КПП", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Контрагент.КПП"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЗначенияСвойств");
	ТЗ.Колонки.Добавить("Картинки");
	ЕстьСвойства = Ложь;
	ЕстьКартинки = Ложь;
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Артикул");
		НоваяСтрока.Код     = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.Товар   = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
			
		ЗначенияСвойств = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
								ДеревоРазбора,
								СтрокаТЧ,
								"НоменклатураПоставщика.ЗначенияСвойств");
		Если Не ЗначенияСвойств = Неопределено Тогда
			НоваяСтрока.ЗначенияСвойств = ЗначенияСвойств;
			ЕстьСвойства = Истина;
		КонецЕсли;
		
		Картинки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
								ДеревоРазбора,
								СтрокаТЧ,
								"НоменклатураПоставщика.Картинки");
		Если Не Картинки = Неопределено Тогда
			НоваяСтрока.Картинки = Картинки;
			ЕстьКартинки = Истина;
		КонецЕсли;
		
		Упаковка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения.Наименование");
		ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.ЕдиницаИзмерения.Наименование");
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияНаименование) Тогда
			ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.ЕдиницаИзмерения.НаименованиеПолное");
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмеренияНаименование;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ЕстьСвойства", ЕстьСвойства);
	ДанныеЗаполненияШапки.Вставить("ЕстьКартинки", ЕстьКартинки);
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_КаталогТоваров_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ОбластьЗаголовок     = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанныеТаблицы");
	ОбластьШапка         = Макет.ПолучитьОбласть("ШапкаТаблицы|ОсновныеДанныеТаблицы");
	ОбластьШапкаСвойства = Макет.ПолучитьОбласть("ШапкаТаблицы|Свойства");
	ОбластьШапкаКартинки = Макет.ПолучитьОбласть("ШапкаТаблицы|Картинки");
	ОбластьСтрока        = Макет.ПолучитьОбласть("СтрокаТаблицы|ОсновныеДанныеТаблицы");
	ОбластьПодвал        = Макет.ПолучитьОбласть("ПодвалТаблицы|ОсновныеДанныеТаблицы");
	ОбластьСвойства      = Макет.ПолучитьОбласть("СтрокаТаблицы|Свойства");
	ОбластьКартинки      = Макет.ПолучитьОбласть("СтрокаТаблицы|Картинки");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ=Д");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
		СведенияОПоставщике.ПолноеНаименование, ?(ЗначениеЗаполнено(СведенияОПоставщике.ОфициальноеНаименование),
		СведенияОПоставщике.ОфициальноеНаименование, СведенияОПоставщике.Представление));
	ОбластьШапка.Параметры.Заполнить(СведенияОПоставщике);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если ДанныеПечати.Шапка.ЕстьСвойства Тогда
		ТабличныйДокумент.Присоединить(ОбластьШапкаСвойства);
	КонецЕсли;
	
	Если ДанныеПечати.Шапка.ЕстьКартинки Тогда
		ТабличныйДокумент.Присоединить(ОбластьШапкаКартинки);
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда

		
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
		
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		
	КонецЕсли;
	
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		Если ДанныеПечати.Шапка.ЕстьСвойства Тогда
			СтрокаСвойства = "";
			Если Строка.ЗначенияСвойств <> Неопределено Тогда
				Для Каждого Свойство Из Строка.ЗначенияСвойств Цикл
					СтрокаСвойства = СтрокаСвойства + "(" + Свойство.ИД + ", " + Свойство.Наименование + ", [";
					Для Каждого Значение Из Свойство.Значение Цикл
						СтрокаСвойства = СтрокаСвойства + Значение + ",";
					КонецЦикла;
					СтрокаСвойства = Сред(СтрокаСвойства, 1, СтрДлина(СтрокаСвойства) - 1);
					СтрокаСвойства = СтрокаСвойства + "]);" + Символы.ПС;
				КонецЦикла;
			КонецЕсли;
			ОбластьСвойства.Параметры.Свойства = СтрокаСвойства;
			ТабличныйДокумент.Присоединить(ОбластьСвойства);
		КонецЕсли;
		Если ДанныеПечати.Шапка.ЕстьКартинки Тогда
			СтрокаКартинок = "";
			Если Строка.Картинки <> Неопределено Тогда
				Для Каждого Картинка Из Строка.Картинки Цикл
					СтрокаКартинок = СтрокаКартинок + Картинка + Символы.ПС;
				КонецЦикла;
				СтрокаКартинок = Сред(СтрокаКартинок, 1, СтрДлина(СтрокаКартинок) - 1);
			КонецЕсли;
			ОбластьКартинки.Параметры.Картинки = СтрокаКартинок;
			ТабличныйДокумент.Присоединить(ОбластьКартинки);
		КонецЕсли;
		
		ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных,
			НомерСтроки, ТабличныйДокумент, ОбластьМакетаДД);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с АКТОМ ВЫПОЛНЕННЫХ РАБОТ

Функция ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("КорСчет",            ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Банк",               ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("РасчетныйСчет",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("КорСчет",            ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Банк",               ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));
	ДанныеЗаполненияШапки.Вставить("ОписаниеВыполненныхРабот", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОписаниеВыполненныхРабот"));
	ДанныеЗаполненияШапки.Вставить("Претензии", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Содержание");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварКод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.ТоварНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Содержание");
		НоваяСтрока.БазоваяЕдиницаНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСкидки = ?(НоваяСтрока.СуммаСкидки = Неопределено, 0, НоваяСтрока.СуммаСкидки);
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	КолонкаКодов = ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	ТаблицаУслуг = ДанныеПечати.Товары;
	ЕстьСкидки = ОбменСКонтрагентамиПереопределяемый.НужноВыводитьСкидки(ТаблицаУслуг, Истина);
	Если ТаблицаУслуг.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = истина;
	Иначе	
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_Акт_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДЛФ=DD"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета  = Макет.ПолучитьОбласть("ТекстШапки");
	ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы Услуги
	СуффиксОбласти = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Сумма       = 0;
	СуммаНДС    = 0;
	НомерСтроки = 0;
	
	// Выводим строки таблицы Услуги
	Для Каждого СтрокаУслуги Из ТаблицаУслуг Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаУслуги);
		ОбластьСтроки.Параметры.ЕдиницаИзмерения = СтрокаУслуги.БазоваяЕдиницаНаименование;
		
		Если ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.Содержание;
		Иначе
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.ТоварНаименование;
		КонецЕсли;
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаУслуги.Сумма + СтрокаУслуги.СуммаНДС;
		Иначе
			СуммаПоСтроке = СтрокаУслуги.Сумма;
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Сумма = СуммаПоСтроке;
		
		Если ЕстьСкидки Тогда
			
			ОбластьСтроки.Параметры.Скидка         = СтрокаУслуги.СуммаСкидки;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ФорматСумм(СуммаПоСтроке + СтрокаУслуги.СуммаСкидки);
			
		КонецЕсли;
		
		Сумма    = Сумма    + СуммаПоСтроке;
		СуммаНДС = СуммаНДС + СтрокаУслуги.СуммаНДС;
		
		ТабличныйДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
	Если ЕстьНДС Тогда
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'В том числе НДС:'");
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");
		КонецЕсли;
	Иначе
		ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ОписаниеВыполненныхРабот;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Претензии                = ДанныеПечати.Шапка.Претензии;
	ОбластьМакета.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПоставщике.КПП) Тогда
		ОбластьМакета.Параметры.КППИсполнителя       = "КПП:  " + ДанныеПечати.Шапка.СведенияОПоставщике.КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;
	ОбластьМакета.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;
	ОбластьМакета.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;
	ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПокупателе.КПП) Тогда
		ОбластьМакета.Параметры.КППЗаказчика         = "КПП:  " + ДанныеПечати.Шапка.СведенияОПокупателе.КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.РасчетныйСчетЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;
	ОбластьМакета.Параметры.БанкЗаказчика            = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;
	ОбластьМакета.Параметры.БИКЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеАкта501ДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", 
								  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП",
								  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",
								  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	ЮридическийАдрес = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"Контрагент.ЮридическийАдрес_Представление");
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес", ЮридическийАдрес);
	
	СведенияОКонтрагенте.Вставить("РасчетныйСчет", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"БанковскийСчетКонтрагента.НомерСчета"));
																	
	СведенияОКонтрагенте.Вставить("БИК", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"БанковскийСчетКонтрагента.Банк.Код"));
																	
	СведенияОКонтрагенте.Вставить("Банк", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"БанковскийСчетКонтрагента.Банк.Наименование"));

	// Заполнение Заказчика из доп. данных
	ЗаказчикНомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЗаказчикНомерСчета");
	ЗаказчикБИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЗаказчикБИК");
	ЗаказчикБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЗаказчикНаимБанк");
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		Если ЗначениеЗаполнено(ЗаказчикНомерСчета) Тогда
			СведенияОКонтрагенте.Вставить("РасчетныйСчет", ЗаказчикНомерСчета);
			СведенияОКонтрагенте.Вставить("БИК", ЗаказчикБИК);
			СведенияОКонтрагенте.Вставить("Банк", ЗаказчикБанк);
		КонецЕсли; 
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	ПолноеНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	  СтрокаОбъекта,
																	  "Организация.ПолноеНаименование");
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолноеНаименование);
	СведенияООрганизации.Вставить("ИНН",
								  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",
								  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	ЮридическийАдрес = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"Организация.ЮридическийАдрес_Представление");
	СведенияООрганизации.Вставить("ЮридическийАдрес", ЮридическийАдрес);
	
	СведенияООрганизации.Вставить("РасчетныйСчет", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"БанковскийСчетОрганизации.НомерСчета"));
																	
	СведенияООрганизации.Вставить("БИК", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"БанковскийСчетОрганизации.Банк.Код"));
																	
	СведенияООрганизации.Вставить("Банк", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"БанковскийСчетОрганизации.Банк.Наименование"));

	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Если ЗначениеЗаполнено(ЗаказчикНомерСчета) Тогда
			СведенияООрганизации.Вставить("РасчетныйСчет", ЗаказчикНомерСчета);
			СведенияООрганизации.Вставить("БИК", ЗаказчикБИК);
			СведенияООрганизации.Вставить("Банк", ЗаказчикБанк);
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер",
								   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",
								   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки",
								   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Заголовок"));
	ДанныеЗаполненияШапки.Вставить("Претензии",
									ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Претензии"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсполнения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаИсполнения"));
	ДанныеЗаполненияШапки.Вставить("СдалДолжность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СдалДолжность"));
	ДанныеЗаполненияШапки.Вставить("СдалФИО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СдалФИО"));

	ДатаИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	Если ЗначениеЗаполнено(ДатаИсправления) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", Дата(ДатаИсправления));
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", 
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления"));
	КонецЕсли;
	
	ТЗОписанийРабот = Новый ТаблицаЗначений;
	ТЗОписанийРабот.Колонки.Добавить("НачалоРабот");
	ТЗОписанийРабот.Колонки.Добавить("КонецРабот");
	ТЗОписанийРабот.Колонки.Добавить("Сумма");
	ТЗОписанийРабот.Колонки.Добавить("СуммаНДС");
	ТЗОписанийРабот.Колонки.Добавить("СуммаСНДС");
	ТЗОписанийРабот.Колонки.Добавить("Работы");
	
	СтрокиТЧОписанийРабот = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СписокОписаний"));
	Для Каждого СтрокаТЧОписанийРабот Из СтрокиТЧОписанийРабот Цикл
		
		НоваяСтрокаОписанийРабот = ТЗОписанийРабот.Добавить();
		ОписаниеРабот = СтрокаТЧОписанийРабот.ЗначениеРеквизита;
		
		НоваяСтрокаОписанийРабот.НачалоРабот = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																							ОписаниеРабот,
																							"НачРабот");
		НоваяСтрокаОписанийРабот.КонецРабот = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																						   ОписаниеРабот,
																						   "КонРабот");
		НоваяСтрокаОписанийРабот.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																						  ОписаниеРабот,
																						  "Сумма");
		НоваяСтрокаОписанийРабот.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																						 ОписаниеРабот,
																						 "СуммаНДС");
		НоваяСтрокаОписанийРабот.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, ОписаниеРабот, "СуммаСНДС");
		
		ТЗРабот = Новый ТаблицаЗначений;
		ТЗРабот.Колонки.Добавить("НомерСтроки");
		ТЗРабот.Колонки.Добавить("НаименованиеРабот");
		ТЗРабот.Колонки.Добавить("ЕдиницаИзмерения");
		ТЗРабот.Колонки.Добавить("Количество");
		ТЗРабот.Колонки.Добавить("Цена");
		ТЗРабот.Колонки.Добавить("Сумма");
		ТЗРабот.Колонки.Добавить("СуммаНДС");
		ТЗРабот.Колонки.Добавить("СуммаСНДС");
		ТЗРабот.Колонки.Добавить("Описание");
		
		СтрокиТЧРабот = ОписаниеРабот.Строки.НайтиСтроки(Новый Структура("Реквизит", "Работа"));
		Для Каждого СтрокаТЧРабот Из СтрокиТЧРабот Цикл
			
			НоваяСтрока = ТЗРабот.Добавить();
			НоваяСтрока.НомерСтроки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"Номер");
			НоваяСтрока.НаименованиеРабот = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"Номенклатура.Наименование");
			НоваяСтрока.Описание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Описание");
			НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"ЕдиницаИзмеренияНаименование");
			НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Количество");
			НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Цена");
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Сумма");
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "СуммаНДС");
			НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "СуммаСНДС");
			
		КонецЦикла;
		
		НоваяСтрокаОписанийРабот.Работы = ТЗРабот;
	КонецЦикла;
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("ОписанияРабот", ТЗОписанийРабот);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАкт501(ТабличныйДокумент, ДанныеПечати, ДанныеЗаказчика)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	ТаблицаОписанийРабот = ДанныеПечати.ОписанияРабот;
	Если ТаблицаОписанийРабот.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = Истина;
	Иначе
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_Акт501_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ШаблонЗаголовка = НСтр("ru='Акт № %1 от %2'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ДанныеПечати.Шапка.Номер,
		Формат(ДанныеПечати.Шапка.Дата, "ДЛФ=DD"));
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	Если ДанныеПечати.Шапка.Свойство("ДатаИсправления") Тогда
		
		ШаблонЗаголовка = НСтр("ru='Исправление № %1 от %2'");
		ТекстИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ДанныеПечати.Шапка.НомерИсправления,
																		Формат(ДанныеПечати.Шапка.ДатаИсправления, "ДЛФ=DD"));
		ОбластьМакета.Параметры.Исправление = ТекстИсправления;

	КонецЕсли;
	ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Услуги", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ДопДанныеТаблицы");
		ОбластьМакетаДД = Макет.ПолучитьОбласть("СтрокаРабот|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭП = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭП = Макет.ПолучитьОбласть("СтрокаРабот|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭП = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭП = Макет.ПолучитьОбласть("СтрокаРабот|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;
	
	// Выводим заголовок таблицы Услуги
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ОсновныеДанныеТаблицы");
	
	НомерОписания = 0;
	Для Каждого СтрокаОписанийРабот Из ТаблицаОписанийРабот Цикл
		
		НомерОписания = НомерОписания + 1;
		ОбластьМакета.Параметры.Заполнить(СтрокаОписанийРабот);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		Иначе
			Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭП);
			КонецЕсли;
			Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭП);
			КонецЕсли;
		КонецЕсли;
		
		// Выводим строки таблицы Услуги
		ОбластьСтрокиРабот = Макет.ПолучитьОбласть("СтрокаРабот|ОсновныеДанныеТаблицы");
		Для Каждого СтрокаРаботы Из СтрокаОписанийРабот.Работы Цикл
			
			ОбластьСтрокиРабот.Параметры.НомерСтроки = СтрокаРаботы.НомерСтроки;
			
			ОбластьСтрокиРабот.Параметры.Заполнить(СтрокаРаботы);
			
			Если ЗначениеЗаполнено(СтрокаРаботы.Описание) Тогда
				ОбластьСтрокиРабот.Параметры.НаимРабот = СтрокаРаботы.Описание;
			Иначе
				ОбластьСтрокиРабот.Параметры.НаимРабот = СтрокаРаботы.НаименованиеРабот;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокиРабот);
			Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(НомерОписания) + "." + СтрокаРаботы.НомерСтроки, "НомерСтр");
				Если СтрокаТаблицыДД <> Неопределено Тогда
					Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ОбластьМакетаДД.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
					Иначе
						Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
							ОбластьМакетаДДСЭП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
							ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭП);
						КонецЕсли;
						Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
							ОбластьМакетаДДБезЭП.Параметры.НеПодписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
							ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭП);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(СтрокаОписанийРабот.СуммаСНДС);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если ЕстьНДС Тогда
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");
			ОбластьМакета.Параметры.ВсегоНДС = СтрокаОписанийРабот.СуммаНДС;
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Претензии");
	Претензии = ?(ДанныеЗаказчика.Свойство("Претензии"), ДанныеЗаказчика.Претензии, Неопределено);
	ОбластьМакета.Параметры.Претензии = Претензии;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ВремТабДок = Новый ТабличныйДокумент;
	
	ОбластьМакетаИсполнитель = Макет.ПолучитьОбласть("Подписи|Исполнитель");
	ОбластьМакетаИсполнитель.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	ОбластьМакетаИсполнитель.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;
	ОбластьМакетаИсполнитель.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;
	ОбластьМакетаИсполнитель.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПоставщике.КПП) Тогда
		ОбластьМакетаИсполнитель.Параметры.КППИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КПП;
	КонецЕсли;
	
	ОбластьМакетаИсполнитель.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;
	ОбластьМакетаИсполнитель.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;
	ОбластьМакетаИсполнитель.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;

	
	ПолнаяДатаДокумента = Формат(ДанныеПечати.Шапка.ДатаИсполнения, "ДЛФ=DD");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакетаИсполнитель.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакетаИсполнитель.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаИсполнитель.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	ВремТабДок.Вывести(ОбластьМакетаИсполнитель);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказчик");
	ОбластьМакета.Параметры.Заполнить(ДанныеЗаказчика);
	
	ДатаПолучения = Неопределено;
	Если ДанныеЗаказчика.Свойство("ДатаПолучения", ДатаПолучения) И ЗначениеЗаполнено(ДатаПолучения) Тогда
		ПолнаяДатаПолучения = Формат(ДатаПолучения, "ДЛФ=DD");
		ДлинаСтроки = СтрДлина(ПолнаяДатаПолучения);
		ПервыйРазделитель = Найти(ПолнаяДатаПолучения, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаПолучения, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаПолученияДень = """" + Лев(ПолнаяДатаПолучения, ПервыйРазделитель -1 ) + """";
		ОбластьМакета.Параметры.ДатаПолученияМесяц = Сред(ПолнаяДатаПолучения, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакета.Параметры.ДатаПолученияГод = Прав(ПолнаяДатаПолучения, ДлинаСтроки - ВторойРазделитель);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;
	ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПокупателе.КПП) Тогда
		ОбластьМакета.Параметры.КППЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КПП;
	КонецЕсли;
	
	ОбластьМакета.Параметры.РасчетныйСчетЗаказчика = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;
	ОбластьМакета.Параметры.БанкЗаказчика          = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;
	ОбластьМакета.Параметры.БИКЗаказчика           = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;
	ОбластьМакета.Параметры.ЮрАдресЗаказчика       = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;
	
	ВремТабДок.Присоединить(ОбластьМакета);
	
	ТабличныйДокумент.Вывести(ВремТабДок);
		
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

// Процедура заполняет данные, выводимые на печать
Функция ДанныеАктаЗаказчика(СтрокаОбъекта, ДеревоРазбора)
	
	СвойстваТитула = Новый Структура;
	
	ДатаПолучения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения");
	СвойстваТитула.Вставить("ДатаПолучения", ДатаПолучения);
	
	ПринялДолжность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПринялДолжность");
	СвойстваТитула.Вставить("ПринялДолжность", ПринялДолжность);
	
	ПринялФИО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПринялФИО");
	СвойстваТитула.Вставить("ПринялФИО", ПринялФИО);
	
	Возврат СвойстваТитула;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокумент_АктЗаказчик(ТабличныйДокумент, ДанныеПокупателя)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_АктЗаказчик_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ДанныеПокупателя);
	Если ДанныеПокупателя.Свойство("ДатаДокументаОтправителя") Тогда
		ОбластьМакета.Параметры.ДатаДокументаОтправителя = Формат(ДанныеПокупателя.ДатаДокументаОтправителя, "ДЛФ=DD");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Передача результатов работ

Функция ДанныеДляПечатиПередачаРезультатовРабот(СтрокаОбъекта, ДеревоРазбора)
	
	ДеревоЭД = СтрокаОбъекта.ЗначениеРеквизита;
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ЗначениеРеквизитаДерева(ДеревоЭД, "НомерАкта"));
	ДанныеЗаполненияШапки.Вставить("Дата", ЗначениеРеквизитаДерева(ДеревоЭД, "ДатаАкта"));
	
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", ЗначениеРеквизитаДерева(ДеревоЭД, "Заголовок"));
	ДанныеЗаполненияШапки.Вставить("Претензии", ЗначениеРеквизитаДерева(ДеревоЭД, "Претензии"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсполнения", ЗначениеРеквизитаДерева(ДеревоЭД, "ДатаИсполнения"));
	
	ДанныеЗаполненияШапки.Вставить("СдалДолжность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СдалДолжность"));
	ДанныеЗаполненияШапки.Вставить("СдалФИО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СдалФИО"));

	
	// Данные Исполнителя
	ДанныеИсполнителя = ДанныеУчастникаСделки(ДеревоЭД, "Исполнитель");
	СведенияОбИсполнителе = Новый Структура;
	СведенияОбИсполнителе.Вставить("ПолноеНаименование", ДанныеИсполнителя.ПредставлениеУчастника);
	СведенияОбИсполнителе.Вставить("КПП", ДанныеИсполнителя.КППУчастника);
	СведенияОбИсполнителе.Вставить("ИНН", ДанныеИсполнителя.ИННУчастника);
	СведенияОбИсполнителе.Вставить("ЮридическийАдрес", ДанныеИсполнителя.АдресУчастника);
	
	РасчетныйСчет = Неопределено;
	Если ДанныеИсполнителя.Свойство("БанковскийСчет", РасчетныйСчет) Тогда
		СведенияОбИсполнителе.Вставить("РасчетныйСчет", РасчетныйСчет.НомерСчета);
		СведенияОбИсполнителе.Вставить("БИК", РасчетныйСчет.БИК);
		СведенияОбИсполнителе.Вставить("Банк", РасчетныйСчет.НаименованиеБанка);
	КонецЕсли;
	
	// Данные Заказчика
	ДанныеЗаказчика = ДанныеУчастникаСделки(ДеревоЭД, "Заказчик");
	СведенияОЗаказчике = Новый Структура;
	СведенияОЗаказчике.Вставить("ПолноеНаименование", ДанныеЗаказчика.ПредставлениеУчастника);
	СведенияОЗаказчике.Вставить("КПП", ДанныеЗаказчика.КППУчастника);
	СведенияОЗаказчике.Вставить("ИНН", ДанныеЗаказчика.ИННУчастника);
	СведенияОЗаказчике.Вставить("ЮридическийАдрес", ДанныеЗаказчика.АдресУчастника);
	
	РасчетныйСчет = Неопределено;
	Если ДанныеЗаказчика.Свойство("БанковскийСчет", РасчетныйСчет) Тогда
		СведенияОЗаказчике.Вставить("РасчетныйСчет", РасчетныйСчет.НомерСчета);
		СведенияОЗаказчике.Вставить("БИК", РасчетныйСчет.БИК);
		СведенияОЗаказчике.Вставить("Банк", РасчетныйСчет.НаименованиеБанка);
	КонецЕсли;
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОбИсполнителе);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОЗаказчике);
		
	Иначе
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОбИсполнителе);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОЗаказчике);
		
	КонецЕсли;
	
	ДатаИсправления = ЗначениеРеквизитаДерева(ДеревоЭД, "ДатаИсправления");
	Если ЗначениеЗаполнено(ДатаИсправления) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", Дата(ДатаИсправления));
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", ЗначениеРеквизитаДерева(ДеревоЭД, "НомерИсправления"));
	КонецЕсли;
	
	Работы = Новый ТаблицаЗначений;
	Работы.Колонки.Добавить("НомерСтроки");
	Работы.Колонки.Добавить("НаименованиеРабот");
	Работы.Колонки.Добавить("Описание");
	Работы.Колонки.Добавить("Количество");
	Работы.Колонки.Добавить("ЕдиницаИзмерения");
	Работы.Колонки.Добавить("Цена");
	Работы.Колонки.Добавить("Сумма");
	Работы.Колонки.Добавить("СуммаНДС");
	Работы.Колонки.Добавить("СуммаСНДС");
	Работы.Колонки.Добавить("Подписанные");

	
	СтрокаТаблицаРабот = ДеревоЭД.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого Работа Из СтрокаТаблицаРабот.Строки Цикл
		
		НоваяСтрока = Работы.Добавить();
		
		НоваяСтрока.НомерСтроки = Работа.Значение;
		
		НоваяСтрока.НаименованиеРабот = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
		НоваяСтрока.Описание = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.Описание");
		НоваяСтрока.Количество = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.Количество");
		
		НоваяСтрока.ЕдиницаИзмерения = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование");
		
		НоваяСтрока.Цена = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаНДС = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		НоваяСтрока.СуммаСНДС = ЗначениеРеквизитаДерева(Работа, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
		
		ПутьКДанным = "ТаблицаУслуг.НомерСтроки.ДопДанныеПодписанные";
		Подписанные = ЗначениеГруппыВДереве(Работа, ПутьКДанным);
		Если Не Подписанные = Неопределено Тогда
			ДопДанныеПодписанные = Новый Структура;
			Для Каждого ТекСтрока Из Подписанные Цикл
				Ключ = ИмяПоляДопДанных(ТекСтрока, ПутьКДанным);
				Значение = ТекСтрока.Значение;
				ДопДанныеПодписанные.Вставить(Ключ, Значение);
				
			КонецЦикла;
		НоваяСтрока.Подписанные = ДопДанныеПодписанные;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРабот = Новый ТаблицаЗначений;
	ОписаниеРабот.Колонки.Добавить("НачалоРабот");
	ОписаниеРабот.Колонки.Добавить("КонецРабот");
	ОписаниеРабот.Колонки.Добавить("Сумма");
	ОписаниеРабот.Колонки.Добавить("СуммаНДС");
	ОписаниеРабот.Колонки.Добавить("СуммаСНДС");
	ОписаниеРабот.Колонки.Добавить("Работы");
	
	НоваяСтрока = ОписаниеРабот.Добавить();
	НоваяСтрока.Работы = Работы;
	НоваяСтрока.НачалоРабот = ЗначениеРеквизитаДерева(ДеревоЭД, "ОписаниеУслуги.НачалоРабот");
	НоваяСтрока.КонецРабот = ЗначениеРеквизитаДерева(ДеревоЭД, "ОписаниеУслуги.КонецРабот");
	НоваяСтрока.Сумма = ЗначениеРеквизитаДерева(ДеревоЭД, "ОписаниеУслуги.СуммаБезНДСИтого");
	НоваяСтрока.СуммаНДС = ЗначениеРеквизитаДерева(ДеревоЭД, "ОписаниеУслуги.СуммаНДСИтого");
	НоваяСтрока.СуммаСНДС = ЗначениеРеквизитаДерева(ДеревоЭД, "ОписаниеУслуги.СуммаСНДСИтого");
	
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("ОписанияРабот", ОписаниеРабот);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ОТЧЕТОМ О ПРОДАЖАХ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияОКомитенте.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));
	СведенияОКомитенте.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
	
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКомиссионере.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.КодОКВ"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаДокумента"));
	ДанныеЗаполненияШапки.Вставить("СуммаКомитента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаКомитента"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("СуммаВознаграждения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВознаграждения"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СуммаВознаграждения");
	ТЗ.Колонки.Добавить("СуммаПродажи");
	ТЗ.Колонки.Добавить("ЦенаПродажи");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ДополнительныеРеквизиты");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код             = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул         = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Наименование    = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Наименование");
		
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Количество");
		
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.ЦенаПродажи = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаПродажи");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаПродажи = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПродажи");
		НоваяСтрока.СуммаВознаграждения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"СуммаВознаграждения");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		
		СтруктураДополнительныхРеквизитов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДополнительныеРеквизиты");
		Если ЗначениеЗаполнено(СтруктураДополнительныхРеквизитов) Тогда
			ДополнительныеРеквизиты = ""; 
			Для Каждого Элемент Из СтруктураДополнительныхРеквизитов Цикл
				ДополнительныеРеквизиты = ДополнительныеРеквизиты + Элемент.Ключ + ":";
				ЗначенияРеквизита = "";
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для Каждого ЭлементМассива Из Элемент.Значение Цикл
						// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
						Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
							ЭлементМассива = СобратьАдрес(ЭлементМассива);
						КонецЕсли;
						ЗначенияРеквизита = ЗначенияРеквизита + Строка(ЭлементМассива) + ", ";
					КонецЦикла;
				Иначе
					ЭлементМассива = Элемент.Значение;
					// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
					Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
						ЭлементМассива = СобратьАдрес(ЭлементМассива);
					КонецЕсли;
					ЗначенияРеквизита = ЗначенияРеквизита + Строка(ЭлементМассива) + ", ";
				КонецЕсли;
				ДополнительныеРеквизиты = ДополнительныеРеквизиты + ЗначенияРеквизита;
			КонецЦикла;
			НоваяСтрока.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ отчет о продажах комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ОтчетПоКомиссии_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	КолонкаКодов = ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки.
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, НСтр("ru = 'Отчет о продажах комиссионного товара'"), Макет,
		ТабличныйДокумент);
	
	// Выводим заголовок таблицы.
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами|Данные");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	ЕстьДопДанные = Ложь;
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ЕстьДопДанные = Истина;
		
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаСКодами|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокТаблицы.Параметры.Валюта = ДанныеПечати.Шапка.НаименованиеВалюты;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	Если ЕстьДопДанные Тогда
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
	КонецЕсли;
	
	// Выводим многострочную часть документа.
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами|Данные");

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка|Данные");

	КонецЕсли;
	
	НомерСтроки = 0;
	Товары = ДанныеПечати.Товары;
	Для Каждого СтрокаТовары Из Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
		ОбластьМакета.Параметры.ЦенаКомитента     = СтрокаТовары.Цена;
		ОбластьМакета.Параметры.СуммаКомитента    = СтрокаТовары.Сумма;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных, НомерСтроки, ТабличныйДокумент, ОбластьМакетаДД);
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати.Шапка, Товары, Макет, ТабличныйДокумент);
	
	// Выводим доп данные документа.
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала отчета о продажах комиссионного товара.
//
// Параметры:
//  ДанныеПечати -  Данные шапки документа
//  Товары - Данные табличной части документа
//  Макет - Макет ОтчетПоКомиссии
//  ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	СуммаПродажи = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал|Данные");
	
	Если Не ЗначениеЗаполнено(ДанныеПечати.СуммаКомитента) Тогда
		СуммаКомитентаВсего = Товары.Итог("Сумма");
	Иначе
		СуммаКомитентаВсего = ДанныеПечати.СуммаКомитента;
	КонецЕсли;
	
	ОбластьМакета.Параметры.СуммаКомитентаВсего      = СуммаКомитентаВсего;
	ОбластьМакета.Параметры.СуммаПродажиВсего        = СуммаПродажи;
	ОбластьМакета.Параметры.СуммаВознагражденияВсего = ДанныеПечати.СуммаВознаграждения;
	ОбластьМакета.Параметры.ИтоговаяСтрока           = ДанныеПечати.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ОТЧЕТОМ О СПИСАНИИ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияОКомитенте.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияОКомитенте.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
	
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКомиссионере.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогоПоДокументу"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код                          = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул                      = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Наименование                 = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Наименование");
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество                   = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена                         = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма                        = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ отчет о списании комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ОтчетПоКомиссииОСписании_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Заголовок = НСтр("ru = 'Отчет о списании комиссионного товара'");
	
	КолонкаКодов = ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, Заголовок, Макет, ТабличныйДокумент);
	
	// Выводим заголовок таблицы
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами|Данные");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	КонецЕсли;
	
	ЗаголовокТаблицы.Параметры.Валюта = ДанныеПечати.Шапка.НаименованиеВалюты;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаСКодами|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		
	КонецЕсли;
	
	// Выводим многострочную часть документа
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами|Данные");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка|Данные");
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаТовары Из ДанныеПечати.Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных, НомерСтроки, ТабличныйДокумент, ОбластьМакетаДД);
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати.Шапка, ДанныеПечати.Товары, Макет, ТабличныйДокумент);
	
	// Выводим доп данные документа.
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки отчета по комиссии
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет отчета
//  ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати, Заголовок, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОКомитенте = ДанныеПечати.СведенияОПоставщике;
	СведенияОКомиссионере = ДанныеПечати.СведенияОПокупателе;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка|Данные");
	ТекстЗаголовка = НСтр("ru='%1 № %2 от %3'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Заголовок,
		ДанныеПечати.Номер, Формат(ДанныеПечати.Дата, "ДЛФ=DD"));

	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ОбластьМакета.Параметры.ПредставлениеКомитента = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		СведенияОКомитенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ОбластьМакета.Параметры.ПредставлениеКомиссионера = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		СведенияОКомиссионере, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала отчета по комиссии о списании.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ВыборкаПоДокументам - ВыборкаИзРезультатаЗапроса - Данные табличной части документа
//  Макет - Макет ОтчетКомитенту
//  ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал|Данные");
	СуммаВсего = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета.Параметры.СуммаВсего = СуммаВсего;
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с РЕКВИЗИТАМИ ОРГАНИЗАЦИИ

Функция ПолучитьРеквизитыОрганизацииДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	РеквизитыОрганизации = Новый Структура;
	
	ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИНН");
	РеквизитыОрганизации.Вставить("ИНН", ИНН);

	КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КПП");
	РеквизитыОрганизации.Вставить("КПП", КПП);
	
	ОфициальноеНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование");
	РеквизитыОрганизации.Вставить("ОфициальноеНаименование", ОфициальноеНаименование);
	
	ОКПО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОКПО");
	РеквизитыОрганизации.Вставить("ОКПО", ОКПО);
	
	ЮрФизЛицо = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮрФизЛицо");
		
	ЮридическийАдрес = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление");
	РеквизитыОрганизации.Вставить("ЮридическийАдрес", ЮридическийАдрес);
	
	ФактическийАдрес = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ФактическийАдрес_Представление");
	РеквизитыОрганизации.Вставить("ФактическийАдрес", ФактическийАдрес);
	
	Руководитель = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Руководитель");
	
	Если ТипЗнч(Руководитель) = Тип("Структура") Тогда
		
		Должность = Неопределено;
		Если Руководитель.Свойство("Должность", Должность) Тогда
			РеквизитыОрганизации.Вставить("Должность", Должность);
		КонецЕсли;
		
		Фамилия = Неопределено;
		Руководитель.Свойство("Фамилия", Фамилия);
		
		Имя = Неопределено;
		Руководитель.Свойство("Имя", Имя);
		
		Отчество = Неопределено;
		Руководитель.Свойство("Отчество", Отчество);
		
		РуководительФИО = ?(Фамилия = Неопределено, "", Фамилия)
		+ " " + ?(Имя = Неопределено,"", Имя)
		+ " " + ?(Отчество = Неопределено, "", Отчество);
		
		РеквизитыОрганизации.Вставить("ФИО", РуководительФИО);
	КонецЕсли;
	
	ТаблицаКонтакты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Контакты");
	Если ТипЗнч(ТаблицаКонтакты) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекСтрока Из ТаблицаКонтакты Цикл
			Если ВРег(ТекСтрока.Вид) = ВРег("Телефон") Тогда
				РеквизитыОрганизации.Вставить("Телефон", ТекСтрока.Представление);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("НомерСчета");
	ТЗ.Колонки.Добавить("Банк");
	ТЗ.Колонки.Добавить("Бик");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧРасчетныйСчет"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.НомерСчета				= ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерСчета");
		НоваяСтрока.Банк					= ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БанкНаименование");
		НоваяСтрока.Бик						= ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БанкБИК");
		
	КонецЦикла;
	
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
	ДанныеЗаполнения.Вставить("РасчетныеСчета", ТЗ);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументРеквизитыОрганизации_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_РеквизитыКонтрагента_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Заголовок = НСтр("ru = 'Реквизиты организации'");
	
	РеквизитыОрганизации = ДанныеЭДДляПечати.РеквизитыОрганизации;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Реквизиты");
	ОбластьМакета.Параметры.Заполнить(РеквизитыОрганизации);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если РеквизитыОрганизации.Свойство("Должность") Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Руководитель");
		ОбластьМакета.Параметры.Заполнить(РеквизитыОрганизации);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если Не ДанныеЭДДляПечати.Свойство("РасчетныеСчета") Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("РасчетныйСчет");
	РасчетныеСчета = ДанныеЭДДляПечати.РасчетныеСчета;
	Для Каждого Счет Из РасчетныеСчета Цикл
		
		ОбластьМакета.Параметры.Заполнить(Счет);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с печатными формами

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//  Структура - Структура хранения итоговых сумм.
//
Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоСуммаНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	
	Возврат Структура;
	
КонецФункции

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//  КоэффициентПересчета - Число - коэффициент пересчета в валюту регл. учета.
//
// Возвращаемое значение:
//  Структура - Структура данных строки товаров.
//
Функция СтруктураДанныеСтроки(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("КоличествоДоКорректировки", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("ЦенаДоКорректировки", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("СуммаДоКорректировки", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("СуммаНДСДоКорректировки", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДСДоКорректировки", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНеттоДоКорректировки", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице    = 0;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
	
КонецПроцедуры

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  ДанныеСтроки - Структура - Структура данных строки товаров.
//
Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице    = ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоСуммаНДС    = ИтоговыеСуммы.ИтогоСуммаНДС + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто + ДанныеСтроки.МассаНетто;
	
	ИтоговыеСуммы.ИтогоСуммаДоКорректировки     = ИтоговыеСуммы.ИтогоСуммаДоКорректировки + ДанныеСтроки.СуммаДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки  = ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки + ДанныеСтроки.СуммаНДСДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки + ДанныеСтроки.СуммаСНДСДоКорректировки;
	
КонецПроцедуры

// Функция форматирования сумм.
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать. 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты.
//  ЧН     - строка, представляющая нулевое значение числа.
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" + ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
		+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Функция приводит к требуемому формату сумму НДС, если она имеет числовое представление.
//
// Параметры:
// СуммаНДС - строка, сумма НДС (без НДС, -, число).
//
// Возвращаемое значение:
// ВозвращаемаяСумма - если входящий параметр - представление числа, то возвращаемое значение - число.
//
Функция СуммаНДССФПривестиКТребуемомуФормату(СуммаНДС)
	
	Если Найти(СуммаНДС, ".") > 0 ИЛИ Найти(СуммаНДС, ",") > 0 ИЛИ Найти(СуммаНДС, "-") > 0 Тогда
		ВозвращаемаяСумма = Число(СуммаНДС);
	Иначе
		ВозвращаемаяСумма = СуммаНДС;
	КонецЕсли;
	
	Возврат ВозвращаемаяСумма;
	
КонецФункции

// Проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета)
	
	Для ИндексПараметра = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(ИндексПараметра);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(ИндексПараметра, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка к просмотру служебного ЭД

Функция ПолучитьДанныеУчастникаОбменаЭД(УчастникОбмена)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если УчастникОбмена.Свойства().Получить("ОтпрЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ОтпрЮЛ.НаимОрг + ", " + УчастникОбмена.ОтпрЮЛ.ИННЮЛ + "/"
			+ УчастникОбмена.ОтпрЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ПолЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ПолЮЛ.НаимОрг + ", " + УчастникОбмена.ПолЮЛ.ИННЮЛ + "/"
			+ УчастникОбмена.ПолЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ОтпрИП") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = СокрЛП(УчастникОбмена.ОтпрИП.ФИО.Фамилия + " " + УчастникОбмена.ОтпрИП.ФИО.Имя + " "
			+ УчастникОбмена.ОтпрИП.ФИО.Отчество) + ", " + УчастникОбмена.ОтпрИП.ИННФЛ;
		ИначеЕсли УчастникОбмена.Свойства().Получить("ЮЛ") <> Неопределено И УчастникОбмена.ЮЛ <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ЮЛ.НаимОрг + ", " + УчастникОбмена.ЮЛ.ИННЮЛ + "/" + УчастникОбмена.ЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ИП") <> Неопределено И УчастникОбмена.ИП <> Неопределено Тогда
		
		ВозвращаемоеЗначение = СокрЛП(УчастникОбмена.ИП.ФИО.Фамилия + " " + УчастникОбмена.ИП.ФИО.Имя + " "
			+ УчастникОбмена.ИП.ФИО.Отчество) + ", " + УчастникОбмена.ИП.ИННФЛ;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ОперЭДО") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ОперЭДО.НаимОрг + ", " + УчастникОбмена.ОперЭДО.ИННЮЛ;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с подтверждением

// ПДПЭСФ, ПДОИПЭСФ
Процедура ПрочитатьПодтверждениеДатыПолученияXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.ОтпрДок.ИдУчастЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.ПолДок.ИдУчастЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);
	Если ЭД.Документ.КНД = "1115112" Тогда
		ПараметрЗаголовка = "получения";
		ОтправленПолучен = "получен";
	Иначе
		ПараметрЗаголовка = "отправки";
		ОтправленПолучен = "отправлен";
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",   ЭД.ИдФайл);
	
КонецПроцедуры

// ПДОЭСФ
Процедура ПрочитатьПодтверждениеДатыОтправкиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпрДок));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.СвОтпрДок.ИдУчастЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвПолДок));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.СвПолДок.ИдУчастЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",        "отправки");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",        "отправлен");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",   ЭД.ИдФайл);
	
КонецПроцедуры

// ПДО
Процедура ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",      ЭД.Документ.СведПодтв.ИмяПостФайла);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпр));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",  ЭД.Документ.СведПодтв.ДатаДок);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки", ЭД.Документ.СведПодтв.ВремяДок);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",      ЭД.Документ.КНД);
	Если ЭД.Документ.КНД = "1167002" Тогда
		ПараметрЗаголовка = "получения";
		ОтправленПолучен = "получен";
	Иначе
		ПараметрЗаголовка = "отправки";
		ОтправленПолучен = "отправлен";
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
КонецПроцедуры

// Процедура заполняет табличный документ Подтверждение (ПДО, ПДП, ПДОИП).
//
Процедура ЗаполнитьТабличныйДокументПодтверждение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Подтверждение";
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_Подтверждение_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеПодтвержденияДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("ОператорЭДО", НСтр("ru = 'Оператор электронного документооборота'") + " "
		+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОператорЭДО"));
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	
	ДанныеЗаполненияШапки.Вставить("Получатель",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаОтправки", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОтправки"));
	ДанныеЗаполненияШапки.Вставить("ВремяОтправки",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ВремяОтправки"));
	
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	ДанныеЗаполненияШапки.Вставить("ПараметрЗаголовка", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПараметрЗаголовка"));
	ДанныеЗаполненияШапки.Вставить("КНДФормы", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"КНДФормы"));
	ДанныеЗаполненияШапки.Вставить("Отправлен_Получен", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Отправлен_Получен"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр извещений

// Процедура заполняет табличный документ Извещение.
//
Процедура ЗаполнитьТабличныйДокументИзвещение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Извещение";
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_Извещение_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Извещение о получении электронного документа'");
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                ЭД.Документ.СвИзвПолуч.СведПолФайл.ИмяПостФайла);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",             ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	
	ИдентификаторОтправителя = ЭД.Документ.ОтпрДок.ИдУчастЭДО;
	Если ЭД.Документ.ОтпрДок.Свойства().Получить("ОперЭДО") <> Неопределено И ЭД.Документ.ОтпрДок.ОперЭДО <> Неопределено Тогда
		
		ИдентификаторОтправителя = ЭД.Документ.ОтпрДок.ОперЭДО.ИдОперЭДО;
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ИдентификаторОтправителя);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя", ЭД.Документ.УчастЭДО.ИдУчастЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",           ЭД.Документ.СвИзвПолуч.ДатаПол);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",          ЭД.Документ.СвИзвПолуч.ВремяПол);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",       "");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",  ЭД.ИдФайл);
КонецПроцедуры

Функция ПолучитьДанныеИзвещенияДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Отправитель", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	
	ДанныеЗаполненияШапки.Вставить("Получатель",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование извещений

Процедура СформироватьДанныеПоУчастникуЭДО(УчастникЭДО, Дерево, ВидЭД, ВидУчастникаЭДО, ТекстОшибки, ПространствоИмен, ВерсияФормата)
	
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО);
	Если Реквизит <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ИдУчастникаЭДО");
	ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО", Реквизит, Истина, ТекстОшибки);
	
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника");
	// Заполнение реквизитов
	Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		Если Реквизит = "ОператорЭДО" Тогда
			ОператорЭДО = ПолучитьОбъектТипаCML("Файл.Документ.ОтпрДок.ОперЭДО", ПространствоИмен);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(ОператорЭДО, "НаимОрг", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.ИНН");
			ЗаполнитьСвойствоXDTO(ОператорЭДО, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.ИдентификаторОператора");
			ЗаполнитьСвойствоXDTO(ОператорЭДО, "ИдОперЭДО", Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ОперЭДО", ОператорЭДО, Истина, ТекстОшибки);
		ИначеЕсли Реквизит = "ИП" Тогда
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФЛТип"), ВерсияФормата);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.ИНН");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", Реквизит, Истина, ТекстОшибки);
			
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Фамилия");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Имя");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Отчество");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", Реквизит, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, ТекстОшибки);
		Иначе
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ЮЛТип"), ВерсияФормата);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		Если Реквизит = "ИП" Тогда
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО.ИП", ПространствоИмен);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.ИНН");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", Реквизит, Истина, ТекстОшибки);
			
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Фамилия");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Имя");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Отчество");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", Реквизит, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, ТекстОшибки);
		Иначе
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО.ЮЛ", ПространствоИмен);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		Если Реквизит = "ИП" Тогда
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФЛТип"), ВерсияФормата);
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.ИНН");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Фамилия");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Имя");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Отчество");
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", Реквизит, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, ТекстОшибки);
		Иначе
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ЮЛТип"), ВерсияФормата);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭППолученногоФайла(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивЭП = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭП.Добавить(Base64Строка(Выборка.Подпись.Получить()));
	КонецЦикла;
	
	Возврат МассивЭП;
	
КонецФункции

Функция ЗаполнитьФайлСлужебногоДокумента(Дерево, ВидЭД)
	
	ТекстОшибки = "";
	Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ПространствоИмен      = "DP_IZVPOL";
		ЭлементОбщиеСведения  = "СвИзвПолуч";
		ЭлементСведенияОФайле = "СведПолФайл";
		АтрибутИмяФайла       = "ИмяПостФайла";
		СписокЭЦПФайла        = "ЭЦППолФайл";
		ЭлементПолучатель     = "ОтпрДок";
		НомерДокументаФайла   = "НомДок";
		ДатаДокументаФайла    = "ДатаДок";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ПространствоИмен      = "DP_UVUTOCH";
		ЭлементОбщиеСведения  = "СвУведУточ";
		ЭлементСведенияОФайле = "СведПолФайл";
		АтрибутИмяФайла       = "ИмяПостФайла";
		СписокЭЦПФайла        = "ЭЦППолФайл";
		ЭлементТекстУточнения = "ТекстУведУточ";
		ЭлементПолучатель     = "ОтпрДок";
		НомерДокументаФайла   = "НомСФ";
		ДатаДокументаФайла    = "ДатаСФ";
	Иначе
		ПространствоИмен      = "DP_PRANNUL";
		ЭлементОбщиеСведения  = "СвПредАн";
		ЭлементСведенияОФайле = "СведАнФайл";
		АтрибутИмяФайла       = "ИмяАнФайла";
		СписокЭЦПФайла        = "ЭЦПАнФайл";
		ЭлементТекстУточнения = "ТекстПредАн";
		ЭлементПолучатель     = "НапрПредАн";
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево,"ИдФайла"));
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
		
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ВерсияПрограммы"), Истина, ТекстОшибки);
		ВерсияФормата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ВерсияФормата");
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ВерсияФормата, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
		Если ВидЭД <> Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево,"КодКНД"), Истина, ТекстОшибки);
		КонецЕсли;
		
		// Отправитель
		Отправитель = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО", ПространствоИмен);
		СформироватьДанныеПоУчастникуЭДО(Отправитель, Дерево, ВидЭД, "Отправитель", ТекстОшибки, ПространствоИмен, ВерсияФормата);
		ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", Отправитель, Истина, ТекстОшибки);
		
		// Общие сведения о документе
		ОбщиеСведения = ПолучитьОбъектТипаCML("Файл.Документ." + ЭлементОбщиеСведения, ПространствоИмен);
		Если ВидЭД <> Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ДатаПолучения"));
			ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ДатаПол", Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ВремяПол",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ВремяПолучения"), Истина, ТекстОшибки);
		КонецЕсли;
		
		// Данные о полученном файле
		ПолученныйЭД = ПолучитьОбъектТипаCML("Файл.Документ." + ЭлементОбщиеСведения + "." + ЭлементСведенияОФайле,
			ПространствоИмен);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ИмяПолученногоФайла");
		ЗаполнитьСвойствоXDTO(ПолученныйЭД, АтрибутИмяФайла, Реквизит, Истина, ТекстОшибки);
		
		// ЭЦП полученного файла в кодировке Base64
		МассивЭП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ПолученныеЭП");
		Если ТипЗнч(МассивЭП) = Тип("Массив") И ЗначениеЗаполнено(МассивЭП) Тогда
			
			Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				ЗаполнитьСвойствоXDTO(ПолученныйЭД, СписокЭЦПФайла, МассивЭП[0], Истина, ТекстОшибки);
			Иначе
				Для Каждого ЭП Из МассивЭП Цикл
					ПолученныйЭД[СписокЭЦПФайла].Добавить(ЭП);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ТекстУточнения");
			ЗаполнитьСвойствоXDTO(ОбщиеСведения, ЭлементТекстУточнения, Реквизит, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ВидЭД <> Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента");
			Если Реквизит = Истина Тогда
				ПутьКДаннымФайла = ЭлементОбщиеСведения;
				Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					ПутьКДаннымФайла = ЭлементОбщиеСведения + ".СведПолФайл";
				КонецЕсли;
				
				ДанныеДок = ПолучитьОбъектТипаCML("Файл.Документ." + ПутьКДаннымФайла + ".ДанПолучДок", ПространствоИмен);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НаимДокумента");
				ЗаполнитьСвойствоXDTO(ДанныеДок, "НаимДок", Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомерДокумента");
				ЗаполнитьСвойствоXDTO(ДанныеДок, НомерДокументаФайла, Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаДокумента");
				Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
				ЗаполнитьСвойствоXDTO(ДанныеДок, ДатаДокументаФайла, Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
					ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомКСФ");
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ЗаполнитьСвойствоXDTO(ДанныеДок, "НомКСФ", Реквизит, , ТекстОшибки);
					КонецЕсли;
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаКСФ");
					Если ЗначениеЗаполнено(Реквизит) Тогда
						Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
						ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаКСФ", Реквизит, , ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрКСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрКСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрКСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
					ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрКСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				
				Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ДанПолучДок", ДанныеДок, , ТекстОшибки);
				Иначе
					ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ДанПолучДок", ДанныеДок, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ОбщиеСведения, ЭлементСведенияОФайле, ПолученныйЭД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, ЭлементОбщиеСведения, ОбщиеСведения, Истина, ТекстОшибки);
		
		// Получатель
		Получатель = ПолучитьОбъектТипаCML("Файл.Документ." + ЭлементПолучатель, ПространствоИмен);
		СформироватьДанныеПоУчастникуЭДО(Получатель, Дерево, ВидЭД, "Получатель", ТекстОшибки, ПространствоИмен, ВерсияФормата);
		ЗаполнитьСвойствоXDTO(Документ, ЭлементПолучатель, Получатель, Истина, ТекстОшибки);
		
		// Подписант
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", "---", Истина, ТекстОшибки);
		
		ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", "---", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", "---", Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВставитьЗначениеВДерево(Дерево, "ПолноеИмяФайла", ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml"));
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ПолноеИмяФайла"), ПространствоИмен);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование служебного ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция ПодготовитьДанныеПоСлужебномуДокументу(СсылкаНаОбъект, СтруктураЭД, Дерево)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ИдФайла", СтруктураЭД.ИдФайла);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ВерсияПрограммы", НСтр("ru = '1С:Предприятие 8'"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "Отправитель.ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "Получатель.ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ВерсияФормата", "1.01");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "КодКНД", "");
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ВерсияФормата", "1.02");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "КодКНД",
			?(СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении, "1115110", "1115113"));
	КонецЕсли;
	
	Попытка
		// Получатель
		Если СтруктураЭД.Свойство("ОператорЭДО") Тогда
			Путь = "Получатель.ТипУчастника.ОператорЭДО";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", СтруктураЭД.ОператорЭДО.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево,
				Путь + ".НаименованиеОрганизации", СтруктураЭД.ОператорЭДО.Наименование);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево,
				Путь + ".ИдентификаторОператора", СтруктураЭД.ОператорЭДО.ИдентификаторОператора);
		Иначе
			
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.ВладелецФайла,"Контрагент");
				
			ЭтоФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Контрагент);
			ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент);
			ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
			ПолноеНаименование = "";
			Если НЕ ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование)
				ИЛИ ПустаяСтрока(ПолноеНаименование) Тогда
				ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
			КонецЕсли;
			
			Если ЭтоФизЛицо Тогда
				Путь = "Получатель.ТипУчастника.ИП";
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Фамилия", ДанныеЮрФизЛица.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Отчество", ДанныеЮрФизЛица.Отчество);
			Иначе
				Путь = "Получатель.ТипУчастника.ЮЛ";
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".НаименованиеОрганизации", ПолноеНаименование);
			КонецЕсли;
		КонецЕсли;
		
		// Отправитель
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.ВладелецФайла,"Организация");

		ЭтоФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Организация);
		ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация);
		ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
		ПолноеНаименование = "";
		Если НЕ ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование)
			ИЛИ ПустаяСтрока(ПолноеНаименование) Тогда
			ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
		КонецЕсли;
		
		Если ЭтоФизЛицо Тогда
			Путь = "Отправитель.ТипУчастника.ИП";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Фамилия", ДанныеЮрФизЛица.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Отчество", ДанныеЮрФизЛица.Отчество);
		Иначе
			Путь = "Отправитель.ТипУчастника.ЮЛ";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".НаименованиеОрганизации", ПолноеНаименование);
		КонецЕсли;
		
		// Документ
		Если НЕ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			Реквизит = ВернутьДатуЭСФ(СтруктураЭД.ДатаВремяПолучения);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ДатаПолучения", Реквизит);
			Реквизит = ВернутьВремяЭСФ(СтруктураЭД.ДатаВремяПолучения);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ВремяПолучения", Реквизит);
		КонецЕсли;
		Путь = "ДанныеДокумента.СведПолФайл.";
		Реквизит = СтруктураЭД.ИмяПолученногоФайлаБезРасширения;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + "ИмяПолученногоФайла", Реквизит);
		
		Если СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") И ЗначениеЗаполнено(СтруктураЭД.НаименованиеДокументаОтправителя) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево,
				Путь + "ДанныеПолученногоДокумента.НаимДокумента", СтруктураЭД.НаименованиеДокументаОтправителя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево,
				Путь + "ДанныеПолученногоДокумента.НомерДокумента", СтруктураЭД.НомерДокументаОтправителя);
			Реквизит = ВернутьДатуЭСФ(СтруктураЭД.ДатаДокументаОтправителя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + "ДанныеПолученногоДокумента.ДатаДокумента", Реквизит);
		КонецЕсли;
		
		Реквизит = ЭППолученногоФайла(СсылкаНаОбъект);
		Если Не ЗначениеЗаполнено(Реквизит) Тогда
			Реквизит.Добавить("---");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + "ПолученныеЭП", Реквизит);
		
		Если НЕ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ТекстУточнения", СтруктураЭД.ТекстУточнения);
		КонецЕсли;
		
		ДеревоЗаполнено = Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ДеревоЗаполнено = Ложь;
	КонецПопытки;
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(Дерево, ТекстОшибки);
	Если ДеревоЗаполнено И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 на основании документа %2 возникли следующие ошибки:
			|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ВидЭД, СсылкаНаОбъект, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, , СсылкаНаОбъект);
		ДеревоЗаполнено = Ложь;
	КонецЕсли;
	
	Возврат ДеревоЗаполнено;
	
КонецФункции

Функция ОпределитьИдФайлаЭД(СтруктураЭД)
	
	ТекстИд = "";
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		
		// Формат имени по ЭСФ: DP_IZVPOL_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru = 'DP_IZVPOL_%1_%2_%3_%4'");
		Если СтруктураЭД.Свойство("ОператорЭДО") И СтруктураЭД.ОператорЭДО.Свойство("ИдентификаторОператора") Тогда
			ИдПолучателя = СтруктураЭД.ОператорЭДО.ИдентификаторОператора;
		Иначе
			ИдПолучателя = СтруктураЭД.ИдПолучателя;
		КонецЕсли;
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, ИдПолучателя, СтруктураЭД.ИдОтправителя,
			ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		// Формат имени по ЭСФ: DP_UVUTOCH_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru = 'DP_UVUTOCH_%1_%2_%3_%4'");
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, СтруктураЭД.ИдПолучателя,
			СтруктураЭД.ИдОтправителя, ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	ИначеЕсли СтруктураЭД.ВидЭД= Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		
		// Формат имени по ЭСФ: DP_PRANNUL_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru = 'DP_PRANNUL_%1_%2_%3_%4'");
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, СтруктураЭД.ИдПолучателя,
			СтруктураЭД.ИдОтправителя, ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	КонецЕсли;
	
	ИдФайлаЭД = ОбменСКонтрагентамиСлужебный.КорректноеИмяФайла(ТекстИд);
	
	Возврат ИдФайлаЭД;
	
КонецФункции

Функция ВернутьДатуСтрокойДляИД(ДатаВремя)
	
	Возврат Формат(ДатаВремя, "ДФ=yyyyMMdd");
	
КонецФункции

Функция ВернутьДатуЭСФ(ДатаВремя)
	
	ДатаЭСФ = Формат(ДатаВремя, "ДЛФ=D");
	Возврат ДатаЭСФ;
	
КонецФункции

Функция ВернутьВремяЭСФ(ДатаВремя)
	
	ВремяЭСФ = Формат(Час(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=");
	
	Возврат ВремяЭСФ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр уведомлений об уточнении

// Процедура заполняет табличный документ Уведомление об уточнении.
//
Процедура ЗаполнитьТабличныйДокументУточнение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Уточнение";
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_Уточнение_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Уведомление об уточнении'");
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ПрочитатьУточнениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",          ЭД.Документ.СвУведУточ.СведПолФайл.ИмяПостФайла);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",       ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",        ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));
	Если ЭД.Документ.СвУведУточ.Свойства().Получить("ДатаВремяПол") <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",      ПолучитьДатуВремяИзСтроки(ЭД.Документ.СвУведУточ.ДатаВремяПол));
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",      ЭД.Документ.СвУведУточ.ДатаПол);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",     ЭД.Документ.СвУведУточ.ВремяПол);
	КонецЕсли;
	ТекстУточнения = "";
	СвойстваСвУведУточ = ЭД.Документ.СвУведУточ.Свойства();
	Если СвойстваСвУведУточ.Получить("ТекстУведУточ") <> Неопределено И ЭД.Документ.СвУведУточ.ТекстУведУточ <> Неопределено
		И ТипЗнч(ЭД.Документ.СвУведУточ.ТекстУведУточ) = Тип("Строка") Тогда
		
		ТекстУточнения = ЭД.Документ.СвУведУточ.ТекстУведУточ;
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстУточнения",         ТекстУточнения);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",      "");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
КонецПроцедуры

Функция ПолучитьДанныеУточненияДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	ДанныеЗаполненияШапки.Вставить("Получатель",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	ДанныеЗаполненияШапки.Вставить("ТекстУточнения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ТекстУточнения"));
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ЭДУточнение = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИД);
	
	Если ЭДУточнение.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
	Иначе
		ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
	КонецЕсли;
	
	СтруктураПараметровПоиска = Новый Структура;
	СтруктураПараметровПоиска.Вставить("УникальныйИД",        ЭДУточнение.УникальныйИД);
	СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Входящий);
	СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
	ЭДПодтверждениеДаты = ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
	
	Если ЭДПодтверждениеДаты <> Неопределено Тогда
		ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭДПодтверждениеДаты, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла <> Неопределено Тогда
				
				ДанныеЭД.Записать(ИмяФайла);
				
				СтруктураПодтверждения = СформироватьДеревоРазбора(ИмяФайла, ЭДПодтверждениеДаты.НаправлениеЭД);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
				Если СтруктураПодтверждения <> Неопределено И СтруктураПодтверждения.Количество() > 0 Тогда
					ДанныеЗаполненияШапки.Вставить("ДатаОтправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ДатаОтправки"));
					ДанныеЗаполненияШапки.Вставить("ВремяОтправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ВремяОтправки"));
					ДанныеЗаполненияШапки.Вставить("ОператорЭДО", НСтр("ru = 'оператора электронного документооборота'") + " "
						+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(СтруктураПодтверждения.ДеревоРазбора,
						СтруктураПодтверждения.СтрокаОбъекта, "ОператорЭДО"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оператор ЭДО

Процедура ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров)
	
	СтруктураРеквизитов = СтруктураНастроекТакском();
	Наименование = "";
	ИНН = "";
	ИдентификаторОператора = "";
	СтруктураРеквизитов.Свойство("Наименование", Наименование);
	СтруктураРеквизитов.Свойство("ИНН", ИНН);
	СтруктураРеквизитов.Свойство("ИдентификаторОператора", ИдентификаторОператора);
	СтруктураПараметров.Вставить("НаимОрг", Наименование);
	СтруктураПараметров.Вставить("ИННЮЛ", ИНН);
	СтруктураПараметров.Вставить("ИдЭДО", ИдентификаторОператора);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПустогоОператораЭДО(СтруктураПараметров, ДанныеПоОрганизации)
	
	Наименование = НСтр("ru = 'Без оператора ЭДО'");
	ИНН = "1111111117"; // первый ИНН, отвечающий требованиям формата
	
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеПоОрганизации);
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование) Тогда
		Наименование = ДанныеЮрФизЛица.ПолноеНаименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ИНН) Тогда
		ИНН = ДанныеЮрФизЛица.ИНН;
	КонецЕсли;
	СтруктураПараметров.Вставить("НаимОрг", Наименование);
	СтруктураПараметров.Вставить("ИННЮЛ", Лев(ИНН, 10));
	СтруктураПараметров.Вставить("ИдЭДО", "---");
	
КонецПроцедуры

// Для того, чтобы передать дополнительные данные в печатную форму, надо:
// 1. в функции подготовки данных (в переопределяемом модуле) создать структуру, где ключ - имя передаваемого
//  дополнительного параметра, а значение - соответственно, значение доп.параметра и передать в интерфейсную функцию
//  "ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных" (описание параметров в комментарии к ней).
// 2. в функции подготовки данных к печати "ПолучитьДанные...ДляПечати", прописать чтение передаваемых
//  доп.данных по имени (с которым доп параметр помещался в структуру на шаге 1) и присвоение требуемому реквизиту макета.
//
Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

// Структура параметров ЭСФ

Функция КорЭСФТаблицаСведенийОТоваре()
	
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки"); // Номер строки таблицы
		ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры"); // Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДо"); // (optional) Код единицы измерения, до изменения (Графа 2, строка А)
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод"); // (optional) Код единицы измерения, после изменения (Графа 2, строка Б)
		ТаблицаТоваров.Колонки.Добавить("КоличествоДо"); //(optional) Количество (объем), до изменения (Графа 3, строка А)
		ТаблицаТоваров.Колонки.Добавить("Количество"); // (optional) Количество (объем), после изменения (Графа 3, строка Б)
		ТаблицаТоваров.Колонки.Добавить("ЦенаДо"); // (optional) Цена (тариф) за единицу измерения, до изменения (Графа 4, строка А)
		ТаблицаТоваров.Колонки.Добавить("Цена"); // (optional) Цена (тариф) за единицу измерения, после изменения (Графа 4, строка Б)
		
		// (optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5).
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДо"); //  Стоимость до изменения (Строка А)
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС"); // Стоимость после изменения (Строка Б)
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСУменьшение"); //(optional) Стоимость -  увеличение (Строка В)
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСУвеличение"); //(optional) Стоимость - уменьшение (Строка Г)
		
		// В том числе сумма акциза, до изменения (Графа 6, строка А).
		ТаблицаТоваров.Колонки.Добавить("АкцизаДо");
		ТаблицаТоваров.Колонки.Добавить("Акциза");
		
		// Налоговая ставка, до изменения (Графа 7, строка А).
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДо"); // Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТипДо"); // Тип налоговой ставки (процент, дробь, текст)
		
		// Налоговая ставка, после  изменения (Графа 7, строка Б).
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС"); // Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип"); // Тип налоговой ставки (процент, дробь, текст)
		
		
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСДо"); // Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС"); // Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
		
		// Сумма налога, увеличение (уменьшение) (Графа 8, строки В, Г).
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСУменьшение");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСУвеличение");
		
		// Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9).
		ТаблицаТоваров.Колонки.Добавить("СуммаДо");
		ТаблицаТоваров.Колонки.Добавить("Сумма");
		ТаблицаТоваров.Колонки.Добавить("СуммаУменьшение");
		ТаблицаТоваров.Колонки.Добавить("СуммаУвеличение");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ЭСФТаблицаСведенийОТоваре()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	// Сведения о товаре (работе, услуге)
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки"); // Номер строки таблицы
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры"); // Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод"); // (optional) Код единицы измерения (Графа 2)
	ТаблицаТоваров.Колонки.Добавить("Количество"); // (optional) Количество (объем) (Графа 3)
	ТаблицаТоваров.Колонки.Добавить("Цена"); // (optional) Цена (тариф) за единицу измерения (Графа 4)
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС"); // (optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
	ТаблицаТоваров.Колонки.Добавить("Сумма"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
	ТаблицаТоваров.Колонки.Добавить("Акциза"); // В том числе сумма акциза (Графа 6)
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС"); // Налоговая ставка - величина
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип"); // Тип налоговой ставки
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС"); // Сумма НДС, предъявляемая покупателю (Графа 8)
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения"); // (optional) Цифровой код страны происхождения товара (Графа 10)
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации"); // (optional) Номер таможенной декларации (Графа11)
	
	Возврат ТаблицаТоваров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

Процедура СформироватьТЗПоНаборуДанныхXDTO(ТЗ, НаборДанных, СсылкаНаЭД, ДопПараметры = Неопределено) 
	
	ДеревоДопДанных = Неопределено;
	ЕстьСвойствоИдФайл = Ложь;
	ИмяТЧ = Неопределено;
	НомерСтроки = Неопределено;
	ИменаДопКолонок = "";
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда 
		
		ДопПараметры.Свойство("ДеревоДопДанных",	ДеревоДопДанных);
		ДопПараметры.Свойство("ИмяТЧ",				ИмяТЧ);
		ДопПараметры.Свойство("НомерСтроки",		НомерСтроки);
		
		Если ДопПараметры.Свойство("ЕстьСвойствоИдФайл") Тогда 
			ЕстьСвойствоИдФайл = ДопПараметры.ЕстьСвойствоИдФайл;
		КонецЕсли;
		Если ДопПараметры.Свойство("ИменаДопКолонок") Тогда 
			ИменаДопКолонок = ДопПараметры.ИменаДопКолонок;
		КонецЕсли;
		
	КонецЕсли;
	
	КС80 = Новый КвалификаторыСтроки(110);
	КС255 = Новый КвалификаторыСтроки(255);
	КС3000 = Новый КвалификаторыСтроки(3000);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ОписаниеТиповС80 = Новый ОписаниеТипов(МассивСтрока, , КС80);
	ОписаниеТиповС255 = Новый ОписаниеТипов(МассивСтрока, , КС255);
	ОписаниеТиповС3000 = Новый ОписаниеТипов(МассивСтрока, , КС3000);
	МассивТипЭД = Новый Массив;
	МассивТипЭД.Добавить(Тип("СправочникСсылка.ЭДПрисоединенныеФайлы"));
	МассивТипЭД.Добавить(Тип("Структура"));
	ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИД", ОписаниеТиповС80);
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("НаименованиеХарактеристики", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("КодТовара", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Артикул", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКод", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Описание", ОписаниеТиповС3000);
	ТЗ.Колонки.Добавить("ЭД", ОписаниеТиповЭД);
	
	СвойстваНоменклатуры = Новый Структура;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		СвойстваНоменклатуры.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из НаборДанных Цикл
		
		Элемент = ТекЭлемент;
		НаименованиеРаботыДопДанные = "";
		Если ЕстьСвойствоИдФайл
			И ЕстьСвойствоXDTO(ТекЭлемент, "ИнфПолСтр")
			И (ЗначениеЗаполнено(ТекЭлемент.ИнфПолСтр) ИЛИ Не ДеревоДопДанных = Неопределено) Тогда
			
			Если Найти(ТекЭлемент.ИнфПолСтр, "xml") = 0 Тогда
				СвойстваТекЭлемента = ТекЭлемент.Свойства();
				Если СвойстваТекЭлемента.Получить("НомТов") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомТов);
				ИначеЕсли СвойстваТекЭлемента.Получить("НомСтр") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомСтр);
				ИначеЕсли СвойстваТекЭлемента.Получить("Номер") <> Неопределено Тогда
					НомСтр = Строка(НомерСтроки) + "." + ТекЭлемент.Номер;
				Иначе
					Продолжить;
				КонецЕсли;
				
				// Зачитаем параметры строки ТЧ из доп. данных.
				ПрочитатьИнфПол(ТекЭлемент.ИнфПолСтр, ДеревоДопДанных, ИмяТЧ, НомСтр);
				Если ДеревоДопДанных <> Неопределено И ДеревоДопДанных.Строки.Количество() > 0 Тогда
					СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
					СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
					Если СтрокиДерева.Количество() > 0 Тогда
						СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомСтр);
						СтрокиДерева = СтрокиДерева[0].Строки.НайтиСтроки(СтруктураПоиска);
						Если СтрокиДерева.Количество() > 0 Тогда
							СтрокаВладелец = СтрокиДерева[0];
							СтрокаИД = СтрокаВладелец.Строки.Найти("ИД", "ИмяРеквизита");
							СтрокаБЕНаименованиеПолное = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименованиеПолное", "ИмяРеквизита");
							СтрокаБЕМСокращение = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаМеждународноеСокращение", "ИмяРеквизита");
							СтрокаБЕНаименование = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименование", "ИмяРеквизита");
							СтрокаБЕКод = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаКод", "ИмяРеквизита");
							Если СтрокаИД <> Неопределено Тогда
								СвойстваНоменклатуры.ИД = СтрокаИД.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименованиеПолное <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаНаименованиеПолное = СтрокаБЕНаименованиеПолное.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕМСокращение <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаМеждународноеСокращение = СтрокаБЕМСокращение.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименование <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаНаименование = СтрокаБЕНаименование.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕКод <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаКод = СтрокаБЕКод.ЗначениеРеквизита;
							КонецЕсли;
							// В некоторых случаях наименование работы может передаваться через доп данные.
							СтрокаНаименованиеРаботы = СтрокаВладелец.Строки.Найти("Наименование", "ИмяРеквизита");
							Если Не СтрокаНаименованиеРаботы = Неопределено Тогда
								 НаименованиеРаботыДопДанные = СтрокаНаименованиеРаботы.ЗначениеРеквизита;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("Наименование") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = Элемент.Наименование;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимРабот") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = ТекЭлемент.НаимРабот;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимТов") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = ТекЭлемент.НаимТов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СвойстваНоменклатуры.Наименование) Тогда
			СвойстваНоменклатуры.Наименование = НаименованиеРаботыДопДанные;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СвойстваНоменклатуры.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		НовЗапись = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СвойстваНоменклатуры);
		НовЗапись.ЭД = СсылкаНаЭД;
		
		Если НЕ Элемент.Свойства().Получить("ИД") = Неопределено Тогда
			НовЗапись.ИД = Элемент.ИД;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ИнфПолФХЖ2") Тогда
			 НовЗапись.ИД = ЗначениеДопРеквизита(Элемент.ИнфПолФХЖ2, "ИД");
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ИнфПолеОписРабот") Тогда
			 НовЗапись.ИД = ЗначениеДопРеквизита(Элемент.ИнфПолеОписРабот, "ИД");
		КонецЕсли;
		
		// В CML документах Ид товара передается через доп данные, которые находятся в значении реквизитов.
		Если Не ЗначениеЗаполнено(НовЗапись.ИД) Тогда
			Ид = ЗначениеИДТовараДопДанныхСтроки(Элемент);
			НовЗапись.ИД = Ид;
		КонецЕсли;
		
		Если НЕ ТекЭлемент.Свойства().Получить("КодТов") = Неопределено Тогда
			НовЗапись.КодТовара = ТекЭлемент.КодТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ХарактерТов") = Неопределено Тогда
			НовЗапись.НаименованиеХарактеристики = ТекЭлемент.ХарактерТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ_Тов") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ_Тов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимЕдИзм") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаНаименование = ТекЭлемент.НаимЕдИзм;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("БазоваяЕдиница") = Неопределено Тогда
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Код") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаКод = Элемент.БазоваяЕдиница.Код;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Наименование") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименование = Элемент.БазоваяЕдиница.Наименование;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеПолное") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименованиеПолное = Элемент.БазоваяЕдиница.НаименованиеПолное;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("МеждународноеСокращение") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаМеждународноеСокращение = Элемент.БазоваяЕдиница.МеждународноеСокращение;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Артикул") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.Артикул;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("АртикулТов") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.АртикулТов;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Описание") = Неопределено Тогда
			НовЗапись.Описание = Элемент.Описание;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("ДополнительныеРеквизиты") = Неопределено Тогда
			Для Каждого ЭлементДанных Из Элемент.ДополнительныеРеквизиты Цикл
				Если ТЗ.Колонки.Найти("Доп_" + ЭлементДанных.Наименование) = Неопределено Тогда
					ТЗ.Колонки.Добавить("Доп_" + ЭлементДанных.Наименование, ОписаниеТиповС255);
					ИменаДопКолонок = ИменаДопКолонок + ", "+ "Доп_" + ЭлементДанных.Наименование;
				КонецЕсли;
				Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					НовЗапись["Доп_" + ЭлементДанных.Наименование] = ЭлементЗначения;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Если пришел пустой ИД, используем вместо него наименование товара.
		// Актуально для входящих ЭД из учетных систем отличных от 1С.
		Если Не ЗначениеЗаполнено(НовЗапись.ИД) Тогда
			НовЗапись.ИД = ВРег(СтрЗаменить(НовЗапись.Наименование, " ", ""))
				+ "#" + ВРег(СтрЗаменить(НовЗапись.НаименованиеХарактеристики, " ", ""))
				+ "#" + ВРег(СтрЗаменить(НовЗапись.КодТовара, " ", ""))
				+ "#" + ВРег(СтрЗаменить(НовЗапись.Артикул, " ", ""));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеИДТовараДопДанныхСтроки(СтрокаXDTO)
	
	СоставнойИД = ЗначениеСвойстваДопДанныхСтроки(СтрокаXDTO, "Ид");
	
	Возврат СоставнойИД;
	
КонецФункции

Функция ЗначениеДопРеквизита(КоллекцияЗначений, ИмяРеквизита)
	
	Результат = Неопределено;
	Для Каждого КлючЗначение Из КоллекцияЗначений Цикл
		
		Если ВРег(КлючЗначение.Идентиф) = ВРег(ИмяРеквизита) Тогда
			Результат = КлючЗначение.Значен;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСвойстваДопДанныхСтроки(СтрокаXDTO, ИмяСвойства)
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	
	ДопДерево = ДеревоДопДанных();
	
	ПрочитатьИнфПол(ДопДанные, ДопДерево, "СтрокаТЧ");
	
	СтрокаТЧ = ДопДерево.Строки.Найти("СтрокаТЧ", "ЗначениеРеквизита");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаРеквизита = СтрокаТЧ.Строки.Найти(ИмяСвойства, "ИмяРеквизита");
	Если СтрокаРеквизита = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаРеквизита.ЗначениеРеквизита;
	
КонецФункции

Процедура СформироватьСтруктуруПоДопДанным(Дерево, СтруктураДопДанных)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
			Структура = Новый Структура;
			СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, Структура);
		ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
		Иначе
			СтруктураДопДанных.Вставить(СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура "восстанавливает" набор данных в таблицу значений. Если при формировании ЭД в доп.данные
// была помещена таблица значений, то при разборе ЭД набор данных (из доп.данных) преобразуется в таблицу значений.
//
// Параметры:
//   Дерево - ДеревоЗначений - набор доп.данных прочитанных из ЭД.
//   ТЗ - ТаблицаЗначений - таблица значений сформированная по данным из дерева значений.
//
Процедура СформироватьТаблицуЗначенийПоДопДанным(Дерево, ТЗ)
	
	Для Каждого СтрокаТЗвДереве Из Дерево.Строки Цикл
		СтрокаТЗ = Неопределено;
		Для Каждого ЗначениеЯчейкиТЗ Из СтрокаТЗвДереве.Строки Цикл
			Если СтрокаТЗвДереве.ЗначениеРеквизита = "0" Тогда // 0-я строка ТЗ в дереве
				ТЗ.Колонки.Добавить(ЗначениеЯчейкиТЗ.ИмяРеквизита);
			КонецЕсли;
			Если СтрокаТЗ = Неопределено Тогда
				СтрокаТЗ = ТЗ.Добавить();
			КонецЕсли;
			Если ТЗ.Колонки.Найти(ЗначениеЯчейкиТЗ.ИмяРеквизита) = Неопределено Тогда
				ТЗ.Колонки.Добавить(ЗначениеЯчейкиТЗ.ИмяРеквизита);
			КонецЕсли;
			СтрокаТЗ[ЗначениеЯчейкиТЗ.ИмяРеквизита] = ЗначениеЯчейкиТЗ.ЗначениеРеквизита;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита", "Набор");
		СтрокиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаДопДанных Из СтрокиДопДанные Цикл
			Для Каждого СтрокаДерева Из СтрокаДопДанных.Строки Цикл
				Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
					Структура = Новый Структура;
					СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ЗначениеРеквизита, Структура);
				ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
					НовСтрока = Неопределено;
					Для Каждого Строка Из СтрокаДерева.Строки Цикл
						Если Строка.ЗначениеРеквизита = "Структура" Тогда
							Если НовСтрока = Неопределено Тогда
								НовСтрока                   = НовыйЭД.Строки.Добавить();
								НовСтрока.Реквизит          = СтрокаДерева.ЗначениеРеквизита;
								НовСтрока.ЗначениеРеквизита = СтрокаДерева.ИмяРеквизита;
							КонецЕсли;
							Структура = Новый Структура;
							СформироватьСтруктуруПоДопДанным(Строка, Структура);
							ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовСтрока, Строка.ИмяРеквизита, Структура);
						Иначе
							ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, Строка.ЗначениеРеквизита, Строка.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаДопДанных.ЗначениеРеквизита = "Шапка" И СтрокаДерева.ИмяРеквизита = "Список" Тогда
					ТЗ = Новый ТаблицаЗначений;
					СформироватьТаблицуЗначенийПоДопДанным(СтрокаДерева, ТЗ);
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ЗначениеРеквизита, ТЗ);
				Иначе
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
				КонецЕсли;
			КонецЦикла;
			ВозвращаемоеЗначение = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, НомерСтроки, ИмяТЧ, Ошибка)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
		СтрокиШапкиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиШапкиДопДанные.Количество() > 0 Тогда
			СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиТЧДопДанные = СтрокиШапкиДопДанные[0].Строки.НайтиСтроки(СтруктураОтбора);
			Если СтрокиТЧДопДанные.Количество() > 0 Тогда
				Для Каждого СтрокаДерева Из СтрокиТЧДопДанные[0].Строки Цикл
					Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
						Структура = Новый Структура;
						СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
						СписокТЧ.Добавить(Структура, СтрокаДерева.ЗначениеРеквизита);
					ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
						СписокТЧ.Добавить(СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"), СтрокаДерева.ЗначениеРеквизита);
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("КодОКЕИ") Тогда
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, "ОКЕИ_Тов");
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("КодОКЕИДо") Тогда
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, "ОКЕИ_ТовДо");
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("КодОКЕИПосле") Тогда
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, "ОКЕИ_ТовПосле");
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("ДопДанныеТаможеннойДекларации") Тогда
						СписокТЧ.Добавить("ДопДанныеТаможеннойДекларации", СтрокаДерева.ЗначениеРеквизита);
					Иначе
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.ИмяРеквизита);
					КонецЕсли;
				КонецЦикла;
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПространствоИменАкта(ДанныеФайлаЭД, ИдентификаторЭД)
	
	ФлагФНС =0;
	Если СтрДлина(ДанныеФайлаЭД.Документ.ВремДок) = 8 Тогда   // например 12.45.55
		ФлагФНС = 1;
	Иначе
		ФлагФНС = 2;
	КонецЕсли;
	Если ДанныеФайлаЭД.СвУчДокОбор.Свойства().Получить("СвОЭДОтпрСФ") <> Неопределено Тогда
		ФлагФНС = 3;
	КонецЕсли;
	
	ПространствоИмен = ИмяПространстваТитула(ФлагФНС, ИдентификаторЭД);
	
	Возврат ПространствоИмен;
	
КонецФункции

Функция ИмяПространстваТитула(ФлагФНС, ИдентификаторЭД)
	
	// Имена для Акта исполнителя
	АктыИсполнителя = Новый Соответствие;
	АктыИсполнителя.Вставить(1, "IAKTPRM");
	АктыИсполнителя.Вставить(2, "IAKTPRM2");
	АктыИсполнителя.Вставить(3, "IAKTPRM_5_01_02");
	
	// Имена для Акта заказчика
	АктыЗаказчика = Новый Соответствие;
	АктыЗаказчика.Вставить(1, "ZAKTPRM");
	АктыЗаказчика.Вставить(2, "ZAKTPRM2");
	АктыЗаказчика.Вставить(3, "ZAKTPRM_5_01_02");
	
	// Имена для Титула продавца
	ТитулыПокупателя = Новый Соответствие;
	ТитулыПокупателя.Вставить(1, "PTORG12");
	ТитулыПокупателя.Вставить(2, "PTORG12");
	ТитулыПокупателя.Вставить(3, "PTORG_5_01_02");
	
	// Имена для Титула покупателя
	ТитулыПродавца = Новый Соответствие;
	ТитулыПродавца.Вставить(1, "OTORG12");
	ТитулыПродавца.Вставить(2, "OTORG12");
	ТитулыПродавца.Вставить(3, "OTORG_5_01_02");

	
	ИменаВидовЭД = Новый Соответствие;
	ИменаВидовЭД.Вставить("IAKTPRM", АктыИсполнителя);
	ИменаВидовЭД.Вставить("ZAKTPRM", АктыЗаказчика);
	ИменаВидовЭД.Вставить("PTORG12", ТитулыПокупателя);
	ИменаВидовЭД.Вставить("OTORG12", ТитулыПродавца);
	
	ТаблицаИмен = ИменаВидовЭД.Получить(ИдентификаторЭД);
	
	ИмяПространства = ТаблицаИмен.Получить(ФлагФНС);
	
	Возврат ИмяПространства;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка дополнительных данных ЭД

// Формирование xml-файла/строки

Функция РекурсивноОбработатьСтрокиДерева(МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, ТекстОшибки)
	
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если НЕ ЮридическиЗначимый И СтрокаДЗ.ЮридическиЗначимый Тогда
			// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
			// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
			// будут передаваться отдельно от не значимых, в разных файлах).
			Продолжить;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , ТекстОшибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , ТекстОшибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			РекурсивноОбработатьСтрокиДерева(МассивСтрокДЗ, Реквизит, ПространствоИменСхемы, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, ТекстОшибки);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Если ЮридическиЗначимый = СтрокаДЗ.ЮридическиЗначимый Тогда
				Рекв.Реквизит.Добавить(Реквизит);
				ЕстьДанныеДляДопФайла = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Разбор xml-файла/строки

Функция РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Для Каждого Реквизит Из ОбъектРазбора.Реквизит Цикл
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", Реквизит.Имя, Реквизит.Значение);
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита = Реквизит.Имя;
			СтрДЗ.ЗначениеРеквизита = Реквизит.Значение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		Если Реквизит.Реквизит <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Универсальный доп. файл, представляет из себя дерево с неограниченным уровнем вложений. Каждый элемент дерева имеет
// реквизиты (Имя, Значение) и подчиненные элементы (ветки), с таким же составом, как и у текущего элемента.
//
// Параметры:
//  ДопФайл - строка - полный путь к файлу.
//
// Возвращаемое значение - Неопределено, либо ДеревоЗначений.
//
Функция РазобратьУниверсальныйДопФайл(ДопФайл)
	
	ДеревоДопДанных = ДеревоДопДанных();
	Если Найти(ДопФайл, ".xml") = 0 Тогда
		Возврат ДеревоДопДанных;
	КонецЕсли;

	ОбъектXML = Новый ЧтениеXML;
		
	Попытка
		ОбъектXML.ОткрытьФайл(ДопФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
		ОбъектXML.Закрыть();
		Если ЭД.Данные <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(ЭД.Данные, ДеревоДопДанных);
		КонецЕсли;
	Исключение
		ДеревоДопДанных = Неопределено;
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ДопФайл, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ДеревоДопДанных;
	
КонецФункции

Процедура ПрочитатьИнфПол(Знач СтрокаXML, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки = Неопределено)
	
	// Тег <Данные> - обязательный для xml-строки в формате универсального доп.файла.
	Если Найти(СтрокаXML, "<Данные>") > 0 Тогда
		СтрокаXML = "<ДопФайл ИдФайла=""1"" ИдДопФайла=""1"" ВерсияФормата=""1"" ДатаФормирования=""2000-01-01T00:00:00"" xmlns=""ДопФайлУниверсальный"">"
			+ СтрокаXML + "</ДопФайл>";
			
		ДеревоСозданоРаньше = Истина;
		Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
			ДеревоДопДанных = ДеревоДопДанных();
			ДеревоСозданоРаньше = Ложь;
		КонецЕсли;
		ОбъектXML = Новый ЧтениеXML;
		
		Попытка
			ОбъектXML.УстановитьСтроку(СтрокаXML);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
			ОбъектXML.Закрыть();
			Если ЭД.Данные <> Неопределено Тогда
				СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
				Если СтрокаДЗ = Неопределено Тогда
					СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
					СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
					Если НомерСтроки = Неопределено Тогда
						СтрокаДЗ.ИмяРеквизита = "Набор";
					Иначе
						СтрокаДЗ.ИмяРеквизита = "Список";
					КонецЕсли;
				КонецЕсли;
				Если НомерСтроки <> Неопределено Тогда
					СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки)));
					
					// Поиск подчиненных по разделителю "."
					ИндексРазделителяНомера = Найти(Строка(НомерСтроки), ".");
					Если ИндексРазделителяНомера Тогда
						СтрокаПоискаРодителя = Лев(Строка(НомерСтроки), ИндексРазделителяНомера - 1);
						СтрокиДЗРодитель = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", СтрокаПоискаРодителя));
					КонецЕсли;
					
					Если СтрокиДЗ.Количество() > 0 Тогда
						СтрокаДЗ = СтрокиДЗ[0];
					ИначеЕсли ИндексРазделителяНомера И СтрокиДЗРодитель.Количество() Тогда
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
						ЭлектронноеВзаимодействие.СкопироватьСтрокиДереваРекурсивно(СтрокаДЗ, СтрокиДЗРодитель[0]);
					Иначе
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				РекурсивноРазобратьДопФайл(ЭД.Данные, СтрокаДЗ, Истина);
			КонецЕсли;
		Исключение
			Если Не ДеревоСозданоРаньше Тогда
				ДеревоДопДанных = Неопределено;
			КонецЕсли;
			ОбъектXML.Закрыть();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возникла ошибка при чтении данных из строки доп.данных. (%1)'"), ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, ИмяНабораДанных)
	
	ДеревоСозданоРаньше = Истина;
	Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = ДеревоДопДанных();
		ДеревоСозданоРаньше = Ложь;
	КонецЕсли;
	
	СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
	Если СтрокаДЗ = Неопределено Тогда
		СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
		СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
		СтрокаДЗ.ИмяРеквизита = "Набор";
	КонецЕсли;
	
	Если ТипЗнч(ИнфПол) = Тип("СписокXDTO") Тогда
		КоллекцияЗначений = ИнфПол;
		
	Иначе
		КоллекцияЗначений = ИнфПол.ТекстИнф;
		
	КонецЕсли;
	
	Для Каждого ИмяЗначениеРеквизита Из КоллекцияЗначений Цикл
		
		СтрДЗ = СтрокаДЗ.Строки.Добавить();
		СтрДЗ.ИмяРеквизита = ИмяЗначениеРеквизита.Идентиф;
		СтрДЗ.ЗначениеРеквизита = ИмяЗначениеРеквизита.Значен;
		СтрДЗ.ЮридическиЗначимый = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДопДанныеТЧ_ФНС502(ИнфПол, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки)
	
	Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = ДеревоДопДанных();
	КонецЕсли;
	
	СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
	Если СтрокаДЗ = Неопределено Тогда
		СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
		СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
		Если НомерСтроки = Неопределено Тогда
			СтрокаДЗ.ИмяРеквизита = "Набор";
		Иначе
			СтрокаДЗ.ИмяРеквизита = "Список";
		КонецЕсли;
	КонецЕсли;
	
	СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки)));
	
	// Поиск подчиненных по разделителю "."
	ИндексРазделителяНомера = Найти(Строка(НомерСтроки), ".");
	Если ИндексРазделителяНомера Тогда
		СтрокаПоискаРодителя = Лев(Строка(НомерСтроки), ИндексРазделителяНомера - 1);
		СтрокиДЗРодитель = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", СтрокаПоискаРодителя));
	КонецЕсли;
	
	Если СтрокиДЗ.Количество() > 0 Тогда
		СтрокаДЗ = СтрокиДЗ[0];
	ИначеЕсли ИндексРазделителяНомера И СтрокиДЗРодитель.Количество() Тогда
		СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
		СтрокаДЗ.ИмяРеквизита = "Нпп";
		СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
		СкопироватьСтрокиДереваРекурсивно(СтрокаДЗ, СтрокиДЗРодитель[0]);
	Иначе
		СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
		СтрокаДЗ.ИмяРеквизита = "Нпп";
		СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
	КонецЕсли;

	Для Каждого ИмяЗначениеРеквизита Из ИнфПол Цикл
		
		СтрДЗ = СтрокаДЗ.Строки.Добавить();
		СтрДЗ.ИмяРеквизита = ИмяЗначениеРеквизита.Идентиф;
		СтрДЗ.ЗначениеРеквизита = ИмяЗначениеРеквизита.Значен;
		СтрДЗ.ЮридическиЗначимый = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Разбор дерева доп. данных для печатных форм

Функция СформироватьДопДанныеСтрок(ДеревоДопДанных, ИмяЧитаемойТаблицы, ТаблицаВозврата)
	
	СтруктураВозврата = Новый Структура("ЕстьПодписанные, ЕстьНеПодписанные", Ложь, Ложь);
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяЧитаемойТаблицы);
		СтрокиСписка = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиСписка.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("Нпп");
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			Для Каждого СтрокаСписка Из СтрокиСписка[0].Строки Цикл
				ТаблицаДопДанных.Очистить();
				ПрочитатьСтрокиДереваРекурсивно(СтрокаСписка.Строки, ТаблицаДопДанных);
				
				Если ТаблицаДопДанных.Количество() > 0 Тогда
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
					КонецЦикла;
					ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
					СтрокаТЗВозврата = ТаблицаВозврата.Добавить();
					СтрокаТЗВозврата.НомерСтр = СтрокаСписка.ЗначениеРеквизита;
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						Если СтрокаТЗ.ЮридическиЗначимый Тогда
							СтруктураВозврата.ЕстьПодписанные = Истина;
							СтрокаТЗВозврата.ПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.ПодписанныеДанные),
								СтрокаТЗВозврата.ПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						Иначе
							СтруктураВозврата.ЕстьНеПодписанные = Истина;
							СтрокаТЗВозврата.НеПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.НеПодписанныеДанные),
								СтрокаТЗВозврата.НеПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПрочитатьСтрокиДереваРекурсивно(СтрокиДерева, ТаблицаДопДанных, ИмяРодителя = "")
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" ИЛИ СтрокаДерева.ИмяРеквизита = "Массив" 
			ИЛИ СтрокаДерева.ИмяРеквизита = "Список" ИЛИ СтрокаДерева.ИмяРеквизита = "Нпп"
			ИЛИ СтрокаДерева.ЗначениеРеквизита = "Структура" Тогда
			
			ИмяРодителя = ИмяРодителя + СтрокаДерева.ЗначениеРеквизита;
			ПрочитатьСтрокиДереваРекурсивно(СтрокаДерева.Строки, ТаблицаДопДанных, ИмяРодителя);
		Иначе
			СтрокаТЗ = ТаблицаДопДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Знач Макет, ТабличныйДокумент)
	
	Макет = ПолучитьОбщийМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ИдентификаторДокумента_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", "Шапка");
		СтрокиШапки = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиШапки.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			ПрочитатьСтрокиДереваРекурсивно(СтрокиШапки, ТаблицаДопДанных);
			
			Если ТаблицаДопДанных.Количество() > 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ДопДанныеШапки_Шапка");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакетаСЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_Строка");
				ОбластьМакетаБезЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_СтрокаБезЭП");
				ТаблицаДопДанных.Колонки.Добавить("Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
				КонецЦикла;
				ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					ОбластьМакета = ?(СтрокаТЗ.ЮридическиЗначимый, ОбластьМакетаСЭП, ОбластьМакетаБезЭП);
					ОбластьМакета.Параметры.Заполнить(СтрокаТЗ);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с документами основаниями

#Область ПоискДокументовОснованийПоИдентификаторамДокументовИБ

// Актуальный алгоритм передачи связки с документами-основаниями.
// В качестве идентификатора документа-основания во входящем ЭД приходит
// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
// будет найдена.
Процедура ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, Организация, ЭтоСчетФактура = Ложь)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",   Организация);
	СтруктураОтбора.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
	ИДДокументаОснования = НовыйЭД.Строки.Найти("ИдентификаторДокументаОснования", "Реквизит", Истина);
	ИДЭДДокументаОснования = НовыйЭД.Строки.Найти("ИДЭДДокументаОснования", "Реквизит", Истина);
	// Для счета-фактуры в переопределяемой части ожидается несколько иная структура данных по основаниям.
	Если ЭтоСчетФактура Тогда
		ДокументыОснования = НовыйЭД.Строки.Найти("ДокументыОснования", "Реквизит", Истина);
		Если ДокументыОснования <> Неопределено Тогда
			Для Каждого Строка Из ДокументыОснования.Строки Цикл
				ПараметрыДокументаОснования = Строка.ЗначениеРеквизита;
				ДокументОснование = Неопределено;
				Если ПараметрыДокументаОснования.Свойство("ИдентификаторДокументаОснования", ИДЭДДокументаОснования)
					И ЗначениеЗаполнено(ИДЭДДокументаОснования) Тогда
					
					ДокументОснование = ДокументОснованиеПоИдентификатору(ИДЭДДокументаОснования, СтруктураОтбора);
				ИначеЕсли ПараметрыДокументаОснования.Свойство("ИДЭДДокументаОснования", ИДЭДДокументаОснования)
					И ЗначениеЗаполнено(ИДЭДДокументаОснования) Тогда
					
					ДокументОснование = ПолучитьДокументОснование(ИДЭДДокументаОснования, СтруктураОтбора);
				КонецЕсли;
				Если ДокументОснование <> Неопределено Тогда
					Строка.СсылкаНаОбъект = ДокументОснование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ИДДокументаОснования <> Неопределено Тогда
				ДокументОснование = ДокументОснованиеПоИдентификатору(ИДДокументаОснования.ЗначениеРеквизита, СтруктураОтбора);
			ИначеЕсли ИДЭДДокументаОснования <> Неопределено Тогда
				ДокументОснование = ПолучитьДокументОснование(ИДЭДДокументаОснования.ЗначениеРеквизита, СтруктураОтбора);
			КонецЕсли;
			Если ДокументОснование <> Неопределено Тогда
				ПараметрыОснования = Новый Структура("ИдентификаторДокументаОснования, ИДЭДДокументаОснования,
					|ВидДокументаОснования, НомерДокументаОснования, ДатаДокументаОснования");
				Для Каждого Элемент Из ПараметрыОснования Цикл
					СтрокаРеквизита = НовыйЭД.Строки.Найти(Элемент.Ключ, "Реквизит", Истина);
					Если СтрокаРеквизита <> Неопределено Тогда	
						ПараметрыОснования[Элемент.Ключ] = СтрокаРеквизита.ЗначениеРеквизита;
					КонецЕсли;
				КонецЦикла;
				НовСтрока = НовыйЭД.Строки.Добавить();
				НовСтрока.Реквизит = "ДокументыОснования";
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовСтрока, "ДокументОснования", ПараметрыОснования, ДокументОснование);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументОснование = Неопределено;
		Если ИДДокументаОснования <> Неопределено Тогда
			ДокументОснование = ДокументОснованиеПоИдентификатору(ИДДокументаОснования.ЗначениеРеквизита, СтруктураОтбора);
		ИначеЕсли ИДЭДДокументаОснования <> Неопределено Тогда
			ДокументОснование = ПолучитьДокументОснование(ИДЭДДокументаОснования.ЗначениеРеквизита, СтруктураОтбора);
		КонецЕсли;
		Если ДокументОснование <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДокументыОснования");
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НайденныйТипВДереве, "ДокументОснования", ДокументОснование, ДокументОснование);
			НайденнаяСтрока = НайденныйТипВДереве.Строки.Найти(ДокументОснование, "СсылкаНаОбъект");
			НайденнаяСтрока.ИндексСтроки = НайденныйТипВДереве.ИндексСтроки + "_"
				+ Строка(НайденныйТипВДереве.Строки.Индекс(НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Основание", НайденнаяСтрока.ИндексСтроки, ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на документ-основание найденный по идентификатору, либо Неопределено.
Функция ДокументОснованиеПоИдентификатору(ИДДокументаОснования, СтруктураОтбора, ТипЭлементаВерсииЭД = Неопределено)
	
	ДокументОснование = Неопределено;
	
	МассивИД = Новый Массив;
	МассивИД.Добавить(ИДДокументаОснования);
	ТЗПолученныхОснований = ТаблицаЗначенийДокументовОснованийПоИдентификаторам(МассивИД, СтруктураОтбора);
	Если ТЗПолученныхОснований.Количество() > 0 Тогда
		
		ДокументОснование = ТЗПолученныхОснований[0].Ссылка;
		// Для УПД и УКД выберем нужный документ основание.
		Если ТипЭлементаВерсииЭД <> Неопределено
			И (ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД) Тогда
			
			ИмяСчетаФактурыПолученного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураПолученныйВМетаданных");
			Если ИмяСчетаФактурыПолученного <> Неопределено Тогда
				Для каждого Строка Из ТЗПолученныхОснований Цикл
					Если ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного) Тогда
						ДокументОснование = Строка.Ссылка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

#КонецОбласти

// Только для внутреннего использования
Функция ПолучитьПараметрыДокументовОснований(Знач ДокументыОснования, ТаблицаИдентификаторовОснований)
	
	ТаблицаПараметровДокументовОснований = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	// В запрос передается временная таблица документов-оснований.
	// Затем для этих документов-оснований выбираются первичные ЭД (если есть).
	// Из отобранных ЭД отбираются актуальные версии (по регистру СостоянияЭД), у актуальных ЭД
	// получаются значения реквизитов.
	// В результате запроса обязательно должна присутствовать ссылка на ВладельцаЭД
	// и если найден ЭД, то реквизиты ЭД.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МассивСсылок.ОбъектСсылка
	|ПОМЕСТИТЬ МассивСсылок
	|ИЗ
	|	&МассивСсылок КАК МассивСсылок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МассивСсылок.ОбъектСсылка КАК ОбъектСсылка,
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК ЭлектронныйДокумент
	|ПОМЕСТИТЬ ВР_ЭД
	|ИЗ
	|	МассивСсылок КАК МассивСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|		ПО МассивСсылок.ОбъектСсылка = ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектСсылка,
	|	ЭлектронныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК Наименование,
	|	ВР_ЭД.ОбъектСсылка КАК ДокументСсылка,
	|	ЭлектронныйДокументИсходящий.ДатаДокументаОтправителя,
	|	ЭлектронныйДокументИсходящий.НомерДокументаОтправителя,
	|	ЭлектронныйДокументИсходящий.ВидЭД
	|ИЗ
	|	ВР_ЭД КАК ВР_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ)))
	|			И ВР_ЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|		ПО ВР_ЭД.ЭлектронныйДокумент = ЭлектронныйДокументИсходящий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВР_ЭД.ОбъектСсылка КАК ДокументСсылка,
	|	ЭлектронныйДокументИсходящий.УникальныйИД КАК ИдентификаторЭДДокументаОснования
	|ИЗ
	|	ВР_ЭД КАК ВР_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|		ПО ВР_ЭД.ЭлектронныйДокумент = ЭлектронныйДокументИсходящий.Ссылка";


	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		МассивСсылок = ДокументыОснования;
	Иначе // пришла единичная ссылка на объект
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ДокументыОснования);
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	Для Каждого ЭлементСписка Из МассивСсылок Цикл
		Если МассивТипов.Найти(ТипЗнч(ЭлементСписка)) = Неопределено Тогда
			МассивТипов.Добавить(ТипЗнч(ЭлементСписка));
		КонецЕсли;
	КонецЦикла;
	
	ТипЗначенияКолонки = Новый ОписаниеТипов(МассивТипов);
	ТЗ_Ссылки = Новый ТаблицаЗначений;
	КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", ТипЗначенияКолонки);
	
	Для Каждого ДокументОснование Из МассивСсылок Цикл
		НоваяСтрока = ТЗ_Ссылки.Добавить();
		НоваяСтрока.ОбъектСсылка = ДокументОснование;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаПараметровДокументовОснований = Результат[2].Выгрузить();
	ТаблицаПараметровДокументовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
	Для Каждого СтрокаТЗ Из ТаблицаПараметровДокументовОснований Цикл
		СтрокаТЗ.ИдентификаторДокументаОснования = Строка(СтрокаТЗ.ДокументСсылка.УникальныйИдентификатор());
	КонецЦикла;
	ТаблицаПараметровДокументовОснований.Колонки.Удалить("ДокументСсылка");
	
	// Таблица идентификаторов помещается в табличную часть ЭД ИдентификаторыОснованийВладельцаФайла.
	ТаблицаЗначений = Результат[3].Выгрузить();
	ТаблицаЗначений.Колонки.Добавить("ИдентификаторДокументаОснования");
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		СтрокаИдентификаторов = ТаблицаИдентификаторовОснований.Добавить();
		СтрокаИдентификаторов.ИдентификаторДокументаОснования = Строка(СтрокаТЗ.ДокументСсылка.УникальныйИдентификатор());
		СтрокаИдентификаторов.ИдентификаторЭДДокументаОснования = СтрокаТЗ.ИдентификаторЭДДокументаОснования;
	КонецЦикла;
	ТаблицаИдентификаторовОснований.Свернуть("ИдентификаторДокументаОснования, ИдентификаторЭДДокументаОснования");
	
	Возврат ТаблицаПараметровДокументовОснований;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДокументОснование(НаименованиеФайла, ДопПараметрыПоиска)
	
	ДокументОснование = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК Ссылка
	|ПОМЕСТИТЬ вт_ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", НаименованиеФайла + "%");
	Для Каждого Элемент Из ДопПараметрыПоиска Цикл
		ИмяРеквизита = Элемент.Ключ;
		Если ИмяРеквизита = "Организация" Тогда
			ИмяРеквизита = "ВладелецФайла.Организация";
		КонецЕсли;
		Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("	И ЭДПрисоединенныеФайлы.%1 = &%2", ИмяРеквизита, Элемент.Ключ);
		Запрос.УстановитьПараметр(Элемент.Ключ,  Элемент.Значение);
	КонецЦикла;
	Текст = Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ЭД КАК вт_ЭД
	|		ПО ЭлектронныйДокументВходящийДокументыОснования.Ссылка = вт_ЭД.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование
	|ИЗ
	|	вт_ЭД КАК вт_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка";

	Запрос.Текст = Текст;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументОснование = Выборка.ДокументОснование;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Типы объектов

// Получает имя владельца справочника НоменклатураПоставщика.
//
// Возвращаемое значение:
//  ИмяСправочника - строковое имя владельца.
//
Функция ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков()
	
	ИмяРеквизитаВладельца = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца);
	
	Если ИмяРеквизитаВладельца = Неопределено Тогда // не задано соответствие
		ТекстСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать имя реквизита для владельца номенклатуры поставщиков.'");
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения,
			2, УровеньЖурналаРегистрации.Предупреждение);
		ИмяРеквизитаВладельца = "";
	КонецЕсли;
	
	Возврат ИмяРеквизитаВладельца;
	
КонецФункции

// Определяет, является ли параметр ссылкой на номенклатуру.
//
// Параметры:
//  СсылкаНаОбъект - любой объект.
//
// Возвращаемое значение:
//  Булево - Истина, если это ссылка на элемент справочника Номенклатура ИЛИ НоменклатураПоставщиков.
//
Функция ЭтоНоменклатура(СсылкаНаОбъект)
	
	Результат = Ложь;
	
	Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта("Номенклатура"));
	Если НЕ Результат И ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта("НоменклатураПоставщиков") <> Неопределено Тогда
		Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта("НоменклатураПоставщиков"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Определяет имя файла электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//
Функция ОпределитьИмяФайлаЭД(ВидЭД, СсылкаНаОбъект, Знач ВерсияЭД = Неопределено)
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		ШаблонПредставленияЭД = НСтр("ru = '%1 %2 %3%4.xml'");
		
		// Получим версию ЭД и ее строковое представление.
		ВерсияЭД = ?(ВерсияЭД = Неопределено, ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект), ВерсияЭД);
		Если ТипЗнч(ВерсияЭД) = Тип("Дата") Тогда
			ВерсияЭД = Формат(ВерсияЭД, "ДЛФ=DT; ДП=-");
		КонецЕсли;
		
		ПредставлениеВерсии = "";
		Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
			И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
			И ЗначениеЗаполнено(ВерсияЭД) Тогда
			
			ШаблонПредставлениеВерсии = " (ver. %1)";
			ПредставлениеВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставлениеВерсии, ВерсияЭД);
		КонецЕсли;
		
		Если ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставленияЭД,
				ВидЭД, СсылкаНаОбъект.Организация, СсылкаНаОбъект.Контрагент, ПредставлениеВерсии);
		Иначе
			СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставленияЭД,
				ВидЭД, СсылкаНаОбъект.Номер, Формат(СсылкаНаОбъект.Дата, "ДЛФ=D; ДЛФ=D"), ПредставлениеВерсии);
		КонецЕсли;
		
		СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрокаИмениФайла);
	Иначе
		СтрокаИмениФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмениФайла = ОбменСКонтрагентамиСлужебный.КорректноеИмяФайла(СтрокаИмениФайла, Истина);
	
	Возврат СтрокаИмениФайла;
	
КонецФункции

Процедура ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, Имя, Значение)

	ЗаголовокЗапроса = ЗаголовокЗапроса + Имя + ": "+ Значение + Символы.ВК + Символы.ПС;

КонецПроцедуры

Процедура ПрочитатьКонтакт(Контакт, ТаблицаКонтактов, ПрофильНастроекЭДО)
	
	Строка = ТаблицаКонтактов.Добавить();
	Строка.ПрофильНастроекЭДО  = ПрофильНастроекЭДО;
	Строка.ИНН                 = ?(ТипЗнч(Контакт.Inn) = Тип("ОбъектXDTO"), "", Контакт.Inn);
	
	Строка.Изменен             = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Сред(Контакт.State.Changed, 0,
		Найти(Контакт.State.Changed, ".") - 1), "-", ""), " ", ""), ":", ""),"T",""));
		
	Если Контакт.Свойства().Получить("Kpp") <> Неопределено И ТипЗнч(Контакт.Kpp) = Тип("Строка") Тогда
		Строка.КПП = Контакт.Kpp;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("ExternalContactId") <> Неопределено
		И ТипЗнч(Контакт.ExternalContactId) = Тип("Строка") Тогда
		
		Строка.ВнешнийИД = Контакт.ExternalContactId;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("Name") <> Неопределено И ТипЗнч(Контакт.Name) = Тип("Строка") Тогда
		Строка.Наименование    = Контакт.Name;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("Comment") <> Неопределено И ТипЗнч(Контакт.Name) = Тип("Строка") Тогда
		Строка.ТекстПриглашения = Контакт.Comment;
	КонецЕсли;
	
	Строка.Состояние = ПреобразоватьТекстСтатуса(Контакт.State.Code);
	Если Контакт.State.Code = "Error" Тогда
		Строка.ОписаниеОшибки  = ПреобразоватьТекстСтатуса(Контакт.State.ErrorCode);
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("EDXClientId") <> Неопределено Тогда
		Строка.Идентификатор  = Контакт.EDXClientId;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьТекстСтатуса(КодСтатуса)
	
	Если КодСтатуса = "Incoming" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие; //"Входящий запрос";
	ИначеЕсли КодСтатуса = "Rejected" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен; //"Отсоединен"
	ИначеЕсли КодСтатуса = "Accepted" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен; //"Присоединен"
	ИначеЕсли КодСтатуса = "Sent" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия; //"Ожидаем согласия"
	ИначеЕсли КодСтатуса = "Error" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Ошибка; // "Ошибка"
	
	ИначеЕсли КодСтатуса = "InvalidINN" Тогда
		ВозвращаемоеЗначение = НСтр("ru ='Неправильный ИНН'");
	ИначеЕсли КодСтатуса = "InvalidEmail" Тогда
		ВозвращаемоеЗначение = НСтр("ru ='Неправильный адрес электронной почты'");
	Иначе
		ВозвращаемоеЗначение = КодСтатуса;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭтоЧисло(Строка)
	
	ЗначениеВозврата = Истина;
	Попытка
		Число = Число(Строка);
	Исключение
		ЗначениеВозврата = Ложь;
	КонецПопытки;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьКодТранзакции(ЭлектронныйДокумент, КодРегламента, ПризнакПодписи = Ложь)
	
	КодТранзакции = Неопределено;
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец, ВладелецФайла");
		
	Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
		Если ПризнакПодписи Тогда
			КодТранзакции = "CancellationOfferResign";
		Иначе
			КодТранзакции = "CancellationOffer";
		КонецЕсли;
	ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(ПараметрыЭД.ТипЭлементаВерсииЭД) Тогда
		Если КодРегламента = "Invoice" Тогда
			КодТранзакции = "CorrectionNotice";
		Иначе
			ТипЭлементаВерсииЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ЭлектронныйДокументВладелец, "ТипЭлементаВерсииЭД");
			Если ТипЭлементаВерсииЭДВладельца = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				КодТранзакции = "CancellationOfferReject";
			Иначе
				КодТранзакции = "MainDocumentReject";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КодРегламента = "Invoice" Тогда
		
		КодТранзакции = "Invoice";
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
			КодТранзакции = "SendConfirmationReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
			КодТранзакции = "PostDateConfirmationReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
			КодТранзакции = "ReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
			КодТранзакции = "ReceiveNoticePostDateConfirmationReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
			КодТранзакции = "CorrectionNoticeReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД Тогда
			КодТранзакции = "CustomerInformationPostDateConfirmationReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			КодТранзакции = "CustomerInformation";
		КонецЕсли;
		
	ИначеЕсли КодРегламента = "Formalized" Тогда
		
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ВладелецФайла,"ВидЭД");
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			КодТранзакции = "CustomerTitle";
			
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			КодТранзакции = "VendorTitle";
		КонецЕсли;
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда
			КодТранзакции = "ReceiveNotice";
		КонецЕсли;
		
	ИначеЕсли КодРегламента = "Nonformalized" Тогда
		КодТранзакции = "MainDocument";
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда
			КодТранзакции = "ReceiveNotice";
		КонецЕсли;
		
		Если ПризнакПодписи Тогда
			КодТранзакции = "MainDocumentResign";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодТранзакции;
	
КонецФункции

Функция ПолучитьКодРегламента(ЭлектронныйДокумент, ПрисоединенныйФайл)
	
	ПараметрыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл,
		"ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец");
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВерсияРегламентаЭДО, ВидЭД");
	
	// Изменим код регламента при использовании версии регламента 20.
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ПрисоединенныйФайл)
		И НЕ ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ПараметрыФайла.ТипЭлементаВерсииЭД)
		И ЗначениеЗаполнено(ПараметрыФайла.ЭлектронныйДокументВладелец) Тогда
		КодРегламента = ПолучитьКодРегламента(ЭлектронныйДокумент, ПараметрыФайла.ЭлектронныйДокументВладелец);
	ИначеЕсли ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		ИЛИ ПараметрыФайла.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
		КодРегламента = "Invoice";
	ИначеЕсли ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ПараметрыФайла.ТипЭлементаВерсииЭД)) Тогда
			КодРегламента = "Formalized";
	Иначе
		КодРегламента = "Nonformalized";
	КонецЕсли;
	
	Возврат КодРегламента;
	
КонецФункции

// Вызывается при формировании карточки пакета ЭД.
//
// Параметры:
//   ТипЭД               - ПеречислениеСсылка.ТипыЭД
//   ВРасширенномСоставе - Булево - состав типов был расширен, для обратной совместимости требуется передавать
//                         только старые типы (после расширения состава типов они передаются в новом реквизите
//                         карточки, а старые в прежнем).
//
// Возвращаемое значение:
//   Строка.
//
Функция СтрокаТипаДокументаПоПеречислению(ТипЭД, ВРасширенномСоставе = Ложь)
	
	ВозвращаемоеЗначение = "Other";
	Если ТипЭД = Перечисления.ТипыЭД.СчетНаОплату Тогда
		ВозвращаемоеЗначение = "Account";
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.АктВыполненныхРабот Тогда
		ВозвращаемоеЗначение = "Statement";
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.ТоварнаяНакладная Тогда
		ВозвращаемоеЗначение = "Consignment";
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.ПлатежноеПоручение Тогда
		ВозвращаемоеЗначение = "PaymentOrder";
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.Договор Тогда
		ВозвращаемоеЗначение = "Contract";
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.ПриложениеКАкту Тогда
		ВозвращаемоеЗначение = "StatementAppendix";
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.ГарантийноеПисьмо Тогда
		ВозвращаемоеЗначение = "GuaranteeLetter";
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.Прочее Тогда
		ВозвращаемоеЗначение = "Other";
	ИначеЕсли ВРасширенномСоставе Тогда
		Если ТипЭД = Перечисления.ТипыЭД.АктСверки Тогда
			ВозвращаемоеЗначение = "ReconciliationStatement";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.АктВзаимозачета Тогда
			ВозвращаемоеЗначение = "OffsettingStatement";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.КС11 Тогда
			ВозвращаемоеЗначение = "KS11";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.КС2 Тогда
			ВозвращаемоеЗначение = "KS2";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.КС3 Тогда
			ВозвращаемоеЗначение = "KS3";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.Отчет Тогда
			ВозвращаемоеЗначение = "Report";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.Уведомление Тогда
			ВозвращаемоеЗначение = "Notification";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.Ведомость Тогда
			ВозвращаемоеЗначение = "Sheet";
		ИначеЕсли ТипЭД = Перечисления.ТипыЭД.СоглашениеОбЭДО Тогда
			ВозвращаемоеЗначение = "EDOAgreement";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РасшифроватьМаркер(ИмяФайлаРезультата, ПарольКСертификатуОператора)
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Если Отказ Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПарольКСертификатуОператора) Тогда
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольКСертификатуОператора;
	КонецЕсли;
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("113");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат РасшифрованныеДвоичныеДанные;
	
КонецФункции

Функция ПередатьПакетЭДОператораЭДО(Файл, Маркер, Соединение, Знач АдресРесурса, ПрофильНастроекЭДО)
	
	ПараметрВозврата = 0;
	Если ЗначениеЗаполнено(Маркер) Тогда
		
		Заголовки = "";
		ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("txt");
		
		АдресРесурса = АдресРесурса + ?(АдресРесурса = "SendMessage", "/" + СтрЗаменить(Файл.Имя, "-", ""), "");
		
		Попытка
			Соединение.ОтправитьДляОбработки(Файл.ПолноеИмя, АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ПараметрВозврата = 1;
		Исключение
			ПараметрВозврата = 0;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			ШаблонСообщения = НСтр("ru = 'Отправка пакета по профилю настроек ЭДО: %1'");
			ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
			
			ТекстСообщения = "";
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				Если МассивПараметровОшибки.Количество() >= 7 Тогда
				
					ШаблонОшибки = НСтр("ru = '%1: %2.'");
					ТекстОшибкиОператораТакском = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
					
					КодОшибки = МассивПараметровОшибки[5];
					
					ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
						КодОшибки,
						ТекстОшибкиОператораТакском);
					
					ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
				Результат,
				ТекстСообщения);
		КонецПопытки;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	КонецЕсли;
	
	Возврат ПараметрВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение электронных документов

Функция ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, АдресРесурса, ПовторноеПолучение = Ложь)
	
	ИмяФайлаРезультата = Неопределено;
	Если ЗначениеЗаполнено(Маркер) Тогда
		Заголовки = "";
		ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ПовторноеПолучение = Ложь;
		Исключение
			// Если возникла ошибка по причине истечения времени действия маркера,
			// то пробуем получить новый маркер и повторить попытку получения ЭД.
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
			ИмяФайлаРезультата = Неопределено;
			
			// Повторное получение ЭД. Только одна попытка.
			ПовторноеПолучение = Не ПовторноеПолучение;
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Ошибка получения входящих электронных документов на сервере оператора ЭДО.'");
			Операция = НСтр("ru = 'Получение ЭД'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция РазобратьТекстСпискаЭД(СписокЭД_XML, ТЗ)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДДокументооборота");
	ТЗ.Колонки.Добавить("КодТранзакции");
	ТЗ.Колонки.Добавить("ИДДокумента");
	ТЗ.Колонки.Добавить("Приоритет");
	
	ДатаВремяЗапроса = Неопределено;
	
	Если ЗначениеЗаполнено(СписокЭД_XML) Тогда
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(СписокЭД_XML);
		
		ИДДокументооборота = Неопределено;
		КодТранзакции      = Неопределено;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ContainerDescription" Тогда
				ДатаВремяЗапроса = ЧтениеХМЛ.ПолучитьАтрибут("LastRecordDateTime");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "DocFlow" Тогда
				ИДДокументооборота = ЧтениеХМЛ.ПолучитьАтрибут("Id");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Document" Тогда
				КодТранзакции      = ЧтениеХМЛ.ПолучитьАтрибут("TransactionCode");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Identifiers" Тогда
				
				СтрТЗ = ТЗ.Добавить();
				СтрТЗ.ИДДокументооборота = ИДДокументооборота;
				СтрТЗ.ИДДокумента        = ЧтениеХМЛ.ПолучитьАтрибут("InternalId");
				СтрТЗ.КодТранзакции      = КодТранзакции;
				
				Если КодТранзакции = "MainDocument" Тогда
					
					СтрТЗ.Приоритет = 0;
				ИначеЕсли КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
					
					СтрТЗ.Приоритет = 1;
				ИначеЕсли КодТранзакции = "Invoice" Тогда
					
					СтрТЗ.Приоритет = 2;
				ИначеЕсли КодТранзакции = "PostDateConfirmation"
					ИЛИ КодТранзакции = "SendConfirmation"
					ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					
					СтрТЗ.Приоритет = 3;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					
					СтрТЗ.Приоритет = 4;
				ИначеЕсли КодТранзакции = "MainDocumentReject" Тогда
					
					СтрТЗ.Приоритет = 5;
				Иначе
					
					СтрТЗ.Приоритет = 6;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Type" Тогда
				
				ТипДокумента = ЧтениеХМЛ.ПолучитьАтрибут("Name");
				
				Если КодТранзакции = "Invoice"
					И (ТипДокумента = "PrimaryAccountingDocumentVendor"
						ИЛИ ТипДокумента = "PrimaryAccountingDocumentCustomer"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentVendor"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentCustomer") Тогда
					
					СтрТЗ.Приоритет = 1;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ТЗ.Сортировать("Приоритет");
	КонецЕсли;
	
	Возврат ДатаВремяЗапроса;
	
КонецФункции

Функция ПолучитьЭДОператораЭДО(Маркер, Соединение, СтруктураПараметровЗапросаМаркера, ИДДокумента, ПовторноеПолучение = Ложь)
	
	ИмяФайлаРезультата = Неопределено;
	Если ЗначениеЗаполнено(Маркер) Тогда
		АдресРесурса = "GetMessage/" + ИДДокумента;
		Заголовки = "";
		
		ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ПовторноеПолучение = Ложь;
		Исключение
			// Если возникла ошибка по причине истечения времени действия маркера,
			// то пробуем получить новый маркер и повторить попытку получения ЭД.
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
			ИмяФайлаРезультата = Неопределено;
			
			// Повторное получение ЭД. Только одна попытка.
			ПовторноеПолучение = Не ПовторноеПолучение;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция ПакетЭДУжеЗагружен(ИДДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийУИД = &ВнешнийУИД
	|	И ПакетЭД.Направление = &Направление";
	Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ВнешнийУИД",  ИДДокумента);
	
	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Возврат НЕ РезультатПустой;
	
КонецФункции

Функция ПолучитьДанныеВходящегоЭД(ДвоичныеДанные, КодТранзакции, ИДДокументооборота, ИДДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Неопределено;
	НастройкиСоглашения = Неопределено;
	ЭДНайден = Ложь;
	
	Если КодТранзакции = "PostDateConfirmation"
		ИЛИ КодТранзакции = "SendConfirmation" 
		ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation"
		ИЛИ КодТранзакции = "CustomerInformationPostDateConfirmation" Тогда
		
		Если КодТранзакции = "PostDateConfirmation" Тогда
			
			ЭДСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДДокументооборота));
			ЭДНайден = (ЭДСсылка.ПолучитьОбъект() <> Неопределено);
			
		ИначеЕсли КодТранзакции = "CustomerInformationPostDateConfirmation" Тогда
			
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("УникальныйИД",  ИДДокументооборота);
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
			
			ТипЭлементаВерсииЭД = Новый массив;
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
			СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
			
			ЭлектронныйДокументВладелец = ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			
			ТипЭлементаВерсииЭД = Новый массив;
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
			СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
			
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			СтруктураПараметровПоиска.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
			
			ЭДСсылка = ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			ЭДНайден = (ЭДСсылка <> Неопределено);
			
		Иначе
			
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("УникальныйИД", ИДДокументооборота);
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Входящий);
			
			ТипЭлементаВерсииЭД = Новый массив;
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
			ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
			СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
			
			ЭДСсылка = ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			ЭДНайден = (ЭДСсылка <> Неопределено);
			
		КонецЕсли;
		
		Если ЭДНайден Тогда

			ПараметрыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭДСсылка, "ВладелецФайла, ОтправительЭД, ПолучательЭД");
			ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД, 
				|НастройкаЭДО, Организация, Контрагент, ПрофильНастроекЭДО");
			
			НастройкиСоглашения = Новый Структура;
			НастройкиСоглашения.Вставить("ПрофильНастроекЭДО", ПараметрыЭД.ПрофильНастроекЭДО);
			НастройкиСоглашения.Вставить("НастройкаЭДО",       ПараметрыЭД.НастройкаЭДО);
			НастройкиСоглашения.Вставить("СпособОбменаЭД",     ПараметрыЭД.ПрофильНастроекЭДОСпособОбменаЭД);
			НастройкиСоглашения.Вставить("Организация",        ПараметрыЭД.Организация);
			НастройкиСоглашения.Вставить("Контрагент",         ПараметрыЭД.Контрагент);
			НастройкиСоглашения.Вставить("АдресОтправителя",   "");
			НастройкиСоглашения.Вставить("АдресПолучателя",    "");
			ИДОтправителя = ПараметрыФайлаЭД.ОтправительЭД;
			ИДПолучателя  = ПараметрыФайлаЭД.ПолучательЭД;
		КонецЕсли;
		
	Иначе
		
		ИмяВременногоФайлаЗИП = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
		КлючУникальности = Новый УникальныйИдентификатор();
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("input", КлючУникальности);
		ОшибкаРаспаковки = Ложь;
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			ОшибкаРаспаковки = Истина;
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"),
																   ТекстОшибки,
																   ТекстСообщения);
			ЗипЧтение.Закрыть();
		КонецПопытки;
		
		Если НЕ ОшибкаРаспаковки Тогда
			
			МассФайлКарточки  = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
			
			Если МассФайлКарточки.Количество() > 0 Тогда
				ФайлКарточки = МассФайлКарточки[0];
			Иначе
				ФайлКарточки = Неопределено;
			КонецЕсли;
			
			ИДПолучателя  = Неопределено;
			ИДОтправителя = Неопределено;
			Если ФайлКарточки <> Неопределено Тогда
				
				ОбъектXML = Новый ЧтениеXML;
				СтруктураЗначений = Новый Структура;
				
				Попытка
					ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					ОбъектXML.Закрыть();
					Если Не ЭД.Sender.Свойства().Получить("Abonent") = Неопределено Тогда
						ИДОтправителя = ЭД.Sender.Abonent.ID;
					КонецЕсли;
					
					Если Не ЭД.Receiver.Свойства().Получить("Abonent") = Неопределено Тогда
						ИДПолучателя  = ЭД.Receiver.Abonent.ID;
					КонецЕсли;
					
					НастройкиСоглашения = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
					
				Исключение
					ОбъектXML.Закрыть();
					
					ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
																								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																								ТекстСообщения);
					НастройкиСоглашения = Неопределено;
					
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗИП);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
	КонецЕсли;
	
	Если НастройкиСоглашения <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      НастройкиСоглашения.СпособОбменаЭД);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкиСоглашения.НастройкаЭДО);
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Зашифрован",          Ложь); // Шифрование данных через Оператора не поддерживается.
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", Неопределено);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия30);
		СтруктураПараметров.Вставить("ВнешнийУИД",          ИДДокумента);
		СтруктураПараметров.Вставить("СтатусПакета",        Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("НаправленияЭД",       Перечисления.НаправленияЭД.Входящий);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

Функция ПолучитьИмяФайлаДанных(СтрокаПути)
	
	ПозицияСлэш = Найти(СтрокаПути, "/");
	Пока ПозицияСлэш > 0 Цикл
		СтрокаПути = Сред(СтрокаПути, ПозицияСлэш + 1);
		ПозицияСлэш = Найти(СтрокаПути, "/");
	КонецЦикла;
	Возврат СтрокаПути;
	
КонецФункции

Функция РазобратьСтрокуДаты(ПараметрРазбора)
	
	Возврат Сред(ПараметрРазбора, 7, 4) + Сред(ПараметрРазбора, 4, 2) + Сред(ПараметрРазбора, 1, 2);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формат обмена

Функция СформироватьКарточкуCML(ДеревоДанных, ТекстОшибки)
	
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	Попытка
		Карточка = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		АбонентОтправитель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Id", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.ИД"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Name",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.Наименование"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Inn", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.ИНН"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Kpp", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.КПП"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "ContractNumber",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.НомерДоговора"), , ТекстОшибки);
		
		Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель, , ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Тип")) Тогда
			АбонентПолучатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Organization");
			
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Name",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Наименование"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Type",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Тип"), , ТекстОшибки);
			ИмяСвойства = "Organization";
		Иначе
			АбонентПолучатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");
			
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Id", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.ИД"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Name",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Наименование"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Inn", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.ИНН"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Kpp", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.КПП"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "ContractNumber",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.НомерДоговора"), , ТекстОшибки);
			ИмяСвойства = "Abonent";
		КонецЕсли;
		
		Получатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		ЗаполнитьСвойствоXDTO(Получатель, ИмяСвойства, АбонентПолучатель, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , ТекстОшибки);
		
		Идентификаторы = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		ЗаполнитьСвойствоXDTO(Идентификаторы, "ExternalIdentifier",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Определение.ВнешнийИдентификатор"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , ТекстОшибки);
		
		Тип = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		ЗаполнитьСвойствоXDTO(Тип, "Name", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Определение.Имя"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Тип, "ResignRequired",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Определение.ТребуетсяПовторнаяПодпись"), , ТекстОшибки);
			
		Описание = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		ЗаполнитьСвойствоXDTO(Описание, "Title", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Заголовок"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Описание, "Date", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Дата"), , ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Комментарий")) Тогда
			ЗаполнитьСвойствоXDTO(Описание, "Comment", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Комментарий"), , ТекстОшибки);
		КонецЕсли;
		
		СтрокаТаблицыДополнительныхДанных = ДеревоДанных.Строки.Найти("Описание.ДополнительныеДанные", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыДополнительныхДанных.Значение) Тогда
			ОписаниеДопДанные = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData");
			Для Каждого СтрокаДопДанных Из СтрокаТаблицыДополнительныхДанных.Строки Цикл
				ДопДанные = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData.AdditionalParameter");
				
				ЗаполнитьСвойствоXDTO(ДопДанные, "Name",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДопДанных, "Описание.ДополнительныеДанные.НомерСтроки.Имя"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДопДанные, "Value",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДопДанных, "Описание.ДополнительныеДанные.НомерСтроки.Значение"), , ТекстОшибки);
				ОписаниеДопДанные.AdditionalParameter.Добавить(ДопДанные);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(Описание, "AdditionalData", ОписаниеДопДанные, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , ТекстОшибки);
		
		Карточка.Проверить();
		
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Карточка, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование карточки CML'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		Возврат "";
	КонецПопытки;
	
КонецФункции

Функция СформироватьТранспортнуюИнформациюCML(ДеревоДанных, ТекстОшибки)
	
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";
	Попытка
		
		ОписаниеКонтейнера = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Документооборот = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
		ЗаполнитьСвойствоXDTO(Документооборот, "ID", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИД"), , ТекстОшибки);
		
		ДокументыСхемы  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
		Документ     = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 
		
		ЗаполнитьСвойствоXDTO(Документ, "TransactionCode",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.КодТранзакции"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ReglamentCode",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.КодРегламента"), , ТекстОшибки);
		
		Файлы = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ГлавныйФайл.Путь")) Тогда
			ФайлДанных = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
			ИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ГлавныйФайл.Имя");
			Если ЗначениеЗаполнено(ИмяФайла) Тогда
				ЗаполнитьСвойствоXDTO(ФайлДанных, "Name", ИмяФайла, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ГлавныйФайл.Путь"),
				Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаТаблицыПодписейГлавногоФайла = ДеревоДанных.Строки.Найти("Документ.ГлавныйФайлПодписи", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыПодписейГлавногоФайла.Значение) Тогда
			Для Каждого СтрПодпись Из СтрокаТаблицыПодписейГлавногоФайла.Строки Цикл
				Подпись = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImageSignature");
				ИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрПодпись, "Документ.ГлавныйФайлПодписи.НомерСтроки.Имя");
				Если ЗначениеЗаполнено(ИмяФайла) Тогда
					ЗаполнитьСвойствоXDTO(Подпись, "Name", ИмяФайла, , ТекстОшибки);
				КонецЕсли;
				Путь = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрПодпись, "Документ.ГлавныйФайлПодписи.НомерСтроки.Путь");
				ЗаполнитьСвойствоXDTO(Подпись, "Path", Путь, Истина, ТекстОшибки);
				Файлы.MainImageSignature.Добавить(Подпись);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайл.Путь")) Тогда
			ФайлДанных = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImage");
			ИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайл.Имя");
			Если ЗначениеЗаполнено(ИмяФайла) Тогда
				ЗаполнитьСвойствоXDTO(ФайлДанных, "Name", ИмяФайла, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайл.Путь"),
			Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Файлы, "DataImage", ФайлДанных, , ТекстОшибки);
			
			СтрокаТаблицыПодписейДополнительногоФайла = ДеревоДанных.Строки.Найти("Документ.ДополнительныйФайлПодписи", "ПолныйПуть", Истина);
			Если ЗначениеЗаполнено(СтрокаТаблицыПодписейДополнительногоФайла.Значение) Тогда
				
				Для Каждого СтрПодпись Из СтрокаТаблицыПодписейДополнительногоФайла.Строки Цикл
					Подпись = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImageSignature");
					ИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайлПодписи.НомерСтроки.Имя");
					Если ЗначениеЗаполнено(ИмяФайла) Тогда
						ЗаполнитьСвойствоXDTO(Подпись, "Name", ИмяФайла, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Подпись, "Path", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайлПодписи.НомерСтроки.Путь"),
					Истина, ТекстОшибки);
					Файлы.DataImageSignature.Добавить(Подпись);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ФайлКарточки = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
		ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path", "card.xml", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , ТекстОшибки);
		ДокументыСхемы.Document.Добавить(Документ);
		
		ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , ТекстОшибки);
		ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
		
		ОписаниеКонтейнера.Проверить();
		
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(ОписаниеКонтейнера, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование транспортной информации'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		Возврат "";
	КонецПопытки;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Приглашения к обмену

// Читает запрос приглашений от оператора ЭДО.
//
// Параметры:
//  ИмяФайла  - строка - имя файла
//  ТаблицаКонтрагентов  - таблица значений - список контрагентов.
//
Процедура ПрочитатьЗапросПриглашенияОператораЭДО(ИмяФайла, ТаблицаКонтрагентов, ДатаВремяЗапроса, ПрофильНастроекЭДО)
	
	ОбъектXML = Новый ЧтениеXML;
	ТекстСообщения = Неопределено;
	ДатаВремяЗапроса = Формат(Дата("20000101000000"), "ДФ='yyyy-MM-dd HH:mm:ss'");
	
	Попытка
		
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		ДатаВремяЗапроса = ЭД.Asof;
		
		Если ЭД.Свойства().Получить("Contact") <> Неопределено Тогда
			
			Если ТипЗнч(ЭД.Contact) = Тип("СписокXDTO") Тогда
				Для Каждого Контакт Из ЭД.Contact Цикл
					ПрочитатьКонтакт(Контакт, ТаблицаКонтрагентов, ПрофильНастроекЭДО);
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭД.Contact) = Тип("ОбъектXDTO") Тогда
				ПрочитатьКонтакт(ЭД.Contact, ТаблицаКонтрагентов, ПрофильНастроекЭДО);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен с оператором ЭДО

// Работа с деревом

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Процедура ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД)
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсПрог", "1С:Предприятие 8");
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсФорм", "5.01");
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдОтпр",   СтруктураЭД.Отправитель);
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдПок",    СтруктураЭД.Получатель);
	
	Если СтруктураЭД.Свойство("ПространствоИмен") Тогда
		ВставитьЗначениеВДерево(ДеревоДанных, "ПространствоИмен", СтруктураЭД.ПространствоИмен);
	КонецЕсли;
	
	Если СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		ИЛИ СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ДобавитьРеквизитыОператораЭДО(ДеревоДанных);
	ИначеЕсли СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		
		СтрокаРеквизитыОператора = ДеревоДанных.Строки.Добавить();
		СтрокаРеквизитыОператора.ПолныйПуть = "РеквизитыОператораЭДО";
		ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.НаимОрг", СтруктураЭД.ПрофильНастроекЭДО.ОператорЭДО);
		ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИННЮЛ",   СтруктураЭД.ПрофильНастроекЭДО.ОператорЭДОИНН);
		ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИдЭДО",   СтруктураЭД.ПрофильНастроекЭДО.ОператорЭДОИд);
	Иначе // заполним данными Организации или нулевыми значениями, т.к. поля обязательны к заполнению в формате ФНС.
		ДобавитьРеквизитыПустогоОператораЭДО(ДеревоДанных, СтруктураЭД.Организация);
	КонецЕсли;
	ТекДатаВремя = ТекущаяДатаСеанса();
	ВставитьЗначениеВДерево(ДеревоДанных, "ДатаДок", Формат(ТекДатаВремя, "ДЛФ=D"));
	ВставитьЗначениеВДерево(ДеревоДанных, "ВремДок", Формат(ТекДатаВремя, "ДФ=HH.mm.ss"));
	Если СтруктураЭД.Свойство("ВидЭД") Тогда
		ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД", СтруктураЭД.ВидЭД);
	КонецЕсли;
	ВставитьЗначениеВДерево(ДеревоДанных, "КНД", СтруктураЭД.КНД);
	ВставитьЗначениеВДерево(ДеревоДанных, "УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
	
	Если СтруктураЭД.Свойство("ВидЭД") И СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
		И СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ВставитьЗначениеВДерево(ДеревоДанных, "НаимПервДок", "Товарная накладная");
			ВставитьЗначениеВДерево(ДеревоДанных, "ОКУДПервДок", "0330212");
			ВставитьЗначениеВДерево(ДеревоДанных, "НомФорм",     "ТОРГ-12");
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "НаимПервДок", НСтр("ru ='Акт о выполнении работ (оказании услуг)'"));
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "НомФорм", НСтр("ru ='Корректировочный документ получатель'"));
		КонецЕсли;
	КонецЕсли;
	ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");
	
	СтруктураФайла = Новый Структура();
	СтруктураФайла.Вставить("Префикс",                 СтруктураЭД.ПрефиксИдФайла);
	СтруктураФайла.Вставить("ИДПолучателя",            СтруктураЭД.Получатель);
	СтруктураФайла.Вставить("ИДОтправителя",           СтруктураЭД.Отправитель);
	СтруктураФайла.Вставить("ГГГГММДД",                ГГГГММДД);
	СтруктураФайла.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдФайл", ОбменСКонтрагентамиСлужебный.ФНСИмяФайла(СтруктураФайла));
	
КонецПроцедуры

Функция ЗаполнитьДанныеУчастникаФНС(УчастникXDTO, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника")) Тогда
		
		ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
			
			СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ИНН, , ТекстОшибки);
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
			Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
			Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
			
			Если ПространствоИменСхемы = "TORGPR" Или ПространствоИменСхемы = "RUISP" Тогда
				ЗаполнитьСвойствоXDTO(СвФЛ, "ФИО", ФИО,  , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО,  , ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", "---", , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",    СвЮЛ,  , ТекстОшибки);
			КонецЕсли;
			Наименование = Фамилия + " " + Имя + " " + Отчество;
			
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
			
			СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			Если ПространствоИменСхемы = ПространствоИменПередачаТоваровПродавец()
				Или ПространствоИменСхемы = ПространствоИменПередачаРаботИсполнитель() Тогда
				СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.СвЮЛ", ПространствоИменСхемы);
			Иначе
				СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			КонецЕсли;
			
			Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", Наименование, , ТекстОшибки);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ИНН, , ТекстОшибки);
			КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", КПП, , ТекстОшибки);
			
			Если ПространствоИменСхемы = ПространствоИменПередачаТоваровПродавец()
				Или ПространствоИменСхемы = ПространствоИменПередачаРаботИсполнитель() Тогда
				
				СведенияОрганизации = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СведенияОрганизации, "СвЮЛ", СвЮЛ, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СведенияОрганизации, , ТекстОшибки);
			Иначе
				
				ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
			КонецЕсли;
			
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИО,  "Фамилия", "---", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО,  "Имя",     "---", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП",   ФИО,         , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",    СвФЛ,        , ТекстОшибки);
			КонецЕсли;
			
		Иначе
			
			Если ПространствоИменСхемы = "TORGPR" Тогда
				
				СведенияИностраннаяОрганизация = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.ИнОрг", ПространствоИменСхемы);
				
				Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации");
				ЗаполнитьСвойствоXDTO(СведенияИностраннаяОрганизация, "НаимОрг", Наименование, , ТекстОшибки);
				Страна = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна");
				ЗаполнитьСвойствоXDTO(СведенияИностраннаяОрганизация, "Страна", Страна, , ТекстОшибки);
				ИныеСведения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.ИныеСведения");
				ЗаполнитьСвойствоXDTO(СведенияИностраннаяОрганизация, "ИныеСвед", ИныеСведения, , ТекстОшибки);
				
				СведенияОрганизации = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СведенияОрганизации, "ИнОрг", СведенияИностраннаяОрганизация, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СведенияОрганизации, , ТекстОшибки);
				
			Иначе
				
				СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
				
				Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
				ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", Наименование, , ТекстОшибки);
				ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ИНН, , ТекстОшибки);
				КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
				ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", КПП, , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
				
			КонецЕсли;
		
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".КодОКПО", Ложь)) Тогда
		ЗаполнитьСвойствоXDTO(
				УчастникXDTO,
				"ОКПО",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".КодОКПО"),
				,
				ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидУчастника + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			ЗаполнитьАдрес(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы, ВидУчастника);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакт = ПолучитьОбъектТипаCML("УчастникТип.Контакт", ПространствоИменСхемы);
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт.Телефон")) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "УчастникТип.Контакт", "Тлф", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт.Телефон"));
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
				|Номер телефона превышает допустимую длину %1 симв. (%2 %3).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, ВидУчастника, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Тлф", Значение, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектроннаяПочта = ЗначениеРеквизитаДерева(СтрокаДереваДанных, ВидУчастника + ".Контакт.ЭлектроннаяПочта", Ложь);
	Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "КонтактТип", "ЭлПочта", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(ЭлектроннаяПочта);
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
				|Адрес электронной почты превышает допустимую длину %1 симв. (%2 %3).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, ВидУчастника, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "ЭлПочта", ЭлектроннаяПочта, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Факс = ЗначениеРеквизитаДерева(СтрокаДереваДанных, ВидУчастника + ".Контакт.Факс", Ложь);
	Если ЗначениеЗаполнено(Факс) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "КонтактТип", "Факс", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(Факс);
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
				|Номер факса превышает допустимую длину %1 симв. (%2 %3).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, ВидУчастника, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Факс", Факс, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", Контакт, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет")) Тогда
		РеквизитыБанка = "НомерСчета, НаимБанк, БИК";
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИменСхемы);
		СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИменСхемы);
		
		НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", НомерСчета, ,ТекстОшибки);
		КонецЕсли;
		
		НаимБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НаимБанк");
		БИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.БИК");
		Если ЗначениеЗаполнено(НаимБанк) ИЛИ ЗначениеЗаполнено(БИК) Тогда
			Если ЗначениеЗаполнено(НаимБанк) Тогда
				ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк", НаимБанк, ,ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(БИК) Тогда
				ЗаполнитьСвойствоXDTO(СвБанк, "БИК", БИК, ,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "СвБанк",   СвБанк,              , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникXDTO,        "БанкРекв", БанковскиеРеквизиты, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;

	Возврат ДанныеЗаполнены;
	
КонецФункции

Функция НаименованиеУчастникаЭДО(СтрокаДереваДанных, ВидУчастника)
	
	Наименование = "";
	Если Не ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника")) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		Наименование = Фамилия + " " + Имя + " " + Отчество;
		
	Иначе
			
		Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Процедура ЗаполнитьДопДанныеШапкиДокумента(ЗаполняемыйXDTO, ДеревоДанных, ПространствоИмен, СтруктураПараметров, ТекстОшибки)
	
	СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
	
	Если ВРег(ПространствоИмен) = ВРег("KORSFAKT_5_02") Тогда
		ПутьКДопДанным = "Файл.Документ.СвКСчФ.ИнфПол";
		
	Иначе
		ПутьКДопДанным = "Файл.Документ.СвСчФакт.ИнфПол";
	КонецЕсли;
	
	
	ИмяЭлементаВладельца = "Шапка";
	Если ВРег(ПространствоИмен) = ВРег("TORGPR") Или ВРег(ПространствоИмен) = ВРег("RUISP") Тогда
		
		ЗаполнитьПодписываемыеДопДанные_ПередачаТоваров(СтрокаДопДанных, ИмяЭлементаВладельца, ЗаполняемыйXDTO, ПространствоИмен,
			СтруктураПараметров, ТекстОшибки);
			
	Иначе
		
		ДопДанныеXDTO = ПолучитьОбъектТипаCML(ПутьКДопДанным, ПространствоИмен);
		
		ЗаполнитьПодписываемыеДопДанные(СтрокаДопДанных, ИмяЭлементаВладельца, ДопДанныеXDTO, ПространствоИмен,
			СтруктураПараметров, ТекстОшибки);
		ЗаполняемыйXDTO.ИнфПол = ДопДанныеXDTO;
	
	КонецЕсли;
	
	НеПодписанныеДанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть", Истина);
	ПоместитьНеПодписанныеДанныеВДеревоДокумента(НеПодписанныеДанные, СтруктураПараметров, ИмяЭлементаВладельца);
	
	ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь, ИмяЭлементаВладельца);
	
	Если ДопФайлСформирован Тогда
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла", СтруктураПараметров.ИдентификаторДопФайла);
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьДопДанныеСтрокиТЧ(ЗаполняемыйXDTO, ДеревоДанных, СтруктураПараметров, ПространствоИмен, ТекстОшибки)
	
	НомерСтроки = ДеревоДанных.Значение;
	
	СтрокаДопДанных = ДеревоДанных.Строки.Найти("ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
	
	ИмяЭлементаВладельца = "Товары";
	
	ЗаполнитьПодписываемыеДопДанные(СтрокаДопДанных, ИмяЭлементаВладельца, ЗаполняемыйXDTO, ПространствоИмен,
		СтруктураПараметров, ТекстОшибки, НомерСтроки);
	
	// Не подписанные данные помещаем реквизитов "ДопДанные" структуры параметров.
	НеПодписанныеДанные = ДеревоДанных.Строки.Найти("ТаблицаТоваров.НомерСтроки.ДопДанныеНеПодписанные", "ПолныйПуть", Истина);
	
	ПоместитьНеПодписанныеДанныеВДеревоДокумента(НеПодписанныеДанные, СтруктураПараметров, "Товары", НомерСтроки);
	
КонецПроцедуры

Процедура ПоместитьНеПодписанныеДанныеВДеревоДокумента(НеПодписанныеДанные, СтруктураПараметров,
		ИмяРеквизита, НомерСтроки = Неопределено)
	
	НеПодписанные = Новый Структура;
	Для Каждого СтрокаДанных Из НеПодписанныеДанные.Строки Цикл
		
		ИмяПараметра = ЭлектронноеВзаимодействие.НазваниеКолонки(СтрокаДанных.ПолныйПуть);
		ЗначениеПараметра = СтрокаДанных.Значение;

		НеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
		
	КонецЦикла;
	
	Если НеПодписанные.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, НеПодписанные, ИмяРеквизита, Ложь,
			НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодписываемыеДопДанные(СтрокаДопДанных, ИмяРеквизита, ЗаполняемыйXDTO, ПространствоИмен,
	СтруктураПараметров, ТекстОшибки, НомерСтроки = Неопределено)
	
	// Перебираем все ветки подписанных доп. данных
	// Первые 20 строк у которых ключ не более 50 символов и значение реквизита не более 200 попадают в подписанные данные
	// Данные из ветки "НеПодписанные" и не прошедшие проверку данные из ветки "Подписанные" передаются как не подписанные данные.
	
	Если ИмяРеквизита = "Товары" Тогда
		
		Если ВРег(ПространствоИмен) = ВРег("KORSFAKT_5_02") Тогда
			ПутьКДопДанным = "Файл.Документ.ТаблКСчФ.СведТов.ИнфПолСтр";
		Иначе
			ПутьКДопДанным = "Файл.Документ.ТаблСчФакт.СведТов.ИнфПолСтр";
		КонецЕсли;
		
	Иначе
		Если ВРег(ПространствоИмен) = ВРег("KORSFAKT_5_02") Тогда
			ПутьКДопДанным = "Файл.Документ.СвКСчФ.ИнфПол.ТекстИнф";
		Иначе
			ПутьКДопДанным = "Файл.Документ.СвСчФакт.ИнфПол.ТекстИнф";
		КонецЕсли;
	КонецЕсли;
	
	
	МаксДлинаКлюча = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Идентиф",ВидФасетаXDTO.МаксДлина);
	МаксДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МаксДлина);
	МинДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МинДлина);
	
	Если ИмяРеквизита = "Товары" Тогда
		РазмерСписка = ЗаполняемыйXDTO.ИнфПолСтр.ВладеющееСвойство.ВерхняяГраница;
	Иначе
		РазмерСписка = ЗаполняемыйXDTO.ТекстИнф.ВладеющееСвойство.ВерхняяГраница;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДопДанных) Тогда
		НеВалидныеПодписанные = Новый Структура;
		ВалидныеПодписанные = Новый Структура;
		
		НомерСтрокиДопДанных = 0;
		Для Каждого ПодписаннаяСтрока Из СтрокаДопДанных.Строки Цикл
			НомерСтрокиДопДанных = НомерСтрокиДопДанных +1;
			
			ИмяПараметра = ЭлектронноеВзаимодействие.НазваниеКолонки(ПодписаннаяСтрока.ПолныйПуть);
			ЗначениеПараметра = ПодписаннаяСтрока.Значение;
			
			Если СтрДлина(ИмяПараметра) > Число(МаксДлинаКлюча)
				Или СтрДлина(ЗначениеПараметра) > Число(МаксДлинаЗначения)
				Или СтрДлина(ЗначениеПараметра) < Число(МинДлинаЗначения)
				Или НомерСтрокиДопДанных > РазмерСписка Тогда
				
				НеВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
			Иначе
				ВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьВалидныеДопДанные(ВалидныеПодписанные, ЗаполняемыйXDTO, ПутьКДопДанным, ПространствоИмен, ИмяРеквизита, ТекстОшибки);
	
	Если НеВалидныеПодписанные.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, НеВалидныеПодписанные, ИмяРеквизита, Ложь, НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВалидныеДопДанные(ВалидныеПодписанные, ЗаполняемыйXDTO, ПутьКДопДанным, ПространствоИмен, ИмяРеквизита, ТекстОшибки)
	
	Для Каждого КлючЗначение Из ВалидныеПодписанные Цикл
		
		ДопДанные = ПолучитьОбъектТипаCML(ПутьКДопДанным, ПространствоИмен);
		ЗаполнитьСвойствоXDTO(ДопДанные, "Идентиф", КлючЗначение.Ключ,, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДопДанные, "Значен", Строка(КлючЗначение.Значение),, ТекстОшибки);
		
		Если ИмяРеквизита = "Шапка" Тогда
			
			Если ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолФХЖ3") Тогда
				ЗаполняемыйXDTO.ИнфПолФХЖ3.Добавить(ДопДанные);
			ИначеЕсли ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолФХЖ2") Тогда
				ЗаполняемыйXDTO.ИнфПолФХЖ2.Добавить(ДопДанные);
			Иначе
				ЗаполняемыйXDTO.ТекстИнф.Добавить(ДопДанные);
			КонецЕсли;
			
		Иначе
			
			Если ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолСтр") Тогда
				ЗаполняемыйXDTO.ИнфПолСтр.Добавить(ДопДанные);
			ИначеЕсли ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолеОписРабот") Тогда
				ЗаполняемыйXDTO.ИнфПолеОписРабот.Добавить(ДопДанные);
			ИначеЕсли ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолФХЖ2") Тогда
				ЗаполняемыйXDTO.ИнфПолФХЖ2.Добавить(ДопДанные);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПодписываемыеДопДанные_ПередачаТоваров(СтрокаДопДанных, ИмяРеквизита, ЗаполняемыйXDTO, ПространствоИмен,
		СтруктураПараметров, ТекстОшибки, НомерСтроки = Неопределено)
	
	Если Не ЗначениеЗаполнено(СтрокаДопДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДопДанным = "ТекстИнфТип";
	МаксДлинаКлюча = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Идентиф",ВидФасетаXDTO.МаксДлина);
	МаксДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МаксДлина);
	МинДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МинДлина);
	
	РазмерСписка = Неопределено;
	Если ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолеОписРабот") Тогда
		РазмерСписка = ЗаполняемыйXDTO.ИнфПолеОписРабот.ВладеющееСвойство.ВерхняяГраница;
	КонецЕсли;
	
	НеВалидныеПодписанные = Новый Структура;
	ВалидныеПодписанные = Новый Структура;
	
	НомерСтрокиДопДанных = 0;
	Для Каждого ПодписаннаяСтрока Из СтрокаДопДанных.Строки Цикл
		НомерСтрокиДопДанных = НомерСтрокиДопДанных +1;
		
		ИмяПараметра = ЭлектронноеВзаимодействие.НазваниеКолонки(ПодписаннаяСтрока.ПолныйПуть);
		ЗначениеПараметра = СокрЛП(ПодписаннаяСтрока.Значение);
		
		Если Не РазмерСписка = Неопределено Тогда
			Если НомерСтрокиДопДанных > РазмерСписка Тогда
				НеВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрДлина(ИмяПараметра) > Число(МаксДлинаКлюча)
			Или СтрДлина(ЗначениеПараметра) > Число(МаксДлинаЗначения)
			Или СтрДлина(ЗначениеПараметра) < Число(МинДлинаЗначения) Тогда
			
			НеВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
		Иначе
			ВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьВалидныеДопДанные(ВалидныеПодписанные, ЗаполняемыйXDTO, ПутьКДопДанным, ПространствоИмен, ИмяРеквизита, ТекстОшибки);
	
	Если НеВалидныеПодписанные.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, НеВалидныеПодписанные, ИмяРеквизита, Ложь, НомерСтроки);
	КонецЕсли;

КонецПроцедуры

// Заполняем доп данные документа Передача товаров, Передача результатов работ
Процедура ЗаполнитьДопДанныеТаблицыПередачиТоваров(ЗаполняемыйXDTO, ДеревоДанных, СтруктураПараметров, ПространствоИмен, ТекстОшибки)
	
	НомерСтроки = ДеревоДанных.Значение;
	
	ПутьДопДанные = ДеревоДанных.ПолныйПуть;
	СтрокаДопДанных = ДеревоДанных.Строки.Найти(ПутьДопДанные+ ".ДопДанныеПодписанные", "ПолныйПуть", Истина);
	
	Если ПространствоИмен = ПространствоИменПередачаТоваровПродавец() Тогда
		ИмяЭлементаВладельца = "Товары";
	Иначе
		ИмяЭлементаВладельца = "Услуги";
	КонецЕсли;
	
	ЗаполнитьПодписываемыеДопДанные_ПередачаТоваров(СтрокаДопДанных, ИмяЭлементаВладельца, ЗаполняемыйXDTO, ПространствоИмен,
		СтруктураПараметров, ТекстОшибки, НомерСтроки);
	
	// Не подписанные данные помещаем реквизитов "ДопДанные" структуры параметров.
	НеПодписанныеДанные = ДеревоДанных.Строки.Найти(ПутьДопДанные+ ".ДопДанныеНеПодписанные", "ПолныйПуть", Истина);
	ПоместитьНеПодписанныеДанныеВДеревоДокумента(НеПодписанныеДанные, СтруктураПараметров, ИмяЭлементаВладельца, НомерСтроки);
	
КонецПроцедуры

Процедура ЗаполнитьДопДанныеИзДереваДанных(ЗаполняемыйXDTO,
											ДеревоДанных,
											Знач Префикс,
											СтруктураПараметров,
											ПространствоИменСхемы,
											ПутьКИнфПолю,
											ИмяАтрибутаИнфПоля,
											ИмяЭлементаВладельца,
											НомерСтроки,
											ТекстОшибки)
	
		СтруктураДопДанных = Новый Структура;
		Префикс = Префикс + ?(ЗначениеЗаполнено(Префикс), ".", "");
		СтрокаДопДанных = ДеревоДанных.Строки.Найти(Префикс + "ДопДанные.НеПодписанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных = Неопределено Тогда
			СтрокаДопДанных = ДеревоДанных.Строки.Найти(Префикс + "ДопДанныеНеПодписанные", "ПолныйПуть", Истина);
		КонецЕсли;
		Для Каждого Элемент Из СтрокаДопДанных.Строки Цикл
			СтруктураДопДанных.Вставить(ЭлектронноеВзаимодействие.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
		КонецЦикла;
		Если СтруктураДопДанных.Количество() > 0 Тогда
			ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, ИмяЭлементаВладельца,
				Ложь, НомерСтроки);
		КонецЕсли;
		
		СтруктураДопДанных = Новый Структура;
		СтрокаДопДанных = ДеревоДанных.Строки.Найти(Префикс + "ДопДанные.Подписанные", "ПолныйПуть", Истина);
		Если СтрокаДопДанных = Неопределено Тогда
			СтрокаДопДанных = ДеревоДанных.Строки.Найти(Префикс + "ДопДанныеПодписанные", "ПолныйПуть", Истина);
		КонецЕсли;
		Для Каждого Элемент Из СтрокаДопДанных.Строки Цикл
			СтруктураДопДанных.Вставить(ЭлектронноеВзаимодействие.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
		КонецЦикла;
		
		Если СтруктураДопДанных.Количество() > 0 Тогда
			МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(
									ПространствоИменСхемы,
									ПутьКИнфПолю,
									ИмяАтрибутаИнфПоля,
									ВидФасетаXDTO.МаксДлина);
									
			СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанных" + ?(ИмяЭлементаВладельца = "Шапка", "Шапки", "Строки"),
				МаксДлина - 20); // 20 - служебные символы.
			ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, ИмяЭлементаВладельца,
				Истина, НомерСтроки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьДопФайлCML(СтруктураПараметров,
				ТекстОшибки, Истина, ИмяЭлементаВладельца, НомерСтроки) Тогда
				
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
				
			КонецЕсли;
			
			// Сформируем доп. файл (для строк таб.части не формируется):
			ДопФайлСформирован = (ИмяЭлементаВладельца = "Шапка"
				И СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь, ИмяЭлементаВладельца));
					
			Если ДопФайлСформирован Тогда
				
				ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
				ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла", СтруктураПараметров.ИдентификаторДопФайла);
				
			КонецЕсли;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			Если ИмяЭлементаВладельца = "Шапка" Тогда
				ИнфПол = ПолучитьОбъектТипаCML(ПутьКИнфПолю, ПространствоИменСхемы);
				Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
					ЗаполнитьСвойствоXDTO(ИнфПол, ИмяАтрибутаИнфПоля, СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
				Если ДопФайлСформирован Тогда
					ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПол", ИнфПол, , ТекстОшибки);
			ИначеЕсли ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ЗаполняемыйXDTO, ИмяАтрибутаИнфПоля, СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдрес(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
		
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
	СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);
	СтрокаАдреса = АдресМестонахождения.Строки.Найти(
												ВидУчастника + ".Адрес." + АдресМестонахождения.Значение,
												"ПолныйПуть");
	Если АдресМестонахождения.Значение = "Структурированный" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", СтрокаАдреса.Строки[1].Значение, СхемаСчетаФактуры, ТекстОшибки);
		
		РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
		
		Для Каждого Строка Из СтрокаАдреса.Строки Цикл
			ИмяРеквизита = ЭлектронноеВзаимодействие.НазваниеКолонки(Строка.ПолныйПуть);
			Если Найти(РеквизитыАдреса, ИмяРеквизита) > 0 И ЗначениеЗаполнено(Строка.Значение) Тогда
				ЗаполнитьСвойствоXDTO(АдрРФ, ИмяРеквизита, Строка.Значение, , ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);
	ИначеЕсли НЕ СхемаСчетаФактуры И АдресМестонахождения.Значение = "Произвольный" Тогда
		
		Если ПространствоИменСхемы = ПространствоИменПередачаТоваровПродавец()
			Или ПространствоИменСхемы = ПространствоИменПередачаРаботИсполнитель() Тогда
			
			АдресИнформация = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(АдресИнформация, "АдрТекст", СтрокаАдреса.Значение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АдресИнформация, "КодСтр", "643", , ТекстОшибки);
			Если ЕстьСвойствоXDTO(АдресТип, "АдрИнф", Истина) Тогда
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдресИнформация, , ТекстОшибки);
			ИначеЕсли ЕстьСвойствоXDTO(АдресТип, "АдрИно", Истина) Тогда
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрИно", АдресИнформация, , ТекстОшибки);
			КонецЕсли;
			
		Иначе
			// В схеме ТОРГ-12 и Акт, адрес в виде строки передается в элементе схемы "АдрТекст".
			ЗаполнитьСвойствоXDTO(АдресТип, "АдрТекст", СтрокаАдреса.Значение, , ТекстОшибки);
		КонецЕсли;
		
	Иначе
		
		Если ПространствоИменСхемы = ПространствоИменПередачаТоваровПродавец() Тогда
			ПолеАдресИностранный = "АдрИнф";
		Иначе
			// В схеме счета-фактуры, адрес в виде строки передается в элементе схемы "АдрИНО".
			ПолеАдресИностранный = "АдрИНО";
		КонецЕсли;
		АдресXDTO = ПолучитьОбъектТипаCML("АдресТип."+ПолеАдресИностранный, ПространствоИменСхемы);

		ПолеКодСтраны = "КодСтр";
		ПолеАдресТекст = "АдрТекст";
		РеквизитыАдреса = "АдресТекст, КодСтраны";
		Для Каждого Строка Из СтрокаАдреса.Строки Цикл
			ИмяРеквизита = ЭлектронноеВзаимодействие.НазваниеКолонки(Строка.ПолныйПуть);
			Если Найти(РеквизитыАдреса, ИмяРеквизита) > 0 И ЗначениеЗаполнено(Строка.Значение) Тогда
				
				Если ВРег(ИмяРеквизита) = ВРег("КодСтраны") Тогда
					ЗаполнитьСвойствоXDTO(АдресXDTO, ПолеКодСтраны, Строка.Значение, , ТекстОшибки);
					
				Иначе
					ЗаполнитьСвойствоXDTO(АдресXDTO, ПолеАдресТекст, Строка.Значение, , ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСвойствоXDTO(АдресТип, ПолеАдресИностранный, АдресXDTO, СхемаСчетаФактуры, ТекстОшибки);
		
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыОператораЭДО(ДеревоДанных)
	
	СтруктураРеквизитов = СтруктураНастроекТакском();
	Наименование = "";
	ИНН = "";
	ИдентификаторОператора = "";
	СтруктураРеквизитов.Свойство("Наименование", Наименование);
	СтруктураРеквизитов.Свойство("ИНН", ИНН);
	СтруктураРеквизитов.Свойство("ИдентификаторОператора", ИдентификаторОператора);
	СтрокаРеквизитыОператора = ДеревоДанных.Строки.Добавить();
	СтрокаРеквизитыОператора.ПолныйПуть = "РеквизитыОператораЭДО";
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.НаимОрг", Наименование);
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИННЮЛ",   ИНН);
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИдЭДО",   ИдентификаторОператора);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыПустогоОператораЭДО(ДеревоДанных, ДанныеПоОрганизации)
	
	Наименование = НСтр("ru = 'Без оператора ЭДО'");
	ИНН = "1111111117"; // первый ИНН, отвечающий требованиям формата
	
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеПоОрганизации);
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование) Тогда
		Наименование = ДанныеЮрФизЛица.ПолноеНаименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ИНН) Тогда
		ИНН = ДанныеЮрФизЛица.ИНН;
	КонецЕсли;
	СтрокаРеквизитыОператора = ДеревоДанных.Строки.Добавить();
	СтрокаРеквизитыОператора.ПолныйПуть = "РеквизитыОператораЭДО";
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.НаимОрг", Наименование);
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИННЮЛ",   Лев(ИНН, 10));
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИдЭДО",   "---");
	
КонецПроцедуры

Функция НакладнаяСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("КодХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("СрокГодности");
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Штрихкод");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("СуммаСНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция СчетНаОплатуСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("СрокПлатежа");
	СтруктураПараметров.Вставить("РасчетныйСчетОрганизации");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, РасчетныйСчет");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ЗаказПоставщикуСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("Роль");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ЗаказКлиентаСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Роль");
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента");
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ПрайсЛистСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Описание");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, Валюта, ДатаФормирования, Дата, ВидЭД,
	|НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция АктВыполненныхРаботСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаДокумента");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("НалогообложениеНДС");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика");
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента");
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ОтчетОСписанииКомиссионногоТовараСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров",  ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("НачалоПериода");
	СтруктураПараметров.Вставить("КонецПериода");
	СтруктураПараметров.Вставить("ДатаПлатежа");
	СтруктураПараметров.Вставить("НалогообложениеНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД");

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПередачаТоваровМеждуОрганизациямиСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ВозвратТоваровМеждуОрганизациямиСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
		
	Возврат СтруктураПараметров;
		
КонецФункции

// Только для внутреннего использования
Функция ИнициализироватьТаблицуДанныхУчастниковОбмена()
	
	КС12 = Новый КвалификаторыСтроки(12);
	КС255 = Новый КвалификаторыСтроки(255);
	КС1024 = Новый КвалификаторыСтроки(1024);
	КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	
	ОписаниеТиповС12 = Новый ОписаниеТипов(Массив, , КС12);
	ОписаниеТиповС255 = Новый ОписаниеТипов("Строка", , КС255);
	ОписаниеТиповС1024 = Новый ОписаниеТипов("Строка", , КС1024);
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , КД);
	ОписаниеТиповПрофильНастроекЭДО = Новый ОписаниеТипов("СправочникСсылка.ПрофилиНастроекЭДО");
	ОписаниеТиповСтатусыУчастников = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыУчастниковОбменаЭД");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ПрофильНастроекЭДО", ОписаниеТиповПрофильНастроекЭДО);
	ТЗ.Колонки.Добавить("Наименование",  ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("ИНН",           ОписаниеТиповС12);
	ТЗ.Колонки.Добавить("КПП",           ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("ТекстПриглашения", ОписаниеТиповС1024);
	ТЗ.Колонки.Добавить("Состояние",     ОписаниеТиповСтатусыУчастников);
	ТЗ.Колонки.Добавить("ОписаниеОшибки",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Изменен",       ОписаниеТиповДата);
	ТЗ.Колонки.Добавить("ВнешнийИД",     ОписаниеТиповС255);
	
	Возврат ТЗ;
	
КонецФункции

Функция ДатаПоследнегоПолученияПриглашений(ПрофильНастроекЭДО)
	
	ИскомаяДата = Дата("20000101000000");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнегоПолученияПриглашений
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	|	И СостоянияОбменовЭДЧерезОператоровЭДО.УдалитьСоглашениеОбИспользованииЭД = ЗНАЧЕНИЕ(Справочник.СоглашенияОбИспользованииЭД.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ИскомаяДата = ?(Результат.ДатаПоследнегоПолученияПриглашений = Дата("00000000000000"),
			Дата("20000101000000"), Результат.ДатаПоследнегоПолученияПриглашений);
	КонецЕсли;
	
	Возврат ИскомаяДата;
	
КонецФункции

Процедура УдалитьПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	// Заполняем данные о владельце каталога.
	// Контрагент.
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя + "_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента,
		РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		РеквизитыПартнера = Новый Структура();
		РеквизитыПартнера.Вставить("Контрагент", Контрагент);
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
		
		ЗнДопАналитики = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем данные о товарах каталога.
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеТЧКаталогТоваров(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение веток схемы xsd версии CML2

// Функция заполняет список XDTO значениями строки дерева значений, имена которых совпадают с именами элементов
// (атрибутов) списка и имеют простой тип (строка, число, ...).
//
// Параметры:
//  СтрокаДерева - строка дерева значений - строка источник данных.
//  ИмяКорневогоУзла - строка - имя корневого объекта XDTO, элементом которого является заполняемый список XDTO.
//  ИмяУзла - строка - имя списка XDTO.
//  ПространствоИменСхемы - строка - пространство имен.
//  ТекстОшибки - строка - содержит текст ошибки, возникшей при заполнении объекта.
//
// Возвращаемое значение:
//  Неопределено, ОбъектXDTO - если список не заполнен - то неопределено.
//
Функция ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(СтрокаДерева, ИмяКорневогоУзла, ИмяУзла, ПространствоИменСхемы, ТекстОшибки)
	
	УзелЗаполнен = Ложь;
	УровеньДанных = "";
	Для Каждого ТекКолонка Из СтрокаДерева.Владелец().Колонки Цикл
		ИмяКолонки = ТекКолонка.Имя;
		Если Найти(ИмяКолонки, "Уровень") > 0 И ЗначениеЗаполнено(СтрокаДерева[ИмяКолонки]) Тогда
			ТекУровень = Число(Сред(ИмяКолонки, 8));
			Если ТекУровень > 0 Тогда
				ТекУровень = ТекУровень + 2; // т.к. следующий уровень "НомерСтроки".
				УровеньДанных = "Уровень" + ТекУровень;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(УровеньДанных) Тогда
		Реквизит = ПолучитьОбъектТипаCML(ИмяКорневогоУзла, ПространствоИменСхемы);
		Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
			Узел = ПолучитьОбъектТипаCML(ИмяКорневогоУзла + "." + ИмяУзла, ПространствоИменСхемы);
			Для Каждого ТекСвойство Из Узел.Свойства() Цикл
				ЗначениеПараметра = ТекСтрока.Строки.Найти(ТекСвойство.Имя, УровеньДанных);
				Если ЭтоПростойТипЭлементаXDTO(Узел[ТекСвойство.Имя])
					И ЗначениеПараметра <> Неопределено
					И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
					Обязательное = ЗначениеЗаполнено(ТекСвойство.НижняяГраница);
					ЗаполнитьСвойствоXDTO(Узел, ТекСвойство.Имя, ЗначениеПараметра.Значение, Обязательное, ТекстОшибки);
					УзелЗаполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			Реквизит[ИмяУзла].Добавить(Узел);
		КонецЦикла;
	КонецЕсли;
	Если НЕ УзелЗаполнен Тогда
		Реквизит = Неопределено;
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

Процедура СформироватьДанныеПоТоваруCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки, МассивФайлов = Неопределено)
	
	Характеристика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Характеристика", Ложь);
	Упаковка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Упаковка", Ложь);
	
	// Формируем ИД товара.
	ИдТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдТовараУКонтрагента", Ложь);
	Если Не ЗначениеЗаполнено(ИдТовара) Тогда
		Номенклатура = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Номенклатура");
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	КонецЕсли;
	
	// Характеристики и упаковки.
	Если ЗначениеЗаполнено(Характеристика) ИЛИ ЗначениеЗаполнено(Упаковка) Тогда
		НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование")
			+ " (" + ?(ЗначениеЗаполнено(Характеристика), Характеристика , "")
			+ ?(ЗначениеЗаполнено(Характеристика) И ЗначениеЗаполнено(Упаковка), ", ", "")
			+ ?(ЗначениеЗаполнено(Упаковка), Упаковка , "") + ")";
		ВставитьЗначениеВДерево(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование", НаименованиеНоменклатуры);
	КонецЕсли;
	
	ПоместитьВДопДанныеСтрокиТабличнойЧасти(СтрокаДереваДанных, "Ид", ИДТовара);
	
	ЗаполнитьСвойствоXDTO(Товар, "Наименование",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование"), , ТекстОшибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Артикул", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Страна", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ТорговаяМарка", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Описание", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Картинка", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним тег БазоваяЕдиница.
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеКраткое", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Пересчет = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница.Пересчет", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Пересчет, "Единица", Реквизит, , ТекстОшибки);
		
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент") Тогда
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(Пересчет, "Коэффициент", Реквизит, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			БазоваяЕдиница.Пересчет.Добавить(Пересчет);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ")
		И Товар.Свойства().Получить("Единица") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Единица", Реквизит, , ТекстОшибки);
			
			Коэффициент = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
			Если ЗначениеЗаполнено(Коэффициент) Тогда
				ЗаполнитьСвойствоXDTO(Товар, "Коэффициент", Коэффициент, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога")
		И Товар.Свойства().Получить("ИдКаталога") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ИдКаталога", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора")
		И Товар.Свойства().Получить("ИдКлассификатора") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ИдКлассификатора", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("ЦенаЗаЕдиницу") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ЦенаЗаЕдиницу", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("Цена") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Цена", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество")
		И Товар.Свойства().Получить("Количество") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Количество", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма")
		И Товар.Свойства().Получить("Сумма") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Сумма", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Товар.Свойства().Получить("Налоги") <> Неопределено И Товар.Свойства().Получить("Налоги") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаНДС");
		
		Налоги = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги", ПространствоИменСхемы);
		Налог = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги.Налог", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Налог, "Наименование", "НДС", Истина, ТекстОшибки);
		
		УчтеноВСумме = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НДСУчтеноВСумме", Ложь);
		Если ЗначениеЗаполнено(УчтеноВСумме) Тогда
			ЗаполнитьСвойствоXDTO(Налог, "УчтеноВСумме", УчтеноВСумме, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Налог, "Сумма", Реквизит, Истина, ТекстОшибки);
		
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтавкаНДС");
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтрокаСтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
			ЗаполнитьСвойствоXDTO(Налог, "Ставка", СтрокаСтавкаНДС, , ТекстОшибки);
		КонецЕсли;
		Налоги.Налог.Добавить(Налог);
		ЗаполнитьСвойствоXDTO(Товар, "Налоги", Налоги, , ТекстОшибки);
		
	КонецЕсли;
	
	// Заполним скидку
	Скидка = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Скидки.Скидка", ПространствоИменСхемы);
	ЗаполнятьСкидку = Ложь;
	
	НаименованиеСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НаименованиеСкидки", Ложь);
	Если Не ЗначениеЗаполнено(НаименованиеСкидки) Тогда
		НаименованиеСкидки = "ОбщаяСкидка";
	КонецЕсли;
	Скидка.Наименование = НаименованиеСкидки;
	
	СуммаСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаСкидки", Ложь);
	Если ЗначениеЗаполнено(СуммаСкидки) Тогда
		Скидка.Сумма = СуммаСкидки;
		ЗаполнятьСкидку = Истина;
	КонецЕсли;
	
	ПроцентСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПроцентСкидки", Ложь);
	Если ЗначениеЗаполнено(ПроцентСкидки) Тогда
		Скидка.Процент = ПроцентСкидки;
	КонецЕсли;
	
	СкидкаУчтеноВСумме = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СкидкаУчтеноВСумме", Ложь);
	Если ЗначениеЗаполнено(СкидкаУчтеноВСумме) Тогда
		Скидка.УчтеноВСумме = СкидкаУчтеноВСумме;
	КонецЕсли;
	
	КомментарийКСкидке = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.КомментарийКСкидке", Ложь);
	Если ЗначениеЗаполнено(КомментарийКСкидке) Тогда
		Скидка.Комментарий = КомментарийКСкидке;
	КонецЕсли;
	
	Если ЗаполнятьСкидку Тогда
		Скидки = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Скидки", ПространствоИменСхемы);
		Скидки.Скидка.Добавить(Скидка);
		
		Товар.Скидки = Скидки;
	КонецЕсли;

	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения")
		И Товар.Свойства().Получить("СтранаПроисхождения") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "СтранаПроисхождения", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД")
		И Товар.Свойства().Получить("ГТД") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ГТД", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСвойства = Ложь;
	ЗначенияСвойств = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияСвойств", ПространствоИменСхемы);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")
			И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыШтрихкодов = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Штрихкоды", "ПолныйПуть", Истина);
		Для Каждого СтрокаДанных Из СтрокаТаблицыШтрихкодов.Строки Цикл
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Штрихкод", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", СтрокаДанных.Строки[1].Значение, , ТекстОшибки);
			ЗначенияСвойства.Значение.Добавить(СтрокаДанных.Строки[0].Значение);
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")
			И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Свойства", "ПолныйПуть", Истина);
		Индекс = 0;
		Для Каждого СтрокаДанных Из СтрокаТаблицыСвойств.Строки Цикл
			Индекс = Индекс + 1;
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Свойство" + Индекс, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), , ТекстОшибки);
			ЗначенияСвойства.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьСвойства Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ЗначенияСвойств", ЗначенияСвойств, , ТекстОшибки);
	КонецЕсли;
	
	// Заполняем значения реквизитов
	ПоместитьДопДанныеСтрокиТаблицы(СтрокаДереваДанных, ИДТовара, ТекстОшибки, СтрокаДереваДанных.Значение, Товар);

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов") Тогда
		ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов")) Тогда
			СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.ЗначенияРеквизитов", "ПолныйПуть", Истина);
			Индекс = 0;
			Для Каждого СтрокаДанных Из СтрокаТаблицыСвойств.Строки Цикл
				Индекс = Индекс + 1;
				ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), Истина, ТекстОшибки);
				ЗначениеРеквизита.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
				ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Товар, "ЗначенияРеквизитов", ЗначенияРеквизитов, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")
			И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")) Тогда
		
		СтрокаТаблицыФайлов = СтрокаДереваДанных.Строки.Найти(
														"Товары.НомерСтроки.ПрисоединенныеФайлы",
														"ПолныйПуть",
														Истина);
		Для Каждого СтрокаДанных Из СтрокаТаблицыФайлов.Строки Цикл
			Товар.Картинка.Добавить(СтрокаДанных.Строки[1].Значение);
			Если Не МассивФайлов = Неопределено Тогда
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("АдресВременногоХранилища", СтрокаДанных.Строки[0].Значение);
				СтруктураДанных.Вставить("ИмяФайла",                 СтрокаДанных.Строки[1].Значение);
				СтруктураДанных.Вставить("ИдТовара",                 ИдТовара);
				МассивФайлов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТабЧастиТоварыДокументаCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки)
	
	ДополнительныеДанные = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ДополнительныеДанные", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЦенаПродажи") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЦенаПродажи");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "ЦенаПродажи";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаПродажи") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаПродажи");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "СуммаПродажи";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаВознаграждения") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаВознаграждения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "СуммаВознаграждения";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеДанные.ЗначениеРеквизита.Количество() > 0 Тогда
		Товар.ДополнительныеДанные = ДополнительныеДанные;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруПредложенияCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки)
	
	// заполняем реквизиты, которые есть в Предложении но нет в товаре
	
	Цены = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение.Цены", ПространствоИменСхемы);
	Цена = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение.Цены.Цена", ПространствоИменСхемы);
	
	ЗначениеЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
	Если ЗначениеЗаполнено(ЗначениеЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "ЦенаЗаЕдиницу", ЗначениеЦены, , ТекстОшибки);
	КонецЕсли;
	
	ТипЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТипЦены");
	Если Не ЗначениеЗаполнено(ТипЦены) Тогда
		ЗначениеИдТипаЦены = "---";
	Иначе
		ЗначениеИдТипаЦены = Строка(ТипЦены.УникальныйИдентификатор());
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Цена, "ИдТипаЦены", ЗначениеИдТипаЦены, , ТекстОшибки);
	
	ЗначениеВалютаЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ВалютаЦены");
	Если ЗначениеЗаполнено(ЗначениеВалютаЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "Валюта", ЗначениеВалютаЦены, , ТекстОшибки);
	КонецЕсли;
	
	ЗначениеКоличествоЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
	Если ЗначениеЗаполнено(ЗначениеКоличествоЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "МинКоличество", ЗначениеКоличествоЦены, , ТекстОшибки);
	КонецЕсли;
	
	ЗначениеЕдиницаЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
	Если ЗначениеЗаполнено(ЗначениеЕдиницаЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "Единица", ЗначениеЕдиницаЦены, , ТекстОшибки);
	КонецЕсли;
	
	КоэффициентЕдиницаЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
	Если ЗначениеЗаполнено(КоэффициентЕдиницаЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "Коэффициент", КоэффициентЕдиницаЦены, , ТекстОшибки);
	КонецЕсли;

	
	Цены.Цена.Добавить(Цена);
	Товар.Цены = Цены;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные = "")
	
	ЗаполнитьКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные);
	
	ЗаполнитьСвойстваКонтрагентаВДокументеCML(Контрагент, ВидКонтрагента, ТекстОшибки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование контейнера

Процедура ПодготовитьДанныеПоКарточке(ПрисоединенныйФайл, ДеревоКарточки, Зашифрован, ТребуетсяИзвещениеОПолучении)
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("Структура") Тогда
		ЭлектронныйДокумент = ПрисоединенныйФайл;
	Иначе
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл,"ВладелецФайла");
	КонецЕсли;
	
	ВидЭД          = ЭлектронныйДокумент.ВидЭД;
	ПризнакПодписи = ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Комментарий    = "";
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Структура") Тогда
		Если ЭлектронныйДокумент.Свойство("ДополнительнаяИнформация") Тогда
			Комментарий = ЭлектронныйДокумент.ДополнительнаяИнформация;
		КонецЕсли;
	КонецЕсли;
	
	ТипЭлементаВерсииЭД = ПрисоединенныйФайл.ТипЭлементаВерсииЭД;
	
	Если ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД)
		ИЛИ ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД)
		ИЛИ ПризнакПодписи Тогда
		
		Если ПризнакПодписи  Тогда
			// Подтверждение не имеет отдельной схемы ЭД, передается списком ЭП первичного ЭД.
			ВнешнийИдентификатор = ПрисоединенныйФайл.НомерЭД;
		Иначе
			ВнешнийИдентификатор = ПрисоединенныйФайл.ЭлектронныйДокументВладелец.НомерЭД;
		КонецЕсли;
		
		Если ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД)
			И (ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.Тип", "SpecOperator");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.Наименование", "tkc");
		КонецЕсли;
		
	Иначе
		ВнешнийИдентификатор = ПрисоединенныйФайл.НомерЭД; 
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Определение.ВнешнийИдентификатор",
		ВнешнийИдентификатор);
	
	ВидДокумента = "Other";
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ТипЭлементаВерсииЭД) Тогда
		
		Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			
			ВидДокумента = "Invoice";
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
				
				ВидДокумента = "ExpInvoiceAndPrimaryAccountingDocumentVendor";
			ИначеЕсли ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД Тогда
				
				ВидДокумента = "ExpInvoice";
			КонецЕсли;
			
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			ВидДокумента = "CorrectiveInvoice";
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
				
				ВидДокумента = "CorExpInvoiceAndPrimaryAccountingDocumentVendor";
			ИначеЕсли ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
				
				ВидДокумента = "CorExpInvoice";
			КонецЕсли;
			
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ВидДокумента = "PrimaryAccountingDocumentVendor";
			КонецЕсли;
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			ВидДокумента = "Statement";
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
				"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				
				ВидДокумента = "FormalizedStatementVendor";
			КонецЕсли;
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ВидДокумента = "PrimaryAccountingDocumentVendor";
			ИначеЕсли ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				ВидДокумента = "FormalizedWorkResultVendor";
			КонецЕсли;
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			ВидДокумента = "Consignment";
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
				"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				
				ВидДокумента = "FormalizedConsignmentVendor";
			КонецЕсли;
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ВидДокумента = "PrimaryAccountingDocumentVendor";
			ИначеЕсли ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				ВидДокумента = "FormalizedTradingVendor";
			КонецЕсли;
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			ВидДокумента = "Consignment";
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
				"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				
				ВидДокумента = "FormalizedConsignmentVendor";
			КонецЕсли;
			Если ТипЗнч(ЭлектронныйДокумент) <> Тип("Структура")
				И ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ВидДокумента = "CorPrimaryAccountingDocumentVendor";
			КонецЕсли;
			
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			
			ВидДокумента = "Consignment";
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			
			ВидДокумента = "Statement";
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			ВидДокумента = "Account";
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			
			ВидДокумента = СтрокаТипаДокументаПоПеречислению(ЭлектронныйДокумент.ТипДокумента);
			Комментарий = ЭлектронныйДокумент.Текст;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
				
				ВидДокумента = "FormalizedTradingCustomer";
			ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				
				ВидДокумента = "FormalizedWorkResultCustomer";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД Тогда
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
				
				ВидДокумента = "ExpInvoiceAndPrimaryAccountingDocumentCustomer";
			ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			
				ВидДокумента = "PrimaryAccountingDocumentCustomer";
			КонецЕсли;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				
				ВидДокумента = "CorExpInvoiceAndPrimaryAccountingDocumentCustomer";
			ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
				ВидДокумента = "CorPrimaryAccountingDocumentCustomer";
			КонецЕсли;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			
			ВидДокумента = "Statement";
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
				"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				
				ВидДокумента = "FormalizedStatementCustomer";
			КонецЕсли;
			
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель Тогда
			
			ВидДокумента = "Consignment";
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
				"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				
				ВидДокумента = "FormalizedConsignmentCustomer";
			КонецЕсли;
			
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВидДокумента = "Consignment";
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
				"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				
				ВидДокумента = "FormalizedConsignmentCustomer";
			КонецЕсли;
		ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
			"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			
			ВидДокумента = "ReceiveNotification";
		ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,	"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ЭлектронныйДокументВладелец, "ТипЭлементаВерсииЭД") = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				ВидДокумента = "SpecificationNotice";
			КонецЕсли;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			Если ПризнакПодписи Тогда
				ВидДокумента = "SpecificationNotice";
			Иначе
				ВидДокумента = "CancellationOffer";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Определение.Имя", ВидДокумента);
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Описание.Комментарий", СокрЛП(Комментарий));
	КонецЕсли;
	
	Если НЕ ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ТребуетсяПовторнаяПодпись = Истина;
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ТребуетсяПовторнаяПодпись = Истина;
		ИначеЕсли ПризнакПодписи ИЛИ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ПрисоединенныйФайл) Тогда
			ТребуетсяПовторнаяПодпись = Ложь;
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ТребуетсяПовторнаяПодпись = Ложь;
		ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТребуетсяПовторнаяПодпись = ЭлектронныйДокумент.ТребуетсяПодтверждение;
		Иначе
			ТребуетсяПовторнаяПодпись = ЭлектронныйДокумент.ТребуетсяПодтверждение;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Определение.ТребуетсяПовторнаяПодпись",
			ТребуетсяПовторнаяПодпись);
		
		Если ПрисоединенныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
			// Для ЭД вида "Уведомление об уточнении" и "Извещение о получении" необходимо сформировать
			// дополнительные данные, чтобы файл смог прочитаться на принимающей стороне.
			ИЛИ ПрисоединенныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ
			ИЛИ ПрисоединенныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда

			ДополнительныеДанные = Новый ТаблицаЗначений;
			ДополнительныеДанные.Колонки.Добавить("Имя");
			ДополнительныеДанные.Колонки.Добавить("Значение");
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Номер";
			НоваяСтрока.Значение = ?(ЗначениеЗаполнено(ЭлектронныйДокумент.НомерДокументаОтправителя),
				ЭлектронныйДокумент.НомерДокументаОтправителя, НСтр("ru ='Без номера'"));
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Зашифрован";
			НоваяСтрока.Значение = Зашифрован;
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ВерсияБЭД";
			НоваяСтрока.Значение = ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки();
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ПрикладноеРешение";
			НоваяСтрока.Значение = Метаданные.Имя;
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ВерсияПрикладногоРешения";
			НоваяСтрока.Значение = Метаданные.Версия;
			
			Если ЗначениеЗаполнено(Комментарий) Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "Комментарий";
				НоваяСтрока.Значение = СокрЛП(Комментарий);
			КонецЕсли;
			
			Если Не ТребуетсяИзвещениеОПолучении Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "НеТребуетсяИзвещение";
				НоваяСтрока.Значение = Истина;
			КонецЕсли;
			
			// Добавим в карточку новую версию формата ЭД.
			Если ПрисоединенныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда
				
				АктуальнаяВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(ПрисоединенныйФайл.ВладелецФайла.ВидЭД);
				Если ЗначениеЗаполнено(АктуальнаяВерсияФормата) Тогда
					НоваяСтрока = ДополнительныеДанные.Добавить();
					НоваяСтрока.Имя = "ВерсияФормата";
					НоваяСтрока.Значение = АктуальнаяВерсияФормата;
				КонецЕсли;
			КонецЕсли;
			
			// Для случая прямого обмена в доп. данные добавляем реквизит "ВерсияФорматаПакета".
			ВерсияФорматаПакета = ВерсияФорматаВСтроку(ОбменСКонтрагентамиСлужебный.ВерсияПакетаЭД(ПрисоединенныйФайл));
			Если ЗначениеЗаполнено(ВерсияФорматаПакета) Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "ВерсияФорматаПакета";
				НоваяСтрока.Значение = ВерсияФорматаПакета;
			КонецЕсли;
			
			// Получим актуальный тип документа (состав типов расширился, для обратной совместимости, старые типы передаются
			// по прежнему в поле тип, а для новых конфигураций - в доп.данных).
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				ВидДокумента = СтрокаТипаДокументаПоПеречислению(ЭлектронныйДокумент.ТипДокумента, Истина);
			КонецЕсли;
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "DocumentType";
			НоваяСтрока.Значение = ВидДокумента;
			
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				МассивДокументов = Новый Массив;
				Для Каждого СтрокаОснования Из ЭлектронныйДокумент.ДокументыОснования Цикл
					Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
						ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
						МассивДокументов.Добавить(СтрокаОснования.ДокументОснование);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивДокументов.Количество() > 0 Тогда
					
					Идентификаторы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДокументов,"УникальныйИД");
					
					Для Каждого УникальныйИД Из Идентификаторы Цикл
						Если Не ПустаяСтрока(УникальныйИД.Значение) Тогда
							СтрокаТЗ = ДополнительныеДанные.Добавить();
							СтрокаТЗ.Имя = "УникальныйИДОснования";
							СтрокаТЗ.Значение = УникальныйИД.Значение;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ПрисоединенныйФайл.ДополнительнаяИнформация) Тогда
				СтрокаТЗ = ДополнительныеДанные.Добавить();
				СтрокаТЗ.Имя = "Комментарий";
				СтрокаТЗ.Значение = СокрЛП(ПрисоединенныйФайл.ДополнительнаяИнформация);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки,
					"Описание.Комментарий", СокрЛП(ПрисоединенныйФайл.ДополнительнаяИнформация));
			КонецЕсли;
			
			Если ЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Количество() > 0 Тогда
				// В LinkedDocument передаются идентификаторы (НомерЭД), используются на стороне Оператора ЭДО
				// для объединения связанных документов. Документы считаются взаимосвязанными, если выполняется
				// условие: ИД документооборота (DocFlow.ID в файле meta.xml) ЭД1 = ИД указанному в LinkedDocument ЭД2.
				// Поэтому в LinkedDocument помещаем реквизит УникальныйИД, указанный в ЭД, у которого ВладелецФайла -
				// - документ ИБ с УИД = Идентификатору из ИдентификаторыОснованийВладельцаФайла.
				ТаблицаИдентификаторов = ЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Выгрузить();
				ТаблицаИдентификаторовЭД = ЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Выгрузить();
				ТаблицаИдентификаторовЭД.Свернуть("ИдентификаторЭДДокументаОснования");
				ТаблицаИдентификаторов.Свернуть("ИдентификаторДокументаОснования");
				Для Каждого СтрокаИдентификатора Из ТаблицаИдентификаторовЭД Цикл
					Если ЗначениеЗаполнено(СтрокаИдентификатора.ИдентификаторЭДДокументаОснования) Тогда
						СтрокаТЗ = ДополнительныеДанные.Добавить();
						СтрокаТЗ.Имя = "LinkedDocument";
						СтрокаТЗ.Значение = СокрЛП(СтрокаИдентификатора.ИдентификаторЭДДокументаОснования); // для Такском
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаИдентификатора Из ТаблицаИдентификаторов Цикл
					Если ЗначениеЗаполнено(СтрокаИдентификатора.ИдентификаторДокументаОснования) Тогда
						СтрокаТЗ = ДополнительныеДанные.Добавить();
						СтрокаТЗ.Имя = "ParentDocument";
						СтрокаТЗ.Значение = СокрЛП(СтрокаИдентификатора.ИдентификаторДокументаОснования); // для 1С
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоКарточки, ДополнительныеДанные, "Описание.ДополнительныеДанные");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанных = ОбменСКонтрагентамиСлужебный.ЗначенияРеквизитов(ЭлектронныйДокумент.Организация,
		"Наименование, ИНН, КПП");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.Наименование",
		СтруктураДанных.Наименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.ИНН",
		СтруктураДанных.ИНН);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.КПП",
		СтруктураДанных.КПП);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.НомерДоговора",
		НСтр("ru ='Договор по-умолчанию'"));
		
	Если ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.ИД",
			ПрисоединенныйФайл.Отправитель);
	Иначе
		Если ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.ИД",
				ПрисоединенныйФайл.ПолучательЭД);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.ИД",
				ПрисоединенныйФайл.ОтправительЭД);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.Тип")) Тогда
		Если ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда

			
			СтруктураДанных = ОбменСКонтрагентамиСлужебный.ЗначенияРеквизитов(ЭлектронныйДокумент.Контрагент,
				"Наименование, ИНН, КПП");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.Наименование",
				СтруктураДанных.Наименование);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.ИНН",
				СтруктураДанных.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.КПП",
				СтруктураДанных.КПП);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.НомерДоговора",
				НСтр("ru ='Договор по-умолчанию'"));
			
			Если ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.ИД",
					ПрисоединенныйФайл.Получатель);
			Иначе
				Если ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.ИД",
						ПрисоединенныйФайл.ОтправительЭД);
				Иначе
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.ИД",
						ПрисоединенныйФайл.ПолучательЭД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Описание.Заголовок", Строка(ВидЭД));
	
	Дата = "";
	Если ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		Дата = ЭлектронныйДокумент.ДатаЭД;
	Иначе
		Дата = ?(ПризнакПодписи, ТекущаяДатаСеанса(), ПрисоединенныйФайл.ДатаСоздания);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Описание.Дата", Дата);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоТранспортнойИнформации(ПрисоединенныйФайл, СтруктураФайловЭД, ДеревоТранспортнойИнформации)
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("Структура") Тогда
		ЭлектронныйДокумент = ПрисоединенныйФайл;
	Иначе
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл,"ВладелецФайла");
	КонецЕсли;
	
	ВидЭД          = ЭлектронныйДокумент.ВидЭД;
	ПризнакПодписи = ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	ТипЭлементаВерсииЭД = ПрисоединенныйФайл.ТипЭлементаВерсииЭД;
	
	Если ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД) //ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД) //ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
		ИЛИ ПризнакПодписи Тогда
		
		ИДДокументооборота     = ПрисоединенныйФайл.УникальныйИД;
	Иначе
		Если ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ИДДокументооборота = ЭлектронныйДокумент.НомерЭД;
		Иначе
			// Изменим заполнение уникального идентификатора для документооборота при использовании версии регламента 20.
			Если ЭлектронныйДокумент.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				ИДДокументооборота = ПрисоединенныйФайл.УникальныйИД;
			Иначе
				ИДДокументооборота = Строка(ПрисоединенныйФайл.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТранспортнойИнформации, "ИД", ИДДокументооборота);
	
	Если ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		КодРегламента = "Nonformalized";
		КодТранзакции = "MainDocument";
	Иначе
		КодРегламента = ПолучитьКодРегламента(ЭлектронныйДокумент, ПрисоединенныйФайл);
		КодТранзакции = ПолучитьКодТранзакции(ПрисоединенныйФайл, КодРегламента, ПризнакПодписи);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТранспортнойИнформации, "Документ.КодРегламента", КодРегламента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТранспортнойИнформации, "Документ.КодТранзакции", КодТранзакции);
	
	// Загрузим файл электронного документа.
	Если СтруктураФайловЭД.Свойство("ГлавныйФайл") И ЗначениеЗаполнено(СтруктураФайловЭД.ГлавныйФайл) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТранспортнойИнформации, "Документ.ГлавныйФайл.Путь",
			СтруктураФайловЭД.ГлавныйФайл);
	КонецЕсли;
	
	// Загрузим подписи электронного документа в дерево транспортной информации.
	Если СтруктураФайловЭД.Свойство("ГлавныйФайлПодписи") И СтруктураФайловЭД.ГлавныйФайлПодписи.Количество() > 0 Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоТранспортнойИнформации, СтруктураФайловЭД.ГлавныйФайлПодписи,
			"Документ.ГлавныйФайлПодписи");
	КонецЕсли;
	
	// Загрузим файл дополнительной информации.
	Если СтруктураФайловЭД.Свойство("ДополнительныйФайл") И ЗначениеЗаполнено(СтруктураФайловЭД.ДополнительныйФайл) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТранспортнойИнформации, "Документ.ДополнительныйФайл.Путь",
			СтруктураФайловЭД.ДополнительныйФайл);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД)
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ДатаФормирования", СтруктураЭД.ДатаЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсияСхемы", СтруктураЭД.ВерсияСхемы);
	ВставитьЗначениеВДерево(ДеревоДанных, "Ид", СтруктураЭД.НомерЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД", СтруктураЭД.ВидЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
	
	ВставитьЗначениеВДерево(ДеревоДанных, "Исполнитель", СтруктураЭД.Отправитель);
	
КонецПроцедуры

Функция УдалитьКаталогТоваровСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, ДатаФормирования, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Наименование, Номенклатура, БазоваяЕдиница, УпаковкаПоОКЕИ");

	Возврат СтруктураПараметров;
	
КонецФункции

Процедура СохранитьНеизвестныйПакет(ДвоичныеДанныеЭлемента, ПрофильНастроекЭДО, ВнешнийУИД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                    = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата               = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета       = Перечисления.СтатусыПакетовЭД.Неизвестный;
		ПакетЭД.Направление        = Перечисления.НаправленияЭД.Входящий;
		ПакетЭД.Организация        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
		ПакетЭД.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
		ПакетЭД.СпособОбменаЭД     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД");
		ПакетЭД.ВнешнийУИД         = ВнешнийУИД;
		ПакетЭД.Записать();
		
		Идентификатор = Строка(Новый УникальныйИдентификатор());
		
		ИмяФайла = "EDI_" + Идентификатор;
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД.Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
			ПараметрыФайла, АдресВХранилище);

	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Создание нового ПакетаЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры


Функция ЗаполнитьДанныеПокупателяПродавцаФНСДляСФ(УчастникXDTO, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника")) Тогда
		
		ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);
		
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
			
			СвФЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ИНН, , ТекстОшибки);
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
			Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
			Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО,  , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
			Наименование = Фамилия + " " + Имя + " " + Отчество;
		Иначе
			СвЮЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", Наименование, , ТекстОшибки);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ИНН, , ТекстОшибки);
			КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидУчастника + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			ЗаполнитьАдрес(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы, ВидУчастника);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура ПоместитьДанныеКомиссионераВДопДанные(ДеревоДанных, ПространствоИменСхемы, ТекстОшибки)
	
	ДанныеЗаполнены = Ложь;
	СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
	ДанныеПосредника = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
	Если ЗаполнитьДанныеПокупателяПродавцаФНСДляСФ(ДанныеПосредника, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Комиссионер") Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДанныеПосредника);
		СтрXML = ЗаписьXML.Закрыть();
		НачПоз = Найти(СтрXML, "<ИдСв>");
		КолСимв = Найти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
		СтрXML = Сред(СтрXML, НачПоз, КолСимв);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			СтрокаДопДанных, "ДопДанные.Подписанные.ДанныеКомиссионера", СтрXML);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	// Для совместимости с более ранними версиями БЭД добавим данные о комиссионере в виде 3-х реквизитов:
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника.ФЛ.ИНН");
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника.ФЛ.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника.ФЛ.Отчество");
		Наименование = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
		КПП = "";
	Иначе
		Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комиссионер.ТипУчастника.ЮЛ.КПП");
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.КомиссионерНаименование", Наименование);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.КомиссионерИНН", ИНН);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.КомиссионерКПП", КПП);
	
КонецПроцедуры

Функция ЗаполнитьДанныеГрузоОтправителяПолучателяФНСДляСФ(УчастникXDTO, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Наименование")) Тогда
		
		ИдСв = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);
		
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Наименование") = "ФИОИП" Тогда
			
			ФИО = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП.ФИОИП", ПространствоИменСхемы);
			Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Наименование.ФИОИП.Фамилия");
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
			Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Наименование.ФИОИП.Имя");
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
			Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Наименование.ФИОИП.Отчество");
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(ИдСв, "ФИОИП",  ФИО, Истина, ТекстОшибки);
		Иначе
			Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Наименование.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(ИдСв, "НаимОрг", Наименование, Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "НаимГОП", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидУчастника + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			ЗаполнитьАдрес(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы, ВидУчастника);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

Функция ДеревоКартинок(ИмяФайлаКартинок)
	
	ДеревоКартинок = Новый ДеревоЗначений();
	ДеревоКартинок.Колонки.Добавить("ИдентификаторТовара");
	ДеревоКартинок.Колонки.Добавить("ИмяФайла");
	ДеревоКартинок.Колонки.Добавить("АдресВременногоХранилища");
	ВремКаталог = ЭлектронноеВзаимодействиеСлужебный.ТекущийКаталогВременныхФайлов();
	ВремКаталог = ВремКаталог + "\" + Строка(Новый УникальныйИдентификатор);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог, "*");
	ЧтениеZIPФайла = Новый ЧтениеZipФайла(ИмяФайлаКартинок);
	ЧтениеZIPФайла.ИзвлечьВсе(ВремКаталог);
	Папки = НайтиФайлы(ВремКаталог, "*", Ложь);
	Для Каждого Папка Из Папки Цикл
		СтрокаТовара = ДеревоКартинок.Строки.Добавить();
		СтрокаТовара.ИдентификаторТовара = Папка.Имя;
		Файлы = НайтиФайлы(ВремКаталог + "\" + Папка.Имя + "\", "*");
		Для Каждого Файл Из Файлы Цикл
			СтрокаКартинки = СтрокаТовара.Строки.Добавить();
			СтрокаКартинки.ИмяФайла = Файл.Имя;
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
			СтрокаКартинки.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла,
			                                                                        Новый УникальныйИдентификатор);
		КонецЦикла
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
	Возврат  ДеревоКартинок;
	
КонецФункции

Функция РеквизитыРасчетногоСчета(Знач Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	РеквизитыСчета = Новый Структура;
	
	Пока СтрДлина(Элемент) > 0 Цикл
		
		ПозицияРазделителя = Найти(Элемент, "#");
		РеквизитЗначение = Лев(Элемент, ПозицияРазделителя );
		Элемент = СтрЗаменить(Элемент, РеквизитЗначение, "");
		
		Позиция = Найти(РеквизитЗначение, "&");
		
		Реквизит = Лев(РеквизитЗначение, Позиция - 1);
		
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение, Реквизит, "");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"&","");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"#","");
		
		РеквизитыСчета.Вставить(Реквизит, РеквизитЗначение);
		
	КонецЦикла;
	
	Возврат РеквизитыСчета;
	
КонецФункции

Функция ВерсияФорматаВСтроку(ВерсияФормата)
	
	Если ВерсияФормата = Перечисления.ВерсииФорматаПакетаЭД.Версия20 Тогда
		Результат = "2";
	ИначеЕсли ВерсияФормата = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
		Результат = "3";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр предложений об аннулировании

// Процедура заполняет табличный документ Уведомление об уточнении.
//
Процедура ЗаполнитьТабличныйДокументПредложениеОбАннулировании(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Аннулирование";
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_Аннулирование_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ПрочитатьПредложениеОбАннулированииXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",          ЭД.Документ.СвПредАн.СведАнФайл.ИмяАнФайла);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",        ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",       ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.НапрПредАн));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстУточнения",    ЭД.Документ.СвПредАн.ТекстПредАн);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.УчастЭДО.ИдУчастЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.НапрПредАн.ИдУчастЭДО);
	
КонецПроцедуры

Функция ПолучитьДанныеПредложенияОбАннулированииДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	ДанныеЗаполненияШапки.Вставить("Получатель",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	ДанныеЗаполненияШапки.Вставить("ТекстУточнения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ТекстУточнения"));
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ТаблицаИзСтрокиСРазделителем(Знач ЗначенияРеквизита)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Элемент Из ЗначенияРеквизита Цикл
		
		ПозицияНомерСтроки = Найти(Элемент, "_");
		НомерСтроки = Лев(Элемент, ПозицияНомерСтроки - 1);
		ДанныеСтроки.Вставить("НомСтр", НомерСтроки);

		Элемент = СтрЗаменить(Элемент, НомерСтроки + "_", "");
		
		Пока СтрДлина(Элемент) > 0 Цикл
			
			Позиция = Найти(Элемент, "#");
			
			РеквизитИЗначение = Лев(Элемент, Позиция);
			Элемент = СтрЗаменить(Элемент, РеквизитИЗначение, "");
			
			Разделитель = Найти(РеквизитИЗначение, "&");
			
			НаименованиеРеквизита = Лев(РеквизитИЗначение, Разделитель - 1);
			
			ЗначениеРеквизита = СтрЗаменить(РеквизитИЗначение, НаименованиеРеквизита, "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "&", "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#", "");
			
			ДанныеСтроки.Вставить(НаименованиеРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		СоздатьКолонкиТаблицы(ДанныеСтроки, ТаблицаРезультат);
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("НомСтр");

	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура СоздатьКолонкиТаблицы(СтруктураСКолонками, Таблица)
	
	Для Каждого КлючЗначение Из СтруктураСКолонками Цикл
		Если Не Таблица.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица.Колонки.Добавить(КлючЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСФПоДокументамОснования(МассивСФ, МассивОснований, НаправлениеЭД)
	
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ИмяДокументаСФ = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("СчетФактураВыданныйВМетаданных");
	Иначе
		ИмяДокументаСФ = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("СчетФактураПолученныйВМетаданных");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяДокументаСФ) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеСФ = Метаданные.Документы[ИмяДокументаСФ];
	
	Если Не МетаданныеСФ.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапросаКТабличнойЧасти(ИмяДокументаСФ);
		
	ИначеЕсли Не МетаданныеСФ.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапросаКШапке(ИмяДокументаСФ);
		
	КонецЕсли;
	
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ТекстЗапроса = ТекстЗапроса 
		+ " ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ВТ_СФ.СФ
		|			ИЗ
		|				ВТ_СФ КАК ВТ_СФ)";
	Иначе
		ТекстЗапроса = ТекстЗапроса 
		+ " ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ВТ_СФ.СФ
		|			ИЗ
		|				ВТ_СФ КАК ВТ_СФ)";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументыОснования", МассивОснований);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСФ.Добавить(Выборка.Ссылка)
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаКТабличнойЧасти(ИмяСФ)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК СФ
	|ПОМЕСТИТЬ ВТ_СФ
	|ИЗ
	|	Документ.%1.ДокументыОснования КАК Т
	|ГДЕ
	|	Т.ДокументОснование В(&ДокументыОснования);";
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяСФ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКШапке(ИмяСФ)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК СФ
	|ПОМЕСТИТЬ ВТ_СФ
	|ИЗ
	|	Документ.%1 КАК Т
	|ГДЕ
	|	Т.ДокументОснование В(&ДокументыОснования);";
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяСФ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура НайтиЗначениеВСписке(ЗначениеЭлемента, ИмяЭлемента, СписокЭлементов)
	
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл
		Если ВРег(ЭлементСписка.Представление) = ВРег(ИмяЭлемента) Тогда
			ЗначениеЭлемента = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСтрокуТоваровCML(ТоварXDTO, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка)
	
	НаимТовара = "";
	ИдТовара = "";
	
	ЕстьДопРеквизиты = Ложь;
	ЦенаВключаетНДС = Неопределено;
	ЭлементСумма = Неопределено;
	СуммаНДС = 0;
	ЕстьСуммаПродажи = Ложь;
	
	Организация = ПоляПоискаТовара.Организация;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Организация", Организация);

	НомерСтроки = ПоляПоискаТовара.НомерСтроки;
	ПрочитатьДопДанныеСтрокиТЧ(ТоварXDTO, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
	
	// Номенклатура
	Для Каждого ТекСвойство Из ТоварXDTO.Свойства() Цикл
		
		ЗначениеСвойства = ТоварXDTO[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		//// Разберем свойства Товара
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			ИдТовара = ЗначениеСвойства;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			Артикул = ЗначениеСвойства;
			
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			НаимТовара = ЗначениеСвойства;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				СвойстваЕдиницы = Новый Структура;
				СвойстваЕдиницы.Вставить("Код",          ЗначениеСвойства.Код);
				
				Если ЗначениеСвойства.Свойства().Получить("Наименование") <> Неопределено Тогда
					НаименованиеБазовойВеличины = ЗначениеСвойства.Наименование;
					СвойстваЕдиницы.Вставить("Наименование", ЗначениеСвойства.Наименование);
				КонецЕсли;
				
				Если ЗначениеСвойства.Свойства().Получить("НаименованиеКраткое") <> Неопределено Тогда
					НаименованиеБазовойВеличины = ЗначениеСвойства.НаименованиеКраткое;
					СвойстваЕдиницы.Вставить("Наименование", ЗначениеСвойства.НаименованиеКраткое);
				КонецЕсли;
				
				Если ЗначениеСвойства.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
					СвойстваЕдиницы.Вставить("НаименованиеПолное", ЗначениеСвойства.НаименованиеПолное);
				КонецЕсли;
				
				Если ЗначениеСвойства.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
					СвойстваЕдиницы.Вставить("МеждународноеСокращение", ЗначениеСвойства.МеждународноеСокращение);
				КонецЕсли;
				
				ЕдиницаИзмерения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗначениеСвойства.Код,
					СвойстваЕдиницы);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗначениеСвойства.Код, НаименованиеБазовойВеличины,
					ЕдиницаИзмерения, СвойстваЕдиницы, ДеревоРазбора, Ошибка);
					
				ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Единица") Тогда
			
			СвойстваЕдиницы = Новый Структура;
			СвойстваЕдиницы.Вставить("Код",          Строка(ЗначениеСвойства));
			
			ЕдиницаИзмерения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗначениеСвойства),
				СвойстваЕдиницы);
			НаименованиеЕдиницы = Неопределено;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				НаименованиеЕдиницы = ЕдиницаИзмерения.Наименование;
				СвойстваЕдиницы.Вставить("Наименование", НаименованиеЕдиницы);
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗначениеСвойства), НаименованиеЕдиницы,
				ЕдиницаИзмерения, СвойстваЕдиницы, ДеревоРазбора, Ошибка);
			
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				Для Каждого ТекСв Из ЗначениеСвойства.Свойства() Цикл
					Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
						Налоги = ЗначениеСвойства.ПолучитьСписок(ТекСв);
						Для Каждого Налог Из Налоги Цикл
							Если ВРег(Налог.Наименование) = "НДС" Тогда
								СписокТЧ.Добавить(Налог.Ставка,"СтавкаНДС");
								СуммаНДС = Число(Налог.Сумма);
								СписокТЧ.Добавить(СуммаНДС, "СуммаНДС");
								Если ТипЗнч(Налог.УчтеноВСумме) = Тип("Булево") Тогда
									ЦенаВключаетНДС = Налог.УчтеноВСумме;
									СписокТЧ.Добавить(ЦенаВключаетНДС, "ЦенаВключаетНДС");
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				Для Каждого ТекСв Из ЗначениеСвойства.Свойства() Цикл
					Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
						Скидки = ЗначениеСвойства.ПолучитьСписок(ТекСв);
						Для Каждого Скидка Из Скидки Цикл
							
							НаименованиеСкидки = Скидка.Наименование;
							
							СписокТЧ.Добавить(НаименованиеСкидки,"НаименованиеСкидки");
							СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
							
							ПроцентСкидки = Скидка.Процент;
							СписокТЧ.Добавить(ПроцентСкидки,"ПроцентСкидки");
							
							СкидкаУчтеноВСумме = Скидка.УчтеноВСумме;
							СписокТЧ.Добавить(СкидкаУчтеноВСумме,"СкидкаУчтеноВСумме");
							
							КомментарийКСкидке = Скидка.Комментарий;
							СписокТЧ.Добавить(КомментарийКСкидке,"КомментарийКСкидке");
							
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
			// Запомним кол-во упаковок, в которых отгружали
			СписокТЧ.Добавить(Число(ЗначениеСвойства), "КоличествоУпаковок");
			// Пересчитаем с учетом коэффициента,
			// если есть свойство ЕдиницаИзмерения, получим значение.
			Коэф = "";
			Если ТоварXDTO.Единица <> Неопределено Тогда
				Коэф = ТоварXDTO.Коэффициент;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Коэф) Тогда
				Коэф = 1;
			КонецЕсли;
			СписокТЧ.Добавить(Коэф, "Коэффициент");
			СписокТЧ.Добавить(Число(ЗначениеСвойства) * Коэф, "Количество");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			Для Каждого ЭлементДанных Из ЗначениеСвойства Цикл
				МассивЗначений = Новый Массив;
				Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					МассивЗначений.Добавить(ЭлементЗначения)
				КонецЦикла;
				СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
			КонецЦикла;
			
			ПоляПоискаТовара.Вставить("ДопРеквизиты", СтруктураДопРеквизитов);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаЗаЕдиницу") Тогда
			СписокТЧ.Добавить(ЗначениеСвойства, "Цена");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Сумма") Тогда
			ЭлементСумма = СписокТЧ.Добавить(Число(ЗначениеСвойства), "Сумма");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЗначенияРеквизитов") Тогда
			
			ЗначениеСвойства = ТоварXDTO[ТекСвойство.Имя];
			ДопРеквизиты = Новый Структура;
			Если ЗначениеЗаполнено(Организация) Тогда
				ДопРеквизиты.Вставить("Организация", Организация);
			КонецЕсли;
			
			ПрочитатьСписокЗначенийРеквизитовCML(ЗначениеСвойства.ЗначениеРеквизита, СписокТЧ, Ошибка, ДопРеквизиты);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеДанные") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			Для Каждого ЭлементДанных Из ЗначениеСвойства.ЗначениеРеквизита Цикл
				Если ЭлементДанных.Наименование = "ЦенаПродажи" Тогда
					СписокТЧ.Добавить(Число(ЭлементДанных.Значение[0]), "ЦенаПродажи");
				КонецЕсли;
				
				Если ЭлементДанных.Наименование = "СуммаПродажи" Тогда
					СписокТЧ.Добавить(Число(ЭлементДанных.Значение[0]), "СуммаПродажи");
					ЕстьСуммаПродажи = Истина;
				КонецЕсли;
				
				Если ЭлементДанных.Наименование = "СуммаВознаграждения" Тогда
					СписокТЧ.Добавить(Число(ЭлементДанных.Значение[0]), "СуммаВознаграждения");
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеЗначенияРеквизитов") Тогда
			Для Каждого ЭлементДанных Из ЗначениеСвойства.ЗначениеРеквизита Цикл
				Если ЭлементДанных.Наименование = "ИдПокупателя" И ЗначениеЗаполнено(ЭлементДанных.Значение[0]) Тогда
					СтрокиКонтрагентов = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
					СтрокаПокупателя = СтрокиКонтрагентов.Строки.Найти(ЭлементДанных.Значение[0], "ИД", Истина);
					Если СтрокаПокупателя <> Неопределено Тогда
						СписокТЧ.Добавить(СтрокаПокупателя.ИндексСтроки, "Покупатель");
					Иначе
						СписокТЧ.Добавить(Неопределено, "Покупатель");
					КонецЕсли;
					СписокТЧ.Добавить(ЭлементДанных.Значение[0], "ИдПокупателя");
				Иначе
					СписокТЧ.Добавить(ЭлементДанных.Значение[0], ЭлементДанных.Наименование);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			СписокТЧ.Добавить(ЗначениеСвойства, ТекСвойство.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ЭлементСумма) = Тип("ЭлементСпискаЗначений") Тогда
		Если Не ЕстьСуммаПродажи Тогда
			Сумма = ЭлементСумма.Значение;
			Если ЦенаВключаетНДС = Истина Тогда
				СписокТЧ.Добавить(Сумма, "СуммаСНДС");
				ЭлементСумма.Значение = Сумма - СуммаНДС;
			ИначеЕсли ЦенаВключаетНДС = Ложь Тогда
				СписокТЧ.Добавить(Сумма + СуммаНДС, "СуммаСНДС");
			Иначе
				СписокТЧ.Добавить(Сумма, "СуммаСНДС");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдТовара) Тогда
		НайтиЗначениеВСписке(ИдТовара, "Ид", СписокТЧ);
	КонецЕсли;
	
	ПоляПоискаТовара.Наименование= НаимТовара;
	ПоляПоискаТовара.Ид= ИдТовара;
	ПоляПоискаТовара.Артикул = Артикул;
	
КонецПроцедуры

Процедура НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ)
	
	ИдТовара = ПоляПоискаТовара.Ид;
	Если ЭтоСоставнойИД(ИдТовара) Тогда
		
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		ИДДляПоиска = СтруктураИд.ИдТовара;
		
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
		
	Иначе
		ИДДляПоиска = ИдТовара;
	КонецЕсли;
	
	Номенклатура = ЭлементСправочникаПоИД("Номенклатура", ИДДляПоиска);
	ПоляПоискаТовара.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

Процедура НайтиНоменклатуруПоставщикаТЧ(ПоляПоискаТовара, СписокТЧ, НовыйЭД, ДеревоРазбора, ЭД, Ошибка)
	
	// Номенклатура поставщиков.
	РеквизитыНоменклатурыПоставщика = Новый Структура;
	ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
	ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
	
	Ид = ПоляПоискаТовара.ИД;
	РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
	РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", Ид);
	
	Артикул = ПоляПоискаТовара.Артикул;
	Если ЗначениеЗаполнено(Артикул) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ПоляПоискаТовара.Артикул);
	КонецЕсли;
	
	Наименование = ПоляПоискаТовара.Наименование;
	Если ЗначениеЗаполнено(Наименование) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	ЕдиницаИзмерения = ПоляПоискаТовара.ЕдиницаИзмерения;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	ДопРеквизиты = Неопределено;
	Если ПоляПоискаТовара.Свойство("ДопРеквизиты", ДопРеквизиты) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
	КонецЕсли;
	
	НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
		РеквизитыНоменклатурыПоставщика, ЭД.Ид);
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Ид, Наименование, НоменклатураПоставщика,
		РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
	
	Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
		ПоляПоискаТовара.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
	КонецЕсли;
	
	СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
	ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(ПоляПоискаТовара, СтруктураРеквизитовТовара, ЭД.Ид);
	
	Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
	
	ПоляПоискаТовара.Вставить("Номенклатура", Номенклатура);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
		СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
		СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуТабличнойЧасти(ДеревоРазбора, НовыйЭД, РеквизитыНоменклатуры, СписокТЧ, Ошибка)

	НаимТовара = РеквизитыНоменклатуры.Наименование;
	ИдТовара = РеквизитыНоменклатуры.Ид;
	Номенклатура = РеквизитыНоменклатуры.Номенклатура;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
		
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");

	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);

КонецПроцедуры

Процедура ЗаполнитьБанковскийСчет(Продавец, ДеревоДанных)
	
	НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета");
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		
		ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
		
		РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		
		// заполняем расчетный счет
		РасчетныйСчет.НомерСчета = НомерСчета;
		
		// заполняем банк
		Банк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
			
		БикБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК", Ложь);
		БанкЗаполнен = Ложь;
		Если ЗначениеЗаполнено(БикБанка) Тогда
			БанкЗаполнен = Истина;
			Банк.БИК = БикБанка;
		КонецЕсли;
		
		СчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", Ложь);
		Если ЗначениеЗаполнено(СчетКорреспондентский) Тогда	
			Банк.СчетКорреспондентский = СчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование", Ложь);
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Банк.Наименование = НаименованиеБанка;
		КонецЕсли;
		
		// заполняем банк корреспондент
		
		БикКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК");
		
		БанкКорр = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		БанкКоррЗаполнен = Ложь;
		Если ЗначениеЗаполнено(БикКорБанка) Тогда
			БанкКоррЗаполнен = Истина;
			БанкКорр.БИК = БикКорБанка;
		КонецЕсли;
		
		КорСчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский");
		Если ЗначениеЗаполнено(КорСчетКорреспондентский) Тогда
			БанкКорр.СчетКорреспондентский = КорСчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование");
		Если ЗначениеЗаполнено(НаименованиеКорБанка) Тогда
			БанкКорр.Наименование =  НаименованиеКорБанка;
		КонецЕсли;
		
		Если БанкЗаполнен Тогда
			РасчетныйСчет.Банк = Банк;
		КонецЕсли;
		
		Если БанкКоррЗаполнен Тогда
			РасчетныйСчет.БанкКорреспондент = БанкКорр;
		КонецЕсли;
		
		Продавец.РасчетныйСчет = РасчетныйСчет;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные = "")
	
	ЗаполнитьСвойстваКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные);
	
	БанковскиеРеквизиты = Неопределено;
	ЗаполнитьРеквизитыСчетаКонтрагента(БанковскиеРеквизиты, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки);
	
	Если ТипЗнч(БанковскиеРеквизиты) = Тип("ОбъектXDTO") Тогда
		
		ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ПространствоИменСхемы);
		
		РасчетныеСчета.РасчетныйСчет.Добавить(БанковскиеРеквизиты);

		ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваКонтрагентаВДокументеCML(Контрагент, ВидКонтрагента, ТекстОшибки)
	
	Если Контрагент.Свойства().Получить("Роль") <> Неопределено
		И Найти(ВидКонтрагента, ".") = 0 Тогда
		ЗаполнитьСвойствоXDTO(Контрагент, "Роль", ВидКонтрагента, Истина, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСчетаКонтрагента(БанковскиеРеквизиты, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки)
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет")) Тогда
		
		ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
		
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		СвБанк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		
		НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", НомерСчета, Истина,ТекстОшибки);
		КонецЕсли;
		
		НаимБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НаимБанк");
		БИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.БИК");
		Если ЗначениеЗаполнено(НаимБанк) Тогда
			ЗаполнитьСвойствоXDTO(СвБанк, "Наименование", НаимБанк, ,ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(БИК) Тогда
			ЗаполнитьСвойствоXDTO(СвБанк, "БИК", БИК, ,ТекстОшибки);
		КонецЕсли;
			
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Банк", СвБанк, Истина, ТекстОшибки);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные = "");
	
	// Реквизиты используются для передачи данных конечного Покупателя из отчета Комиссионера о продажах:
	ИНН = "";
	КПП = "";
	Наименование = "";
	ДопДанные = Новый Структура;
	//
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника")) Тогда
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника") = "ФЛ" Тогда
			Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ПолноеНаименование");
			ЗаполнитьСвойствоXDTO(Контрагент, "ПолноеНаименование", Наименование, Истина, ТекстОшибки);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ИНН");
			ЗаполнитьСвойствоXDTO(Контрагент, "ИНН", ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Фамилия",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Фамилия"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Имя",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Имя"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Отчество", 
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Отчество"), , ТекстОшибки);
		Иначе
			Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(Контрагент, "ОфициальноеНаименование", Наименование, Истина, ТекстОшибки);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(Контрагент, "ИНН", ИНН, Истина, ТекстОшибки);
			КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(Контрагент, "КПП", КПП, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ИдКонтрагента = ИНН + ?(ЗначениеЗаполнено(КПП), "_" + КПП, "");
		ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, , ТекстОшибки);
		ДопДанные.Вставить("Наименование", Наименование);
		ДопДанные.Вставить("ИНН", ИНН);
		ДопДанные.Вставить("КПП", КПП);
		ДопДанные.Вставить("ИД", ИдКонтрагента);
	КонецЕсли;
	
	ПространствоИменСхемы = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидКонтрагента + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			АдресТип = ПолучитьОбъектТипаCML("Адрес", ПространствоИменСхемы);
			// Если адрес структурированный заполняем Адресное поле
			// если нет - только представление.
			Если Адрес.Значение = "Структурированный" Тогда
				Представление = "";
				Для Каждого СтрокаСАдресом Из Адрес.Строки[0].Строки Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаСАдресом.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					АдресноеПоле = ПолучитьОбъектТипаCML("Адрес.АдресноеПоле", ПространствоИменСхемы);
					НормТип = СтрокаСАдресом[СтрокаСАдресом.Уровень() + 1];
					Если НормТип = "Индекс" Тогда
						НормТип = НСтр("ru ='Почтовый индекс'");
					ИначеЕсли НормТип = "КодРегион" Тогда
						НормТип = "Регион";
					ИначеЕсли НормТип = "НаселПункт" Тогда
						НормТип = НСтр("ru ='Населенный пункт'");
					ИначеЕсли НормТип = "Кварт" Тогда
						НормТип = "Квартира";
					КонецЕсли;
					АдресноеПоле.Тип = НормТип;
					АдресноеПоле.Значение = СтрокаСАдресом.Значение;
					АдресТип.АдресноеПоле.Добавить(АдресноеПоле);
					
					Представление = Представление + ?(Представление = "","",", ") + СтрокаСАдресом.Значение;
					
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(АдресТип, "Представление", Представление, Истина, ТекстОшибки);
			Иначе
				Если Адрес.Значение = "Иностранный" Тогда
					СтрокаАдреса = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, Адрес.ПолныйПуть + "." + Адрес.Значение + ".АдрТекст");
				Иначе
					СтрокаАдреса = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, Адрес.ПолныйПуть + "." + Адрес.Значение);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(АдресТип, "Представление", СтрокаАдреса, Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакты = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Контакт, "Тип", НСтр("ru = 'Телефон рабочий'"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Контакт, "Тип", НСтр("ru = 'Факс'"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(Контрагент, "Контакты", Контакты, , ТекстОшибки);
	КонецЕсли;
	
	ФамилияРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Фамилия");
	Если ЗначениеЗаполнено(ФамилияРуководителя) Тогда
		
		Руководитель = ПолучитьОбъектТипаCML("Руководитель", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Руководитель, "Фамилия", ФамилияРуководителя, Истина, ТекстОшибки);
		
		ИмяРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Имя");
		ЗаполнитьСвойствоXDTO(Руководитель, "Имя", ИмяРуководителя, Истина, ТекстОшибки);
		
		ОтчествоРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Отчество");
		ЗаполнитьСвойствоXDTO(Руководитель, "Отчество", ОтчествоРуководителя, Истина, ТекстОшибки);
		
		ДолжностьРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Должность");
		ЗаполнитьСвойствоXDTO(Руководитель, "Должность", ДолжностьРуководителя, Истина, ТекстОшибки);
		
		Контрагент.Руководитель = Руководитель;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, ПутьКДанным)
	
	ЗначениеРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, ПутьКДанным);
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ПутьКДанным, ".", "");
	
	Если ВРег(ИмяРеквизита) = ВРег("ВидОперации") Тогда
		ЗначениеРеквизита = XMLСтрока(ЗначениеРеквизита);
	КонецЕсли;
	
	Если ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
	КонецЕсли;
	
	ДопДанные = Новый Структура(ИмяРеквизита, ЗначениеРеквизита);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	
КонецПроцедуры

Процедура ПоместитьГруппуДереваВДопДанные(ДеревоДокумента, ПутьКДанным)
	
	ВеткаГруппы = ЗначениеГруппыВДереве(ДеревоДокумента, ПутьКДанным);
	Если ТипЗнч(ВеткаГруппы) = Тип("КоллекцияСтрокДереваЗначений") Тогда
		
		ДанныеГруппы = Новый Структура;
		Для Каждого СтрокаДерева Из ВеткаГруппы Цикл
			
			ЗначениеРеквизита = СтрокаДерева.Значение;
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, ПутьКДанным+".", "");
			
			ДанныеГруппы.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		Если ДанныеГруппы.Количество() > 0 Тогда
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДанныеГруппы, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьТаблицуДереваВДопДанные(ДеревоДокумента, ИмяТаблицы, Подписываемые = Истина)
	
	ЗначениеТаблицы = ЭлектронноеВзаимодействие.ДанныеДерева(ДеревоДокумента, ИмяТаблицы);
	
	Если Не ЗначениеЗаполнено(ЗначениеТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ДопДанные = Новый Структура(ИмяТаблицы, ЗначениеТаблицы);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Подписываемые);
	
КонецПроцедуры

Процедура ПоместитьДокументыОснованияВДопДанныеШапкиФНС(СтрокаДопДанных, СтрокаДокументыОснования, ИдентификаторыДокументовИЭДОснований)
	
	// Разберем документы основания.
	Если ЗначениеЗаполнено(СтрокаДокументыОснования.Значение) Тогда
		ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтрокаДокументыОснования.Значение, ИдентификаторыДокументовИЭДОснований);
		
		Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВидДокументаОснования", Строка.ВидЭД);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.НомерДокументаОснования",
				Строка.НомерДокументаОтправителя);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ДатаДокументаОснования",
				Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ИДЭДДокументаОснования", Строка.Наименование);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ИдентификаторДокументаОснования", Строка.ИдентификаторДокументаОснования);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, ИдентификаторыДокументовИЭДОснований)
	
	ОснованиеСсылка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ОснованиеСсылка) Тогда
		
		ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ОснованиеСсылка, ИдентификаторыДокументовИЭДОснований);
		Если ТаблицаПараметровДокументовОснований.Количество() > 0 Тогда
			
			ПараметрыОснования = Новый Структура;
			ПараметрыОснования.Вставить("_ТЗ_ДокументыОснования", ТаблицаПараметровДокументовОснований);
			
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, ПараметрыОснования, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Помещаем в доп данные подписываемые реквизиты документа основания
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");

	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		СтрокаДопДанных = Товар.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
		ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "Товары.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ДокументОснование, ИдентификаторыДокументовИЭДОснований);
			Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ВидДокументаОснования", Строка.ВидЭД);
				
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных,
					"НомерДокументаОснования", Строка.НомерДокументаОтправителя);
					
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДатаДокументаОснования",
					Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
					
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ИДЭДДокументаОснования", Строка.Наименование);
				
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ИдентификаторДокументаОснования", Строка.ИдентификаторДокументаОснования);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

Процедура ПоместитьРеквизитСтрокиТаблицыВДопДанные(ДеревоДокумента, ИмяТаблицы, ИмяРеквизита)
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		ЗначениеРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "Товары.НомерСтроки."+ИмяРеквизита);
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоместитьВДопДанныеСтрокиТабличнойЧасти(Товар, ИмяРеквизита, ЗначениеРеквизита);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьВДопДанныеСтрокиТабличнойЧасти(СтрокаТаблицыТоваров, ИмяРеквизита, ЗначениеРеквизита, ИмяТаблицы = "Товары")

	СтрокаДопДанных = СтрокаТаблицыТоваров.Строки.Найти(ИмяТаблицы +".НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
	Если СтрокаДопДанных <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, ИмяРеквизита, ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДопДанныеШапки(ДеревоДанных, ДокументXDTO, ТекстОшибки);
	
	ИмяЭлементаВладельца = "Шапка";
	ПространствоИмен = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, "ЗначениеРеквизита", "Значение", ВидФасетаXDTO.МаксДлина);
	ИмяМаксДлина = "ДопустимаяДлинаДопДанныхШапки";

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ДокументXDTO.Ид);
	СтруктураПараметров.Вставить(ИмяМаксДлина, МаксДлина - 20); // 20 - служебные символы.

	
	СтруктураДопДанных = Новый Структура;
	ДопДанныеНеПодписанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеНеПодписанные = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДопДанныеНеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "ДопДанные.НеПодписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
	КонецЕсли;
		
	Если СтруктураДопДанных.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Ложь);
	КонецЕсли;
	
	СтруктураДопДанных = Новый Структура;
	ДопДанныеПодписанные = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеПодписанные = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДопДанныеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "ДопДанные.Подписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДопДанных.Количество() > 0 Тогда
		
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Истина);
		
	КонецЕсли;
	
	СтрокаИнфПол = "";
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		// Сформируем xml-строку (ИнфПол):
		СформировалиСтроку = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Истина, ИмяЭлементаВладельца);
		
		Если СформировалиСтроку Тогда
			
			СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			ИмяРеквизитаДопДанные = "ДопДанные" + ИмяЭлементаВладельца;
			ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизитаДопДанные, СтрокаИнфПол, ДокументXDTO)
		
		КонецЕсли;
		
		// Сформируем доп. файл (для строк таб.части не формируется):
		ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Ложь, ИмяЭлементаВладельца);
		
		Если ДопФайлСформирован Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла",     СтруктураПараметров.ИдентификаторДопФайла);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, ДокументXDTO, ТекстОшибки)
	
	ИмяЭлементаВладельца = "Шапка";
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ДокументXDTO.Ид);
	
	ДопДанныеНеПодписанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть",Истина);
	
	Если Не ДопДанныеНеПодписанные = Неопределено Тогда
		
		СтруктураДопДанных = Новый Структура;
		Для Каждого СтрокаДерева Из ДопДанныеНеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "ДопДанные.НеПодписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		
		Если СтруктураДопДанных.Количество() > 0 Тогда
			ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Ложь, ИмяЭлементаВладельца);
		
		Если ДопФайлСформирован Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла",     СтруктураПараметров.ИдентификаторДопФайла);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДопДанныеСтрокиТаблицы(ДеревоДанных, ИдФайла, ТекстОшибки, НомерСтроки, ДокументXDTO)
	
	ИмяЭлементаВладельца = "Строки";
	ПространствоИмен = ОбменСКонтрагентамиСлужебный.ПространствоИменCML();
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, "ЗначениеРеквизита", "Значение", ВидФасетаXDTO.МаксДлина);
	ИмяМаксДлина = "ДопустимаяДлинаДопДанныхСтроки";

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ИдФайла);
	СтруктураПараметров.Вставить(ИмяМаксДлина, МаксДлина - 20); // 20 - служебные символы.
	
	ДопДанныеПодписанные = ДеревоДанных.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеПодписанные = Неопределено Тогда
		СтруктураДопДанных = Новый Структура;
		Для Каждого СтрокаДерева Из ДопДанныеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "Товары.НомерСтроки.ДопДанныеПодписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		Если СтруктураДопДанных.Количество() > 0 Тогда
			
			ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
				СтруктураДопДанных,
				ИмяЭлементаВладельца,
				Истина,
				НомерСтроки);
			
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИнфПол = "";
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		// Сформируем xml-строку (ИнфПол):
		СформировалиСтроку = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Истина, ИмяЭлементаВладельца, Строка(НомерСтроки));
		
		Если СформировалиСтроку Тогда
			
			СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			ИмяРеквизитаДопДанные = "ДопДанные" + ИмяЭлементаВладельца;
			ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизитаДопДанные, СтрокаИнфПол, ДокументXDTO)
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных)
	
	СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
		СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
		СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьСтрокиДереваРекурсивно(СтрокаПолучатель, СтрокаИсточник)
	
	Для Каждого Реквизит Из СтрокаИсточник.Строки Цикл
		НовСтрока = СтрокаПолучатель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Реквизит);
		Если Реквизит.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДереваРекурсивно(НовСтрока, Реквизит);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьДопДанныеШапкиДокумента(ДокументXDTO, ДеревоДокумента, Ошибка, ДопРеквизиты = Неопределено)
	
	ДеревоВШапку = Ложь;
	СтрокаДопДерева = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если Не СтрокаДопДерева = Неопределено Тогда
		ДопДерево = СтрокаДопДерева.ЗначениеРеквизита;
	Иначе
		ДопДерево = ДеревоДопДанных();
		ДеревоВШапку = Истина;
	КонецЕсли;
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеШапка", ДокументXDTO);
	Если ЗначениеЗаполнено(ДопДанные) Тогда
		
		ПрочитатьИнфПол(ДопДанные, ДопДерево, "Шапка");
	КонецЕсли;
		
	ДобавитьРеквизитыДопДанныеВШапку(ДопДерево, ДеревоДокумента, Ошибка, ДопРеквизиты);
	
	Если ДеревоВШапку Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыДопДанныеВШапку(ДопДерево, ДеревоДокумента, Ошибка, ДопРеквизиты)
	
	СтрокаШапки = ДопДерево.Строки.Найти("Шапка", "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СтрокаШапки) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура;
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ДопРеквизиты) = Тип("Структура") 
		И Не ДопРеквизиты.Свойство("НаправлениеЭД") Тогда
		
		ДопРеквизиты.Вставить("НаправлениеЭД", ДеревоДокумента.НаправлениеЭД);
		
	КонецЕсли;
	
	Для Каждого ВеткаДерева Из СтрокаШапки.Строки Цикл
		
		ИмяРеквизита = ВеткаДерева.ИмяРеквизита;
		ЗначениеРеквизита = ВеткаДерева.ЗначениеРеквизита;
		
		Если Найти(ЗначениеРеквизита, "_ТЗ_") > 0 Тогда
			
			ИмяРеквизита = СтрЗаменить(ЗначениеРеквизита, "_ТЗ_", "");
			
			РеквизитЗначение = ТаблицаВеткиДопДанных(ВеткаДерева);
			
			Если ВРег(ИмяРеквизита) = ВРег("ДокументыОснования")
				Или ВРег(ИмяРеквизита) = ВРег("ДокументОснование") Тогда
				// В актуальных ЭД передаются идентификаторы документов ИБ, для поиска основания:
				ЕстьИДДокументаОснования = РеквизитЗначение.Колонки.Найти("ИдентификаторДокументаОснования") <> Неопределено;
			
				МассивДО = Новый Массив;
				
				Для Каждого ТекСтрока Из РеквизитЗначение Цикл
					Если ЕстьИДДокументаОснования Тогда
						ДокументОснование = ДокументОснованиеПоИдентификатору(ТекСтрока.ИдентификаторДокументаОснования, ДопРеквизиты);
					Иначе
						ДокументОснование = ПолучитьДокументОснование(ТекСтрока.Наименование, ДопРеквизиты);
					КонецЕсли;
					МассивДО.Добавить(ДокументОснование);
				КонецЦикла;
				
				Если МассивДО.Количество() = 1 Тогда
					РеквизитЗначение = МассивДО[0];
				Иначе
					РеквизитЗначение = МассивДО;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("Список")
			И ВРег(ЗначениеРеквизита) = ВРег("ДокументыСделки") Тогда
			
			ИмяРеквизита = "ДокументыСделки";
			РеквизитЗначение = ТаблицаВеткиДопДанных(ВеткаДерева);
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("Список")
			И ВРег(ЗначениеРеквизита) = ВРег("Серии") Тогда
			
			ИмяРеквизита = "Серии";
			РеквизитЗначение = ТаблицаВеткиДопДанных(ВеткаДерева);
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ЦенаВключаетНДС") Тогда
			
			ЦенаВключаетНДС = ЗначениеРеквизита;
			
			Если ВРег(ЦенаВключаетНДС) = ВРег("Да") Тогда
				РеквизитЗначение = Истина;
			ИначеЕсли ВРег(ЦенаВключаетНДС) = ВРег("Нет") Тогда
				РеквизитЗначение = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
			
			ДатаИсправленияЗначение = ЗначениеРеквизита;
			
			Попытка
				РеквизитЗначение = ДатаИзСтроки(ДатаИсправленияЗначение);
			Исключение
				РеквизитЗначение = ДатаДД_ММ_ГГГГ(ДатаИсправленияЗначение);
			КонецПопытки;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("СуммаДокумента")
			Или ВРег(ИмяРеквизита) = ВРег("СуммаВознаграждения") Тогда
			
			РеквизитЗначение = Число(ЗначениеРеквизита);
			
		Иначе
			РеквизитЗначение = ЗначениеРеквизита;
			
		КонецЕсли;
		
		РеквизитыШапки.Вставить(ИмяРеквизита, РеквизитЗначение);

	КонецЦикла;
	
	Для Каждого КлючЗначение Из РеквизитыШапки Цикл
		
		ДобавитьРеквизитВПриемник(КлючЗначение.Ключ, КлючЗначение.Значение, ДеревоДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаВеткиДопДанных(СтрокаДерева)
	
	Результат = Новый ТаблицаЗначений;
	СформироватьТаблицуЗначенийПоДопДанным(СтрокаДерева, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьДопДанныеСтрокиТЧ(СтрокаXDTO, ДеревоДокумента, ИмяТаблицы, НомерСтроки, СвойстваТЧ, ДопПараметры = Неопределено)
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	СтрокаДопДерево = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	
	НовоеДерево = Ложь;
	Если СтрокаДопДерево = Неопределено Тогда
		ДопДерево = ДеревоДопДанных();
		НовоеДерево = Истина;
		
	Иначе
		ДопДерево = СтрокаДопДерево.ЗначениеРеквизита;
	КонецЕсли;
		
	ПрочитатьИнфПол(ДопДанные, ДопДерево, ИмяТаблицы, Строка(НомерСтроки));
	
	Если НовоеДерево Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, Строка(НомерСтроки), ДопПараметры);
	
КонецПроцедуры

Процедура ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, НомерСтроки, ДопПараметры)
	
	СвойстваТаблицы = ДопДерево.Строки.Найти(ИмяТаблицы, "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СвойстваТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	
	Для Каждого НомерСтр Из СвойстваТаблицы.Строки Цикл
		
		Если ВРег(НомерСтр.ИмяРеквизита) = ВРег("Нпп") Тогда
			Если Не НомерСтр.ЗначениеРеквизита = НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОснованиеНайден = Ложь;
		
		Для Каждого ТекСвойство Из НомерСтр.Строки Цикл
			
			ИмяСвойства = ТекСвойство.ИмяРеквизита;
			ЗначениеСвойства = ТекСвойство.ЗначениеРеквизита;
			
			Если ВРег(ИмяСвойства) = ВРег("ВидДокументаОснования")
				Или ВРег(ИмяСвойства) = ВРег("НомерДокументаОснования")
				Или ВРег(ИмяСвойства) = ВРег("ДатаДокументаОснования") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВРег(ИмяСвойства) = ВРег("ИдентификаторДокументаОснования") И НЕ ДокументОснованиеНайден Тогда
				// Актуальный алгоритм передачи связки с документами-основаниями.
				// В качестве идентификатора документа-основания во входящем ЭД приходит
				// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
				// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
				// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
				// будет найдена.
				ЗначениеСвойства = ДокументОснованиеПоИдентификатору(ЗначениеСвойства, ДопПараметры);
				ИмяСвойства = "ДокументОснование";
				ДокументОснованиеНайден = ЗначениеЗаполнено(ЗначениеСвойства);
			ИначеЕсли ВРег(ИмяСвойства) = ВРег("ИДЭДДокументаОснования") И НЕ ДокументОснованиеНайден Тогда
				ЗначениеСвойства = ПолучитьДокументОснование(ЗначениеСвойства, ДопПараметры);
				ИмяСвойства = "ДокументОснование";
				ДокументОснованиеНайден = ЗначениеЗаполнено(ЗначениеСвойства);
			КонецЕсли;
				
			СвойстваТЧ.Добавить(ЗначениеСвойства, ИмяСвойства);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСоставнойИД(ПроверяемыйИД)
	
	Возврат Найти(ПроверяемыйИД,"#") > 0;
	
КонецФункции

Процедура ПоместитьНеПодписанныеДанныеВШапку(ДеревоДокумента)
	
	ДопДерево = Неопределено;
	ВеткаДопДерево = ДеревоДокумента.Строки.Найти("ДеревоДопДанных","Реквизит", Истина);
	Если ЗначениеЗаполнено(ВеткаДопДерево) Тогда
		ДопДерево = ВеткаДопДерево.ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКлючСерий(ДеревоДанных)
	
	СтрокаТаблицаСерии = ДеревоДанных.Строки.Найти("Серии", "ПолныйПуть");
	Если Не ЗначениеЗаполнено(СтрокаТаблицаСерии.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем таблицу товаров
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	
	Для Каждого СтрокаСерии Из СтрокаТаблицаСерии.Строки Цикл
		
		
		НоменклатураСерии = ЗначениеРеквизитаДерева(СтрокаСерии, "Серии.НомерСтроки.Номенклатура");
		ХарактеристикаСерии = ЗначениеРеквизитаДерева(СтрокаСерии,"Серии.НомерСтроки.Характеристика");
		
		Для Каждого СтрокаТовары Из СтрокаТаблицаТоваров.Строки Цикл
			НоменклатураТовары = ЗначениеРеквизитаДерева(СтрокаТовары, "ТаблицаТоваров.НомерСтроки.Номенклатура");
			ХарактеристикаТовары = ЗначениеРеквизитаДерева(СтрокаТовары, "ТаблицаТоваров.НомерСтроки.Характеристика");
			
			Если (НоменклатураСерии = НоменклатураТовары)
				И ((ХарактеристикаСерии = ХарактеристикаТовары)
					Или (Не ЗначениеЗаполнено(ХарактеристикаСерии) И Не ЗначениеЗаполнено(ХарактеристикаТовары))) Тогда
					
				КлючСтрокиСерии = ЗначениеРеквизитаДерева(СтрокаТовары, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.ИД");
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаСерии, "Серии.НомерСтроки.ИдентификаторСтроки", КлючСтрокиСерии);
				Прервать;;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "Серии", Ложь);
	
КонецПроцедуры

Процедура ПрочитатьСерииНоменклатуры(ДеревоДанных, ИдентификаторыСтрокСерии)
	
	СтрокаТаблицаСерии = ДеревоДанных.Строки.Найти("Серии", "Реквизит");
	Если СтрокаТаблицаСерии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьХарактеристика =  Не СтрокаТаблицаСерии.ЗначениеРеквизита.Колонки.Найти("Характеристика") = Неопределено;
	
	Для Каждого СтрокаСерии Из СтрокаТаблицаСерии.ЗначениеРеквизита Цикл
		
		ИдентификаторСтроки = СтрокаСерии.ИдентификаторСтроки;
		
		НоменклатураХарактеристика = ИдентификаторыСтрокСерии.Найти(ИдентификаторСтроки, "Идентификатор");
		Если НоменклатураХарактеристика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Номенклатура = НоменклатураХарактеристика.Номенклатура;
		СтрокаСерии.Номенклатура = Номенклатура;
		
		Если ЕстьХарактеристика Тогда
			Характеристика = НоменклатураХарактеристика.Характеристика;
			СтрокаСерии.Характеристика = Характеристика;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПоместитьТабличнуюЧастьВШапкуДокумента(ДеревоЭД, ДеревоДопДанных, ИмяТаблицы)
	
	СтрокаТч = ДеревоДопДанных.Строки.Найти(ИмяТаблицы, "ЗначениеРеквизита", Истина);
	Если СтрокаТч = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТчДопДанные = Новый ТаблицаЗначений;
	СформироватьТаблицуЗначенийПоДопДанным(СтрокаТч, ТчДопДанные);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТчДопДанные, ИмяТаблицы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка дополнительных данных ЭД

// Формирование xml-файла/строки

Функция СформироватьДопСтроку(МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, ТекстОшибки, Знач УровеньВложенности)
	
	УровеньВложенности = УровеньВложенности + 1;
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если Не ЮридическиЗначимый Тогда
			Если СтрокаДЗ.ЮридическиЗначимый Тогда 
				// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
				// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
				// будут передаваться отдельно от не значимых, в разных файлах).
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , ТекстОшибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , ТекстОшибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			СформироватьДопСтроку(МассивСтрокДЗ, Реквизит, ПространствоИменСхемы, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, ТекстОшибки, УровеньВложенности);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Рекв.Реквизит.Добавить(Реквизит);
			ЕстьДанныеДляДопФайла = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция СформироватьДопФайлCML(СтруктураПараметров,
											ТекстОшибки,
											Знач ЮридическиЗначимый = Ложь,
											ИмяТЧ = Неопределено,
											НомерСтроки = Неопределено)
	
	// ИмяТЧ и НомерСтроки заполняются только для юридически значимой информации (информация - которая будет помещена в
	// основном файле (ИнфПол, ИнфПолСтр) и подписана ЭЦП).
	Если НомерСтроки <> Неопределено Тогда //ЗначениеЗаполнено(ИмяТЧ) ИЛИ
		ЮридическиЗначимый = Истина;
	КонецЕсли;
	ДопФайлСформирован = Ложь;
	ПространствоИменСхемы = "ДопФайлУниверсальный";
	Попытка
		ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
		Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") И ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			ЕстьДанныеДляДопФайла = Ложь;
			ДопФайл = ПолучитьОбъектТипаCML("ДопФайл", ПространствоИменСхемы);
			Данные = ПолучитьОбъектТипаCML("ДопФайл.Данные", ПространствоИменСхемы);
			
			Если НомерСтроки <> Неопределено Тогда
				// Если НомерСтроки - заполнено, то формируется строка ИнфПолСтр по юридически значимой информации и конкретной строке ТЧ.
				СтОтбора = Новый Структура;
				СтОтбора.Вставить("ТЧ", Истина);
				СтОтбора.Вставить("ИмяРеквизита", "Список");
				СтОтбора.Вставить("ЗначениеРеквизита", ИмяТЧ);
				МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если МассивСтрокДЗ.Количество() > 0 Тогда
					// В нужной ТЧ найдем требующуюся строку (НомерСтроки):
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки);
					МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Если ЮридическиЗначимый=Истина, значит формируется строка ИнфПол(ИнфПолСтр).

				Если ЮридическиЗначимый Тогда
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", ИмяТЧ);
					МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
									
					КонецЕсли;
					
				Иначе
					
					МассивСтрокДЗ = ДеревоДопДанных.Строки;
					
				КонецЕсли;
			КонецЕсли;
			
			Если МассивСтрокДЗ.Количество() > 0 Тогда
				СформироватьДопСтроку(МассивСтрокДЗ, Данные, ПространствоИменСхемы, ЮридическиЗначимый,
					ЕстьДанныеДляДопФайла, ТекстОшибки, 0);
					
				ЗаполнитьСвойствоXDTO(ДопФайл, "Данные", Данные, Истина, ТекстОшибки);
			КонецЕсли;
			
			ИдДопФайла = Новый УникальныйИдентификатор;
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдФайла", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдДопФайла", Строка(ИдДопФайла), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ВерсияФормата", "1", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ДатаФормирования", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ДопФайл.Проверить();
			
			Если ЕстьДанныеДляДопФайла И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮридическиЗначимый Тогда
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.УстановитьСтроку();
					ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДопФайл);
					СтрXML = ЗаписьXML.Закрыть();
					НачПоз = Найти(СтрXML, "<Данные>");
					КолСимв = Найти(СтрXML, "</Данные>") - НачПоз + СтрДлина("</Данные>");
					СтрXML = Сред(СтрXML, НачПоз, КолСимв);
					
					СтрXML = СтрЗаменить(СтрXML, Символы.Таб,"");
					СтрXML = СтрЗаменить(СтрXML, Символы.ПС,"");
					
					СтруктураПараметров.Вставить("ИнфПол", СтрXML);
				Иначе
					СтруктураПараметров.Вставить("ИдентификаторДопФайла", ИдДопФайла);
					
					ПолноеИмяФайла = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СтруктураПараметров.ИдФайл) + ИдДопФайла + ".xml";
					СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ПолноеИмяФайла);
					ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДопФайл, ПолноеИмяФайла, Ложь);
				КонецЕсли;
				ДопФайлСформирован = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДопФайлСформирован;
	
КонецФункции

Процедура ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент)
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураДопДанных, НомерСтроки,ТабличныйДокумент, ОбластьМакета)
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(НомерСтроки), "НомерСтр");
		Если СтрокаТаблицыДД <> Неопределено Тогда
			Если СтруктураДопДанных.ЕстьПодписанные Тогда
				ОбластьМакета.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаДопДанных()
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	Возврат ТаблицаДопДанныхСтрок;
	
КонецФункции

Процедура ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора)
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли
	
КонецПроцедуры

// Только для внутреннего использования
Функция СформироватьРегистрационнуюИнформациюCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://www.1c.ru/edo/registration}.Файл";
	Попытка
		
		Файл = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");
		ЗаполнитьСвойствоXDTO(Документ, "КНД",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "КодНО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КодНО"), Истина, ТекстОшибки);
		
		ОперЭДО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.ОперЭДО");
		ЗаполнитьСвойствоXDTO(ОперЭДО, "НаимОрг",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.НаимОрг"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "ИННЮЛ",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.ИННЮЛ"),     Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "КПП",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.КПП"),       Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "ОГРН",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.ОГРН"),      Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "ИдОперЭДО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.ИдОперЭДО"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ОперЭДО", ОперЭДО, , ТекстОшибки);
		
		УчастникЭДО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО");
		ЗаполнитьСвойствоXDTO(УчастникЭДО, "ТипЗаявления",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипЗаявления"), Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ИдУчастЭДО")) Тогда
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ИдУчастЭДО"), , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника")) Тогда
			
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника") = "ЮЛ" Тогда
				
				СвЮЛ = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ЮЛ");
				ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ"),   Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.КПП"),     Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ОГРН",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН"),    Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ДатаПодклЭДО",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО")), Истина, ТекстОшибки);
				
				АдрРФ = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ЮЛ.АдрРФ");
				ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Индекс"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.КодРегион"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Район",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Район"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Город",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Город"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.НаселПункт"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Улица",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Улица"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Дом",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Дом"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Корпус"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Кварт"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "АдрРФ", АдрРФ, , ТекстОшибки);
				
				ФИООтв = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ЮЛ.ФИООтв");
				ЗаполнитьСвойствоXDTO(ФИООтв, "Фамилия",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИООтв, "Имя",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИООтв, "Отчество",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ФИООтв", ФИООтв, , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", СвЮЛ, , ТекстОшибки);
			Иначе
				
				СвИП = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ИП");
				ЗаполнитьСвойствоXDTO(СвИП, "ИННФЛ",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ИННФЛ"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвИП, "ОГРНИП",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ОГРНИП"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвИП, "ДатаПодклЭДО",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО")), Истина, ТекстОшибки);
				
				АдрРФ = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ИП.АдрРФ");
				ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Индекс"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.КодРегион"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Район",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Район"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Город",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Город"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.НаселПункт"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Улица",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Улица"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Дом",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Дом"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Корпус"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Кварт"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвИП, "АдрРФ", АдрРФ, , ТекстОшибки);
				
				ФИО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ИП.ФИО");
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Имя",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ФИО.Имя"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", СвИП, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыСертификатов = ДеревоДанных.Строки.Найти("УчастЭДО.СертифДолжн", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыСертификатов.Значение) Тогда
			Для Каждого СтрСертификат Из СтрокаТаблицыСертификатов.Строки Цикл
				Сертификат = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.СертифДолжн");
				ЗаполнитьСвойствоXDTO(Сертификат, "ДатаНачСертиф",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.ДатаНачСертиф")), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "ДатаКонСертиф",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.ДатаКонСертиф")), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "ОтпСертиф",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.ОтпСертиф"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "Сертификат",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Сертификат"), Истина, ТекстОшибки);
				
				ФИО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.СертифДолжн.ФИО");
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Фамилия"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Имя",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Имя"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Отчество"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "ФИО", ФИО, Истина, ТекстОшибки);
				
				УчастникЭДО.СертифДолжн.Добавить(Сертификат);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", УчастникЭДО, , ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.Подписант");
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.Должность"), Истина, ТекстОшибки);
		
		ФИО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.Подписант.ФИО");
		ЗаполнитьСвойствоXDTO(ФИО, "Фамилия",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ФИО.Фамилия"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИО, "Имя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ФИО.Имя"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИО, "Отчество",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ФИО.Отчество"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, , ТекстОшибки);
		
		Файл.Проверить();
		
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование данных для оператора ЭДО'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		Возврат "";
	КонецПопытки;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервис 1С ЭДО

// Только для внутреннего использования
Функция СтруктураНастроек1СЭДО()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("АдресВебСервиса", "https://1c-edo.ru/API/");
	
	Возврат СтруктураНастроек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

// Получить новые электронные документы от оператора ЭДО.
//
// Параметры:
//  АдресРесурса - Строка - адрес ресурса.
//  ДатаПоследнегоЗапроса - Дата - дата последнего запроса.
//  Маркер - ДвоичныеДанные, Строка - расшифрованный маркер.
//
// Возвращаемое значение:
//  СписокЭД_XML - список электронных документов.
//
Функция ПолучитьЧерезОператораЭДО(Знач АдресРесурса, ДатаПоследнегоЗапроса, Маркер, СтруктураПараметровЗапросаМаркера)
	
	Соединение = ПолучитьСоединение(СтруктураПараметровЗапросаМаркера.СпособОбменаЭД);
	Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
	
	АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(ДатаПоследнегоЗапроса), "?date=" + ДатаПоследнегоЗапроса, "");
	
	СписокЭД_XML = ПолучитьЭлектронныеДокументыОператораЭДО(Маркер, Соединение, АдресРесурса);
	
	Возврат СписокЭД_XML;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьОснование(ДеревоЭД, Основания, НаименованиеТабЧасти)
	
	ОснованияДокумента = ШаблонОснованияДокумента();
	
	Для Каждого СтрокаОснования Из Основания Цикл
		
		Если Не СтрокаОснования.НаимОсн = "-" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОснованияДокумента.Добавить();
		
		НоваяСтрока.ДокОснованиеНаименование = СтрокаОснования.НаимОсн;
		НоваяСтрока.ДокОснованиеНомер = СтрокаОснования.НомОсн;
		Если ЗначениеЗаполнено(СтрокаОснования.ДатаОсн) Тогда
			ДокОснованиеДата = Дата(Сред(СтрокаОснования.ДатаОсн, 7, 4)
				+ Сред(СтрокаОснования.ДатаОсн, 4, 2)
				+ Сред(СтрокаОснования.ДатаОсн, 1, 2));
				
			НоваяСтрока.ДокОснованиеДата = СтрокаОснования.ДокОснованиеДата;
		КонецЕсли;
		НоваяСтрока.ДокОснованиеДопСведения = СтрокаОснования.ДопСвОсн;
		
	КонецЦикла;
	
	Если ОснованияДокумента.Количество() > 0 Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ОснованияДокумента, НаименованиеТабЧасти);
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторыСерийНоменклатуры()
	
	ИдентификаторыСерий = Новый ТаблицаЗначений;
	ИдентификаторыСерий.Колонки.Добавить("Идентификатор");
	ИдентификаторыСерий.Колонки.Добавить("Номенклатура");
	ИдентификаторыСерий.Колонки.Добавить("Характеристика");
	
	Возврат ИдентификаторыСерий;
	
КонецФункции

Процедура ЗаполнитьДокументыОснования(ДеревоДопДанных, ПараметрыПоиска, ДеревоЭД)
	
	ДокументОснование = Неопределено;
	СтрокаИдДокументаОснования = ДеревоДопДанных.Строки.Найти("ИдентификаторДокументаОснования","ИмяРеквизита", Истина);
	Если Не СтрокаИдДокументаОснования = Неопределено Тогда
		ИдДокументаОснования  = СтрокаИдДокументаОснования.ЗначениеРеквизита;
		ДокументОснование = ДокументОснованиеПоИдентификатору(ИдДокументаОснования, ПараметрыПоиска);
	КонецЕсли;
	
	Если ДокументОснование = Неопределено Тогда
		СтрокаИДЭДДокументаОснования = ДеревоДопДанных.Строки.Найти("ИДЭДДокументаОснования", "ИмяРеквизита", Истина);
		Если Не СтрокаИДЭДДокументаОснования = Неопределено Тогда
			ИДЭДДокументаОснования = СтрокаИдДокументаОснования.ЗначениеРеквизита;
			ДокументОснование = ДокументОснованиеПоИдентификатору(ИДЭДДокументаОснования, ПараметрыПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДокументОснование = Неопределено Тогда
		
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ДокументыОснования", ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ДеревоДанных, ТекстОшибки, ПередачаТоваров = Ложь)
	
	СтрокаТаблицаУслуг = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	
	Для Каждого Услуга Из СтрокаТаблицаУслуг.Строки Цикл
		
		Если ПередачаТоваров Тогда
			
			Номенклатура = ЗначениеРеквизитаДерева(Услуга, "ТаблицаУслуг.НомерСтроки.Номенклатура", Ложь);
			Описание = ЗначениеРеквизитаДерева(Услуга, "ТаблицаУслуг.НомерСтроки.Описание", Ложь);
			Если Не ЗначениеЗаполнено(Номенклатура) И Не ЗначениеЗаполнено(Описание) Тогда
				
				КодНоменклатура = КодПредставленияПоля(Услуга, "ТаблицаУслуг.НомерСтроки.Номенклатура");
				ПредставлениеНоменклатура =  ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПрикладноеПредставлениеРеквизита(КодНоменклатура);
				
				КодОписание = КодПредставленияПоля(Услуга, "ТаблицаУслуг.НомерСтроки.Описание");
				ПредставлениеОписание = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПрикладноеПредставлениеРеквизита(КодОписание);
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + НСтр("ru = 'Некорректно заполнена строка %1 табличной части ""Услуги""
					|Обязательно должно быть заполнено поле %2 или поле %3.'");
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Услуга.Значение,
					ПредставлениеНоменклатура, ПредставлениеОписание);
				
			КонецЕсли;
		Иначе
			
			НаименованиеЕдиницыИзмерения = ЗначениеРеквизитаДерева(Услуга, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование", Ложь);
			Если Не ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
				
				КодНаименованиеЕдиницы = КодПредставленияПоля(Услуга, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование");
				ПредставлениеНаименованиеЕдиницы =  ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПрикладноеПредставлениеРеквизита(КодНаименованиеЕдиницы);
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + НСтр("ru = 'Некорректно заполнена строка %1 табличной части ""Услуги""
					|Обязательно должно быть заполнено поле %2.'");
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Услуга.Значение,
					ПредставлениеНаименованиеЕдиницы);

				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеРеквизитаДерева(Дерево, ИмяРеквизита, СообщатьОбОшибке = Истина)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита, СообщатьОбОшибке)
	
КонецФункции

Функция ПространствоИменПередачаТоваровПродавец()
	
	Возврат "TORGPR";
	
КонецФункции

Функция ПространствоИменПередачаРаботИсполнитель()
	
	Возврат "RUISP";
	
КонецФункции

Функция КодПредставленияПоля(ДеревоДанных, ИмяПоля)
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ИмяПоля, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.КодПредставления;
	Иначе
		Возврат "";
	КонецЕсли
	
КонецФункции

// Сохраняет данные ссылки ЭД в файл и возвращает его имя
Процедура СохранитьЭДВФайл(ЭДСсылка, ПараметрыФайла)
	
	ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭДСсылка, ЭДСсылка.УникальныйИдентификатор(), Истина);
	
	Расширение = ДопИнформацияПоЭД.Расширение;
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		Если ЗначениеЗаполнено(Расширение) Тогда
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(Расширение);
		Иначе
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат ;
		КонецЕсли;
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		ДанныеЭД.Записать(ИмяФайла);
		
	КонецЕсли;
	
	ПараметрыФайла.ИмяФайла = ИмяФайла;
	ПараметрыФайла.Расширение = Расширение;
	ПараметрыФайла.Наименование = ДопИнформацияПоЭД.Наименование;
	
КонецПроцедуры

Процедура СохранитьДопДанныеВФайл(ЭДСсылка, ИмяФайла)
	
	ВыборкаЭДДопДанных = ОбменСКонтрагентамиСлужебный.ВыборкаДопДанныеЭД(ЭДСсылка);
	Если ВыборкаЭДДопДанных.Следующий() Тогда
		
		ПараметрыФайла = СвойстваФайла();
		
		СохранитьЭДВФайл(ВыборкаЭДДопДанных.Ссылка, ПараметрыФайла);
		
		ИмяФайла = ПараметрыФайла.ИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваФайла()
	
	Свойства = Новый Структура("ИмяФайла, Наименование, Расширение");
	
	Возврат Свойства;
	
КонецФункции

Функция ЗначениеПараметра(ЗначенияСвойств, ИмяСвойства)
	
	ЗначениеСвойства = Неопределено;
	ЗначенияСвойств.Свойство(ИмяСвойства, ЗначениеСвойства);
	
	Возврат ЗначениеСвойства;
	
КонецФункции

Функция ЕстьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, НеПроверятьЗаполнение = Ложь)
	
	Если Не ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	ПроверятьЗаполнение = Не НеПроверятьЗаполнение;
	
	Если Результат И ПроверятьЗаполнение Тогда
		Если ОбъектXDTO[ИмяСвойства] = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СодержаниеОперацииПередачаТоваров()
	Возврат "Перечисленные в документе ценности переданы";
КонецФункции

Функция НаименованиеДокументаПередачаТоваров()
	Возврат "Товарная накладная";
КонецФункции

Функция НаименованиеДокументаПередачаРабот()
	Возврат НСтр("ru ='Акт о передаче результатов работ (Акт об оказании услуг)'");
КонецФункции

Функция НаименованиеФактаПередачаРабот()
	Возврат "Документ о передаче результатов работ (Документ об оказании услуг)";
КонецФункции

Функция НаименованиеФактаПередачаТоваров()
	Возврат НСтр("ru ='Документ о передаче товара при торговых операциях'");
КонецФункции

Функция ДолжностныеОбязанности()
	Возврат НСтр("ru ='Должностные обязанности по умолчанию'");
КонецФункции

Процедура ДобавитьДоговорВДеревоДокумента(РеквизитыДоговора, НовыйЭД, ДеревоРазбора, Ошибка)

	ДоговорКонтрагента = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", , РеквизитыДоговора);
	
	ДоговорНомер = РеквизитыДоговора.НомерДоговора;
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДоговорыКонтрагентов");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ДоговорНомер, НСтр("ru ='Номер договора:'") + " " + ДоговорНомер, ДоговорКонтрагента,
				РеквизитыДоговора, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоговорКонтрагента", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура ПрочитатьДокументыСделки(ДеревоРазбора, НовыйЭД, ВладелецДоговора, Ошибка)
	
	ДокументыСделки = ПолучитьРеквизитШапкиЭД(НовыйЭД, "ДокументыСделки");
	Если ДокументыСделки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументыСделки.Колонки.Найти("Идентификатор") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДокументыСделки Цикл
		
		// Если идентификатор "договор" - это договор контрагента.
		Если Не ТекСтрока.Идентификатор = "договор" Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = Новый Структура;
		РеквизитыДоговора.Вставить("НомерДоговора", ТекСтрока.Номер);
		РеквизитыДоговора.Вставить("ДатаДоговора", ДатаИзСтроки(ТекСтрока.Дата));
		РеквизитыДоговора.Вставить("Владелец", ВладелецДоговора);
		
		ДобавитьДоговорВДеревоДокумента(РеквизитыДоговора, НовыйЭД, ДеревоРазбора, Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеТаблицыДереваЭД(ДеревоДанных, ИмяТаблицы)
	
	Возврат ДеревоДанных.Строки.Найти(ИмяТаблицы, "ПолныйПуть");
	
КонецФункции

Процедура ЗаполнитьРеквизитДерева(Дерево, Реквизит, Значение, КорневойЭлементДерева = "")
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, КорневойЭлементДерева = "");
	
КонецПроцедуры

Функция ШаблонОснованияДокумента()
	
	Шаблон = Новый ТаблицаЗначений;
	Шаблон.Колонки.Добавить("ДокОснованиеНаименование");
	Шаблон.Колонки.Добавить("ДокОснованиеНомер");
	Шаблон.Колонки.Добавить("ДокОснованиеДата");
	Шаблон.Колонки.Добавить("ДокОснованиеДопСведения");
	
	Возврат Шаблон;
	
КонецФункции

Функция ШаблонТранспортнаяНакладная()
	
	Шаблон = Новый ТаблицаЗначений;
	Шаблон.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	Шаблон.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	Возврат Шаблон;
	
КонецФункции

Процедура ЗаполнитьДанныеЛицаПередавшегоГруз(ДеревоДанных, ДанныеЛицаПередавшегоГруз)
	
	Если ДанныеЛицаПередавшегоГруз.РабОргПрод <> Неопределено Тогда
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность",
			ДанныеЛицаПередавшегоГруз.РабОргПрод.Должность);
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения",
			ДанныеЛицаПередавшегоГруз.РабОргПрод.ИныеСвед);
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий",
			ДанныеЛицаПередавшегоГруз.РабОргПрод.ОснПолн);
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия",
			ДанныеЛицаПередавшегоГруз.РабОргПрод.ФИО.Фамилия);
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя",
			ДанныеЛицаПередавшегоГруз.РабОргПрод.ФИО.Имя);
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество",
			ДанныеЛицаПередавшегоГруз.РабОргПрод.ФИО.Отчество);
		
	ИначеЕсли ДанныеЛицаПередавшегоГруз.ИнЛицо <> Неопределено Тогда
		Если ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер <> Неопределено Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.Должность);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.ИныеСвед);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.НаимОргПер);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.ОснДоверОргПер);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.ОснПолнПредПер);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.ФИО.Фамилия);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.ФИО.Имя);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ПредОргПер.ФИО.Отчество);
			
		ИначеЕсли ЕстьСвойствоXDTO(ДанныеЛицаПередавшегоГруз.ИнЛицо, "ФЛПер") Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛПер.ИныеСвед);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛПер.ОснДоверФЛ);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛПер.ФИО.Фамилия);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛПер.ФИО.Имя);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛПер.ФИО.Отчество);
				
		ИначеЕсли ЕстьСвойствоXDTO(ДанныеЛицаПередавшегоГруз.ИнЛицо, "ФЛ") Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛ.ИныеСвед);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛ.ОснДоверФЛ);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛ.ФИО.Фамилия);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛ.ФИО.Имя);
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество",
				ДанныеЛицаПередавшегоГруз.ИнЛицо.ФЛ.ФИО.Отчество);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоДанных, СведенияОбУчастнике, ВидУчастника)
	
	Если СведенияОбУчастнике.ИдСв.СвОрг <> Неопределено Тогда
		
			СведенияЮЛ = СведенияОбУчастнике.ИдСв.СвОрг.СвЮЛ;
			Если Не СведенияЮЛ = Неопределено Тогда
					ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
								СведенияЮЛ.НаимОрг);
					ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
								СведенияЮЛ.ИННЮЛ);
					ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
								СведенияЮЛ.КПП);
			КонецЕсли;
			СведенияИностраннаяОрганизация = СведенияОбУчастнике.ИдСв.СвОрг.ИнОрг;
			Если Не СведенияИностраннаяОрганизация = Неопределено Тогда
					ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации",
								СведенияИностраннаяОрганизация.НаимОрг);
					ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна",
								СведенияИностраннаяОрганизация.Страна);
					ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.ИныеСведения",
								СведенияИностраннаяОрганизация.ИныеСвед);
								
			КонецЕсли;
			
	ИначеЕсли СведенияОбУчастнике.ИдСв.СвФЛ <> Неопределено Тогда
		
		СведенияФЛ = СведенияОбУчастнике.ИдСв.СвФЛ;
		ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
								СведенияФЛ.ИННФЛ);
		
		ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
								СведенияФЛ.ФИО.Фамилия);
		
		ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ФЛ.Имя",
								СведенияФЛ.ФИО.Имя);
	
		ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
								СведенияФЛ.ФИО.Отчество);
	
	КонецЕсли;
	
	Если СведенияОбУчастнике.Адрес <> Неопределено Тогда
		
		КодСтраны = "";
		АдресУчастника = СведенияОбУчастнике.Адрес;
		Если АдресУчастника.АдрРФ <> Неопределено Тогда
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.Индекс",
									СведенияОбУчастнике.Адрес.АдрРФ.Индекс);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.КодРегион",
									СведенияОбУчастнике.Адрес.АдрРФ.КодРегион);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.Район",
									СведенияОбУчастнике.Адрес.АдрРФ.Район);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.Город",
									СведенияОбУчастнике.Адрес.АдрРФ.Город);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.НаселПункт",
									СведенияОбУчастнике.Адрес.АдрРФ.НаселПункт);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.Улица",
									СведенияОбУчастнике.Адрес.АдрРФ.Улица);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.Дом",
									СведенияОбУчастнике.Адрес.АдрРФ.Дом);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.Корпус",
									СведенияОбУчастнике.Адрес.АдрРФ.Корпус);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Структурированный.Кварт",
									СведенияОбУчастнике.Адрес.АдрРФ.Кварт);
										
		ИначеЕсли ЕстьСвойствоXDTO(АдресУчастника, "АдрИнф") Тогда
			ИнформацияОбАдресе = АдресУчастника.АдрИнф;
			КодСтраны = ИнформацияОбАдресе.КодСтр;
			
		ИначеЕсли ЕстьСвойствоXDTO(АдресУчастника, "АдрИно") Тогда
			ИнформацияОбАдресе = АдресУчастника.АдрИно;
			КодСтраны = ИнформацияОбАдресе.КодСтр;
			
		КонецЕсли;
		
		Если КодСтраны = "643" Тогда
			
			ЗаполнитьРеквизитДерева(
						ДеревоДанных,
						ВидУчастника + ".Адрес.Произвольный",
						ИнформацияОбАдресе.АдрТекст);
			
		Иначе
			Если Не ИнформацияОбАдресе = Неопределено Тогда
				ЗаполнитьРеквизитДерева(
						ДеревоДанных,
						ВидУчастника + ".Адрес.Иностранный.КодСтраны",
						ИнформацияОбАдресе.КодСтр);
						ЗаполнитьРеквизитДерева(
						ДеревоДанных,
						ВидУчастника + ".Адрес.Иностранный.АдресТекст",
						ИнформацияОбАдресе.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СведенияОбУчастнике.Контакт <> Неопределено Тогда
		ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".Контакт.Телефон",
								СведенияОбУчастнике.Контакт.Тлф);
		ЗаполнитьРеквизитДерева(
								ДеревоДанных,
								ВидУчастника + ".Контакт.ЭлектроннаяПочта",
								СведенияОбУчастнике.Контакт.ЭлПочта);
	КонецЕсли;
	
	Если СведенияОбУчастнике.БанкРекв <> Неопределено Тогда
		ЗаполнитьРеквизитДерева(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				СведенияОбУчастнике.БанкРекв.НомерСчета);
				
		Если СведенияОбУчастнике.БанкРекв.СвБанк <> Неопределено Тогда
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".БанковскийСчет.НаимБанк",
									СведенияОбУчастнике.БанкРекв.СвБанк.НаимБанк);
			ЗаполнитьРеквизитДерева(
									ДеревоДанных,
									ВидУчастника + ".БанковскийСчет.БИК",
									СведенияОбУчастнике.БанкРекв.СвБанк.БИК);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитДерева(
		ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.ОКПО);
	
	ЗаполнитьРеквизитДерева(
		ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение", СведенияОбУчастнике.СтруктПодр);

КонецПроцедуры

Процедура ЗаполнитьРеквизитыУчастникаСделки(ДеревоЭД, ВидУчастника, СвойстваУчастника)
	
	Если ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		СвойстваУчастника.ИНН = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		СвойстваУчастника.КПП = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		СвойстваУчастника.ИНН = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		СвойстваУчастника.Фамилия = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		СвойстваУчастника.Имя = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		СвойстваУчастника.Отчество = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");

	ИначеЕсли ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ИностраннаяОрганизация" Тогда
		
		СвойстваУчастника.Наименование = ЗначениеРеквизитаДерева(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации");
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыУчастникаСделки()
	
	РеквизитыУчастникаСделки = Новый Структура;
	
	РеквизитыУчастникаСделки.Вставить("ИНН", "");
	РеквизитыУчастникаСделки.Вставить("КПП", "");
	РеквизитыУчастникаСделки.Вставить("Наименование", "");
	РеквизитыУчастникаСделки.Вставить("Фамилия", "");
	РеквизитыУчастникаСделки.Вставить("Имя", "");
	РеквизитыУчастникаСделки.Вставить("Отчество", "");

	
	Возврат РеквизитыУчастникаСделки;
	
КонецФункции

Процедура ПоместитьДопДанныеВДеревоЭД(ДеревоЭД, ДеревоДопДанных)
	
	ДопДанныеШапки = ДеревоДопДанных.Строки.Найти("Шапка", "ЗначениеРеквизита");
	
	Если ДопДанныеШапки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДереваШапки Из ДопДанныеШапки.Строки Цикл
		Если СтрокаДереваШапки.ЮридическиЗначимый Тогда
		
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоЭД,
				Новый Структура(СтрокаДереваШапки.ИмяРеквизита, СтрокаДереваШапки.ЗначениеРеквизита), Истина);
			
		Иначе
				
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоЭД,
				Новый Структура(СтрокаДереваШапки.ИмяРеквизита, СтрокаДереваШапки.ЗначениеРеквизита), Ложь);
			
		КонецЕсли;
		
		// Если в доп. данных есть реквизиты договора, они помещаются в дерево документа.
		Если ВРег(СтрокаДереваШапки.ИмяРеквизита) = ВРег("ДокументСделкиНаименование")
			Или ВРег(СтрокаДереваШапки.ИмяРеквизита) = ВРег("ДокументСделкиНомер")
			Или ВРег(СтрокаДереваШапки.ИмяРеквизита) = ВРег("ДокументСделкиДата") Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоЭД, СтрокаДереваШапки.ИмяРеквизита, СтрокаДереваШапки.ЗначениеРеквизита);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОЛицеПередавшемТовар(ДеревоДанных, СведенияОПередаче, ПространствоИменСхемы, ТекстОшибки)
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары")) Тогда
		
		СведенияГрузОтпустил = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз", ПространствоИменСхемы);
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "РаботникОрганизацииПродавца" Тогда
			
			РаботникОрганизации = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод", ПространствоИменСхемы);
			
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность");
			ЗаполнитьСвойствоXDTO(РаботникОрганизации, "Должность", Реквизит, Истина, ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения");
			ЗаполнитьСвойствоXDTO(РаботникОрганизации, "ИныеСвед", Реквизит, , ТекстОшибки);
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий");
			ЗаполнитьСвойствоXDTO(РаботникОрганизации, "ОснПолн", Реквизит, , ТекстОшибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия");
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
			Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя");
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
			Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество");
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РаботникОрганизации, "ФИО", ФИО,  , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СведенияГрузОтпустил, "РабОргПрод", РаботникОрганизации, , ТекстОшибки);
			
		ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "ИноеЛицо" Тогда
			
			ИноеЛицо = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо", ПространствоИменСхемы);
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
				ПредставительОрганизации = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер", ПространствоИменСхемы);
				
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
				ЗаполнитьСвойствоXDTO(ПредставительОрганизации, "Должность", Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения");
				ЗаполнитьСвойствоXDTO(ПредставительОрганизации, "ИныеСвед", Реквизит, , ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации");
				ЗаполнитьСвойствоXDTO(ПредставительОрганизации, "НаимОргПер", Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку");
				ЗаполнитьСвойствоXDTO(ПредставительОрганизации, "ОснДоверОргПер", Реквизит, , ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий");
				ЗаполнитьСвойствоXDTO(ПредставительОрганизации, "ОснПолнПредПер", Реквизит, , ТекстОшибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия");
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
				Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя");
				ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
				Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество");
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ПредставительОрганизации, "ФИО", ФИО,  , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(ИноеЛицо, "ПредОргПер", ПредставительОрганизации, , ТекстОшибки);
			ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ФЛ" Тогда
				
				ФизЛицоПередавшееГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер", ПространствоИменСхемы);
				
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения");
				ЗаполнитьСвойствоXDTO(ФизЛицоПередавшееГруз, "ИныеСвед", Реквизит, , ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку");
				ЗаполнитьСвойствоXDTO(ФизЛицоПередавшееГруз, "ОснДоверФЛ", Реквизит, , ТекстОшибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия");
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
				Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя");
				ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
				Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество");
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФизЛицоПередавшееГруз, "ФИО", ФИО,  , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(ИноеЛицо, "ФЛПер", ФизЛицоПередавшееГруз, , ТекстОшибки);
				
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияГрузОтпустил, "ИнЛицо", ИноеЛицо, , ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(СведенияОПередаче, "СвЛицОтпГруз", СведенияГрузОтпустил, , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПодписанта(НовыйЭД, Документ)
	
	Если Документ.Подписант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписанта = Новый Структура("Должность, ФИО, ФИОПБОЮЛ, НаименованиеОрганизации");
	ФИО = Новый Структура("Фамилия, Имя, Отчество");
	Для Каждого ТекПодписант Из Документ.Подписант Цикл
		
		НаименованиеОрганизации = "";
		
		Если Не ТекПодписант.ЮЛ = Неопределено Тогда
			ФИО.Фамилия = ТекПодписант.ЮЛ.ФИО.Фамилия;
			ФИО.Имя = ТекПодписант.ЮЛ.ФИО.Имя;
			ФИО.Отчество = ТекПодписант.ЮЛ.ФИО.Отчество;
			Должность = ТекПодписант.ЮЛ.Должн;
			ФИОРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			ФИОПБОЮЛ = "";

		ИначеЕсли Не ТекПодписант.ФЛ = Неопределено Тогда
			ФИО.Фамилия = ТекПодписант.ФЛ.ФИО.Фамилия;
			ФИО.Имя = ТекПодписант.ФЛ.ФИО.Имя;
			ФИО.Отчество = ТекПодписант.ФЛ.ФИО.Отчество;
			ФИОПБОЮЛ = "";
			Если Не (ФИО.Фамилия = "-" И ФИО.Имя = "-") Тогда
				ФИОПБОЮЛ = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
			Должность= "";
			ФИОРуководителя = "";
			
		ИначеЕсли Не ТекПодписант.ИП = Неопределено Тогда
			ФИО.Фамилия = ТекПодписант.ИП.ФИО.Фамилия;
			ФИО.Имя = ТекПодписант.ИП.ФИО.Имя;
			ФИО.Отчество = ТекПодписант.ИП.ФИО.Отчество;
			ФИОПБОЮЛ = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			Должность= "";
			ФИОРуководителя = "";
		
		КонецЕсли;
		
		ДанныеПодписанта.Должность = Должность;
		ДанныеПодписанта.ФИО = ФИОРуководителя;
		ДанныеПодписанта.ФИОПБОЮЛ = ФИОПБОЮЛ;
		ДанныеПодписанта.НаименованиеОрганизации = НаименованиеОрганизации;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Подписант", ДанныеПодписанта);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает свойства владельца сертификата криптографии с учетом их состава (ЮЛ,ИП,ФЛ).
// Часть функциональности служебного метода библиотеки стандартных подсистем.
//
// Параметры:
//   Сертификат - СертификатКриптографии - для которого нужно вернуть свойства субъекта.
//
// Возвращаемое значение:
//  Структура - возвращаемое значение, со свойствами:
//     * ОбщееИмя         - Строка(64) - извлекается из поля CN.
//                          ЮЛ: В зависимости от типа конечного владельца СКПЭП
//                              - наименование организации;
//                              - название автоматизированной системы;
//                              - другое отображаемое имя по требованиям информационной системы.
//                          ФЛ: ФИО.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Должность        - Строка(64) - извлекается из поля T.
//                          ЮЛ: В случае выпуска СКПЭП на должностное лицо - его должность.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ИНН              - Строка(12) - извлекается из поля INN.
//                          ФЛ: ИНН.
//                          ИП: ИНН.
//                          ЮЛ: Не обязательно, но может быть заполнен для целей взаимодействия с ФНС.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Фамилия          - Строка(64) - извлекается из поля SN, если заполнено.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Имя              - Строка(64) - извлекается из поля GN, если заполнено.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Отчество         - Строка(64) - извлекается из поля GN, если заполнено.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
Функция СвойстваВладельцаСертификата(Сертификат)
	
	Субъект = Сертификат.Субъект;
	
	Свойства = Новый Структура;
	Свойства.Вставить("ОбщееИмя");
	Свойства.Вставить("Организация");
	Свойства.Вставить("Должность");
	Свойства.Вставить("ИНН");
	Свойства.Вставить("Фамилия");
	Свойства.Вставить("Имя");
	Свойства.Вставить("Отчество");
	
	Если Субъект.Свойство("CN") Тогда
		Свойства.ОбщееИмя = ПодготовитьСтроку(Субъект.CN);
	КонецЕсли;
	
	Если Субъект.Свойство("O") Тогда
		Свойства.Организация = ПодготовитьСтроку(Субъект.O);
	КонецЕсли;
	
	Если Субъект.Свойство("INN") Тогда
		Свойства.ИНН = ПодготовитьСтроку(Субъект.INN);
		
	ИначеЕсли Субъект.Свойство("OID1_2_643_3_131_1_1")Тогда
		Свойства.ИНН = ПодготовитьСтроку(Субъект.OID1_2_643_3_131_1_1);
	КонецЕсли;
	
	Если Субъект.Свойство("SN") Тогда // Наличие фамилии (обычно для должностного лица).
		
		// Извлечение ФИО из поля SN и GN.
		Свойства.Фамилия = ПодготовитьСтроку(Субъект.SN);
		
		Если Субъект.Свойство("GN") Тогда
			GivenName = ПодготовитьСтроку(Субъект.GN);
			Позиция = СтрНайти(GivenName, " ");
			Если Позиция = 0 Тогда
				Свойства.Имя = GivenName;
			Иначе
				Свойства.Имя = Лев(GivenName, Позиция - 1);
				Свойства.Отчество = ПодготовитьСтроку(Сред(GivenName, Позиция + 1));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Субъект.Свойство("OGRNIP")            // Признак индивидуального предпринимателя.
	      Или Субъект.Свойство("OID1_2_643_100_5")  // Признак индивидуального предпринимателя.
	      Или Субъект.Свойство("T")                 // Признак должностного лица.
	      Или Субъект.Свойство("OID2_5_4_12")       // Признак должностного лица.
	      Или Субъект.Свойство("SNILS")                                     // Признак физического лица.
	      Или Субъект.Свойство("OID1_2_643_100_3")                          // Признак физического лица.
	      Или ЭтоИННФизЛица(Субъект.Свойство("INN"))                        // Признак физического лица.
	      Или ЭтоИННФизЛица(Субъект.Свойство("OID1_2_643_3_131_1_1")) Тогда // Признак физического лица.
		
		Если Свойства.ОбщееИмя <> Свойства.Организация
		   И Не (Субъект.Свойство("T")           И Свойства.ОбщееИмя = ПодготовитьСтроку(Субъект.T))
		   И Не (Субъект.Свойство("OID2_5_4_12") И Свойства.ОбщееИмя = ПодготовитьСтроку(Субъект.OID2_5_4_12)) Тогда
			
			// Извлечение ФИО из поля CN.
			Массив = СтрРазделить(Свойства.ОбщееИмя, " ", Ложь);
			
			Если Массив.Количество() < 4 Тогда
				Если Массив.Количество() > 0 Тогда
					Свойства.Фамилия = СокрЛП(Массив[0]);
				КонецЕсли;
				Если Массив.Количество() > 1 Тогда
					Свойства.Имя = СокрЛП(Массив[1]);
				КонецЕсли;
				Если Массив.Количество() > 2 Тогда
					Свойства.Отчество = СокрЛП(Массив[2]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Свойства.Фамилия)
	 Или ЗначениеЗаполнено(Свойства.Имя) Тогда
		
		Если Субъект.Свойство("T") Тогда
			Свойства.Должность = ПодготовитьСтроку(Субъект.T);
			
		ИначеЕсли Субъект.Свойство("OID2_5_4_12") Тогда
			Свойства.Должность = ПодготовитьСтроку(Субъект.OID2_5_4_12);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Функция ЭтоИННФизЛица(ИНН)
	
	Если СтрДлина(ИНН) <> 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерСимвола = 1 По 12 Цикл
		Если СтрНайти("0123456789", Сред(ИНН,НомерСимвола,1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрНачинаетсяС(ИНН, "00") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПодготовитьСтроку(СтрокаИзСертификата)
	
	Возврат СокрЛП(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаИзСертификата));
	
КонецФункции

#КонецОбласти

