////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ДатаСеанса() Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для гражданства
//
// Параметры:
//	ИнформацияОГражданстве - объект, имеющий свойства 
//		Страна
//		
Функция ГражданствоПоУмолчанию(ИнформацияОГражданстве) Экспорт
	
	Возврат ИнформацияОГражданстве.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию статуса застрахованного физического лица
//
// Параметры:
//	СтатусЗастрахованногоЛица - объект, имеющий свойство 
//		ВидЗастрахованногоЛица
//		
Функция СтатусыЗастрахованныхФизическихЛицПоУмолчанию(СтатусЗастрахованногоЛица) Экспорт
	
	Возврат СтатусЗастрахованногоЛица.ВидЗастрахованногоЛица = ПредопределенноеЗначение("Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ");
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для сведений об инвалидности
// т.е. сотрудник не является инвалидом
//
// Параметры:
//	СведенияОбИнвалидности - объект, имеющий свойства 
//		Инвалидность
//		СрокДействияСправки
//		
Функция СведенияОбИнвалидностиПоУмолчанию(СведенияОбИнвалидности) Экспорт
	Возврат (НЕ СведенияОбИнвалидности.Инвалидность)
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.СрокДействияСправки))
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для удостоверения личности
//
// Параметры:
//	ИнформацияОбУдостоверенииЛичности - объект, имеющий свойства 
//		ВидДокумента
//		Серия
//		Номер
//		ДатаВыдачи
//		КемВыдан
//		КодПодразделения
//		
Функция УдостоверениеЛичностиПоУмолчанию(ИнформацияОбУдостоверенииЛичности) Экспорт
	
	Возврат (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ВидДокумента))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Серия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Номер))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.СрокДействия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КемВыдан))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КодПодразделения));
		
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для бухучета сотрудника
//
// Параметры:
//	БухучетЗарплатыСотрудников - объект, имеющий свойства 
//		СпособОтраженияЗарплатыВБухучете
//		ОтношениеКЕНВД
//		
Функция СведенияОБухучетеСотрудникаПоУмолчанию(БухучетЗарплатыСотрудников) Экспорт
	Возврат (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете))
		И (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.ОтношениеКЕНВД))
		И (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.СтатьяФинансирования));
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой"

Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

Процедура ЗаполнитьМесяцПоДатеВТабличнойЧасти(ДанныеТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	Для Каждого СтрокаТабличнойЧасти Из ДанныеТабличнойЧасти Цикл
		ЗаполнитьМесяцПоДате(СтрокаТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='MMMM yyyy'");
	
КонецФункции

// 
////////////////////////////////////////////////////////////////////////////////

// Процедура вызывается в форме, содержащей данные физического лица при изменении данных физического лица.
// Например, для отработки оповещения о записи нового состояния физлица
// Параметры:
//		Объект - данные формы в которой выполняется редактирование
//		ДанныеФизическогоЛица - новое состояние физического лица. Структура с полями, совпадающими по именам с полями данных формы
//
Процедура ОбработкаИзмененияДанныхФизическогоЛица(Объект, ДанныеФизическогоЛица, СтрокиПоСотруднику, Модифицированность = Ложь) Экспорт
	Перем ИмяПоляВДокументе, ЗначениеСвойстваСотрудника;
	ТипДокумента = ТипЗнч(Объект.Ссылка);
	
	СоответсвиеДанных = СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента);
	Для Каждого СтрокаСотрудника Из СтрокиПоСотруднику Цикл
		Для Каждого КлючЗначение Из ДанныеФизическогоЛица Цикл
			Если СоответсвиеДанных.Свойство(КлючЗначение.Ключ, ИмяПоляВДокументе) Тогда
				
				ДанныеСтрокиСотрудника = Новый Структура;
				ДанныеСтрокиСотрудника.Вставить(ИмяПоляВДокументе);
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиСотрудника, СтрокаСотрудника);
				Если ДанныеСтрокиСотрудника[ИмяПоляВДокументе] <> Неопределено Тогда
					Если ЗначениеСвойстваСотрудника <> КлючЗначение.Значение Тогда
						Модифицированность = Истина;
						СтрокаСотрудника[ИмяПоляВДокументе] = КлючЗначение.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам
// 
// Параметры
//	ПроверяемыйОбъект	- проверяемое, любой объект, допускающий доступ к полям по имени
//	ПравилаПроверки		- структура, в которой ключем является проверяемое свойство, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю
//								
//	Возвращаемое значение:
//		Булево. Истина - ошибок не обнаружено, Ложь - в противном случае. 
//			
Функция СвойстваЗаполнены(ПроверяемыйОбъект, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		Если НЕ ЗначениеЗаполнено(ПроверяемыйОбъект[ПравилоПроверки.Ключ]) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Значение, ПроверяемыйОбъект, НарушенноеПравило.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам
// 
// Параметры
//	Форма			- управляемая форма
//	ПравилаПроверки	- список значение, в которой значением является путь к данными, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю
//								
//	Возвращаемое значение:
//		Булево. Истина - все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваФормыЗаполнены(Форма, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПравилоПроверки.Значение);
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Представление, , НарушенноеПравило.Значение);
		КонецЦикла
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расшифровка рег.отчетности

Функция РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 5, 2)
	
КонецФункции

Функция СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 9, 3)
	
КонецФункции

Функция КолонкаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 12, 2)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ДатаОтсчетаПериодическихСведений() Экспорт
	
	Возврат '18991231000000';
	
КонецФункции

Функция ДатаОтсчетаПериодическихСведенийСПериодомМесяц() Экспорт
	
	Возврат КонецМесяца(ДатаОтсчетаПериодическихСведений()) + 1;
	
КонецФункции

Функция СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента)
	
	СтруктураСоответствия = Новый Структура();
	Если ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_2") Или  ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_3") Тогда
		СтруктураСоответствия.Вставить("Фамилия", "ДанныеФизЛицаФамилия");
		СтруктураСоответствия.Вставить("Имя", "ДанныеФизЛицаИмя");
		СтруктураСоответствия.Вставить("Отчество", "ДанныеФизЛицаОтчество");
		СтруктураСоответствия.Вставить("СтраховойНомерПФР", "СтраховойНомерПФРВСвидетельстве");
		СтруктураСоответствия.Вставить("Пол", "ДанныеФизЛицаПол");
		СтруктураСоответствия.Вставить("ДатаРождения", "ДанныеФизЛицаДатаРождения");
		СтруктураСоответствия.Вставить("МестоРождения", "ДанныеФизЛицаМестоРождения");
		СтруктураСоответствия.Вставить("МестоРожденияПредставление", "ДанныеФизЛицаМестоРожденияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "ДанныеФизЛицаАдресРегистрацииПредставление");
		СтруктураСоответствия.Вставить("АдресФактическийПредставление", "ДанныеФизЛицаАдресФактическийПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрации", "ДанныеФизЛицаАдресРегистрации");
		СтруктураСоответствия.Вставить("АдресФактический", "ДанныеФизЛицаАдресФактический");
		СтруктураСоответствия.Вставить("Гражданство", "ДанныеФизЛицаГражданство");
		СтруктураСоответствия.Вставить("Телефоны", "ДанныеФизЛицаТелефоны");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_2") Или  ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_3") Тогда
		СтруктураСоответствия.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
		СтруктураСоответствия.Вставить("АдресДляИнформирования", "АдресДляИнформирования");
		СтруктураСоответствия.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформированияПредставление");
	Иначе
		СтруктураСоответствия.Вставить("Фамилия", "Фамилия");
		СтруктураСоответствия.Вставить("Имя", "Имя");
		СтруктураСоответствия.Вставить("Отчество", "Отчество");
		СтруктураСоответствия.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
		СтруктураСоответствия.Вставить("Пол", "Пол");	
		СтруктураСоответствия.Вставить("ДатаРождения", "ДатаРождения");
		СтруктураСоответствия.Вставить("МестоРождения", "МестоРождения");
		СтруктураСоответствия.Вставить("МестоРожденияПредставление", "МестоРожденияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставление");
		СтруктураСоответствия.Вставить("АдресФактическийПредставление", "АдресФактическийПредставление");
		СтруктураСоответствия.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформированияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрации", "АдресРегистрации");
		СтруктураСоответствия.Вставить("АдресФактический", "АдресФактический");
		СтруктураСоответствия.Вставить("АдресДляИнформирования", "АдресДляИнформирования");
		СтруктураСоответствия.Вставить("Гражданство", "Гражданство");
		СтруктураСоответствия.Вставить("Телефоны", "Телефоны");
		СтруктураСоответствия.Вставить("ИНН", "ИНН");
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Или ТипДокумента = Тип("ДокументСсылка.СправкаНДФЛ") Тогда
		СтруктураСоответствия.Вставить("АдресРегистрации", "Адрес");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресПредставление");
		СтруктураСоответствия.Вставить("АдресЗарубежом", "АдресЗарубежом");
		СтруктураСоответствия.Вставить("АдресЗарубежомПредставление", "АдресЗарубежомПредставление");
	КонецЕсли;
	
	СтруктураСоответствия.Вставить("ВидДокумента", "ВидДокумента");
	СтруктураСоответствия.Вставить("Серия", "СерияДокумента");
	СтруктураСоответствия.Вставить("Номер", "НомерДокумента");
	СтруктураСоответствия.Вставить("ДатаВыдачи", "ДатаВыдачи");
	СтруктураСоответствия.Вставить("КемВыдан", "КемВыдан");
	СтруктураСоответствия.Вставить("СтатусНалогоплательщика", "СтатусНалогоплательщика");
	
	Возврат СтруктураСоответствия;
	
КонецФункции

Функция ПредставлениеВидаНачисленияПоНКРФ(ВидНачисления) Экспорт 
	
	Если ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы, начисленные по тарифным ставкам, должностным окладам, сдельным расценкам или в процентах от выручки в соответствии с принятыми формами и системами оплаты труда'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Начисления стимулирующего характера, в том числе премии за производственные результаты, надбавки к тарифным ставкам и окладам за профессиональное мастерство, высокие достижения в труде и иные подобные показатели'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Начисления стимулирующего и/или компенсирующего характера, связанные с режимом работы и условиями труда, в том числе надбавки к тарифным ставкам и окладам за работу в ночное время, работу в многосменном режиме, за совмещение профессий, расширение зон обслуживания, за работу в тяжелых, вредных, особо вредных условиях труда, за сверхурочную работу и работу в выходные и праздничные дни, производимые в соответствии с законодательством РФ'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп4ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Стоимость бесплатно предоставляемых работникам в соответствии с законодательством РФ коммунальных услуг, питания и продуктов, предоставляемого работникам в соответствии с установленным законодательством РФ порядком бесплатного жилья'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп5ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на приобретение (изготовление) выдаваемых в соответствии с законодательством РФ работникам бесплатно либо продаваемых работникам по пониженным ценам форменной одежды и обмундирования (в части стоимости, не компенсируемой работниками), которые остаются в личном постоянном пользовании работников'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Сумма начисленного работникам среднего заработка, сохраняемого на время выполнения ими государственных и (или) общественных обязанностей и в других случаях, предусмотренных законодательством РФ о труде'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда, сохраняемую работникам на время отпуска, предусмотренного законодательством РФ, фактические расходы на оплату проезда работников и лиц, находящихся у этих работников на иждивении, к месту использования отпуска на территории РФ и обратно; доплата несовершеннолетним за сокращенное рабочее время, расходы на оплату перерывов в работе матерей для кормления ребенка, а также расходы на оплату времени, связанного с прохождением медицинских осмотров'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп8ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Денежные компенсации за неиспользованный отпуск в соответствии с трудовым законодательством РФ'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Начисления работникам, высвобождаемым в связи с реорганизацией или ликвидацией организации, сокращением численности или штата работников'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп10ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Единовременные вознаграждения за выслугу лет (надбавки за стаж работы по специальности) в соответствии с законодательством РФ'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп11ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Надбавки, обусловленные районным регулированием оплаты труда, в том числе начисления по районным коэффициентам и коэффициентам за работу в тяжелых природно-климатических условиях'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп12ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Надбавки за непрерывный стаж работы в районах Крайнего Севера и приравненных к ним местностях, в районах европейского Севера и других районах с тяжелыми природно-климатическими условиями'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп12_1ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Стоимость проезда по фактическим расходам и стоимость провоза багажа из расчета не более 5 тонн на семью по фактическим расходам, но не выше тарифов, предусмотренных для перевозок железнодорожным транспортом сотруднику организации, расположенной в районах Крайнего Севера и приравненных к ним местностях, и членам его семьи в случае переезда к новому месту жительства в другую местность в связи с расторжением трудового договора с сотрудником по любым основаниям, в том числе в случае его смерти, за исключением увольнения за виновные действия'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда, сохраняемую в соответствии с законодательством РФ на время учебных отпусков, предоставляемых работникам, а также расходы на оплату проезда к месту учебы и обратно'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп14ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда за время вынужденного прогула или время выполнения нижеоплачиваемой работы в случаях, предусмотренных законодательством РФ'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп15ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = '(утратил силу с 01 января 2010 года) Расходы на доплату до фактического заработка в случае временной утраты трудоспособности, установленную законодательством РФ'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп16ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы платежей (взносов) по договорам обязательного страхования, а также суммы платежей (взносов) по договорам добровольного страхования (договорам негосударственного пенсионного обеспечения), заключенным в пользу работников со страховыми организациями (негосударственными пенсионными фондами), имеющими лицензии, выданные в соответствии с законодательством РФ, на ведение соответствующих видов деятельности в РФ'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп17ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы, начисленные в размере тарифной ставки или оклада (при выполнении работ вахтовым методом), предусмотренные коллективными договорами, за дни нахождения в пути от места нахождения организации (пункта сбора) к месту работы и обратно, предусмотренные графиком работы на вахте, а также за дни задержки работников в пути по метеорологическим условиям'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп18ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы, начисленные за выполненную работу физическим лицам, привлеченным для работы согласно специальным договорам на предоставление рабочей силы с государственными организациями'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп19ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'В случаях, предусмотренных законодательством РФ, начисления по основному месту работы рабочим, руководителям или специалистам налогоплательщика во время их обучения с отрывом от работы в системе повышения квалификации или переподготовки кадров'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп20ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда работников-доноров за дни обследования, сдачи крови и отдыха, предоставляемые после каждого дня сдачи крови'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп21ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда работников, не состоящих в штате организации, за выполнение ими работ по заключенным договорам гражданско-правового характера (включая договоры подряда), за исключением оплаты труда по договорам гражданско-правового характера, заключенным с индивидуальными предпринимателями'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп22ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Предусмотренные законодательством РФ начисления военнослужащим, проходящим военную службу на государственных унитарных предприятиях и в строительных организациях федеральных органов исполнительной власти, в которых законодательством РФ предусмотрена военная служба, и лицам рядового и начальствующего состава органов внутренних дел, Государственной противопожарной службы, предусмотренные федеральными законами, законами о статусе военнослужащих и об учреждениях и органах, исполняющих уголовные наказания в виде лишения свободы'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп23ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Доплаты инвалидам, предусмотренные законодательством РФ'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп24ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы в виде отчислений в резерв на предстоящую оплату отпусков работникам и (или) в резерв на выплату ежегодного вознаграждения за выслугу лет, осуществляемые в соответствии со статьей 324.1 НК'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп24_1ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на возмещение затрат работников по уплате процентов по займам (кредитам) на приобретение и (или) строительство жилого помещения. Указанные расходы для целей налогообложения признаются в размере, не превышающем 3 процентов суммы расходов на оплату труда'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп48ст266") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Прочие расходы, связанные с производством и (или) реализацией'");
	ИначеЕсли ВидНачисления.Пустая() Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Не учитывается в расходах на оплату труда'");
	КонецЕсли;
	
	Возврат РасшифровкаВидНачисления	
	
КонецФункции

Функция ПредставлениеРегистрацииВНалоговомОргане(Знач СтруктурнаяЕдиница, Знач РегистрацияВНалоговомОргане) Экспорт
	
	Представление = "";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		ДанныеРегистрацииВНалоговомОргане = ЗарплатаКадрыВызовСервера.ДанныеРегистрацииВНалоговомОргане(СтруктурнаяЕдиница, РегистрацияВНалоговомОргане);
		Если ДанныеРегистрацииВНалоговомОргане.ВладелецФизическоеЛицо Тогда
			
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (%2), ОКАТО %4.'"),
				ДанныеРегистрацииВНалоговомОргане.Наименование,
				ДанныеРегистрацииВНалоговомОргане.Код,
				ДанныеРегистрацииВНалоговомОргане.КодПоОКАТО);
				
		Иначе
			
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (%2), КПП %3, ОКАТО %4.'"),
				ДанныеРегистрацииВНалоговомОргане.Наименование,
				ДанныеРегистрацииВНалоговомОргане.Код,
				ДанныеРегистрацииВНалоговомОргане.КПП,
				ДанныеРегистрацииВНалоговомОргане.КодПоОКАТО);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеРегистрацииВНалоговомОргане.Период) Тогда
			Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=' Действует с %1'"),
				Формат(ДанныеРегистрацииВНалоговомОргане.Период, "ДЛФ=DD"));
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = НСтр("ru='<не заполнена>'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

