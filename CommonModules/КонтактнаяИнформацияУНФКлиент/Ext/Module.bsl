
#Область СобытияЭлементовФормы

Процедура ДействиеКИНажатие(Форма, Элемент) Экспорт
	
	ИндексКИ = Число(Сред(Элемент.Имя, СтрДлина("ДействиеКИ_")+1));
	ДанныеКИ = Форма.КонтактнаяИнформация[ИндексКИ];
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype") Тогда
		
		Параметры = Новый Структура("ЛогинSkype");
		Параметры.ЛогинSkype = ДанныеКИ.Представление;
		Список = Новый СписокЗначений;
		Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"));
		Список.Добавить("НачатьЧат", НСтр("ru = 'Начать чат'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораИзМенюSkype", ЭтотОбъект, Параметры);
		Форма.ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
		Возврат;
		
	КонецЕсли;
	
	ОснованиеЗаполнения = Новый Структура("Контакт", Форма.Объект.Ссылка);
	
	ЗначенияЗаполнения = Новый Структура("ТипСобытия,ОснованиеЗаполнения", 
		ТипСобытияПоТипуКонтактнойИнформации(ДанныеКИ.Тип),
		ОснованиеЗаполнения);
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ПредставлениеКИПриИзменении(Форма, Элемент) Экспорт
	
	ИндексКИ = Число(Сред(Элемент.Имя, СтрДлина("ПредставлениеКИ_")+1));
	ДанныеКИ = Форма.КонтактнаяИнформация[ИндексКИ];
	
	Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
		ДанныеКИ.ЗначенияПолей = "";
	Иначе
		ДанныеКИ.ЗначенияПолей = КонтактнаяИнформацияУНФВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ДанныеКИ.Представление, ДанныеКИ.Вид);
	КонецЕсли;
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		КонтактнаяИнформацияУНФКлиентСервер.ЗаполнитьСписокВыбораАдресов(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредставлениеКИНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ОповещениеОЗакрытииДиалога = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИндексКИ = Число(Сред(Элемент.Имя, СтрДлина("ПредставлениеКИ_")+1));
	ДанныеКИ = Форма.КонтактнаяИнформация[ИндексКИ];
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	Если ДанныеКИ.Представление <> Элемент.ТекстРедактирования Тогда
		ДанныеКИ.Представление = Элемент.ТекстРедактирования;
		ПредставлениеКИПриИзменении(Форма, Элемент);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
						ДанныеКИ.Вид,
						ДанныеКИ.ЗначенияПолей,
						ДанныеКИ.Представление,
						ДанныеКИ.Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексКИ", ИндексКИ);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если ОповещениеОЗакрытииДиалога <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеОЗакрытииДиалога", ОповещениеОЗакрытииДиалога);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗначениеКИРедактированиеВДиалогеЗавершено", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПредставлениеКИОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	ИндексКИ = Число(Сред(Элемент.Имя, СтрДлина("ПредставлениеКИ_")+1));
	ДанныеКИ = Форма.КонтактнаяИнформация[ИндексКИ];
	ДанныеКИ.ЗначенияПолей = "";
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		КонтактнаяИнформацияУНФКлиентСервер.ЗаполнитьСписокВыбораАдресов(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомментарийКИПриИзменении(Форма, Элемент) Экспорт
	
	ИндексКИ = Число(Сред(Элемент.Имя, СтрДлина("КомментарийКИ_")+1));
	ДанныеКИ = Форма.КонтактнаяИнформация[ИндексКИ];
	
	ОжидаемыйВид = ?(ПустаяСтрока(ДанныеКИ.ЗначенияПолей), ДанныеКИ.Вид, Неопределено);
	КонтактнаяИнформацияУНФВызовСервера.УстановитьКомментарийКонтактнойИнформации(ДанныеКИ.ЗначенияПолей, ДанныеКИ.Комментарий, ОжидаемыйВид);
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Форма, Команда) Экспорт
	
	Если Команда.Имя = "ДобавитьПолеКонтактнойИнформации" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
		
		СписокДоступныхВидов = КонтактнаяИнформацияУНФКлиентСервер.СписокВидовДляДобавленияКонтактнойИнформации(Форма);
		
		Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, Форма.Элементы[Команда.Имя]);
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "КонтекстноеМенюКартаЯндекс_") Тогда
		
		ИндексКИ = Число(Сред(Команда.Имя, СтрДлина("КонтекстноеМенюКартаЯндекс_")+1));
		ДанныеКИ = Форма.КонтактнаяИнформация[ИндексКИ];
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(ДанныеКИ.Представление, "Яндекс.Карты");
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "КонтекстноеМенюКартаGoogle_") Тогда
		
		ИндексКИ = Число(Сред(Команда.Имя, СтрДлина("КонтекстноеМенюКартаGoogle_")+1));
		ДанныеКИ = Форма.КонтактнаяИнформация[ИндексКИ];
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(ДанныеКИ.Представление, "GoogleMaps");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Тип события по типу контактной информации
//
// Параметры:
//  ТипКИ	 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - тип контактной информации, для которого определяется тип события
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыСобытий - соответствующий тип события
//
Функция ТипСобытияПоТипуКонтактнойИнформации(ТипКИ) Экспорт
	
	Если ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype") Тогда
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Прочее");
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЛичнаяВстреча");
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо");
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Прочее");
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое") Тогда
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Прочее");
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок");
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок");
	Иначе
		ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ТипСобытия;
	
КонецФункции

// Процедура - Звонок по Skype.
//
// Параметры:
//  ЛогинSkype		 - Строка	 - имя аккаунта в Skype, с которым необходимо связаться
//  ДействиеВSkype	 - Строка	 - может принимать одно из значений: "Позвонить", "НачатьЧат", "ИнформацияОбАккаунте"
//
Процедура ЗвонокПоSkype(ЛогинSkype, ДействиеВSkype = "Позвонить") Экспорт
	
	#Если НЕ ВебКлиент Тогда
		Если ПустаяСтрока(ПрограммаТелефонииУстановлена("skype")) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для совершения звонка по Skype требуется установить программу.'"));
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СтрокаЗапуска = "skype:" + ЛогинSkype;
	Если ДействиеВSkype = "Позвонить" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?call";
	ИначеЕсли ДействиеВSkype = "НачатьЧат" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?chat";
	Иначе
		СтрокаЗапуска = СтрокаЗапуска + "?userinfo";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапускSkype", ЭтотОбъект, СтрокаЗапуска);
	ТекстСообщения = НСтр("ru = 'Для запуска Skype необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗначениеКИРедактированиеВДиалогеЗавершено(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКИ = ДополнительныеПараметры.Форма.КонтактнаяИнформация[ДополнительныеПараметры.ИндексКИ];
	
	ДанныеКИ.Представление	 = РезультатЗакрытия.Представление;
	ДанныеКИ.ЗначенияПолей	 = РезультатЗакрытия.КонтактнаяИнформация;
	ДанныеКИ.Комментарий	 = РезультатЗакрытия.Комментарий;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		КонтактнаяИнформацияУНФКлиентСервер.ЗаполнитьСписокВыбораАдресов(ДополнительныеПараметры.Форма);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОЗакрытииДиалога") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗакрытииДиалога, РезультатЗакрытия.Представление);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКонтактнуюИнформациюВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	
	НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Добавить возможность ввода вида контактной информации ""%1""?'"), ВыбранныйЭлемент.Значение);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		
	Иначе
		
		Форма.ДобавитьКонтактнуюИнформациюСервер(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКонтактнуюИнформациюВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.ДобавитьКонтактнуюИнформациюСервер(ДополнительныеПараметры.ДобавляемыйВид, Истина);
	
КонецПроцедуры

Процедура ПослеВыбораИзМенюSkype(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗвонокПоSkype(Параметры.ЛогинSkype, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

Процедура ЗапускSkype(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗапускаПриложения(ВыбранныйЭлемент, Параметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

// Проверяет, установлена ли программа телефонии на компьютер.
//  Проверка возможна только в тонком клиенте для Windows.
//
// Параметры:
//  ИмяПротокола - Строка - Имя проверяемого URI протокола, возможные варианты "skype", "tel", "sip".
//                          Если параметр не указан, то проверяются все протоколы. 
// 
// Возвращаемое значение:
//  Строка - имя доступного URI протокола зарегистрирована в реестре. Пустая строка - если протокол не доступен.
//  Неопределенно если проверка не возможна.
//
Функция ПрограммаТелефонииУстановлена(ИмяПротокола = Неопределено)
	
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			Если ЗначениеЗаполнено(ИмяПротокола) Тогда
				Возврат ?(ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола), ИмяПротокола, "");
			Иначе
				СписокПротоколов = Новый Массив;
				СписокПротоколов.Добавить("tel");
				СписокПротоколов.Добавить("sip");
				СписокПротоколов.Добавить("skype");
				Для каждого ИмяПротокола Из СписокПротоколов Цикл
					Если ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола) Тогда
						Возврат ИмяПротокола;
					КонецЕсли;
				КонецЦикла;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола)
	
	Попытка
		Оболочка = Новый COMОбъект("Wscript.Shell");
		Результат = Оболочка.RegRead("HKEY_CLASSES_ROOT\" + ИмяПротокола + "\");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

#КонецОбласти
