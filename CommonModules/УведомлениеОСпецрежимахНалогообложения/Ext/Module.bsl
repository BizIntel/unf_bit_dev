#Область ПрограммныйИнтерфейс

// Функция возвращает таблицу уведомлений в соответствии с установленным отбором
// в хронологическом порядке по убыванию
//
// Параметры:
//  Отбор - Структура - задает условия поиска:
//    * Организация    - СправочникСсылка.Организации
//    * ВидУведомления  - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения
//
// Возвращаемое значение:
//  ТаблицаЗначений
//    * Ссылка - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//    * Дата - Дата
//    * ИмяФормы - Строка - имя формы
//
Функция НайтиУведомления(Отбор) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка,
		|	УведомлениеОСпецрежимахНалогообложения.Дата КАК Дата,
		|	УведомлениеОСпецрежимахНалогообложения.ИмяФормы КАК ИмяФормы
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления";
	
	Организация = Неопределено;
	Если Отбор.Свойство("Организация", Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация";
	КонецЕсли;
	
	ВидУведомления = Неопределено;
	Если Отбор.Свойство("ВидУведомления", ВидУведомления) Тогда
		Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.ВидУведомления = &ВидУведомления";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает таблицу уведомлений в соответствии с установленным отбором
// в хронологическом порядке по убыванию
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Неопределено, если данных нет (нет формы Р11001)
//  Структура с ключами
//      - УставныйКапитал - Число, размер уставного капитала в рублях (1)
//      - Учредители - Таблица значений с колонками
//          - ИНН - Строка, ИНН учредителя (2.1)
//          - Учредитель - Строка, наименование учредителя (2.2)
//          - СуммаКапитала - Число - стоимость доли в уставном капитале (2.3)
//
Функция ПолучитьСведенияОбУставномКапиталеФормыР11001(Организация) Экспорт 
	Возврат Неопределено;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура СформироватьСтруктуруДанныхУведомленияРек(Форма, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из Строка.ПолучитьЭлементы() Цикл
		Если ПодчМнг.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРек(Форма, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда 
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			Форма.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхУведомления(Форма, ЕстьМногостраничность = Ложь) Экспорт 
	Форма.ДанныеУведомления = Новый Структура;
	Если ЕстьМногостраничность Тогда 
		Форма.ДанныеМногостраничныхРазделов = Новый Структура;
	КонецЕсли;
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многостраничность Тогда 
			Если Стр.Многострочность Тогда
				// пока пусто
			Иначе
				МнгСтр = Стр.ПолучитьЭлементы()[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(МнгСтр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
					СформироватьСтруктуруДанныхУведомленияРек(Форма, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
			КонецЕсли;
		Иначе
			Если Стр.Многострочность Тогда
				ОбластиВМногостраничнойЧасти = Новый Соответствие;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
					Для Каждого Обл Из МакетДокумента.ПолучитьОбласть(Мнг.Значение).Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ОбластиВМногостраничнойЧасти.Вставить(Обл.Имя, Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение
						И ОбластиВМногостраничнойЧасти[Обл.Имя] = Неопределено Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			Иначе
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСпискиВыбора(Форма, ИмяМакета) Экспорт
	Форма.СпискиВыбора.Очистить();
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	МакетСписковВыбора = Отчеты[Разложение[1]].ПолучитьМакет(ИмяМакета);
	
	ОблВсеСписки = МакетСписковВыбора.Области.Найти("КоллекцияСписков");
	Если ОблВсеСписки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ОблВсеСписки.Верх;
	Пока ТекущаяСтрока <= ОблВсеСписки.Низ Цикл
		ИДНаименования = МакетСписковВыбора.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Если Не ЗначениеЗаполнено(ИДНаименования) Тогда 
			Прервать;
		КонецЕсли;
		
		ИмяПоля = МакетСписковВыбора.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		ИмяСписка = МакетСписковВыбора.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		
		Список = МакетСписковВыбора.Область(ИмяСписка);
		ТС = Список.Верх;
		Пока ТС <= Список.Низ Цикл
			Код = МакетСписковВыбора.Область(ТС, 1, ТС, 1).Текст;
			Наименование = МакетСписковВыбора.Область(ТС, 2, ТС, 2).Текст;
			Если Не ЗначениеЗаполнено(Код) И Не ЗначениеЗаполнено(Наименование) Тогда 
				Прервать;
			КонецЕсли;
			
			НовСтр = Форма.СпискиВыбора.Добавить();
			НовСтр.ИДНаименования = ИДНаименования;
			НовСтр.ИмяПоля = ИмяПоля;
			НовСтр.Код = Код;
			НовСтр.Наименование = Наименование;
			
			ТС = ТС + 1;
		КонецЦикла;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиСтрокуНаПечать(Строка, ПрефиксПараметра, ОбластиМакета) Экспорт 
	ДлинаСтроки = СтрДлина(Строка);
	Индекс = 1;
	
	Пока Истина Цикл 
		ИмяПараметра = ПрефиксПараметра + "_" + Формат(Индекс, "ЧГ=");
		Обл = ОбластиМакета.Найти(ИмяПараметра);
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Обл.Текст = Сред(Строка, Индекс, 1);
		Индекс = Индекс + 1;
		
		Если Индекс > ДлинаСтроки Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиЧислоНаПечать(Число, ПрефиксПараметра, ОбластиМакета) Экспорт
	Инд = 1;
	ИмяПараметра = ПрефиксПараметра + "_1";
	Область = ОбластиМакета.Найти(ИмяПараметра);
	ЗнаковПослеЗапятой = 0;
	
	Если Область = Неопределено 
		Или Область.Лево <> Область.Право Тогда 
		Возврат;
	КонецЕсли;
	
	Координата = Область.Лево;
	
	Пока Истина Цикл 
		Инд = Инд + 1;
		ИмяПараметра = ПрефиксПараметра + "_" + Инд;
		Область = ОбластиМакета.Найти(ИмяПараметра);
		Если Область = Неопределено 
			Или Область.Лево <> Область.Право Тогда 
			Прервать;
		КонецЕсли;
		
		Если ЗнаковПослеЗапятой > 0 
			Или Область.Лево > Координата + 1 Тогда 
			
			ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
		КонецЕсли;
		
		Координата = Координата + 1;
	КонецЦикла;
	
	Если Число = 0 Тогда 
		Ч = "0" + Прав(Формат(Pow(10, ЗнаковПослеЗапятой), "ЧГ="), ЗнаковПослеЗапятой);
		Ч = Прав("                                " + Ч, Инд - 1);
	Иначе 
		Ч = Формат(Цел(Число * Pow(10, ЗнаковПослеЗапятой)), "ЧГ=");
		Если СтрДлина(Ч) < ЗнаковПослеЗапятой + 1 Тогда
			Ч = Прав("000000000000000000000000000000" + Ч, ЗнаковПослеЗапятой + 1);
		КонецЕсли;
		Ч = Прав("                                " + Ч, Инд - 1);
	КонецЕсли;
	ВывестиСтрокуНаПечать(Ч, ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Процедура ВывестиДатуНаПечать(Дата, ПрефиксПараметра, ОбластиМакета) Экспорт 
	Если Не ЗначениеЗаполнено(Дата) Или ОбластиМакета.Найти(ПрефиксПараметра + "_1") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "_1"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "_2"].Текст = "" + День;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "_1"].Текст = "" + Цел(День/10);
		ОбластиМакета[ПрефиксПараметра + "_2"].Текст = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "_3"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "_4"].Текст = "" + Месяц;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "_3"].Текст = "1";
		ОбластиМакета[ПрефиксПараметра + "_4"].Текст = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ОбластиМакета[ПрефиксПараметра + "_5"].Текст = "" + ГТ;
	ОбластиМакета[ПрефиксПараметра + "_6"].Текст = "" + ГС;
	ОбластиМакета[ПрефиксПараметра + "_7"].Текст = "" + ГД;
	ОбластиМакета[ПрефиксПараметра + "_8"].Текст = "" + ГЕ;
КонецПроцедуры

Процедура ВывестиОКВЭДНаПечать(ОКВЭД, ПрефиксПараметра, ОбластиМакета) Экспорт 
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОКВЭД, ".");
	Подстроки.Добавить("");
	Подстроки.Добавить("");
	Подстроки.Добавить("");
	Подстроки[0] = Прав("   " + Подстроки[0], 2);
	Подстроки[1] = Лев(Подстроки[1]+"   ", 2);
	Подстроки[2] = Лев(Подстроки[2]+"   ", 2);
	
	ВывестиСтрокуНаПечать(Подстроки[0]+Подстроки[1]+Подстроки[2], ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Процедура ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр) Экспорт 
	ПФЗаполнена = Ложь;
	Для Каждого Параметр Из ПечатнаяФорма.Параметры Цикл 
		Если ЗначениеЗаполнено(Параметр) Тогда 
			ПФЗаполнена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл 
		Если ПФЗаполнена Тогда 
			Прервать;
		КонецЕсли;
		
		Если СтрНачинаетсяС(НРег(Обл.Имя), "номстр_") Тогда 
			Продолжить;
		КонецЕсли;
		
		ПФЗаполнена = ЗначениеЗаполнено(Обл.Текст);
	КонецЦикла;
	
	Если Не ПФЗаполнена Тогда 
		НомСтр = НомСтр - 1;
		ПечатнаяФорма = Новый ТабличныйДокумент;
		Возврат;
	КонецЕсли;
	
	Лист = Новый Массив;
	Лист.Добавить(ПоместитьВоВременноеХранилище(ПечатнаяФорма));
	Лист.Добавить(Новый УникальныйИдентификатор);
	Лист.Добавить(Метаданные.Отчеты[Объект.ИмяОтчета].Синоним + " Лист." + НомСтр);
	Листы.Добавить(Лист, Метаданные.Отчеты[Объект.ИмяОтчета].Синоним + " Лист." + НомСтр);
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
КонецПроцедуры

Процедура НачальныеОперацииСМногострочнымиБлоками(Форма) Экспорт
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многострочность Тогда
			Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
				Форма[Мнг.Значение].Очистить();
				Форма[Мнг.Значение].Добавить();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтраницаЗаполнена(Данные) Экспорт 
	Для Каждого КЗ Из Данные Цикл
		Если ТипЗнч(КЗ.Значение) = Тип("УникальныйИдентификатор") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КЗ.Значение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция МногострочнаяЧастьЗаполнена(Данные) Экспорт 
	Колонки = Данные.Колонки;
	Для Каждого Стр Из Данные Цикл 
		Для Каждого Колонка Из Данные.Колонки Цикл 
			Если ЗначениеЗаполнено(Стр[Колонка.Имя]) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ЗаполнитьТаблицуФорматов(Форма, ИмяМакета) Экспорт
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	МакетФорматов = Отчеты[Разложение[1]].ПолучитьМакет(ИмяМакета);
	ТЧ = Новый ОписаниеТипов("Число");
	
	Стр = 0;
	Пока Истина Цикл 
		Стр = Стр + 1;
		ИДСтраницы = МакетФорматов.Область(Стр, 1, Стр, 1).Текст;
		Поле = МакетФорматов.Область(Стр, 2, Стр, 2).Текст;
		Всего = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 3, Стр, 3).Текст);
		ПослеЗапятой = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 4, Стр, 4).Текст);
		Неотрицательный = ЗначениеЗаполнено(МакетФорматов.Область(Стр, 5, Стр, 5).Текст);
		
		Если Не ЗначениеЗаполнено(ИДСтраницы) Или Не ЗначениеЗаполнено(Поле)
			Или Не ЗначениеЗаполнено(Всего) Или Не ЗначениеЗаполнено(ПослеЗапятой) Тогда 
			Прервать;
		КонецЕсли;
		
		НовСтр = Форма.ЧисловыеФорматы.Добавить();
		НовСтр.ИДСтраницы = ИДСтраницы;
		НовСтр.Поле = Поле;
		НовСтр.Всего = Всего;
		НовСтр.ПослеЗапятой = ПослеЗапятой;
		НовСтр.Неотрицательный = Неотрицательный;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФорматыВПолях(Форма) Экспорт
	ПоляСФорматами = Форма.ЧисловыеФорматы.НайтиСтроки(Новый Структура("ИДСтраницы", Форма.ТекущееИДНаименования));
	Для Каждого Стр Из ПоляСФорматами Цикл 
		Знак = ?(Стр.Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
		ОТ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Стр.Всего, Стр.ПослеЗапятой, Знак));
		Форма.ПредставлениеУведомления.Области.Найти(Стр.Поле).ТипЗначения = ОТ;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьСтраницуУведомления(Форма) Экспорт
	ТекущийЭлемент = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТекущийЭлемент <> Неопределено Тогда 
		НовСтр = СкопироватьСтрокуВДереве(Форма, ТекущийЭлемент);
		ПеренумероватьЭлементы(НовСтр.ПолучитьРодителя());
		Возврат НовСтр.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция НайтиЭлементПоУИДВДереве(Элементы, УИД)
	Для Каждого Элт Из Элементы Цикл 
		Рез = НайтиЭлементПоУИДВДереве(Элт.ПолучитьЭлементы(), УИД);
		Если Рез <> Неопределено Тогда 
			Возврат Рез;
		КонецЕсли;
		Если Элт.УИД = УИД Тогда 
			Возврат Элт;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура УдалитьСтруктурыДанных(Форма, СтрокаДляУдаления)
	Для Каждого Стр Из СтрокаДляУдаления.ПолучитьЭлементы() Цикл 
		УдалитьСтруктурыДанных(Форма, Стр);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДляУдаления.ИДНаименования) Тогда
		ДанныеМногостраничнойЧасти = Форма.ДанныеМногостраничныхРазделов[СтрокаДляУдаления.ИДНаименования];
		Для Каждого Стр Из ДанныеМногостраничнойЧасти Цикл 
			Если Стр.Значение.УИД = СтрокаДляУдаления.УИД Тогда 
				ДанныеМногостраничнойЧасти.Удалить(Стр);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция УдалитьСтраницуНаСервере(Форма) Экспорт
	ТекущийЭлемент = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТекущийЭлемент <> Неопределено Тогда
		Родитель = ТекущийЭлемент.ПолучитьРодителя();
		Если Родитель.ПолучитьЭлементы().Количество() = 1 Тогда
			ДобавитьСтраницуУведомления(Форма);
			ПослеУдаления = Родитель.ПолучитьЭлементы()[1];
		Иначе
			ПослеУдаления = Родитель.ПолучитьЭлементы()[0];
			Если ПослеУдаления = ТекущийЭлемент Тогда
				ПослеУдаления = Родитель.ПолучитьЭлементы()[1];
			Иначе
				Для Каждого Стр Из Родитель.ПолучитьЭлементы() Цикл 
					Если Стр = ТекущийЭлемент Тогда 
						Прервать;
					КонецЕсли;
					ПослеУдаления = Стр;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьСтруктурыДанных(Форма, ТекущийЭлемент);
		Родитель.ПолучитьЭлементы().Удалить(ТекущийЭлемент);
		ПеренумероватьЭлементы(Родитель);
		Возврат ПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ПечатьУведомленияБРО(Форма) Экспорт
	Форма.СохранитьДанные();
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	Форма.СтруктураРеквизитовУведомления = Новый Структура("СписокПечатаемыхЛистов", Отчеты[Разложение[1]].СформироватьСписокЛистов(Форма.Объект));
КонецПроцедуры

Функция СкопироватьСтрокуВДереве(Форма, Источник)
	Родитель = Источник.ПолучитьРодителя();
	Приемник = Родитель.ПолучитьЭлементы().Добавить();
	СкопироватьСтрокуВДеревеРек(Форма, Источник, Приемник);
	Возврат Приемник;
КонецФункции

Процедура СкопироватьСтрокуВДеревеРек(Форма, Источник, Приемник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Если ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда 
		Приемник.УИД = Новый УникальныйИдентификатор;
		СЗ = Форма.ДанныеМногостраничныхРазделов[Приемник.ИДНаименования];
		СтруктураНовСтр = Новый Структура;
		Для Каждого КЗ Из СЗ.Получить(0).Значение Цикл 
			СтруктураНовСтр.Вставить(КЗ.Ключ);
		КонецЦикла;
		СтруктураНовСтр.Вставить("УИД", Приемник.УИД);
		СтруктураНовСтр.Вставить("УИДРодителя", ПолучитьУИДРодителя(Приемник));
		СЗ.Добавить(СтруктураНовСтр);
	КонецЕсли;
	
	СтрокиДляКопирования = ПолучитьСписокСтрокДляКопирования(Форма, Источник);
	Для Каждого Стр Из СтрокиДляКопирования Цикл 
		НовСтр = Приемник.ПолучитьЭлементы().Добавить();
		СкопироватьСтрокуВДеревеРек(Форма, Стр, НовСтр);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда
		Приемник.УИД = Приемник.ПолучитьЭлементы()[0].УИД;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокСтрокДляКопирования(Форма, Источник)
	СЗ = Новый Массив;
	ВсеТипыПодчиненныхЛистов = Новый Соответствие;
	
	Если Источник.ПолучитьЭлементы().Количество() > 0 Тогда 
		Для Каждого Стр Из Источник.ПолучитьЭлементы() Цикл 
			Если ЗначениеЗаполнено(Стр.ИДНаименования) Тогда 
				ВсеТипыПодчиненныхЛистов.Вставить(Стр.ИДНаименования);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Стр Из Источник.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(Стр.ИДНаименования) Тогда 
				Если ВсеТипыПодчиненныхЛистов[Стр.ИДНаименования] = Неопределено Тогда 
					ВсеТипыПодчиненныхЛистов[Стр.ИДНаименования] = 1;
					СЗ.Добавить(Стр);
				КонецЕсли;
			Иначе
				СЗ.Добавить(Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СЗ;
КонецФункции

Функция ПолучитьУИДРодителя(Строка)
	Родитель = Строка.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель.ИДНаименования) Тогда 
		Возврат Родитель.УИД;
	КонецЕсли;
	
	Возврат ПолучитьУИДРодителя(Родитель);
КонецФункции

Процедура ПеренумероватьЭлементы(Корень)
	Если Не ЗначениеЗаполнено(Корень.ИДНаименования) Тогда 
		Инд = 0;
		Для Каждого Стр Из Корень.ПолучитьЭлементы() Цикл 
			Инд = Инд + 1;
			Стр.Наименование = "Стр. " + Инд;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из Корень.ПолучитьЭлементы() Цикл 
		ПеренумероватьЭлементы(Стр);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИдентификаторыДляСворачивания(Форма) Экспорт 
	Результат = Новый Массив;
	ДеревоСтраниц = Форма.ДеревоСтраниц;
	
	Для Каждого ТекущаяСтрока Из ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если ТекущаяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ДанныйПодразделПустРек(Форма, ТекущаяСтрока, Результат);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ДанныйПодразделПустРек(Форма, ТекущаяСтрока, Результат)
	ПодразделПуст = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИДНаименования) Тогда 
		Если ТекущаяСтрока.Многостраничность Тогда
			СтрДанных = Неопределено;
			Для Каждого Элт Из Форма.ДанныеМногостраничныхРазделов[ТекущаяСтрока.ИДНаименования] Цикл 
				Если Элт.Значение.УИД = ТекущаяСтрока.УИД Тогда 
					СтрДанных = Элт.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущаяСтрока.Многострочность Тогда
			СтрДанных = Форма.ДанныеУведомления[ТекущаяСтрока.ИДНаименования];
			ПодразделПуст = МногострочнаяЧастьЗаполнена(ТекущаяСтрока.МногострочныеЧасти)
		Иначе
			СтрДанных = Форма.ДанныеУведомления[ТекущаяСтрока.ИДНаименования];
		КонецЕсли;
		
		Если ТипЗнч(СтрДанных) = Тип("Структура") Тогда 
			ПодразделПуст = ПодразделПуст И (Не СтраницаЗаполнена(СтрДанных));
		Иначе
			ПодразделПуст = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из ТекущаяСтрока.ПолучитьЭлементы() Цикл 
		ПодразделПуст = ДанныйПодразделПустРек(Форма, Стр, Результат) И ПодразделПуст;
	КонецЦикла;
	
	Если ПодразделПуст И ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
		Результат.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
	Возврат ПодразделПуст;
КонецФункции

Процедура НачальныеОперацииПриСозданииНаСервере(Форма) Экспорт
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Форма.Объект.ДатаПодписи = ТекущаяДатаСеанса();
		Форма.Заголовок = Форма.Заголовок + " (создание)";
	КонецЕсли;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	Форма.Объект.ИмяФормы = Разложение[3];
	Форма.Объект.ИмяОтчета = Разложение[1];
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(Форма);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Форма.Объект.Ссылка);
	ЗагрузитьНастройкиРучногоВвода(Форма);
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Форма.Объект.Ссылка, , Форма.УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьМакетПростойФормы(Форма, ИмяМакета, ПредставлениеУведомления) Экспорт 
	Форма[ПредставлениеУведомления].Очистить();
	МакетДокумента = Отчеты[СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1]].ПолучитьМакет(ИмяМакета);
	СформироватьСтруктуруДанныхПростогоУведомления(Форма, МакетДокумента);
	Форма[ПредставлениеУведомления].Вывести(МакетДокумента);
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхПростогоУведомления(Форма, ПредставлениеУведомления)
	Форма.ДанныеУведомления = Новый Структура;
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
			И Обл.СодержитЗначение Тогда 
			
			Форма.ДанныеУведомления.Вставить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДанныеПростогоУведомления(Форма, ДанныеДляЗагрузки, ТабДок) Экспорт
	Для Каждого КЗ Из ДанныеДляЗагрузки Цикл
		Обл = ТабДок.Области.Найти(КЗ.Ключ);
		Если Обл <> Неопределено Тогда 
			Обл.Значение = КЗ.Значение;
			Форма.ДанныеУведомления.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьНастройкиРучногоВвода(Форма)
	Попытка
		Форма.РучнойВвод = Ложь;
		ТекущиеНастройки = ХранилищеСистемныхНастроек.Загрузить("СообщенияВКонтролирующиеОрганы.Регистрация", "ВводДанныхВручную");
		
		Если ТипЗнч(ТекущиеНастройки) = Тип("Булево") Тогда 
			Форма.РучнойВвод = ТекущиеНастройки;
		КонецЕсли;
	Исключение
		ТекущиеНастройки = Неопределено;
	КонецПопытки;
КонецПроцедуры

Процедура СохранитьНастройкиРучногоВвода(Форма) Экспорт 
	ХранилищеСистемныхНастроек.Сохранить("СообщенияВКонтролирующиеОрганы.Регистрация", "ВводДанныхВручную", Форма.РучнойВвод);
КонецПроцедуры
#КонецОбласти
