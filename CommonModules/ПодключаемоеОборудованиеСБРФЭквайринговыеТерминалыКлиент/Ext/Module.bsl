
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	
	// Обязательные выходные
	ВыходныеПараметры = Новый Массив();
	
	// Проверка настроенных параметров.
	ШиринаСлипЧека = Неопределено;
	ВерсияБиблиотеки = Неопределено;
	КодСимволаЧастичногоОтреза = Неопределено;
	
	Параметры.Свойство("ШиринаСлипЧека"  , ШиринаСлипЧека);
	Параметры.Свойство("ВерсияБиблиотеки", ВерсияБиблиотеки);
	Параметры.Свойство("КодСимволаЧастичногоОтреза", КодСимволаЧастичногоОтреза);
	
	Если ВерсияБиблиотеки = Неопределено Тогда
		ВерсияБиблиотеки = Ложь;
	КонецЕсли;
	
	Если ШиринаСлипЧека = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		ОбъектДрайвера.ШиринаСлипЧека = Число(Параметры.ШиринаСлипЧека);
		ПараметрыПодключения.Вставить("ПоследнийТипКарты", Неопределено);
		ПараметрыПодключения.Вставить("ВерсияБиблиотеки" , ВерсияБиблиотеки);
		ПараметрыПодключения.Вставить("КодСимволаЧастичногоОтреза" , КодСимволаЧастичногоОтреза);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	// Обязательные выходные
	ВыходныеПараметры = Новый Массив();
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// Оплата платежной картой.
	Если Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения, Сумма, НомерКарты, ВыходныеПараметры);
		
	// Возврат платежа.
	ИначеЕсли Команда = "AuthorizeRefund" ИЛИ Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения, Сумма, НомерКарты, ВыходныеПараметры);
		
	// Отмена платежа.
	ИначеЕсли Команда = "AuthorizeVoid" ИЛИ Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Аварийная отмена платежа.
	ИначеЕсли Команда = "EmergencyVoid" ИЛИ Команда = "АварийнаяОтменаОперации" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                    Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Сверка итогов по картам.
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		Результат = ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение слип-чека последней операции.
	ИначеЕсли Команда = "ПолучитьСтрокиСлипЧека" Тогда
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, Неопределено, ВыходныеПараметры);
		
	// Функция возвращает, будет ли печать слип-чеков на терминале.
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		Результат = ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция осуществляет авторизацию (оплату) по карте.
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения, Сумма, НомерКарты, ВыходныеПараметры) Экспорт

	Результат = Ложь;
	
	СуммаВременная = Неопределено;
	
	СсылочныйНомер = Неопределено;
	НомерЧека      = Неопределено;
	КодАвторизации = Неопределено;
	КодХеш         = Неопределено;
	КартаСбербанка = Неопределено;
	НазваниеКарты  = Неопределено;
 

	ОбъектДрайвера.ТипКарты = 0;
	СуммаВременная = Сумма * 100;
	
	НомерКарты = "****************";
	
	Попытка
		Если ПараметрыПодключения.Свойство("ВерсияБиблиотеки") И ПараметрыПодключения.ВерсияБиблиотеки Тогда
			Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(СуммаВременная, СсылочныйНомер, КодАвторизации, КодХеш, КартаСбербанка, НазваниеКарты, НомерКарты);
		Иначе
			Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(СуммаВременная, СсылочныйНомер, НомерЧека);
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		Если (Найти(ТекстОшибки, НСтр("ru = 'фактических параметров'")) > 0) Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка вызова метода библиотеки ""SBRFCOM"".
			|Неверное количество параметров метода ""ОплатитьПлатежнойКартой"".
			|Укажите в форме настройке оборудования другую версию библиотеки ""SBRFCOM"".'");
		КонецЕсли;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	Иначе
		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);    
			ВыходныеПараметры.Добавить("");
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        СуммаВременная, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет возврат платежа по карте.
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, ВыходныеПараметры) Экспорт
	  
	Результат = Ложь;
	
	СуммаВременная = Неопределено;
	
	СсылочныйНомер = Неопределено;
	НомерЧека      = Неопределено;
	КодАвторизации = Неопределено;
	КодХеш         = Неопределено;
	КартаСбербанка = Неопределено;
	НазваниеКарты  = Неопределено;
	
	ОбъектДрайвера.ТипКарты = 0;
	СуммаВременная = Сумма * 100;
	
	Попытка
		Если ПараметрыПодключения.Свойство("ВерсияБиблиотеки") И ПараметрыПодключения.ВерсияБиблиотеки Тогда
			Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(СуммаВременная, СсылочныйНомер, КодАвторизации, КодХеш, КартаСбербанка, НазваниеКарты, НомерКарты);
		Иначе
			Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(СуммаВременная, СсылочныйНомер, НомерЧека);
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		Если (Найти(ТекстОшибки, НСтр("ru = 'фактических параметров'")) > 0) Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка вызова метода библиотеки ""SBRFCOM"".
			|Неверное количество параметров метода ""ВернутьПлатежПоПлатежнойКарте"".
			|Укажите в форме настройке оборудования другую версию библиотеки ""SBRFCOM"".'");
		КонецЕсли;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Результат = Ложь;
	Иначе
		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить("****************");
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить("");
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        СуммаВременная, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену платежа по карте.
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                       Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры) Экспорт

	Результат = Истина;
	СуммаВременная = Неопределено;
	
	ОбъектДрайвера.ТипКарты = 0;
	СуммаВременная = Сумма * 100;

	Ответ = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(СуммаВременная, СсылочныйНомер);
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Результат = Ложь;
	Иначе
		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        СуммаВременная, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры.Добавить(Неопределено);
	
	СуммаВременная = Сумма * 100;
	ОбъектДрайвера.ТипКарты = 0;
	
	Ответ = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(СуммаВременная, СсылочныйНомер);
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Ответ = ОбъектДрайвера.ИтогиДняПоКартам();
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Результат = Ложь;
	Иначе
		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет массив строками слип-чека для последующей печати на ФР.
//
Функция ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);

	Результат = Истина;
	СлипЧек   = "";
	
	Для Индекс = 1 По ОбъектДрайвера.КоличествоСтрокСлипЧека Цикл
		СтрокаЧека = "";
		
		РезультатФункции = ОбъектДрайвера.ПолучитьСтрокуСлипЧека(Индекс, СтрокаЧека);
		Если РезультатФункции Тогда
			Если ПараметрыПодключения.Свойство("КодСимволаЧастичногоОтреза") Тогда
				Если КодСимвола(СтрокаЧека) = ПараметрыПодключения.КодСимволаЧастичногоОтреза Тогда
					СлипЧек = СлипЧек + "[cut]" + Символы.ПС + СтрокаЧека;
				КонецЕсли;
			КонецЕсли;
			СлипЧек = СлипЧек + СтрокаЧека + ?(Индекс = ОбъектДрайвера.КоличествоСтрокСлипЧека, "", Символ(13) + Символ(10));
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при получении строк слип-чека.'"));
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;

	Если Результат Тогда
		КопииСлипЧека = "";
		Для Индекс = 1 По ОбъектДрайвера.КоличествоКопийСлипЧека Цикл
			КопииСлипЧека = КопииСлипЧека + СлипЧек + ?(Индекс = ОбъектДрайвера.КоличествоКопийСлипЧека, "",
			                                            Символы.ПС + "[cut]" + Символы.ПС);
		КонецЦикла;
		СлипЧек = КопииСлипЧека;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция возвращает, будет ли печать слип-чеков на терминале.
//
Функция ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	ВыходныеПараметры.Очистить();  
	ВыходныеПараметры.Добавить(Ложь);
	Возврат Результат;
	
КонецФункции

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	НомерКарты = "";
	
	Результат = ОбъектДрайвера.ПрочитатьКарту(НомерКарты);
	
	Если Результат Тогда
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(НСтр("ru='Тестовое чтение карты успешно выполнено.'"));
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти