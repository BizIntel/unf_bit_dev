	////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текущую настройку использования электронных подписей.
Функция ИспользоватьЭлектронныеПодписи() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьЭлектронныеПодписи;
	
КонецФункции

// Возвращает текущую настройку использования шифрования.
Функция ИспользоватьШифрование() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьШифрование;
	
КонецФункции

// Возвращает текущую настройку проверки электронных подписей на сервере.
Функция ПроверятьЭлектронныеПодписиНаСервере() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ПроверятьЭлектронныеПодписиНаСервере;
	
КонецФункции

// Возвращает текущую настройку создания электронных подписей на сервере.
// Настройка также предполагает шифрование и расшифровку на сервере.
//
Функция СоздаватьЭлектронныеПодписиНаСервере() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере;
	
КонецФункции


// Создает и возвращает менеджер криптографии (на клиенте) для указанной программы.
//
// Параметры:
//  Оповещение     - ОписаниеОповещения - оповещение о результате выполнения следующих типов.
//                   МенеджерКриптографии - инициализированный менеджер криптографии.
//                   Строка - описание ошибки при создании менеджера криптографии.
//
//  Операция       - Строка - если не пустая, то должна содержать одну из строк, которые определяют
//                   операцию для вставки в описание ошибки: Подписание, ПроверкаПодписи, Шифрование,
//                   Расшифровка, ПроверкаСертификата, ПолучениеСертификатов.
//
//  ПоказатьОшибку - Булево - если Истина, тогда будет открыта форма ОшибкаОбращенияКПрограмме
//                   из которой можно перейти к списку установленных программ
//                   в форму персональных настроек на страницу "Установленные программы",
//                   в которой можно увидеть почему программу не удалось задействовать,
//                   а также открыть инструкцию по установке.
//
//  Программа      - Неопределено - возвращает менеджер криптографии первой
//                   программы из справочника для которой удалось его создать.
//                 - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа
//                   для которой нужно создать и вернуть менеджер криптографии.
//
Процедура СоздатьМенеджерКриптографии(Оповещение, Операция, ПоказатьОшибку = Истина, Программа = Неопределено) Экспорт
	
	Если ТипЗнч(Операция) <> Тип("Строка") Тогда
		Операция = "";
	КонецЕсли;
	
	Если ПоказатьОшибку <> Истина Тогда
		ПоказатьОшибку = Ложь;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.СоздатьМенеджерКриптографии(Оповещение, Операция, ПоказатьОшибку, Программа);
	
КонецПроцедуры

// Подписывает данные, возвращает подпись и добавляет подпись в объект, если указано.
//
// Общий подход к обработке значений свойств с типом ОписаниеОповещения в параметре ОписаниеДанных.
//  При выполнении обработки оповещения в нее передается структура параметров, в которой всегда есть
//  свойство "Оповещение" типа ОписаниеОповещения, обработку которого нужно выполнить для продолжения.
//  Кроме того, в структуре всегда есть свойство ОписаниеДанных, полученное при вызове процедуры.
//  При вызове оповещения в качестве значения должна передаваться структура. Если в процессе асинхронного
//  выполнения возникает ошибка, тогда в эту структуру нужно вставить свойство ОписаниеОшибки типа Строка.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * Операция            - Строка - заголовок формы подписания данных, например, Подписание файла.
//    * ЗаголовокДанных     - Строка - заголовок элемента или набора данных, например Файл.
//    * СообщитьОЗавершении - Булево - (необязательный) - если Ложь, то не будет показано оповещение о успешном
//                              завершении операции для представления данных, указанного рядом с заголовком.
//    * ПоказатьКомментарий - Булево - (необязательный) - разрешает ввод комментария в форме
//                              подписания данных. Если не указан, значит Ложь.
//    * ОтборСертификатов  - Массив - (необязательный) - содержит ссылки на элементы справочника.
//                              СертификатыЭлектроннойПодписиИШифрования, которые могут быть выбраны
//                              пользователем. Отбор блокирует возможность выбора других сертификатов
//                              из личного хранилища.
//    * БезПодтверждения   - Булево - (необязательный) - пропустить подтверждение пользователя, если
//                              в свойстве ОтборСертификатов только один сертификат и:
//                              а) либо сертификат выпущен с усиленной защитой закрытого ключа,
//                              б) либо пользователь запомнил пароль к сертификату на время сеанса,
//                              в) либо пароль установлен ранее методом УстановитьПарольСертификата.
//                              Если в процессе подписания возникла ошибка, тогда будет открыта форма
//                              с возможностью указать пароль. Параметр ПоказатьКомментарий игнорируется.
//    * ПередВыполнением   - ОписаниеОповещения - (необязательный) - описание обработчика дополнительной
//                              подготовки данных, после выбора сертификата, которым будут подписаны данные.
//                              В этом обработчике можно заполнить параметр Данные, если он зависит
//                              от сертификата, который в момент вызова уже вставлен в ОписаниеДанных,
//                              как ВыбранныйСертификат (см. ниже). Следует учесть общий подход (см. выше).
//    * ВыполнятьНаСервере - Неопределено, Булево - (необязательный) - когда не указан или Неопределено,
//                              тогда выполнение будет определено автоматически: если есть сервер, то сначала
//                              на сервере, потом при неудаче на клиенте, потом сообщение о двух ошибках.
//                              Когда Истина: если есть разрешено выполнение на сервере, тогда выполнение
//                              только на сервере, при неудаче одно сообщение об ошибке на сервере.
//                              Когда Ложь: выполнение только на клиенте, как будто нет сервера.
//    * ПараметрыДополнительныхДействий - Произвольный - (необязательный) - если указан, то передается
//                              на сервер в процедуру ПередНачаломОперации общего модуля.
//                              ЭлектроннаяПодписьПереопределяемый, как ВходныеПараметры.
//    * КонтекстОперации   - Неопределено - (необязательный) - если указан, тогда в свойство будет
//                              установлено определенное значение произвольного типа, которое позволяет
//                              выполнить действие с тем же сертификатом повторно (у пользователя 
//                              не запрашивается ни пароль, ни подтверждение действия).
//    * ------ // ------   - Произвольный - (необязательный) - если определено, то действие будет выполнено
//                              с тем же сертификатом без запроса пароля или подтверждения.
//                              Параметр БезПодтверждения считается равным Истина.
//                              Параметры Операция, ЗаголовокДанных, ПоказатьКомментарий, ОтборСертификатов
//                              и ВыполнятьНаСервере игнорируются, их значения остаются, как при первом вызове.
//                              Параметр ПараметрыДополнительныхДействий игнорируется.
//                              Процедура ПередНачаломОперации не вызывается.
//                              Если передать контекст, возвращенный процедурой Расшифровать, тогда
//                              пароль, введенный для сертификата, может быть использован, как если бы
//                              пароль был сохранен на время сеанса. В остальном контекст игнорируется.
//    Вариант 1:
//    * Данные                - ДвоичныеДанные - данные для подписания.
//    * -- // --              - Строка - адрес временного хранилища, содержащего двоичные данные.
//    * -- // --              - ОписаниеОповещения - обработчик получения данных, который возвращает
//                                 их в свойстве Данные (см. выше общий подход). В момент вызова
//                                 в ОписаниеДанных уже вставлен параметр ВыбранныйСертификат (см. ниже).
//                            - Структура - со свойствами:
//                               * ПараметрыXMLDSig - Структура - как возвращает функция ПараметрыXMLDSig общего
//                                                                модуля ЭлектроннаяПодписьКлиентСервер.
//                               * КонвертSOAP      - Строка - шаблон сообщения <soap:Envelope>.
//    * Объект                - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                                 ЭлектронныеПодписи, в которую нужно добавить подпись.
//                                 Если не указан, то подпись не требуется добавлять.
//    * -- // --              - ОписаниеОповещения - (необязательный) - обработчик добавления подписи в
//                                 табличную часть ЭлектронныеПодписи. Следует учесть общий подход (см. выше).
//                                 В момент вызова в ОписаниеДанных уже вставлен параметр СвойстваПодписи.
//                                 В случае параметра НаборДанных, в ОписаниеДанных вставляется
//                                 свойство ТекущийЭлементНабораДанных, содержащее параметр СвойстваПодписи.
//    * ВерсияОбъекта         - Строка - (необязательный) - версия данных объекта для проверки и
//                                 блокировки объекта перед добавлением подписи.
//    * Представление         - Ссылка, Строка, Структура - (необязательный), если не указан, тогда
//                                 представление вычисляется по значению свойства Объект.
//                                 Структура содержит свойства:
//                                    * Значение      - Ссылка, ОписаниеОповещения - для открытия.
//                                    * Представление - Строка - представление значения.
//    Вариант 2:
//    * НаборДанных           - Массив - структуры со свойствами, описанными в Варианте 1.
//    * ПредставлениеНабора   - Строка - представления нескольких элементов набора данных, например, "Файлы (%1)".
//                                 В это представление в параметр %1 заполняется количество элементов.
//                                 По гиперссылке можно открыть список.
//                                 Если в наборе данных 1 элемент, тогда используется значение
//                                 в свойстве Представление свойства НаборДанных, если не указано, тогда
//                                 представление вычисляется по значению свойства Объект элемента набора данных.
//    * СписокПредставлений   - СписокЗначений, Массив - (необязательный) - произвольный список элементов
//                                 или массив со значениями, как у свойства Представление, которые
//                                 сможет открыть пользователь. Если не указан, то заполняется из
//                                 свойств Представление или Объект в свойстве НаборДанных.
//
//  Форма - УправляемаяФорма - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при блокировке объекта.
//        - Неопределено     - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, например, если не указан параметр Объект и/или Форма.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно. Если Успех = Ложь, то частичное завершение
//               определяется по наличию свойства СвойстваПодписи. Если есть, то шаг выполнен.
//     * ВыбранныйСертификат - Структура - содержит свойства сертификата:
//         * Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//         * Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//         * Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//     * СвойстваПодписи - Строка - адрес временного хранилища, содержащего описанную ниже структуру.
//                         При передаче параметра НаборДанных, свойство нужно проверять в нем.
//                       - Структура - развернутое описание подписи:
//         * Подпись             - ДвоичныеДанные - результат подписания.
//                               - Строка - подписанный конверт SOAP, если передавался в данных.
//         * УстановившийПодпись - СправочникСсылка.Пользователи - пользователь, который
//                                    подписал объект информационной базы.
//         * Комментарий         - Строка - комментарий, если он был введен при подписании.
//         * ИмяФайлаПодписи     - Строка - пустая строка, т.к. подпись добавлена не из файла.
//         * ДатаПодписи         - Дата   - дата, когда подпись была сделана. Имеет смысл для случая,
//                                          когда дату невозможно извлечь из данных подписи. Если не
//                                          указана или пустая, тогда используется текущая дата сеанса.
//         * ДатаПроверкиПодписи - Дата   - дата проверки подписи после подписания.
//         * ПодписьВерна        - Булево - результат проверки подписи после подписания.
//
//         Производные свойства:
//         * Сертификат          - ДвоичныеДанные - содержит выгрузку сертификата,
//                                    который использовался для подписания (содержится в подписи).
//         * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//         * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//
Процедура Подписать(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	КлиентскиеПараметры.Вставить("Форма", Форма);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	Если ОписаниеДанных.Свойство("КонтекстОперации")
	   И ТипЗнч(ОписаниеДанных.КонтекстОперации) = Тип("УправляемаяФорма") Тогда
		
		ЭлектроннаяПодписьСлужебныйКлиент.ПродлитьХранениеКонтекстаОперации(ОписаниеДанных);
		НачалоИмениФормы = "Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.";
		
		Если ОписаниеДанных.КонтекстОперации.ИмяФормы = НачалоИмениФормы + "ПодписаниеДанных" Тогда
			ОписаниеДанных.КонтекстОперации.ВыполнитьПодписание(КлиентскиеПараметры, ОбработкаЗавершения);
			Возврат;
		КонецЕсли;
		Если ОписаниеДанных.КонтекстОперации.ИмяФормы = НачалоИмениФормы + "РасшифровкаДанных" Тогда
			КлиентскиеПараметры.Вставить("УказанКонтекстДругойОперации");
		КонецЕсли;
	КонецЕсли;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("Операция",            НСтр("ru = 'Подписание данных'"));
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ПоказатьКомментарий", Ложь);
	СерверныеПараметры.Вставить("ОтборСертификатов");
	СерверныеПараметры.Вставить("ВыполнятьНаСервере");
	СерверныеПараметры.Вставить("ПараметрыДополнительныхДействий");
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьНовуюФорму("ПодписаниеДанных",
		КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения);
	
КонецПроцедуры

// Предлагает пользователю выбрать файлы подписей для добавления к объекту и добавляет их.
//
// Общий подход к обработке значений свойств с типом ОписаниеОповещения в параметре ОписаниеДанных.
//  При выполнении обработки оповещения в нее передается структура параметров, в которой всегда есть
//  свойство "Оповещение" типа ОписаниеОповещения, обработку которого нужно выполнить для продолжения.
//  Кроме того, в структуре всегда есть свойство ОписаниеДанных, полученное при вызове процедуры.
//  При вызове оповещения в качестве значения должна передаваться структура. Если в процессе асинхронного
//  выполнения возникает ошибка, тогда в эту структуру нужно вставить свойство ОписаниеОшибки типа Строка.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * ЗаголовокДанных     - Строка - заголовок элемента данных, например Файл.
//    * ПоказатьКомментарий - Булево - (необязательный) - разрешает ввод комментария в форме
//                              добавления подписей. Если не указан, значит Ложь.
//    * Объект              - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                              ЭлектронныеПодписи, в которую нужно добавить подпись.
//    * -- // --            - ОписаниеОповещения - (необязательный) - обработчик добавления подписи в
//                              табличную часть ЭлектронныеПодписи. Следует учесть общий подход (см. выше).
//                              В момент вызова в ОписаниеДанных уже вставлен параметр Подписи.
//    * ВерсияОбъекта       - Строка - (необязательный) - версия данных объекта для проверки и
//                              блокировки объекта перед добавлением подписи.
//    * Представление       - Ссылка, Строка - (необязательный), если не указан, тогда
//                                представление вычисляется по значению свойства Объект.
//    * Данные              - ДвоичныеДанные - (необязательный) - данные для проверки подписи.
//    * -- // --            - Строка - (необязательный) - адрес временного хранилища, содержащего двоичные данные.
//    * -- // --            - ОписаниеОповещения (необязательный) - обработчик получения данных, который
//                               возвращает их в свойстве Данные (см. выше общий подход).
//
//  Форма - УправляемаяФорма - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при блокировке объекта.
//        - Неопределено     - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, например, если не указан параметр Объект и/или Форма.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно.
//     * Подписи - Массив - который содержит элементы:
//       * СвойстваПодписи - Строка - адрес временного хранилища, содержащего описанную ниже структуру.
//                         - Структура - развернутое описание подписи:
//           * Подпись             - ДвоичныеДанные - результат подписания.
//           * УстановившийПодпись - СправочникСсылка.Пользователи - пользователь, который
//                                      подписал объект информационной базы.
//           * Комментарий         - Строка - комментарий, если он был введен при подписании.
//           * ИмяФайлаПодписи     - Строка - имя файла, из которого добавлена подпись.
//           * ДатаПодписи         - Дата   - дата, когда подпись была сделана. Имеет смысл для случая,
//                                            когда дату невозможно извлечь из данных подписи. Если не
//                                            указана или пустая, тогда используется текущая дата сеанса.
//           * ДатаПроверкиПодписи - Дата   - дата проверки подписи после добавления из файла, если
//                                            не указано свойство Данные в параметре ОписаниеДанных,
//                                            возвращает пустую дату.
//           * ПодписьВерна        - Булево - результат проверки подписи после добавления из файла, если
//                                            не указано свойство Данные в параметре ОписаниеДанных,
//                                            возвращает Ложь.
//
//           Производные свойства:
//           * Сертификат          - ДвоичныеДанные - содержит выгрузку сертификата,
//                                      который использовался для подписания (содержится в подписи).
//           * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//           * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//
Процедура ДобавитьПодписьИзФайла(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	ОписаниеДанных.Вставить("Успех", Ложь);
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("ЗаголовокДанных", НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ПоказатьКомментарий", Ложь);
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных",      ОписаниеДанных);
	КлиентскиеПараметры.Вставить("Форма",               Форма);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	ЭлектроннаяПодписьСлужебныйКлиент.НастроитьПредставлениеДанных(КлиентскиеПараметры, СерверныеПараметры);
	
	Обработчик = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	ФормаДобавления = ОткрытьФорму("ОбщаяФорма.ДобавлениеЭлектроннойПодписиИзФайла", СерверныеПараметры,,,,,
		Новый ОписаниеОповещения("СтандартноеЗавершение", ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры));
	
	Если ФормаДобавления = Неопределено Тогда
		Если ОбработкаРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработкаРезультата, ОписаниеДанных);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФормаДобавления.КлиентскиеПараметры = КлиентскиеПараметры;
	
	ОбщиеНастройки = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	Контекст.Вставить("ФормаДобавления", ФормаДобавления);
	Контекст.Вставить("ПроверитьМенеджерКриптографииНаКлиенте", Истина);
	Контекст.Вставить("ОписаниеДанных", ОписаниеДанных);
	
	Если (    ОбщиеНастройки.ПроверятьЭлектронныеПодписиНаСервере
	      Или ОбщиеНастройки.СоздаватьЭлектронныеПодписиНаСервере)
	   И Не ЗначениеЗаполнено(ФормаДобавления.МенеджерКриптографииНаСервереОписаниеОшибки) Тогда
		
		Контекст.ПроверитьМенеджерКриптографииНаКлиенте = Ложь;
		ЭлектроннаяПодписьСлужебныйКлиент.ДобавитьПодписьИзФайлаПослеСозданияМенеджераКриптографии(
			Неопределено, Контекст);
	Иначе
		ЭлектроннаяПодписьСлужебныйКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
				"ДобавитьПодписьИзФайлаПослеСозданияМенеджераКриптографии",
				ЭлектроннаяПодписьСлужебныйКлиент, Контекст),
			"", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Предлагает пользователю выбрать подписи для сохранения вместе с данными объекта.
//
// Общий подход к обработке значений свойств с типом ОписаниеОповещения в параметре ОписаниеДанных.
//  При выполнении обработки оповещения в нее передается структура параметров, в которой всегда есть
//  свойство "Оповещение" типа ОписаниеОповещения, обработку которого нужно выполнить для продолжения.
//  Кроме того, в структуре всегда есть свойство ОписаниеДанных, полученное при вызове процедуры.
//  При вызове оповещения в качестве значения должна передаваться структура. Если в процессе асинхронного
//  выполнения возникает ошибка, тогда в эту структуру нужно вставить свойство ОписаниеОшибки типа Строка.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * ЗаголовокДанных     - Строка - заголовок элемента данных, например Файл.
//    * ПоказатьКомментарий - Булево - (необязательный) - разрешает ввод комментария в форме
//                              добавления подписей. Если не указан, значит Ложь.
//    * Представление      - Ссылка, Строка - (необязательный), если не указан, тогда
//                                представление вычисляется по значению свойства Объект.
//    * Объект             - Ссылка - ссылка на объект с табличной частью ЭлектронныеПодписи,
//                              из которой нужно получить список подписей.
//    * -- // --           - Строка - адрес временного хранилища массива подписей с составом свойств,
//                              как возвращает процедура ДобавитьПодписьИзФайла.
//    * Данные             - ОписаниеОповещения - обработчик сохранения данных и получения полного имени
//                              файла с путем (после его сохранения), возвращаемое в свойстве ПолноеИмяФайла
//                              типа Строка для сохранения электронных подписей (см. выше общий подход).
//                              Если расширение для работы с файлами не подключено, то нужно вернуть
//                              имя файла без пути.
//                              Если свойство не будет вставлено или заполнено - это считается отказом
//                              от продолжения и будет вызвана ОбработкаРезультата с результатом Ложь.
//
//                              Для пакетного запроса разрешений у пользователя веб-клиента на сохранение файла данных
//                              и подписей, нужно вставить параметр ОбработкаЗапросаРазрешений типа ОписаниеОповещения.
//                              В процедуру будет передана Структура с параметрами:
//                              * Вызовы               - Массив - с описанием вызовов для сохранения подписей.
//                              * ОбработкаПродолжения - ОписаниеОповещения - оповещение, которое нужно выполнить
//                                                       после запроса разрешений, - параметры процедуры как у
//                                                       оповещения для метода НачатьЗапросРазрешенияПользователя.
//                                                       Если разрешение не получено, значит все отменено.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     В результат передается параметр:
//     * Булево - Истина, если все прошло успешно.
//
Процедура СохранитьДанныеВместеСПодписью(ОписаниеДанных, ОбработкаРезультата = Неопределено) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.СохранитьДанныеВместеСПодписью(ОписаниеДанных, ОбработкаРезультата);
	
КонецПроцедуры

// Проверяет действительность подписи и сертификата.
// Сертификат всегда проверяется на сервере, если администратор
// настроил проверку электронных подписей на сервере.
//
// Параметры:
//   Оповещение           - ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//     Булево       - Истина, если проверка выполнена успешно.
//     Строка       - описание ошибки проверки подписи.
//     Неопределено - не удалось получить менеджер криптографии (когда не указан).
//
//   ИсходныеДанные       - ДвоичныеДанные - двоичные данные, которые были подписаны.
//                          Математическая проверка выполняется на стороне клиента, даже когда
//                          администратор настроил проверку электронных подписей на сервере,
//                          если указан менеджер криптографии или его удалось получить без ошибки.
//                          Это повышает производительность, а также безопасность когда проверяется
//                          подпись в расшифрованном файле (он не будет передан на сервер).
//                        - Строка - адрес временного хранилища, содержащего исходные двоичные данные.
//                        - Структура - со свойствами:
//                          * ПараметрыXMLDSig - Структура - как возвращает функция ПараметрыXMLDSig общего
//                                                           модуля ЭлектроннаяПодписьКлиентСервер.
//                          * КонвертSOAP      - Строка - шаблон сообщения <soap:Envelope>.
//
//   Подпись              - ДвоичныеДанные - двоичные данные электронной подписи.
//                        - Строка         - адрес временного хранилища, содержащего двоичные данные.
//                        - Неопределено   - если ИсходныеДанные конверт SOAP.
//
//   МенеджерКриптографии - Неопределено - получить менеджер криптографии по-умолчанию
//                          (менеджер первой программы в списке, как настроил администратор).
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии.
//
//   НаДату               - Дата - проверить сертификат на указанную дату,
//                          если дату не удалось извлечь из подписи.
//                          Если параметр не заполнен, тогда проверять на текущую дату сеанса,
//                          если дату не удалось извлечь из подписи.
//
Процедура ПроверитьПодпись(Оповещение, ИсходныеДанные, Подпись, МенеджерКриптографии = Неопределено, НаДату = Неопределено) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПроверитьПодпись(Оповещение, ИсходныеДанные, Подпись, МенеджерКриптографии, НаДату);
	
КонецПроцедуры

// Шифрует данные, возвращает сертификаты шифрования и добавляет их объект, если указано.
// 
// Общий подход к обработке значений свойств с типом ОписаниеОповещения в параметре ОписаниеДанных.
//  При выполнении обработки оповещения в нее передается структура параметров, в которой всегда есть
//  свойство "Оповещение" типа ОписаниеОповещения, обработку которого нужно выполнить для продолжения.
//  Кроме того, в структуре всегда есть свойство ОписаниеДанных, полученное при вызове процедуры.
//  При вызове оповещения в качестве значения должна передаваться структура. Если в процессе асинхронного
//  выполнения возникает ошибка, тогда в эту структуру нужно вставить свойство ОписаниеОшибки типа Строка.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * Операция           - Строка - заголовок формы шифрования данных, например, Шифрование файла.
//    * ЗаголовокДанных    - Строка - заголовок элемента или набора данных, например Файл.
//    * СообщитьОЗавершении - Булево - (необязательный) - если Ложь, то не будет показано оповещение о успешном
//                              завершении операции для представления данных, указанного рядом с заголовком.
//    * НаборСертификатов  - Строка - (необязательный) адрес временного хранилища, содержащего массив, описанный ниже.
//                         - Массив - (необязательный) содержит значения
//                              типа СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования или
//                              типа ДвоичныеДанные (выгрузка сертификата).
//                         - Ссылка - (необязательный) - ссылка на объект с табличной
//                              частью СертификатыШифрования из которой их нужно получить.
//    * ИзменятьНабор      - Булево - если Истина и НаборСертификатов задан и содержит только ссылки
//                              на сертификаты, тогда будет возможность изменить состав сертификатов.
//    * БезПодтверждения   - Булево - (необязательный) - пропустить подтверждение пользователя,
//                              если указано свойство ОтборСертификатов.
//    * ВыполнятьНаСервере - Неопределено, Булево - (необязательный) - когда не указан или Неопределено,
//                              тогда выполнение будет определено автоматически: если есть сервер, то сначала
//                              на сервере, потом при неудаче на клиенте, потом сообщение о двух ошибках.
//                              Когда Истина: если есть разрешено выполнение на сервере, тогда выполнение
//                              только на сервере, при неудаче одно сообщение об ошибке на сервере.
//                              Когда Ложь: выполнение только на клиенте, как будто нет сервера.
//    * КонтекстОперации   - Неопределено - (необязательный) - если указан, тогда в свойство будет
//                              установлено определенное значение произвольного типа, которое позволяет
//                              выполнить действие с теми же сертификатами шифрования повторно (у пользователя
//                              не запрашивается подтверждение действия).
//    * ------ // ------   - Произвольный - (необязательный) - если определено, то действие будет выполнено
//                              с теми же сертификатами шифрования.
//                              Параметр БезПодтверждения считается равным Истина.
//                              Параметры Операция, ЗаголовокДанных, НаборСертификатов, ИзменятьНабор
//                              и ВыполнятьНаСервере игнорируются, их значения остаются, как при первом вызове.
//
//    Вариант 1:
//    * Данные                - ДвоичныеДанные - данные для шифрования.
//    * -- // --              - Строка - адрес временного хранилища, содержащего двоичные данные.
//    * -- // --              - ОписаниеОповещения - обработчик получения данных, который возвращает
//                                 их в свойстве Данные (см. выше общий подход).
//    * РазмещениеРезультата  - Неопределено - (необязательный) - описывает куда поместить зашифрованные данные.
//                                 Если не указан или Неопределено, тогда через параметр ОбработкаРезультата.
//    * -- // --               - ОписаниеОповещения - обработчик сохранения зашифрованных данных.
//                                 Следует учесть общий подход (см. выше).
//                                 В момент вызова в ОписаниеДанных уже вставлен параметр ЗашифрованныеДанные.
//                                 В случае параметра НаборДанных, в ОписаниеДанных вставляется
//                                 свойство ТекущийЭлементНабораДанных, содержащее параметр ЗашифрованныеДанные.
//    * Объект                - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                                 СертификатыШифрования, в которую нужно их добавить после шифрования.
//                                 Если не указан, то сертификаты шифрования не требуется добавлять.
//    * ВерсияОбъекта         - Строка - (необязательный) - версия данных объекта для проверки и
//                                 блокировки объекта перед добавлением сертификатов шифрования.
//    * Представление         - Ссылка, Строка, Структура - (необязательный), если не указан, тогда
//                                 представление вычисляется по значению свойства Объект.
//                                 Структура содержит свойства:
//                                    * Значение      - Ссылка, ОписаниеОповещения - для открытия.
//                                    * Представление - Строка - представление значения.
//    Вариант 2:
//    * НаборДанных           - Массив - структуры со свойствами, описанными в Варианте 1.
//    * ПредставлениеНабора   - Строка - представления нескольких элементов набора данных, например, "Файлы (%1)".
//                                 В это представление в параметр %1 заполняется количество элементов.
//                                 По гиперссылке можно открыть список.
//                                 Если в наборе данных 1 элемент, тогда используется значение
//                                 в свойстве Представление свойства НаборДанных, если не указано, тогда
//                                 представление вычисляется по значению свойства Объект элемента набора данных.
//    * СписокПредставлений   - СписокЗначений, Массив - (необязательный) - произвольный список элементов
//                                 или массив со значениями, как у свойства Представление, которые
//                                 сможет открыть пользователь. Если не указан, то заполняется из
//                                 свойств Представление или Объект в свойстве НаборДанных.
//
//  Форма - УправляемаяФорма  - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при помещении зашифрованных данных во временное хранилище.
//        - Неопределено      - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, если не указан параметр Форма и/или РазмещениеРезультата.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно. Если Успех = Ложь, то частичное завершение
//               определяется по наличию свойства ЗашифрованныеДанные. Если есть, то шаг выполнен.
//     * СертификатыШифрования - Строка - адрес временного хранилища, содержащего массив, описанный ниже.
//                             - Массив - помещается перед началом шифрования и после этого не изменяется.
//                                 Содержит значения типа Структура со свойствами:
//                                 * Отпечаток     - Строка - отпечаток сертификата в формате строки Base64.
//                                 * Представление - Строка - сохраненное представление субъекта,
//                                                      полученное из двоичных данных сертификата.
//                                 * Сертификат    - ДвоичныеДанные - содержит выгрузку сертификата,
//                                                      который использовался для шифрования.
//     * ЗашифрованныеДанные - ДвоичныеДанные - результат шифрования.
//                             При передаче параметра НаборДанных, свойство нужно проверять в нем.
//                           - Строка - адрес временного хранилища, содержащего результат шифрования.
//
Процедура Зашифровать(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	КлиентскиеПараметры.Вставить("Форма", Форма);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	Если ОписаниеДанных.Свойство("КонтекстОперации")
	   И ТипЗнч(ОписаниеДанных.КонтекстОперации) = Тип("УправляемаяФорма") Тогда
		
		ЭлектроннаяПодписьСлужебныйКлиент.ПродлитьХранениеКонтекстаОперации(ОписаниеДанных);
		НачалоИмениФормы = "Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.";
		
		Если ОписаниеДанных.КонтекстОперации.ИмяФормы = НачалоИмениФормы + "ШифрованиеДанных" Тогда
			ОписаниеДанных.КонтекстОперации.ВыполнитьШифрование(КлиентскиеПараметры, ОбработкаЗавершения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("Операция",            НСтр("ru = 'Шифрование данных'"));
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("НаборСертификатов");
	СерверныеПараметры.Вставить("ИзменятьНабор");
	СерверныеПараметры.Вставить("ВыполнятьНаСервере");
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьНовуюФорму("ШифрованиеДанных",
		КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения);
	
КонецПроцедуры

// Расшифровывает данные, возвращает их и помещает в объект, если указано.
// 
// Общий подход к обработке значений свойств с типом ОписаниеОповещения в параметре ОписаниеДанных.
//  При выполнении обработки оповещения в нее передается структура параметров, в которой всегда есть
//  свойство "Оповещение" типа ОписаниеОповещения, обработку которого нужно выполнить для продолжения.
//  Кроме того, в структуре всегда есть свойство ОписаниеДанных, полученное при вызове процедуры.
//  При вызове оповещения в качестве значения должна передаваться структура. Если в процессе асинхронного
//  выполнения возникает ошибка, тогда в эту структуру нужно вставить свойство ОписаниеОшибки типа Строка.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * Операция           - Строка - заголовок формы расшифровки данных, например, Расшифровка файла.
//    * ЗаголовокДанных    - Строка - заголовок элемента или набора данных, например Файл.
//    * СообщитьОЗавершении - Булево - (необязательный) - если Ложь, то не будет показано оповещение о успешном
//                              завершении операции для представления данных, указанного рядом с заголовком.
//    * ОтборСертификатов  - Массив - (необязательный) - содержит ссылки на элементы справочника.
//                              СертификатыЭлектроннойПодписиИШифрования, которые могут быть выбраны
//                              пользователем. Отбор блокирует возможность выбора других сертификатов
//                              из личного хранилища.
//    * БезПодтверждения   - Булево - (необязательный) - пропустить подтверждение пользователя, если
//                              в свойстве ОтборСертификатов только один сертификат и:
//                              а) либо сертификат выпущен с усиленной защитой закрытого ключа,
//                              б) либо пользователь запомнил пароль к сертификату на время сеанса,
//                              в) либо пароль установлен ранее методом УстановитьПарольСертификата.
//                              Если в процессе расшифровки возникла ошибка, тогда будет открыта форма
//                              с возможностью указать пароль.
//    * ЭтоАутентификация  - Булево - (необязательный) - если указан Истина, то вместо кнопки Расшифровать
//                              будет показана кнопка ОК. А также скорректированы некоторые надписи.
//                              Кроме того, параметр СообщитьОЗавершении устанавливается Ложь.
//    * ПередВыполнением   - ОписаниеОповещения - (необязательный) - описание обработчика дополнительной
//                              подготовки данных, после выбора сертификата, которым будут расшифрованы данные.
//                              В этом обработчике можно заполнить параметр Данные, если необходимо.
//                              В момент вызова в ОписаниеДанных уже вставлен выбранный сертификат,
//                              как ВыбранныйСертификат (см. ниже). Следует учесть общий подход (см. выше).
//    * ВыполнятьНаСервере - Неопределено, Булево - (необязательный) - когда не указан или Неопределено,
//                              тогда выполнение будет определено автоматически: если есть сервер, то сначала
//                              на сервере, потом при неудаче на клиенте, потом сообщение о двух ошибках.
//                              Когда Истина: если есть разрешено выполнение на сервере, тогда выполнение
//                              только на сервере, при неудаче одно сообщение об ошибке на сервере.
//                              Когда Ложь: выполнение только на клиенте, как будто нет сервера.
//    * ПараметрыДополнительныхДействий - Произвольный - (необязательный) - если указан, то передается
//                              на сервер в процедуру ПередНачаломОперации общего модуля.
//                              ЭлектроннаяПодписьПереопределяемый, как ВходныеПараметры.
//    * КонтекстОперации   - Неопределено - (необязательный) - если указан, тогда в свойство будет
//                              установлено определенное значение произвольного типа, которое позволяет
//                              выполнить действие с тем же сертификатом повторно (у пользователя 
//                              не запрашивается ни пароль, ни подтверждение действия).
//    * ------ // ------   - Произвольный - (необязательный) - если определено, то действие будет выполнено
//                              с тем же сертификатом без запроса пароля или подтверждения.
//                              Параметр БезПодтверждения считается равным Истина.
//                              Параметры Операция, ЗаголовокДанных, ОтборСертификатов, ЭтоАутентификация
//                              и ВыполнятьНаСервере игнорируются, их значения остаются, как при первом вызове.
//                              Параметр ПараметрыДополнительныхДействий игнорируется.
//                              Процедура ПередНачаломОперации не вызывается.
//                              Если передать контекст, возвращенный процедурой Подписать, тогда
//                              пароль, введенный для сертификата, может быть использован, как если бы
//                              пароль был сохранен на время сеанса. В остальном контекст игнорируется.
// 
//    Вариант 1:
//    * Данные                - ДвоичныеДанные - данные для расшифровки.
//    * -- // --              - Строка - адрес временного хранилища, содержащего двоичные данные.
//    * -- // --              - ОписаниеОповещения - обработчик получения данных, который возвращает
//                                 их в свойстве Данные (см. выше общий подход). В момент вызова
//                                 в ОписаниеДанных уже вставлен параметр ВыбранныйСертификат (см. ниже).
//    * РазмещениеРезультата  - Неопределено - (необязательный) - описывает куда поместить расшифрованные данные.
//                                 Если не указан или Неопределено, тогда через параметр ОбработкаРезультата.
//    * -- // --              - ОписаниеОповещения - обработчик сохранения расшифрованных данных.
//                                 Следует учесть общий подход (см. выше).
//                                 В момент вызова в ОписаниеДанных уже вставлен параметр РасшифрованныеДанные.
//                                 В случае параметра НаборДанных, в ОписаниеДанных вставляется
//                                 свойство ТекущийЭлементНабораДанных, содержащее параметр РасшифрованныеДанные.
//    * Объект                - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                                 СертификатыШифрования, из которой нужно получить сертификаты,
//                                 а также очистить после успешного завершения расшифровки.
//                                 Если не указан, то сертификаты не требуется получать из объекта и очищать.
//    * -- // --              - Строка - адрес временного хранилища, содержащего массив сертификатов
//                                 шифрования в виде структур со свойствами:
//                                 * Отпечаток     - Строка - отпечаток сертификата в формате строки Base64.
//                                 * Представление - Строка - сохраненное представление субъекта,
//                                                      полученное из двоичных данных сертификата.
//                                 * Сертификат    - ДвоичныеДанные - содержит выгрузку сертификата,
//                                                      который использовался для шифрования.
//    * Представление         - Ссылка, Строка, Структура - (необязательный), если не указан, тогда
//                                 представление вычисляется по значению свойства Объект.
//                                 Структура содержит свойства:
//                                    * Значение      - Ссылка, ОписаниеОповещения - для открытия.
//                                    * Представление - Строка - представление значения.
//                                 
//    Вариант 2:
//    * НаборДанных           - Массив - структуры со свойствами, описанными в Варианте 1.
//    * ПредставлениеНабора   - Строка - представления нескольких элементов набора данных, например, "Файлы (%1)".
//                                 В это представление в параметр %1 заполняется количество элементов.
//                                 По гиперссылке можно открыть список.
//                                 Если в наборе данных 1 элемент, тогда используется значение
//                                 в свойстве Представление свойства НаборДанных, если не указано, тогда
//                                 представление вычисляется по значению свойства Объект элемента набора данных.
//    * СписокПредставлений   - СписокЗначений, Массив - (необязательный) - произвольный список элементов
//                                 или массив со значениями, как у свойства Представление, которые
//                                 сможет открыть пользователь. Если не указан, то заполняется из
//                                 свойств Представление или Объект в свойстве НаборДанных.
//    * СертификатыШифрования - Массив - (необязательный) значения, как у параметра Объект. Используется
//                                 для извлечения списков сертификатов шифрования для элементов, указанных
//                                 в параметре СписокПредставлений (порядок должен соответствовать).
//                                 Когда указан, параметр Объект не используется.
//
//  Форма - УправляемаяФорма  - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при помещении расшифрованных данных во временное хранилище.
//        - Неопределено      - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, если не указан параметр Форма и/или РазмещениеРезультата.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно. Если Успех = Ложь, то частичное завершение
//               определяется по наличию свойства РасшифрованныеДанные. Если есть, то шаг выполнен.
//     * ВыбранныйСертификат - Структура - содержит свойства сертификата:
//         * Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//         * Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//         * Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//     * РасшифрованныеДанные - ДвоичныеДанные - результат расшифровки.
//                              При передаче параметра НаборДанных, свойство нужно проверять в нем.
//                            - Строка - адрес временного хранилища, содержащего результат расшифровки.
//
Процедура Расшифровать(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	КлиентскиеПараметры.Вставить("Форма", Форма);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	Если ОписаниеДанных.Свойство("КонтекстОперации")
	   И ТипЗнч(ОписаниеДанных.КонтекстОперации) = Тип("УправляемаяФорма") Тогда
		
		ЭлектроннаяПодписьСлужебныйКлиент.ПродлитьХранениеКонтекстаОперации(ОписаниеДанных);
		НачалоИмениФормы = "Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.";
		
		Если ОписаниеДанных.КонтекстОперации.ИмяФормы = НачалоИмениФормы + "РасшифровкаДанных" Тогда
			ОписаниеДанных.КонтекстОперации.ВыполнитьРасшифровку(КлиентскиеПараметры, ОбработкаЗавершения);
			Возврат;
		КонецЕсли;
		Если ОписаниеДанных.КонтекстОперации.ИмяФормы = НачалоИмениФормы + "ПодписаниеДанных" Тогда
			КлиентскиеПараметры.Вставить("УказанКонтекстДругойОперации");
		КонецЕсли;
	КонецЕсли;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("Операция",            НСтр("ru = 'Расшифровка данных'"));
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ОтборСертификатов");
	СерверныеПараметры.Вставить("СертификатыШифрования");
	СерверныеПараметры.Вставить("ЭтоАутентификация");
	СерверныеПараметры.Вставить("ВыполнятьНаСервере");
	СерверныеПараметры.Вставить("ПараметрыДополнительныхДействий");
	СерверныеПараметры.Вставить("РазрешитьЗапоминатьПароль");
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Если ТипЗнч(СерверныеПараметры.СертификатыШифрования) <> Тип("Массив")
		   И ОписаниеДанных.Свойство("Объект") Тогда
			
			СерверныеПараметры.Вставить("СертификатыШифрования", ОписаниеДанных.Объект);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СерверныеПараметры.СертификатыШифрования) <> Тип("Массив") Тогда
		
		СерверныеПараметры.Вставить("СертификатыШифрования", Новый Массив);
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			Если ЭлементДанных.Свойство("Объект") Тогда
				СерверныеПараметры.СертификатыШифрования.Добавить(ЭлементДанных.Объект);
			Иначе
				СерверныеПараметры.СертификатыШифрования.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьНовуюФорму("РасшифровкаДанных",
		КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения);
	
КонецПроцедуры


// Проверяет действительность сертификата криптографии.
//
// Параметры:
//   Оповещение           - ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//     Булево       - Истина, если проверка выполнена успешно.
//     Строка       - описание ошибки проверки сертификата.
//     Неопределено - не удалось получить менеджер криптографии (когда не указан).
//
//   Сертификат           - СертификатКриптографии - сертификат.
//                        - ДвоичныеДанные - двоичные данные сертификата.
//                        - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//
//   МенеджерКриптографии - Неопределено - получить менеджер криптографии автоматически.
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии
//                          (проверка на сервере не будет выполнена).
//
//   НаДату               - Дата - проверить сертификат на указанную дату.
//                          Если параметр не указан или указана пустая дата,
//                          тогда проверять на текущую дату сеанса.
//
Процедура ПроверитьСертификат(Оповещение, Сертификат, МенеджерКриптографии = Неопределено, НаДату = Неопределено) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПроверитьСертификат(Оповещение, Сертификат, МенеджерКриптографии, НаДату);
	
КонецПроцедуры

// Открывает форму ПроверкаСертификата и возвращает результат проверки.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//
//  ДополнительныеПараметры - Неопределено - обычная проверка сертификата.
//                          - Структура - с необязательными свойствами:
//    * ВладелецФормы          - УправляемаяФорма - другая форма.
//    * ЗаголовокФормы         - Строка - если указан, тогда заменяет заголовок формы.
//    * ПроверкаПриВыборе      - Булево - если Истина, тогда кнопка Проверить будет называться
//                                  "Проверить и продолжить", а кнопка Закрыть будет называться "Отмена".
//    * ОбработкаРезультата    - ОписаниеОповещения - вызывается сразу после проверки, в процедуру
//                                 передается Результат.ПроверкиПройдены (см. ниже) с начальным значением Ложь.
//                                 В режиме ПроверкаПриВыборе, если не установить Истина,
//                                 тогда форма не будет закрыта после возврата из процедуры оповещения и
//                                 будет показано предупреждение о невозможности продолжения.
//    * БезПодтверждения       - Булево - если установить Истина, тогда при наличии пароля
//                                  проверка будет выполнена сразу без открытия формы.
//                                  Если режим ПроверкаПриВыборе и установлен параметр ОбработкаРезультата, то
//                                  форма не будет открыта, если параметр ПроверкиПройдены установлен Истина.
//    * ОбработкаЗавершения    - ОписаниеОповещения - вызывается при закрытии формы, в качестве результата
//                                  передается Неопределено или значение ПроверкиПройдены (см. ниже).
//    * Результат              - Неопределено - проверка ни разу не выполнялась.
//                             - Структура - (возвращаемое значение) - вставляется перед обработкой результата,
//         содержит свойства:
//         * ПроверкиПройдены  - Булево - (возвращаемое значение) устанавливается в процедуре параметра
//                                        ОбработкаРезультата.
//         * ПроверкиНаСервере - Неопределено - проверка не выполнялась на сервере:
//                             - Структура - со свойствами, как в следующем параметре.
//         * ПроверкиНаКлиенте - Структура - со свойствами:
//             * НаличиеСертификата  - Булево, Неопределено - если Истина, тогда проверка прошла успешно,
//                                     если Ложь - проверка прошла не успешно, если Неопределено - не выполнялась.
//                                     Если стандартные проверки скрыты в процедуре ПриСозданииФормыПроверкаСертификата,
//                                     общего модуля ЭлектроннаяПодписьПереопределяемый, тогда свойства нет.
//             * ДанныеСертификата   - Булево, Неопределено - также, как указано выше.
//             * НаличиеПрограммы    - Булево, Неопределено - также, как указано выше.
//             * Подписание          - Булево, Неопределено - также, как указано выше.
//             * ПроверкаПодписи     - Булево, Неопределено - также, как указано выше.
//             * Шифрование          - Булево, Неопределено - также, как указано выше.
//             * Расшифровка         - Булево, Неопределено - также, как указано выше.
//             * <Имя дополнительной проверки> - Булево, Неопределено - также, как указано выше.
//
//    * ПараметрыДополнительныхПроверок - Произвольный - параметры, которые передаются в процедуру.
//        ПриСозданииФормыПроверкаСертификата общего модуля ЭлектроннаяПодписьПереопределяемый.
//
Процедура ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

// Находит сертификат на компьютере по строке отпечатка.
//
// Параметры:
//   Оповещение           - ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//     СертификатКриптографии - найденный сертификат.
//     Неопределено           - сертификат не найден в хранилище.
//     Строка                 - текст ошибки создания менеджера криптографии (или другая ошибка).
//
//   Отпечаток              - Строка - Base64 кодированный отпечаток сертификата.
//   ТолькоВЛичномХранилище - Булево - если Истина, тогда искать в личном хранилище, иначе везде.
//   ПоказатьОшибку         - Булево - если Ложь, тогда ошибка, текст который будет возвращен, не будет показана.
//
Процедура ПолучитьСертификатПоОтпечатку(Оповещение, Отпечаток, ТолькоВЛичномХранилище, ПоказатьОшибку = Истина) Экспорт
	
	Если ТипЗнч(ПоказатьОшибку) <> Тип("Булево") Тогда
		ПоказатьОшибку = Истина;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПолучитьСертификатПоОтпечатку(Оповещение,
		Отпечаток, ТолькоВЛичномХранилище, ПоказатьОшибку);
	
КонецПроцедуры

// Получает отпечатки сертификатов пользователя ОС на компьютере.
//
// Параметры:
//  Оповещение     - ОписаниеОповещение - вызывается для передачи возвращаемого значение:
//                   * Соответствие - Ключ - отпечаток в формате строки Base64, а Значение - Истина;
//                   * Строка - текст ошибки создания менеджера криптографии (или другая ошибка).
//
//  ТолькоЛичные   - Булево - Если Ложь, то к личным сертификатам добавляются сертификаты получателей.
//
//  ПоказатьОшибку - Булево - показать ошибку создания менеджера криптографии.
//
Процедура ПолучитьОтпечаткиСертификатов(Оповещение, ТолькоЛичные, ПоказатьОшибку = Истина) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, ТолькоЛичные, ПоказатьОшибку);
	
КонецПроцедуры

// Показывает диалог установки расширения для работы с электронной подписью и шифрованием.
//
// Параметры:
//   БезВопроса           - Булево - если указано Истина, тогда вопроса показано не будет.
//                                   Требуется, если пользователь нажал на кнопку Установить расширение.
//
//   ОбработчикРезультата - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ТекстВопроса         - Строка - Текст вопроса.
//   ЗаголовокВопроса     - Строка - Заголовок вопроса.
//
// Значение первого параметра, возвращаемого в обработчик вызывающего кода:
//   РасширениеУстановлено
//       * Истина - Пользователь подтвердил установку, после установки расширение было успешно подключено.
//       * Ложь   - Пользователь подтвердил установку, однако после установки расширение не удалось подключить.
//       * Неопределено - Пользователь отказался от установки.
//
Процедура УстановитьРасширение(БезВопроса, ОбработчикРезультата = Неопределено, ТекстВопроса = "", ЗаголовокВопроса = "") Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.УстановитьРасширение(БезВопроса, ОбработчикРезультата, ТекстВопроса, ЗаголовокВопроса);
	
КонецПроцедуры

// Открывает или активизирует форму настроек электронной подписи и шифрования.
// 
// Параметры:
//  Страница - Строка - допустимы строки "Сертификаты", "Настройки", "Программы".
//
Процедура ОткрытьНастройкиЭлектроннойПодписиИШифрования(Страница = "Сертификаты") Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если Страница = "Сертификаты" Тогда
		ПараметрыФормы.Вставить("ПоказатьСтраницуСертификаты");
		
	ИначеЕсли Страница = "Настройки" Тогда
		ПараметрыФормы.Вставить("ПоказатьСтраницуНастройки");
		
	ИначеЕсли Страница = "Программы" Тогда
		ПараметрыФормы.Вставить("ПоказатьСтраницуПрограммы");
	КонецЕсли;
	
	Форма = ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования", ПараметрыФормы);
	
	// При повторном открытии формы требуются дополнительные действия.
	Если Страница = "Сертификаты" Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаСертификаты;
		
	ИначеЕсли Страница = "Настройки" Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаНастройки;
		
	ИначеЕсли Страница = "Программы" Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаПрограммы;
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

// Открывает инструкцию с описанием типичных проблем при работе с программами
// электронной подписи и вариантами их решения.
//
Процедура ОткрытьИнструкциюПоТипичнымПроблемамПриРаботеСПрограммами() Экспорт
	
	ПерейтиПоНавигационнойСсылке("http://its.1c.ru/bmk/dsig/errors");
	
КонецПроцедуры

// Устанавливает пароль в хранилище паролей на клиенте на время сеанса.
// Установка пароля позволяют не вводить пароль пользователю при очередной
// операции, что полезно при выполнении пакета операций.
// Если для сертификата установлен пароль, тогда флажок ЗапомнитьПароль
// в формах ПодписаниеДанных и РасшифровкаДанных становится невидимым.
// Для отмены установленного пароля достаточно установить значение пароля Неопределено.
//
// Параметры:
//  СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                        для которого устанавливается пароль.
//
//  Пароль           - Строка - устанавливаемый пароль. Может быть пустой.
//                   - Неопределено - сбросить установленный пароль, если был установлен.
//
//  ПояснениеПароля   - Структура - со свойствами, описывающими пояснение, которое будет написано
//                      под паролем вместо флажка ЗапомнитьПароль:
//     * ТекстПояснения       - Строка - только текст;
//     * ПояснениеГиперссылка - Булево - если истина, то при нажатии на пояснение, вызывать ОбработкаДействия.
//     * ТекстПодсказки       - Строка, ФорматированнаяСтрока - текст или текст со ссылками.
//     * ОбработкаДействия    - ОписаниеОповещения - вызывает процедуру, в которую передается
//          структура со свойствами:
//          * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка
//                         на выбранный сертификат;
//          * Действие   - Строка - "ПояснениеНажатие" или навигационная ссылка подсказки.
// 
Процедура УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля = Неопределено) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля);
	
КонецПроцедуры

// Переопределяет обычный выбор сертификата из справочника на выбор сертификата
// из личного хранилища с подтверждением паролем и автоматическим добавлением в справочник,
// если сертификата в справочнике еще нет.
//
// Параметры:
//  Элемент    - ПолеФормы - элемент формы, в который будет передано выбранное значение.
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - текущее значение,
//               выбранное в поле Элемент, которое нужно чтобы выделить соответствующую строку списка.
//
//  СтандартнаяОбработка - Булево - стандартный параметр события НачалоВыбора, который нужно сбросить в Ложь.
//  
//  ДляШифрованияИРасшифровки - Булево - управляет заголовком формы выбора. Начальное значение Ложь.
//                              Ложь - для подписания, Истина - для шифрования и расшифровки,
//                            - Неопределено - для подписания и шифрования.
//
Процедура СертификатНачалоВыбораСПодтверждением(Элемент, Сертификат, СтандартнаяОбработка, ДляШифрованияИРасшифровки = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныйСертификат", Сертификат);
	ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Истина);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Возвращает дату, извлеченную из двоичных данных подписи или Неопределено.
//
// Параметры:
//  Подпись - ДвоичныеДанные - данные подписи из которых нужно извлечь дату.
//  ПривестиКЧасовомуПоясуСеанса - Булево - привести универсальное время к времени сеанса.
//
// Возвращаемое значение:
//  Дата - успешно извлеченная дата подписи.
//  Неопределено - не удалось извлечь дату из данных подписи.
//
Функция ДатаПодписания(Подпись, ПривестиКЧасовомуПоясуСеанса = Истина) Экспорт
	
	ДатаПодписания = ЭлектроннаяПодписьСлужебныйКлиентСервер.ДатаПодписанияУниверсальная(Подпись);
	
	Если ДатаПодписания = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПривестиКЧасовомуПоясуСеанса Тогда
		ДатаПодписания = ДатаПодписания + (ОбщегоНазначенияКлиент.ДатаСеанса()
			- ОбщегоНазначенияКлиент.ДатаУниверсальная());
	КонецЕсли;
	
	Возврат ДатаПодписания;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму просмотра подписи ЭП.
Процедура ОткрытьПодпись(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваПодписи = Новый Структура(
		"ДатаПодписи, Комментарий, КомуВыданСертификат, Отпечаток,
		|АдресПодписи, УстановившийПодпись, АдресСертификата,
		|Статус, ОписаниеОшибки, ПодписьВерна, ДатаПроверкиПодписи");
		
	ЗаполнитьЗначенияСвойств(СвойстваПодписи, ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура("СвойстваПодписи", СвойстваПодписи);
	ОткрытьФорму("ОбщаяФорма.ЭлектроннаяПодпись", ПараметрыФормы);
	
КонецПроцедуры

// Сохраняет подпись на диск
Процедура СохранитьПодпись(АдресПодписи) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.СохранитьПодпись(АдресПодписи);
	
КонецПроцедуры

// Открывает форму просмотра данных сертификата.
//
// Параметры:
//  ДанныеСертификата - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//                    - СертификатКриптографии - имеющийся сертификат.
//                    - ДвоичныеДанные - двоичные данные сертификата.
//                    - Строка - адрес временного хранилища содержащий ДвоичныеДанные сертификата.
//                    - Строка - отпечаток сертификата для поиска во всех хранилищах.
//
//  ОткрытьДанные     - Булево - открыть данные сертификата, а не форму элемента справочника.
//                      Если передана не ссылка на элемент справочника и элемент справочника
//                      не удалось найти по отпечатку, тогда будут открыты данные сертификата.
//
Процедура ОткрытьСертификат(ДанныеСертификата, ОткрытьДанные = Ложь) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьСертификат(ДанныеСертификата, ОткрытьДанные);
	
КонецПроцедуры

// По окончании подписания сообщает о подписании.
//
// Параметры:
//  ПредставлениеДанных - Произвольный - ссылка на объект, в табличную
//                          часть которого добавлена электронная подпись.
//  МножествоДанных     - Булево - определяет вид сообщения множественное
//                          или единственное число элементов.
//  ИзФайла             - Булево - определяет вид сообщения добавления
//                          электронной подписи или файла.
//
Процедура ИнформироватьОПодписанииОбъекта(ПредставлениеДанных, МножествоДанных = Ложь, ИзФайла = Ложь) Экспорт
	
	Если ИзФайла Тогда
		Если МножествоДанных Тогда
			ТекстСообщения = НСтр("ru = 'Добавлены подписи из файлов:'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Добавлена подпись из файла:'");
		КонецЕсли;
	Иначе
		Если МножествоДанных Тогда
			ТекстСообщения = НСтр("ru = 'Установлены подписи:'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Установлена подпись:'");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстСообщения, , ПредставлениеДанных);
	
КонецПроцедуры

// По окончании шифрования сообщает о завершении.
//
// Параметры:
//  ПредставлениеДанных - Произвольный - ссылка на объект,
//                          данные которого зашифрованы.
//  МножествоДанных     - Булево - определяет вид сообщения множественное
//                          или единственное число элементов.
//
Процедура ИнформироватьОШифрованииОбъекта(ПредставлениеДанных, МножествоДанных = Ложь) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Выполнено шифрование:'");
	
	ПоказатьОповещениеПользователя(ТекстСообщения, , ПредставлениеДанных);
	
КонецПроцедуры

// По окончании расшифровки сообщает о завершении.
//
// Параметры:
//  ПредставлениеДанных - Произвольный - ссылка на объект,
//                          данные которого расшифрованы.
//  МножествоДанных     - Булево - определяет вид сообщения множественное
//                          или единственное число элементов.
//
Процедура ИнформироватьОРасшифровкеОбъекта(ПредставлениеДанных, МножествоДанных = Ложь) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Выполнена расшифровка:'");
	
	ПоказатьОповещениеПользователя(ТекстСообщения, , ПредставлениеДанных);
	
КонецПроцедуры

#КонецОбласти
