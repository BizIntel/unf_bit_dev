////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет необходимые проверки и запросы пользователю перед записью организации
// При ответе пользователя о необходимости обработки вызывает сервер
// Параметры:
//	ДанныеОрганизации - данные формы, соответствующие Организации
//	Отказ - признак отказа от записи
Процедура ФормаОрганизацииПередЗаписью(ДанныеОрганизации, Форма, Отказ) Экспорт
Перем НеобходимостьОбработки;
	
	ТекущееСостояниеОрганизации = Новый Структура("Ссылка,ПрименятьРайонныйКоэффициент,ПрименятьСевернуюНадбавку");
	
	ТекущееСостояниеОрганизации.Ссылка = ДанныеОрганизации.Ссылка;
	ТекущееСостояниеОрганизации.ПрименятьРайонныйКоэффициент = ДанныеОрганизации.ПрименятьРайонныйКоэффициент;
	ТекущееСостояниеОрганизации.ПрименятьСевернуюНадбавку = ДанныеОрганизации.ПрименятьСевернуюНадбавку;
	
	ЗарплатаКадрыВызовСервера.НеобходимостьОбработкиДанныхПриЗаписиОрганизации(ТекущееСостояниеОрганизации, НеобходимостьОбработки);
	ДополнительныеОбработки = Новый Массив;
	Если НеобходимостьОбработки.ОбработатьСН Тогда
		// запрос про северную надбавку
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы отменили применение северных надбавок для организации ""%1"". 
						|Размер северной надбавки будет удален для всех сотрудников организации. 
						|Предыдущие результаты расчетов сохранятся, но в дальнейшем начисление северных надбавок выполняться не будет.
						|Удалить северные надбавки?'"), ДанныеОрганизации.Наименование);
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
		Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			ДанныеОрганизации.ПрименятьСевернуюНадбавку = Истина;
			Возврат;
		Иначе
			// необходимо удалить северные надбавки
			ДополнительныеОбработки.Добавить("УдалитьСН");
		КонецЕсли;
	КонецЕсли;
	Если НеобходимостьОбработки.ОбработатьРК Тогда
		// запрос про районный коэффициент
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы отменили применение районного коэффициента для организации ""%1"". 
						|Размер районного коэффициента будет удален для всех подразделений этой организации. 
						|Предыдущие результаты расчетов сохранятся, но в дальнейшем доплата по районному коэффициенту выполняться не будет.
						|Удалить районные коэффициенты?'"), ДанныеОрганизации.Наименование);
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
		Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			ДанныеОрганизации.ПрименятьРайонныйКоэффициент = Истина;
			Возврат;
		Иначе
			// необходимо удалить районные коэффициенты
			ДополнительныеОбработки.Добавить("УдалитьРК");
		КонецЕсли;
	КонецЕсли;
	Если ДополнительныеОбработки.Количество() > 0 Тогда
		// по умолчанию - отказ от записи
		Отказ = Истина;
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Справочник.КлючевыеОперации.СохранениеИзмененийВЗарплатеОрганизации"));
		ЗарплатаКадрыВызовСервера.ОбработкаДанныхПриЗаписиОрганизации(ДанныеОрганизации.Ссылка, ДополнительныеОбработки);
		// если обработка данных удачно выполнена - запись выполняется
		Отказ = Ложь;
	КонецЕсли;
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились сведения о регистрации в органе ПФР'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании Вы изменили сведения о регистрации в органе ПФР. 
		|Если Вы исправили прежние сведения о регистрации (они были ошибочными), нажмите ""Исправлена ошибка"".
		|Если сведения о регистрации изменились с %1, нажмите ""%2""'"), 
		Формат(Форма.ИсторияРегистрацийВОрганеПФР.Период, "ДФ='к ""кв."" ггг ""г.""'"),
	ТекстКнопкиДа);
	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(Форма,"ИсторияРегистрацийВОрганеПФР", ТекстВопроса, ТекстКнопкиДа, Отказ);
	
	ДанныеОрганизации.РегистрационныйНомерПФР = Форма.ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились сведения о территориальных условиях ПФР'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании Вы изменили сведения о территориальных условиях ПФР.
		|Если Вы исправили прежние сведения о территориальных условиях (они были ошибочными), нажмите ""Исправлена ошибка"".
		|Если сведения о территориальных условиях ПФР изменились с %1, нажмите ""%2""'"), 
		Формат(Форма.ТерриториальныеУсловияПФР.Период, "ДФ='к ""кв."" ггг ""г.""'"),
	ТекстКнопкиДа);
	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(Форма,"ТерриториальныеУсловияПФР", ТекстВопроса, ТекстКнопкиДа, Отказ);
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой 
// Вызов процедуры необходимо выполнять в обработчике ОбработкаОповещения
// формы организации
Процедура ОрганизацииФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОтредактированаИстория" И (Параметр.ИмяРегистра = "ИсторияРегистрацийВОрганеПФР" Или Параметр.ИмяРегистра = "ТерриториальныеУсловияПФР") Тогда
		РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(Форма, Форма.ОрганизацияСсылка, ИмяСобытия, Параметр, Источник);
		Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ПредставлениеПериода(Форма.ИсторияРегистрацийВОрганеПФР.Период, КонецКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период), "ФП = Истина");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой 
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодПриИзменении
// формы организации
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодПриИзменении(Форма) Экспорт
	
	ВводМесяцаПриИзменении(Форма, "ИсторияРегистрацийВОрганеПФР.Период", "ИсторияРегистрацийВОрганеПФРПериодСтрокой", Форма.Модифицированность);
	Если Форма.ИсторияРегистрацийВОрганеПФР.Период <> НачалоКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период) Тогда
		Форма.ИсторияРегистрацийВОрганеПФР.Период = НачалоКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
		Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ПредставлениеПериода(Форма.ИсторияРегистрацийВОрганеПФР.Период, КонецКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период), "ФП = Истина");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой 
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодНачалоВыбора
// формы организации
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбора(Форма) Экспорт
	
	ПутьРеквизита = "ИсторияРегистрацийВОрганеПФР.Период";
	ПутьРеквизитаПредставления = "ИсторияРегистрацийВОрганеПФРПериодСтрокой";
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита);
	
	ВыбранноеЗначение = ОткрытьФормуМодально(
		"ОбщаяФорма.ВыборПериода",
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Квартал", Ложь),
		Форма);
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = НачалоКвартала(ВыбранноеЗначение);
	Значение = ВыбранноеЗначение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение);
	Представление = ПредставлениеПериода(Значение, КонецКвартала(Значение), "ФП = Истина");
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизитаПредставления, Представление);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой 
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодРегулирование
// формы организации
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодРегулирование(Форма, Направление) Экспорт
	
	ВводМесяцаРегулирование(Форма, "ИсторияРегистрацийВОрганеПФР.Период", "ИсторияРегистрацийВОрганеПФРПериодСтрокой", Направление * 3, Форма.Модифицированность);
	Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ПредставлениеПериода(Форма.ИсторияРегистрацийВОрганеПФР.Период, КонецКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период), "ФП = Истина");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбработатьВыводПоляАдреса(Элемент, ПредставлениеАдреса, Адрес) Экспорт
	
	МассивОшибок = ЗарплатаКадрыВызовСервера.ПроверитьАдрес(Адрес);
	СообщениеПроверки = "";
	Если НЕ ПустаяСтрока(Адрес) И МассивОшибок.Количество() <> 0  Тогда
		Для каждого СтруктураОшибки Из МассивОшибок Цикл
			СообщениеПроверки = СообщениеПроверки + СтруктураОшибки.Сообщение + Символы.ПС;
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщениеПроверки, 1);
		Элемент.Подсказка = СообщениеПроверки;
		Элемент.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийОшибкуТекст");
		Элемент.Гиперссылка = Истина;
	Иначе
		Элемент.Подсказка = СообщениеПроверки;
		Элемент.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветТекстаФормы");
		Элемент.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение реквизита "Организация" у переданного объекта
// 
// Параметры
//	ПроверяемыйОбъект	- проверяемое, любой объект, допускающий доступ к полям по имени
//	                      и имеющий свойство Организация
//								
//	Возвращаемое значение:
//		Булево. Истина - организация заполнена, Ложь - в противном случае. 
//			
Функция ОрганизацияЗаполнена(ПроверяемыйОбъект) Экспорт
	
	ПравилаПроверки = Новый Структура("Организация");
	
	ОрганизацияЗаполнена =  ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(ПроверяемыйОбъект, ПравилаПроверки, Ложь);

	Если НЕ ОрганизацияЗаполнена Тогда
	     Предупреждение(НСтр("ru='Для заполнения документа необходимо выбрать организацию!'"),,"Ошибка заполнения");
	 КонецЕсли;
	 Возврат ОрганизацияЗаполнена
КонецФункции

// Обработчики событий поля ввода

Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ТекстАвтоПодбора = ДанныеВыбора[0].Значение;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда
			Значение = Текст;
		Иначе
			Значение = ДанныеВыбора;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборПериода", Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь), Форма);
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Значение = ВыбранноеЗначение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	Представление = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
	
	Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции

Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = ДобавитьМесяц(Значение, Направление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	
	Модифицированность = Истина;
 	
КонецПроцедуры 


// Редактирование данных физического лица
Процедура ОткрытьФормуФизическогоЛицаДляРедактирования(ФизическоеЛицо, ИмяЭлемента) Экспорт 
	СтруктураСоответствияПолей = ПолучитьСоответствиеПолейФормыДокументаПолямФормыФизическогоЛица();
	Параметры = Новый Структура("Ключ, ТекущийЭлемент", ФизическоеЛицо, СтруктураСоответствияПолей[ИмяЭлемента]);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Параметры);
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСоответствиеПолейФормыДокументаПолямФормыФизическогоЛица()
	СтруктураСоответствия = Новый Структура();
	СтруктураСоответствия.Вставить("Фамилия", "Наименование");
	СтруктураСоответствия.Вставить("Имя", "Наименование");
	СтруктураСоответствия.Вставить("Отчество", "Наименование");
	СтруктураСоответствия.Вставить("Пол", "ФизлицоПол");
	СтруктураСоответствия.Вставить("ДатаРождения", "ФизлицоДатаРождения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "ФизическоеЛицоМестоРождения");
	СтруктураСоответствия.Вставить("Гражданство", "ГражданствоФизическихЛицСтрана");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("Телефоны", "ГруппаКонтактнаяИнформация");	
	СтруктураСоответствия.Вставить("ДокументУдостоверяющийЛичность", "ДокументыФизическихЛицВидДокумента"); 

	Возврат СтруктураСоответствия;
	
КонецФункции	

Процедура ОткрытьФормуРедактированияРегистрацииВНалоговомОргане(Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Форма.Записать() Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Форма.Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеРегистрацииВНалоговомОргане", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой"

// подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
//
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ЗарплатаКадрыКлиентСервер.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

