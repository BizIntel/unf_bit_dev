
#Область ПрограммныйИнтерфейс

Функция УстановитьУсловноеОформлениеОтмененногоЗаказа(УсловноеОформлениеКД,
		ОформляемоеПоле = Неопределено) Экспорт
	
	ЗачеркнутыйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЗаказОтменен";
	ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементУсловногоОформления.Представление	= НСтр("ru='Отмененные заказы зачеркивать'");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ВариантЗавершения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	
	Если ОформляемоеПоле <> Неопределено Тогда
		ОформляемоеПолеКД = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
		ОформляемоеПолеКД.Использование = Истина;
	КонецЕсли;
	
	Возврат ЭлементУсловногоОформления;
	
КонецФункции

Функция УстановитьУсловноеОформлениеСостоянияЗавершен(УсловноеОформлениеКД,
		СостояниеЗавершен,
		ИмяПоляСостояния = "Ссылка",
		ОформляемоеПоле = Неопределено) Экспорт
	
	ЖирныйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "СостояниеЗавершен";
	ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементУсловногоОформления.Представление	= НСтр("ru='Состояние ""Завершен"" жирным шрифтом'");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяПоляСостояния);
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= СостояниеЗавершен;
	
	Если ОформляемоеПоле <> Неопределено Тогда
		ОформляемоеПолеКД = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
		ОформляемоеПолеКД.Использование = Истина;
	КонецЕсли;
	
	Возврат ЭлементУсловногоОформления;
	
КонецФункции

Процедура УстановитьУсловноеОформлениеПоЦветамСостояний(УсловноеОформлениеКД,
		ПолноеИмяСправочникаСостояний,
		ИмяПоляСостояния = "СостояниеЗаказа",
		ОформляемоеПоле = Неопределено) Экспорт
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформлениеКД.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния" Тогда
			УдаляемыеЭлементы.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из УдаляемыеЭлементы Цикл
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	МенеджерСостояний = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяСправочникаСостояний);
	ВыборкаСостояний = МенеджерСостояний.Выбрать();
	
	Пока ВыборкаСостояний.Следующий() Цикл
		
		ЦветСостояния = ВыборкаСостояний.Цвет.Получить();
		Если ТипЗнч(ЦветСостояния) <> Тип("Цвет") Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСостояния);
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния";
		ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ЭлементУсловногоОформления.Представление	= НСтр("ru='Оформление в цвет состояния'");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяПоляСостояния);
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение	= ВыборкаСостояний.Ссылка;
		
		Если ОформляемоеПоле <> Неопределено Тогда
			ОформляемоеПолеКД = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
			ОформляемоеПолеКД.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьСостояние(ПолноеИмяСправочникаВидов, Состояние, Смещение) Экспорт
	
	МенеджерВидовЗаказов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяСправочникаВидов);
	
	ВидЗаказаОбъект = МенеджерВидовЗаказов.Основной.ПолучитьОбъект();
	СтрокаСостояния = ВидЗаказаОбъект.ПорядокСостояний.Найти(Состояние, "Состояние");
	
	Если СтрокаСостояния = Неопределено
		Или (СтрокаСостояния.НомерСтроки = 1 И Смещение < 0)
		Или (СтрокаСостояния.НомерСтроки = ВидЗаказаОбъект.ПорядокСостояний.Количество() И Смещение > 0) Тогда
		
		Возврат;
	КонецЕсли;
	
	ВидЗаказаОбъект.ПорядокСостояний.Сдвинуть(СтрокаСостояния, Смещение);
	ВидЗаказаОбъект.Записать();
	
КонецПроцедуры

Функция ЭтоСостояниеВыполненияЗаказНаряда(СостояниеЗаказНаряда, знач ВидЗаказНаряда = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
		ВидЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки
		|ИЗ
		|	Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
		|ГДЕ
		|	ВидыЗаказНарядовПорядокСостояний.Ссылка = &ВидЗаказа
		|	И ВидыЗаказНарядовПорядокСостояний.Состояние = &Состояние
		|	И ВидыЗаказНарядовПорядокСостояний.НомерСтроки >= ВидыЗаказНарядовПорядокСостояний.Ссылка.НомерСостоянияВыполнения";
	
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказНаряда);
	Запрос.УстановитьПараметр("Состояние", СостояниеЗаказНаряда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗаполнитьСписокВыбораЗавершенияЗаказа(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВариантыЗавершенияЗаказа.ЗначенияПеречисления Цикл
		СписокВыбора.Добавить(ЗначениеПеречисления.Имя, ЗначениеПеречисления.Синоним);
	КонецЦикла;
	СписокВыбора.Добавить("ПустаяСсылка", НСтр("ru='Не завершен'"));
	
КонецПроцедуры

Процедура ПередЗаписьюЗаказа(ЗаказОбъект) Экспорт
	
	Если ЗаказОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееСостояние = Неопределено;
	ОчиститьИсториюСостоянийПриИзмененииВида = Ложь;
	
	Если Не ЗаказОбъект.ЭтоНовый() Тогда
		Если ЗаказОбъект.Метаданные().Реквизиты.Найти("ВидЗаказа") = Неопределено Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОбъект.Ссылка, "СостояниеЗаказа");
		Иначе
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказОбъект.Ссылка, "СостояниеЗаказа, ВидЗаказа");
			ПредыдущееСостояние = ЗначенияРеквизитов.СостояниеЗаказа;
			ОчиститьИсториюСостоянийПриИзмененииВида = ЗначенияРеквизитов.ВидЗаказа <> ЗаказОбъект.ВидЗаказа;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеИсторииСостояния = Новый Структура;
	ДанныеИсторииСостояния.Вставить("ЗаписыватьСостояниеВИсторию", ЗаказОбъект.ЭтоНовый() Или ЗаказОбъект.СостояниеЗаказа <> ПредыдущееСостояние Или ОчиститьИсториюСостоянийПриИзмененииВида);
	ДанныеИсторииСостояния.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДанныеИсторииСостояния.Вставить("ОчиститьИсториюСостоянийПриИзмененииВида", ОчиститьИсториюСостоянийПриИзмененииВида);
	
	ЗаказОбъект.ДополнительныеСвойства.Вставить("ДанныеИсторииСостояния", ДанныеИсторииСостояния);
	
КонецПроцедуры

Процедура ПриЗаписиЗаказа(ЗаказОбъект) Экспорт
	
	Если ЗаказОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаказОбъект.ДополнительныеСвойства.Свойство("ДанныеИсторииСостояния") Тогда
		
		Если ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ОчиститьИсториюСостоянийПриИзмененииВида Тогда
			
			СостоянияЗаказов.ОчиститьВсюИсториюСостоянийПоЗаказу(ЗаказОбъект.Ссылка);
		Иначе
			
			Если ЗначениеЗаполнено(ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ПредыдущееСостояние) Тогда
				СостоянияЗаказов.ПроверитьОчиститьИсториюСостояний(
					ЗаказОбъект.Ссылка,
					ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ПредыдущееСостояние,
					ЗаказОбъект.СостояниеЗаказа,
					?(ЗаказОбъект.Метаданные().Реквизиты.Найти("ВидЗаказа") = Неопределено, Неопределено, ЗаказОбъект.ВидЗаказа)
				);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ЗаписыватьСостояниеВИсторию Тогда
			
			СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказОбъект.Ссылка, ЗаказОбъект.СостояниеЗаказа);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает записи истории состояний заказа, если у нового состояния порядок меньше чем у предыдущего
//
Процедура ПроверитьОчиститьИсториюСостояний(ЗаказСсылка, ПредыдущееСостояние, ТекущееСостояние, ВидЗаказа = Неопределено) Экспорт
	
	ПорядокТекущего = ПолучитьПорядокСостояния(ТекущееСостояние, ВидЗаказа);
	ПорядокПредыдущего = ПолучитьПорядокСостояния(ПредыдущееСостояние, ВидЗаказа);
	Если ПорядокПредыдущего = Неопределено Или ПорядокТекущего >= ПорядокПредыдущего Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ВидЗаказа = Неопределено Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияЗаказовПоставщикам.Ссылка КАК Состояние
			|ПОМЕСТИТЬ втСостоянияКОчистке
			|ИЗ
			|	Справочник.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
			|ГДЕ
			|	СостоянияЗаказовПоставщикам.РеквизитДопУпорядочивания >= &ПорядокТекущего
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияСостоянийЗаказов.Период КАК Период,
			|	ИсторияСостоянийЗаказов.Заказ КАК Заказ,
			|	ИсторияСостоянийЗаказов.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.ИсторияСостоянийЗаказов КАК ИсторияСостоянийЗаказов
			|ГДЕ
			|	ИсторияСостоянийЗаказов.Заказ = &Заказ
			|	И ИсторияСостоянийЗаказов.Состояние В
			|			(ВЫБРАТЬ
			|				втСостоянияКОчистке.Состояние
			|			ИЗ
			|				втСостоянияКОчистке)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостоянияЗаказовПоставщикам", ТекущееСостояние.Метаданные().Имя);
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыЗаказовПокупателейПорядокСостояний.Состояние
			|ПОМЕСТИТЬ втСостоянияКОчистке
			|ИЗ
			|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
			|ГДЕ
			|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки >= &ПорядокТекущего
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияСостоянийЗаказов.Период КАК Период,
			|	ИсторияСостоянийЗаказов.Заказ КАК Заказ,
			|	ИсторияСостоянийЗаказов.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.ИсторияСостоянийЗаказов КАК ИсторияСостоянийЗаказов
			|ГДЕ
			|	ИсторияСостоянийЗаказов.Заказ = &Заказ
			|	И ИсторияСостоянийЗаказов.Состояние В
			|			(ВЫБРАТЬ
			|				втСостоянияКОчистке.Состояние
			|			ИЗ
			|				втСостоянияКОчистке)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыЗаказовПокупателей", ВидЗаказа.Метаданные().Имя);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	Запрос.УстановитьПараметр("ПорядокТекущего", ПорядокТекущего);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийЗаказов.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВсюИсториюСостоянийПоЗаказу(ЗаказСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.ИсторияСостоянийЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заказ.Установить(ЗаказСсылка);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура СохранитьСостояниеЗаказаВИстории(ЗаказСсылка, СостояниеЗаказа, Период = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийЗаказов.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(Период) Тогда
		МенеджерЗаписи.Период		= Период;
	Иначе
		МенеджерЗаписи.Период		= ТекущаяДатаСеанса();
	КонецЕсли;
	МенеджерЗаписи.Заказ		= ЗаказСсылка;
	МенеджерЗаписи.Состояние	= СостояниеЗаказа;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Функция возвращает порядок состояния
//
// Параметры:
//  Состояние	 - СправочникСсылка.СостоянияЗаказовПокупателей, СправочникСсылка.СостоянияЗаказНарядов, СправочникСсылка.СостоянияЗаказовПоставщикам, СправочникСсылка.СостоянияЗаказовНаПроизводство - состояние для которого получается порядок
//  ВидЗаказа	 - СправочникСсылка.ВидыЗаказовПокупателей, СправочникСсылка.ВидыЗаказНарядов	 - параметр является обязательным для состояний заказов покупателей и заказ-нарядов
// 
// Возвращаемое значение:
//  число - порядок состояния
//
Функция ПолучитьПорядокСостояния(Состояние, ВидЗаказа = Неопределено) Экспорт
	
	Если ВидЗаказа = Неопределено Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Состояние, "РеквизитДопУпорядочивания");
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки КАК ПорядокСостояния
			|ИЗ
			|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
			|ГДЕ
			|	ВидыЗаказовПокупателейПорядокСостояний.Ссылка = &ВидЗаказа
			|	И ВидыЗаказовПокупателейПорядокСостояний.Состояние = &Состояние";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыЗаказовПокупателей", ВидЗаказа.Метаданные().Имя);
		Запрос.УстановитьПараметр("Состояние", Состояние);
		Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПорядокСостояния;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСостояниеЗаказаПередЗавершением(ЗаказСсылка, СостояниеЗавершен) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСостоянийЗаказовСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийЗаказов.СрезПоследних(
		|			,
		|			Заказ = &Заказ
		|				И Состояние <> &СостояниеЗавершен) КАК ИсторияСостоянийЗаказовСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	Запрос.УстановитьПараметр("СостояниеЗавершен", СостояниеЗавершен);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура обработчик подписки "ОчиститьИсториюСостоянияЗаказов". Очищает вспомогательные данные по удаляемому состоянию.
//
Процедура ОчиститьИсториюСостоянияЗаказовПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ИсторияСостоянийЗаказов.УдалитьИнформациюОСостоянииЗаказов(Источник.Ссылка);
	
	Если Константы.УдалитьСостояниеВРаботеЗаказовНаПроизводство.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВРаботеЗаказовНаПроизводство.Установить(Справочники.СостоянияЗаказовНаПроизводство.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВРаботеЗаказовПокупателей.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВРаботеЗаказовПокупателей.Установить(Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВРаботеЗаказовПоставщикам.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВРаботеЗаказовПоставщикам.Установить(Справочники.СостоянияЗаказовПоставщикам.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВыполненЗаказовНаПроизводство.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВыполненЗаказовНаПроизводство.Установить(Справочники.СостоянияЗаказовНаПроизводство.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВыполненЗаказовПокупателей.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВыполненЗаказовПокупателей.Установить(Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВыполненЗаказовПоставщикам.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВыполненЗаказовПоставщикам.Установить(Справочники.СостоянияЗаказовПоставщикам.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
