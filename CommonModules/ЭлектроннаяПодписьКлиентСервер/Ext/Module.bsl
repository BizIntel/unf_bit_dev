////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает представление сертификата в справочнике, формируемое
// - либо из фамилии, имени, организации, должности, срока действия.
// Л либо из общего имени и срока действия (если фамилия и имя не определены).
//
// Параметры:
//   Сертификат   - СертификатКриптографии - Сертификат криптографии.
//   Отчество     - Булево - включать отчество в представление.
//   СрокДействия - Булево - включать срок действия в представление.
//
// Возвращаемое значение:
//  Строка - представление сертификата в справочнике.
//
Функция ПредставлениеСертификата(Сертификат, Отчество = Ложь, СрокДействия = Истина) Экспорт
	
	Возврат ПредставлениеСубъекта(Сертификат, Отчество) + ", "
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), Формат(Сертификат.ДатаОкончания, "ДФ=MM.yyyy"));
	
КонецФункции

// Возвращает представление субъекта сертификата (КомуВыдан).
//
// Параметры:
//   Сертификат - СертификатКриптографии - Сертификат криптографии.
//
//   Отчество - Булево - включать отчество в представление.
//
// Возвращаемое значение:
//   Строка   - представление субъекта в формате "Фамилия Имя, Организация, Подразделение, Должность".
//              Если ФИО не удалось определить, тогда оно заменяется на ОбщееИмя.
//              Организация, Подразделение и Должность могут отсутствовать, если не указаны или
//              их не удалось определить.
//
Функция ПредставлениеСубъекта(Сертификат, Отчество = Истина) Экспорт
	
	Субъект = СвойстваСубъектаСертификата(Сертификат);
	
	Представление = "";
	
	Если ЗначениеЗаполнено(Субъект.Фамилия)
	   И ЗначениеЗаполнено(Субъект.Имя) Тогда
		
		Представление = Субъект.Фамилия + " " + Субъект.Имя;
		
	ИначеЕсли ЗначениеЗаполнено(Субъект.Фамилия) Тогда
		Представление = Субъект.Фамилия;
		
	ИначеЕсли ЗначениеЗаполнено(Субъект.Имя) Тогда
		Представление = Субъект.Имя;
	КонецЕсли;
	
	Если Отчество И ЗначениеЗаполнено(Субъект.Отчество) Тогда
		Представление = Представление + " " + Субъект.Отчество;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Если ЗначениеЗаполнено(Субъект.Организация) Тогда
			Представление = Представление + ", " + Субъект.Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(Субъект.Подразделение) Тогда
			Представление = Представление + ", " + Субъект.Подразделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Субъект.Должность) Тогда
			Представление = Представление + ", " + Субъект.Должность;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Субъект.ОбщееИмя) Тогда
		Представление = Субъект.ОбщееИмя;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает представление издателя сертификата (КемВыдан).
//
// Параметры:
//   Сертификат - СертификатКриптографии - Сертификат криптографии.
//
// Возвращаемое значение:
//   Строка - представление издателя в формате "ОбщееИмя, Организация, Подразделение",
//            Организация и Подразделение могут отсутствовать, если не указаны.
//
Функция ПредставлениеИздателя(Сертификат) Экспорт
	
	Издатель = СвойстваИздателяСертификата(Сертификат);
	
	Представление = "";
	
	Если ЗначениеЗаполнено(Издатель.ОбщееИмя) Тогда
		Представление = Издатель.ОбщееИмя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Издатель.ОбщееИмя)
	   И ЗначениеЗаполнено(Издатель.Организация)
	   И СтрНайти(Издатель.ОбщееИмя, Издатель.Организация) = 0 Тогда
		
		Представление = Издатель.ОбщееИмя + ", " + Издатель.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Издатель.Подразделение) Тогда
		Представление = Представление + ", " + Издатель.Подразделение;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполняет структуру полями сертификата.
//
// Параметры:
//   Сертификат - СертификатКриптографии - Сертификат криптографии.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция ЗаполнитьСтруктуруСертификата(Сертификат) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Отпечаток",      Base64Строка(Сертификат.Отпечаток));
	Свойства.Вставить("Представление",  ПредставлениеСертификата(Сертификат));
	Свойства.Вставить("КомуВыдан",      ПредставлениеСубъекта(Сертификат));
	Свойства.Вставить("КемВыдан",       ПредставлениеИздателя(Сертификат));
	Свойства.Вставить("ДействителенДо", Сертификат.ДатаОкончания);
	Свойства.Вставить("Назначение",     ПолучитьНазначение(Сертификат));
	
	Возврат Свойства;
	
КонецФункции

// Формирует структуру свойств для уточнения данных конверта SOAP и
// алгоритмов подписания и хеширования.
// 
// Возвращаемое значение:
// Структура - со свойствами:
//   * XPathSignedInfo         - Строка - например, "(//. | //@* | //namespace::*)[ancestor-or-self::*[local-name()='SignedInfo']]".
//   * XPathПодписываемыйТег   - Строка - например, "(//. | //@* | //namespace::*)[ancestor-or-self::soap:Body]".
//   * ИмяАлгоритмаПодписи     - Строка - например, "GOST R 34.10-2001".
//   * OIDАлгоритмаПодписи     - Строка - например, "1.2.643.2.2.3" - ГОСТ R 34.11/34.10-2001.
//   * ИмяАлгоритмаХеширования - Строка - например, "GOST R 34.11-94".
//   * OIDАлгоритмаХеширования - Строка - например, "1.2.643.2.2.9" - ГОСТ R 34.11-94.
//
Функция ПараметрыXMLDSig() Экспорт
	
	ДанныеАлгоритмаПодписания = Новый Структура;
	
	ДанныеАлгоритмаПодписания.Вставить("XPathSignedInfo",       "");
	ДанныеАлгоритмаПодписания.Вставить("XPathПодписываемыйТег", "");
	
	ДанныеАлгоритмаПодписания.Вставить("ИмяАлгоритмаПодписи", "");
	ДанныеАлгоритмаПодписания.Вставить("OIDАлгоритмаПодписи", "");
	
	ДанныеАлгоритмаПодписания.Вставить("ИмяАлгоритмаХеширования", "");
	ДанныеАлгоритмаПодписания.Вставить("OIDАлгоритмаХеширования", "");
	
	Возврат ДанныеАлгоритмаПодписания;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру, содержащую различные общие настройки.
//
// Возвращаемое значение:
//   См. ЭлектроннаяПодпись.ОбщиеНастройки().
//
// См. также:
//   ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования - место определения данных параметров и
//   их текстовые описания.
//
Функция ОбщиеНастройки() Экспорт
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЭлектроннаяПодпись.ОбщиеНастройки();
	#Иначе
		Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭлектроннаяПодпись.ОбщиеНастройки;
	#КонецЕсли
КонецФункции

// Возвращает структуру, содержащую различные персональные настройки.
//
// Возвращаемое значение:
//   Структура - Персональные настройки для работы с электронной подписью.
//       * ДействияПриСохраненииСЭП - Строка - Что делать при сохранении файлов с электронной подписью:
//           ** "Спрашивать" - Показывать диалог выбора подписей для сохранения.
//           ** "СохранятьВсеПодписи" - Всегда все подписи.
//       * ПутиКПрограммамЭлектроннойПодписиИШифрования - Соответствие - где:
//           ** Ключ     - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа.
//           ** Значение - Строка - путь к программе на компьютере пользователя.
//       * РасширениеДляФайловПодписи - Строка - Расширение для файлов ЭП.
//       * РасширениеДляЗашифрованныхФайлов - Строка - Расширение для зашифрованных файлов.
//
// См. также:
//   ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования - место ввода данных параметров и
//   их пользовательские представления.
//
Функция ПерсональныеНастройки() Экспорт
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЭлектроннаяПодпись.ПерсональныеНастройки();
	#Иначе
		Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭлектроннаяПодпись.ПерсональныеНастройки;
	#КонецЕсли
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает свойства субъекта сертификата криптографии с учетом их состава (ЮЛ,ИП,ФЛ).
//
// Параметры:
//   Сертификат - СертификатКриптографии - для которого нужно вернуть свойства субъекта.
//
// Возвращаемое значение:
//  Структура - возвращаемое значение, со свойствами:
//     * ОбщееИмя         - Строка(64) - извлекается из поля CN.
//                          ЮЛ: В зависимости от типа конечного владельца СКПЭП
//                              - наименование организации;
//                              - название автоматизированной системы;
//                              - другое отображаемое имя по требованиям информационной системы.
//                          ФЛ: ФИО.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Страна           - Строка(2) - извлекается из поля C - двухсимвольный код страны
//                          согласно ГОСТ 7.67-2003 (ИСО 3166-1:1997).
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Регион           - Строка(128) - извлекается из поля S - наименование субъекта РФ.
//                          ЮЛ: По адресу местонахождения.
//                          ФЛ: По адресу регистрации.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * НаселенныйПункт  - Строка(128) - извлекается из поля L - наименование населенного пункта.
//                          ЮЛ: По адресу местонахождения.
//                          ФЛ: По адресу регистрации.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Улица            - Строка(128) - извлекается из поля Street - наименование улицы, дома, офиса.
//                          ЮЛ: По адресу местонахождения.
//                          ФЛ: По адресу регистрации.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Организация      - Строка(64) - извлекается из поля O.
//                          ЮЛ: Полное или сокращенное наименование организации.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Подразделение    - Строка(64) - извлекается из поля OU.
//                          ЮЛ: В случае выпуска СКПЭП на должностное лицо - подразделение организации.
//                              Подразделение - это территориальная структурная единица крупной организации,
//                              которое обычно не заполняется в сертификате.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Должность        - Строка(64) - извлекается из поля T.
//                          ЮЛ: В случае выпуска СКПЭП на должностное лицо - его должность.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ЭлектроннаяПочта - Строка(128) - извлекается из поля E - адрес электронной почты.
//                          ЮЛ: адрес электронной почты должностного лица.
//                          ФЛ: адрес электронной почты физического лица.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ОГРН             - Строка(13) - извлекается из поля OGRN.
//                          ЮЛ: ОГРН организации.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ОГРНИП           - Строка(15) - извлекается из поля OGRNIP.
//                          ИП: ОГРН индивидуального предпринимателя.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * СНИЛС            - Строка(11) - извлекается из поля SNILS.
//                          ФЛ: СНИЛС
//                          ЮЛ: Не обязательно, в случае выпуска СКПЭП на должностное лицо - его СНИЛС.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ИНН              - Строка(12) - извлекается из поля INN.
//                          ФЛ: ИНН.
//                          ИП: ИНН.
//                          ЮЛ: Не обязательно, но может быть заполнен для целей взаимодействия с ФНС.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Фамилия          - Строка(64) - извлекается из поля SN, если заполнено.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Имя              - Строка(64) - извлекается из поля GN, если заполнено.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Отчество         - Строка(64) - извлекается из поля GN, если заполнено.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
Функция СвойстваСубъектаСертификата(Сертификат) Экспорт
	
	Субъект = Сертификат.Субъект;
	
	Свойства = Новый Структура;
	Свойства.Вставить("ОбщееИмя");
	Свойства.Вставить("Страна");
	Свойства.Вставить("Регион");
	Свойства.Вставить("НаселенныйПункт");
	Свойства.Вставить("Улица");
	Свойства.Вставить("Организация");
	Свойства.Вставить("Подразделение");
	Свойства.Вставить("Должность");
	Свойства.Вставить("ЭлектроннаяПочта");
	Свойства.Вставить("ОГРН");
	Свойства.Вставить("ОГРНИП");
	Свойства.Вставить("СНИЛС");
	Свойства.Вставить("ИНН");
	Свойства.Вставить("Фамилия");
	Свойства.Вставить("Имя");
	Свойства.Вставить("Отчество");
	
	Если Субъект.Свойство("CN") Тогда
		Свойства.ОбщееИмя = ПодготовитьСтроку(Субъект.CN);
	КонецЕсли;
	
	Если Субъект.Свойство("C") Тогда
		Свойства.Страна = ПодготовитьСтроку(Субъект.C);
	КонецЕсли;
	
	Если Субъект.Свойство("ST") Тогда
		Свойства.Регион = ПодготовитьСтроку(Субъект.ST);
	КонецЕсли;
	
	Если Субъект.Свойство("L") Тогда
		Свойства.НаселенныйПункт = ПодготовитьСтроку(Субъект.L);
	КонецЕсли;
	
	Если Субъект.Свойство("Street") Тогда
		Свойства.Улица = ПодготовитьСтроку(Субъект.Street);
	КонецЕсли;
	
	Если Субъект.Свойство("O") Тогда
		Свойства.Организация = ПодготовитьСтроку(Субъект.O);
	КонецЕсли;
	
	Если Субъект.Свойство("OU") Тогда
		Свойства.Подразделение = ПодготовитьСтроку(Субъект.OU);
	КонецЕсли;
	
	Если Субъект.Свойство("E") Тогда
		Свойства.ЭлектроннаяПочта = ПодготовитьСтроку(Субъект.E);
	КонецЕсли;
	
	Если Субъект.Свойство("OGRN")Тогда
		Свойства.ОГРН = ПодготовитьСтроку(Субъект.OGRN);
		
	ИначеЕсли Субъект.Свойство("OID1_2_643_100_1") Тогда
		Свойства.ОГРН = ПодготовитьСтроку(Субъект.OID1_2_643_100_1);
	КонецЕсли;
	
	Если Субъект.Свойство("OGRNIP") Тогда
		Свойства.ОГРНИП = ПодготовитьСтроку(Субъект.OGRNIP);
		
	ИначеЕсли Субъект.Свойство("OID1_2_643_100_5") Тогда
		Свойства.ОГРНИП = ПодготовитьСтроку(Субъект.OID1_2_643_100_5);
	КонецЕсли;
	
	Если Субъект.Свойство("SNILS") Тогда
		Свойства.СНИЛС = ПодготовитьСтроку(Субъект.SNILS);
		
	ИначеЕсли Субъект.Свойство("OID1_2_643_100_3") Тогда
		Свойства.СНИЛС = ПодготовитьСтроку(Субъект.OID1_2_643_100_3);
	КонецЕсли;
	
	Если Субъект.Свойство("INN") Тогда
		Свойства.ИНН = ПодготовитьСтроку(Субъект.INN);
		
	ИначеЕсли Субъект.Свойство("OID1_2_643_3_131_1_1")Тогда
		Свойства.ИНН = ПодготовитьСтроку(Субъект.OID1_2_643_3_131_1_1);
	КонецЕсли;
	
	Если Субъект.Свойство("SN") Тогда // Наличие фамилии (обычно для должностного лица).
		
		// Извлечение ФИО из поля SN и GN.
		Свойства.Фамилия = ПодготовитьСтроку(Субъект.SN);
		
		Если Субъект.Свойство("GN") Тогда
			GivenName = ПодготовитьСтроку(Субъект.GN);
			Позиция = СтрНайти(GivenName, " ");
			Если Позиция = 0 Тогда
				Свойства.Имя = GivenName;
			Иначе
				Свойства.Имя = Лев(GivenName, Позиция - 1);
				Свойства.Отчество = ПодготовитьСтроку(Сред(GivenName, Позиция + 1));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Субъект.Свойство("OGRNIP")            // Признак индивидуального предпринимателя.
	      Или Субъект.Свойство("OID1_2_643_100_5")  // Признак индивидуального предпринимателя.
	      Или Субъект.Свойство("T")                 // Признак должностного лица.
	      Или Субъект.Свойство("OID2_5_4_12")       // Признак должностного лица.
	      Или Субъект.Свойство("SNILS")                                     // Признак физического лица.
	      Или Субъект.Свойство("OID1_2_643_100_3")                          // Признак физического лица.
	      Или ЭтоИННФизЛица(Субъект.Свойство("INN"))                        // Признак физического лица.
	      Или ЭтоИННФизЛица(Субъект.Свойство("OID1_2_643_3_131_1_1")) Тогда // Признак физического лица.
		
		Если Свойства.ОбщееИмя <> Свойства.Организация
		   И Не (Субъект.Свойство("T")           И Свойства.ОбщееИмя = ПодготовитьСтроку(Субъект.T))
		   И Не (Субъект.Свойство("OID2_5_4_12") И Свойства.ОбщееИмя = ПодготовитьСтроку(Субъект.OID2_5_4_12)) Тогда
			
			// Извлечение ФИО из поля CN.
			Массив = СтрРазделить(Свойства.ОбщееИмя, " ", Ложь);
			
			Если Массив.Количество() < 4 Тогда
				Если Массив.Количество() > 0 Тогда
					Свойства.Фамилия = СокрЛП(Массив[0]);
				КонецЕсли;
				Если Массив.Количество() > 1 Тогда
					Свойства.Имя = СокрЛП(Массив[1]);
				КонецЕсли;
				Если Массив.Количество() > 2 Тогда
					Свойства.Отчество = СокрЛП(Массив[2]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Свойства.Фамилия)
	 Или ЗначениеЗаполнено(Свойства.Имя) Тогда
		
		Если Субъект.Свойство("T") Тогда
			Свойства.Должность = ПодготовитьСтроку(Субъект.T);
			
		ИначеЕсли Субъект.Свойство("OID2_5_4_12") Тогда
			Свойства.Должность = ПодготовитьСтроку(Субъект.OID2_5_4_12);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Возвращает свойства издателя сертификата криптографии.
//
// Параметры:
//   Сертификат - СертификатКриптографии - для которого нужно вернуть свойства издателя.
//
// Возвращаемое значение:
//  Структура - возвращаемое значение, со свойствами:
//     * ОбщееИмя         - Строка(64) - извлекается из поля CN - псевдоним удостоверяющего центра.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Страна           - Строка(2) - извлекается из поля C - двухсимвольный код страны
//                          согласно ГОСТ 7.67-2003 (ИСО 3166-1:1997).
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Регион           - Строка(128) - извлекается из поля S - наименование субъекта РФ
//                          по адресу местонахождения ПАК УЦ.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * НаселенныйПункт  - Строка(128) - извлекается из поля L - наименование населенного пункта
//                          по адресу местонахождения ПАК УЦ.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Улица            - Строка(128) - извлекается из поля Street - наименование улицы, дома, офиса
//                          по адресу местонахождения ПАК УЦ.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Организация      - Строка(64) - извлекается из поля O
//                          полное или сокращенное наименование организации.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * Подразделение    - Строка(64) - извлекается из поля OU подразделение организации.
//                            Подразделение - это территориальная структурная единица крупной организации,
//                            которое обычно не заполняется в сертификате.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ЭлектроннаяПочта - Строка(128) - извлекается из поля E - адрес электронной почты удостоверяющего центра.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ОГРН             - Строка(13) - извлекается из поля OGRN- ОГРН организации удостоверяющего центра.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
//     * ИНН              - Строка(12) - извлекается из поля INN - ИНН организации удостоверяющего центра.
//                        - Неопределено - нужное свойство сертификата не найдено.
//
Функция СвойстваИздателяСертификата(Сертификат) Экспорт
	
	Издатель = Сертификат.Издатель;
	
	Свойства = Новый Структура;
	Свойства.Вставить("ОбщееИмя");
	Свойства.Вставить("Страна");
	Свойства.Вставить("Регион");
	Свойства.Вставить("НаселенныйПункт");
	Свойства.Вставить("Улица");
	Свойства.Вставить("Организация");
	Свойства.Вставить("Подразделение");
	Свойства.Вставить("ЭлектроннаяПочта");
	Свойства.Вставить("ОГРН");
	Свойства.Вставить("ИНН");
	
	Если Издатель.Свойство("CN") Тогда
		Свойства.ОбщееИмя = ПодготовитьСтроку(Издатель.CN);
	КонецЕсли;
	
	Если Издатель.Свойство("C") Тогда
		Свойства.Страна = ПодготовитьСтроку(Издатель.C);
	КонецЕсли;
	
	Если Издатель.Свойство("ST") Тогда
		Свойства.Регион = ПодготовитьСтроку(Издатель.ST);
	КонецЕсли;
	
	Если Издатель.Свойство("L") Тогда
		Свойства.НаселенныйПункт = ПодготовитьСтроку(Издатель.L);
	КонецЕсли;
	
	Если Издатель.Свойство("Street") Тогда
		Свойства.Улица = ПодготовитьСтроку(Издатель.Street);
	КонецЕсли;
	
	Если Издатель.Свойство("O") Тогда
		Свойства.Организация = ПодготовитьСтроку(Издатель.O);
	КонецЕсли;
	
	Если Издатель.Свойство("OU") Тогда
		Свойства.Подразделение = ПодготовитьСтроку(Издатель.OU);
	КонецЕсли;
	
	Если Издатель.Свойство("E") Тогда
		Свойства.ЭлектроннаяПочта = ПодготовитьСтроку(Издатель.E);
	КонецЕсли;
	
	Если Издатель.Свойство("OGRN") Тогда
		Свойства.ОГРН = ПодготовитьСтроку(Издатель.OGRN);
		
	ИначеЕсли Издатель.Свойство("OID1_2_643_100_1") Тогда
		Свойства.ОГРН = ПодготовитьСтроку(Издатель.OID1_2_643_100_1);
	КонецЕсли;
	
	Если Издатель.Свойство("INN") Тогда
		Свойства.ИНН = ПодготовитьСтроку(Издатель.INN);
		
	ИначеЕсли Издатель.Свойство("OID1_2_643_3_131_1_1")Тогда
		Свойства.ИНН = ПодготовитьСтроку(Издатель.OID1_2_643_3_131_1_1);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Заполняет таблицу описания сертификата из четырех полей: КомуВыдан, КемВыдан, ДействуетДо, Назначение.
Функция ЗаполнитьОписаниеДанныхСертификата(Таблица, Сертификат) Экспорт
	
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Или ТипЗнч(Сертификат) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураСертификата = ЗаполнитьСтруктуруСертификата(Сертификат);
		ДляПодписи    = Сертификат.ИспользоватьДляПодписи;
		ДляШифрования = Сертификат.ИспользоватьДляШифрования;
		
	Иначе // Это ДанныеФормыСтруктура объекта справочника.
		СтруктураСертификата = Сертификат;
		ДляПодписи           = Сертификат.Подписание;
		ДляШифрования        = Сертификат.Шифрование;
	КонецЕсли;
	
	Если ДляПодписи И ДляШифрования Тогда
		Назначение = НСтр("ru = 'Подписание данных, Шифрование данных'");
		
	ИначеЕсли ДляПодписи Тогда
		Назначение = НСтр("ru = 'Подписание данных'");
	Иначе
		Назначение = НСтр("ru = 'Шифрование данных'");
	КонецЕсли;
	
	Таблица.Очистить();
	Строка = Таблица.Добавить();
	Строка.Свойство = НСтр("ru = 'Кому выдан:'");
	Строка.Значение = СокрЛП(СтруктураСертификата.КомуВыдан);
	
	Строка = Таблица.Добавить();
	Строка.Свойство = НСтр("ru = 'Кем выдан:'");
	Строка.Значение = СокрЛП(СтруктураСертификата.КемВыдан);
	
	Строка = Таблица.Добавить();
	Строка.Свойство = НСтр("ru = 'Действителен до:'");
	Строка.Значение = Формат(СтруктураСертификата.ДействителенДо, "ДЛФ=D");
	
	Строка = Таблица.Добавить();
	Строка.Свойство = НСтр("ru = 'Назначение:'");
	Строка.Значение = Назначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Получает назначение сертификата.
//
// Параметры:
//   Сертификат - СертификатКриптографии - сертификат назначение которого нужно получить.
//
Функция ПолучитьНазначение(Сертификат)
	
	Если Не Сертификат.РасширенныеСвойства.Свойство("EKU") Тогда
		Возврат "";
	КонецЕсли;
	
	ФиксированныйМассивСвойств = Сертификат.РасширенныеСвойства.EKU;
	
	Назначение = "";
	
	Для Индекс = 0 По ФиксированныйМассивСвойств.Количество() - 1 Цикл
		Назначение = Назначение + ФиксированныйМассивСвойств.Получить(Индекс);
		Назначение = Назначение + Символы.ПС;
	КонецЦикла;
	
	Возврат ПодготовитьСтроку(Назначение);
	
КонецФункции

Функция ЭтоИННФизЛица(ИНН)
	
	Если СтрДлина(ИНН) <> 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерСимвола = 1 По 12 Цикл
		Если СтрНайти("0123456789", Сред(ИНН,НомерСимвола,1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрНачинаетсяС(ИНН, "00") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПодготовитьСтроку(СтрокаИзСертификата)
	
	Возврат СокрЛП(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаИзСертификата));
	
КонецФункции

#КонецОбласти
