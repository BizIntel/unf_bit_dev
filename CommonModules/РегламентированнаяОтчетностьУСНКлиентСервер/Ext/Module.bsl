#Область ПрограммныйИнтерфейс


// Возвращает фиксированное соответствие задач календаря отчетности
// именам объектов регламентированной отчетности
//
// Возвращает:
//		ФиксированноеСоответствие
//			Ключ: СправочникСсылка.ЗадачиКалендаряОтчетности
//			Значение: Строка
//
Функция ПолучитьСоответствиеЗадачОтчетностиИменамОтчетов() Экспорт
	
	СоответствиеОтчетов = Новый Соответствие;
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН"), "РегламентированныйОтчетУСН");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД"), "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность"), "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР"), "РегламентированныйОтчетРСВ1");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС"), "РегламентированныйОтчет4ФСС");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель"), "РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ"), "РегламентированныйОтчет6НДФЛ");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Декларация12"), "РегламентированныйОтчетАлкоПриложение12");
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеОтчетов);
	
КонецФункции

// Формирует назначения платежей по УСН
//
Функция ПолучитьТекстНазначенияПлатежаНалогаПоДате(Дата, ВидВзаиморасчетов, РегНомерПФР="", РегНомерФСС="") Экспорт
	
	Если ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.АвансовыйПлатежПриУСН")
		ИЛИ ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕдиныйНалогПриУСН") Тогда
		
	
		ПериодПлатежа = "";
		
		Если Месяц(Дата) = 12 Тогда
			ПериодПлатежа = Формат(Год(Дата),"ЧГ=") + " год";
		ИначеЕсли Месяц(Дата) = 3 Тогда
			ПериодПлатежа = "3 месяца " + Формат(Год(Дата), "ЧГ=") + " года";
		ИначеЕсли Месяц(Дата) = 6 Тогда
			ПериодПлатежа = "I полугодие " + Формат(Год(Дата), "ЧГ=") + " года";
		Иначе
			ПериодПлатежа = "9 месяцев " + Формат(Год(Дата), "ЧГ=") + " года";
		КонецЕсли;
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Уплата единого налога за %1. Без НДС.",
			ПериодПлатежа);
			
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕНВД") Тогда
		
		ПериодПлатежа = Формат(Дата,"ДФ='q ""квартал"" yyyy ""г.""'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Уплата ЕНВД за %1 Без НДС.",
			ПериодПлатежа);
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ТорговыйСбор") Тогда
		
		ПериодПлатежа = Формат(Дата,"ДФ='q ""квартал"" yyyy ""г.""'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Уплата торгового сбора за %1 Без НДС.",
			ПериодПлатежа);
		
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительная") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы в виде фиксированного платежа на накопительную часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховая") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы в виде фиксированного платежа на страховую часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСвыше300тр") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы в виде фиксированного платежа на страховую часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ТФОМС") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Страховые взносы на ОМС - ТФОМС за %2. Регистрационный номер в ПФР: %1. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФФОМС") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Страховые взносы на ОМС - ФФОМС за %2. Регистрационный номер в ПФР: %1. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительнаяСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы на ОПС на накопительную часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховаяСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы на ОПС на страховую часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.НДФЛСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Уплата НДФЛ на сотрудников за %2. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФОМССотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Страховые взносы на ОМС - ФФОМС за %2. Рег. номер в ПФР: %1. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФСССотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ФСС: %1. Страховые взносы в связи с временной нетрудоспособностью и материнством за %2. НДС не облагается.",
			РегНомерФСС,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФССТравматизмСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег.номер в ФСС:%1. Страховые взносы в связи на ОСС от несчастных сл. на производстве и проф. заболеваний за %2. Без НДС.",
			РегНомерФСС,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	КонецЕсли;
	
КонецФункции


Процедура УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Организация) Экспорт
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ", "+ Организация;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Патентная система налогообложения

// Возвращает налоговую ставку по патентной системе налогообложения
//
Функция НалоговаяСтавкаПоПатентнойСистеме(Знач Период = Неопределено) Экспорт 
	
	Возврат 6/100;
	
КонецФункции


// Рассчитывает потенциально возможный доход по патенту
//
// Параметры:
//  ПотенциальноВозможныйГодовойДоход - Число - потенциально возможный к получению годовой доход
//  ДатаНачала - Дата - дата начала действия патента
//  ДатаОкончания - Дата - дата окончания действия патента
//
Функция РассчитатьПотенциальноВозможныйДоход(ПотенциальноВозможныйГодовойДоход, ДатаНачала, ДатаОкончания) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Или НЕ ЗначениеЗаполнено(ДатаОкончания) Или Год(ДатаНачала) <> Год(ДатаОкончания) Тогда
		Возврат ПотенциальноВозможныйГодовойДоход;
	КонецЕсли;
	
	ДействуетСНачалаМесяца = (НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала));
	ДействуетДоКонцаМесяца = (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания));
	ДействуетДоКонцаГода   = (КонецДня(ДатаОкончания) = КонецГода(ДатаОкончания));
	
	Если (ДействуетСНачалаМесяца И ДействуетДоКонцаМесяца) Или ДействуетДоКонцаГода Тогда
		
		ЧислоМесяцев = Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 1;
		ПотенциальноВозможныйДоход = ПотенциальноВозможныйГодовойДоход / 12 * ЧислоМесяцев;
		
	Иначе
		
		ОдинДень = 86400;
		
		РасчетнаяДатаОкончания = ДобавитьМесяц(ДатаНачала, Месяц(ДатаОкончания) - Месяц(ДатаНачала)) - ОдинДень;
		
		Если НачалоДня(ДатаОкончания) = НачалоДня(РасчетнаяДатаОкончания) Тогда
			
			// Сроком действия патента является период в пределах одного календарного года, начинающийся с любого числа месяца,
			// указанного ИП в заявлении на получение патента, и истекающий в соответствующее число последнего месяца срока.
			
			ЧислоМесяцев = Месяц(ДатаОкончания) - Месяц(ДатаНачала);
			ПотенциальноВозможныйДоход = ПотенциальноВозможныйГодовойДоход / 12 * ЧислоМесяцев;
			
		Иначе
			
			// В случае прекращения осуществления предпринимательской деятельности до истечения срока действия патента величина налога,
			// подлежит перерасчету исходя из фактического периода времени осуществления предпринимательской деятельности
			// в календарных днях.
			
			ЧислоДней = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / ОдинДень + 1;
			
			Февраль = Дата(Год(ДатаНачала), 2, 1);
			ДнейВФеврале = День(КонецМесяца(Февраль));
			ДнейВГоду = (365 - 28) + ДнейВФеврале;
			
			ПотенциальноВозможныйДоход = ПотенциальноВозможныйГодовойДоход / ДнейВГоду * ЧислоДней;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Окр(ПотенциальноВозможныйДоход, 2, РежимОкругления.Окр15как20);
	
КонецФункции


#КонецОбласти

