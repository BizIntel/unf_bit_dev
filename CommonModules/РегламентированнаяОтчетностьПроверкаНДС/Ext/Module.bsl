////////////////////////////////////////////////////////////////////////////////
// Проверки заполнения декларации по НДС.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Помещает во временное хранилище представление ошибок, препятсвующих формированию электронного представления декларации по НДС.
// Параметры:
//   Отчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный документ со сведениями декларации.
//   МакетОформления - ТабличныйДокумент - макет на основании которого производится формирование
//                                         табличного представления.
//   АдресХранилища - Строка - адрес временного хранилища
//     Структура - содержит структуру со свойствами:
//       * КоличествоОшибок - Число - общее количество обнаруженных ошибок.
//       * ПредставлениеОшибок - ТабличныйДокумент - табличное представление ошибок для вывода в формы.
//
Процедура ВыявитьОшибкиЗаполненияПрепятствующиеФормированиюЭлектронногоПредставления_ФормаОтчета2015Кв1(Отчет, МакетОформления, НаименованиеДекларации, АдресХранилища) Экспорт
	
	ДанныеОтчета = СформироватьСтруктуруПоказателей_ФормаОтчета2015Кв1(Отчет);
	ПараметрыВыгрузки = ПараметрыВыгрузки_ФормаОтчета2015Кв1(Отчет, ДанныеОтчета);
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("Отчет", Отчет);
	КонтекстВыполнения.Вставить("МакетОформления", МакетОформления);
	КонтекстВыполнения.Вставить("НаименованиеДекларации", НаименованиеДекларации);
	
	КонтекстВыполнения.Вставить("ДанныеОтчета", ДанныеОтчета);
	КонтекстВыполнения.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
	
	ВесаРазрядовИНН = Новый Структура;
	ВесаРазрядовИНН.Вставить("ВесаЮЛ",   ВесаЮЛ());
	ВесаРазрядовИНН.Вставить("ВесаФЛ11", ВесаФЛ11());
	ВесаРазрядовИНН.Вставить("ВесаФЛ12", ВесаФЛ12());
	
	ПроверенныеИНН = Новый ТаблицаЗначений;
	ПроверенныеИНН.Колонки.Добавить("ИНН");
	ПроверенныеИНН.Колонки.Добавить("Ошибки");
	ПроверенныеИНН.Индексы.Добавить("ИНН");
	
	КонтекстВыполнения.Вставить("Кэш", Новый Структура());
	КонтекстВыполнения.Кэш.Вставить("ВесаРазрядовИНН", ВесаРазрядовИНН);
	КонтекстВыполнения.Кэш.Вставить("ПроверенныеИНН", ПроверенныеИНН);
	
	ОшибкиТитульногоЛиста = НоваяТаблицаОшибок();
	ОшибкиОтчета = НоваяТаблицаОшибок();
	ОшибкиРазделов17 = НоваяТаблицаОшибок();
	
	ОшибкиРазделов812 = Новый ТаблицаЗначений;
	ОшибкиРазделов812.Колонки.Добавить("ТипОшибки");
	ОшибкиРазделов812.Колонки.Добавить("Контрагент");
	ОшибкиРазделов812.Колонки.Добавить("ПредставлениеКонтрагента");
	ОшибкиРазделов812.Колонки.Добавить("Документ");
	ОшибкиРазделов812.Колонки.Добавить("ПредставлениеДокумента");
	
	ОшибкиРазделов812.Индексы.Добавить("ТипОшибки, Контрагент, ПредставлениеКонтрагента");
	
	КонтекстВыполнения.Вставить("ОшибкиТитульногоЛиста", ОшибкиТитульногоЛиста);
	КонтекстВыполнения.Вставить("ОшибкиОтчета", ОшибкиОтчета);
	КонтекстВыполнения.Вставить("ОшибкиРазделов17", ОшибкиРазделов17);
	КонтекстВыполнения.Вставить("ОшибкиРазделов812", ОшибкиРазделов812);
	КонтекстВыполнения.Вставить("КоличествоОшибок", 0);
	КонтекстВыполнения.Вставить("ПредставлениеОшибок", Неопределено);
	
	ПроверитьЗаполнение_ТитульныйЛист_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел1_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел2_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел3Приложение1_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел3Приложение2_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел4_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел5_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел6_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ПроверитьЗаполнение_Раздел7_ФормаОтчета2015Кв1(КонтекстВыполнения);
	
	ПроверитьРазделыНДС_ФормаОтчета2015Кв1(КонтекстВыполнения);
	
	СформироватьПредставлениеОшибок_ФормаОтчета2015Кв1(КонтекстВыполнения);
	
	РезультатПроверки = Новый Структура();
	РезультатПроверки.Вставить("КоличествоОшибок",    КонтекстВыполнения.КоличествоОшибок);
	РезультатПроверки.Вставить("ПредставлениеОшибок", КонтекстВыполнения.ПредставлениеОшибок);
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкиФормаОтчета2015Кв1

Функция СформироватьСтруктуруПоказателей_ФормаОтчета2015Кв1(Отчет)
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = Отчет.ДанныеОтчета.Получить();
	
	Префикс = "ПолеТабличногоДокумента";
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	ЭтоОтчетСтарогоОбразца = Ложь;
	Если СохрСтруктура.Свойство("ДанныеМногострочныхРазделов")
	   И (СохрСтруктура.ДанныеМногострочныхРазделов.Свойство("П0004000010") ИЛИ СохрСтруктура.ДанныеМногострочныхРазделов.Свойство("П0006000010")) Тогда
		ЭтоОтчетСтарогоОбразца = Ложь;
	КонецЕсли;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		Если ЭтоОтчетСтарогоОбразца Тогда
			// Конвертация данных после перехода с 2.0 на 3.0.
			ИмяРаздела = СтрЗаменить(Раздел.Ключ, Префикс, "");
			ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца_ФормаОтчета2015Кв1(Отчет, ПоказателиОтчета, Раздел.Ключ, ИмяРаздела);
		КонецЕсли;
		ДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Если ЭтоОтчетСтарогоОбразца Тогда
		// Конвертация данных после перехода с 2.0 на 3.0.
		ВосстановитьДанныеМногостраничныхРазделовСтарогоОбразца_ФормаОтчета2015Кв1(СохрСтруктура.ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Для Каждого Раздел Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		Для Каждого Лист Из Раздел.Значение Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		ДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	ДанныеРаздела2 = ДанныеОтчета.Раздел2;
	Для Каждого ЛистРаздела2 Из ДанныеРаздела2 Цикл
		ДанныеЛистаРаздела2 = ЛистРаздела2.Данные;
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(ДанныеЛистаРаздела2.П000200002003));
		ДанныеЛистаРаздела2.Вставить("П000200002003_1", ФИО.Фамилия);
		ДанныеЛистаРаздела2.Вставить("П000200002003_2", ФИО.Имя);
		ДанныеЛистаРаздела2.Вставить("П000200002003_3", ФИО.Отчество);
	КонецЦикла;
	
	ДанныеРаздела3Прил1 = ДанныеОтчета.Раздел3_Прил1;
	Для Каждого ЛистРаздела3Прил1 Из ДанныеРаздела3Прил1 Цикл
		ДанныеЛистаРаздела3Прил1 = ЛистРаздела3Прил1.Данные;
		ДанныеЛистаРаздела3Прил1.Вставить("П100310002002", ?(ЗначениеЗаполнено(ДанныеЛистаРаздела3Прил1.П000310002002)
			, Прав("0" + СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002002), 2), ""));
	КонецЦикла;
	
	Возврат ДанныеОтчета;
	
КонецФункции

Процедура ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца_ФормаОтчета2015Кв1(Отчет, ПоказателиОтчета, ИмяСтруктурыДанных, ИмяРаздела)
	
	Если ИмяРаздела = "Титульный" Тогда
		
		Данные = ПоказателиОтчета[ИмяСтруктурыДанных];
		
		Для Каждого Показатель Из Данные Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ИНН1_1" Тогда
				Данные.Вставить("ИНН1");
				Для Ном = 1 По 12 Цикл
					Данные.ИНН1 = СокрЛП(Данные.ИНН1) + Данные["ИНН1_" + Ном];
					Данные.Удалить("ИНН1_" + Ном);
				КонецЦикла;
				Если Лев(Данные.ИНН1, 2) = "00" Тогда
					Данные.ИНН1 = Сред(Данные.ИНН1, 3);
				КонецЕсли;
				Если Прав(Данные.ИНН1, 2) = "--" Тогда
					Данные.ИНН1 = Лев(Данные.ИНН1, СтрНайти(Данные.ИНН1, "--") - 1);
				КонецЕсли;
			ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
				Данные.Вставить("КПП1");
				Для Ном = 1 По 9 Цикл
					Данные.КПП1 = СокрЛП(Данные.КПП1) + Данные["КПП1_" + Ном];
					Данные.Удалить("КПП1_" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
				Данные.Вставить("НомерКорректировки", "");
				Для Ном = 1 По 3 Цикл
					Данные.НомерКорректировки = Данные.НомерКорректировки
						+ СтрЗаменить(СокрЛП(Данные["НомерКорректировки" + Ном]), "-", "");
					Данные.Удалить("НомерКорректировки" + Ном);
					Если НЕ ЗначениеЗаполнено(Данные.НомерКорректировки) Тогда
						Данные.НомерКорректировки = "0";
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "Период1" Тогда
				Данные.Вставить("Период");
				Для Ном = 1 По 2 Цикл
					Данные.Период = СокрЛП(Данные.Период) + Данные["Период" + Ном];
					Данные.Удалить("Период" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
				Данные.Вставить("ОтчетГод");
				Для Ном = 1 По 4 Цикл
					Данные.ОтчетГод = СокрЛП(Данные.ОтчетГод) + Данные["ОтчетГод" + Ном];
					Данные.Удалить("ОтчетГод" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
				Данные.Вставить("КодИМНС", "");
				Для Ном = 1 По 4 Цикл
					Данные.КодИМНС = Данные.КодИМНС + СокрЛП(Данные["НалоговыйОрган" + Ном]);
					Данные.Удалить("НалоговыйОрган" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
				Данные.Вставить("ПоМесту");
				Для Ном = 1 По 3 Цикл
					Данные.ПоМесту = СокрЛП(Данные.ПоМесту) + Данные["ПоМесту" + Ном];
					Данные.Удалить("ПоМесту" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "Прил1" Тогда
				Данные.Вставить("Прил");
				Для Ном = 1 По 3 Цикл
					Данные.Прил = СокрЛП(Данные.Прил) + Данные["Прил" + Ном];
					Данные.Удалить("Прил" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ДатаПодписи1" Тогда
				Данные.Вставить("ДатаПодписи", Отчет.ДатаПодписи);
				Для Ном = 1 По 8 Цикл
					Данные.Удалить("ДатаПодписи" + Ном);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3_Прил2" Тогда
		
		Данные = ПоказателиОтчета[ИмяСтруктурыДанных];
		
		// Добавление справочных показателей (отсутствуют в 2.0).
		Если НЕ Данные.Свойство("П000320000202") Тогда
			Данные.Вставить("П000320000202", 0);
		КонецЕсли;
		Если НЕ Данные.Свойство("П000320000203") Тогда
			Данные.Вставить("П000320000203", 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьДанныеМногостраничныхРазделовСтарогоОбразца_ФормаОтчета2015Кв1(ДанныеМногостраничныхРазделов)
	
	Для Каждого Страница Из ДанныеМногостраничныхРазделов["Раздел3_Прил1"] Цикл
		Данные = Страница.Данные;
		Для Каждого Показатель Из Страница.Данные Цикл
			ИмяПоказателя = Показатель.Ключ;
			Если ИмяПоказателя = "П000310001001" Тогда
				Данные.Вставить("П000310001000", Показатель.Значение);
				Данные.Удалить("П000310001001");
			КонецЕсли;
		КонецЦикла;
		// Добавление справочного показателя (отсутствует в 2.0).
		Если НЕ Данные.Свойство("П000310009004") Тогда
			Данные.Вставить("П000310009004", 0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыВыгрузки_ФормаОтчета2015Кв1(Отчет, ДанныеОтчета)
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(Отчет.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС", СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок", Строка(Отчет.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг", СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг", СокрЛП(Отчет.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг", СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КодФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННОргРеорг", СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППОргРеорг", СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Отчет.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Отчет.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	СохраненныеДанные = Отчет.ДанныеОтчета.Получить();
	
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел8", Формат(СохраненныеДанные.АктуальностьСведенийРаздел8, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел8_Прил1", Формат(СохраненныеДанные.АктуальностьСведенийРаздел8_Прил1, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел9", Формат(СохраненныеДанные.АктуальностьСведенийРаздел9, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел9_Прил1", Формат(СохраненныеДанные.АктуальностьСведенийРаздел9_Прил1, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел10", Формат(СохраненныеДанные.АктуальностьСведенийРаздел10, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел11", Формат(СохраненныеДанные.АктуальностьСведенийРаздел11, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел12", Формат(СохраненныеДанные.АктуальностьСведенийРаздел12, "ЧН="));
	
	ДанныеСегментированы = СохраненныеДанные.Свойство("УспешноеАвтозаполнение")
	                     И СохраненныеДанные.УспешноеАвтозаполнение = Истина;
	ПараметрыВыгрузки.Вставить("ДанныеСегментированы", ДанныеСегментированы);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура ПроверитьЗаполнение_ТитульныйЛист_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ИмяРаздела = "Титульный";
	
	ДанныеОтчета      = КонтекстВыполнения.ДанныеОтчета;
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	РазрешенныеКодыПоМесту = "116,213,214,215,216,227,231,250,331";
	ВозможныеКодыПоМесту = СтрРазделить(РазрешенныеКодыПоМесту, ",");
	
	РазрешенныеКодыПериода = "01,02,03,04,05,06,07,08,09,10,11,12,21,22,23,24,51,54,55,56,71,72,73,74,75,76,77,78,79,80,81,82";
	ВозможныеКодыПериода = СтрРазделить(РазрешенныеКодыПериода, ",");
	
	СписокКодовПериодаПриПоМесту250 = "01,02,03,04,05,06,07,08,09,10,11,12";
	ДопустимыеКодыПериодаПриПоМесту250 = СтрРазделить(СписокКодовПериодаПриПоМесту250, ",");
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "На титульном листе не указан ИНН индивидуального предпринимателя. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ОписаниеОшибки = "На титульном листе указан ИНН индивидуального предпринимателя не состоящий из 12 цифр. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ИНН1");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияИП) Тогда
			ОписаниеОшибки = "На титульном листе не указана фамилия налогоплательщика. Укажите фамилию индивидуального предпринимателя в справочнике организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "НаимОрг");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяИП) Тогда
			ОписаниеОшибки = "На титульном листе не указано имя налогоплательщика. Укажите имя индивидуального предпринимателя в справочнике организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "НаимОрг");
		КонецЕсли;
		
	Иначе
		Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "На титульном листе не указан ИНН организации. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ОписаниеОшибки = "На титульном листе указан ИНН организации не состоящий из 10 цифр. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ИНН1");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
			ОписаниеОшибки = "На титульном листе не указан КПП организации. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КПП1");
			
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			ОписаниеОшибки = "На титульном листе указан КПП организации не состоящий из 9 символов. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, "Неверно задан КПП организации!", ИмяРаздела, "КПП1");
			
		Иначе
			Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
				Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
				Если ПараметрыВыгрузки.ПоМесту = "213" Тогда
					Если НЕ (Символы56КПП = "50") Тогда
						ОписаниеОшибки = "Код по месту представления 213 следует указывать тогда, когда 5 и 6 символы КПП равны ""50"".";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КПП1");
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "250" Тогда
					Если НЕ (Символы56КПП = "36" ИЛИ Символы56КПП = "51" ИЛИ Символы56КПП = "76") Тогда
						ОписаниеОшибки = "Код по месту представления 250 следует указывать тогда, когда 5 и 6 символы КПП равны ""36"" или ""51"" или ""76"".";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КПП1");
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "227" Тогда
					Если НЕ (Символы56КПП = "4T" ИЛИ Символы56КПП = "5G") Тогда
						ОписаниеОшибки = "Код по месту представления 227 следует указывать тогда, когда 5 и 6 символы КПП равны ""4T"" или ""5G"".";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КПП1");
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "214" ИЛИ ПараметрыВыгрузки.ПоМесту = "215" ИЛИ ПараметрыВыгрузки.ПоМесту = "216"
				      ИЛИ ПараметрыВыгрузки.ПоМесту = "231" ИЛИ ПараметрыВыгрузки.ПоМесту = "331" Тогда
					Если Символы56КПП = "36" ИЛИ Символы56КПП = "76" ИЛИ Символы56КПП = "4T" ИЛИ Символы56КПП = "5G" Тогда
						ОписаниеОшибки = "Код по месту представления " + ПараметрыВыгрузки.ПоМесту + " не следует указывать, когда 5 и 6 символы КПП равны ""36"", ""76"", ""4T"" или ""5G"".";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КПП1");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
				ОписаниеОшибки = "На титульном листе не указан налогоплательщик. Заполните наименование в справочнике организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
				ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "НаимОрг");
			КонецЕсли;
			
		КонецЕсли;
		
		ФормРеорг = СокрЛП(ПараметрыВыгрузки.КодФормРеорг);
		ИННРеорг  = СокрЛП(ПараметрыВыгрузки.ИННОргРеорг);
		КППРеорг  = СокрЛП(ПараметрыВыгрузки.КППОргРеорг);
		Если ЗначениеЗаполнено(ФормРеорг) ИЛИ ЗначениеЗаполнено(ИННРеорг) ИЛИ ЗначениеЗаполнено(КППРеорг) Тогда
			Если НЕ ЗначениеЗаполнено(ФормРеорг) Тогда
				ОписаниеОшибки = "На титульном листе не указан код формы реорганизации.";
				ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КодФормыРеорганизации");
			ИначеЕсли ЗначениеЗаполнено(ФормРеорг) И СтрНайти("0,1,2,3,5,6", ФормРеорг) = 0 Тогда
				ОписаниеОшибки = "На титульном листе указан код формы реорганизации, не предусмотренный порядком заполнения.";
				ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КодФормыРеорганизации");
			КонецЕсли;
			
			Если ФормРеорг <> "0" Тогда
				Если НЕ ЗначениеЗаполнено(ИННРеорг) И НЕ ЗначениеЗаполнено(КППРеорг) Тогда
					ОписаниеОшибки = "На титульном листе не указаны ИНН и КПП реорганизованной организации.";
					ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ИННРеорганизованнойОрганизации");
				Иначе
					Если НЕ ЗначениеЗаполнено(ИННРеорг) Тогда
						ОписаниеОшибки = "На титульном листе не указан ИНН реорганизованной организации.";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ИННРеорганизованнойОрганизации");
					ИначеЕсли СтрДлина(ИННРеорг) <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИННРеорг) Тогда
						ОписаниеОшибки = "На титульном листе указан ИНН реорганизованной организации не состоящий из 10 цифр.";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ИННРеорганизованнойОрганизации");
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(КППРеорг) Тогда
						ОписаниеОшибки = "На титульном листе не указан КПП реорганизованной организации.";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КППРеорганизованнойОрганизации");
					ИначеЕсли СтрДлина(КППРеорг) <> 9 Тогда
						ОписаниеОшибки = "На титульном листе указан КПП реорганизованной организации не состоящий из 9 символов.";
						ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КППРеорганизованнойОрганизации");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПериодОтч) Тогда
		ОписаниеОшибки = "На титульном листе не указан код налогового периода.";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "Период");
		
	ИначеЕсли ПараметрыВыгрузки.ПоМесту <> "250" И ДопустимыеКодыПериодаПриПоМесту250.Найти(ПараметрыВыгрузки.ПериодОтч) <> Неопределено Тогда
		ОписаниеОшибки = "Код налогового периода " + ПараметрыВыгрузки.ПериодОтч + " на титульном листе допускается только при коде по месту представления 250.";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "Период");
		
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.ПериодОтч) = Неопределено Тогда
		ОписаниеОшибки = "На титульном листе указан код отчетного периода, не предусмотренный порядком заполнения декларации.";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "Период");
		
	КонецЕсли;
	
	КодНалоговогоОргана = СокрЛП(ПараметрыВыгрузки.КодИФНС);
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "На титульном листе не указан код налогового органа, в который представляется декларация.";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КодИМНС");
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "На титульном листе указан код налогового органа, не состоящий из 4 цифр.";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "КодИМНС");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		ОписаниеОшибки = "На титульном листе не указан код по месту нахождения (учета).";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ПоМесту");
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		ОписаниеОшибки = "На титульном листе задан код по месту нахождения (учета), не предусмотренный порядком заполнения декларации.";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ПоМесту");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		ОписаниеОшибки = "На титульном листе не указан кода вида деятельности по ОКВЭД.";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ОКВЭД");
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		ОписаниеОшибки = "На титульном листе указан неверный кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим образцам (X - любая цифра): ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"".";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ОКВЭД");
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ПараметрыВыгрузки.ЭтоПБОЮЛ И ПараметрыВыгрузки.ТипПодписанта = "1");
	
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			ОписаниеОшибки = "На титульном листе не указана фамилия подписанта. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ОргПодписант");
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			ОписаниеОшибки = "На титульном листе не указано имя подписанта. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ОргПодписант");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		ОписаниеОшибки = "На титульном листе не указано наименование документа, удостоверяющего полномочия представителя. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
		ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "ДокУпПред");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета      = КонтекстВыполнения.ДанныеОтчета;
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	
	ПоМесту = ПараметрыВыгрузки.ПоМесту;
	ДанныеРаздела = ДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000100001003);
	
	Если ПоМесту = "231" Тогда
		Если СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 И СтрДлина(ОКТМО) <> 0 Тогда
			ОписаниеОшибки = "В строке 010 раздела 1 указан код по ОКТМО, не соответствующий Общероссийскому классификатору территорий муниципальных образований.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100001003");
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
			ОписаниеОшибки = "В строке 010 раздела 1 не указан код по ОКТМО.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100001003");
		ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
			ОписаниеОшибки = "В строке 010 раздела 1 указан код по ОКТМО, не соответствующий Общероссийскому классификатору территорий муниципальных образований.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100001003");
		КонецЕсли;
	КонецЕсли;
	
	КБК = СокрЛП(ДанныеРаздела.П000100002003);
	
	Если ПоМесту = "231" Тогда
		Если СтрДлина(ОКТМО) = 0 Тогда
			Если СтрДлина(КБК) <> 20 И СтрДлина(КБК) <> 0 Тогда
				ОписаниеОшибки = "В строке 020 раздела 1 указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100002003");
			КонецЕсли;
		Иначе
			Если СтрДлина(КБК) = 0 Тогда
				ОписаниеОшибки = "В строке 020 раздела 1 не указан код бюджетной классификации.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100002003");
			ИначеЕсли СтрДлина(КБК) <> 20 Тогда
				ОписаниеОшибки = "В строке 020 раздела 1 указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100002003");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтрДлина(КБК) = 0 Тогда
			ОписаниеОшибки = "В строке 020 раздела 1 не указан код бюджетной классификации.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100002003");
		ИначеЕсли СтрДлина(КБК) <> 20 Тогда
			ОписаниеОшибки = "В строке 020 раздела 1 указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100002003");
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеСтроки040 = Окр(ДанныеРаздела.П000100004003, 0);
	ЗначениеСтроки050 = Окр(ДанныеРаздела.П000100005003, 0);
	
	ЗаполненоПоказателей = 0;
	ЗаполненоПоказателей = ЗаполненоПоказателей + ?(ЗначениеЗаполнено(ЗначениеСтроки040), 1, 0);
	ЗаполненоПоказателей = ЗаполненоПоказателей + ?(ЗначениеЗаполнено(ЗначениеСтроки050), 1, 0);
	
	Если ЗаполненоПоказателей > 1 Тогда
		ОписаниеОшибки = "Должна быть заполнена только одна из строк 040 и 050 Раздела 1.";
		ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100003003");
	КонецЕсли;
	
	Если ПоМесту = "227" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000100006003) Тогда
			ОписаниеОшибки = "В строке 060 раздела 1 не указан регистрационный номер договора инвестиционного товарищества.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100006003");
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеРаздела.П000100007003;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В строке 070 раздела 1 не указана дата начала действия договора инвестиционного товарищества.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100007003");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В строке 070 раздела 1 дата начала действия договора инвестиционного товарищества значительно (более, чем на 80 лет) отличается от текущей.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100007003");
			КонецЕсли;
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеРаздела.П000100008003;
		Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В строке 080 раздела 1 дата окончания действия договора инвестиционного товарищества значительно (более, чем на 80 лет) отличается от текущей.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел1", "П000100008003");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел2_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета      = КонтекстВыполнения.ДанныеОтчета;
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	
	ДанныеРаздела = ДанныеОтчета.Раздел2;
	
	ЕстьЗаполненнаяСтраницаРаздела2 = Ложь;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		НомерСтраницы = СтрокаЧГ0(ДанныеРаздела.Индекс(СтраницаРаздела) + 1);
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		Если НЕ ЗаполненаСтраница_Раздел2_ФормаОтчета2015Кв1(ДанныеСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЗаполненнаяСтраницаРаздела2 = Истина;
		
		КПП = СокрЛП(ДанныеСтраницы.П000200001003);
		Если СтрДлина(КПП) <> 0 И СтрДлина(КПП) <> 9 Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " указан КПП подразделения иностранной организации, не состоящий из 9 символов.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200001003", НомерСтраницы);
		КонецЕсли;
		
		ИНН = СокрЛП(ДанныеСтраницы.П000200003003);
		Если ЗначениеЗаполнено(ИНН) Тогда
			Если СтрДлина(ИНН) <> 10 И СтрДлина(ИНН) <> 12 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
				ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " указан ИНН налогоплательщика - продавца, не состоящий из 10 или 12 цифр.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200003003", НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		
		// Наименование налогоплательщика-продавца.
		КодОперации = СокрЛП(ДанныеСтраницы.П000200007003);
		Если (КодОперации = "1011712" ИЛИ КодОперации = "1011703")
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200002003) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " не указано наименование налогоплательщика-продавца.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200002003", НомерСтраницы);
		ИначеЕсли СтрДлина(ИНН) = 10 И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200002003) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " не указано наименование налогоплательщика-продавца.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200002003", НомерСтраницы);
		ИначеЕсли СтрДлина(ИНН) = 12 Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200002003_1) Тогда
				ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " не указано имя налогоплательщика-продавца.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200002003", НомерСтраницы);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200002003_2) Тогда
				ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " не указана фамилия налогоплательщика-продавца.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200002003", НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение ИНН при коде операции 1011703.
		Если ДанныеСтраницы.П000200007003 = "1011703" И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200003003) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " не указан ИНН налогоплательщика - продавца.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200003003", НомерСтраницы);
		КонецЕсли;
		
		КБК = СокрЛП(ДанныеСтраницы.П000200004003);
		Если НЕ ЗначениеЗаполнено(КБК) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " не указан код бюджетной классификации.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200004003", НомерСтраницы);
		ИначеЕсли СтрДлина(КБК) <> 20 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБК) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200004003", НомерСтраницы);
		КонецЕсли;
		
		ОКТМО = СокрЛП(ДанныеСтраницы.П000200005003);
		Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " не указан код по ОКТМО.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200005003", НомерСтраницы);
		ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " указан код по ОКТМО, не соответствующий Общероссийскому классификатору территорий муниципальных образований.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200005003", НомерСтраницы);
		КонецЕсли;
		
		КодОперации = СокрЛП(ДанныеСтраницы.П000200007003);
		Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
			ОписаниеОшибки = Новый Структура;
			ОписаниеОшибки.Вставить("ИмяШаблона", "ОшибкаРазделе2НеУказанКодОперации");
			ОписаниеОшибки.Вставить("ПараметрыШаблона", Новый Структура("НомерСтраницы", НомерСтраницы));
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200007003", НомерСтраницы);
		ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерСтраницы + " указан код операции, не состоящий из 7 символов.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "П000200007003", НомерСтраницы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненаСтраница_Раздел2_ФормаОтчета2015Кв1(ДанныеСтраницы)
	
	СтраницаЗаполнена = ЗначениеЗаполнено(ДанныеСтраницы.П000200001003)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000200002003)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000200003003)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000200006003)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000200007003)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000200008003)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000200009003)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000200010003);
	
	Возврат СтраницаЗаполнена;
	
КонецФункции

Процедура ПроверитьЗаполнение_Раздел3Приложение1_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета      = КонтекстВыполнения.ДанныеОтчета;
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	
	КодПериода = ПараметрыВыгрузки.ПериодОтч;
	
	ДанныеРаздела = ДанныеОтчета.Раздел3_Прил1;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		НомерСтраницы = СтрокаЧГ0(ДанныеРаздела.Индекс(СтраницаРаздела) + 1);
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		Если НЕ ЗаполненаСтраница_Раздел3_Прил1_ФормаОтчета2015Кв1(ДанныеСтраницы) Тогда
			Продолжить;
		ИначеЕсли КодПериода <> "24" И КодПериода <> "56" Тогда
			ОписаниеОшибки = "Приложение 1 к разделу 3 заполняется только если на титульном листе указан код периода представления 24 или 56.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310001001", "1");
			Прервать;
		КонецЕсли;
		
		НаимНедв = СокрЛП(ДанныеСтраницы.П000310001000);
		Если ПустаяСтрока(НаимНедв) Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 не указано наименование объекта недвижимости.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310001000", НомерСтраницы);
		КонецЕсли;
		
		ПочтовыйИндекс = СокрЛП(ДанныеСтраницы.П000310002001);
		ДлинаИндекса = СтрДлина(ПочтовыйИндекс);
		Если ДлинаИндекса <> 0 И ДлинаИндекса <> 6 Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 указан почтовый индекс, не состоящий из 6 цифр.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310002001", НомерСтраницы);
		КонецЕсли;
		
		КодСубъекта = СокрЛП(ДанныеСтраницы.П000310002002);
		ДлинаКодСубъектаРФ = СтрДлина(КодСубъекта);
		Если ДлинаКодСубъектаРФ <> 2 Тогда
			ОписаниеОшибки = "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерСтраницы + " не" + ?(ДлинаКодСубъектаРФ = 0, "", "верно") + " задан код субъекта Российской Федерации!";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310002002", НомерСтраницы);
		КонецЕсли;
		
		КодОперации = СокрЛП(ДанныеСтраницы.П000310003001);
		Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 не указан код операции по объекту недвижимости.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310003001", НомерСтраницы);
		ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 указан код операции по объекту недвижимости, не состоящий из 7 символов.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310003001", НомерСтраницы);
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеСтраницы.П000310004001;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 не указана дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310004001");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации значительно (более, чем на 80 лет) отличается от текущей.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310004001");
			КонецЕсли;
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеСтраницы.П000310005001;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 не указана дата начала амортизационных отчислений по объекту недвижимости.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310005001", НомерСтраницы);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 дата дата начала амортизационных отчислений по объекту недвижимости значительно (более, чем на 80 лет) отличается от текущей.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310005001", НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		
		Если МногострочнаяЧастьПуста(ДанныеСтраницы, "П000310008001, П000310008002, П000310008003, П000310008004", "П000310008004") Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 не указаны суммы налога, подлежащие восстановлению и уплате в бюджет.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310008001_1", НомерСтраницы);
		КонецЕсли;
		
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеСтраницы, "П000310008001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			П000310008001 = СокрЛП(ДанныеСтраницы["П000310008001_" + СтрокаЧГ0(НомерСтроки)]);
			П000310008002 = ДанныеСтраницы["П000310008002_" + СтрокаЧГ0(НомерСтроки)];
			П000310008003 = ДанныеСтраницы["П000310008003_" + СтрокаЧГ0(НомерСтроки)];
			П000310008004 = ДанныеСтраницы["П000310008004_" + СтрокаЧГ0(НомерСтроки)];
			
			Если ЗначениеЗаполнено(П000310008001) ИЛИ ЗначениеЗаполнено(П000310008002) ИЛИ ЗначениеЗаполнено(П000310008003) ИЛИ ЗначениеСуммыЗаполнено(П000310008004) Тогда
				Если НЕ ЗначениеЗаполнено(П000310008001) Тогда
					ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 в строке " + НомерСтроки + " не указан год.";
					ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310008001_" + СтрокаЧГ0(НомерСтроки), НомерСтраницы);
				ИначеЕсли СтрДлина(П000310008001) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(П000310008001) Тогда
					ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 в строке " + НомерСтроки + " указан год, не состоящий из 4 цифр.";
					ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310008001_" + СтрокаЧГ0(НомерСтроки), НомерСтраницы);
				КонецЕсли;
				
				ПроверяемаяДата = П000310008002;
				Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
					ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 в строке " + НомерСтроки + " не указана дата начала использования объекта недвижимости.";
					ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310008002_" + СтрокаЧГ0(НомерСтроки), НомерСтраницы);
				Иначе
					ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
					Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
						ОписаниеОшибки = "На странице " + НомерСтраницы + " приложения 1 к разделу 3 в строке " + НомерСтроки + " дата начала использования объекта недвижимости значительно (более, чем на 80 лет) отличается от текущей.";
						ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил1", "П000310008002_" + СтрокаЧГ0(НомерСтроки), НомерСтраницы);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненаСтраница_Раздел3_Прил1_ФормаОтчета2015Кв1(ДанныеСтраницы)
	
	СтраницаЗаполнена = ЗначениеЗаполнено(ДанныеСтраницы.П000310001000)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002001)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002002)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002003)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002004)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002005)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002006)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002007)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002008)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310002009)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310003001)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310004001)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000310005001)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000310006001)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000310007001);
	
	НомерСтроки = 1;
	Пока НЕ СтраницаЗаполнена И ДанныеСтраницы.Свойство("П000310008001_" + СтрокаЧГ0(НомерСтроки)) Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		СтраницаЗаполнена = ЗначениеЗаполнено(ДанныеСтраницы["П000310008001" + Постфикс])
		                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы["П000310008002" + Постфикс])
		                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы["П000310008003" + Постфикс])
		                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000310008004" + Постфикс]);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат СтраницаЗаполнена;
	
КонецФункции

Процедура ПроверитьЗаполнение_Раздел3Приложение2_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета = КонтекстВыполнения.ДанныеОтчета;
	
	Раздел3Прил2 = ДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел3Прил2, "П000320000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		П000320000101 = СокрЛП(Раздел3Прил2["П000320000101_" + Формат(НомерСтроки, "ЧГ=")]);
		П000320000102 = Раздел3Прил2["П000320000102_" + Формат(НомерСтроки, "ЧГ=")];
		П000320000103 = Раздел3Прил2["П000320000103_" + Формат(НомерСтроки, "ЧГ=")];
		
		Если ЗначениеЗаполнено(П000320000101) ИЛИ ЗначениеСуммыЗаполнено(П000320000102) ИЛИ ЗначениеСуммыЗаполнено(П000320000103) Тогда
			Если НЕ ЗначениеЗаполнено(П000320000101) Тогда
				ОписаниеОшибки = "В приложении 2 к разделу 3 в строке " + НомерСтроки + " не указан КПП подразделения иностранной организации.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил2", "П000320000101_" + Формат(НомерСтроки, "ЧГ="));
			ИначеЕсли СтрДлина(П000320000101) <> 9 Тогда
				ОписаниеОшибки = "В приложении 2 к разделу 3 в строке " + НомерСтроки + " указан КПП подразделения иностранной организации, не состоящий из 9 символов.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел3_Прил2", "П000320000101_" + Формат(НомерСтроки, "ЧГ="));
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел4_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета = КонтекстВыполнения.ДанныеОтчета;
	
	ДанныеРаздела = ДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	НомерСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400001003_" + СтрокаЧГ0(НомерСтроки)) Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000400001003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400002003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400003003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400004003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400005003" + Постфикс]);
		
		Если СтрокаЗаполнена Тогда
			КодОперации = СокрЛП(ДанныеРаздела["П000400001003" + Постфикс]);
			Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
				ОписаниеОшибки = "В разделе 4 в строке " + СтрокаЧГ0(НомерСтроки) + " не указан код операции.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел4", "П000400001003" + Постфикс);
			ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
				ОписаниеОшибки = "В разделе 4 в строке " + СтрокаЧГ0(НомерСтроки) + " указан код операции, не состоящий из 7 символов.";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел4", "П000400001003" + Постфикс);
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел5_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета = КонтекстВыполнения.ДанныеОтчета;
	
	ДанныеРаздела = ДанныеОтчета.Раздел5;
	
	РазрешенныеКодыПериода = "01,02,03,04,05,06,07,08,09,10,11,12,21,22,23,24";
	ВозможныеКодыПериодаРаздел5 = СтрРазделить(РазрешенныеКодыПериода, ",");
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		НомерСтраницы = СтрокаЧГ0(ДанныеРаздела.Индекс(СтраницаРаздела) + 1);
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		Если НЕ ЗаполненаСтраница_Раздел5_ФормаОтчета2015Кв1(ДанныеСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		
		ГодРаздел5 = СокрЛП(ДанныеСтраницы.П000500001003);
		Если НЕ ЗначениеЗаполнено(ГодРаздел5) Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " не указан отчетный год.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500001003", НомерСтраницы);
		ИначеЕсли СтрДлина(ГодРаздел5) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодРаздел5) Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " указан отчетный год, не состоящий из 4 цифр.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500001003", НомерСтраницы);
		КонецЕсли;
		
		НалоговыйПериод = СокрЛП(ДанныеСтраницы.П000500002003);
		Если НЕ ЗначениеЗаполнено(НалоговыйПериод) Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " не указан код налогового периода.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500002003", НомерСтраницы);
		ИначеЕсли ВозможныеКодыПериодаРаздел5.Найти(НалоговыйПериод) = Неопределено Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " указан код налогового периода, не предусмотренный порядком заполнения.";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500002003", НомерСтраницы);
		КонецЕсли;
		
		Если МногострочнаяЧастьПуста(ДанныеСтраницы, "П000500004003, П000500005003, П000500006003, П000500007003", "П000500004003, П000500005003, П000500006003, П000500007003") Тогда
			ОписаниеОшибки = "На странице " + НомерСтраницы + " раздела 5 не указаны сведения по расчету суммы налоговых вычетов (строки 030-070).";
			ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500004003_1", НомерСтраницы);
			
		Иначе
			ИндексСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000500003003_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
				СтрИндексСтроки = Формат(ИндексСтроки, "ЧГ=");
				Постфикс = "_" + СтрокаЧГ0(ИндексСтроки);
				
				Если ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500004003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500005003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500006003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500007003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы["П000500003003_" + СтрИндексСтроки]) Тогда
					КодОперации = СокрЛП(ДанныеСтраницы["П000500003003" + Постфикс]);
					Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " в строке " + СтрокаЧГ0(ИндексСтроки) + " не указан код операции.";
						ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500003003" + Постфикс, НомерСтраницы);
					ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " в строке " + СтрокаЧГ0(ИндексСтроки) + " указан код операции, не состоящий из 7 символов.";
						ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500003003" + Постфикс, НомерСтраницы);
					КонецЕсли;
					
					Если ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500004003_" + СтрИндексСтроки])
					   И НЕ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500005003_" + СтрИндексСтроки]) Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов (строка 050).";
						ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500004003_" + СтрИндексСтроки, НомерСтраницы);
					Конецесли;
					
					Если ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500006003_" + СтрИндексСтроки])
					   И НЕ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500007003_" + СтрИндексСтроки]) Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов для (строка 070).";
						ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500006003_" + СтрИндексСтроки, НомерСтраницы);
					Конецесли;
				Конецесли;
				
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
			
			// Итог в строке 080 не может быть пуст, если соответствующие данные заполнены хотя бы в одной строке (доп. условие из бумажного формата).
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000500008003) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеСтраницы.Свойство("П000500005003_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500005003_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " не указана итоговая суммы по графе 3.";
					ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500005003", НомерСтраницы);
				КонецЕсли;
				
			КонецЕсли;
			
			// Итог в строке 090 не может быть пуст, если соответствующие данные заполнены хотя бы в одной строке (доп. условие из бумажного формата).
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000500009003) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеСтраницы.Свойство("П000500007003_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500007003_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					ОписаниеОшибки = "В разделе 5 на странице " + НомерСтраницы + " не указана итоговая суммы по графе 5.";
					ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел5", "П000500007003", НомерСтраницы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненаСтраница_Раздел5_ФормаОтчета2015Кв1(ДанныеСтраницы)
	
	СтраницаЗаполнена = ЗначениеЗаполнено(ДанныеСтраницы.П000500001003)
	                ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000500002003)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000500008003)
	                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000500009003);
	
	НомерСтроки = 1;
	Пока НЕ СтраницаЗаполнена И ДанныеСтраницы.Свойство("П000500003003_" + СтрокаЧГ0(НомерСтроки)) Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		СтраницаЗаполнена = ЗначениеЗаполнено(ДанныеСтраницы["П000500003003" + Постфикс])
		                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500004003" + Постфикс])
		                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500005003" + Постфикс])
		                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500006003" + Постфикс])
		                ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы["П000500007003" + Постфикс]);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат СтраницаЗаполнена;
	
КонецФункции

Процедура ПроверитьЗаполнение_Раздел6_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета = КонтекстВыполнения.ДанныеОтчета;
	ДанныеРаздела = ДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	НомерСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000600001003_" + СтрокаЧГ0(НомерСтроки)) Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000600001003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000600002003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000600003003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000600004003" + Постфикс]);
		
		Если СтрокаЗаполнена Тогда
			КодОперации = СокрЛП(ДанныеРаздела["П000600001003" + Постфикс]);
			Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
				ОписаниеОшибки = "В разделе 6 в строке " + СтрокаЧГ0(НомерСтроки) + " многострочной части не указан код операции";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел6", "П000600001003" + Постфикс);
			ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
				ОписаниеОшибки = "Код операции в разделе 6 в строке " + СтрокаЧГ0(НомерСтроки) + " многострочной части должен состоять из 7 символов";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел6", "П000600001003" + Постфикс);
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Если заполнена хотя бы одна сумма в графе 4, то должен быть заполнен итог по этой графе.
	Если НЕ ЗначениеСуммыЗаполнено(ДанныеРаздела.П000600006003) И НЕ МногострочнаяЧастьПуста(ДанныеРаздела, "", "П000600004003") Тогда
		ОписаниеОшибки = "В разделе 6 не указана итоговая сумма налога, исчисленная к уплате в бюджет.";
		ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел6", "П000600006003");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел7_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДанныеОтчета = КонтекстВыполнения.ДанныеОтчета;
	
	ДанныеРаздела = ДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, "П000700000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		П000700000101 = СокрЛП(ДанныеРаздела["П000700000101_" + Формат(НомерСтроки, "ЧГ=")]);
		П000700000102 = ДанныеРаздела["П000700000102_" + Формат(НомерСтроки, "ЧГ=")];
		П000700000103 = ДанныеРаздела["П000700000103_" + Формат(НомерСтроки, "ЧГ=")];
		П000700000104 = ДанныеРаздела["П000700000104_" + Формат(НомерСтроки, "ЧГ=")];
		
		Если ЗначениеЗаполнено(П000700000101) ИЛИ ЗначениеСуммыЗаполнено(П000700000102) ИЛИ ЗначениеСуммыЗаполнено(П000700000103) ИЛИ ЗначениеСуммыЗаполнено(П000700000104) Тогда
			ДлинаП000700000101 = СтрДлина(П000700000101);
			Если ДлинаП000700000101 = 0 Тогда
				ОписаниеОшибки = "В разделе 7 в строке " + СтрокаЧГ0(НомерСтроки) + " не указан код операции";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел7", "П000700000101_" + СтрокаЧГ0(НомерСтроки));
			ИначеЕсли ДлинаП000700000101 <> 7 Тогда
				ОписаниеОшибки = "Код операции в разделе 7 в строке " + СтрокаЧГ0(НомерСтроки) + " должен состоять из 7 символов";
				ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, "Раздел7", "П000700000101_" + СтрокаЧГ0(НомерСтроки));
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРазделыНДС_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	Отчет = КонтекстВыполнения.Отчет;
	ДанныеОтчета = КонтекстВыполнения.ДанныеОтчета;
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	
	Раздел1 = ДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = ДанныеОтчета.Раздел2;
	Раздел3 = ДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = ДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5 = ДанныеОтчета.Раздел5;
	Раздел6 = ДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	Если ПараметрыВыгрузки.ПоМесту = "231" Тогда
		ЗаполненРаздел2 = Ложь;
		Для Каждого ЛистРаздела Из Раздел2 Цикл
			ДанныеЛиста = ЛистРаздела.Данные;
			Если ЗаполненаСтраница_Раздел2_ФормаОтчета2015Кв1(ДанныеЛиста) Тогда
				ЗаполненРаздел2 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗаполненРаздел2 Тогда
			ОписаниеОшибки = "В декларации, представляемой по месту нахождения налогового агента должен быть заполнен раздел 2 (сумма налога, подлежащая уплате в бюджет, по данным налогового агента)";
			ЗафиксироватьОшибкуОтчета(КонтекстВыполнения, ОписаниеОшибки, "Раздел2", "");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполненаРаздел4Строка030 = Ложь;
	ЗаполненаРаздел4Строка040 = Ложь;
	ЗаполненаРаздел4Строка050 = Ложь;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П000400003003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЗаполненаРаздел4Строка030 = ЗаполненаРаздел4Строка030 ИЛИ Раздел4["П000400003003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка040 = ЗаполненаРаздел4Строка040 ИЛИ Раздел4["П000400004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка050 = ЗаполненаРаздел4Строка050 ИЛИ Раздел4["П000400005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ЗаполненаРаздел5Строка050 = Ложь;
	ЗаполненаРаздел5Строка070 = Ложь;
	
	Для Каждого ЛистРаздела Из Раздел5 Цикл
		ДанныеЛиста = ЛистРаздела.Данные;
		
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, "П000500005003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЗаполненаРаздел5Строка050 = ЗаполненаРаздел5Строка050 ИЛИ ДанныеЛиста["П000500005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			ЗаполненаРаздел5Строка070 = ЗаполненаРаздел5Строка070 ИЛИ ДанныеЛиста["П000500007003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполненаРаздел6Строка040 = Ложь;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П000600004003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЗаполненаРаздел6Строка040 = ЗаполненаРаздел6Строка040 ИЛИ Раздел6["П000600004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеРаздел8 = ДанныеРазделаНДСИзРегистра(Отчет, "Раздел8", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел8_Прил1 = ДанныеРазделаНДСИзРегистра(Отчет, "Раздел8_Прил1", ПараметрыВыгрузки.ДанныеСегментированы);
	
	ДанныеРаздел9 = ДанныеРазделаНДСИзРегистра(Отчет, "Раздел9", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел9_Прил1 = ДанныеРазделаНДСИзРегистра(Отчет, "Раздел9_Прил1", ПараметрыВыгрузки.ДанныеСегментированы);
	
	ДанныеРаздел10 = ДанныеРазделаНДСИзРегистра(Отчет, "Раздел10", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел11 = ДанныеРазделаНДСИзРегистра(Отчет, "Раздел11", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел12 = ДанныеРазделаНДСИзРегистра(Отчет, "Раздел12", ПараметрыВыгрузки.ДанныеСегментированы);
	
	Раздел8Обязателен = ДанныеРаздел8_Прил1 <> Неопределено
	                ИЛИ Раздел3.П000300019003 > 0
	                ИЛИ ЗаполненаРаздел4Строка030
	                ИЛИ ЗаполненаРаздел4Строка040
	                ИЛИ ЗаполненаРаздел5Строка050
	                ИЛИ ЗаполненаРаздел5Строка070
	                ИЛИ ЗаполненаРаздел6Строка040
	                ИЛИ Раздел6.П000600014003 > 0;
	
	ПроверятьРаздел8 = НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки.АктуальностьСведенийРаздел8 = "1");
	Если ПроверятьРаздел8 И Раздел8Обязателен И ДанныеРаздел8 = Неопределено Тогда
		ОписаниеОшибки = "В декларации должен быть заполнен раздел 8 (сведения из книги покупок)";
		ЗафиксироватьОшибкуОтчета(КонтекстВыполнения, ОписаниеОшибки, "Раздел8", "");
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" И ДанныеРаздел8_Прил1 <> Неопределено Тогда
		ОписаниеОшибки = "При первичном представлении декларации приложение 1 к разделу 8 (сведения дополнительных листов книги покупок) не представляется. Необходимо очистить раздел.";
		ЗафиксироватьОшибкуОтчета(КонтекстВыполнения, ОписаниеОшибки, "Раздел8_Прил1", "");
	КонецЕсли;
	
	Раздел9Обязателен = ДанныеРаздел9_Прил1 <> Неопределено
	                ИЛИ Раздел3.П000300011005 > 0
	                ИЛИ ЗаполненаРаздел4Строка050
	                ИЛИ Раздел4.П000400008003 > 0
	                ИЛИ Раздел6.П000600010003 > 0
	                ИЛИ Раздел6.П000600012003 > 0;
	
	ПроверятьРаздел9 = НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки.АктуальностьСведенийРаздел9 = "1");
	Если ПроверятьРаздел9 И Раздел9Обязателен И ДанныеРаздел9 = Неопределено Тогда
		ОписаниеОшибки = "В декларации должен быть заполнен раздел 9 (сведения из книги продаж)";
		ЗафиксироватьОшибкуОтчета(КонтекстВыполнения, ОписаниеОшибки, "Раздел9", "");
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" И ДанныеРаздел9_Прил1 <> Неопределено Тогда
		ОписаниеОшибки = "При первичном представлении декларации приложение 1 к разделу 9 (сведения дополнительных листов книги продаж) не представляется. Необходимо очистить раздел.";
		ЗафиксироватьОшибкуОтчета(КонтекстВыполнения, ОписаниеОшибки, "Раздел9_Прил1", "");
	КонецЕсли;
	
	Если Раздел1.П000100003003 > 0 И ДанныеРаздел12 = Неопределено Тогда
		ОписаниеОшибки = "В декларации отсутстуют сведения о счетах-фактурах, выставленных лицами, не являющимися плательщиками НДС. Наличие этих сведений в разделе 12 обязательно, если заполнена строка 030 раздела 1";
		ЗафиксироватьОшибкуОтчета(КонтекстВыполнения, ОписаниеОшибки, "Раздел12", "");
	КонецЕсли;
	
	Если ПроверятьРаздел8 Тогда
		ПроверитьЗаполнение_Раздел8_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздел8);
	КонецЕсли;
	ПроверитьЗаполнение_Раздел8_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздел8_Прил1);
	
	Если ПроверятьРаздел9 Тогда
		ПроверитьЗаполнение_Раздел9_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздел9);
	КонецЕсли;
	ПроверитьЗаполнение_Раздел9_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздел9_Прил1);
	
	ПроверитьЗаполнение_Раздел10_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздел10);
	ПроверитьЗаполнение_Раздел11_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздел11);
	ПроверитьЗаполнение_Раздел12_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздел12);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел8_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздела)
	
	Отчет = КонтекстВыполнения.Отчет;
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел8_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	СписокКодовПоПродавцам = "01,02,03,04,05,07,08,09,10,11,12,13";
	КодыПоПродавцам = СтрРазделить(СписокКодовПоПродавцам, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	КонтрольныеСписки.Вставить("КодыПоПродавцам", КодыПоПродавцам);
	КонтрольныеСписки.Вставить("СписокКодовПоПродавцам", СтрЗаменить(СписокКодовПоПродавцам, ",", ", "));
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	КонтекстВыполнения.КонтекстРаздела.Вставить("ИмяРаздела", "Раздел8");
	КонтекстВыполнения.КонтекстРаздела.Вставить("МестоОшибки", "В разделе 8 ");
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, "Раздел8", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел8_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел8_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

Функция КодыОпераций_Раздел8_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДатаПодписи = КонтекстВыполнения.ДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписи >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,99";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28,99";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьЗаполнение_Раздел8_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздела)
	
	Отчет = КонтекстВыполнения.Отчет;
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел8_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	СписокКодовПоПродавцам = "01,02,03,04,05,07,08,09,10,11,12,13";
	КодыПоПродавцам = СтрРазделить(СписокКодовПоПродавцам, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	КонтрольныеСписки.Вставить("КодыПоПродавцам", КодыПоПродавцам);
	КонтрольныеСписки.Вставить("СписокКодовПоПродавцам", СтрЗаменить(СписокКодовПоПродавцам, ",", ", "));
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	КонтекстВыполнения.КонтекстРаздела.Вставить("ИмяРаздела", "Раздел8_Прил1");
	КонтекстВыполнения.КонтекстРаздела.Вставить("МестоОшибки", "В приложении 1 к разделу 8 ");
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, "Раздел8_Прил1", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел8_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел8_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

Функция КодыОпераций_Раздел8_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДатаПодписи = КонтекстВыполнения.ДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписи >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,99";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28,99";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел8_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения)
	
	ИмяРаздела = КонтекстВыполнения.КонтекстРаздела.ИмяРаздела;
	МестоОшибки = КонтекстВыполнения.КонтекстРаздела.МестоОшибки;
	
	ОшибкиРазделов812 = КонтекстВыполнения.ОшибкиРазделов812;
	
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	КодыПоПродавцам = КонтрольныеСписки.КодыПоПродавцам;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Документ", СтрокаДанных.ДополнительныеСведения.Документ);
	ОписаниеОшибки.Вставить("ПредставлениеДокумента", СтрокаДанных.ДополнительныеСведения.ПредставлениеДокумента);
	ОписаниеОшибки.Вставить("Контрагент", СтрокаДанных.ДополнительныеСведения.Контрагент);
	ОписаниеОшибки.Вставить("ПредставлениеКонтрагента", СтрокаДанных.ДополнительныеСведения.ПредставлениеКонтрагента);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = МестоОшибки + "не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "1", НомерСтроки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерСФ");
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерИсправленияКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеКодВалюты3");
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	ТребуетсяУказатьПродавца = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
		ТребуетсяУказатьПродавца = ТребуетсяУказатьПродавца
		                       ИЛИ КодыПоПродавцам.Найти(Операция) <> Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанКодОперации");
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НекорректныйКодОперацииРаздел8");
	КонецЕсли;
	
	ОшибкиСпискаДокументов = Новый Структура;
	ОшибкиСпискаДокументов.Вставить("НеУказаныНомерДата", Ложь);
	ОшибкиСпискаДокументов.Вставить("НеУказанНомер", Ложь);
	ОшибкиСпискаДокументов.Вставить("НеУказанаДата", Ложь);
	ОшибкиСпискаДокументов.Вставить("ДатаВнеДиапазона", Ложь);
	
	Для Каждого ДокументПодтверждения Из СтрокаДанных.ДокПдтвУпл Цикл
		ПроверяемаяДата = ДокументПодтверждения.ДатаДокПдтвУпл;
		
		Если НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвУпл)
		   И НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказаныНомерДата", Истина);
		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвУпл) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанНомер", Истина);
		ИначеЕсли НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанаДата", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ЗначениеЗаполнено(ОшибкиВДате) Тогда
				ОшибкиСпискаДокументов.Вставить("ДатаВнеДиапазона", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОшибкиСпискаДокументов.НеУказаныНомерДата Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказаныНомерДатаПД");
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.НеУказанНомер Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерПД");
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.НеУказанаДата Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаПД");
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.ДатаВнеДиапазона Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
	КонецЕсли;
	
	УказаныСведенияОПродавце = Ложь;
	Для Каждого СведенияОПродавце Из СтрокаДанных.СвПрод Цикл
		УказаныСведенияОПродавце = УказаныСведенияОПродавце ИЛИ УказаныИННКПП(СведенияОПродавце);
		ОпределитьОшибкиИННКПП(СведенияОПродавце, КонтекстВыполнения);
	КонецЦикла;
	
	Если ТребуетсяУказатьПродавца И НЕ УказаныСведенияОПродавце Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказаныРеквизитыКонтрагентаРФ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СвПос) Тогда
		ОпределитьОшибкиИННКПП(СтрокаДанных.СвПос, КонтекстВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел9_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздела)
	
	Отчет = КонтекстВыполнения.Отчет;
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел9_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	КонтекстВыполнения.КонтекстРаздела.Вставить("ИмяРаздела", "Раздел9");
	КонтекстВыполнения.КонтекстРаздела.Вставить("МестоОшибки", "В разделе 9 ");
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, "Раздел9", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел9_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел9_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

Функция КодыОпераций_Раздел9_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДатаПодписи = КонтекстВыполнения.ДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписи >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьЗаполнение_Раздел9_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздела)
	
	Отчет = КонтекстВыполнения.Отчет;
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел9_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	КонтекстВыполнения.КонтекстРаздела.Вставить("ИмяРаздела", "Раздел9_Прил1");
	КонтекстВыполнения.КонтекстРаздела.Вставить("МестоОшибки", "В приложении 1 к разделу 9 ");
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, "Раздел9_Прил1", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел9_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел9_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

Функция КодыОпераций_Раздел9_Прил1_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДатаПодписи = КонтекстВыполнения.ДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписи >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел9_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения)
	
	ИмяРаздела = КонтекстВыполнения.КонтекстРаздела.ИмяРаздела;
	МестоОшибки = КонтекстВыполнения.КонтекстРаздела.МестоОшибки;
	
	ОшибкиРазделов812 = КонтекстВыполнения.ОшибкиРазделов812;
	
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Документ", СтрокаДанных.ДополнительныеСведения.Документ);
	ОписаниеОшибки.Вставить("ПредставлениеДокумента", СтрокаДанных.ДополнительныеСведения.ПредставлениеДокумента);
	ОписаниеОшибки.Вставить("Контрагент", СтрокаДанных.ДополнительныеСведения.Контрагент);
	ОписаниеОшибки.Вставить("ПредставлениеКонтрагента", СтрокаДанных.ДополнительныеСведения.ПредставлениеКонтрагента);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = МестоОшибки + "не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "1", НомерСтроки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерСФ");
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаСФ");
	Иначе
		Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерИсправленияСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерИсправленияКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеКодВалюты3");
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанКодОперации");
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НекорректныйКодОперацииРаздел9");
	КонецЕсли;
	
	ОшибкиСпискаДокументов = Новый Структура;
	ОшибкиСпискаДокументов.Вставить("НеУказаныНомерДата", Ложь);
	ОшибкиСпискаДокументов.Вставить("НеУказанНомер", Ложь);
	ОшибкиСпискаДокументов.Вставить("НеУказанаДата", Ложь);
	ОшибкиСпискаДокументов.Вставить("ДатаВнеДиапазона", Ложь);
	
	Для Каждого ДокументПодтверждения Из СтрокаДанных.ДокПдтвОпл Цикл
		ПроверяемаяДата = ДокументПодтверждения.ДатаДокПдтвОпл;
		
		Если НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвОпл)
		   И НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказаныНомерДата", Истина);
		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвОпл) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанНомер", Истина);
		ИначеЕсли НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанаДата", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ЗначениеЗаполнено(ОшибкиВДате) Тогда
				ОшибкиСпискаДокументов.Вставить("ДатаВнеДиапазона", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОшибкиСпискаДокументов.НеУказаныНомерДата Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказаныНомерДатаПД");
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.НеУказанНомер Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерПД");
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.НеУказанаДата Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаПД");
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.ДатаВнеДиапазона Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
	КонецЕсли;
	
	Для Каждого СведенияОПокупателе Из СтрокаДанных.СвПокуп Цикл
		ОпределитьОшибкиИННКПП(СведенияОПокупателе, КонтекстВыполнения);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СвПос) Тогда
		ОпределитьОшибкиИННКПП(СтрокаДанных.СвПос, КонтекстВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел10_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздела)
	
	Отчет = КонтекстВыполнения.Отчет;
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел10_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	КонтекстВыполнения.КонтекстРаздела.Вставить("ИмяРаздела", "Раздел10");
	КонтекстВыполнения.КонтекстРаздела.Вставить("МестоОшибки", "В разделе 10 ");
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, "Раздел10", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел10_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел10_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

Функция КодыОпераций_Раздел10_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДатаПодписи = КонтекстВыполнения.ДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписи >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел10_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения)
	
	ИмяРаздела = КонтекстВыполнения.КонтекстРаздела.ИмяРаздела;
	МестоОшибки = КонтекстВыполнения.КонтекстРаздела.МестоОшибки;
	
	ОшибкиРазделов812 = КонтекстВыполнения.ОшибкиРазделов812;
	
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Документ", СтрокаДанных.ДополнительныеСведения.Документ);
	ОписаниеОшибки.Вставить("ПредставлениеДокумента", СтрокаДанных.ДополнительныеСведения.ПредставлениеДокумента);
	ОписаниеОшибки.Вставить("Контрагент", СтрокаДанных.ДополнительныеСведения.Контрагент);
	ОписаниеОшибки.Вставить("ПредставлениеКонтрагента", СтрокаДанных.ДополнительныеСведения.ПредставлениеКонтрагента);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = МестоОшибки + "не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "2", НомерСтроки);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаВыст;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаВыставленияСФ");
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВыставленияСФВнеДиапазона");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерСФ");
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаСФ");
	Иначе
		Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерИсправленияКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанКодОперации");
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НекорректныйКодОперацииРаздел10");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СвПокуп) Тогда
		ОпределитьОшибкиИННКПП(СтрокаДанных.СвПокуп, КонтекстВыполнения);
	КонецЕсли;
	
	Для Каждого СведенияОПосредническойДеятельности Из СтрокаДанных.СвПосрДеят Цикл
		
		Если НЕ ЗначениеЗаполнено(СведенияОПосредническойДеятельности.НомСчФОтПрод)
		   И НЕ ЗначениеЗаполнено(СведенияОПосредническойДеятельности.ДатаСчФОтПрод) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НетСФКомитента");
		ИначеЕсли НЕ ЗначениеЗаполнено(СведенияОПосредническойДеятельности.НомСчФОтПрод) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерСФКомитента");
		ИначеЕсли НЕ ЗначениеЗаполнено(СведенияОПосредническойДеятельности.ДатаСчФОтПрод) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаСФКомитента");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОПосредническойДеятельности.ОКВ) И СтрДлина(СокрЛП(СведенияОПосредническойДеятельности.ОКВ)) <> 3 Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеКодВалюты3");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОПосредническойДеятельности.СвПрод) Тогда
			ОпределитьОшибкиИННКПП(СведенияОПосредническойДеятельности.СвПрод, КонтекстВыполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДанных.СвПосрДеят.Количество() = 0 Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НетСведенийПосредническойДеятельности");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел11_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздела)
	
	Отчет = КонтекстВыполнения.Отчет;
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел11_ФормаОтчета2015Кв1(КонтекстВыполнения);
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	СписокКодовВидовСделки = "1,2,3,4";
	ДопустимыеКодыВидовСделки = СтрРазделить(СписокКодовВидовСделки, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	КонтрольныеСписки.Вставить("ДопустимыеКодыВидовСделки", ДопустимыеКодыВидовСделки);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	КонтекстВыполнения.КонтекстРаздела.Вставить("ИмяРаздела", "Раздел11");
	КонтекстВыполнения.КонтекстРаздела.Вставить("МестоОшибки", "В разделе 11 ");
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, "Раздел11", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел11_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел11_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

Функция КодыОпераций_Раздел11_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	ДатаПодписи = КонтекстВыполнения.ДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписи >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел11_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения)
	
	ИмяРаздела = КонтекстВыполнения.КонтекстРаздела.ИмяРаздела;
	МестоОшибки = КонтекстВыполнения.КонтекстРаздела.МестоОшибки;
	
	ОшибкиРазделов812 = КонтекстВыполнения.ОшибкиРазделов812;
	
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	ДопустимыеКодыВидовСделки = КонтрольныеСписки.ДопустимыеКодыВидовСделки;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Документ", СтрокаДанных.ДополнительныеСведения.Документ);
	ОписаниеОшибки.Вставить("ПредставлениеДокумента", СтрокаДанных.ДополнительныеСведения.ПредставлениеДокумента);
	ОписаниеОшибки.Вставить("Контрагент", СтрокаДанных.ДополнительныеСведения.Контрагент);
	ОписаниеОшибки.Вставить("ПредставлениеКонтрагента", СтрокаДанных.ДополнительныеСведения.ПредставлениеКонтрагента);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = МестоОшибки + "не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, ИмяРаздела, "1", НомерСтроки);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаПолуч;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаПолученияСФ");
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаПолученияСФВнеДиапазона");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерСФ");
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаСФ");
	Иначе
		Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерИсправленияКорректировочногоСФ");
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаИсправленияКорректировочногоСФ");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.КодВидСд) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанКодВидаСделки");
	ИначеЕсли ДопустимыеКодыВидовСделки.Найти(СтрокаДанных.КодВидСд) = Неопределено Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеверныйКодВидаСделки");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеКодВалюты3");
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанКодОперации");
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НекорректныйКодОперацииРаздел11");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СвПрод) Тогда
		ОпределитьОшибкиИННКПП(СтрокаДанных.СвПрод, КонтекстВыполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СвКомис) Тогда
		ОпределитьОшибкиИННКПП(СтрокаДанных.СвКомис, КонтекстВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел12_ФормаОтчета2015Кв1(КонтекстВыполнения, ДанныеРаздела)
	
	Отчет = КонтекстВыполнения.Отчет;
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	КонтекстВыполнения.КонтекстРаздела.Вставить("ИмяРаздела", "Раздел12");
	КонтекстВыполнения.КонтекстРаздела.Вставить("МестоОшибки", "В разделе 12 ");
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, "Раздел12", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел12_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел12_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел12_ФормаОтчета2015Кв1(СтрокаДанных, НомерСтроки, КонтекстВыполнения)
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Документ", СтрокаДанных.ДополнительныеСведения.Документ);
	ОписаниеОшибки.Вставить("ПредставлениеДокумента", СтрокаДанных.ДополнительныеСведения.ПредставлениеДокумента);
	ОписаниеОшибки.Вставить("Контрагент", СтрокаДанных.ДополнительныеСведения.Контрагент);
	ОписаниеОшибки.Вставить("ПредставлениеКонтрагента", СтрокаДанных.ДополнительныеСведения.ПредставлениеКонтрагента);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФ) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанНомерСФ");
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФ;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеУказанаДатаСФ");
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ЗафиксироватьОшибку812(КонтекстВыполнения, "ДатаВнеДиапазона");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ЗафиксироватьОшибку812(КонтекстВыполнения, "НеКодВалюты3");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СвПокуп) Тогда
		ОпределитьОшибкиИННКПП(СтрокаДанных.СвПокуп, КонтекстВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПредставлениеОшибок_ФормаОтчета2015Кв1(КонтекстВыполнения)
	
	МакетОформления = КонтекстВыполнения.МакетОформления;
	НаименованиеДекларации = КонтекстВыполнения.НаименованиеДекларации;
	
	Секция_ВерхнийОтступ   = МакетОформления.ПолучитьОбласть("ВерхнийОтступ");
	Секция_ЗаголовокОтчета = МакетОформления.ПолучитьОбласть("ЗаголовокОтчета");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	ПредставлениеОшибок = Новый ТабличныйДокумент;
	ПредставлениеОшибок.Вывести(Секция_ВерхнийОтступ);
	
	Секция_ЗаголовокОтчета.Параметры.НаименованиеДекларации = НаименованиеДекларации;
	ПредставлениеОшибок.Вывести(Секция_ЗаголовокОтчета);
	ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
	
	Если КонтекстВыполнения.КоличествоОшибок = 0 Тогда
		Секция_БезОшибок = МакетОформления.ПолучитьОбласть("БезОшибок");
		ПредставлениеОшибок.Вывести(Секция_БезОшибок);
		
	Иначе
		ВывестиОшибки_ФормаОтчета2015Кв1(КонтекстВыполнения, ПредставлениеОшибок, "ОшибкиТитульногоЛиста");
		ВывестиОшибки_ФормаОтчета2015Кв1(КонтекстВыполнения, ПредставлениеОшибок, "ОшибкиОтчета");
		ВывестиОшибки_ФормаОтчета2015Кв1(КонтекстВыполнения, ПредставлениеОшибок, "ОшибкиРазделов17");
		
		ВыявленныеТипыОшибок = КонтекстВыполнения.ОшибкиРазделов812.Скопировать();
		ВыявленныеТипыОшибок.Свернуть("ТипОшибки");
		
		Для Каждого ГруппаОшибокПоТипу Из ВыявленныеТипыОшибок Цикл
			ОшибкиПоТипу = КонтекстВыполнения.ОшибкиРазделов812.НайтиСтроки(Новый Структура("ТипОшибки", ГруппаОшибокПоТипу.ТипОшибки));
			
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ГруппаОшибокПоТипу.ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			
			ГруппыОшибокПоМестуИсправления = КонтекстВыполнения.ОшибкиРазделов812.Скопировать(ОшибкиПоТипу);
			ГруппыОшибокПоМестуИсправления.Свернуть("ТипОшибки, Контрагент, ПредставлениеКонтрагента");
			ГруппыОшибокПоМестуИсправления.Сортировать("ПредставлениеКонтрагента");
			
			ПредставлениеОшибок.НачатьГруппуСтрок(); // описание исправления ошибки сворачивается вместе с контрагентами
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ГруппаОшибокПоТипу.ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_Контрагент = МакетОформления.ПолучитьОбласть("Контрагент");
			Для Каждого ГруппаОшибокПоМестуИсправления Из ГруппыОшибокПоМестуИсправления Цикл
				Секция_Контрагент.Параметры.ПредставлениеКонтрагента = ГруппаОшибокПоМестуИсправления.ПредставлениеКонтрагента;
				Секция_Контрагент.Параметры.СсылкаНаКонтрагента      = ГруппаОшибокПоМестуИсправления.Контрагент;
				ПредставлениеОшибок.Вывести(Секция_Контрагент);
				
				ОтборДокументов = Новый Структура;
				ОтборДокументов.Вставить("ТипОшибки",                ГруппаОшибокПоМестуИсправления.ТипОшибки);
				ОтборДокументов.Вставить("Контрагент",               ГруппаОшибокПоМестуИсправления.Контрагент);
				ОтборДокументов.Вставить("ПредставлениеКонтрагента", ГруппаОшибокПоМестуИсправления.ПредставлениеКонтрагента);
				
				ДокументыПоОшибке = КонтекстВыполнения.ОшибкиРазделов812.НайтиСтроки(ОтборДокументов);
				
				Секция_ДокументОшибки = МакетОформления.ПолучитьОбласть("ДокументОшибки");
				ПредставлениеОшибок.НачатьГруппуСтрок(, Ложь);
				Для Каждого ДокументПоОшибке Из ДокументыПоОшибке Цикл
					Секция_ДокументОшибки.Параметры.ПредставлениеДокументаОшибки = ДокументПоОшибке.ПредставлениеДокумента;
					Секция_ДокументОшибки.Параметры.СсылкаНаДокумент             = ДокументПоОшибке.Документ;
					ПредставлениеОшибок.Вывести(Секция_ДокументОшибки);
				КонецЦикла;
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЦикла;
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		КонецЦикла;
	КонецЕсли;
	
	КонтекстВыполнения.ПредставлениеОшибок = ПредставлениеОшибок;
	
КонецПроцедуры

Процедура ВывестиОшибки_ФормаОтчета2015Кв1(КонтекстВыполнения, ПредставлениеОшибок, ИмяТаблицыОшибок)
	
	МакетОформления = КонтекстВыполнения.МакетОформления;
	Ошибки = КонтекстВыполнения[ИмяТаблицыОшибок];
	
	Секция_РазрывСекций = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	Если Ошибки.Количество() > 0 Тогда
		Секция_ЗаголовокОшибок = МакетОформления.ПолучитьОбласть("Заголовок" + ИмяТаблицыОшибок);
		ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибок);
		
		ПредставлениеОшибок.НачатьГруппуСтрок();
		Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ИмяТаблицыОшибок);
		ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
		ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
		
		Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
		Для Каждого СтандартнаяОшибка Из Ошибки Цикл
			ПозицияПерехода = Новый Структура;
			ПозицияПерехода.Вставить("Раздел", СтандартнаяОшибка.Раздел);
			ПозицияПерехода.Вставить("Показатель", СтандартнаяОшибка.Показатель);
			ПозицияПерехода.Вставить("Страница", СтандартнаяОшибка.Страница);
			
			Если ТипЗнч(СтандартнаяОшибка.ОписаниеОшибки) = Тип("Структура") Тогда
				Секция_ОсобоеОтображение = МакетОформления.ПолучитьОбласть(СтандартнаяОшибка.ОписаниеОшибки.ИмяШаблона);
				Секция_ОсобоеОтображение.Параметры.Заполнить(СтандартнаяОшибка.ОписаниеОшибки.ПараметрыШаблона);
				Секция_ОсобоеОтображение.Параметры.ПозицияПерехода = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_ОсобоеОтображение);
			Иначе
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = СтандартнаяОшибка.ОписаниеОшибки;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
			КонецЕсли;
		КонецЦикла;
		
		ПредставлениеОшибок.ЗакончитьГруппуСтрок();
		ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеРазделаНДСИзРегистра(Отчет, ИмяРаздела, ДанныеСегментированы)
	
	Если ДанныеСегментированы Тогда
		СекцииРаздела = СписокСекцийРазделаИзРегистра(Отчет, ИмяРаздела);
		
		Если СекцииРаздела.Количество() > 0 Тогда
			ДанныеРаздела = СекцииРаздела.ВыгрузитьКолонку("НомерПервойСтроки");
		Иначе
			ДанныеРаздела = Неопределено;
		КонецЕсли;
		
	Иначе
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = Отчет.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			ДанныеРаздела = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
			Если ДанныеРаздела.Записи.Количество() = 0 Тогда
				ДанныеРаздела = Неопределено;
			КонецЕсли;
		Иначе
			ДанныеРаздела = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

Функция СписокСекцийРазделаИзРегистра(Отчет, ИмяРаздела)
	
	Префикс = "Данные" + ИмяРаздела + ".";
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла Как ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", Префикс + "%");
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", Отчет);
	
	СписокСтраницРаздела = Новый ТаблицаЗначений;
	СписокСтраницРаздела.Колонки.Добавить("Представление",        Новый ОписаниеТипов("Строка"));
	СписокСтраницРаздела.Колонки.Добавить("НомерПервойСтроки",    Новый ОписаниеТипов("Число"));
	СписокСтраницРаздела.Колонки.Добавить("НомерПоследнейСтроки", Новый ОписаниеТипов("Число"));
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Пока ВыборкаСегментов.Следующий() Цикл
		НомерПервойСтрокиСегмента = Сред(ВыборкаСегментов.ВидДополнительногоФайла, СтрДлина(Префикс) + 1);
		НомерПервойСтрокиСегмента = ТипЧисло.ПривестиЗначение(НомерПервойСтрокиСегмента);
		
		Страница = СписокСтраницРаздела.Добавить();
		Страница.НомерПервойСтроки = НомерПервойСтрокиСегмента;
	КонецЦикла;
	
	СписокСтраницРаздела.Сортировать("НомерПервойСтроки");
	ВсегоСтраниц = СписокСтраницРаздела.Количество();
	
	Для Инд = 0 По ВсегоСтраниц - 2 Цикл
		СписокСтраницРаздела[Инд].НомерПоследнейСтроки = СписокСтраницРаздела[Инд + 1].НомерПервойСтроки - 1;
	КонецЦикла;
	
	Если ВсегоСтраниц > 0 Тогда
		НомерПервойСтрокиПоследнегоСегмента = СписокСтраницРаздела[ВсегоСтраниц-1].НомерПервойСтроки;
		ДанныеСегмента = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(Отчет, ИмяРаздела, НомерПервойСтрокиПоследнегоСегмента);
		ВсегоСтрокВСегменте = ДанныеСегмента.Количество();
		СписокСтраницРаздела[ВсегоСтраниц-1].НомерПоследнейСтроки = НомерПервойСтрокиПоследнегоСегмента - 1 + ВсегоСтрокВСегменте;
	КонецЕсли;
	
	Для Каждого Страница Из СписокСтраницРаздела Цикл
		НомерСтраницы = СписокСтраницРаздела.Индекс(Страница) + 1;
		Страница.Представление = "Часть " + СтрокаЧГ0(НомерСтраницы);
	КонецЦикла;
	
	Возврат СписокСтраницРаздела;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция МногострочнаяЧастьПуста(Данные, СтрПоказатели, СтрПоказателиСуммы = Неопределено)
	
	Если ЗначениеЗаполнено(СтрПоказателиСуммы) Тогда
		ПоказателиСуммы = Новый Структура(СтрПоказателиСуммы);
	Иначе
		ПоказателиСуммы = Новый Структура;
	КонецЕсли;
	
	СтруктураПоказателей = Новый Структура(СтрПоказатели);
	Для Каждого Эл Из СтруктураПоказателей Цикл
		Инд = 1;
		Пока Данные.Свойство(Эл.Ключ + "_" + СтрокаЧГ0(Инд)) Цикл
			Если ЗначениеПоказателяЗаполнено(Данные[Эл.Ключ + "_" + СтрокаЧГ0(Инд)], ПоказателиСуммы.Свойство(Эл.Ключ)) Тогда
				Возврат Ложь;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Возврат ?(ЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Процедура ОпределитьОшибкиИННКПП(СведенияОКонтрагенте, КонтекстВыполнения)
	
	ОписаниеОшибки = КонтекстВыполнения.КонтекстРаздела.ОписаниеОшибки;
	
	ЭтоФизЛицо = СведенияОКонтрагенте.Свойство("ИННФЛ");
	
	ПоКонтрагенту = Новый Структура;
	ПоКонтрагенту.Вставить("Контрагент", СведенияОКонтрагенте.Контрагент);
	ПредставлениеКонтрагента = СведенияОКонтрагенте.КонтрагентНаименование + ?(ЭтоФизЛицо, ", ИНН " + СведенияОКонтрагенте.ИННФЛ, ", ИНН " + СведенияОКонтрагенте.ИННЮЛ + ", КПП " + СведенияОКонтрагенте.КПП);
	ПоКонтрагенту.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	ОписаниеОшибки.Вставить("ПоКонтрагенту", ПоКонтрагенту);
	
	ВесаРазрядов = КонтекстВыполнения.Кэш.ВесаРазрядовИНН;
	ПроверенныеИНН = КонтекстВыполнения.Кэш.ПроверенныеИНН;
	
	Если ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ИННФЛ) Тогда
			КэшированнаяПроверка = ПроверенныеИНН.Найти(СведенияОКонтрагенте.ИННФЛ, "ИНН");
			Если КэшированнаяПроверка <> Неопределено Тогда
				Ошибки = КэшированнаяПроверка.Ошибки;
			Иначе
				Ошибки = ОшибкиФорматаИННФЛ(СведенияОКонтрагенте.ИННФЛ, ВесаРазрядов);
				НоваяЗаписьКэша = ПроверенныеИНН.Добавить();
				НоваяЗаписьКэша.ИНН = СведенияОКонтрагенте.ИННФЛ;
				НоваяЗаписьКэша.Ошибки = Ошибки;
			КонецЕсли;
		Иначе
			Ошибки = ОшибкиФорматаИННФЛ(СведенияОКонтрагенте.ИННФЛ, ВесаРазрядов);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ИННЮЛ) Тогда
			КэшированнаяПроверка = ПроверенныеИНН.Найти(СведенияОКонтрагенте.ИННЮЛ, "ИНН");
			Если КэшированнаяПроверка <> Неопределено Тогда
				Ошибки = КэшированнаяПроверка.Ошибки;
			Иначе
				Ошибки = ОшибкиФорматаИННЮЛ(СведенияОКонтрагенте.ИННЮЛ, ВесаРазрядов);
				НоваяЗаписьКэша = ПроверенныеИНН.Добавить();
				НоваяЗаписьКэша.ИНН = СведенияОКонтрагенте.ИННЮЛ;
				НоваяЗаписьКэша.Ошибки = Ошибки;
			КонецЕсли;
		Иначе
			Ошибки = ОшибкиФорматаИННЮЛ(СведенияОКонтрагенте.ИННЮЛ, ВесаРазрядов);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоФизЛицо Тогда
		ОшибкиКПП = ОшибкиФорматаКПП(СведенияОКонтрагенте.КПП);
		Для Каждого ОшибкаКПП Из ОшибкиКПП Цикл
			Ошибки.Добавить(ОшибкаКПП);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Ошибка Из Ошибки Цикл
		ЗафиксироватьОшибку812(КонтекстВыполнения, Ошибка);
	КонецЦикла;
	
	ОписаниеОшибки.Удалить("ПоКонтрагенту");
	
КонецПроцедуры

Функция ОшибкиФорматаИННФЛ(Знач ПроверяемоеЗначение, ВесаРазрядов = Неопределено)
	
	ПроверяемоеЗначение = СокрЛП(ПроверяемоеЗначение);
	
	Ошибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Ошибки.Добавить("НеУказанИННФЛ");
	Иначе
		Если СтрДлина(ПроверяемоеЗначение) <> 12 Тогда
			Ошибки.Добавить("НеИНН12");
		КонецЕсли;
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПроверяемоеЗначение) Тогда
			Ошибки.Добавить("НедопустимыеСимволыИНН");
		КонецЕсли;
		
		Если Лев(ПроверяемоеЗначение, 2) = "00" Тогда
			Ошибки.Добавить("ИНН00");
		КонецЕсли;
		
		МожноВычислитьКонтрольноеЧисло = (Ошибки.Количество() = 0);
		Если МожноВычислитьКонтрольноеЧисло Тогда
			КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ПроверяемоеЗначение);
			
			Если КонтрольноеЧислоИНН <> Прав(ПроверяемоеЗначение, 2) Тогда
				Ошибки.Добавить("НеверноеКонтрольноеЧислоИНН");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

Функция ОшибкиФорматаИННЮЛ(Знач ПроверяемоеЗначение, ВесаРазрядов = Неопределено)
	
	ПроверяемоеЗначение = СокрЛП(ПроверяемоеЗначение);
	
	Ошибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Ошибки.Добавить("НеУказанИННЮЛ");
	Иначе
		Если СтрДлина(ПроверяемоеЗначение) <> 10 Тогда
			Ошибки.Добавить("НеИНН10");
		КонецЕсли;
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПроверяемоеЗначение) Тогда
			Ошибки.Добавить("НедопустимыеСимволыИНН");
		КонецЕсли;
		
		Если Лев(ПроверяемоеЗначение, 2) = "00" Тогда
			Ошибки.Добавить("ИНН00");
		КонецЕсли;
		
		МожноВычислитьКонтрольноеЧисло = (Ошибки.Количество() = 0);
		Если МожноВычислитьКонтрольноеЧисло Тогда
			КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ПроверяемоеЗначение);
			
			Если КонтрольноеЧислоИНН <> Прав(ПроверяемоеЗначение, 1) Тогда
				Ошибки.Добавить("НеверноеКонтрольноеЧислоИНН");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

Функция КонтрольноеЧислоИНН(ИНН, ВесаРазрядов = Неопределено)
	
	Если ВесаРазрядов <> Неопределено Тогда
		ВесаЮЛ   = ВесаРазрядов.ВесаЮЛ;
		ВесаФЛ11 = ВесаРазрядов.ВесаФЛ11;
		ВесаФЛ12 = ВесаРазрядов.ВесаФЛ12;
	Иначе
		ВесаЮЛ   = ВесаЮЛ();
		ВесаФЛ11 = ВесаФЛ11();
		ВесаФЛ12 = ВесаФЛ12();
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	КонтрольноеЧисло = Неопределено;
	
	Если СтрДлина(СокрЛП(ИНН)) = 10 Тогда
		КонтрольнаяСумма = 0;
		
		Для Инд = 1 По 9 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма = КонтрольнаяСумма + ЧисловоеПредставлениеРазряда * ВесаЮЛ[Инд];
		КонецЦикла;
		
		КонтрольнаяСумма = КонтрольнаяСумма % 11 % 10;
		
		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма);
		
	ИначеЕсли СтрДлина(СокрЛП(ИНН)) = 12 Тогда
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Инд = 1 По 10 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + ЧисловоеПредставлениеРазряда * ВесаФЛ11[Инд];
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + ЧисловоеПредставлениеРазряда * ВесаФЛ12[Инд];
		КонецЦикла;
		
		КонтрольнаяСумма11 = КонтрольнаяСумма11 % 11 % 10;
		
		КонтрольнаяСумма12 = КонтрольнаяСумма12 + КонтрольнаяСумма11 * ВесаФЛ12[11];
		КонтрольнаяСумма12 = КонтрольнаяСумма12 % 11 % 10;
		
		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма11)
		                 + СтрокаЧГ0(КонтрольнаяСумма12);
		
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
	
КонецФункции

Функция ВесаЮЛ()
	
	ВесаЮЛ = Новый Массив(10);
	ВесаЮЛ[0] = Неопределено;
	ВесаЮЛ[1] = 2;
	ВесаЮЛ[2] = 4;
	ВесаЮЛ[3] = 10;
	ВесаЮЛ[4] = 3;
	ВесаЮЛ[5] = 5;
	ВесаЮЛ[6] = 9;
	ВесаЮЛ[7] = 4;
	ВесаЮЛ[8] = 6;
	ВесаЮЛ[9] = 8;
	
	Возврат ВесаЮЛ;
	
КонецФункции

Функция ВесаФЛ11()
	
	ВесаФЛ11 = Новый Массив(12);
	ВесаФЛ11[0] = Неопределено;
	ВесаФЛ11[1] = 7;
	ВесаФЛ11[2] = 2;
	ВесаФЛ11[3] = 4;
	ВесаФЛ11[4] = 10;
	ВесаФЛ11[5] = 3;
	ВесаФЛ11[6] = 5;
	ВесаФЛ11[7] = 9;
	ВесаФЛ11[8] = 4;
	ВесаФЛ11[9] = 6;
	ВесаФЛ11[10] = 8;
	ВесаФЛ11[11] = 0;
	
	Возврат ВесаФЛ11;
	
КонецФункции

Функция ВесаФЛ12()
	
	ВесаФЛ12 = Новый Массив(12);
	ВесаФЛ12[0] = Неопределено;
	ВесаФЛ12[1] = 3;
	ВесаФЛ12[2] = 7;
	ВесаФЛ12[3] = 2;
	ВесаФЛ12[4] = 4;
	ВесаФЛ12[5] = 10;
	ВесаФЛ12[6] = 3;
	ВесаФЛ12[7] = 5;
	ВесаФЛ12[8] = 9;
	ВесаФЛ12[9] = 4;
	ВесаФЛ12[10] = 6;
	ВесаФЛ12[11] = 8;
	
	Возврат ВесаФЛ12;
	
КонецФункции

Функция ОшибкиФорматаКПП(ПроверяемоеЗначение)
	
	Ошибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Ошибки.Добавить("НеУказанКПП");
	Иначе
		Если СтрДлина(ПроверяемоеЗначение) <> 9 Тогда
			Ошибки.Добавить("НеКПП9");
		КонецЕсли;
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(ПроверяемоеЗначение, 4))
		 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ПроверяемоеЗначение, 7))
		 ИЛИ НЕ ТолькоСимволы09AZ(Сред(ПроверяемоеЗначение, 5, 2)) Тогда
			Ошибки.Добавить("НедопустимыеСимволыКПП");
		КонецЕсли;
		
		Если Лев(ПроверяемоеЗначение, 2) = "00" Тогда
			Ошибки.Добавить("КПП00");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

Функция ТолькоСимволы09AZ(ПроверяемоеЗначение)
	
	РезультатПроверки = Истина;
	
	Код0 = КодСимвола("0");
	Код9 = КодСимвола("9");
	КодA = КодСимвола("A");
	КодZ = КодСимвола("Z");
	
	Для Инд = 1 По 2 Цикл
		ПроверяемыйСимвол = Сред(ПроверяемоеЗначение, Инд, 1);
		КодПроверяемогоСимвола = КодСимвола(ПроверяемыйСимвол);
		
		КодВДиапазонах = Код0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= Код9
		             ИЛИ КодA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодZ;
		
		Если НЕ КодВДиапазонах Тогда
			РезультатПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция УказаныИННКПП(Сведения)
	
	Если Сведения.Свойство("ИННФЛ") Тогда
		Возврат ЗначениеЗаполнено(Сведения.ИННФЛ);
	Иначе
		Возврат ЗначениеЗаполнено(Сведения.ИННЮЛ) ИЛИ ЗначениеЗаполнено(Сведения.КПП);
	КонецЕсли;
	
КонецФункции

Функция ОшибкиТипа_ДатаТип(ПроверяемоеЗначение)
	
	Ошибки = Неопределено;
	
	Если ТипЗнч(ПроверяемоеЗначение) <> Тип("Дата") Тогда
		ТипЧисло = Новый ОписаниеТипов("Число");
		ГодПроверяемогоЗначения = ТипЧисло.ПривестиЗначение(Прав(ПроверяемоеЗначение, 4));
	Иначе
		ГодПроверяемогоЗначения = Год(ПроверяемоеЗначение);
	КонецЕсли;
	
	Если ГодПроверяемогоЗначения < 1900 ИЛИ ГодПроверяемогоЗначения > 2099 Тогда
		Ошибки = "ВыходитЗаПериод";
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

Процедура ЗафиксироватьОшибкуТитульногоЛиста(КонтекстВыполнения, ОписаниеОшибки, Раздел, Показатель, Страница = Неопределено)
	
	Ошибки = КонтекстВыполнения.ОшибкиТитульногоЛиста;
	
	НоваяОшибка = Ошибки.Добавить();
	
	НоваяОшибка.ОписаниеОшибки = ОписаниеОшибки;
	НоваяОшибка.Раздел         = Раздел;
	НоваяОшибка.Показатель     = Показатель;
	НоваяОшибка.Страница       = Страница;
	
	КонтекстВыполнения.КоличествоОшибок = КонтекстВыполнения.КоличествоОшибок + 1;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуОтчета(КонтекстВыполнения, ОписаниеОшибки, Раздел, Показатель, Страница = Неопределено)
	
	Ошибки = КонтекстВыполнения.ОшибкиОтчета;
	
	НоваяОшибка = Ошибки.Добавить();
	
	НоваяОшибка.ОписаниеОшибки = ОписаниеОшибки;
	НоваяОшибка.Раздел         = Раздел;
	НоваяОшибка.Показатель     = Показатель;
	НоваяОшибка.Страница       = Страница;
	
	КонтекстВыполнения.КоличествоОшибок = КонтекстВыполнения.КоличествоОшибок + 1;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуРазделов17(КонтекстВыполнения, ОписаниеОшибки, Раздел, Показатель, Страница = Неопределено)
	
	Ошибки = КонтекстВыполнения.ОшибкиРазделов17;
	
	НоваяОшибка = Ошибки.Добавить();
	
	НоваяОшибка.ОписаниеОшибки = ОписаниеОшибки;
	НоваяОшибка.Раздел         = Раздел;
	НоваяОшибка.Показатель     = Показатель;
	НоваяОшибка.Страница       = Страница;
	
	КонтекстВыполнения.КоличествоОшибок = КонтекстВыполнения.КоличествоОшибок + 1;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибку812(КонтекстВыполнения, Ошибка)
	
	ОшибкиРазделов812 = КонтекстВыполнения.ОшибкиРазделов812;
	ОписаниеОшибки = КонтекстВыполнения.КонтекстРаздела.ОписаниеОшибки;
	
	НоваяОшибка = ОшибкиРазделов812.Добавить();
	НоваяОшибка.ТипОшибки = Ошибка;
	Если ОписаниеОшибки.Свойство("ПоКонтрагенту") Тогда
		НоваяОшибка.Контрагент = ОписаниеОшибки.ПоКонтрагенту.Контрагент;
		НоваяОшибка.ПредставлениеКонтрагента = ОписаниеОшибки.ПоКонтрагенту.ПредставлениеКонтрагента;
	Иначе
		НоваяОшибка.Контрагент = ОписаниеОшибки.Контрагент;
		НоваяОшибка.ПредставлениеКонтрагента = ОписаниеОшибки.ПредставлениеКонтрагента;
	КонецЕсли;
	НоваяОшибка.Документ = ОписаниеОшибки.Документ;
	НоваяОшибка.ПредставлениеДокумента = ОписаниеОшибки.ПредставлениеДокумента;
	
	КонтекстВыполнения.КоличествоОшибок = КонтекстВыполнения.КоличествоОшибок + 1;
	
КонецПроцедуры

Функция НоваяТаблицаОшибок()
	
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("ОписаниеОшибки");
	Ошибки.Колонки.Добавить("Раздел");
	Ошибки.Колонки.Добавить("Показатель");
	Ошибки.Колонки.Добавить("Страница");
	
	Возврат Ошибки;
	
КонецФункции

#КонецОбласти
