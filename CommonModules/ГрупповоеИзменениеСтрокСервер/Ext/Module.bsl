////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, предназначенные для группового изменения строк в табличной
//  части и управления оформлением панели редактирования.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается при создании формы на сервере; заполняет список выбора поля ввода Действие панели редактирования таблицы.
//
// Параметры:
//  НаборЭлементов - Структура - набор необходимых реквизитов и элементов формы, входящих в панель редактирования.
//    * ДокументСсылка  - ДокументСсылка - Ссылка на документ, в котором происходит редактирование ТЧ.
//    * ИмяТЧ  - Строка - Имя ТЧ, которая будет редактироваться.
//    * ДействиеЭлемент - ПолеФормы - Элемент формы, содержащий выбранное действие для группового изменения строк.
//  Действие       - ПеречислениеСсылка - Выбранное действие для группового изменения строк.
//
Процедура ПриСозданииНаСервере(НаборЭлементов, Действие) Экспорт
	
	НаборЭлементов.ПанельРедактирования.Видимость = Ложь;
	НаборЭлементов.КолонкаПометка.Видимость = Ложь;
	НаборЭлементов.КолонкаПометка.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	НаборЭлементов.КолонкаНомерСтроки.Видимость = Истина;
	
	КлючОбъекта = ТипЗнч(НаборЭлементов.ДокументСсылка);
	КлючНастроек = "ГрупповоеИзменениеСтрок_" + НаборЭлементов.ИмяТЧ;
	Действие = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
КонецПроцедуры

// Управляет видимостью командной панели
Процедура ПоказатьСкрытьПанельРедактирования(Форма, НаборЭлементов, СостояниеПерехода, ИзменяетДанные = Неопределено) Экспорт
	
	ВидимостьПанели = НЕ НаборЭлементов.ПанельРедактирования.Видимость;
	НаборЭлементов.ПанельРедактирования.Видимость = ВидимостьПанели;
	
	СостояниеПерехода = ?(ВидимостьПанели, 1, 0);
	НастроитьОформлениеПанелиРедактирования(Форма, НаборЭлементов, СостояниеПерехода, Неопределено, ИзменяетДанные);
	
	УстановитьПредставлениеДействия(НаборЭлементов);
	
КонецПроцедуры

// Записывает в пользовательские настройки последнее выбранное действие для изменения таблицы.
// Вызывается при закрытии формы.
//
// Параметры:
//  НаборЭлементов - Структура - набор необходимых реквизитов и элементов формы, входящих в панель редактирования.
//    * ДокументСсылка  - ДокументСсылка - Ссылка на документ, в котором происходит редактирование ТЧ.
//    * ИмяТЧ - Строка - Имя ТЧ, которая будет редактироваться.
//    * ДействиеЭлемент - ПолеФормы - Элемент формы, содержащий выбранное действие для группового изменения строк.
//  Действие       - ПеречислениеСсылка - Выбранное действие для группового изменения строк.
//
Процедура СохранитьНастройки(НаборЭлементов) Экспорт
	
	КлючОбъекта = ТипЗнч(НаборЭлементов.ДокументСсылка);
	КлючНастроек = "ГрупповоеИзменениеСтрок_" + НаборЭлементов.ИмяТЧ;
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НаборЭлементов.Действие);
	
КонецПроцедуры

// Получает строковое представление действия.
//
// Параметры:
//  ДействиеПеречисление - ПеречислениеСсылка.ДействияГрупповогоИзмененияСтрок - Действие, описание которого необходимо получить.
// Возвращаемое значение:
//  Строка - Представление действия.
Функция ПредставлениеДействия(ДействиеПеречисление) Экспорт
	
	ДействиеПредставление = Строка(ДействиеПеречисление);
	Возврат Лев(ДействиеПредставление, СтрНайти(ДействиеПредставление, "@") - 1);
	
КонецФункции

Процедура НастроитьИсходнуюПанельРедактирования(Значение, НаборЭлементов) Экспорт
	
	Значение = "";
	НаборЭлементов.ЗначениеЭлемент.Заголовок = "Значение";
	ТипСтрока = Новый Массив;
	ТипСтрока.Добавить(Тип("Строка"));
	НаборЭлементов.ЗначениеЭлемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтрока);
	
КонецПроцедуры

// Управляет оформлением панели редактирования таблицы.
//
// Параметры:
//  ЭтаФорма         - УправляемаяФорма - Форма, в которой происходит групповое изменение строк ТЧ.
//  НаборЭлементов   - Структура - набор необходимых реквизитов и элементов формы, входящих в панель редактирования.
//    * ПанельРедактирования - ГруппаФормы - Группа формы, непосредственно являющаяся панелью редактирования ТЧ.
//    * ГруппаДействие - ГруппаФормы - Группа формы, содержащая поле выбора действия для группового изменения строк.
//    * ГруппаЗначение - ГруппаФормы - Группа формы, содержащая поле ввода значения для группового изменения строк.
//    * ГруппаВыполнить - ГруппаФормы - Группа формы, содержащая кнопку формы, запускающую обработку ТЧ.
//    * КнопкаВыполнитьДействие - КнопкаФормы - Кнопка формы, запускающая обработку ТЧ.
//    * КолонкаПометка - ПолеФормы - Пометка строки.
//    * КолонкаНомерСтроки - ПолеФормы - Номер строки.
//    * Действие - ПеречислениеСсылка.ДействияГрупповогоИзмененияСтрок - Выбранное действие для группового изменения строк.
//    * ЗначениеЭлемент - ПолеФормы - Поле ввода значения для группового изменения строк.
//    * ОбъектИзменений - Строка - Название элемента формы, входящего в состав ТЧ, над которым будут производиться изменения.
//    * КолонкаОбъектИзменений - ПолеФормы - Элемент формы, входящего в состав ТЧ, над которым будут производиться изменения.
//  Состояние        - Число - Состояние формы, к которому происходит переход.
//    * 0 - Панель скрыта.
//    * 1 - Выбор действия.
//    * 2 - Выбор значения.
//    * 3 - Применение изменений.
//    * 4 - Представление изменений.
//  Значение         - ПроизвольноеЗначение - Значение, которое используется для изменения значений колонки ТЧ при групповом изменении строк.
//  ИзменяетЗначение - Булево - Определяет, нужно ли загрузить исходное состояние редактируемой ТЧ
//                              при скрытии панели редактирования.
//
Процедура НастроитьОформлениеПанелиРедактирования(ЭтаФорма, НаборЭлементов, Состояние, Значение, ИзменяетЗначение = Неопределено) Экспорт
	
	Если Состояние = 2 И НаборЭлементов.Действие = Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки Тогда
		Состояние = 3;
	КонецЕсли;
	
	Если Состояние = 0 Тогда
		
		// 0. Панель скрыта
		Если ЗначениеЗаполнено(ИзменяетЗначение) И ИзменяетЗначение Тогда
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
		НаборЭлементов.ПанельРедактирования.Видимость = Ложь;
		НаборЭлементов.КолонкаПометка.Видимость = Ложь;
		НаборЭлементов.КолонкаПометка.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		НаборЭлементов.КолонкаНомерСтроки.Видимость = Истина;
		НаборЭлементов.КолонкаНомерСтроки.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		
	ИначеЕсли Состояние = 1 Тогда
		// 1. Выбор действия
		
		НаборЭлементов.КолонкаПометка.Видимость = Истина;
		НаборЭлементов.КолонкаПометка.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		НаборЭлементов.КолонкаНомерСтроки.Видимость = Ложь;
		НаборЭлементов.КолонкаНомерСтроки.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		НаборЭлементов.ПанельРедактирования.Видимость = Истина;
		
		Значение = НаборЭлементов.ЗначениеЭлемент.ОграничениеТипа.ПривестиЗначение("");
		
	ИначеЕсли Состояние = 2 Тогда
		// 2. Выбор значения
		
		Если НаборЭлементов.Действие <> Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки Тогда
			НаборЭлементов.ЗначениеЭлемент.Видимость = Истина;
		КонецЕсли;
		
		Значение = НаборЭлементов.ЗначениеЭлемент.ОграничениеТипа.ПривестиЗначение("");
		
		Если НаборЭлементов.ЗначениеЭлемент.Видимость Тогда
			ЭтаФорма.ТекущийЭлемент = НаборЭлементов.ЗначениеЭлемент;
		Иначе
			ЭтаФорма.ТекущийЭлемент = НаборЭлементов.КнопкаВыполнитьДействие;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеРезервнымиКопиями(Форма, Таблица, РезервнаяКопияТаблицыАдрес, СостояниеПерехода, ИзменяетДанные) Экспорт
	
	ИзменяетДанные = ?(ИзменяетДанные = Неопределено, Ложь, ИзменяетДанные);
	Если СостояниеПерехода = 1 Тогда
		СделатьРезервнуюКопиюТаблицы(Форма, Таблица, РезервнаяКопияТаблицыАдрес);
	ИначеЕсли СостояниеПерехода = 0 И НЕ ИзменяетДанные Тогда
		ВосстановитьТаблицуИзРезервнойКопии(Таблица, РезервнаяКопияТаблицыАдрес);
	КонецЕсли;
	
	Если СостояниеПерехода = 1 Тогда
		Если Таблица.Количество()>0 И Таблица[0].Свойство("Пометка") Тогда
			//При открытии устанавливаем пометки
			Для каждого стр Из Таблица Цикл
				стр.Пометка = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Помещает таблицу во временное хранилище.
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма - Форма, в которой происходит групповое изменение строк ТЧ.
//  Таблица  - ДанныеФормыКоллекция - ТЧ, которую требуется поместить во временное хранилище.
//  РезервнаяКопияТаблицыАдрес - Строка - Вернет адрес таблицы во временном хранилище.
//
Процедура СделатьРезервнуюКопиюТаблицы(ЭтаФорма, Таблица, РезервнаяКопияТаблицыАдрес) Экспорт
	
	РезервнаяКопияТаблицыАдрес = ПоместитьВоВременноеХранилище(Таблица.Выгрузить(), ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

// Полностью заменяет текущую таблицу таблицей из временного хранилища.
//
// Параметры:
//  Таблица  - ДанныеФормыКоллекция - ТЧ, которую требуется заменить таблицей во временном хранилище.
//  РезервнаяКопияТаблицыАдрес - Строка - Адрес таблицы во временном хранилище.
//
Процедура ВосстановитьТаблицуИзРезервнойКопии(Таблица, РезервнаяКопияТаблицыАдрес) Экспорт
	
	Таблица.Загрузить(ПолучитьИзВременногоХранилища(РезервнаяКопияТаблицыАдрес));
	
КонецПроцедуры

// Производит групповое изменение строк ТЧ.
//
// Параметры:
//  ЭтаФорма       - УправляемаяФорма - Форма, в которой происходит групповое изменение строк ТЧ.
//  Таблица        - ДанныеФормыКоллекция - ТЧ, над которой производится групповое изменение строк.
//  Действие       - ПеречислениеСсылка.ДействияГрупповогоИзмененияСтрок - Выбранное действие для группового изменения строк.
//  ОбъектДействия - Строка - Имя реквизита ТЧ объекта, над которым производятся изменения.
//  Значение       - ПроизвольноеЗначение - Значение, которое используется для изменения значений колонки ТЧ при групповом изменении строк.
//
Процедура ОбработатьТаблицу(ЭтаФорма, Таблица, Действие, ОбъектДействия, Значение, ИмяЭлементаНоменклатура) Экспорт
	
	Если Действие <> Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента
		И Действие <> Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки
		И Действие <> Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой
		И Таблица.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Не выбрана ни одна строка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если НЕ Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Свойство("Цена") Тогда
				Строка.Цена = Строка.Цена * (100 + Значение) / 100;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если НЕ Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Свойство("Цена") Тогда
				Строка.Цена = Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если НЕ Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанные = Новый Структура();
			
			СтруктураДанные.Вставить("ДатаОбработки",	ЭтаФорма.Объект.Дата);
			СтруктураДанные.Вставить("Номенклатура",	Строка.Номенклатура);
			СтруктураДанные.Вставить("Характеристика",	Строка.Характеристика);
			СтруктураДанные.Вставить("Коэффициент",		1);
			СтруктураДанные.Вставить("ВалютаДокумента", ЭтаФорма.Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("ВидЦен", 			Значение);
			
			Если Строка.Свойство("Цена") Тогда
				Строка.Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если НЕ Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Свойство("Цена") Тогда
				Строка.Цена = УправлениеНебольшойФирмойСервер.ОкруглитьЦену(Строка.Цена, Значение, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если НЕ Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Свойство("Сумма") Тогда
				Строка.Сумма = УправлениеНебольшойФирмойСервер.ОкруглитьЦену(Строка.Сумма, Значение, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если Строка.Свойство("ПроцентСкидкиНаценки") Тогда
				Строка.ПроцентСкидкиНаценки = Значение;
			КонецЕсли;
			Если Строка.Свойство("Пометка") Тогда
				Строка.Пометка = Истина;
			КонецЕсли;

		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
		
		РаспределитьСуммуНаСкидки(Таблица, "Сумма", Значение);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		РаспределитьСуммуПоКолонке(Таблица, "Количество", Значение);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		РаспределитьСуммуПоКолонке(Таблица, "Сумма", Значение);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если НЕ Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Свойство("СтавкаНДС") Тогда
				Строка.СтавкаНДС = Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		// Оставим пометки только у добавленных из документа.
		Для каждого Строка Из Таблица Цикл
			Строка.Пометка = Ложь;
		КонецЦикла;
		
		Если ТипЗнч(Значение) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ИмяТЧИсточник = "РаботыИУслуги";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ИмяТЧИсточник = "Продукция";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ОприходованиеЗапасов") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
			ИмяТЧИсточник = "Продукция";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.СписаниеЗапасов") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			ИмяТЧИсточник = "Запасы";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ИмяТЧИсточник = "Запасы";
		КонецЕсли;
		
		ДопустимыеТипыНоменклатуры = Новый Массив;
		
		ЭлементНоменклатура = ЭтаФорма.Элементы[ИмяЭлементаНоменклатура];
		ПараметрыВыбораНоменклатуры = ЭлементНоменклатура.ПараметрыВыбора;
		Для каждого ПараметрВыбора Из ПараметрыВыбораНоменклатуры Цикл
			
			Если ПараметрВыбора.Имя <> "Отбор.ТипНоменклатуры" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ПараметрВыбора.Значение) = Тип("ФиксированныйМассив")
				ИЛИ ТипЗнч(ПараметрВыбора.Значение) = Тип("ФиксированныйМассив") Тогда
				
				Для каждого ЗначениеОтбора Из ПараметрВыбора.Значение Цикл
					ДопустимыеТипыНоменклатуры.Добавить(ЗначениеОтбора);
				КонецЦикла;
			Иначе
				ДопустимыеТипыНоменклатуры.Добавить(ПараметрВыбора.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначенияНовойСтроки = Новый Структура("Номенклатура,Количество");
		
		Для каждого Строка Из Значение[ИмяТЧИсточник] Цикл
			
			Если ДопустимыеТипыНоменклатуры.Найти(Строка.Номенклатура.ТипНоменклатуры) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияНовойСтроки.Номенклатура = Неопределено;
			ЗначенияНовойСтроки.Количество = Неопределено;
			
			ЗаполнитьЗначенияСвойств(ЗначенияНовойСтроки, Строка);
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Пометка = Истина;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияНовойСтроки);
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ПомеченныеСтроки = Таблица.НайтиСтроки(Новый Структура("Пометка", Истина));
		
		Для каждого Строка Из ПомеченныеСтроки Цикл
			
			Таблица.Удалить(Строка);
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПокупателя")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуОтгрузки")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПокупателя")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуРеализации")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПланирования")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьИсходноеМесто")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьНовоеМесто") Тогда
		
		Для каждого Строка Из Таблица Цикл
			
			Если НЕ Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Строка[ОбъектДействия] = Значение;
			
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерийныеНомера") Тогда
		
		Если ИмяЭлементаНоменклатура = "ПродукцияНоменклатура" Тогда
			РаботаССерийнымиНомерами.ЗаполнитьСерийныеНомераВНаличии(ЭтаФорма.Объект, "Продукция");
		Иначе
		    РаботаССерийнымиНомерами.ЗаполнитьСерийныеНомераВНаличии(ЭтаФорма.Объект);
		КонецЕсли; 
		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Распределяет сумму по колонке таблицы.
Процедура РаспределитьСуммуПоКолонке(Таблица, ИмяКолонки, СуммаРаспределения)
	
	Если СуммаРаспределения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитаем общую помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		Если НЕ СтрокаТабличнойЧасти.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
	КонецЦикла;
	
	Если ОбщаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Теперь распределяем
	СтрокаМаксимальнойСуммы = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; // Значение максимальной суммы.
	НепогашеннаяСумма       = СуммаРаспределения;
	
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		Если НЕ СтрокаТабличнойЧасти.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		ТекущаяСумма = СтрокаТабличнойЧасти.Сумма;
		Дельта       = СуммаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки] / ОбщаяСумма;
		
		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если Дельта < 0 Тогда
			Дельта = Макс(НепогашеннаяСумма, Дельта)
		Иначе
			Дельта = Мин(НепогашеннаяСумма, Дельта)
		КонецЕсли;
		
		// Проверим текущую сумму на максимум.
		Если ТекущаяСумма > МаксимальнаяСумма Тогда
			МаксимальнаяСумма       = ТекущаяСумма;
			СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
		КонецЕсли;
		
		// Учеличиваем значение
		СтрокаТабличнойЧасти.Сумма = ТекущаяСумма + Дельта;
		
		// Остаток нераспределенной суммы надо уменьшать на дельту реального изменения
		НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаТабличнойЧасти.Сумма - ТекущаяСумма);
		
	КонецЦикла;
	
	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
		СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
	КонецЕсли;
	
КонецПроцедуры

// Распределяет сумму по колонке таблицы.
Процедура РаспределитьСуммуНаСкидки(Таблица, ИмяКолонки, СуммаРаспределения)
	
	// Посчитаем общую помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЦикла;
	
	Если ОбщаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентСкидки = СуммаРаспределения / ОбщаяСумма * 100;
	
	ОбщаяСуммаСкидки = 0;
	ОбщаяСуммаБезСкидок = 0;
	ПоследняяСтрока = Неопределено;
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		Если НЕ СтрокаТабличнойЧасти.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки;
		СтрокаТабличнойЧасти.Сумма = (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество) * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
		
		ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.Сумма);
		
		ПоследняяСтрока = СтрокаТабличнойЧасти;
	КонецЦикла;
	
	НепогашеннаяСумма = СуммаРаспределения - ОбщаяСуммаСкидки;
	Если НепогашеннаяСумма <> 0 Тогда
		СуммаСтрокиБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		ПоследняяСтрока.ПроцентСкидкиНаценки = (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки/100 
			+ НепогашеннаяСумма) / СуммаСтрокиБезСкидки * 100;
			
		ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма - НепогашеннаяСумма;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбора(НаборЭлементов) Экспорт
	
	Если НаборЭлементов.КолонкаОбъектИзменений <> Неопределено Тогда
		НаборЭлементов.ЗначениеЭлемент.СвязиПараметровВыбора = НаборЭлементов.КолонкаОбъектИзменений.СвязиПараметровВыбора;
	Иначе
		НаборЭлементов.ЗначениеЭлемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает ограничение типа выбираемому значению в зависимости от выбранного действия
//
// Параметры:
//  НаборЭлементов   - Структура - набор необходимых реквизитов и элементов формы, входящих в панель редактирования.
//    * КнопкаВыполнитьДействие - КнопкаФормы - Кнопка формы, запускающая обработку ТЧ.
//    * Действие - ПеречислениеСсылка.ДействияГрупповогоИзмененияСтрок - Выбранное действие для группового изменения строк.
//    * ЗначениеЭлемент - ПолеФормы - Поле ввода значения для группового изменения строк.
//
Процедура УстановитьПредставлениеДействия(НаборЭлементов)
	
	Если НЕ ЗначениеЗаполнено(НаборЭлементов.Действие) Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		НаборЭлементов.ЗначениеЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		НаборЭлементов.ЗначениеЭлемент.Видимость = Истина;
		НаборЭлементов.ЗначениеЭлемент.Заголовок = "Значение";
		Возврат;
		
	КонецЕсли;
	
	ПараметрыВыбора = ?(НаборЭлементов.КолонкаОбъектИзменений = Неопределено, Неопределено, НаборЭлементов.КолонкаОбъектИзменений.ПараметрыВыбора);
	СвязиПараметровВыбора = ?(НаборЭлементов.КолонкаОбъектИзменений = Неопределено, Неопределено, НаборЭлементов.КолонкаОбъектИзменений.СвязиПараметровВыбора);
	
	ТипЗначения = ТипОбъектаДействия(НаборЭлементов.Действие, НаборЭлементов.КолонкаОбъектИзменений);
	
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		
		НаборЭлементов.ЗначениеЭлемент.ОграничениеТипа = ТипЗначения;
		Если ПараметрыВыбора <> Неопределено Тогда
			НаборЭлементов.ЗначениеЭлемент.ПараметрыВыбора = ПараметрыВыбора;
		КонецЕсли;
		Если СвязиПараметровВыбора <> Неопределено Тогда
			НаборЭлементов.ЗначениеЭлемент.СвязиПараметровВыбора = СвязиПараметровВыбора;
		КонецЕсли;
		НаборЭлементов.ЗначениеЭлемент.Заголовок = ПредставлениеЗаголовкаОбъектаДействия(НаборЭлементов.Действие);
		
		Если НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Ложь;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Ложь;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПокупателя") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуОтгрузки")
			ИЛИ НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления")
			ИЛИ НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуРеализации")
			ИЛИ НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПланирования") Тогда
			
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПокупателя") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьИсходноеМесто") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		ИначеЕсли НаборЭлементов.Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьНовоеМесто") Тогда
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыбора = Истина;
			НаборЭлементов.ЗначениеЭлемент.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
	Иначе
		
		НаборЭлементов.ЗначениеЭлемент.Видимость = Ложь;
		НаборЭлементов.КнопкаВыполнитьДействие.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет тип объекта действия.
//
Функция ТипОбъектаДействия(Действие, ОбъектИзменений)
	
	МассивТипов = Новый Массив;
	КвалификаторыЧисла = Неопределено;
	ОписаниеТипов = Неопределено;
	
	Если Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		МассивТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ИнвентаризацияЗапасов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОприходованиеЗапасов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеЗапасов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СборкаЗапасов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеЗапасов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплату"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		МассивТипов.Добавить(Тип("Число"));
		КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Любой);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ПорядкиОкругления"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		МассивТипов.Добавить(Тип("Число"));
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		МассивТипов.Добавить(Тип("Число"));
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
		
		МассивТипов.Добавить(Тип("Число"));
		КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
		
		МассивТипов.Добавить(Тип("Число"));
		КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный);
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.ВидыЦен"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		МассивТипов.Очистить();
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПокупателя") Тогда
		
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуОтгрузки")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПоступления")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуРеализации")
		ИЛИ Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуПланирования") Тогда
		
		МассивТипов.Добавить(Тип("Дата"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПокупателя") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
		
		ОписаниеТипов = ОбъектИзменений.ОграничениеТипа;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьИсходноеМесто") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьНовоеМесто") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		
	КонецЕсли;
	
	Если ОписаниеТипов = Неопределено Тогда
		ТипОбъекта = Новый ОписаниеТипов(МассивТипов,,, КвалификаторыЧисла);
	Иначе
		ТипОбъекта = ОписаниеТипов;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Определяет название объекта действия.
//
Функция ПредставлениеЗаголовкаОбъектаДействия(ДействиеПеречисление)
	
	ДействиеПредставление = Строка(ДействиеПеречисление);
	Возврат Прав(ДействиеПредставление, СтрДлина(ДействиеПредставление) - СтрНайти(ДействиеПредставление, "@"));
	
КонецФункции

#КонецОбласти
