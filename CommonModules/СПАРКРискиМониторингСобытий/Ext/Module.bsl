
////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРКРиски".
// ОбщийМодуль.СПАРКРискиМониторингСобытий.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ОбновитьСобытияМониторинга() Экспорт
	
	Если Не Пользователи.РолиДоступны("ЧтениеДанныхСПАРКРиски") Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции.'");
	КонецЕсли;
	
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Обновление событий мониторинга 1СПАРК Риски.'"));
	
	УстановитьПривилегированныйРежим(Истина);
	ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
	
	// Если есть контрагенты, не поставленные на мониторинг, тогда
	// поставить их на мониторинг перед получением событий.
	// Не используется повторная постановка контрагентов с неизвестными ИНН -
	// повторная постановка выполняется только в регламентном задании.
	ПоставитьКонтрагентовНаМониторингВСервисеСПАРКРиски(ВидОшибки, Истина);
	Если Не ВидОшибки.Пустая() Тогда
		Возврат ВидОшибки;
	КонецЕсли;
	
	// Получение событий мониторинга.
	ТекДата                  = ТекущаяУниверсальнаяДата();
	ДатаПоследнегоОбновления = Константы.ДатаОбновленияСобытийСПАРКРиски.Получить();
	СписокИНН                = Неопределено;
	
	Если НачалоДня(ТекДата) <> НачалоДня(ДатаПоследнегоОбновления) Тогда
		
		// Полное обновление списка событий мониторинга.
		ЗагрузитьСобытияМониторинга(Неопределено, ВидОшибки);
		
	Иначе
		
		// Добавить события по контрагентам, поставленным на мониторинг позже
		// даты последнего обновления данных.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваКонтрагентовСПАРКРиски.ИНН КАК ИНН
		|ИЗ
		|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
		|		ПО КонтрагентыНаМониторингеСПАРКРиски.Контрагент = СвойстваКонтрагентовСПАРКРиски.Контрагент
		|ГДЕ
		|	КонтрагентыНаМониторингеСПАРКРиски.ДатаПостановки >= &ДатаОбновления
		|	И СвойстваКонтрагентовСПАРКРиски.ИННКорректный";
		
		Запрос.УстановитьПараметр("ДатаОбновления", ДатаПоследнегоОбновления);
		Запрос.УстановитьПараметр("ПустаяДата"    , '00010101');
		СписокИНН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИНН");
		
		Если СписокИНН.Количество() > 0 Тогда
			// Обновить события новых контрагентов.
			ЗагрузитьСобытияМониторинга(СписокИНН, ВидОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОшибки;
	
КонецФункции

#Область УправлениеВключениемМониторинга

Процедура ЗаполнитьКонтрагентовНаМониторинге() Экспорт
	
	ПоставитьНаМониторинг = Новый Массив;
	СнятьСМониторинга     = Новый Массив;
	
	СПАРКРискиПереопределяемый.КонтрагентыДляМониторинга(ПоставитьНаМониторинг, СнятьСМониторинга);
	СлужебнаяПоставитьСнятьСМониторинга(ПоставитьНаМониторинг, СнятьСМониторинга, Ложь);
	
КонецПроцедуры

Процедура ВключитьОтключитьМониторингСобытий(Контрагенты, Включить, Вручную = Ложь) Экспорт
	
	Если ТипЗнч(Контрагенты) = Тип("Массив") Тогда
		КонтрагентыМассив = Контрагенты;
	Иначе
		КонтрагентыМассив = Новый Массив;
		КонтрагентыМассив.Добавить(Контрагенты);
	КонецЕсли;
	
	Если Включить Тогда
		ВключитьМониторингКонтрагентов(КонтрагентыМассив, Вручную);
	Иначе
		ОтключитьМониторингКонтрагентов(КонтрагентыМассив, Вручную);
	КонецЕсли;
	
КонецПроцедуры

Функция МониторингСобытийВключен(Контрагент, Вручную = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|ГДЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Если Вручную <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "И КонтрагентыНаМониторингеСПАРКРиски.РучноеДобавление = &РучноеДобавление";
		Запрос.УстановитьПараметр("РучноеДобавление", Вручную);
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВключитьМониторингКонтрагентов(Контрагенты, Вручную = Ложь) Экспорт
	
	СлужебнаяПоставитьСнятьСМониторинга(Контрагенты, Неопределено, Вручную);
	
КонецПроцедуры

Функция ОтключитьМониторингКонтрагентов(Контрагенты, Вручную = Ложь) Экспорт
	
	Возврат СлужебнаяПоставитьСнятьСМониторинга(Неопределено, Контрагенты, Вручную);
	
КонецФункции

Функция СлужебнаяПоставитьСнятьСМониторинга(ПоставитьНаМониторинг, СнятьСМониторинга, РучнаяПостановка)
	
	Если Не РучнаяПостановка Тогда
		// При автоматической постановке на мониторинг права пользователя
		// не проверяются. Необходимо проверять права перед вызовом операции.
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если (ПоставитьНаМониторинг = Неопределено
		Или ПоставитьНаМониторинг.Количество() = 0)
		И (СнятьСМониторинга = Неопределено
		Или СнятьСМониторинга.Количество() = 0) Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = 0;
	
	// Проверить уже поставленных для снижения количества выполняемых записей в регистр сведений.
	ЗапросПоставленных = Новый Запрос;
	Если ПоставитьНаМониторинг <> Неопределено И ПоставитьНаМониторинг.Количество() > 0 Тогда
		ЗапросПоставленных.Текст =
		"ВЫБРАТЬ
		|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент
		|ИЗ
		|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
		|ГДЕ
		|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент В(&ПоставитьНаМониторинг)
		|	И КонтрагентыНаМониторингеСПАРКРиски.РучноеДобавление = &РучноеДобавление";
		ЗапросПоставленных.УстановитьПараметр("ПоставитьНаМониторинг", ПоставитьНаМониторинг);
	КонецЕсли;
	
	Если СнятьСМониторинга <> Неопределено И СнятьСМониторинга.Количество() > 0 Тогда
		ЗапросПоставленных.Текст = ЗапросПоставленных.Текст
		+ ?(ПустаяСтрока(ЗапросПоставленных.Текст), "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС)
		+ "ВЫБРАТЬ
		|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент
		|ИЗ
		|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
		|ГДЕ
		|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент В(&СнятьСМониторинга)
		|	И КонтрагентыНаМониторингеСПАРКРиски.РучноеДобавление = &РучноеДобавление";
		ЗапросПоставленных.УстановитьПараметр("СнятьСМониторинга", СнятьСМониторинга);
	КонецЕсли;
	
	ЗапросПоставленных.УстановитьПараметр("РучноеДобавление", РучнаяПостановка);
	
	СтоящиеНаМониторинге = ЗапросПоставленных.Выполнить().Выгрузить();
	СтоящиеНаМониторинге.Индексы.Добавить("Контрагент");
	
	НаборЗаписей = РегистрыСведений.КонтрагентыНаМониторингеСПАРКРиски.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РучноеДобавление.Установить(РучнаяПостановка);
	
	// Снятие с мониторинга.
	Если СнятьСМониторинга <> Неопределено Тогда
		Для Каждого Контрагент Из СнятьСМониторинга Цикл
			Если СтоящиеНаМониторинге.Найти(Контрагент, "Контрагент") <> Неопределено Тогда
				Результат = Результат + 1;
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// Добавление в список контрагентов на мониторинге.
	Если ПоставитьНаМониторинг = Неопределено Или ПоставитьНаМониторинг.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗначенияРеквизитовКонтрагентов = СПАРКРиски.ЗначенияРеквизитовКонтрагентов(ПоставитьНаМониторинг);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	Если РучнаяПостановка Тогда
		НоваяЗапись.Пользователь     = Пользователи.ТекущийПользователь();
		НоваяЗапись.РучноеДобавление = РучнаяПостановка;
	КонецЕсли;
	
	Если ПоставитьНаМониторинг <> Неопределено Тогда
		
		ДатаДобавления = ТекущаяДатаСеанса();
		
		Для Каждого Контрагент Из ПоставитьНаМониторинг Цикл
			
			Если СтоящиеНаМониторинге.Найти(Контрагент, "Контрагент") = Неопределено Тогда
				
				ЗначенияРеквизитов = ЗначенияРеквизитовКонтрагентов.Найти(Контрагент, "Контрагент");
				Если ЗначенияРеквизитов = Неопределено Тогда
					// Контрагент отсутствует в информационной базе.
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
				НоваяЗапись.Контрагент = Контрагент;
				
				// Анализ ошибок заполнения реквизитов.
				Если Не ЗначенияРеквизитов.ПодлежитПроверке Тогда
					НоваяЗапись.ТипОшибки = Перечисления.ВидыОшибокСПАРКРиски.НеПодлежитПроверке;
				ИначеЕсли Не СПАРКРискиКлиентСервер.ИННСоответствуетТребованиям(ЗначенияРеквизитов.ИНН) Тогда
					НоваяЗапись.ТипОшибки = Перечисления.ВидыОшибокСПАРКРиски.НекорректныйИНН;
				Иначе
					НоваяЗапись.ТипОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
				КонецЕсли;
				
				НоваяЗапись.ДатаДобавления = ДатаДобавления;
				НаборЗаписей.Записать();
				
				Результат = Результат + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьРезультатыПостановкиНаМониторинг() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КонтрагентыНаМониторингеСПАРКРиски.ОбластьДанныхВспомогательныеДанные,
	|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент,
	|	КонтрагентыНаМониторингеСПАРКРиски.РучноеДобавление,
	|	КонтрагентыНаМониторингеСПАРКРиски.Пользователь,
	|	КонтрагентыНаМониторингеСПАРКРиски.ДатаДобавления
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|ГДЕ
	|	(КонтрагентыНаМониторингеСПАРКРиски.Поставлен
	|			ИЛИ КонтрагентыНаМониторингеСПАРКРиски.ИдентификаторЗапроса <> &ПустойИдентификатор)";
	
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"КонтрагентыНаМониторингеСПАРКРиски.ОбластьДанныхВспомогательныеДанные,",
			"");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрКонтрагентыНаМониторингеСПАРКРиски = РегистрыСведений.КонтрагентыНаМониторингеСПАРКРиски;
	Пока Выборка.Количество() <> 0 Цикл
		
		НачатьТранзакцию();
		Попытка
			Пока Выборка.Следующий() Цикл
				Запись = РегистрКонтрагентыНаМониторингеСПАРКРиски.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.Записать();
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииСвойствКонтрагента(Контрагент, СвойстваКонтрагента) Экспорт
	
	// 1) Очистить результаты постановки на мониторинг;
	// 2) Удалить события мониторинга.
	
	ИННКорректный = СПАРКРискиКлиентСервер.ИННСоответствуетТребованиям(СвойстваКонтрагента.ИНН);
	ТипОшибкиНеПодлежитПроверке = Перечисления.ВидыОшибокСПАРКРиски.НеПодлежитПроверке;
	ТипОшибкиНекорректныйИНН    = Перечисления.ВидыОшибокСПАРКРиски.НекорректныйИНН;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Сбросить отметку о постановке на мониторинг.
		НаборЗаписей = РегистрыСведений.КонтрагентыНаМониторингеСПАРКРиски.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.Поставлен            = Ложь;
			Запись.ДатаПостановки       = '00010101';
			Запись.ИдентификаторЗапроса = "";
			Если Не ИННКорректный Тогда
				Запись.ТипОшибки = ТипОшибкиНекорректныйИНН;
			ИначеЕсли Не СвойстваКонтрагента.ПодлежитПроверке Тогда
				Запись.ТипОшибки = ТипОшибкиНеПодлежитПроверке;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		// Очистить полученные ранее события мониторинга.
		НаборСобытий = РегистрыСведений.СобытияМониторингаСПАРКРиски.СоздатьНаборЗаписей();
		НаборСобытий.Отбор.Контрагент.Установить(Контрагент);
		НаборСобытий.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#Область ВзаимодействиеССервисом

Процедура ЗагрузитьСобытияМониторинга(СписокИНН, ВидОшибки)
	
	ДанныеАутентификации = СПАРКРиски.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Если ДанныеАутентификации = Неопределено Тогда
		ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Не удалось загрузить события 1СПАРК Риски.
				|Интернет-поддержка пользователей не подключена.'"));
		Возврат;
	КонецЕсли;
	
	ИдентификаторУслуги = СПАРКРискиКлиентСервер.ИдентификаторУслугиМониторингКомпаний();
	Если Не ИнтернетПоддержкаПользователей.УслугаПодключена(ИдентификаторУслуги) Тогда
		ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит;
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить события мониторинга 1СПАРК Риски.
					|Услуга с идентификатором %1 не подключена.'"),
				ИдентификаторУслуги));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыЗапроса = СервисСПАРКРиски.ДополнительныеПараметрыВызоваОперацииСервиса();
	ДополнительныеПараметрыЗапроса.Вставить("monitoringEventPaginationEnabled", "true");
	
	ИдентификаторыТиповСобытий = Новый Соответствие;
	Если СписокИНН = Неопределено Тогда
		
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Загрузка событий мониторинга 1СПАРК Риски. Вариант загрузки - полный.'"));
		
		// Очистить регистр сведений с событиями.
		НаборЗаписей = РегистрыСведений.СобытияМониторингаСПАРКРиски.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		// Загрузка событий порциями, пока есть доступные события в сервисе.
		ИдентификаторПоследнегоСобытия = Неопределено;
		Пока Истина Цикл
			
			ВидОшибки = ЗагрузитьПорциюСобытийМониторинга(
				ИдентификаторПоследнегоСобытия,
				0,
				0,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса,
				ИдентификаторыТиповСобытий,
				ИдентификаторПоследнегоСобытия);
			
			Если ИдентификаторПоследнегоСобытия = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Не ВидОшибки.Пустая() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка событий мониторинга 1СПАРК Риски. Вариант загрузки - для списка ИНН (%1).'"),
			Строка(СписокИНН.Количество())));
		
		РазмерПорцииЗапроса = 100;
		ВГраница            = СписокИНН.ВГраница();
		НачальныйИндекс     = 0;
		
		Пока НачальныйИндекс <= ВГраница Цикл
			
			КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорцииЗапроса - 1, ВГраница);
			
			ВидОшибки = ЗагрузитьПорциюСобытийМониторинга(
				СписокИНН,
				НачальныйИндекс,
				КонечныйИндекс,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса,
				ИдентификаторыТиповСобытий,
				Неопределено);
			
			Если Не ВидОшибки.Пустая() Тогда
				Прервать;
			КонецЕсли;
			
			НачальныйИндекс = КонечныйИндекс + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИдентификаторыТиповСобытийМассив = Новый Массив;
	Для Каждого КлючЗначение Из ИдентификаторыТиповСобытий Цикл
		ИдентификаторыТиповСобытийМассив.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	// Обновление справочника типов событий мониторинга.
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		// В локальном режиме справочник типов событий обновляется по требованию.
		// При работе в модели сервиса - через механизм поставляемых данных.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТипыСобытийСПАРКРиски.Идентификатор КАК Идентификатор,
		|	ТипыСобытийСПАРКРиски.Ссылка КАК ТипСобытияСсылка
		|ИЗ
		|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
		|ГДЕ
		|	ТипыСобытийСПАРКРиски.Идентификатор В(&Идентификатор)";
		
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторыТиповСобытийМассив);
		ТипыСобытий = Запрос.Выполнить().Выгрузить();
		Если ТипыСобытий.Количество() < ИдентификаторыТиповСобытийМассив.Количество() Тогда
			// В ТипыСобытий добавляются недостающие типы событий.
			ТипыСобытий.Индексы.Добавить("Идентификатор");
			ЗагрузитьНовыеТипыСобытий(ИдентификаторыТиповСобытийМассив, ТипыСобытий, ВидОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОшибки.Пустая() Тогда
		Константы.ДатаОбновленияСобытийСПАРКРиски.Установить(ТекущаяУниверсальнаяДата());
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьПорциюСобытийМониторинга(
	СписокИННИлиИдентификатор,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса,
	ИдентификаторыТиповСобытий,
	ИдентификаторПоследнегоСобытия)
	
	РезультатВызова = СервисСПАРКРиски.СобытияМониторинга(
		СписокИННИлиИдентификатор,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ИдентификаторыТиповСобытий,
		ДополнительныеПараметрыЗапроса);
	
	Если Не РезультатВызова.ВидОшибки.Пустая() Тогда
		Возврат РезультатВызова.ВидОшибки;
	КонецЕсли;
	
	ИдентификаторПоследнегоСобытия = РезультатВызова.ИдентификаторПоследнегоСобытия;
	
	// Подбор контрагентов.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваКонтрагентовСПАРКРиски.ИНН,
	|	СвойстваКонтрагентовСПАРКРиски.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
	|ГДЕ
	|	СвойстваКонтрагентовСПАРКРиски.ИНН В(&СписокИНН)";
	Запрос.УстановитьПараметр("СписокИНН", РезультатВызова.СписокИНН);
	
	Контрагенты = Запрос.Выполнить().Выгрузить();
	Контрагенты.Индексы.Добавить("ИНН");
	
	// Запись полученных событий в ИБ.
	ЗаписаноСобытий = 0;
	ОтборСтрок = Новый Структура("ИНН", "");
	Для Каждого ТекущийИНН Из РезультатВызова.СписокИНН Цикл
		
		ОтборСтрок.ИНН = ТекущийИНН;
		КонтрагентыИНН = Контрагенты.НайтиСтроки(ОтборСтрок);
		Если КонтрагентыИНН.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиСобытий = РезультатВызова.События.НайтиСтроки(ОтборСтрок);
		
		Для каждого СтрТекущийКонтрагент Из КонтрагентыИНН Цикл
			
			НаборЗаписей = РегистрыСведений.СобытияМониторингаСПАРКРиски.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Контрагент.Установить(СтрТекущийКонтрагент.Контрагент);
			Для каждого СтрокаСобытия Из СтрокиСобытий Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.Идентификатор           = СтрокаСобытия.Идентификатор;
				Запись.Контрагент              = СтрТекущийКонтрагент.Контрагент;
				Запись.ТипСобытияИдентификатор = СтрокаСобытия.ИдентификаторТипаСобытия;
				Запись.ДатаМониторинга         = СтрокаСобытия.ДатаМониторинга;
				Запись.НовоеЗначение           = СтрокаСобытия.НовоеЗначение;
				Запись.СтароеЗначение          = СтрокаСобытия.СтароеЗначение;
				ЗаписаноСобытий = ЗаписаноСобытий + 1;
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получены события мониторинга 1СПАРК Риски (%1).
			|Идентификатор последнего события: %2.
			|Записано событий в информационную базу: %3.'"),
		Строка(РезультатВызова.События.Количество()),
		Строка(ИдентификаторПоследнегоСобытия),
		Строка(ЗаписаноСобытий)));
	
	Возврат Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
	
КонецФункции

Процедура ЗагрузитьНовыеТипыСобытий(ИдентификаторыТиповСобытий, ТипыСобытийВИнформационнойБазе, ВидОшибки) Экспорт
	
	РезультатВызова = СервисСПАРКРиски.ТипыСобытийСообщенийМониторинга();
	Если Не РезультатВызова.ВидОшибки.Пустая() Тогда
		ВидОшибки = РезультатВызова.ВидОшибки;
		Возврат;
	КонецЕсли;
	
	НовыеТипыСобытий = Новый ТаблицаЗначений;
	НовыеТипыСобытий.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого ТекущийИдентификатор Из ИдентификаторыТиповСобытий Цикл
		Если ТипыСобытийВИнформационнойБазе.Найти(ТекущийИдентификатор, "Идентификатор") = Неопределено Тогда
			СтрНовыйТипСобытия = НовыеТипыСобытий.Добавить();
			СтрНовыйТипСобытия.Идентификатор = ТекущийИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	// Для исключения одновременной записи типов событий с
	// одинаковыми уникальными идентификаторами.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки                = Блокировка.Добавить("Справочник.ТипыСобытийСПАРКРиски");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = НовыеТипыСобытий;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Идентификатор", "Идентификатор");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыСобытийСПАРКРиски.Идентификатор КАК Идентификатор,
	|	ТипыСобытийСПАРКРиски.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
	|ГДЕ
	|	ТипыСобытийСПАРКРиски.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", НовыеТипыСобытий.ВыгрузитьКолонку("Идентификатор"));
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		ТекущиеТипыВИнформационнойБазе = Запрос.Выполнить().Выгрузить();
		ТекущиеТипыВИнформационнойБазе.Индексы.Добавить("Идентификатор");
		
		НеизвестныеТипыСобытий = Новый Соответствие;
		Для Каждого СтрНовыеТипыСобытий Из НовыеТипыСобытий Цикл
			
			СтрТекущиеТипыВИнформационнойБазе = ТекущиеТипыВИнформационнойБазе.Найти(СтрНовыеТипыСобытий.Идентификатор, "Идентификатор");
			Если СтрТекущиеТипыВИнформационнойБазе = Неопределено Тогда
				
				// Создать описание нового типа события.
				ДанныеТипаСобытия = РезультатВызова.ТипыСобытий[СтрНовыеТипыСобытий.Идентификатор];
				
				Если ДанныеТипаСобытия = Неопределено Тогда
					НеизвестныеТипыСобытий.Вставить(СтрНовыеТипыСобытий.Идентификатор, Истина);
					Продолжить;
				КонецЕсли;
				
				ТипСобытияОбъект = Справочники.ТипыСобытийСПАРКРиски.СоздатьЭлемент();
				ТипСобытияОбъект.Идентификатор = СтрНовыеТипыСобытий.Идентификатор;
				ТипСобытияОбъект.Название      = ДанныеТипаСобытия.Название;
				ТипСобытияОбъект.Описание      = ДанныеТипаСобытия.Описание;
				ТипСобытияОбъект.Критичное     = ДанныеТипаСобытия.Критичное;
				
				Попытка
					ТипСобытияОбъект.Записать();
				Исключение
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось записать описание типа события с идентификатором %1.
							|%2'"),
						Строка(СтрНовыеТипыСобытий.Идентификатор),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
				КонецПопытки;
				
				ТипСобытияСсылка = ТипСобытияОбъект.Ссылка;
				
			Иначе
				
				// Событие уже существует.
				ТипСобытияСсылка = СтрТекущиеТипыВИнформационнойБазе.Ссылка;
				
			КонецЕсли;
			
			СтрТипСобытияВИБ = ТипыСобытийВИнформационнойБазе.Добавить();
			СтрТипСобытияВИБ.Идентификатор    = СтрНовыеТипыСобытий.Идентификатор;
			СтрТипСобытияВИБ.ТипСобытияСсылка = ТипСобытияСсылка;
			
		КонецЦикла;
		
		Если НеизвестныеТипыСобытий.Количество() > 0 Тогда
			ЧастиСписка = Новый Массив;
			Для Каждого КлючЗначение Из НеизвестныеТипыСобытий Цикл
				ЧастиСписка.Добавить(Строка(КлючЗначение.Ключ));
			КонецЦикла;
			СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Получены неизвестные идентификаторы типов событий:
						|%1'"),
					СтрСоединить(ЧастиСписка, Символы.ПС)));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить новые типы событий. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(ТекстИсключения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьТипыСобытийИзПоставляемыхДанных(Дескриптор, ПутьКФайлу) Экспорт
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
	ТелоОтвета = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	// При вызове выполняется только обработка ответа без обращения к сервису 1СПАРК Риски.
	РезультатВызова = СервисСПАРКРиски.ТипыСобытийСообщенийМониторинга(ТелоОтвета);
	Если Не РезультатВызова.ВидОшибки.Пустая() Тогда
		ВидОшибки = РезультатВызова.ВидОшибки;
		СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Не удалось обновить типы событий из поставляемых данных.'") + Символы.ПС
				+ РезультатВызова.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Определить, какие типы событий уже записаны в ИБ.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыСобытийСПАРКРиски.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
	|ГДЕ
	|	ТипыСобытийСПАРКРиски.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы",
		СервисСПАРКРиски.КлючиСоответствияВМассив(РезультатВызова.ТипыСобытий));
	ТекущиеТипыВИнформационнойБазе = Запрос.Выполнить().Выгрузить();
	
	Если ТекущиеТипыВИнформационнойБазе.Количество() = РезультатВызова.ТипыСобытий.Количество() Тогда
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Обновление типов событий мониторинга 1СПАРК Риски не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеТипыВИнформационнойБазе.Индексы.Добавить("Идентификатор");
	
	// Добавить новые события в информационную базу.
	НачатьТранзакцию();
	Попытка
		
		Для Каждого КлючЗначение Из РезультатВызова.ТипыСобытий Цикл
			
			ИдентификаторТипаСобытия = КлючЗначение.Ключ;
			Если ТекущиеТипыВИнформационнойБазе.Найти(ИдентификаторТипаСобытия, "Идентификатор") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТипаСобытия = КлючЗначение.Значение;
			
			ТипСобытияОбъект = Справочники.ТипыСобытийСПАРКРиски.СоздатьЭлемент();
			ТипСобытияОбъект.Идентификатор = ИдентификаторТипаСобытия;
			ТипСобытияОбъект.Название      = ДанныеТипаСобытия.Название;
			ТипСобытияОбъект.Описание      = ДанныеТипаСобытия.Описание;
			ТипСобытияОбъект.Критичное     = ДанныеТипаСобытия.Критичное;
			
			Попытка
				ТипСобытияОбъект.Записать();
			Исключение
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать описание типа события с идентификатором %1.
						|%2'"),
					Строка(ИдентификаторТипаСобытия),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить новые типы событий. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(ТекстИсключения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПоставитьКонтрагентовНаМониторингВСервисеСПАРКРиски(
	ВидОшибки = Неопределено,
	ИсключитьНеизвестныеИНН = Ложь) Экспорт
	
	ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
	
	ДанныеАутентификации = СПАРКРиски.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Если ДанныеАутентификации = Неопределено Тогда
		ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Не удалось поставить контрагентов на мониторинг в сервисе 1СПАРК Риски.
				|Интернет-поддержка пользователей не подключена.'"));
		Возврат;
	КонецЕсли;
	
	ИдентификаторУслуги = СПАРКРискиКлиентСервер.ИдентификаторУслугиМониторингКомпаний();
	Если Не ИнтернетПоддержкаПользователей.УслугаПодключена(ИдентификаторУслуги) Тогда
		ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит;
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось поставить контрагентов на мониторинг в сервисе 1СПАРК Риски.
					|Услуга с идентификатором %1 не подключена.'"),
				ИдентификаторУслуги));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыЗапроса = СервисСПАРКРиски.ДополнительныеПараметрыВызоваОперацииСервиса();
	
	// 1) Отправить запросы для постановки на мониторинг и
	// записать идентификаторы запросов в ИБ.
	
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Отправка запросов постановки контрагентов на мониторинг.'"));
	
	ДополнительныеПараметры = Новый Структура;
	
	ОтправленоЗапросов = 0;
	ОтправленоИНН      = 0;
	ВремяНачала        = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОтправитьЗапросыПостановкиНаМониторинг(
		ВидОшибки,
		ИсключитьНеизвестныеИНН,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса,
		ОтправленоЗапросов,
		ОтправленоИНН,
		ДополнительныеПараметры);
	Если Не ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершена отправка запросов на постановку контрагентов на мониторинг.
				|Количество запросов: %1;
				|Количество ИНН: %2;
				|Длительность: %3'"),
			ОтправленоЗапросов,
			ОтправленоИНН,
			(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)));
	
	// 2) Проверить результаты постановки на мониторинг и записать в ИБ.
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обработка результатов постановки на мониторинг.'"));
	
	ДополнительныеПараметры = Новый Структура;
	КоличествоИдентификаторовЗапросов = 0;
	ЗавершеноЗапросов                 = 0;
	ВремяНачала                       = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработатьРезультатыПостановкиНаМониторинг(
		ВидОшибки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса,
		КоличествоИдентификаторовЗапросов,
		ЗавершеноЗапросов,
		ДополнительныеПараметры);
	
	Если ВидОшибки.Пустая() Тогда
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Завершена обработка результатов постановки на мониторинг.
					|Проверено идентификаторов запросов: %1;
					|Отправлено запросов: %2;
					|Длительность: %3'"),
				КоличествоИдентификаторовЗапросов,
				ЗавершеноЗапросов,
				(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЗапросыПостановкиНаМониторинг(
	ВидОшибки,
	ИсключитьНеизвестныеИНН,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса,
	ОтправленоЗапросов,
	ОтправленоИНН,
	ДополнительныеПараметры)
	
	// Запрос контрагентов для постановки на мониторинг: не поставленные,
	// запрос не отправлялся ранее.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент,
	|	КонтрагентыНаМониторингеСПАРКРиски.РучноеДобавление,
	|	СвойстваКонтрагентовСПАРКРиски.ИНН КАК ИНН,
	|	КонтрагентыНаМониторингеСПАРКРиски.Пользователь,
	|	КонтрагентыНаМониторингеСПАРКРиски.ДатаДобавления
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
	|		ПО КонтрагентыНаМониторингеСПАРКРиски.Контрагент = СвойстваКонтрагентовСПАРКРиски.Контрагент
	|			И (СвойстваКонтрагентовСПАРКРиски.ИННКорректный)
	|ГДЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.Поставлен = ЛОЖЬ
	|	И КонтрагентыНаМониторингеСПАРКРиски.ИдентификаторЗапроса = &ПустойИдентификатор
	|	И КонтрагентыНаМониторингеСПАРКРиски.ТипОшибки <> ЗНАЧЕНИЕ(Перечисление.ВидыОшибокСПАРКРиски.НеПодлежитПроверке)"
	+ ?(ИсключитьНеизвестныеИНН,
		Символы.ПС + "И КонтрагентыНаМониторингеСПАРКРиски.ТипОшибки <> ЗНАЧЕНИЕ(Перечисление.ВидыОшибокСПАРКРиски.НеизвестныйИНН)",
		"");
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	// Выборка и обработка выполняется порциями по 1000 шт.
	// При этом в каждый момент времени в оперативной памяти
	// находится не более 1000 строк таблицы значений.
	// Курсорные выборки не используются, т.к. в этом случае
	// также потребуются дополнительные структуры данных.
	Пока Истина Цикл
		
		// Отправка запросов в сервис 1СПАРК Риски порциями по 100 ИНН.
		ИтерацияВыполненаУспешно = ИтерацияОтправитьЗапросыПостановкиНаМониторинг(
			ВидОшибки,
			Запрос,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса,
			ОтправленоЗапросов,
			ОтправленоИНН,
			ДополнительныеПараметры);
		
		Если Не ИтерацияВыполненаУспешно Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИтерацияОтправитьЗапросыПостановкиНаМониторинг(
	ВидОшибки,
	Запрос,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса,
	ОтправленоЗапросов,
	ОтправленоИНН,
	ДополнительныеПараметры)
	
	СписокИНН       = Новый Массив;
	ОбработанныеИНН = Новый Соответствие;
	
	КонтрагентыТаблица = Запрос.Выполнить().Выгрузить();
	
	Если КонтрагентыТаблица.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтрагентыТаблица.Индексы.Добавить("ИНН");
	
	РазмерЗапроса = 0;
	Для Каждого ТекущаяСтрокаКонтрагент Из КонтрагентыТаблица Цикл
		
		Если ОбработанныеИНН.Получить(ТекущаяСтрокаКонтрагент.ИНН) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработанныеИНН.Вставить(ТекущаяСтрокаКонтрагент.ИНН, Истина);
		
		СписокИНН.Добавить(ТекущаяСтрокаКонтрагент.ИНН);
		РазмерЗапроса = РазмерЗапроса + 1;
		Если РазмерЗапроса >= 100 Тогда
			ВызватьОперациюСервисаПоставитьНаМониторинг(
				СписокИНН,
				КонтрагентыТаблица,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса,
				ВидОшибки,
				ДополнительныеПараметры);
			РазмерЗапроса = 0;
			Если Не ВидОшибки.Пустая() Тогда
				Прервать;
			КонецЕсли;
			ОтправленоЗапросов = ОтправленоЗапросов + 1;
			ОтправленоИНН      = ОтправленоИНН + СписокИНН.Количество();
			СписокИНН.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидОшибки.Пустая() И РазмерЗапроса > 0 Тогда
		// Вызвать операцию постановки на мониторинг для оставшихся ИНН.
		ВызватьОперациюСервисаПоставитьНаМониторинг(
			СписокИНН,
			КонтрагентыТаблица,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса,
			ВидОшибки,
			ДополнительныеПараметры);
		Если ВидОшибки.Пустая() Тогда
			ОтправленоЗапросов = ОтправленоЗапросов + 1;
			ОтправленоИНН      = ОтправленоИНН + СписокИНН.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидОшибки.Пустая();
	
КонецФункции

Процедура ОбработатьРезультатыПостановкиНаМониторинг(
	ВидОшибки,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса,
	КоличествоИдентификаторовЗапросов,
	ЗавершеноЗапросов,
	ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	КонтрагентыНаМониторингеСПАРКРиски.ИдентификаторЗапроса КАК ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|ГДЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.ИдентификаторЗапроса <> &ПустойИдентификатор";
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ИдентификаторыЗапросов = Новый Массив;
	РазмерПорции = 0;
	Пока Истина Цикл
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		КоличествоВыбранных = Выборка.Количество();
		Если КоличествоВыбранных = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоИдентификаторовЗапросов = КоличествоИдентификаторовЗапросов + КоличествоВыбранных;
		
		// Выборка записей по идентификаторам запросов,
		// проверка результатов и запись в ИБ порциями по
		// 10 идентификаторов.
		РазмерПорции = 0;
		ИдентификаторыЗапросов.Очистить();
		Пока Выборка.Следующий() Цикл
			
			ИдентификаторыЗапросов.Добавить(Выборка.ИдентификаторЗапроса);
			РазмерПорции = РазмерПорции + 1;
			Если РазмерПорции >= 10 Тогда
				ИтерацияПроверитьРезультатыПостановки(
					ИдентификаторыЗапросов,
					ВидОшибки,
					ДанныеАутентификации,
					ДополнительныеПараметрыЗапроса,
					ЗавершеноЗапросов,
					ДополнительныеПараметры);
				Если Не ВидОшибки.Пустая() Тогда
					Возврат;
				КонецЕсли;
				РазмерПорции = 0;
				ИдентификаторыЗапросов.Очистить();
				
			КонецЕсли;
		КонецЦикла;
		
		Если РазмерПорции > 0 Тогда
			ИтерацияПроверитьРезультатыПостановки(
				ИдентификаторыЗапросов,
				ВидОшибки,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса,
				ЗавершеноЗапросов,
				ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИтерацияПроверитьРезультатыПостановки(
	ИдентификаторыЗапросов,
	ВидОшибки,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса,
	ЗавершеноЗапросов,
	ДополнительныеПараметры)
	
	ЗапросЗаписей = Новый Запрос;
	ЗапросЗаписей.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент КАК Контрагент,
	|	КонтрагентыНаМониторингеСПАРКРиски.РучноеДобавление КАК РучноеДобавление,
	|	КонтрагентыНаМониторингеСПАРКРиски.Пользователь КАК Пользователь,
	|	КонтрагентыНаМониторингеСПАРКРиски.ДатаДобавления КАК ДатаДобавления,
	|	КонтрагентыНаМониторингеСПАРКРиски.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	|	СвойстваКонтрагентовСПАРКРиски.ИНН КАК ИНН
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
	|		ПО КонтрагентыНаМониторингеСПАРКРиски.Контрагент = СвойстваКонтрагентовСПАРКРиски.Контрагент
	|ГДЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.ИдентификаторЗапроса В(&ИдентификаторыЗапросов)";
	
	// Получение результатов постановки на мониторинг.
	РезультатыВызоваСервиса = Новый Соответствие;
	ИдентификаторыЗавершенных = Новый Массив;
	Для Каждого ИдентификаторЗапроса Из ИдентификаторыЗапросов Цикл
		
		РезультатВызоваОперации =
			СервисСПАРКРиски.РезультатВключенияМониторингаСобытийПоКонтрагентам(
				ИдентификаторЗапроса,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса);
		
		Если Не РезультатВызоваОперации.ВидОшибки.Пустая() Тогда
			ВидОшибки = РезультатВызоваОперации.ВидОшибки;
			Возврат;
		ИначеЕсли РезультатВызоваОперации.Завершено Тогда
			ЗавершеноЗапросов = ЗавершеноЗапросов + 1;
			РезультатыВызоваСервиса.Вставить(ИдентификаторЗапроса, РезультатВызоваОперации);
			ИдентификаторыЗавершенных.Добавить(ИдентификаторЗапроса);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыЗавершенных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросЗаписей.УстановитьПараметр("ИдентификаторыЗапросов", ИдентификаторыЗавершенных);
	
	// Запись результатов постановки в ИБ.
	ТипОшибкиНетИНН = Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН;
	ДатаПостановки  = ТекущаяУниверсальнаяДата();
	Пока Истина Цикл
		
		Выборка = ЗапросЗаписей.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Пока Выборка.Следующий() Цикл
				
				РезультатВызоваОперации = РезультатыВызоваСервиса.Получить(Выборка.ИдентификаторЗапроса);
				Если Не РезультатВызоваОперации.Завершено Тогда
					Продолжить;
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.КонтрагентыНаМониторингеСПАРКРиски.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, , "ИдентификаторЗапроса");
				Если РезультатВызоваОперации.РезультатВключенияМониторинга[Выборка.ИНН] = Истина Тогда
					МенеджерЗаписи.Поставлен      = Истина;
					МенеджерЗаписи.ДатаПостановки = ДатаПостановки;
				Иначе
					МенеджерЗаписи.ТипОшибки = ТипОшибкиНетИНН;
				КонецЕсли;
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при записи результатов постановки на мониторинг.
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВызватьОперациюСервисаПоставитьНаМониторинг(
	СписокИНН,
	КонтрагентыНаМониторинге,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса,
	ВидОшибки,
	ДополнительныеПараметры)
	
	// Вызов операции сервиса.
	
	РезультатВызоваОперации = СервисСПАРКРиски.ВключитьМониторингСобытийПоКонтрагентам(
		СписокИНН,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	РегистрСведенийКонтрагентыНаМониторинге =
		РегистрыСведений.КонтрагентыНаМониторингеСПАРКРиски;
	Если ЗначениеЗаполнено(РезультатВызоваОперации.ВидОшибки) Тогда
		
		// При ошибке вызова операции прервать процесс постановки на мониторинг.
		ВидОшибки = РезультатВызоваОперации.ВидОшибки;
		Возврат;
		
	Иначе
		
		// При успешном вызове операции сервиса установить
		// идентификатор запроса для всех записей.
		ДатаПостановки = ТекущаяУниверсальнаяДата();
		Отбор = Новый Структура("ИНН", "");
		ТипОшибкиПустаяСсылка = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
		
		НачатьТранзакцию();
		Попытка
			
			Для Каждого ИНН Из СписокИНН Цикл
				// Запись результатов постановки на мониторинг.
				Отбор.ИНН = ИНН;
				СтрокиТЧ = КонтрагентыНаМониторинге.НайтиСтроки(Отбор);
				Для каждого ТекСтрока Из СтрокиТЧ Цикл
					Запись = РегистрСведенийКонтрагентыНаМониторинге.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, ТекСтрока);
					Запись.ИдентификаторЗапроса = РезультатВызоваОперации.ИдентификаторЗаявки;
					Запись.ДатаПостановки       = ДатаПостановки;
					Запись.ТипОшибки            = ТипОшибкиПустаяСсылка;
					Запись.Записать();
				КонецЦикла;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при записи идентификаторов запросов постановки на мониторинг.
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ЗаполнитьИПоставитьКонтрагентовНаМониторингЗадание(КонтекстВыполненияПоШагам) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		"ВсеОбновленияСПАРКРискиРазделенное_ЗаполнитьКонтрагентовНаМониторинге",
		НСтр("ru='Выполнение ВсеОбновленияСПАРКРискиРазделенное, Заполнить контрагентов на мониторинге'"));
	
	ДатаНачалаЗадания = ТекущаяДатаСеанса();
	ВидОбновлениеМониторинг = "СПАРКРискиПостановкаНаМониторинг";
	
	Запись = РегистрыСведений.ВсеОбновленияСПАРКОбщее.СоздатьМенеджерЗаписи();
	Запись.ВидОбновления = ВидОбновлениеМониторинг;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
	Иначе
		Запись.ВидОбновления = ВидОбновлениеМониторинг;
		ДатаСледующегоОбновления = '00010101';
	КонецЕсли;
	
	Если ДатаНачалаЗадания < ДатаСледующегоОбновления Тогда
		ОписаниеРезультатаПоШагам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Время выполнения шага %1 еще не наступило.
				|Начало задания: %2
				|Запланированное время начала: %3'"),
			ВидОбновлениеМониторинг,
			ДатаНачалаЗадания,
			ДатаСледующегоОбновления);
		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияПоШагам,
			0,
			ОписаниеРезультатаПоШагам,
			Неопределено);
		Возврат;
	КонецЕсли;
	
	// Заполнение контрагентов на мониторинге.
	ЗаполнитьКонтрагентовНаМониторинге();
	
	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		0,
		ОписаниеРезультатаПоШагам,
		Неопределено);
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		// В обычной информационной базе выполнить также попытку
		// постановки контрагентов на мониторинг.
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияПоШагам,
			"ВсеОбновленияСПАРКРискиРазделенное_ПоставитьКонтрагентовНаМониторинг",
			НСтр("ru='Выполнение ВсеОбновленияСПАРКРискиРазделенное, Поставить контрагентов на мониторинг'"));
		
		ПоставитьКонтрагентовНаМониторингВСервисеСПАРКРиски();
		
		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияПоШагам,
			0,
			ОписаниеРезультатаПоШагам,
			Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоставитьКонтрагентовНаМониторингЗаданиеНеразделенное(КонтекстВыполненияПоШагам = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
	ЗапросОбластей = Новый Запрос;
	ЗапросОбластей.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.ОбластьДанныхВспомогательныеДанные КАК Область
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|		ПО (ОбластиДанных.ОбластьДанныхВспомогательныеДанные = КонтрагентыНаМониторингеСПАРКРиски.ОбластьДанныхВспомогательныеДанные)
	|			И (ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется))
	|ГДЕ
	|	НЕ КонтрагентыНаМониторингеСПАРКРиски.Поставлен
	|	И КонтрагентыНаМониторингеСПАРКРиски.ТипОшибки <> ЗНАЧЕНИЕ(Перечисление.ВидыОшибокСПАРКРиски.НеПодлежитПроверке)";
	
	ВыборкаОбластей = ЗапросОбластей.Выполнить().Выбрать();
	Пока ВыборкаОбластей.Следующий() Цикл
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ВыборкаОбластей.Область);
		ПоставитьКонтрагентовНаМониторингВСервисеСПАРКРиски();
	КонецЦикла;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
