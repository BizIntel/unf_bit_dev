////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Показывает оповещение пользователю о наличии новых документов в сервисе 1С-ЭДО
//
Процедура ОповеститьОНовыхДокументахЭДО() Экспорт
	
	НавигационнаяСсылка = НавигационнаяСсылкаТекущиеДелаЭДО();
		ЗаголовокОповещения = НСтр("ru ='Сервис ЭДО'");
		ТекстОповещения = НСтр("ru = 'Получить новые документы'");
		
	ПоказатьОповещениеПользователя(ЗаголовокОповещения,
			НавигационнаяСсылка,
			ТекстОповещения,
			БиблиотекаКартинок.ЭмблемаСервиса1СЭДО)
	
КонецПроцедуры

// Подключает, отключает оповещение о новых ЭД.
//
// Параметры:
//  Включить - Булево - новое положение переключателя.
//
Процедура ИзменитьОповещенияЭДО(Включить = Ложь) Экспорт
	
	Если Включить Тогда
		ПодключитьОбработчикОжидания("ОповеститьОНовыхЭД", 15);
	Иначе
		ОтключитьОбработчикОжидания("ОповеститьОНовыхЭД");
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыЭДО

// Процедура - Выполнить команду формы документа
// Выполняет подключаемую команду ЭДО
// Параметры:
//  Объект		 - ДокументОбъект - Основной реквизит формы.
//  Форма		 - Форма - Форма документа ИБ.
//  ИмяКоманды	 - строка - Идентификатор выполняемой команды.
//
Процедура ВыполнитьКомандуФормыДокумента(Объект, Форма, ИмяКоманды) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПроверки = Неопределено;
		ОбменСКонтрагентамиКлиентПереопределяемый.ОбъектМодифицирован(Объект, Форма, РезультатПроверки);
		Если РезультатПроверки = Неопределено Тогда
			
			Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
				СтрПроведен = ?(Проведен, НСтр("ru = 'записать и провести.
				|Записать и провести?'"), НСтр("ru = 'записать.
				|Записать?'"));
				
				ШаблонСообщения = НСтр("ru = 'Документ изменен. Для формирования электронного документа его необходимо %1'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПроведен);
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("СсылкаНаОбъект", Объект.Ссылка);
				ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
				ДополнительныеПараметры.Вставить("Форма", Форма);
				ДополнительныеПараметры.Вставить("Проведен", Проведен);
				
				Обработчик = Новый ОписаниеОповещения( "ЗаписатьВФорме", ЭтотОбъект, ДополнительныеПараметры);
				
				ПоказатьВопрос( Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена,
					НСтр("ru = 'Документ изменен.'"));
				
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	ВыполнитьКомандуЭДО(Объект.Ссылка, ИмяКоманды);
	
КонецПроцедуры

// Запись в форме.
//
// Параметры:
//  Ответ					 - КодВозвратаДиалога - результат диалога.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ЗаписатьВФорме(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		Проведен = ДополнительныеПараметры.Проведен;
		Форма = ДополнительныеПараметры.Форма;
		
		Если Проведен Тогда
			Попытка
				Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			Исключение
				ПоказатьПредупреждение(, НСтр("ru = 'Операция не выполнена.'"));
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Не Форма.ЗаписатьВФорме();
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = ДополнительныеПараметры.СсылкаНаОбъект;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	ВыполнитьКомандуЭДО(СсылкаНаОбъект, ИмяКоманды);
	
	
КонецПроцедуры

// Открывает форму с деревом электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на объект ИБ, электронные документы которого надо увидеть,
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра дерева электронных документов.
//  ЭД - Ссылка - ссылка на электронный документ, используется для позиционирования текущей строки дерева на переданном ЭД.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДОПоДокументу(СсылкаНаОбъект) Тогда
		
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия, ЭД);
	Иначе
		
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме печати БСП.
//
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - текст навигационной ссылки;
//  МассивСсылок - Массив - ссылка на объекты ИБ, которые передали на печать.
//
Процедура ОбработкаНавигационнойСсылкиВФормеПечатиБСП(НавигационнаяСсылкаФорматированнойСтроки, МассивСсылок) Экспорт
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(МассивСсылок[0]);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает, подписывает и отправляет электронный документ.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - Ссылка - электронный документ, который надо подписать, отправить.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить", , ЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить.
//  Показывать - Булево - если Истина, то электронный документ будет открыть после формирования.
//
Процедура СформироватьНовыйЭД(ПараметрКоманды, Показывать = Истина) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Показывать Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПоказать");
	Иначе
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Сформировать");
	КонецЕсли;
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - Ссылка - электронный документ, который надо подписать, отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ОтправитьПовторно", , ЭД);
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
//
Процедура ОтправитьПолучитьОбменСКонтрагентами() Экспорт
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьПолучитьОбменСКонтрагентами();
	
КонецПроцедуры

// Процедура открывает форму администрирования обмена электронными документами.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыВыполненияКоманды - Структура - дополнительные параметры просмотра.
//
Процедура ОткрытьФормуОбменаЭлектроннымиДокументами(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИмяФормы = "ОбменЭлектроннымиДокументами";
	
	ПараметрыФормы = Новый Структура("ТекущийРаздел", ИмяФормы);
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияЭДО.Форма.ОбменЭлектроннымиДокументами",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открывается форма списка только с закладкой Настройки ЭДО с контрагентами.
//
Процедура ОткрытьФормуНастроекЭДОСКонтрагентами() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиЭДОСКонтрагентами", Истина);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

// Запускает обработку "Текущие дела ЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО() Экспорт
	
	ОткрытьФорму("Обработка.ТекущиеДелаПоЭДО.Форма");
	
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на документ ИБ;
//  Источник - УправляемаяФорма - источник открытия;
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра.
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
				
				ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД,
																		  ПараметрыОткрытия,
																		  ПараметрыОткрытия.Источник,
																		  Истина);
			Иначе
				ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД, , Источник, Истина);
			КонецЕсли;
			
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Электронный документ не найден.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ТекЭл);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура принудительно закрывает электронный документооборот для массива ссылок на документы.
//
// Параметры:
//  МассивВладельцевЭД - Массив - содержит ссылки на документы ИБ, для которых требуется закрыть ЭДО.
//
Процедура ЗакрытьПринудительноЭДО(МассивВладельцевЭД) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(МассивВладельцевЭД);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылок", МассивСсылок);
	
	Обработчик = Новый ОписаниеОповещения("ЗакрытьПринудительноРезультатВводаСтроки", ЭтотОбъект, ДополнительныеПараметры);
	
	ПричинаЗакрытия = "";
	ПоказатьВводСтроки(Обработчик, ПричинаЗакрытия, НСтр("ru = 'Укажите причину закрытия документооборота'"),,Истина);
	
	
КонецПроцедуры

#Область КомандыЭДОБыстрыйОбмен

// Открывает форму выгрузки ЭД в файл.
//
// Параметры:
//  ПараметрыЭД - Структура - содержит следующие поля:
//      * Ключ - Строка - "ВыгрузитьВФайл", обязательный параметр, определяет режим открытия формы выгрузи документа.
//      * ЗначениеКлюча - Структура - структура ЭД с полями:
//         ** ВидЭД -  перечисление ВидыЭД (файл быстрого обмена формируется только для ЭД ПрайсЛист);
//         ** АдресТаблицыЦен - адрес во временном хранилище, по которому находится таблица значений, источник данных;
//         ** ДатаФормирования - дата формирования ЭД;
//         ** ВладелецЭД - организация которой принадлежит ЭД;
//         ** Организация - организация от имени которой формируется ЭД.
//
Процедура СформироватьФайлБыстрогоОбмена(ПараметрыЭД) Экспорт
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаВыгрузкаЭДВФайл", ПараметрыЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить.
//
Процедура БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ФормаПросмотраЭД = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	
КонецПроцедуры

// Процедура создает новый электронный каталог.
//
Процедура БыстрыйОбменСформироватьНовыйЭДКаталог() Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	
	Обработчик = Новый ОписаниеОповещения("СформироватьНовыйЭДКаталог", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник." + НазваниеСправочникаОрганизации + ".ФормаВыбора",,,,,, Обработчик, Режим);
	
КонецПроцедуры

// Загружает файл электронного документа в данные ИБ, используется для вывода команды в интерфейсы.
//
Процедура БыстрыйОбменЗагрузитьЭДИзФайла() Экспорт
	
	БыстрыйОбменЗагрузитьЭД();
	
КонецПроцедуры

// Загружает файл электронного документа в документ ИБ.
//
// Параметры:
//  СсылкаНаДокумент - Ссылка - ссылка на объект ИБ, данные которого необходимо перезаполнить.
//
Процедура БыстрыйОбменЗагрузитьЭД(СсылкаНаДокумент = Неопределено) Экспорт
	
	Файл = Неопределено;
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, Файл, Истина, УникальныйИдентификатор);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПомощникиПодключенияЭДО

// Запускает мастер-помощник по подключению организации к сервису 1С-ЭДО.
//
Процедура ПомощникПодключенияКСервису1СЭДО() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к прямому обмену с контрагентами.
//
Процедура ПомощникПодключенияКПрямомуОбмену() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к сервису 1С-Такском.
//
Процедура ПомощникПодключенияКСервису1СТакском() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаЭДВФНС

// Получает документы информационной базы по заданным критериям отбора.
// Процедура предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - Структура - параметры отбора для формы выбора документов ИБ.
//
Процедура ПолучитьСвойстваДокументовИБДляПередачиФНС(СтруктураОтбора = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияВызова", 3);
	
	Если СтруктураОтбора <> Неопределено Тогда
		Если СтруктураОтбора.Свойство("ВидДокумента") Тогда
			ПараметрыФормы.Вставить("ВидДокумента", СтруктураОтбора.ВидДокумента);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Организация") Тогда
			ПараметрыФормы.Вставить("Организация", СтруктураОтбора.Организация);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Контрагент") Тогда
			ПараметрыФормы.Вставить("Контрагент", СтруктураОтбора.Контрагент);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаВыбораЭДДляПередачиФНС", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПерезаполнениеДокументаИБДаннымиЭД

// Перезаполняет документ ИБ на основании актуального ЭД.
//
// Параметры:
//  ПараметрКоманды - Массив, Ссылка - объекты информационной базы.
//  Источник - УправляемаяФорма - форма объекта.
//  СопоставлениеУжеВыполнено - Булево - если Истина, то сопоставление уже выполнялось;
//  ЭД - ДокуменСсылка.ВходящийЭлектронныйДокумент - электронный документ, номенклатура которого сопоставляется.
//  СпособОбработки - Строка - способ обработки входящего электронного документа.
//
Процедура ПерезаполнитьДокумент(ПараметрКоманды, Источник = Неопределено, СопоставлениеУжеВыполнено = Ложь, ЭД = Неопределено, СпособОбработки = "") Экспорт
	
	ОчиститьСообщения();
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = ОбменСКонтрагентамиСлужебныйВызовСервера.МассивПроведенныхДокументов(МассивСсылок);
	Шаблон = НСтр("ru = 'Перезаполнение документа %1.
						|Операция возможна только для непроведенных документов.'");
	Для Каждого Документ Из МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = Ложь;
	ОбменСКонтрагентамиКлиентПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуруПередЗаполнениемДокумента);
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		СоответствиеВладельцевИЭД = Новый Соответствие;
		СоответствиеВладельцевИЭД.Вставить(ПараметрКоманды, ЭД);
	Иначе
		СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
	КонецЕсли;
	
	Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru = 'Электронный документ для %1 не найден'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхВладельцев = Новый Массив;
	
	Для каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		ДокументИБ = ТекущаяСтрока.Ключ;
		СсылкаНаЭД = ТекущаяСтрока.Значение;
	
		Если Не ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектМетаданных = "";
		ДокументЗагружен = Ложь;
		
		// Форма сопоставления открывается только для одного выбранного документа.
		Если СоответствиеВладельцевИЭД.Количество() = 1 Тогда
			Если СопоставлятьНоменклатуруПередЗаполнениемДокумента И Не СопоставлениеУжеВыполнено Тогда
				СтруктураПараметров = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
				Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
					СтруктураПараметров.ПараметрыОткрытияФормы.Вставить("ВладелецЭД",ДокументИБ);	
					ОткрытьФорму(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы, Источник);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ПерезаполнитьДокументыИБПоЭД(
			ДокументИБ,
			СсылкаНаЭД,
			ОбъектМетаданных,
			ДокументЗагружен, СпособОбработки);
		
		Если ДокументЗагружен Тогда
				
			МассивИзмененныхВладельцев.Добавить(ДокументИБ);
			
			МассивДокументовОбновления = Новый Массив;
			МассивДокументовОбновления.Добавить(ДокументИБ);
			Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивДокументовОбновления);
			
			// Форма сопоставления открывается только для одного выбранного документа.
			Если СоответствиеВладельцевИЭД.Количество() = 1 Тогда
				Если НЕ СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
					СтруктураПараметров = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
					Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
						ДопПараметры = Новый Структура;
						ДопПараметры.Вставить("ОбъектМетаданных", ОбъектМетаданных);
						ДопПараметры.Вставить("КлючФормы", ДокументИБ);
						Обработчик = Новый ОписаниеОповещения("ЗаполнитьДокументПоЭД", ЭтотОбъект, ДопПараметры);
						Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
						ОткрытьФорму(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы,,,,,Обработчик, Режим);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если МассивИзмененныхВладельцев.Количество() > 0 Тогда
		
		Если МассивИзмененныхВладельцев.Количество() = 1 Тогда
			ТекстСостоянияВывод = НСтр("ru = 'Документ перезаполнен.'");
		Иначе
			ТекстСостоянияВывод = НСтр("ru = 'Документы перезаполнены (%1).'");
			ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, 
				МассивИзмененныхВладельцев.Количество());
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
		
	КонецЕсли;

КонецПроцедуры

// Заполнение документа по ЭД.
//
// Параметры:
//  Результат				 - Булево - результат заполнения.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ЗаполнитьДокументПоЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = ДополнительныеПараметры.ОбъектМетаданных;
	КлючФормы = ДополнительныеПараметры.КлючФормы;
	
	ФормаДокумента = ПолучитьФорму(ОбъектМетаданных + ".ФормаОбъекта", Новый Структура("Ключ", КлючФормы));
	
	Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
		ДанныеФормы = ФормаДокумента.Объект;
	Иначе
		ДанныеФормы = ФормаДокумента.ДокументОбъект;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаполнитьИсточник(ДанныеФормы, Результат);
	
	Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
	Иначе
		ФормаДокумента.ДокументОбъект = ДанныеФормы;
	КонецЕсли;
	
	ФормаДокумента.Открыть();
	ФормаДокумента.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФорм

// Вызывается из обработчика события "ПриОткрытии" формы списка и формы документа.
// Параметры:
//  Форма	 -  УправляемаяФорма - Форма документа или форма списков документов.
//
Процедура ПриОткрытии(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияЭДО", ВремяОжиданияЭДО(), Истина);
	
КонецПроцедуры

// Получение параметров оповещения для формы документ.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента":
//    * Форма - УправляемаяФорма - форма документа.
//    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
//    * ДекорацияСостояниеЭДО - ЭлементФормы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать ДекорацияСостояниеЭДО, необязательный параметр.
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю, в котором отображаются команды ЭДО.
//
Функция ПараметрыОповещенияЭДО_ФормаДокумента() Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО, МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ОбработкаОповещения" формы документа.
//
// Параметры:
//  ИмяСобытия - Строка - Имя события.
//  Параметр - Произвольный - Параметр сообщения. Могут быть переданы любые необходимые данные. 
//  Источник - Произвольный - Источник события. Например, в качестве источника может быть указана другая форма. 
//  ПараметрыОповещения - Структура - см. "ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента".
//
Процедура ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		ДекорацияСостояниеЭДО = ПараметрыОповещения.ДекорацияСостояниеЭДО;
		ГруппаСостояниеЭДО = ПараметрыОповещения.ГруппаСостояниеЭДО;
		ДокументСсылка = ПараметрыОповещения.ДокументСсылка;
		Форма = ПараметрыОповещения.Форма;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ДокументыУчета")
			И ТипЗнч(Параметр.ДокументыУчета) = Тип("Массив")
			И Параметр.ДокументыУчета.Найти(ДокументСсылка) = Неопределено Тогда
				
			Возврат;
				
		КонецЕсли;
		
		ОбменСКонтрагентамиКлиентСервер.ЗаполнитьСостояниеЭДО(Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО);
		
	ИначеЕсли ИмяСобытия = "ОбновитьНаличиеЭДО" Тогда
		
		Форма = ПараметрыОповещения.Форма;
		МестоРазмещенияКоманд = ПараметрыОповещения.МестоРазмещенияКоманд;
		ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

// Получение параметров оповещения для формы списка.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента".
//    * Форма - УправляемаяФорма - форма документа.
//    * ИмяДинамическогоСписка - Строка - Наименование динамического списка формы, отображающего "СостояниеЭД".
//                               Возможно указание нескольких списков через ("СписокИсходящий, СписокВходящий").
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю, в котором отображаются команды ЭДО.
//
Функция ПараметрыОповещенияЭДО_ФормаСписка() Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма, ИмяДинамическогоСписка, МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ОбработкаОповещения" формы списка документов.
//
// Параметры:
//  ИмяСобытия - Строка - ммя события.
//  Параметр - Произвольный - параметр сообщения, могут быть переданы любые необходимые данные. 
//  Источник - Произвольный - источник события. Например, в качестве источника может быть указана другая форма. 
//  ПараметрыОповещения - Структура - см. "ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка".
//
Процедура ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		ИмяДинамическогоСписка = ПараметрыОповещения.ИмяДинамическогоСписка;
		Форма = ПараметрыОповещения.Форма;
		
		МассивСписков = СтрРазделить(ИмяДинамическогоСписка, ", ", Ложь);
		Для Каждого ИмяРеквизита Из МассивСписков Цикл
			Форма.Элементы[ИмяРеквизита].Обновить();
		КонецЦикла;
			
	ИначеЕсли ИмяСобытия = "ОбновитьНаличиеЭДО" Тогда
		
		МестоРазмещенияКоманд = ПараметрыОповещения.МестоРазмещенияКоманд;
		Форма = ПараметрыОповещения.Форма;
		ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры ожидания ЭДО.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО".
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю в котором отображаются команды ЭДО.
//
Функция ПараметрыОжиданияЭДО() Экспорт
	
	ПараметрыОжиданияЭДО = Новый Структура("МестоРазмещенияКоманд");
	Возврат ПараметрыОжиданияЭДО;
	
КонецФункции

// Обработчик ожидания событий ЭДО.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, к которой подключается обработчик;
//  ПараметрыОжиданияЭДО - Структура, Неопределено - дополнительные параметры обработчика ожидания.
//
Процедура ОбработчикОжиданияЭДО(Форма, ПараметрыОжиданияЭДО = Неопределено) Экспорт
	
	МестоРазмещенияКоманд = Неопределено;
	Если Не ПараметрыОжиданияЭДО = Неопределено Тогда
		МестоРазмещенияКоманд = ПараметрыОжиданияЭДО.МестоРазмещенияКоманд;
	КонецЕсли;
	
	ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияЭДО", ВремяОжиданияЭДО(), Истина);
	
КонецПроцедуры

// Обработка результата помещения файла.
//
// Параметры:
//  ВыборВыполнен			 - Булево - результат выполнения выбора.
//  АдресФайла				 - Строка - адрес хранилища.
//  ВыбранноеИмяФайла		 - Строка - имя файла.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не ВыборВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	Расширение = Прав(ВыбранноеИмяФайла, 3);
	СсылкаНаДокумент = ДополнительныеПараметры.СсылкаНаДокумент;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	
	Если ВРег(Расширение) <> ВРег("zip") Тогда
		ТекстСообщения = НСтр("ru = 'Некорректный формат файла.
									|Выберите файл с расширением ""zip"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураОбмена = Новый Структура();
	СтруктураОбмена.Вставить("НаправлениеЭД",           ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
	СтруктураОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СтруктураОбмена.Вставить("АдресХранилища",          АдресФайла);
	СтруктураОбмена.Вставить("СсылкаНаДокумент",        СсылкаНаДокумент);
	СтруктураОбмена.Вставить("ИмяФайла",                ВыбранноеИмяФайла);
	СтруктураОбмена.Вставить("ФайлАрхива",              ВРег(Расширение) = ВРег("zip"));
	
	Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаЗагрузкиПросмотраЭД", Параметры, ,
		СтруктураОбмена.УникальныйИдентификатор);
	
	
КонецПроцедуры

#КонецОбласти

#Область РекламаЭДО

// Открывает рекламную форму ЭДО.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.Контрагент - ссылка на контрагента;
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию;
//  ДополнительныеПараметры - Структура - дополнительные параметры;
//  ОбработчикЗакрытияФормы - ОписаниеОповещения - оповещение, вызываемое после выполнения процедуры.
//
Процедура ПредложениеОформитьЗаявлениеНаПодключение(Контрагент = Неопределено, Организация = Неопределено, ДополнительныеПараметры = Неопределено, ОбработчикЗакрытияФормы = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Контрагент", Контрагент);
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ПредложениеОформитьЗаявлениеНаПодключение", ПараметрыОткрытия,,,,,
		ОбработчикЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеМетоды

// Устарела. Следует использовать процедуру ПолучитьСвойстваДокументовИБДляПередачиФНС.
// Получает документы информационной базы по заданным критериям отбора.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - Структура - параметры отбора для формы выбора документов ИБ.
//  МножественныйВыбор - Булево - свойство формы выбора.
//
// Возвращаемое значение:
//  Неопределено - значение для обратной совместимости.
//
Функция ПолучитьДокументыИБДляПередачиФНС(СтруктураОтбора, МножественныйВыбор) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Устарела. Следует использовать процедуру ОткрытьДеревоЭД.
// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на объект ИБ, электронные документы которого надо увидеть.
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДОПоДокументу(СсылкаНаОбъект) Тогда
		
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
			Возврат;
		КонецЕсли;
	
		ПараметрыЭД = Неопределено;
		ОткрытьФормуСоглашения = Ложь;
		ПроверятьДляСоглашения = (ПараметрыОткрытия = Неопределено);
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.МожноОткрытьВФормеДереваЭД(СсылкаНаОбъект, ПроверятьДляСоглашения,
			ОткрытьФормуСоглашения, ПараметрыЭД) Тогда
			
			ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия, Ложь);
		Иначе
			ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
			Если ПараметрыОткрытия = Неопределено Тогда
				ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СписокЭД", ПараметрыФормы);
			Иначе
				Окно = Неопределено;
				Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
					Окно = ПараметрыОткрытия.Окно;
				КонецЕсли;
				ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СписокЭД", ПараметрыФормы,
					СсылкаНаОбъект, Ложь, Окно);
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Продолжение процедуры ЗакрытьПринудительноЭДО.
//
// Параметры:
//  ПричинаЗакрытия			 - Строка - причины закрытия электронного документа.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//    * Массив - список документов для закрытия.
//
Процедура ЗакрытьПринудительноРезультатВводаСтроки(ПричинаЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПричинаЗакрытия) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	МассивСсылок = ДополнительныеПараметры.МассивСсылок;
	КоличествоОбработанныхЭД = 0;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(МассивСсылок, ПричинаЗакрытия, КоличествоОбработанныхЭД);
	
	ТекстОповещения = НСтр("ru = 'Изменено состояние ЭД документов на ""Закрыт принудительно"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", КоличествоОбработанныхЭД);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка документов'"), , ТекстОповещения);
	Если КоличествоОбработанныхЭД > 0 Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ДокументыВладельцы", МассивСсылок);
		Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);

	КонецЕсли;
	
КонецПроцедуры

// Описание оповещения для процедуры БыстрыйОбменСформироватьНовыйЭДКаталог
//
// Параметры:
//  Организация				 - СправочникСсылка - организация с информационной базе.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры (не используется).
//
Процедура СформироватьНовыйЭДКаталог(Организация, ДополнительныеПараметры) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Организация", Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СформироватьНовыйЭДКаталогЗавершить", ОбменСКонтрагентамиСлужебныйКлиент, ДопПараметры);
	ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуПодбораТоваров(Новый УникальныйИдентификатор(),
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВремяОжиданияЭДО()
	
	Возврат 1800;
	
КонецФункции

Процедура ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд = Неопределено)
	
	КартинкаПодменюЭДО = ОбменСКонтрагентамиСлужебныйКлиент.КартинкаОповещенияЭДО();
	ОбновитьОтображениеНовыхЭД(Форма, КартинкаПодменюЭДО, МестоРазмещенияКоманд);

КонецПроцедуры

Процедура ВыполнитьКомандуЭДО(СсылкаНаОбъект, ИмяКоманды)
	
	Если ИмяКоманды = "СформироватьПодписатьОтправитьЭД" Тогда
		СформироватьПодписатьОтправитьЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "СформироватьНовыйЭД" Тогда
		СформироватьНовыйЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "ОтправитьПовторно" Тогда
		ОтправитьПовторноЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "ОткрытьАктуальныйЭД" Тогда
		ОткрытьАктуальныйЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "БыстрыйОбменСформироватьНовыйЭД" Тогда
		 БыстрыйОбменСформироватьНовыйЭД(СсылкаНаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме объекта.
//
// Параметры:
//  СсылкаНаОбъект - СсылкаНаОбъект - ссылка на объект ИБ, на форме которого была активирована гиперссылка с рекламным текстом.
//
Процедура ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект)
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоНастройкиЭДО(Ложь) Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для настройки ЭДО с контрагентом.
									|Обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыЭД = Неопределено;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД);
	
	Если ПараметрыЭД.Свойство("НастройкаЭДО") И ЗначениеЗаполнено(ПараметрыЭД.НастройкаЭДО) Тогда
		
		Если ПараметрыЭД.Свойство("СтатусПодключения") И ЗначениеЗаполнено(ПараметрыЭД.СтатусПодключения)
			И ПараметрыЭД.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НастройкаЭДО", ПараметрыЭД.НастройкаЭДО);
			ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
			ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ПараметрыЭД.НастройкаЭДО);
			
			ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
			
		КонецЕсли;
	Иначе
		ПредложениеОформитьЗаявлениеНаПодключение(ПараметрыЭД.Контрагент, ПараметрыЭД.Организация);
	КонецЕсли;
	
КонецПроцедуры

// Обновление отображения новых электронных документов.
//
// Параметры:
//  Форма					 - Форма - форма отображения.
//  КартинкаЭДО				 - Картинка - изображение оповещения.
//  МестоРазмещенияКоманд	 - Массив, ЭлементФормы - место размещения команд.
//
Процедура ОбновитьОтображениеНовыхЭД(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	Если Не МестоРазмещенияКоманд = Неопределено Тогда
		
		Если ТипЗнч(МестоРазмещенияКоманд) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из МестоРазмещенияКоманд Цикл
				ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд);
			
		КонецЕсли;
		
	Иначе
		
		Элементы = Форма.Элементы;
		
		ПодменюЭДО = ПодменюЭДОФормы(Элементы);
		Если ПодменюЭДО = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ПодменюЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодменюЭДОФормы(ЭлементыФормы)
	
	КомандыЭДО = ЭлементыФормы.Найти("ФормаКоманднаяПанельКомандыЭДО");
	
	Возврат КомандыЭДО;
	
КонецФункции

Процедура ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	ПодменюЭДО = МестоРазмещенияКоманд;
	Если ПодменюЭДО.Картинка = КартинкаЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюЭДО.Картинка = КартинкаЭДО;
	Если Не КартинкаЭДО = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО Тогда
		ПодменюЭДО.Подсказка = НСтр("ru = 'В сервисе 1С-ЭДО есть новые документы'");
	Иначе
		ПодменюЭДО.Подсказка = НСтр("ru = 'Команды ЭДО'");
	КонецЕсли;
	
КонецПроцедуры

Функция НавигационнаяСсылкаТекущиеДелаЭДО()
	
	Возврат "e1cib/app/Обработка.ТекущиеДелаПоЭДО";
	
КонецФункции

#КонецОбласти
