
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Подключение 1С-Такском".
// ОбщийМодуль.Подключение1СТакскомКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет получение в сервисе 1С-Такском уникального идентификатора абонента
// электронного документооборота.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи;
//	Организация - Произвольный - организация, с которой связан сертификат,
//		используется для заполнения данных организации в заявке на получение
//		идентификатора абонента (см. Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации());
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик, в который
//		передается результат получения идентификатора.
//		Передаваемое значение:
//			Строка - полученный идентификатор абонента;
//			Неопределено - если, идентификатор абонента не был получен.
//
Процедура ПолучитьУникальныйИдентификаторАбонента(
	СертификатЭП,
	Организация,
	ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	ПараметрыЭДО.Вставить("identifierTaxcomED", "");
	ПараметрыЭДО.Вставить("ToAddCert"         , "NO");
	
	ИнтернетПоддержкаПользователейКлиент.ВыполнитьСценарий(
		"taxcomGetID",
		ПараметрыЭДО,
		,
		Новый Структура("ОбработчикЗавершения", ОповещениеОЗавершении));
	
КонецПроцедуры

// Выполняет регистрацию в сервисе 1С-Такском нового сертификата абонента
// электронного документооборота.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи;
//	ИдентификаторАбонента - Строка - уникальный идентификатор абонента,
//		для которого регистрируется сертификат;
//	Организация - Произвольный - организация, с которой связан сертификат,
//		используется для заполнения данных организации в заявке на регистрацию
//		сертификата (см. Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации());
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик, в который
//		передается результат регистрации сертификата.
//		Передаваемое значение:
//			Булево - результат регистрации сертификата. Истина - если
//				сертификат зарегистрирован успешно, Ложь - в противном случае.
//
Процедура ЗарегистрироватьСертификатАбонента(
	СертификатЭП,
	ИдентификаторАбонента,
	Организация,
	ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	ИначеЕсли ТипЗнч(ИдентификаторАбонента) <> Тип("Строка") Или ПустаяСтрока(ИдентификаторАбонента) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""ИдентификаторАбонента"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	ПараметрыЭДО.Вставить("identifierTaxcomED", ИдентификаторАбонента);
	ПараметрыЭДО.Вставить("ToAddCert"         , "YES");
	
	ОповещениеОЗавершенииБизнесПроцесса = Новый ОписаниеОповещения(
		"ЗарегистрироватьСертификатАбонентаЗавершение",
		ЭтотОбъект,
		ОповещениеОЗавершении);
	
	ИнтернетПоддержкаПользователейКлиент.ВыполнитьСценарий(
		"taxcomGetID",
		ПараметрыЭДО,
		,
		Новый Структура("ОбработчикЗавершения", ОповещениеОЗавершенииБизнесПроцесса));
	
КонецПроцедуры

// Открывает личный кабинет абонента сервиса 1С-Такском.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи, связанный с абонентом;
//
Процедура ОткрытьЛичныйКабинетАбонента(СертификатЭП) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , "");
	ПараметрыЭДО.Вставить("identifierTaxcomED", "");
	ПараметрыЭДО.Вставить("ToAddCert"         , "NO");
	
	ИнтернетПоддержкаПользователейКлиент.ВыполнитьСценарий("taxcomPrivat", ПараметрыЭДО);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Будет удалена в следующей редакции библиотеки.
// Необходимо использовать методы
//	- ПолучитьУникальныйИдентификаторАбонента();
//	- ЗарегистрироватьСертификатАбонента();
//	- ОткрытьЛичныйКабинетАбонента().
// Запуск механизма работы с сервисом оператора ЭДО.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат ЭП;
//	Организация - Произвольный - организация, организация, с которой связан
//		сертификат;
//	ВариантБизнесПроцесса - Строка - имя действия ЭДО.Возможные значения:
//		"taxcomGetID"  - запуск получения (регистрации) нового идентификатора
//		"taxcomPrivat" - вход в личный кабинет абонента ЭДО.
//	ИдентификаторОрганизации - Строка - идентификатор организации в системе ЭДО;
//	ПарольСертификатаЭП - Строка, Неопределено - пароль используемого
//		во избежание повторного ввода пароля;
//	УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//		из которой был вызван метод. Используется как источник события при
//		оповещении формы-инициатора о результате.
//
Процедура СтартоватьМеханизмРаботыСОператоромЭДО(
	СертификатЭП,
	Организация,
	ВариантБизнесПроцесса,
	ИдентификаторОрганизации = "",
	ПарольСертификатаЭП = Неопределено,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	// Проверка заполнения необходимых полей
	ТекстОшибки      = "";
	ТекстСообщения   = "";
	КоличествоОшибок = 0;
	
	Если Не ЗначениеЗаполнено(СертификатЭП) Тогда
		
		ТекстОшибки = НСтр("ru = '""Сертификат абонента""'");
		КоличествоОшибок = КоличествоОшибок + 1;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + " " + НСтр("ru = 'и'") + " ";
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + НСтр("ru = '""Организация""'");
		КоличествоОшибок = КоличествоОшибок + 1;
		
	КонецЕсли;
	
	// Проверка остальных параметров дублирует проверку библиотеки ЭДО.
	// При совместной работе с библиотекой ЭДО эти проверки всегда будут
	// проходить со значением Истина.
	Если КоличествоОшибок > 0 Тогда
		
		Если КоличествоОшибок = 1 Тогда
			ДопТекст = НСтр("ru = 'Пожалуйста, заполните поле'") + " ";
		Иначе
			ДопТекст = НСтр("ru = 'Пожалуйста, заполните поля'") + " ";
		КонецЕсли;
		
		ТекстСообщения = ДопТекст + ТекстОшибки;
		
		Если ВариантБизнесПроцесса = "taxcomGetID" Тогда
			ТекстСообщения = ТекстСообщения
				+ " " + НСтр("ru = 'до получения уникального идентификатора участника обмена ЭД'");
		ИначеЕсли ВариантБизнесПроцесса = "taxcomPrivat" Тогда
			ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'до перехода в личный кабинет'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	// Запуск механизма
	Если ВариантБизнесПроцесса = "taxcomGetID" Тогда
		
		Если ПустаяСтрока(ИдентификаторОрганизации) Тогда
			// Это получение идентификатора
			ТекстОповещенияПользователя = 
			НСтр("ru = 'Получение уникального идентификатора участника обмена ЭД будет доступно
					   |после подключения к сервису Интернет-поддержки пользователей и проверки
					   |подлинности владельца указанного в соглашении сертификата абонента.
					   |Продолжить?'");
		Иначе
			ТекстОповещенияПользователя =
			НСтр("ru = 'Добавление нового сертификата в соглашение будет выполнено
					   |после подключения к сервису Интернет-поддержки пользователей и проверки
					   |подлинности владельца указанного в соглашении сертификата абонента.
					   |Продолжить?'");
		КонецЕсли;
		
	ИначеЕсли ВариантБизнесПроцесса = "taxcomPrivat" Тогда
		
		ТекстОповещенияПользователя = 
		НСтр("ru = 'Вход в личный кабинет участника обмена ЭД будет доступен
				   |после подключения к сервису Интернет-поддержки пользователей и проверки
				   |подлинности владельца указанного в соглашении сертификата абонента.
				   |Продолжить?'");
		
	Иначе
		
		ТекстПредупреждения = СтрЗаменить(
			НСтр("ru = 'Ошибка встраивания механизма Интернет-поддержки пользователей.
						|Указан неверный вариант бизнес-процесса (%1).'"),
			"%1",
			ВариантБизнесПроцесса);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	СтартовыеПараметрыЭДО = Новый Структура;
	СтартовыеПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	СтартовыеПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	СтартовыеПараметрыЭДО.Вставить("identifierTaxcomED", ИдентификаторОрганизации);
	
	Если ПарольСертификатаЭП <> Неопределено Тогда
		СтартовыеПараметрыЭДО.Вставить("passwordCertificateED", ПарольСертификатаЭП);
	КонецЕсли;
	
	Если УникальныйИдентификаторФормы <> Неопределено Тогда
		СтартовыеПараметрыЭДО.Вставить("IDParentForm", УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдентификаторОрганизации) И ВариантБизнесПроцесса = "taxcomGetID" Тогда
		СтартовыеПараметрыЭДО.Вставить("ToAddCert", "YES");
	КонецЕсли;
	
	ДопПараметрыОповещения = Новый Структура("ВариантБизнесПроцесса, СтартовыеПараметрыЭДО",
		ВариантБизнесПроцесса,
		СтартовыеПараметрыЭДО);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОНачалеБизнесПроцессаЭДО",
		ЭтотОбъект,
		ДопПараметрыОповещения);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстОповещенияПользователя, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики бизнес-процессов

// Выполнение команды сервиса ИПП на стороне клиента 1С:Предприятия.
// Вызывается из ИнтернетПоддержкаПользователейКлиент.ВыполнитьКомандуСервиса().
//
// Параметры:
//	КонтекстВзаимодействия - см. описание функции
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия();
//	ТекущаяФорма - УправляемаяФорма - форма, из которой выполняется вызов;
//	СтруктураКоманды - см. описание функции
//		ИнтернетПоддержкаПользователейКлиентСервер.СтруктурироватьОтветСервера();
//	КонтекстОбработчика - см. описание функции
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
//	ПрерватьОбработкуКоманд - Булево - в параметре возвращается признак
//		необходимости остановки выполнения команд при возникновении асинхронного действия.
//
Процедура ВыполнитьКомандуСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	СтруктураКоманды,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд) Экспорт
	
	ИмяКоманды = СтруктураКоманды.ИмяКоманды;
	
	Если ИмяКоманды = "setcodesregion" Тогда
		
		Подключение1СТакскомКлиентСервер.СохранитьВПараметрахКодыРегионов(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "performtheaction.decode" Тогда
		
		ПрерватьОбработкуКоманд = Истина;
		РасшифроватьКонтрольныйМаркерЭПСервера(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			ТекущаяФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при формировании параметров открытия формы бизнес-процесса,
// передаваемых в метода ПолучитьФорму().
// Вызывается из ИнтернетПоддержкаПользователейКлиент.СформироватьПараметрыОткрытияФормы().
//
// Параметры:
//	КСКонтекст - см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()
//	ИмяОткрываемойФормы - Строка - полное имя открываемой формы;
//	Параметры - Структура - заполняемые параметры открытия формы.
//
Процедура ПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы, Параметры) Экспорт
	
	Если ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.УникальныйИдентификаторАбонента" Тогда
		Параметры.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		Параметры.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		Параметры.Вставить("identifierTaxcomED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		Параметры.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		Параметры.Вставить("IDCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		Параметры.Вставить("IDOrganizationED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDOrganizationED"));
		Параметры.Вставить("ToAddCert",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ToAddCert"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ЗаявкаНаРегистрациюАбонента" Тогда
		Параметры.Вставить("statusApplicationFormED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "statusApplicationFormED"));
		Параметры.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		Параметры.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		Параметры.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		Параметры.Вставить("nameCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "nameCertificateED"));
		Параметры.Вставить("orgindED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
		Параметры.Вставить("postindexED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
		Параметры.Вставить("addressregionED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressregionED"));
		Параметры.Вставить("coderegionED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
		Параметры.Вставить("addresstownshipED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
		Параметры.Вставить("addresscityED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
		Параметры.Вставить("addresslocalityED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
		Параметры.Вставить("addressstreetED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
		Параметры.Вставить("addressbuildingED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
		Параметры.Вставить("addresshousingED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
		Параметры.Вставить("addressapartmentED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
		Параметры.Вставить("addressphoneED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
		Параметры.Вставить("agencyED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
		Параметры.Вставить("innED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
		Параметры.Вставить("kppED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
		Параметры.Вставить("ogrnED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
		Параметры.Вставить("codeimnsED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
		Параметры.Вставить("lastnameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
		Параметры.Вставить("firstnameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
		Параметры.Вставить("middlenameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
		Параметры.Вставить("identifierTaxcomED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		Параметры.Вставить("IDCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ИзменениеТарифа" Тогда
		Параметры.Вставить("freePackagesED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "freePackagesED"));
		Параметры.Вставить("unallocatedPackagesED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "unallocatedPackagesED"));
		Параметры.Вставить("begindatetarifED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "begindatetarifED"));
		Параметры.Вставить("enddatetarifED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "enddatetarifED"));
		Параметры.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		Параметры.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		Параметры.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		Параметры.Вставить("codeErrorED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeErrorED"));
		Параметры.Вставить("textErrorED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "textErrorED"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует информацию о завершении бизнес-процесса для потребителя
// программного интерфейса.
//
Процедура ЗарегистрироватьСертификатАбонентаЗавершение(Результат, ОбработчикЗавершения) Экспорт
	
	Если ОбработчикЗавершения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ответ пользователя на вопрос из СтартоватьМеханизмРаботыСОператоромЭДО().
//
Процедура ПриОтветеНаВопросОНачалеБизнесПроцессаЭДО(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.ВыполнитьСценарий(
		ДопПараметры.ВариантБизнесПроцесса,
		ДопПараметры.СтартовыеПараметрыЭДО);
	
КонецПроцедуры

// Расшифрование маркера, возвращенного сервисом ИПП для подтверждения
// подлинности владельца сертификата. Кодограмма хранится в сессионном параметре
// с именем "markerED".
//
// Параметры:
// КонтекстВзаимодействия - Структура - см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()
// СтруктураКоманды Структура - данные команды сервиса ИПП.
// КонтекстОбработчика - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
// ТекущаяФорма - УправляемаяФорма - текущая форма ИПП.
//
Процедура РасшифроватьКонтрольныйМаркерЭПСервера(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ТекущаяФорма)
	
	СообщениеОбОшибкеДляПользователя = НСтр("ru = 'Ошибка при проверке пароля сертификата.
		|Подробнее см. в журнале регистрации.'");
	
	// Получение необходимых сессионных параметров для выполнения операции расшифрования.
	ПараметрыДляРасшифрования = СессионныеПараметрыДляРасшифрования(КонтекстВзаимодействия.КСКонтекст);
	
	Если ПараметрыДляРасшифрования.markerED = Неопределено Тогда
		// Ошибка бизнес-процесса: отсутствует обязательный параметр "markerED".
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Отсутствует маркер аутентификации (markerED)'"));
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеМаркера = Base64Значение(ПараметрыДляРасшифрования.markerED);
	Исключение
		// Ошибка получения двоичных данных маркера из base64-строки
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		СообщениеДляЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Не удалось получить двоичные данные маркера (markerED).
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеДляЖурналаРегистрации);
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
	КонецПопытки;
	
	// Получение внутреннего представления ссылки сертификата
	Если ЗначениеЗаполнено(ПараметрыДляРасшифрования.IDCertificateED_Dop) Тогда
		
		// Ссылка дополнительного сертификата
		СертификатЭП = ПараметрыДляРасшифрования.IDCertificateED_Dop;
		
		УдаляемыеПараметры = Новый Массив;
		УдаляемыеПараметры.Добавить(Новый Структура("Имя", "IDCertificateED_Dop"));
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
			КонтекстВзаимодействия.КСКонтекст,
			УдаляемыеПараметры,
			КонтекстОбработчика);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыДляРасшифрования.IDCertificateED) Тогда
		
		// Ссылка основного сертификата
		СертификатЭП = ПараметрыДляРасшифрования.IDCertificateED;
		
	Иначе
		
		// Не удалось получить ссылку сертификата - завершение бизнес-процесса
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Не указан сертификат (IDCertificateED, IDCertificateED_Dop)'"));
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
		
	КонецЕсли;
	
	// Вызов программного интерфейса СтандартныеПодсистемы.ЭлектроннаяПодпись.
	// Формирование описания данных для расшифрования.
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Проверка пароля сертификата'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", "");
	
	ОписаниеДанных.Вставить("ЭтоАутентификация"        , Истина);
	ОписаниеДанных.Вставить("Данные"                   , ДвоичныеДанныеМаркера);
	ОписаниеДанных.Вставить("СертификатыШифрования"    , Новый Массив);
	ОписаниеДанных.Вставить("БезПодтверждения"         , Истина);
	ОписаниеДанных.Вставить("СообщитьОЗавершении"      , Ложь);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	
	ОтборСертификатов = Новый Массив;
	ОтборСертификатов.Добавить(СертификатЭП);
	ОписаниеДанных.Вставить("ОтборСертификатов", ОтборСертификатов);
	
	// Дополнительные параметры для обработчика оповещения
	ДопПараметрыОбработчика = Новый Структура;
	ДопПараметрыОбработчика.Вставить("СтруктураКоманды"      , СтруктураКоманды);
	ДопПараметрыОбработчика.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
	ДопПараметрыОбработчика.Вставить("ТекущаяФорма"          , ТекущаяФорма);
	ДопПараметрыОбработчика.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
	
	// Вызов программного интерфейса СтандартныеПодсистемы.ЭлектроннаяПодпись
	// для расшифрования контрольного маркера.
	ЭлектроннаяПодписьКлиент.Расшифровать(
		ОписаниеДанных,
		,
		Новый ОписаниеОповещения("РасшифрованиеЗавершение", ЭтотОбъект, ДопПараметрыОбработчика));
	
КонецПроцедуры

// Возвращает сессионные параметры, необходимые для расшифрования
// контрольного маркера ЭП.
//
Функция СессионныеПараметрыДляРасшифрования(КСКонтекст)
	
	Результат = Новый Структура;
	Результат.Вставить("markerED",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "markerED"));
	Результат.Вставить("IDCertificateED_Dop",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED_Dop"));
	Результат.Вставить("IDCertificateED",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
	
	Возврат Результат;
	
КонецФункции

// Обработка завершения расшифрования контрольного маркера
Процедура РасшифрованиеЗавершение(РезультатРасшифрования, ДопПараметры) Экспорт
	
	Если РезультатРасшифрования.Успех Тогда
		
		РасшифрованныеДанные = РезультатРасшифрования.РасшифрованныеДанные;
		Если ТипЗнч(РасшифрованныеДанные) = Тип("Строка") Тогда
			// Результат - во временном хранилище.
			РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
		КонецЕсли;
		
		// Запись расшифрованного маркера в сессионные параметры.
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(
			ДопПараметры.КонтекстВзаимодействия.КСКонтекст,
			"openMarkerED",
			РасшифрованныеДанные,
			"sessionParameter");
		
		// Продолжение выполнения бизнес-процесса
		ИнтернетПоддержкаПользователейКлиент.ОбработкаКомандСервиса(
			ДопПараметры.КонтекстВзаимодействия,
			ДопПараметры.ТекущаяФорма,
			,
			ДопПараметры.КонтекстОбработчика,
			Новый Структура("ПродолжитьВыполнение", Истина));
		
	Иначе
		
		// Завершить бизнес-процесс, т.к. дальнейшее продолжение
		// бизнес-процесса невозможно.
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(ДопПараметры.КонтекстВзаимодействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Просмотр причины отклонения заявки ЭДО в диалоге предупреждения.
//
Процедура ПоказатьПричинуОтклоненияЗаявкиЭДО(КонтекстВзаимодействия) Экспорт
	
	ОписаниеПричины = ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия);
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ОписаниеПричины.КодОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Код ошибки: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеПричины.КодОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ОписаниеПричины.ТекстОшибки;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестная ошибка. Обратитесь в службу техподдержки.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

// Чтение причины отклонения заявки ЭДО из сессионных параметров.
//
Функция ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия)
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодОшибки",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"codeErrorED"));
	Результат.Вставить("ТекстОшибки",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"textErrorED"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст технических параметров ЭДО для формирования письма в службу
// тех. поддержки.
//
Функция ТекстТехническихПараметровЭДО(КонтекстВзаимодействия, Знач Сертификат = Неопределено) Экспорт
	
	ТехническиеПараметры = НСтр("ru = 'Параметры участника обмена ЭД:
		|
		|- отпечаток сертификата: %1'");
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		Сертификат = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"IDCertificateED");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ОтпечатокСертификата = Подключение1СТакскомВызовСервера.ОтпечатокСертификата(Сертификат);
	Иначе
		ОтпечатокСертификата = "";
	КонецЕсли;
	
	ТехническиеПараметры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТехническиеПараметры,
		ОтпечатокСертификата);
	
	КодОшибки = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"codeErrorED");
	ТекстОшибки = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"textErrorED");
	
	Если НЕ ПустаяСтрока(КодОшибки) Тогда
		
		СтрДанныхОшибки = Символы.ПС + НСтр("ru = '- код ошибки: %1,
			|- описание ошибки: %2'");
		
		ТехническиеПараметры = ТехническиеПараметры
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрДанныхОшибки,
				КодОшибки,
				ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ТехническиеПараметры;
	
КонецФункции

#КонецОбласти
