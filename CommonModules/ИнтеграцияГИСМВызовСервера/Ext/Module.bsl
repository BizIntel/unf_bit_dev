////////////////////////////////////////////////////////////////////////////////
//
// ИнтеграцияГИСМ: процедуры и функции требующие серверного вызова подсистемы "Интеграция с ГИСМ"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВерсииСхемОбмена

// Проверяет версию сервера ГИСМ и выбирает версию схем для обмена.
// 
// Возвращаемое значение:
//  Строка - Версия схем обмена.
//
Функция АктуальнаяВерсияСхемОбмена() Экспорт
	
	НоваяВерсия = Неопределено;
	
	ВерсияСервера = ИнтеграцияГИСМВызовСервера.ВерсияСервераГИСМ();
	Если ЗначениеЗаполнено(ВерсияСервера) Тогда
		
		НоваяВерсия = Неопределено;
		СоответствиеВерсийСхемОбмена = ИнтеграцияГИСМ.СоответствиеВерсийСхемОбмена();
		Для Каждого КлючИЗначение Из СоответствиеВерсийСхемОбмена Цикл
			
			Если КлючИЗначение.Ключ = ВерсияСервера Тогда
				НоваяВерсия = ВерсияСервера;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НоваяВерсия = Неопределено Тогда
			НоваяВерсия = ИнтеграцияГИСМ.ВерсияСхемОбменаПоследняяПоддерживаемая();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяВерсия;
	
КонецФункции

// Получить версию сервера ГИСМ
// 
// Возвращаемое значение:
//  Строка - Номер версии
//
Функция ВерсияСервераГИСМ() Экспорт
	
	// Заранее подготовленный тестовый запрос (получение несуществующей квитанции с неверной подписью. Главное - получить номер версии сервера).
	КонвертSOAP = 
	"<soap:Envelope xmlns:lb=""http://svc.center-inform.ru/serviceLabel/rev111111""
	|               xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
	|               xmlns:sudt=""http://sudt.eek.ru/rev111111""
	|               xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
	|               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
	|  <soap:Header>
	|    <wsse:Security soap:actor=""http://smev.gosuslugi.ru/actors/smev"">
	|      <ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
	|        <SignedInfo xmlns=""http://www.w3.org/2000/09/xmldsig#"">
	|          <CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
	|          <SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411""/>
	|          <Reference URI=""#body"">
	|            <Transforms>
	|              <Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/>
	|              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
	|            </Transforms>
	|            <DigestMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#gostr3411""/>
	|            <DigestValue>RySTtXV/Q+lrBs7kxDvMAo5eEkVUo/dCJ3jVS+1EACM=</DigestValue>
	|          </Reference>
	|        </SignedInfo>
	|        <SignatureValue xmlns=""http://www.w3.org/2000/09/xmldsig#"">
	|          PuHW+OY3MFzbWhGtJ3wpXkn6uCx60WFxaHoUkuB+SeIX5MyWMVfOLykuqryfT2Fkzv5ekvbtZPm1VD//PDKYMA==
	|        </SignatureValue>
	|        <ds:KeyInfo>
	|          <wsse:SecurityTokenReference>
	|            <wsse:Reference URI=""#SenderCertificate""
	|                            ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/>
	|          </wsse:SecurityTokenReference>
	|        </ds:KeyInfo>
	|      </ds:Signature>
	|      <wsse:BinarySecurityToken
	|              EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary""
	|              ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""
	|              wsu:Id=""SenderCertificate"">
	|        MIIGhDCCBjOgAwIBAgIKHwVIOwAAAAAAsTAIBgYqhQMCAgMwga0xKzApBgkqhkiG9w0BCQEWHGEucG9zdG5pa292QGNlbnRlci1pbmZvcm0ucnUxGTAXBgNVBAsTEFRlc3QgRW5naW5lZXJpbmcxFTATBgNVBAoTDENlbnRlckluZm9ybTFMMEoGA1UEAxNDQ2VudGVySW5mb3JtIFRlc3QgRW5naW5lZXJpbmcgRGl2aXNpb24gUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0xNjAyMjAwNzM0MDBaFw0xNzAyMjAwNzQ0MDBaMIIBjDEWMBQGBSqFA2QDEgs3NzA5MDEwMDE3NzEYMBYGBSqFA2QBEg0xMTA3NzQ2Njk1OTgwMRowGAYIKoUDA4EDAQESDDAwNzcwOTg2MDQwMDELMAkGA1UEBhMCUlUxHDAaBgNVBAgMEzc3INCzLiDQnNC+0YHQutCy0LAxGDAWBgNVBAcMD9CzINCc0L7RgdC60LLQsDEVMBMGA1UECgwM0J7QntCeICIx0KEiMQowCAYDVQQLDAEwMRUwEwYDVQQDDAzQntCe0J4gIjHQoSIxPDA6BgNVBAkMM9GD0Lsg0J/QvtC60YDQvtCy0LrQsCwg0LQgMTQvMiwg0YHRgtGAIDEsINC/0L7QvCBWSTEfMB0GCSqGSIb3DQEJAgwQ0JrQn9CfPTc3MDkwMTAwMTEZMBcGA1UEDAwQ0JTQuNGA0LXQutGC0L7RgDEoMCYGA1UEKgwf0JHQvtGA0LjRgSDQk9C10L7RgNCz0LjQtdCy0LjRhzEZMBcGA1UEBAwQ0J3Rg9GA0LDQu9C40LXQsjBjMBwGBiqFAwICEzASBgcqhQMCAiQABgcqhQMCAh4BA0MABECHpsKPQBR9PY7QRfojl7jWr1SxmXivikwKy3sbVKEAj3HlhZrIgwJ7pjlbWTPVcaN/dTPtICrQSpTHk3I1RyVWo4IDTzCCA0swDgYDVR0PAQH/BAQDAgTwMEoGA1UdJQRDMEEGCCsGAQUFBwMCBgcqhQMCAiIGBgcqhQMFARwCBgcqhQMFARwDBggqhQMDBk4EAQYHKoUDBQEcBAYHKoUDAwYADDAdBgNVHQ4EFgQUbiZWL6hmiv722+YtMjVXmFuF7scwgekGA1UdIwSB4TCB3oAUSyEyi0fCtnfoVCWRnePxmm7XUsehgbOkgbAwga0xKzApBgkqhkiG9w0BCQEWHGEucG9zdG5pa292QGNlbnRlci1pbmZvcm0ucnUxGTAXBgNVBAsTEFRlc3QgRW5naW5lZXJpbmcxFTATBgNVBAoTDENlbnRlckluZm9ybTFMMEoGA1UEAxNDQ2VudGVySW5mb3JtIFRlc3QgRW5naW5lZXJpbmcgRGl2aXNpb24gUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eYIQNBnD4zciLLNF7BjMmrG3BDAyBgNVHR8EKzApMCegJaAjhiFodHRwOi8vMTcyLjIxLjMxLjE5MS9jZHAvdGVzdC5jcmwwgZgGCCsGAQUFBwEBBIGLMIGIMIGFBggrBgEFBQcwAoZ5ZmlsZTovL3dpbjIwMDhVQy9jZXJ0ZW5yb2xsL3dpbjIwMDhVQ19DZW50ZXJJbmZvcm0lMjBUZXN0JTIwRW5naW5lZXJpbmclMjBEaXZpc2lvbiUyMFJvb3QlMjBDZXJ0aWZpY2F0aW9uJTIwQXV0aG9yaXR5LmNydDArBgNVHRAEJDAigA8yMDE2MDIyMDA3MzQwMFqBDzIwMTcwMjIwMDczNDAwWjCB5QYFKoUDZHAEgdswgdgMKyLQmtGA0LjQv9GC0L7Qn9GA0L4gQ1NQIiAo0LLQtdGA0YHQuNGPIDMuNikMUyLQo9C00L7RgdGC0L7QstC10YDRj9GO0YnQuNC5INGG0LXQvdGC0YAgItCa0YDQuNC/0YLQvtCf0YDQviDQo9CmIiDQstC10YDRgdC40LggMS41DC3QodCkLzEyNC0xNTQzINC+0YIgMDQg0L7QutGC0Y/QsdGA0Y8gMjAxMCDQsy4MJdCh0KQvMTI4LTE2NTgg0L7RgiAwMSDQvNCw0Y8gMjAxMSDQsy4wCAYGKoUDAgIDA0EALJM3tgyGgl/VGK6my8Qtrdtmie3rLFY6gap9pZkr/ZsjTlA/+Rw4uYyPhsHjAAnQLYxxiOIyj+5++/2DC8q2eg==
	|      </wsse:BinarySecurityToken>
	|    </wsse:Security>
	|  </soap:Header>
	|  <soap:Body wsu:Id=""body"">
	|    <lb:ServiceSudt>
	|      <sudt:Message>
	|        <sudt:Sender>
	|          <sudt:Name>ФГУП ЦентрИнформ</sudt:Name>
	|            <sudt:Code></sudt:Code>
	|        </sudt:Sender>
	|        <sudt:Recipient>
	|          <sudt:Name>ФНС</sudt:Name>
	|            <sudt:Code>FNS001001</sudt:Code>
	|        </sudt:Recipient>
	|      </sudt:Message>
	|      <sudt:MessageData>
	|        <sudt:AppData>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48cmVxdWVzdCB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHZlcnNpb249IjIuMzIiPjxzZW5kZXJfZ2xuPjAwMDAwMDAwMDAwMDA8L3NlbmRlcl9nbG4+PHJlcXVlc3RfcXVlcnlfcmVzdWx0PjxzZXNzaW9uX3VpPjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMDwvc2Vzc2lvbl91aT48aW5wdXRfaWQ+MDAwMDA8L2lucHV0X2lkPjwvcmVxdWVzdF9xdWVyeV9yZXN1bHQ+PC9yZXF1ZXN0Pg==</sudt:AppData>
	|      </sudt:MessageData>
	|    </lb:ServiceSudt>
	|  </soap:Body>
	|</soap:Envelope>";
	
	РезультатОтправкиЗапроса = ИнтеграцияГИСМВызовСервера.ОтправитьЗапрос(
		КонвертSOAP,
		ПредопределенноеЗначение("Перечисление.ВариантыЗапросовГИСМ.ПередачаДанных"));
		
	Попытка
		
		ТекстСообщенияXML = ИнтеграцияГИСМВызовСервера.ТекстВходящегоСообщенияXML(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Версия = СокрЛП(ОбъектXDTO.version);
		
	Исключение
		
		Версия = Неопределено;
		
	КонецПопытки;
	
	Возврат Версия;
	
КонецФункции

#КонецОбласти

#Область ОбменНаКлиенте

// Формирует запрос для получения GLN с сервиса ГИСМ  по ИНН и КПП.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация от имени которой будет выполнен запрос.
//  ИНН         - Строка - ИНН запрашиваемой организации или физического лица.
//  КПП         - Строка - КПП запрашиваемой организации.
// 
// Возвращаемое значение:
//   Строка - подготовленный запрос в формате XML.
//
Функция СообщениеЗапросаGLN(Организация, ИНН, КПП) Экспорт
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	
	ТекстСообщенияXML = ЗапросGLNПоИННКППXML(СообщениеXML, ИНН, КПП);
	
	Если ЗначениеЗаполнено(КПП) Тогда
		СообщениеXML.Описание = СтрШаблон(НСтр("ru = 'Получение GLN по ИНН %1, КПП %2'"), ИНН, КПП);
	Иначе
		СообщениеXML.Описание = СтрШаблон(НСтр("ru = 'Получение GLN по ИНН %1'"), ИНН);
	КонецЕсли;
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПолучениеGLNПоИННКПП;
	
	СообщениеXML.GLN          = Неопределено;
	
	Возврат СообщениеXML;
	
КонецФункции

// Выполняет подписанный запрос для получения GLN с сервиса ГИСМ по ИНН и КПП.
//
// Параметры:
//  Сообщение - Строка - сообщение в формате XML, которое содержит запрос.
// 
// Возвращаемое значение:
//   Стуктура - результат выполнения запроса.
//
Функция ОбработатьПодписанноеСообщениеЗапросаGLN(Сообщение) Экспорт
	
	Если ТипЗнч(Сообщение.СвойстваПодписи) = Тип("Строка") Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(Сообщение.СвойстваПодписи);
	Иначе
		СвойстваПодписи = Сообщение.СвойстваПодписи;
	КонецЕсли;
	
	КонвертSOAP = СвойстваПодписи.Подпись;
	
	РезультатПередачиИОбработки = ПолучитьДанныеРеестра(КонвертSOAP);
	
	ТекстСообщенияОбОшибке = "";
	Если ЗначениеЗаполнено(РезультатПередачиИОбработки.РезультатОбработкиОтвета.ТекстОшибки)
		Или ЗначениеЗаполнено(РезультатПередачиИОбработки.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстСообщенияОбОшибке = РезультатПередачиИОбработки.РезультатОтправкиЗапроса.ТекстОшибки
		                       + РезультатПередачиИОбработки.РезультатОбработкиОтвета.ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("GLN", РезультатПередачиИОбработки.РезультатОбработкиОтвета.Результат);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", ТекстСообщенияОбОшибке);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Готовит к передаче сообщение для получения списка входящих документов
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения    - Массив - переданные исходящие сообщения и выполненные запросы на получение квитанций.
//   * СообщенияXML - Массив - запросы списков входящих документов по организациям.
//
Функция СообщенияКПередачеЗапросыСписковВходящихДокументовИКвитанцийXML() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",    Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXML", Новый Массив);
	
	Результат = ИнтеграцияГИСМ.ОбработатьОчередьПередачиДанных();
	ВозвращаемоеЗначение.Изменения = Результат.Изменения;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрганизацииДляОбмена.Организация КАК Организация,
	|	ОрганизацииДляОбмена.Подразделение КАК Подразделение,
	|	ОрганизацииДляОбмена.GLN КАК GLN
	|ИЗ
	|	РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО (Сертификаты.Организация = ОрганизацииДляОбмена.Организация)
	|ГДЕ
	|	(Сертификаты.Пользователь = &Пользователь
	|			ИЛИ Сертификаты.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщенияXML = ЗапросВходящихДокументовXML(Выборка.GLN);
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Описание = СтрШаблон(НСтр("ru = 'Получение входящих документов организации %1'"), Выборка.Организация);
		
		СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
		СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
		
		СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
		СообщениеXML.Организация  = Выборка.Организация;
		СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПолучениеСпискаВходящихДокументов;
		
		СообщениеXML.GLN          = Выборка.GLN;
		
		ВозвращаемоеЗначение.СообщенияXML.Добавить(СообщениеXML);
		
		СообщенияПолученияКвитанций = СообщенияКПередачеПолучениеКвитанций(Выборка.GLN);
		Для Каждого СообщениеПолученияКвитанции Из СообщенияПолученияКвитанций Цикл
			ВозвращаемоеЗначение.СообщенияXML.Добавить(СообщениеПолученияКвитанции);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Готовит сообщений для передачи на сервис ГИСМ и формирует запросы на получение квитанций по отправленным сообщениям
//
// Параметры:
//  GLN - Строка - GLN организации для которой готовятся запросы;
// 
// Возвращаемое значение:
//  Массив - подготовленные исходящие сообщения и запросы на получение квитанций.
//
Функция СообщенияКПередачеПолучениеКвитанций(GLN) Экспорт
	
	СообщенияXML = Новый Массив;
	
	ДанныеДляПолученияКвитанцииИзОчереди = ИнтеграцияГИСМ.ВыборкаОчередьПолученияКвитанцийОФиксации(GLN);
	
	Реквизиты = ИнтеграцияГИСМ.ОрганизацияПодразделениеПоGLN(GLN);
	Если Реквизиты = Неопределено Тогда
		Возврат СообщенияXML;
	КонецЕсли;
	
	Пока ДанныеДляПолученияКвитанцииИзОчереди.Следующий() Цикл
		
		Данные = ДанныеДляПолученияКвитанцииИзОчереди.Данные.Получить();
		
		ТекстСообщенияXML = ЗапросКвитанцииОФиксацииXML(Данные);
		
		ОперацияЗапросаКвитанции = ОперацияЗапросаКвитанции(ДанныеДляПолученияКвитанцииИзОчереди.Операция);
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Описание = СтрШаблон(
			НСтр("ru = 'Получение квитанции по операции %1 документа %2 по организации %3'"),
			ДанныеДляПолученияКвитанцииИзОчереди.Операция,
			ДанныеДляПолученияКвитанцииИзОчереди.Документ,
			Реквизиты.Организация);
		
		СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
		СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
		
		СообщениеXML.ТипСообщения       = Перечисления.ТипыСообщенийГИСМ.Исходящее;
		СообщениеXML.Организация        = Реквизиты.Организация;
		СообщениеXML.Операция           = ОперацияЗапросаКвитанции;
		СообщениеXML.Документ           = ДанныеДляПолученияКвитанцииИзОчереди.Документ;
		СообщениеXML.СообщениеОснование = ДанныеДляПолученияКвитанцииИзОчереди.Сообщение;
		
		СообщениеXML.GLN = GLN;
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

// Обработать подписанные сообщения запросы списков входящих документов и квитанций
//
// Параметры:
//  Сообщения - Массив - сообщения
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *Изменения - Массив - Изменения данных
//  *СообщенияXML - Массив - Структура сообщений
Функция ОбработатьПодписанныеСообщенияЗапросыСписковВходящихДокументовИКвитанций(Сообщения) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",          Новый Массив);
	ВозвращаемоеЗначение.Вставить("ИнформацияОВерсиях", Неопределено);
	ВозвращаемоеЗначение.Вставить("СообщенияXML",       Новый Массив);
	
	Категории = ИнтеграцияГИСМ.КатегорииОпераций();
	
	ПоддерживаемыеТипыДокументов = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов();
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если ТипЗнч(Сообщение.СвойстваПодписи) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(Сообщение.СвойстваПодписи);
		Иначе
			СвойстваПодписи = Сообщение.СвойстваПодписи;
		КонецЕсли;
		
		КонвертSOAP = СвойстваПодписи.Подпись;
		
		Если Категории.ПолучениеСпискаВходящихДокументов.Получить(Сообщение.Операция) <> Неопределено Тогда
			
			РезультатПередачиИОбработки = ИнтеграцияГИСМВызовСервера.ПолучитьВходящиеДокументы(КонвертSOAP, Сообщение.GLN);
			
			Если ВозвращаемоеЗначение.ИнформацияОВерсиях = Неопределено Тогда
				ВозвращаемоеЗначение.ИнформацияОВерсиях = РезультатПередачиИОбработки.РезультатОбработкиОтвета.ИнформацияОВерсиях;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатПередачиИОбработки.РезультатОбработкиОтвета.ТекстОшибки)
				Или ЗначениеЗаполнено(РезультатПередачиИОбработки.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
				ТекстСообщенияОбОшибке = РезультатПередачиИОбработки.РезультатОтправкиЗапроса.ТекстОшибки
				                       + РезультатПередачиИОбработки.РезультатОбработкиОтвета.ТекстОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			КонецЕсли;
			
			Для Каждого ДанныеДляПолученияДокумента Из РезультатПередачиИОбработки.РезультатОбработкиОтвета.Документы Цикл
				
				ТипДокумента = ПоддерживаемыеТипыДокументов.Получить(ДанныеДляПолученияДокумента.action_id);
				
				Если ТипДокумента = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстСообщенияXML = ДанныеДляПолученияДокумента.ТекстСообщенияXML;
				
				СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
				СообщениеXML.Описание = СтрШаблон(НСтр("ru = 'Получение документа ""%1"" по организации %2'"), ТипДокумента.Описание, Сообщение.Организация);
				
				СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
				СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
				
				СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
				СообщениеXML.Организация  = Сообщение.Организация;
				СообщениеXML.Операция     = ТипДокумента.Операция;
				
				СообщениеXML.GLN                         = Сообщение.GLN;
				СообщениеXML.ДанныеДляПолученияДокумента = ДанныеДляПолученияДокумента;
				
				ВозвращаемоеЗначение.СообщенияXML.Добавить(СообщениеXML);
				
			КонецЦикла;
			
		ИначеЕсли Категории.ПолучениеКвитанции.Получить(Сообщение.Операция) <> Неопределено Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",       Сообщение.ТипСообщения);
			Реквизиты.Вставить("Операция",           Сообщение.Операция);
			Реквизиты.Вставить("Документ",           Сообщение.Документ);
			Реквизиты.Вставить("СообщениеОснование", Сообщение.СообщениеОснование);
			
			Попытка
				Результат = ИнтеграцияГИСМ.ПодготовитьСообщениеПолученияКвитанцииКПередаче(КонвертSOAP, Реквизиты);
				ВозвращаемоеЗначение.Изменения.Добавить(Результат);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать подписанные сообщения на получение входящих документов
//
// Параметры:
//  Сообщения - Массив - сообщения
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *Изменения - Массив - Изменения данных
//
Функция ОбработатьПодписанныеСообщенияПолучитьВходящиеДокументы(Сообщения) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если ТипЗнч(Сообщение.СвойстваПодписи) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(Сообщение.СвойстваПодписи);
		Иначе
			СвойстваПодписи = Сообщение.СвойстваПодписи;
		КонецЕсли;
		
		КонвертSOAP = СвойстваПодписи.Подпись;
		
		Если Не Сообщение.ДанныеДляПолученияДокумента.ДобавленВОчередь Тогда
			ИнтеграцияГИСМ.ДобавитьВОчередьПолученияДанных(Сообщение.ДанныеДляПолученияДокумента);
		КонецЕсли;
		
		РезультатПередачиИОбработки = ИнтеграцияГИСМВызовСервера.ПолучитьДокумент(КонвертSOAP, Сообщение.ДанныеДляПолученияДокумента);
		
		ТекстСообщенияОбОшибке = "";
		Если ЗначениеЗаполнено(РезультатПередачиИОбработки.РезультатОбработкиОтвета.ТекстОшибки)
			Или ЗначениеЗаполнено(РезультатПередачиИОбработки.РезультатОтправкиЗапроса.ТекстОшибки)
			Или Не ЗначениеЗаполнено(РезультатПередачиИОбработки.Документ) Тогда
			ТекстСообщенияОбОшибке = РезультатПередачиИОбработки.РезультатОтправкиЗапроса.ТекстОшибки
			                       + РезультатПередачиИОбработки.РезультатОбработкиОтвета.ТекстОшибки;
			Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультата = Новый Структура;
		СтрокаРезультата.Вставить("Документ",           РезультатПередачиИОбработки.Документ);
		СтрокаРезультата.Вставить("Основание",          РезультатПередачиИОбработки.Основание);
		СтрокаРезультата.Вставить("Выполнено",          Истина);
		СтрокаРезультата.Вставить("ТекстОшибки",        "");
		СтрокаРезультата.Вставить("НовыйСтатус",        РезультатПередачиИОбработки.НовыйСтатус);
		СтрокаРезультата.Вставить("ИсходящееСообщение", Неопределено);
		
		ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ОбменГИСМ

// Передать данные
//
// Параметры:
//  ИсходящееСообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Исходящее сообщение.
//  СертификатыДляПодписанияНаСервере - Структура - со свойствами (Можно получить функцией СертификатыДляПодписанияНаСервере).
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *РезультатОтправкиЗапроса - Структура - результат отправки запроса
//  *РезультатОбработкиОтвета - Структура - Результат обработки ответа
//  *ИсходящееСообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Исходящее сообщение
//  *ВходящееСообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Входящее сообщение
//  *Документ - ДокументСсылка - Полученный документ
//  *Основание - ДокументСсылка - Документ основание
//
Функция ПередатьДанные(ИсходящееСообщение, СертификатыДляПодписанияНаСервере = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("НовыйСтатус");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ВходящееСообщение");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("Основание");
	
	ТекстИсходящегоСообщенияXML = ИнтеграцияГИСМВызовСервера.КонвертSOAPИзПротокола(ИсходящееСообщение);
	ЗначенияРеквизитов = ДанныеДокументаСообщения(ИсходящееСообщение);
	
	ДокументСсылка = ЗначенияРеквизитов.Документ;
	Основание      = ЗначенияРеквизитов.Основание;
	Операция       = ЗначенияРеквизитов.Операция;
	
	ВозвращаемоеЗначение.Документ  = ДокументСсылка;
	ВозвращаемоеЗначение.Основание = Основание;
	
	ОбновитьСостояниеПодтверждения = (Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения);
	Если ОбновитьСостояниеПодтверждения Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			// Выполнить блокировку объекта не удалось, операция будет выполнена в следующей итерации.
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось заблокировать документ %1.'"), ДокументСсылка);
			Возврат ВозвращаемоеЗначение;
		КонецПопытки;
		
	КонецЕсли;
	
	РезультатОтправкиЗапроса = ИнтеграцияГИСМВызовСервера.ОтправитьЗапрос(
		ТекстИсходящегоСообщенияXML,
		Перечисления.ВариантыЗапросовГИСМ.ПередачаДанных);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
		
		ДанныеОбработки = ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML);
		
		ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Операция",     Операция);
		Реквизиты.Вставить("ТипСообщения", Перечисления.ТипыСообщенийГИСМ.Входящее);
		Реквизиты.Вставить("Документ",     ДокументСсылка);
		Реквизиты.Вставить("СообщениеОснование",                ИсходящееСообщение);
		Реквизиты.Вставить("СообщениеОснованиеСтатусОбработки", ДанныеОбработки.СтатусОбработки);
		Реквизиты.Вставить("ТекстСообщенияXML",                 ДанныеОбработки.ТекстСообщенияXML); // Для хеширования
		
		НачатьТранзакцию();
		
		Попытка
			
			ВходящееСообщение = ДобавитьЗаписьВПротоколОбмена(
				ТекстВходящегоСообщенияXML,
				Реквизиты);
			
			ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			
			Если ДанныеОбработки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийГИСМ.Обрабатывается
			    И ДанныеОбработки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийГИСМ.НаМодерации Тогда
				
				Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
					
					ОперацияЗапросаКвитанции = ОперацияЗапросаКвитанции(Операция);
					
					РеквизитыЗапросаКвитанции = Новый Структура;
					РеквизитыЗапросаКвитанции.Вставить("ТипСообщения",       Перечисления.ТипыСообщенийГИСМ.Исходящее);
					РеквизитыЗапросаКвитанции.Вставить("Операция",           ОперацияЗапросаКвитанции);
					РеквизитыЗапросаКвитанции.Вставить("Документ",           ДокументСсылка);
					РеквизитыЗапросаКвитанции.Вставить("СообщениеОснование", ВходящееСообщение);
					
					ДобавитьДанныеЗапросаКвитанцииОФискацииВОчередь(
						ТекстВходящегоСообщенияXML,
						РеквизитыЗапросаКвитанции,
						СертификатыДляПодписанияНаСервере);
					
				КонецЕсли;
				
				Если ОбновитьСостояниеПодтверждения Тогда
					
					Состояния = МенеджерОбъекта.ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, ИсходящееСообщение, ДанныеОбработки.СтатусОбработки);
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
					ДокументОбъект.Разблокировать();
					
				КонецЕсли;
				
				УдалитьСообщениеИзОчередиПередачиДанных(ИсходящееСообщение);
				
			КонецЕсли;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, ДанныеОбработки.СтатусОбработки);
			
			ВозвращаемоеЗначение.ВходящееСообщение                    = ВходящееСообщение;
			ВозвращаемоеЗначение.ИсходящееСообщение                   = ИсходящееСообщение;
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	Иначе
		
		ОписаниеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "Описание");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Данные не переданы в ГИСМ:
				       |%1
				       |По причине:
				       |%2'"), ОписаниеОперации, РезультатОтправкиЗапроса.ТекстОшибки));
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить квитанцию о фиксации переданного сообщения
//
// Параметры:
//  ИсходящееСообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Исходящее сообщение
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *РезультатОтправкиЗапроса - Структура - результат отправки запроса
//  *РезультатОбработкиОтвета - Структура - Результат обработки ответа
//  *ИсходящееСообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Исходящее сообщение
//  *ВходящееСообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Входящее сообщение
//  *Документ - ДокументСсылка - Полученный документ
//  *Основание - ДокументСсылка - Документ основание
//
Функция ПолучитьКвитанциюОФиксации(ИсходящееСообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("НовыйСтатус");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ВходящееСообщение");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("Основание");
	
	ТекстИсходящегоСообщенияXML = ИнтеграцияГИСМВызовСервера.КонвертSOAPИзПротокола(ИсходящееСообщение);
	
	ЗначенияРеквизитов = ДанныеДокументаСообщения(ИсходящееСообщение);
	
	ДокументСсылка = ЗначенияРеквизитов.Документ;
	Основание      = ЗначенияРеквизитов.Основание;
	Операция       = ЗначенияРеквизитов.Операция;
	
	ВозвращаемоеЗначение.Документ  = ДокументСсылка;
	ВозвращаемоеЗначение.Основание = Основание;
	
	ОбновитьСостояниеПодтверждения = (Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтвержденияПолучениеКвитанции);
	Если ОбновитьСостояниеПодтверждения Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			// Выполнить блокировку объекта не удалось, операция будет выполнена в следующей итерации.
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось заблокировать документ %1.'"), ДокументСсылка);
			Возврат ВозвращаемоеЗначение;
		КонецПопытки;
		
	КонецЕсли;
	
	РезультатОтправкиЗапроса = ИнтеграцияГИСМВызовСервера.ОтправитьЗапрос(
		ТекстИсходящегоСообщенияXML,
		Перечисления.ВариантыЗапросовГИСМ.ПолучениеДанных);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
		
		ДанныеОбработки = ОбработатьОтветНаЗапросПолученияКвитанцииОФиксации(ТекстВходящегоСообщенияXML);
		
		ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Операция",     Операция);
		Реквизиты.Вставить("ТипСообщения", Перечисления.ТипыСообщенийГИСМ.Входящее);
		Реквизиты.Вставить("Документ",     ДокументСсылка);
		Реквизиты.Вставить("СообщениеОснование",                ИсходящееСообщение);
		Реквизиты.Вставить("СообщениеОснованиеСтатусОбработки", ДанныеОбработки.СтатусОбработки);
		Реквизиты.Вставить("ТекстСообщенияXML",                 ДанныеОбработки.ТекстСообщенияXML); // Для хеширования
		
		НачатьТранзакцию();
		
		Попытка
			
			ВходящееСообщение = ДобавитьЗаписьВПротоколОбмена(
				ТекстВходящегоСообщенияXML,
				Реквизиты);
			
			ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			
			Если ДанныеОбработки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийГИСМ.Обрабатывается
			    И ДанныеОбработки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийГИСМ.НаМодерации Тогда
				
				ОбновитьНомерГИСМ = ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято И ЗначениеЗаполнено(ДанныеОбработки.Результат.object_id);
				
				Если ОбновитьНомерГИСМ ИЛИ ОбновитьСостояниеПодтверждения Тогда
					
					Если ДокументОбъект = Неопределено Тогда
						
						ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
						Попытка
							ДокументОбъект.Заблокировать();
						Исключение
							ОтменитьТранзакцию();
							// Выполнить блокировку объекта не удалось, операция будет выполнена в следующей итерации.
							ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось заблокировать документ %1.'"), ДокументСсылка);
							Возврат ВозвращаемоеЗначение;
						КонецПопытки;
						
					КонецЕсли;
					
					Если ОбновитьНомерГИСМ Тогда
						МенеджерОбъекта.ОбновитьНомерГИСМ(ДокументОбъект, ДанныеОбработки.Результат.object_id);
					КонецЕсли;
					
					Если ОбновитьСостояниеПодтверждения Тогда
						Состояния = МенеджерОбъекта.ОбновитьСостояниеПодтверждения(
							ДокументОбъект,
							Операция,
							ИсходящееСообщение,
							ДанныеОбработки.СтатусОбработки);
					КонецЕсли;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
					ДокументОбъект.Разблокировать();
					
				КонецЕсли;
				
				УдалитьСообщениеИзОчередиПередачиДанных(ИсходящееСообщение);
				
			КонецЕсли;
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ")
				И ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято И ОбновитьНомерГИСМ = Ложь Тогда
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, ДанныеОбработки.СтатусОбработки, Истина);
			Иначе
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, ДанныеОбработки.СтатусОбработки);
			КонецЕсли;
			
			ВозвращаемоеЗначение.ВходящееСообщение                    = ВходящееСообщение;
			ВозвращаемоеЗначение.ИсходящееСообщение                   = ИсходящееСообщение;
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При загрузке квитанции о фиксации по документу %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕстьNULL(Т.СообщениеОснование.Описание, """") КАК Описание
		|ИЗ
		|	Справочник.ГИСМПрисоединенныеФайлы КАК Т
		|ГДЕ
		|	Т.Ссылка = &ИсходящееСообщение
		|");
		Запрос.УстановитьПараметр("ИсходящееСообщение", ИсходящееСообщение);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОписаниеОперации = Выборка.Описание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеОперации) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Квитанция о фиксации не получена:
					       |Переданные данные: %1
					       |По причине:
					       |%2'"), ОписаниеОперации, РезультатОтправкиЗапроса.ТекстОшибки));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Квитанция о фиксации не получена:
					       |Сообщение: %1
					       |По причине:
					       |%2'"), ИсходящееСообщение, РезультатОтправкиЗапроса.ТекстОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные реестра
//
// Параметры:
//  ТекстИсходящегоСообщенияXML - Строка - Текст сообщения SOAP
//  ДанныеДляПолученияДокумента - Структура - Данные для получения документа
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *РезультатОтправкиЗапроса - Структура - результат отправки запроса
//  *РезультатОбработкиОтвета - Структура - Результат обработки ответа
//  *Документ - ДокументСсылка - Полученный документ
//  *Основание - ДокументСсылка - Документ основание
//  *НовыйСтатус - Статус - Новый статус документа
//
Функция ПолучитьДокумент(ТекстИсходящегоСообщенияXML, ДанныеДляПолученияДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("Результат");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("Основание");
	ВозвращаемоеЗначение.Вставить("НовыйСтатус");
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	
	Если ДанныеДляПолученияДокумента.Данные = Неопределено Тогда
		
		РезультатОтправкиЗапроса = ИнтеграцияГИСМВызовСервера.ОтправитьЗапрос(
			ТекстИсходящегоСообщенияXML,
			Перечисления.ВариантыЗапросовГИСМ.ПолучениеДанных);
		
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
		
		Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
			
			ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
			
			ИнтеграцияГИСМ.ОбработатьЗагрузкуДокумента(ТекстВходящегоСообщенияXML, ТекстИсходящегоСообщенияXML, ДанныеДляПолученияДокумента, ВозвращаемоеЗначение);
			
		КонецЕсли;
		
	Иначе
		
		РезультатОтправкиЗапроса = ИнтеграцияГИСМКлиентСервер.ОтветТекстСообщенияXMLНеПолучен("", Ложь);
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
		
		ИнтеграцияГИСМ.ОбработатьЗагрузкуДокумента(
			ДанныеДляПолученияДокумента.Данные.ТекстВходящегоСообщенияXML,
			ДанныеДляПолученияДокумента.Данные.ТекстИсходящегоСообщенияXML,
			ДанныеДляПолученияДокумента,
			ВозвращаемоеЗначение);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить входящие документы
//
// Параметры:
//  ТекстИсходящегоСообщенияSOAP - Строка - Текст сообщения SOAP
//  GLN - Число - GLN
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *РезультатОтправкиЗапроса - Структура - результат отправки запроса
//  *РезультатОбработкиОтвета - Структура - Результат обработки ответа
//
Функция ПолучитьВходящиеДокументы(ТекстИсходящегоСообщенияSOAP, GLN) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("Документы", Новый Массив);
	РезультатОбработкиОтвета.Вставить("ИнформацияОВерсиях");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	
	СоответствиеЗаписей = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьПолученияДанныхГИСМ.GLN,
	|	ОчередьПолученияДанныхГИСМ.output_id,
	|	ОчередьПолученияДанныхГИСМ.action_id,
	|	ОчередьПолученияДанныхГИСМ.Данные,
	|	ОчередьПолученияДанныхГИСМ.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ОчередьПолученияДанныхГИСМ КАК ОчередьПолученияДанныхГИСМ
	|ГДЕ
	|	ОчередьПолученияДанныхГИСМ.GLN = &GLN
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации");
	Запрос.Параметры.Вставить("GLN", GLN);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сообщения = Выборка.Данные.Получить();
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ДобавленВОчередь",  Истина);
		НоваяСтрока.Вставить("ДатаРегистрации",   Выборка.ДатаРегистрации);
		НоваяСтрока.Вставить("Данные",            Сообщения);
		НоваяСтрока.Вставить("GLN",               Выборка.GLN);
		НоваяСтрока.Вставить("action_id",         Выборка.action_id);
		НоваяСтрока.Вставить("output_id",         Выборка.output_id);
		НоваяСтрока.Вставить("ТекстСообщенияXML", ИнтеграцияГИСМВызовСервера.ЗапросДокументаXML(Выборка.GLN, Выборка.output_id));
		
		СоответствиеЗаписей.Вставить(Выборка.output_id, Истина);
		
		ВозвращаемоеЗначение.РезультатОбработкиОтвета.Документы.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	РезультатОтправкиЗапроса = ИнтеграцияГИСМВызовСервера.ОтправитьЗапрос(
		ТекстИсходящегоСообщенияSOAP,
		Перечисления.ВариантыЗапросовГИСМ.ПолучениеДанных);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
		
		ДанныеОбработки = ОбработатьОтветНаЗапросПолученияДокументов(ТекстВходящегоСообщенияXML);
		РезультатОбработкиОтвета.ИнформацияОВерсиях = ИнтеграцияГИСМ.ПроверитьОбновитьВерсиюСхемОбмена(ДанныеОбработки.Версия);
		
		Если ДанныеОбработки.Результат = Неопределено Тогда
			
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
			
		Иначе
			
			Если ДанныеОбработки.Результат.unreceived_count > 0 Тогда
			
				Для Каждого ЭлементДанных Из ДанныеОбработки.Результат.list.items Цикл
					
					Если СоответствиеЗаписей.Получить(ЭлементДанных.output_id) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Новый Структура;
					НоваяСтрока.Вставить("ДобавленВОчередь",  Ложь);
					НоваяСтрока.Вставить("ДатаРегистрации",   ЭлементДанных.process_date);
					НоваяСтрока.Вставить("Данные",            Неопределено);
					НоваяСтрока.Вставить("GLN",               GLN);
					НоваяСтрока.Вставить("action_id",         ЭлементДанных.action_id);
					НоваяСтрока.Вставить("output_id",         ЭлементДанных.output_id);
					НоваяСтрока.Вставить("ТекстСообщенияXML", ИнтеграцияГИСМВызовСервера.ЗапросДокументаXML(GLN, ЭлементДанных.output_id));
					
					ВозвращаемоеЗначение.РезультатОбработкиОтвета.Документы.Добавить(НоваяСтрока);
					
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные реестра
//
// Параметры:
//  ТекстИсходящегоСообщенияSOAP - Строка - Текст сообщения SOAP
// 
// Возвращаемое значение:
//  Структура со свойствами:
//  *РезультатОтправкиЗапроса - Структура - результат отправки запроса
//  *РезультатОбработкиОтвета - Структура - Результат обработки ответа
//
Функция ПолучитьДанныеРеестра(ТекстИсходящегоСообщенияSOAP) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("Результат");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	
	РезультатОтправкиЗапроса = ИнтеграцияГИСМВызовСервера.ОтправитьЗапрос(
		ТекстИсходящегоСообщенияSOAP,
		Перечисления.ВариантыЗапросовГИСМ.ПолучениеРеестров);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
		
		ДанныеОбработки = ОбработатьОтветНаЗапросПолученияДанныхРеестра(ТекстВходящегоСообщенияXML);
		
		Если ДанныеОбработки.Результат = Неопределено Тогда
			
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
			
		Иначе
			
			Если ТипЗнч(ДанныеОбработки.Результат) = Тип("Структура") Тогда
				
				ВозвращаемоеЗначение.РезультатОбработкиОтвета.Результат = Новый Массив;
				
				Если ДанныеОбработки.Результат.total_count > 0 Тогда
					
					Для Каждого ЭлементДанных Из ДанныеОбработки.Результат.list.item Цикл
						
						ВозвращаемоеЗначение.РезультатОбработкиОтвета.Результат.Добавить(ЭлементДанных);
						
					КонецЦикла;
				
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.РезультатОбработкиОтвета.Результат = ДанныеОбработки.Результат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает  структуру, содержащую ИНН и КПП контагента.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентГИСМ - контрагент.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     ИНН  - Строка - ИНН контрагента.
//     КПП  - Строка - КПП контрагента.
//
Функция ИННКПППоКонтрагенту(Контрагент) Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ИННКПППоКонтрагенту(Контрагент);
	
КонецФункции

// Возвращает структуру, содержащую ИНН, КПП, GLN организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     ИНН  - Строка - ИНН контрагента.
//     КПП  - Строка - КПП контрагента.
//     GLN  - Строка - GLN контрагента.
//
Функция ИННКППGLNОрганизации(Организация, Подразделение) Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ИННКППGLNОрганизации(Организация, Подразделение);
	
КонецФункции

// Возвращает структуру, содержащую Страну, Регистрационный номер, наименование, признак физического лица, ИНН и КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентГИСМ - Контрагент.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     Страна  - Строка - Страна регистрации контрагента.
//     РегистрационныйНомер  - Строка - Регистриционный номер контрагента.
//     Наименование  - Строка - Наименование контрагента.
//     НаименованиеПолное  - Строка - Полное наименование контрагента.
//     ЭтоФизическоеЛицо  - Булево - Признак физического лица.
//     ИНН  - Строка - ИНН контрагента.
//     КПП  - Строка - КПП контрагента.
//     ЮридическийАдрес - Строка - Юридический адрес контрагента.
//
Функция РеквизитыКонтрагента(Контрагент) Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.РеквизитыКонтрагента(Контрагент);
	
КонецФункции

// Получает список входящих документов по организации, которые необходимо получить.
//
// Параметры:
//  GLN - Строка - GLN организации для которой получается список документов.
// 
// Возвращаемое значение:
//   Строка - сообщение в формате XML, которое содержит список документов для загрузки.
//
Функция ЗапросВходящихДокументовXML(GLN) Экспорт
	
	ИмяТипа = "request";
	
	ЗапросВходящиеДокументы = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	// Важно соблюдать порядок следования элементов. Для элемента установлено свойство "Последовательный".
	ЗапросВходящиеДокументы.version    = ЗапросВходящиеДокументы.version;
	ЗапросВходящиеДокументы.sender_gln = GLN;
	
	ЗапросВходящиеДокументы.request_unreceived = ЗапросВходящиеДокументы.request_unreceived;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ЗапросВходящиеДокументы, ИмяТипа);
	
	Возврат ТекстСообщенияXML;
	
КонецФункции

// Получает с сервиса ГИСМ входящий документ.
//
// Параметры:
//  GLN       - Строка - GLN организации для которой загружается документ.
//  output_id - Строка - GLN организации для которой загружается документ.
// 
// Возвращаемое значение:
//   Строка - сообщение в формате XML, которое содержит запрашиваемый документ.
//
Функция ЗапросДокументаXML(GLN, output_id) Экспорт
	
	ИмяТипа = "request";
	
	ЗапросДокумента = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	// Важно соблюдать порядок следования элементов. Для элемента установлено свойство "Последовательный".
	ЗапросДокумента.version    = ЗапросДокумента.version;
	ЗапросДокумента.sender_gln = GLN;
	
	ЗапросДокумента.request_body = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗапросДокумента, "request_body");;
	
	ЗапросДокумента.request_body.output_id = output_id;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ЗапросДокумента, ИмяТипа);
	
	Возврат ТекстСообщенияXML;
	
КонецФункции

// Получает с сервиса ГИСМ GLN по ИНН и КПП.
//
// Параметры:
//  ИНН - Строка - ИНН запрашиваемой организации или физического лица.
//  КПП - Строка - КПП запрашиваемой организации.
// 
// Возвращаемое значение:
//   Строка - сообщение в формате XML, которое содержит GLN организации.
//
Функция ЗапросGLNПоИННКППXML(СообщениеXML, ИНН, КПП = Неопределено) Экспорт
	
	ИмяТипа = "reestr_request";
	
	ЗапросGLN = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	// Важно соблюдать порядок следования элементов. Для элемента установлено свойство "Последовательный".
	ЗапросGLN.subject_gln = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗапросGLN, "subject_gln");
	
	Попытка
		ЗапросGLN.subject_gln.inn = ИНН;
	Исключение
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Указан не верный ИНН.'");
	КонецПопытки;
	
	Если ЗначениеЗаполнено(КПП) Тогда
		Попытка
			ЗапросGLN.subject_gln.kpp = КПП;
		Исключение
			СообщениеXML.ТекстОшибки = НСтр("ru = 'Указан не верный КПП.'");
		КонецПопытки;
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ЗапросGLN, ИмяТипа);
	
	Возврат ТекстСообщенияXML;
	
КонецФункции

// Формирует запрос о получении квитанции о фиксанции по документу.
//
// Параметры:
//  Ссылка   - ДокументСсылка - документ, по которому формируется запрос о получении квитанции.
//  Операция - ПеречисленияСсылка.ОперацииОбменаГИСМ - операция обмена, которая требует получения квитанции.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки - строка - сюда будет помещен текст ошибки, если таковая возникнет при отрпавке сообщения.
//   * Описание - строка - содержит описание выполняемой операции.
//   * ДанныеДляПолученияКвитанцииИзОчереди - Структура со свойствами:
//      ** Сообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - сообщение, по которому формируется запрос о получении квитанции.
//      ** Организация - ОпределяемыйТип.Организации - организация, от имени которой отправляется запрос.
//      ** Документ    - ДокументСсылка - документ, по которому было отправлено сообщение, требующее получение квитанции.
//      ** ИзОчереди   - Булево - признак того каким образом был сформирован запрос, из очереди или из сообщения.
//      ** Данные      - Структура со свойствами:
//          *** input_id   - строка - идентификатор сообщения, по которому мы запрашиваем квитанцию.
//          *** session_ui - строка - идентификатор сессии сообщения, по которому мы запрашиваем квитанцию.
//   * СообщенияXML - Массив, состоящий из одной структуры:
//      ТекстСообщенияXML - строка - содержит текст запроса о получении квитанции.
//      Организация  - ОпределяемыйТип.Организации - организация, от имени которой отправляется запрос.
//      ТипСообщения - Перечисления.ТипыСообщенийГИСМ - Исходящее.
//      Документ     - ДокументСсылка - документ, по которому было отправлено сообщение, требующее получение квитанции.
//      Операция     - ПеречисленияСсылка.ОперацииОбменаГИСМ - операция обмена, которая требует получения квитанции.
//      Версия       - Число - версия сообщения, для запроса на получение квитанции всегда равна 0.
//
Функция ЗапросКвитанцииОФиксацииПоСсылкеXML(Ссылка, Операция) Экспорт
	
	ДанныеДляПолученияКвитанцииИзОчереди = ДанныеЗапросаКвитанцииОФискацииИзОчереди(Ссылка, Операция);
	Если ДанныеДляПолученияКвитанцииИзОчереди = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГИСМПрисоединенныеФайлы.Ссылка КАК Сообщение,
		|	ГИСМПрисоединенныеФайлы.ВладелецФайла.Организация КАК Организация,
		|	ГИСМПрисоединенныеФайлы.ВладелецФайла.Организация.GLN КАК GLN
		|ИЗ
		|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
		|ГДЕ
		|	ГИСМПрисоединенныеФайлы.ВладелецФайла  = &ВладелецФайла
		|	И ГИСМПрисоединенныеФайлы.Операция     = &Операция
		|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Входящее)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГИСМПрисоединенныеФайлы.ДатаСоздания УБЫВ");
		
		Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
		Запрос.УстановитьПараметр("Операция",      Операция);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ДанныеЗапросаКвитанцииОФискации = ДанныеЗапросаКвитанцииОФиксацииИзПротокола(Выборка.Сообщение);
			Если ДанныеЗапросаКвитанцииОФискации = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ДанныеЗапросаКвитанцииОФискации.Вставить("GLN", Выборка.GLN);
			
			ДанныеДляПолученияКвитанцииИзОчереди = Новый Структура;
			ДанныеДляПолученияКвитанцииИзОчереди.Вставить("Сообщение",   Выборка.Сообщение);
			ДанныеДляПолученияКвитанцииИзОчереди.Вставить("Организация", Выборка.Организация);
			ДанныеДляПолученияКвитанцииИзОчереди.Вставить("Документ",    Ссылка);
			ДанныеДляПолученияКвитанцииИзОчереди.Вставить("Данные",      ДанныеЗапросаКвитанцииОФискации);
			ДанныеДляПолученияКвитанцииИзОчереди.Вставить("ИзОчереди",   Ложь);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщенияXML = ЗапросКвитанцииОФиксацииXML(ДанныеДляПолученияКвитанцииИзОчереди.Данные);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	ВозвращаемоеЗначение.Вставить("Описание", СтрШаблон(НСтр("ru = 'Запрос квитанции о фиксации документа %1'"), Ссылка));
	ВозвращаемоеЗначение.Вставить("СообщенияXML", Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДанныеДляПолученияКвитанцииИзОчереди", ДанныеДляПолученияКвитанцииИзОчереди);
	
	СообщениеXML = Новый Структура;
	СообщениеXML.Вставить("ТекстСообщенияXML", ТекстСообщенияXML);
	СообщениеXML.Вставить("Организация", ДанныеДляПолученияКвитанцииИзОчереди.Организация);
	СообщениеXML.Вставить("ТипСообщения", Перечисления.ТипыСообщенийГИСМ.Исходящее);
	СообщениеXML.Вставить("Операция", Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции);
	СообщениеXML.Вставить("Документ", Ссылка);
	СообщениеXML.Вставить("Версия", 0);
	
	ВозвращаемоеЗначение.СообщенияXML.Добавить(СообщениеXML);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует сообщение XML запроса о получении квитанции.
// Параметры:
//  Данные - Структура со свойствами:
//     GLN        - Строка - GLN организации от имений мы запрашиваем квитанцию.
//     input_id   - Строка - идентификатор сообщения, по которому мы запрашиваем квитанцию.
//     session_ui - Строка - идентификатор сессии сообщения, по которому мы запрашиваем квитанцию.
// Возвращаемое значение:
//  Строка - сформированный запрос о получении квитанции.
//
Функция ЗапросКвитанцииОФиксацииXML(Данные) Экспорт
	
	ИмяТипа = "request";
	
	ЗапросКвитанцииОФиксации = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	// Важно соблюдать порядок следования элементов. Для элемента установлено свойство "Последовательный".
	ЗапросКвитанцииОФиксации.version              = ЗапросКвитанцииОФиксации.version;
	ЗапросКвитанцииОФиксации.sender_gln           = Данные.GLN;
	ЗапросКвитанцииОФиксации.request_query_result = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗапросКвитанцииОФиксации, "request_query_result");
	
	ЗапросКвитанцииОФиксации.request_query_result.session_ui = Данные.session_ui;
	ЗапросКвитанцииОФиксации.request_query_result.input_id   = Данные.input_id;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ЗапросКвитанцииОФиксации, ИмяТипа);
	
	Возврат ТекстСообщенияXML;
	
КонецФункции

// Формирует данные для запроса на получение квитанции для сообщения, хранящегося в присоединенном файле.
//
// Параметры:
//  Сообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - сообщение, по которому формируется запрос о получении квитанции.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//     input_id   - строка - идентификатор сообщения, по которому мы запрашиваем квитанцию.
//     session_ui - строка - идентификатор сессии сообщения, по которому мы запрашиваем квитанцию.
//
Функция ДанныеЗапросаКвитанцииОФиксацииИзПротокола(Сообщение) Экспорт
	
	ТекстСообщенияXML = КонвертSOAPИзПротокола(Сообщение);
	
	ДанныеЗапросаКвитанцииОФискации = ДанныеЗапросаКвитанцииОФискацииИзXML(ТекстСообщенияXML);
	
	Возврат ДанныеЗапросаКвитанцииОФискации;
	
КонецФункции

// Формирует данные для запроса на получение квитанции для сообщения в формате XML.
//
// Параметры:
//  ТекстСообщенияXML - Строка - сообщение в формате XML.
//
// Возвращаемое значение:
//  Данные - Структура:
//     input_id   - строка - идентификатор сообщения, по которому мы запрашиваем квитанцию.
//     session_ui - строка - идентификатор сессии сообщения, по которому мы запрашиваем квитанцию.
//
Функция ДанныеЗапросаКвитанцииОФискацииИзXML(ТекстСообщенияXML) Экспорт
	
	ДанныеОбработки = ОбработатьОтветНаПередачуДанных(ТекстСообщенияXML);
	
	Если ДанныеОбработки.Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("input_id",   ДанныеОбработки.Результат.input_id);
	ВозвращаемоеЗначение.Вставить("session_ui", ДанныеОбработки.Результат.session_ui);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует данные для запроса квитаниции по отправленому сообщению из РС "Очередь получения квитанций о фиксации ГИСМ".
//
// Параметры:
//  Ссылка   - Документ - документ, по которому было отправлено сообщение, требующее получение квитанции.
//  Операция - Перечисление.ОперацииОбменаГИСМ - операция обмена, по которой было отправлено сообщение
// 
// Возвращаемое значение:
//  Неопределено, Структура - Структура со свойствами:
//   * Сообщение   - СправочникСсылка.ПрисоединенныеФайлыГИСМ - отправленное сообщение.
//   * Организация - ОпределяемыйТип.Организации - организация, от имени которой было отправлено сообщение.
//   * Документ    - ДокументСсылка - документ, по которому было отправлено сообщение.
//   * Данные - Структура со свойствами:
//     ** GLN        - Строка - GLN организации от имений мы запрашиваем квитанцию.
//     ** input_id   - Строка - идентификатор сообщения, по которому мы запрашиваем квитанцию.
//     ** session_ui - Строка - идентификатор сессии сообщения, по которому мы запрашиваем квитанцию.
//   * ИзОчереди   - Булево - в данной процедуре всегда устанавливает в Истина.
//
Функция ДанныеЗапросаКвитанцииОФискацииИзОчереди(Ссылка, Операция) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.Ссылка                КАК Сообщение,
	|	ГИСМПрисоединенныеФайлы.Ссылка.ВладелецФайла.Организация КАК Организация,
	|	ГИСМПрисоединенныеФайлы.Ссылка.ВладелецФайла  КАК Документ,
	|	ОчередьПолученияКвитанцийОФиксацииГИСМ.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ОчередьПолученияКвитанцийОФиксацииГИСМ КАК ОчередьПолученияКвитанцийОФиксацииГИСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|		ПО ГИСМПрисоединенныеФайлы.Ссылка = ОчередьПолученияКвитанцийОФиксацииГИСМ.Сообщение
	|	
	|ГДЕ
	|	ОчередьПолученияКвитанцийОФиксацииГИСМ.Сообщение.ВладелецФайла = &Ссылка
	|	И ОчередьПолученияКвитанцийОФиксацииГИСМ.Сообщение.Операция = &Операция");
	
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Сообщение",   Выборка.Сообщение);
		ВозвращаемоеЗначение.Вставить("Организация", Выборка.Документ);
		ВозвращаемоеЗначение.Вставить("Документ",    Выборка.Документ);
		ВозвращаемоеЗначение.Вставить("Данные",      Выборка.Данные.Получить());
		ВозвращаемоеЗначение.Вставить("ИзОчереди",   Истина);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавить данные запроса квитанции о фискации в очередь (выполняет запись в РС "Очередь получения квитанций о фиксации ГИСМ")
//
// Параметры:
//  ТекстСообщенияXML                 - Строка - текст сообщения по которому запрашивается квитанция о получении.
//  Реквизиты                         - Структура:
//    * ТипСообщения       - Перечисления.ТипыСообщенийГИСМ - Исходящее.
//    * Операция           - ПеречисленияСсылка.ОперацииОбменаГИСМ - операция обмена, которая требует получения квитанции.
//    * Документ           - ДокументСсылка - документ, по которому было отправлено сообщение, требующее получение квитанции.
//    * СообщениеОснование - Справочник.ПрисоединенныеФайлыГИСМ - сообщение, которое требует получение квитанции.
//  СертификатыДляПодписанияНаСервере - Структура - со свойствами (Можно получить функцией СертификатыДляПодписанияНаСервере).
//
Процедура ДобавитьДанныеЗапросаКвитанцииОФискацииВОчередь(ТекстСообщенияXML, Реквизиты, СертификатыДляПодписанияНаСервере = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	GLN = ИдентификаторОрганизацииГИСМ(Реквизиты.Документ);
	
	Если Не ЗначениеЗаполнено(GLN) Тогда
		Возврат;
	КонецЕсли;
	
	Если СертификатыДляПодписанияНаСервере = Неопределено Тогда
		СертификатыДляПодписанияНаСервере = ИнтеграцияГИСМ.СертификатыДляПодписанияНаСервере();
	КонецЕсли;
	
	ДанныеЗапросаКвитанцииОФискации = ДанныеЗапросаКвитанцииОФискацииИзXML(ТекстСообщенияXML);
	ДанныеЗапросаКвитанцииОФискации.Вставить("GLN", GLN);
	
	СтрокаСертификата = Неопределено;
	Если СертификатыДляПодписанияНаСервере <> Неопределено Тогда
		СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(GLN, "GLN");
		Если СтрокаСертификата <> Неопределено Тогда
			СертификатыДляПодписанияНаСервере.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
			РезультатПодписания = ИнтеграцияГИСМ.Подписать(
				ЗапросКвитанцииОФиксацииXML(ДанныеЗапросаКвитанцииОФискации),
				СтрокаСертификата.СертификатКриптографии, СертификатыДляПодписанияНаСервере.МенеджерКриптографии);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаСертификата = Неопределено 
		ИЛИ Не РезультатПодписания.Успех Тогда
		
		СообщениеДобавленоВОчередь = Ложь;
		
	Иначе
		
		Попытка
			ИнтеграцияГИСМ.ПодготовитьСообщениеПолученияКвитанцииКПередаче(РезультатПодписания.КонвертSOAP, Реквизиты);
			СообщениеДобавленоВОчередь = Истина;
		Исключение
			СообщениеДобавленоВОчередь = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не СообщениеДобавленоВОчередь Тогда
		
		НоваяЗапись = РегистрыСведений.ОчередьПолученияКвитанцийОФиксацииГИСМ.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сообщение = Реквизиты.СообщениеОснование;
		НоваяЗапись.Данные    = Новый ХранилищеЗначения(ДанныеЗапросаКвитанцииОФискации);
		НоваяЗапись.GLN       = GLN;
		НоваяЗапись.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сообщение из РС "Очередь получения квитанций о фиксации ГИСМ"
//
// Параметры:
//  Сообщение  Справочник.ПрисоединенныеФайлыГИСМ - сообщение, которое удаляется из очереди.
//
Процедура УдалитьСообщениеИзОчередиПолученияКвитанций(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьПолученияКвитанцийОФиксацииГИСМ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет сообщение из РС "Очередь передачи данных ГИСМ"
//
// Параметры:
//  Сообщение  Справочник.ПрисоединенныеФайлыГИСМ - сообщение, которое удаляется из очереди.
//
Процедура УдалитьСообщениеИзОчередиПередачиДанных(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьПередачиДанныхГИСМ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует массив сообщений в формате XML к передаче в сервис ГИСМ.
//
// Параметры:
//  ВходящиеДанные - Массив, ДокументСсылка - документы, по которым необходимо передать сообщения.
//  Операция       - Перечисление.ОперацииОбменаГИСМ - выполняемая операция обмена.
// 
// Возвращаемое значение:
//  Массив - подготовленные сообщения обмена.
//
Функция СообщенияКПередачеXML(ВходящиеДанные, Операция) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив") Тогда
		
		Для Каждого ДокументСсылка Из ВходящиеДанные Цикл
		
			Сообщения = СообщениеКПередачеXML(ДокументСсылка, Операция);
			Для Каждого Сообщение Из Сообщения Цикл
				ВозвращаемоеЗначение.Добавить(Сообщение);
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Сообщения = СообщениеКПередачеXML(ВходящиеДанные, Операция);
		Для Каждого Сообщение Из Сообщения Цикл
			ВозвращаемоеЗначение.Добавить(Сообщение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в сервис ГИСМ.
//
// Параметры:
//  ВходящиеДанные - ДокументСсылка - документ, по которому формируется сообщение.
//  Операция       - Перечисление.ОперацииОбменаГИСМ - выполняемая операция обмена.
// 
// Возвращаемое значение:
//  Строка - подготовленное сообщение обмена.
//
Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеXML(ДокументСсылка, Операция);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщения к передаче в сервис ГИСМ.
//
// Параметры:
//  Сообщения - Массив - содержит структуру сообщений, которые подготавливаются к передаче.
// 
// Возвращаемое значение:
//  Массив - содержит структуры со следующими полями:
//    * Документ
//    * Основание
//    * Выполнено
//    * ТекстОшибки
//    * НовыйСтатус
//    * ИсходящееСообщение
//
Функция ПодготовитьСообщенияКПередаче(Сообщения) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Операция",     Сообщение.Операция);
		Реквизиты.Вставить("ТипСообщения", Сообщение.ТипСообщения);
		Реквизиты.Вставить("Документ",     Сообщение.Документ);
		Реквизиты.Вставить("Версия",       Сообщение.Версия);
		Реквизиты.Вставить("Описание",     Сообщение.Описание);
		Реквизиты.Вставить("Организация",  Сообщение.Организация);
		
		Если ТипЗнч(Сообщение.СвойстваПодписи) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(Сообщение.СвойстваПодписи);
		Иначе
			СвойстваПодписи = Сообщение.СвойстваПодписи;
		КонецЕсли;
		
		КонвертSOAP = СвойстваПодписи.Подпись;
		
		Попытка
			Результат = ПодготовитьСообщениеКПередаче(КонвертSOAP, Реквизиты);
			НовыйСтатус = Результат.НовыйСтатус;
			ИсходящееСообщение = Результат.ИсходящееСообщение;
			Выполнено = Истина;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Выполнено = Ложь;
		КонецПопытки;
		
		СтрокаРезультата = Новый Структура;
		СтрокаРезультата.Вставить("Документ",           Сообщение.Документ);
		СтрокаРезультата.Вставить("Основание",          Сообщение.Основание);
		СтрокаРезультата.Вставить("Выполнено",          Выполнено);
		СтрокаРезультата.Вставить("ТекстОшибки",        ТекстОшибки);
		СтрокаРезультата.Вставить("НовыйСтатус",        НовыйСтатус);
		СтрокаРезультата.Вставить("ИсходящееСообщение", ИсходящееСообщение);
		
		ВозвращаемоеЗначение.Добавить(СтрокаРезультата);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщение к передаче в сервис ГИСМ.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения.
//  Реквизиты - Структура - Реквизиты передаваемого сообщения.
// 
// Возвращаемое значение:
//  Массив - содержит структуры со следующими полями:
//    * НовыйСтатус
//    * ИсходящееСообщение
//
Функция ПодготовитьСообщениеКПередаче(ТекстСообщенияXML, Реквизиты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус");
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	
	НачатьТранзакцию();
	
	Попытка
		
		ИсходящееСообщение = ДобавитьЗаписьВПротоколОбмена(
			ТекстСообщенияXML,
			Реквизиты);
		
		ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение);
		
		ПолноеИмя = Реквизиты.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(Реквизиты.Документ, Реквизиты.Операция);
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		ВозвращаемоеЗначение.НовыйСтатус        = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Реквизиты.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает операцию запроса квитанции по операции передачи данных
//
// Параметры:
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - операция передачи данных
// 
// Возвращаемое значение:
//  Операция запроса квитанции - ПеречислениеСсылка.ОперацииОбменаГИСМ
//
Функция ОперацияЗапросаКвитанции(ОперацияПередачиДанных) Экспорт
	
	ИмяЗначенияПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(ОперацияПередачиДанных);
	ОперацияЗапросаКвитанции = Перечисления.ОперацииОбменаГИСМ[ИмяЗначенияПеречисления + "ПолучениеКвитанции"];
	
	Возврат ОперацияЗапросаКвитанции;
	
КонецФункции

// Получает данные документа, по которому было отправлено или получено сообщение.
//
// Параметры:
//  Сообщение - Справочник.ГИСМПрисоединенныеФайлы - сообщение, по которому получаются данные.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Документ  - ДокументСсылка - документ, по которому было получено или отрправлено сообщение.
//   * Основание - ДокументСсылка - основание документа, по которому было получено или отрправлено сообщение.
//   * Операция  - ПеречислениеСсылка.ОперацииОбменаГИСМ - выполненная операция обмена.
//
Функция ДанныеДокументаСообщения(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла.Основание КАК Основание,
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Документ,
	|	ГИСМПрисоединенныеФайлы.Операция КАК Операция
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.Ссылка = &Сообщение
	|");
	
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Документ",  Выборка.Документ);
		ВозвращаемоеЗначение.Вставить("Основание", Выборка.Основание);
		ВозвращаемоеЗначение.Вставить("Операция",  Выборка.Операция);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает конверт SOAP из присоединенного файла, в котором хранится сообщение протокола обмена.
//
// Параметры:
//  Сообщение - Справочник.ПрисоединенныеФайлыГИСМ - хранимый файл сообщения, из которого извлекается конверт SOAP.
// 
// Возвращаемое значение:
//  Строка - полученный конверт SOAP.
//
Функция КонвертSOAPИзПротокола(Сообщение) Экспорт
	
	ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Сообщение);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8, "");
	ТекстСообщенияXML = ТекстовыйДокумент.ПолучитьТекст();
	
	Возврат ТекстСообщенияXML;
	
КонецФункции

// Добавить запись в протокол обмена
//
// Параметры:
//  КонвертSOAP - Строка - Текст сообщения SOAP
//  Реквизиты - Структура - Значения реквизитов сообщения
// 
// Возвращаемое значение:
//  СправочникСсылка.ГИСМПрисоединенныеФайлы - Ссылка на присоединенный файл
//
Функция ДобавитьЗаписьВПротоколОбмена(КонвертSOAP, Реквизиты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	Если Реквизиты.Свойство("ТекстСообщенияXML") Тогда
		ХешированиеДанныхОбъект.Добавить(Реквизиты.ТекстСообщенияXML);
	Иначе
		ХешированиеДанныхОбъект.Добавить(ТекстВходящегоСообщенияXML(КонвертSOAP));
	КонецЕсли;
	ХешСуммаBase64 = Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	
	СообщениеОснование = Справочники.ГИСМПрисоединенныеФайлы.ПустаяСсылка();
	Если Реквизиты.Свойство("СообщениеОснование") Тогда
		СообщениеОснование = Реквизиты.СообщениеОснование;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГИСМПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ГИСМПрисоединенныеФайлы.СообщениеОснование = &СообщениеОснование
	|	И ГИСМПрисоединенныеФайлы.ХешСумма = &ХешСумма");
	
	Запрос.УстановитьПараметр("ХешСумма", ХешСуммаBase64);
	Запрос.УстановитьПараметр("ВладелецФайла", Реквизиты.Документ);
	Запрос.УстановитьПараметр("СообщениеОснование", СообщениеОснование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(КонвертSOAP);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8, "");
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов",     Реквизиты.Документ);
	ПараметрыФайла.Вставить("ИмяБезРасширения",   Строка(Новый УникальныйИдентификатор));
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
		ПараметрыФайла,
		АдресФайлаВоВременномХранилище,,,
		Справочники.ГИСМПрисоединенныеФайлы.ПолучитьСсылку());
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.ПодписанЭП = Истина;
	ПрисоединенныйФайлОбъект.ХешСумма = ХешСуммаBase64;
	
	ЗаполнитьЗначенияСвойств(ПрисоединенныйФайлОбъект, Реквизиты);
	
	// Проверка подписи
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("КонвертSOAP",      КонвертSOAP);
	ИсходныеДанные.Вставить("ПараметрыXMLDSig", ИнтеграцияГИСМКлиентСервер.ПараметрыXMLDSig());
	
	Если Реквизиты.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее Тогда
		ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Ошибка при проверке электронной подписи отправляемого в ГИСМ сообщения %1:'"), ПрисоединенныйФайл);
	ИначеЕсли Реквизиты.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Входящее Тогда
		ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Ошибка при проверке электронной подписи загруженного из ГИСМ сообщения %1:'"), ПрисоединенныйФайл);
	КонецЕсли;
	
	ОписаниеОшибки = "";
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи", Ложь, ОписаниеОшибки);
	Если МенеджерКриптографии <> Неопределено Тогда
		
		ОписаниеОшибки = "";
		ПодписьВерна = ЭлектроннаяПодпись.ПроверитьПодпись(
			МенеджерКриптографии,
			ИсходныеДанные,
			Неопределено,
			ОписаниеОшибки,
			ПрисоединенныйФайлОбъект.ДатаСоздания);
		
		Если ПодписьВерна Тогда
			
			ПрисоединенныйФайлОбъект.ДатаПроверкиПодписи = ПрисоединенныйФайлОбъект.ДатаСоздания;
			ПрисоединенныйФайлОбъект.ПодписьВерна = Истина;
			
		Иначе
			
			ПрисоединенныйФайлОбъект.ДатаПроверкиПодписи = ПрисоединенныйФайлОбъект.ДатаСоздания;
			ПрисоединенныйФайлОбъект.ПодписьВерна = Ложь;
			
			ЗаписатьОшибкуВЖурналРегистрации(ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
			
		КонецЕсли;
		
	Иначе
		
		ЗаписатьОшибкуВЖурналРегистрации(ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
		
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект.Записать();
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Получает входящее сообщение протокола обмена по исходящему сообщению-основанию.
//
// Параметры:
//  ИсходящееСообщение - Справочник.ПрисоединенныеФайлыГИСМ - ссылка на хранимый файл, в котором храниться исходящее сообщение.
// 
// Возвращаемое значение:
//  Справочник.ПрисоединенныеФайлыГИСМ - найденное входящее сообщение.
//
Функция ВходящееСообщениеПротоколаПоИсходящемуСообщению(ИсходящееСообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВходящееСообщение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.Ссылка КАК ВходящееСообщение
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.СообщениеОснование = &СообщениеОснование");
	
	Запрос.УстановитьПараметр("СообщениеОснование", ИсходящееСообщение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВходящееСообщение = Выборка.ВходящееСообщение;
	КонецЕсли;
	
	Возврат ВходящееСообщение;
	
КонецФункции

// Получает исходящее сообщение протокола обмена по входящему сообщению, для которого оно является основанием.
//
// Параметры:
//  ИсходящееСообщение - Справочник.ПрисоединенныеФайлыГИСМ - ссылка на хранимый файл, в котором храниться входящее сообщение.
// 
// Возвращаемое значение:
//  Справочник.ПрисоединенныеФайлыГИСМ - найденное исходящее сообщение.
//
Функция ИсходящееСообщениеПротоколаПоВходящемуСообщению(ВходящееСообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходящееСообщение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.СообщениеОснование КАК ИсходящееСообщение
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.Ссылка = &ВходящееСообщение");
	
	Запрос.УстановитьПараметр("ВходящееСообщение", ВходящееСообщение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИсходящееСообщение = Выборка.ИсходящееСообщение;
	КонецЕсли;
	
	Возврат ИсходящееСообщение;
	
КонецФункции

// Получает доступные пользователю для подписи сертификты по организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организации - организация, чьи сертификаты получаются.
// 
// Возвращаемое значение:
//   Массив - массив доступных сертификатов.
//
Функция СертификатыПользователяДляПодписиПоОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сертификаты = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Сертификат
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	Сертификаты.Организация = &Организация
	|	И (Сертификаты.Пользователь = &Пользователь
	|			ИЛИ Сертификаты.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Сертификаты.Добавить(Выборка.Сертификат);
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

// Проверяет введенную строку на соответствие формата номеров КиЗ
//
// Параметры:
//  НомерКиЗ - Строка - номер КиЗ, подлежащий проверке.
// 
// Возвращаемое значение:
//  Булево - Истина, если указанный номер соответствует формату, Ложь в обратном случае.
//
Функция ЭтоНомерКиЗ(НомерКиЗ) Экспорт
	
	Результат = Истина;
	
	ТипНомерКиЗ = ФабрикаXDTO.Тип(ИнтеграцияГИСМ.URIПространстваИменИспользуемойВерсииСхемОбмена(), "sign_num_type");
	
	Попытка
		ТипНомерКиЗ.Проверить(НомерКиЗ);
		
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаОшибок

Процедура ОбработатьОшибку(ТекстОшибки, ИнформацияОбОшибке, ВозвращаемоеЗначение)
	
	ЗаписатьОшибкуВЖурналРегистрации(СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
	
	ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка;
	
	ПодготовленныйТекстОшибки = СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Если Не ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = ПодготовленныйТекстОшибки;
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
		                                 + Символы.ПС
		                                 + ПодготовленныйТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ГИСМ.
//
// Параметры:
//  Заголовок   - Строка - заголовок сообщения.
//  ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ГИСМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьПередачиДанныхГИСМ.СоздатьМенеджерЗаписи();
	НоваяЗапись.Сообщение = Сообщение;
	НоваяЗапись.Записать();
	
КонецПроцедуры

Функция ПрочитатьПервичныеДанныеВходящегоСообщенияXML(ТекстСообщенияXML)
	
	ОбъектXTDOДляПолученияВерсии = ИнтеграцияГИСМ.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML);
	
	СтруктураДляПолученияВерсии = Новый Структура;
	СтруктураДляПолученияВерсии.Вставить("version", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураДляПолученияВерсии, ОбъектXTDOДляПолученияВерсии);
	Версия = СтруктураДляПолученияВерсии.version;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Версия",            Версия);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", ТекстСообщенияXML);
	ВозвращаемоеЗначение.Вставить("ОбъектXDTO",        ОбъектXTDOДляПолученияВерсии);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработатьТекстСообщенияSOAP(ТекстСообщенияSOAP, ВозвращаемоеЗначение)
	
	ТекстСообщенияXML = ТекстВходящегоСообщенияXML(ТекстСообщенияSOAP);
	ПервичныеДанные   = ПрочитатьПервичныеДанныеВходящегоСообщенияXML(ТекстСообщенияXML);
	
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", ТекстСообщенияXML);
	ВозвращаемоеЗначение.Вставить("Версия",            ПервичныеДанные.Версия);
	
	Возврат ПервичныеДанные;
	
КонецФункции

// Преобразует содержимое произвольного объекта XDTO источника (без типов) в содержимое объекта XDTO приемника (с типами).
//
// Параметры:
//  ОбъектXDTOИсточник - ОбъектXDTO - Объект XDTO источник.
//  ОбъектXDTOПриемник - ОбъектXDTO - Объект XDTO приемник.
//  Версия - Строка - Версия XDTO приемника.
//
// Возвращаемое значение:
//  ОбъектXDTO - ОбъектXDTO - преобразованный объект XDTO.
//
Функция ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ОбъектXDTOИсточник, ОбъектXDTOПриемник, Версия) Экспорт
	
	Для Каждого СвойствоИсточника Из ОбъектXDTOИсточник.Свойства() Цикл
		
		ИмяСвойства      = СвойствоИсточника.Имя;
		ЗначениеСвойства = ОбъектXDTOИсточник[ИмяСвойства];
		
		СвойствоПриемника = ОбъектXDTOПриемник.Свойства().Получить(ИмяСвойства);
		Если СвойствоПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
				
				ЗначениеСвойстваПриемника = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОбъектXDTOПриемник, ИмяСвойства, Версия);
				
				Если ТипЗнч(ЗначениеСвойстваПриемника) = Тип("ОбъектXDTO") Тогда
					
					ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЗначениеСвойства, ЗначениеСвойстваПриемника, Версия);
					
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриемника);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриемника;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСпискаИсточника = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСпискаИсточника) = Тип("ОбъектXDTO") Тогда
					
					Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
						
						ЭлементаСпискаПриемника = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОбъектXDTOПриемник, ИмяСвойства, Версия);
						
						Если ТипЗнч(ЭлементаСпискаПриемника) = Тип("ОбъектXDTO") Тогда
							ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЭлементСпискаИсточника, ЭлементаСпискаПриемника, Версия);
							ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементаСпискаПриемника);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементСпискаИсточника);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Если ТипЗнч(ЗначениеСвойства) = Тип("Дата") Тогда
				Если СвойствоИсточника.Тип = ИнтеграцияГИСМ.ТипФабрикаXDTO(СвойствоИсточника.Тип.Имя, Версия) Тогда
					ОбъектXDTOПриемник[ИмяСвойства] = ИнтеграцияГИСМ.ДатаСЧасовымПоясом(ЗначениеСвойства);
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойства;
				КонецЕсли;
			Иначе
				Попытка
					
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойства);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойства;
					КонецЕсли;
					
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектXDTOПриемник;
	
КонецФункции

// Обрабатывает ответ на запрос на получение квитанции о фиксации
//
// Параметры:
//  ТекстВходящегоСообщенияSOAP - Строка - конверт SOAP, содержащий ответ на запрос о получение квитанции.
// 
// Возвращаемое значение:
//  Структура:
//     * Результат         - Структура - см. описание для типа объекта result.success в пакете XDTO "Интеграция ГИСМ".
//     * ТекстОшибки       - Строка    - текст ошибки, в случае ее возникновения. 
//     * ТекстСообщенияXML - Строка    - содержит ответ, полученный на запрос.
//     * СтатусОбработки   - Перечисление.СтатусыОбработкиСообщенийГИСМ - статус обработки запроса.
//     * ДатаОбработки     - ДатаВремя - дата обработки запроса.
//
Функция ОбработатьОтветНаЗапросПолученияКвитанцииОФиксации(ТекстВходящегоСообщенияSOAP) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ДатаОбработки",     Неопределено);
	ВозвращаемоеЗначение.Вставить("Версия",            Неопределено);
	
	ИмяПакета = "response";
	
	Попытка
		
		ПервичныеДанные = ОбработатьТекстСообщенияSOAP(ТекстВходящегоСообщенияSOAP, ВозвращаемоеЗначение);
		
		ОбъектXDTO = ИнтеграцияГИСМ.ОбъектXDTOПоТекстуСообщенияXML(ПервичныеДанные.ТекстСообщенияXML, ИмяПакета, ПервичныеДанные.Версия);
		
	Исключение
		
		Если ПервичныеДанные = Неопределено Тогда
			
			ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос получения квитанции из ГИСМ возникла ошибка:
				           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ПервичныеДанные.ОбъектXDTO,
				ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяПакета, ПервичныеДанные.Версия),
				ПервичныеДанные.Версия);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Попытка
		
		Если ОбъектXDTO.result = Неопределено Тогда
			
			ВозвращаемоеЗначение.ДатаОбработки = ТекущаяДатаСеанса();
			
			Если ОбъектXDTO.request_query_error <> Неопределено Тогда
				
				КодОшибки      = ОбъектXDTO.request_query_error.error_code;
				ОписаниеОшибки = ОбъектXDTO.request_query_error.error_desc;
				
				ТребуетсяПовторныйЗапрос = Ложь;
				Если КодОшибки = "308" Тогда
					ТребуетсяПовторныйЗапрос = Истина;
				КонецЕсли;
				
				Если ТребуетсяПовторныйЗапрос Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Обрабатывается;
				Иначе
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено;
				КонецЕсли;
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Квитанция получена. Ошибка: Неверный запрос.
					           |Дополнительная информация: Код ошибки: %1. Текст ошибки: %2.'"),
					КодОшибки,
					ОписаниеОшибки);
				
			ИначеЕсли ОбъектXDTO.request_system_failure <> Неопределено Тогда
				
				ОписаниеОшибки = ОбъектXDTO.request_system_failure.failure_text;
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При получения квитанции из ГИСМ произошел системный сбой:
					           |%1.'"),
					ОписаниеОшибки);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ДатаОбработки = ОбъектXDTO.result.accept_time;
			
			Если ОбъектXDTO.result.success = Неопределено Тогда
				
				Если ОбъектXDTO.result.query_error <> Неопределено Тогда
					
					Для каждого СтрокаОшибки Из ОбъектXDTO.result.query_error.error Цикл
						
						Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
							ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки + Символы.ПС;
						Иначе
							ВозвращаемоеЗначение.ТекстОшибки = "";
						КонецЕСли;
						
						ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено;
						
						КодОшибки      = СтрокаОшибки.error_code;
						ОписаниеОшибки = СтрокаОшибки.error_desc;
						
						ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки + СтрШаблон(
							НСтр("ru = 'Квитанция получена. Ошибка: Неверный запрос.
							           |Дополнительная информация: Код ошибки: %1. Текст ошибки: %2.'"),
							КодОшибки,
							ОписаниеОшибки);
						
						Попытка
							Если НЕ СтрокаОшибки.Свойства().Получить("sign") = Неопределено Тогда
								Если ЗначениеЗаполнено(СтрокаОшибки.sign.sign_num) Тогда
									ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки + ":" + СтрокаОшибки.sign.sign_num;
								Иначе
									ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки + ":" + СтрокаОшибки.sign.sign_tid;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
						
					КонецЦикла;
					
				ИначеЕсли ОбъектXDTO.result.system_failure <> Неопределено Тогда
					
					ОписаниеОшибки = ОбъектXDTO.result.system_failure.failure_text;
					
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка;
					ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Квитанция получена. Ошибка: Системный сбой.
						           |Дополнительная информация: %1.'"),
						ОписаниеОшибки);
					
				ИначеЕсли ОбъектXDTO.result.reject <> Неопределено Тогда
					
					Если ОбъектXDTO.result.reject.denied_action <> Неопределено Тогда
						
						// Недостаточно прав на указанный тип запроса
						ПоддерживаемыеТипыДокументов = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов();
						
						ТипДокумента = ОбъектXDTO.result.reject.denied_action;
						
						ОписаниеТипаДокумента = ПоддерживаемыеТипыДокументов.Получить(ТипДокумента);
						
						Если ОписаниеТипаДокумента <> Неопределено Тогда
							ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Недостаточно прав на выполнение операции ""%1""'"), ОписаниеТипаДокумента.Описание);
						Иначе
							ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Недостаточно прав на выполнение операции (action id: %1)'"), ТипДокумента);
						КонецЕсли;
						
					ИначеЕсли ОбъектXDTO.result.reject.user_filter_reason <> Неопределено Тогда
						
						// Отказ пользовательским фильтром
						ОписаниеОшибки = ОбъектXDTO.result.reject.user_filter_reason;
						
					ИначеЕсли ОбъектXDTO.result.reject.system_filter_reason <> Неопределено Тогда
						
						// Отказ фильтром контролирующего органа
						ОписаниеОшибки = ОбъектXDTO.result.reject.system_filter_reason;
						
					ИначеЕсли ОбъектXDTO.result.reject.recall_reason <> Неопределено Тогда
						
						// Отзыв запроса отправителем
						ОписаниеОшибки = ОбъектXDTO.result.reject.recall_reason;
						
					КонецЕсли;
					
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено;
					ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Квитанция получена. Ошибка: Отказ на проводку запроса.
						           |Дополнительная информация: %1.'"),
						ОписаниеОшибки);
					
				ИначеЕсли ОбъектXDTO.result.moderation <> Неопределено Тогда
					
					Если ОбъектXDTO.result.moderation.user_filter_reason <> Неопределено Тогда
						
						// Пользовательская проверка
						ОписаниеОшибки = ОбъектXDTO.result.moderation.user_filter_reason;
						
					ИначеЕсли ОбъектXDTO.result.moderation.system_filter_reason <> Неопределено Тогда
						
						// Проверка со стороны контролирующего органа
						ОписаниеОшибки = ОбъектXDTO.result.moderation.system_filter_reason;
						
					КонецЕсли;
					
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.НаМодерации;
					ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Запрос ожидает рассмотрения и утверждения.
						           |Дополнительная информация: %1.'"),
						ОписаниеОшибки);
					
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято;
				ВозвращаемоеЗначение.Результат = ИнтеграцияГИСМ.ОбъектXDTOВСтруктуру(ОбъектXDTO.result.success);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос получения квитанции из ГИСМ возникла ошибка:
			           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает ответ ГИСМ на переданные данные.
//
// Параметры:
//  ТекстВходящегоСообщенияSOAP - Строка - конверт SOAP, содержащий ответ на переданные данные.
// 
// Возвращаемое значение:
//  Структура:
//     * Результат         - Структура - см. описание для типа объекта result.success в пакете XDTO "Интеграция ГИСМ".
//     * ТекстОшибки       - Строка    - текст ошибки, в случае ее возникновения. 
//     * ТекстСообщенияXML - Строка    - содержит ответ, полученный на запрос.
//     * СтатусОбработки   - Перечисление.СтатусыОбработкиСообщенийГИСМ - статус обработки запроса.
//
Функция ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияSOAP) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	ВозвращаемоеЗначение.Вставить("Версия",            Неопределено);
	
	ИмяПакета = "incoming_response";
	
	Попытка
		
		ПервичныеДанные = ОбработатьТекстСообщенияSOAP(ТекстВходящегоСообщенияSOAP, ВозвращаемоеЗначение);
		
		ОбъектXDTO = ИнтеграцияГИСМ.ОбъектXDTOПоТекстуСообщенияXML(ПервичныеДанные.ТекстСообщенияXML, ИмяПакета, ПервичныеДанные.Версия);
		
	Исключение
		
		Если ПервичныеДанные = Неопределено Тогда
			
			ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос передачи данных в ГИСМ возникла ошибка:
				           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ПервичныеДанные.ОбъектXDTO,
				ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяПакета, ПервичныеДанные.Версия),
				ПервичныеДанные.Версия);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Попытка
		
		Если ОбъектXDTO.success = Неопределено Тогда
			
			Если ОбъектXDTO.query_error <> Неопределено Тогда
				
				КодОшибки      = ОбъектXDTO.query_error.error_code;
				ОписаниеОшибки = ОбъектXDTO.query_error.error_desc;
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено;
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При передаче данных в ГИСМ возникла ошибка
					           |Код ошибки: %1. Текст ошибки: %2.'"),
					КодОшибки,
					ОписаниеОшибки);
				
			ИначеЕсли ОбъектXDTO.system_failure <> Неопределено Тогда
				
				ОписаниеОшибки = ОбъектXDTO.system_failure.failure_text;
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При передаче данных в ГИСМ произошел системный сбой.
					           |Дополнительная информация: %1.'"),
					ОписаниеОшибки);
				
			КонецЕсли;
		
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято;
			ВозвращаемоеЗначение.Результат = ИнтеграцияГИСМ.ОбъектXDTOВСтруктуру(ОбъектXDTO.success);
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос передачи данных в ГИСМ возникла ошибка:
			           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает ответ ГИСМ на запрос о получении документа.
//
// Параметры:
//  ТекстВходящегоСообщенияSOAP - Строка - конверт SOAP, содержащий ответ на запрос о получении документа.
// 
// Возвращаемое значение:
//  Структура:
//     * Результат         - Структура - см. описание для типа объекта result.success в пакете XDTO "Интеграция ГИСМ".
//     * ТекстОшибки       - Строка    - текст ошибки, в случае ее возникновения. 
//     * ТекстСообщенияXML - Строка    - содержит ответ, полученный на запрос.
//
Функция ОбработатьОтветНаЗапросПолученияДокумента(ТекстВходящегоСообщенияSOAP, ДанныеДляПолученияДокумента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	ВозвращаемоеЗначение.Вставить("Версия",            Неопределено);
	
	ИмяПакета = "response";
	
	Попытка
		
		ПервичныеДанные = ОбработатьТекстСообщенияSOAP(ТекстВходящегоСообщенияSOAP, ВозвращаемоеЗначение);
		
		ОбъектXDTO = ИнтеграцияГИСМ.ОбъектXDTOПоТекстуСообщенияXML(ПервичныеДанные.ТекстСообщенияXML, ИмяПакета, ПервичныеДанные.Версия);
		
	Исключение
		
		Если ПервичныеДанные = Неопределено Тогда
			
			ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос получения документа из ГИСМ возникла ошибка:
				           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ПервичныеДанные.ОбъектXDTO,
				ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяПакета, ПервичныеДанные.Версия),
				ПервичныеДанные.Версия);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Попытка
		
		Если ОбъектXDTO.item_body = Неопределено Тогда
			
			Если ДанныеДляПолученияДокумента = Неопределено Тогда
				
				ДанныеДляПолученияДокумента = Новый Структура;
				ДанныеДляПолученияДокумента.Вставить("action_id", НСтр("ru = '<не прочитано>'"));
				ДанныеДляПолученияДокумента.Вставить("output_id", НСтр("ru = '<не прочитано>'"));
				
				НаименованиеДокумента = НСтр("ru = '<не прочитано>'");
				
			Иначе
				
				ОписаниеПоддерживаемоегоТипа = ИнтеграцияГИСМ.ПоддерживаемыеТипыДокументов().Получить(ДанныеДляПолученияДокумента.action_id);
				Если ОписаниеПоддерживаемоегоТипа <> Неопределено Тогда
					НаименованиеДокумента = ОписаниеПоддерживаемоегоТипа.Описание;
				Иначе
					НаименованиеДокумента = НСтр("ru = 'Неподдерживаемый документ'");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбъектXDTO.request_query_error <> Неопределено Тогда
				
				КодОшибки      = ОбъектXDTO.request_query_error.error_code;
				ОписаниеОшибки = ОбъектXDTO.request_query_error.error_desc;
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При получении документа %5 (action_id=%3, output_id=%4) из ГИСМ возникла ошибка:
					           |Код ошибки: %1. Текст ошибки: %2.'"),
					КодОшибки,
					ОписаниеОшибки,
					ДанныеДляПолученияДокумента.action_id,
					ДанныеДляПолученияДокумента.output_id,
					НаименованиеДокумента);
				
			ИначеЕсли ОбъектXDTO.request_system_failure <> Неопределено Тогда
				
				ОписаниеОшибки = ОбъектXDTO.request_system_failure.failure_text;
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При получении документа %4 (action_id=%2, output_id=%3) из ГИСМ произошел системный сбой.
					           |Дополнительная информация: %1.'"),
					ОписаниеОшибки,
					ДанныеДляПолученияДокумента.action_id,
					ДанныеДляПолученияДокумента.output_id,
					НаименованиеДокумента);
				
			КонецЕсли;
			
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("ДанныеДокумента",   Неопределено);
			Результат.Вставить("ДанныеОтправителя", Неопределено);
			Результат.Вставить("НомерДокумента",    Неопределено);
			
			Если ОбъектXDTO.item_body.order_id <> Неопределено Тогда
				
				Результат.НомерДокумента = ОбъектXDTO.item_body.order_id;
				
			КонецЕсли;
			
			Если ОбъектXDTO.item_body.sender_info <> Неопределено Тогда
				
				Результат.ДанныеОтправителя = ИнтеграцияГИСМ.ОбъектXDTOВСтруктуру(ОбъектXDTO.item_body.sender_info);
				
			КонецЕсли;
			
			Для Каждого Свойство Из ОбъектXDTO.item_body.Свойства() Цикл
				
				ИмяСвойства      = Свойство.Имя;
				ЗначениеСвойства = ОбъектXDTO.item_body[ИмяСвойства];
				
				Если    ИмяСвойства = "order_id"
					ИЛИ ИмяСвойства = "sender_info" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеСвойства = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Результат.ДанныеДокумента = ИнтеграцияГИСМ.ОбъектXDTOВСтруктуру(ЗначениеСвойства);
				
			КонецЦикла;
			
			ВозвращаемоеЗначение.Результат = Результат;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос получения документа из ГИСМ возникла ошибка:
			           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает ответ ГИСМ на запрос о получении списка новых документов для загрузки.
//
// Параметры:
//  ТекстВходящегоСообщенияSOAP - Строка - конверт SOAP, содержащий ответ на запрос о получении списка новых документов для загрузки.
// 
// Возвращаемое значение:
//  Структура:
//     * Результат         - Структура - см. описание для типа объекта result.success в пакете XDTO "Интеграция ГИСМ".
//     * ТекстОшибки       - Строка    - текст ошибки, в случае ее возникновения. 
//     * ТекстСообщенияXML - Строка    - содержит ответ, полученный на запрос.
//
Функция ОбработатьОтветНаЗапросПолученияДокументов(ТекстВходящегоСообщенияSOAP) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	ВозвращаемоеЗначение.Вставить("Версия",            Неопределено);
	
	ИмяПакета = "response";
	
	Попытка
		
		ПервичныеДанные = ОбработатьТекстСообщенияSOAP(ТекстВходящегоСообщенияSOAP, ВозвращаемоеЗначение);
		
		ОбъектXDTO = ИнтеграцияГИСМ.ОбъектXDTOПоТекстуСообщенияXML(ПервичныеДанные.ТекстСообщенияXML, ИмяПакета, ПервичныеДанные.Версия);
		
	Исключение
		
		Если ПервичныеДанные = Неопределено Тогда
			
			ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос получения списка новых документов из ГИСМ возникла ошибка:
				           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ПервичныеДанные.ОбъектXDTO,
				ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяПакета, ПервичныеДанные.Версия),
				ПервичныеДанные.Версия);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Попытка
	
		Если ОбъектXDTO.item_list = Неопределено Тогда
			
			Если ОбъектXDTO.request_query_error <> Неопределено Тогда
				
				КодОшибки      = ОбъектXDTO.request_query_error.error_code;
				ОписаниеОшибки = ОбъектXDTO.request_query_error.error_desc;
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При получении списка новых документов из ГИСМ возникла ошибка:
					           |Код ошибки: %1. Текст ошибки: %2.'"),
					КодОшибки,
					ОписаниеОшибки);
				
			ИначеЕсли ОбъектXDTO.request_system_failure <> Неопределено Тогда
				
				ОписаниеОшибки = ОбъектXDTO.request_system_failure.failure_text;
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При получении списка новых документов из ГИСМ произошел системный сбой.
					           |Дополнительная информация: %1.'"),
					ОписаниеОшибки);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.Результат = ИнтеграцияГИСМ.ОбъектXDTOВСтруктуру(ОбъектXDTO.item_list);
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос получения списка новых документов из ГИСМ возникла ошибка:
			           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает ответ ГИСМ на запрос о получении данных реестра.
//
// Параметры:
//  ТекстВходящегоСообщенияSOAP - Строка - конверт SOAP, содержащий ответ на запрос о получении данных реестра.
// 
// Возвращаемое значение:
//  Структура:
//     * Результат         - Структура - см. описание для типа объекта result.success в пакете XDTO "Интеграция ГИСМ".
//     * ТекстОшибки       - Строка    - текст ошибки, в случае ее возникновения. 
//     * ТекстСообщенияXML - Строка    - содержит ответ, полученный на запрос.
//
Функция ОбработатьОтветНаЗапросПолученияДанныхРеестра(ТекстВходящегоСообщенияSOAP) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	ВозвращаемоеЗначение.Вставить("Версия",            Неопределено);
	
	ИмяПакета = "reestr_response";
	
	Попытка
		
		ПервичныеДанные = ОбработатьТекстСообщенияSOAP(ТекстВходящегоСообщенияSOAP, ВозвращаемоеЗначение);
		
		ОбъектXDTO = ИнтеграцияГИСМ.ОбъектXDTOПоТекстуСообщенияXML(ПервичныеДанные.ТекстСообщенияXML, ИмяПакета, ПервичныеДанные.Версия);
		
	Исключение
		
		Если ПервичныеДанные = Неопределено Тогда
			
			ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос получения данных реестра из ГИСМ возникла ошибка:
				           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ПервичныеДанные.ОбъектXDTO,
				ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяПакета, ПервичныеДанные.Версия),
				ПервичныеДанные.Версия);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Попытка
	
		Если ОбъектXDTO.success = Неопределено Тогда
			
			Если ОбъектXDTO.query_error <> Неопределено Тогда
				
				КодОшибки      = ОбъектXDTO.query_error.error_code;
				ОписаниеОшибки = ОбъектXDTO.query_error.error_desc;
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При получении данных реестра из ГИСМ возникла ошибка:
					           |Код ошибки: %1. Текст ошибки: %2.'"),
					КодОшибки,
					ОписаниеОшибки);
				
			ИначеЕсли ОбъектXDTO.system_failure <> Неопределено Тогда
				
				ОписаниеОшибки = ОбъектXDTO.system_failure.failure_text;
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При получении данных реестра из ГИСМ произошел системный сбой.
					           |Дополнительная информация: %1.'"),
					ОписаниеОшибки);
				
			КонецЕсли;
			
		Иначе
			
			Если ОбъектXDTO.success.item_list <> Неопределено Тогда
				ВозвращаемоеЗначение.Результат = ИнтеграцияГИСМ.ОбъектXDTOВСтруктуру(ОбъектXDTO.success.item_list);
			Иначе
				ВозвращаемоеЗначение.Результат = ОбъектXDTO.success.item;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос получения данных реестра из ГИСМ возникла ошибка:
			           |Текст ошибки: %1'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Отправляет запрос для передачи или получения данных.
//
// Параметры:
//  ТекстПодписанногоИсходящегоСообщенияXML - Строка - текст оправляемого запроса в формате XML. 
//  ВариантЗапроса                          - Перечисление.ВариантыЗапросовГИСМ - вариант отправляемого запроса.
// 
// Возвращаемое значение:
//  Структура - см. описание в ИнтеграцияГИСМКлиентСервер.ОтветТекстСообщенияXMLНеПолучен
//   
//
Функция ОтправитьЗапрос(ТекстПодписанногоИсходящегоСообщенияXML, ВариантЗапроса) Экспорт
	
	РезультатОтправки = ИнтеграцияГИСМКлиентСервер.ОтправитьЗапрос(ТекстПодписанногоИсходящегоСообщенияXML, ВариантЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		Возврат ИнтеграцияГИСМКлиентСервер.ОтветТекстСообщенияXMLПолучен(РезультатОтправки.ТекстОтвета);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(РезультатОтправки.КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), РезультатОтправки.КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправки.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправки.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		Возврат ИнтеграцияГИСМКлиентСервер.ОтветТекстСообщенияXMLНеПолучен(ТекстОшибки, ТекстСообщенияXMLОтправлен);
		
	КонецЕсли;
	
КонецФункции

// Получает GLN организации, указанной в документе.
//
// Параметры:
//  Ссылка - ДокументСсылка - документ, который содержит организацию, чей GLN получается.
// 
// Возвращаемое значение:
//   Строка - GLN организации.
//
Функция ИдентификаторОрганизацииГИСМ(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИнтеграцияГИСМ.ИспользоватьПодразделения() Тогда
		
		ТипПодразделение = Метаданные.ОпределяемыеТипы.Подразделение.Тип.Типы()[0];
		ПолноеИмяПодразделение = Метаданные.НайтиПоТипу(ТипПодразделение).ПолноеИмя();
		МенеджерОбъектаПодразделение = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяПодразделение);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОрганизацииДляОбменаГИСМДляОбособленногоПодразделения.GLN, ЕСТЬNULL(ОрганизацииДляОбменаГИСМ.GLN, """")) КАК GLN
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМДляОбособленногоПодразделения
		|			ПО ПсевдонимЗаданнойТаблицы.Организация = ОрганизацииДляОбменаГИСМДляОбособленногоПодразделения.Организация
		|			 И ПсевдонимЗаданнойТаблицы.Подразделение = ОрганизацииДляОбменаГИСМДляОбособленногоПодразделения.Подразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМ
		|			ПО ПсевдонимЗаданнойТаблицы.Организация = ОрганизацииДляОбменаГИСМ.Организация
		|			И &ПустоеПодразделение = ОрганизацииДляОбменаГИСМ.Подразделение
		|ГДЕ
		|	ЕСТЬNULL(ОрганизацииДляОбменаГИСМДляОбособленногоПодразделения.GLN, ЕСТЬNULL(ОрганизацииДляОбменаГИСМ.GLN, """")) <> """"
		|	И ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("ПустоеПодразделение", МенеджерОбъектаПодразделение.ПустаяСсылка());
	
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОрганизацииДляОбменаГИСМ.GLN, """") КАК GLN
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМ
		|			ПО ПсевдонимЗаданнойТаблицы.Организация = ОрганизацииДляОбменаГИСМ.Организация
		|ГДЕ
		|	ЕСТЬNULL(ОрганизацииДляОбменаГИСМ.GLN, """") <> """"
		|	И ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Данные = Результат.Выбрать();
	Если Данные.Следующий() Тогда
		Возврат Данные.GLN;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Форматирует текст сообщения в формате XML
//
// Параметры:
//  ТекстСообщенияXML   - Строка - текст сообщения, который.
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка XML.
//
Функция ФорматироватьXML(ТекстСообщенияXML, ИспользоватьОтступы = Истина, СимволОтступа = " ")
	
	ПараметрыФорматирования = ИнтеграцияГИСМ.ПараметрыФорматированияXML(ИспользоватьОтступы, СимволОтступа);
	
	Возврат ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования);
	
КонецФункции

// Форматирует текст сообщения в формате XML
//
// Параметры:
//  ТекстСообщенияXML       - Строка - текст сообщения, который.
//  ПараметрыФорматирования - ПараметрыЗаписиXML - параметры записи XML.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка XML.
//
Функция ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматирования);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Шаблон конверта SOAP для нового сообщения обмена с ГИСМ
// 
// Возвращаемое значение:
//  Строка -  сформированный шаблон.
//
Функция ШаблонСообщенияНовый()
	
	Возврат
	"<soap:Envelope xmlns:lb=""http://svc.center-inform.ru/serviceLabel/rev111111""
	|               xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
	|               xmlns:sudt=""http://sudt.eek.ru/rev111111""
	|               xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
	|               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
	|  <soap:Header>
	|    <wsse:Security soap:actor=""http://smev.gosuslugi.ru/actors/smev"">
	|      <ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
	|        <SignedInfo xmlns=""http://www.w3.org/2000/09/xmldsig#"">
	|          <CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
	|          <SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411""/>
	|          <Reference URI=""#body"">
	|            <Transforms>
	|              <Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/>
	|              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
	|            </Transforms>
	|            <DigestMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#gostr3411""/>
	|            <DigestValue>%DigestValue%</DigestValue>
	|          </Reference>
	|        </SignedInfo>
	|        <SignatureValue xmlns=""http://www.w3.org/2000/09/xmldsig#"">
	|          %SignatureValue%
	|        </SignatureValue>
	|        <ds:KeyInfo>
	|          <wsse:SecurityTokenReference>
	|            <wsse:Reference URI=""#SenderCertificate""
	|                            ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/>
	|          </wsse:SecurityTokenReference>
	|        </ds:KeyInfo>
	|      </ds:Signature>
	|      <wsse:BinarySecurityToken
	|              EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary""
	|              ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""
	|              wsu:Id=""SenderCertificate"">
	|        %BinarySecurityToken%
	|      </wsse:BinarySecurityToken>
	|    </wsse:Security>
	|  </soap:Header>
	|  <soap:Body wsu:Id=""body"">
	|    <lb:ServiceSudt>
	|      <sudt:Message>
	|        <sudt:Sender>
	|          <sudt:Name>ФГУП ЦентрИнформ</sudt:Name>
	|            <sudt:Code></sudt:Code>
	|        </sudt:Sender>
	|        <sudt:Recipient>
	|          <sudt:Name>ФНС</sudt:Name>
	|            <sudt:Code>FNS001001</sudt:Code>
	|        </sudt:Recipient>
	|      </sudt:Message>
	|      <sudt:MessageData>
	|        <sudt:AppData>%AppData%</sudt:AppData>
	|      </sudt:MessageData>
	|    </lb:ServiceSudt>
	|  </soap:Body>
	|</soap:Envelope>";
	
КонецФункции

// Помещает текст сообщения XML в конверт SOAP.
//
// Параметры:
//  ТекстСообщенияXML - Строка -  текст сообщения, которое требуется поместить в конверт SOAP.
// 
// Возвращаемое значение:
//  Строка - сообщение помещенное конверт SOAP
//
Функция ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML) Экспорт
	
	ТекстСообщенияXMLБезОтступов = ФорматироватьXML(ТекстСообщенияXML, Ложь);
	
	ТекстСообщенияXMLБезОтступовBase64 = ИнтеграцияГИСМКлиентСервер.ОтформатироватьСтрокуBase64(
		ПреобразоватьСтрокуВBase64(ТекстСообщенияXMLБезОтступов));
	
	ШаблонСообщения = ШаблонСообщенияНовый();
	
	Результат = СтрЗаменить(ШаблонСообщения, "%AppData%", ТекстСообщенияXMLБезОтступовBase64);
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает строку в формат Base64
// Параметры:
//  Текст - Строка - строка, которая подлежит преобразованию.
// 
// Возвращаемое значение:
//  Base64Строка - преобразованная строка.
//
Функция ПреобразоватьСтрокуВBase64(Текст) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8, "");
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Base64Строка = Base64Строка(ДвоичныеДанные);
	Если Лев(Base64Строка, 4) = "77u/" Тогда
		Base64Строка = Прав(Base64Строка, СтрДлина(Base64Строка) - 4);
	КонецЕсли;
	
	Возврат Base64Строка;
	
КонецФункции

// Преобразовывает строку в формате Base64 в обычную строку
// Параметры:
//  СтрокаBase64 - СтрокаBase64 - строка в формате Base64.
// 
// Возвращаемое значение:
//  Строка - получившаяся строка.
//
Функция ПреобразоватьBase64ВСтроку(СтрокаBase64) Экспорт
	
	Данные = Base64Значение(СтрокаBase64);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Данные.Записать(ИмяВременногоФайла);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, "UTF-8");
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

// Возвращает Текст или Неопределено
Функция ТекстВходящегоСообщенияXML(КонвертSOAP) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(КонвертSOAP);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	СписокЭлементовDOM = ДокументDOM.ПолучитьЭлементыПоИмени("sudt", "AppData");
	Если СписокЭлементовDOM.Количество() = 1 Тогда
		ЭлементDOM = СписокЭлементовDOM.Элемент(0);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭлементDOM.ЕстьДочерниеУзлы() И ЭлементDOM.ДочерниеУзлы.Количество() = 1 Тогда
		ЭлементDOM = ЭлементDOM.ДочерниеУзлы.Элемент(0);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементDOM) = Тип("ТекстDOM") Тогда
		
		ТекстСообщенияXMLBase64 = ЭлементDOM.Данные;
		ТекстВходящегоСообщенияXML = ПреобразоватьBase64ВСтроку(ТекстСообщенияXMLBase64);
		
	ИначеЕсли ТипЗнч(ЭлементDOM) = Тип("ЭлементDOM") Тогда
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку(ИнтеграцияГИСМ.ПараметрыФорматированияXML(Ложь));
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ЭлементDOM, ЗаписьXML);
		ТекстВходящегоСообщенияXML = ЗаписьXML.Закрыть();
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекстВходящегоСообщенияXML;
	
КонецФункции

// ВозвращаемоеЗначение = Новый Структура;
// ВозвращаемоеЗначение.Вставить("КодСостояния", HTTPОтвет.КодСостояния);
// ВозвращаемоеЗначение.Вставить("Заголовки",    HTTPОтвет.Заголовки);
// ВозвращаемоеЗначение.Вставить("ТекстОтвета",  HTTPОтвет.ПолучитьТелоКакСтроку());
Функция ОтправитьЗапросДляПередачиДанных(ТекстПодписанногоИсходящегоСообщенияXML) Экспорт
	
	Возврат ИнтеграцияГИСМКлиентСервер.ОтправитьЗапросДляПередачиДанных(ТекстПодписанногоИсходящегоСообщенияXML);
	
КонецФункции

// ВозвращаемоеЗначение = Новый Структура;
// ВозвращаемоеЗначение.Вставить("КодСостояния", HTTPОтвет.КодСостояния);
// ВозвращаемоеЗначение.Вставить("Заголовки",    HTTPОтвет.Заголовки);
// ВозвращаемоеЗначение.Вставить("ТекстОтвета",  HTTPОтвет.ПолучитьТелоКакСтроку());
Функция ОтправитьЗапросДляПолученияДанных(ТекстПодписанногоИсходящегоСообщенияXML) Экспорт
	
	Возврат ИнтеграцияГИСМКлиентСервер.ОтправитьЗапросДляПолученияДанных(ТекстПодписанногоИсходящегоСообщенияXML);
	
КонецФункции

// ВозвращаемоеЗначение = Новый Структура;
// ВозвращаемоеЗначение.Вставить("КодСостояния", HTTPОтвет.КодСостояния);
// ВозвращаемоеЗначение.Вставить("Заголовки",    HTTPОтвет.Заголовки);
// ВозвращаемоеЗначение.Вставить("ТекстОтвета",  HTTPОтвет.ПолучитьТелоКакСтроку());
Функция ОтправитьЗапросДляПолученияРеестров(ТекстПодписанногоИсходящегоСообщенияXML) Экспорт
	
	Возврат ИнтеграцияГИСМКлиентСервер.ОтправитьЗапросДляПолученияРеестров(ТекстПодписанногоИсходящегоСообщенияXML);
	
КонецФункции

Функция ПолучитьЗначениеИзДокументаDOMПоИмениПоля(ДокументDOM, ИмяПоля)
	
	ТекстВыраженияXPath = СтрШаблон(".//*[@id=""content""]/*[@data-key=""%1""]/span", ИмяПоля);
	
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(
		ТекстВыраженияXPath,
		ДокументDOM,
		Новый РазыменовательПространствИменDOM(ДокументDOM));
	УзелDOM = РезультатXPath.ПолучитьСледующий();
	
	Возврат УзелDOM.ТекстовоеСодержимое;
	
КонецФункции

Функция РасшифроватьRFIDTag(RFIDTag)

	ЭлементыTag = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(RFIDTag, ".");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Filter",        ЭлементыTag[0]);
	ВозвращаемоеЗначение.Вставить("GCP",           ЭлементыTag[1]);
	ВозвращаемоеЗначение.Вставить("ItemReference", ЭлементыTag[2]);
	ВозвращаемоеЗначение.Вставить("SerialNumber",  ЭлементыTag[3]);
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

// Возвращает информацию о товаре по номеру КиЗ;
Функция ПолучитьИнформациюГИСМПоНомеруКиЗ(НомерКиЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("TID");
	ВозвращаемоеЗначение.Вставить("GTIN");
	ВозвращаемоеЗначение.Вставить("СерийныйНомер");
	ВозвращаемоеЗначение.Вставить("ОписаниеОшибки");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");
	
	HTTPЗапрос = Новый HTTPЗапрос(СтрШаблон("kc/?kiz=%1", НомерКиЗ));
	
	Если ИнтеграцияГИСМКлиентСервер.РежимРаботыСТестовымКонтуромГИСМ() Тогда
		Соединение = Новый HTTPСоединение("kiz.center-inform.ru", 80,,, ИнтернетПрокси, 10);
	Иначе
		Соединение = Новый HTTPСоединение("chek.markirovka.nalog.ru", 80,,, ИнтернетПрокси, 10);
	КонецЕсли;
	
	HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 200 Тогда
		ТекстHTML = HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		ВозвращаемоеЗначение.ОписаниеОшибки = КодСостояния;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЧтениеHtml = Новый ЧтениеHtml;
	ЧтениеHtml.УстановитьСтроку(ТекстHTML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументHTML.Тело, ЗаписьXML);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ЗаписьXML.Закрыть());
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	TID      = ПолучитьЗначениеИзДокументаDOMПоИмениПоля(ДокументDOM, "TID");
	SGTINtag = ПолучитьЗначениеИзДокументаDOMПоИмениПоля(ДокументDOM, "SGTIN");
	
	RFIDTag = РасшифроватьRFIDTag(SGTINtag);
	
	GTINБезКонтрольногоСимвола = Строка(RFIDTag.GCP) + Прав(Строка(RFIDTag.ItemReference), СтрДлина(Строка(RFIDTag.ItemReference) - 1));
	
	КонтрольныйСимволGTIN = МенеджерОборудованияКлиентСервер.РассчитатьКонтрольныйСимволGTIN(GTINБезКонтрольногоСимвола + "0");
	СерийныйНомер = RFIDTag.SerialNumber;
	
	ВозвращаемоеЗначение.TID           = TID;
	ВозвращаемоеЗначение.GTIN          = GTINБезКонтрольногоСимвола + Строка(КонтрольныйСимволGTIN);
	ВозвращаемоеЗначение.СерийныйНомер = СерийныйНомер;
	
	МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Строка(RFIDTag.GCP) + Прав(Строка(RFIDTag.ItemReference), СтрДлина(Строка(RFIDTag.ItemReference) - 1)) + Строка(КонтрольныйСимволGTIN));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти