#Область СлужебныеПроцедурыИФункции

// Функция возвращает индекс картинки 
// в зависимости от значения поля "ВариантСовместногоПрименения" 
// анализируемой группы
Функция ПолучитьИндексКартинкиДляГруппы(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Индекс = 8
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Индекс = 16
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		Индекс = 0
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		Индекс = 4
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Индекс = 12
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Функция возвращает индекс картинки 
// в зависимости от значения полей "СпособПредоставления" и "ПометкаУдаления"
// анализируемой скидки
Функция ПолучитьИндексКартинкиДляСкидки(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 32;
		Иначе
			Индекс = 28;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Функция создает таблицу значений.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры)
	
	Если Параметры.ПустаяТаблицаСкидокСРасшифровкой = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("КлючСвязи",   Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица.Колонки.Добавить("Сумма",       Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Действует",   Новый ОписаниеТипов("Булево"));
		Таблица.Колонки.Добавить("ЗначениеСкидкиНаценки", Новый ОписаниеТипов("Число"));
		Параметры.ПустаяТаблицаСкидокСРасшифровкой = Таблица;
	Иначе
		Возврат Параметры.ПустаяТаблицаСкидокСРасшифровкой.СкопироватьКолонки();
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьПустуюТаблицуСкидокСРасшифровкой()

// Функция выполняет объединение подчиненных таблиц данных.
//
// Возвращаемое значение:
//	ТаблицаДанных - объединенная таблица данных.
//
Функция ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаДанных.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	//ТаблицаДанных.Колонки.Добавить("ЗначениеСкидкиНаценки",     Новый ОписаниеТипов("Число"));
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа
			
			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
		
		Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.ТаблицаДанных Цикл
			Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
			Иначе
				Если СтрокаТаблицы.Действует Тогда
					НоваяСтрока = ТаблицаДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
					//НоваяСтрока.ЗначениеСкидкиНаценки = ПодчиненнаяСтрока.ЗначениеСкидкиНаценки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ОбъединитьТаблицыДанныхПодчиненныхСтрок()

// Функция создает таблицу значений с расшифровками скидок и добавляет в нее переданные значения.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьРасшифровкуСкидки(СтрокаДерева, Сумма, Параметры)
	
	Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
	
	СтрокаРасшифровки = Расшифровка.Добавить();
	СтрокаРасшифровки.СкидкаНаценка = СтрокаДерева.СкидкаНаценка;
	СтрокаРасшифровки.Сумма         = Сумма;
	СтрокаРасшифровки.ЗначениеСкидкиНаценки = СтрокаДерева.ЗначениеСкидкиНаценки;
	
	Возврат Расшифровка;
	
КонецФункции // ПолучитьРасшифровкуСкидки()

// Функция заполняет ключи связи в табличной части "Товары" документа.
//
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, ИмяТЧ, ИмяТЧ2 = Неопределено) Экспорт
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
			УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТЧ], СтрокаТЧ, "КлючСвязи");
		КонецЕсли;
		Если Индекс < СтрокаТЧ.КлючСвязи Тогда
			Индекс = СтрокаТЧ.КлючСвязи;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ИмяТЧ2 = Неопределено Тогда
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ2] Цикл
			Индекс = Индекс + 1;
			СтрокаТЧ.КлючСвязиДляСкидокНаценок = Индекс;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект) Экспорт
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Функция получает текущую дату время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущуюДатуОбъекта(Объект) Экспорт
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	
	Возврат ТекущаяДата;
	
КонецФункции // ПолучитьТекущуюДатуОбъекта()

// Функция проверяет необходимость пересчета автоматических скидок в зависимости от действия, которое привело к вызову функии.
//
Функция ПроверитьНеобходимостьПересчетаАвтоматическихСкидок(Действие, КолонкаТЧ) Экспорт
	
	Если НЕ Константы.ЕстьАвтоматическиеСкидки.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяПересчетАвтоматическихСкидок = Истина;
	
	// Если изменилась сумма или цена и нет скидко, которые зависят от цены, то пересчитывать
	// автоматические скидки не требуется.
	Если СтрНайти(Действие, "Дата") > 0 Тогда
		МенеджерЗаписи = РегистрыСведений.СлужебныйАвтоматическиеСкидки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ЕстьСкидкиСРасписанием Тогда
			ТребуетсяПересчетАвтоматическихСкидок = Истина;
		Иначе
			ТребуетсяПересчетАвтоматическихСкидок = Ложь;
		КонецЕсли;
	// Если изменился контрагент и нет скидок, которые зависят от получателя-контрагента, то пересчитывать
	// автоматические скидки не требуется.
	ИначеЕсли СтрНайти(Действие, "Контрагент") > 0 Тогда
		МенеджерЗаписи = РегистрыСведений.СлужебныйАвтоматическиеСкидки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ЕстьСкидкиСПолучателямиКонтрагенты Тогда
			ТребуетсяПересчетАвтоматическихСкидок = Истина;
		Иначе
			ТребуетсяПересчетАвтоматическихСкидок = Ложь;
		КонецЕсли;
	// Если изменился склад и нет скидок, которые зависят от получателя-склада, то пересчитывать
	// автоматические скидки не требуется.
	ИначеЕсли СтрНайти(Действие, "Склад") > 0 Тогда
		МенеджерЗаписи = РегистрыСведений.СлужебныйАвтоматическиеСкидки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ЕстьСкидкиСПолучателямиСклады Тогда
			ТребуетсяПересчетАвтоматическихСкидок = Истина;
		Иначе
			ТребуетсяПересчетАвтоматическихСкидок = Ложь;
		КонецЕсли;
	Иначе
		ТребуетсяПересчетАвтоматическихСкидок = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяПересчетАвтоматическихСкидок;
	
КонецФункции

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
Функция СброситьФлагСкидкиРассчитаны(Форма, Действие, КолонокаТЧ, ТЧ = "Запасы", ТЧ2 = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТребуетсяПересчетАвтоматическихСкидок = Истина;
	
	Если Объект[ТЧ].Количество() = 0 И (ТЧ2 = Неопределено ИЛИ Объект[ТЧ2].Количество() = 0) Тогда
		Форма.УстановленСерыйЦвет = Истина;
		Элементы[ТЧ+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьСерый;
		Если ТЧ2 <> Неопределено Тогда
			Элементы[ТЧ2+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьСерый;
		КонецЕсли;
		ТребуетсяПересчетАвтоматическихСкидок = Ложь;
	Иначе
		ТребуетсяПересчетАвтоматическихСкидок = ПроверитьНеобходимостьПересчетаАвтоматическихСкидок(Действие, КолонокаТЧ);
		
		Если ТребуетсяПересчетАвтоматическихСкидок Тогда
			Элементы[ТЧ+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьКрасный;
			
			Если ТЧ2 <> Неопределено Тогда
				Элементы[ТЧ2+"РассчитатьСкидкиНаценки"].Картинка = БиблиотекаКартинок.ОбновитьКрасный;
			КонецЕсли;
			
			Форма.УстановленСерыйЦвет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяПересчетАвтоматическихСкидок И Объект.СкидкиРассчитаны Тогда
		Объект.СкидкиРассчитаны = Ложь;
	КонецЕсли;
	Возврат ТребуетсяПересчетАвтоматическихСкидок;
	
КонецФункции

#КонецОбласти

#Область СлужебныеЗапросы

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаКурсыВалют() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "КурсыВалют");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценки(ТолькоПредварительныйРасчет)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.СкидкаНаценка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&СкидкиНаценки КАК СкидкиНаценки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК Ссылка,
	|	СкидкиНаценки.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.ОбластьПредоставления КАК ОбластьПредоставления,
	|	СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА СкидкиНаценки.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ СкидкиНаценки.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.ВалютаПредоставления КАК ВалютаПредоставления
	|ПОМЕСТИТЬ ВременнаяТаблицаСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблицаСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки КАК СкидкиНаценки
	|		ПО ВременнаяТаблицаСкидки.Ссылка = СкидкиНаценки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаСкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	ВременнаяТаблицаСкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	ВременнаяТаблицаСкидкиНаценки.ОбластьПредоставления КАК ОбластьПредоставления,
	|	ВременнаяТаблицаСкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК ВременнаяТаблицаСкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки КАК СкидкиНаценки
	|		ПО ВременнаяТаблицаСкидкиНаценки.Ссылка = СкидкиНаценки.Ссылка";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 3, 3, "СкидкиНаценки");
	
КонецФункции // ТекстЗапросаТаблицаСкидкиНаценки

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаУсловияПредоставления()
	
	// В запросе выбираются все РАЗЛИЧНЫЕ, т.к. возможна ситуация, когда в разных скидках будут одинаковые условия.
	// В дальнейшем эта таблицеа используется для определения выполненных условий с помощью внутреннего соединения.
	// Дублей в этой таблице быть не должно!
	//
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Условия.УсловиеПредоставления КАК Ссылка,
	|	Условия.УсловиеПредоставления.УсловиеПредоставления КАК УсловиеПредоставления,
	|	Условия.УсловиеПредоставления.ТипСравнения КАК ТипСравнения,
	|	Условия.УсловиеПредоставления.ВалютаОграничения КАК ВалютаОграничения,
	|	Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	Условия.УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	ВЫБОР
	|		КОГДА Условия.УсловиеПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж)
	|				И Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА Условия.УсловиеПредоставления.ЗначениеУсловияОграничения * ЕСТЬNULL(КурсыВалютОграничения.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютОграничения.Кратность, 1))
	|		ИНАЧЕ Условия.УсловиеПредоставления.ЗначениеУсловияОграничения
	|	КОНЕЦ КАК ЗначениеУсловияОграничения,
	|	Условия.УсловиеПредоставления.УчитыватьПродажуТолькоОпределенногоСпискаНоменклатуры КАК ЕстьОтборПоНоменклатуре
	|ПОМЕСТИТЬ УсловияПредоставления
	|ИЗ
	|	ВременнаяТаблица КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК Условия
	|		ПО СкидкиНаценки.Ссылка = Условия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОграничения
	|		ПО (КурсыВалютОграничения.Валюта = Условия.УсловиеПредоставления.ВалютаОграничения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	УсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления,
	|	УсловияПредоставления.ВалютаОграничения КАК ВалютаОграничения,
	|	УсловияПредоставления.ТипСравнения КАК ТипСравнения,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	УсловияПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	УсловияПредоставления.ЕстьОтборПоНоменклатуре
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "УсловияПредоставления");
	
КонецФункции

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеновыеГруппы.Ссылка КАК СкидкаНаценка,
	|	ЦеновыеГруппы.ЗначениеУточнения КАК ЗначениеУточнения,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА ЦеновыеГруппы.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ ЦеновыеГруппы.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.НоменклатураГруппыЦеновыеГруппы КАК ЦеновыеГруппы
	|		ПО СкидкиНаценки.Ссылка = ЦеновыеГруппы.Ссылка
	|			И (ЦеновыеГруппы.Ссылка.ЕстьУточненияПоЦеновымГруппам)
	|ГДЕ
	|	ЦеновыеГруппы.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоЦеновымГруппам)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоЦеновымГруппам");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы значений скидок (наценок) по категориям номенклатуры.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоКатегориямНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатурныеГруппы.Ссылка КАК СкидкаНаценка,
	|	НоменклатурныеГруппы.ЗначениеУточнения КАК ЗначениеУточнения,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА НоменклатурныеГруппы.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ НоменклатурныеГруппы.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.НоменклатураГруппыЦеновыеГруппы КАК НоменклатурныеГруппы
	|		ПО СкидкиНаценки.Ссылка = НоменклатурныеГруппы.Ссылка
	|			И (НоменклатурныеГруппы.Ссылка.ЕстьУточненияПоКатегориям)
	|ГДЕ
	|	НоменклатурныеГруппы.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоКатегориям)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоКатегориямНоменклатуры");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы значений скидок (наценок) по номенклатуре.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоНоменклатуре()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК СкидкаНаценка,
	|	Номенклатура.ЗначениеУточнения КАК ЗначениеУточнения,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА Номенклатура.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ Номенклатура.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	Номенклатура.ЗначениеУточнения.ЭтоГруппа КАК ЭтоГруппа,
	|	Номенклатура.Характеристика
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.НоменклатураГруппыЦеновыеГруппы КАК Номенклатура
	|		ПО СкидкиНаценки.Ссылка = Номенклатура.Ссылка
	|			И (Номенклатура.Ссылка.ЕстьУточненияПоНоменклатуре)
	|ГДЕ
	|	Номенклатура.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоНоменклатуре");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

#КонецОбласти

#Область ЧастиЗапросаПоУсловиямПредоставленияСкидок

// Функция формирует имя параметра по ссылке на условие предоставления.
//
// Возвращаемое значение:
//	Строка - ИмяПараметра
//
Функция ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления)
	
	Возврат СтрЗаменить("П"+СсылкаНаУсловиеПредоставления.УникальныйИдентификатор(), "-", "_");
	
КонецФункции // ПолучитьПараметрЗапросаИзСсылки()

// Функция формирует текст запроса для поиска скидок за разовую продажу по которым выполнено условие применения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке(ПакетЗапросов, СсылкаНаУсловиеПредоставления)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОтборПродажПоНоменклатуреГруппы
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка = &ИмяПараметра
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика
	|ПОМЕСТИТЬ ОтборПродажПоНоменклатуре
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка = &ИмяПараметра
	|	И НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборПродажПоНоменклатуреСХарактеристиками
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка = &ИмяПараметра
	|	И НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК Товары
	|		ПО (УсловияПредоставления.Ссылка = &ИмяПараметра)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА Товары.Сумма >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА Товары.Сумма > УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА Товары.Сумма <= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ Товары.Сумма < УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА Товары.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА Товары.Количество > УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА Товары.Количество <= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ Товары.Количество < УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И (НЕ УсловияПредоставления.ЕстьОтборПоНоменклатуре
	|			ИЛИ Товары.Номенклатура В ИЕРАРХИИ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОтборПродажПоНоменклатуреГруппы.Номенклатура
	|				ИЗ
	|					ОтборПродажПоНоменклатуреГруппы КАК ОтборПродажПоНоменклатуреГруппы)
	|			ИЛИ Товары.Номенклатура В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОтборПродажПоНоменклатуре.Номенклатура
	|				ИЗ
	|					ОтборПродажПоНоменклатуре КАК ОтборПродажПоНоменклатуре)
	|			ИЛИ (Товары.Номенклатура, Товары.Характеристика) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОтборПродажПоНоменклатуреСХарактеристиками.Номенклатура,
	|					ОтборПродажПоНоменклатуреСХарактеристиками.Характеристика
	|				ИЗ
	|					ОтборПродажПоНоменклатуреСХарактеристиками КАК ОтборПродажПоНоменклатуреСХарактеристиками))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборПродажПоНоменклатуре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборПродажПоНоменклатуреГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборПродажПоНоменклатуреСХарактеристиками";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		7,
		4,
		"СкидкаЗаРазовуюПродажуСУсловиемПоСтроке" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке

// Функция формирует текст запроса для таблицы рассчитанных скидок за разовую продажу.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОтборПродажПоНоменклатуреГруппы
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка = &ИмяПараметра
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика
	|ПОМЕСТИТЬ ОтборПродажПоНоменклатуре
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка = &ИмяПараметра
	|	И НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборПродажПоНоменклатуреСХарактеристиками
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка = &ИмяПараметра
	|	И НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ТипСравнения,
	|	УсловияПредоставления.ЗначениеУсловияОграничения,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ИтогиПоДокументу
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК Товары
	|		ПО (УсловияПредоставления.Ссылка = &ИмяПараметра)
	|			И (НЕ УсловияПредоставления.ЕстьОтборПоНоменклатуре
	|				ИЛИ Товары.Номенклатура В ИЕРАРХИИ
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОтборПродажПоНоменклатуреГруппы.Номенклатура
	|					ИЗ
	|						ОтборПродажПоНоменклатуреГруппы КАК ОтборПродажПоНоменклатуреГруппы)
	|				ИЛИ Товары.Номенклатура В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОтборПродажПоНоменклатуре.Номенклатура
	|					ИЗ
	|						ОтборПродажПоНоменклатуре КАК ОтборПродажПоНоменклатуре)
	|				ИЛИ (Товары.Номенклатура, Товары.Характеристика) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОтборПродажПоНоменклатуреСХарактеристиками.Номенклатура,
	|						ОтборПродажПоНоменклатуреСХарактеристиками.Характеристика
	|					ИЗ
	|						ОтборПродажПоНоменклатуреСХарактеристиками КАК ОтборПродажПоНоменклатуреСХарактеристиками))
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.Ссылка,
	|	УсловияПредоставления.ЗначениеУсловияОграничения,
	|	УсловияПредоставления.ТипСравнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИтогиПоДокументу.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи
	|ИЗ
	|	ИтогиПоДокументу КАК ИтогиПоДокументу
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ИтогиПоДокументу.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|				ТОГДА ВЫБОР
	|						КОГДА ИтогиПоДокументу.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА ИтогиПоДокументу.Сумма >= ИтогиПоДокументу.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоДокументу.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА ИтогиПоДокументу.Сумма > ИтогиПоДокументу.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоДокументу.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА ИтогиПоДокументу.Сумма <= ИтогиПоДокументу.ЗначениеУсловияОграничения
	|						ИНАЧЕ ИтогиПоДокументу.Сумма < ИтогиПоДокументу.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			КОГДА ИтогиПоДокументу.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|				ТОГДА ВЫБОР
	|						КОГДА ИтогиПоДокументу.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА ИтогиПоДокументу.Количество >= ИтогиПоДокументу.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоДокументу.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА ИтогиПоДокументу.Количество > ИтогиПоДокументу.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоДокументу.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА ИтогиПоДокументу.Количество <= ИтогиПоДокументу.ЗначениеУсловияОграничения
	|						ИНАЧЕ ИтогиПоДокументу.Количество < ИтогиПоДокументу.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтогиПоДокументу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборПродажПоНоменклатуреГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборПродажПоНоменклатуре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборПродажПоНоменклатуреСХарактеристиками";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		9,
		5,
		"СкидкаЗаРазовуюПродажуСУсловиемПоДокументу" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу

// Функция формирует текст запроса для таблицы товаров по сегментам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаТовары() 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.Количество * Товары.Цена КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.КлючСвязи,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ВременнаяТаблицаТовары.ЕдиницаИзмерения,
	|	ВременнаяТаблицаТовары.Количество,
	|	ВременнаяТаблицаТовары.ЦенаЗаУпаковку,
	|	ВременнаяТаблицаТовары.Сумма,
	|	ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВременнаяТаблицаТовары.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "Товары");
	
КонецФункции // ТекстЗапросаТаблицаТовары()

// Функция формирует текст запроса для таблицы рассчитанных скидок за разовую продажу.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаКомплектПокупки(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыКоличество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Номенклатура,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Характеристика,
	|	СУММА(УсловияПредоставленияСкидокНаценокКомплектПокупки.Количество) КАК Количество
	|ПОМЕСТИТЬ КомплектПокупки
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.КомплектПокупки КАК УсловияПредоставленияСкидокНаценокКомплектПокупки
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Ссылка = &ИмяПараметра
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Номенклатура,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Характеристика
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектПокупки.Номенклатура,
	|	КомплектПокупки.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыКоличество.Количество, 0) = 0
	|				ИЛИ ЕСТЬNULL(КомплектПокупки.Количество, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) = (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 3)))
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) * КомплектПокупки.Количество - ТоварыКоличество.Количество >= 0
	|							ТОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) - 1
	|						ИНАЧЕ ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоКомплектов
	|ПОМЕСТИТЬ ТаблицаКомплектов
	|ИЗ
	|	КомплектПокупки КАК КомплектПокупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКоличество КАК ТоварыКоличество
	|		ПО КомплектПокупки.Номенклатура = ТоварыКоличество.Номенклатура
	|			И КомплектПокупки.Характеристика = ТоварыКоличество.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаКомплектов.КоличествоКомплектов) КАК КоличествоКомплектов,
	|	-1 КАК КлючСвязи,
	|	&ИмяПараметра КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаМинимальногоКоличестваКомплектов
	|ИЗ
	|	ТаблицаКомплектов КАК ТаблицаКомплектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМинимальногоКоличестваКомплектов.КоличествоКомплектов КАК КоличествоКомплектов,
	|	ТаблицаМинимальногоКоличестваКомплектов.КлючСвязи КАК КлючСвязи,
	|	ТаблицаМинимальногоКоличестваКомплектов.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаМинимальногоКоличестваКомплектов КАК ТаблицаМинимальногоКоличестваКомплектов
	|ГДЕ
	|	ТаблицаМинимальногоКоличестваКомплектов.КоличествоКомплектов >= 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыКоличество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КомплектПокупки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКомплектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаМинимальногоКоличестваКомплектов";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		9,
		5,
		"СкидкаЗаЗаКомплектПокупки" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаКомплектПокупки

#КонецОбласти

#Область ФункцииПакетаЗапросов

// Функция создает пакет запросов.
//
// Возвращаемое значение:
//	Структура - пакет запросов.
//
Функция ПакетЗапросовСоздать()
	
	ПакетЗапросов = Новый Структура;
	ПакетЗапросов.Вставить("ОбщееКоличествоТаблиц", 0);
	ПакетЗапросов.Вставить("СтруктураИмяЗапросаИНомерТаблицыРезультата", Новый Структура);
	ПакетЗапросов.Вставить("Запрос", Новый Запрос);
	ПакетЗапросов.Вставить("РезультатЗапроса", Неопределено);
	ПакетЗапросов.Вставить("МассивИменЗапросов", Новый Массив);
	
	Возврат ПакетЗапросов;
	
КонецФункции // ПакетЗапросовСоздать()

// ОбъединитьТаблицыДанныхПодчиненныхСтрок добавляет запрос в пакет запросов.
//
// Возвращаемое значение:
//	Нет
//
Процедура ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ПакетЗапросов, Добавлять = Ложь)
	
	// Проверка на дубли запросов.
	Если ПакетЗапросов.МассивИменЗапросов.Найти(ПараметрыЗапроса.ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.ОбщееКоличествоТаблиц = ПакетЗапросов.ОбщееКоличествоТаблиц + ПараметрыЗапроса.КоличествоТаблиц;
	НомерТаблицы = ПакетЗапросов.ОбщееКоличествоТаблиц - ПараметрыЗапроса.КоличествоТаблиц + ПараметрыЗапроса.НомерТаблицыРезультата;
	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст +
	"// Номер таблицы результата: "+НомерТаблицы + "
	|";
	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст + ПараметрыЗапроса.ТекстЗапроса;
	
	Если Добавлять Тогда
		
		ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата.Вставить(ПараметрыЗапроса.ИмяТаблицы, НомерТаблицы);
		
	КонецЕсли;
	
	ПакетЗапросов.МассивИменЗапросов.Добавить(ПараметрыЗапроса.ИмяТаблицы);
	
КонецПроцедуры // ПакетЗапросовВставитьЗапросВПакет()

// Функция выполняет пакет запросов.
//
// Возвращаемое значение:
//	Булево - Истина, если запрос выполнен успешно.
//
Функция ПакетЗапросовВыполнить(ПакетЗапросов)
	
	Если ЗначениеЗаполнено(ПакетЗапросов.Запрос.Текст) Тогда
		ПакетЗапросов.РезультатЗапроса = ПакетЗапросов.Запрос.ВыполнитьПакет();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПакетЗапросовВыполнить()

// Функция получает результат запроса из пакета запросов по имени запроса.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы(ИмяЗапроса, ПакетЗапросов)
	
	Возврат ПакетЗапросов.РезультатЗапроса[ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата[ИмяЗапроса] - 1];
	
КонецФункции // ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы()

// Функция объединяет все результаты запросов пакета в одну таблицу.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовОбъединитьРезультаты(ПакетЗапросов)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ТЗ.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоКомплектов", Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючИЗначение Из ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата Цикл
		
		Выборка = ПакетЗапросов.РезультатЗапроса[КлючИЗначение.Значение-1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции // ПакетЗапросовОбъединитьРезультаты()

#КонецОбласти

#Область ФункцииРасчетаСкидокНаценокПоДеревуСкидокНаценок

Процедура ОбработатьДеревоСкидок(ДеревоСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ОбработатьДеревоСкидок(СтрокаДерева);
			
		Иначе
			
			КоличествоСтрок = СтрокаДерева.Строки.Количество();
			Если КоличествоСтрок > 1 Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка генерации дерева скидок'");
			КонецЕсли;
			Если КоличествоСтрок > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Строки[0]);
				//
				СтрокаДерева.Строки.Удалить(СтрокаДерева.Строки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает дерево применяемых скидок.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево применяемых скидок.
//
Функция ПолучитьДеревоСкидок(МассивСкидок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка                       КАК СкидкаНаценка,
	|	СкидкиНаценки.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.ВариантОграниченияПоНоменклатуре КАК ВариантОграниченияПоНоменклатуре,
	|	СкидкиНаценки.ЕстьУточненияПоНоменклатуре КАК ЕстьУточненияПоНоменклатуре,
	|	СкидкиНаценки.ЕстьУточненияПоКатегориям КАК ЕстьУточненияПоКатегориям,
	|	СкидкиНаценки.ЕстьУточненияПоЦеновымГруппам КАК ЕстьУточненияПоЦеновымГруппам,
	|	СкидкиНаценки.ЕстьГруппыВУточненииПоНоменклатуре КАК ЕстьГруппыВУточненииПоНоменклатуре,
	
	// Необходимо для отображения иконок
	|	СкидкиНаценки.ПометкаУдаления              КАК ПометкаУдаления,
	|	СкидкиНаценки.СпособПредоставления         КАК СпособПредоставления,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки        КАК ЗначениеСкидкиНаценки,
	|	
	|	СкидкиНаценки.ЭтоГруппа                    КАК ЭтоГруппа,
	|	
	|	СкидкиНаценки.УсловияПредоставления.(
	|		УсловиеПредоставления                    КАК УсловиеПредоставления,
	|		УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения
	|	) КАК УсловияПредоставления
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивСкидок)
	|	И СкидкиНаценки.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиНаценки.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	СкидкаНаценка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	Запрос.УстановитьПараметр("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ДеревоСкидок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ОбработатьДеревоСкидок(ДеревоСкидок);
	
	Возврат ДеревоСкидок;
	
КонецФункции // ПолучитьДеревоСкидок()

// Процедура выполняет расчет скидки по группе совместного применения.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры, ВерхнийУровень = Ложь, ИтоговаяТаблицаДанных = Неопределено)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	
	Сложение = Ложь;
	Если ВерхнийУровень Тогда
		ВариантСовместногоПрименения = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить();
	Иначе 
		// Такой вариант оставлен для случая, если при внедрении потребуется доработать механизм так, чтобы
		// вариант совместного применения можно было указывать в группах.
		ВариантСовместногоПрименения = СтрокаДерева.ВариантСовместногоПрименения;
	КонецЕсли;
	
	Если ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, РеквизитДопУпорядочивания");
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, Сумма Убыв, РеквизитДопУпорядочивания");
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, Сумма Возр, РеквизитДопУпорядочивания");
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение
		ИЛИ ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		ТаблицаДанных.Сортировать("КлючСвязи");
		Сложение = Истина;
	Иначе
		ТаблицаДанных.Сортировать("КлючСвязи");
		Сложение = Истина;
	КонецЕсли;
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = -1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.Сумма = СтрокаТаблицы.Сумма;
			НоваяСтрокаТЗ.Действует = Истина;
			//НоваяСтрокаТЗ.ЗначениеСкидкиНаценки = СтрокаТаблицы.ЗначениеСкидкиНаценки;
			
			// Расшифровка скидки.
			НоваяСтрокаТЗ.Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		Иначе
			
			Если Сложение Тогда
				НоваяСтрокаТЗ.Сумма = НоваяСтрокаТЗ.Сумма + СтрокаТаблицы.Сумма;
				Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВерхнийУровень Тогда
		ИтоговаяТаблицаДанных = ТЗ;
	Иначе
		СтрокаДерева.ТаблицаДанных = ТЗ;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПрименения()

// Процедура выполняет расчет скидки дерева скидок.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидку(СтрокаДерева, Параметры)
	
	Если НЕ СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСкидки = Параметры.СкидкиНаценки.Найти(СтрокаДерева.СкидкаНаценка, "СкидкаНаценка");
	
	Товары = СтрокаДерева.ТаблицаТоваров;
	
	СкидкиНаценкиПоЦеновымГруппам = Параметры.СкидкиНаценкиПоЦеновымГруппам.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	СкидкиНаценкиПоКатегориямНоменклатуры = Параметры.СкидкиНаценкиПоКатегориямНоменклатуры.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	СкидкиНаценкиПоНоменклатуре = Параметры.СкидкиНаценкиПоНоменклатуре.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		ЭтоУмножение = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить() = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
	Иначе
		ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
	КонецЕсли;
	
	ТаблицаДанных = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	ДействуетБезусловно = СтрокаДерева.ПараметрыУсловий.УсловияВыполнены И СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Количество() = 0;
	
	Если ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если НЕ ДействуетБезусловно Тогда
				Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
					Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
						НоваяСтрока.Действует = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Сумма = Товар.Сумма;

			ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
			
			// Поиск значения скидки (наценки) для ценовой группы
			Если СтрокаДерева.ЕстьУточненияПоЦеновымГруппам Тогда
				Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
					Если СтрокаТЧ.ЗначениеУточнения = Товар.ЦеноваяГруппа Тогда
						ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			// Поиск значения скидки (наценки) для категории номенклатуры
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоКатегориям Тогда
				Для Каждого СтрокаТЧ Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
					Если СтрокаТЧ.ЗначениеУточнения = Товар.КатегорияНоменклатуры Тогда
						ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			// Поиск значения скидки (наценки) для номенклатуры
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоНоменклатуре Тогда
				Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
					Если Товар.Характеристика.Пустая() Тогда
						Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
							Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ЕстьЗначениеДляХарактеристики = Ложь;
						ЗначениеДляХарактеристики = 0;
						Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
							Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								ЕстьЗначениеДляХарактеристики = Истина;
								ЗначениеДляХарактеристики = ЗначениеСкидкиНаценки;
								Прервать;
							ИначеЕсли СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							КонецЕсли;
						КонецЦикла;
						
						Если ЕстьЗначениеДляХарактеристики Тогда
							ЗначениеСкидкиНаценки = ЗначениеДляХарактеристики;
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Поиск с учётом иерархии.
					ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархии(СкидкиНаценкиПоНоменклатуре, Товар.Номенклатура, Товар.Характеристика);
					Если ТекЗначениеУточнения <> Неопределено Тогда
						ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		    
			СуммаСкидки = Окр((ЗначениеСкидкиНаценки / 100) * Сумма, 2);
			
			НоваяСтрока.Сумма = СуммаСкидки;
			
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		
		СуммаСкидкиКРаспределению = ПараметрыСкидки.ЗначениеСкидкиНаценки;
		
		Если ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
			
			// Расчет общей суммы товаров сегмента.
			ОбщаяСуммаТоваровСегмента = 0;
			Для Каждого Товар Из Товары Цикл
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + Товар.Сумма;
			КонецЦикла;
			
			СтрокаСкидкиДляРаспределении = Неопределено;
			МаксимальнаяСуммаВРаспределении = 0;
			// Распределение скидки на товары сегмента.
			Для Каждого Товар Из Товары Цикл
				
				НоваяСтрока           = ТаблицаДанных.Добавить();
				НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
				НоваяСтрока.Действует = Истина;
				
				Сумма = Товар.Сумма;
				
				Если Сумма > МаксимальнаяСуммаВРаспределении Тогда
					МаксимальнаяСуммаВРаспределении = Сумма;
					СтрокаСкидкиДляРаспределении = НоваяСтрока;
				КонецЕсли;
				
				Если ОбщаяСуммаТоваровСегмента <> 0 Тогда
					НоваяСтрока.Сумма = Окр(Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваровСегмента), 2);
				Иначе
					НоваяСтрока.Сумма = 0;
				КонецЕсли;
				
				СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма;
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента - Сумма;

				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
				
			КонецЦикла;
			
			Если СуммаСкидкиКРаспределению <> 0 И СтрокаСкидкиДляРаспределении <> Неопределено Тогда
				СтрокаСкидкиДляРаспределении.Сумма = СтрокаСкидкиДляРаспределении.Сумма + СуммаСкидкиКРаспределению;
			КонецЕсли;
			
		ИначеЕсли ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
			
			ЕстьУсловияПоСтроке = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0;
			
			Для Каждого Товар Из Товары Цикл
				
				ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
				
				// Поиск значения скидки (наценки) для ценовой группы
				Если СтрокаДерева.ЕстьУточненияПоЦеновымГруппам Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.ЦеноваяГруппа Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				// Поиск значения скидки (наценки) для номенклатурной группы
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоКатегориям Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.КатегорияНоменклатуры Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						КонецЕсли;
					КонецЦикла;
				// Поиск значения скидки (наценки) для номенклатуры
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоНоменклатуре Тогда
					Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
						Если Товар.Характеристика.Пустая() Тогда
							Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
								Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							ЕстьЗначениеДляХарактеристики = Ложь;
							ЗначениеДляХарактеристики = 0;
							Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
								Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
									ЕстьЗначениеДляХарактеристики = Истина;
									ЗначениеДляХарактеристики = ЗначениеСкидкиНаценки;
									Прервать;
								ИначеЕсли СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								КонецЕсли;
							КонецЦикла;
							
							Если ЕстьЗначениеДляХарактеристики Тогда
								ЗначениеСкидкиНаценки = ЗначениеДляХарактеристики;
							КонецЕсли;
						КонецЕсли;
					Иначе
						// Поиск с учётом иерархии.
						ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархии(СкидкиНаценкиПоНоменклатуре, Товар.Номенклатура, Товар.Характеристика);
						Если ТекЗначениеУточнения <> Неопределено Тогда
							ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			    				
				НоваяСтрока = ТаблицаДанных.Добавить();
				
				Если НЕ ЕстьУсловияПоСтроке ИЛИ ДействуетБезусловно ИЛИ СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) <> Неопределено Тогда
					НоваяСтрока.Действует = Истина;
				КонецЕсли;
				
				НоваяСтрока.КлючСвязи   = Товар.КлючСвязи;
				НоваяСтрока.Сумма       = ЗначениеСкидкиНаценки;
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева.ТаблицаДанных   = ТаблицаДанных;
	
	
КонецПроцедуры // РассчитатьСкидку()

// Функция возвращает значение (уточнение) автоматической скидки (наценки) для указанной позиции номенклатуры с учётом характеристики и иерархии
//
Функция ПолучитьЗначениеУточненияСУчетомИерархии(СкидкиНаценкиПоНоменклатуре, Номенклатура, Характеристика)
	
	// Пример. В ТЧ выбран Товар0, в уточнении выбраны Товар1 (10%), Товар2 (20%) и Группа1 (15%).
	// Товар0 может быть равен Товар1 или Товар2 или быть в иерархии Группы1.
	
	ШаблонТекстаЗапроса = "ВЫБРАТЬ
	                      |	&ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Ссылка = &Ссылка
	                      |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ЗначениеУточнения)";

	СчЗапросов = 0;
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	ЕстьЗначениеБезХарактеристики = Ложь;
	ЗначениеБезХарактеристики = 0;
	Для Каждого ТекУточнение Из СкидкиНаценкиПоНоменклатуре Цикл
		Если Не ТекУточнение.ЭтоГруппа И Характеристика.Пустая() Тогда
			Если ТекУточнение.ЗначениеУточнения = Номенклатура И ТекУточнение.Характеристика.Пустая() Тогда
				Возврат ТекУточнение.ЗначениеСкидкиНаценки;
			КонецЕсли;
		ИначеЕсли Не ТекУточнение.ЭтоГруппа Тогда
			Если ТекУточнение.ЗначениеУточнения = Номенклатура И ТекУточнение.Характеристика = Характеристика Тогда
				Возврат ТекУточнение.ЗначениеСкидкиНаценки;
			ИначеЕсли ТекУточнение.ЗначениеУточнения = Номенклатура И ТекУточнение.Характеристика.Пустая() Тогда
				ЕстьЗначениеБезХарактеристики = Истина;
				ЗначениеБезХарактеристики = ТекУточнение.ЗначениеСкидкиНаценки;
			КонецЕсли;
		ИначеЕсли ТекУточнение.ЭтоГруппа Тогда
			СчЗапросов = СчЗапросов + 1;
			
			ОбработанныйТекстШаблона = СтрЗаменить(ШаблонТекстаЗапроса, "&ЗначениеУточнения", "&ЗначениеУточнения"+СчЗапросов);
			ОбработанныйТекстШаблона = СтрЗаменить(ОбработанныйТекстШаблона, "&ЗначениеСкидкиНаценки", "&ЗначениеСкидкиНаценки"+СчЗапросов);
			
			Запрос.УстановитьПараметр("ЗначениеУточнения"+СчЗапросов, ТекУточнение.ЗначениеУточнения);
			Запрос.УстановитьПараметр("ЗначениеСкидкиНаценки"+СчЗапросов, ТекУточнение.ЗначениеСкидкиНаценки);
			
			Запрос.Текст = Запрос.Текст + ОбработанныйТекстШаблона+Символы.ПС+"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗначениеБезХарактеристики Тогда
		Возврат ЗначениеБезХарактеристики;
	КонецЕсли;
	
	Если СчЗапросов > 0 Тогда
	
		МРезультатовУточнений = Запрос.ВыполнитьПакет();
		
		СчЗапросов = 0;
		Пока СчЗапросов < МРезультатовУточнений.Количество() Цикл
			Если НЕ МРезультатовУточнений[СчЗапросов].Пустой() Тогда
				Возврат МРезультатовУточнений[СчЗапросов].Выгрузить()[0].ЗначениеСкидкиНаценки;
			КонецЕсли;
			СчЗапросов = СчЗапросов + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура рекурсивно обходит дерево и производит расчет
// скидок снизу-вверх: от подчиненного элемента дерева к родителю.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			// это самый верхний уровень
			КЧ = Новый КвалификаторыЧисла(15,2);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧисло = Новый ОписаниеТипов(Массив, , ,КЧ);
			СтрокаДерева.ТаблицаТоваров = Параметры.Товары.Скопировать();
			//СтрокаДерева.ТаблицаТоваров.Колонки.Добавить("СуммаСкидки", ОписаниеТиповЧисло);
		Иначе
			СтрокаДерева.ТаблицаТоваров = СтрокаДерева.Родитель.ТаблицаТоваров.Скопировать();
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РассчитатьСкидкиРекурсивно(СтрокаДерева, Параметры);
			
			// Скидки по подчиненным элементам рассчитаны.
			// Рассчитываем скидки по группе совместного применения (родителю).
			РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры);
			
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение групп также предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из СтрокаДерева.Родитель.ТаблицаТоваров Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли СтрокаДерева.Родитель = Неопределено
				И Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить() = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из Параметры.Товары Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			РассчитатьСкидку(СтрокаДерева, Параметры);
			
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение
				И СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из СтрокаДерева.Родитель.ТаблицаТоваров Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли СтрокаДерева.Родитель = Неопределено
				И Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить() = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение
				И СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из Параметры.Товары Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСкидкиРекурсивно()

// Функция производит полный расчет скидок в дереве.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с рассчитанными скидками.
//
Функция СтруктураРассчитанныхСкидок(ДеревоСкидок, Параметры)
	
	ВозвращаемыеДанные = Новый Структура;
	
	КЧ = Новый КвалификаторыЧисла(15,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(Массив, , ,КЧ);
	Параметры.Товары.Колонки.Добавить("СуммаСкидки", ОписаниеТиповЧисло);
	РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры);
	
	// На верхнем уровне...
	ТаблицаДанных = Неопределено;
	РассчитатьСкидкиПоГруппеСовместногоПрименения(ДеревоСкидок, Параметры, Истина, ТаблицаДанных);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КлючСвязи",					Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СкидкаНаценка",				Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	ТЗ.Колонки.Добавить("Сумма",						Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ОграниченаМинимальнойЦеной",	Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ЗначениеСкидкиНаценки",						Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДанных Цикл
		Если НЕ СтрокаТаблицы.КлючСвязи = 0  Тогда
			Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл
				НоваяСтрока								= ТЗ.Добавить();
				НоваяСтрока.КлючСвязи					= СтрокаТаблицы.КлючСвязи;
				НоваяСтрока.СкидкаНаценка				= СтрокаСкидкиНаценки.СкидкаНаценка;
				НоваяСтрока.Сумма						= СтрокаСкидкиНаценки.Сумма;
				НоваяСтрока.ОграниченаМинимальнойЦеной	= СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной;
				НоваяСтрока.ЗначениеСкидкиНаценки		= СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СкидкаНаценка", СтрокаСкидкиНаценки.СкидкаНаценка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТЗ.Свернуть("КлючСвязи, СкидкаНаценка, ОграниченаМинимальнойЦеной, ЗначениеСкидкиНаценки", "Сумма");
	
	ВозвращаемыеДанные.Вставить("ДеревоСкидок", 		ДеревоСкидок);
	ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПроверкиУсловийСкидокНаценок

// Функция выполняет проверку выполнения условий скидок.
//
Функция ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия)
	
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияВыполнены", Истина);
	СтрокаДерева.ПараметрыУсловий.Вставить("КодыСтрок",        Новый Массив);
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияПоСтроке",  Новый Структура);
	СтрокаДерева.ПараметрыУсловий.Вставить("ТаблицаУсловий",   Новый ТаблицаЗначений);
	
	// Служебная таблица для временного хранения результатов проверки условий предоставления
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("УсловиеПредоставления", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ОбластьОграничения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбластейОграниченияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("Выполнено");
	
	// Таблица применяется для проверки выполнения условий по строке.
	// Если у скидки существуют условия по строке то для этих условий в таблице будет создана колонка
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("ТаблицаПроверкиУсловий", Новый ТаблицаЗначений);
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить("КлючСвязи");
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Индексы.Добавить("КлючСвязи");
	
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("СоответствиеУсловийКолонкамТаблицыПроверкиУсловий", Новый Соответствие);
	
	// Служебные параметры
	ИспользуетсяТаблицаПроверкиУсловий      = Ложь;
	ЭтоПервоеУсловиеТаблицыПроверкиУсловий  = Истина;
	КоличествоКолонокТаблицыПроверкиУсловий = 0;
	
	// Обходим все условия одной скидки.
	Для Каждого Условие Из СтрокаДерева.УсловияПредоставления Цикл
		
		СтрокаТаблицаУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Добавить();
		СтрокаТаблицаУсловий.УсловиеПредоставления = Условие.УсловиеПредоставления;
		СтрокаТаблицаУсловий.ОбластьОграничения    = Условие.ОбластьОграничения;
		
		НайденныеСтроки = ВыполненныеУсловия.НайтиСтроки(Новый Структура("Ссылка", Условие.УсловиеПредоставления));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Условие не выполнено.
			СтрокаТаблицаУсловий.Выполнено = Ложь;
			
			СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;
			
		ИначеЕсли НайденныеСтроки.Количество() = 1 И НайденныеСтроки[0].КлючСвязи = -1 Тогда
			
			СтрокаТаблицаУсловий.Выполнено = Истина;
			// Условие выполнено. Условие не зависит от конкретных строк.
			
		Иначе
			
			СтрокаТаблицаУсловий.Выполнено = Истина;
			// Условие выполнено. Найдено несколько строк, прошедших проверку условий.
			
			КоличествоКолонокТаблицыПроверкиУсловий = КоличествоКолонокТаблицыПроверкиУсловий + 1;
			ЗаголовокКолонки = "Условие" + КоличествоКолонокТаблицыПроверкиУсловий;
			
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Вставить(Условие.УсловиеПредоставления, ЗаголовокКолонки);
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить(ЗаголовокКолонки, Новый ОписаниеТипов("Булево"));
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ИспользуетсяТаблицаПроверкиУсловий = Истина;
				
				НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(НайденнаяСтрока.КлючСвязи, "КлючСвязи");
				Если НайденныеСтрокиТаблицыПроверкиУсловий <> Неопределено Тогда
					НайденныеСтрокиТаблицыПроверкиУсловий[ЗаголовокКолонки] = Истина;
				Иначе
					Если ЭтоПервоеУсловиеТаблицыПроверкиУсловий Тогда
						НоваяСтрока1 = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Добавить();
						НоваяСтрока1.КлючСвязи = НайденнаяСтрока.КлючСвязи;
						НоваяСтрока1[ЗаголовокКолонки] = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИспользуетсяТаблицаПроверкиУсловий Тогда
			ЭтоПервоеУсловиеТаблицыПроверкиУсловий = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним коды строк...
	Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
		
		Если СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Количество() > 0 Тогда
			
			Отбор = Новый Структура;
			Для Каждого КлючИЗначение Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий Цикл
				Отбор.Вставить(КлючИЗначение.Значение, Истина);
			КонецЦикла;
			
			НайденныеСтроки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаДерева.ПараметрыУсловий.КодыСтрок.Добавить(СтрокаТЗ.КлючСвязи);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ПроверитьУсловия()

// Функция выполняет заполнение служебных реквизитов у строк дерева скидок.
//
Процедура ПроверитьУсловияРекурсивно(ДеревоСкидок, ВыполненныеУсловия)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПроверитьУсловияРекурсивно(СтрокаДерева, ВыполненныеУсловия);
			
		Иначе
			
			ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьУсловияРекурсивно()

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

// Функция выполняет расчет скидок (наценок) по переданным параметрам.
//
Функция РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры) Экспорт
	
	ПервыйПакетЗапросов = ПакетЗапросовСоздать();
	ВторойПакетЗапросов = ПакетЗапросовСоздать();
	
	Для Каждого ПараметрПакета Из ПараметрыРасчета Цикл
		ПервыйПакетЗапросов.Запрос.УстановитьПараметр(ПараметрПакета.Ключ, ПараметрПакета.Значение);
		ВторойПакетЗапросов.Запрос.УстановитьПараметр(ПараметрПакета.Ключ, ПараметрПакета.Значение);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПервыйПакетЗапросов.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ВторойПакетЗапросов.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Подготовка и выполнение первого пакета.
	ПакетЗапросовВставитьЗапросВПакет(СкидкиНаценкиСерверПереопределяемый.ТекстЗапросаТаблицаКурсыВалют(),				ПервыйПакетЗапросов);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценки(ВходныеПараметры.ТолькоПредварительныйРасчет), 	ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаУсловияПредоставления(),         								ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам(), 								ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоКатегориямНоменклатуры(), 						ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоНоменклатуре(), 						ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаТовары(),											ПервыйПакетЗапросов, Истина);
	
	ПакетЗапросовВыполнить(ПервыйПакетЗапросов);
	
	// Подготовка и выполнение второго пакета.
	// Во втором пакете рассчитываются значения условий предоставления.
	// Формируется отдельный запрос пакета для каждого условия предоставления.
	ВыборкаУсловияПредоставления = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("УсловияПредоставления", ПервыйПакетЗапросов).Выбрать();
	Пока ВыборкаУсловияПредоставления.Следующий() Цикл
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			Если ВыборкаУсловияПредоставления.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			Иначе
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаКомплектПокупки(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ПакетЗапросовВыполнить(ВторойПакетЗапросов);
	
	
	ТаблицаВыполненныеУсловия = ПакетЗапросовОбъединитьРезультаты(ВторойПакетЗапросов);
	
	ТаблицаСкидкиНаценки      = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценки", ПервыйПакетЗапросов).Выгрузить();
	
	ДеревоСкидок = ПолучитьДеревоСкидок(ТаблицаСкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка"));
	ДеревоСкидок.Колонки.Добавить("ТаблицаДанных"    , Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ТаблицаТоваров"	 , Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ПараметрыУсловий" , Новый ОписаниеТипов("Структура"));
	
	ПроверитьУсловияРекурсивно(ДеревоСкидок, ТаблицаВыполненныеУсловия);
	ДеревоСкидок.Колонки.Удалить(ДеревоСкидок.Колонки.УсловияПредоставления);
	
	Если ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
		ТЗ.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
		
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("ДеревоСкидок", ДеревоСкидок);
		ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
		
		Возврат ВозвращаемыеДанные;
		
	КонецЕсли;
	
	
	// Подготовка параметров для расчета скидок.
	Параметры = Новый Структура;
	// Уточнения размера скидки по ценовой группе, номенклатурной группе или номенклатуре. По номенклатуре - с учётом иерархии.
	Параметры.Вставить("СкидкиНаценкиПоЦеновымГруппам", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоЦеновымГруппам", ПервыйПакетЗапросов).Выгрузить());
	Параметры.Вставить("СкидкиНаценкиПоКатегориямНоменклатуры", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоКатегориямНоменклатуры", ПервыйПакетЗапросов).Выгрузить());
	Параметры.Вставить("СкидкиНаценкиПоНоменклатуре", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоНоменклатуре", ПервыйПакетЗапросов).Выгрузить());
	Параметры.Вставить("Товары"            , ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("Товары"            , ПервыйПакетЗапросов).Выгрузить());
	Параметры.Вставить("СкидкиНаценки"                , ТаблицаСкидкиНаценки);
	
	Расшифровка = Новый ТаблицаЗначений;
	Расшифровка.Колонки.Добавить("СкидкаНаценка",				Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	Расшифровка.Колонки.Добавить("Сумма",				        Новый ОписаниеТипов("Число"));
	Расшифровка.Колонки.Добавить("ОграниченаМинимальнойЦеной",	Новый ОписаниеТипов("Булево"));
	Расшифровка.Колонки.Добавить("ЗначениеСкидкиНаценки",		Новый ОписаниеТипов("Число"));
	
	// Пустые таблицы.
	Параметры.Вставить("ПустаяТаблицаСкидокСРасшифровкой", Неопределено);
	Параметры.Вставить("ПустаяТаблицаРасшифровка"        , Расшифровка);
	
	Параметры.Вставить("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	
	// Индексирование таблиц
	Параметры.СкидкиНаценки.Индексы.Добавить("СкидкаНаценка");
	
	СтруктураСкидок = СтруктураРассчитанныхСкидок(ДеревоСкидок, Параметры);
	
	Возврат СтруктураСкидок;
	
КонецФункции

// Процедура применяет результат расчета скидок (наценок) к объекту.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, ИмяТЧ, РезультатРасчетаСкидокНаценок, РеализацияСверхЗаказа = Ложь, ТоварыСверхЗаказа = Неопределено, ИмяТЧ2 = Неопределено, ДеревоСкидок = Неопределено) Экспорт
	
	Если РеализацияСверхЗаказа И ЗначениеЗаполнено(ТоварыСверхЗаказа) Тогда
		Для Каждого ТекущаяСкдикаНаценка Из РезультатРасчетаСкидокНаценок Цикл
			Если ТоварыСверхЗаказа.Найти(ТекущаяСкдикаНаценка.КлючСвязи) <> Неопределено Тогда
				НоваяСтрокаСкидкиНаценки = Объект.СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидкиНаценки, ТекущаяСкдикаНаценка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(Объект.СкидкиНаценки) = Тип("ТаблицаЗначений") Тогда
			Объект.СкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
		Иначе
			Объект.СкидкиНаценки.Загрузить(РезультатРасчетаСкидокНаценок);
		КонецЕсли;
	КонецЕсли;
	
	//Если ДеревоСкидок <> Неопределено Тогда
	//	Для Каждого ТекущаяСкдикаНаценка
	//КонецЕсли;
	
	АвтоматическиеСкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
	
	// Заполнение скидок в табличной части "Товары"
	АвтоматическиеСкидкиНаценки.Свернуть("КлючСвязи", "Сумма");
	АвтоматическиеСкидкиНаценки.Индексы.Добавить("КлючСвязи");
	
	ЗаполнятьСуммуСкидки = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнятьСуммуСкидки = Истина;
	КонецЕсли;
	РеквизитТЧЗаказ = "Заказ";
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		РеквизитТЧЗаказ = "ЗаказПокупателя";
	КонецЕсли;
	
	СоответсвиеТЧ = Новый Соответствие;
	СоответсвиеТЧ.Вставить(ИмяТЧ, "КлючСвязи");
	Если НЕ ИмяТЧ2 = Неопределено Тогда // Для заказ-наряда, в котором есть 2 ТЧ: "Работы" и "Запасы".
		СоответсвиеТЧ.Вставить(ИмяТЧ2, "КлючСвязиДляСкидокНаценок");
	КонецЕсли;
	ЕстьРеквизитПроцентСкидкиПоДисконтнойКарте = НЕ (Объект.Ссылка.Метаданные().Реквизиты.Найти("ПроцентСкидкиПоДисконтнойКарте") = Неопределено);
	
	Для Каждого ТекЭлементСоответствия Из СоответсвиеТЧ Цикл
		РеквизитКлючСвязи = ТекЭлементСоответствия.Значение;
		Для Каждого СтрокаТЧ Из Объект[ТекЭлементСоответствия.Ключ] Цикл
			
			Если РеализацияСверхЗаказа И ЗначениеЗаполнено(СтрокаТЧ[РеквизитТЧЗаказ]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = АвтоматическиеСкидкиНаценки.Найти(СтрокаТЧ[РеквизитКлючСвязи], "КлючСвязи");
			Если СтрокаТаблицы = Неопределено Тогда
				Если СтрокаТЧ.СуммаАвтоматическойСкидки = 0 И СтрокаТЧ.ПроцентАвтоматическойСкидки = 0 Тогда
					// Не будем пересчитывать строки, в которых значение автоматической скидки не поменялось.
					// Это нужно в тех случаях, когда сумму документа изменили вручную, а цена при этом не поменялась.
					// Это возмоно, когда количество очень большое, а цена маленькая.
					// В этом случае при изменении суммы цена будет рассчитана как сумма / количество с округлением до 2-х знаков.
					Продолжить;
				КонецЕсли;
				СтрокаТЧ.СуммаАвтоматическойСкидки = 0;
				СуммаАвтоматическойСкидки          = 0; // Для точного расчета процента автоматической скидки
			Иначе
				Если СтрокаТаблицы.Сумма = 0 И СтрокаТЧ.СуммаАвтоматическойСкидки = 0 И СтрокаТЧ.ПроцентАвтоматическойСкидки = 0 Тогда
					// Не будем пересчитывать строки, в которых значение автоматической скидки не поменялось.
					// Это нужно в тех случаях, когда сумму документа изменили вручную, а цена при этом не поменялась.
					// Это возмоно, когда количество очень большое, а цена маленькая.
					// В этом случае при изменении суммы цена будет рассчитана как сумма / количество с округлением до 2-х знаков.
					Продолжить;
				КонецЕсли;
				СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТаблицы.Сумма;
				СуммаАвтоматическойСкидки          = СтрокаТаблицы.Сумма; // Для точного расчета процента автоматической скидки
			КонецЕсли;
			
			// Применение автоматической скидки.
			Если ТекЭлементСоответствия.Ключ = "Работы" Тогда
				СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Кратность * СтрокаТЧ.Коэффициент * СтрокаТЧ.Цена;
			Иначе
				СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
			КонецЕсли;
			
			//СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
			
			// Скидки.
			Если СуммаБезСкидки <> 0 Тогда
				Если СтрокаТЧ.ПроцентСкидкиНаценки = 100 Тогда
					СуммаПослеПримененияРучныхСкидокНаценок = 0;
				ИначеЕсли (СтрокаТЧ.ПроцентСкидкиНаценки <> 0 ИЛИ (ЕстьРеквизитПроцентСкидкиПоДисконтнойКарте И Объект.ПроцентСкидкиПоДисконтнойКарте) <> 0) И СтрокаТЧ.Количество <> 0 Тогда
					СуммаПослеПримененияРучныхСкидокНаценок = СуммаБезСкидки * (1 - (СтрокаТЧ.ПроцентСкидкиНаценки) / 100);
				Иначе
					СуммаПослеПримененияРучныхСкидокНаценок = СуммаБезСкидки;
				КонецЕсли;
			Иначе
				СуммаПослеПримененияРучныхСкидокНаценок = СуммаБезСкидки;
			КонецЕсли;
			
			Если ЗаполнятьСуммуСкидки Тогда
				СуммаРучнойСкидки = СтрокаТЧ.СуммаСкидкиНаценки;
			Иначе
				СуммаРучнойСкидки = СуммаБезСкидки - СуммаПослеПримененияРучныхСкидокНаценок;
			КонецЕсли;
			
			СуммаСкидки = СуммаАвтоматическойСкидки + СуммаРучнойСкидки;
			
			СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
			
			// Сумма НДС.
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТЧ.СтавкаНДС);
		
			СтрокаТЧ.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
											  СтрокаТЧ.Сумма - (СтрокаТЧ.Сумма) / ((СтавкаНДС + 100) / 100),
											  СтрокаТЧ.Сумма * СтавкаНДС / 100);

			// Всего.
			СтрокаТЧ.Всего = СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);

			Если ЗаполнятьСуммуСкидки Тогда
				СтрокаТЧ.СуммаСкидки = СуммаБезСкидки - СтрокаТЧ.Сумма;
				СтрокаТЧ.СуммаСкидкиНаценки = СуммаРучнойСкидки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	//Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры // РассчитатьПоОбъекту()

#КонецОбласти