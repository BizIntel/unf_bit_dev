
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= Истина;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	БазаТоваров  = Неопределено;
	ФайлОтчета   = Неопределено;
	ФлагВыгрузки = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);
	Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
	Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);

	Если БазаТоваров  = Неопределено
	 Или ФайлОтчета   = Неопределено
	 Или ФлагВыгрузки = Неопределено  Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.'"));
		Результат = Ложь;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Процедура начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Неопределено;
	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	Возврат Результат;

КонецФункции

// Процедура начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в ККМ Offline.
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка	= ВходныеПараметры[1];
		РасширеннаяВыгрузка	= ВходныеПараметры[2];
		Результат = ВыгрузитьТовары(Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка);
		
	// Загрузка данных по продажам (отчета) из ККМ Offline.
	ИначеЕсли Команда = "ЗагрузитьОтчет" Тогда
		Результат = ЗагрузитьОтчет(Параметры, ВыходныеПараметры);
	
	// Определяет результат загрузки отчета.
	ИначеЕсли Команда = "ОтчетЗагружен" Тогда
		Результат = ОтчетЗагружен(Параметры, ВыходныеПараметры);
	  
	// Очистить базу ККМ Offline.
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры);
		
	// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
	ИначеЕсли Команда = "РасширеннаяВыгрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойВыгрузки();
		
	// Проверка возможности расширенной выгрузки отчета о продажах.
	ИначеЕсли Команда = "РасширеннаяЗагрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойЗагрузки();
		
	// Тестирование устройства.
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(Параметры, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	// Выгрузка товаров в ККМ Offline.
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка	= ВходныеПараметры[1];
		РасширеннаяВыгрузка	= ВходныеПараметры[2];
		НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка);
		
	// Загрузка данных по продажам (отчета) из ККМ Offline.
	ИначеЕсли Команда = "ЗагрузитьОтчет" Тогда
		НачатьЗагрузкуОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	// Определяет результат загрузки отчета.
	ИначеЕсли Команда = "ОтчетЗагружен" Тогда
		НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Очистить базу ККМ Offline.
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Очистить настройки ККМ Offline.
	ИначеЕсли Команда = "ОчиститьНастройки" Тогда
		НачатьОчисткуНастроекНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Проверка возможности расширенной выгрузки отчета о продажах.
	ИначеЕсли Команда = "РасширеннаяВыгрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойВыгрузки();
		
	// Проверка возможности расширенной выгрузки отчета о продажах.
	ИначеЕсли Команда = "РасширеннаяЗагрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойЗагрузки();
		
	// Загрузка расширенного отчете по продажам из ККМ Offline.
	ИначеЕсли Команда = "ЗагрузитьРасширенныйОтчет" Тогда
		НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Выгрузка настроек в ККМ Offline
	ИначеЕсли Команда = "ВыгрузитьНастройки" ИЛИ Команда = "UploadSettings" Тогда
		СтруктураНастроек = ВходныеПараметры;
		НачатьВыгрузкуНастроек(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, СтруктураНастроек);
		
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронныеПроцедурыИФункции

// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Функция ВыгрузитьТовары(Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка)
	
	// При частичной выгрузке нельзя делать новую выгрузку пока не произошла загрузка предыдущей.
	Если ЧастичнаяВыгрузка И НЕ МожноВыгружатьТовары(Параметры) Тогда
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'");
		ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	Разделитель = ПолучитьРазделитель();
	Результат = Истина;

	Файл = Новый ТекстовыйДокумент();
	
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ФорматОбмена = Параметры.ФорматОбмена;
	Иначе
		ФорматОбмена = 0;
	КонецЕсли;
	
	Результат = СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, ФорматОбмена, Разделитель, Товары, ВыходныеПараметры);
	
	Если Результат Тогда
		
		Попытка
			
			Файл.Записать(Параметры.БазаТоваров, "windows-1251");
			
			Если Не ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
				Файл.Очистить();
				Файл.Записать(Параметры.ФлагВыгрузки, "windows-1251");
			КонецЕсли;
			
		Исключение
			
			ВыходныеПараметры.Добавить(999);
			ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.БазаТоваров));
			Результат = Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ВыгрузитьТовары()

// Функция осуществляет загрузку отчета о продажах из ККМ, подключаемой в режиме Offline.
//
Функция ЗагрузитьОтчет(Параметры, ВыходныеПараметры) 
	
	Результат   = Истина;
	Файл = Новый ТекстовыйДокумент();
	
	Попытка
		Файл.Прочитать(Параметры.ФайлОтчета, "windows-1251");
	Исключение
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Не удалось прочитать файл отчета по адресу: %Адрес%'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.ФайлОтчета));
		Результат = Ложь;
	КонецПопытки;
	
	Если Результат Тогда
		Разделитель = ПолучитьРазделитель();
		РазобратьОтчет(Файл, Разделитель, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьОтчет()

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
//
Функция ОтчетЗагружен(Параметры, ВыходныеПараметры) 

	Результат = Истина;
	
	Попытка
		
		Документ = Новый ТекстовыйДокумент();
		Документ.Прочитать(Параметры.ФайлОтчета, "windows-1251");
		Индекс  = 1;
		
		Пока Истина Цикл
			
			Строка = Документ.ПолучитьСтроку(Индекс);
			
			Если ПустаяСтрока(Строка) Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка = "#" Тогда
				Документ.ЗаменитьСтроку(Индекс, "@");
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Документ.Записать(Параметры.ФайлОтчета, "windows-1251");
		
	Исключение
		
		ТекстСообщения = НСтр("ru='При пометке отчета %1 произошла ошибка. Обработка отчета не зафиксирована!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Параметры.ФайлОтчета);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции // ОтчетЗагружен()

// Функция осуществляет очистку товаров на ККМ, подключаемой в режиме Offline.
// 
Функция ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры) 

	Результат = Истина;

	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Файл.ДобавитьСтроку("$$$DELETEALLWARES");
	Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
	Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
	
	Попытка
		
		Файл.Записать(Параметры.БазаТоваров, "windows-1251");
		
		Если Не ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, "windows-1251");
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции // ОчиститьТоварыНаККМ()

// Функция возвращает флаг загрузки предыдущей выгрузки.
// Если результат Истина - значит можно выгружать товар поверх существующего файла.
//
Функция МожноВыгружатьТовары(Параметры) 
	
	Результат = Ложь;
	
	Попытка
		Файл = Новый ТекстовыйДокумент();
		Файл.Прочитать(Параметры.БазаТоваров, "windows-1251");
		Строка = Файл.ПолучитьСтроку(2);
		Если СтрДлина(Строка) = 1
			И Найти(Строка,"#") > 0 Тогда
			Результат = Ложь; // Нельзя если символ во второй строке "#".
		Иначе
			Результат = Истина; // Можно если символ во второй строке не "#" (как правило если загрузка произошла там стоит "@").
		КонецЕсли;
	Исключение
		Результат = Истина; // Можно если файла товаров нет.
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
//
Функция ПроверитьВозможностьРасширеннойВыгрузки()
	
	Возврат Истина;
	
КонецФункции

// Проверка возможности расширенной выгрузки отчета о продажах.
//
Функция ПроверитьВозможностьРасширеннойЗагрузки()
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет проверку путей по которым хранятся файлы обмена.
//
Функция ТестУстройства(Параметры, ВыходныеПараметры) 
	
	Результат = Истина;
	ТекстОшибки = "";
	ТекстОшибкиОбщий = "";
	ВремПараметр = "";
	
	Параметры.Свойство("БазаТоваров", ВремПараметр);
	
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = НСтр("ru='Файл базы товаров не указан.'");
	КонецЕсли;
	
	Параметры.Свойство("ФайлОтчета", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Файл отчета не указан.'") 
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибкиОбщий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхронныеПроцедурыИФункции

#Область ВыгрузкаТоваров

// Процедура осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", Параметры.БазаТоваров);
	ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
	ДополнительныеПараметры.Вставить("Товары", Товары);
	ДополнительныеПараметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);	
	ДополнительныеПараметры.Вставить("ЧастичнаяВыгрузка", ЧастичнаяВыгрузка);
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ДополнительныеПараметры.Вставить("ФорматОбмена", Параметры.ФорматОбмена);
	Иначе
		ДополнительныеПараметры.Вставить("ФорматОбмена", 0);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЧастичнаяВыгрузка Тогда
		НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, Параметры.БазаТоваров); // Проверяем обработанность файла.
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Продолжаем выгрузку.
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, ИмяФайла) 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещенияПриЗавершении = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат Тогда
		
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("ПроверкаОбработанностиФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеЗавершенияПолученияСодержания, КодировкаТекста.ANSI);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, Истина); // Файла не существует.
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОбработанностиФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат.Успешно Тогда
		
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Строка = Файл.ПолучитьСтроку(2);
		
		Если СтрДлина(Строка) = 1 И Найти(Строка,"#") > 0 Тогда
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'"));
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Нельзя если символ во второй строке "#".		
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Можно если символ во второй строке не "#" (если загрузка произошла, там стоит "@").
		КонецЕсли;
		
	Иначе
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Файл не прочитан, следовательно гарантировать обработанность файла нельзя.
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		Разделитель = ПолучитьРазделитель();
		ЧастичнаяВыгрузка = ДополнительныеПараметры.ЧастичнаяВыгрузка;
		РасширеннаяВыгрузка = ДополнительныеПараметры.РасширеннаяВыгрузка;
		Товары = ДополнительныеПараметры.Товары;
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
		ФорматОбмена = ДополнительныеПараметры.ФорматОбмена;

		Файл = Новый ТекстовыйДокумент();
		
		Результат = СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, ФорматОбмена, Разделитель, Товары, ВыходныеПараметры);
		
		Если Результат Тогда
			
			Попытка
				
				Файл.Записать(ИмяФайла, "windows-1251");
				
				Если Не ПустаяСтрока(ИмяФайлаФлага) Тогда
					Файл.Очистить();
					Файл.Записать(ИмяФайлаФлага, "windows-1251");
				КонецЕсли;
				
			Исключение
				
				ВыходныеПараметры.Добавить(999);
				ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
				ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
				Результат = Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНастроек

// Функция осуществляет выгрузку настроек в ККМ, подключаемой в режиме Offline.
//
Процедура НачатьВыгрузкуНастроек(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, Знач СтруктураНастроек)
	
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ФорматОбмена = Параметры.ФорматОбмена;
	Иначе
		ФорматОбмена = 0;
	КонецЕсли;
	
	Если ФорматОбмена>3 Тогда
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ИмяФайла = Параметры.БазаТоваров;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
		ДополнительныеПараметры.Вставить("СтруктураНастроек", СтруктураНастроек);
		
		Файл = Новый Файл(ИмяФайла);
		
		ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриВыгрузкеНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриВыгрузкеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ФайлСуществует", Результат);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Результат Тогда
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ДополнительныеПараметры.ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ФайлСуществует = ДополнительныеПараметры.ФайлСуществует;
	СтруктураНастроек = ДополнительныеПараметры.СтруктураНастроек;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
	ТекстОшибки = "";

	Если ФайлСуществует И НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		
		Если ФайлСуществует Тогда
			
			ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
			
			ОчищатьДокумент = Истина;
			
			Если ТД.КоличествоСтрок()>=2 И ТД.ПолучитьСтроку(2)="#" Тогда
				ОчищатьДокумент = Ложь;
			КонецЕсли;
			
			Если ОчищатьДокумент Тогда
				ТД.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = СформироватьФайлНастроек(СтруктураНастроек, ТД, ТекстОшибки);
		
	КонецЕсли;
	
	Если Результат Тогда
		
		Попытка
			
			Имя = ИмяФайла;
			ТД.Записать(Имя, "windows-1251");
			
			Имя = ИмяФайлаФлага;
			Если Не ПустаяСтрока(Имя) Тогда
				ТД.Очистить();
				ТД.Записать(Имя, "windows-1251");
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", Имя);
			Результат = Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОтчета

Процедура НачатьЗагрузкуОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриЗагрузкеОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриЗагрузкеОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует!'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если НЕ Результат.Успешно Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		Результат = Ложь;
	Иначе
		
		Файл = Новый ТекстовыйДокумент();
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		Разделитель = ПолучитьРазделитель();
		Результат = РазобратьОтчет(Файл, Разделитель, ВыходныеПараметры);
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРасширенногоОтчета

Процедура НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ДополнительныеПараметры.Вставить("ФорматОбмена", Параметры.ФорматОбмена);
	Иначе
		ДополнительныеПараметры.Вставить("ФорматОбмена", 0);
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует!'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ФорматОбмена = ДополнительныеПараметры.ФорматОбмена;
	
	Если НЕ Результат.Успешно Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		Результат = Ложь;
	Иначе
		
		Файл = Новый ТекстовыйДокумент();
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Результат = РазобратьРасширенныйОтчет(Файл, ФорматОбмена, ВыходныеПараметры);
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ПометкаОтчета

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
//
Процедура НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтчетЗагруженЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует!'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтчетЗагруженЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ТекстОшибки = "";

	Если НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Результат = Истина;
		
		ТД.ЗаменитьСтроку(1, "@");
		
		Попытка
			ТД.Записать(ИмяФайла, "windows-1251");
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", ИмяФайла);
			Результат = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТоваров

// Процедура осуществляет очистку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, ОчисткаНастроек = Ложь)
	
	Результат = ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаНастроек

// Функция осуществляет выгрузку настроек в ККМ, подключаемой в режиме Offline.
//
Процедура НачатьОчисткуНастроекНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ФорматОбмена = Параметры.ФорматОбмена;
	Иначе
		ФорматОбмена = 0;
	КонецЕсли;
	
	Если ФорматОбмена>3 Тогда
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ИмяФайла = Параметры.БазаТоваров;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
		
		Файл = Новый Файл(ИмяФайла);
		
		ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриОчисткеНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриОчисткеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ФайлСуществует", Результат);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчисткаНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Результат Тогда
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ДополнительныеПараметры.ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ФайлСуществует = ДополнительныеПараметры.ФайлСуществует;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
	ТекстОшибки = "";

	Если ФайлСуществует И НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		
		Если ФайлСуществует Тогда
			
			ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
			
			ОчищатьДокумент = Истина;
			
			Если ТД.КоличествоСтрок()>=2 И ТД.ПолучитьСтроку(2)="#" Тогда
				ОчищатьДокумент = Ложь;
			КонецЕсли;
			
			Если ОчищатьДокумент Тогда
				ТД.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = ДополнитьФайлОчисткойНастроек(ТД, ТекстОшибки);
		
	КонецЕсли;
	
	Если Результат Тогда
		
		Попытка
			
			Имя = ИмяФайла;
			ТД.Записать(Имя, "windows-1251");
			
			Имя = ИмяФайлаФлага;
			Если Не ПустаяСтрока(Имя) Тогда
				ТД.Очистить();
				ТД.Записать(Имя, "windows-1251");
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", Имя);
			Результат = Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ТестУстройства

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Результат = ТестУстройства(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьТранзакцию(Строка, Транзакция, ФорматОбмена, ТекстОшибки)
	
	Результат = Истина;
	
	Попытка
		
		ПолеОшибки = Нстр("ru='Номер транзакции (1)'");
		
		// Номер транзакции.
		Транзакция.Вставить("Номер", Число(СтрПолучитьСтроку(Строка, 1)));
		
		ПолеОшибки = Нстр("ru='Дата и время транзакции (2,3)'");
		
		ДатаТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 2), ".", Символы.ПС);
		ВремяТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 3), ":", Символы.ПС);
		
		// Дата и время транзакции.
		Транзакция.Вставить("ДатаИВремя", Дата(Число(СтрПолучитьСтроку(ДатаТранзакции, 3)), Число(СтрПолучитьСтроку(ДатаТранзакции, 2)), Число(СтрПолучитьСтроку(ДатаТранзакции, 1)), Число(СтрПолучитьСтроку(ВремяТранзакции, 1)), Число(СтрПолучитьСтроку(ВремяТранзакции, 2)), Число(СтрПолучитьСтроку(ВремяТранзакции, 3))));
		
		ПолеОшибки = Нстр("ru='Тип транзакции (4)'");
		
		// Тип транзакции.
		Транзакция.Вставить("Тип", Число(СтрПолучитьСтроку(Строка, 4)));
		
		ПолеОшибки = Нстр("ru='Номер чека (6)'");
		
		// Номер чека транзакции.
		Транзакция.Вставить("НомерЧека", Число(СтрПолучитьСтроку(Строка, 6)));
		
		Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 Тогда
			КоличествоПолей = 34;
		Иначе
			КоличествоПолей = 26
		КонецЕсли;
		
		// При загрузке обрабатываются только первые 26 полей.
		Для Индекс = 8 По КоличествоПолей Цикл
			
			ИндексСтрокой = Формат(Индекс, "ЧГ=0");
			
			ПолеОшибки = Нстр("ru='Поле №%1% (%1%)'");
			ПолеОшибки = СтрЗаменить(ПолеОшибки, "%1%", ИндексСтрокой);
			
			Значение = СтрПолучитьСтроку(Строка, Индекс);
			
			ИндексВхождения = СтрНайти(Значение, "|");
			
			Если ИндексВхождения > 0 Тогда
				Значение = Лев(Значение, ИндексВхождения-1);
			КонецЕсли;
			
			// Преобразуем значение числовых полей в число.
			Если (Индекс>=10 И Индекс<=13) ИЛИ Индекс=16 Тогда
				Транзакция.Вставить("Поле" + ИндексСтрокой, ?(ЗначениеЗаполнено(Значение), Число(Значение), Неопределено));
			Иначе
				Транзакция.Вставить("Поле" + ИндексСтрокой, Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		// Если в процессе разбора транзакции произошла ошибка.
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно распознать поле: %1%");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", ПолеОшибки);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЧек(Смена, НомерЧека)
	
	НайденныеЧеки = НайтиСтроки(Смена.Чеки, Новый Структура("НомерЧека", НомерЧека));
	
	Если НайденныеЧеки.Количество()>0 Тогда
		Возврат Смена.Чеки[НайденныеЧеки[0].ИндексВМассиве];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьСмену(Смена, Смены, Транзакция)
	
	// Если предыдущая смена не закрыта, закрываем ее.
	Если Смена<>Неопределено И НЕ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ЗакрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Смена = Новый Структура;
	
	Смена.Вставить("Номер",			Транзакция.Поле14);
	Смена.Вставить("ДатаОткрытия",	Транзакция.ДатаИВремя);
	Смена.Вставить("ДатаЗакрытия"	);
	Смена.Вставить("Чеки",			Новый Массив);
	
КонецПроцедуры

Процедура ЗакрытьСмену(Смена, Смены, Транзакция)
	
	// Если смена не открыта/закрыта, открываем ее.
	Если Смена=Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Смена.ДатаЗакрытия = Транзакция.ДатаИВремя;
	Смены.Добавить(Смена);
	
КонецПроцедуры

Процедура ОткрытьЧек(Смена, Смены, Транзакция)
	
	// Проверяем инициализированность текущей смены.
	Если Смена = Неопределено ИЛИ Смена.Номер <> Транзакция.Поле14 ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Чек = Новый Структура;
	
	Чек.Вставить("Закрыт", Ложь);
	Чек.Вставить("НомерЧека", Транзакция.НомерЧека);
	Чек.Вставить("Товары", Новый Массив);
	Чек.Вставить("Оплаты", Новый Массив);
	Чек.Вставить("ТипОперацииККМ", ТипОперацииККМ(Транзакция.Поле13));
	
	Смена.Чеки.Добавить(Чек);
	
КонецПроцедуры

Функция ЗакрытьЧек(Смена, НомерЧека, ТекстОшибки)
	
	ТекущийЧек = ПолучитьЧек(Смена, НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", НомерЧека);
		Результат = Ложь;
	Иначе
		ТекущийЧек.Закрыт = Истина;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьТранзакциюВЧек(Смена, Смены, Транзакция, ФорматОбмена, Оплата=Ложь)
	
	Если Смена = Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		ОткрытьЧек(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Если Оплата Тогда
		
		ОплатыЧека = Смена.Чеки[Смена.Чеки.Количество()-1].Оплаты;
		
		НайденныеОплаты = НайтиСтроки(ОплатыЧека, Новый Структура("КодВидаОплаты, ТипЧека", Транзакция.Поле9, Транзакция.Поле13));
		
		Если НайденныеОплаты.Количество()>0 Тогда
			
			Оплата = ОплатыЧека[НайденныеОплаты[0].ИндексВМассиве];
			Оплата.Сумма = Оплата.Сумма + Транзакция.Поле12;
			
		Иначе
			
			НоваяОплата = Новый Структура;
			
			НоваяОплата.Вставить("ТипОплаты",		?(Транзакция.Поле9 = "0" ИЛИ ПустаяСтрока(Транзакция.Поле9), "0", "1")); // 0 - предопределенный тип оплаты "наличные".
			НоваяОплата.Вставить("КодВидаОплаты",	Транзакция.Поле9);
			НоваяОплата.Вставить("Сумма",			Транзакция.Поле12);
			НоваяОплата.Вставить("ТипЧека",			Транзакция.Поле13);
			
			ОплатыЧека.Добавить(НоваяОплата);
			
		КонецЕсли;
		
	Иначе
		
		Если Транзакция.Поле13 = 18 Тогда
			
			НовоеВскрытие = Новый Структура;
			
			НовоеВскрытие.Вставить("Дата",			НачалоДня(Транзакция.ДатаИВремя));
			НовоеВскрытие.Вставить("Код",			Транзакция.Поле8);
			НовоеВскрытие.Вставить("Количество",	Транзакция.Поле11);
			НовоеВскрытие.Вставить("ВскрытиеТары",	Истина);
			
			Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 Тогда
				ШтрихкодМарки = Транзакция.Поле34;
			Иначе
				ШтрихкодМарки = "";
			КонецЕсли;
			
			НовоеВскрытие.Вставить("ШтрихкодАлкогольнойПродукции",	ШтрихкодМарки);
			
			Смена.Чеки[Смена.Чеки.Количество()-1].Товары.Добавить(НовоеВскрытие);
			
		Иначе
				
			НовыйТовар = Новый Структура;
			
			НовыйТовар.Вставить("Код",					Транзакция.Поле8);
			НовыйТовар.Вставить("Количество",			Транзакция.Поле11);
			НовыйТовар.Вставить("Цена",					Транзакция.Поле10);
			НовыйТовар.Вставить("Сумма",				Транзакция.Поле16);
			НовыйТовар.Вставить("НомерТранзакции",		Транзакция.Номер);
			НовыйТовар.Вставить("ДатаИВремяТранзакции",	Транзакция.ДатаИВремя);
			НовыйТовар.Вставить("ВскрытиеТары",			Ложь);
			
			Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 Тогда
				ШтрихкодМарки = Транзакция.Поле34;
			Иначе
				ШтрихкодМарки = "";
			КонецЕсли;
			
			НовыйТовар.Вставить("ШтрихкодАлкогольнойПродукции", ШтрихкодМарки);
			
			Смена.Чеки[Смена.Чеки.Количество()-1].Товары.Добавить(НовыйТовар);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьТранзакциюИзЧека(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено ИЛИ ТекущийЧек.Товары.Количество()=0 Тогда
		Результат = Ложь;
	Иначе
		
		СторнируемаяТранзакция = Неопределено;
		
		Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
			
			Если ТекТовар.Код = Транзакция.Поле8 И ТекТовар.Количество = -1*Транзакция.Поле11 И ТекТовар.Цена = Транзакция.Поле10 Тогда
				СторнируемаяТранзакция = ТекТовар;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СторнируемаяТранзакция<>Неопределено Тогда
			ТекущийЧек.Товары.Удалить(ТекущийЧек.Товары.Найти(СторнируемаяТранзакция));
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ Результат Тогда
			ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%!'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Транзакция.Номер);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция УдалитьЧек(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек<>Неопределено Тогда
		Смена.Чеки.Удалить(Смена.Чеки.Найти(ТекущийЧек));
	Иначе
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%!'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Транзакция.Номер);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьРасширенныйОтчет(ТекстовыйДокумент, ФорматОбмена, ВыходныеПараметры)
	
	Результат = Истина;
	
	ПродолжатьЧтениеФайла = Ложь;
	ТекстОшибки = "";
	Строка = ТекстовыйДокумент.ПолучитьСтроку(1);
	
	// Проверяем обработанность файла.
	Если Строка = "#" Тогда
		Индекс = 4;
		ПродолжатьЧтениеФайла = Истина;
	ИначеЕсли Строка = "@" Тогда
		ТекстОшибки = НСтр("ru='Операция прервана. Отчет уже был загружен!'");
		Результат = Ложь;
	Иначе
		ТекстОшибки = НСтр("ru='Загрузка невозможна! Неизвестный формат отчета.'");
		Результат = Ложь;
	КонецЕсли;
	
	Смены = Новый Массив;
	ТекущаяСмена = Неопределено;
	
	// В цикле читаем транзакции.
	Пока ПродолжатьЧтениеФайла Цикл
		
		// Получаем строку с очередной транзакцией.
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		
		// Если транзакция существует.
		Если ПустаяСтрока(Строка) Тогда
			ПродолжатьЧтениеФайла = Ложь;
		Иначе
			
			Транзакция = Новый Структура;
			
			// Раскладываем транзакцию на поля.
			Если ЗаполнитьТранзакцию(СтрЗаменить(Строка, ";", Символы.ПС), Транзакция, ФорматОбмена, ТекстОшибки) Тогда
				
				Если Транзакция.Тип = 2 ИЛИ Транзакция.Тип = 12 Тогда
					
					// Сторно продажи/возврата товара.
					Если НЕ УдалитьТранзакциюИзЧека(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
					
				ИначеЕсли Транзакция.Тип = 1 ИЛИ Транзакция.Тип = 11 Тогда
					
					// Продажа/возврат товара.
					ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция, ФорматОбмена);
					
				ИначеЕсли Транзакция.Тип = 40 ИЛИ Транзакция.Тип = 41 Тогда
					
					// Оплата.
					ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция, ФорматОбмена, Истина);
					
				ИначеЕсли Транзакция.Тип = 42 Тогда
					
					// Открытие чека.
					ОткрытьЧек(ТекущаяСмена, Смены, Транзакция);
					
				ИначеЕсли Транзакция.Тип = 55 Тогда
					
					// Закрытие чека.
					Если НЕ ЗакрытьЧек(ТекущаяСмена, Транзакция.НомерЧека, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
					
				ИначеЕсли Транзакция.Тип = 56 Тогда
					
					// Отмена чека.
					УдалитьЧек(ТекущаяСмена, Транзакция, ТекстОшибки);
					
				ИначеЕсли Транзакция.Тип = 61 Тогда
					
					// Закрытие смены.
					ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
					
				ИначеЕсли Транзакция.Тип = 62 Тогда
					
					// Открытие смены.
					ОткрытьСмену(ТекущаяСмена, Смены, Транзакция);
					
				КонецЕсли;
				
			Иначе
				Результат = Ложь;
				ПродолжатьЧтениеФайла = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если Результат Тогда
		
		// Если текущая смена не закрыта, закрываем ее.
		Если ТекущаяСмена<>Неопределено И НЕ ЗначениеЗаполнено(ТекущаяСмена.ДатаЗакрытия) Тогда
			ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
		КонецЕсли;
		
		РезультатРазбора = Новый Массив;
		
		// Перебираем смены.
		Для Каждого Смена Из Смены Цикл
			
			// Формируем описание смены.
			ТекущаяСмена = Новый Структура;
			
			ТекущаяСмена.Вставить("НомерСмены",			Смена.Номер);
			ТекущаяСмена.Вставить("ДатаОткрытияСмены",	Смена.ДатаОткрытия);
			ТекущаяСмена.Вставить("ДатаЗакрытияСмены",	Смена.ДатаЗакрытия);
			ТекущаяСмена.Вставить("Товары",				Новый Массив);
			ТекущаяСмена.Вставить("Оплаты",				Новый Массив);
			ТекущаяСмена.Вставить("ВскрытияТары",		Новый Массив);
			
			УдалитьНеподдерживаемыеОперации(Смена.Чеки);
			
			// Перебираем все чеки смены.
			Для Каждого Чек Из Смена.Чеки Цикл
				
				// Если чек закрыт.
				Если Чек.Закрыт Тогда
					
					// Перебираем продажи/возвраты товаров чека.
					Для Каждого Товар Из Чек.Товары Цикл
						
						Если Товар.Количество<>0 Тогда
							
							Если Товар.ВскрытиеТары Тогда
								
								НовоеВскрытие = Новый Структура;
								
								НовоеВскрытие.Вставить("Дата",							Товар.Дата);
								НовоеВскрытие.Вставить("Код",							Товар.Код);
								НовоеВскрытие.Вставить("Количество",					Товар.Количество);
								НовоеВскрытие.Вставить("ШтрихкодАлкогольнойПродукции",	Товар.ШтрихкодАлкогольнойПродукции);
								
								ТекущаяСмена.ВскрытияТары.Добавить(НовоеВскрытие);
								
							Иначе
									
								НовыйТовар = Новый Структура;
								
								НовыйТовар.Вставить("Код",							Товар.Код);
								НовыйТовар.Вставить("Количество",					Товар.Количество);
								НовыйТовар.Вставить("Цена",							Товар.Цена);
								НовыйТовар.Вставить("Сумма",						Товар.Сумма);
								НовыйТовар.Вставить("ШтрихкодАлкогольнойПродукции",	Товар.ШтрихкодАлкогольнойПродукции);
								
								ТекущаяСмена.Товары.Добавить(НовыйТовар);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Для Каждого Оплата Из Чек.Оплаты Цикл
						
						НоваяОплата = Новый Структура;
						НоваяОплата.Вставить("ТипОплаты", Оплата.ТипОплаты);
						НоваяОплата.Вставить("Сумма", Оплата.Сумма);
						НоваяОплата.Вставить("КодВидаОплаты", Оплата.КодВидаОплаты);
						
						ТекущаяСмена.Оплаты.Добавить(НоваяОплата);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РезультатРазбора.Добавить(ТекущаяСмена);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат Тогда
		ВыходныеПараметры.Добавить(РезультатРазбора);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьОтчет(ТекстовыйДокумент, Разделитель, ВыходныеПараметры)
	
	Результат   = Истина;
	НеизвестнаяТранзакция = Ложь;
	НомерПоследнейСмены 	= 0;
	
	Отчет 	= Новый Массив;
	Чеки 	= Новый Массив;
	Позиции = Новый Массив;
		
	ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(1);
	Если ТекущаяСтрока = "#" Тогда
		ИндексСтроки  = 4;
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(ИндексСтроки);
		Пока Не ПустаяСтрока(ТекущаяСтрока) Цикл
			ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, Разделитель, Символы.ПС);

			НомерТранзакцииСтр = СтрПолучитьСтроку(ТекущаяСтрока,  1);
			ТипТранзакцииСтр   = СтрПолучитьСтроку(ТекущаяСтрока,  4);
			НомерДокументаСтр  = СтрПолучитьСтроку(ТекущаяСтрока,  6);
			КодПричиныСтр      = СтрПолучитьСтроку(ТекущаяСтрока,  9);
			НомерСменыСтр      = СтрПолучитьСтроку(ТекущаяСтрока, 14);

			Попытка
				ПолеОшибки = Нстр("ru='Номер транзакции (1)'");
				НомерТранзакции    = Число(НомерТранзакцииСтр);
				ПолеОшибки = Нстр("ru='Тип транзакции (4)'");
				ТипТранзакции      = Число(ТипТранзакцииСтр);
				ПолеОшибки = Нстр("ru='Номер документа (6)'");
				НомерДокумента     = Число(НомерДокументаСтр);
				ПолеОшибки = Нстр("ru='Номер смены (14)'");
				НомерСмены         = Число(НомерСменыСтр);
			Исключение
				ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки;
				Результат = Ложь;
				Прервать;
			КонецПопытки;

			Если НомерПоследнейСмены < НомерСмены Тогда
				НомерПоследнейСмены = НомерСмены;
			КонецЕсли;

			Если ТипТранзакции =  1 Тогда
				// Регистрация без учета кода товара.
				ТекстОшибки = НСтр("ru='Регистрация продаж без учета кода товара не допускается'");
				Результат = Ложь;
				Прервать;
			ИначеЕсли ТипТранзакции = 11 Тогда
				// Регистрация с учетом кода товара.
				КодСтр        = СтрПолучитьСтроку(ТекущаяСтрока,  8);
				ЦенаСтр       = СтрПолучитьСтроку(ТекущаяСтрока, 10);
				КоличествоСтр = СтрПолучитьСтроку(ТекущаяСтрока, 11);
				СуммаСтр      = СтрПолучитьСтроку(ТекущаяСтрока, 16);
				Артикул       = СтрПолучитьСтроку(ТекущаяСтрока, 18);
				Попытка
					ПолеОшибки = Нстр("ru='Код товара (8)'");
					Код        = Число(КодСтр);
					ПолеОшибки = Нстр("ru='Цена товара (10)'");
					Цена       = Число(ЦенаСтр);
					ПолеОшибки = Нстр("ru='Количество товара (11)'");
					Количество = Число(КоличествоСтр);
					ПолеОшибки = Нстр("ru='Сумма продажи (16)'");
					Сумма      = Число(СуммаСтр);
				Исключение
					ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки;
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				Врем                = Новый Структура("Код, Цена, Количество, Сумма, Артикул, НомерДокумента, НомерСмены");
				Врем.Код            = Код;
				Врем.Цена           = Цена;
				Врем.Количество     = Количество;
				Врем.Сумма          = Сумма;
				Врем.Артикул        = Артикул;
				Врем.НомерДокумента = НомерДокумента;
				Врем.НомерСмены     = НомерСмены;
				Позиции.Добавить(Врем);
			ИначеЕсли ТипТранзакции =  2 Или ТипТранзакции = 12 Тогда
				// Сторнирование
				СтруктураПоиска                = Новый Структура("НомерДокумента, НомерСмены");
				СтруктураПоиска.НомерДокумента = НомерДокумента;
				СтруктураПоиска.НомерСмены     = НомерСмены;
				Врем                           = НайтиСтроки(Позиции, СтруктураПоиска);
				Врем                           = Врем[Врем.Количество() - 1];
				Позиции.Удалить(Врем.ИндексВМассиве);
			ИначеЕсли ТипТранзакции =  4 Или ТипТранзакции = 14 Тогда
				// Налог
			ИначеЕсли ТипТранзакции =  5 Или ТипТранзакции = 15 Или ТипТранзакции =  7 Или ТипТранзакции = 17 Тогда
				// Скидка на позицию
			ИначеЕсли ТипТранзакции =  6 Или ТипТранзакции = 16 Или ТипТранзакции =  8 Или ТипТранзакции = 18 Тогда
				// Надбавка на позицию
			ИначеЕсли ТипТранзакции = 85 Или ТипТранзакции = 75
					  Или ТипТранзакции = 87 Или ТипТранзакции = 77 Тогда
				// Распределенная скидка
			ИначеЕсли ТипТранзакции = 86 Или ТипТранзакции = 76
					  Или ТипТранзакции = 88 Или ТипТранзакции = 78 Тогда
				// Распределенная надбавка
			ИначеЕсли ТипТранзакции = 60 Тогда
				// X-отчет
			ИначеЕсли ТипТранзакции = 63 Тогда
				// Z-отчет
			ИначеЕсли ТипТранзакции = 64 Тогда
				// Документ открытия смены
			ИначеЕсли ТипТранзакции = 61 Тогда
				// Закрытие смены
			ИначеЕсли ТипТранзакции = 62 Тогда
				// Открытие смены
			ИначеЕсли ТипТранзакции = 40 Тогда
				// Оплата с вводом суммы клиента.
			ИначеЕсли ТипТранзакции = 41 Тогда
				// Оплата без ввода суммы клиента.
			ИначеЕсли ТипТранзакции = 42 Тогда
				// Открытие чека
				Врем = Новый Структура("НомерДокумента, НомерСмены, ЧекЗакрыт, Скидка");
				Врем.НомерДокумента = НомерДокумента;
				Врем.НомерСмены     = НомерСмены;
				Врем.ЧекЗакрыт      = Ложь;
				Врем.Скидка         = 0;
				Чеки.Добавить(Врем);
			ИначеЕсли ТипТранзакции = 43 Тогда
				// Распределение оплаты
			ИначеЕсли ТипТранзакции = 45 Тогда
				// Закрытие документа в ККМ
			ИначеЕсли ТипТранзакции = 49 Тогда
				// Закрытие документа по ГП
			ИначеЕсли ТипТранзакции = 50 Тогда
				// Внесение
			ИначеЕсли ТипТранзакции = 51 Тогда
				// Выплата
			ИначеЕсли ТипТранзакции = 55 Тогда
				// Закрытие чека
				СтруктураПоиска                = Новый Структура("НомерДокумента, НомерСмены");
				СтруктураПоиска.НомерДокумента = НомерДокумента;
				СтруктураПоиска.НомерСмены     = НомерСмены;
				ВремПозиции                    = НайтиСтроки(Позиции, СтруктураПоиска);

				СуммаПозиций                   = 0;
				Для Каждого Позиция Из ВремПозиции Цикл
					СуммаПозиций = СуммаПозиций + Позиция.Сумма;
				КонецЦикла;

				ВремЧеки = НайтиСтроки(Чеки, СтруктураПоиска)[0];
				ВремЧеки.ЧекЗакрыт = Истина;
			ИначеЕсли ТипТранзакции = 56 Тогда
				// Чек не закрыт на ККМ
				СтруктураПоиска                = Новый Структура("НомерДокумента, НомерСмены");
				СтруктураПоиска.НомерДокумента = НомерДокумента;
				СтруктураПоиска.НомерСмены     = НомерСмены;
				Врем                           = НайтиСтроки(Позиции, СтруктураПоиска);
				Для Индекс = 1 По Врем.Количество() Цикл
					ВремСтрока                 = Врем[Врем.Количество() - Индекс];
					Позиции.Удалить(ВремСтрока.ИндексВМассиве);
				КонецЦикла;
			ИначеЕсли ТипТранзакции = 57 Тогда
				// Восстановление отложенного чека.
			ИначеЕсли ТипТранзакции = 35 Или ТипТранзакции = 37 Тогда
				// Скидка на чек
			ИначеЕсли ТипТранзакции = 36 Или ТипТранзакции = 38 Тогда
				// Надбавка на чек
			ИначеЕсли ТипТранзакции = 21 Или ТипТранзакции = 23 Тогда
				// Регистрация купюр по свободной цене.
			ИначеЕсли ТипТранзакции = 22 Или ТипТранзакции = 24 Тогда
				// Сторно купюр по свободной цене/из справочника.
			ИначеЕсли ТипТранзакции = 120 Тогда
				// Отправка в ЕГАИС товаров с указанной группой печати
			КонецЕсли;

			ИндексСтроки  = ИндексСтроки + 1;
			ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(ИндексСтроки);
		КонецЦикла;

	ИначеЕсли ТекущаяСтрока = "@" Тогда
		ТекстОшибки = НСтр("ru='Операция прервана. Отчет уже был загружен!'");
		Результат = Ложь;
	Иначе
		ТекстОшибки = НСтр("ru='Неверный формат данных или данные отсутствуют.'");
		Результат = Ложь;
	КонецЕсли;

	Если Результат Тогда
		СтруктураПоиска            = Новый Структура("ЧекЗакрыт");	
		СтруктураПоиска.ЧекЗакрыт  = Истина;
		Врем                       = НайтиСтроки(Чеки, СтруктураПоиска);
		Для Каждого Чек Из Врем Цикл
			СтруктураПоиска                = Новый Структура("НомерДокумента");
			СтруктураПоиска.НомерДокумента = Чек.НомерДокумента;
			ПозицииЧека = НайтиСтроки(Позиции, СтруктураПоиска);
			Для Каждого Позиция Из ПозицииЧека Цикл
				
				СкидкаВрем = (Позиция.Цена * Позиция.Количество) - Позиция.Сумма;
				Если Позиция.Сумма = 0  И  Позиция.Цена * Позиция.Количество > 0 Тогда
					СкидкаВрем = 100;
				ИначеЕсли Позиция.Цена * Позиция.Количество = 0 Тогда
					СкидкаВрем = 0;
				Иначе
					СкидкаВрем = Окр(СкидкаВрем / (Позиция.Цена * Позиция.Количество) * 100, 2);
				КонецЕсли;
				
				РезультатПозиция = Новый Структура;
				
				РезультатПозиция.Вставить("Код", Позиция.Код);
				РезультатПозиция.Вставить("Количество", Позиция.Количество);
				РезультатПозиция.Вставить("Цена", Позиция.Цена);
				РезультатПозиция.Вставить("Сумма", Позиция.Сумма);
				РезультатПозиция.Вставить("Скидка", СкидкаВрем);
				
				Отчет.Добавить(РезультатПозиция);
				
			КонецЦикла;
		КонецЦикла;
		ВыходныеПараметры.Добавить(Отчет);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, ФорматОбмена, Разделитель, Товары, ВыходныеПараметры)
	
	Результат = Истина;
	
	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Если РасширеннаяВыгрузка Тогда
		
		Если ЧастичнаяВыгрузка Тогда
			Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
		Иначе
			
			Файл.ДобавитьСтроку("$$$DELETEALLWARES");
			Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
			Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
			Файл.ДобавитьСтроку("$$$ADDQUANTITY");
			
		КонецЕсли;
		
		Для Каждого ТекГруппа Из Товары.ГруппыТоваров Цикл
			
			ДанныеДляЗаполнения = Новый Структура;
			ДанныеДляЗаполнения.Вставить("Код", Формат(ТекГруппа.Код, "ЧН=0; ЧГ=0"));
			ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(ТекГруппа.Наименование));
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(ТекГруппа.КодГруппы, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Истина);
			
		КонецЦикла;
			
	Иначе
		
		Если ЧастичнаяВыгрузка Тогда
			Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
		Иначе
			Файл.ДобавитьСтроку("$$$DELETEALLWARES");
			Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
			Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
			Файл.ДобавитьСтроку("$$$ADDQUANTITY");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Товар Из Товары.Товары Цикл
		
		Если Результат Тогда
			
			Параметры = Новый Структура;
			
			Параметры.Вставить("Разделитель", Разделитель);
			Параметры.Вставить("Уровень", "Номенклатура");
			Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
			Параметры.Вставить("ФорматОбмена", ФорматОбмена);
			Параметры.Вставить("Источник", Товар);
			
			ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьФайлНастроек(СтруктураНастроек, ТекстовыйФайл, ТекстОшибки)
	
	Результат = Истина;
	
	Налоги = СтруктураНастроек.Налоги;
	КомбинацииНалогов = СтруктураНастроек.КомбинацииНалогов;
	
	БлокСтавок = "$$$ADDTAXRATES";
	БлокГрупп = "$$$ADDTAXGROUPS";
	БлокСтавокГрупп = "$$$ADDTAXGROUPRATES";
	
	Если Налоги.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст!'");
		Результат = Ложь;
	Иначе
		
		Если КомбинацииНалогов.Количество() = 0 Тогда
			
			Если Налоги.Количество() > 1 Тогда
				ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. На товары начисляется несколько налогов, необходимо заполнить комбинации налогов!'");
				Результат = Ложь;
			Иначе
				
				Для Каждого ТекНалог Из Налоги Цикл
					
					Если ТекНалог.Ставки.Количество() = 0 Тогда
						ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст!'");
						Результат = Ложь;
						Прервать;
					КонецЕсли;
					
					Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
						
						Текст = ?(СтрДлина(ТекСтавка.Текст)>100, Лев(ТекСтавка.Текст, 100), ТекСтавка.Текст);
						
						БлокСтавок = БлокСтавок + Символы.ПС
									+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код
									+ Текст + ";"								// Наименование
									+ Текст + ";"								// Текст
									+ "0;"										// Тип налога
									+ Формат(ТекСтавка.Значение, "ЧН=0; ЧГ=0");	// Значение налога
						
						БлокГрупп = БлокГрупп + Символы.ПС
									+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";" // Код
									+ Текст + ";"								// Наименование
									+ Текст;									// Текст
									
						БлокСтавокГрупп = БлокСтавокГрупп + Символы.ПС
									+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код
									+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код налоговой группы
									+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код налоговой ставки
									+ "1";										// Смена базы
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ИндексСтавки = 1;
			
			Для Каждого ТекНалог Из Налоги Цикл
				
				Если ТекНалог.Ставки.Количество() = 0 Тогда
					ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст!'");
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
					
					Текст = ?(СтрДлина(ТекСтавка.Текст)>100, Лев(ТекСтавка.Текст, 100), ТекСтавка.Текст);
					
					ТекСтавка.Вставить("Индекс", ИндексСтавки);
					
					БлокСтавок = БлокСтавок + Символы.ПС
								+ Формат(ИндексСтавки, "ЧДЦ=; ЧГ=0") + ";"	// Код
								+ Текст + ";"								// Наименование
								+ Текст + ";"								// Текст
								+ "0;"										// Тип налога
								+ Формат(ТекСтавка.Значение, "ЧН=0; ЧГ=0");	// Значение налога
					
					ИндексСтавки = ИндексСтавки + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ИндексНалоговойСтавкиГруппы = 1;
			
			Для Каждого ТекКомбинация Из КомбинацииНалогов Цикл
				
				КодКомбинации = Формат(ТекКомбинация.Код, "ЧДЦ=; ЧГ=0");
				Текст = НСтр("ru = 'Группа №'") + КодКомбинации;
				
				БлокГрупп = БлокГрупп + Символы.ПС
							+ КодКомбинации + ";"	// Код
							+ Текст + ";"			// Наименование
							+ Текст;				// Текст
				
				Для Каждого ТекСтавкаКомбинации Из ТекКомбинация.Ставки Цикл
					
					Для Каждого ТекНалог Из Налоги Цикл
						
						Если ТекНалог.Код = ТекСтавкаКомбинации.КодНалога Тогда
							
							Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
								
								Если ТекСтавка.Код = ТекСтавкаКомбинации.КодСтавки Тогда
									
									БлокСтавокГрупп = БлокСтавокГрупп + Символы.ПС
													+ Формат(ИндексНалоговойСтавкиГруппы, "ЧДЦ=; ЧГ=0") + ";"	// Код
													+ КодКомбинации + ";"										// Код налоговой группы
													+ Формат(ТекСтавка.Индекс, "ЧДЦ=; ЧГ=0") + ";"				// Код налоговой ставки
													+ "0";														// Смена базы
													
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					ИндексНалоговойСтавкиГруппы = ИндексНалоговойСтавкиГруппы + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		БлокНалогов = "$$$DELETEALLTAXGROUPRATES
				|$$$DELETEALLTAXGROUPS
				|$$$DELETEALLTAXRATES" + Символы.ПС
				+ БлокСтавок + Символы.ПС
				+ БлокГрупп + Символы.ПС
				+ БлокСтавокГрупп;
	
	КонецЕсли;
	
	Если Результат Тогда
		
		Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
			
			// Определяем и удаляем блок видов оплаты.
			ТекстФайла = ТекстовыйФайл.ПолучитьТекст();
			
			Если Найти(ТекстФайла, "$$$DELETEALLTAXGROUPRATES")<>0 Тогда
				
				Для ИндексСтроки = 3 По ТекстовыйФайл.КоличествоСтрок() Цикл
					
					ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
					
					Если ТекущаяСтрока = "$$$DELETEALLTAXGROUPRATES" Тогда
						
						Пока Истина Цикл
							
							Если ИндексСтроки = ТекстовыйФайл.КоличествоСтрок() + 1 Тогда
								Прервать;
							КонецЕсли;
							
							ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
							
							Если ТекущаяСтрока <> "$$$REPLACEQUANTITY" И ТекущаяСтрока <> "$$$DELETEALLWARES" Тогда
								ТекстовыйФайл.УдалитьСтроку(ИндексСтроки);
							Иначе
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			// Выгружаем в новый файл
			ТекстовыйФайл.ДобавитьСтроку("##@@&&");
			ТекстовыйФайл.ДобавитьСтроку("#");
		КонецЕсли;
		
		ТекстовыйФайл.ВставитьСтроку(3, БлокНалогов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьФайлОчисткойНастроек(ТекстовыйФайл, ТекстОшибки)
	
	Результат = Истина;
	
	Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
		
		ТекстФайла = ТекстовыйФайл.ПолучитьТекст();
		
		Если Найти(ТекстФайла, "$$$DELETEALLTAXGROUPRATES")<>0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		// Выгружаем в новый файл
		ТекстовыйФайл.ДобавитьСтроку("##@@&&");
		ТекстовыйФайл.ДобавитьСтроку("#");
		
	КонецЕсли;
	
	БлокОчисткиНастроек	= "$$$DELETEALLTAXGROUPRATES
						|$$$DELETEALLTAXGROUPS
						|$$$DELETEALLTAXRATES";
		
	ТекстовыйФайл.ВставитьСтроку(3, БлокОчисткиНастроек);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает разделитель полей таблицы содержащейся в файле.
//
Функция ПолучитьРазделитель();
	
	Возврат ";";
	
КонецФункции

// Подготавливает строку для выгрузки.
//
Функция ПодготовитьСтроку(Знач ИсходнаяСтрока, МаксимальнаяДлина=100);
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), ПолучитьРазделитель(), " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, МаксимальнаяДлина);
		 
	Возврат ИсходнаяСтрока;
	
КонецФункции

// Возвращает массив элементов, найденных в массиве структур по параметрам отбора.
// Параметры отбора являют собой структуру.
// Действует аналогично методу НайтиСтроки таблицы значений.
//
Функция НайтиСтроки(Знач МассивПоиска, ПараметрыОтбора)
	
	Результат = Новый Массив;
	Для ВремИндекс = 0 По МассивПоиска.Количество()-1 Цикл
		
		ЭлементМассива = МассивПоиска[ВремИндекс];
		ПолноеСовпадение = Истина;
		
		Для каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			
			Если ЭлементМассива.Свойство(ЭлементОтбора.Ключ) 
				И НЕ ЭлементОтбора.Значение = ЭлементМассива[ЭлементОтбора.Ключ] Тогда
				ПолноеСовпадение = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолноеСовпадение Тогда
			ЭлементМассива.Вставить("ИндексВМассиве", ВремИндекс);
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, Знач ДанныеДляЗаполнения = Неопределено)

	Разделитель			= Параметры.Разделитель;
	Уровень				= Параметры.Уровень;
	РасширеннаяВыгрузка	= Параметры.РасширеннаяВыгрузка;
	ФорматОбмена		= Параметры.ФорматОбмена;
	Источник			= Параметры.Источник;
	
	
	
	Если Уровень = "Номенклатура" Тогда
		
		ДанныеДляЗаполнения = Новый Структура;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(Источник.Наименование));
		
		// Иерархия
		Если ФорматОбмена <> 0 Тогда
			// КодРодительскойГруппы
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(Источник.КодГруппы, "ЧН=0; ЧГ=0"));
		КонецЕсли;
		// Артикул
		ДанныеДляЗаполнения.Вставить("Артикул", ПодготовитьСтроку(Источник.Артикул, 20));
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", "1");
		
		// КодНалога
		Если ФорматОбмена<4 Тогда
			ДанныеДляЗаполнения.Вставить("КодНалога", Формат(Источник.КодНалога, "ЧДЦ=; ЧГ=0"));
		Иначе
			ДанныеДляЗаполнения.Вставить("КодНалога", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь Тогда
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Источник.Алкоголь);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", Источник.Маркируемый);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", Источник.КодВидаАлкогольнойПродукции);
			// Емкость тары
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", Формат(Источник.ЕмкостьТары, "ЧДЦ=3; ЧГ=0"));
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", Формат(Источник.Крепость, "ЧГ=0"));
			// ИННПроизводителя
			ДанныеДляЗаполнения.Вставить("ИННПроизводителя", Источник.ИННПроизводителя);
			// КПППроизводителя
			ДанныеДляЗаполнения.Вставить("КПППроизводителя", Источник.КПППроизводителя);
		Иначе
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", "");
			// ИННПроизводителя
			ДанныеДляЗаполнения.Вставить("ИННПроизводителя", "");
			// КПППроизводителя
			ДанныеДляЗаполнения.Вставить("КПППроизводителя", "");
		КонецЕсли;
		
		// ВесовойТовар
		ДанныеДляЗаполнения.Вставить("ВесовойТовар", Источник.Весовой);
		// РазрешитьДробноеКоличество
		ДанныеДляЗаполнения.Вставить("РазрешитьДробноеКоличество", ?(Источник.Весовой, "1", "0"));
		
		Если Источник.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Упаковка");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекУпаковка);
				
				ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		ИначеЕсли Источник.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Источник.Характеристики Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Характеристика");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекХарактеристика);
				
				ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			
			Если ТипЗнч(Источник.Штрихкод) = Тип("Строка") Тогда
				
				Штрихкод = РазложитьШтрихкод(Источник.Штрихкод);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкод) = Тип("Массив") Тогда
				
				Штрихкод = "";
				Запятая = "";
				
				Для Каждого ТекШтрихкод Из Источник.Штрихкод Цикл
					
					Штрихкод = Штрихкод + Запятая + ТекШтрихкод;
					Запятая = ",";
					
				КонецЦикла;
				
			Иначе
				
				Штрихкод = "";
			КонецЕсли;
			
			// Штрихкод
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
		
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Источник.ИмеетУпаковки Тогда
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Упаковка");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекУпаковка);
				
				ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
			
			Если ТипЗнч(Источник.Штрихкод) = Тип("Строка") Тогда
				
				Штрихкод = РазложитьШтрихкод(Источник.Штрихкод);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкод) = Тип("Массив") Тогда
				
				Штрихкод = "";
				Запятая = "";
				
				Для Каждого ТекШтрихкод Из Источник.Штрихкод Цикл
					
					Штрихкод = Штрихкод + Запятая + ТекШтрихкод;
					Запятая = ",";
					
				КонецЦикла;
				
			Иначе
				
				Штрихкод = "";
			КонецЕсли;
			
			// Штрихкод
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		МассивСтрокУпаковок = Новый Массив;
		
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", Формат(1, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
		// Наименование
		ДанныеДляЗаполнения.Вставить("НаименованиеУпаковки", ПодготовитьСтроку(Источник.Наименование));
		// Код
		ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
		// Цена
		ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
		// Остаток
		ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
		
		Если ТипЗнч(Источник.Штрихкод) = Тип("Строка") Тогда
			
			Штрихкод = РазложитьШтрихкод(Источник.Штрихкод);
			
		ИначеЕсли ТипЗнч(Источник.Штрихкод) = Тип("Массив") Тогда
			
			Штрихкод = "";
			Запятая = "";
			
			Для Каждого ТекШтрихкод Из Источник.Штрихкод Цикл
				
				Штрихкод = Штрихкод + Запятая + ТекШтрихкод;
				Запятая = ",";
				
			КонецЦикла;
			
		Иначе
			
			Штрихкод = "";
		КонецЕсли;
			
		// Штрихкод
		ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
		
		ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, ЭтоГруппа = Ложь)
	
	// ФорматОбмена:
	// 0 - АТОЛ: РМК
	// 1 - Frontol 5
	// 2 - Frontol Win32 v.4.x
	// 3 - Frontol WinCE v.2.x
	// 4 - Frontol xPOS 1.6.x
	// 5 - Frontol xPOS 1.5.x
	// 6 - Frontol xPOS 1.7.x
	
	Наименование = ДанныеДляЗаполнения.Наименование;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеХарактеристики") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеХарактеристики;
	КонецЕсли;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеУпаковки") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеУпаковки;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		Строка =
			ДанныеДляЗаполнения.Код + Разделитель												// Код (1)
			+ Разделитель																		// Штрихкод (2)
			+ Наименование + Разделитель														// Наименование (3)
			+ Наименование + Разделитель														// Текст для чека (4)
			+ Разделитель																		// Цена (5)
			+ Разделитель																		// Остаток (6)
			+ Разделитель																		// Код группы условий скидки (7)
			+ Разделитель																		// Флаги через запятую (8)
			+ Разделитель																		// Минимальная цена (9)
			+ Разделитель																		// Срок годности (10)
			+ Разделитель																		// Код схемы разрезов (11)
			+ Разделитель																		// Вариант использования разрезов (12).
			+ Разделитель																		// Код схемы внешней автоматической скидки (13).
			+ Разделитель																		// Коэффициент (14)
			+ Разделитель																		// Код базового товара (15)
			+ ?(ФорматОбмена=0, "", ДанныеДляЗаполнения.КодРодительскойГруппы) + Разделитель	// Код родительской группы (16).
			+ "0" + Разделитель																	// Товар или группа: для товара «1» Товар или группа: для группы «0» (17).
			+ Разделитель																		// Номер уровня иерархического списка (18).
			+ Разделитель																		// Код значения первого разреза схемы с кодом «1» (19).
			+ Разделитель																		// Серия номенклатуры (20)
			+ Разделитель																		// Сертификат (21)
			+ Разделитель																		// Код ККМ (22)
			+ Разделитель																		// Код налоговой группы (23)
			+ Разделитель																		// Код весов с ПЭ (24)
			+ Разделитель																		// Код товара в весах ПЭ (25)
			+ Разделитель																		// Артикул (26)
			+ Разделитель																		// Тип скидки/надбавки: (27)
			+ Разделитель																		// Значение товарной скидки/надбавки (28)
			+ Разделитель																		// Максимальная скидка, % (29)
			+ Разделитель																		// Код принтера чеков (30)
			+ Разделитель																		// Файл *.bmp с картинкой (31)
			+ Разделитель																		// Описание (32)
			+ "";																					// Кратность количества (33)
			
	Иначе
		
		Флаги = 
				?(ДанныеДляЗаполнения.ВесовойТовар, "1", "0") + ","							// Дробное количество (весовой) (8.1)
				+ "1,"																		// Продажа (8.2)
				+ "1,"																		// Возврат (8.3)
				+ "0,"																		// Отрицательные остатки / Без ввода количества(8.4)
				+ ?(ФорматОбмена<>3, "0", ?(ДанныеДляЗаполнения.Цена=0, "1", "0")) + ","	// Без ввода количества / Редактирование цены (8.5)
				+ ?(ФорматОбмена=3, "1", "0") + ","											// Списание остатков / Ввод количества вручную(8.6)
				+ ?(ФорматОбмена=3, "", ?(ДанныеДляЗаполнения.Цена=0, "1", "0")) + ","		// Редактирование цены / Печать в чеке (8.7)
				+ ?(ФорматОбмена=3, "", "1");												// Ввод количества вручную / Скидки (8.8)
				
		Если ФорматОбмена > 0 Тогда
			
			Флаги = Флаги + ","
					+ ?(ФорматОбмена=3, "0", "") + ","	// Печатать в документе / Списание остатков (8.9)
					+ ?(ФорматОбмена=3, "0", "");		// Наливаемый товар / Отрицательные остатки(8.10)
					
		КонецЕсли;
		
		Строка =
			ДанныеДляЗаполнения.Код + Разделитель																// Код (1)
			+ ДанныеДляЗаполнения.Штрихкод + Разделитель														// Штрихкод (2)
			+ Наименование + Разделитель																		// Наименование (3)
			+ Наименование + Разделитель																		// Текст для чека (4)
			+ ДанныеДляЗаполнения.Цена + Разделитель															// Цена (5)
			+ ДанныеДляЗаполнения.Остаток + Разделитель															// Остаток (6)
			+ "" + Разделитель																					// Код группы условий скидки (7)
			+ Флаги + Разделитель																				// Флаги через запятую (8)
			+ "" + Разделитель																					// Минимальная цена (9)
			+ "" + Разделитель																					// Срок годности (10)
			+ "" + Разделитель																					// Код схемы разрезов (11)
			+ "" + Разделитель																					// Вариант использования разрезов (12).
			+ "" + Разделитель																					// Код схемы внешней автоматической скидки (13).
			+ ДанныеДляЗаполнения.Коэффициент + Разделитель														// Коэффициент (14)
			+ "" + Разделитель																					// Код базового товара (15)
			+ ?(ФорматОбмена=0, "", ДанныеДляЗаполнения.КодРодительскойГруппы) + Разделитель					// Код родительской группы (16).
			+ "1" + Разделитель																					// Товар или группа: для товара «1» Товар или группа: для группы «0» (17).
			+ "" + Разделитель																					// Номер уровня иерархического списка (18).
			+ "" + Разделитель																					// Код значения первого разреза схемы с кодом «1» (19).
			+ "" + Разделитель																					// Серия номенклатуры (20)
			+ "" + Разделитель																					// Сертификат (21)
			+ "" + Разделитель																					// Код ККМ (22)
			+ ?(ФорматОбмена<4, ДанныеДляЗаполнения.КодНалога, "") + Разделитель								// Код налоговой группы (23)
			+ "" + Разделитель																					// Код весов с ПЭ (24)
			+ ?(ДанныеДляЗаполнения.ВесовойТовар И ФорматОбмена<3, ДанныеДляЗаполнения.Код, "") + Разделитель	// Код товара в весах ПЭ (25)
			+ ДанныеДляЗаполнения.Артикул + Разделитель															// Артикул (26)
			+ "" + Разделитель																					// Тип скидки/надбавки: (27)
			+ "" + Разделитель																					// Значение товарной скидки/надбавки (28)
			+ "" + Разделитель																					// Максимальная скидка, % (29)
			+ "" + Разделитель																					// Код принтера чеков (30)
			+ "" + Разделитель																					// Файл *.bmp с картинкой (31)
			+ "" + Разделитель																					// Описание (32)
			+ "";																								// Кратность количества (33)
			
			Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 ИЛИ ФорматОбмена = 6 Тогда
				
				Строка = Строка + Разделитель
						+ Разделитель																				// Код ценника (34)
						+ Разделитель																				// Тип вознаграждения (35)
						+ Разделитель																				// Значение вознаграждения (36)
						+ Разделитель																				// Номер секции ККМ (37)
						+ Разделитель																				// ГТД (38)
						+ Разделитель																				// Код группы печати чека (39)
						+ Разделитель																				// Код группы печати копии (40)
						+ Разделитель																				// Код группы печати счета (41)
						+ Разделитель																				// Код группы печати марки (42)
						+ Разделитель																				// Код предприятия (43)
						+ Разделитель																				// Не используется (44)
						+ Разделитель																				// Номер сообщения в весах с ПЭ (45)
						+ Разделитель																				// Не используется (46)
						+ Разделитель																				// Значение флага «Визуальный выбор модификаторов при регистрации» (47)
						+ Разделитель																				// Левая граница допустимого суммарного удельного веса модификаторов (48)
						+ Разделитель																				// Правая граница допустимого суммарного удельного веса модификаторов (49)
						+ Разделитель																				// Текстовое сообщение для весов с ПЭ (50)
						+ Разделитель																				// Тип товара (51)
						+ Разделитель																				// Код тарифицируемой услуги (52)
						+ ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + Разделитель								// Код вида алкогольной или спиртосодержащей продукции (53)
						+ ДанныеДляЗаполнения.ЕмкостьТары + Разделитель												// Емкость тары в литрах (54)
						+ ?(ДанныеДляЗаполнения.Алкоголь, "1", "0") + Разделитель									// Алкогольная продукция (55)
						+ ?(ДанныеДляЗаполнения.Алкоголь И ДанныеДляЗаполнения.Маркируемый, "0", "1") + Разделитель	// Маркировка алкогольной продукции (56)
						+ ДанныеДляЗаполнения.Крепость + Разделитель												// Крепость алкогольной продукции (57)
						+ ДанныеДляЗаполнения.ИННПроизводителя + Разделитель										// ИНН производителя (58)
						+ ДанныеДляЗаполнения.КПППроизводителя;														// КПП производителя (59)
				
			КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ (ФорматОбмена = 0 И ЭтоГруппа) Тогда
		Файл.ДобавитьСтроку(Строка);
	КонецЕсли;
	
КонецПроцедуры

Функция РазложитьШтрихкод(Штрихкод)
	
	Штрихкод = СокрЛП(Штрихкод);
	
	СписокРазделителей = Новый Массив;
	
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(" ");
	
	Для Каждого Разделитель ИЗ СписокРазделителей Цикл
		
		Если Найти(Штрихкод, Разделитель) > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Штрихкод = СтрЗаменить(СокрЛП(Штрихкод), Разделитель, ",");
	
	Возврат Штрихкод;
	
КонецФункции

Функция ТипОперацииККМ(КодТипаОперации)
	
	Если КодТипаОперации = 0 Тогда
		Возврат "Продажа";
		
	ИначеЕсли КодТипаОперации = 1 Тогда
		Возврат "Возврат";
		
	ИначеЕсли КодТипаОперации = 2 Тогда
		Возврат "Аннулирование";
		
	ИначеЕсли КодТипаОперации = 3 Тогда
		Возврат "Обмен";
		
	ИначеЕсли КодТипаОперации = 4 Тогда
		Возврат "Внесение";
		
	ИначеЕсли КодТипаОперации = 5 Тогда
		Возврат "Выплата";
		
	ИначеЕсли КодТипаОперации = 6 Тогда
		Возврат "Пользовательская";
		
	ИначеЕсли КодТипаОперации = 8 Тогда
		Возврат "ОткрытиеСмены";
		
	ИначеЕсли КодТипаОперации = 9 Тогда
		Возврат "ОперацияВККМ";
		
	ИначеЕсли КодТипаОперации = 10 Тогда
		Возврат "ЗакрытиеСмены";
		
	ИначеЕсли КодТипаОперации = 11 Тогда
		Возврат "ЗакрСменыПлатСистем";
		
	ИначеЕсли КодТипаОперации = 12 Тогда
		Возврат "РедСпискаСотрудников";
		
	ИначеЕсли КодТипаОперации = 13 Тогда
		Возврат "СлужебнаяОперация";
		
	ИначеЕсли КодТипаОперации = 14 Тогда
		Возврат "Приход";
		
	ИначеЕсли КодТипаОперации = 15 Тогда
		Возврат "Расход";
		
	ИначеЕсли КодТипаОперации = 16 Тогда
		Возврат "Инвентаризация";
		
	ИначеЕсли КодТипаОперации = 17 Тогда
		Возврат "Переоценка";
		
	ИначеЕсли КодТипаОперации = 18 Тогда
		Возврат "ВскрытиеТары";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура УдалитьНеподдерживаемыеОперации(Чеки)
	
	КодОперацииПриход = 14;
	ОперацияПриход = ТипОперацииККМ(КодОперацииПриход);
	
	Индекс = Чеки.Количество() - 1;
	
	Пока Индекс > 0 Цикл
		
		Чек = Чеки[Индекс];
		
		Если Чек.ТипОперацииККМ = ОперацияПриход Тогда
			Чеки.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
