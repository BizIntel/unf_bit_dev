////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиКлиентСервер: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует текст гиперссылки для размещения в форме элемента справочника БанковскиеСчетаОрганизации.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, указанная в счете.
//  Банк  - СправочникСсылка.КлассификаторБанковРФ - банк, указанный в счете.
//
// Возвращаемое значение:
//   Строка - текст для гиперссылки.
//
Функция ЗаголовокНастройкиОбменаСБанком(Знач Организация, Знач Банк) Экспорт
	
	ТекущаяНастройка = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(Организация, Банк);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		Возврат(НСтр("ru = 'Подключить сервис 1С:ДиректБанк'"));
	Иначе
		РеквизитыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.РеквизитыНастройкиОбмена(ТекущаяНастройка);
		Если НЕ РеквизитыНастройкиОбмена.Недействительна И НЕ РеквизитыНастройкиОбмена.ПометкаУдаления Тогда
			Шаблон = НСтр("ru = 'Сервис 1С:ДиректБанк подключен'");
		Иначе
			Шаблон = НСтр("ru = 'Не подключен сервис 1С:ДиректБанк'");
		КонецЕсли;
		Возврат Шаблон;
	КонецЕсли
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - СправочникСсылка.НастройкиОбменСБанками, ДокументСсылка.СообщениеОбменСБанками - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить
//  Форма - УправляемаяФорма, Форма - форма в которой необходимо изменить текст состояния ЭДО.
//
// Возвращаемое значение:
//  Строка - текстовое представление версии электронного документа.
//
Функция ПолучитьТекстСостоянияЭД(СсылкаНаВладельца, Форма = Неопределено) Экспорт
	
	Гиперссылка = Ложь;
	ТекстСостоянияЭД = ОбменСБанкамиСлужебныйВызовСервера.ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка);
	
	Если НЕ Форма = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ТекстСостоянияЭДО", ТекстСостоянияЭД);
		СтруктураПараметров.Вставить("ВидОперации", "УстановкаГиперссылки");
		СтруктураПараметров.Вставить("ЗначениеПараметра", Гиперссылка);
		#Если  ТолстыйКлиентОбычноеПриложение Тогда
			ЭлектронноеВзаимодействиеПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#Иначе
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#КонецЕсли
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Подготавливает структуру для возврата данных обмена после получения новых документов из банка.
// Требуется для вызова процедуры ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЭДИзБанкаАсинхронныйОбмен.
// 
// Возвращаемое значение:
//  Структура - содержит следующие поля:
//   * ДанныеЭП - Соответствие - содержит данные электронных подписей, которые необходимо проверить на клиенте.
//   * КолПолученныхПакетов - Число - количество пакетов, которые были получены из банка.
//   * ПараметрОповещения - Соответствие - данные для оповещения прикладных решений.
//   * ЕстьОшибка - Булево - если вернулось значение Истина, то произошла ошибка.
//   * ТребуетсяПовторнаяАутентификация - Булево - если вернулось значение Истина, то сессия закончилась и требуется повторная аутентификация.
//   * МассивОповещений - Массив - оповещения, сформированные в переопределяемой части. Используется в зарплатном проекте.
//
Функция ПараметрыПолученияНовыхДокументовАсинхронныйОбмен() Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеЭП", Новый Соответствие);
	СтруктураВозврата.Вставить("КолПолученныхПакетов", 0);
	СтруктураВозврата.Вставить("ПараметрОповещения", Новый Соответствие);
	СтруктураВозврата.Вставить("ЕстьОшибка", Ложь);
	СтруктураВозврата.Вставить("ТребуетсяПовторнаяАутентификация", Ложь);
	СтруктураВозврата.Вставить("МассивОповещений", Новый Массив);
	
	Возврат СтруктураВозврата
	
КонецФункции

// Возвращает версию схемы XSD для асинхронного обмена с банком, которые гарантированно поддерживают все банки.
//
// Возвращаемое значение:
//    Строка - версия формата асинхронного обмена.
//
Функция БазоваяВерсияФорматаАсинхронногоОбмена() Экспорт
	
	Возврат "2.03";
	
КонецФункции

// Возвращает версию схемы XSD для асинхронного обмена с банком.
//
// Возвращаемое значение:
//    Строка - актуальная версия формата асинхронного обмена.
//
Функция АктуальнаяВерсияФорматаАсинхронногоОбмена() Экспорт
	
	Возврат "2.1.1";
	
КонецФункции

// Возвращает текущую версию формата для синхронного обмена
// 
// Возвращаемое значение:
//  Строка - версия формата
//
Функция ВерсияФорматаСинхронногоОбмена() Экспорт
	
	Возврат "1.08";
	
КонецФункции

// Определяет возможна ли работа с указанной версией внешней компоненты.
//
// Параметры:
//  Версия - Строка - версия загружаемой внешней компоненты.
// 
// Возвращаемое значение:
//  Булево - Истина, если указанная версия поддерживается, иначе Ложь.
//
Функция ПоддерживаетсяВерсияКомпонентыСбербанк(Версия) Экспорт

	МинимальнаяВерсия = "1.1.0.7";
	
	Если Версия < МинимальнаяВерсия Тогда
		ШаблонСообщения = НСтр("ru = 'Работа с внешним модулем не поддерживается. Необходимо загрузить более новую версию.
								|Текущая версия: %1.
								|Требуется версия: %2 или выше.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Версия, МинимальнаяВерсия);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Проверяет заполнение обязательных реквизитов настроек обмена с банками
//
// Параметры:
//  Объект  - СправочникОбъект.НастройкиОбменСБанками - проверяемая настройка.
//
// Возвращаемое значение:
//   Булево   - Истина - заполнены все необходимые реквизиты.
//
Функция ЗаполненыРеквизитыНастройкиОбмена(Объект, ЭтоТест = Ложь) Экспорт
	
	Отказ = Ложь;
	
	Если Не ЭтоТест И Объект.Недействительна Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если ЭтоТест И Объект.Недействительна Тогда
		ТекстСообщения = НСтр("ru = 'Для обмена по данной настройке необходимо снять флаг Недействительна'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Недействительна", "Объект");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект", Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
			"Поле", "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Банк", "Объект", Отказ);
	КонецЕсли;
		
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
			ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен"))
		И (НЕ ЗначениеЗаполнено(Объект.ИдентификаторОрганизации)
			ИЛИ Объект.ИдентификаторОрганизации = "00000000-0000-0000-0000-000000000000") Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
			"Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК"))
		И НЕ ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не загружен внешний модуль'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн")
		ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.АдресСервера) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
				"Поле", "Заполнение", НСтр("ru = 'Адрес сервера банка'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", "Объект", Отказ);
		КонецЕсли;
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.РесурсИсходящихДокументов) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
					"Поле", "Заполнение", НСтр("ru = 'Ресурс для отправки'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РесурсИсходящихДокументов", "Объект", Отказ);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.РесурсВходящихДокументов) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
					"Поле", "Заполнение", НСтр("ru = 'Ресурс для получения'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РесурсВходящихДокументов", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
		И ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда
		Попытка
			Идентификатор = Новый УникальныйИдентификатор(Объект.ИдентификаторОрганизации);
		Исключение
			ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
				"Поле", "Корректность", НСтр("ru = 'Идентификатор организации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации", "Объект", Отказ);
		КонецПопытки
	КонецЕсли;
		
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			ИЛИ Объект.ИспользуетсяКриптография) И Объект.СертификатыПодписейОрганизации.Количество() = 0 Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
			"Список", "Заполнение", , , НСтр("ru = 'Сертификаты ключа электронной подписи'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СертификатыПодписейОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти