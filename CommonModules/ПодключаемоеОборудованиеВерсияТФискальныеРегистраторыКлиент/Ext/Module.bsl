
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	ПараметрыПодключения.Вставить("РегистрационныйНомерККМ", "0");
	ПараметрыПодключения.Вставить("СерийныйНомерККМ", "0");
	ПараметрыПодключения.Вставить("ИДУстройства", "");

	ВыходныеПараметры = Новый Массив();

	// Проверка параметров устройства.
	Порт                       = Неопределено;
	Скорость                   = Неопределено;
	Таймаут                    = Неопределено;
	СетевойНомер               = Неопределено;
	ПарольУстройства           = Неопределено;
	ПарольПользователя         = Неопределено;
	ПарольАдминистратора       = Неопределено;
	ОтменятьЧекПриПодключении  = Неопределено;
	НаименованиеОплаты1        = Неопределено;
	НаименованиеОплаты2        = Неопределено;
	НомерСекции                = Неопределено;
	КодСимволаЧастичногоОтреза = Неопределено;
	ЖурналОперацийДрайвера     = Неопределено;
	СовместимыеВерсии          = Неопределено;

	Параметры.Свойство("Порт"                      , Порт);
	Параметры.Свойство("Скорость"                  , Скорость);
	Параметры.Свойство("Таймаут"                   , Таймаут);
	Параметры.Свойство("ПарольПользователя"        , ПарольПользователя);
	Параметры.Свойство("ПарольАдминистратора"      , ПарольАдминистратора);
	Параметры.Свойство("ОтменятьЧекПриПодключении" , ОтменятьЧекПриПодключении);
	Параметры.Свойство("НаименованиеОплаты1"       , НаименованиеОплаты1);
	Параметры.Свойство("НаименованиеОплаты2"       , НаименованиеОплаты2);
	Параметры.Свойство("НомерСекции"               , НомерСекции);
	Параметры.Свойство("КодСимволаЧастичногоОтреза", КодСимволаЧастичногоОтреза);
	Параметры.Свойство("ЖурналОперацийДрайвера"    , ЖурналОперацийДрайвера);

	Если Порт                       = Неопределено
	 Или Скорость                   = Неопределено
	 Или Таймаут                    = Неопределено
	 Или ПарольПользователя         = Неопределено
	 Или ПарольАдминистратора       = Неопределено
	 Или ОтменятьЧекПриПодключении  = Неопределено
	 Или НаименованиеОплаты1        = Неопределено
	 Или НаименованиеОплаты2        = Неопределено
	 Или НомерСекции                = Неопределено
	 Или КодСимволаЧастичногоОтреза = Неопределено
	 Или ЖурналОперацийДрайвера     = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = Ложь;
	КонецЕсли;
	// Конец проверки параметров устройства.

	Если Результат Тогда
		мНДС = Новый Массив();
		мНДС.Добавить(18.00);
		мНДС.Добавить(10.00);
		мНДС.Добавить(20.00);
		мНДС.Добавить(0);

		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(Параметры.Порт);
		МассивЗначений.Добавить(Параметры.Скорость);
		МассивЗначений.Добавить(Параметры.СетевойНомер);
		МассивЗначений.Добавить(Параметры.ПарольУстройства);
		МассивЗначений.Добавить(Параметры.Таймаут);
		МассивЗначений.Добавить(Строка(Параметры.ПарольПользователя));
		МассивЗначений.Добавить(Строка(Параметры.ПарольАдминистратора));
		МассивЗначений.Добавить(ПараметрыПодключения.РегистрационныйНомерККМ);
		МассивЗначений.Добавить(ПараметрыПодключения.СерийныйНомерККМ);
		МассивЗначений.Добавить(мНДС[0]);
		МассивЗначений.Добавить(мНДС[1]);
		МассивЗначений.Добавить(мНДС[2]);
		МассивЗначений.Добавить(мНДС[3]);
		МассивЗначений.Добавить(Параметры.НаименованиеОплаты1);
		МассивЗначений.Добавить(Параметры.НаименованиеОплаты2);
		МассивЗначений.Добавить(Параметры.ЖурналОперацийДрайвера);

		Если НЕ ОбъектДрайвера.Подключить(МассивЗначений, ПараметрыПодключения.ИДУстройства) Тогда
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			КодОшибки = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = Ложь;
		Иначе
			ПараметрыПодключения.РегистрационныйНомерККМ = МассивЗначений[7];
			ПараметрыПодключения.СерийныйНомерККМ        = МассивЗначений[8];
			Если Параметры.ОтменятьЧекПриПодключении Тогда
				ОбъектДрайвера.ОтменитьЧек(ПараметрыПодключения.ИДУстройства);
			КонецЕсли;

			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Ложь;

	// Обязательные выходные
	ВыходныеПараметры = Новый Массив();

	Если НЕ ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства) Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
	
	// Открыть смену
	Если Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Закрыть кассовую смену
	ИначеЕсли Команда = "CloseShift" ИЛИ Команда = "ЗакрытьСмену" Тогда
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать по шаблону
	ИначеЕсли Команда = "PrintReceiptByTemplate" ИЛИ Команда = "ПечатьЧекаПоШаблону" Тогда
		Результат = ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
		Результат = ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	//  Аннулирование чека
	ИначеЕсли Команда = "AnnulCheck" ИЛИ Команда = "АннулироватьЧек" Тогда
		ТипЧека       = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста   = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                         СтрокаТекста, ВыходныеПараметры);
	// Отменить открытый чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		ТипИнкассации = ВходныеПараметры[0];
		Сумма         = ВходныеПараметры[1];
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда
		ТипШтрихКода = ВходныеПараметры[0];
		ШтрихКод     = ВходныеПараметры[1];
		Результат = ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры);
		
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах.
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Функция осуществляет открытие смены.
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	// Заполнение выходных параметров.
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());

	Возврат Результат;

КонецФункции

// Осуществляет печать чека по шаблону.
//
Функция ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	       
	Возврат МенеджерОборудованияКлиент.ПечатьЧекаПоШаблону(ПодключаемоеОборудованиеВерсияТФискальныеРегистраторыКлиент,
		ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
КонецФункции

// Осуществляет аннулирование чека.
//
Функция АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры) 
	
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
	Если Результат Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;
		
	Возврат Результат;           
	
КонецФункции

// Осуществляет печать слип чека.
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт

	Результат  = Истина;

	// Открываем чек
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);

	// Печатаем строки чека
	Если Результат Тогда
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			Если (Найти(ВыделеннаяСтрока, Символ(Параметры.КодСимволаЧастичногоОтреза)) > 0)
				Или (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				ТаблицаОплат = Новый Массив();
				Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
				Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
			Иначе
				Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                     ВыделеннаяСтрока, ВыходныеПараметры) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Закрываем чек
	Если Результат Тогда
		ТаблицаОплат = Новый Массив();
		Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры) Экспорт

	Результат  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;

	// Открываем чек
	Результат = ОбъектДрайвера.ОткрытьЧек(ПараметрыПодключения.ИДУстройства, ФискальныйЧек, ЧекВозврата,
	                                      Истина, НомерЧека, НомерСмены);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерЧека);
		ВыходныеПараметры.Добавить(0); // Номер документа
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать фискальной строки.
//
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, Сумма,
                                   НомерСекции, СтавкаНДС, ВыходныеПараметры) Экспорт

	Результат = Истина;

	Результат = ОбъектДрайвера.НапечататьФискСтроку(ПараметрыПодключения.ИДУстройства, Наименование, Количество, Цена,
	                                                Сумма, НомерСекции, СтавкаНДС);
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать нефискальной строки.
//
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт

	Результат = Истина;

	Результат = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
//
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт

	Результат = Истина;

	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;

	Результат = ОбъектДрайвера.ЗакрытьЧек(ПараметрыПодключения.ИДУстройства,
	                                      СуммаНаличнойОплаты,
	                                      СуммаБезналичнойОплаты1,
	                                      СуммаБезналичнойОплаты2);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ОбъектДрайвера.ОтменитьЧек(ПараметрыПодключения.ИДУстройства);

	Возврат Результат;

КонецФункции

// Функция осуществляет внесение или выемку суммы на ФР.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры)

	Результат = Истина;

	Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства,
	                           ?(ТипИнкассации = 1, Сумма, -Сумма));
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОшибки = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчета без гашения.
//
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчета с гашением.
//
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Результат = ОбъектДрайвера.НапечататьОтчетСГашением(ПараметрыПодключения.ИДУстройства);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать штрихкода.
//
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	СтрокаТекста = НСтр("ru='ШТРИХКОД:'") + ШтрихКод; 
	Результат = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие денежного ящика.
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка
		Результат = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""Открыть денежный ящик"" не поддерживается данным драйвером.'"));
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ШиринаСтроки = 40;
	ВыходныеПараметры.Очистить();  
	ВыходныеПараметры.Добавить(ШиринаСтроки);
	Возврат Результат;
	
КонецФункции

// Функция осуществляет снятие отчета без гашения.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	РезультатТеста = "";

	РегистрационныйНомерККМ = "0";
	СерийныйНомерККМ = "0";

	мНДС = Новый Массив();
	мНДС.Добавить(18.00);
	мНДС.Добавить(10.00);
	мНДС.Добавить(20.00);
	мНДС.Добавить(0);

	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Параметры.Порт);
	МассивЗначений.Добавить(Параметры.Скорость);
	МассивЗначений.Добавить(Параметры.СетевойНомер);
	МассивЗначений.Добавить(Параметры.ПарольУстройства);
	МассивЗначений.Добавить(Параметры.Таймаут);
	МассивЗначений.Добавить(Строка(Параметры.ПарольПользователя));
	МассивЗначений.Добавить(Строка(Параметры.ПарольАдминистратора));
	МассивЗначений.Добавить(РегистрационныйНомерККМ);
	МассивЗначений.Добавить(СерийныйНомерККМ);
	МассивЗначений.Добавить(мНДС[0]);
	МассивЗначений.Добавить(мНДС[1]);
	МассивЗначений.Добавить(мНДС[2]);
	МассивЗначений.Добавить(мНДС[3]);
	МассивЗначений.Добавить(Параметры.НаименованиеОплаты1);
	МассивЗначений.Добавить(Параметры.НаименованиеОплаты2);
	МассивЗначений.Добавить(Параметры.ЖурналОперацийДрайвера);

	Результат = ОбъектДрайвера.ТестУстройства(МассивЗначений, РезультатТеста);

	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	ВыходныеПараметры.Добавить(РезультатТеста);

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

#КонецОбласти