////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись в модели сервиса".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

Процедура ПодключитьОбработчикПроверкиЗаявлений(Интервал = Неопределено) Экспорт
	
	Если Интервал = Неопределено Тогда
		Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
			Интервал = 15;
		Иначе
			Интервал = 600;
		КонецЕсли;
	КонецЕсли;
	
	ОтключитьОбработчикПроверкиЗаявлений();
	// Подключаем однократно.
	// Внутри процедуры по результату проверки будет принято решение, включить ли его еще раз или нет.
	ПодключитьОбработчикОжидания("СообщитьОбОдобренныхЗаявленияхАбонента", Интервал, Истина);
	
КонецПроцедуры

Процедура ОтключитьОбработчикПроверкиЗаявлений() Экспорт
	
	ОтключитьОбработчикОжидания("СообщитьОбОдобренныхЗаявленияхАбонента");
	
КонецПроцедуры

Процедура ОбновитьСтатусЗаявленияАбонента(ОписаниеОповещения, Форма, ДокументЗаявление) Экспорт

	// Обновляем состояние заявление
	// Статус не проверяем, так как при ненужном статусе не будет кнопки "Обновить" статус.
	ОбновитьСтатусыЗаявленийАбонентов(ДокументЗаявление, Форма.УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОбновитьСтатусыЗаявленийАбонентов(
		ДокументЗаявление 			= Неопределено,
		ИдентификаторФормыВладельца = "", 
		ВыполняемоеОповещение 		= Неопределено,
		ОрганизацияЗаявлений 		= Неопределено) Экспорт
	
	ЗаявленияАбонентов = ОбработкаЗаявленийАбонентаВызовСервера.ОтправленныеЗаявленияАбонентов(
		ДокументЗаявление, ОрганизацияЗаявлений);
		
	Если ЗаявленияАбонентов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствуют отправленные заявления'"));
		Возврат;
	КонецЕсли;
	
	НомерЗаявления = 0;
	ПолучитьОтветНаСледующееЗаявлениеАбонента(
		НомерЗаявления,
		ЗаявленияАбонентов,
		ИдентификаторФормыВладельца, 
		ВыполняемоеОповещение);
	
КонецПроцедуры

Процедура ВключитьАвтоматическуюПроверкуСтатуса(ДокументЗаявление) Экспорт
	
	// Запускаем на сервере регламентное задание 
	ОбработкаЗаявленийАбонентаВызовСервера.ВключитьОтслеживаниеИзмененияСтатусаЗаявления(ДокументЗаявление);
	// Отслеживаем, вдруг у заявления изменился статус - тогда надо показать сообщение пользователю.
	ОбработкаЗаявленийАбонентаКлиент.ПодключитьОбработчикПроверкиЗаявлений();
	
КонецПроцедуры

Процедура СообщитьОСледующемОдобренномЗаявлении(Результат, ВходящийКонтекст) Экспорт

	Если ЗначениеЗаполнено(Результат) 
		И ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ПодключитьЭДО") Тогда
		
		// Отключаем обработчик ожидания автоматической проверки состояний заявлений по таймеру, 
		// чтобы поверх формы 1С-ЭДО не открылась форма предупреждения об изменениии статуса заявления.
		// После закрытия формы мастера 1С-ЭДО управление передастся во вторую ветку (см. ветку ниже) и 
		// обработчик ожидания подключится снова.
		ОбработкаЗаявленийАбонентаКлиент.ОтключитьОбработчикПроверкиЗаявлений();
		
		ВыполняемоеОповещение = Новый ОписаниеОповещения("СообщитьОСледующемОдобренномЗаявлении", ЭтотОбъект, ВходящийКонтекст);
		ПодключитьсяК1СЭДО(Результат, ВыполняемоеОповещение);
			
	Иначе

		СообщитьОбОдобренныхЗаявленияхАбонента();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыОповещения(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СтруктураПараметров = Результат;
		КонтекстЭДОКлиент   = Результат.КонтекстЭДОКлиент;
		Результат.Удалить("КонтекстЭДОКлиент");
		
		// Описание используется для того, чтобы после закрытия мастера
		// мы запустили проверку наличия следующего заявления, готового
		// для показа пользователю.
		// Процедура, вызываемая после закрытия мастера, находится в общем модуле,
		// так как к моменту закрытия формы мастера эта форма тоже будет уже закрыта.
		ОписаниеОповещенияСледующегоЗаявления = Новый ОписаниеОповещения(
			"СообщитьОСледующемОдобренномЗаявлении", 
			ОбработкаЗаявленийАбонентаКлиент);
		
		ОткрытьФорму(
			КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаПодключениеНастройкаПрограммы", 
			СтруктураПараметров,
			,
			,
			,
			,
			ОписаниеОповещенияСледующегоЗаявления);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьОтветНаСледующееЗаявлениеАбонента(
		НомерЗаявления,
		ЗаявленияАбонентов,
		ИдентификаторФормыВладельца, 
		ВыполняемоеОповещение)

	Если НомерЗаявления + 1 > ЗаявленияАбонентов.Количество() Тогда
			
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("НомерЗаявления", 				НомерЗаявления);
		ДополнительныеПараметры.Вставить("ЗаявленияАбонентов", 			ЗаявленияАбонентов);
		ДополнительныеПараметры.Вставить("ИдентификаторФормыВладельца", ИдентификаторФормыВладельца);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 		ВыполняемоеОповещение);
		
		ПолучитьОтветНаЗаявлениеАбонентаВЦикле(Истина, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветНаЗаявлениеАбонентаВЦикле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗаявления 					= ДополнительныеПараметры.НомерЗаявления;
	ЗаявленияАбонентов 				= ДополнительныеПараметры.ЗаявленияАбонентов;	
	ИдентификаторФормыВладельца 	= ДополнительныеПараметры.ИдентификаторФормыВладельца;
	ВыполняемоеОповещение 			= ДополнительныеПараметры.ВыполняемоеОповещение;
	
	ДокументЗаявление	= ЗаявленияАбонентов[НомерЗаявления];
	РеквизитыДокумента	= ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьСтруктуруРеквизитовЗаявления(ДокументЗаявление);
	ДополнительныеПараметры.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	
	// Для заявления с ЭП в модели сервиса обязательно нужно сначала получить идентификатор ключевого контейнера.
	Если РеквизитыДокумента.ЭлектроннаяПодписьВМоделиСервиса Тогда
		
		ЗаявлениеОбработано = ОбработкаЗаявленийАбонентаВызовСервера.ОбработатьИзменениеСтатусаЗаявленияАбонентаВМоделиСервиса(ДокументЗаявление);
		
		Если ЗаявлениеОбработано Тогда
			// Обновляем структуру реквизитов в доп. параметрах после обращения к серверу.
			РеквизитыДокумента	= ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьСтруктуруРеквизитовЗаявления(ДокументЗаявление);
			ДополнительныеПараметры.Вставить("РеквизитыДокумента", РеквизитыДокумента);
		Иначе
			СообщитьОбОтсуствииИзмененияВСтатусеИПолучитьОтветНаСледующееЗаявление(ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	// Получаем ответ от сервера.
	Если РеквизитыДокумента.ЭлектроннаяПодписьВМоделиСервиса 
		И РеквизитыДокумента.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда
		
		РезультатОтветаСервера = Новый Структура;
		РезультатОтветаСервера.Вставить("ОтпечатокСертификатаИзОтвета", "");
		РезультатОтветаСервера.Вставить("ИдентификаторАбонента", 		"");
		РезультатОтветаСервера.Вставить("СтатусИзменился", 				Истина);
		РезультатОтветаСервера.Вставить("Статус", 						РеквизитыДокумента.Статус);
		
	Иначе
		
		РезультатОтветаСервера = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьИРазобратьОтветНаЗаявление(ДокументЗаявление,,,Истина);
		
		ПолученОтветНаЗаявление = РезультатОтветаСервера.Выполнено;
		ПовторятьСоединение 	= РезультатОтветаСервера.ПовторятьСоединение;
		
		Если НЕ ПолученОтветНаЗаявление И ПовторятьСоединение Тогда
			СообщитьОбОтсуствииИнтернета(ДополнительныеПараметры);
			Возврат;
		КонецЕсли;

		// Обновляем структуру реквизитов в доп. параметрах после обращения к серверу.
		РеквизитыДокумента	= ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьСтруктуруРеквизитовЗаявления(ДокументЗаявление);
		ДополнительныеПараметры.Вставить("РеквизитыДокумента", РеквизитыДокумента);
		
	КонецЕсли;
	
	ЭтоЗаявлениеНеОбработаноПользователем = НЕ РеквизитыДокумента.НастройкаЗавершена
		И (РеквизитыДокумента.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено")
		ИЛИ РеквизитыДокумента.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено"));
	
	Если НЕ РезультатОтветаСервера.СтатусИзменился И НЕ ЭтоЗаявлениеНеОбработаноПользователем Тогда
		СообщитьОбОтсуствииИзмененияВСтатусеИПолучитьОтветНаСледующееЗаявление(ДополнительныеПараметры);
	Иначе
		ОткрытьМастерДляЗавершенияНастройкиЗаявления(РезультатОтветаСервера, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОбОтсуствииИнтернета(ДополнительныеПараметры)
	
	ОписаниеОшибки 		= НСтр("ru = 'Не удалось обратиться к серверу обновлений'");
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ПолучитьОтветНаЗаявлениеАбонентаВЦикле", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьДиалогОшибкиДоступаВИнтернет(ОписаниеОшибки, ОписаниеОповещения);

КонецПроцедуры

Процедура СообщитьОбОтсуствииИзмененияВСтатусеИПолучитьОтветНаСледующееЗаявление(ДополнительныеПараметры)
	
	НомерЗаявления 					= ДополнительныеПараметры.НомерЗаявления;
	ЗаявленияАбонентов 				= ДополнительныеПараметры.ЗаявленияАбонентов;	
	ИдентификаторФормыВладельца 	= ДополнительныеПараметры.ИдентификаторФормыВладельца;
	ВыполняемоеОповещение 			= ДополнительныеПараметры.ВыполняемоеОповещение;
	РеквизитыДокумента				= ДополнительныеПараметры.РеквизитыДокумента;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Статус заявления %1 от %2 не изменился'"),
		РеквизитыДокумента.Номер,
		Формат(РеквизитыДокумента.Дата,"ДФ=dd.MM.yyyy"));
		
	ДокументооборотСКОКлиентСервер.СообщитьПользователю(ТекстСообщения, ИдентификаторФормыВладельца);
	
	ПолучитьОтветНаСледующееЗаявлениеАбонента(
		НомерЗаявления + 1,
		ЗаявленияАбонентов,
		ИдентификаторФормыВладельца,
		ВыполняемоеОповещение);

КонецПроцедуры

Процедура ОткрытьМастерДляЗавершенияНастройкиЗаявления(РезультатОтветаСервера, ВходящийКонтекст)
	
	ВходящийКонтекст.Вставить("РезультатОтветаСервера", РезультатОтветаСервера);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМастерПослеПолученияКонтекста", ЭтотОбъект, ВходящийКонтекст);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры
	
Процедура ОткрытьМастерПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	НомерЗаявления 			= ВходящийКонтекст.НомерЗаявления;
	ЗаявленияАбонентов 		= ВходящийКонтекст.ЗаявленияАбонентов;
	РезультатОтветаСервера 	= ВходящийКонтекст.РезультатОтветаСервера;
	
	ДокументЗаявление = ЗаявленияАбонентов[НомерЗаявления];
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Ключ",							ДокументЗаявление);
	СтруктураПараметров.Вставить("СтруктураРеквизитовДокумента", 	ДокументЗаявление); 
	СтруктураПараметров.Вставить("ИдентификаторАбонента", 			РезультатОтветаСервера.ИдентификаторАбонента);
	СтруктураПараметров.Вставить("НовыйСтатусДокумента", 			РезультатОтветаСервера.Статус);
	СтруктураПараметров.Вставить("ОтпечатокСертификатаИзОтвета", 	РезультатОтветаСервера.ОтпечатокСертификатаИзОтвета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьОтветНаСледующееЗаявлениеПослеЗакрытияМастера", ЭтотОбъект, ВходящийКонтекст);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаПодключениеНастройкаПрограммы",
		СтруктураПараметров,,,,,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	

Процедура ПолучитьОтветНаСледующееЗаявлениеПослеЗакрытияМастера(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) 
		И ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ПодключитьЭДО") Тогда
		
		ВыполняемоеОповещение = Новый ОписаниеОповещения("ПолучитьОтветНаСледующееЗаявлениеПослеЗакрытияМастера", ЭтотОбъект, ДополнительныеПараметры);
		ПодключитьсяК1СЭДО(Результат, ВыполняемоеОповещение);
			
	Иначе
	
		НомерЗаявления 					= ДополнительныеПараметры.НомерЗаявления;
		ЗаявленияАбонентов 				= ДополнительныеПараметры.ЗаявленияАбонентов;
		ИдентификаторФормыВладельца 	= ДополнительныеПараметры.ИдентификаторФормыВладельца;
		ВыполняемоеОповещение 			= ДополнительныеПараметры.ВыполняемоеОповещение;
		
		ПолучитьОтветНаСледующееЗаявлениеАбонента(
			НомерЗаявления + 1,
			ЗаявленияАбонентов,
			ИдентификаторФормыВладельца,
			ВыполняемоеОповещение);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьсяК1СЭДО(Результат, ВыполняемоеОповещение)
	
	// Есть возвращаемый результат - требуется выполнить подключение ЭДО
	ПодключитьЭДО 					= Результат.ПодключитьЭДО; 
	Организация 					= Результат.Организация; 
	ПараметрыЗапускаПодключениеЭДО 	= Результат.ПараметрыЗапускаПодключениеЭДО; 
	
	Если ПодключитьЭДО Тогда
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуПодключенияКСервисуЭлектронныхДокументов(
			Организация, ПараметрыЗапускаПодключениеЭДО, ВыполняемоеОповещение);
		
	КонецЕсли;

КонецПроцедуры
 

#КонецОбласти

