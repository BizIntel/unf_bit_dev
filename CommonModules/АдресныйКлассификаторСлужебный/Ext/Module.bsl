////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адресный классификатор".
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Проверка доступности поставщика - локальной базы или сервиса.
// 
// Возвращаемое значение:
//     Структура - описание состояния.
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - Строка - Описание версии поставщика.
//
Функция ВерсияПоставщикаДанных() Экспорт
	
	Результат = Новый Структура("Данные");
	СтруктураОписанияОшибкиПоставщика(Результат);
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		// Локальное, доступно всегда
		ЗаполнитьВерсиюПоставщикаДанныхВнутр(Результат)
		
	ИначеЕсли Источник = "Сервис1С" Тогда
		// Веб сервис 1С, может быть на обслуживании.
		Попытка
			ЗаполнитьВерсиюПоставщикаДанныхСервис1С(Результат);
		Исключение
			СтруктураОписанияОшибкиПоставщика(Результат, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,,
				Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает описание последней загрузки классификатора.
//
// Возвращаемое значение:
//     Структура - содержит поля:
//         * ДатаПоследнейЗагрузки              - Дата   - Дата последней загрузки (часовой пояс сеанса).
//         * УниверсальнаяДатаПоследнейЗагрузки - Дата   - Дата последней загрузки (UTC).
//         * ДнейНазад                          - Число  - Количество дней от последней загрузки.
//         * Представление                      - Строка - Описание, например "Адресный классификатор был загружен
//                                                         сегодня.";
//         * НеобходимоОбновление               - Булево - Истина, если количество дней от последней загрузки превышает
//                                                         период актуальности.
//
Функция ОписаниеПоследнейЗагрузки(ИдентификаторРегиона = Неопределено) Экспорт

	Результат = Новый Структура("ДнейНазад, ДатаПоследнейЗагрузки, УниверсальнаяДатаПоследнейЗагрузки, Представление, НеобходимоОбновление");
	Запрос = Новый Запрос();
	
	// Определяем дату последней загрузки.
	Если ЗначениеЗаполнено(ИдентификаторРегиона) Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ЗагруженныеВерсииАдресныхСведений.ДатаВерсии, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗагрузки
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|		ПРАВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗагруженныеВерсииАдресныхСведений КАК ЗагруженныеВерсииАдресныхСведений
		|		ПО АдресныеОбъекты.КодСубъектаРФ = ЗагруженныеВерсииАдресныхСведений.КодСубъектаРФ
		|	ГДЕ АдресныеОбъекты.Идентификатор = &ИдентификаторРегиона
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВерсии";
		Запрос.УстановитьПараметр("ИдентификаторРегиона", ИдентификаторРегиона);
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ЗагруженныеВерсииАдресныхСведений.ДатаВерсии, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗагрузки
		|ИЗ
		|	РегистрСведений.ЗагруженныеВерсииАдресныхСведений КАК ЗагруженныеВерсииАдресныхСведений
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗагрузки УБЫВ";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаПоследнейЗагрузки = Выборка.ДатаЗагрузки;
	Иначе
		Результат.НеобходимоОбновление = Ложь;
		Результат.Представление        = НСтр("ru = 'Адресный классификатор еще не загружался.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.УниверсальнаяДатаПоследнейЗагрузки = ДатаПоследнейЗагрузки;
	Результат.ДатаПоследнейЗагрузки              = МестноеВремя(ДатаПоследнейЗагрузки, ЧасовойПоясСеанса());
	
	НачалоПериода = НачалоДня(ТекущаяУниверсальнаяДата());
	КонецПериода  = НачалоДня(ДатаПоследнейЗагрузки);
	ДнейРазницы = Цел((НачалоПериода - КонецПериода) / 86400);

	Если ДнейРазницы = 0 Тогда
		Представление = НСтр("ru = 'Адресный классификатор был загружен сегодня.'");
		
	ИначеЕсли ДнейРазницы = 1 Тогда
		Представление = НСтр("ru = 'Адресный классификатор был загружен вчера.'");
			
	ИначеЕсли ДнейРазницы = 2 Тогда
		Представление = НСтр("ru = 'Адресный классификатор был загружен позавчера.'");
			
	ИначеЕсли ДнейРазницы > 2 Тогда
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Адресный классификатор был загружен %1 назад.'"),
			ОбщегоНазначения.ИнтервалВремениСтрокой(КонецПериода, НачалоПериода));
	КонецЕсли;
	
	Результат.НеобходимоОбновление = ДнейРазницы > 30; // 1 месяц
	Результат.ДнейНазад            = ДнейРазницы;
	Результат.Представление        = Представление;
	
	Возврат Результат;
КонецФункции

// Возвращает данные классификатора по почтовому индексу.
//
// Параметры:
//     Индекс                  - Число     - Почтовый индекс, для которого необходимо получать данные.
//     ДополнительныеПараметры - Структура - Описание настроек поиска. Поля:
//         * ФорматАдреса - Строка - тип используемого классификатора.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * ОбщаяЧастьПредставления      - Строка - Общая часть представлений адреса.
//       * Данные                       - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//             ** Неактуален    - Булево - Флаг неактуальности строки данных.
//             ** Идентификатор - УникальныйИдентификатор - Код классификатора для поиска вариантов по индексу.
//             ** Представление - Строка - Представление варианта.
//
Функция АдресаПоПочтовомуИндексуКлассификатора(Индекс, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура("Данные, ОбщаяЧастьПредставления", ТаблицаДанныхДляВыбораПоПочтовомуИндексу() );
	СтруктураОписанияОшибкиПоставщика(Результат);

	Вариант = ДополнительныеПараметры.ФорматАдреса;
	Если Вариант = "КЛАДР" Тогда
		Уровни = АдресныйКлассификаторПовтИсп.УровниКлассификатораКЛАДР();
		
	ИначеЕсли Вариант = "ФИАС" Тогда
		Уровни = АдресныйКлассификаторПовтИсп.УровниКлассификатораФИАС();
		
	Иначе
		Возврат Результат;
		
	КонецЕсли;
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		// Локальное, всегда корректное.
		ЗаполнитьАдресаПоПочтовомуИндексуКлассификатораВнутр(Результат, Индекс, Уровни, ДополнительныеПараметры);
		
	ИначеЕсли Источник = "Сервис1С" Тогда
		// Веб сервис 1С, может быть на обслуживании.
		Попытка
			ЗаполнитьАдресаПоПочтовомуИндексуКлассификатораСервис1С(Результат, Индекс, Уровни);
		Исключение
			СтруктураОписанияОшибкиПоставщика(Результат, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Ищет в адресном классификаторе по загруженным регионам код субъекта РФ по почтовому индексу.
//
// Параметры:
//  ПочтовыйИндекс - Число - почтовый индекс.
// 
// Возвращаемое значение:
//  Число - Код субъекта РФ, где расположен этот почтовый индекс. Неопределенно - если код не найден.
//
Функция КодСубъектаРФПоПочтовомуИндексуВКлассификаторе(ПочтовыйИндекс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|ГДЕ
		|	АдресныеОбъекты.ПочтовыйИндекс = &ПочтовыйИндекс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДомаЗданияСтроения.КодСубъектаРФ
		|ИЗ
		|	РегистрСведений.ДомаЗданияСтроения КАК ДомаЗданияСтроения
		|ГДЕ
		|	ДомаЗданияСтроения.ПочтовыйИндекс = &ПочтовыйИндекс";
	
	Запрос.УстановитьПараметр("ПочтовыйИндекс", ПочтовыйИндекс);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(РезультатЗапроса.КодСубъектаРФ) Тогда;
			Возврат РезультатЗапроса.КодСубъектаРФ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

// Определить регион по индексу.
//
// Параметры:
//  Индекс - Строка - Почтовый индекс определимого региона.
// 
// Возвращаемое значение:
//  Структура - Код и наименование региона, Неопределенно - если регион не найден.
//    * КодСубъектаРФ - Число - код субъекта РФ.
//    * Представление - Строка - представление субъекта РФ.
//
Функция ОпределитьРегионПоИндексу(Индекс) Экспорт
	Сведения = СведенияОСубъектахРФ();
	Результат = Новый Структура("Представление, КодСубъектаРФ");
	
	ПервыйТриЦифрыИндекса = Число(Лев(Индекс, 3));
	Для каждого Регион Из Сведения Цикл
		ДиапазонПочтовыхИндексов = Регион.ДиапазонПочтовыхИндексов;
		Диапазоны = СтрРазделить(ДиапазонПочтовыхИндексов, ",");
		Для каждого Диапазон Из Диапазоны Цикл
			Интервалы = СтрРазделить(Диапазон, "-");
			Если Интервалы.Количество() = 1 Тогда
				Если Число(Интервалы[0]) = ПервыйТриЦифрыИндекса Тогда
					Результат.КодСубъектаРФ = Регион.КодСубъектаРФ;
					Результат.Представление = ПредставлениеРегиона(Регион.Наименование, Регион.Сокращение);
					Возврат Результат;
				КонецЕсли;
			Иначе
				Если Число(Число(Интервалы[1])) >= ПервыйТриЦифрыИндекса
					И Число(Интервалы[0]) <= ПервыйТриЦифрыИндекса Тогда
					Результат.КодСубъектаРФ = Регион.КодСубъектаРФ;
					Результат.Представление = ПредставлениеРегиона(Регион.Наименование, Регион.Сокращение);
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Возвращает данные классификатора поля выбора по уровню.
//
// Параметры:
//     Родитель                - УникальныйИдентификатор - Родительский объект.
//     Уровень                 - Число                   - Требуемый уровень данных. 1-7, 90, 91 - адресные объекты, -1
//                                                         - ориентиры.
//     ДополнительныеПараметры - Структура               - Описание настройке поиска. Поля:
//         * ФорматАдреса - Строка  - тип используемого классификатора.
//
//         * РазмерПорции - Число                   - Необязательный размер порции возвращаемых данных. Если не указано
//                                                    или 0, то возвращает все элементы.
//         * ПерваяЗапись - УникальныйИдентификатор - Элемент, с которого начинается порция данных. Сам элемент не
//                                                    входит в выборку.
//         * Сортировка   - Строка                  - Направление сортировки для порции.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Заголовок                    - Строка - Строка с предложением выбора.
//       * Данные                       - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//             ** Неактуален     - Булево - Флаг неактуальности строки данных.
//             ** Идентификатор  - УникальныйИдентификатор - Код классификатора для поиска вариантов по индексу.
//             ** Представление  - Строка - Представление варианта.
//             ** РегионЗагружен - Булево - Имеет смысл только для регионов. Истина, если есть записи.
//
Функция АдресаДляИнтерактивногоВыбора(Родитель, Уровень, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура("Данные, Заголовок", ТаблицаДанныхДляИнтерактивногоВыбора() );
	СтруктураОписанияОшибкиПоставщика(Результат);

	Уровни = АдресныйКлассификаторПовтИсп.УровниКлассификатораФИАС();
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		// Локальное, всегда корректное.
		ЗаполнитьАдресаДляИнтерактивногоВыбораВнутр(Результат, Уровни, Родитель, Уровень, ДополнительныеПараметры);
		
	ИначеЕсли Источник = "Сервис1С" Тогда
		// Веб сервис 1С, может быть на обслуживании.
		Попытка
			ЗаполнитьАдресаДляИнтерактивногоВыбораСервис1С(Результат, Уровни, Родитель, Уровень, ДополнительныеПараметры);
		Исключение
			СтруктураОписанияОшибкиПоставщика(Результат, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Уровень = 1 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите регион'");
	ИначеЕсли Уровень = 2 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите округ'");
	ИначеЕсли Уровень = 3 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите район'");
	ИначеЕсли Уровень = 4 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите город'");
	ИначеЕсли Уровень = 5 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите внутригородской район'");
	ИначеЕсли Уровень = 6 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите населенный пункт'");
	ИначеЕсли Уровень = 7 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите улицу'");
	ИначеЕсли Уровень = 90 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите дополнительный элемент'");
	ИначеЕсли Уровень = 91 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите подчиненный элемент'");
	ИначеЕсли Уровень = -1 Тогда
		Результат.Заголовок = НСтр("ru = 'Выберите ориентир'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает список для автоподбора элемента адреса, поиск по подобию.
//
// Параметры:
//     Текст                   - Строка                      - Текст, введенный в поле.
//     Родитель                - УникальныйИдентификатор     - Родительский объект.
//     Уровни                  - Массив, ФиксированныйМассив - Набор требуемых уровней данных. 1-7, 90, 91 - адресные
//                               объекты, -1 - ориентиры.
//     ДополнительныеПараметры - Структура                   - Описание настройке поиска. Поля:
//         * ФорматАдреса - Строка      - Тип используемого классификатора.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//             ** Неактуален     - Булево - Флаг неактуальности строки данных.
//             ** Идентификатор  - УникальныйИдентификатор - Код классификатора для поиска вариантов по индексу.
//             ** Представление  - Строка - Представление варианта.
//             ** РегионЗагружен - Булево - Имеет смысл только для регионов. Истина, если есть записи.
//
Функция ВариантыАвтоподбора(Текст, Родитель, Уровни, ДополнительныеПараметры) Экспорт 
	
	Результат = Новый Структура("Данные", ТаблицаДанныхАвтоподбора() );
	СтруктураОписанияОшибкиПоставщика(Результат);
	
	Вариант = ДополнительныеПараметры.ФорматАдреса;
	Если Вариант = "КЛАДР" Тогда
		ОграничениеУровней = АдресныйКлассификаторПовтИсп.УровниКлассификатораКЛАДР();
		
	ИначеЕсли Вариант = "ФИАС" Тогда
		ОграничениеУровней = АдресныйКлассификаторПовтИсп.УровниКлассификатораФИАС();
		
	Иначе
		Возврат Результат;
		
	КонецЕсли;
	
	// Ограничение поиска
	УровниЗапроса = Новый Массив;
	Для Каждого Уровень Из Уровни Цикл
		Если ОграничениеУровней.Найти(Уровень) <> Неопределено Тогда
			УровниЗапроса.Добавить(Уровень);
		КонецЕсли;
	КонецЦикла;
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		// Локальное, всегда корректное.
		ЗаполнитьСписокАвтоподбораЧастиАдресаВнутр(Результат, Текст, Родитель, УровниЗапроса, ДополнительныеПараметры);
		
	ИначеЕсли Источник = "Сервис1С" Тогда
		// Веб сервис 1С, может быть на обслуживании.
		Попытка
			ЗаполнитьСписокАвтоподбораЧастиАдресаСервис1С(Результат, Текст, Родитель, УровниЗапроса, ДополнительныеПараметры);
		Исключение
			СтруктураОписанияОшибкиПоставщика(Результат, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает список домов по идентификатору адресного объекта, поиск по подобию.
//
// Параметры:
//     ИдентификаторАдресногоОбъекта                - УникальныйИдентификатор     - Родительский объект.
//     СтрокаПоиска                  - Строка                      - Текст, отбора в списке домов.
//
// Возвращаемое значение:
//     ТаблицаЗначений  -  найденные варианты.
//
Функция СписокДомов(ИдентификаторАдресногоОбъекта, Знач СтрокаПоиска) Экспорт
	
	ВариантыДомов = Новый ТаблицаЗначений;
	КолонкаДомЧислом = ВариантыДомов.Колонки.Добавить("ДомЧислом", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КолонкаДом = ВариантыДомов.Колонки.Добавить("Дом", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	КолонкаКорпус = ВариантыДомов.Колонки.Добавить("Корпус", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	КолонкаСтроение = ВариантыДомов.Колонки.Добавить("Строение", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ВариантыДомов.Колонки.Добавить("Значение");
	ВариантыДомов.Колонки.Добавить("Представление");
	ВариантыДомов.Колонки.Индекс(КолонкаДомЧислом);
	ВариантыДомов.Колонки.Индекс(КолонкаДом);
	ВариантыДомов.Колонки.Индекс(КолонкаКорпус);
	ВариантыДомов.Колонки.Индекс(КолонкаСтроение);
	
	Если СтрЗаканчиваетсяНа(СтрокаПоиска, "%") Тогда
		ТочноеСовпадение = Ложь;
		СтрокаПоиска =  Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
	Иначе
		ТочноеСовпадение = Истина;
	КонецЕсли;
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|    ДомаЗданияСтроения.Строения КАК Строения
		|ИЗ
		|    РегистрСведений.ДомаЗданияСтроения КАК ДомаЗданияСтроения
		|ГДЕ
		|    ДомаЗданияСтроения.АдресныйОбъект = &АдресныйОбъект";
		
		Запрос.УстановитьПараметр("АдресныйОбъект", ИдентификаторАдресногоОбъекта);
		Запись = Запрос.Выполнить().Выбрать();
		
		Пока Запись.Следующий() Цикл
			Если ЗначениеЗаполнено(Запись.Строения) Тогда
				Описание = Запись.Строения.Получить();
				Если Не ПустаяСтрока(Описание) И СтрДлина(Описание) > 24 Тогда
					Описание = Сред(Описание, 25);
					Если Не ПустаяСтрока(Описание) Тогда
						ИзвлечьСписокДомов(Описание, СтрокаПоиска, ВариантыДомов, ТочноеСовпадение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Источник = "Сервис1С" Тогда
		ИзвлечьСписокДомовСервис1С(ИдентификаторАдресногоОбъекта, СтрокаПоиска, ВариантыДомов);
	КонецЕсли;
	
	ВариантыДомов.Сортировать("ДомЧислом, Дом, Строение, Корпус");
	
	Возврат ВариантыДомов;
	
КонецФункции

// Возвращает есть ли список домов по идентификатору адресного объекта, поиск по подобию.
//
// Параметры:
//     ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - Родительский объект.
//
// Возвращаемое значение:
//     Булево - Истина, если есть информация о домах.
//
Функция ЕстьСписокДомов(ИдентификаторАдресногоОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторАдресногоОбъекта) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    ДомаЗданияСтроения.Строения КАК Строения
		|ИЗ
		|    РегистрСведений.ДомаЗданияСтроения КАК ДомаЗданияСтроения
		|ГДЕ
		|    ДомаЗданияСтроения.АдресныйОбъект = &АдресныйОбъект";
		
		Запрос.УстановитьПараметр("АдресныйОбъект", ИдентификаторАдресногоОбъекта);
		Запись = Запрос.Выполнить().Выбрать();
		
		Пока Запись.Следующий() Цикл
			Если ЗначениеЗаполнено(Запись.Строения) Тогда
				Описание = Запись.Строения.Получить();
				Если Не ПустаяСтрока(Описание) Тогда
					Описание = Сред(Описание, 25);
					Если Не ПустаяСтрока(Описание) Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Источник = "Сервис1С" Тогда
		Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
		КодЯзыка = ТекущийКодЛокализации();
		Порция = Сервис.Autocomplete(ИдентификаторАдресногоОбъекта, 0, НСтр("ru = 'ДОМ='"), 1, КодЯзыка, Метаданные.Имя);
		Список = Порция.ПолучитьСписок("Item");
		Возврат Список.Количество() > 0;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает актуальные данные адресного объекта или ориентира с точностью доя подчиненного (без домов).
//
// Параметры:
//     Идентификатор - УникальныйИдентификатор - Идентификатор адресного объекта или ориентира.
// 
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - ОбъектXDTO - Адрес, см (http://www.v8.1c.ru/ssl/AddressSystem) АдресРФ.
//
Функция АктуальныеАдресныеСведения(Идентификатор) Экспорт
	
	Данные = Неопределено;
	Результат = Новый Структура("Данные", Данные);
	СтруктураОписанияОшибкиПоставщика(Результат);
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		// Локальное, всегда корректное.
		ЗаполнитьАктуальныеАдресныеСведенияВнутр(Результат, Идентификатор);
		
	ИначеЕсли Источник = "Сервис1С" Тогда
		// Веб сервис 1С, может быть на обслуживании.
		Попытка
			ЗаполнитьАктуальныеАдресныеСведенияСервис1С(Результат, Идентификатор);
		Исключение
			СтруктураОписанияОшибкиПоставщика(Результат, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьИдентификаторыНаселенногоПункта(ЧастиАдреса) Экспорт
	
	ПоляАдреса = Новый Соответствие();
	ВставитьЧастьАдреса("Регион", ЧастиАдреса.Регион, ПоляАдреса);
	ВставитьЧастьАдреса("Округ", ЧастиАдреса.Округ, ПоляАдреса);
	ВставитьЧастьАдреса("Район", ЧастиАдреса.Район, ПоляАдреса);
	ВставитьЧастьАдреса("Город", ЧастиАдреса.Город, ПоляАдреса);
	ВставитьЧастьАдреса("ВнутригородскойРайон", ЧастиАдреса.ВнутригРайон, ПоляАдреса);
	ВставитьЧастьАдреса("НаселенныйПункт", ЧастиАдреса.НаселенныйПункт, ПоляАдреса);
	ВставитьЧастьАдреса("Улица", ЧастиАдреса.Улица, ПоляАдреса);
	
	ИдентификаторыАдреса = ИдентификаторыАдреса(ПоляАдреса, Истина, Истина);
	
	Если ИдентификаторыАдреса <> Неопределено Тогда 
		Для каждого Часть Из ЧастиАдреса Цикл
			Если ИдентификаторыАдреса.Свойство("Идентификатор" + Часть.Ключ) Тогда
				Часть.Значение.Идентификатор = ИдентификаторыАдреса["Идентификатор" + Часть.Ключ];
			Иначе
				Часть.Значение.Идентификатор = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет данные на соответствие классификатору.
//
// Параметры:
//     Адреса - Массив - Проверяемые адреса. Содержит структуры с полями:
//         * Адрес                             - ОбъектXDTO, Строка - Проверяемый адрес
//                                               ((http://www.v8.1c.ru/ssl/AddressSystem) АдресРФ) или его
//                                               XML-сериализация.
//         * ФорматАдреса - Строка - Тип используемого классификатора для проверки.
// 
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - Массив - Результаты проверки. Индекс результата совпадает с индексом
//                                                 параметра Адреса.
//                                                 Каждый элемент массива - структура, содержащая поля:
//           ** Ошибки   - Массив     - Описание ошибок поиска в классификаторе. Состоит из структур с полями.
//               *** Ключ      - Строка - Служебный идентификатор места ошибки - путь XPath в объекте XDTO.
//               *** Текст     - Строка - Текст ошибки.
//               *** Подсказка - Строка - Текст возможного исправления ошибки.
//           ** Варианты - Массив     - Содержит описание найденных вариантов. Каждый элемент - структура с полями:
//               *** Идентификатор    - УникальныйИдентификатор  - Код классификатора объекта - варианта.
//               *** Индекс           - Число - Почтовый индекс объекта - варианта.
//               *** КодКЛАДР         - Число - Код КЛАДР ближайшего объекта.
//               *** OKATO            - Число - Данные ФНС.
//               *** ОКТМО            - Число - Данные ФНС.
//               *** КодИФНСФЛ        - Число - Данные ФНС.
//               *** КодИФНСЮЛ        - Число - Данные ФНС.
//               *** КодУчасткаИФНСФЛ - Число - Данные ФНС.
//               *** КодУчасткаИФНСЮЛ - Число - Данные ФНС.
//
Функция РезультатПроверкиАдресовПоКлассификатору(Адреса) Экспорт
	
	Результат = Новый Структура("Данные", Новый Массив);
	СтруктураОписанияОшибкиПоставщика(Результат);
	
	// Приводим типы
	АдресаДляПроверки = Новый Массив;
	ТипСтрока         = Тип("Строка");

	Для Каждого ПроверяемыйАдрес Из Адреса Цикл
		Если ПроверяемыйАдрес.ФорматАдреса = "ФИАС" Тогда
			Уровни = АдресныйКлассификаторПовтИсп.УровниКлассификатораФИАС();
		Иначе
			Уровни = АдресныйКлассификаторПовтИсп.УровниКлассификатораКЛАДР();
		КонецЕсли;
		
		// Невозможно проверить адрес из-за некорректных сведений. Проверьте правильность заполнения адреса.
		АдресXDTO = ПроверяемыйАдрес.Адрес;
		Если ТипЗнч(АдресXDTO) = ТипСтрока Тогда
			Если ЭтоКонтактнаяИнформацияВXML(АдресXDTO) Тогда
				ПолныйАдресXDTO = ДесериализацияАдресаXDTO(АдресXDTO);
				АдресXDTO = ПолныйАдресXDTO.Состав.Состав;
			Иначе
				АдресXDTO = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		АдресаДляПроверки.Добавить(Новый Структура("Адрес, Уровни", АдресXDTO, Уровни));
	КонецЦикла;
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		// Локальное, всегда корректное.
		ЗаполнитьРезультатПроверкиАдресаПоКлассификаторуВнутр(Результат, АдресаДляПроверки);
		
	ИначеЕсли Источник = "Сервис1С" Тогда
		// Веб сервис 1С, может быть на обслуживании.
		Попытка
			ЗаполнитьРезультатПроверкиАдресаПоКлассификаторуСервис1С(Результат, АдресаДляПроверки);
		Исключение
			СтруктураОписанияОшибкиПоставщика(Результат, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет индекс и ОКТМО адреса по частям адреса.
//
Функция ИндексИОКТМОАдресаПоЧастямАдреса(Адрес, Идентификатор = Неопределено) Экспорт
	
	Результат = Новый Структура("Индекс, ОКТМО", Неопределено, Неопределено);
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		// Локальное
		
		Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда 
			Идентификатор = ИдентификаторАдресногоОбъектаПоЧастямАдреса(Адрес, Истина);
		КонецЕсли;
		
		Если Идентификатор <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресныеОбъекты.ПочтовыйИндекс
			|ИЗ
			|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
			|ГДЕ
			|	АдресныеОбъекты.Идентификатор = &Идентификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АдресныеОбъекты.Дополнительно КАК Дополнительно,
			|	ДополнительныеАдресныеСведения.КодСубъектаРФ,
			|	ДополнительныеАдресныеСведения.OKATO,
			|	ДополнительныеАдресныеСведения.ОКТМО,
			|	ДополнительныеАдресныеСведения.КодИФНСФЛ,
			|	ДополнительныеАдресныеСведения.КодИФНСЮЛ,
			|	ДополнительныеАдресныеСведения.КодУчасткаИФНСФЛ,
			|	ДополнительныеАдресныеСведения.КодУчасткаИФНСЮЛ
			|ИЗ
			|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеАдресныеСведения КАК ДополнительныеАдресныеСведения
			|		ПО АдресныеОбъекты.Дополнительно = ДополнительныеАдресныеСведения.Идентификатор
			|ГДЕ
			|	АдресныеОбъекты.Идентификатор = &Идентификатор";
			
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			РезультатЗапросаИндекс = РезультатЗапроса[0].Выбрать();
			РезультатЗапросаОКТМО = РезультатЗапроса[1].Выбрать();
			
			Если РезультатЗапросаИндекс.Следующий() Тогда
				Если РезультатЗапросаИндекс.ПочтовыйИндекс = 0 Тогда
					
					// Расшифровка свойств адреса
					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	Значение
					|ИЗ 
					|	РегистрСведений.СлужебныеАдресныеСведения
					|ГДЕ	
					|	Тип = ""ТипАдрЭл"" И Ключ = ""ПочтовыйИндекс""
					|;//////////////////////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Расшифровка.Ключ     КАК Значение,
					|	Расшифровка.Значение КАК ТипАдрЭл,
					|	
					|	ВЫБОР 
					|		КОГДА НЕ ТипыВладения.Идентификатор ЕСТЬ NULL ТОГДА ТипыВладения.Идентификатор
					|		КОГДА НЕ ТипыСтроения.Идентификатор ЕСТЬ NULL ТОГДА ТипыСтроения.Идентификатор
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК Идентификатор
					|	
					|ИЗ
					|	РегистрСведений.СлужебныеАдресныеСведения КАК Расшифровка
					|	
					|ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.СлужебныеАдресныеСведения КАК ТипыВладения
					|ПО
					|	ТипыВладения.Тип = ""ESTSTAT""
					|	И ТипыВладения.Значение = Расшифровка.Ключ
					|
					|ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.СлужебныеАдресныеСведения КАК ТипыСтроения
					|ПО
					|	ТипыСтроения.Тип = ""STRSTAT""
					|	И ТипыСтроения.Значение = Расшифровка.Ключ
					|	
					|ГДЕ
					|	Расшифровка.Тип = ""ДопАдрЭлНомер""");
					НаборРезультатов = Запрос.ВыполнитьПакет();
					
					Таблица = НаборРезультатов[0].Выгрузить();
					Если Таблица.Количество() = 0 Тогда
						ТипАдрЭлПочтовыйИндекс = "";
					Иначе
						ТипАдрЭлПочтовыйИндекс = Таблица[0].Значение;
					КонецЕсли;
					ТаблицаСокращенийЗданий = НаборРезультатов[1].Выгрузить();
					ТаблицаСокращенийЗданий.Индексы.Добавить("ТипАдрЭл");
					
					ЗданияИПомещения = Новый Соответствие;
					ТипЧисло = Новый ОписаниеТипов("Число");
					Для Каждого ДополнительныйЭлемент Из Адрес.ПолучитьСписок("ДопАдрЭл") Цикл
						ТипАдресногоЭлемента = СокрЛП(ДополнительныйЭлемент.ТипАдрЭл);
						
						// Здание или помещение, почтовый индекс?
						Если ТипАдресногоЭлемента = "" Тогда
							ЗначениеНомера = ДополнительныйЭлемент.Номер;
							СтрокаЗдания = ТаблицаСокращенийЗданий.Найти(ЗначениеНомера.Тип, "ТипАдрЭл");
							Если СтрокаЗдания <> Неопределено Тогда
								ЗданияИПомещения[СтрокаЗдания.Значение] = Новый Структура("Вид, Значение", СтрокаЗдания.Идентификатор, ЗначениеНомера.Значение);
							КонецЕсли;
							Продолжить;
						ИначеЕсли ТипАдресногоЭлемента = ТипАдрЭлПочтовыйИндекс Тогда
							Результат.Индекс = ТипЧисло.ПривестиЗначение(ДополнительныйЭлемент.Значение);
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					
					Запрос = Новый Запрос;
					Запрос.Текст ="ВЫБРАТЬ
					|	ДомаЗданияСтроения.ПочтовыйИндекс,
					|	ДомаЗданияСтроения.Строения
					|ИЗ
					|	РегистрСведений.ДомаЗданияСтроения КАК ДомаЗданияСтроения
					|ГДЕ
					|	ДомаЗданияСтроения.АдресныйОбъект = &Идентификатор";
					Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
					РезультатЗапросаСДомами = Запрос.Выполнить().Выгрузить();
					
					Для Каждого Запись Из РезультатЗапросаСДомами Цикл
						// Если Запись.Строения равно Null значит по этому адресу нет домов.
						Если ЗначениеЗаполнено(Запись.Строения) Тогда
							Описание = Запись.Строения.Получить();
							
							Если Не ПустаяСтрока(Описание) Тогда
								ИдентификаторДополнительно = УникальныйИдентификаторИзСтроки64(Лев(Описание, 24));
								Описание = Сред(Описание, 25);
								Если Не ПустаяСтрока(Описание) Тогда
									ЕстьЗаписиДомов = Истина;
									
									Если ЗданияИПомещения.Количество() > 0 И ОписаниеЗданийФИАССодержитДанные(Описание, ЗданияИПомещения) Тогда
										Результат.Индекс = Запись.ПочтовыйИндекс; 
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Результат.Индекс = РезультатЗапросаИндекс.ПочтовыйИндекс;
				КонецЕсли;
			КонецЕсли;
			
			Если РезультатЗапросаОКТМО.Следующий() Тогда
				Результат.ОКТМО = РезультатЗапросаОКТМО.ОКТМО;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Источник = "Сервис1С" Тогда
		// Веб сервис 1С, может быть на обслуживании.
		АдресаДляПроверки = Новый Массив;
		РезультатВебСервис = Новый Структура("Данные", Новый Массив);
		СтруктураОписанияОшибкиПоставщика(РезультатВебСервис);
		Уровни = АдресныйКлассификаторПовтИсп.УровниКлассификатораФИАС();
		АдресаДляПроверки.Добавить(Новый Структура("Адрес, Уровни", Адрес, Уровни));
		Попытка
			ЗаполнитьРезультатПроверкиАдресаПоКлассификаторуСервис1С(РезультатВебСервис, АдресаДляПроверки);
		Исключение
			СтруктураОписанияОшибкиПоставщика(РезультатВебСервис, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , РезультатВебСервис.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
		Если НЕ РезультатВебСервис.Отказ Тогда
			Если РезультатВебСервис.Данные[0].Варианты.Количество() > 0 Тогда
				Результат.Индекс = РезультатВебСервис.Данные[0].Варианты[0].Индекс;
				Результат.ОКТМО = РезультатВебСервис.Данные[0].Варианты[0].ОКТМО
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает соответствие полных наименований адресных объектов и их сокращения.
//
// Параметры:
//  НаименованияАдресныхОбъектов - Массив - Полные наименования адресных объектов. Если передан пустой массив,
//                                          то будут возвращен полный список наименований и сокращений.
//
// Возвращаемое значение:
//  Соответствие - Соответствие найденных полных наименований адресных объектов их сокращениям.
//
Функция СокращенияАдресныхОбъектов(НаименованияАдресныхОбъектов) Экспорт
	
	Результат = Новый Соответствие;
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		
		СтрокаЗапросГде = "";
		Если ТипЗнч(НаименованияАдресныхОбъектов) = Тип("Массив") И НаименованияАдресныхОбъектов.Количество() > 0 Тогда
			СтрокаЗапросГде = " ГДЕ УровниСокращенийАдресныхСведений.Значение В(&АдресныеСокращения) ";
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УровниСокращенийАдресныхСведений.Значение КАК Наименование,
			|	УровниСокращенийАдресныхСведений.Сокращение КАК Сокращение
			|ИЗ
			|	РегистрСведений.УровниСокращенийАдресныхСведений КАК УровниСокращенийАдресныхСведений 
			| " + СтрокаЗапросГде + " 
			|
			|СГРУППИРОВАТЬ ПО
			|	УровниСокращенийАдресныхСведений.Значение,
			|	УровниСокращенийАдресныхСведений.Сокращение
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
		Если НЕ ПустаяСтрока(СтрокаЗапросГде) Тогда
			Запрос.УстановитьПараметр("АдресныеСокращения", НаименованияАдресныхОбъектов);
		КонецЕсли;
		ТаблицаАдресныхСокращений = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТаблицы Из ТаблицаАдресныхСокращений Цикл
			Результат.Вставить(ВРег(СтрокаТаблицы.Наименование), СтрокаТаблицы.Сокращение);
		КонецЦикла;
		
		Если Результат.Количество() > 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Веб сервис 1С или классификатор не загружен, получаем данные о сокращениях из макета.
	ТаблицаАдресныхСокращений = РегистрыСведений.АдресныеОбъекты.АдресныеСокращения();
	
	Если ТипЗнч(НаименованияАдресныхОбъектов) = Тип("Массив") И НаименованияАдресныхОбъектов.Количество() > 0 Тогда
		Для каждого ПолноеНаименование Из НаименованияАдресныхОбъектов Цикл
			СтрокаТаблицы = ТаблицаАдресныхСокращений.Найти(ТРег(ПолноеНаименование), "Наименование");
			Если СтрокаТаблицы <> Неопределено Тогда
				Результат.Вставить(ВРег(СтрокаТаблицы.Наименование), СтрокаТаблицы.Сокращение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из ТаблицаАдресныхСокращений Цикл
			Результат.Вставить(ВРег(СтрокаТаблицы.Наименование), СтрокаТаблицы.Сокращение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьСоответствиеЧастейАдресаИхУровню(ЧастиАдреса, Уровни) Экспорт
	
	ОбработатьОбщепринятыеСокращения(ЧастиАдреса);
	ДоступныеУровни = УровниСодержащиеСовпадения(ЧастиАдреса, Уровни);
	Если ДоступныеУровни.Найти(1) <> Неопределено Тогда
		УстановитьУровниАдресаПоЧастямАдреса(ЧастиАдреса, ДоступныеУровни);
	КонецЕсли;
	
	Возврат ЧастиАдреса;
	
КонецФункции

Процедура УстановитьУровниУлицыПоЧастямАдреса(ИдентификаторНаселенногоПункта, ЧастиАдреса) Экспорт
	
	Если ТипЗнч(ИдентификаторНаселенногоПункта) = Тип("Строка") Тогда
		ИдентификаторНаселенногоПункта = Новый УникальныйИдентификатор(ИдентификаторНаселенногоПункта);
	КонецЕсли;
	
	Шаблон = " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК %1
					|		ПО (%1.КодСубъектаРФ = НаселенныйПункт.КодСубъектаРФ)
					|			И (%1.КодОкруга = НаселенныйПункт.КодОкруга)
					|			И (%1.КодРайона = НаселенныйПункт.КодРайона)
					|			И (%1.КодГорода = НаселенныйПункт.КодГорода)
					|			И (%1.КодВнутригородскогоРайона = НаселенныйПункт.КодВнутригородскогоРайона)
					|			И (%1.КодНаселенногоПункта = НаселенныйПункт.КодНаселенногоПункта)
					|			И (%1.Наименование = ""%2"")
					|			И (%1.Сокращение = ""%3"") ";
	СтрокаВыбрать = "";
	РазделительВыбрать = "";
	СтрокаИз = "";
	
	Упорядочить = "";
	Для Индекс = 0 По ЧастиАдреса.Количество() -1 Цикл
		ЧастьАдреса = ЧастиАдреса[Индекс];
		НазваниеТаблицы = "АдресныйОбъект"+ Строка(Индекс);
		СтрокаВыбрать = СтрокаВыбрать + РазделительВыбрать + НазваниеТаблицы + ".Идентификатор КАК " + НазваниеТаблицы + "Идентификатор, "
			+ НазваниеТаблицы + ".Уровень КАК " + НазваниеТаблицы + "Уровень " ;
		СтрокаИз = СтрокаИз + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, НазваниеТаблицы, ЧастьАдреса.Наименование, ЧастьАдреса.Сокращение);
		Упорядочить = Упорядочить + НазваниеТаблицы + ".Актуален Убыв" + РазделительВыбрать;
		РазделительВыбрать = ", ";
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ " + СтрокаВыбрать + " ИЗ РегистрСведений.АдресныеОбъекты КАК НаселенныйПункт "
		+ СтрокаИз + " ГДЕ НаселенныйПункт.Идентификатор = &Идентификатор";
	
	Если ЗначениеЗаполнено(Упорядочить) Тогда
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО " + Упорядочить;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторНаселенногоПункта);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Для Индекс = 0 По ЧастиАдреса.Количество() - 1 Цикл
			ЧастиАдреса[Индекс].Идентификатор = Результат["АдресныйОбъект"+ Строка(Индекс) + "Идентификатор"];
			ЧастиАдреса[Индекс].Уровень = Результат["АдресныйОбъект"+ Строка(Индекс) + "Уровень"];
		КонецЦикла;
	КонецЕсли;
	ЧастиАдреса.Сортировать("Уровень");
	
КонецПроцедуры

// Распознавание населенного пункта по частям адреса.
//
Функция УстановитьСоответствиеЧастейАдресаИхУровнюДляНаселенногоПункта(ЧастиАдреса, Уровни) Экспорт
	
	ОбработатьОбщепринятыеСокращения(ЧастиАдреса);
	ДоступныеУровни = УровниСодержащиеСовпадения(ЧастиАдреса, Уровни);
	Если ДоступныеУровни.Найти(1) <> Неопределено Тогда
		УстановитьУровниАдресаПоЧастямАдресаДляНаселенногоПункта(ДоступныеУровни, ЧастиАдреса);
	КонецЕсли;
	
	Возврат ЧастиАдреса;
	
КонецФункции

// Определяет улицу и дополнительную территорию, функция используется для совместимости данных перенесенных из КЛАДР.
//
// Параметры:
//  НаименованиеИСокращение	 - Структура - Наименование и Сокращение искомого объекта.
//  Идентификатор			 - УникальныйИдентификатор - Идентификатора населенного пункт.
// Возвращаемое значение:
//  Структура -  Результат поиска.
Функция УлицаИДополнительнаяТерритория(Знач НаименованиеИСокращение, Знач Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресныеОбъекты.Уровень КАК Уровень,
	|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	|	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	|	АдресныеОбъекты.КодРайона КАК КодРайона,
	|	АдресныеОбъекты.КодГорода КАК КодГорода,
	|	АдресныеОбъекты.КодВнутригородскогоРайона КАК КодВнутригородскогоРайона,
	|	АдресныеОбъекты.КодНаселенногоПункта КАК КодНаселенногоПункта,
	|	АдресныеОбъекты.КодУлицы КАК КодУлицы,
	|	АдресныеОбъекты.КодДополнительногоЭлемента КАК КодДополнительногоЭлемента,
	|	АдресныеОбъекты.КодПодчиненногоЭлемента КАК КодПодчиненногоЭлемента,
	|	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	|	АдресныеОбъекты.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	АдресныеОбъекты.Наименование КАК Наименование,
	|	АдресныеОбъекты.Сокращение КАК Сокращение
	|ПОМЕСТИТЬ Родитель
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.Идентификатор = &Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	|	АдресныеОбъекты.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	АдресныеОбъекты.Наименование КАК Наименование,
	|	АдресныеОбъекты.Сокращение КАК Сокращение,
	|	АдресныеОбъектыУлицы.Наименование КАК НаименованиеУлицы,
	|	АдресныеОбъектыУлицы.Сокращение КАК СокращениеУлицы,
	|	АдресныеОбъектыУлицы.Идентификатор КАК ИдентификаторУлицы
	|ИЗ
	|	Родитель КАК Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыУлицы
	|		ПО (АдресныеОбъектыУлицы.Уровень = 7)
	|			И (Родитель.КодУлицы = 0)
	|			И Родитель.КодСубъектаРФ = АдресныеОбъектыУлицы.КодСубъектаРФ
	|			И Родитель.КодОкруга = АдресныеОбъектыУлицы.КодОкруга
	|			И Родитель.КодРайона = АдресныеОбъектыУлицы.КодРайона
	|			И Родитель.КодГорода = АдресныеОбъектыУлицы.КодГорода
	|			И Родитель.КодВнутригородскогоРайона = АдресныеОбъектыУлицы.КодВнутригородскогоРайона
	|			И Родитель.КодНаселенногоПункта = АдресныеОбъектыУлицы.КодНаселенногоПункта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|		ПО (АдресныеОбъекты.Уровень = 90)
	|			И (АдресныеОбъектыУлицы.КодОкруга = АдресныеОбъекты.КодОкруга)
	|			И (АдресныеОбъектыУлицы.КодРайона = АдресныеОбъекты.КодРайона)
	|			И (АдресныеОбъектыУлицы.КодГорода = АдресныеОбъекты.КодГорода)
	|			И (АдресныеОбъектыУлицы.КодВнутригородскогоРайона = АдресныеОбъекты.КодВнутригородскогоРайона)
	|			И (АдресныеОбъектыУлицы.КодНаселенногоПункта = АдресныеОбъекты.КодНаселенногоПункта)
	|			И (АдресныеОбъектыУлицы.КодУлицы = АдресныеОбъекты.КодУлицы)
	|			И Родитель.КодСубъектаРФ = АдресныеОбъекты.КодСубъектаРФ
	|ГДЕ
	|	АдресныеОбъекты.Наименование = &Наименование
	|	И АдресныеОбъекты.Сокращение = &Сокращение";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Наименование", НаименованиеИСокращение.Наименование);
	Запрос.УстановитьПараметр("Сокращение", НаименованиеИСокращение.Сокращение);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	НайденныйВариант = Новый Структура("ИдентификаторУлицы, Идентификатор, Значение");
	Если РезультатЗапроса.Следующий() Тогда
			НайденныйВариант.ИдентификаторУлицы = РезультатЗапроса.ИдентификаторУлицы;
			НайденныйВариант.Идентификатор = РезультатЗапроса.Идентификатор;
			НайденныйВариант.Значение = РезультатЗапроса.Наименование + " " + РезультатЗапроса.Сокращение;
		Возврат НайденныйВариант;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определение кодов ОКАТО, ОКТМО, налоговых инспекций ФНС и др. адреса
//
// Параметры:
//  Адрес    - Строка - Адрес в формате XML
//  Источник - Строка - Источник получения кодов адреса, Варианты: "Сервис1С", "ЗагруженныеДанные"
//                       если явно не указан явно, то определяется в настройках.
// Возвращаемое значение:
//  Структура - Коды адреса.
//
Функция КодыАдреса(Адрес, Источник = Неопределено) Экспорт
	
	Если НЕ (ЭтоКонтактнаяИнформацияВXML(Адрес) ИЛИ ТипЗнч(Адрес) = Тип("Структура")) Тогда
		Возврат СтруктураКодовАдреса();
	КонецЕсли;
	
	ИскатьВезде = Ложь;
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		ИскатьВезде = Истина;
		Источник = ИсточникДанныхАдресногоКлассификатора();
		Если ПустаяСтрока(Источник) ИЛИ Источник <> "Сервис1С" Тогда
			Источник = "ЗагруженныеДанные";
		КонецЕсли;
	КонецЕсли;
	
	Результат = КодыАдресаИКодыКЛАДР(Адрес, Источник).КодыАдреса;
	
	Для каждого КлючИЗначение Из Результат Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Если ИскатьВезде Тогда
		Источник = ?(Источник = "ЗагруженныеДанные", "Сервис1С", "ЗагруженныеДанные");
		Возврат КодыАдреса(Адрес, Источник);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определение кодов КЛАДР и ОКАТО, ОКТМО, налоговых инспекций ФНС и др. адреса.
//
// Параметры:
//  Адрес    - Строка - Адрес в формате XML или структура с полями адреса.
//  Источник - Строка - Источник получения кодов адреса, Варианты: "Сервис1С", "ЗагруженныеДанные".
// Возвращаемое значение:
//  Структура - Содержит 2 структуры: Коды адреса и Коды КЛАДР.
//
Функция КодыАдресаИКодыКЛАДР(Знач Адрес, Источник = Неопределено) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("КодыКЛАДР", СтруктураКодовКЛАДРПоУровням());
	Результат.Вставить("КодыАдреса", СтруктураКодовАдреса());

	Если НЕ (ЭтоКонтактнаяИнформацияВXML(Адрес) ИЛИ ТипЗнч(Адрес) = Тип("Структура")) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Источник = ИсточникДанныхАдресногоКлассификатора();
		Если ПустаяСтрока(Источник) ИЛИ Источник <> "Сервис1С" Тогда
			Источник = "ЗагруженныеДанные";
		КонецЕсли;
	КонецЕсли;
		
	Если ЭтоКонтактнаяИнформацияВXML(Адрес) Тогда
		АдресXDTO = ДесериализацияАдресаXDTO(Адрес);
		Адрес = АдресXDTO.Состав.Состав;
	КонецЕсли;
	
	Если СтрСравнить(Источник, "Сервис1С") = 0 Тогда
		Результат.КодыАдреса = КодыАдресаСервис(Адрес);
		// Заполнить коды КЛАДР 
		Если ЗначениеЗаполнено(Результат.КодыАдреса.КодКЛАДР) Тогда
			КодКЛАДР = Формат(Результат.КодыАдреса.КодКЛАДР, "ЧРГ=''; ЧГ=0");
			
			Если СтрДлина(КодКЛАДР) = 17 Тогда
				Результат.КодыКЛАДР.Улица = КодКЛАДР;
				КодКЛАДР = Лев(КодКЛАДР, 13);
			КонецЕсли;
			
			Если СтрДлина(КодКЛАДР) = 12 Тогда
				КодКЛАДР = "0" + КодКЛАДР;
			КонецЕсли;
				
			Если СтрДлина(КодКЛАДР) = 13 Тогда
				Если ЗначениеЗаполнено(Адрес.СубъектРФ) Тогда
					Результат.КодыКЛАДР.Регион = Лев(КодКЛАДР, 2) + "00000000000";
				КонецЕсли;
				Район = ?(ПустаяСтрока(Адрес.СвРайМО), "", Адрес.СвРайМО.Район);
				Если ЗначениеЗаполнено(Район) Тогда
					Результат.КодыКЛАДР.Район = Лев(КодКЛАДР, 5) + "00000000";
				КонецЕсли;
				Если ЗначениеЗаполнено(Адрес.Город) Тогда
					Результат.КодыКЛАДР.Город = Лев(КодКЛАДР, 8) + "00000";
				КонецЕсли;
				Если ЗначениеЗаполнено(Адрес.НаселПункт) Тогда
					Результат.КодыКЛАДР.НаселенныйПункт = Лев(КодКЛАДР, 11) + "00";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = КодыАдресаЗагруженныеДанные(Адрес);
	КонецЕсли;
	ОпределитьФорматКодов(Результат.КодыАдреса);
	
	Возврат Результат;
	
КонецФункции

// Функция - Полные наименования сокращений.
//
// Параметры:
//  СоответствиеСокращений	 - Соответствие - сокращения адреса.
//
Процедура ПолныеНаименованияСокращений(СоответствиеСокращений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСокращений.Уровень КАК Уровень,
	               |	ТаблицаСокращений.Сокращение КАК Сокращение
	               |ПОМЕСТИТЬ ТаблицаСокращений
	               |ИЗ
	               |	&ТаблицаСокращений КАК ТаблицаСокращений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УровниСокращенийАдресныхСведений.Сокращение КАК Сокращение,
	               |	УровниСокращенийАдресныхСведений.Уровень КАК Уровень,
	               |	УровниСокращенийАдресныхСведений.Значение КАК Значение
	               |ИЗ
	               |	ТаблицаСокращений КАК ТаблицаСокращений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УровниСокращенийАдресныхСведений КАК УровниСокращенийАдресныхСведений
	               |		ПО ТаблицаСокращений.Уровень = УровниСокращенийАдресныхСведений.Уровень
	               |			И (ТаблицаСокращений.Сокращение = УровниСокращенийАдресныхСведений.Сокращение)";
	
	ТаблицаСоответствиеСокращений = Новый ТаблицаЗначений;
	ТаблицаСоответствиеСокращений.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ТаблицаСоответствиеСокращений.Колонки.Добавить("Сокращение", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Для каждого Элемент Из СоответствиеСокращений Цикл
		НоваяСтрока = ТаблицаСоответствиеСокращений.Добавить();
		НоваяСтрока.Уровень = Элемент.Ключ;
		НоваяСтрока.Сокращение = Элемент.Значение;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаСокращений", ТаблицаСоответствиеСокращений);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		СоответствиеСокращений[РезультатЗапроса.Уровень] = РезультатЗапроса.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие записей о регионах в регистре сведений АдресныеОбъекты и заполняет их в случае отсутствия.
//
Функция ПроверитьНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныеОбъекты.Уровень
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|ГДЕ
		|	АдресныеОбъекты.Уровень = 1";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.АдресныеОбъекты) Тогда
			ВыполнитьНачальноеЗаполнение();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка адресного классификатора.

// Загрузка всех данных классификатора адресов.
//
// Параметры:
//    КодыСубъектовРФ - Массив         - Содержит числовые коды регионов-субъектов для загрузки.
//
//    ОписаниеФайлов  - Строка, Массив - Каталог на сервере, в котором находятся файлы данных. Ожидается, что имена
//                      файлов будут в верхнем регистре.
//                                       Массив элементов типа ОписаниеПередаваемогоФайла или структур с полями.
//                                           * Имя      - Строка - Имя или полное имя передаваемого файла.
//                                           * Хранение - ДвоичныеДанные, Строка - Описание хранения файла. Строка
//                                                        может быть путем на файловой системе или адресом во временном
//                                                        хранилище.
//    ОповещатьОПрогрессе - Булево      - Флаг оповещения о прогрессе (см ДлительныеОперации.СообщитьПрогресс).
//
Процедура ЗагрузитьКлассификаторАдресов(КодыСубъектовРФ, ОписаниеФайлов, ОповещатьОПрогрессе = Истина) Экспорт
	
	ДатаЗагрузки = ТекущаяУниверсальнаяДата();
	
	Если ТипЗнч(ОписаниеФайлов) = Тип("Строка") Тогда
		// Файлы уже подготовлены
		КаталогФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОписаниеФайлов);
	Иначе
		// Извлекаем файлы
		КаталогФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути( ПолучитьИмяВременногоФайла() );
		СоздатьКаталог(КаталогФайлов);
		
		Если ТипЗнч(ОписаниеФайлов) <> Тип("Массив") Тогда
			// Если ОписаниеФайлов не массив, то данные передаются через константу, после извлечения очищаем передаваемые данные.
			ПараметрыАдресногоКлассификатора = Константы.ПараметрыАдресногоКлассификатора.Получить().Получить();
			ОписаниеФайлов = ПараметрыАдресногоКлассификатора.ОписаниеФайлов;
			ПараметрыАдресногоКлассификатора.Удалить("ОписаниеФайлов");
			ХранилищеПараметров = Новый ХранилищеЗначения(ПараметрыАдресногоКлассификатора);
			Константы.ПараметрыАдресногоКлассификатора.Установить(ХранилищеПараметров);
		КонецЕсли;
		
		Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
			Файл = Новый Файл(ОписаниеФайла.Имя);
			ПолноеИмяФайла = КаталогФайлов + ВРег(Файл.Имя);
			
			Данные = ОписаниеФайла.Хранение;
			ТипДанных = ТипЗнч(Данные);
			
			Если ТипДанных = Тип("ДвоичныеДанные") Тогда
				Данные.Записать(ПолноеИмяФайла);
				
			ИначеЕсли ЭтоАдресВременногоХранилища(Данные) Тогда
				Данные = ПолучитьИзВременногоХранилища(Данные);
				Данные.Записать(ПолноеИмяФайла);
				
			Иначе
				ПолноеИмяФайла = Данные;
				
			КонецЕсли;
			
			Если ВРег(Прав(ПолноеИмяФайла, 4)) = ".ZIP" Тогда
				Архив = Новый ЧтениеZipФайла(ПолноеИмяФайла);
				Архив.ИзвлечьВсе(КаталогФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				УдалитьВременныйФайл(ПолноеИмяФайла);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВидыСведенийНеОбработаны = Истина;
	
	// 2. Все заказанные субъекты
	ВсегоСубъектов = КодыСубъектовРФ.Количество();
	НомерПоПорядку = 0;
	
	Для Каждого СубъектРФ Из КодыСубъектовРФ Цикл
		
		НомерПоПорядку = НомерПоПорядку + 1;
		Если ОповещатьОПрогрессе Тогда
			ТекстОсталосьЗагрузить = ?(ВсегоСубъектов - НомерПоПорядку > 0, " (" + НСтр("ru = 'осталось'")
			+ " " + Формат(ВсегоСубъектов - НомерПоПорядку, "ЧН=") + ")", "");
			ИнформацияОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка региона ""%1 - %2""'"),
			СубъектРФ, АдресныйКлассификатор.НаименованиеРегионаПоКоду(СубъектРФ)) + ТекстОсталосьЗагрузить + "...";
			ДлительныеОперации.СообщитьПрогресс(, ИнформацияОЗагрузке);
		КонецЕсли;
		
		Если ВидыСведенийНеОбработаны Тогда
			// Общая справочная информация, понадобится потом.
			СлужебныеАдресныеСведения = СлужебныеАдресныеСведения(Неопределено, КаталогФайлов);
			// И сразу запишем
			Набор = РегистрыСведений.СлужебныеАдресныеСведения.СоздатьНаборЗаписей();
			Набор.Загрузить(СлужебныеАдресныеСведения.Сведения);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор); 
			
			ВидыСведенийНеОбработаны = Ложь;
		КонецЕсли;
		
		Попытка
			ВерсияСубъектаРФ = ИнформацияОЗагрузкеВерсии(СубъектРФ).Версия;
			Если ВерсияСубъектаРФ <> СлужебныеАдресныеСведения.Версия Тогда
				ЗагрузитьАдресныеОбъекты(СубъектРФ, КаталогФайлов, СлужебныеАдресныеСведения.Сведения);
				ЗагрузитьДомаЗданияСтроения(СубъектРФ, КаталогФайлов, СлужебныеАдресныеСведения.Сведения);
				ЗагрузитьИсториюАдресныхОбъектов(СубъектРФ, КаталогФайлов, СлужебныеАдресныеСведения.Сведения);
				ЗагрузитьПричиныИзмененияАдреса(СубъектРФ, КаталогФайлов, СлужебныеАдресныеСведения.Сведения);
				ЗагрузитьДополнительныеСведения(СубъектРФ, КаталогФайлов, СлужебныеАдресныеСведения.Сведения);
				ЗагрузитьАдресныеОриентиры(СубъектРФ, КаталогФайлов, СлужебныеАдресныеСведения.Сведения);
				
				// Ставим версию данных загрузки региона.
				УстановитьИнформациюОЗагрузкеВерсии(СубъектРФ, СлужебныеАдресныеСведения.Версия, СлужебныеАдресныеСведения.ДатаВерсии, ДатаЗагрузки);
			КонецЕсли;
			
		Исключение
			// Во время загрузки возникла ошибка, очищаем частично загруженные данные.
			КодыСубъектаРФ = Новый Массив;
			КодыСубъектаРФ.Добавить(СубъектРФ);
			ОчиститьКлассификаторАдресов(КодыСубъектаРФ);
			ВызватьИсключение;
		КонецПопытки;
		
		// Очищаем загруженные данные в старом классификаторе.
		ОчиститьСведенияУстаревшегоКлассификатора(СубъектРФ);
		
	КонецЦикла;
	
	// 3. Обновляем список субъектов РФ - убеждаемся, что у нас есть все корневые записи.
	РегистрыСведений.АдресныеОбъекты.ОбновитьСоставСубъектовРФПоКлассификатору();
	
	// 4. Загружаем сокращения адресов.
	// Эти данные будут нужны при разборах адреса из строки.
	АдресныеСокращения = АдресныеСокращения(КаталогФайлов);
	Набор = РегистрыСведений.УровниСокращенийАдресныхСведений.СоздатьНаборЗаписей();
	Набор.Загрузить(АдресныеСокращения.Сведения);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор); // Отключаем всю бизнес-логику для ускорения операции.
	
	// 5. Очищаем временный каталог.
	Если ТипЗнч(ОписаниеФайлов) = Тип("Строка") Тогда
		УдалитьВременныйФайл(КаталогФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет временный файл. 
// Если при попытке удаления возникает ошибка, она игнорируется - файл будет удален позднее.
//
Процедура УдалитьВременныйФайл(ПолноеИмяФайла) Экспорт
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2'"), ПолноеИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему.

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляПользователейСистемы.
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ДобавлениеИзменениеАдресныхСведений.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнение данных для проверки версии по загружаемым данным.
// 
Процедура ЗаполнитьВерсиюПоставщикаДанныхВнутр(Результат)
	Результат.Данные = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'БСП %1'"), СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
КонецПроцедуры

// Конструктор таблицы - результата выбора по почтовому индексу.
// 
Функция ТаблицаДанныхДляВыбораПоПочтовомуИндексу()
	
	Данные = Новый ТаблицаЗначений;
	Колонки = Данные.Колонки;
	Колонки.Добавить("Неактуален",    Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Данные.Индексы.Добавить("Идентификатор");
	Данные.Индексы.Добавить("Представление");
	
	Возврат Данные;
КонецФункции

// Конструктор таблицы - результата автоподбора.
// 
Функция ТаблицаДанныхАвтоподбора()
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	Данные    = Новый ТаблицаЗначений;
	Колонки   = Данные.Колонки;
	
	Колонки.Добавить("Неактуален",     ТипБулево);
	Колонки.Добавить("Идентификатор",  Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("Представление",  Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РегионЗагружен", ТипБулево);
	
	Возврат Данные
КонецФункции

Функция ОпределитьИдентификаторыАдреса(АдресДляПроверки) Экспорт
	
	Результат = Новый Структура("Отказ, ИдентификаторАдресногоОбъекта, ИдентификаторДома, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки", Ложь);
	
	Попытка
		ОпределитьИдентификаторыАдресаСервис1С(Результат, АдресДляПроверки);
	Исключение
		СтруктураОписанияОшибкиПоставщика(Результат, ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Результат.ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Заполнение результата проверки адресного объекта по загруженным данным.
//
Процедура ЗаполнитьРезультатПроверкиАдресаПоКлассификаторуВнутр(Результат, АдресаДляПроверки)
	
	Данные = Результат.Данные;
	Для Каждого ЭлементПроверки Из АдресаДляПроверки Цикл
		ОдиночнаяПроверка = АнализОдногоАдресаПоКлассификатору(ЭлементПроверки.Адрес, ЭлементПроверки.Уровни);
		Данные.Добавить(ОдиночнаяПроверка);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение актуальных данных адресного объекта или ориентира из загруженных данных.
//
Процедура ЗаполнитьАктуальныеАдресныеСведенияВнутр(Результат, Идентификатор)
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	СубъектРФ.Наименование            + "" "" + СубъектРФ.Сокращение            КАК СубъектРФПредставление,
		|	Округ.Наименование                + "" "" + Округ.Сокращение                КАК ОкругПредставление,
		|	Район.Наименование                + "" "" + Район.Сокращение                КАК РайонПредставление,
		|	Город.Наименование                + "" "" + Город.Сокращение                КАК ГородПредставление,
		|	ВнутригородскойРайон.Наименование + "" "" + ВнутригородскойРайон.Сокращение КАК ВнутригородскойРайонПредставление,
		|	НаселенныйПункт.Наименование      + "" "" + НаселенныйПункт.Сокращение      КАК НаселенныйПунктПредставление,
		|	Улица.Наименование                + "" "" + Улица.Сокращение                КАК УлицаПредставление,
		|	Дополнительный.Наименование       + "" "" + Дополнительный.Сокращение       КАК ДополнительныйПредставление,
		|	Подчиненный.Наименование          + "" "" + Подчиненный.Сокращение          КАК ПодчиненныйПредставление,
		|
		|	ОбъектАдреса.ОписаниеОриентира КАК ОписаниеОриентира,
		|	
		|	ОбъектАдреса.ПочтовыйИндекс КАК ПочтовыйИндекс,
		|	ДополнительныеДанные.OKATO  КАК ОКАТО,
		|	ДополнительныеДанные.ОКТМО  КАК ОКТМО,
		|	
		|	СлужебныеАдресныеСведенияИндекс.Значение                                                                              КАК ТипАдрЭлПочтовыйИндекс,
		|	ЕСТЬNULL(СлужебныеАдресныеСведенияДополнительный.Значение, УмолчаниеСлужебныхАдресныхСведенийДополнительный.Значение) КАК ТипАдрЭлДополнительный,
		|	ЕСТЬNULL(СлужебныеАдресныеСведенияПодчиненный.Значение, УмолчаниеСлужебныхАдресныхСведенийПодчиненный.Значение)       КАК ТипАдрЭлПодчиненный
		|
		|ИЗ (
		|	ВЫБРАТЬ
		|		КодСубъектаРФ              КАК КодСубъектаРФ,
		|		КодОкруга                  КАК КодОкруга,
		|		КодРайона                  КАК КодРайона,
		|		КодГорода                  КАК КодГорода,
		|		КодВнутригородскогоРайона  КАК КодВнутригородскогоРайона,
		|		КодНаселенногоПункта       КАК КодНаселенногоПункта,
		|		КодУлицы                   КАК КодУлицы,
		|		КодДополнительногоЭлемента КАК КодДополнительногоЭлемента,
		|		КодПодчиненногоЭлемента    КАК КодПодчиненногоЭлемента,
		|		ПочтовыйИндекс             КАК ПочтовыйИндекс,
		|		Дополнительно              КАК Дополнительно,
		|		NULL                       КАК ОписаниеОриентира
		|	ИЗ		
		|		РегистрСведений.АдресныеОбъекты
		|	ГДЕ 
		|		Идентификатор = &Идентификатор
		|	ОБЪЕДИНИТЬ ВСЕ 
		|	ВЫБРАТЬ
		|		РегистрАдресныйОбъект.КодСубъектаРФ              КАК КодСубъектаРФ,
		|		РегистрАдресныйОбъект.КодОкруга                  КАК КодОкруга,
		|		РегистрАдресныйОбъект.КодРайона                  КАК КодРайона,
		|		РегистрАдресныйОбъект.КодГорода                  КАК КодГорода,
		|		РегистрАдресныйОбъект.КодВнутригородскогоРайона  КАК КодВнутригородскогоРайона,
		|		РегистрАдресныйОбъект.КодНаселенногоПункта       КАК КодНаселенногоПункта,
		|		РегистрАдресныйОбъект.КодУлицы                   КАК КодУлицы,
		|		РегистрАдресныйОбъект.КодДополнительногоЭлемента КАК КодДополнительногоЭлемента,
		|		РегистрАдресныйОбъект.КодПодчиненногоЭлемента    КАК КодПодчиненногоЭлемента,
		|		Ориентир.ПочтовыйИндекс                          КАК ПочтовыйИндекс,
		|		Ориентир.Дополнительно                           КАК Дополнительно,
		|		Ориентир.Описание                                КАК ОписаниеОриентира
		|	ИЗ		
		|		РегистрСведений.ОриентирыАдресныхОбъектов КАК Ориентир
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АдресныеОбъекты КАК РегистрАдресныйОбъект
		|	ПО
		|		РегистрАдресныйОбъект.Идентификатор = Ориентир.АдресныйОбъект
		|	ГДЕ 
		|		Ориентир.Идентификатор = &Идентификатор
		|		
		|) КАК ОбъектАдреса
		|	
		|// Иерархия объекта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК СубъектРФ
		|ПО
		|	СубъектРФ.Уровень = 1
		|	И СубъектРФ.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И СубъектРФ.КодОкруга                  = 0
		|	И СубъектРФ.КодРайона                  = 0
		|	И СубъектРФ.КодГорода                  = 0
		|	И СубъектРФ.КодВнутригородскогоРайона  = 0
		|	И СубъектРФ.КодНаселенногоПункта       = 0
		|	И СубъектРФ.КодУлицы                   = 0
		|	И СубъектРФ.КодДополнительногоЭлемента = 0
		|	И СубъектРФ.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Округ
		|ПО
		|	Округ.Уровень = 2
		|	И Округ.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И Округ.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И Округ.КодРайона                  = 0
		|	И Округ.КодГорода                  = 0
		|	И Округ.КодВнутригородскогоРайона  = 0
		|	И Округ.КодНаселенногоПункта       = 0
		|	И Округ.КодУлицы                   = 0
		|	И Округ.КодДополнительногоЭлемента = 0
		|	И Округ.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Район
		|ПО
		|	Район.Уровень = 3
		|	И Район.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И Район.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И Район.КодРайона                  = ОбъектАдреса.КодРайона
		|	И Район.КодГорода                  = 0
		|	И Район.КодВнутригородскогоРайона  = 0
		|	И Район.КодНаселенногоПункта       = 0
		|	И Район.КодУлицы                   = 0
		|	И Район.КодДополнительногоЭлемента = 0
		|	И Район.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Город
		|ПО
		|	Город.Уровень = 4
		|	И Город.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И Город.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И Город.КодРайона                  = ОбъектАдреса.КодРайона
		|	И Город.КодГорода                  = ОбъектАдреса.КодГорода
		|	И Город.КодВнутригородскогоРайона  = 0
		|	И Город.КодНаселенногоПункта       = 0
		|	И Город.КодУлицы                   = 0
		|	И Город.КодДополнительногоЭлемента = 0
		|	И Город.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК ВнутригородскойРайон
		|ПО
		|	ВнутригородскойРайон.Уровень = 5
		|	И ВнутригородскойРайон.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И ВнутригородскойРайон.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И ВнутригородскойРайон.КодРайона                  = ОбъектАдреса.КодРайона
		|	И ВнутригородскойРайон.КодГорода                  = ОбъектАдреса.КодГорода
		|	И ВнутригородскойРайон.КодВнутригородскогоРайона  = ОбъектАдреса.КодВнутригородскогоРайона
		|	И ВнутригородскойРайон.КодНаселенногоПункта       = 0
		|	И ВнутригородскойРайон.КодУлицы                   = 0
		|	И ВнутригородскойРайон.КодДополнительногоЭлемента = 0
		|	И ВнутригородскойРайон.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК НаселенныйПункт
		|ПО
		|	НаселенныйПункт.Уровень = 6
		|	И НаселенныйПункт.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И НаселенныйПункт.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И НаселенныйПункт.КодРайона                  = ОбъектАдреса.КодРайона
		|	И НаселенныйПункт.КодГорода                  = ОбъектАдреса.КодГорода
		|	И НаселенныйПункт.КодВнутригородскогоРайона  = ОбъектАдреса.КодВнутригородскогоРайона
		|	И НаселенныйПункт.КодНаселенногоПункта       = ОбъектАдреса.КодНаселенногоПункта
		|	И НаселенныйПункт.КодУлицы                   = 0
		|	И НаселенныйПункт.КодДополнительногоЭлемента = 0
		|	И НаселенныйПункт.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Улица
		|ПО
		|	Улица.Уровень = 7
		|	И Улица.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И Улица.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И Улица.КодРайона                  = ОбъектАдреса.КодРайона
		|	И Улица.КодГорода                  = ОбъектАдреса.КодГорода
		|	И Улица.КодВнутригородскогоРайона  = ОбъектАдреса.КодВнутригородскогоРайона
		|	И Улица.КодНаселенногоПункта       = ОбъектАдреса.КодНаселенногоПункта
		|	И Улица.КодУлицы                   = ОбъектАдреса.КодУлицы
		|	И Улица.КодДополнительногоЭлемента = 0
		|	И Улица.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Дополнительный
		|ПО
		|	Дополнительный.Уровень = 90
		|	И Дополнительный.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И Дополнительный.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И Дополнительный.КодРайона                  = ОбъектАдреса.КодРайона
		|	И Дополнительный.КодГорода                  = ОбъектАдреса.КодГорода
		|	И Дополнительный.КодВнутригородскогоРайона  = ОбъектАдреса.КодВнутригородскогоРайона
		|	И Дополнительный.КодНаселенногоПункта       = ОбъектАдреса.КодНаселенногоПункта
		|	И Дополнительный.КодУлицы                   = ОбъектАдреса.КодУлицы
		|	И Дополнительный.КодДополнительногоЭлемента = ОбъектАдреса.КодДополнительногоЭлемента
		|	И Дополнительный.КодПодчиненногоЭлемента    = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Подчиненный
		|ПО
		|	Подчиненный.Уровень = 91
		|	И Подчиненный.КодСубъектаРФ              = ОбъектАдреса.КодСубъектаРФ
		|	И Подчиненный.КодОкруга                  = ОбъектАдреса.КодОкруга
		|	И Подчиненный.КодРайона                  = ОбъектАдреса.КодРайона
		|	И Подчиненный.КодГорода                  = ОбъектАдреса.КодГорода
		|	И Подчиненный.КодВнутригородскогоРайона  = ОбъектАдреса.КодВнутригородскогоРайона
		|	И Подчиненный.КодНаселенногоПункта       = ОбъектАдреса.КодНаселенногоПункта
		|	И Подчиненный.КодУлицы                   = ОбъектАдреса.КодУлицы
		|	И Подчиненный.КодДополнительногоЭлемента = ОбъектАдреса.КодДополнительногоЭлемента
		|	И Подчиненный.КодПодчиненногоЭлемента    = ОбъектАдреса.КодПодчиненногоЭлемента
		|
		|// Дополнительные данные
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК ДополнительныеДанные
		|ПО
		|	ДополнительныеДанные.Идентификатор = ОбъектАдреса.Дополнительно
		|
		|// Значения типов для контактной информации
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК СлужебныеАдресныеСведенияИндекс
		|ПО
		|	СлужебныеАдресныеСведенияИндекс.Тип             = ""ТипАдрЭл""
		|	И СлужебныеАдресныеСведенияИндекс.Идентификатор = 0
		|	И СлужебныеАдресныеСведенияИндекс.Ключ          = ""ПочтовыйИндекс""
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК СлужебныеАдресныеСведенияДополнительный
		|ПО
		|	СлужебныеАдресныеСведенияДополнительный.Тип             = ""ТипАдрЭл""
		|	И СлужебныеАдресныеСведенияДополнительный.Идентификатор = 90
		|	И СлужебныеАдресныеСведенияДополнительный.Ключ          = Дополнительный.Сокращение
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК СлужебныеАдресныеСведенияПодчиненный
		|ПО
		|	СлужебныеАдресныеСведенияПодчиненный.Тип             = ""ТипАдрЭл""
		|	И СлужебныеАдресныеСведенияПодчиненный.Идентификатор = 91
		|	И СлужебныеАдресныеСведенияПодчиненный.Ключ          = Подчиненный.Сокращение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК УмолчаниеСлужебныхАдресныхСведенийДополнительный
		|ПО
		|	СлужебныеАдресныеСведенияДополнительный.Тип             = ""ТипАдрЭл""
		|	И СлужебныеАдресныеСведенияДополнительный.Идентификатор = 90
		|	И СлужебныеАдресныеСведенияДополнительный.Ключ          = """"
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК УмолчаниеСлужебныхАдресныхСведенийПодчиненный
		|ПО
		|	СлужебныеАдресныеСведенияПодчиненный.Тип             = ""ТипАдрЭл""
		|	И СлужебныеАдресныеСведенияПодчиненный.Идентификатор = 91
		|	И СлужебныеАдресныеСведенияПодчиненный.Ключ          = """"";

	// Пустой адрес
	Адрес = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИменАдресаРФ(), "АдресРФ") );
	Результат.Данные = Адрес;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Новый УникальныйИдентификатор(Идентификатор));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьXDTOРеквизитОбъекта(Адрес, "СубъектРФ",      Выборка.СубъектРФПредставление);
	УстановитьXDTOРеквизитОбъекта(Адрес, "Округ",          Выборка.ОкругПредставление);
	УстановитьXDTOРеквизитОбъекта(Адрес, "СвРайМО/Район",  Выборка.РайонПредставление);
	УстановитьXDTOРеквизитОбъекта(Адрес, "Город",          Выборка.ГородПредставление);
	УстановитьXDTOРеквизитОбъекта(Адрес, "НаселПункт",     Выборка.НаселенныйПунктПредставление);
	УстановитьXDTOРеквизитОбъекта(Адрес, "ВнутригРайон",   Выборка.ВнутригородскойРайонПредставление);
	УстановитьXDTOРеквизитОбъекта(Адрес, "Улица",          Выборка.УлицаПредставление);
	УстановитьXDTOРеквизитОбъекта(Адрес, "ОКАТО",          Выборка.ОКАТО);
	УстановитьXDTOРеквизитОбъекта(Адрес, "ОКТМО",          Выборка.ОКТМО);
	УстановитьXDTOРеквизитОбъекта(Адрес, "Местоположение", Выборка.ОписаниеОриентира);
	
	
	// Дополнительные свойства
	ДобавитьXDTOРеквизитСписка(Адрес, "ДопАдрЭл", Новый Структура("ТипАдрЭл, Значение", Выборка.ТипАдрЭлПочтовыйИндекс, Выборка.ПочтовыйИндекс));
	
	Если НЕ ПустаяСтрока(Выборка.ДополнительныйПредставление) Тогда 
		ДобавитьXDTOРеквизитСписка(Адрес, "ДопАдрЭл", Новый Структура("ТипАдрЭл, Значение", КодДополнительногоЭлемента(Выборка.ДополнительныйПредставление),
			Выборка.ДополнительныйПредставление));
	КонецЕсли;
	
	ДобавитьXDTOРеквизитСписка(Адрес, "ДопАдрЭл", Новый Структура("ТипАдрЭл, Значение", "10400000", Выборка.ПодчиненныйПредставление));
	
КонецПроцедуры

// Заполнение данных для автоподбора из загруженных данных.
//
Процедура ЗаполнитьСписокАвтоподбораЧастиАдресаВнутр(Результат, Текст, Родитель, УровниЗапроса, ДополнительныеПараметры)
	
	ОтбиратьЗаписейДляАнализа = "300";
	ОтбиратьЗаписейДляСписка = "20";
	
	ТекстПоиска = ЗамаскироватьСпецсимволыПодобия(Текст);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоФразы", ТекстПоиска + "%");
	Запрос.УстановитьПараметр("НачалоСлова", "% " + ТекстПоиска + "%");
	Запрос.УстановитьПараметр("Уровни",      УровниЗапроса);
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		Запрос.УстановитьПараметр("Родитель", Новый УникальныйИдентификатор(Родитель));
		// Родитель указан явно
		ТекстЗапросаПодходящиеОбъекты = "ВЫБРАТЬ ПЕРВЫЕ " + ОтбиратьЗаписейДляАнализа + "
			|	АдресныйОбъект.Уровень,
			|	АдресныйОбъект.КодСубъектаРФ,
			|	АдресныйОбъект.КодОкруга,
			|	АдресныйОбъект.КодРайона,
			|	АдресныйОбъект.КодГорода,
			|	АдресныйОбъект.КодВнутригородскогоРайона,
			|	АдресныйОбъект.КодНаселенногоПункта,
			|	АдресныйОбъект.КодУлицы,
			|	АдресныйОбъект.КодДополнительногоЭлемента,
			|	АдресныйОбъект.КодПодчиненногоЭлемента,
			|	АдресныйОбъект.Идентификатор,
			|	
			|	АдресныйОбъект.Наименование,
			|	АдресныйОбъект.Актуален КАК Актуален,
			|	АдресныйОбъект.Сокращение,
			|	
			|	ВЫБОР КОГДА 1 В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 2 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 3 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 4 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 5 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 6 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 7 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 90 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 91 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|	) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РегионЗагружен
			|ПОМЕСТИТЬ
			|	ПодходящиеОбъекты
			|ИЗ
			|	РегистрСведений.АдресныеОбъекты КАК РодительскийОбъект
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныеОбъекты КАК АдресныйОбъект
			|ПО
			|	АдресныйОбъект.Уровень В (&Уровни)
			|	И АдресныйОбъект.КодСубъектаРФ = РодительскийОбъект.КодСубъектаРФ
			|	И АдресныйОбъект.Идентификатор <> РодительскийОбъект.Идентификатор
			|	// Подобие наименование зависит от уровня - на улице включаем поиск по части фразы
			|	И ВЫБОР 
			|		КОГДА 7 В (&Уровни) ТОГДА
			|			АдресныйОбъект.Наименование ПОДОБНО &НачалоФразы
			|			ИЛИ АдресныйОбъект.Наименование ПОДОБНО &НачалоСлова
			|		КОГДА 90 В (&Уровни) ТОГДА
			|			АдресныйОбъект.Наименование ПОДОБНО &НачалоФразы
			|			ИЛИ АдресныйОбъект.Наименование ПОДОБНО &НачалоСлова
			|		КОГДА 91 В (&Уровни) ТОГДА
			|			АдресныйОбъект.Наименование ПОДОБНО &НачалоФразы
			|			ИЛИ АдресныйОбъект.Наименование ПОДОБНО &НачалоСлова
			|		ИНАЧЕ
			|			АдресныйОбъект.Наименование ПОДОБНО &НачалоФразы
			|	КОНЕЦ
			|
			|	И ВЫБОР
			|		КОГДА РодительскийОбъект.Уровень = 2 ТОГДА
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			  
			|		КОГДА РодительскийОбъект.Уровень = 3 ТОГДА
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона = РодительскийОбъект.КодРайона
			|		
			|		КОГДА РодительскийОбъект.Уровень = 4 ТОГДА
			|			  АдресныйОбъект.КодОкруга  = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона  = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода  = РодительскийОбъект.КодГорода
			|			
			|		КОГДА РодительскийОбъект.Уровень = 5 ТОГДА
			|			  АдресныйОбъект.КодОкруга  = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона  = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода  = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			
			|		КОГДА РодительскийОбъект.Уровень = 6 ТОГДА
			|			  АдресныйОбъект.КодОкруга  = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона  = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода  = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
			|		
			|		КОГДА РодительскийОбъект.Уровень = 7 ТОГДА
			|			  АдресныйОбъект.КодОкруга  = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона  = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода  = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
			|			И АдресныйОбъект.КодУлицы                   = РодительскийОбъект.КодУлицы
			|	
			|		КОГДА РодительскийОбъект.Уровень = 90 ТОГДА
			|			  АдресныйОбъект.КодОкруга  = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона  = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода  = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
			|			И АдресныйОбъект.КодУлицы                   = РодительскийОбъект.КодУлицы
			|			И АдресныйОбъект.КодДополнительногоЭлемента = РодительскийОбъект.КодДополнительногоЭлемента
			|		
			|		КОГДА РодительскийОбъект.Уровень = 91 ТОГДА
			|			  АдресныйОбъект.КодОкруга  = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона  = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода  = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
			|			И АдресныйОбъект.КодУлицы                   = РодительскийОбъект.КодУлицы
			|			И АдресныйОбъект.КодДополнительногоЭлемента = РодительскийОбъект.КодДополнительногоЭлемента
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = РодительскийОбъект.КодПодчиненногоЭлемента
			|		
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|	
			|	И ВЫБОР
			|		КОГДА АдресныйОбъект.Уровень = 2 ТОГДА	// Округ
			|			  АдресныйОбъект.КодРайона = 0
			|			И АдресныйОбъект.КодГорода = 0
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = 0
			|			И АдресныйОбъект.КодНаселенногоПункта       = 0
			|			И АдресныйОбъект.КодУлицы                   = 0
			|			И АдресныйОбъект.КодДополнительногоЭлемента = 0
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
			|			
			|		КОГДА АдресныйОбъект.Уровень = 2 ТОГДА	// Район
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодГорода = 0
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = 0
			|			И АдресныйОбъект.КодНаселенногоПункта       = 0
			|			И АдресныйОбъект.КодУлицы                   = 0
			|			И АдресныйОбъект.КодДополнительногоЭлемента = 0
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
			|			
			|		КОГДА АдресныйОбъект.Уровень = 4 ТОГДА	// Город
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = 0
			|			И АдресныйОбъект.КодНаселенногоПункта       = 0
			|			И АдресныйОбъект.КодУлицы                   = 0
			|			И АдресныйОбъект.КодДополнительногоЭлемента = 0
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
			|			
			|		КОГДА АдресныйОбъект.Уровень = 5 ТОГДА	// Внутригородской район
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодНаселенногоПункта       = 0
			|			И АдресныйОбъект.КодУлицы                   = 0
			|			И АдресныйОбъект.КодДополнительногоЭлемента = 0
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
			|		
			|		КОГДА АдресныйОбъект.Уровень = 6 ТОГДА	// Населенный пункт
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодУлицы                   = 0
			|			И АдресныйОбъект.КодДополнительногоЭлемента = 0
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
			|			
			|		КОГДА АдресныйОбъект.Уровень = 7 ТОГДА	// Улица
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
			|			И АдресныйОбъект.КодДополнительногоЭлемента = 0
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
			|			
			|		КОГДА АдресныйОбъект.Уровень = 90 ТОГДА	// Дополнительный
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
			|			И АдресныйОбъект.КодУлицы                   = РодительскийОбъект.КодУлицы
			|			И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
			|			
			|		КОГДА АдресныйОбъект.Уровень = 91 ТОГДА	// Подчиненный
			|			  АдресныйОбъект.КодОкруга = РодительскийОбъект.КодОкруга
			|			И АдресныйОбъект.КодРайона = РодительскийОбъект.КодРайона
			|			И АдресныйОбъект.КодГорода = РодительскийОбъект.КодГорода
			|			И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
			|			И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
			|			И АдресныйОбъект.КодУлицы                   = РодительскийОбъект.КодУлицы
			|			И АдресныйОбъект.КодДополнительногоЭлемента = РодительскийОбъект.КодДополнительногоЭлемента
			|			
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныеОбъекты КАК Регион
			|ПО 
			|	Регион.Уровень = 1
			|	И Регион.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
			|	И Регион.КодОкруга                  = 0
			|	И Регион.КодРайона                  = 0
			|	И Регион.КодГорода                  = 0
			|	И Регион.КодВнутригородскогоРайона  = 0
			|	И Регион.КодНаселенногоПункта       = 0
			|	И Регион.КодУлицы                   = 0
			|	И Регион.КодДополнительногоЭлемента = 0
			|	И Регион.КодПодчиненногоЭлемента    = 0
			|ГДЕ 
			|	РодительскийОбъект.Идентификатор = &Родитель
			|	И НЕ АдресныйОбъект.Идентификатор ЕСТЬ NULL
			|УПОРЯДОЧИТЬ ПО
			|	АдресныйОбъект.Уровень
			|ИНДЕКСИРОВАТЬ ПО
			|	АдресныйОбъект.Уровень,
			|	АдресныйОбъект.КодСубъектаРФ,
			|	АдресныйОбъект.КодОкруга,
			|	АдресныйОбъект.КодРайона,
			|	АдресныйОбъект.КодГорода,
			|	АдресныйОбъект.КодВнутригородскогоРайона,
			|	АдресныйОбъект.КодНаселенногоПункта,
			|	АдресныйОбъект.КодУлицы,
			|	АдресныйОбъект.КодДополнительногоЭлемента,
			|	АдресныйОбъект.КодПодчиненногоЭлемента,
			|	АдресныйОбъект.Идентификатор
			|";
	Иначе
		Запрос.УстановитьПараметр("Родитель", Неопределено);
		// Родитель НЕ указан
		ТекстЗапросаПодходящиеОбъекты = "ВЫБРАТЬ ПЕРВЫЕ " + ОтбиратьЗаписейДляАнализа + "
			|	АдресныйОбъект.Уровень,
			|	АдресныйОбъект.КодСубъектаРФ,
			|	АдресныйОбъект.КодОкруга,
			|	АдресныйОбъект.КодРайона,
			|	АдресныйОбъект.КодГорода,
			|	АдресныйОбъект.КодВнутригородскогоРайона,
			|	АдресныйОбъект.КодНаселенногоПункта,
			|	АдресныйОбъект.КодУлицы,
			|	АдресныйОбъект.КодДополнительногоЭлемента,
			|	АдресныйОбъект.КодПодчиненногоЭлемента,
			|	АдресныйОбъект.Идентификатор,
			|	АдресныйОбъект.Наименование, 
			|	АдресныйОбъект.Сокращение, 
			|	АдресныйОбъект.Актуален КАК Актуален,
			|	
			|	ВЫБОР КОГДА 1 В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 2 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 3 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 4 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 5 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 6 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 7 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 90 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 91 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|	) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РегионЗагружен
			|ПОМЕСТИТЬ
			|	ПодходящиеОбъекты
			|ИЗ
			|	РегистрСведений.АдресныеОбъекты КАК АдресныйОбъект
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныеОбъекты КАК Регион
			|ПО 
			|	Регион.Уровень = 1
			|	И Регион.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ
			|	И Регион.КодОкруга = 0
			|	И Регион.КодРайона = 0
			|	И Регион.КодГорода = 0
			|	И Регион.КодВнутригородскогоРайона = 0
			|	И Регион.КодНаселенногоПункта = 0
			|	И Регион.КодУлицы = 0
			|	И Регион.КодДополнительногоЭлемента = 0
			|	И Регион.КодПодчиненногоЭлемента = 0
			|ГДЕ 
			|	АдресныйОбъект.Наименование ПОДОБНО &НачалоФразы
			|	И АдресныйОбъект.Уровень В (&Уровни)
			|УПОРЯДОЧИТЬ ПО
			|	АдресныйОбъект.Уровень
			|ИНДЕКСИРОВАТЬ ПО
			|	АдресныйОбъект.Уровень,
			|	АдресныйОбъект.КодСубъектаРФ,
			|	АдресныйОбъект.КодОкруга,
			|	АдресныйОбъект.КодРайона,
			|	АдресныйОбъект.КодГорода,
			|	АдресныйОбъект.КодВнутригородскогоРайона,
			|	АдресныйОбъект.КодНаселенногоПункта,
			|	АдресныйОбъект.КодУлицы,
			|	АдресныйОбъект.КодДополнительногоЭлемента,
			|	АдресныйОбъект.КодПодчиненногоЭлемента,
			|	АдресныйОбъект.Идентификатор
			|";
	КонецЕсли;

	ТекстЗапроса =  ТекстЗапросаПодходящиеОбъекты + "
		|;/////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ " + ОтбиратьЗаписейДляСписка + "
		|	СубъектРФ.Наименование КАК СубъектРФНаименование,
		|	СубъектРФ.Сокращение   КАК СубъектРФСокращение,
		|	
		|	Округ.Наименование КАК ОкругНаименование,
		|	Округ.Сокращение   КАК ОкругСокращение,
		|	
		|	Район.Наименование КАК РайонНаименование,
		|	Район.Сокращение   КАК РайонСокращение,
		|	
		|	Город.Наименование КАК ГородНаименование,
		|	Город.Сокращение   КАК ГородСокращение,
		|	
		|	ВнутригородскойРайон.Наименование КАК ВнутригородскойРайонНаименование,
		|	ВнутригородскойРайон.Сокращение   КАК ВнутригородскойРайонСокращение,
		|	
		|	НаселенныйПункт.Наименование КАК НаселенныйПунктНаименование,
		|	НаселенныйПункт.Сокращение   КАК НаселенныйПунктСокращение,
		|	
		|	Улица.Наименование КАК УлицаНаименование,
		|	Улица.Сокращение   КАК УлицаСокращение,
		|	
		|	Дополнительный.Наименование КАК ДополнительныйНаименование,
		|	Дополнительный.Сокращение   КАК ДополнительныйСокращение,
		|	
		|	Подчиненный.Наименование КАК ПодчиненныйНаименование,
		|	Подчиненный.Сокращение   КАК ПодчиненныйСокращение,
		|	
		|	АдресныйОбъект.Идентификатор КАК Идентификатор,
		|	
		|	АдресныйОбъект.Наименование  КАК Наименование, 
		|	АдресныйОбъект.Сокращение    КАК Сокращение,
		|
		|	РегионЗагружен КАК РегионЗагружен,
		|	НЕ АдресныйОбъект.Актуален КАК Неактуален
		|
		|ИЗ
		|	ПодходящиеОбъекты КАК АдресныйОбъект
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК СубъектРФ
		|ПО
		|	1 В (&Уровни)
		|	И СубъектРФ.Уровень = 1
		|	И СубъектРФ.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И СубъектРФ.КодОкруга                  = 0
		|	И СубъектРФ.КодРайона                  = 0
		|	И СубъектРФ.КодГорода                  = 0
		|	И СубъектРФ.КодВнутригородскогоРайона  = 0
		|	И СубъектРФ.КодНаселенногоПункта       = 0
		|	И СубъектРФ.КодУлицы                   = 0
		|	И СубъектРФ.КодДополнительногоЭлемента = 0
		|	И СубъектРФ.КодПодчиненногоЭлемента    = 0
		|	И СубъектРФ.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Округ
		|ПО
		|	2 В (&Уровни)
		|	И Округ.Уровень = 2
		|	И Округ.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И Округ.КодОкруга                  = АдресныйОбъект.КодОкруга
		|	И Округ.КодРайона                  = 0
		|	И Округ.КодГорода                  = 0
		|	И Округ.КодВнутригородскогоРайона  = 0
		|	И Округ.КодНаселенногоПункта       = 0
		|	И Округ.КодУлицы                   = 0
		|	И Округ.КодДополнительногоЭлемента = 0
		|	И Округ.КодПодчиненногоЭлемента    = 0
		|	И Округ.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Район
		|ПО
		|	3 В (&Уровни)
		|	И Район.Уровень = 3
		|	И Район.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И Район.КодОкруга                  = АдресныйОбъект.КодОкруга	
		|	И Район.КодРайона                  = АдресныйОбъект.КодРайона
		|	И Район.КодГорода                  = 0
		|	И Район.КодВнутригородскогоРайона  = 0
		|	И Район.КодНаселенногоПункта       = 0
		|	И Район.КодУлицы                   = 0
		|	И Район.КодДополнительногоЭлемента = 0
		|	И Район.КодПодчиненногоЭлемента    = 0
		|	И Район.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Город
		|ПО
		|	4 В (&Уровни)
		|	И Город.Уровень = 4
		|	И Город.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И Город.КодОкруга                  = АдресныйОбъект.КодОкруга
		|	И Город.КодРайона                  = АдресныйОбъект.КодРайона
		|	И Город.КодГорода                  = АдресныйОбъект.КодГорода
		|	И Город.КодВнутригородскогоРайона  = 0
		|	И Город.КодНаселенногоПункта       = 0
		|	И Город.КодУлицы                   = 0
		|	И Город.КодДополнительногоЭлемента = 0
		|	И Город.КодПодчиненногоЭлемента    = 0
		|	И Город.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК ВнутригородскойРайон
		|ПО
		|	5 В (&Уровни)
		|	И ВнутригородскойРайон.Уровень = 5
		|	И ВнутригородскойРайон.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И ВнутригородскойРайон.КодОкруга                  = АдресныйОбъект.КодОкруга
		|	И ВнутригородскойРайон.КодРайона                  = АдресныйОбъект.КодРайона
		|	И ВнутригородскойРайон.КодГорода                  = АдресныйОбъект.КодГорода
		|	И ВнутригородскойРайон.КодВнутригородскогоРайона  = АдресныйОбъект.КодВнутригородскогоРайона
		|	И ВнутригородскойРайон.КодНаселенногоПункта       = 0
		|	И ВнутригородскойРайон.КодУлицы                   = 0
		|	И ВнутригородскойРайон.КодДополнительногоЭлемента = 0
		|	И ВнутригородскойРайон.КодПодчиненногоЭлемента    = 0
		|	И ВнутригородскойРайон.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК НаселенныйПункт
		|ПО
		|	6 В (&Уровни)
		|	И НаселенныйПункт.Уровень = 6
		|	И НаселенныйПункт.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И НаселенныйПункт.КодОкруга                  = АдресныйОбъект.КодОкруга
		|	И НаселенныйПункт.КодРайона                  = АдресныйОбъект.КодРайона
		|	И НаселенныйПункт.КодГорода                  = АдресныйОбъект.КодГорода
		|	И НаселенныйПункт.КодВнутригородскогоРайона  = АдресныйОбъект.КодВнутригородскогоРайона
		|	И НаселенныйПункт.КодНаселенногоПункта       = АдресныйОбъект.КодНаселенногоПункта
		|	И НаселенныйПункт.КодУлицы                   = 0
		|	И НаселенныйПункт.КодДополнительногоЭлемента = 0
		|	И НаселенныйПункт.КодПодчиненногоЭлемента    = 0
		|	И НаселенныйПункт.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Улица
		|ПО
		|	7 В (&Уровни)
		|	И Улица.Уровень = 7
		|	И Улица.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И Улица.КодОкруга                  = АдресныйОбъект.КодОкруга
		|	И Улица.КодРайона                  = АдресныйОбъект.КодРайона
		|	И Улица.КодГорода                  = АдресныйОбъект.КодГорода
		|	И Улица.КодВнутригородскогоРайона  = АдресныйОбъект.КодВнутригородскогоРайона
		|	И Улица.КодНаселенногоПункта       = АдресныйОбъект.КодНаселенногоПункта
		|	И Улица.КодУлицы                   = АдресныйОбъект.КодУлицы
		|	И Улица.КодДополнительногоЭлемента = 0
		|	И Улица.КодПодчиненногоЭлемента    = 0
		|	И Улица.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Дополнительный
		|ПО
		|	90 В (&Уровни)
		|	И Дополнительный.Уровень = 90
		|	И Дополнительный.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И Дополнительный.КодОкруга                  = АдресныйОбъект.КодОкруга
		|	И Дополнительный.КодРайона                  = АдресныйОбъект.КодРайона
		|	И Дополнительный.КодГорода                  = АдресныйОбъект.КодГорода
		|	И Дополнительный.КодВнутригородскогоРайона  = АдресныйОбъект.КодВнутригородскогоРайона
		|	И Дополнительный.КодНаселенногоПункта       = АдресныйОбъект.КодНаселенногоПункта
		|	И Дополнительный.КодУлицы                   = АдресныйОбъект.КодУлицы
		|	И Дополнительный.КодДополнительногоЭлемента = АдресныйОбъект.КодДополнительногоЭлемента
		|	И Дополнительный.КодПодчиненногоЭлемента    = 0
		|	И Дополнительный.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Подчиненный
		|ПО
		|	91 В (&Уровни)
		|	И Подчиненный.Уровень = 91
		|	И Подчиненный.КодСубъектаРФ              = АдресныйОбъект.КодСубъектаРФ
		|	И Подчиненный.КодОкруга                  = АдресныйОбъект.КодОкруга
		|	И Подчиненный.КодРайона                  = АдресныйОбъект.КодРайона
		|	И Подчиненный.КодГорода                  = АдресныйОбъект.КодГорода
		|	И Подчиненный.КодВнутригородскогоРайона  = АдресныйОбъект.КодВнутригородскогоРайона
		|	И Подчиненный.КодНаселенногоПункта       = АдресныйОбъект.КодНаселенногоПункта
		|	И Подчиненный.КодУлицы                   = АдресныйОбъект.КодУлицы
		|	И Подчиненный.КодДополнительногоЭлемента = АдресныйОбъект.КодДополнительногоЭлемента
		|	И Подчиненный.КодПодчиненногоЭлемента    = АдресныйОбъект.КодПодчиненногоЭлемента
		|	И Подчиненный.Идентификатор <> АдресныйОбъект.Идентификатор
		|
		|УПОРЯДОЧИТЬ ПО
		|	АдресныйОбъект.Уровень,
		|	ПодчиненныйНаименование,
		|	ДополнительныйНаименование,
		|	УлицаНаименование,
		|	НаселенныйПунктНаименование,
		|	ВнутригородскойРайонНаименование,
		|	ГородНаименование,
		|	РайонНаименование,
		|	ОкругНаименование,
		|	СубъектРФНаименование
		|";
		
	Запрос.Текст = ТекстЗапроса;
	
	Данные = Результат.Данные;
	Для Каждого Строка Из Запрос.Выполнить().Выгрузить() Цикл
		СтрокаРезультата = Данные.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, Строка, "Идентификатор, РегионЗагружен, Неактуален");
		
		Представление = "";
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.Наименование, Строка.Сокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ПодчиненныйНаименование, Строка.ПодчиненныйСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ДополнительныйНаименование, Строка.ДополнительныйСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.УлицаНаименование, Строка.УлицаСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.НаселенныйПунктНаименование, Строка.НаселенныйПунктСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ВнутригородскойРайонНаименование, Строка.ВнутригородскойРайонСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ГородНаименование, Строка.ГородСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.РайонНаименование, Строка.РайонСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ОкругНаименование, Строка.ОкругСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.СубъектРФНаименование, Строка.СубъектРФСокращение);
		СтрокаРезультата.Представление = Представление;
		
		Если СтрокаРезультата.РегионЗагружен = Ложь И НЕ ЗначениеЗаполнено(Строка.СубъектРФНаименование) Тогда
			СтрокаРезультата.Неактуален = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение адреса по индексу из загруженных данных.
// 
Процедура ЗаполнитьАдресаПоПочтовомуИндексуКлассификатораВнутр(Результат, Индекс, Уровни, ДополнительныеПараметры)
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	АдресныеОбъекты.Уровень КАК Уровень,
		|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
		|	АдресныеОбъекты.КодОкруга КАК КодОкруга,
		|	АдресныеОбъекты.КодРайона КАК КодРайона,
		|	АдресныеОбъекты.КодГорода КАК КодГорода,
		|	АдресныеОбъекты.КодВнутригородскогоРайона КАК КодВнутригородскогоРайона,
		|	АдресныеОбъекты.КодНаселенногоПункта КАК КодНаселенногоПункта,
		|	АдресныеОбъекты.КодУлицы КАК КодУлицы,
		|	АдресныеОбъекты.КодДополнительногоЭлемента КАК КодДополнительногоЭлемента,
		|	АдресныеОбъекты.КодПодчиненногоЭлемента КАК КодПодчиненногоЭлемента,
		|	АдресныеОбъекты.Идентификатор КАК Идентификатор,
		|	ДомаЗданияСтроения.ПочтовыйИндекс КАК ПочтовыйИндекс,
		|	АдресныеОбъекты.Наименование КАК Наименование,
		|	АдресныеОбъекты.Сокращение КАК Сокращение,
		|	АдресныеОбъекты.Дополнительно КАК Дополнительно,
		|	АдресныеОбъекты.КодКЛАДР КАК КодКЛАДР,
		|	АдресныеОбъекты.Актуален КАК Актуален,
		|	ВЫБОР КОГДА АдресныеОбъекты.Актуален ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК Неактуален
		|ПОМЕСТИТЬ АдресаПоИндексу
		|ИЗ
		|	РегистрСведений.ДомаЗданияСтроения КАК ДомаЗданияСтроения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|		ПО ДомаЗданияСтроения.АдресныйОбъект = АдресныеОбъекты.Идентификатор
		|ГДЕ
		|	ДомаЗданияСтроения.ПочтовыйИндекс = &ПочтовыйИндекс
		|	И АдресныеОбъекты.ПочтовыйИндекс = 0
		|	И АдресныеОбъекты.Уровень В(&Уровни)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АдресныеОбъекты.Уровень,
		|	АдресныеОбъекты.КодСубъектаРФ,
		|	АдресныеОбъекты.КодОкруга,
		|	АдресныеОбъекты.КодРайона,
		|	АдресныеОбъекты.КодГорода,
		|	АдресныеОбъекты.КодВнутригородскогоРайона,
		|	АдресныеОбъекты.КодНаселенногоПункта,
		|	АдресныеОбъекты.КодУлицы,
		|	АдресныеОбъекты.КодДополнительногоЭлемента,
		|	АдресныеОбъекты.КодПодчиненногоЭлемента,
		|	АдресныеОбъекты.Идентификатор,
		|	АдресныеОбъекты.ПочтовыйИндекс,
		|	АдресныеОбъекты.Наименование,
		|	АдресныеОбъекты.Сокращение,
		|	АдресныеОбъекты.Дополнительно,
		|	АдресныеОбъекты.КодКЛАДР,
		|	АдресныеОбъекты.Актуален КАК Актуален,
		|	ВЫБОР КОГДА АдресныеОбъекты.Актуален ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК Неактуален
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|ГДЕ
		|	АдресныеОбъекты.ПочтовыйИндекс = &ПочтовыйИндекс
		|	И АдресныеОбъекты.Уровень В(&Уровни)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СубъектРФ.Наименование КАК СубъектРФНаименование,
		|	СубъектРФ.Сокращение КАК СубъектРФСокращение,
		|	Округ.Наименование КАК ОкругНаименование,
		|	Округ.Сокращение КАК ОкругСокращение,
		|	Район.Наименование КАК РайонНаименование,
		|	Район.Сокращение КАК РайонСокращение,
		|	Город.Наименование КАК ГородНаименование,
		|	Город.Сокращение КАК ГородСокращение,
		|	ВнутригородскойРайон.Наименование КАК ВнутригородскойРайонНаименование,
		|	ВнутригородскойРайон.Сокращение КАК ВнутригородскойРайонСокращение,
		|	НаселенныйПункт.Наименование КАК НаселенныйПунктНаименование,
		|	НаселенныйПункт.Сокращение КАК НаселенныйПунктСокращение,
		|	Улица.Наименование КАК УлицаНаименование,
		|	Улица.Сокращение КАК УлицаСокращение,
		|	Дополнительный.Наименование КАК ДополнительныйНаименование,
		|	Дополнительный.Сокращение КАК ДополнительныйСокращение,
		|	Подчиненный.Наименование КАК ПодчиненныйНаименование,
		|	Подчиненный.Сокращение КАК ПодчиненныйСокращение,
		|	АдресныйОбъект.Идентификатор КАК Идентификатор,
		|	АдресныйОбъект.Наименование КАК Наименование,
		|	АдресныйОбъект.Сокращение КАК Сокращение,
		|	АдресныйОбъект.Актуален КАК Актуален,
		|	АдресныйОбъект.Неактуален КАК Неактуален
		|ИЗ
		|	АдресаПоИндексу КАК АдресныйОбъект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК СубъектРФ
		|		ПО (СубъектРФ.Уровень = 1)
		|			И (СубъектРФ.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (СубъектРФ.КодОкруга = 0)
		|			И (СубъектРФ.КодРайона = 0)
		|			И (СубъектРФ.КодГорода = 0)
		|			И (СубъектРФ.КодВнутригородскогоРайона = 0)
		|			И (СубъектРФ.КодНаселенногоПункта = 0)
		|			И (СубъектРФ.КодУлицы = 0)
		|			И (СубъектРФ.КодДополнительногоЭлемента = 0)
		|			И (СубъектРФ.КодПодчиненногоЭлемента = 0)
		|			И (СубъектРФ.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК Округ
		|		ПО (Округ.Уровень = 2)
		|			И (Округ.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (Округ.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (Округ.КодРайона = 0)
		|			И (Округ.КодГорода = 0)
		|			И (Округ.КодВнутригородскогоРайона = 0)
		|			И (Округ.КодНаселенногоПункта = 0)
		|			И (Округ.КодУлицы = 0)
		|			И (Округ.КодДополнительногоЭлемента = 0)
		|			И (Округ.КодПодчиненногоЭлемента = 0)
		|			И (Округ.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК Район
		|		ПО (Район.Уровень = 3)
		|			И (Район.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (Район.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (Район.КодРайона = АдресныйОбъект.КодРайона)
		|			И (Район.КодГорода = 0)
		|			И (Район.КодВнутригородскогоРайона = 0)
		|			И (Район.КодНаселенногоПункта = 0)
		|			И (Район.КодУлицы = 0)
		|			И (Район.КодДополнительногоЭлемента = 0)
		|			И (Район.КодПодчиненногоЭлемента = 0)
		|			И (Район.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК Город
		|		ПО (Город.Уровень = 4)
		|			И (Город.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (Город.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (Город.КодРайона = АдресныйОбъект.КодРайона)
		|			И (Город.КодГорода = АдресныйОбъект.КодГорода)
		|			И (Город.КодВнутригородскогоРайона = 0)
		|			И (Город.КодНаселенногоПункта = 0)
		|			И (Город.КодУлицы = 0)
		|			И (Город.КодДополнительногоЭлемента = 0)
		|			И (Город.КодПодчиненногоЭлемента = 0)
		|			И (Город.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК ВнутригородскойРайон
		|		ПО (ВнутригородскойРайон.Уровень = 5)
		|			И (ВнутригородскойРайон.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (ВнутригородскойРайон.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (ВнутригородскойРайон.КодРайона = АдресныйОбъект.КодРайона)
		|			И (ВнутригородскойРайон.КодГорода = АдресныйОбъект.КодГорода)
		|			И (ВнутригородскойРайон.КодВнутригородскогоРайона = АдресныйОбъект.КодВнутригородскогоРайона)
		|			И (ВнутригородскойРайон.КодНаселенногоПункта = 0)
		|			И (ВнутригородскойРайон.КодУлицы = 0)
		|			И (ВнутригородскойРайон.КодДополнительногоЭлемента = 0)
		|			И (ВнутригородскойРайон.КодПодчиненногоЭлемента = 0)
		|			И (ВнутригородскойРайон.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК НаселенныйПункт
		|		ПО (НаселенныйПункт.Уровень = 6)
		|			И (НаселенныйПункт.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (НаселенныйПункт.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (НаселенныйПункт.КодРайона = АдресныйОбъект.КодРайона)
		|			И (НаселенныйПункт.КодГорода = АдресныйОбъект.КодГорода)
		|			И (НаселенныйПункт.КодВнутригородскогоРайона = АдресныйОбъект.КодВнутригородскогоРайона)
		|			И (НаселенныйПункт.КодНаселенногоПункта = АдресныйОбъект.КодНаселенногоПункта)
		|			И (НаселенныйПункт.КодУлицы = 0)
		|			И (НаселенныйПункт.КодДополнительногоЭлемента = 0)
		|			И (НаселенныйПункт.КодПодчиненногоЭлемента = 0)
		|			И (НаселенныйПункт.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК Улица
		|		ПО (Улица.Уровень = 7)
		|			И (Улица.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (Улица.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (Улица.КодРайона = АдресныйОбъект.КодРайона)
		|			И (Улица.КодГорода = АдресныйОбъект.КодГорода)
		|			И (Улица.КодВнутригородскогоРайона = АдресныйОбъект.КодВнутригородскогоРайона)
		|			И (Улица.КодНаселенногоПункта = АдресныйОбъект.КодНаселенногоПункта)
		|			И (Улица.КодУлицы = АдресныйОбъект.КодУлицы)
		|			И (Улица.КодДополнительногоЭлемента = 0)
		|			И (Улица.КодПодчиненногоЭлемента = 0)
		|			И (Улица.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК Дополнительный
		|		ПО (Дополнительный.Уровень = 90)
		|			И (Дополнительный.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (Дополнительный.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (Дополнительный.КодРайона = АдресныйОбъект.КодРайона)
		|			И (Дополнительный.КодГорода = АдресныйОбъект.КодГорода)
		|			И (Дополнительный.КодВнутригородскогоРайона = АдресныйОбъект.КодВнутригородскогоРайона)
		|			И (Дополнительный.КодНаселенногоПункта = АдресныйОбъект.КодНаселенногоПункта)
		|			И (Дополнительный.КодУлицы = АдресныйОбъект.КодУлицы)
		|			И (Дополнительный.КодДополнительногоЭлемента = АдресныйОбъект.КодДополнительногоЭлемента)
		|			И (Дополнительный.КодПодчиненногоЭлемента = 0)
		|			И (Дополнительный.Идентификатор <> АдресныйОбъект.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК Подчиненный
		|		ПО (Подчиненный.Уровень = 91)
		|			И (Подчиненный.КодСубъектаРФ = АдресныйОбъект.КодСубъектаРФ)
		|			И (Подчиненный.КодОкруга = АдресныйОбъект.КодОкруга)
		|			И (Подчиненный.КодРайона = АдресныйОбъект.КодРайона)
		|			И (Подчиненный.КодГорода = АдресныйОбъект.КодГорода)
		|			И (Подчиненный.КодВнутригородскогоРайона = АдресныйОбъект.КодВнутригородскогоРайона)
		|			И (Подчиненный.КодНаселенногоПункта = АдресныйОбъект.КодНаселенногоПункта)
		|			И (Подчиненный.КодУлицы = АдресныйОбъект.КодУлицы)
		|			И (Подчиненный.КодДополнительногоЭлемента = АдресныйОбъект.КодДополнительногоЭлемента)
		|			И (Подчиненный.КодПодчиненногоЭлемента = АдресныйОбъект.КодПодчиненногоЭлемента)
		|			И (Подчиненный.Идентификатор <> АдресныйОбъект.Идентификатор)
		|ГДЕ
		|	АдресныйОбъект.ПочтовыйИндекс = &ПочтовыйИндекс
		|	И АдресныйОбъект.Уровень В(&Уровни)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|ИТОГИ
		|	КОЛИЧЕСТВО(СубъектРФНаименование),
		|	КОЛИЧЕСТВО(ОкругНаименование),
		|	КОЛИЧЕСТВО(РайонНаименование),
		|	КОЛИЧЕСТВО(ГородНаименование),
		|	КОЛИЧЕСТВО(ВнутригородскойРайонНаименование),
		|	КОЛИЧЕСТВО(НаселенныйПунктНаименование),
		|	КОЛИЧЕСТВО(УлицаНаименование),
		|	КОЛИЧЕСТВО(ДополнительныйНаименование),
		|	КОЛИЧЕСТВО(ПодчиненныйНаименование)
		|ПО
		|	ОБЩИЕ";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПочтовыйИндекс", Индекс);
	Запрос.УстановитьПараметр("Уровни",         Уровни);
	ДеревоЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокиДерева = ДеревоЗапроса.Строки;
	Если СтрокиДерева.Количество() = 0 Тогда
		// Нечего заполнять
		Возврат;
	КонецЕсли;
	
	// По первой строке определяем общее название - то, что есть в каждой строке.
	СтрокаИтогов    = СтрокиДерева[0];
	ДетальныеСтроки = СтрокаИтогов.Строки;
	ПерваяСтрока    = ДетальныеСтроки[0];
	ВсегоДетальных  = ДетальныеСтроки.Количество();
	
	// Первые 18 колонок описывают иерархию, одна строка есть точно.
	ОбщееПредставление = Формат(Индекс, "ЧЦ=6; ЧН=; ЧВН=; ЧГ=");
	Пустые = Новый Структура;
	
	Позиция = 0;
	Пока Позиция < 18 Цикл
		ИмяКолонки = ДеревоЗапроса.Колонки[Позиция].Имя;
		Если СтрокаИтогов[ИмяКолонки] = ВсегоДетальных Тогда
			// Наименование
			Пустые.Вставить(ИмяКолонки);
			ОбщееПредставление = ОбщееПредставление + ", " + ПерваяСтрока[ИмяКолонки];
			// Сокращение
			ИмяКолонки = ДеревоЗапроса.Колонки[Позиция + 1].Имя;
			Пустые.Вставить(ИмяКолонки);
			ОбщееПредставление = ОбщееПредставление + " " + ПерваяСтрока[ИмяКолонки];
		КонецЕсли;
		Позиция = Позиция + 2;
	КонецЦикла;
	
	Результат.ОбщаяЧастьПредставления = ОбщееПредставление;
	Данные = Результат.Данные;
	
	Для Каждого Строка Из ДетальныеСтроки Цикл
		// Убираем общие, из оставшихся будет полное наименование.
		ЗаполнитьЗначенияСвойств(Строка, Пустые);
		СтрокаРезультата = Данные.Добавить();
		СтрокаРезультата.Неактуален = Строка.Неактуален;
		СтрокаРезультата.Идентификатор = Строка.Идентификатор;
		
		Представление = "";
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.Наименование, Строка.Сокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ПодчиненныйНаименование, Строка.ПодчиненныйСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ДополнительныйНаименование, Строка.ДополнительныйСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.УлицаНаименование, Строка.УлицаСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.НаселенныйПунктНаименование, Строка.НаселенныйПунктСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ВнутригородскойРайонНаименование, Строка.ВнутригородскойРайонСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ГородНаименование, Строка.ГородСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.РайонНаименование, Строка.РайонСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.ОкругНаименование, Строка.ОкругСокращение);
		ДобавитьВПредставлениеЭлементАдреса(Представление, Строка.СубъектРФНаименование, Строка.СубъектРФСокращение);
		СтрокаРезультата.Представление = Представление;
		
	КонецЦикла;
	
	Данные.Сортировать("Представление");
КонецПроцедуры

// Заполнение данных для выбора адреса из загруженных данных.
// 
Процедура ЗаполнитьАдресаДляИнтерактивногоВыбораВнутр(Результат, Уровни, Родитель, Уровень, ДополнительныеПараметры) 
	
	ПараметрПерваяЗапись   = Неопределено;
	ТекстРазмерПорции      = "";
	ТекстСортировкиПорции  = "";
	СравнениеПорядкаПорции = ">=";
	
	// Если передан параметр - размер порции, то отдаем порционно, иначе - все.
	РазмерПорции = Неопределено;
	ФормироватьПорцию = ДополнительныеПараметры.Свойство("РазмерПорции", РазмерПорции) И ЗначениеЗаполнено(РазмерПорции);
	
	Если ФормироватьПорцию Тогда
		ТекстРазмерПорции  = "ПЕРВЫЕ " + Формат(РазмерПорции, "ЧН=; ЧГ=");
		
		Если ДополнительныеПараметры.Свойство("ПерваяЗапись") И ЗначениеЗаполнено(ДополнительныеПараметры.ПерваяЗапись) Тогда
			ПараметрПерваяЗапись = Новый УникальныйИдентификатор(ДополнительныеПараметры.ПерваяЗапись);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("Сортировка") И ЗначениеЗаполнено(ДополнительныеПараметры.Сортировка) Тогда
			ТекстСортировкиПорции = ДополнительныеПараметры.Сортировка;
		КонецЕсли;
		
		Если ТекстСортировкиПорции <> "ASC" Тогда
			СравнениеПорядкаПорции = "<=";
		КонецЕсли;
	КонецЕсли;
	
	// Особые случаи
	Если Уровень = 1 Тогда
		// Запрос регионов, игнорируем родителя.
		ТекстЗапроса = "ВЫБРАТЬ " + ТекстРазмерПорции + "
			|	Регион.Идентификатор                            КАК Идентификатор,
			|	Регион.Наименование + "" "" + Регион.Сокращение КАК Представление,
			|
			|	ВЫБОР КОГДА 1 В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 2 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 3 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 4 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 5 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 6 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 7 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 90 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|		ГДЕ Уровень = 91 И КодСубъектаРФ = Регион.КодСубъектаРФ
			|	) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РегионЗагружен
			|
			|ИЗ
			|	РегистрСведений.АдресныеОбъекты КАК Регион
			|
			|" + ?(ПараметрПерваяЗапись = Неопределено, "", "
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныеОбъекты КАК ТекущийПорядокПорции
			|ПО
			|	ТекущийПорядокПорции.Идентификатор = &ПервыйЭлементПорции
			|") + "
			|
			|ГДЕ
			|	Регион.Уровень = 1
			|	И Регион.КодОкруга                  = 0
			|	И Регион.КодРайона                  = 0
			|	И Регион.КодГорода                  = 0
			|	И Регион.КодВнутригородскогоРайона  = 0
			|	И Регион.КодНаселенногоПункта       = 0
			|	И Регион.КодУлицы                   = 0
			|	И Регион.КодДополнительногоЭлемента = 0
			|	И Регион.КодПодчиненногоЭлемента    = 0
			|	
			|" + ?(ПараметрПерваяЗапись = Неопределено, "", "
			|	И Регион.Идентификатор <> ТекущийПорядокПорции.Идентификатор
			|	И Регион.Наименование + "" "" + Регион.Сокращение " + СравнениеПорядкаПорции + " ТекущийПорядокПорции.Наименование + "" "" + ТекущийПорядокПорции.Сокращение
			|") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Представление " + ТекстСортировкиПорции + "
			|";
	ИначеЕсли Уровень = -1 Тогда
		// Запрос ориентиров, родитель - адресный объект.
		ТекстЗапроса = 	"ВЫБРАТЬ " + ТекстРазмерПорции + "
			|	Идентификатор КАК Идентификатор, 
			|	Описание      КАК Представление
			|ИЗ
			|	РегистрСведений.ОриентирыАдресныхОбъектов КАК Ориентиры
			|
			|" + ?(ПараметрПерваяЗапись = Неопределено, "", "
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныеОбъекты КАК ТекущийПорядокПорции
			|ПО
			|	ТекущийПорядокПорции.Идентификатор = &ПервыйЭлементПорции
			|") + "
			|
			|ГДЕ
			|	Ориентиры.АдресныйОбъект = &Родитель
			|
			|" + ?(ПараметрПерваяЗапись = Неопределено, "", "
			|	И Ориентиры.Идентификатор <> ТекущийПорядокПорции.Идентификатор
			|	И Ориентиры.Наименование + "" "" + Ориентиры.Сокращение " + СравнениеПорядкаПорции + " ТекущийПорядокПорции.Наименование + "" "" + ТекущийПорядокПорции.Сокращение
			|") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Представление " + ТекстСортировкиПорции + "
			|";
	Иначе
		// Обычный уровень
		ТекстЗапроса = "ВЫБРАТЬ " + ТекстРазмерПорции + "
			|	АдресныйОбъект.Идентификатор                                    КАК Идентификатор,
			|	АдресныйОбъект.Наименование + "" "" + АдресныйОбъект.Сокращение КАК Представление,
			|	ИСТИНА                                                          КАК РегионЗагружен,
			|	ВЫБОР КОГДА АдресныйОбъект.Актуален ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК Неактуален
			|ИЗ
			|	РегистрСведений.АдресныеОбъекты КАК РодительскийОбъект
			|
			|" + ?(ПараметрПерваяЗапись = Неопределено, "", "
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныеОбъекты КАК ТекущийПорядокПорции
			|ПО
			|	ТекущийПорядокПорции.Идентификатор = &ПервыйЭлементПорции
			|") + "
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныеОбъекты КАК АдресныйОбъект
			|ПО	
			|	АдресныйОбъект.Уровень = &Уровень
			|	И АдресныйОбъект.Уровень В (&Уровни)
			|	И АдресныйОбъект.КодСубъектаРФ = РодительскийОбъект.КодСубъектаРФ
			|";
		Если Уровень = 2 Тогда
			// Округ
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодРайона                  = 0
				|	И АдресныйОбъект.КодГорода                  = 0
				|	И АдресныйОбъект.КодВнутригородскогоРайона  = 0
				|	И АдресныйОбъект.КодНаселенногоПункта       = 0
				|	И АдресныйОбъект.КодУлицы                   = 0
				|	И АдресныйОбъект.КодДополнительногоЭлемента = 0
				|	И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
				|";
		ИначеЕсли Уровень = 3 Тогда
			// Район
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодОкруга                  = РодительскийОбъект.КодОкруга
				|	И АдресныйОбъект.КодГорода                  = 0
				|	И АдресныйОбъект.КодВнутригородскогоРайона  = 0
				|	И АдресныйОбъект.КодНаселенногоПункта       = 0
				|	И АдресныйОбъект.КодУлицы                   = 0
				|	И АдресныйОбъект.КодДополнительногоЭлемента = 0
				|	И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
				|";
		ИначеЕсли Уровень = 4 Тогда
			// Город
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодОкруга                  = РодительскийОбъект.КодОкруга
				|	И АдресныйОбъект.КодРайона                  = РодительскийОбъект.КодРайона
				|	И АдресныйОбъект.КодВнутригородскогоРайона  = 0
				|	И АдресныйОбъект.КодНаселенногоПункта       = 0
				|	И АдресныйОбъект.КодУлицы                   = 0
				|	И АдресныйОбъект.КодДополнительногоЭлемента = 0
				|	И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
				|";
		ИначеЕсли Уровень = 5 Тогда
			// Внутригородской район
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодОкруга                  = РодительскийОбъект.КодОкруга
				|	И АдресныйОбъект.КодРайона                  = РодительскийОбъект.КодРайона
				|	И АдресныйОбъект.КодГорода                  = РодительскийОбъект.КодГорода
				|	И АдресныйОбъект.КодНаселенногоПункта       = 0
				|	И АдресныйОбъект.КодУлицы                   = 0
				|	И АдресныйОбъект.КодДополнительногоЭлемента = 0
				|	И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
				|";
		ИначеЕсли Уровень = 6 Тогда
			// Населенный пункт
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодОкруга                  = РодительскийОбъект.КодОкруга
				|	И АдресныйОбъект.КодРайона                  = РодительскийОбъект.КодРайона
				|	И АдресныйОбъект.КодГорода                  = РодительскийОбъект.КодГорода
				|	И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
				|	И АдресныйОбъект.КодУлицы                   = 0
				|	И АдресныйОбъект.КодДополнительногоЭлемента = 0
				|	И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
				|";
		ИначеЕсли Уровень = 7 Тогда
			// Улица
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодОкруга                  = РодительскийОбъект.КодОкруга
				|	И АдресныйОбъект.КодРайона                  = РодительскийОбъект.КодРайона
				|	И АдресныйОбъект.КодГорода                  = РодительскийОбъект.КодГорода
				|	И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
				|	И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
				|	И АдресныйОбъект.КодДополнительногоЭлемента = 0
				|	И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
				|";
		ИначеЕсли Уровень = 90 Тогда
			// Дополнительный
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодОкруга                  = РодительскийОбъект.КодОкруга
				|	И АдресныйОбъект.КодРайона                  = РодительскийОбъект.КодРайона
				|	И АдресныйОбъект.КодГорода                  = РодительскийОбъект.КодГорода
				|	И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
				|	И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
				|	И АдресныйОбъект.КодУлицы                   = РодительскийОбъект.КодУлицы
				|	И АдресныйОбъект.КодПодчиненногоЭлемента    = 0
				|";
		ИначеЕсли Уровень = 91 Тогда
			// Подчиненный
			ТекстЗапроса = ТекстЗапроса + "
				|	И АдресныйОбъект.КодОкруга                  = РодительскийОбъект.КодОкруга
				|	И АдресныйОбъект.КодРайона                  = РодительскийОбъект.КодРайона
				|	И АдресныйОбъект.КодГорода                  = РодительскийОбъект.КодГорода
				|	И АдресныйОбъект.КодВнутригородскогоРайона  = РодительскийОбъект.КодВнутригородскогоРайона
				|	И АдресныйОбъект.КодНаселенногоПункта       = РодительскийОбъект.КодНаселенногоПункта
				|	И АдресныйОбъект.КодУлицы                   = РодительскийОбъект.КодУлицы
				|	И АдресныйОбъект.КодДополнительногоЭлемента = РодительскийОбъект.КодДополнительногоЭлемента
				|";
		Иначе
			ВызватьИсключение НСтр("ru = 'Запрос некорректного уровня адресного объекта'");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	РодительскийОбъект.Идентификатор = &Родитель
			|	И РодительскийОбъект.Идентификатор <> АдресныйОбъект.Идентификатор
			|
			|" + ?(ПараметрПерваяЗапись = Неопределено, "", "
			|	И АдресныйОбъект.Идентификатор <> ТекущийПорядокПорции.Идентификатор
			|	И АдресныйОбъект.Наименование + "" "" + АдресныйОбъект.Сокращение " + СравнениеПорядкаПорции + " ТекущийПорядокПорции.Наименование + "" "" + ТекущийПорядокПорции.Сокращение
			|") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Представление " + ТекстСортировкиПорции + "
			|";
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Уровень",  Уровень);
	Запрос.УстановитьПараметр("Уровни",   Уровни);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Запрос.УстановитьПараметр("ПервыйЭлементПорции", ПараметрПерваяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Данные = Результат.Данные;
	Если Уровень <> -1 Тогда
		// Обычные объекты
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Данные.Добавить(), Выборка);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Ориентиры. Описание - строка в хранилище.
	Пока Выборка.Следующий() Цикл
		Строка = Данные.Добавить();
		Строка.РегионЗагружен = Истина;
		Строка.Идентификатор  = Выборка.Идентификатор;
		Строка.Представление  = Выборка.Представление.Получить();
	КонецЦикла;
	
КонецПроцедуры

// Конструктор таблицы - результата выбора.
// 
Функция ТаблицаДанныхДляИнтерактивногоВыбора()
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	Данные    = Новый ТаблицаЗначений;
	Колонки   = Данные.Колонки;
	
	Колонки.Добавить("Неактуален",     ТипБулево);
	Колонки.Добавить("Идентификатор",  Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("Представление",  Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РегионЗагружен", ТипБулево);
	
	Данные.Индексы.Добавить("Идентификатор");
	Данные.Индексы.Добавить("Представление");
	
	Возврат Данные
КонецФункции

// Заполнить коды адреса из загруженных данных
//
// Параметры:
//  Адрес - Структура - Структура содержащая поля адреса.
//
Функция КодыАдресаЗагруженныеДанные(АдресРФ)
	
	Адрес = Новый Структура();
	СубъектРФ = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(АдресРФ.СубъектРФ);
	Адрес.Вставить("Регион", СубъектРФ.Наименование);
	Адрес.Вставить("РегионСокращение", СубъектРФ.Сокращение);
	
	Район = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(ПолучитьXDTOРеквизитОбъекта(АдресРФ, "СвРайМО/Район"));
	Адрес.Вставить("Район", Район.Наименование);
	
	Адрес.Вставить("Город",
		АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(АдресРФ.Город).Наименование);
	Адрес.Вставить("НаселенныйПункт",
		АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(АдресРФ.НаселПункт).Наименование);
	Адрес.Вставить("Улица",
		АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(АдресРФ.Улица).Наименование);
	Адрес.Вставить("Округ",
		АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(АдресРФ.Округ).Наименование);
	Адрес.Вставить("ВнутригРайон",
		АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(АдресРФ.ВнутригРайон).Наименование);
	
	КодыКЛАДР = СтруктураКодовКЛАДРПоУровням();
	КодыАдреса = СтруктураКодовАдреса();
	Результат = Новый Структура();
	Результат.Вставить("КодыКЛАДР", КодыКЛАДР);
	Результат.Вставить("КодыАдреса", КодыАдреса);
	
	ТекстСоединения = "";
	ТекстДляВыбрать = "";
	ИмяОбъектаДляДополнительныхСведений = "АдресныеОбъектыРегион";
	
	Если ПустаяСтрока(Адрес.Округ) Тогда
		сОкруг = "0";
		ТекстДляВыбрать = "НЕОПРЕДЕЛЕНО КАК КодКЛАДРОкруг, ";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыОкруг
		| ПО АдресныеОбъектыОкруг.Наименование = """ + Адрес.Округ + """
		| И АдресныеОбъектыРегион.КодСубъектаРФ = АдресныеОбъектыОкруг.КодСубъектаРФ
		| И АдресныеОбъектыОкруг.Уровень = 2
		| И АдресныеОбъектыОкруг.КодРайона = 0
		| И АдресныеОбъектыОкруг.КодГорода = 0
		| И АдресныеОбъектыОкруг.КодВнутригородскогоРайона = 0
		| И АдресныеОбъектыОкруг.КодНаселенногоПункта = 0
		| И АдресныеОбъектыОкруг.КодУлицы = 0
		| И АдресныеОбъектыОкруг.КодДополнительногоЭлемента = 0
		| И АдресныеОбъектыОкруг.КодПодчиненногоЭлемента = 0";
		сОкруг = "АдресныеОбъектыОкруг.КодОкруга";
		ТекстДляВыбрать = "АдресныеОбъектыОкруг.КодКЛАДР КАК КодКЛАДРОкруг, ";
		ИмяОбъектаДляДополнительныхСведений = "АдресныеОбъектыОкруг";
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес.Район) Тогда
		сРайон = "0";
		ТекстДляВыбрать = ТекстДляВыбрать + "НЕОПРЕДЕЛЕНО КАК КодКЛАДРРайон, ";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыРайон
		|	ПО АдресныеОбъектыРайон.Наименование = """  + Адрес.Район + """
		|	И АдресныеОбъектыРайон.КодОкруга = " + сОкруг + "
		|	И АдресныеОбъектыРегион.КодСубъектаРФ = АдресныеОбъектыРайон.КодСубъектаРФ
		|	И АдресныеОбъектыРайон.Уровень = 3
		|	И АдресныеОбъектыРайон.КодГорода = 0
		|	И АдресныеОбъектыРайон.КодВнутригородскогоРайона = 0
		|	И АдресныеОбъектыРайон.КодНаселенногоПункта = 0
		|	И АдресныеОбъектыРайон.КодУлицы = 0
		|	И АдресныеОбъектыРайон.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыРайон.КодПодчиненногоЭлемента = 0";
		сРайон = "АдресныеОбъектыРайон.КодРайона";
		ТекстДляВыбрать = ТекстДляВыбрать + "АдресныеОбъектыРайон.КодКЛАДР КАК КодКЛАДРРайон, ";
		ИмяОбъектаДляДополнительныхСведений = "АдресныеОбъектыРайон";
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес.Город) Тогда
		сГород = "0";
		ТекстДляВыбрать = ТекстДляВыбрать + "НЕОПРЕДЕЛЕНО КАК КодКЛАДРГород, ";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыГород
		|	ПО АдресныеОбъектыГород.Наименование = """ + Адрес.Город + """
		|	И АдресныеОбъектыРегион.КодСубъектаРФ = АдресныеОбъектыГород.КодСубъектаРФ
		|	И АдресныеОбъектыГород.Уровень = 4
		|	И АдресныеОбъектыГород.КодОкруга = " + сОкруг + "
		|	И АдресныеОбъектыГород.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыГород.КодВнутригородскогоРайона = 0
		|	И АдресныеОбъектыГород.КодНаселенногоПункта = 0
		|	И АдресныеОбъектыГород.КодУлицы = 0
		|	И АдресныеОбъектыГород.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыГород.КодПодчиненногоЭлемента = 0";
		
		сГород = "АдресныеОбъектыГород.КодГорода";
		ТекстДляВыбрать = ТекстДляВыбрать + "АдресныеОбъектыГород.КодКЛАДР КАК КодКЛАДРГород, ";
		ИмяОбъектаДляДополнительныхСведений = "АдресныеОбъектыГород";
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес.ВнутригРайон) Тогда
		сВнутригородскойРайон = "0";
		ТекстДляВыбрать = ТекстДляВыбрать + "НЕОПРЕДЕЛЕНО КАК КодКЛАДРВнутригородскойРайон, ";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыВнутригородскойРайон
		|	ПО АдресныеОбъектыВнутригородскойРайон.Наименование = """ + Адрес.ВнутригРайон + """
		|	И АдресныеОбъектыРегион.КодСубъектаРФ = АдресныеОбъектыВнутригородскойРайон.КодСубъектаРФ
		|	И АдресныеОбъектыВнутригородскойРайон.КодОкруга = "  + сОкруг + "
		|	И АдресныеОбъектыВнутригородскойРайон.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыВнутригородскойРайон.КодГорода = " + сГород + "
		|	И АдресныеОбъектыВнутригородскойРайон.КодНаселенногоПункта = 0
		|	И АдресныеОбъектыВнутригородскойРайон.КодУлицы = 0
		|	И АдресныеОбъектыВнутригородскойРайон.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыВнутригородскойРайон.КодПодчиненногоЭлемента = 0";
		сВнутригородскойРайон = "АдресныеОбъектыВнутригородскойРайон.КодВнутригородскогоРайона";
		ТекстДляВыбрать = ТекстДляВыбрать + "АдресныеОбъектыВнутригородскойРайон.КодКЛАДР КАК КодКЛАДРВнутригородскойРайон, ";
		ИмяОбъектаДляДополнительныхСведений = "АдресныеОбъектыВнутригородскойРайон";
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес.НаселенныйПункт) Тогда
		сНаселенногоПункта = "0";
		ТекстДляВыбрать = ТекстДляВыбрать + "НЕОПРЕДЕЛЕНО КАК КодКЛАДРНаселенныйПункт, ";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыНаселенныйПункт
		|	ПО АдресныеОбъектыНаселенныйПункт.Наименование = """ + Адрес.НаселенныйПункт + """
		|	И АдресныеОбъектыРегион.КодСубъектаРФ = АдресныеОбъектыНаселенныйПункт.КодСубъектаРФ
		|	И АдресныеОбъектыНаселенныйПункт.Уровень = 6
		|	И АдресныеОбъектыНаселенныйПункт.КодОкруга = "  + сОкруг + "
		|	И АдресныеОбъектыНаселенныйПункт.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыНаселенныйПункт.КодГорода = " + сГород + "
		|	И АдресныеОбъектыНаселенныйПункт.КодВнутригородскогоРайона = " + сВнутригородскойРайон + "
		|	И АдресныеОбъектыНаселенныйПункт.КодУлицы = 0
		|	И АдресныеОбъектыНаселенныйПункт.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыНаселенныйПункт.КодПодчиненногоЭлемента = 0";
		сНаселенногоПункта = "АдресныеОбъектыНаселенныйПункт.КодНаселенногоПункта";
		ТекстДляВыбрать = ТекстДляВыбрать + "АдресныеОбъектыНаселенныйПункт.КодКЛАДР КАК КодКЛАДРНаселенныйПункт, ";
		ИмяОбъектаДляДополнительныхСведений = "АдресныеОбъектыНаселенныйПункт";
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес.Улица) Тогда
		сУлица = "0";
		ТекстДляВыбрать = ТекстДляВыбрать + "НЕОПРЕДЕЛЕНО КАК КодКЛАДРУлица, ";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыУлица
		|	ПО АдресныеОбъектыУлица.Наименование = """ + Адрес.Улица + """
		|	И АдресныеОбъектыРегион.КодСубъектаРФ = АдресныеОбъектыУлица.КодСубъектаРФ
		|	И АдресныеОбъектыУлица.Уровень = 7
		|	И АдресныеОбъектыУлица.КодОкруга = "  + сОкруг + "
		|	И АдресныеОбъектыУлица.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыУлица.КодГорода = " + сГород + "
		|	И АдресныеОбъектыУлица.КодВнутригородскогоРайона = " + сВнутригородскойРайон + "
		|	И АдресныеОбъектыУлица.КодНаселенногоПункта = " + сНаселенногоПункта + "
		|	И АдресныеОбъектыУлица.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыУлица.КодПодчиненногоЭлемента = 0";
		
		сУлица = "АдресныеОбъектыУлица.КодНаселенногоПункта";
		ТекстДляВыбрать = ТекстДляВыбрать + "АдресныеОбъектыУлица.КодКЛАДР КАК КодКЛАДРУлица, ";
		ИмяОбъектаДляДополнительныхСведений = "АдресныеОбъектыУлица";
	КонецЕсли;
	ТекстДляВыбрать = ТекстДляВыбрать + ИмяОбъектаДляДополнительныхСведений + ".Идентификатор КАК Идентификатор, ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеОбъектыРегион.КодКЛАДР КАК КодКЛАДРРегион,
	|	АдресныеОбъектыРегион.КодСубъектаРФ КАК КодСубъектаРФ, " + ТекстДляВыбрать + "
	|	ДополнительныеАдресныеСведения.OKATO КАК OKATO,
	|	ДополнительныеАдресныеСведения.ОКТМО КАК ОКТМО,
	|	ДополнительныеАдресныеСведения.КодИФНСФЛ,
	|	ДополнительныеАдресныеСведения.КодИФНСЮЛ,
	|	ДополнительныеАдресныеСведения.КодУчасткаИФНСФЛ,
	|	ДополнительныеАдресныеСведения.КодУчасткаИФНСЮЛ
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыРегион " + ТекстСоединения + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеАдресныеСведения КАК ДополнительныеАдресныеСведения
	|	ПО (" + ИмяОбъектаДляДополнительныхСведений + ".Дополнительно = ДополнительныеАдресныеСведения.Идентификатор)
	|ГДЕ
	|	АдресныеОбъектыРегион.Наименование = &Регион
	|	И АдресныеОбъектыРегион.Уровень = 1
	|	И АдресныеОбъектыРегион.КодОкруга = 0
	|	И АдресныеОбъектыРегион.КодРайона = 0
	|	И АдресныеОбъектыРегион.КодГорода = 0
	|	И АдресныеОбъектыРегион.КодВнутригородскогоРайона = 0
	|	И АдресныеОбъектыРегион.КодНаселенногоПункта = 0
	|	И АдресныеОбъектыРегион.КодУлицы = 0
	|	И АдресныеОбъектыРегион.КодДополнительногоЭлемента = 0
	|	И АдресныеОбъектыРегион.КодПодчиненногоЭлемента = 0
	|	И АдресныеОбъектыРегион.Сокращение = &РегионСокращение";
	
	Запрос.УстановитьПараметр("Регион", Адрес.Регион);
	Запрос.УстановитьПараметр("РегионСокращение",  Адрес.РегионСокращение);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		КодКЛАДР = 0;
		УстановитьКодКладр(Результат.КодыКЛАДР, "Регион", РезультатЗапроса.КодКЛАДРРегион, КодКЛАДР);
		УстановитьКодКладр(Результат.КодыКЛАДР, "Округ", РезультатЗапроса.КодКЛАДРОкруг, КодКЛАДР);
		УстановитьКодКладр(Результат.КодыКЛАДР, "Район", РезультатЗапроса.КодКЛАДРРайон, КодКЛАДР);
		УстановитьКодКладр(Результат.КодыКЛАДР, "Город", РезультатЗапроса.КодКЛАДРГород, КодКЛАДР);
		УстановитьКодКладр(Результат.КодыКЛАДР, "ВнутригородскойРайон", РезультатЗапроса.КодКЛАДРВнутригородскойРайон, КодКЛАДР);
		УстановитьКодКладр(Результат.КодыКЛАДР, "НаселенныйПункт", РезультатЗапроса.КодКЛАДРНаселенныйПункт, КодКЛАДР);
		УстановитьКодКладр(Результат.КодыКЛАДР, "Улица", РезультатЗапроса.КодКЛАДРУлица, КодКЛАДР);
		
		ЗаполнитьЗначенияСвойств(Результат.КодыАдреса, РезультатЗапроса);
		Если НЕ ЗначениеЗаполнено(Результат.КодыАдреса.ОКТМО) ИЛИ Результат.КодыАдреса.ОКТМО = 0 Тогда
			// Получение кодов под идентификатору
			СведенияОДоме = ЗданияАдреса(АдресРФ);
			Если СведенияОДоме.Количество() > 0 И ЗначениеЗаполнено(РезультатЗапроса.Идентификатор) Тогда
				ЗаполнитьКодыПоИдентификаторуДома(РезультатЗапроса.Идентификатор, СведенияОДоме, Результат.КодыАдреса);
			КонецЕсли;
		КонецЕсли;
		
		Результат.КодыАдреса.КодКЛАДР = КодКЛАДР;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОпределитьФорматКодов(КодыАдреса)
	
	Если ЗначениеЗаполнено(КодыАдреса.ОКТМО) Тогда
		
		ОКТМОЧисло = КодыАдреса.ОКТМО;
		ОКТМОСтрока = Формат(ОКТМОЧисло, "ЧГ=0");
		
		Если СтрДлина(ОКТМОСтрока) < 8 Тогда
			КодыАдреса.ОКТМО = Формат(ОКТМОЧисло, "ЧЦ=8; ЧВН=; ЧГ=0");
		ИначеЕсли СтрДлина(ОКТМОСтрока) = 10 Тогда
			КодыАдреса.ОКТМО = Формат(ОКТМОЧисло, "ЧЦ=11; ЧВН=; ЧГ=0");
		Иначе
			КодыАдреса.ОКТМО = ОКТМОСтрока;
		КонецЕсли
		
	КонецЕсли;
	Если ЗначениеЗаполнено(КодыАдреса.OKATO) Тогда
		КодыАдреса.OKATO = Формат(КодыАдреса.OKATO, "ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

// Определяет индекс и ОКТМО адреса по частям адреса.
//
// Параметры:
//  АдресРФ - ОбъектXDTO  - Адрес РФ.
// 
// Возвращаемое значение:
//  Структура - Коды адреса.
//
Функция КодыАдресаСервис(АдресРФ)
	
	Результат = СтруктураКодовАдреса();
	
	АдресаДляПроверки = Новый Массив;
	РезультатВебСервис = Новый Структура("Данные", Новый Массив);
	СтруктураОписанияОшибкиПоставщика(РезультатВебСервис);
	Уровни = АдресныйКлассификаторПовтИсп.УровниКлассификатораФИАС();
	АдресаДляПроверки.Добавить(Новый Структура("Адрес, Уровни", АдресРФ , Уровни));
	Попытка
		ЗаполнитьРезультатПроверкиАдресаПоКлассификаторуСервис1С(РезультатВебСервис, АдресаДляПроверки);
	Исключение
		СтруктураОписанияОшибкиПоставщика(РезультатВебСервис, ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , РезультатВебСервис.ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
	Если НЕ РезультатВебСервис.Отказ Тогда
		Если РезультатВебСервис.Данные[0].Варианты.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатВебСервис.Данные[0].Варианты[0]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Читает здания и помещения адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Соответствие - Наименование здания и значение.
//
Функция ЗданияАдреса(XDTOАдрес)
	
	Результат = Новый Соответствие;
	Для Каждого ДопЭлемент Из XDTOАдрес.ДопАдрЭл Цикл
		Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = ДопЭлемент.Номер.Тип;
			ТипОбъекта = ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено И (ТипОбъекта.Тип < 3) Тогда
				Результат.Вставить(ВРег(ТипОбъекта.Наименование), ДопЭлемент.Номер.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УстановитьКодКЛАДР(КодыКЛАДР, ИмяПоля, Значение, КодКЛАДР)
	КодыКЛАДР[ИмяПоля] = Значение;
	Если ЗначениеЗаполнено(Значение) Тогда
		КодКладр = Значение;
	КонецЕсли;
КонецФункции

// Заполнение результата проверки адресного объекта по данным сервиса.
//
Процедура ЗаполнитьРезультатПроверкиАдресаПоКлассификаторуСервис1С(Результат, АдресаДляПроверки)
	
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	
	СписокДляПроверки = Сервис.ФабрикаXDTO.Создать(Сервис.ФабрикаXDTO.Тип(ПространствоИмен(), "AddressList"));
	ТипАдреса = Сервис.ФабрикаXDTO.Тип(ПространствоИменАдресаРФ(), "АдресРФ");
	ТипЭлементаСписка = СписокДляПроверки.Свойства().Получить("Item").Тип;
	
	Для Каждого ЭлементПроверки Из АдресаДляПроверки Цикл
		ПроверяемыйАдрес =  СписокДляПроверки.Item.Добавить(Сервис.ФабрикаXDTO.Создать(ТипЭлементаСписка));
		ПроверяемыйАдрес.Address = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ОбщегоНазначения.ОбъектXDTOВСтрокуXML(ЭлементПроверки.Адрес), Сервис.ФабрикаXDTO);
		ПроверяемыйАдрес.Levels  = ЭлементПроверки.Уровни;
	КонецЦикла;
	
	КодЯзыка = ТекущийКодЛокализации();
	
	РезультатПроверки = Сервис.Analyze(СписокДляПроверки, КодЯзыка, Ложь, Метаданные.Имя);
	
	// Формируем структуру результата.
	Данные = Результат.Данные;
	Для Каждого ЭлементПроверки Из РезультатПроверки.Item Цикл
		ДанныеДляАдреса = Новый Структура("Ошибки, Варианты, АдресПроверен", Новый Массив, Новый Массив, Истина);
		ОшибкиПроверки = ДанныеДляАдреса.Ошибки;
		ВариантыАдреса = ДанныеДляАдреса.Варианты;
		
		Для Каждого Ошибка Из ЭлементПроверки.Error Цикл
			ОшибкаАдреса = Новый Структура("Ключ, Текст, Подсказка", Ошибка.Key, Ошибка.Text, Ошибка.Suggestion);
			ОшибкиПроверки.Добавить(ОшибкаАдреса);
		КонецЦикла;
		
		Для Каждого Вариант Из ЭлементПроверки.Variant Цикл
			ВариантАдреса = Новый Структура("Идентификатор, Индекс, КодКЛАДР", Вариант.ID, Вариант.PostalCode, Вариант.KLADRCode);
			ВариантАдреса.Вставить("OKATO",            Вариант.OKATO);
			ВариантАдреса.Вставить("ОКТМО",            Вариант.OKTMO);
			ВариантАдреса.Вставить("КодИФНСФЛ",        Вариант.IFNSFL);
			ВариантАдреса.Вставить("КодИФНСЮЛ",        Вариант.IFNSUL);
			ВариантАдреса.Вставить("КодУчасткаИФНСФЛ", Вариант.TERRIFNSFL);
			ВариантАдреса.Вставить("КодУчасткаИФНСЮЛ", Вариант.TERRIFNSUL);
			ВариантыАдреса.Добавить(ВариантАдреса);
		КонецЦикла;
		
		Данные.Добавить(ДанныеДляАдреса);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение адреса по данным сервиса 1С.
// 
Процедура ЗаполнитьАдресаПоПочтовомуИндексуКлассификатораСервис1С(Результат, Индекс, Уровни)
	
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	
	// Выбираем все записи
	ПерваяЗапись = Неопределено;
	РазмерПорции = 1000;
	КодЯзыка     = ТекущийКодЛокализации();
	
	Данные = Результат.Данные;
	Порция = Сервис.SelectByPostalCode(Индекс, Уровни, ПерваяЗапись, "ASC", РазмерПорции, КодЯзыка, Метаданные.Имя);
	Список = Порция.ПолучитьСписок("Item");
	
	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Результат.ОбщаяЧастьПредставления = Формат(Индекс, "ЧГ=0") + ", " + Порция.Title;
	
	Для Каждого Строка Из Список Цикл
		ПерваяЗапись = Строка.ID;
		
		СтрокаРезультата = Данные.Добавить();
		СтрокаРезультата.Идентификатор = Новый УникальныйИдентификатор(ПерваяЗапись);
		СтрокаРезультата.Представление = Строка.Presentation;
		СтрокаРезультата.Неактуален = НЕ Строка.Actual;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьВПредставлениеЭлементАдреса(Представление, Знач Наименование, Знач Сокращение)
	
	Наименование = СокрЛП(Наименование);
	Наименование = ?(Наименование = "", "", СокрЛП(Наименование + " " + СокрЛ(Сокращение)));
	
	Если Не ПустаяСтрока(Наименование) Тогда
		Если Не ПустаяСтрока(Представление) Тогда 
			Представление = Представление + ", " + Наименование;
		Иначе
			Представление = Наименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных для проверки версии по сервису 1С.
// 
Процедура ЗаполнитьВерсиюПоставщикаДанныхСервис1С(Результат)
	
	КодЯзыка = ТекущийКодЛокализации();
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	Результат.Данные = Сервис.Ping(КодЯзыка, Метаданные.Имя);
	
КонецПроцедуры

// Заполнение данных для выбора адреса по данным сервиса 1С.
// 
Процедура ЗаполнитьАдресаДляИнтерактивногоВыбораСервис1С(Результат, Уровни, Родитель, Уровень, ДополнительныеПараметры)
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	
	РодительУровня = ?(ЗначениеЗаполнено(Родитель), Строка(Родитель), Неопределено);
	КодЯзыка       = ТекущийКодЛокализации();
	
	Данные = Результат.Данные;
	
	// Если передан параметр - размер порции, то отдаем порционно, иначе - все.
	ФормироватьПорцию = ДополнительныеПараметры.Свойство("РазмерПорции");
	Если ФормироватьПорцию Тогда
		// Транслируем в порционный вызов.
		РазмерПорции = ДополнительныеПараметры.РазмерПорции;
		ПерваяЗапись = ?(ЗначениеЗаполнено(ДополнительныеПараметры.ПерваяЗапись), Строка(ДополнительныеПараметры.ПерваяЗапись), Неопределено);
		Сортировка   = ?(ЗначениеЗаполнено(ДополнительныеПараметры.Сортировка), Строка(ДополнительныеПараметры.Сортировка), "ASC");
		
		Если ЗначениеЗаполнено(ПерваяЗапись) Тогда
			ДлинаПервойЗаписи = СтрДлина(ПерваяЗапись);
			ПерваяЗаписьСтрока = Лев("00000000-0000-0000-0000-000000000000", 36 - ДлинаПервойЗаписи) + ПерваяЗапись;
			ПерваяЗапись = Новый УникальныйИдентификатор(ПерваяЗаписьСтрока);
		КонецЕсли;
		
		Порция = Сервис.Select(РодительУровня, Уровень, ПерваяЗапись, Сортировка, РазмерПорции, КодЯзыка, Метаданные.Имя);
		Результат.Заголовок = Порция.Title;
		Список = Порция.ПолучитьСписок("Item");
		
		Для Каждого Строка Из Список Цикл
			СтрокаРезультата = Данные.Добавить();
			СтрокаРезультата.РегионЗагружен = Истина;
			СтрокаРезультата.Идентификатор  = Новый УникальныйИдентификатор(Строка.ID);
			СтрокаРезультата.Представление  = Строка.Presentation;
			СтрокаРезультата.Неактуален = НЕ Строка.Actual;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	// Выбираем все записи (дополнительные территории).
	ПерваяЗапись = Неопределено;
	РазмерПорции = 1000;
	
	Порция = Сервис.Select(РодительУровня, Уровень, Неопределено, "ASC", РазмерПорции, КодЯзыка, Метаданные.Имя);
	Результат.Заголовок = Порция.Title;
	Список = Порция.ПолучитьСписок("Item");
	
	Для Каждого Строка Из Список Цикл
		ПерваяЗапись = Строка.ID;
		СтрокаРезультата = Данные.Добавить();
		СтрокаРезультата.РегионЗагружен = Истина;
		СтрокаРезультата.Идентификатор  = Новый УникальныйИдентификатор(ПерваяЗапись);
		СтрокаРезультата.Представление  = Строка.Presentation;
		СтрокаРезультата.Неактуален = НЕ Строка.Actual;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение данных для автоподбора по данным сервиса 1С.
// 
Процедура ЗаполнитьСписокАвтоподбораЧастиАдресаСервис1С(Результат, Текст, Родитель, Уровни, ДополнительныеПараметры)
	
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	
	УровниЗапроса = ?(ТипЗнч(Уровни) = Тип("Массив"), Новый ФиксированныйМассив(Уровни), Уровни);
	КодЯзыка      = ТекущийКодЛокализации();
	Данные        = Результат.Данные;
	
	Порция = Сервис.Autocomplete(Строка(Родитель), УровниЗапроса, Текст, 20, КодЯзыка, Метаданные.Имя);
	Список = Порция.ПолучитьСписок("Item");
	Для Каждого Строка Из Список Цикл
		СтрокаРезультата = Данные.Добавить();
		СтрокаРезультата.РегионЗагружен = Истина;
		СтрокаРезультата.Идентификатор  = Новый УникальныйИдентификатор(Строка.ID);
		СтрокаРезультата.Представление  = Строка.Presentation;
		СтрокаРезультата.Неактуален = НЕ Строка.Actual;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение актуальных данных адресного объекта или ориентира по данным сервиса 1С.
//
Процедура ЗаполнитьАктуальныеАдресныеСведенияСервис1С(Результат, Идентификатор)
	
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	
	КодЯзыка = ТекущийКодЛокализации();
	Данные   = Сервис.GetActualInfo(Строка(Идентификатор), КодЯзыка, Метаданные.Имя);
	Результат.Данные = Данные;
	
КонецПроцедуры

Функция ИдентификаторыАдресаПоКлассификаторуСервис1С(АдресаДляПроверки, ИскатьПоУлице, ВсеИдентификаторыАдреса);
	
	Результат = Новый Структура;
	Идентификатор = Неопределено;
	
	Идентификатор = ИдентификаторЭлементаАдресаСервис1С(АдресаДляПроверки["Регион"].Наименование,
		АдресаДляПроверки["Регион"].Сокращение, Идентификатор, 1);
	Результат.Вставить("ИдентификаторРегион", Идентификатор);
	
	Если ЗначениеЗаполнено(АдресаДляПроверки["Округ"].Наименование) Тогда
		Идентификатор = ИдентификаторЭлементаАдресаСервис1С(АдресаДляПроверки["Округ"].Наименование,
			АдресаДляПроверки["Округ"].Сокращение, Идентификатор, 2);
		Результат.Вставить("ИдентификаторОкруг", Идентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресаДляПроверки["Район"].Наименование) Тогда
		Идентификатор = ИдентификаторЭлементаАдресаСервис1С(АдресаДляПроверки["Район"].Наименование,
			АдресаДляПроверки["Район"].Сокращение, Идентификатор, 3);
		Результат.Вставить("ИдентификаторРайон", Идентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресаДляПроверки["Город"].Наименование) Тогда
		Идентификатор = ИдентификаторЭлементаАдресаСервис1С(АдресаДляПроверки["Город"].Наименование,
			АдресаДляПроверки["Город"].Сокращение, Идентификатор, 4);
		Результат.Вставить("ИдентификаторГород", Идентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресаДляПроверки["ВнутригородскойРайон"].Наименование) Тогда
		Идентификатор = ИдентификаторЭлементаАдресаСервис1С(АдресаДляПроверки["ВнутригородскойРайон"].Наименование,
			АдресаДляПроверки["ВнутригородскойРайон"].Сокращение, Идентификатор, 5);
		Результат.Вставить("ИдентификаторВнутригРайон", Идентификатор);
	КонецЕсли;

	Если ЗначениеЗаполнено(АдресаДляПроверки["НаселенныйПункт"].Наименование) Тогда
		Идентификатор = ИдентификаторЭлементаАдресаСервис1С(АдресаДляПроверки["НаселенныйПункт"].Наименование,
			АдресаДляПроверки["НаселенныйПункт"].Сокращение, Идентификатор, 6);
		Результат.Вставить("ИдентификаторНаселенныйПункт", Идентификатор);
	КонецЕсли;
	
	Если ИскатьПоУлице И ЗначениеЗаполнено(АдресаДляПроверки["Улица"].Наименование) Тогда
		Идентификатор = ИдентификаторЭлементаАдресаСервис1С(АдресаДляПроверки["Улица"].Наименование, 
			АдресаДляПроверки["Улица"].Сокращение, Идентификатор, 7);
		Результат.Вставить("ИдентификаторУлица", Идентификатор);
	КонецЕсли;
	
	Если ВсеИдентификаторыАдреса Тогда
		Возврат Результат;
	КонецЕсли;
	Возврат Идентификатор;
	
КонецФункции

Функция ИдентификаторЭлементаАдресаСервис1С(Наименование, Сокращение, ИдентификаторРодитель, Уровень)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРодитель) И Уровень > 1 Тогда
		Возврат Неопределено; // т.к. мы не знаем объект верхнего уровня, то нет смысла искать.
	КонецЕсли;
	
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	КодЯзыка = ТекущийКодЛокализации();
	
	Порция = Сервис.Autocomplete(ИдентификаторРодитель, Уровень, Наименование, 100, КодЯзыка, Метаданные.Имя);
	Представление = Наименование + " " + Сокращение;
	
	Список = Порция.ПолучитьСписок("Item");
	Для Каждого Строка Из Список Цикл
		Если Строка.Presentation = Представление Тогда
			Возврат Новый УникальныйИдентификатор(Строка.ID);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

// Получает идентификаторы адреса через веб-сервис.
//
// Параметры:
//  АдресДляПроверки - Строка - Строка XML контактной информации содержащая адрес.
// 
// Возвращаемое значение:
//   Структура - набор пар ключ-значение.
//       * ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - Идентификатор адресного объекта (улицы, нас. пункта).
//       * ИдентификаторДома             - УникальныйИдентификатор - Идентификатор дома адресного объекта.
//       * Отказ                         - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки  - Строка - Описание ошибки, если поставщик недоступен иначе Неопределено.
//       * КраткоеПредставлениеОшибки    - Строка - Описание ошибки, если поставщик недоступен иначе Неопределено.
//
Процедура ОпределитьИдентификаторыАдресаСервис1С(Результат, АдресДляПроверки)
	
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	
	СписокДляПроверки = Сервис.ФабрикаXDTO.Создать(Сервис.ФабрикаXDTO.Тип(ПространствоИмен(), "AddressList"));
	ТипАдресаРФ = Сервис.ФабрикаXDTO.Тип(ПространствоИменАдресаРФ(), "АдресРФ");
	ТипАдреса = Сервис.ФабрикаXDTO.Тип(ПространствоИменАдресаРФ(), "Адрес");
	ТипЭлементаСписка = СписокДляПроверки.Свойства().Получить("Item").Тип;
	
	ПроверяемыйАдрес =  СписокДляПроверки.Item.Добавить(Сервис.ФабрикаXDTO.Создать(ТипЭлементаСписка));
	ПроверяемыйАдрес.Levels  = АдресныйКлассификаторПовтИсп.УровниКлассификатораФИАС();
	Если ЭтоКонтактнаяИнформацияВXML(АдресДляПроверки) Тогда
		АдресXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(АдресДляПроверки, Сервис.ФабрикаXDTO);
		ПроверяемыйАдрес.Address = АдресXDTO.Состав.Состав;
	Иначе
		ВызватьИсключение НСтр("ru = 'Сведения о контактной информации были повреждены или некорректно заполнены'");
	КонецЕсли;
	
	КодЯзыка = ТекущийКодЛокализации();
	РезультатПроверки = Сервис.Analyze(СписокДляПроверки, КодЯзыка, Ложь, Метаданные.Имя);
	
	// Формируем структуру результата.
	Если РезультатПроверки.Item.Количество() > 0 Тогда
		Если РезультатПроверки.Item[0].Error.Количество() > 0 Тогда
			Ошибка = РезультатПроверки.Item[0].Error[0];
			Результат.КраткоеПредставлениеОшибки = Ошибка.Text;
			Результат.ПодробноеПредставлениеОшибки = Ошибка.Suggestion;
			Результат.Отказ = Истина;
		КонецЕсли;
		
		Если РезультатПроверки.Item[0].Variant.Количество() Тогда
			Вариант = РезультатПроверки.Item[0].Variant[0];
			Результат.ИдентификаторАдресногоОбъекта = Вариант.ID;
			Результат.ИдентификаторДома = Вариант.HouseID;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьКодыПоИдентификаторуДома(ИдентификаторАдресногоОбъекта, СведенияОДоме, Коды)
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если ПустаяСтрока(Источник) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|    ДомаЗданияСтроения.Строения КАК Строения
		|ИЗ
		|    РегистрСведений.ДомаЗданияСтроения КАК ДомаЗданияСтроения
		|ГДЕ
		|    ДомаЗданияСтроения.АдресныйОбъект = &АдресныйОбъект";
		
		Запрос.УстановитьПараметр("АдресныйОбъект", ИдентификаторАдресногоОбъекта);
		Запись = Запрос.Выполнить().Выбрать();
		
		Пока Запись.Следующий() Цикл
			Если ЗначениеЗаполнено(Запись.Строения) Тогда
				Описание = Запись.Строения.Получить();
				Если Не ПустаяСтрока(Описание) Тогда
					ИдентификаторДома = ИдентификаторДома(Описание, СведенияОДоме);
					Если ЗначениеЗаполнено(ИдентификаторДома) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторДома) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеАдресныеСведения.Идентификатор,
			|	ДополнительныеАдресныеСведения.КодСубъектаРФ,
			|	ДополнительныеАдресныеСведения.OKATO,
			|	ДополнительныеАдресныеСведения.ОКТМО,
			|	ДополнительныеАдресныеСведения.КодИФНСФЛ,
			|	ДополнительныеАдресныеСведения.КодИФНСЮЛ,
			|	ДополнительныеАдресныеСведения.КодУчасткаИФНСФЛ,
			|	ДополнительныеАдресныеСведения.КодУчасткаИФНСЮЛ
			|ИЗ
			|	РегистрСведений.ДополнительныеАдресныеСведения КАК ДополнительныеАдресныеСведения
			|ГДЕ
			|	ДополнительныеАдресныеСведения.Идентификатор = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторДома);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Коды, РезультатЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Локальная проверка одного адреса.
//
Функция АнализОдногоАдресаПоКлассификатору(Адрес, Уровни)
	
	Результат = Новый Структура("Ошибки, Варианты, АдресПроверен", Новый Массив, Новый Массив, Истина);
	ОшибкиПроверки = Результат.Ошибки;
	ВариантыАдреса = Результат.Варианты;

	Если ТипЗнч(Адрес) <> Тип("ОбъектXDTO") Тогда
		ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Адрес", НСтр("ru = 'Невозможно проверить адрес из-за некорректных сведений. Проверьте правильность заполнения адреса.'"));
		Возврат Результат;
	КонецЕсли;
	
	// Субъект должен быть всегда
	СубъектРФ = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.СубъектРФ);
	Если ПустаяСтрока(СубъектРФ.Наименование) Тогда
		// Нет субъекта
		ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "СубъектРФ", НСтр("ru = 'Не указан субъект РФ адреса'") );
		Возврат Результат;
	ИначеЕсли Уровни.Найти(1) = Неопределено Тогда
		// В уровнях должно быть указано всегда.
		ВызватьИсключение НСтр("ru = 'В уровнях для проверки адреса не указан уровень субъекта РФ.'");
	КонецЕсли;
	
	РегионЗагруженВАдресныеСведения = СведенияОРегионе(Адрес.СубъектРФ).Загружен;
	Если РегионЗагруженВАдресныеСведения = Неопределено Тогда 
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "СубъектРФ", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регион ""%1"" не существует'"), Адрес.СубъектРФ));
		Результат.АдресПроверен = Истина;
		Возврат Результат;
	ИначеЕсли НЕ РегионЗагруженВАдресныеСведения Тогда
		ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "СубъектРФ", НСтр("ru = 'Отсутствуют адресные сведения по региону'") + ": " + Адрес.СубъектРФ + ".");
		Результат.АдресПроверен = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	// Расшифровка свойств адреса
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Значение
		|ИЗ 
		|	РегистрСведений.СлужебныеАдресныеСведения
		|ГДЕ	
		|	Тип = ""ТипАдрЭл"" И Ключ = ""ПочтовыйИндекс""
		|;//////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ключ          КАК Сокращение,
		|	Идентификатор КАК Идентификатор,
		|	Значение      КАК Значение
		|ИЗ
		|	РегистрСведений.СлужебныеАдресныеСведения
		|ГДЕ
		|	Тип = ""ТипАдрЭл""
		|	И (
		|		Идентификатор = 91 ИЛИ Идентификатор = 90
		|	)
		|;//////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расшифровка.Ключ     КАК Значение,
		|	Расшифровка.Значение КАК ТипАдрЭл,
		|	
		|	ВЫБОР 
		|		КОГДА НЕ ТипыВладения.Идентификатор ЕСТЬ NULL ТОГДА ТипыВладения.Идентификатор
		|		КОГДА НЕ ТипыСтроения.Идентификатор ЕСТЬ NULL ТОГДА ТипыСтроения.Идентификатор
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Идентификатор
		|	
		|ИЗ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК Расшифровка
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК ТипыВладения
		|ПО
		|	ТипыВладения.Тип = ""ESTSTAT""
		|	И ТипыВладения.Значение = Расшифровка.Ключ
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК ТипыСтроения
		|ПО
		|	ТипыСтроения.Тип = ""STRSTAT""
		|	И ТипыСтроения.Значение = Расшифровка.Ключ
		|	
		|ГДЕ
		|	Расшифровка.Тип = ""ДопАдрЭлНомер""");
	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	Таблица = НаборРезультатов[0].Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		ТипАдрЭлПочтовыйИндекс = "";
	Иначе
		ТипАдрЭлПочтовыйИндекс = Таблица[0].Значение;
	КонецЕсли;
	
	ТаблицаСокращенийДополнительных = НаборРезультатов[1].Выгрузить();
	ТаблицаСокращенийДополнительных.Индексы.Добавить("Сокращение, Значение");
	
	ТаблицаСокращенийЗданий = НаборРезультатов[2].Выгрузить();
	ТаблицаСокращенийЗданий.Индексы.Добавить("ТипАдрЭл");
	
	ПочтовыйИндекс   = 0;
	Дополнительный   = Новый Структура("Наименование, Сокращение");
	Подчиненный      = Новый Структура("Наименование, Сокращение");
	ЗданияИПомещения = Новый Соответствие;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	Для Каждого ДополнительныйЭлемент Из Адрес.ПолучитьСписок("ДопАдрЭл") Цикл
		ТипАдресногоЭлемента = СокрЛП(ДополнительныйЭлемент.ТипАдрЭл);
		
		// Здание или помещение, почтовый индекс?
		Если ТипАдресногоЭлемента = "" Тогда
			ЗначениеНомера = ДополнительныйЭлемент.Номер;
				СтрокаЗдания = ТаблицаСокращенийЗданий.Найти(ЗначениеНомера.Тип, "ТипАдрЭл");
				Если СтрокаЗдания <> Неопределено Тогда
					ЗданияИПомещения[СтрокаЗдания.Значение] = Новый Структура("Вид, Значение", СтрокаЗдания.Идентификатор, ЗначениеНомера.Значение);
				КонецЕсли;
			Продолжить;
		ИначеЕсли ТипАдресногоЭлемента = ТипАдрЭлПочтовыйИндекс Тогда
			ПочтовыйИндекс = ТипЧисло.ПривестиЗначение(ДополнительныйЭлемент.Значение);
			Продолжить;
		КонецЕсли;
		
		// Дополнительный или подчиненный?
		Вариант = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(ДополнительныйЭлемент.Значение);
		СтрокиВариантов = ТаблицаСокращенийДополнительных.НайтиСтроки(Новый Структура("Сокращение, Значение", Вариант.Сокращение, ТипАдресногоЭлемента));
		Если СтрокиВариантов.Количество() > 0 Тогда
			Код = СтрокиВариантов[0].Идентификатор;
			Если Код = 90 Тогда
				Дополнительный = Вариант;
			ИначеЕсли Код = 91 Тогда
				Подчиненный = Вариант;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Округ                = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.Округ);
	Район                = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(ПолучитьXDTOРеквизитОбъекта(Адрес, "СвРайМО/Район"));
	Город                = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.Город);
	ВнутригородскойРайон = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.ВнутригРайон);
	НаселенныйПункт      = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.НаселПункт);
	Улица                = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.Улица);
	
	ИндексЭлемент        = ПолучитьXDTOРеквизитОбъекта(Адрес, "ДопАдрЭл[ТипАдрЭл='10100000']");
	Индекс               = ?(ИндексЭлемент <> Неопределено, ИндексЭлемент.Значение, "");
	
	ПроверятьОкруг                = Не ПустаяСтрока(Округ.Наименование);
	ПроверятьРайон                = Не ПустаяСтрока(Район.Наименование);
	ПроверятьГород                = Не ПустаяСтрока(Город.Наименование);
	ПроверятьВнутригородскойРайон = Не ПустаяСтрока(ВнутригородскойРайон.Наименование);
	ПроверятьНаселенныйПункт      = Не ПустаяСтрока(НаселенныйПункт.Наименование);
	ПроверятьУлицу                = Не ПустаяСтрока(Улица.Наименование);
	ПроверятьДополнительный       = Не ПустаяСтрока(Дополнительный.Наименование);
	ПроверятьПодчиненный          = Не ПустаяСтрока(Подчиненный.Наименование);
	
	ПолеАдресныйОбъектИдентификатор = ?(ПроверятьПодчиненный, "Подчиненный.Идентификатор", 
		?(ПроверятьДополнительный,       "Дополнительный.Идентификатор", 
		?(ПроверятьУлицу,                "Улица.Идентификатор", 
		?(ПроверятьНаселенныйПункт,      "НаселенныйПункт.Идентификатор", 
		?(ПроверятьВнутригородскойРайон, "ВнутригородскойРайон.Идентификатор", 
		?(ПроверятьГород,                "Город.Идентификатор", 
		?(ПроверятьРайон,                "Район.Идентификатор", 
		?(ПроверятьОкруг,                "Округ.Идентификатор", "СубъектРФ.Идентификатор"))))))));
		
	Запрос.Текст = "ВЫБРАТЬ
		|	ИСТИНА                                  КАК СубъектРФНайден,
		|	СубъектРФ.Идентификатор                 КАК СубъектРФИдентификатор,
		|	СубъектРФ.ПочтовыйИндекс                КАК СубъектРФПочтовыйИндекс,
		|	СубъектРФ.КодСубъектаРФ                 КАК СубъектРФКод,
		|	СубъектРФ.КодКЛАДР                      КАК СубъектРФКодКЛАДР,
		|	СубъектРФ.Дополнительно                 КАК СубъектРФДополнительно,
		|	СубъектРФДополнительно.OKATO            КАК СубъектРФДополнительноOKATO,
		|	СубъектРФДополнительно.ОКТМО            КАК СубъектРФДополнительноОКТМО,
		|	СубъектРФДополнительно.КодИФНСФЛ        КАК СубъектРФДополнительноКодИФНСФЛ,
		|	СубъектРФДополнительно.КодИФНСЮЛ        КАК СубъектРФДополнительноКодИФНСЮЛ,
		|	СубъектРФДополнительно.КодУчасткаИФНСФЛ КАК СубъектРФДополнительноКодУчасткаИФНСФЛ,
		|	СубъектРФДополнительно.КодУчасткаИФНСЮЛ КАК СубъектРФДополнительноКодУчасткаИФНСЮЛ,
		|
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьОкруг,                "Округ") + "
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьРайон,                "Район") + "
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьГород,                "Город") + "
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьВнутригородскойРайон, "ВнутригородскойРайон") + "
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьНаселенныйПункт,      "НаселенныйПункт") + "
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьУлицу,                "Улица") + "
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьДополнительный,       "Дополнительный") + "
		|	" + ТекстОпциональныхПолейЗапросаПроверкиАдреса(ПроверятьПодчиненный,          "Подчиненный") + "
		|
		|	ДомаЗданияСтроения.ПочтовыйИндекс КАК ДомаПочтовыйИндекс,
		|	NULL                              КАК ДомаКодКЛАДР,
		|	NULL                              КАК ДомаДополнительно,
		|	NULL                              КАК ДомаДополнительноOKATO,
		|	NULL                              КАК ДомаДополнительноОКТМО,
		|	NULL                              КАК ДомаДополнительноКодИФНСФЛ,
		|	NULL                              КАК ДомаДополнительноКодИФНСЮЛ,
		|	NULL                              КАК ДомаДополнительноКодУчасткаИФНСФЛ,
		|	NULL                              КАК ДомаДополнительноКодУчасткаИФНСЮЛ,
		|
		|	ДомаЗданияСтроения.Строения КАК Строения
		|
		|ИЗ
		|	// Иерархия подчиненности
		|	РегистрСведений.АдресныеОбъекты КАК СубъектРФ
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК СубъектРФДополнительно
		|ПО
		|	СубъектРФДополнительно.Идентификатор = СубъектРФ.Дополнительно
		|
		|" + ?(ПроверятьОкруг, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Округ
		|ПО
		|	  Округ.Наименование = &ОкругНаименование
		|	И Округ.Сокращение   = &ОкругСокращение
		|	И Округ.Уровень                    = 2
		|	И Округ.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И Округ.КодРайона                  = 0
		|	И Округ.КодГорода                  = 0
		|	И Округ.КодВнутригородскогоРайона  = 0
		|	И Округ.КодНаселенногоПункта       = 0
		|	И Округ.КодУлицы                   = 0
		|	И Округ.КодДополнительногоЭлемента = 0
		|	И Округ.КодПодчиненногоЭлемента    = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК ОкругДополнительно
		|ПО
		|	ОкругДополнительно.Идентификатор = Округ.Дополнительно
		|", "") + "
		|
		|" + ?(ПроверятьРайон, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Район
		|ПО
		|	  Район.Наименование = &РайонНаименование
		|	И Район.Сокращение   = &РайонСокращение
		|	И Район.Уровень                    = 3
		|	И Район.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И Район.КодОкруга                  = " + ?(ПроверятьОкруг, "Округ.КодОкруга", "0") + "
		|	И Район.КодГорода                  = 0
		|	И Район.КодВнутригородскогоРайона  = 0
		|	И Район.КодНаселенногоПункта       = 0
		|	И Район.КодУлицы                   = 0
		|	И Район.КодДополнительногоЭлемента = 0
		|	И Район.КодПодчиненногоЭлемента    = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК РайонДополнительно
		|ПО
		|	РайонДополнительно.Идентификатор = Район.Дополнительно
		|", "") + "
		|
		|" + ?(ПроверятьГород, " 
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Город
		|ПО
		|	  Город.Наименование = &ГородНаименование
		|	И Город.Сокращение   = &ГородСокращение
		|	И Город.Уровень                    = 4
		|	И Город.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И Город.КодОкруга                  = " + ?(ПроверятьОкруг, "Округ.КодОкруга", "0") + "
		|	И Город.КодРайона                  = " + ?(ПроверятьРайон, "Район.КодРайона", "0") + "
		|	И Город.КодВнутригородскогоРайона  = 0
		|	И Город.КодНаселенногоПункта       = 0
		|	И Город.КодУлицы                   = 0
		|	И Город.КодДополнительногоЭлемента = 0
		|	И Город.КодПодчиненногоЭлемента    = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК ГородДополнительно
		|ПО
		|	ГородДополнительно.Идентификатор = Город.Дополнительно
		|", "") + "
		|
		|" + ?(ПроверятьВнутригородскойРайон, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК ВнутригородскойРайон
		|ПО
		|	  ВнутригородскойРайон.Наименование = &ВнутригородскойРайонНаименование
		|	И ВнутригородскойРайон.Сокращение   = &ВнутригородскойРайонСокращение
		|	И ВнутригородскойРайон.Уровень                    = 5
		|	И ВнутригородскойРайон.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И ВнутригородскойРайон.КодОкруга                  = " + ?(ПроверятьОкруг, "Округ.КодОкруга", "0") + "
		|	И ВнутригородскойРайон.КодРайона                  = " + ?(ПроверятьРайон, "Район.КодРайона", "0") + "
		|	И ВнутригородскойРайон.КодГорода                  = " + ?(ПроверятьГород, "Город.КодГорода",  "0") + "
		|	И ВнутригородскойРайон.КодНаселенногоПункта       = 0
		|	И ВнутригородскойРайон.КодУлицы                   = 0
		|	И ВнутригородскойРайон.КодДополнительногоЭлемента = 0
		|	И ВнутригородскойРайон.КодПодчиненногоЭлемента    = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК ВнутригородскойРайонДополнительно
		|ПО
		|	ВнутригородскойРайонДополнительно.Идентификатор = ВнутригородскойРайон.Дополнительно
		|", "") + "
		|
		|" + ?(ПроверятьНаселенныйПункт, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК НаселенныйПункт
		|ПО
		|	  НаселенныйПункт.Наименование = &НаселенныйПунктНаименование
		|	И НаселенныйПункт.Сокращение   = &НаселенныйПунктСокращение
		|	И НаселенныйПункт.Уровень                    = 6
		|	И НаселенныйПункт.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И НаселенныйПункт.КодОкруга                  = " + ?(ПроверятьОкруг, "Округ.КодОкруга", "0") + "
		|	И НаселенныйПункт.КодРайона                  = " + ?(ПроверятьРайон, "Район.КодРайона", "0") + "
		|	И НаселенныйПункт.КодГорода                  = " + ?(ПроверятьГород, "Город.КодГорода", "0") + "
		|	И НаселенныйПункт.КодВнутригородскогоРайона  = " + ?(ПроверятьВнутригородскойРайон, "ВнутригородскойРайон.КодВнутригородскогоРайона", "0") + "
		|	И НаселенныйПункт.КодУлицы                   = 0
		|	И НаселенныйПункт.КодДополнительногоЭлемента = 0
		|	И НаселенныйПункт.КодПодчиненногоЭлемента    = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК НаселенныйПунктДополнительно
		|ПО
		|	НаселенныйПунктДополнительно.Идентификатор = НаселенныйПункт.Дополнительно
		|", "") + "
		|
		|" + ?(ПроверятьУлицу, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Улица
		|ПО
		|	  Улица.Наименование = &УлицаНаименование
		|	И Улица.Сокращение   = &УлицаСокращение
		|	И Улица.Уровень                    = 7
		|	И Улица.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И Улица.КодОкруга                  = " + ?(ПроверятьОкруг, "Округ.КодОкруга", "0") + "
		|	И Улица.КодРайона                  = " + ?(ПроверятьРайон, "Район.КодРайона", "0") + "
		|	И Улица.КодГорода                  = " + ?(ПроверятьГород, "Город.КодГорода", "0") + "
		|	И Улица.КодВнутригородскогоРайона  = " + ?(ПроверятьВнутригородскойРайон, "ВнутригородскойРайон.КодВнутригородскогоРайона", "0") + "
		|	И Улица.КодНаселенногоПункта       = " + ?(ПроверятьНаселенныйПункт, "НаселенныйПункт.КодНаселенногоПункта", "0") + "
		|	И Улица.КодДополнительногоЭлемента = 0
		|	И Улица.КодПодчиненногоЭлемента    = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК УлицаДополнительно
		|ПО
		|	УлицаДополнительно.Идентификатор = Улица.Дополнительно
		|", "") + "
		|	
		|" + ?(ПроверятьДополнительный, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Дополнительный
		|ПО
		|	  Дополнительный.Наименование = &ДополнительныйНаименование
		|	И Дополнительный.Сокращение   = &ДополнительныйСокращение
		|	И Дополнительный.Уровень                    = 90
		|	И Дополнительный.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И Дополнительный.КодОкруга                  = " + ?(ПроверятьОкруг, "Округ.КодОкруга", "0") + "
		|	И Дополнительный.КодРайона                  = " + ?(ПроверятьРайон, "Район.КодРайона", "0") + "
		|	И Дополнительный.КодГорода                  = " + ?(ПроверятьГород, "Город.КодГорода", "0") + "
		|	И Дополнительный.КодВнутригородскогоРайона  = " + ?(ПроверятьВнутригородскойРайон, "ВнутригородскойРайон.КодВнутригородскогоРайона", "0") + "
		|	И Дополнительный.КодНаселенногоПункта       = " + ?(ПроверятьНаселенныйПункт, "НаселенныйПункт.КодНаселенногоПункта", "0") + "
		|	И Дополнительный.КодУлицы                   = " + ?(ПроверятьУлицу, "Улица.КодУлицы", "0") + "
		|	И Дополнительный.КодПодчиненногоЭлемента    = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК ДополнительныйДополнительно
		|ПО
		|	ДополнительныйДополнительно.Идентификатор = Дополнительный.Дополнительно
		|", "") + "
		|	
		|" + ?(ПроверятьПодчиненный, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныеОбъекты КАК Подчиненный
		|ПО
		|	  Подчиненный.Наименование = &ПодчиненныйНаименование
		|	И Подчиненный.Сокращение   = &ПодчиненныйСокращение
		|	И Подчиненный.Уровень                    = 91
		|	И Подчиненный.КодСубъектаРФ              = СубъектРФ.КодСубъектаРФ
		|	И Подчиненный.КодОкруга                  = " + ?(ПроверятьОкруг, "Округ.КодОкруга", "0") + "
		|	И Подчиненный.КодРайона                  = " + ?(ПроверятьРайон, "Район.КодРайона", "0") + "
		|	И Подчиненный.КодГорода                  = " + ?(ПроверятьГород, "Город.КодГорода", "0") + "
		|	И Подчиненный.КодВнутригородскогоРайона  = " + ?(ПроверятьВнутригородскойРайон, "ВнутригородскойРайон.КодВнутригородскогоРайона", "0") + "
		|	И Подчиненный.КодНаселенногоПункта       = " + ?(ПроверятьНаселенныйПункт, "НаселенныйПункт.КодНаселенногоПункта", "0") + "
		|	И Подчиненный.КодУлицы                   = " + ?(ПроверятьУлицу, "Улица.КодУлицы", "0") + "
		|	И Подчиненный.КодДополнительногоЭлемента = " + ?(ПроверятьДополнительный, "Дополнительный.КодДополнительногоЭлемента", "0") + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДополнительныеАдресныеСведения КАК ПодчиненныйДополнительно
		|ПО
		|	ПодчиненныйДополнительно.Идентификатор = Подчиненный.Дополнительно
		|", "") + "
		|
		|// Записи зданий и строений
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДомаЗданияСтроения КАК ДомаЗданияСтроения
		|ПО
		|	ДомаЗданияСтроения.АдресныйОбъект = " + ПолеАдресныйОбъектИдентификатор + "
		|
		|// Условие на регион, который есть всегда
		|ГДЕ	
		|	  СубъектРФ.Наименование = &СубъектРФНаименование
		|	И СубъектРФ.Сокращение   = &СубъектРФСокращение
		|	И СубъектРФ.Уровень = 1
		|	И СубъектРФ.КодОкруга                  = 0
		|	И СубъектРФ.КодРайона                  = 0
		|	И СубъектРФ.КодГорода                  = 0
		|	И СубъектРФ.КодВнутригородскогоРайона  = 0
		|	И СубъектРФ.КодНаселенногоПункта       = 0
		|	И СубъектРФ.КодУлицы                   = 0
		|	И СубъектРФ.КодДополнительногоЭлемента = 0
		|	И СубъектРФ.КодПодчиненногоЭлемента    = 0";


	Запрос.УстановитьПараметр("СубъектРФНаименование", СубъектРФ.Наименование);
	Запрос.УстановитьПараметр("СубъектРФСокращение",   СубъектРФ.Сокращение);
	
	Запрос.УстановитьПараметр("ОкругНаименование", Округ.Наименование);
	Запрос.УстановитьПараметр("ОкругСокращение",   Округ.Сокращение);
	
	Запрос.УстановитьПараметр("РайонНаименование", Район.Наименование);
	Запрос.УстановитьПараметр("РайонСокращение",   Район.Сокращение);
	
	Запрос.УстановитьПараметр("ГородНаименование", Город.Наименование);
	Запрос.УстановитьПараметр("ГородСокращение",   Город.Сокращение);
	
	Запрос.УстановитьПараметр("ВнутригородскойРайонНаименование", ВнутригородскойРайон.Наименование);
	Запрос.УстановитьПараметр("ВнутригородскойРайонСокращение",   ВнутригородскойРайон.Сокращение);
	
	Запрос.УстановитьПараметр("НаселенныйПунктНаименование", НаселенныйПункт.Наименование);
	Запрос.УстановитьПараметр("НаселенныйПунктСокращение",   НаселенныйПункт.Сокращение);
	
	Запрос.УстановитьПараметр("УлицаНаименование", Улица.Наименование);
	Запрос.УстановитьПараметр("УлицаСокращение",   Улица.Сокращение);
	
	Запрос.УстановитьПараметр("ДополнительныйНаименование", Дополнительный.Наименование);
	Запрос.УстановитьПараметр("ДополнительныйСокращение",   Дополнительный.Сокращение);
	
	Запрос.УстановитьПараметр("ПодчиненныйНаименование", Подчиненный.Наименование);
	Запрос.УстановитьПараметр("ПодчиненныйСокращение",   Подчиненный.Сокращение);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Нет региона
		ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "СубъектРФ", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Субъект РФ (регион) ""%1"" не найден в адресном классификаторе'"), СубъектРФ.Наименование + " " + СубъектРФ.Сокращение));
		Возврат Результат;
		
	КонецЕсли;
	
	// Оставляем только записи со всеми корректными данными.
	ЗаписиДомов = РезультатЗапроса.Выгрузить();
	КорректныеЗаписи = Новый Массив;
	
	УлицаНайдена = Ложь;
	ВариантАдреса = Новый Структура;
	Для Каждого Запись Из ЗаписиДомов Цикл;
		ЗаполнитьПочтовыйИндексИКодКЛАДРПоИерархииФИАС(ВариантАдреса, Запись);
		
		Если ПроверятьОкруг И Не Запись.ОкругНайден Тогда
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Округ", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Округ ""%1"" отсутствует в адресном классификаторе'"), Округ.Наименование + " " + Округ.Сокращение));
		КонецЕсли;
		
		Если ПроверятьРайон И Не Запись.РайонНайден Тогда
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "СвРайМО/Район", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Район ""%1"" отсутствует в адресном классификаторе'"), Район.Наименование + " " + Район.Сокращение));
		КонецЕсли;
		
		Если ПроверятьГород И Не Запись.ГородНайден Тогда
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Город", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Город ""%1"" отсутствует в адресном классификаторе'"), Город.Наименование + " " + Город.Сокращение));
		КонецЕсли;
			
		Если ПроверятьВнутригородскойРайон И Не Запись.ВнутригородскойРайонНайден Тогда
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "ВнутригРайон", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внутригородской район ""%1"" отсутствует в адресном классификаторе'"),
					ВнутригородскойРайон.Наименование + " " + ВнутригородскойРайон.Сокращение));
		КонецЕсли;
			
		Если ПроверятьНаселенныйПункт И Не Запись.НаселенныйПунктНайден Тогда
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "НаселПункт", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Населенный пункт ""%1"" отсутствует в адресном классификаторе'"),
					НаселенныйПункт.Наименование + " " + НаселенныйПункт.Сокращение));
		КонецЕсли;
		
		Если ПроверятьУлицу И Запись.УлицаНайден Тогда
			УлицаНайдена = Истина;
		КонецЕсли;
			
		Если ПроверятьДополнительный И Не Запись.ДополнительныйНайден Тогда
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Дополнительный", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дополнительная территория ""%1""отсутствует в адресном классификаторе'"),
					Дополнительный.Наименование + " " + Дополнительный.Сокращение));
		КонецЕсли;
			
		Если ПроверятьПодчиненный И Не Запись.ПодчиненныйНайден Тогда
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Подчиненный", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Элемент дополнительной территории ""%1"" отсутствует в адресном классификаторе'"),
					Подчиненный.Наименование + " " + Подчиненный.Сокращение));
		КонецЕсли;
			
		Если ОшибкиПроверки.Количество() = 0 Тогда
			// Вся запись правильная
			КорректныеЗаписи.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверятьУлицу И НЕ УлицаНайдена Тогда
		ИсторияОбъекта = ИсторияАдресногоОбъекта(Улица.Наименование, Улица.Сокращение, Запись);
		Если ИсторияОбъекта.Количество() > 0 Тогда 
			Для каждого СтрокаОбъект Из ИсторияОбъекта Цикл
				ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Улица", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Улица ""%1"" была переименована в ""%2""'"), СтрокаОбъект.Значение, СтрокаОбъект.Представление));
			КонецЦикла;
		Иначе
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Улица", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Улица ""%1"" отсутствует в адресном классификаторе'"), Улица.Наименование + " " + Улица.Сокращение));
		КонецЕсли;
	КонецЕсли;
	
	Если КорректныеЗаписи.Количество() = 0 Тогда
		// Нет смысла искать дома и выдавать варианты, надо посмотреть в историю.
		Возврат Результат;
	КонецЕсли;
	
	ЕстьЗаписиДомов = Ложь;
	ИндексКорректный = Ложь;
	НеточныеСовпадения = Новый СписокЗначений;
	
	Если НЕ Уровни.Найти(90) = Неопределено Тогда
		Для Каждого Запись Из КорректныеЗаписи Цикл
			// Если Запись.Строения равно Null значит по этому адресу нет домов.
			Если ЗначениеЗаполнено(Запись.Строения) Тогда
				Описание = Запись.Строения.Получить();
				
				ВариантАдреса = Новый Структура;
				Если Не ПустаяСтрока(Описание) Тогда
					ИдентификаторДополнительно = УникальныйИдентификаторИзСтроки64(Лев(Описание, 24));
					Описание = Сред(Описание, 25);
					Если Не ПустаяСтрока(Описание) Тогда
						ЕстьЗаписиДомов = Истина;
						
						Если ОписаниеЗданийФИАССодержитДанные(Описание, ЗданияИПомещения, НеточныеСовпадения) Тогда
							ЗаполнитьИдентификаторПоИерархииФИАС(ВариантАдреса, Запись);
							ЗаполнитьДополнительныеДанныеПоИерархииФИАС(ВариантАдреса, Запись, ИдентификаторДополнительно);
							ЗаполнитьПочтовыйИндексИКодКЛАДРПоИерархииФИАС(ВариантАдреса, Запись);
							Если ЗначениеЗаполнено(Индекс) И ВариантАдреса.Свойство("Индекс") И Формат(ВариантАдреса.Индекс, "ЧРГ=; ЧГ=0") = Индекс Тогда
								ИндексКорректный = Истина;
							КонецЕсли;
							ВариантыАдреса.Добавить(ВариантАдреса);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьВарианты = ВариантыАдреса.Количество() > 0;
	Если ЕстьЗаписиДомов И Не ЕстьВарианты Тогда
		ОписаниеЗданияПоСоответствиюФИАС = ОписаниеЗданияПоСоответствиюФИАС(ЗданияИПомещения);
		Если ЗначениеЗаполнено(ОписаниеЗданияПоСоответствиюФИАС) Тогда
			Подсказка = "";
			Если НеточныеСовпадения.Количество() = 1 Тогда
				Подсказка = ", " + НСтр("ru = 'но есть'") + """" + НеточныеСовпадения[0]+ """";
			ИначеЕсли НеточныеСовпадения.Количество() > 1 Тогда
				ПервоеЗначение =  НеточныеСовпадения[0];
				Если НеточныеСовпадения.Количество() = 2 Тогда
					Подсказка = НСтр("ru = 'но есть ""%1"" или ""%2""'");
					ВтороеЗначение =  НеточныеСовпадения[1];
				Иначе
					Подсказка = НСтр("ru = 'но есть ""%1"" и другие варианты(%2)'");
					ВтороеЗначение = Строка(НеточныеСовпадения.Количество());
				КонецЕсли;
				Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", " + Подсказка, ПервоеЗначение, ВтороеЗначение);
			КонецЕсли;
			
			ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Подчиненный", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" отсутствует в адресном классификаторе'"), ОписаниеЗданияПоСоответствиюФИАС(ЗданияИПомещения)) + Подсказка);
		КонецЕсли;
		
		ВариантАдреса = Новый Структура;
		ЗаполнитьПочтовыйИндексИКодКЛАДРПоИерархииФИАС(ВариантАдреса, Запись);
		Если ЗначениеЗаполнено(Индекс) И ВариантАдреса.Свойство("Индекс") И Формат(ВариантАдреса.Индекс, "ЧРГ=; ЧГ=0") = Индекс Тогда
			ИндексКорректный = Истина;
		КонецЕсли;
		
	ИначеЕсли Не ЕстьЗаписиДомов И Не ЕстьВарианты Тогда
		// Добавляем варианты, ошибкой не считаем.
		Для Каждого Запись Из КорректныеЗаписи Цикл
			ВариантАдреса = Новый Структура;
			ЗаполнитьИдентификаторПоИерархииФИАС(ВариантАдреса, Запись);
			ЗаполнитьДополнительныеДанныеПоИерархииФИАС(ВариантАдреса, Запись, Неопределено);
			ЗаполнитьПочтовыйИндексИКодКЛАДРПоИерархииФИАС(ВариантАдреса, Запись);
			ВариантыАдреса.Добавить(ВариантАдреса);
			
			Если ЗначениеЗаполнено(Индекс) И ВариантАдреса.Свойство("Индекс") И Формат(ВариантАдреса.Индекс, "ЧРГ=; ЧГ=0") = Индекс Тогда
				ИндексКорректный = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверить индекс
	Если НЕ ИндексКорректный И ЗначениеЗаполнено(Индекс) И ОшибкиПроверки.Количество() = 0 Тогда
		ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ОшибкиПроверки, "Индекс", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Индекс ""%1"" в адресном классификаторе не соответствует введенному адресу'"), Индекс));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ИсторияАдресногоОбъекта(Наименование, Сокращение, Запись)
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	|	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	|	АдресныеОбъекты.КодРайона КАК КодРайона,
	|	АдресныеОбъекты.КодГорода КАК КодГорода,
	|	АдресныеОбъекты.КодВнутригородскогоРайона КАК КодВнутригородскогоРайона,
	|	АдресныеОбъекты.КодНаселенногоПункта КАК КодНаселенногоПункта
	|ПОМЕСТИТЬ ТаблицаАдресногоОбъекта
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.Идентификатор = &Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияАдресныхОбъектов.Идентификатор КАК Идентификатор,
	|	ИсторияАдресныхОбъектов.ТекущийКодСубъектаРФ КАК ТекущийКодСубъектаРФ,
	|	ИсторияАдресныхОбъектов.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	ИсторияАдресныхОбъектов.Наименование КАК Наименование,
	|	ИсторияАдресныхОбъектов.Сокращение КАК Сокращение,
	|	ИсторияАдресныхОбъектов.Дополнительно КАК Дополнительно,
	|	ИсторияАдресныхОбъектов.КодКЛАДР КАК КодКЛАДР,
	|	ИсторияАдресныхОбъектов.АдресныйОбъект КАК АдресныйОбъект,
	|	ИсторияАдресныхОбъектов.НачалоДействияЗаписи КАК НачалоДействияЗаписи,
	|	ИсторияАдресныхОбъектов.ОкончаниеДействияЗаписи КАК ОкончаниеДействияЗаписи,
	|	ИсторияАдресныхОбъектов.Операция КАК Операция,
	|	ИсторияАдресныхОбъектов.Уровень КАК Уровень,
	|	АдресныеОбъекты.Наименование КАК ТекущиеНаименование,
	|	АдресныеОбъекты.Сокращение КАК ТекущиеСокращение
	|ИЗ
	|	ТаблицаАдресногоОбъекта КАК ТекущийАдрес
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияАдресныхОбъектов КАК ИсторияАдресныхОбъектов
	|		ПО (ИсторияАдресныхОбъектов.КодСубъектаРФ = ТекущийАдрес.КодСубъектаРФ)
	|			И (ИсторияАдресныхОбъектов.КодОкруга = ТекущийАдрес.КодОкруга)
	|			И (ИсторияАдресныхОбъектов.КодРайона = ТекущийАдрес.КодРайона)
	|			И (ИсторияАдресныхОбъектов.КодГорода = ТекущийАдрес.КодГорода)
	|			И (ИсторияАдресныхОбъектов.КодВнутригородскогоРайона = ТекущийАдрес.КодВнутригородскогоРайона)
	|			И (ИсторияАдресныхОбъектов.КодНаселенногоПункта = ТекущийАдрес.КодНаселенногоПункта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|		ПО (ИсторияАдресныхОбъектов.АдресныйОбъект = АдресныеОбъекты.Идентификатор)
	|ГДЕ
	|	ИсторияАдресныхОбъектов.Наименование = &Наименование
	|	И ИсторияАдресныхОбъектов.Сокращение = &Сокращение";
	
	Вариант = Новый Структура;
	ЗаполнитьИдентификаторПоИерархииФИАС(Вариант, Запись);
	Если Не ЗначениеЗаполнено(Вариант.Идентификатор) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Сокращение", Сокращение);
	Запрос.УстановитьПараметр("Идентификатор", Вариант.Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(Наименование + " " + Сокращение, ВыборкаДетальныеЗаписи.ТекущиеНаименование + " " + ВыборкаДетальныеЗаписи.ТекущиеСокращение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Сформировать описание здания.
//
// Параметры:
//  НазваниеВладения		 - Строка - Наименование владения (Дом, Владение, Домовладение).
//  НомерВладения			 - Строка - Номер владения, дома.
//  НомерКорпуса			 - Строка - Номер корпуса.
//  НазваниеСтроения		 - Строка - Наименование строения (Строения, Сооружение, Участок, Литера).
//  НомерСтроения			 - Строка - Номер строения, сооружения.
//  ДополнительныеПараметры	 - Структура - Расширение возможностей строки описания здания.
// 
// Возвращаемое значение:
//  Строка, ФорматированнаяСтрока - Представление дома.
//
Функция СформироватьОписаниеЗдания(НазваниеВладения, НомерВладения, НомерКорпуса, НазваниеСтроения, НомерСтроения, ДополнительныеПараметры = Неопределено)
	
	ВыделятьСтрокуПоиска = Ложь;
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("СтрокаПоиска") Тогда
			ВыделятьСтрокуПоиска = Истина;
			СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
		КонецЕсли;
	КонецЕсли;
	
	КорпусИСтроение = "";
	Если ЗначениеЗаполнено(НомерКорпуса) Тогда
		КорпусИСтроение = ", "+ НСтр("ru = 'корпус'") + " " + НомерКорпуса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСтроения) Тогда
		КорпусИСтроение = КорпусИСтроение + ", " + НазваниеСтроения + " " + СокрЛП(НомерСтроения);
	КонецЕсли;

	Если ВыделятьСтрокуПоиска Тогда
		Дом = НазваниеВладения + Новый ФорматированнаяСтрока(НазваниеВладения + " ", 
			Новый ФорматированнаяСтрока(СтрокаПоиска, Новый Шрифт(,, Истина) , ЦветаСтиля.РезультатУспехЦвет),
			Сред(НомерВладения, СтрДлина(СтрокаПоиска) + 1));
		Результат = Новый ФорматированнаяСтрока(Дом, КорпусИСтроение);
	Иначе
		Результат = НазваниеВладения+ " "+ НомерВладения + КорпусИСтроение;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КодДополнительногоЭлемента(ДополнительныйПредставление) 
	
	Сокращение = ВРег(АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(ДополнительныйПредставление).Сокращение);
	Если Сокращение = "ГСК" Тогда
		Возврат "10600000";
	ИначеЕсли Сокращение = "СНТ" Тогда
		Возврат "10300000";
	ИначеЕсли Сокращение = "ТЕР" Тогда
		Возврат "10700000";
	КонецЕсли;

	Возврат "10200000";
КонецФункции

Функция СтруктураКодовАдреса()
	Коды = Новый Структура();
	Коды.Вставить("КодКЛАДР");
	Коды.Вставить("Идентификатор");
	Коды.Вставить("OKATO");
	Коды.Вставить("ОКТМО");
	Коды.Вставить("КодИФНСФЛ");
	Коды.Вставить("КодИФНСЮЛ");
	Коды.Вставить("КодУчасткаИФНСФЛ");
	Коды.Вставить("КодУчасткаИФНСЮЛ");
	
	Возврат Коды;
КонецФункции

Функция СтруктураКодовКЛАДРПоУровням()
	Возврат Новый Структура("Регион, Округ, Район, Город, ВнутригородскойРайон, НаселенныйПункт, Улица");
КонецФункции

// Возвращает строку с описанием типа по коду части адреса.
//  Противоположность функции "КодСериализацииОбъектаАдресации".
//
// Параметры:
//      Код - Строка - код
//
// Возвращаемое значение:
//      Число - Тип
//
Функция ТипОбъектаПоКодуСериализации(Код)
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Код = Код Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Возвращает массив структур с информацией о частях адреса согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//
// Возвращаемое значение:
//      Массив - содержит структуры - описания.
//
Функция ТипыОбъектовАдресацииАдресаРФ()
	
	Результат = Новый Массив;
	
	// Код, Наименование, Тип, Порядок, КодФИАС
	// Тип: 1 - владение, 2 - здание, 3 - помещение.
	
	Результат.Добавить(СтрокаОбъектаАдресации("1010", НСтр("ru = 'Дом'"),          1, 1, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1020", НСтр("ru = 'Владение'"),     1, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1030", НСтр("ru = 'Домовладение'"), 1, 3, 3));
	
	Результат.Добавить(СтрокаОбъектаАдресации("1050", НСтр("ru = 'Корпус'"),     2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1060", НСтр("ru = 'Строение'"),   2, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1080", НСтр("ru = 'Литера'"),     2, 3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("1070", НСтр("ru = 'Сооружение'"), 2, 4, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1040", НСтр("ru = 'Участок'"),    2, 5));
	
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'Квартира'"),  3, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'Офис'"),      3, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("2040", НСтр("ru = 'Бокс'"),      3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("2020", НСтр("ru = 'Помещение'"), 3, 4));
	Результат.Добавить(СтрокаОбъектаАдресации("2050", НСтр("ru = 'Комната'"),   3, 5));
	Результат.Добавить(СтрокаОбъектаАдресации("2060", НСтр("ru = 'Этаж'"),   3, 6));
	//  Наши сокращения для поддержки обратной совместимости при парсинге.
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'кв.'"),       3, 6));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'оф.'"),       3, 7));
	
	// Уточняющие объекты
	Результат.Добавить(СтрокаОбъектаАдресации("10100000", НСтр("ru = 'Почтовый индекс'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10200000", НСтр("ru = 'Адресная точка'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10300000", НСтр("ru = 'Садовое товарищество'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10400000", НСтр("ru = 'Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10500000", НСтр("ru = 'Промышленная зона'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10600000", НСтр("ru = 'Гаражно-строительный кооператив'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10700000", НСтр("ru = 'Территория'")));
	
	Возврат Результат;
КонецФункции

Функция СтрокаОбъектаАдресации(Код, Наименование, Тип = 0, Порядок = 0, КодФИАС = 0)
	
	СтруктураОбъектаАдресации = Новый Структура;
	СтруктураОбъектаАдресации.Вставить("Код", Код);
	СтруктураОбъектаАдресации.Вставить("Наименование", Наименование);
	СтруктураОбъектаАдресации.Вставить("Тип", Тип);
	СтруктураОбъектаАдресации.Вставить("Порядок", Порядок);
	СтруктураОбъектаАдресации.Вставить("КодФИАС", КодФИАС);
	СтруктураОбъектаАдресации.Вставить("Сокращение", НРег(Наименование));
	СтруктураОбъектаАдресации.Вставить("Ключ", ВРег(Наименование));
	Возврат СтруктураОбъектаАдресации;
	
КонецФункции

Функция ТекстОпциональныхПолейЗапросаПроверкиАдреса(ФлагПроверки, ИмяПоля)
	
	Если ФлагПроверки Тогда
		Вариант = "
			|	ВЫБОР КОГДА [Поле].Идентификатор ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК [Поле]Найден,
			|	[Поле].Идентификатор                 КАК [Поле]Идентификатор,
			|	[Поле].ПочтовыйИндекс                КАК [Поле]ПочтовыйИндекс,
			|	[Поле].КодКЛАДР                      КАК [Поле]КодКЛАДР,
			|	[Поле].Дополнительно                 КАК [Поле]Дополнительно,
			|	[Поле]Дополнительно.OKATO            КАК [Поле]ДополнительноOKATO,
			|	[Поле]Дополнительно.ОКТМО            КАК [Поле]ДополнительноОКТМО,
			|	[Поле]Дополнительно.КодИФНСФЛ        КАК [Поле]ДополнительноКодИФНСФЛ,
			|	[Поле]Дополнительно.КодИФНСЮЛ        КАК [Поле]ДополнительноКодИФНСЮЛ,
			|	[Поле]Дополнительно.КодУчасткаИФНСФЛ КАК [Поле]ДополнительноКодУчасткаИФНСФЛ,
			|	[Поле]Дополнительно.КодУчасткаИФНСЮЛ КАК [Поле]ДополнительноКодУчасткаИФНСЮЛ,
			|";
	Иначе
		Вариант = "
			|	NULL КАК [Поле]Найден,
			|	NULL КАК [Поле]Идентификатор,
			|	NULL КАК [Поле]ПочтовыйИндекс,
			|	NULL КАК [Поле]КодКЛАДР,
			|	NULL КАК [Поле]Дополнительно,
			|	NULL КАК [Поле]ДополнительноOKATO,
			|	NULL КАК [Поле]ДополнительноОКТМО,
			|	NULL КАК [Поле]ДополнительноКодИФНСФЛ,
			|	NULL КАК [Поле]ДополнительноКодИФНСЮЛ,
			|	NULL КАК [Поле]ДополнительноКодУчасткаИФНСФЛ,
			|	NULL КАК [Поле]ДополнительноКодУчасткаИФНСЮЛ,
			|";
	КонецЕсли;
		
	Возврат СтрЗаменить(Вариант, "[Поле]", ИмяПоля);
КонецФункции

Функция ПараметрыАутентификацииНаСайте() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Иначе
		ВызватьИсключение НСтр("ru = 'Сервис интернет-поддержки пользователей не подключен.'");
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор адресного объекта по частям адреса.
//
// Параметры:
//  Адрес - ФабрикаXDTO - Адрес объекта.
//  ИскатьПоУлице - Булево - Искать по улице.
// Возвращаемое значение:
//  УникальныйИдентификатор - идентификатор адресного объекта.
Функция ИдентификаторАдресногоОбъектаПоЧастямАдреса(Адрес, ИскатьПоУлице = Ложь)
	
	Если Адрес = Неопределено ИЛИ ПустаяСтрока(Адрес.СубъектРФ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоляАдреса = Новый Соответствие(); //"Регион
	ПоляАдреса.Вставить("Регион", АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.СубъектРФ));
	ПоляАдреса.Вставить("Округ", АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.Округ));
	Район = ?(ПустаяСтрока(Адрес.СвРайМО), "", Адрес.СвРайМО.Район);
	ПоляАдреса.Вставить("Район", АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Район));
	ПоляАдреса.Вставить("Город", АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.Город));
	ПоляАдреса.Вставить("ВнутригородскойРайон", АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.ВнутригРайон));
	ПоляАдреса.Вставить("НаселенныйПункт", АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.НаселПункт));
	ПоляАдреса.Вставить("Улица", АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(Адрес.Улица));
	Возврат ИдентификаторыАдреса(ПоляАдреса, ИскатьПоУлице);
	
КонецФункции

Функция ИдентификаторыАдреса(ПоляАдреса, ИскатьПоУлице, ВсеИдентификаторыАдреса = Ложь)
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если Источник = "Сервис1С" Тогда
		Попытка
			Возврат ИдентификаторыАдресаПоКлассификаторуСервис1С(ПоляАдреса, ИскатьПоУлице, ВсеИдентификаторыАдреса);
		Исключение
			РезультатВебСервис = СтруктураОписанияОшибкиПоставщика(, ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , РезультатВебСервис.ПодробноеПредставлениеОшибки);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИдентификаторыАдресаПоКлассификатору(ПоляАдреса, ИскатьПоУлице, ВсеИдентификаторыАдреса);
	
КонецФункции

Функция ИдентификаторыАдресаПоКлассификатору(ПоляАдреса, ИскатьПоУлице, ВсеИдентификаторыАдреса = Ложь)
	
	ТекстСоединения = "";
	
	Если ВсеИдентификаторыАдреса Тогда
		ТекстВыбратьИдентификаторы = "АдресныйОбъектРегион.Идентификатор КАК ИдентификаторРегион, ";
	Иначе
		ТекстВыбратьИдентификаторы = "АдресныйОбъектРегион.Идентификатор КАК Идентификатор";
	КонецЕсли;
	
	Если ПустаяСтрока(ПоляАдреса["Округ"].Наименование) Тогда
		сОкруг = "0";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыОкруг
		|	ПО АдресныеОбъектыОкруг.Наименование = """  + ПоляАдреса["Округ"].Наименование + """
		|	И АдресныеОбъектыОкруг.КодСубъектаРФ = АдресныйОбъектРегион.КодСубъектаРФ
		|	И АдресныеОбъектыОкруг.Уровень = 2
		|	И АдресныеОбъектыОкруг.КодРайона = 0
		|	И АдресныеОбъектыОкруг.КодГорода = 0
		|	И АдресныеОбъектыОкруг.КодВнутригородскогоРайона = 0
		|	И АдресныеОбъектыОкруг.КодНаселенногоПункта = 0
		|	И АдресныеОбъектыОкруг.КодУлицы = 0
		|	И АдресныеОбъектыОкруг.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыОкруг.КодПодчиненногоЭлемента = 0";
		сОкруг = "АдресныеОбъектыОкруг.КодОкруга";
		Если ВсеИдентификаторыАдреса Тогда
			ТекстВыбратьИдентификаторы = ТекстВыбратьИдентификаторы + "АдресныеОбъектыОкруг.Идентификатор КАК ИдентификаторОкруг, ";
		Иначе
			ТекстВыбратьИдентификаторы = "АдресныеОбъектыОкруг.Идентификатор КАК Идентификатор";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоляАдреса["Район"].Наименование) Тогда
		сРайон = "0";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыРайон
		|	ПО АдресныеОбъектыРайон.Наименование = """  + ПоляАдреса["Район"].Наименование + """
		|	И АдресныеОбъектыРайон.КодОкруга = " + сОкруг + "
		|	И АдресныеОбъектыРайон.КодСубъектаРФ = АдресныйОбъектРегион.КодСубъектаРФ
		|	И АдресныеОбъектыРайон.Уровень = 3
		|	И АдресныеОбъектыРайон.КодГорода = 0
		|	И АдресныеОбъектыРайон.КодВнутригородскогоРайона = 0
		|	И АдресныеОбъектыРайон.КодНаселенногоПункта = 0
		|	И АдресныеОбъектыРайон.КодУлицы = 0
		|	И АдресныеОбъектыРайон.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыРайон.КодПодчиненногоЭлемента = 0";
		сРайон = "АдресныеОбъектыРайон.КодРайона";
		Если ВсеИдентификаторыАдреса Тогда
			ТекстВыбратьИдентификаторы = ТекстВыбратьИдентификаторы + "АдресныеОбъектыРайон.Идентификатор КАК ИдентификаторРайон, ";
		Иначе
			ТекстВыбратьИдентификаторы = "АдресныеОбъектыРайон.Идентификатор КАК Идентификатор";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоляАдреса["Город"].Наименование) Тогда
		сГород = "0";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыГород
		|	ПО АдресныеОбъектыГород.Наименование = """ + ПоляАдреса["Город"].Наименование + """
		|	И АдресныеОбъектыГород.КодСубъектаРФ = АдресныйОбъектРегион.КодСубъектаРФ
		|	И АдресныеОбъектыГород.Уровень = 4
		|	И АдресныеОбъектыГород.КодОкруга = " + сОкруг + "
		|	И АдресныеОбъектыГород.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыГород.КодВнутригородскогоРайона = 0
		|	И АдресныеОбъектыГород.КодНаселенногоПункта = 0
		|	И АдресныеОбъектыГород.КодУлицы = 0
		|	И АдресныеОбъектыГород.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыГород.КодПодчиненногоЭлемента = 0";
		сГород = "АдресныеОбъектыГород.КодГорода";
		Если ВсеИдентификаторыАдреса Тогда
			ТекстВыбратьИдентификаторы = ТекстВыбратьИдентификаторы + "АдресныеОбъектыГород.Идентификатор КАК ИдентификаторГород, ";
		Иначе
			ТекстВыбратьИдентификаторы = "АдресныеОбъектыГород.Идентификатор КАК Идентификатор";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоляАдреса["ВнутригородскойРайон"].Наименование) Тогда
		сВнутригородскойРайон = "0";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыВнутригородскойРайон
		|	ПО АдресныеОбъектыВнутригородскойРайон.Наименование = """ + ПоляАдреса["ВнутригородскойРайон"].Наименование + """
		|	И АдресныеОбъектыВнутригородскойРайон.КодСубъектаРФ = АдресныйОбъектРегион.КодСубъектаРФ
		|	И АдресныеОбъектыВнутригородскойРайон.КодОкруга = "  + сОкруг + "
		|	И АдресныеОбъектыВнутригородскойРайон.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыВнутригородскойРайон.КодГорода = " + сГород + "
		|	И АдресныеОбъектыВнутригородскойРайон.КодНаселенногоПункта = 0
		|	И АдресныеОбъектыВнутригородскойРайон.КодУлицы = 0
		|	И АдресныеОбъектыВнутригородскойРайон.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыВнутригородскойРайон.КодПодчиненногоЭлемента = 0";
		сВнутригородскойРайон = "АдресныеОбъектыВнутригородскойРайон.КодВнутригородскогоРайона";
		Если ВсеИдентификаторыАдреса Тогда
			ТекстВыбратьИдентификаторы = ТекстВыбратьИдентификаторы + "АдресныеОбъектыВнутригородскойРайон.Идентификатор КАК ИдентификаторВнутригРайон, ";
		Иначе
			ТекстВыбратьИдентификаторы = "АдресныеОбъектыВнутригородскойРайон.Идентификатор КАК Идентификатор";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоляАдреса["НаселенныйПункт"].Наименование) Тогда
		сНаселенногоПункта = "0";
	Иначе
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыНаселенныйПункт
		|	ПО АдресныеОбъектыНаселенныйПункт.Наименование = """ + ПоляАдреса["НаселенныйПункт"].Наименование + """
		|	И АдресныеОбъектыНаселенныйПункт.КодСубъектаРФ = АдресныйОбъектРегион.КодСубъектаРФ
		|	И АдресныеОбъектыНаселенныйПункт.Уровень = 6
		|	И АдресныеОбъектыНаселенныйПункт.КодОкруга = "  + сОкруг + "
		|	И АдресныеОбъектыНаселенныйПункт.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыНаселенныйПункт.КодГорода = " + сГород + "
		|	И АдресныеОбъектыНаселенныйПункт.КодВнутригородскогоРайона = " + сВнутригородскойРайон + "
		|	И АдресныеОбъектыНаселенныйПункт.КодУлицы = 0
		|	И АдресныеОбъектыНаселенныйПункт.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыНаселенныйПункт.КодПодчиненногоЭлемента = 0";
		сНаселенногоПункта = "АдресныеОбъектыНаселенныйПункт.КодНаселенногоПункта";
		Если ВсеИдентификаторыАдреса Тогда
			ТекстВыбратьИдентификаторы = ТекстВыбратьИдентификаторы + "АдресныеОбъектыНаселенныйПункт.Идентификатор КАК ИдентификаторНаселенныйПункт, ";
		Иначе
			ТекстВыбратьИдентификаторы = "АдресныеОбъектыНаселенныйПункт.Идентификатор КАК Идентификатор";
		КонецЕсли;
	КонецЕсли;
	
	Если ИскатьПоУлице И НЕ ПустаяСтрока(ПоляАдреса["Улица"].Наименование) Тогда
		ТекстСоединения = ТекстСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыУлица
		|	ПО АдресныеОбъектыУлица.Наименование = """ + ПоляАдреса["Улица"].Наименование + """
		|	И АдресныеОбъектыУлица.КодСубъектаРФ = АдресныйОбъектРегион.КодСубъектаРФ
		|	И АдресныеОбъектыУлица.Уровень = 7
		|	И АдресныеОбъектыУлица.КодОкруга = "  + сОкруг + "
		|	И АдресныеОбъектыУлица.КодРайона = " + сРайон + "
		|	И АдресныеОбъектыУлица.КодГорода = " + сГород + "
		|	И АдресныеОбъектыУлица.КодВнутригородскогоРайона = " + сВнутригородскойРайон + "
		|	И АдресныеОбъектыУлица.КодНаселенногоПункта = " + сНаселенногоПункта + "
		|	И АдресныеОбъектыУлица.КодДополнительногоЭлемента = 0
		|	И АдресныеОбъектыУлица.КодПодчиненногоЭлемента = 0";
		Если ВсеИдентификаторыАдреса Тогда
			ТекстВыбратьИдентификаторы = ТекстВыбратьИдентификаторы + "АдресныеОбъектыУлица.Идентификатор КАК ИдентификаторУлица, ";
		Иначе
			ТекстВыбратьИдентификаторы = "АдресныеОбъектыУлица.Идентификатор КАК Идентификатор";
		КонецЕсли;
	Иначе
		сУлица = "0";
	КонецЕсли;
	
	Если ВсеИдентификаторыАдреса Тогда
		ТекстВыбратьИдентификаторы = Лев(ТекстВыбратьИдентификаторы, СтрДлина(ТекстВыбратьИдентификаторы) - 2);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	| " + ТекстВыбратьИдентификаторы  + " 
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныйОбъектРегион " + ТекстСоединения + "
	|ГДЕ
	|	АдресныйОбъектРегион.Наименование = &Регион
	|	И АдресныйОбъектРегион.Уровень = 1
	|	И АдресныйОбъектРегион.КодОкруга = 0
	|	И АдресныйОбъектРегион.КодРайона = 0
	|	И АдресныйОбъектРегион.КодГорода = 0
	|	И АдресныйОбъектРегион.КодВнутригородскогоРайона = 0
	|	И АдресныйОбъектРегион.КодНаселенногоПункта = 0
	|	И АдресныйОбъектРегион.КодУлицы = 0
	|	И АдресныйОбъектРегион.КодДополнительногоЭлемента = 0
	|	И АдресныйОбъектРегион.КодПодчиненногоЭлемента = 0
	|	И АдресныйОбъектРегион.Сокращение = &РегионСокращение";
	
	Запрос.УстановитьПараметр("Регион", ПоляАдреса["Регион"].Наименование);
	Запрос.УстановитьПараметр("РегионСокращение", ПоляАдреса["Регион"].Сокращение);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Идентификаторы = РезультатЗапроса[0];
		Если ВсеИдентификаторыАдреса Тогда
			Результат = Новый Структура;
			Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
				Результат.Вставить(Колонка.Имя, Идентификаторы[Колонка.Имя]);
			КонецЦикла;
			Возврат Результат;
		Иначе
			Если ЗначениеЗаполнено(Идентификаторы.Идентификатор) Тогда
				Возврат Идентификаторы.Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ДобавитьОшибкуПроверкиАдресаПоКлассификатору(ВсеОшибки, Ключ, Текст, Подсказка = Неопределено)
	
	Ошибка = Новый Структура("Ключ, Текст, Подсказка", Ключ, Текст, Подсказка);
	ВсеОшибки.Добавить(Ошибка);
	
КонецПроцедуры

Функция ОписаниеЗданийФИАССодержитДанные(Описание, ЗданияИПомещения, НеточныеСовпадения = Неопределено)
	
	Если ЗданияИПомещения["Дом"] <> Неопределено Тогда 
		НомерДомаИлиВладенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Дом"].Значение));
	Иначе 
		НомерДомаИлиВладенияЗдания = "";
	КонецЕсли;
	
	Если ПустаяСтрока(НомерДомаИлиВладенияЗдания) И ЗданияИПомещения["Владение"] <> Неопределено Тогда
		НомерДомаИлиВладенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Владение"].Значение));
	КонецЕсли;
	Если ПустаяСтрока(НомерДомаИлиВладенияЗдания) И ЗданияИПомещения["Домовладение"] <> Неопределено Тогда
		НомерДомаИлиВладенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Домовладение"].Значение));
	КонецЕсли;
	
	Если ЗданияИПомещения["Корпус"] <> Неопределено Тогда
		НомерКорпусаЗдания = ВРег(СокрЛП(ЗданияИПомещения["Корпус"].Значение));
	Иначе
		НомерКорпусаЗдания = "";
	КонецЕсли;
	
	Если ЗданияИПомещения["Строение"] <> Неопределено Тогда
		НомерСтроенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Строение"].Значение));
	Иначе
		НомерСтроенияЗдания = "";
	КонецЕсли;
	
	Если ПустаяСтрока(НомерСтроенияЗдания) И ЗданияИПомещения["Литер"] <> Неопределено Тогда
		НомерСтроенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Литер"].Значение));
	КонецЕсли;
	
	Если ПустаяСтрока(НомерСтроенияЗдания) И ЗданияИПомещения["Литера"] <> Неопределено Тогда
		НомерСтроенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Литера"].Значение));
	КонецЕсли;
	
	Если ПустаяСтрока(НомерСтроенияЗдания) И ЗданияИПомещения["Сооружение"] <> Неопределено Тогда
		НомерСтроенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Сооружение"].Значение));
	КонецЕсли;
	
	Если ПустаяСтрока(НомерСтроенияЗдания) И ЗданияИПомещения["Участок"] <> Неопределено Тогда
		НомерСтроенияЗдания = ВРег(СокрЛП(ЗданияИПомещения["Участок"].Значение));
	КонецЕсли;
	
	СтрокиОписания = СтрЗаменить(Описание, Символы.ПС, "");
	СтрокиОписания = ВРег(СтрЗаменить(Описание, Символы.Таб, Символы.ПС));
	
	НаименованиеВладенийИСтроений = НаименованиеВладенийИСтроений();
	ТипЧисло = Новый ОписаниеТипов("Число");
	Интервалы = Новый Массив;
	
	ЧислоСтрок = СтрЧислоСтрок(СтрокиОписания);
	Позиция   = 1;
	
	Пока Позиция <= ЧислоСтрок Цикл
		Строка = СтрПолучитьСтроку(СтрокиОписания, Позиция);
		
		Если Строка = "H" Тогда
			// Точное описание - сравниваем.
			ВидВладения   = ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокиОписания, Позиция + 1));
			НомерВладения = СокрЛП(СтрПолучитьСтроку(СтрокиОписания, Позиция + 2));
			НомерКорпуса  = СокрЛП(СтрПолучитьСтроку(СтрокиОписания, Позиция + 3));
			ВидСтроения   = ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокиОписания, Позиция + 4));
			НомерСтроения = СокрЛП(СтрПолучитьСтроку(СтрокиОписания, Позиция + 5));
			Если СтрНайти(НомерСтроения, " +") > 0 Тогда
				НомерСтроения = СокрЛП(Лев(НомерСтроения, СтрНайти(НомерСтроения, " +"))); // отрезаем идентификатор
			КонецЕсли;
			
			Если НомерВладения = НомерДомаИлиВладенияЗдания
				И НомерКорпуса  = НомерКорпусаЗдания
				И НомерСтроения = НомерСтроенияЗдания Тогда
				// Точное попадания
				Возврат Истина;
			ИначеЕсли НеточныеСовпадения <> Неопределено И НомерВладения = НомерДомаИлиВладенияЗдания Тогда
				НазванияВладения = НаименованиеВладенийИСтроений.Владения.Получить(ВидВладения);
				НазванияСтроения = НаименованиеВладенийИСтроений.Строения.Получить(ВидВладения);
				ОписаниеЗдания = СформироватьОписаниеЗдания(НазванияВладения, НомерВладения, НомерКорпуса, НазванияСтроения, НомерСтроения);
				Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
				Хеш.Добавить(ОписаниеЗдания);
				Если НеточныеСовпадения.НайтиПоЗначению(хеш.ХешСумма) = Неопределено Тогда
					НеточныеСовпадения.Добавить(хеш.ХешСумма, ОписаниеЗдания);
				КонецЕсли;
			КонецЕсли;
			
			Позиция = Позиция + 5;
			
		ИначеЕсли Строка = "I" Тогда
			// Интервалы набираем для последующей проверки.
			Интервал = Новый Структура;
			Интервал.Вставить("Вид",    ТипЧисло.ПривестиЗначение( СтрПолучитьСтроку(СтрокиОписания, Позиция + 1) ));
			Интервал.Вставить("Начало", ТипЧисло.ПривестиЗначение( СтрПолучитьСтроку(СтрокиОписания, Позиция + 2) ));
			Интервал.Вставить("Конец",  ТипЧисло.ПривестиЗначение( СтрПолучитьСтроку(СтрокиОписания, Позиция + 3) ));
			Интервалы.Добавить(Интервал);
			
			Позиция = Позиция + 3;
		КонецЕсли;
		
		Позиция = Позиция + 1;
	КонецЦикла;
	
	// Продолжаем поиск в интервалах - первые цифры.
	НомерЧислом = "";
	Для Позиция = 1 По СтрДлина(НомерДомаИлиВладенияЗдания) Цикл
		Символ = Сред(НомерДомаИлиВладенияЗдания, Позиция, 1);
		Если СтрНайти("0123456789", Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		НомерЧислом = НомерЧислом + Символ;
	КонецЦикла;
	
	НомерЧислом = ТипЧисло.ПривестиЗначение(НомерЧислом);
	НомерЧетный = НомерЧислом % 2 = 0;
	
	Для Каждого Интервал Из Интервалы Цикл
		ВидИнтервала = Интервал.Вид;
		
		Если ВидИнтервала = 2 Тогда
			Если НомерЧетный Тогда
				// Четный
				Если  (Интервал.Начало <= НомерЧислом Или Интервал.Начало = 0)
					И (Интервал.Конец >= НомерЧислом Или Интервал.Конец = 0) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидИнтервала = 3 Тогда
			Если Не НомерЧетный Тогда
				// Нечетный
				Если  (Интервал.Начало <= НомерЧислом Или Интервал.Начало = 0) 
					И (Интервал.Конец >= НомерЧислом Или Интервал.Конец = 0) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Обычный
			Если  (Интервал.Начало <= НомерЧислом Или Интервал.Начало = 0)
				И (Интервал.Конец >= НомерЧислом Или Интервал.Конец = 0) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ЗаполнитьИдентификаторПоИерархииФИАС(Вариант, ЗаписьИсточника)
	
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "Идентификатор",  ЗаписьИсточника, "Идентификатор");

КонецПроцедуры

Процедура ЗаполнитьПочтовыйИндексИКодКЛАДРПоИерархииФИАС(Вариант, ЗаписьИсточника)
	
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "Индекс",  ЗаписьИсточника, "ПочтовыйИндекс");
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "КодКЛАДР", ЗаписьИсточника, "КодКЛАДР");

КонецПроцедуры

Процедура ЗаполнитьДополнительныеДанныеПоИерархииФИАС(Вариант, ЗаписьИсточника, Идентификатор)
	
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "ОКАТО",            ЗаписьИсточника, "ДополнительноOKATO");
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "ОКТМО",            ЗаписьИсточника, "ДополнительноОКТМО");
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "КодИФНСФЛ",        ЗаписьИсточника, "ДополнительноКодИФНСФЛ");
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "КодИФНСЮЛ",        ЗаписьИсточника, "ДополнительноКодИФНСЮЛ");
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "КодУчасткаИФНСФЛ", ЗаписьИсточника, "ДополнительноКодУчасткаИФНСФЛ");
	УстановитьРеквизитЗаписиФИАСИерархически(Вариант, "КодУчасткаИФНСЮЛ", ЗаписьИсточника, "ДополнительноКодУчасткаИФНСЮЛ");

КонецПроцедуры

Процедура УстановитьРеквизитЗаписиФИАСИерархически(Приемник, ИмяПоляПриемника, Источник, ИмяПоляИсточника)
	
	Варианты = Новый Массив;
	Если ИмяПоляИсточника <> "Идентификатор" Тогда
		Варианты.Добавить("Дома");
	КонецЕсли;
	Варианты.Добавить("Подчиненный");
	Варианты.Добавить("Дополнительный");
	Варианты.Добавить("Улица");
	Варианты.Добавить("НаселенныйПункт");
	Варианты.Добавить("ВнутригородскойРайон");
	Варианты.Добавить("Город");
	Варианты.Добавить("Район");
	Варианты.Добавить("Округ");
	Варианты.Добавить("СубъектРФ");
	
	Для Каждого ИмяВарианта Из Варианты Цикл
		Имя = ИмяВарианта + ИмяПоляИсточника;
		Если ЗначениеЗаполнено(Источник[Имя]) Тогда
			Приемник.Вставить(ИмяПоляПриемника, Источник[Имя]);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеЗданияПоСоответствиюФИАС(ЗданияИПомещения)
	
	Результат = "";
	
	Для Каждого КлючЗначение Из ЗданияИПомещения Цикл
		Результат = Результат + ", " + КлючЗначение.Ключ + " " + КлючЗначение.Значение.Значение;
	КонецЦикла;
	
	Возврат СокрЛП(Сред(Результат, 2));
КонецФункции

// Десериализует объект из XML.
//
Функция ДесериализацияАдресаXDTO(Строка)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Строка);
	
	Тип = ФабрикаXDTO.Тип(ПространствоИменАдресаРФ(), "АдресРФ");
	Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат Результат
КонецФункции

// Пространство имен для операций XDTO с адресом.
//
Функция ПространствоИменАдресаРФ()
	Возврат "http://www.v8.1c.ru/ssl/AddressSystem";
КонецФункции

// Устанавливает в XDTO адресе значение по XPath.
//
Процедура УстановитьXDTOРеквизитОбъекта(ОбъектXDTO, ПутьXPath, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	// Части XPath
	ЧастиПути  = СтрЗаменить(ПутьXPath, "/", Символы.ПС);
	ЧастейПути = СтрЧислоСтрок(ЧастиПути);
	
	ВедущийОбъект = ОбъектXDTO;
	Объект        = ОбъектXDTO;
	
	Для Позиция = 1 По ЧастейПути Цикл
		ЧастьПути = СтрПолучитьСтроку(ЧастиПути, Позиция);
		Если ЧастейПути = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Свойство = Объект.Свойства().Получить(ЧастьПути);
		Если Не Объект.Установлено(Свойство) Тогда
			Объект.Установить(Свойство, ФабрикаXDTO.Создать(Свойство.Тип));
		КонецЕсли;
		ВедущийОбъект = Объект;
		Объект        = Объект[ЧастьПути];
	КонецЦикла;
	
	Если Объект <> Неопределено Тогда
		Объект[ЧастьПути] =  Значение;
		
	ИначеЕсли ВедущийОбъект <> Неопределено Тогда
		ВедущийОбъект[ЧастьПути] =  Значение;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает в XDTO адресе значение по XPath.
//
Процедура ДобавитьXDTOРеквизитСписка(ОбъектXDTO, ИмяСвойстваСписка, ЗначенияАтрибутов, ИмяКлюча = "ТипАдрЭл", ИмяАтрибута = "Значение")
	
	Если Не ЗначениеЗаполнено(ЗначенияАтрибутов[ИмяКлюча]) Тогда
		// Нет ключа
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ЗначенияАтрибутов[ИмяАтрибута]) Тогда
		// Нет значения
		Возврат;
	КонецЕсли;
	
	Свойство = ОбъектXDTO.Свойства().Получить(ИмяСвойстваСписка);
	ЭлементСписка = ОбъектXDTO.ПолучитьСписок(Свойство).Добавить( ФабрикаXDTO.Создать(Свойство.Тип) );
	
	Для Каждого КлючЗначение Из ЗначенияАтрибутов Цикл
		ЭлементСписка[КлючЗначение.Ключ] = КлючЗначение.Значение;
	КонецЦикла;
КонецПроцедуры

// Возвращает значение реквизита из  XDTO адреса по XPath.
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath)
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Возврат ОбъектXTDO.Получить(СтрокаСвойств);
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает строку для поиска в операторе ПОДОБНО.
//
Функция ЗамаскироватьСпецсимволыПодобия(Текст)
	Результат = Текст;
	
	Спецсимвол = "\";
	Служебные  = "%_[]^" + Спецсимвол;
	
	Для Индекс = 1 По СтрДлина(Служебные) Цикл
		Символ = Сред(Служебные, Индекс, 1);
		Результат = СтрЗаменить(Результат, Символ, Спецсимвол + Символ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Конструктор полей структуры для описания ошибок.
//
Функция СтруктураОписанияОшибкиПоставщика(Описание = Неопределено, ИнформацияОбОшибке = Неопределено)
	
	Если Описание = Неопределено Тогда
		Описание = Новый Структура;
	КонецЕсли;
		
	Описание.Вставить("Отказ", ИнформацияОбОшибке <> Неопределено);
	Описание.Вставить("ПодробноеПредставлениеОшибки");
	Описание.Вставить("КраткоеПредставлениеОшибки");
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		Описание.ПодробноеПредставлениеОшибки = НСтр("ru = 'Информация об ошибке отсутствует'");
		Возврат Описание;
	КонецЕсли;
	
	Описание.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Текст = СокрЛП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Если ТипЗнч(ИнформацияОбОшибке.Причина) = Тип("ИнформацияОбОшибке") Тогда
		Если ИнформацияОбОшибке.Причина.Причина <> Неопределено Тогда
			ОписаниеОшибкиДляПоиска = ВРег(ИнформацияОбОшибке.Причина.Причина.Описание);
			ПозицияНачало = СтрНайти(ОписаниеОшибкиДляПоиска , "<FAULTSTRING>");
			Если ПозицияНачало > 0 Тогда
				ПозицияОкончание = СтрНайти(ОписаниеОшибкиДляПоиска , "</FAULTSTRING>");
				Текст = Сред(ИнформацияОбОшибке.Причина.Причина.Описание, ПозицияНачало + 13,
					ПозицияОкончание - ПозицияНачало - 13);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Отрезаем клиентский текст
	Позиция = СтрНайти(Текст, ": ");
	Если Позиция > 0 Тогда
		Текст = СокрЛ(Сред(СтрЗаменить(Текст, Символы.ПС, ""), Позиция + 1));
	КонецЕсли;
	
	// Отрезаем серверный текст
	Пока Истина Цикл
		Позиция = СтрНайти(Текст, "}:");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Текст = СокрЛ(Сред(Текст, Позиция + 2));
	КонецЦикла;
	
	Описание.КраткоеПредставлениеОшибки = Текст;
	Возврат Описание;
КонецФункции

Процедура ОбработатьОбщепринятыеСокращения(ДоступныеУровни)

	Фильтр = Новый Структура("Уровень", 0);
	НераспознанныеСтроки = ДоступныеУровни.НайтиСтроки(Фильтр);
	Для каждого НераспознаннаяЧастьАдреса Из НераспознанныеСтроки Цикл
		Если (ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "МОСКВА" 
			ИЛИ ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "САНКТ-ПЕТЕРБУРГ")
			И ПустаяСтрока(НераспознаннаяЧастьАдреса.Сокращение) Тогда
				НераспознаннаяЧастьАдреса.Сокращение = "г";
				НераспознаннаяЧастьАдреса.Значение = НераспознаннаяЧастьАдреса.Наименование + " " + НераспознаннаяЧастьАдреса.Сокращение;
		КонецЕсли;
		Если ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "КОРП" Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Корпус";
		КонецЕсли;
		Если ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "КВ" Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Квартира";
		КонецЕсли;
		Если ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "Д" Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Дом";
		КонецЕсли;
		Если ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "ЛИТЕР" Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Литера";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УровниСодержащиеСовпадения(ДанныеАнализа, Уровни)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеАдреса.Наименование КАК Наименование,
	               |	ДанныеАдреса.Сокращение КАК Сокращение
	               |ПОМЕСТИТЬ ДанныеАдреса
	               |ИЗ
	               |	&ДанныеАдреса КАК ДанныеАдреса
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Наименование,
	               |	Сокращение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА НЕ АдресныеОбъектыРегион.Уровень ЕСТЬ NULL 
	               |			ТОГДА АдресныеОбъектыРегион.Уровень
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Уровень
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъектыРегион
	               |		ПО (АдресныеОбъектыРегион.Уровень В (&Уровни))
	               |			И ДанныеАдреса.Наименование = АдресныеОбъектыРегион.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъектыРегион.Сокращение
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ АдресныеОбъектыРегион.Уровень ЕСТЬ NULL 
	               |				ТОГДА АдресныеОбъектыРегион.Уровень
	               |			ИНАЧЕ 0
	               |		КОНЕЦ > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АдресныеОбъектыРегион.Уровень
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Уровень";
	
	Запрос.УстановитьПараметр("ДанныеАдреса", ДанныеАнализа);
	Запрос.УстановитьПараметр("Уровни", Уровни);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ДоступныеУровни = РезультатЗапроса.ВыгрузитьКолонку("Уровень");
	
	Возврат ДоступныеУровни;
КонецФункции

// Установка соответствия населенного пункта по частям адреса.
//
Процедура УстановитьУровниАдресаПоЧастямАдресаДляНаселенногоПункта(Уровни, ЧастиАдреса)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДанныеАдреса.Уровень КАК Уровень,
	               |	ДанныеАдреса.Позиция КАК Позиция,
	               |	ДанныеАдреса.Значение КАК Значение,
	               |	ДанныеАдреса.Наименование КАК Наименование,
	               |	ДанныеАдреса.Сокращение КАК Сокращение
	               |ПОМЕСТИТЬ ДанныеАдреса
	               |ИЗ
	               |	&ДанныеАдреса КАК ДанныеАдреса
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Уровень,
	               |	Позиция,
	               |	Наименование,
	               |	Сокращение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ
	               |ПОМЕСТИТЬ СубъектРФ
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 1)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга
	               |ПОМЕСТИТЬ Округ
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 2)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода
	               |ПОМЕСТИТЬ Район
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 3)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода
	               |ПОМЕСТИТЬ Город
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 4)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода,
	               |	АдресныеОбъекты.КодВнутригородскогоРайона,
	               |	АдресныеОбъекты.КодНаселенногоПункта
	               |ПОМЕСТИТЬ ВнутригородскойРайон
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 5)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода,
	               |	АдресныеОбъекты.КодВнутригородскогоРайона,
	               |	АдресныеОбъекты.КодНаселенногоПункта
	               |ПОМЕСТИТЬ НаселенныйПункт
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 6)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL ;";
	
	КодОкруга = "0";
	КодРайона = "0";
	КодГорода = "0";
	КодВнутригородскогоРайона = "0";
	КодНаселенногоПункта = "0";
	КодУлицы = "0";
	КодДополнительнойТерритории = "0";
	ТекстСоединения = "";
	ТекстЗапросаВыборки = "";
	СписокПолей = Новый Структура();
	Для каждого Уровень Из Уровни Цикл
		Если Уровень = 1 Тогда
			СписокПолей.Вставить("СубъектРФ");
			ТекстСоединения = ТекстСоединения + " СубъектРФ КАК СубъектРФ ";
		ИначеЕсли Уровень = 2 Тогда
			СписокПолей.Вставить("Округ");
			ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ Округ КАК Округ
				| ПО СубъектаРФ.КодСубъектаРФ = Округ.КодСубъектаРФ";
			КодОкруга = "Округ.КодОкруга";
		ИначеЕсли Уровень = 3 Тогда
			СписокПолей.Вставить("Район");
			ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ Район КАК Район
				| ПО Район.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
				| И  Район.КодОкруга = " + КодОкруга;
				КодРайона = "Район.КодРайона";
		ИначеЕсли Уровень = 4 Тогда
			СписокПолей.Вставить("Город");
			ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ Город КАК Город
				| ПО Город.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
				| И  Город.КодОкруга = " + КодОкруга + "
				| И  Город.КодРайона = " + КодРайона;
				КодГорода = "Город.КодГорода";
		ИначеЕсли Уровень = 5 Тогда
				СписокПолей.Вставить("ВнутригородскойРайон");
				ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ ВнутригородскойРайон КАК ВнутригородскойРайон
					| ПО ВнутригородскойРайон.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
					| И  ВнутригородскойРайон.КодОкруга = " + КодОкруга + "
					| И  ВнутригородскойРайон.КодРайона = " + КодРайона + "
					| И  ВнутригородскойРайон.КодГорода = " + КодГорода;
				КодВнутригородскогоРайона = "ВнутригородскойРайон.КодВнутригородскогоРайона";
		ИначеЕсли Уровень = 6 Тогда
				СписокПолей.Вставить("НаселенныйПункт");
				ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ НаселенныйПункт КАК НаселенныйПункт
					| ПО НаселенныйПункт.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
					| И  НаселенныйПункт.КодОкруга = " + КодОкруга + "
					| И  НаселенныйПункт.КодРайона = " + КодРайона + "
					| И  НаселенныйПункт.КодГорода = " + КодГорода + "
					| И  НаселенныйПункт.КодВнутригородскогоРайона = " + КодВнутригородскогоРайона;
				КодНаселенногоПункта = "НаселенныйПункт.КодНаселенногоПункта";
		КонецЕсли;
	КонецЦикла;
	
	Разделитель = "";
	Для каждого Элемент Из СписокПолей Цикл
		ТекстЗапросаВыборки = ТекстЗапросаВыборки + Разделитель + " " + Элемент.Ключ
		+ ".Наименование + "" "" + " + Элемент.Ключ + ".Сокращение КАК "+ Элемент.Ключ + ", "
		+ Элемент.Ключ +".Уровень КАК " + Элемент.Ключ + "Уровень";
		Разделитель = ", ";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапросаВыборки) Тогда
		
		ТекстЗапросаВыборки = "ВЫБРАТЬ " + ТекстЗапросаВыборки + " ИЗ " + ТекстСоединения;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВыборки;
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ДанныеАдреса", ЧастиАдреса);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Для каждого Элемент Из СписокПолей Цикл
				СтрокаАдреса = ЧастиАдреса.Найти(Результат[Элемент.Ключ], "Значение");
				Если СтрокаАдреса <> Неопределено Тогда 
					СтрокаАдреса.Уровень = Результат[Элемент.Ключ + "Уровень"];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУровниАдресаПоЧастямАдреса(ЧастиАдреса, Уровни)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДанныеАдреса.Уровень КАК Уровень,
	               |	ДанныеАдреса.Позиция КАК Позиция,
	               |	ДанныеАдреса.Значение КАК Значение,
	               |	ДанныеАдреса.Наименование КАК Наименование,
	               |	ДанныеАдреса.Сокращение КАК Сокращение
	               |ПОМЕСТИТЬ ДанныеАдреса
	               |ИЗ
	               |	&ДанныеАдреса КАК ДанныеАдреса
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Уровень,
	               |	Позиция,
	               |	Наименование,
	               |	Сокращение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ
	               |ПОМЕСТИТЬ СубъектРФ
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 1)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга
	               |ПОМЕСТИТЬ Округ
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 2)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода
	               |ПОМЕСТИТЬ Район
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 3)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода
	               |ПОМЕСТИТЬ Город
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 4)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода,
	               |	АдресныеОбъекты.КодВнутригородскогоРайона,
	               |	АдресныеОбъекты.КодНаселенногоПункта
	               |ПОМЕСТИТЬ ВнутригородскойРайон
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 5)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода,
	               |	АдресныеОбъекты.КодВнутригородскогоРайона,
	               |	АдресныеОбъекты.КодНаселенногоПункта
	               |ПОМЕСТИТЬ НаселенныйПункт
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 6)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода,
	               |	АдресныеОбъекты.КодВнутригородскогоРайона,
	               |	АдресныеОбъекты.КодНаселенногоПункта,
	               |	АдресныеОбъекты.КодУлицы
	               |ПОМЕСТИТЬ Улицы
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 7)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода,
	               |	АдресныеОбъекты.КодВнутригородскогоРайона,
	               |	АдресныеОбъекты.КодНаселенногоПункта,
	               |	АдресныеОбъекты.КодУлицы,
	               |	АдресныеОбъекты.КодДополнительногоЭлемента
	               |ПОМЕСТИТЬ ДополнительнаяТерритория
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 90)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	               |	АдресныеОбъекты.Наименование КАК Наименование,
	               |	АдресныеОбъекты.Сокращение КАК Сокращение,
	               |	АдресныеОбъекты.Уровень КАК Уровень,
	               |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	               |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	               |	АдресныеОбъекты.КодРайона КАК КодРайона,
	               |	АдресныеОбъекты.КодГорода КАК КодГорода,
	               |	АдресныеОбъекты.КодВнутригородскогоРайона,
	               |	АдресныеОбъекты.КодНаселенногоПункта,
	               |	АдресныеОбъекты.КодУлицы,
	               |	АдресныеОбъекты.КодДополнительногоЭлемента,
	               |	АдресныеОбъекты.КодПодчиненногоЭлемента
	               |ПОМЕСТИТЬ ЭлементДополнительнойТерритории
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	               |		ПО (АдресныеОбъекты.Уровень = 91)
	               |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	               |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	               |ГДЕ
	               |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL ;";
	
	КодОкруга = "0";
	КодРайона = "0";
	КодГорода = "0";
	КодВнутригородскогоРайона = "0";
	КодНаселенногоПункта = "0";
	КодУлицы = "0";
	КодДополнительнойТерритории = "0";
	ТекстСоединения = "";
	ТекстЗапросаВыборки = "";
	СписокПолей = Новый Соответствие();
	Для каждого Уровень Из Уровни Цикл
		Если Уровень = 1 Тогда
			СписокПолей.Вставить("СубъектРФ", "КодСубъектаРФ");
			ТекстСоединения = " СубъектРФ КАК СубъектРФ ";
		ИначеЕсли Уровень = 2 Тогда
			СписокПолей.Вставить("Округ", "КодОкруга");
			ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ Округ КАК Округ
				| ПО СубъектаРФ.КодСубъектаРФ = Округ.КодСубъектаРФ";
			КодОкруга = "Округ.КодОкруга";
		ИначеЕсли Уровень = 3 Тогда
			СписокПолей.Вставить("Район", "КодРайона");
			ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ Район КАК Район
				| ПО Район.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
				| И  Район.КодОкруга = " + КодОкруга;
				КодРайона = "Район.КодРайона";
		ИначеЕсли Уровень = 4 Тогда
			СписокПолей.Вставить("Город", "КодГорода");
			ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ Город КАК Город
				| ПО Город.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
				| И  Город.КодОкруга = " + КодОкруга + "
				| И  Город.КодРайона = " + КодРайона;
				КодГорода = "Город.КодГорода";
		ИначеЕсли Уровень = 5 Тогда
				СписокПолей.Вставить("ВнутригородскойРайон", "КодВнутригородскогоРайона");
				ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ ВнутригородскойРайон КАК ВнутригородскойРайон
					| ПО ВнутригородскойРайон.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
					| И  ВнутригородскойРайон.КодОкруга = " + КодОкруга + "
					| И  ВнутригородскойРайон.КодРайона = " + КодРайона + "
					| И  ВнутригородскойРайон.КодГорода = " + КодГорода;
				КодВнутригородскогоРайона = "ВнутригородскойРайон.КодВнутригородскогоРайона";
		ИначеЕсли Уровень = 6 Тогда
				СписокПолей.Вставить("НаселенныйПункт", "КодНаселенногоПункта");
				ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ НаселенныйПункт КАК НаселенныйПункт
					| ПО НаселенныйПункт.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
					| И  НаселенныйПункт.КодОкруга = " + КодОкруга + "
					| И  НаселенныйПункт.КодРайона = " + КодРайона + "
					| И  НаселенныйПункт.КодГорода = " + КодГорода + "
					| И  НаселенныйПункт.КодВнутригородскогоРайона = " + КодВнутригородскогоРайона;
				КодНаселенногоПункта = "НаселенныйПункт.КодНаселенногоПункта";
		ИначеЕсли Уровень = 7 Тогда
				СписокПолей.Вставить("Улицы", "КодУлицы");
				ТекстСоединения = ТекстСоединения + " ЛЕВОЕ СОЕДИНЕНИЕ Улицы КАК Улицы
					| ПО Улицы.КодСубъектаРФ = СубъектРФ.КодСубъектаРФ
					| И  Улицы.КодОкруга = " + КодОкруга + "
					| И  Улицы.КодРайона = " + КодРайона + "
					| И  Улицы.КодГорода = " + КодГорода + "
					| И  Улицы.КодВнутригородскогоРайона = " + КодВнутригородскогоРайона + "
					| И  Улицы.КодНаселенногоПункта = " + КодНаселенногоПункта;
				КодУлицы = "Улицы.КодУлицы";
		КонецЕсли;
	КонецЦикла;
	
	Разделитель = "";
	ТекстУпорядочить = " УПОРЯДОЧИТЬ ПО "; 
	Для каждого Элемент Из СписокПолей Цикл
		ТекстЗапросаВыборки = ТекстЗапросаВыборки + Разделитель + " " + Элемент.Ключ
		+ ".Наименование + "" "" + " + Элемент.Ключ + ".Сокращение КАК "+ Элемент.Ключ + ", " + Элемент.Ключ + ".Уровень КАК "
		+ Элемент.Ключ + "Уровень, " + Элемент.Ключ + "." + Элемент.Значение + " КАК " + Элемент.Значение;
		ТекстУпорядочить = ТекстУпорядочить + Разделитель + Элемент.Ключ + ".Уровень"; 
		Разделитель = ", ";
	КонецЦикла;
	ТекстУпорядочить = ТекстУпорядочить + " УБЫВ";

	Разделитель = "";
	УсловиеГдеДляДополнительныхТерриторий = "";
	Если НЕ ПустаяСтрока(ТекстЗапросаВыборки) Тогда
		
		ТекстЗапросаВыборки = "ВЫБРАТЬ " + ТекстЗапросаВыборки + " ИЗ " + ТекстСоединения;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВыборки + ТекстУпорядочить;
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ДанныеАдреса", ЧастиАдреса);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Для каждого Элемент Из СписокПолей Цикл
				СтрокаАдреса = ЧастиАдреса.Найти(Результат[Элемент.Ключ], "Значение");
				Если СтрокаАдреса <> Неопределено Тогда 
					СтрокаАдреса.Уровень = Результат[Элемент.Ключ + "Уровень"];
					УсловиеГдеДляДополнительныхТерриторий = УсловиеГдеДляДополнительныхТерриторий + Разделитель
						+ "АдресныеОбъекты." + СписокПолей.Получить(Элемент.Ключ) + " = " + Формат(Результат[Элемент.Значение], "ЧРГ=; ЧГ=0");
				Иначе
					УсловиеГдеДляДополнительныхТерриторий = УсловиеГдеДляДополнительныхТерриторий + Разделитель
						+ "АдресныеОбъекты." + СписокПолей.Получить(Элемент.Ключ) + " = 0";
				КонецЕсли;
				Разделитель = " И ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ДанныеАдреса.Уровень КАК Уровень,
	                |	ДанныеАдреса.Позиция КАК Позиция,
	                |	ДанныеАдреса.Значение КАК Значение,
	                |	ДанныеАдреса.Наименование КАК Наименование,
	                |	ДанныеАдреса.Сокращение КАК Сокращение
	                |ПОМЕСТИТЬ ДанныеАдреса
	                |ИЗ
	                |	&ДанныеАдреса КАК ДанныеАдреса
	                |ГДЕ
	                |	ДанныеАдреса.Уровень = 0
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Уровень,
	                |	Позиция,
	                |	Наименование,
	                |	Сокращение
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	                |	АдресныеОбъекты.Наименование КАК Наименование,
	                |	АдресныеОбъекты.Сокращение КАК Сокращение,
	                |	АдресныеОбъекты.Уровень КАК Уровень,
	                |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	                |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	                |	АдресныеОбъекты.КодРайона КАК КодРайона,
	                |	АдресныеОбъекты.КодГорода КАК КодГорода,
	                |	АдресныеОбъекты.КодВнутригородскогоРайона,
	                |	АдресныеОбъекты.КодНаселенногоПункта,
	                |	АдресныеОбъекты.КодУлицы,
	                |	АдресныеОбъекты.КодДополнительногоЭлемента
	                |ПОМЕСТИТЬ ДополнительнаяТерритория
	                |ИЗ
	                |	ДанныеАдреса КАК ДанныеАдреса
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	                |		ПО (АдресныеОбъекты.Уровень = 90)
	                |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	                |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	                |ГДЕ
	                |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL И " + УсловиеГдеДляДополнительныхТерриторий + "
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	                |	АдресныеОбъекты.Наименование КАК Наименование,
	                |	АдресныеОбъекты.Сокращение КАК Сокращение,
	                |	АдресныеОбъекты.Уровень КАК Уровень,
	                |	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	                |	АдресныеОбъекты.КодОкруга КАК КодОкруга,
	                |	АдресныеОбъекты.КодРайона КАК КодРайона,
	                |	АдресныеОбъекты.КодГорода КАК КодГорода,
	                |	АдресныеОбъекты.КодВнутригородскогоРайона,
	                |	АдресныеОбъекты.КодНаселенногоПункта,
	                |	АдресныеОбъекты.КодУлицы,
	                |	АдресныеОбъекты.КодДополнительногоЭлемента,
	                |	АдресныеОбъекты.КодПодчиненногоЭлемента
	                |ПОМЕСТИТЬ ЭлементДополнительнойТерритории
	                |ИЗ
	                |	ДанныеАдреса КАК ДанныеАдреса
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	                |		ПО (АдресныеОбъекты.Уровень = 91)
	                |			И ДанныеАдреса.Наименование = АдресныеОбъекты.Наименование
	                |			И ДанныеАдреса.Сокращение = АдресныеОбъекты.Сокращение
	                |ГДЕ
	                |	НЕ АдресныеОбъекты.Идентификатор ЕСТЬ NULL И " + УсловиеГдеДляДополнительныхТерриторий + "
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	АдресныеОбъекты.Наименование + "" "" + АдресныеОбъекты.Сокращение КАК ДополнительнаяТерритория,
	                |	АдресныеОбъекты.Уровень КАК ДополнительнаяТерриторияУровень,
	                |	ЭлементДополнительнойТерритории.Наименование + "" "" + ЭлементДополнительнойТерритории.Сокращение КАК ЭлементДополнительнойТерритории,
	                |	ЭлементДополнительнойТерритории.Уровень КАК ЭлементДополнительнойТерриторииУровень
	                |ИЗ
	                |	ДополнительнаяТерритория КАК АдресныеОбъекты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ЭлементДополнительнойТерритории КАК ЭлементДополнительнойТерритории
	                |		ПО АдресныеОбъекты.КодДополнительногоЭлемента = ЭлементДополнительнойТерритории.КодДополнительногоЭлемента
	                |ГДЕ " + УсловиеГдеДляДополнительныхТерриторий;
	
	Запрос.УстановитьПараметр("ДанныеАдреса", ЧастиАдреса);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДополнительнаяТерритория) Тогда
			СтрокаАдреса = ЧастиАдреса.Найти(ВыборкаДетальныеЗаписи.ДополнительнаяТерритория, "Значение");
			Если СтрокаАдреса <> Неопределено Тогда 
				СтрокаАдреса.Уровень = ВыборкаДетальныеЗаписи.ДополнительнаяТерриторияУровень;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭлементДополнительнойТерритории) Тогда
			СтрокаАдреса = ЧастиАдреса.Найти(ВыборкаДетальныеЗаписи.ЭлементДополнительнойТерритории, "Значение");
			Если СтрокаАдреса <> Неопределено Тогда 
				СтрокаАдреса.Уровень = ВыборкаДетальныеЗаписи.ЭлементДополнительнойТерриторииУровень;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныйПрограммныйИнтерфейсФоновыеОперацииСКлассификатором

// Обработчик фоновой загрузки.
//
Процедура ФоновоеЗаданиеЗагрузкиКлассификатораАдресов(Параметры, АдресРезультата) Экспорт
	
	ЗагрузитьКлассификаторАдресов(Параметры[0], Параметры[1]);
	
КонецПроцедуры

// Обработчик фоновой загрузки с сайта.
//
Процедура ФоновоеЗаданиеЗагрузкиКлассификатораАдресовССайта(Параметры, АдресРезультата) Экспорт
	
	ЗагрузитьКлассификаторАдресовССайта(Параметры[0], Параметры[1]);
	
КонецПроцедуры

// Обработчик фоновой очистки
//
Процедура ФоновоеЗаданиеОчисткиКлассификатораАдресов(Параметры, АдресРезультата) Экспорт
	
	ОчиститьКлассификаторАдресов(Параметры[0]);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсОбработчикиСобытий

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента"].Добавить(
		"АдресныйКлассификаторСлужебный");
		
	// Обновление
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"АдресныйКлассификаторСлужебный");
		
	// Профили безопасности
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"АдресныйКлассификаторСлужебный");
	
	// Текущие дела
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"АдресныйКлассификаторСлужебный");
	КонецЕсли;
		
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("АдресныйКлассификаторУстарел", УстаревшийКлассификаторСодержитСведения());
	
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией.
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Разрешение на проверку обновления.
	АдресФайлаВерсий = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		АдресФайлаОписанияДоступныхВерсий());
	
	Протокол = ВРег(АдресФайлаВерсий.Схема);
	Адрес    = АдресФайлаВерсий.Хост;
	Порт     = АдресФайлаВерсий.Порт;
	Описание = НСтр("ru = 'Загрузка обновлений адресного классификатора.'");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить( 
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.РегистрыСведений.АдресныеОбъекты.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения, Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//    Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления 
//                                    общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Заполнение начальных данных.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.23";
	Обработчик.Процедура = "АдресныйКлассификаторСлужебный.ВыполнитьНачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//     ТекущиеДела - ТаблицаЗначений - описание дел - таблица значений с колонками:
//         * Идентификатор - Строка    - Внутренний идентификатор дела, используемый механизмом "Текущие дела".
//         * ЕстьДела      - Булево    - Если Истина, дело выводится в списке текущих дел пользователя.
//         * Важное        - Булево    - Если Истина, дело будет выделено красным цветом.
//         * Представление - Строка    - Представление дела, выводимое пользователю.
//         * Количество    - Число     - Количественный показатель дела, выводится в строке заголовка дела.
//         * Форма         - Строка    - Полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                                       дела на панели "Текущие дела".
//         * ПараметрыФормы- Структура - Параметры, с которыми нужно открывать форму показателя.
//         * Владелец      - Строка, ОбъектМетаданных - Строковый идентификатор дела, которое будет владельцем для
//                           текущего или объект метаданных подсистема.
//         * Подсказка     - Строка    - Текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат; // Модель сервиса.
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.АдресныеОбъекты) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта("РегистрСведений.АдресныеОбъекты");
	Если Разделы.Количество() = 0 Тогда
		// Не вынесены в командный интерфейс.
		РазделАдминистрирование = Метаданные.Подсистемы.Найти("Администрирование");
		Если РазделАдминистрирование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Разделы.Добавить(РазделАдминистрирование);
	КонецЕсли;
	
	// 1. Необходимость актуализировать адресный классификатор - в старом классификаторе больше нет записей о регионах.
	КоличествоРегионов = ЗаполненныеРегионыУстаревшегоКлассификатора().Количество();
	Для Каждого Раздел Из Разделы Цикл
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "АктуализацияАдресногоКлассификатора";
			Дело.ЕстьДела       = ?(КоличествоРегионов > 0, Истина, Ложь);
			Дело.Важное         = Истина;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Адресный классификатор устарел'");
			Дело.Количество     = 0;
			Дело.Подсказка      = НСтр("ru = 'Автоподбор и проверка корректности адресов временно недоступны.'");
			Дело.ПараметрыФормы = Новый Структура;
			Дело.Форма          = "РегистрСведений.АдресныеОбъекты.Форма.АктуализацияУстаревшегоКлассификатора";
			Если Дело.ЕстьДела = Истина Тогда
				Возврат;
			КонецЕсли;
	КонецЦикла;
	
	// 2. Необходимость обновления адресного классификатора.
	ПоследнееОбновление = ОписаниеПоследнейЗагрузки();
	Подсказка           = ПоследнееОбновление.Представление;
	Подсказка = Подсказка + Символы.ПС + НСтр("ru = 'Необходимо проверить наличие обновлений.'");
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ОбновлениеАдресногоКлассификатора";
		Дело.ЕстьДела       = ПоследнееОбновление.НеобходимоОбновление;
		Дело.Важное         = ПоследнееОбновление.НеобходимоОбновление;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Адресный классификатор устарел'");
		Дело.Количество     = 0;
		Дело.Подсказка      = Подсказка;
		Дело.ПараметрыФормы = Новый Структура("Режим", "ПроверкаОбновления");
		Дело.Форма          = "РегистрСведений.АдресныеОбъекты.Форма.ЗагрузкаАдресногоКлассификатора";
	КонецЦикла;
	
КонецПроцедуры

// Начальное заполнение данных адресного классификатора при первом запуске.
//
Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	
	РегистрыСведений.АдресныеОбъекты.ОбновитьСоставСубъектовРФПоКлассификатору(Истина);

КонецПроцедуры

#КонецОбласти

#Область ПреобразованиеТиповДанныхФИАС

// Преобразует УникальныйИдентификатор в ДвоичныеДанные.
//
// Параметры:
//     Идентификатор - УникальныйИдентификатор, Строка - исходные данные.
//
// Возвращаемое значение:
//     ДвоичныеДанные - результат преобразования.
//
Функция УникальныйИдентификаторВДвоичныеДанные(Идентификатор) 
	
	ТипXDTOДвоичныеДанные = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "hexBinary");
	ЗначениеHEX =  ФабрикаXDTO.Создать(ТипXDTOДвоичныеДанные, СтрЗаменить(XMLСтрока(Идентификатор), "-", ""));
	
	Возврат ЗначениеHEX.Значение;
КонецФункции

// Преобразует ДвоичныеДанные в УникальныйИдентификатор.
// Выполняет обратное действие для функции УникальныйИдентификаторВДвоичныеДанные.
// 
// Параметры:
//     ДвоичныеДанные - исходные данные.
//
// Возвращаемое значение:
//     УникальныйИдентификатор - результат преобразования.
//
Функция УникальныйИдентификаторИзДвоичныхДанных(ДвоичныеДанные) 
	
	// Двоичные -> hex
	ТипXDTOДвоичныеДанные = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "hexBinary");
	ЗначениеHEX = ФабрикаXDTO.Создать(ТипXDTOДвоичныеДанные, ДвоичныеДанные);
	
	// hex -> UUID
	СтрокаУИД = ЗначениеHEX.ЛексическоеЗначение;
	Возврат Новый УникальныйИдентификатор( Сред(СтрокаУИД, 1, 8) + "-" + Сред(СтрокаУИД, 9, 4) + "-" + Сред(СтрокаУИД, 13, 4) + "-" + Сред(СтрокаУИД, 17, 4) + "-" + Сред(СтрокаУИД, 21) );
КонецФункции

// Преобразует УникальныйИдентификатор в строку base 64.
//
// Параметры:
//     Идентификатор - УникальныйИдентификатор, Строка - исходные данные.
//
// Возвращаемое значение:
//     Строка - результат преобразования.
//
Функция УникальныйИдентификаторВСтроку64(Идентификатор) 
	
	Возврат ДвоичныеДанныеВСтроку( УникальныйИдентификаторВДвоичныеДанные(Идентификатор) );
	
КонецФункции

// Преобразует строку base64 в УникальныйИдентификатор.
//
// Параметры:
//    Строка - Строка - Регистрозависимые исходные данные.
//
// Возвращаемое значение:
//     Идентификатор - Результат преобразования.
//                     Возвращаемый идентификатор зависит от регистра букв, передавай строки.
//
Функция УникальныйИдентификаторИзСтроки64(Строка)
	
	Возврат УникальныйИдентификаторИзДвоичныхДанных( ДвоичныеДанныеИзСтроки(Строка) );
	
КонецФункции

// Преобразует ДвоичныеДанные
// 
// Параметры:
//     ДвоичныеДанные - исходные данные.
//
// Возвращаемое значение:
//     Строка - результат преобразования в base64.
//
Функция ДвоичныеДанныеВСтроку(ДвоичныеДанные) 
	
	Возврат XMLСтрока(ДвоичныеДанные);
	
КонецФункции

// Преобразует строку в ДвоичныеДанные.
// 
// Параметры:
//     Строка - исходные данные.
//
// Возвращаемое значение:
//     ДвоичныеДанные - результат преобразования.
//
Функция ДвоичныеДанныеИзСтроки(Строка) 
	
	Возврат XMLЗначение(Тип("ДвоичныеДанные"), Строка);
	
КонецФункции

#КонецОбласти

#Область ПереносУстаревшегоКлассификатора

// Фоновая актуализация адресного классификатора.
//
Процедура ФоновыйПереносДанныхУстаревшегоКлассификатора(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	Регионы = ЗаполненныеРегионыУстаревшегоКлассификатора();
	Если Регионы.Количество() > 0 Тогда
		ПеренестиДанныеУстаревшегоКлассификатор(Регионы);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненныеРегионыУстаревшегоКлассификатора() Экспорт
	
	Результат = Новый Массив;
	Если Метаданные.РегистрыСведений.Найти("УдалитьАдресныйКлассификатор") <> Неопределено 
		И Пользователи.РолиДоступны("ДобавлениеИзменениеАдресныхСведений") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Выбираем все регионы, по которым еще есть записи.
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регионы.КодАдресногоОбъектаВКоде КАК КодСубъектаРФ
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор КАК Регионы
		|ГДЕ
		|	Регионы.ТипАдресногоЭлемента = 1
		|	И 1 В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.УдалитьАдресныйКлассификатор
		|		ГДЕ ТипАдресногоЭлемента = 2 И КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.УдалитьАдресныйКлассификатор
		|		ГДЕ ТипАдресногоЭлемента = 3 И КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.УдалитьАдресныйКлассификатор
		|		ГДЕ ТипАдресногоЭлемента = 4 И КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.УдалитьАдресныйКлассификатор
		|		ГДЕ ТипАдресногоЭлемента = 5 И КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.УдалитьАдресныйКлассификатор
		|		ГДЕ ТипАдресногоЭлемента = 6 И КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
		|	)
		|");
		
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодСубъектаРФ");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Проверяет есть ли хоть одна запись КЛАДР (исключая записи о регионах) требующая переноса.
//
Функция УстаревшийКлассификаторСодержитСведения()
	
	Если Метаданные.РегистрыСведений.Найти("УдалитьАдресныйКлассификатор") <> Неопределено 
		И Пользователи.РолиДоступны("ДобавлениеИзменениеАдресныхСведений") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регионы.КодАдресногоОбъектаВКоде КАК КодСубъектаРФ
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор КАК Регионы
		|ГДЕ
		|	Регионы.ТипАдресногоЭлемента > 1
		|");
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
	
Процедура ПеренестиДанныеУстаревшегоКлассификатор(КодыСубъектовРФ)
	
	// 1. Переносим все заказанные субъекты.
	ВсегоСубъектов = КодыСубъектовРФ.Количество();
	НомерПоПорядку = 0;
	
	ДатаЗагрузки = ТекущаяУниверсальнаяДата();
	ДатаВерсии   = ДатаЗагрузки;
	
	Для Каждого СубъектРФ Из КодыСубъектовРФ Цикл
		
		НомерПоПорядку = НомерПоПорядку + 1;
		ДлительныеОперации.СообщитьПрогресс(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Актуализация сведений о регионе ""%1 - %2"" (осталось %3) ...'"),
			СубъектРФ, АдресныйКлассификатор.НаименованиеРегионаПоКоду(СубъектРФ),
			Формат(ВсегоСубъектов - НомерПоПорядку, "ЧН=")));
		
		НачатьТранзакцию();
		Попытка
			ПеренестиРегионИзДанныхКЛАДР(СубъектРФ);
			
			// Ставим версию данных загрузки региона.
			УстановитьИнформациюОЗагрузкеВерсии(СубъектРФ, "КЛАДР", ДатаВерсии, ДатаЗагрузки);
			
			// Очищаем загруженные данные в старом классификаторе.
			ОчиститьСведенияУстаревшегоКлассификатора(СубъектРФ);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	// 4. Обновляем список субъектов РФ - убеждаемся, что у нас есть все корневые записи.
	РегистрыСведений.АдресныеОбъекты.ОбновитьСоставСубъектовРФПоКлассификатору(Истина);
	
	// 5. Перерасчитываем сокращения адресов по фактически загруженным данным.
	// Эти данные будут нужны при разборах адреса из строки.
	РассчитатьУровниСокращенийАдресныхСведений();
КонецПроцедуры

Процедура ПеренестиРегионИзДанныхКЛАДР(СубъектРФ)
	
	ДополнительныеАдресныеСведения = РегистрыСведений.ДополнительныеАдресныеСведения.СоздатьНаборЗаписей();
	АдресныеОбъекты                = РегистрыСведений.АдресныеОбъекты.СоздатьНаборЗаписей();
	ИсторияАдресныхОбъектов        = РегистрыСведений.ИсторияАдресныхОбъектов.СоздатьНаборЗаписей();
	ДомаЗданияСтроения             = РегистрыСведений.ДомаЗданияСтроения.СоздатьНаборЗаписей();
	СлужебныеАдресныеСведения      = РегистрыСведений.СлужебныеАдресныеСведения.СоздатьНаборЗаписей();
	
	ТаблицыДанных = Новый Структура;
	ТаблицыДанных.Вставить("КлассификаторСубъектовРФ",  РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ());
	ТаблицыДанных.Вставить("СлужебныеАдресныеСведения", СлужебныеАдресныеСведенияДляОбработкиКЛАДР());
	
	ТаблицыДанных.Вставить("АдресныеОбъекты", АдресныеОбъекты.ВыгрузитьКолонки());
	ТаблицыДанных.АдресныеОбъекты.Индексы.Добавить("Идентификатор");
	ТаблицыДанных.АдресныеОбъекты.Индексы.Добавить("КодКЛАДР");
	
	ТаблицыДанных.Вставить("ИсторияАдресныхОбъектов", ИсторияАдресныхОбъектов);
	ТаблицыДанных.Вставить("ДомаЗданияСтроения",      ДомаЗданияСтроения.ВыгрузитьКолонки());
	ТаблицыДанных.ДомаЗданияСтроения.Колонки.Добавить("СоответствиеСтроений");
	ТаблицыДанных.ДомаЗданияСтроения.Индексы.Добавить("АдресныйОбъект, ПочтовыйИндекс, КодСубъектаРФ");
	
	ТаблицыДанных.Вставить("ДополнительныеСведения",  ДополнительныеАдресныеСведения.ВыгрузитьКолонки());
	ТаблицыДанных.ДополнительныеСведения.Индексы.Добавить("КодСубъектаРФ, OKATO, ОКТМО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ");

	ТаблицыДанных.Вставить("ТипыЧастейЗдания", ТипыЧастейЗданияКЛАДР());
	
	// 1. Адреса и дополнительные сведения.
	ЗаполнитьАдресныеОбъектыРегистраКЛАДР(СубъектРФ, ТаблицыДанных);
	
	// 2. Дома  - по загруженным актуальным данным.
	ЗаполнитьДомаЗданияСтроенияКЛАДР(СубъектРФ, ТаблицыДанных);
	
	// 3. Запись собранного
	АдресныеОбъекты.Загрузить(ТаблицыДанных.АдресныеОбъекты);
	АдресныеОбъекты.Отбор.КодСубъектаРФ.Установить(СубъектРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АдресныеОбъекты);
	
	// Дома с упаковкой
	Сжатие = Новый СжатиеДанных(9);
	Для Каждого Строка Из ТаблицыДанных.ДомаЗданияСтроения Цикл
		НоваяСтрока = ДомаЗданияСтроения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "Строения");
		
		ВсеСтроения = "";
		Для Каждого КлючЗначение Из Строка.СоответствиеСтроений Цикл
			ВсеСтроения = ВсеСтроения + КлючЗначение.Значение + Символы.ПС;
		КонецЦикла;
		
		НоваяСтрока.Строения = Новый ХранилищеЗначения(ВсеСтроения, Сжатие); 
	КонецЦикла;
	ДомаЗданияСтроения.Отбор.КодСубъектаРФ.Установить(СубъектРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДомаЗданияСтроения);
	
	// Все дополнительные
	ДополнительныеАдресныеСведения.Загрузить(ТаблицыДанных.ДополнительныеСведения);
	ДополнительныеАдресныеСведения.Отбор.КодСубъектаРФ.Установить(СубъектРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДополнительныеАдресныеСведения);
	
	// Служебные адресные сведения
	НаборСлужебныеАдресныеСведения = РегистрыСведений.СлужебныеАдресныеСведения.СоздатьНаборЗаписей();
	НаборСлужебныеАдресныеСведения.Загрузить(ТаблицыДанных.СлужебныеАдресныеСведения);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборСлужебныеАдресныеСведения);
	
	// 4. Истории нет
	Набор = РегистрыСведений.ИсторияАдресныхОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(СубъектРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
	// 5. Ориентиров нет
	Набор = РегистрыСведений.ОриентирыАдресныхОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(СубъектРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
	// 6. Причин изменения нет
	Набор = РегистрыСведений.ПричиныИзмененияАдресныхСведений.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(СубъектРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Процедура ЗаполнитьАдресныеОбъектыРегистраКЛАДР(СубъектРФ, ТаблицыДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ТаблицаАдресныхОбъектов = ТаблицыДанных.АдресныеОбъекты;
	ИсторияАдресныхОбъектов = ТаблицыДанных.ИсторияАдресныхОбъектов;
	ТаблицаДополнительных   = ТаблицыДанных.ДополнительныеСведения;
	ТаблицаКлассификатора   = ТаблицыДанных.КлассификаторСубъектовРФ;
	
	// Выбираем уровни 1 - 5, до улиц, без домов.
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТипАдресногоЭлемента, КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде, Код,
		|	Наименование, Сокращение, Индекс, ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор
		|ГДЕ 
		|	ТипАдресногоЭлемента = 1
		|	И КодАдресногоОбъектаВКоде = &КодСубъектаРФ
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
		|	ТипАдресногоЭлемента, КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде, Код,
		|	Наименование, Сокращение, Индекс, ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор
		|ГДЕ 
		|	ТипАдресногоЭлемента = 2
		|	И КодАдресногоОбъектаВКоде = &КодСубъектаРФ
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
		|	ТипАдресногоЭлемента, КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде, Код,
		|	Наименование, Сокращение, Индекс, ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор
		|ГДЕ 
		|	ТипАдресногоЭлемента = 3
		|	И КодАдресногоОбъектаВКоде = &КодСубъектаРФ
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
		|	ТипАдресногоЭлемента, КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде, Код,
		|	Наименование, Сокращение, Индекс, ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор
		|ГДЕ 
		|	ТипАдресногоЭлемента = 4
		|	И КодАдресногоОбъектаВКоде = &КодСубъектаРФ
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
		|	ТипАдресногоЭлемента, КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде, Код,
		|	Наименование, Сокращение, Индекс, ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор
		|ГДЕ 
		|	ТипАдресногоЭлемента = 5
		|	И КодАдресногоОбъектаВКоде = &КодСубъектаРФ
		|");
		
	Запрос.УстановитьПараметр("КодСубъектаРФ", СубъектРФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПризнакАктуальности <> 0 Тогда
			// Историческая запись 
			НоваяСтрока = ИсторияАдресныхОбъектов.Добавить();
			НоваяСтрока.ТекущийКодСубъектаРФ = СубъектРФ;
		Иначе
			// Актуальные данные
			НоваяСтрока = ТаблицаАдресныхОбъектов.Добавить();
			НоваяСтрока.Актуален = Истина;
		КонецЕсли;
		
		НоваяСтрока.КодСубъектаРФ             = СубъектРФ;
		НоваяСтрока.КодОкруга                 = 0;	// Не поддерживается в КЛАДР
		НоваяСтрока.КодРайона                 = Выборка.КодРайонаВКоде;
		НоваяСтрока.КодГорода                 = Выборка.КодГородаВКоде;
		НоваяСтрока.КодВнутригородскогоРайона = 0;	// Не поддерживается в КЛАДР
		НоваяСтрока.КодНаселенногоПункта      = Выборка.КодНаселенногоПунктаВКоде;
		
		НоваяСтрока.КодУлицы = Выборка.КодУлицыВКоде;
		НоваяСтрока.КодКЛАДР = Цел(Выборка.Код / 10000 );
		
		НоваяСтрока.КодДополнительногоЭлемента = 0;	// Не поддерживается в КЛАДР
		НоваяСтрока.КодПодчиненногоЭлемента    = 0;	// Не поддерживается в КЛАДР
		
		// Уровень вычисляется по кодам иерархии.
		НоваяСтрока.Уровень = УровеньПоИерархическимКодамЗаписи(НоваяСтрока);
		
		Идентификатор = Новый УникальныйИдентификатор;
		Если НоваяСтрока.Уровень = 1 Тогда
			// Идентификатор субъекта подставим из классификатора.
			СтрокаСубъекта = ТаблицаКлассификатора.Найти(СубъектРФ, "КодСубъектаРФ");
			Если СтрокаСубъекта <> Неопределено Тогда
				Идентификатор = СтрокаСубъекта.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Идентификатор  = Идентификатор;
		НоваяСтрока.ПочтовыйИндекс = ТипЧисло.ПривестиЗначение(Выборка.Индекс);
		НоваяСтрока.Наименование   = Выборка.Наименование;
		НоваяСтрока.Сокращение     = Выборка.Сокращение;
		
		НоваяСтрока.Дополнительно  = ИдентификаторДополнительныхСведенийКЛАДР(ТаблицаДополнительных, СубъектРФ, 0, 0, 0);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДомаЗданияСтроенияКЛАДР(СубъектРФ, ТаблицыДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ТаблицаАдресныхОбъектов = ТаблицыДанных.АдресныеОбъекты;
	ИсторияАдресныхОбъектов = ТаблицыДанных.ИсторияАдресныхОбъектов;
	ТаблицаДополнительных   = ТаблицыДанных.ДополнительныеСведения;
	ТаблицаКлассификатора   = ТаблицыДанных.КлассификаторСубъектовРФ;
	ТипыЧастейЗдания        = ТаблицыДанных.ТипыЧастейЗдания;
	
	// Выбираем уровни 6 - только дома.
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТипАдресногоЭлемента, КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде, Код,
		|	Наименование, Сокращение, Индекс, ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор
		|ГДЕ 
		|	ТипАдресногоЭлемента = 6
		|	И КодАдресногоОбъектаВКоде = &КодСубъектаРФ
		|");
		
	Запрос.УстановитьПараметр("КодСубъектаРФ", СубъектРФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЕстьЗаписиДомов = Истина;
		Пока ЕстьЗаписиДомов Цикл
			КодАдресногоОбъекта = Цел(Выборка.Код / 10000);
			СтрокаАдресногоОбъекта = ТаблицаАдресныхОбъектов.Найти(КодАдресногоОбъекта, "КодКЛАДР");
			ИдентификаторАдресногоОбъекта = ?(СтрокаАдресногоОбъекта = Неопределено, Неопределено, СтрокаАдресногоОбъекта.Идентификатор);
			Если ИдентификаторАдресногоОбъекта <> Неопределено Тогда
				
				Описание = Выборка.Наименование;
				
				ПараметрыДомов = Новый Структура;
				ПараметрыДомов.Вставить("АдресныйОбъект", ИдентификаторАдресногоОбъекта);
				ПараметрыДомов.Вставить("ПочтовыйИндекс", ТипЧисло.ПривестиЗначение(Выборка.Индекс));
				ПараметрыДомов.Вставить("КодСубъектаРФ",  СубъектРФ);
				
				ДополнительныйИдентификатор = ИдентификаторДополнительныхСведенийКЛАДР(ТаблицаДополнительных, СубъектРФ, 0, 0, 0);
				
				ДобавитьЗаписиДомовЗданийСтроенийКЛАДР(Описание, ПараметрыДомов, ДополнительныйИдентификатор, ТаблицыДанных);
			КонецЕсли;
			ЕстьЗаписиДомов = Выборка.Следующий();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Минимальные служебные сведения.
// Идентификаторы надо бы зачитать из РегистрСведений.СлужебныеАдресныеСведения, но их там может и не быть.
//
Функция СлужебныеАдресныеСведенияДляОбработкиКЛАДР()
	
	ТаблицаАдресныхСведений = РегистрыСведений.СлужебныеАдресныеСведения.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ДобавитьСтрокуАдресныхСведений("INTVSTAT", 1, Неопределено, "Обычный", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("INTVSTAT", 2, Неопределено, "Четный", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("INTVSTAT", 3, Неопределено, "Нечетный", ТаблицаАдресныхСведений);
	// Дома
	ДобавитьСтрокуАдресныхСведений("ESTSTAT", 1, Неопределено, "Владение", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ESTSTAT", 2, Неопределено, "Дом", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ESTSTAT", 3, Неопределено, "Домовладение", ТаблицаАдресныхСведений);
	// Строения
	ДобавитьСтрокуАдресныхСведений("STRSTAT", 1, "стр", "Строение", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("STRSTAT", 2, "сооружение", "Сооружение", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("STRSTAT", 3, "литера", "Литера", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("STRSTAT", 3, "литер", "Литер", ТаблицаАдресныхСведений);
	// Дополнительные адресные элементы
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Бокс", "2040", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Владение", "1020", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Дом", "1010", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Домовладение", "1030", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Квартира", "2010", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Комната", "2050", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Корпус", "1050", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Литера", "1080", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Офис", "2030", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Помещение", "2020", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Сооружение", "1070", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Строение", "1060", ТаблицаАдресныхСведений);
	ДобавитьСтрокуАдресныхСведений("ДопАдрЭлНомер", 0, "Участок", "1040", ТаблицаАдресныхСведений);
	
	ТаблицаАдресныхСведений.Индексы.Добавить("Тип, Значение");
	
	Возврат ТаблицаАдресныхСведений;
	
КонецФункции

Функция ДобавитьСтрокуАдресныхСведений(Тип, Идентификатор, Ключ, Значение, СлужебныеАдресныеСведения)
	
	Строка = СлужебныеАдресныеСведения.Добавить();
	Строка.Тип           = Тип;
	Строка.Идентификатор = Идентификатор;
	Строка.Ключ          = Ключ;
	Строка.Значение      = Значение;
	
	Возврат СлужебныеАдресныеСведения;
КонецФункции

// Формирует таблицу префиксов - разделителей данных КЛАДР, типов зданий.
//
// Возвращаемое значение:
//     ТаблицаЗначений - Возможные варианты. Содержит колонки:
//         * Префикс       - Строка - префикс-разделитель.
//         * Идентификатор - Строка - идентификатор для структуры.
//         * ТипСтатуса    - Строка - тип для поиска идентификатора в таблице статусов.
//         * Длина         - Число  - длина префикса.
//
Функция ТипыЧастейЗданияКЛАДР()
	
	ПрефиксыЗданий = Новый ТаблицаЗначений;
	ПрефиксыЗданий.Колонки.Добавить("Префикс"); 
	ПрефиксыЗданий.Колонки.Добавить("Идентификатор");
	ПрефиксыЗданий.Колонки.Добавить("ТипСтатуса");
	ПрефиксыЗданий.Колонки.Добавить("Длина");
	ПрефиксыЗданий.Индексы.Добавить("Префикс, Идентификатор, ТипСтатуса, Длина");

	ДобавитьПрефиксЗданияКЛАДР("ДОМ",        "Дом",          "ESTSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("ВЛД",        "Владение",     "ESTSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("ДВЛД",       "Домовладение", "ESTSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("КОРПУС",     "Корпус",       "", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("К",          "Корпус",       "", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("СТР",        "Строение",     "STRSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("СТРОЕНИЕ",   "Строение",     "STRSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("ЛИТЕРА",     "Литера",       "STRSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("ЛИТЕР",      "Литера",       "STRSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("СООРУЖЕНИЕ", "Сооружение",   "STRSTAT", ПрефиксыЗданий);
	ДобавитьПрефиксЗданияКЛАДР("УЧАСТОК",    "Участок",      "STRSTAT", ПрефиксыЗданий);
	
	ПрефиксыЗданий.Сортировать("Длина УБЫВ, Префикс");
	
	Возврат ПрефиксыЗданий;
КонецФункции

Процедура ДобавитьПрефиксЗданияКЛАДР(Префикс, Идентификатор, ТипСтатуса, Таблица)
	
	Строка = Таблица.Добавить();
	Строка.Префикс       = Префикс;
	Строка.Идентификатор = Идентификатор;
	Строка.ТипСтатуса    = ТипСтатуса;
	Строка.Длина         = СтрДлина(Префикс);
	
КонецПроцедуры

// Расчет уровня ФИАС по набору кодов от младшего к старшим.
//
Функция УровеньПоИерархическимКодамЗаписи(Запись)
	
	Если Запись.КодПодчиненногоЭлемента > 0 Тогда
		Возврат 91;
		
	ИначеЕсли Запись.КодДополнительногоЭлемента > 0 Тогда
		Возврат 90;
		
	ИначеЕсли Запись.КодУлицы > 0 Тогда 
		Возврат 7;
		
	ИначеЕсли Запись.КодНаселенногоПункта > 0 Тогда 
		Возврат 6;
		
	ИначеЕсли Запись.КодВнутригородскогоРайона > 0 Тогда 
		Возврат 5;
		
	ИначеЕсли Запись.КодГорода > 0 Тогда 
		Возврат 4;
		
	ИначеЕсли Запись.КодРайона > 0 Тогда 
		Возврат 3;
		
	ИначеЕсли Запись.КодОкруга > 0 Тогда 
		Возврат 2;
		
	ИначеЕсли Запись.КодСубъектаРФ > 0 Тогда 
		Возврат 1;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ИдентификаторДополнительныхСведенийКЛАДР(ТаблицаДополнительных, СубъектРФ, ОКАТО, КодИФНС, КодУчастка)
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("КодСубъектаРФ",    СубъектРФ);
	Фильтр.Вставить("OKATO",            ОКАТО);
	Фильтр.Вставить("ОКТМО",            0);
	Фильтр.Вставить("КодИФНСФЛ",        КодИФНС);
	Фильтр.Вставить("КодИФНСЮЛ",        КодИФНС);
	Фильтр.Вставить("КодУчасткаИФНСФЛ", КодУчастка);
	Фильтр.Вставить("КодУчасткаИФНСЮЛ", КодУчастка);
	
	ВариантыСтрок = ТаблицаДополнительных.НайтиСтроки(Фильтр);
	Если ВариантыСтрок.Количество() = 0 Тогда
		СтрокаКодов = ТаблицаДополнительных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКодов, Фильтр);
		СтрокаКодов.Идентификатор = Новый УникальныйИдентификатор;
	Иначе
		СтрокаКодов = ВариантыСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаКодов.Идентификатор;
КонецФункции

// Формирует все записи по одной строк домов КЛАДР.
//
Процедура ДобавитьЗаписиДомовЗданийСтроенийКЛАДР(Описание, ПараметрыДомов, ДополнительныйИдентификатор, ТаблицыДанных)
	
	ДополнительныйИдентификаторСтрокой = УникальныйИдентификаторВСтроку64(ДополнительныйИдентификатор);
	ДомаЗданияСтроения                 = ТаблицыДанных.ДомаЗданияСтроения;
	ТипыЧастейЗдания                   = ТаблицыДанных.ТипыЧастейЗдания;
	
	// Разбиваем описание на части.
	ВариантыОписаний = ВРег(СтрЗаменить( СокрЛП(СтрЗаменить(Описание, ",", Символы.ПС)), " ", ""));
	Для НомерСтроки = 1 По СтрЧислоСтрок(ВариантыОписаний) Цикл
		ОдиночноеОписание = ВРег( СокрЛП( СтрПолучитьСтроку(ВариантыОписаний, НомерСтроки)));
		Если ПустаяСтрока(ОдиночноеОписание) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Ищем куда добавлять
		ВариантыЗаписей = ДомаЗданияСтроения.НайтиСтроки(ПараметрыДомов);
		Если ВариантыЗаписей.Количество() = 0 Тогда
			ЗаписьДомов = ДомаЗданияСтроения.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьДомов, ПараметрыДомов);
			ЗаписьДомов.СоответствиеСтроений = Новый Соответствие;
		Иначе
			ЗаписьДомов = ВариантыЗаписей[0];
		КонецЕсли;
		
		// Проверяем на диапазон
		ОписаниеДиапазона = ОписаниеДиапазонаКЛАДР(ОдиночноеОписание, ТаблицыДанных);
		Если ОписаниеДиапазона <> Неопределено Тогда
			ДобавитьСтроковоеОписаниеСтроений(ЗаписьДомов.СоответствиеСтроений, ДополнительныйИдентификаторСтрокой, ОписаниеДиапазона);
			
		Иначе
			// Проверяем на дом
			ОписаниеЗдания = ОписаниеЗданияКЛАДР(ОдиночноеОписание, ТаблицыДанных);
			Если ОписаниеЗдания <> Неопределено Тогда
				ДобавитьСтроковоеОписаниеСтроений(ЗаписьДомов.СоответствиеСтроений, ДополнительныйИдентификаторСтрокой, ОписаниеЗдания);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Модифицируем ОписаниеСтроений, добавляя Описание в строку с нужным ДополнительныйИдентификатор64.
//
Процедура ДобавитьСтроковоеОписаниеСтроений(СоответствиеСтроений, ДополнительныйИдентификатор64, Описание)
	Разделитель = Символы.Таб;
	
	Строка = СоответствиеСтроений[ДополнительныйИдентификатор64];
	Если Строка = Неопределено Тогда
		Строка = ДополнительныйИдентификатор64;
	КонецЕсли;
	
	СоответствиеСтроений[ДополнительныйИдентификатор64] = Строка + Разделитель + Описание;
КонецПроцедуры

// Возвращает строку описания диапазона в терминах ФИАС или Неопределено, если строка - не диапазон.
//
Функция ОписаниеДиапазонаКЛАДР(Описание, ТаблицыДанных)
	
	ПозицияДефиса = СтрНайти(Описание, "-");
	Символ        = Лев(Описание, 1);
	
	Если Символ = "Н" Тогда
		// Нечетный
		Диапазон = Сред(Описание, 2);
		Фильтр = Новый Структура("Тип, Значение", "INTVSTAT", "Нечетный");
	ИначеЕсли Символ = "Ч" Тогда
		// Четный
		Фильтр = Новый Структура("Тип, Значение", "INTVSTAT", "Четный");
	ИначеЕсли ПозицияДефиса > 0 И ЭтоЦифра(Символ) Тогда
		// Обычный
		Фильтр = Новый Структура("Тип, Значение", "INTVSTAT", "Обычный");
	Иначе
		// Не диапазон
		Возврат Неопределено
	КонецЕсли;
	
	ВариантыТипов = ТаблицыДанных.СлужебныеАдресныеСведения.НайтиСтроки(Фильтр);
	Если ВариантыТипов.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка поиска типа диапазона для %1'"), Описание);
	КонецЕсли;
	
	Разделитель = Символы.Таб;
	Результат = "i" 
		+ Разделитель + Формат(ВариантыТипов[0].Идентификатор, "ЧН=; ЧГ=")            	// Тип интервала
		+ Разделитель + ?(ПозицияДефиса = 0, "", Сред(Описание, 2, ПозицияДефиса - 2))	// Начало интервала
		+ Разделитель + ?(ПозицияДефиса = 0, "", Сред(Описание, ПозицияДефиса + 1));  	// Конец интервала
		
	Возврат Результат;
КонецФункции

// Возвращает строку описания здания в терминах ФИАС или Неопределено, если строка - не здание.
//
Функция ОписаниеЗданияКЛАДР(Описание, ТаблицыДанных)
	
	СлужебныеАдресныеСведения = ТаблицыДанных.СлужебныеАдресныеСведения;
	ТипыЧастейЗдания          = ТаблицыДанных.ТипыЧастейЗдания;
	
	СтруктураОписания = СтруктураОписанияЗданияКЛАДР(Описание, ТипыЧастейЗдания);
	
	ТипВладения   = 0;
	ТипСтроения   = 0;
	НомерКорпуса  = "";
	НомерДома     = "";
	НомерСтроения = "";
	
	Для Каждого КлючЗначение Из СтруктураОписания Цикл
		Значение = СокрЛП(КлючЗначение.Значение);
		Ключ     = КлючЗначение.Ключ;
		
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОписания = ТипыЧастейЗдания.Найти(КлючЗначение.Ключ, "Идентификатор");
		Если СтрокаОписания = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипСтатуса = СтрокаОписания.ТипСтатуса;
		Если ТипСтатуса = "" Тогда
			// Корпус
			НомерКорпуса = Значение;
			Продолжить;
		КонецЕсли;
		
		ВариантыТипов = СлужебныеАдресныеСведения.НайтиСтроки( Новый Структура("Тип, Значение", ТипСтатуса, Ключ) );
		Если ВариантыТипов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Вариант = ВариантыТипов[0].Значение;
		ТипВарианта = ВариантыТипов[0].Идентификатор;
		Если Вариант = "Дом" Или Вариант = "Владение" Или Вариант = "Домовладение" Тогда
			ТипВладения = ТипВарианта;
			НомерДома   = Значение;
		Иначе
			ТипСтроения   = ТипВарианта;
			НомерСтроения = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерДома = "" И НомерКорпуса = "" И НомерСтроения = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Разделитель = Символы.Таб;
	
	Результат = "h"
		+ Разделитель + Формат(ТипВладения, "ЧН=; ЧГ=")
		+ Разделитель + НомерДома
		+ Разделитель + НомерКорпуса
		+ Разделитель + Формат(ТипСтроения, "ЧН=; ЧГ=")
		+ Разделитель + НомерСтроения;
		
	Возврат Результат;
КонецФункции

Функция ЭтоЦифра(Символ)
	
	Возврат СтрНайти("0123456789", Символ) > 0;
	
КонецФункции

// Разбирает строковое описание отдельного здания КЛАДР.
//
// Параметры:
//     Описание         - Строка          - Описание одиночного здания КЛАДР.
//     ТипыЧастейЗдания - ТаблицаЗначений - Для разбора сокращений, результат функции ТипыЧастейЗдания. 
//
// Возвращаемое значение:
//     Структура    - Ключ - идентификатор, значение - номер здания.
//                    Набор идентификаторов определяется по данным таблицы-результата ТипыЧастейЗдания.
//     Неопределено - если описание не удалось распознать.
//
Функция СтруктураОписанияЗданияКЛАДР(Описание, ТипыЧастейЗдания)
	
	Текст = Описание;
	Результат = Новый Структура;
	
	// Идентификатор по умолчанию для возможно пустого первого ключа.
	Идентификатор = "Дом";
	Результат.Вставить(Идентификатор);
	
	ЕстьЕщеЧасти = Истина;
	
	Пока ЕстьЕщеЧасти Цикл
		// Тип текущей части
		Позиция = 1;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			Если СтрНачинаетсяС(Текст, ТипЧасти.Префикс) Тогда
				Идентификатор = ТипЧасти.Идентификатор;
				Позиция       = 1 + ТипЧасти.Длина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Текст = Сред(Текст, Позиция);
		
		// Значение части
		Позиция = 0;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			// Ищем ближайший следующий тип, после которого должно быть значение.
			ТестПозиции = СтрНайти(Текст, ТипЧасти.Префикс);
			Если ТестПозиции > 0                                                // Нашли
				И (Позиция = 0 Или ТестПозиции<Позиция)                         // Ближайший
				И Не ПустаяСтрока(Сред(Текст, ТестПозиции + ТипЧасти.Длина, 1)) Тогда // Со значением
					Позиция = ТестПозиции;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьЕщеЧасти = Позиция > 0;
		Если ЕстьЕщеЧасти Тогда
			Значение = Лев(Текст, Позиция-1);
			Текст = Сред(Текст, Позиция);
		Иначе
			Значение = Текст;
		КонецЕсли;
		
		Результат.Вставить(Идентификатор, СтрЗаменить(Значение, "_", "-"));
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

// Возвращает является ли источником данных веб сервис.
//
// Возвращаемое значение:
//     Булево - Если веб сервис является источником адресных сведений, то возвращает Истина.
//
Функция ИсточникДанныхАдресногоКлассификатораВебСервис() Экспорт
	
	Источник = ИсточникДанныхАдресногоКлассификатора();
	Если НЕ ПустаяСтрока(Источник) И Источник = "Сервис1С" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает информацию из классификатора субъектов РФ.
//
// Возвращаемое значение:
//     ТаблицаЗначений - поставляемые данные. Колонки:
//       * КодСубъектаРФ  - Число  - код классификатора субъекта, например 77 для Москвы.
//       * Наименование   - Строка - наименование субъекта по классификатору. Например "Московская".
//       * Сокращение     - Строка - наименование субъекта по классификатору. Например "Обл".
//       * ПочтовыйИндекс - Число  - индекс региона. Если 0 - то неопределено.
//       * ПочтовыйИндекс - Число  - индекс региона. Если 0 - то неопределено.
//       * Идентификатор  - УникальныйИдентификатор - идентификатор ФИАС.
//
Функция СведенияОСубъектахРФ()
	Возврат РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ();
КонецФункции

// Возвращает информацию о состоянии загруженности регионов.
//
// Возвращаемое значение:
//    ТаблицаЗначений - описание состояния. Содержит колонки.
//      * КодСубъектаРФ - Число                   - Код региона.
//      * Идентификатор - УникальныйИдентификатор - Идентификатор региона.
//      * Представление - Строка                  - Наименование и сокращение региона.
//      * Загружено     - Булево                  - Истина, если классификатор по данному региону сейчас загружен.
//      * ДатаВерсии    - Дата                    - UTC версия загруженных данных.
// 
Функция СведенияОЗагрузкеСубъектовРФ() Экспорт
	
	Классификатор = РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ();
	
	// Выбираем все возможные данные - и из регистра, и из классификатора.
	// Считаем, что уникальность обеспечивается не идентификатором (что правильно), а кодом субъекта
	// из-за особенностей платформы по передаче уникального идентификатора в таблицу-параметр запроса.
	
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Параметр.Наименование КАК Наименование,
			|	Параметр.Сокращение КАК Сокращение,
			|	Параметр.КодСубъектаРФ КАК КодСубъектаРФ
			|ПОМЕСТИТЬ Классификатор
			|ИЗ
			|	&Классификатор КАК Параметр
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВсеДоступныеРегионы.Наименование ЕСТЬ NULL 
			|			ТОГДА Классификатор.Наименование + "" "" + Классификатор.Сокращение
			|		ИНАЧЕ ВсеДоступныеРегионы.Наименование + "" "" + ВсеДоступныеРегионы.Сокращение
			|	КОНЕЦ КАК Представление,
			|	ВЫБОР
			|		КОГДА ВсеДоступныеРегионы.КодСубъектаРФ ЕСТЬ NULL 
			|			ТОГДА Классификатор.КодСубъектаРФ
			|		ИНАЧЕ ВсеДоступныеРегионы.КодСубъектаРФ
			|	КОНЕЦ КАК КодСубъектаРФ,
			|	ИдентификаторыАдресныхОбъектов.Идентификатор КАК Идентификатор,
			|	ВЫБОР
			|		КОГДА АдресныеОбъекты.КодСубъектаРФ ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Загружено,
			|	ЕСТЬNULL(Версии.ДатаВерсии, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВерсии
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		АдресныеОбъекты.Наименование КАК Наименование,
			|		АдресныеОбъекты.Сокращение КАК Сокращение,
			|		АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ
			|	ИЗ
			|		РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
			|	ГДЕ
			|		АдресныеОбъекты.Уровень = 1
			|		И АдресныеОбъекты.КодОкруга = 0
			|		И АдресныеОбъекты.КодРайона = 0
			|		И АдресныеОбъекты.КодГорода = 0
			|		И АдресныеОбъекты.КодВнутригородскогоРайона = 0
			|		И АдресныеОбъекты.КодНаселенногоПункта = 0
			|		И АдресныеОбъекты.КодУлицы = 0
			|		И АдресныеОбъекты.КодДополнительногоЭлемента = 0
			|		И АдресныеОбъекты.КодПодчиненногоЭлемента = 0) КАК ВсеДоступныеРегионы
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Регионы.КодСубъектаРФ КАК КодСубъектаРФ
			|		ИЗ
			|			РегистрСведений.АдресныеОбъекты КАК Регионы
			|		ГДЕ
			|			Регионы.Уровень = 1
			|			И 1 В
			|					(ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 2
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ
			|					ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 3
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ
			|					ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 4
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ
			|					ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 5
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ
			|					ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 6
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ
			|					ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 7
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ
			|					ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 90
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ
			|					ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныеОбъекты
			|					ГДЕ РегистрСведений.АдресныеОбъекты.Уровень = 91
			|						И РегистрСведений.АдресныеОбъекты.КодСубъектаРФ = Регионы.КодСубъектаРФ)) КАК АдресныеОбъекты
			|		ПО (АдресныеОбъекты.КодСубъектаРФ = ВсеДоступныеРегионы.КодСубъектаРФ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК ИдентификаторыАдресныхОбъектов
			|		ПО (ИдентификаторыАдресныхОбъектов.КодСубъектаРФ = ВсеДоступныеРегионы.КодСубъектаРФ)
			|			И (ИдентификаторыАдресныхОбъектов.Уровень = 1)
			|			И (ИдентификаторыАдресныхОбъектов.КодОкруга = 0)
			|			И (ИдентификаторыАдресныхОбъектов.КодРайона = 0)
			|			И (ИдентификаторыАдресныхОбъектов.КодГорода = 0)
			|			И (ИдентификаторыАдресныхОбъектов.КодВнутригородскогоРайона = 0)
			|			И (ИдентификаторыАдресныхОбъектов.КодНаселенногоПункта = 0)
			|			И (ИдентификаторыАдресныхОбъектов.КодУлицы = 0)
			|			И (ИдентификаторыАдресныхОбъектов.КодДополнительногоЭлемента = 0)
			|			И (ИдентификаторыАдресныхОбъектов.КодПодчиненногоЭлемента = 0)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗагруженныеВерсииАдресныхСведений КАК Версии
			|		ПО (Версии.КодСубъектаРФ = ВсеДоступныеРегионы.КодСубъектаРФ)
			|		ПОЛНОЕ СОЕДИНЕНИЕ Классификатор КАК Классификатор
			|		ПО (Классификатор.КодСубъектаРФ = ВсеДоступныеРегионы.КодСубъектаРФ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВЫБОР
			|		КОГДА ВсеДоступныеРегионы.КодСубъектаРФ ЕСТЬ NULL 
			|			ТОГДА Классификатор.КодСубъектаРФ
			|		ИНАЧЕ ВсеДоступныеРегионы.КодСубъектаРФ
			|	КОНЕЦ");

	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	
	ЗагруженныеСведения = Запрос.Выполнить().Выгрузить();
	ЗагруженныеСведения.Индексы.Добавить("Идентификатор");
	ЗагруженныеСведения.Индексы.Добавить("КодСубъектаРФ");
	ЗагруженныеСведения.Индексы.Добавить("Загружено");
	
	// Корректируем идентификаторы из-за особенностей платформы по передаче уникального
	// идентификатора в таблицу-параметр запроса.
	Для Каждого Строка Из ЗагруженныеСведения Цикл
		Если Не ЗначениеЗаполнено(Строка.Идентификатор) Тогда
			СтрокаКлассификатора = Классификатор.Найти(Строка.КодСубъектаРФ, "КодСубъектаРФ");
			Если СтрокаКлассификатора <> Неопределено Тогда
				Строка.Идентификатор = СтрокаКлассификатора.Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗагруженныеСведения;
КонецФункции

// Возвращает краткую информацию о состоянии загруженности регионов.
//
// Возвращаемое значение:
//    Структура - описание состояния. Содержит колонки.
//      * КоличествоРегионов - Число                   - Общие количество регионов.
//      * КоличествоЗагруженныхРегионов - Число - количество загруженных регионов.
Функция КраткиеСведенияОЗагрузкеСубъектовРФ() Экспорт
	
	Результат = Новый Структура("КоличествоРегионов, КоличествоЗагруженныхРегионов");
	
	Результат.КоличествоЗагруженныхРегионов = АдресныйКлассификатор.КоличествоЗагруженныхРегионов();
	
	Классификатор = РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ();
	Результат.КоличествоРегионов = Классификатор.Количество();
	
	Возврат Результат;
КонецФункции

// Возвращает код региона и проверяет наличие загруженных адресных сведений по региону.
//
Функция СведенияОРегионе(НаименованиеРегиона) Экспорт
	
	Результат = Новый Структура("Загружен, КодСубъектаРФ", Неопределено, Неопределено);
	СведенияОРегионе = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(НаименованиеРегиона);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
		|	ВЫБОР
		|		КОГДА НЕ ЗагруженныеДанные.Идентификатор ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РегионЗагружен
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК ЗагруженныеДанные
		|		ПО (ЗагруженныеДанные.Уровень > 1)
		|			И АдресныеОбъекты.КодСубъектаРФ = ЗагруженныеДанные.КодСубъектаРФ
		|ГДЕ
		|	АдресныеОбъекты.Наименование = &Наименование
		|	И АдресныеОбъекты.Сокращение = &Сокращение
		|	И АдресныеОбъекты.Уровень = 1";
	
	Запрос.УстановитьПараметр("Наименование", СведенияОРегионе.Наименование);
	Запрос.УстановитьПараметр("Сокращение", СведенияОРегионе.Сокращение);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Результат.Загружен = РезультатЗапроса.РегионЗагружен;
		Результат.КодСубъектаРФ = РезультатЗапроса.КодСубъектаРФ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеРегиона(Наименование, Сокращение)
	Если Сокращение = НСтр("ru = 'Респ'") Тогда
		Возврат НСтр("ru = 'Республика'") + " " + Наименование;
	ИначеЕсли Сокращение = НСтр("ru = 'обл'") Тогда
		Возврат Наименование + " " + НСтр("ru = 'область'");
	ИначеЕсли Сокращение = НСтр("ru = 'г'") Тогда
		Возврат НСтр("ru = 'г.'") + " " + Наименование;
	КонецЕсли;
	
	Возврат Наименование + " " + Сокращение;
КонецФункции

// Извлекает список домов полученного из регистра сведения описания и добавляет их в список значений.
//
// Параметры:
//  СтрокаСоСпискомДомов - Строка - описание списка домов из  регистра сведения.
//  СтрокаПоиска		 - Строка - Строка отбора.
//  ВариантыДомов		 - Список значений - Список домов.
//
Процедура ИзвлечьСписокДомов(СтрокаСоСпискомДомов, СтрокаПоиска, ВариантыДомов, ТочноеСовпадение)
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	СтрокаСоСпискомДомов = СтрЗаменить(СтрокаСоСпискомДомов, Символы.ПС, "");
	СтрокаСоСпискомДомов = ВРег(СтрЗаменить(СтрокаСоСпискомДомов, Символы.Таб, Символы.ПС));
	ЧислоСтрок = СтрЧислоСтрок(СтрокаСоСпискомДомов);
	Позиция = 1;
	Интервалы = Новый Массив;
	
	НаименованиеЗданийИСтроений = НаименованиеВладенийИСтроений();
	
	Пока Позиция <= ЧислоСтрок Цикл
		Строка = СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция);
		
		Если Строка = "H" Тогда
			
			ОписаниеДома = ОписаниеДома();
			
			ОписаниеДома.ВидВладения = ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 1));
			ОписаниеДома.Дом = СокрЛП(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 2));
			ОписаниеДома.ДомЧислом = НомерДомаЧислом(ОписаниеДома.Дом);
			ОписаниеДома.Корпус = СокрЛП(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 3));
			ОписаниеДома.ВидСтроения = ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 4));
			ОписаниеДома.Строение = СокрЛП(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 5));
			ОписаниеДома.НазваниеВладения = СокрЛП(НаименованиеЗданийИСтроений.Владения.Получить(ОписаниеДома.ВидВладения));
			
			ПозицияУИД = СтрНайти(ОписаниеДома.Строение, "+");
			Если ПозицияУИД > 0 Тогда
				ОписаниеДома.Строение = СокрЛП(Лев(ОписаниеДома.Строение, ПозицияУИД - 1));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
				Если ТочноеСовпадение Тогда
					Если СтрСравнить(ОписаниеДома.Дом, СтрокаПоиска) = 0 Тогда
						ДобавитьИнформациюОДоме(ВариантыДомов, ОписаниеДома, НаименованиеЗданийИСтроений, СтрокаПоиска);
					КонецЕсли;
				Иначе
					Если СтрНачинаетсяС(ОписаниеДома.Дом, СтрокаПоиска) Тогда
						ДобавитьИнформациюОДоме(ВариантыДомов, ОписаниеДома, НаименованиеЗданийИСтроений, СтрокаПоиска);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДобавитьИнформациюОДоме(ВариантыДомов, ОписаниеДома, НаименованиеЗданийИСтроений);
			КонецЕсли;
			
			Позиция = Позиция + 5;
			
		ИначеЕсли Строка = "I" Тогда
			
			// Интервалы набираем для последующего добавления.
			Интервал = Новый Структура;
			Интервал.Вставить("Вид",    ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 1)));
			Интервал.Вставить("Начало", ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 2)));
			Интервал.Вставить("Конец",  ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 3)));
			Интервалы.Добавить(Интервал);
			
			Позиция = Позиция + 3;
		КонецЕсли;
		
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Для Каждого Интервал Из Интервалы Цикл
		ВидИнтервала = Интервал.Вид;
	
		Для НомерВладения = Интервал.Начало По Интервал.Конец Цикл
			
			Если ВариантыДомов.Найти(НомерВладения, "ДомЧислом") = Неопределено Тогда
				Если ПустаяСтрока(СтрокаПоиска) ИЛИ СтрНачинаетсяС(НомерВладения, СтрокаПоиска) Тогда
					НомерДомаИСтроения = Новый Структура();
					
					НазваниеВладения = НаименованиеЗданийИСтроений.Владения.Получить(0);
					НомерДомаИСтроения.Вставить("Дом", Новый Структура("ВидВладения, НомерВладения", НазваниеВладения, НомерВладения));
					
					ТекстДом = Новый ФорматированнаяСтрока(НазваниеВладения + " ", 
						Новый ФорматированнаяСтрока(СтрокаПоиска, Новый Шрифт(,, Истина) , ЦветаСтиля.РезультатУспехЦвет),
						Сред(НомерВладения, СтрДлина(СтрокаПоиска) + 1));
					
					ИнформацияОДоме = ВариантыДомов.Добавить();
					ИнформацияОДоме.ДомЧислом = НомерВладения;
					ИнформацияОДоме.Дом = НомерВладения;
					ИнформацияОДоме.Значение = НомерДомаИСтроения;
					ИнформацияОДоме.Представление = ТекстДом;
				КонецЕсли;
			КонецЕсли;
			
			
			Если ВидИнтервала = 2 ИЛИ ВидИнтервала = 3 Тогда
				// Четный и нечетный интервал
				НомерВладения = НомерВладения + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


// Извлекает список домов полученного из регистра сведения описания и добавляет их в список значений.
//
// Параметры:
//  СтрокаСоСпискомДомов - Строка - описание списка домов из  регистра сведения.
//  СтрокаПоиска		 - Строка - Строка отбора.
//  ВариантыДомов		 - Список значений - Список домов.
//
Функция ИдентификаторДома(СтрокаСоСпискомДомов, СведенияОДоме)
	
	Если СтрДлина(СтрокаСоСпискомДомов) > 25 Тогда
		Идентификатор = УникальныйИдентификаторИзСтроки64(Лев(СтрокаСоСпискомДомов, 25));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	СтрокаСоСпискомДомов = Сред(СтрокаСоСпискомДомов, 25);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	СтрокаСоСпискомДомов = СтрЗаменить(СтрокаСоСпискомДомов, Символы.ПС, "");
	СтрокаСоСпискомДомов = СтрЗаменить(СтрокаСоСпискомДомов, Символы.Таб, Символы.ПС);
	ЧислоСтрок = СтрЧислоСтрок(СтрокаСоСпискомДомов);
	Позиция = 1;
	Интервалы = Новый Массив;
	
	НаименованиеЗданийИСтроений = НаименованиеВладенийИСтроений();
	
	Пока Позиция <= ЧислоСтрок Цикл
		Строка = СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция);
		
		Если Строка = "h" ИЛИ  Строка = "H" Тогда
			
			ОписаниеДома = ОписаниеДома();
			
			ОписаниеДома.ВидВладения = ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 1));
			ОписаниеДома.Дом = СокрЛП(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 2));
			ОписаниеДома.ДомЧислом = НомерДомаЧислом(ОписаниеДома.Дом);
			ОписаниеДома.Корпус = СокрЛП(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 3));
			ОписаниеДома.ВидСтроения = ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 4));
			ОписаниеДома.Строение = СокрЛП(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 5));
			ОписаниеДома.НазваниеВладения = СокрЛП(НаименованиеЗданийИСтроений.Владения.Получить(ОписаниеДома.ВидВладения));
			ОписаниеДома.НазваниеСтроения = СокрЛП(НаименованиеЗданийИСтроений.Строения.Получить(ОписаниеДома.ВидСтроения));
			
			ПозицияУИД = СтрНайти(ОписаниеДома.Строение, "+");
			Если ПозицияУИД > 0 Тогда
				Идентификатор = УникальныйИдентификаторИзСтроки64(Сред(ОписаниеДома.Строение, ПозицияУИД + 2, 25));
				ОписаниеДома.Строение = СокрЛП(Лев(ОписаниеДома.Строение, ПозицияУИД - 1));
			КонецЕсли;
			
			НомерДомаКорректный = Ложь;
			НомерКорпусаКорректный = Ложь;
			НомерСтроенияКорректный = Ложь;
			
			НомерДома = СведенияОДоме.Получить(ВРег(ОписаниеДома.НазваниеВладения));
			Если НомерДома <> Неопределено Тогда
				НомерДомаКорректный = (СтрСравнить(НомерДома, ОписаниеДома.Дом) = 0);
			ИначеЕсли НЕ ЗначениеЗаполнено(ОписаниеДома.Дом) ИЛИ ОписаниеДома.Дом = НСтр("ru = 'НЕТ'") Тогда
				НомерДомаКорректный = Истина;
			КонецЕсли;
			
			НомерКорпуса = СведенияОДоме.Получить("КОРПУС");
			Если НомерКорпуса <> Неопределено Тогда
				НомерКорпусаКорректный  = (СтрСравнить(НомерКорпуса, ОписаниеДома.Корпус) = 0);
			ИначеЕсли НЕ ЗначениеЗаполнено(ОписаниеДома.Корпус) Тогда
				НомерКорпусаКорректный = Истина;
			КонецЕсли;
			
			НомерСтроения = СведенияОДоме.Получить(ВРег(ОписаниеДома.НазваниеСтроения));
			Если НомерСтроения <> Неопределено Тогда
				НомерСтроенияКорректный = (СтрСравнить(НомерСтроения, ОписаниеДома.Строение) = 0);
			ИначеЕсли НЕ ЗначениеЗаполнено(ОписаниеДома.Строение) Тогда
				НомерСтроенияКорректный = Истина;
			КонецЕсли;
			
			Если НомерСтроенияКорректный И НомерДомаКорректный И НомерКорпусаКорректный Тогда
				Возврат Идентификатор;
			КонецЕсли;
			
			Позиция = Позиция + 5;
			
		ИначеЕсли Строка = "i" ИЛИ Строка = "I" Тогда
			
			// Интервалы набираем для последующего добавления.
			Интервал = Новый Структура;
			Интервал.Вставить("Вид",    ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 1)));
			Интервал.Вставить("Начало", ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 2)));
			Интервал.Вставить("Конец",  ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтрокаСоСпискомДомов, Позиция + 3)));
			Интервалы.Добавить(Интервал);
			
			Позиция = Позиция + 3;
		КонецЕсли;
		
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


Функция ИзвлечьСписокДомовСервис1С(ИдентификаторРодитель, СтрокаПоиска, ВариантыДомов)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРодитель) Тогда
		Возврат ВариантыДомов;
	КонецЕсли;
	
	НаименованиеЗданийИСтроений = НаименованиеВладенийИСтроений();
	
	Сервис = АдресныйКлассификаторПовтИсп.СервисКлассификатора1С();
	КодЯзыка = ТекущийКодЛокализации();
	
	Порция = Сервис.Autocomplete(ИдентификаторРодитель, 0, НСтр("ru = 'ДОМ='") + СтрокаПоиска, 2000, КодЯзыка, Метаданные.Имя);
	
	Список = Порция.ПолучитьСписок("Item");
	Для Каждого Строка Из Список Цикл
		
		МассивДомов = СтрРазделить(Строка.Presentation, ",");
		ОписаниеДома = ОписаниеДома();

		Для каждого Дом Из МассивДомов Цикл
			КлючЗначение = СтрРазделить(Дом, "=");
			ТипАдресногоОбъекта = ВРег(КлючЗначение[0]);
			Если ТипАдресногоОбъекта = НСтр("ru = 'ДОМ'")
				ИЛИ ТипАдресногоОбъекта = НСтр("ru = 'ВЛАДЕНИЕ'")
				ИЛИ ТипАдресногоОбъекта = НСтр("ru = 'ДОМОВЛАДЕНИЕ'") Тогда
				ОписаниеДома.Дом = СокрЛП(КлючЗначение[1]);
				ОписаниеДома.ДомЧислом = НомерДомаЧислом(КлючЗначение[1]);
				ОписаниеДома.НазваниеВладения = ТРег(ТипАдресногоОбъекта);
			ИначеЕсли ТипАдресногоОбъекта = "КОРПУС" Тогда
				ОписаниеДома.Корпус = СокрЛП(КлючЗначение[1]);
			ИначеЕсли ТипАдресногоОбъекта <> "ИНДЕКС" Тогда
				ОписаниеДома.Строение = СокрЛП(КлючЗначение[1]);
				ОписаниеДома.НазваниеСтроения = НРег(ТипАдресногоОбъекта);
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьИнформациюОДоме(ВариантыДомов, ОписаниеДома, НаименованиеЗданийИСтроений, СтрокаПоиска); 
	КонецЦикла;
	
	Возврат ВариантыДомов;
КонецФункции

Функция ОписаниеДома()
	ОписаниеДома = Новый Структура("ДомЧислом, Дом, Корпус, Строение, ВидСтроения, ВидВладения, НазваниеВладения, НазваниеСтроения");
	ОписаниеДома.ВидВладения = 0;
	ОписаниеДома.ВидСтроения = 0;
	ОписаниеДома.НазваниеСтроения = "";
	Возврат ОписаниеДома;
КонецФункции

Процедура ДобавитьИнформациюОДоме(ВариантыДомов, ОписаниеДома, НаименованиеЗданийИСтроений, СтрокаПоиска = "")
	
	НомерДомаИСтроения = Новый Структура();
	
	НомерДомаИСтроения.Вставить("Дом", Новый Структура("ВидВладения, НомерВладения", ОписаниеДома.НазваниеВладения, ОписаниеДома.Дом));
	
	Если ЗначениеЗаполнено(ОписаниеДома.Дом) Тогда
		ТекстПроДом = Новый ФорматированнаяСтрока(ОписаниеДома.НазваниеВладения + " ", 
		Новый ФорматированнаяСтрока(СтрокаПоиска, Новый Шрифт(,, Истина) , ЦветаСтиля.РезультатУспехЦвет),
		Сред(ОписаниеДома.Дом, СтрДлина(СтрокаПоиска) + 1));
	Иначе
		ТекстПроДом = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДома.Корпус) Тогда
		ТекстПроСтроения = НСтр("ru = 'корпус'") + " " + ОписаниеДома.Корпус;
		НомерДомаИСтроения.Вставить("Корпус", Новый Структура("ВидКорпуса, НомерКорпуса", "Корпус", ОписаниеДома.Корпус));
	Иначе
		ТекстПроСтроения = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДома.Строение) Тогда
		НазваниеСтроения = ?(ПустаяСтрока(ОписаниеДома.НазваниеСтроения),
			НРег(НаименованиеЗданийИСтроений.Строения.Получить(ОписаниеДома.ВидСтроения)), ОписаниеДома.НазваниеСтроения);
			
		Разделитель = ?(ПустаяСтрока(ТекстПроСтроения), "", ", ");
		ТекстПроСтроения = ТекстПроСтроения + Разделитель + НазваниеСтроения + " " + СокрЛП(ОписаниеДома.Строение);
		НомерДомаИСтроения.Вставить("Строение", Новый Структура("ВидСтроения, НомерСтроения", НазваниеСтроения, ОписаниеДома.Строение));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПроДом) Тогда
		Разделитель = ?(ПустаяСтрока(ТекстПроСтроения), "", ", ");
		ТекстПроДомФормат = Новый ФорматированнаяСтрока(ТекстПроДом, Разделитель + ТекстПроСтроения);
	Иначе
		ТекстПроДомФормат = ТекстПроСтроения;
	КонецЕсли;
	
	ИнформацияОДоме = ВариантыДомов.Добавить();
	ЗаполнитьЗначенияСвойств(ИнформацияОДоме, ОписаниеДома);
	ИнформацияОДоме.Значение = НомерДомаИСтроения;
	ИнформацияОДоме.Представление = ТекстПроДомФормат;
	
КонецПроцедуры

Функция НомерДомаЧислом(ИсходнаяСтрока)
	
	ИтоговаяСтрока = "";
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Для Индекс = 1 По ДлинаСтроки Цикл
		Символ = Сред(ИсходнаяСтрока, Индекс, 1);
		Цифра = КодСимвола(Символ);
		Если Цифра > 47 И Цифра < 58 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + Символ;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ПустаяСтрока(ИтоговаяСтрока), 0, Число(ИтоговаяСтрока));
КонецФункции

// Информация о наименование владений и строений.
// 
Функция НаименованиеВладенийИСтроений()
	
	Результат = Новый Структура("Владения, Строения", Новый Соответствие, Новый Соответствие);
	Результат.Владения.Вставить(0, НСтр("ru = 'Дом'"));
	Результат.Строения.Вставить(0, НСтр("ru = 'Строение'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расшифровка.Ключ КАК Значение,
		|	Расшифровка.Значение КАК ТипАдрЭл,
		|	ВЫБОР
		|		КОГДА НЕ ТипыВладения.Идентификатор ЕСТЬ NULL 
		|			ТОГДА ТипыВладения.Тип
		|		КОГДА НЕ ТипыСтроения.Идентификатор ЕСТЬ NULL 
		|			ТОГДА ТипыСтроения.Тип
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Тип,
		|	ВЫБОР
		|		КОГДА НЕ ТипыВладения.Идентификатор ЕСТЬ NULL 
		|			ТОГДА ТипыВладения.Идентификатор
		|		КОГДА НЕ ТипыСтроения.Идентификатор ЕСТЬ NULL 
		|			ТОГДА ТипыСтроения.Идентификатор
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Идентификатор
		|ИЗ
		|	РегистрСведений.СлужебныеАдресныеСведения КАК Расшифровка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеАдресныеСведения КАК ТипыВладения
		|		ПО (ТипыВладения.Значение = Расшифровка.Ключ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеАдресныеСведения КАК ТипыСтроения
		|		ПО (ТипыСтроения.Значение = Расшифровка.Ключ)
		|ГДЕ
		|	Расшифровка.Тип = ""ДопАдрЭлНомер""
		|	И (ТипыВладения.Тип = ""ESTSTAT""
		|			ИЛИ ТипыСтроения.Тип = ""STRSTAT"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тип";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Если РезультатЗапроса.Тип = "ESTSTAT" Тогда
			Результат.Владения.Вставить(РезультатЗапроса.Идентификатор, РезультатЗапроса.Значение);
		ИначеЕсли РезультатЗапроса.Тип = "STRSTAT" Тогда
			Результат.Строения.Вставить(РезультатЗапроса.Идентификатор, РезультатЗапроса.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Удаляет устаревшие данные КЛАДР.
//
Процедура ОчиститьУстаревшиеАдресныеСведенияКЛАДР(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьАдресныйКлассификатор.Код
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор КАК УдалитьАдресныйКлассификатор";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса .Следующий() Тогда 
		ВесьРегистр = РегистрыСведений.УдалитьАдресныйКлассификатор.СоздатьНаборЗаписей();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВесьРегистр);
	КонецЕсли;
	
КонецПроцедуры

// Загрузка всех данных классификатора адресов с сайта.
//
// Параметры:
//    КодыСубъектовРФ - Массив - Содержит числовые коды регионов-субъектов для загрузки. Если не указано, то будут
//                               загружены  все регионы, по которым когда-либо загружались данные.
//    Авторизация - Структура - описание авторизации на сайте поддержки 1С. Если не указано, то будет прочитано из базы.
//        * Логин  - Строка - Данные авторизации.
//        * Пароль - Строка - Данные авторизации.
//
Процедура ЗагрузитьКлассификаторАдресовССайта(КодыСубъектовРФ = Неопределено, ИсходнаяАвторизация = Неопределено)
	
	Если ИсходнаяАвторизация = Неопределено Тогда
		Авторизация = ПараметрыАутентификацииНаСайте();
	Иначе
		Авторизация = ИсходнаяАвторизация;
	КонецЕсли;
	
	Если КодыСубъектовРФ = Неопределено Тогда
		ВсеРегионы = СведенияОЗагрузкеСубъектовРФ();
		ЗагруженныеРегионы = ВсеРегионы.Скопировать(Новый Структура("Загруженный", Истина));
		КодыСубъектовРФ = ЗагруженныеРегионы.ВыгрузитьКолонку("КодСубъектаРФ");
	КонецЕсли;
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременныйКаталог);
	
	КодыСубъектовДляЗагрузки = Новый Массив;
	ОписаниеФайлов           = Новый Массив;
	
	ПараметрыПолучения = Новый Структура;
	Если Авторизация <> Неопределено Тогда
		ПараметрыПолучения.Вставить("Пользователь", Авторизация.Логин);
		ПараметрыПолучения.Вставить("Пароль",       Авторизация.Пароль);
	КонецЕсли;
	
	ВсеВерсии = ДоступныеВерсииАдресныхСведений();
	Для Каждого КодСубъекта Из КодыСубъектовРФ Цикл
		ОписаниеРегиона = ВсеВерсии.Найти(КодСубъекта, "КодСубъектаРФ");
		Если ОписаниеРегиона = Неопределено Тогда
			// Возможно устаревший регион, не ошибка.
			Продолжить;
		КонецЕсли;
		
		ФайлРегиона = АдресИнтернетаВключаяПорт(ОписаниеРегиона.Адрес);
		ПутьДляСохранения = ВременныйКаталог + ВРег(ФайлРегиона.ИмяФайла);
		
		ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения);
		ЗагруженныйФайл = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ОписаниеРегиона.Адрес, ПараметрыПолучения);
		Если Не ЗагруженныйФайл.Статус Тогда
			УдалитьВременныйФайл(ВременныйКаталог);
			ВызватьИсключение ЗагруженныйФайл.СообщениеОбОшибке + Символы.ПС
				+ НСтр("ru = 'Возможные причины:
					|• Некорректно введен или не введен логин и пароль;
					|• Нет подключения к Интернету;
					|• На веб-узле возникли неполадки;
					|• Брандмауэр или другое промежуточное ПО (антивирусы и т.п.) блокируют попытки программы подключиться к Интернету;
					|• Подключение к Интернету выполняется через прокси-сервер, но его параметры не заданы в программе.'");
		КонецЕсли;
	
		КодыСубъектовДляЗагрузки.Добавить(КодСубъекта);
		ОписаниеФайлов.Добавить( Новый Структура("Имя, Хранение", ПутьДляСохранения, ПутьДляСохранения) );
	КонецЦикла;
	
	ЗагрузитьКлассификаторАдресов(КодыСубъектовДляЗагрузки, ОписаниеФайлов);
	УдалитьВременныйФайл(ВременныйКаталог);
	
КонецПроцедуры

// Очистка данных классификатора адресов.
//
// Параметры:
//    КодыСубъектовРФ - Массив - Содержит числовые коды регионов-субъектов для очистки.
//
Процедура ОчиститьКлассификаторАдресов(КодыСубъектовРФ)
	
	// Все заказанные субъекты
	ВсегоСубъектов = КодыСубъектовРФ.Количество();
	НомерПоПорядку = 0;
	
	Для Каждого СубъектРФ Из КодыСубъектовРФ Цикл
		
		НомерПоПорядку = НомерПоПорядку + 1;
		ДлительныеОперации.СообщитьПрогресс(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Очистка региона ""%1 - %2"" (осталось %3) ...'"),
			СубъектРФ, АдресныйКлассификатор.НаименованиеРегионаПоКоду(СубъектРФ),
			Формат(ВсегоСубъектов - НомерПоПорядку, "ЧН=")));
		
		НачатьТранзакцию();
		Попытка
			
			ОчиститьАдресныеОбъекты(СубъектРФ);
			ОчиститьДомаЗданияСтроения(СубъектРФ);
			ОчиститьИсториюАдресныхОбъектов(СубъектРФ);
			ОчиститьПричиныИзмененияАдреса(СубъектРФ);
			ОчиститьДополнительныеСведения(СубъектРФ);
			ОчиститьАдресныеОриентиры(СубъектРФ);
			ОчиститьУровниСокращенийАдресныхСведений();
			
			СброситьИнформациюОЗагрузкеВерсии(СубъектРФ);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Набор разрешений профилей безопасности для проверки наличия обновления на сайте 1С.
//
// Возвращаемое значение:
//     Массив - необходимые разрешения.
// 
Функция РазрешенияБезопасностиОбновления() Экспорт
	
	Разрешения = Новый Массив;
	
	// Запрос обновления 
	Адрес = ОбщегоНазначенияКлиентСервер.СтруктураURI( АдресФайлаОписанияДоступныхВерсий());
	Разрешения.Добавить( РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		ВРег(Адрес.Схема), Адрес.Хост, Адрес.Порт, НСтр("ru = 'Проверка обновления адресного классификатора.'")));
	
	// Корневой каталог данных - используется только для получения разрешения.
	// Фактический адрес для загрузки считывается из файла обновлений.
	Адрес = ОбщегоНазначенияКлиентСервер.СтруктураURI("http://downloads.v8.1c.ru/tmplts/ITS/KLADR/");
	Разрешения.Добавить( РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		ВРег(Адрес.Схема), Адрес.Хост, Адрес.Порт, НСтр("ru = 'Загрузка данных адресного классификатора.'")));
	
	Возврат Разрешения;
КонецФункции

// Путь к файлу на веб сервере, содержащему информацию по версиям адресных сведений.
//
// Возвращаемое значение:
//     Строка - путь к файлу описания данных.
//
Функция АдресФайлаОписанияДоступныхВерсий()
	
	Возврат "http://downloads.1c.ru/ipp/ITSREPV/V8Update/fias/version.zip";
	
КонецФункции

// Пространство имен для операций XDTO.
//
// Возвращаемое значение:
//     Строка
//
Функция ПространствоИмен()
	
	Возврат "http://www.v8.1c.ru/ssl/AddressSystem";
	
КонецФункции

// Проверяет наличие обновлений адресного классификатора на веб сервере
// для тех объектов, которые ранее уже загружались.
//
// Возвращаемое значение - ТаблицаЗначений - Описание добавленных и измененных субъектов. Содержит Колонки.
//     * КодСубъектаРФ      - Число                   - Код субъекта РФ.
//     * Наименование       - Строка                  - Наименование субъекта РФ.
//     * Сокращение         - Строка                  - Сокращение субъекта РФ.
//     * Индекс             - Число                   - Почтовый индекс.
//     * Идентификатор      - УникальныйИдентификатор - Идентификатор субъекта.
//     * Адрес              - Строка                  - Адрес для скачивания файла данных региона.
//     * ДоступноОбновление - Булево                  - Флаг доступности обновления для данного региона.
//     * Загружено          - Булево                  - Флаг того, что данные хоть раз загружались.
//     * ДатаОбновления     - Дата                    - Дата обновления адресных сведений.
//
Функция ДоступныеВерсииАдресныхСведений(ПараметрыВыгрузки = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипДата   = Новый ОписаниеТипов("Дата");
	Колонки   = Результат.Колонки;
	
	Колонки.Добавить("КодСубъектаРФ",      ТипЧисло);
	Колонки.Добавить("Наименование",       ТипСтрока);
	Колонки.Добавить("Сокращение",         ТипСтрока);
	Колонки.Добавить("Индекс",             ТипЧисло);
	Колонки.Добавить("Идентификатор",      Новый ОписаниеТипов("УникальныйИдентификатор") );
	Колонки.Добавить("Адрес",              ТипСтрока);
	Колонки.Добавить("ДоступноОбновление", ТипБулево);
	Колонки.Добавить("Загружено",          ТипБулево);
	Колонки.Добавить("ДатаОбновления",      ТипДата);
	
	Результат.Индексы.Добавить("КодСубъектаРФ");
	
	АдресОписания = АдресИнтернетаВключаяПорт( АдресФайлаОписанияДоступныхВерсий() );
	РезультатПолученияФайла = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресОписания.Адрес);
	Если Не РезультатПолученияФайла.Статус Тогда
		Возврат Результат;
	КонецЕсли;
	РезультатПолученияФайла = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресОписания.Адрес);
	
	// Получен zip, внутри которого xml.
	КаталогДляРаспаковки = ПолучитьИмяВременногоФайла();
	Архив = Новый ЧтениеZipФайла(РезультатПолученияФайла.Путь);
	Архив.ИзвлечьВсе(КаталогДляРаспаковки);
	ФайлОписания = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляРаспаковки) + "version.xml";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОписания);
	ДоступныеДанные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип( ПространствоИмен(), "Publications") );
	
	ЧтениеXML.Закрыть();
	УдалитьВременныйФайл(КаталогДляРаспаковки);
	УдалитьВременныйФайл(РезультатПолученияФайла.Путь);
	
	ДатаПоследнейВерсии = '00000000';
	ПоследняяПубликация = Неопределено;
	ДатаБДФИАС = Неопределено;
	
	Для Каждого Публикация Из ДоступныеДанные.ПолучитьСписок("Publication") Цикл
		Если Публикация.UpdateDate > ДатаПоследнейВерсии Тогда
			ДатаПоследнейВерсии = Публикация.UpdateDate - 86400;
			ПоследняяПубликация = Публикация;
		КонецЕсли;
	КонецЦикла;

	Если ПоследняяПубликация = Неопределено Тогда
		// Нет данных совсем
		Возврат Результат;
	КонецЕсли;
	
	// Сравниваем то что в регистре, и то что прочитали.
	ТекущиеСубъекты = СведенияОЗагрузкеСубъектовРФ();
	
	Для Каждого ЗаписьРегиона Из ПоследняяПубликация.ПолучитьСписок("Region") Цикл
		Идентификатор = УникальныйИдентификаторИзДвоичныхДанных(ЗаписьРегиона.AOGUID);
		ТекущийСубъект = ТекущиеСубъекты.Найти(Идентификатор, "Идентификатор");
		
		Если ТекущийСубъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегиона = Результат.Добавить();
		СтрокаРегиона.КодСубъектаРФ = ЗаписьРегиона.REGIONCODE;
		СтрокаРегиона.Наименование  = ЗаписьРегиона.FORMALNAME;
		СтрокаРегиона.Сокращение    = ЗаписьРегиона.SHORTNAME;
		СтрокаРегиона.Индекс        = ЗаписьРегиона.POSTALCODE;
		СтрокаРегиона.Идентификатор = Идентификатор;
		СтрокаРегиона.Адрес         = ЗаписьРегиона.Url;
		СтрокаРегиона.Загружено     = ТекущийСубъект <> Неопределено И ТекущийСубъект.Загружено;
		СтрокаРегиона.ДатаОбновления = ДатаПоследнейВерсии;
		
		Если ЗначениеЗаполнено(ТекущийСубъект.ДатаВерсии) Тогда
			СтрокаРегиона.ДоступноОбновление = ТекущийСубъект = Неопределено   // Новый регион
				Или ТекущийСубъект.ДатаВерсии < ДатаПоследнейВерсии            // Обновленный регион
				Или (ТекущийСубъект.КодСубъектаРФ <> ЗаписьРегиона.REGIONCODE);// Обновленные данные существующего субъекта.
		КонецЕсли;
	КонецЦикла;
	
	Если АдресВоВременномХранилище <> Неопределено Тогда
		Ответ = Новый Структура("Отказ, Таблица");
		Ответ.Отказ = Ложь;
		Ответ.Таблица = Результат;
		ПоместитьВоВременноеХранилище(Ответ, АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает настройку текущего источника данных адресов.
//
// Возвращаемое значение:
//     Строка - описание источника. Пустая строка - используются загружаемые в регистр данные.
//
Функция ИсточникДанныхАдресногоКлассификатора() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИсточникДанныхАдресногоКлассификатора");
	
КонецФункции

Процедура РассчитатьУровниСокращенийАдресныхСведений()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Уровень    КАК Уровень,
		|	Сокращение КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	Уровень, Сокращение
		|ИЗ
		|	РегистрСведений.ИсторияАдресныхОбъектов");
	Варианты = Запрос.Выполнить().Выгрузить();
	
	Сокращения = РегистрыСведений.УровниСокращенийАдресныхСведений.СоздатьНаборЗаписей();
	Сокращения.Загрузить(Варианты);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сокращения);
	
КонецПроцедуры

// Вычитываем справочную информацию и информацию о версии.
//
Функция СлужебныеАдресныеСведения(КодСубъектаРФ, КаталогФайлов)
	
	Набор = РегистрыСведений.СлужебныеАдресныеСведения.СоздатьНаборЗаписей();
	Сведения = Набор.ВыгрузитьКолонки("Тип, Идентификатор, Ключ, Значение");
	Сведения.Индексы.Добавить("Тип, Идентификатор, Ключ");
	
	ТекущаяЗапись = Неопределено;
	ФайлЗагрузки  = ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, "ADDRSTATUS", "AddressStatuses");
	
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) Цикл
		Запись = Сведения.Добавить();
		
		Запись.Тип           = ТекущаяЗапись.TYPE;
		Запись.Идентификатор = ТекущаяЗапись.ID;
		Запись.Ключ          = ТекущаяЗапись.KEY;
		Запись.Значение      = ТекущаяЗапись.VALUE;
	КонецЦикла;
	
	Результат = Новый Структура("Сведения", Сведения);
	Результат.Вставить("Версия",     ФайлЗагрузки.Версия);
	Результат.Вставить("ДатаВерсии", ФайлЗагрузки.ДатаВерсии);
	
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
	Возврат Результат;
КонецФункции

// Возвращает признак того, является ли строка данных контактной информации XML данными.
//
// Параметры:
//     Текст - Строка - Проверяемая строка.
//
// Возвращаемое значение:
//     Булево - результат проверки.
//
Функция ЭтоКонтактнаяИнформацияВXML(Знач Текст) 
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Текст), "<");
	
КонецФункции

// Вычитываем информацию о адресных сокращениях.
//
Функция АдресныеСокращения(КаталогФайлов)
	
	Набор = РегистрыСведений.УровниСокращенийАдресныхСведений.СоздатьНаборЗаписей();
	Сведения = Набор.ВыгрузитьКолонки("Сокращение, Уровень, Значение");
	Сведения.Индексы.Добавить("Сокращение, Уровень");
	
	ТекущаяЗапись = Неопределено;
	ФайлЗагрузки  = ФайлЗагрузкиСубъектаРФ(Неопределено, КаталогФайлов, "SOCRBASE", "AddressStatuses");
	
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) Цикл
		Если ВРег(ТекущаяЗапись.TYPE) = "SOCRBASE" И ЗначениеЗаполнено(ТекущаяЗапись.KEY) Тогда
			Запись = Сведения.Добавить();
			Запись.Уровень = ТекущаяЗапись.ID;
			Запись.Сокращение      = ТекущаяЗапись.KEY;
			Запись.Значение      = ТекущаяЗапись.VALUE;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура("Сведения", Сведения);
	Результат.Вставить("Версия",     ФайлЗагрузки.Версия);
	Результат.Вставить("ДатаВерсии", ФайлЗагрузки.ДатаВерсии);
	
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
	Возврат Результат;
КонецФункции

Процедура ВставитьЧастьАдреса(Имя, Значение, ПоляАдреса)
	Значение.Наименование = СтрЗаменить(Значение.Наименование, """", """""");
	Значение.Сокращение = СтрЗаменить(Значение.Сокращение, """", """""");
	ПоляАдреса.Вставить(Имя, Значение);
КонецПроцедуры

Процедура ЗагрузитьАдресныеОбъекты(КодСубъектаРФ, КаталогФайлов, ВидыСведений)
	
	Набор = РегистрыСведений.АдресныеОбъекты.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	
	ФайлЗагрузки = ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, "ADDROBJ", "AddressObjects");
	
	ТекущаяЗапись = Неопределено;
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись)Цикл
		Запись = Набор.Добавить();
		
		Запись.КодСубъектаРФ              = ТекущаяЗапись.REGIONCODE;
		Запись.КодОкруга                  = ТекущаяЗапись.AUTOCODE;
		Запись.КодРайона                  = ТекущаяЗапись.AREACODE;
		Запись.КодГорода                  = ТекущаяЗапись.CITYCODE;
		Запись.КодВнутригородскогоРайона  = ТекущаяЗапись.CTARCODE;
		Запись.КодНаселенногоПункта       = ТекущаяЗапись.PLACECODE;
		Запись.КодУлицы                   = ТекущаяЗапись.STREETCODE;
		Запись.КодДополнительногоЭлемента = ТекущаяЗапись.EXTRCODE;
		Запись.КодПодчиненногоЭлемента    = ТекущаяЗапись.SEXTCODE;
		Запись.Уровень                    = ТекущаяЗапись.AOLEVEL;
		Запись.Идентификатор              = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.AOGUID);
		Запись.ПочтовыйИндекс             = ТекущаяЗапись.POSTALCODE;
		Запись.Наименование               = ТекущаяЗапись.FORMALNAME;
		Запись.Сокращение                 = ТекущаяЗапись.SHORTNAME;
		Запись.Дополнительно              = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.EXTRAGUID);
		Запись.КодКЛАДР                   = ТекущаяЗапись.CODE;
		Запись.Актуален                   = ?(ТекущаяЗапись.CURRSTATUS = 0, Истина, Ложь);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
КонецПроцедуры

Процедура ЗагрузитьДомаЗданияСтроения(КодСубъектаРФ, КаталогФайлов, ВидыСведений)
	
	Сжатие = Новый СжатиеДанных(9);
	ТипXMLСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
	
	Набор = РегистрыСведений.ДомаЗданияСтроения.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ФайлЗагрузки = ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, "HOUSE", "Houses");
	
	КлючевыеКолонки = "КодСубъектаРФ, АдресныйОбъект, ПочтовыйИндекс";
	Таблица = Набор.ВыгрузитьКолонки(КлючевыеКолонки);
	Таблица.Индексы.Добавить(КлючевыеКолонки);
	Фильтр = Новый Структура(КлючевыеКолонки);

	ТекущаяЗапись = Неопределено;
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) Цикл
		
		Фильтр.КодСубъектаРФ  = КодСубъектаРФ;
		Фильтр.АдресныйОбъект = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.AOGUID);
		Фильтр.ПочтовыйИндекс = ТекущаяЗапись.POSTALCODE;
		Если Таблица.НайтиСтроки(Фильтр).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Набор.Добавить();
		
		Запись.КодСубъектаРФ  = КодСубъектаРФ;
		Запись.АдресныйОбъект = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.AOGUID);
		Запись.ПочтовыйИндекс = ТекущаяЗапись.POSTALCODE;
		
		ОписаниеЗданийXDTO =  ТекущаяЗапись.ПолучитьXDTO("BUILDINGS");
		Запись.Строения = Новый ХранилищеЗначения(ОписаниеЗданийXDTO.ЛексическоеЗначение, Сжатие);
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Запись);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
КонецПроцедуры

Процедура ЗагрузитьДополнительныеСведения(КодСубъектаРФ, КаталогФайлов, ВидыСведений)
	
	Набор = РегистрыСведений.ДополнительныеАдресныеСведения.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ФайлЗагрузки = ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, "EXTRAINFO", "AdditionalAddressInfo");
	
	ТекущаяЗапись = Неопределено;
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) Цикл
		Запись = Набор.Добавить();
		
		Запись.КодСубъектаРФ    = КодСубъектаРФ;
		Запись.Идентификатор    = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.EXTRAGUID);
		Запись.OKATO            = ТекущаяЗапись.OKATO;
		Запись.ОКТМО            = ТекущаяЗапись.OKTMO;
		Запись.КодИФНСФЛ        = ТекущаяЗапись.IFNSFL;
		Запись.КодИФНСЮЛ        = ТекущаяЗапись.IFNSUL;
		Запись.КодУчасткаИФНСФЛ = ТекущаяЗапись.TERRIFNSFL;
		Запись.КодУчасткаИФНСЮЛ = ТекущаяЗапись.TERRIFNSUL;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
КонецПроцедуры

Процедура ЗагрузитьИсториюАдресныхОбъектов(КодСубъектаРФ, КаталогФайлов, ВидыСведений)
	
	Набор = РегистрыСведений.ИсторияАдресныхОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ФайлЗагрузки = ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, "ARCHOBJ", "ArchiveObjects");
	
	ТекущаяЗапись = Неопределено;
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) Цикл
		
		Запись = Набор.Добавить();
		Запись.Уровень                    = ТекущаяЗапись.AOLEVEL;
		Запись.КодСубъектаРФ              = ТекущаяЗапись.REGIONCODE;
		Запись.КодОкруга                  = ТекущаяЗапись.AUTOCODE;
		Запись.КодРайона                  = ТекущаяЗапись.AREACODE;
		Запись.КодГорода                  = ТекущаяЗапись.CITYCODE;
		Запись.КодВнутригородскогоРайона  = ТекущаяЗапись.CTARCODE;
		Запись.КодНаселенногоПункта       = ТекущаяЗапись.PLACECODE;
		Запись.КодУлицы                   = ТекущаяЗапись.STREETCODE;
		Запись.КодДополнительногоЭлемента = ТекущаяЗапись.EXTRCODE;
		Запись.КодПодчиненногоЭлемента    = ТекущаяЗапись.SEXTCODE;
		Запись.Идентификатор              = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.AOID);
		Запись.ТекущийКодСубъектаРФ       = КодСубъектаРФ;
		
		Запись.ПочтовыйИндекс             = ТекущаяЗапись.POSTALCODE;
		Запись.Наименование               = ТекущаяЗапись.FORMALNAME;
		Запись.Сокращение                 = ТекущаяЗапись.SHORTNAME;
		Запись.Дополнительно              = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.EXTRAGUID);
		Запись.КодКЛАДР                   = ТекущаяЗапись.CODE;
		Запись.АдресныйОбъект             = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.AOGUID);
		Запись.НачалоДействияЗаписи       = ТекущаяЗапись.STARTDATE;
		Запись.ОкончаниеДействияЗаписи    = ТекущаяЗапись.ENDDATE;
		Запись.Операция                   = ТекущаяЗапись.OPERSTATUS
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
КонецПроцедуры

Процедура ЗагрузитьПричиныИзмененияАдреса(КодСубъектаРФ, КаталогФайлов, ВидыСведений)
	
	Сжатие = Новый СжатиеДанных(9);
	
	Набор = РегистрыСведений.ПричиныИзмененияАдресныхСведений.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ФайлЗагрузки = ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, "ARCHDOCS", "RegulatoryDocs");
	
	ТекущаяЗапись = Неопределено; 
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) Цикл
		Запись = Набор.Добавить();
		
		Запись.КодСубъектаРФ    = КодСубъектаРФ;
		Запись.Идентификатор    = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.DOCID);
		Запись.ИзмененныйОбъект = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.OBJID);
		Запись.СодержитОписание = ТекущаяЗапись.ISDESCR;
		Запись.Описание         = Новый ХранилищеЗначения(ТекущаяЗапись.DESCR, Сжатие);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
КонецПроцедуры

Процедура ЗагрузитьАдресныеОриентиры(КодСубъектаРФ, КаталогФайлов, ВидыСведений)
	
	Сжатие = Новый СжатиеДанных(9);
	
	Набор = РегистрыСведений.ОриентирыАдресныхОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ФайлЗагрузки = ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, "LANDMARKS", "Landmarks");
	
	ТекущаяЗапись = Неопределено;
	Пока СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) Цикл
		Запись = Набор.Добавить();
		
		Запись.КодСубъектаРФ  = КодСубъектаРФ;
		Запись.Идентификатор  = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.LANDGUID);
		Запись.АдресныйОбъект = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.AOGUID);
		Запись.ПочтовыйИндекс = ТекущаяЗапись.POSTALCODE;
		Запись.Дополнительно  = УникальныйИдентификаторИзДвоичныхДанных(ТекущаяЗапись.EXTRAGUID);
		Запись.Описание       = Новый ХранилищеЗначения(ТекущаяЗапись.LOCATION, Сжатие);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	ЗакрытьФайлЗагрузкиСубъектаРФ(ФайлЗагрузки);
	
КонецПроцедуры

Процедура УстановитьИнформациюОЗагрузкеВерсии(КодСубъектаРФ, Версия, ДатаВерсии, ДатаЗагрузки)
	
	Набор = РегистрыСведений.ЗагруженныеВерсииАдресныхСведений.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	
	ОсновнаяЗапись = Набор.Добавить();
	ОсновнаяЗапись.КодСубъектаРФ = КодСубъектаРФ;
	ОсновнаяЗапись.Версия        = Версия;
	ОсновнаяЗапись.ДатаВерсии    = ДатаВерсии;
	ОсновнаяЗапись.ДатаЗагрузки  = ДатаЗагрузки;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Функция ИнформацияОЗагрузкеВерсии(КодСубъектаРФ)
	
	ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
	ИнформацияОЗагрузке = Новый Структура("Версия, ДатаВерсии, ДатаЗагрузки", 0, ПустаяДата, ПустаяДата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗагруженныеВерсииАдресныхСведений.Версия,
		|	ЗагруженныеВерсииАдресныхСведений.ДатаВерсии,
		|	ЗагруженныеВерсииАдресныхСведений.ДатаЗагрузки
		|ИЗ
		|	РегистрСведений.ЗагруженныеВерсииАдресныхСведений КАК ЗагруженныеВерсииАдресныхСведений
		|ГДЕ
		|	ЗагруженныеВерсииАдресныхСведений.КодСубъектаРФ = &КодСубъектаРФ";
	
	Запрос.УстановитьПараметр("КодСубъектаРФ", КодСубъектаРФ);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		ИнформацияОЗагрузке.Версия = ОписаниеТипаЧисло.ПривестиЗначение(Результат[0].Версия);
		ИнформацияОЗагрузке.ДатаВерсии = Результат[0].ДатаВерсии;
		ИнформацияОЗагрузке.ДатаЗагрузки = Результат[0].ДатаЗагрузки;
	КонецЕсли;
	Возврат ИнформацияОЗагрузке;

КонецФункции

Процедура СброситьИнформациюОЗагрузкеВерсии(КодСубъектаРФ)
	
	Набор = РегистрыСведений.ЗагруженныеВерсииАдресныхСведений.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Процедура ОчиститьАдресныеОбъекты(КодСубъектаРФ)
	// Очищаем, не трогая запись региона.
	
	Набор = РегистрыСведений.АдресныеОбъекты.СоздатьНаборЗаписей();
	Отбор = Набор.Отбор;
	
	Отбор.Уровень.Установить(1);
	Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	Отбор.КодОкруга.Установить(0);
	Отбор.КодРайона.Установить(0);
	Отбор.КодГорода.Установить(0);
	Отбор.КодВнутригородскогоРайона.Установить(0);
	Отбор.КодНаселенногоПункта.Установить(0);
	Отбор.КодУлицы.Установить(0);
	Отбор.КодДополнительногоЭлемента.Установить(0);
	Отбор.КодПодчиненногоЭлемента.Установить(0);
	Набор.Прочитать();
	
	Отбор.Сбросить();
	Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Процедура ОчиститьДомаЗданияСтроения(КодСубъектаРФ)
	
	Набор = РегистрыСведений.ДомаЗданияСтроения.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Процедура ОчиститьДополнительныеСведения(КодСубъектаРФ)
	
	Набор = РегистрыСведений.ДополнительныеАдресныеСведения.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);

КонецПроцедуры

Процедура ОчиститьИсториюАдресныхОбъектов(КодСубъектаРФ)
	
	Набор = РегистрыСведений.ИсторияАдресныхОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Процедура ОчиститьПричиныИзмененияАдреса(КодСубъектаРФ)
	
	Набор = РегистрыСведений.ПричиныИзмененияАдресныхСведений.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Процедура ОчиститьАдресныеОриентиры(КодСубъектаРФ)
	
	Набор = РегистрыСведений.ОриентирыАдресныхОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.КодСубъектаРФ.Установить(КодСубъектаРФ);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

Процедура ОчиститьУровниСокращенийАдресныхСведений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныеОбъекты.Уровень
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|ГДЕ
		|	АдресныеОбъекты.Уровень > 1";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Т.к. адресный классификатор не содержит сведений, то очищаем таблицу адресных сведений.
	УровниСокращенийАдресныхСведений = РегистрыСведений.УровниСокращенийАдресныхСведений.СоздатьНаборЗаписей();
	УровниСокращенийАдресныхСведений.Записать();
	
КонецПроцедуры

Процедура ОчиститьСведенияУстаревшегоКлассификатора(КодСубъектаРФ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипАдресногоЭлемента,
		|	КодАдресногоОбъектаВКоде,
		|	КодРайонаВКоде,
		|	КодГородаВКоде,
		|	КодНаселенногоПунктаВКоде,
		|	КодУлицыВКоде,
		|	Код,
		|	Наименование,
		|	Сокращение,
		|	Индекс,
		|	АльтернативныеНазвания,
		|	ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.УдалитьАдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодАдресногоОбъектаВКоде = &КодСубъектаРФ");
	Запрос.УстановитьПараметр("КодСубъектаРФ", КодСубъектаРФ);
	Регион = Запрос.Выполнить().Выгрузить();
	
	Набор = РегистрыСведений.УдалитьАдресныйКлассификатор.СоздатьНаборЗаписей();
	Набор.Отбор.КодАдресногоОбъектаВКоде.Установить(КодСубъектаРФ);
	
	Если Регион.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Регион[0]);
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

// Инициализирует структуру описания файла данных адресных сведений.
//
Функция ФайлЗагрузкиСубъектаРФ(КодСубъектаРФ, КаталогФайлов, КлючВида, ИмяОписывающегоУзла)
	
	Если КодСубъектаРФ = Неопределено Тогда
		ИмяИсходногоФайла = КлючВида;
	Иначе
		ИмяИсходногоФайла = Формат(КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН=") + "_" + КлючВида;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	// Как архив
	Файл = НайтиФайл(КаталогФайлов, ИмяИсходногоФайла + ".ZIP");
	Если Файл.Существует Тогда
		ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути( ПолучитьИмяВременногоФайла() );
		
		ЧтениеZipФайла = Новый ЧтениеZipФайла(Файл.ПолноеИмя);
		Элемент = ЧтениеZipФайла.Элементы[0];
		ЧтениеZipФайла.Извлечь(Элемент, ВременныйКаталог);
		
		Результат.Вставить("Путь",      ВременныйКаталог);
		Результат.Вставить("ПолноеИмя", ВременныйКаталог + Элемент.ПолноеИмя);
		Результат.Вставить("УдалитьПутьПриЗакрытии", Истина);
	Иначе
		// Как обычный файл
		Результат.Вставить("Путь",      КаталогФайлов);
		Результат.Вставить("УдалитьПутьПриЗакрытии", Ложь);
		Результат.Вставить("ПолноеИмя", КаталогФайлов + ИмяИсходногоФайла + ".FI");
	КонецЕсли;
	
	// Тип заголовка
	СвойствоЗаголовка = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен()).КорневыеСвойства.Получить(ИмяОписывающегоУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	// Тип записи
	Заголовок = ФабрикаXDTO.Создать(ТипXDTOЗаголовка);
	ТипXDTOЗаписи = Неопределено;
	Для Каждого Свойство Из ТипXDTOЗаголовка.Свойства Цикл
		Если Заголовок.ПолучитьСписок(Свойство.ЛокальноеИмя) <> Неопределено Тогда
			ТипXDTOЗаписи = Свойство.Тип;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипXDTOЗаписи = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В файле ""%1"" не найден список записей в типе  %2'"), Результат.ПолноеИмя, Результат.ТипXDTO);
	КонецЕсли;
	
	Результат.Вставить("ТипXDTO",       ТипXDTOЗаголовка);
	Результат.Вставить("ТипXDTOЗаписи", ТипXDTOЗаписи);
	
	Результат.Вставить("Версия");
	Результат.Вставить("ДатаВерсии");
	Результат.Вставить("ФайлЧтения", Новый ЧтениеFastInfoset);
	
	ФайлЧтения = Результат.ФайлЧтения;
	ФайлЧтения.ОткрытьФайл(Результат.ПолноеИмя);
	
	// Встаем на первый узел с данными.
	КореньНайден = ФайлЧтения.ПерейтиКСодержимому() <> ТипУзлаXML.Ничего;
	Пока КореньНайден Цикл
		Если ФайлЧтения.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлЧтения.ЛокальноеИмя = ИмяОписывающегоУзла Тогда
			// Корявое чтение с типизацией.
			Результат.Версия     = ТипизированныйАтрибутXDTO(ФайлЧтения, ТипXDTOЗаголовка, "Version");
			Результат.ДатаВерсии = ТипизированныйАтрибутXDTO(ФайлЧтения, ТипXDTOЗаголовка, "UpdateDate");
			Прервать;
		КонецЕсли;
		КореньНайден = ФайлЧтения.Прочитать();
	КонецЦикла;
	
	Если КореньНайден Тогда
		// Позиционируемся на следующий узел.
		ФайлЧтения.Прочитать();
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В файле ""%1"" не найден корневой узел %2'"), Результат.ПолноеИмя, ИмяОписывающегоУзла);
	КонецЕсли;
	
	Результат.Вставить("КодСубъектаРФ", КодСубъектаРФ);
	Результат.Вставить("КлючВида",      КлючВида);
	
	Возврат Результат;
КонецФункции

// Поиск первого файла по маске без учета регистра (особенностей операционной системы).
//
// Параметры:
//     Каталог         - Строка - каталог, в котором ищется файл.
//     МаскаИмениФайла - Строка - имя искомого файла.
//
// Возвращаемое значение:
//     Структура - описание найденного файла. Содержит поля:
//         * Существует       - Булево - флаг того, что указанный файл существует.
//         * Имя              - Строка - характеристика найденного файла, см. описания типа Файл.
//         * ИмяБезРасширения - Строка - характеристика найденного файла, см. описания типа Файл.
//         * ПолноеИмя        - Строка - характеристика найденного файла, см. описания типа Файл.
//         * Путь             - Строка - характеристика найденного файла, см. описания типа Файл.
//         * Расширение       - Строка - характеристика найденного файла, см. описания типа Файл.
//
Функция НайтиФайл(Каталог, МаскаИмениФайла)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	НеУчитыватьРегистр = Платформа = ТипПлатформы.Windows_x86 Или Платформа = ТипПлатформы.Windows_x86_64;
	
	Если НеУчитыватьРегистр Тогда
		Маска = ВРег(МаскаИмениФайла);
	Иначе
		Маска = "";
		Для Позиция = 1 По СтрДлина(МаскаИмениФайла) Цикл
			Символ = Сред(МаскаИмениФайла, Позиция, 1);
			ВерхнийРегистр = ВРег(Символ);
			НижнийРегистр  = НРег(Символ);
			Если ВерхнийРегистр = НижнийРегистр Тогда
				Маска = Маска + Символ;
			Иначе
				Маска = Маска + "[" + ВерхнийРегистр + НижнийРегистр + "]";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("Существует, Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение", Ложь); 
	Варианты = НайтиФайлы(Каталог, Маска);
	Если Варианты.Количество() > 0 Тогда 
		Результат.Существует = Истина;
		ЗаполнитьЗначенияСвойств(Результат, Варианты[0]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТипизированныйАтрибутXDTO(ФайлЧтения, ТипЗаписи, ИмяАтрибута)
	
	ТипАтрибута  = ТипЗаписи.Свойства.Получить(ИмяАтрибута).Тип;
	ЗначениеXDTO = ФабрикаXDTO.Создать(ТипАтрибута, ФайлЧтения.ПолучитьАтрибут(ИмяАтрибута));
	
	Возврат ЗначениеXDTO.Значение;
КонецФункции

// Завершает работу с набором данных.
//
Процедура ЗакрытьФайлЗагрузкиСубъектаРФ(ОписаниеФайла)
	
	ОписаниеФайла.ФайлЧтения.Закрыть();
	ОписаниеФайла.ФайлЧтения = Неопределено;
	
	Если ОписаниеФайла.УдалитьПутьПриЗакрытии Тогда
		УдалитьВременныйФайл(ОписаниеФайла.Путь);
	КонецЕсли;
	
КонецПроцедуры

// Читает следующую запись 
//
Функция СледующаяЗаписьФайлаЗагрузкиСубъектаРФ(ФайлЗагрузки, ТекущаяЗапись) 
	Чтение = ФайлЗагрузки.ФайлЧтения;
	
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ТекущаяЗапись = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяЗапись = ФабрикаXDTO.ПрочитатьXML(Чтение, ФайлЗагрузки.ТипXDTOЗаписи);
	Возврат Истина;
КонецФункции

// Противоположность ОбщегоНазначенияКлиентСервер.СтруктураURI
//
Функция URIПоСтруктуре(СтруктураURI)
	Результат = "";
	
	// Протокол
	Если Не ПустаяСтрока(СтруктураURI.Схема) Тогда
		Результат = Результат + СтруктураURI.Схема + "://";
	КонецЕсли;
	
	// Авторизация
	Если Не ПустаяСтрока(СтруктураURI.Логин) Тогда
		Результат = Результат + СтруктураURI.Логин + ":" + СтруктураURI.Пароль + "@";
	КонецЕсли;
		
	// Все остальное
	Результат = Результат + СтруктураURI.Хост;
	Если Не ПустаяСтрока(СтруктураURI.Порт) Тогда
		Результат = Результат + ":" + ?(ТипЗнч(СтруктураURI.Порт) = Тип("Число"), Формат(СтруктураURI.Порт, ""), СтруктураURI.Порт);
	КонецЕсли;
	
	Результат = Результат + "/" + СтруктураURI.ПутьНаСервере;
	Возврат Результат;
	
КонецФункции

// Подстановка порта в адрес загрузки для профилей безопасности.
//
Функция АдресИнтернетаВключаяПорт(Адрес)
	
	Результат = Новый Структура;
	
	СоставАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	Если ПустаяСтрока(СоставАдреса.Порт) Тогда
		Протокол = ВРег(СоставАдреса.Схема);
		Если Протокол = "HTTP" Тогда
			СоставАдреса.Порт = 80;
		ИначеЕсли Протокол = "HTTPS" Тогда
			СоставАдреса.Порт = 443;
		КонецЕсли;
		
		Результат.Вставить("Адрес", URIПоСтруктуре(СоставАдреса) );
	Иначе
		Результат.Вставить("Адрес", Адрес);
	КонецЕсли;
	
	ИмяФайла = СоставАдреса.ПутьНаСервере;
	ПозицияПараметра = СтрНайти(ИмяФайла, "?");
	Если ПозицияПараметра > 0 Тогда
		ИмяФайла = Лев(ИмяФайла, ПозицияПараметра - 1);
	КонецЕсли;
	ИмяФайла = СтрЗаменить(ИмяФайла, Символы.ПС, "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/", Символы.ПС);
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", Символы.ПС);
	
	Результат.Вставить("ИмяФайла", СокрЛП(СтрПолучитьСтроку(ИмяФайла, СтрЧислоСтрок(ИмяФайла))));
	Возврат Результат;
КонецФункции

//  Имя событие для записи в журнал регистрации.
//
Функция СобытиеЖурналаРегистрации() 
	
	Возврат АдресныйКлассификаторКлиентСервер.СобытиеЖурналаРегистрации();
	
КонецФункции

#КонецОбласти

#КонецОбласти
