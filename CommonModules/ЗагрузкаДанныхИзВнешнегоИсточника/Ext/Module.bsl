
#Область СлужебныеПроцедурыИФункции

Функция МаксимальноеКоличествоПустыхСтрок() Экспорт 
	
	Возврат 1000;
	
КонецФункции

Процедура ДобавитьОшибку(Ошибки, ТекстОшибки, ЭтоКритичнаяОшибка = Ложь, МестоВозникновения = "") Экспорт
	
	ОписаниеОшибки = Ошибки.Добавить();
	
	ОписаниеОшибки.ОписаниеОшибки		= ТекстОшибки;
	ОписаниеОшибки.Критичная 			= ЭтоКритичнаяОшибка;
	ОписаниеОшибки.МестоВозникновения	= МестоВозникновения;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПолейЗагрузки(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	Перем Менеджер;
	
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПереопределитьЗаполнениеПолейЗагрузкиДанных(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);
	
	Если ТаблицаПолейЗагрузки.Количество() = 0 Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
		Менеджер.ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(ОбъектЗаполнения, НастройкиЗагрузкиДанных, ЭтотОбъект, ИспользоватьФормуБСП = Истина) Экспорт
	
	НастройкиЗагрузкиДанных = Новый Структура;
	
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	НастройкиЗагрузкиДанных.Вставить("ИспользоватьСовместно", ЗагрузкаДанныхИзВнешнегоИсточника.ИспользоватьСовместноСПоставляемойЧастьюБСП() И ИспользоватьФормуБСП И НЕ РежимРаботы.ЭтоВебКлиент);
	
	Если РежимРаботы.ЭтоВебКлиент 
		ИЛИ НЕ НастройкиЗагрузкиДанных.ИспользоватьСовместно Тогда
		
		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла;
		
	Иначе
	
		СпособЗагрузкиДанныхИзВнешнихИсточников = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("СпособЗагрузкиДанныхИзВнешнихИсточников");
		Если НЕ ЗначениеЗаполнено(СпособЗагрузкиДанныхИзВнешнихИсточников) Тогда
			
			СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла;
			УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(СпособЗагрузкиДанныхИзВнешнихИсточников, "СпособЗагрузкиДанныхИзВнешнихИсточников");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование Тогда
		
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзФайла.Форма.ЗагрузкаДанныхИзФайла";
		
	ИначеЕсли СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла Тогда
		
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ПомощникЗагрузкиДанныхИзВнешнегоИсточника";
		
	КонецЕсли;
	
	ПолноеИмяОбъектаЗаполнения = ОбъектЗаполнения.ПолноеИмя();
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПриОпределенииФормыЗагрузкиДанных(ИмяФормыЗагрузкиДанныхИзВнешнихИсточников, ПолноеИмяОбъектаЗаполнения, ОбъектЗаполнения);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения", 					ПолноеИмяОбъектаЗаполнения);
	НастройкиЗагрузкиДанных.Вставить("ИмяФормыЗагрузкиДанныхИзВнешнихИсточников",	ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
	
	ЭтоЗагрузкаТабличнойЧасти = (СтрНайти(ПолноеИмяОбъектаЗаполнения, "ТабличнаяЧасть") > 0);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаТабличнойЧасти", ЭтоЗагрузкаТабличнойЧасти);
	
	ЭтоЗагрузкаСправочника = (СтрНайти(ПолноеИмяОбъектаЗаполнения, "Справочник") > 0);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаСправочника", ЭтоЗагрузкаСправочника);
	
	ЭтоЗагрузкаРегистраСведений = (СтрНайти(ПолноеИмяОбъектаЗаполнения, "РегистрСведений") > 0);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаРегистраСведений", ЭтоЗагрузкаРегистраСведений);
	
КонецПроцедуры

Процедура ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(ИмяФормыЗагрузкиДанныхИзВнешнихИсточников) Экспорт
	
	// Изменение способа загрузки НЕ доступно в ВЕБ клиенте.
	
	СпособЗагрузкиДанныхИзВнешнихИсточников = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("СпособЗагрузкиДанныхИзВнешнихИсточников");
	Если НЕ ЗначениеЗаполнено(СпособЗагрузкиДанныхИзВнешнихИсточников) Тогда
		
		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование;
		
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование Тогда
		
		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла;
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ПомощникЗагрузкиДанныхИзВнешнегоИсточника";
		
	ИначеЕсли СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.ВыборФайла Тогда
		
		СпособЗагрузкиДанныхИзВнешнихИсточников = Перечисления.СпособЗагрузкиДанныхИзВнешнихИсточников.Копирование;
		ИмяФормыЗагрузкиДанныхИзВнешнихИсточников = "Обработка.ЗагрузкаДанныхИзФайла.Форма.ЗагрузкаДанныхИзФайла";
		
	КонецЕсли;
	
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(СпособЗагрузкиДанныхИзВнешнихИсточников, "СпособЗагрузкиДанныхИзВнешнихИсточников", ТекущийПользователь);
	
КонецПроцедуры

Процедура ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, ПредставлениеПоля, ТипПоля, ТипПолучаемогоЗначения, ИмяГруппыПолей = "", Приоритет = 0, ОбязательноеЗаполнение = Ложь, ОбязательноеЗаполнениеГруппы = Ложь, Видимость = Истина, ДопРеквизитПризнак = Ложь, ДопРеквизитСсылка = Неопределено) Экспорт
	
	НоваяСтрока = ТаблицаПолейЗагрузки.Добавить();
	
	НоваяСтрока.ИмяПоля = ИмяПоля;
	НоваяСтрока.ПредставлениеПоля = ПредставлениеПоля;
	НоваяСтрока.ТипПоля = ТипПоля;
	НоваяСтрока.ТипПолучаемогоЗначения = ТипПолучаемогоЗначения;
	НоваяСтрока.ИмяГруппыПолей = ИмяГруппыПолей;
	НоваяСтрока.Приоритет = Приоритет;
	НоваяСтрока.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	НоваяСтрока.ОбязательноеЗаполнениеГруппы = ОбязательноеЗаполнениеГруппы;
	НоваяСтрока.Видимость = Видимость;
	НоваяСтрока.ДопРеквизитПризнак = ДопРеквизитПризнак;
	НоваяСтрока.ДопРеквизитСсылка = ДопРеквизитСсылка;
	
КонецПроцедуры

Процедура СоздатьДеревоПолейИГруппПолей(ГруппыИПоля)
	
	ГруппыИПоля = Новый ДеревоЗначений;
	ГруппыИПоля.Колонки.Добавить("ИмяГруппыПолей", Новый ОписаниеТипов("Строка"));
	ГруппыИПоля.Колонки.Добавить("ТипВходящихДанных");
	ГруппыИПоля.Колонки.Добавить("ТипПолучаемогоЗначения");
	ГруппыИПоля.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	ГруппыИПоля.Колонки.Добавить("ПредставлениеПоля", Новый ОписаниеТипов("Строка"));
	ГруппыИПоля.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Число"));
	ГруппыИПоля.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	ГруппыИПоля.Колонки.Добавить("ОбязательноеЗаполнениеГруппы", Новый ОписаниеТипов("Булево"));
	ГруппыИПоля.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Булево"));
	ГруппыИПоля.Колонки.Добавить("ДопРеквизитПризнак", Новый ОписаниеТипов("Булево"));
	ГруппыИПоля.Колонки.Добавить("ДопРеквизитСсылка", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
КонецПроцедуры

Процедура СоздатьТаблицуПолейОписанияЗагрузки(ТаблицаПолейЗагрузки) Экспорт
	
	ТаблицаПолейЗагрузки = Новый ТаблицаЗначений;
	ТаблицаПолейЗагрузки.Колонки.Добавить("ИмяПоля");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ПредставлениеПоля");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ТипПоля"); 					// Тип входящих данных
	ТаблицаПолейЗагрузки.Колонки.Добавить("ТипПолучаемогоЗначения");	// Тип данных в приложении
	ТаблицаПолейЗагрузки.Колонки.Добавить("ИмяГруппыПолей");
	ТаблицаПолейЗагрузки.Колонки.Добавить("Приоритет");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ОбязательноеЗаполнение");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ОбязательноеЗаполнениеГруппы");
	ТаблицаПолейЗагрузки.Колонки.Добавить("Видимость");
	ТаблицаПолейЗагрузки.Колонки.Добавить("ДопРеквизитПризнак", Новый ОписаниеТипов("Булево"));
	ТаблицаПолейЗагрузки.Колонки.Добавить("ДопРеквизитСсылка", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
КонецПроцедуры

Процедура СоздатьТаблицуОписанияОшибок(Ошибки) Экспорт
	
	Ошибки = Новый ТаблицаЗначений;
	
	Ошибки.Колонки.Добавить("ОписаниеОшибки",		Новый ОписаниеТипов("Строка"));
	Ошибки.Колонки.Добавить("Критичная", 			Новый ОписаниеТипов("Булево"));
	Ошибки.Колонки.Добавить("МестоВозникновения",	Новый ОписаниеТипов("Строка"));
	
КонецПроцедуры

Процедура ПолучитьМенеджерПоИмениОбъектаЗаполнения(ПолноеИмяОбъектаЗаполнения, Менеджер) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаЗаполнения);
	
КонецПроцедуры

Процедура ДобавитьСлужебныеПоля(ТаблицаПолейЗагрузки, ГруппаСлужебныхПолей, ПолноеИмяОбъектаЗаполнения, ЭтоЗагрузкаВТЧ) Экспорт
	
	// Обязательное служебное поле. Используется помошником.
	СлужебноеПоле						= ГруппаСлужебныхПолей.Строки.Добавить(); 
	СлужебноеПоле.ИмяПоля				= ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	СлужебноеПоле.ТипПолучаемогоЗначения= Новый ОписаниеТипов("Булево");
	
	Если НЕ ЭтоЗагрузкаВТЧ Тогда
		
		СлужебноеПоле						= ГруппаСлужебныхПолей.Строки.Добавить(); 
		СлужебноеПоле.ИмяПоля				= "_СтрокаСопоставлена";
		СлужебноеПоле.ТипПолучаемогоЗначения= Новый ОписаниеТипов("Булево");
		
	КонецЕсли;
	
	// Возможность описать пользовательские служебные поля
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПриДобавленииСлужебныхПолей(ГруппаСлужебныхПолей, ПолноеИмяОбъектаЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоГруппыИПолей(ТаблицаПолейЗагрузки, ГруппыИПоля, ПолноеИмяОбъектаЗаполнения, ЭтоЗагрузкаВТЧ)
	
	ТаблицаГруппПолей = ТаблицаПолейЗагрузки.Скопировать(,"ИмяГруппыПолей");
	ТаблицаГруппПолей.Свернуть("ИмяГруппыПолей");
	
	СтрокаТаблицы = ТаблицаГруппПолей.Добавить();
	СтрокаТаблицы.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейОбязательныхКЗаполнению();
	
	СтрокаТаблицы = ТаблицаГруппПолей.Добавить();
	СтрокаТаблицы.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейНеобязательныхКЗаполнению();
	
	СтрокаТаблицы = ТаблицаГруппПолей.Добавить();
	СтрокаТаблицы.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейСлужебные();
	
	Для каждого СтрокаТаблицы Из ТаблицаГруппПолей Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.ИмяГруппыПолей) Тогда
			
			// Поля не объединенные в группы, разбераются отдельно по свойству ОбязательноеЗаполнение
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрокаПервогоУровня= ГруппыИПоля.Строки.Добавить();
		НоваяСтрокаПервогоУровня.ИмяГруппыПолей = СтрокаТаблицы.ИмяГруппыПолей;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяГруппыПолей", СтрокаТаблицы.ИмяГруппыПолей);
		Если СтрокаТаблицы.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейОбязательныхКЗаполнению() Тогда
			
			ПараметрыОтбора.Вставить("ИмяГруппыПолей", "");
			ПараметрыОтбора.Вставить("ОбязательноеЗаполнение", Истина);
			
		ИначеЕсли СтрокаТаблицы.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейНеобязательныхКЗаполнению() Тогда
			
			ПараметрыОтбора.Вставить("ИмяГруппыПолей", "");
			ПараметрыОтбора.Вставить("ОбязательноеЗаполнение", Ложь);
			
		ИначеЕсли СтрокаТаблицы.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейСлужебные() Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьСлужебныеПоля(ТаблицаПолейЗагрузки, НоваяСтрокаПервогоУровня, ПолноеИмяОбъектаЗаполнения, ЭтоЗагрузкаВТЧ);
			Продолжить;
			
		КонецЕсли;
		
		ОбязательноеЗаполнениеГруппы = Ложь;
		МассивСтрок 			= ТаблицаПолейЗагрузки.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			
			ЭтоПользовательскаяГруппаПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ЭтоПользовательскаяГруппаПолей(СтрокаТаблицы.ИмяГруппыПолей);
			Если ЭтоПользовательскаяГруппаПолей Тогда
				
				НоваяСтрокаПервогоУровня.ТипПолучаемогоЗначения = МассивСтрок[0].ТипПолучаемогоЗначения; // тип получаемого значения одинаков во всех полях одной группы полей (ссылка, строка, число и т.д.)
				НоваяСтрокаПервогоУровня.Видимость = Ложь;
				
			КонецЕсли;
			
			Для каждого СтрокаМассива Из МассивСтрок Цикл
				
				НоваяСтрокаВторогоУровня = НоваяСтрокаПервогоУровня.Строки.Добавить();
				НоваяСтрокаВторогоУровня.ИмяПоля = СтрокаМассива.ИмяПоля;
				НоваяСтрокаВторогоУровня.ТипВходящихДанных = СтрокаМассива.ТипПоля; // входящий тип данных (строка, число)
				НоваяСтрокаВторогоУровня.ТипПолучаемогоЗначения = СтрокаМассива.ТипПолучаемогоЗначения;
				НоваяСтрокаВторогоУровня.ПредставлениеПоля = СтрокаМассива.ПредставлениеПоля;
				НоваяСтрокаВторогоУровня.ОбязательноеЗаполнение = СтрокаМассива.ОбязательноеЗаполнение;
				НоваяСтрокаВторогоУровня.ОбязательноеЗаполнениеГруппы = СтрокаМассива.ОбязательноеЗаполнениеГруппы;
				НоваяСтрокаВторогоУровня.Видимость = СтрокаМассива.Видимость;
				НоваяСтрокаВторогоУровня.ДопРеквизитПризнак = СтрокаМассива.ДопРеквизитПризнак;
				НоваяСтрокаВторогоУровня.ДопРеквизитСсылка = СтрокаМассива.ДопРеквизитСсылка;
				
				Если НоваяСтрокаВторогоУровня.Видимость Тогда
					
					НоваяСтрокаПервогоУровня.Видимость = Истина;
					
				КонецЕсли;
				
				ОбязательноеЗаполнениеГруппы = ОбязательноеЗаполнениеГруппы ИЛИ СтрокаМассива.ОбязательноеЗаполнениеГруппы;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НоваяСтрокаПервогоУровня.ОбязательноеЗаполнениеГруппы = ОбязательноеЗаполнениеГруппы;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьИЗаполнитьДеревоГруппыИПолейПоИмениОбъекта(НастройкиЗагрузкиДанных, ГруппыИПоля) Экспорт
	Перем ТаблицаПолейЗагрузки;
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	ЭтоЗагрузкаВТЧ = НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти;
	
	СоздатьТаблицуПолейОписанияЗагрузки(ТаблицаПолейЗагрузки);
	ЗаполнитьТаблицуПолейЗагрузки(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);
	СоздатьДеревоПолейИГруппПолей(ГруппыИПоля);
	ЗаполнитьДеревоГруппыИПолей(ТаблицаПолейЗагрузки, ГруппыИПоля, ПолноеИмяОбъектаЗаполнения, ЭтоЗагрузкаВТЧ);
	
КонецПроцедуры

Функция ЭтоПользовательскаяГруппаПолей(ИмяГруппыПолей) Экспорт
	
	Возврат (ИмяГруппыПолей <> ИмяГруппыПолейОбязательныхКЗаполнению() И ИмяГруппыПолей <> ИмяГруппыПолейНеобязательныхКЗаполнению() И ИмяГруппыПолей <> ИмяГруппыПолейСлужебные());
	
КонецФункции

Функция ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна() Экспорт
	
	Возврат "_ЗагрузкаВПриложениеВозможна";
	
КонецФункции

Функция ИмяГруппыПолейОбязательныхКЗаполнению() Экспорт
	
	Возврат "_ГруппаПолейОбязательныхКЗаполнению";
	
КонецФункции

Функция ИмяГруппыПолейНеобязательныхКЗаполнению() Экспорт
	
	Возврат "_ГруппаПолейНеобязательныхКЗаполнению";
	
КонецФункции

Функция ИмяПоляДобавленияДополнительныхРеквизитов() Экспорт
	
	Возврат "_ДополнительныеРеквизитыИСведения";
	
КонецФункции

Функция ИмяГруппыПолейСлужебные() Экспорт
	
	Возврат "_ГруппаПолейСлужебные";
	
КонецФункции

Функция ПостФиксИменПолейВходящихДанных() Экспорт
	
	Возврат "_ВходящиеДанные";
	
КонецФункции

Функция ИспользоватьСовместноСПоставляемойЧастьюБСП() Экспорт
	
	ИспользоватьСовместно = Истина;
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПриОпределенииРежимаИспользования(ИспользоватьСовместно);
	
	Возврат ИспользоватьСовместно;
	
КонецФункции

Процедура ДобавитьДополнительныйРеквизитВОбъект(ЭлементСправочника, ЭтоСуществующийОбъект, Свойство, ЗначениеДопРеквизита);
	
	Если ТипЗнч(Свойство.НаборСвойств) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
		
		Если Свойство.НаборСвойств.ИмяПредопределенныхДанных <> "Справочник_Номенклатура_Общие"
			И Свойство.НаборСвойств <> ЭлементСправочника.КатегорияНоменклатуры.НаборСвойств Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСуществующийОбъект Тогда
		
		ОтборСтрок = Новый Структура("Свойство", Свойство);
		НайденныеСтрокиДопРеквизитов = ЭлементСправочника.ДополнительныеРеквизиты.НайтиСтроки(ОтборСтрок);
		СтрокаДопРеквизита = ?(НайденныеСтрокиДопРеквизитов.Количество() < 1, ЭлементСправочника.ДополнительныеРеквизиты.Добавить(), НайденныеСтрокиДопРеквизитов[0]);
		
	Иначе
		
		СтрокаДопРеквизита = ЭлементСправочника.ДополнительныеРеквизиты.Добавить();
		
	КонецЕсли;
	
	СтрокаДопРеквизита.Свойство = Свойство;
	СтрокаДопРеквизита.Значение = ЗначениеДопРеквизита;
	
КонецПроцедуры

Процедура ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, ЭтоСуществующийОбъект, СтрокаТаблицы, ВыбранныеДополнительныеРеквизиты) Экспорт
	
	ПостФикс = "_ВходящиеДанные";
	
	Для каждого ОписаниеДополнительногоРеквизита Из ВыбранныеДополнительныеРеквизиты Цикл
		
		СтроковоеЗначение = СтрокаТаблицы[ОписаниеДополнительногоРеквизита.Значение + ПостФикс];
		ЗначениеДопРеквизита = СтрокаТаблицы[ОписаниеДополнительногоРеквизита.Значение];
		Свойство = ОписаниеДополнительногоРеквизита.Ключ;
		
		Если ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
			
			ДобавитьДополнительныйРеквизитВОбъект(ЭлементСправочника, ЭтоСуществующийОбъект, Свойство, ЗначениеДопРеквизита);
			
		ИначеЕсли НЕ ПустаяСтрока(СтроковоеЗначение) Тогда
			
			МассивТиповЗначений = Свойство.ТипЗначения.Типы();
			Если МассивТиповЗначений.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СоздатьДополнительноеСвойство(ЗначениеДопРеквизита, Свойство, Ложь, СтроковоеЗначение);
				
			ИначеЕсли МассивТиповЗначений.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) <> Неопределено Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СоздатьДополнительноеСвойство(ЗначениеДопРеквизита, Свойство, Истина, СтроковоеЗначение);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
				
				ДобавитьДополнительныйРеквизитВОбъект(ЭлементСправочника, ЭтоСуществующийОбъект, Свойство, ЗначениеДопРеквизита);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Владелец) Экспорт
	
	ОписаниеДополнительныхРеквизитов = Новый Соответствие;
	
	ТекстЗапроса = 
	"Выбрать 
	|	ДопРеквизиты.Свойство КАК Свойство
	|Из Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты 
	|ГДЕ Не ДопРеквизиты.ПометкаУдаления И ДопРеквизиты.Ссылка = &Владелец";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		НомерДополнительногоРеквизита = 0;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НомерДополнительногоРеквизита = НомерДополнительногоРеквизита + 1;
			ОписаниеДополнительныхРеквизитов.Вставить(Выборка.Свойство, "ДополнительныйРеквизит" + Формат(НомерДополнительногоРеквизита, "ЧГ=0"));
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкиЗагрузкиДанных.Вставить("ОписаниеДополнительныхРеквизитов", ОписаниеДополнительныхРеквизитов); // Для заполнения списка всех реквизитов
	НастройкиЗагрузкиДанных.Вставить("ВыбранныеДополнительныеРеквизиты", Новый Соответствие); // Только те, которые есть в экселе
	
КонецПроцедуры

Функция СтандартныеИменаПолейНеподлежащихОбновлению(НастройкиЗагрузкиДанных)
	
	Возврат ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СтандартныеИменаПолейНеподлежащихОбновлению(НастройкиЗагрузкиДанных);
	
КонецФункции

Процедура ДобавитьИмяПоляВСтрокуОписанияСвойств(СтрокаОписанияСвойств, ИмяПоля)
	
	ИменаПолейНеУчаствующиеВЗаполненииСвойств = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ИменаПолейНеУчаствующиеВЗаполненииСвойств();
	Если СтрНайти(ИменаПолейНеУчаствующиеВЗаполненииСвойств, ИмяПоля) > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаОписанияСвойств = СтрокаОписанияСвойств + ?(ПустаяСтрока(СтрокаОписанияСвойств), "", ",") + ИмяПоля;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиИменПолей(ДеревоПолей, НастройкиЗагрузкиДанных, НастройкиОбновленияСвойств)
	
	ИменаПолейНеподлежащихОбновлению = НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению;
	ИменаПолейНеподлежащихОбновлению = СтандартныеИменаПолейНеподлежащихОбновлению(НастройкиЗагрузкиДанных);
	
	ИменаПолейОбновляемые = НастройкиОбновленияСвойств.ИменаПолейОбновляемые;
	
	Для каждого СтрокиПервогоУровня Из ДеревоПолей.Строки Цикл
		
		Если СтрокиПервогоУровня.НомерКолонки <> 0 Тогда
			
			ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейОбновляемые, СтрокиПервогоУровня.ИмяПоля);
			
		ИначеЕсли НЕ ПустаяСтрока(СтрокиПервогоУровня.ИмяПоля)
			И СтрокиПервогоУровня.ИмяПоля <> ИмяПоляДобавленияДополнительныхРеквизитов() Тогда
			
			ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейНеподлежащихОбновлению, СтрокиПервогоУровня.ИмяПоля);
			
		ИначеЕсли НЕ ПустаяСтрока(СтрокиПервогоУровня.ИмяГруппыПолей) Тогда
			
			Для каждого СтрокиВторогоУровня Из СтрокиПервогоУровня.Строки Цикл
				
				Если СтрокиВторогоУровня.НомерКолонки <> 0 Тогда
					
					ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейОбновляемые, СтрокиВторогоУровня.ИмяПоля);
					
				ИначеЕсли НЕ ПустаяСтрока(СтрокиВторогоУровня.ИмяПоля) Тогда
					
					ДобавитьИмяПоляВСтрокуОписанияСвойств(ИменаПолейНеподлежащихОбновлению, СтрокиВторогоУровня.ИмяПоля);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению = ИменаПолейНеподлежащихОбновлению;
	НастройкиОбновленияСвойств.ИменаПолейОбновляемые = ИменаПолейОбновляемые;
	
КонецПроцедуры

Процедура СформироватьНастройкиОбновленияСвойств(ДеревоПолей, НастройкиЗагрузкиДанных) ЭКспорт
	
	НастройкиОбновленияСвойств = Новый Структура("ИменаПолейОбновляемые, ИменаПолейНеподлежащихОбновлению", "", "");
	ЗаполнитьСтрокиИменПолей(ДеревоПолей, НастройкиЗагрузкиДанных, НастройкиОбновленияСвойств);
	
	НастройкиЗагрузкиДанных.Вставить("НастройкиОбновленияСвойств", НастройкиОбновленияСвойств);
	
КонецПроцедуры

//:::ЗагрузкаДанных

Процедура ЗагрузитьДанные(ПараметрыВызоваСервера, АдресВременногоХранилища) Экспорт
	
	МаксимумПолезныхКолонок	= ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента();
	ИмяВременногоФайла 		= ПараметрыВызоваСервера.ИмяВременногоФайла;
	Расширение 				= ПараметрыВызоваСервера.Расширение;
	ТабличныйДокумент 		= ПараметрыВызоваСервера.ТабличныйДокумент;
	НастройкиЗагрузкиДанных	= ПараметрыВызоваСервера.НастройкиЗагрузкиДанных;
	
	Если Расширение = "csv" Тогда 
		
		ЗагрузитьCSVФайлВТабличныйДокумент(ИмяВременногоФайла, ТабличныйДокумент);
		ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, ТабличныйДокумент.ШиринаТаблицы, НастройкиЗагрузкиДанных);
		
	Иначе
		
		ИсходныйТабличныйДокумент = Новый ТабличныйДокумент;
		ИсходныйТабличныйДокумент.Прочитать(ИмяВременногоФайла);
		
		ОптимизироватьТабличныйДокумент(ИсходныйТабличныйДокумент, ТабличныйДокумент);
		
		ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, Мин(ТабличныйДокумент.ШиринаТаблицы, МаксимумПолезныхКолонок), НастройкиЗагрузкиДанных);
		
	КонецЕсли;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресВременногоХранилища);
	
КонецПроцедуры

// Взято из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов
//
// Используется своя процедура из-за ошибки разбора строки:
// Работы и услуги;;Проектирование систем кондиционирования и вентиляции;
// где второй и четвертый параметр будут пропущены, вместо заполнения пустым значением.
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Разделитель) Экспорт
	
	Подстроки = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоПодстроки = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		
		КодСимвола = КодСимвола(Строка, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, Разделитель) Тогда
			
			Если Позиция <> НачалоПодстроки Тогда
				
				Подстроки.Добавить(Сред(Строка, НачалоПодстроки, Позиция - НачалоПодстроки));
				
			ИначеЕсли Позиция = НачалоПодстроки Тогда
				
				Подстроки.Добавить("");
				
			КонецЕсли;
			
			НачалоПодстроки = Позиция + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Позиция <> НачалоПодстроки Тогда
		
		Подстроки.Добавить(Сред(Строка, НачалоПодстроки, Позиция - НачалоПодстроки));
		
	ИначеЕсли Позиция = НачалоПодстроки Тогда
		
		Подстроки.Добавить("");
		
	КонецЕсли;
	
	Возврат Подстроки;
	
КонецФункции

Процедура ОптимизироватьТабличныйДокумент(ИсходныйТабличныйДокумент, ТабличныйДокумент)
	
#Область Описание
// Правила оптимизации табличного документа:
// - максимальное количество столбцов задано в ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента();
// - для документа количество колонок определяется минимумом из Ширины таблицы и Максимальным количеством столбцов;
// - далее удаляем колонки по правилу: если в первых 10 ячейках колонки пусто, значит колонка не результативная, игнорируем (шаг от максимума к первой колонке);
// - если заполнение копированием (в ВЕБ-клиенте нет), оставляем шаблонное (максимальное) количество колонок;
// - строки грузим все, так как предполагаем, что количество строк не критично;
#КонецОбласти
	
	МаксимумПолезныхКолонок = МИН(ИсходныйТабличныйДокумент.ШиринаТаблицы, ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента());
	Пока Истина Цикл
		
		ЕстьЗаполненыеЯчейки = Ложь;
		СчетчикЯчеек = 0;
		
		Для СчетчикЯчеек = 1 По 10 Цикл
			
			Область = ИсходныйТабличныйДокумент.Область(СчетчикЯчеек, МаксимумПолезныхКолонок); // проверяем ячейку в последней колонке
			Если НЕ ПустаяСтрока(Область.Текст) Тогда
				
				ЕстьЗаполненыеЯчейки = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьЗаполненыеЯчейки 
			ИЛИ МаксимумПолезныхКолонок < 7 Тогда
			
			Прервать;
			
		Иначе
			
			МаксимумПолезныхКолонок = МаксимумПолезныхКолонок - 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ИсходныйТабличныйДокумент.ПолучитьОбласть(1, 1, ИсходныйТабличныйДокумент.ВысотаТаблицы, МаксимумПолезныхКолонок));
	
КонецПроцедуры

Процедура ЗагрузитьCSVФайлВТабличныйДокумент(ИмяВременногоФайла, ТабличныйДокумент)
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если НЕ Файл.Существует() Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Макет = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("ПростойШаблон");
	ОбластьЗначение = Макет.ПолучитьОбласть("Значение");
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Пока Строка <> Неопределено Цикл
		
		ПерваяКолонка = Истина;
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Строка, ";");
		Для каждого Подстрока Из МассивПодстрок Цикл
			
			ОбластьЗначение.Параметры.Значение = Строка(Подстрока);
			
			Если ПерваяКолонка тогда
				
				ТабличныйДокумент.Вывести(ОбластьЗначение);
				ПерваяКолонка = Ложь;
				
			иначе
				
				ТабличныйДокумент.Присоединить(ОбластьЗначение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Строка = ЧтениеТекста.ПрочитатьСтроку();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьДанныеКТипуКолонки(Значение, ТипКолонки)
	
	Результат = Значение;
	
	Для каждого Тип Из ТипКолонки.Типы() Цикл
		
		Если Тип = Тип("Дата") Тогда
			
			Если СтрДлина(Значение) < 11 Тогда
				Значение = Сред(Значение, 7, 4) + Сред(Значение,4,2) + Лев(Значение, 2);
			Иначе
				Значение = Сред(Значение, 7, 4) + Сред(Значение,4,2) + Лев(Значение, 2); 
			КонецЕсли;
				
			ЦелевойТип = Новый ОписаниеТипов("Дата");
			Результат = ЦелевойТип.ПривестиЗначение(Значение);
			
		ИначеЕсли Тип = Тип("Число") Тогда
			ЦелевойТип = Новый ОписаниеТипов("Число");
			Результат = ЦелевойТип.ПривестиЗначение(Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ДанныеИзТаблицыЗначенийВТабличныйДокумент(ДанныеИзФайла, ТабличныйДокумент, ПолноеИмяОбъектаЗаполнения) Экспорт 
	
	КоличествоКолонок = ДанныеИзФайла.Колонки.Количество();
	Если КоличествоКолонок < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	
	Макет = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("ПростойШаблон");
	ОбластьЗначение = Макет.ПолучитьОбласть("Значение");
	
	Для ИндексСтроки = 0 По ДанныеИзФайла.Количество() - 1 Цикл
		
		СтрокаТЗ = ДанныеИзФайла.Получить(ИндексСтроки);
		Для ИндексКолонки = 0 по КоличествоКолонок - 1 Цикл
			
			ОбластьЗначение.Параметры.Значение = ПреобразоватьДанныеКТипуКолонки(СтрокаТЗ[ИндексКолонки], ДанныеИзФайла.Колонки.Получить(ИндексКолонки).ТипЗначения);
			
			Если ИндексКолонки = 0 тогда
				
				ТабличныйДокумент.Вывести(ОбластьЗначение);
				
			иначе
				
				ТабличныйДокумент.Присоединить(ОбластьЗначение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, КоличествоКолонок, ПолноеИмяОбъектаЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, КоличествоКолонок, НастройкиЗагрузкиДанных) Экспорт
	Перем ТаблицаПолейЗагрузки;
	
	Если Число(КоличествоКолонок) < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьТаблицуПолейОписанияЗагрузки(ТаблицаПолейЗагрузки);
	ЗагрузкаДанныхИзВнешнегоИсточника.ЗаполнитьТаблицуПолейЗагрузки(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);
	
	Расшифровка = Новый СписокЗначений;
	Расшифровка.Добавить("Не загружать", "Не загружать");
	Для каждого СтрокаТаблицы Из ТаблицаПолейЗагрузки Цикл
	
		Расшифровка.Добавить(СтрокаТаблицы.ИмяПоля, СтрокаТаблицы.ПредставлениеПоля);
		
	КонецЦикла;
	
	Макет = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("ПростойШаблон");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ИсходнаяОбласть = ОбластьЗаголовок.Области.Заголовок;
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		
		ОбластьПриемник = ТабличныйДокумент.Область(1, НомерКолонки, 1, НомерКолонки);
		
		ИсходнаяОбласть.Примечание.Текст = ?(ПустаяСтрока(ОбластьПриемник.Текст), "", ОбластьПриемник.Текст);
		ТабличныйДокумент.ВставитьОбласть(ИсходнаяОбласть, ОбластьПриемник, ТипСмещенияТабличногоДокумента.БезСмещения, Истина);
		
		ОбластьПриемник.Текст 				= "Не загружать";
		ОбластьПриемник.ПараметрРасшифровки	= "";
		ОбластьПриемник.Расшифровка			= Расшифровка;
		
		ОбластьКолонка = ТабличныйДокумент.Область(, НомерКолонки, , НомерКолонки);
		ОбластьКолонка.ШиринаКолонки = 22.75;
		
	КонецЦикла;
	
	ОбластьПерваяСтрока = ТабличныйДокумент.Область(1, , 1, );
	ОбластьПерваяСтрока.ВысотаСтроки = 26;
	
КонецПроцедуры

#КонецОбласти