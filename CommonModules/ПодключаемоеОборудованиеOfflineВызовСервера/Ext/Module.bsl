
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену
//
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС
// СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - Ставка НДС
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина)
	
	ПроцентНДС = СтавкаНДС.Ставка / 100;
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Функция получает параметры устройства
Функция ПолучитьПараметрыУстройства(Устройство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница.РозничныйВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦен,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКод, 0) КАК МаксимальныйКод,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ПрефиксВесовогоТовара, 0) КАК ПрефиксВесовогоТовара,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПравилоОбмена",          Выборка.ПравилоОбмена);
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы", Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("СтруктурнаяЕдиница",                  Выборка.СтруктурнаяЕдиница);
	ВозвращаемоеЗначение.Вставить("ВидЦен",                Выборка.ВидЦен);
	ВозвращаемоеЗначение.Вставить("ТипОборудования",        Выборка.ТипОборудования);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКод",        Выборка.МаксимальныйКод);
	ВозвращаемоеЗначение.Вставить("ПрефиксВесовогоТовара",  Строка(Выборка.ПрефиксВесовогоТовара));
	ВозвращаемоеЗначение.Вставить("ВыгружатьИзменения",     Выборка.ВыгружатьИзменения);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция удаляет регистрация изменений для устройства.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование>
//
// Возвращаемое значение:
//  Нет
//
Процедура УдалитьРегистрациюИзменений(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция регистрирует изменения для устройства.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование>
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗарегистрироватьИзменения(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО ПодключаемоеОборудование.ПравилоОбмена = КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется
	|	И ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
		Набор.Отбор.ПравилоОбмена.Использование = Истина;
		
		Набор.Отбор.Код.Значение = Выборка.Код;
		Набор.Отбор.Код.Использование = Истина;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДата();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
	КонецЦикла;
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ЗарегистрироватьИзменения(Устройство);
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы                             КАК УзелИнформационнойБазы,
	|	ПодключаемоеОборудование.ПравилоОбмена                                      КАК ПравилоОбмена,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВыполненоУспешно И СтруктураДанные <> Неопределено Тогда
			
			Если Выборка.ВыгружатьИзменения Тогда
				
				Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
				Для Каждого СтрокаТЧ Из СтруктураДанные.Данные Цикл
					
					Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
					Набор.Отбор.ПравилоОбмена.Использование = Истина;
					
					Набор.Отбор.Код.Значение = СтрокаТЧ.Код;
					Набор.Отбор.Код.Использование = Истина;
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, Набор);
					
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДата();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при загрузке отчета о розничных продажах с устройства.
// Выполняет запись информации в узел плана обмена. Создает отчет о розничных продажах.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Функция ПриЗагрузкеОтчетаОРозничныхПродажах(Устройство, МассивДанных, РасширеннаяЗагрузка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСозданныхДокументов = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.ВалютаДенежныхСредств КАК Валюта,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница.РозничныйВидЦен КАК ВидЦен,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница.РозничныйВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка)
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ШтрихкодАлкогольнойМарки", Новый ОписаниеТипов("Строка"));
	
	Если РасширеннаяЗагрузка Тогда
		
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("КодВидаОплаты", Новый ОписаниеТипов("Строка"));
		ТаблицаОплат.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
		ТаблицаОплат.Колонки.Добавить("ТипОплаты",     Новый ОписаниеТипов("Число"));
		
		Для Каждого ОтчетОПродажах Из МассивДанных Цикл
			
			ТаблицаТоваров.Очистить();
			
			Для Каждого СтрокаТЧ Из ОтчетОПродажах.Товары Цикл
				НоваяСтрока = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
			ТаблицаТоваров.Свернуть("Код, Цена, Скидка, ШтрихкодАлкогольнойМарки", "Количество, Сумма");
			
			ТаблицаОплат.Очистить();
			Для Каждого СтрокаТЧ Из ОтчетОПродажах.Оплаты Цикл
				НоваяСтрока = ТаблицаОплат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
			
			Комментарий = НСтр("ru = 'Загружено из %ТипОборудования%:%Устройство%'");
			Комментарий = СтрЗаменить(Комментарий, "%ТипОборудования%", Устройство.ТипОборудования);
			Комментарий = СтрЗаменить(Комментарий, "%Устройство%", Устройство);
			
			СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, Выборка, ТаблицаТоваров, ТаблицаОплат, Комментарий);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из МассивДанных Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "Код, Цена, Количество, Скидка, Сумма");
		КонецЦикла;
		ТаблицаТоваров.Свернуть("Код, Цена, Скидка", "Количество, Сумма");
		
		Комментарий = НСтр("ru = 'Загружено из ККМ Offline:'") + Символы.НПП + Устройство;
		СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, Выборка, ТаблицаТоваров,, Комментарий);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивСозданныхДокументов;
	
КонецФункции

Процедура СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, РеквизитыККМ, ТаблицаТоваров, ТаблицаОплат = Неопределено, Комментарий = "")
	
		Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	Товары.Цена КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка КАК Скидка,
	|	Товары.Сумма КАК Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаЗначений КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))                 КАК Партия,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))         КАК ЕдиницаИзмерения,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения.Коэффициент, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС                                КАК СтавкаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО Товары.Код = КодыТоваровПодключаемогоОборудованияOffline.Код
	|			И (КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена)");
	
	Запрос.УстановитьПараметр("ПравилоОбмена",   РеквизитыККМ.ПравилоОбмена);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаТоваров);
	
	ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ОтчетОРозничныхПродажахОбъект.Дата               = ТекущаяДата();
	ОтчетОРозничныхПродажахОбъект.НачалоКассовойСмены = НачалоДня(ОтчетОРозничныхПродажахОбъект.Дата);
	ОтчетОРозничныхПродажахОбъект.ОкончаниеКассовойСмены = КонецДня(ОтчетОРозничныхПродажахОбъект.Дата);
	ОтчетОРозничныхПродажахОбъект.ВалютаДокумента    = РеквизитыККМ.Валюта;
	ОтчетОРозничныхПродажахОбъект.ВидЦен             = РеквизитыККМ.ВидЦен;
	ОтчетОРозничныхПродажахОбъект.КассаККМ           = РеквизитыККМ.КассаККМ;
	ОтчетОРозничныхПродажахОбъект.Комментарий        = Комментарий;
	ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(РеквизитыККМ.Организация, РеквизитыККМ.СтруктурнаяЕдиница, ТекущаяДата());
	ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	ОтчетОРозничныхПродажахОбъект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;

	ОтчетОРозничныхПродажахОбъект.Организация        = РеквизитыККМ.Организация;
	ОтчетОРозничныхПродажахОбъект.Ответственный      = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	ОтчетОРозничныхПродажахОбъект.ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ОтчетОРозничныхПродажахОбъект.Подразделение      = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновноеПодразделение");
	Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
		ОтчетОРозничныхПродажахОбъект.Подразделение      = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	ОтчетОРозничныхПродажахОбъект.СтруктурнаяЕдиница = РеквизитыККМ.СтруктурнаяЕдиница;
	ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС    = РеквизитыККМ.ЦенаВключаетНДС;
	
	ЗапросПОЕНВД = Новый Запрос;
	ЗапросПОЕНВД.УстановитьПараметр("Организация", ОтчетОРозничныхПродажахОбъект.Организация);
	ЗапросПОЕНВД.УстановитьПараметр("Склад", ОтчетОРозничныхПродажахОбъект.КассаККМ.СтруктурнаяЕдиница);
	
	ЗапросПОЕНВД.УстановитьПараметр("Дата",ОтчетОРозничныхПродажахОбъект.Дата);
	
	ЗапросПОЕНВД.Текст = 
	"ВЫБРАТЬ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД КАК ЕНВД
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД";
	
	Выборка = ЗапросПОЕНВД.Выполнить();
	ОтчетОРозничныхПродажахОбъект.УчитыватьВНУ = Выборка.Пустой();
	
	ВыборкаПоТоварам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура        = ВыборкаПоТоварам.Номенклатура;
		НоваяСтрока.Характеристика      = ВыборкаПоТоварам.Характеристика;
		НоваяСтрока.Партия              = ВыборкаПоТоварам.Партия;
		НоваяСтрока.ЕдиницаИзмерения    = ВыборкаПоТоварам.ЕдиницаИзмерения;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		НоваяСтрока.Количество          = ВыборкаПоТоварам.КоличествоУпаковок;
		НоваяСтрока.Сумма               = ВыборкаПоТоварам.Сумма;
		НоваяСтрока.Цена                = ВыборкаПоТоварам.Цена;
		НоваяСтрока.СтавкаНДС           = ВыборкаПоТоварам.СтавкаНДС;
		НоваяСтрока.ПроцентСкидкиНаценки = ВыборкаПоТоварам.ПроцентРучнойСкидки;
		НоваяСтрока.СуммаНДС            = РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, РеквизитыККМ.ЦенаВключаетНДС);
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
	КонецЦикла;
	
	ОтчетОРозничныхПродажахОбъект.СуммаДокумента = ОтчетОРозничныхПродажахОбъект.Запасы.Итог("Всего");
	
	Попытка
		Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	УзелОбъект = РеквизитыККМ.УзелИнформационнойБазы.ПолучитьОбъект();
	УзелОбъект.ДатаЗагрузки = ТекущаяДата();
	УзелОбъект.Записать();
	
	МассивСозданныхДокументов.Добавить(ОтчетОРозничныхПродажахОбъект.Ссылка);
	
КонецПроцедуры

// Процедура заполняет структуру настроек по правилу обмена с подключаемым оборудованием.
//
Процедура ЗаполнитьСтруктуруНастроекПоПравилуОбмена(Настройки, ПравилоОбмена) Экспорт
	
	Настройки.ИспользоватьСкидки          = ПравилоОбмена.ИспользоватьСкидкиНаценки;
	Настройки.ИспользоватьБанковскиеКарты = ПравилоОбмена.ИспользоватьОплатуПлатежнымиКартами;
	
	СтруктурнаяЕдиница = ПравилоОбмена.СтруктурнаяЕдиница;
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница.Организация) Тогда
		Организация = СтруктурнаяЕдиница.Организация;
		Настройки.НазваниеОрганизации = Организация.Наименование;
		Настройки.ИНН                 = Организация.ИНН;
		
		СистемаНалогообложенияСтруктура = Справочники.Организации.ПолучитьСистемуНалогообложения(ТекущаяДатаСеанса(), Организация);
		Настройки.Налогообложение = Строка(СистемаНалогообложенияСтруктура.СистемаНалогообложения);
		
		//Настройки.Налогообложение = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	Если ПустаяСтрока(Настройки.Налогообложение) Тогда
		Настройки.Налогообложение = "Общая";
	КонецЕсли;

	
	//ТипОплатыПлатежнаяКарта = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
	//Для Каждого СтрокаВидОплаты Из ПравилоОбмена.ВидыОплаты Цикл
	//	
	//	Если НЕ СтрокаВидОплаты.ТипОплаты = ТипОплатыПлатежнаяКарта Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ЗаписьВидОплаты = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваВидыОплаты();
	//	ЗаписьВидОплаты.Код          = Строка(СтрокаВидОплаты.ВидОплаты.УникальныйИдентификатор());
	//	ЗаписьВидОплаты.Наименование = СтрокаВидОплаты.ВидОплаты.Наименование;
	//	ЗаписьВидОплаты.ТипОплаты    = 1;
	//	
	//	Настройки.ВидыОплаты.Добавить(ЗаписьВидОплаты);
	//КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет структуру прайс-листа к выгрузке в ККМ Offline в расширенном формате (с группами товаров)
//
Процедура ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(СтруктураПрайсЛиста, ТоварыКВыгрузке) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКВыгруке.Код КАК Код,
		|	ТоварыКВыгруке.Артикул КАК Артикул,
		|	ТоварыКВыгруке.Весовой КАК Весовой,
		|	ТоварыКВыгруке.ЕдиницаХранения КАК ЕдиницаИзмерения,
		|	ТоварыКВыгруке.ЕдиницаХраненияНаименование КАК ЕдиницаИзмеренияНаименование,
		|	ТоварыКВыгруке.КоэффициентУпаковки КАК КоэффициентУпаковки,
		|	ТоварыКВыгруке.Номенклатура КАК Номенклатура,
		|	ТоварыКВыгруке.НоменклатураНаименованиеСПартией КАК НоменклатураНаименование,
		|	ТоварыКВыгруке.СтавкаНДС КАК СтавкаНДС,
		|	ТоварыКВыгруке.Остаток КАК Остаток,
		|	ТоварыКВыгруке.Алкоголь КАК Алкоголь,
		|	ТоварыКВыгруке.Маркируемый КАК Маркируемый,
		|	ТоварыКВыгруке.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
		|	ТоварыКВыгруке.ЕмкостьТары КАК ЕмкостьТары,
		|	ТоварыКВыгруке.Крепость КАК Крепость,
		|	ТоварыКВыгруке.ИННПроизводителя КАК ИННПроизводителя,
		|	ТоварыКВыгруке.КПППроизводителя КАК КПППроизводителя,
		|	ТоварыКВыгруке.Упаковка КАК Упаковка,
		|	ТоварыКВыгруке.УпаковкаНаименование КАК УпаковкаНаименование,
		|	ТоварыКВыгруке.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТоварыКВыгруке.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьХарактеристики,
		|	ВЫБОР
		|		КОГДА ТоварыКВыгруке.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьУпаковки,
		|	ТоварыКВыгруке.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	ТоварыКВыгруке.Цена КАК Цена,
		|	ТоварыКВыгруке.Штрихкод КАК Штрихкод,
		|	ТоварыКВыгруке.ЭтоГруппа КАК ЭтоГруппа,
		|	ТоварыКВыгруке.ТипНоменклатуры КАК ТипНоменклатуры
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТоварыКВыгруке КАК ТоварыКВыгруке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.НоменклатураНаименование КАК СТРОКА(1024)) КАК НоменклатураНаименование,
		|	Товары.ЭтоГруппа КАК ЭтоГруппа,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
		|	Товары.Артикул КАК Артикул,
		|	Товары.Весовой КАК Весовой,
		|	Товары.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.Код КАК Код,
		|	Товары.Остаток КАК Остаток,
		|	Товары.Алкоголь КАК Алкоголь,
		|	Товары.Маркируемый КАК Маркируемый,
		|	Товары.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
		|	Товары.ЕмкостьТары КАК ЕмкостьТары,
		|	Товары.Крепость КАК Крепость,
		|	Товары.ИННПроизводителя КАК ИННПроизводителя,
		|	Товары.КПППроизводителя КАК КПППроизводителя,
		|	Товары.Цена КАК Цена,
		|	Товары.Штрихкод КАК Штрихкод,
		|	Товары.КоэффициентУпаковки КАК КоэффициентУпаковки,
		|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.ЕстьХарактеристики КАК ЕстьХарактеристики,
		|	Товары.ЕстьУпаковки КАК ЕстьУпаковки
		|ИЗ
		|	Товары КАК Товары
		|ИТОГИ
		|	МАКСИМУМ(Номенклатура),
		|	МАКСИМУМ(ЭтоГруппа),
		|	МАКСИМУМ(ХарактеристикаНаименование),
		|	МАКСИМУМ(Артикул),
		|	МАКСИМУМ(Весовой),
		|	МАКСИМУМ(ЕдиницаИзмеренияНаименование),
		|	МАКСИМУМ(СтавкаНДС),
		|	МАКСИМУМ(Код),
		|	МАКСИМУМ(Остаток),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Штрихкод),
		|	МАКСИМУМ(ТипНоменклатуры),
		|	МАКСИМУМ(ЕстьХарактеристики),
		|	МАКСИМУМ(ЕстьУпаковки),
		|	МАКСИМУМ(Алкоголь),
		|	МАКСИМУМ(Маркируемый),
		|	МАКСИМУМ(КодВидаАлкогольнойПродукции),
		|	МАКСИМУМ(ЕмкостьТары),
		|	МАКСИМУМ(Крепость),
		|	МАКСИМУМ(ИННПроизводителя),
		|	МАКСИМУМ(КПППроизводителя),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Остаток)
		|ПО
		|	ВЫРАЗИТЬ(Товары.НоменклатураНаименование КАК СТРОКА(1024)) ,
		|	Характеристика";
		
	Запрос.УстановитьПараметр("ТоварыКВыгруке", ТоварыКВыгрузке);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТипНоменклатурыУслуга = Перечисления.ТипыНоменклатуры.Услуга;
	ТипНоменклатурыРабота = Перечисления.ТипыНоменклатуры.Работа;
	
	ВыборкаПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		Если ВыборкаПоНоменклатуре.ЭтоГруппа Тогда
			
			ЗаписьГруппа = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваГруппыТоваров();
			
			ЗаписьГруппа.Код = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Код) Тогда
				ЗаписьГруппа.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
			КонецЕсли;
			
			ЗаписьГруппа.Наименование = ВыборкаПоНоменклатуре.НоменклатураНаименование;
			СтруктураПрайсЛиста.ГруппыТоваров.Добавить(ЗаписьГруппа);
		Иначе
			
			ЗаписьТовар = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТовары();
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Код) Тогда
				ЗаписьТовар.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
			КонецЕсли;
			
			ЗаписьТовар.Наименование     = ВыборкаПоНоменклатуре.НоменклатураНаименование;
			ЗаписьТовар.Артикул          = ВыборкаПоНоменклатуре.Артикул;
			ЗаписьТовар.Весовой          = ВыборкаПоНоменклатуре.Весовой;
			ЗаписьТовар.ЕдиницаИзмерения = ВыборкаПоНоменклатуре.ЕдиницаИзмеренияНаименование;
			ЗаписьТовар.СтавкаНДС        = Строка(УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ВыборкаПоНоменклатуре.СтавкаНДС));
			ЗаписьТовар.Услуга           = ВыборкаПоНоменклатуре.ТипНоменклатуры = ТипНоменклатурыУслуга ИЛИ ВыборкаПоНоменклатуре.ТипНоменклатуры = ТипНоменклатурыРабота;
			ЗаписьТовар.Алкоголь         = ВыборкаПоНоменклатуре.Алкоголь;
			
			Если ЗаписьТовар.Алкоголь Тогда
				ЗаписьТовар.Маркируемый					= ВыборкаПоНоменклатуре.Маркируемый;
				ЗаписьТовар.КодВидаАлкогольнойПродукции	= ВыборкаПоНоменклатуре.КодВидаАлкогольнойПродукции;
				ЗаписьТовар.ЕмкостьТары					= ВыборкаПоНоменклатуре.ЕмкостьТары;
				ЗаписьТовар.Крепость					= ВыборкаПоНоменклатуре.Крепость;
				ЗаписьТовар.ИННПроизводителя			= ВыборкаПоНоменклатуре.ИННПроизводителя;
				ЗаписьТовар.КПППроизводителя			= ВыборкаПоНоменклатуре.КПППроизводителя;
			КонецЕсли;
			
			ЗаписьТовар.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
			
			Если ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
				
				ЗаписьТовар.ИмеетХарактеристики = Истина;
				ЗаписьТовар.ИмеетУпаковки       = Ложь;
				
				ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					
					ЗаписьХарактеристика = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваХарактеристики();
					ЗаписьХарактеристика.УникальныйИдентификатор = ВыборкаПоХарактеристикам.Характеристика.УникальныйИдентификатор();
					ЗаписьХарактеристика.Наименование = ВыборкаПоХарактеристикам.ХарактеристикаНаименование;
					
					Если ВыборкаПоХарактеристикам.ЕстьУпаковки Тогда
						
						ЗаписьХарактеристика.ИмеетУпаковки       = Истина;
						
						ВыборкаПоУпаковкам = ВыборкаПоХарактеристикам.Выбрать();
						
						Пока ВыборкаПоУпаковкам.Следующий() Цикл
							
							ЗаписьУпаковка = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваУпаковки();
							ЗаписьУпаковка.Штрихкод = ВыборкаПоУпаковкам.Штрихкод;
							ЗаписьУпаковка.Код      = Строка(Формат(ВыборкаПоУпаковкам.Код, "ЧГ=0"));
							ЗаписьУпаковка.Цена     = ВыборкаПоУпаковкам.Цена;
							ЗаписьУпаковка.Остаток  = ВыборкаПоУпаковкам.Остаток;
							ЗаписьУпаковка.Коэффициент = ВыборкаПоУпаковкам.КоэффициентУпаковки;
							ЗаписьУпаковка.Наименование  = ВыборкаПоУпаковкам.УпаковкаНаименование;
							
							ЗаписьХарактеристика.Упаковки.Добавить(ЗаписьУпаковка);
							
						КонецЦикла;
						
					Иначе
						
						ЗаписьХарактеристика.ИмеетУпаковки       = Ложь;
						
						ЗаписьХарактеристика.Штрихкод = ВыборкаПоХарактеристикам.Штрихкод;
						ЗаписьХарактеристика.Код      = Строка(Формат(ВыборкаПоХарактеристикам.Код, "ЧГ=0"));
						ЗаписьХарактеристика.Цена     = ВыборкаПоХарактеристикам.Цена;
						ЗаписьХарактеристика.Остаток  = ВыборкаПоХарактеристикам.Остаток;
					КонецЕсли;
					
					ЗаписьТовар.Характеристики.Добавить(ЗаписьХарактеристика);
				КонецЦикла;
				
			ИначеЕсли ВыборкаПоНоменклатуре.ЕстьУпаковки И НЕ ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
				
				ВыборкаПоПустойХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаПоПустойХарактеристике.Следующий();
				
				ВыборкаПоУпаковкам = ВыборкаПоПустойХарактеристике.Выбрать();
				
				ЗаписьТовар.ИмеетУпаковки       = Истина;
				ЗаписьТовар.ИмеетХарактеристики = Ложь;
				
				Пока ВыборкаПоУпаковкам.Следующий() Цикл
					ЗаписьУпаковка = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваУпаковки();
					ЗаписьУпаковка.Штрихкод = ВыборкаПоУпаковкам.Штрихкод;
					ЗаписьУпаковка.Код      = Строка(Формат(ВыборкаПоУпаковкам.Код, "ЧГ=0"));
					ЗаписьУпаковка.Цена     = ВыборкаПоУпаковкам.Цена;
					ЗаписьУпаковка.Остаток  = ВыборкаПоУпаковкам.Остаток;
					ЗаписьУпаковка.Коэффициент = ВыборкаПоУпаковкам.КоэффициентУпаковки;
					ЗаписьУпаковка.Наименование  = ВыборкаПоУпаковкам.УпаковкаНаименование;
					
					ЗаписьТовар.Упаковки.Добавить(ЗаписьУпаковка);
				КонецЦикла;
				
			Иначе
				
				ЗаписьТовар.Штрихкод = ВыборкаПоНоменклатуре.Штрихкод;
				ЗаписьТовар.Код      = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
				ЗаписьТовар.Цена     = ВыборкаПоНоменклатуре.Цена;
				ЗаписьТовар.Остаток  = ВыборкаПоНоменклатуре.Остаток;
				
				ЗаписьТовар.ИмеетУпаковки       = Ложь;
				ЗаписьТовар.ИмеетХарактеристики = Ложь;
				
				
			КонецЕсли;
			ЗаписьТовар.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
			СтруктураПрайсЛиста.Товары.Добавить(ЗаписьТовар);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГИСТРОМ КОДЫ ТОВАРОВ ПОДКЛЮЧАЕМОГО ОБОРУДОВАНИЯ

// Функция возвращает максимальный код товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//
// Возвращаемое значение:
//  <Число> - Максимальный код товарара для заданного правила обмена.
//
Функция ПолучитьМаксимальныйКод(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КодыТоваровПодключаемогоОборудованияOffline.Код), 0) КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Код;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Функция возвращает таблицу свободных кодов товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена. Свободными являются коды, для которых не задана соответствующая номенклатура.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  Количество - <Число> - Необходимое количество свободных кодов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица свободных кодов товаров.
//
Функция ПолучитьСвободныеКоды(ПравилоОбмена, Количество = 0) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ //ПЕРВЫЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыТоваровПодключаемогоОборудованияOffline.Код Возр");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПЕРВЫЕ", ?(Количество = 0,"","ПЕРВЫЕ" + " " + Формат(Количество, "ЧГ=0")));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура записывает в регистр КодыТоваровПодключаемогоОборудованияOffline
// код для заданного правила обмена и соответствующие ему параметры номенклатуры
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  Данные        - <Структура> - Структура, содержащая поля: Номенклатура, Характеристика, ЕдиницаИзмерения
//  Код           - <Число> - Код товара в разрезе правила обмена.
//  Используется  - <Число> - Признак того, что товар соответствует заданному в правиле обмена отбору.
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаписатьКод(Данные, ПравилоОбмена, Код, Используется) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	
	МенеджерЗаписи.Код             = Код;
	МенеджерЗаписи.ПравилоОбмена   = ПравилоОбмена;
	МенеджерЗаписи.Используется    = Используется;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

// Процедура очищает параметры номенклатуры для записи, соответствущей коду в пределах правила обмена
// в регистре КодыТоваровПодключаемогоОборудованияOffline.
// Такая запись становится свободной.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  Код           - <Число> - Код товара в разрезе правила обмена.
//
// Возвращаемое значение:
//  Нет
//
Процедура УдалитьКод(ПравилоОбмена, Код) Экспорт
	
	ЗаписатьКод(Новый Структура("Номенклатура, Характеристика, Партия, ЕдиницаИзмерения"), ПравилоОбмена, Код , Ложь);
	
КонецПроцедуры

// Процедура обновляет записи в регистре КодыТоваровПодключаемогоОборудованияOffline
// в соответствии с правилом обмена. Записи, не соответствующие отбору правила становятся
// неиспользуемыми. Добавляются новые записи, соответствующие отбору, если такие будут найдены.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//
// Возвращаемое значение:
//  Нет
//
Процедура ОбновитьКодыТоваров(ПравилоОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.СтруктурнаяЕдиница.РозничныйВидЦен КАК ВидЦен,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипПодключаемогоОборудования,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ПрефиксВесовогоТовара КАК ПрефиксВесовогоТовара
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline
		ИЛИ Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.WebСервисОборудование Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(Выборка.НастройкиКомпоновкиДанных.Получить());
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Партия");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("СоответствуетОтбору");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Код");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Используется");
	ВыбранноеПоле.Использование = Истина;
	
	//СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДата();
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦен");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Выборка.ВидЦен;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЕдиницаИзмеренияВеса");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Выборка.ЕдиницаИзмеренияВеса;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматШтрихкода");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(Выборка.ПрефиксВесовогоТовара);
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	НачатьТранзакцию();
	PLU = ПолучитьМаксимальныйКод( ПравилоОбмена) + 1;
	СвободныеPLU = ПолучитьСвободныеКоды( ПравилоОбмена);
	Для Каждого Капсула Из ДанныеОтчета Цикл
		Если Капсула.СоответствуетОтбору Тогда
			Если Не ЗначениеЗаполнено(Капсула.Код) Тогда
				Если СвободныеPLU.Количество() = 0 Тогда
					ЗаписатьКод(Капсула, ПравилоОбмена, PLU, Истина);
					PLU = PLU + 1;
				Иначе
					ЗаписатьКод(Капсула, ПравилоОбмена, СвободныеPLU[0].Код, Истина);
					СвободныеPLU.Удалить(0);
				КонецЕсли;
			Иначе
				ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Истина);
			КонецЕсли;
		Иначе
			ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Ложь);
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура выполняет обновление кодов товаров для всех правил обмена.
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура РегламентноеЗаданиеОбновитьКодыТоваров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ОбновитьКодыТоваров(Выборка.ПравилоОбмена);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'"),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru = 'Во время регламентного обновления кодов товаров подключаемого оборудования Offline произошла ошибка.'")
			                         + Символы.ПС + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ТОВАРОВ

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк
//
Функция ПолучитьДанныеДляВесов(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные И Параметры.ВыгружатьИзменения);
	
	ВозвращаемоеЗначение = Новый Структура(
		"Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры",
		Новый Массив(),
		0,
		ТолькоИзмененные И Параметры.ВыгружатьИзменения,
		Параметры
	);
	
	Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		ЭлементМассива = Новый Структура("PLU, Код, Штрихкод, Наименование, Цена, ОписаниеТовара", 0, 0, "", "" , 0, "");
		ЭлементМассива.PLU = СтрокаТЧ.Код;
		ЭлементМассива.Код = СтрокаТЧ.Код;
		Если СтрокаТЧ.Используется Тогда
			ЭлементМассива.Штрихкод     = Сред(СтрокаТЧ.МассивШтрихкодов[0], 3, 5);
			ЭлементМассива.Наименование = Строка(СтрокаТЧ.Номенклатура);
			ЭлементМассива.Цена         = СтрокаТЧ.Цена;
			ЭлементМассива.ОписаниеТовара = Строка(СтрокаТЧ.Комментарий);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в ККМ Offline
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк
//
Функция ПолучитьДанныеДляКассы(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные И Параметры.ВыгружатьИзменения);
	
	ВозвращаемоеЗначение = Новый Структура(
		"Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры",
		Новый Массив(),
		0,
		ТолькоИзмененные И Параметры.ВыгружатьИзменения,
		Параметры);
	
	Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		ЭлементМассива = Новый Структура(
			"Код, Артикул, Штрихкод, Наименование, НаименованиеПолное, ЕдиницаИзмерения, Цена, Остаток, ВесовойТовар, СтавкаНДС, УникальныйИдентификатор, Алкоголь",
			0, "", "", "", "", "", 0, 0, Ложь, Неопределено, Ложь);
		Если СтрокаТЧ.Используется Тогда
			ЭлементМассива.Код                = СтрокаТЧ.Код;
			ЭлементМассива.Штрихкод           = СтрокаТЧ.Штрихкод;
			ЭлементМассива.Артикул            = СтрокаТЧ.Артикул;
			ЭлементМассива.Наименование       = СтрокаТЧ.Наименование;
			ЭлементМассива.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
			ЭлементМассива.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаХраненияНаименование;
			ЭлементМассива.СтавкаНДС          = Строка(УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТЧ.СтавкаНДС));
			ЭлементМассива.Цена               = СтрокаТЧ.Цена;
			ЭлементМассива.Остаток            = СтрокаТЧ.Остаток;
			ЭлементМассива.ВесовойТовар       = СтрокаТЧ.Весовой;
			ЭлементМассива.УникальныйИдентификатор = СтрокаТЧ.УникальныйИдентификатор;
			ЭлементМассива.Алкоголь           = СтрокаТЧ.Алкоголь;
			
			Если ЭлементМассива.Алкоголь Тогда
				ЭлементМассива.Вставить("Маркируемый", СтрокаТЧ.Маркируемый);
				ЭлементМассива.Вставить("КодВидаАлкогольнойПродукции", СтрокаТЧ.КодВидаАлкогольнойПродукции);
				ЭлементМассива.Вставить("ЕмкостьТары", СтрокаТЧ.ЕмкостьТары);
				ЭлементМассива.Вставить("Крепость", СтрокаТЧ.Крепость);
				ЭлементМассива.Вставить("ИННПроизводителя", СтрокаТЧ.ИННПроизводителя);
				ЭлементМассива.Вставить("КПППроизводителя", СтрокаТЧ.КПППроизводителя);
			КонецЕсли;
			ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает таблицу товаров с данными к выгрузке в устройство
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//  ОбновитьКодыТоваров - <Булево> - Флаг обновления кодов товаров перед получением данных.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> товаров к выгрузке
//
Функция ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, ОбновитьКодыТоваров = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальноеЗначениеВесовогоКода = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаВесовогоШтрихкодаЧислом(Параметры.ПрефиксВесовогоТовара);
	
	Если ОбновитьКодыТоваров Тогда
		ОбновитьКодыТоваров(Параметры.ПравилоОбмена);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Артикул,"""") КАК Артикул,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование,"""")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Комментарий,"""") КАК Комментарий,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """") КАК ХарактеристикаНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Партия КАК Партия,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Партия.Наименование, """")       КАК ПартияНаименование,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаХранения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаХраненияНаименование,
	|	КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР КОГДА КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА 1 ИНАЧЕ ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения.Коэффициент, 1) КОНЕЦ КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	(ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения.Коэффициент, 1)
	|		/ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ИСТИНА КАК Весовой,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция КАК Алкоголь,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукции.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиЕстьИзменения
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Партия = ШтрихкодыНоменклатуры.Партия
	|			И КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
	|			//ВесыСПечатьюЭтикеток И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК КодыТоваровПодключаемогоОборудованияOfflineИзменения
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Код = КодыТоваровПодключаемогоОборудованияOfflineИзменения.Код
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|		И ТоварыНаСкладахОстатки.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|		И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|		И КодыТоваровПодключаемогоОборудованияOffline.Партия = ТоварыНаСкладахОстатки.Партия
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	
	|//ТолькоИзмененные И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|//ТолькоИзмененные И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Если Параметры.ЧастичнаяВыгрузка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ТолькоИзмененные","");
	КонецЕсли;
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ВесыСПечатьюЭтикеток","");
		Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(Параметры.ПрефиксВесовогоТовара));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	
	Запрос.УстановитьПараметр("ВидЦен",                Параметры.ВидЦен);
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ТекущаяДата",            КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.ПравилоОбмена.СтруктурнаяЕдиница);
	
	КЧ = Новый КвалификаторыЧисла(18,2);
	Массив = Новый Массив;
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЦена = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",            Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Комментарий",            Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатураНаименование",    Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатураНаименованиеСПартией",    Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Партия",             Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ПартияНаименование",             Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаУпаковки",    Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",   Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаХранения",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаХраненияНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",   Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               ОписаниеТиповЦена);
	ТаблицаТоваров.Колонки.Добавить("Весовой",                Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ТребуетсяУказаниеСерий", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",             Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КоэффициентУпаковки", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",          Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",            Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоГруппа",          Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры",    Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("УникальныйИдентификатор"   , Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Алкоголь",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Маркируемый",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаАлкогольнойПродукции",	Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕмкостьТары",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Крепость",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ИННПроизводителя",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КПППроизводителя",				Новый ОписаниеТипов("Строка"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				
				НоваяСтрока.Используется                = Выборка.Используется;
				НоваяСтрока.Код                         = Выборка.Код;
				НоваяСтрока.Артикул                     = Выборка.Артикул;
				НоваяСтрока.Номенклатура                = Выборка.Номенклатура;
				НоваяСтрока.Комментарий                 = Выборка.Комментарий;
				НоваяСтрока.Характеристика              = Выборка.Характеристика;
				НоваяСтрока.ХарактеристикаНаименование  = Выборка.ХарактеристикаНаименование;
				НоваяСтрока.Партия                      = Выборка.Партия;
				НоваяСтрока.ПартияНаименование          = Выборка.ПартияНаименование;
				НоваяСтрока.ЕдиницаХранения             = Выборка.ЕдиницаХранения;
				НоваяСтрока.ЕдиницаХраненияНаименование = Выборка.ЕдиницаХраненияНаименование;
				НоваяСтрока.Упаковка                    = Выборка.ЕдиницаИзмерения;
				НоваяСтрока.УпаковкаНаименование        = Выборка.ЕдиницаИзмеренияНаименование;
				НоваяСтрока.ЕдиницаУпаковки             = Выборка.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияНаименование = Выборка.ЕдиницаИзмеренияНаименование;
				НоваяСтрока.Наименование                = 
					УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
						Выборка.НоменклатураНаименование,
						Выборка.ХарактеристикаНаименование
					)
					+ ?(ЗначениеЗаполнено(Выборка.ПартияНаименование),
						", (" + Выборка.ПартияНаименование + ")",
						""
						)
					+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияНаименование),
						", (" + Выборка.ЕдиницаИзмеренияНаименование + ")",
						""
						);
				НоваяСтрока.НаименованиеПолное          = НоваяСтрока.Наименование;
				НоваяСтрока.НоменклатураНаименованиеСПартией        = 
					УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
						Выборка.НоменклатураНаименование
					)
					+ ?(ЗначениеЗаполнено(Выборка.ПартияНаименование),
						" (" + Выборка.ПартияНаименование + ")",
						""
						);
				НоваяСтрока.Цена                        = Выборка.Цена;
				НоваяСтрока.Весовой                     = Выборка.Весовой;
				НоваяСтрока.ИндексКартинкиЕстьИзменения = Выборка.ИндексКартинкиЕстьИзменения;
				НоваяСтрока.Штрихкод                    = Штрихкод;
				НоваяСтрока.КоэффициентУпаковки         = Выборка.КоэффициентУпаковки;
				НоваяСтрока.НоменклатураНаименование    = Выборка.НоменклатураНаименование;
				НоваяСтрока.СтавкаНДС                   = Выборка.СтавкаНДС;
				НоваяСтрока.Остаток                     = Выборка.КоличествоОстаток;
				НоваяСтрока.ЭтоГруппа                   = Выборка.ЭтоГруппа;
				НоваяСтрока.ТипНоменклатуры             = Выборка.ТипНоменклатуры;
				НоваяСтрока.УникальныйИдентификатор     = Выборка.Номенклатура.УникальныйИдентификатор();
				НоваяСтрока.Алкоголь                    = Выборка.Алкоголь;
				НоваяСтрока.Маркируемый                 = Выборка.Маркируемый;
				НоваяСтрока.КодВидаАлкогольнойПродукции = Выборка.КодВидаАлкогольнойПродукции;
				НоваяСтрока.ЕмкостьТары                 = Выборка.ЕмкостьТары;
				НоваяСтрока.Крепость                    = Выборка.Крепость;
				НоваяСтрока.ИННПроизводителя            = Выборка.ИННПроизводителя;
				НоваяСтрока.КПППроизводителя            = Выборка.КПППроизводителя;
				
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + "," + Штрихкод;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток
			И ОбновитьКодыТоваров
			И (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод)) Тогда
			
				ПредыдущееЗначениеМаксимальноеЗначениеВесовогоКода = МаксимальноеЗначениеВесовогоКода;
				МаксимальноеЗначениеВесовогоКода                   = Мин(МаксимальноеЗначениеВесовогоКода + 1, 99999);
				
				НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(МаксимальноеЗначениеВесовогоКода, Параметры.ПрефиксВесовогоТовара);
				НоваяСтрока.МассивШтрихкодов.Добавить(НоваяСтрока.Штрихкод);
				
				Попытка
					МенеджерЗаписиШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
					МенеджерЗаписиШтрихкода.Номенклатура   = НоваяСтрока.Номенклатура;
					МенеджерЗаписиШтрихкода.Характеристика = НоваяСтрока.Характеристика;
					МенеджерЗаписиШтрихкода.Партия = НоваяСтрока.Партия;
					МенеджерЗаписиШтрихкода.ЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмерения;
					МенеджерЗаписиШтрихкода.Штрихкод       = НоваяСтрока.Штрихкод;
					МенеджерЗаписиШтрихкода.Записать();
				Исключение
					НоваяСтрока.Штрихкод = "";
					НоваяСтрока.МассивШтрихкодов.Очистить();
				КонецПопытки;
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Цена)
			ИЛИ НоваяСтрока.ТребуетсяУказаниеСерий
			ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.Наименование)
			ИЛИ (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод) И Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток)
			ИЛИ (ЗначениеЗаполнено(Параметры.МаксимальныйКод) И НоваяСтрока.Код > Параметры.МаксимальныйКод) Тогда
			НоваяСтрока.ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ТОВАРЫ ПРАВИЛА ВЫГРУЗКИ

// Функция возвращает таблицу товаров с данными о товарам для правила выгрузки с ценами
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  ВидЦен - <СправочникСсылка.ВидыЦен>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьТаблицуТоваровДляПравила(ПравилоОбмена, ВидЦен) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПараметры = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипОборудования,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ПрефиксВесовогоТовара КАК ПрефиксВесовогоТовара
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
	
	ЗапросПараметры.УстановитьПараметр("Ссылка", ПравилоОбмена);
	
	Параметры = ЗапросПараметры.Выполнить().Выбрать();
	Параметры.Следующий();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование, """")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное, """") КАК НоменклатураНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """") КАК ХарактеристикаНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Партия КАК Партия,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Партия.Наименование, """")       КАК ПартияНаименование,
	|	КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	(ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения.Коэффициент, 1)
	|		/ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ИСТИНА КАК Весовой
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Партия = ШтрихкодыНоменклатуры.Партия
	|			И КодыТоваровПодключаемогоОборудованияOffline.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
	|			//ВесыСПечатьюЭтикеток И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ВесыСПечатьюЭтикеток","");
		Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(Параметры.ПрефиксВесовогоТовара));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	Запрос.УстановитьПараметр("ВидЦен",       ВидЦен);
	Запрос.УстановитьПараметр("ТекущаяДата",   КонецДня(ТекущаяДата()));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Партия",             Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",   Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",          Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				НоваяСтрока.Используется       = Выборка.Используется;
				НоваяСтрока.Код                = Выборка.Код;
				НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
				НоваяСтрока.Характеристика     = Выборка.Характеристика;
				НоваяСтрока.Партия             = Выборка.Партия;
				НоваяСтрока.СтавкаНДС          = Строка(УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Выборка.СтавкаНДС));
				НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
				НоваяСтрока.Наименование                = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
						Выборка.НоменклатураНаименование,
						Выборка.ХарактеристикаНаименование)
					+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияНаименование),
						", (" + Выборка.ЕдиницаИзмеренияНаименование + ")",
						""
				);
				НоваяСтрока.НаименованиеПолное          =  УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
						Выборка.НоменклатураНаименованиеПолное,
						Выборка.ХарактеристикаНаименованиеПолное)
					+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияНаименование),
						", (" + Выборка.ЕдиницаИзмеренияНаименование + ")",
						""
				);
				НоваяСтрока.Цена               = Выборка.Цена;
				НоваяСтрока.Весовой            = Выборка.Весовой;
				НоваяСтрока.Штрихкод           = Штрихкод;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + "," + Штрихкод;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции
