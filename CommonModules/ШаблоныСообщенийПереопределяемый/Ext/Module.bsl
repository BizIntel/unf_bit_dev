
#Область ПрограммныйИнтерфейс

// Определяет состав назначений и общие реквизиты в шаблонах сообщений 
//
// Параметры:
//  Настройки - Структура - Структура с ключами:
//    * ПредметыШаблонов - ТаблицаЗначений - Содержит варианты предметов для шаблонов. Колонки:
//         ** Имя           - Строка - Уникальное имя назначения.
//         ** Представление - Строка - Представление варианта.
//         ** Макет         - Строка - Имя макета СКД, если состав реквизитов определяется посредством СКД.
//         ** ЗначенияПараметровСКД - Структура - Значения параметров СКД для текущего предмета шаблона сообщения.
//    * ОбщиеРеквизиты - ТаблицаЗначений - Содержит описание общих реквизитов доступных во всех шаблонах. Колонки:
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип общего реквизита. По умолчанию строка.
//    * ИспользоватьПроизвольныеПараметры  - Булево - указывает, можно ли использовать произвольные пользовательские параметры в шаблонах сообщений.
//    * ЗначенияПараметровСКД - Структура - Общие значения параметров СКД, для всех макетов, где состав реквизитов определяется средствами СКД.
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ИспользоватьПроизвольныеПараметры = Истина;
	
	Для Каждого ПредметШаблона Из Настройки.ПредметыШаблонов Цикл
		Если СтрНайти(ПредметШаблона.Имя, "Документ") > 0 Тогда
			ПредметШаблона.Макет = "СКД_ДанныеШаблонаСообщений";
		КонецЕсли;
		Если ПредметШаблона.Имя = Метаданные.Документы.ЗаказПокупателя.ПолноеИмя()
			И ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы") Тогда
			
			ПредметШаблона.Представление = НСтр("ru='Заказ покупателя (заказ-наряд)'");
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		Предмет = Настройки.ПредметыШаблонов.Найти(Метаданные.Документы.ЗаказНаПроизводство.ПолноеИмя(), "Имя");
		Если Предмет <> Неопределено Тогда
			Настройки.ПредметыШаблонов.Удалить(Предмет);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
		Предмет = Настройки.ПредметыШаблонов.Найти(Метаданные.Документы.ПриемИПередачаВРемонт.ПолноеИмя(), "Имя");
		Если Предмет <> Неопределено Тогда
			Настройки.ПредметыШаблонов.Удалить(Предмет);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Предмет = Настройки.ПредметыШаблонов.Добавить();
		Предмет.Имя = "ДоговорыКонтрагентов";
		Предмет.Представление = НСтр("ru='Договор обслуживания'");
		Предмет.Макет = "СКД_ДанныеШаблонаСообщений";
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  НазначениеШаблона       - Строка  - Имя назначения шаблон сообщения.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.РазворачиватьСсылочныеРеквизиты = Ложь;
	
	Если НазначениеШаблона = "ДоговорыКонтрагентов" Тогда
		
		ШаблоныСообщений.СформироватьСписокРеквизитовПоСКД(Реквизиты, Справочники.ДоговорыКонтрагентов.ПолучитьМакет("СКД_ДанныеШаблонаСообщений"));
		
		// Счет на оплату
		МетаданныеОбъекта = Документы.СчетНаОплату.ПустаяСсылка().Метаданные();
		Описание = Новый Структура("ОписаниеТипа, Представление");
		Описание.ОписаниеТипа = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату");
		Описание.Представление = МетаданныеОбъекта.Представление();
		ДополнительныеПараметры.Параметры.Вставить(МетаданныеОбъекта.Имя, Описание);
		
		// Акт выполненных работ
		МетаданныеОбъекта = Документы.АктВыполненныхРабот.ПустаяСсылка().Метаданные();
		Описание = Новый Структура("ОписаниеТипа, Представление");
		Описание.ОписаниеТипа = Новый ОписаниеТипов("ДокументСсылка.АктВыполненныхРабот");
		Описание.Представление = МетаданныеОбъекта.Представление();
		ДополнительныеПараметры.Параметры.Вставить(МетаданныеОбъекта.Имя, Описание);
		
		// Добавим команды печати, которые БСП проигнорирует из за клиентского обработчика.
		ОпределитьСписокПечатныхФормСКлиентскимиОбработчиками(Вложения);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//    * ДополнительныеПараметры - Структура - Дополнительные параметры сообщения. 
//  НазначениеШаблона - Строка -  полное имя назначения шаблон сообщения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ПараметрыШаблона - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона) Экспорт
	
	
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  НазначениеШаблона - Строка - идентификатор назначения шаблона
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, НазначениеШаблона, ПредметСообщения) Экспорт
	
	
	
КонецПроцедуры

// Заполняет список получателей почты при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  НазначениеШаблона - Строка - идентификатор назначения шаблона
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения) Экспорт
	
	ПолучателиПисьма.Очистить();
	
	Предмет = ПредметСообщения;
	Если ТипЗнч(ПредметСообщения) = Тип("Структура") И ПредметСообщения.Свойство("Предмет") Тогда
		Предмет = ПредметСообщения.Предмет;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Получатель", Новый Массив);
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(
		ПараметрыОтправки,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет),
		Неопределено
	);
	
	Для Каждого Получатель Из ПараметрыОтправки.Получатель Цикл
		ПолучательПисьма = ПолучателиПисьма.Добавить();
		ПолучательПисьма.Адрес			= Получатель.Адрес;
		ПолучательПисьма.Представление	= Строка(Получатель.Представление);
		ПолучательПисьма.Контакт		= Получатель.Представление;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УНФ

Функция ЕстьДоступныеШаблоны(ДляПисем, Предмет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныСообщений.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПредназначенДляЭлектронныхПисем = ИСТИНА
		|	И ШаблоныСообщений.Назначение <> ""Служебный""
		|	И ШаблоныСообщений.ПометкаУдаления = ЛОЖЬ";
	
	Если Не ДляПисем Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШаблоныСообщений.ПредназначенДляЭлектронныхПисем", "ШаблоныСообщений.ПредназначенДляSMS");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		Запрос.Текст = Запрос.Текст + " И (ШаблоныСообщений.ПредназначенДляВводаНаОсновании = ЛОЖЬ ИЛИ ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = &ПолноеИмяТипаПредмета)";
		ПолноеИмяТипаОснования = Предмет.Метаданные().ПолноеИмя();
		Запрос.УстановитьПараметр("ПолноеИмяТипаПредмета", ПолноеИмяТипаОснования);
	Иначе 
		Запрос.Текст = Запрос.Текст + " И ШаблоныСообщений.ПредназначенДляВводаНаОсновании = ЛОЖЬ";
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОпределитьСписокПечатныхФормСКлиентскимиОбработчиками(Вложения)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		
		ИсточникиКомандПечати = УправлениеПечатью.ИсточникиКомандПечати();
		
		// Счет на оплату.
		МетаданныеОбъект = Метаданные.Документы.СчетНаОплату;
		Если ИсточникиКомандПечати.Найти(МетаданныеОбъект) <> Неопределено Тогда
			КомандыПечатиОбъекта = УправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(МетаданныеОбъект);
			
			ВыбранныеКомандыПечати = Новый Массив;
			
			КомандаПечати = КомандыПечатиОбъекта.Найти("СчетНаОплату", "Идентификатор");
			ВыбранныеКомандыПечати.Добавить(КомандаПечати);
			
			КомандаПечати = КомандыПечатиОбъекта.Найти("СчетНаОплатуСФаксимильнойПодписью", "Идентификатор");
			ВыбранныеКомандыПечати.Добавить(КомандаПечати);
			
			Для каждого КомандаПечати Из ВыбранныеКомандыПечати Цикл
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.Имя = КомандаПечати.Идентификатор;
				НоваяСтрока.Идентификатор = КомандаПечати.УникальныйИдентификатор;
				НоваяСтрока.Представление = КомандаПечати.Представление;
				НоваяСтрока.МенеджерПечати = КомандаПечати.МенеджерПечати;
				НоваяСтрока.ТипФайла = "MXL";
				НоваяСтрока.Статус = "ПечатнаяФорма";
				НоваяСтрока.ИмяПараметра = МетаданныеОбъект.Имя;
			КонецЦикла;
		КонецЕсли;
		
		// Счет-фактура
		МетаданныеОбъект = Метаданные.Документы.СчетФактура;
		Если ИсточникиКомандПечати.Найти(МетаданныеОбъект) <> Неопределено Тогда
			КомандыПечатиОбъекта = УправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(МетаданныеОбъект);
			
			ВыбранныеКомандыПечати = Новый Массив;
			
			КомандаПечати = КомандыПечатиОбъекта.Найти("СчетФактура", "Идентификатор");
			
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Имя = КомандаПечати.Идентификатор;
			НоваяСтрока.Идентификатор = КомандаПечати.УникальныйИдентификатор;
			НоваяСтрока.Представление = КомандаПечати.Представление;
			НоваяСтрока.МенеджерПечати = КомандаПечати.МенеджерПечати;
			НоваяСтрока.ТипФайла = "MXL";
			НоваяСтрока.Статус = "ПечатнаяФорма";
			НоваяСтрока.ИмяПараметра = МетаданныеОбъект.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти