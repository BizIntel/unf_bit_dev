////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументСсылка.РасходнаяНакладная") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ПараметрыЭД.ВидЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВидЭлектронногоДокументаРеализации(Источник);
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриходнаяНакладная")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			Если ФорматCML Тогда
				Если Источник.Запасы.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
				Иначе
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
				КонецЕсли;
			Иначе
				Если Источник.Запасы.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
				Иначе
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		ПараметрыЭД.ВидЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВидЭлектронногоДокументаКорректировки(Источник);
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		 
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплату") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда 
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ЗаказТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидОперации");
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
			Если Не ЗначениеЗаполнено(ВидЭД) Тогда
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			КонецЕсли;
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ОтветНаЗаказ;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
	
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактура") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактура") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.АктИсполнитель;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.СчетФактура
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактура") Тогда
		Возврат СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо");
	
КонецПроцедуры

// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
	СоответствиеСтавокНДС = Новый Соответствие();
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.СтавкиНДС КАК СтавкиНДС");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеСтавокНДС.Вставить(Выборка.Ссылка, Выборка.Ставка);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		СписокСпособовОбработки.Добавить("КорректировкаПоступления", НСтр("ru = 'Корректировка поступления'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокСпособовОбработки.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда	
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокСпособовОбработки.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ покупателя'"),Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура (полученный)'"),Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура (полученный)'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокСпособовОбработки.Добавить("СчетНаОплатуПоставщика", НСтр("ru = 'Счет на оплату (полученный)'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - переопределяет имя объекта метаданных для способа обработки входящего электронного документа,
//			   по-умолчанию совпадает с именем способа обработки.
//
// Параметры:
//  СпособОбработки - Строка - один из доступных способов обработки входящего документа
//  ИмяДокумента - Строка - переменная в которую будет помещено имя объекта метаданных, соответствующее переданному способу обработки.
//
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента) Экспорт 
	
	
	
КонецПроцедуры

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информациионной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец,         НСтр("ru = 'Реализация товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктИсполнитель,         НСтр("ru = 'Реализация услуг'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав,      НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура,            НСтр("ru = 'Счет-фактура'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель, НСтр("ru = 'Корректировка реализации'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, НСтр("ru = 'Счет-фактура (корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КаталогТоваров,         НСтр("ru = 'Справочник Настройка ЭДО'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтветНаЗаказ,           НСтр("ru = 'Заказ поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ЗаказТовара,            НСтр("ru = 'Заказ покупателя'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ПрайсЛист,              НСтр("ru = 'Справочник Настройка ЭДО'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетНаОплату,           НСтр("ru = 'Счет на оплату'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, "");
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, "");
	
КонецПроцедуры

// Процедура - Переопределяет заполнение таблицы соответствия видов ЭД и способов обработки по имени профиля,
//			   который используется в форме настройки ЭДО на закладке "Входящие электронные документы".
//
// Параметры:
//  ТаблицаПрофиля	 - ТаблицаЗначений - таблица, содержащая соответствие видов электронных документов и способов обработки
//  Профиль			 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
//
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль) Экспорт 
	
КонецПроцедуры 

// Ищет документ владелец электронного документа, который мог быть получен через ЕГАИС.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, полученный через ЕГАИС.
//  ИдентификаторДокумента - Строка - Идентификатор документа отправителя.
//
Процедура НайтиРанееПолученныйДокумент(Документ, ИдентификаторДокумента) Экспорт
	
	
	
КонецПроцедуры

Процедура УстановленоСостояниеОбменЗавершен(ОснованияЭлектронногоДокумента) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования в библиотеке справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = Ложь;
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
КонецФункции

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие:
//  ИспользоватьПрокси - использовать ли прокси-сервер
//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//  Сервер       - адрес прокси-сервера
//  Порт         - порт прокси-сервера
//  Пользователь - имя пользователя для авторизации на прокси-сервере
//  Пароль       - пароль пользователя
//
Функция ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
	НастройкаПроксиСервера = Новый Соответствие();
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Истина);
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Истина);
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	НастройкаПроксиСервера.Вставить("Сервер", "");
	НастройкаПроксиСервера.Вставить("Порт", "");
	НастройкаПроксиСервера.Вставить("Пользователь", "");
	НастройкаПроксиСервера.Вставить("Пароль", "");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом

// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры:
//  Организация - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", "Произвольный");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКаталога, "Товары");
	
КонецПроцедуры

// Заполняет данные для электронного документа типа Акт на передачу прав.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		И СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДляПечати = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеДляТОРГ12(СсылкаНаОбъект);
	
	РеквизитыШапки = ДанныеДляПечати.ДанныеШапки;
	ТаблицаДокумента = ДанныеДляПечати.ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");   
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ДанныеСтроки Из ТаблицаДокумента Цикл
		
		Если ДанныеСтроки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.КодТовара;
		СтрокаТаблицыТоваров.Наименование 				= ДанныеСтроки.НаименованиеНоменклатуры;
		СтрокаТаблицыТоваров.Описание 					= ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.Упаковка 					= ДанныеСтроки.ЕдиницаИзмеренияДокумент;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.БазоваяЕдиницаКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.БазоваяЕдиницаНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное = ДанныеСтроки.БазоваяЕдиницаНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = "-";
		
		СтрокаТаблицыТоваров.Количество 		= ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 	= РеквизитыШапки.СуммаВключаетНДС;
		
		Если РеквизитыШапки.СуммаВключаетНДС Тогда
			СтрокаТаблицыТоваров.Сумма = ДанныеСтроки.СуммаСНДС;
			СтрокаТаблицыТоваров.Цена = ?(ДанныеСтроки.Количество = 0, ДанныеСтроки.СуммаСНДС, ДанныеСтроки.СуммаСНДС / ДанныеСтроки.Количество);
		Иначе
			СуммаБезНДС = ДанныеСтроки.Сумма - ?(РеквизитыШапки.СуммаВключаетНДС, ДанныеСтроки.СуммаНДС, 0);
			СтрокаТаблицыТоваров.Сумма = СуммаБезНДС;
			СтрокаТаблицыТоваров.Цена = ?(ДанныеСтроки.Количество = 0, СуммаБезНДС, СуммаБезНДС / ДанныеСтроки.Количество);
		КонецЕсли;
		
		СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
	КонецЦикла;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВставитьЗначениеВДерево(ДеревоДанных, "Номер", РеквизитыШапки.НомерДокумента);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВставитьЗначениеВДерево(ДеревоДанных, "Дата", РеквизитыШапки.ДатаДокумента);
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Курс", "1");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма", ТаблицаДокумента.Итог("СуммаСНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ДокументыСделки = Новый ТаблицаЗначений;
	ДокументыСделки.Колонки.Добавить("Представление");
	НоваяСтрока = ДокументыСделки.Добавить();
	НоваяСтрока.Представление = РеквизитыШапки.Основание;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыСделки, "ДокументыСделки");
	
	СведенияОЛицензиаре = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДокумента);
	СведенияОЛицензиате = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.ДатаДокумента);
	СведенияОПлательщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиаре, "Лицензиар",  "Факт");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиате, "Лицензиат",  "Факт");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПлательщике, "Плательщик", "Юр");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "Товары");
	
	СтруктураЭД.Вставить("СуммаДокумента", ТаблицаДокумента.Итог("СуммаСНДС"));

КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеДляПечати = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеДляПечатнойФормыСоглашениеОбИзмененииСтоимости(СсылкаНаОбъект);
	
	РеквизитыШапки = ДанныеДляПечати.ДанныеШапки;
	ТабличнаяЧасть = ДанныеДляПечати.ТаблицаДокумента;
	
	Если РеквизитыШапки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Корректировка;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапки.Номер));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправления", РеквизитыШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправления", РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсправляемогоДокумента) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,"НомерИсходногоДокумента", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапки.НомерИсправляемогоДокумента));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсходногоДокумента", РеквизитыШапки.ДатаИсправляемогоДокумента);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсправленияИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправленияИсходногоДокумента", РеквизитыШапки.НомерИсправленияИсходногоДокумента);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправленияИсходногоДокумента", РеквизитыШапки.ДатаИсправленияИсходногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокДокументаОснования = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОпределитьТипДокументаОснованияДляЗаголовка(
		РеквизитыШапки.ВидОперации, РеквизитыШапки.ИсправляемыйДокументРеализации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ПредставлениеИсходногоДокумента", ЗаголовокДокументаОснования);
	
	// Вывод общих реквизитов шапки
	СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.БанковскийСчет);
	СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике,       "Поставщик");
	Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель");
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель");
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("ВалютаКод",   РеквизитыШапки.ВалютаКод);  
	СтруктураДопДанных.Вставить("ВидОперации", ВидОперацииЭД);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.Основание) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										"ДокОснованиеНаименование",
										РеквизитыШапки.Основание);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеДата",
									РеквизитыШапки.ОснованиеДата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеНомер",
									РеквизитыШапки.ОснованиеНомер);
									
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(РеквизитыШапки.ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
							ДеревоДанных,
							"ДокументыОснования",
							МассивДокументовОснований);
	КонецЕсли;
									
	// Добавим данные об товарах
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНеттоДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснования");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Описание = Строка.Содержание;
		
		Коэффициент = 1;
		Если ТипЗнч(Строка.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Коэффициент = Строка.ЕдиницаИзмеренияДокумент.Коэффициент;
		КонецЕсли;
		
		НоваяСтрока.МассаНеттоДоКорректировки = Окр(Строка.КоличествоДоКорректировки * Коэффициент, 3);
		НоваяСтрока.МассаНетто = Окр(Строка.Количество * Коэффициент, 3);
		НоваяСтрока.ЦенаДоКорректировки = Окр(Строка.СуммаДоКорректировки / ?(НоваяСтрока.МассаНеттоДоКорректировки = 0, 1, НоваяСтрока.МассаНеттоДоКорректировки), 2);
		НоваяСтрока.Цена = Окр(Строка.Сумма / ?(НоваяСтрока.МассаНетто = 0, 1, НоваяСтрока.МассаНетто), 2);
		НоваяСтрока.СуммаБезНДСДоКорректировки = Строка.СуммаДоКорректировки - ?(РеквизитыШапки.СуммаВключаетНДС, Строка.СуммаНДСДоКорректировки, 0);
		НоваяСтрока.СуммаБезНДС = Строка.Сумма - ?(РеквизитыШапки.СуммаВключаетНДС, Строка.СуммаНДС, 0);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	// Инициализация итогов по документу.
	ИтоговыеСуммы = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"СведенияПоОтпускуГруза.ОтпущеноНаСумму",
								ИтоговыеСуммы.ИтогоСуммаСНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
								ИтоговыеСуммы.ИтогоМест);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
								ИтоговыеСуммы.ИтогоМассаБрутто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.КоличествоМест",
								ИтоговыеСуммы.ИтогоМест);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаБрутто",
								ИтоговыеСуммы.ИтогоМассаБрутто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНетто",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДС",
								ИтоговыеСуммы.ИтогоСуммаБезНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДС",
								ИтоговыеСуммы.ИтогоНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДС",
								ИтоговыеСуммы.ИтогоСуммаСНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНеттоДоКорректировки",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоСуммаДоКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоНДСДоКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных)
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Работа со структурой данных ФНС

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактура") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		СтруктураРезультат = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(СсылкаНаОбъект, Ложь);
		Если СтруктураРезультат <> Неопределено Тогда
			СчетФактура = СтруктураРезультат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования универсального передаточного документа счет-фактура должна быть заполнена.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетФактуры(СчетФактура);
	Если ДанныеДляФормированияЭД.РеквизитыШапки.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Продажа
		И ДанныеДляФормированияЭД.РеквизитыШапки.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Аванс
		И ДанныеДляФормированияЭД.РеквизитыШапки.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для СФ с видом операции ""%1""!'"), ДанныеДляФормированияЭД.РеквизитыШапки.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
	ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.РеквизитыШапки;
	
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаТоваров Цикл
		ПризнакТовара = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПризнакТовара(Строка.Номенклатура);
		Если ПризнакТовара = "1" Тогда
			ЕстьТовары = Истина;
		Иначе
			ЕстьУслуги = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	Если ЕстьТовары Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
	КонецЕсли;
	Если ЕстьУслуги Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДанныеДляФормированияЭД.ДокументыОснования);
	
	ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДатаДоговора)
		ИЛИ ЗначениеЗаполнено(ДанныеШапки.НомерДоговора) Тогда
		НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
		НоваяСтрока.ДокументНомер = ДанныеШапки.НомерДоговора;
		НоваяСтрока.ДокументДата = НачалоДня(ДанныеШапки.ДатаДоговора);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Перевозчик) Тогда
		СведенияОПеревозчике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Перевозчик);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике");
	КонецЕсли;
	
	Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(ДанныеШапки.Организация, ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(Руководители.ФИОКладовщика) Тогда
		
		КладовщикФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Руководители.ФИОКладовщика);
		
		Если ЗначениеЗаполнено(Руководители.КладовщикДолжность) Тогда
			// Кладовщик работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", КладовщикФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", КладовщикФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", КладовщикФИО.Отчество);
		Иначе
			// Кладовщик не работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", КладовщикФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", КладовщикФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", КладовщикФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеШапки.ЭтоКомиссия Тогда
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ПередачаТовараКомитентом";
		НоваяСтрока.Значение = "Истина";
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	СчетФактураПолученный = Неопределено;
	Для каждого СтрокаТаблицы Из СсылкаНаЭД.ВладелецФайла.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			СчетФактураПолученный = СтрокаТаблицы.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СчетФактураПолученный) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетФактурыПолученной(СчетФактураПолученный);
	
	ДанныеШапки = ДанныеДляФормированияЭД.РеквизитыШапки;
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаТоваров Цикл
		ПризнакТовара = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПризнакТовара(Строка.Номенклатура);
		Если ПризнакТовара = "1" Тогда
			ЕстьТовары = Истина;
		Иначе
			ЕстьУслуги = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	Если ЕстьТовары Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
	КонецЕсли;
	Если ЕстьУслуги Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги получены, претензий нет.'"));
	КонецЕсли;
	
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПокупателе.ПолноеНаименование);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДанныеШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",   СодержаниеОперации);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки 	   = ДанныеДляФормированияЭД.РеквизитыШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", ДанныеШапки.Ссылка);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	Если ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс
		ИЛИ ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Авансовый");
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Реализация");
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
	
	Если НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузоотправителе.ОнЖе", Истина);
	Иначе
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель", "Факт");
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр");
	
	Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
				СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
	СведенияОГрузополучателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе", "Факт");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.КодВалюты);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.НаименованиеПолноеВалюты);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.Курс);
		
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	Если ДанныеШапки.Исправление
		И ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		
		ИсправляемыйСчетФактура = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ИсправляемыйСчетФактураВыданный(ДанныеШапки.Ссылка);
		Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
		КонецЕсли;
		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
	
	Для Каждого ПлатежныйДокумент ИЗ ДанныеДляФормированияЭД.ПлатежныеДокументы Цикл
		НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
		НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаПРД;
		НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерПРД;
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаТоваров Цикл
		Если Строка.СуммаБезНДС = 0
			И Строка.СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки         = НомерСтроки;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьСтруктуруДопДанныхНоменклатуры(Строка.Номенклатура, 
																														Строка.Характеристика, 
																														Строка.НаименованиеНоменклатуры);
																														
		НоваяСтрока.ТоварНаименование			 = СтруктураДопДанных.Наименование;
		НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.ЕдиницаИзмеренияНаименование);
		
		НоваяСтрока.Количество                = Строка.Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = Строка.Цена;
		НоваяСтрока.СтоимостьТоваровБезНалога = Строка.СуммаБезНДС;
		НоваяСтрока.НалоговаяСтавка           = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалога               = Строка.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = Строка.СуммаСНДС;
		
		Если ЗначениеЗаполнено(Строка.НомерТаможеннойДекларации) Тогда
			
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод");
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер");
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод    = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьКорректныйКодСтраны(Строка.КодСтраныПроисхождения);
			Декларация.ТаможеннаяДекларацияНомер = ?(ЗначениеЗаполнено(Строка.НомерТаможеннойДекларации), СокрЛП(Строка.НомерТаможеннойДекларации), "");
			НоваяСтрока.СтранаПроисхожденияНаименование = Строка.НаименованиеСтраныПроисхождения;
		КонецЕсли;
		
		НоваяСтрока.Признак = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПризнакТовара(Строка.Номенклатура);
		НоваяСтрока.ТоварКод           = СокрЛП(Строка.КодНоменклатуры);
		НоваяСтрока.ТоварИдентификатор = СтруктураДопДанных.ИД;
		
		Если ТолькоУслуги
			И НоваяСтрока.Признак = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактура") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		СтруктураРезультат = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(СсылкаНаОбъект, Ложь);
		Если СтруктураРезультат <> Неопределено Тогда
			СчетФактура = СтруктураРезультат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования универсального корректировочного документа счет-фактура должна быть заполнена.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	ТаблицаСчетовФактур = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
			МассивСчетовФактур, Документы.СчетФактура.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Истина), Истина);
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
	ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	ОснованиеКорректировки = Новый ТаблицаЗначений;
	ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
	ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
	
	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.СчетФактура, "Договор");
	Если ЗначениеЗаполнено(Договор) Тогда
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
		НоваяСтрока.ДокументНомер = Договор.НомерДоговора;
		НоваяСтрока.ДокументДата = НачалоДня(Договор.ДатаДоговора);
	Иначе
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Отсутствует'");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
	
	МассивОснований = Новый Массив;
	
	Для Каждого Основание ИЗ ДанныеШапки.ТаблицаРеквизитовОснований Цикл
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2, с учетом исправления № %3 от %4'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"),
									Основание.НомерИсправления, Формат(Основание.ДатаИсправления, "ДЛФ=D"));
		Иначе
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"));
		КонецЕсли;
		МассивОснований.Добавить(ОписаниеОснования);
	КонецЦикла;
	
	Если МассивОснований.Количество() > 0 Тогда
		ОписаниеОснований = СтрСоединить(МассивОснований, ", ");
		ОписаниеОснований = НСтр("ru = 'Универсальный передаточный документ'") + " " + ОписаниеОснований;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов",
																	ОписаниеОснований);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	СчетФактураПолученный = СсылкаНаЭД.ВладелецФайла;
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураПолученный, "Дата, Организация");
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыСчетаФактуры.Организация);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПокупателе.ПолноеНаименование);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", РеквизитыСчетаФактуры.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласенй.'"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ДанныеШапки.НомерИсправленияКорректировочного);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
		Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", Основание.НомерСчетаФактуры);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДатаСчетаФактуры);
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
				Основание.НомерИсправления);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
				Основание.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
		
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОПокупателе", "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОКомиссионере", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.Валюта.Код);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.Валюта.НаименованиеПолное);
		
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДанныеШапки.Дата, Новый Структура("Валюта", ДанныеШапки.Валюта));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", СтруктураПоВалюте.Курс);
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	ИсправляемыйСчетФактура = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
	Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
		ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	
	НомерСтроки = 1;
	ТолькоУслуги = Ложь;
	
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.ТоварНаименование        = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод                = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество                = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки    = Строка.ЦенаДоИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения                   = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалога                = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Строка.РазницаБезНДСУменьшение;
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = Строка.СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНалога                = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНалогаУвеличение      = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение      = Строка.РазницаНДСУменьшение;
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогом                = Строка.СтоимостьСНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = Строка.РазницаСНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = Строка.РазницаСНДСУменьшение;
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПризнакТовара(НоваяСтрока.Товар) = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры



// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		И СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДляПечати = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеДляТОРГ12(СсылкаНаОбъект);
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеДляПечати.ДанныеШапки;
	ТабличнаяЧасть = ДанныеДляПечати.ТаблицаДокумента;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапки.НомерДокумента));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	// Вывод общих реквизитов шапки
	СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.БанковскийСчет);
	СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике,       "Поставщик");
	Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель");
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьОснования(ДеревоДанных, РеквизитыШапки);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьТранспортнуюНакладную(ДеревоДанных, РеквизитыШапки);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Описание = Строка.Содержание;
		
		Коэффициент = 1;
		Если ТипЗнч(Строка.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Коэффициент = Строка.ЕдиницаИзмеренияДокумент.Коэффициент;
		КонецЕсли;
		
		НоваяСтрока.МассаНетто = Окр(Строка.Количество * Коэффициент, 3);
		НоваяСтрока.Цена = Окр(Строка.Сумма / ?(НоваяСтрока.МассаНетто = 0, 1, НоваяСтрока.МассаНетто), 2);
		НоваяСтрока.СуммаБезНДС = Строка.Сумма - ?(РеквизитыШапки.СуммаВключаетНДС, Строка.СуммаНДС, 0);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	// Инициализация итогов по документу.
	ИтоговыеСуммы = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.РассчитатьИтоговыеСуммыДокумента(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска",
			РеквизитыШапки.ДатаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.КоличествоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС",
			ИтоговыеСуммы.ИтогоСуммаБезНДС);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС",
			ИтоговыеСуммы.ИтогоНДС);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТОРГ12ПокупательФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеАктВыполненныхРабот(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаРабот;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта",   РеквизитыШапки.НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта",    РеквизитыШапки.ДатаДокумента);
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	Если ЗначениеЗаполнено(РеквизитыШапки.ВалютаКод) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	КонецЕсли;
	
	ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой"
		+ " стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация,  РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик");
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru='В строке %1 табличной части %2 не заполнена номенклатура. Для передачи электронного документа заполнение номенклатуры обязательно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки, Строка.ИмяТабличнойЧасти);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
			Продолжить;
		КонецЕсли;
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = 1;
		Если ТипЗнч(Строка.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Коэффициент = Строка.ЕдиницаИзмеренияДокумент.Коэффициент;
		КонецЕсли;
		
		СтрокаТаблицыДокумента = ТаблицаУслуг.Добавить();
	
		СтрокаТаблицыДокумента.Номенклатура                 = Строка.Номенклатура;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры = Строка.НоменклатураНаименование;
		СтрокаТаблицыДокумента.Описание                 = Строка.Содержание;
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияКод          = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения),Строка.ЕдиницаИзмеренияКод, "796");
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.Количество                   = Строка.Количество * Коэффициент;
		
		СтрокаТаблицыДокумента.СуммаБезНДС     = Строка.Сумма - ?(РеквизитыШапки.СуммаВключаетНДС, Строка.СуммаНДС, 0);
		СтрокаТаблицыДокумента.СуммаСНДС       = Строка.Всего;
		СтрокаТаблицыДокумента.СтавкаНДС       = Строка.СтавкаНДС;
		СтрокаТаблицыДокумента.СуммаНДС        = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.Цена            = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, Окр(Строка.Сумма/СтрокаТаблицыДокумента.Количество,2));
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот", РеквизитыШапки.ДатаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот",  РеквизитыШапки.ДатаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ТаблицаУслуг.Итог("СуммаСНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		РеквизитыШапки.ДатаДокумента);

КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа",
		ТекущаяДатаСеанса());
	
КонецПроцедуры

// Работа со структурой данных ФНС

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеРеализацииТоваровИУслуг(СсылкаНаОбъект);
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	
	Если ДанныеДокумента.ТаблицаТоваров.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Сформируем таблицу товаров
	Для каждого ДанныеСтрокиТоваров Из ДанныеДокумента.ТаблицаТоваров Цикл
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ДобавитьСтрокуТаблицуДанных(СтруктураПараметров.ТаблицаТоваров, ДанныеСтрокиТоваров, СтруктураПараметров, "Товары");
		
	КонецЦикла;
		
	// Рассчитаем итоговые показатели
	ИтоговыеСуммы = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СтруктураИтоговыеСуммы(СтруктураПараметров.ТаблицаТоваров);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров.ВсегоПоНакладной, 
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СтруктураИтоговыеСуммы(СтруктураПараметров.ТаблицаТоваров));
	
	СтруктураПараметров.НомерТоварнойНакладной	= ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
	СтруктураПараметров.ДатаТоварнойНакладной	= РеквизитыШапки.ДатаДокумента;
	СтруктураПараметров.ДокОснованиеНаименование = РеквизитыШапки.ДокОснованиеНаименование;
	СтруктураПараметров.ДокОснованиеНомер		= РеквизитыШапки.ДокОснованиеНомер;
	СтруктураПараметров.ДокОснованиеДата		= РеквизитыШапки.ДокОснованиеДата;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьРеквизитыУчастниковТОРГ12(РеквизитыШапки, СтруктураПараметров);
	
	Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	
	// Заполним данные по подписанту
	ЭтоФизЛицо		= ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	ФИО				= "";
	Должность		= Неопределено;
	
	Если ЭтоФизЛицо Тогда
		
		ФИО			= ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
		
	Иначе
		
		ФИО			= Руководители.ФИОРуководителя;
		Должность	= Руководители.РуководительДолжность;
		
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
	// Заполним сведения по отпуску товара
	СведенияПоОтпускуГруза = СтруктураПараметров.СведенияПоОтпускуГруза;
	СведенияПоОтпускуГруза.ДатаОтпуска		= РеквизитыШапки.ДатаДокумента;
	СведенияПоОтпускуГруза.ОтпущеноНаСумму	= ИтоговыеСуммы.СуммаСНДС;
	СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(ИтоговыеСуммы.СуммаСНДС, РеквизитыШапки.ВалютаДокумента);
	
	// Гл. бухгалтер
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьФИОиДолжность(СведенияПоОтпускуГруза.Бухгалтер, Руководители.ФИОГлавногоБухгалтера, "Главный бухгалтер");
	// Отпуск разрешил
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьФИОиДолжность(СведенияПоОтпускуГруза.ОтпускРазрешил, Руководители.ФИОРуководителя, Руководители.РуководительДолжность);
	// Отпуск произвел
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьФИОиДолжность(СведенияПоОтпускуГруза.ОтпускПроизвел, Руководители.ФИОКладовщика, Руководители.КладовщикДолжность);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	// Заполним данные по подписанту
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	ФИО			= "";
	Должность	= Неопределено;
	
	Если ЭтоФизЛицо Тогда
		
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
		
	Иначе
		
		Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(СтруктураЭД.Организация, СтруктураЭД.ДатаЭД);
		
		ФИО = Руководители.ФИОРуководителя;
		Должность = Руководители.РуководительДолжность;
		
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Продажа Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.Номер КАК Номер,
	|	Документ.ВалютаДокумента.Код КАК КодВалюты,
	|	NULL КАК НомерИсправления,
	|	NULL КАК ДатаВыставления,
	|	ВЫБОР
	|		КОГДА Документ.ДокументОснование ССЫЛКА Документ.РасходнаяНакладная
	|				И Документ.ДокументОснование <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяССылка)
	|			ТОГДА Документ.ДокументОснование.Номер
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НомерДокументаОснования,
	|	ОтветственныеЛица.Сотрудник.Наименование КАК ФИОРуководителя,
	|	NULL КАК СчетФактураОснование,
	|	ВЫБОР
	|		КОГДА Документ.ВалютаДокумента = НациональнаяВалюта.Значение.Ссылка
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВИностраннойВалюте,
	|	Документ.Организация КАК Поставщик,
	|	Документ.Контрагент КАК Покупатель,
	|	Документ.ОнЖе,
	|	Документ.Грузоотправитель,
	|	Документ.Грузополучатель
	|ИЗ
	|	Документ.СчетФактура КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ТипОтветственногоЛица = ЗНАЧЕНИЕ(Перечисление.ТипыОтветственныхЛиц.Руководитель)) КАК ОтветственныеЛица
	|		ПО Документ.Организация = ОтветственныеЛица.Организация,
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|ГДЕ
	|	Документ.Ссылка = &ТекущаяСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДокументЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(255))) = """"
	|			ТОГДА ДокументЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ДокументЗапасы.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДокументЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|			ТОГДА ДокументЗапасы.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ДокументЗапасы.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ДокументЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|			ТОГДА ДокументЗапасы.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ДокументЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ДокументЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ДокументЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|			ТОГДА ДокументЗапасы.Количество
	|		ИНАЧЕ ДокументЗапасы.Количество * ДокументЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ДокументЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|			ТОГДА ДокументЗапасы.Цена
	|		КОГДА ДокументЗапасы.Количество * ДокументЗапасы.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ДокументЗапасы.Сумма / (ДокументЗапасы.Количество * ДокументЗапасы.ЕдиницаИзмерения.Коэффициент)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ДокументЗапасы.Сумма КАК СуммаБезНДС,
	|	ДокументЗапасы.СуммаНДС КАК СуммаНДС,
	|	ДокументЗапасы.Всего КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДокументЗапасы.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяССылка)
	|			ТОГДА ""643""
	|		ИНАЧЕ ДокументЗапасы.СтранаПроисхождения.Код
	|	КОНЕЦ КАК КодСтраныПроисхождения,
	|	ДокументЗапасы.НомерГТД.Код КАК НомерТаможеннойДекларации,
	|	""Дополнительные сведения"" КАК ТекстДопСв,
	|	""без акциза"" КАК Акциза,
	|	ВЫБОР
	|		КОГДА ДокументЗапасы.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяССылка)
	|				ИЛИ ДокументЗапасы.СтавкаНДС.НеОблагается
	|			ТОГДА ""без НДС""
	|		ИНАЧЕ ДокументЗапасы.СтавкаНДС.Ставка
	|	КОНЕЦ КАК СтавкаНДС,
	|	""текст"" КАК СтавкаНДСТип,
	|	ДокументЗапасы.Номенклатура КАК Номенклатура,
	|	ДокументЗапасы.Характеристика КАК Характеристика,
	|	ДокументЗапасы.ЕдиницаИзмерения КАК Упаковка,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	NULL КАК КодВидаОперации
	|ИЗ
	|	Документ.СчетФактура.Запасы КАК ДокументЗапасы
	|ГДЕ
	|	ДокументЗапасы.Ссылка = &ТекущаяСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплаты.НомерПлатежноРасчетногоДокумента КАК НомерПРД,
	|	ДокументыОплаты.ДатаПлатежноРасчетногоДокумента КАК ДатаПРД
	|ИЗ
	|	Документ.СчетФактура.ДатаНомерДокументовОплаты КАК ДокументыОплаты
	|ГДЕ
	|	ДокументыОплаты.Ссылка = &ТекущаяСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|ГДЕ
	|	СчетФактураДокументыОснования.Ссылка = &ТекущаяСчетФактура";
	
	Запрос.УстановитьПараметр("Дата", СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("ТекущаяСчетФактура", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ШапкаДокумента 	   = РезультатЗапроса[0].Выбрать();
	ТаблицаТоваров 	   = РезультатЗапроса[1].Выгрузить();
	ПлатежныеДокументы = РезультатЗапроса[2].Выгрузить();
	ДокументыОснования = РезультатЗапроса[3].Выгрузить();
	
	//Шапка
	ШапкаДокумента.Следующий();
	
	СтруктураПараметров.НомерСчФ				= ШапкаДокумента.Номер;
	СтруктураПараметров.ДатаСчФ					= ШапкаДокумента.Дата;
	
	//Таблица запасов
	СтруктураПараметров.ТаблицаТоваров			= ТаблицаТоваров;
	СтруктураПараметров.СуммаНДСВсего			= ТаблицаТоваров.Итог("СуммаНДС");
	СтруктураПараметров.СуммаБезНДСВсего		= ТаблицаТоваров.Итог("СуммаБезНДС");
	СтруктураПараметров.СуммаСНДСВсего			= ТаблицаТоваров.Итог("Сумма");
	
	//Платежные документы
	СтруктураПараметров.ПлатежныеДокументы		= ПлатежныеДокументы;
	
	// Передаем документы основания.
	СтруктураПараметров.ДокументыОснования = ДокументыОснования;
	
	//Поля из электронного документа
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ШапкаДокумента.Покупатель, ШапкаДокумента.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ШапкаДокумента.Поставщик, ШапкаДокумента.Дата);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Организация, ШапкаДокумента.Поставщик, СведенияОПоставщике);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Контрагент, ШапкаДокумента.Покупатель, СведенияОПокупателе);
	
	Грузоотправитель = ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.Грузоотправитель)ИЛИ (ШапкаДокумента.ОнЖе),
				СтруктураЭД.Организация, ШапкаДокумента.Грузоотправитель);
	Грузополучатель  = ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.Грузополучатель) ИЛИ (ШапкаДокумента.ОнЖе),
				СтруктураЭД.Контрагент, ШапкаДокумента.Грузополучатель);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, Грузоотправитель, 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Грузоотправитель, ШапкаДокумента.Дата));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Грузополучатель, Грузополучатель,
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Грузополучатель, ШапкаДокумента.Дата));
	
	// Заполним данные по подписанту
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		ФИО = ШапкаДокумента.ФИОРуководителя;
	КонецЕсли;
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	СтруктураПараметров.Подписант.Должность = "";
	
	// Дополнительные сведения шапки
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("ВИностраннойВалюте", ШапкаДокумента.ВИностраннойВалюте);
	СтруктураДопДанных.Вставить("ВходящийНомерДокументаОснования", ШапкаДокумента.НомерДокументаОснования);
	ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
	
	СтруктураПараметров.КодВалюты = ШапкаДокумента.КодВалюты;
	
	// Табличная часть документа и ее дополнительные сведения
	ТолькоУслуги = 0;
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьСтруктуруДопДанныхНоменклатуры(СтрокаТовары.Номенклатура, 
																														СтрокаТовары.Характеристика, 
																														СтрокаТовары.НаименованиеНоменклатуры);
		СтруктураДопДанных.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТовары.ЕдиницаИзмеренияНаименование);
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Товары", Истина, СтрокаТовары.НомерСтроки);
		
		Если НЕ СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			
			ТолькоУслуги = ТолькоУслуги + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Прочие поля
	СтруктураПараметров.ТолькоУслуги = (ТолькоУслуги <> 0 И ТолькоУслуги = ТаблицаТоваров.Количество());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Работа со структурой данных CML

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	
	
КонецПроцедуры

// УСТАРЕВШАЯ Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	Для каждого Строка Из ТоварыКаталога Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",	ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", 				"Организация, Ид, ДатаФормирования, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Наименование, Номенклатура, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(0, 4));
	ОписаниеТиповСумма		= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповКоличество);
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("Описание");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураПоставщиков.Идентификатор, НЕОПРЕДЕЛЕНО) КАК Ид,
	|	ЕСТЬNULL(НоменклатураПоставщиков.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПоставщиков.Наименование, """") КАК Наименование,
	|	ЗаказПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщику.Характеристика КАК Характеристика,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщику.Количество
	|		ИНАЧЕ ЗаказПоставщику.Количество * ЗаказПоставщику.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщику.Цена
	|		КОГДА ЗаказПоставщику.Количество * ЗаказПоставщику.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ЗаказПоставщику.Сумма / (ЗаказПоставщику.Количество * ЗаказПоставщику.ЕдиницаИзмерения.Коэффициент)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ЗаказПоставщику.Сумма КАК Сумма,
	|	ЗаказПоставщику.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщику.СуммаНДС КАК СуммаНДС,
	|	0 КАК СуммаСкидки,
	|	ЗаказПоставщику.Сумма КАК СуммаСНДС,
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказПоставщику.Номенклатура.Комментарий КАК Описание
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО (НоменклатураПоставщиков.Владелец = ЗаказПоставщику.Ссылка.Контрагент)
	|			И (НоменклатураПоставщиков.Номенклатура = ЗаказПоставщику.Номенклатура)
	|			И (НоменклатураПоставщиков.Характеристика = ЗаказПоставщику.Характеристика)
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	НеУдалосьСопоставитьНоменклатуру = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ид = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сопоставить номенклатуру ""%1"" с номенклатурой поставщика'"),
					Строка(Выборка.Номенклатура) + ?(ЗначениеЗаполнено(Выборка.Характеристика), "(" + Выборка.Характеристика + ")", "") 
																		)
				);
				
			НеУдалосьСопоставитьНоменклатуру = Истина;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ЗначениеЗаполнено(НоваяСтрока.УпаковкаКод) Тогда
			НоваяСтрока.УпаковкаКод = Прав(НоваяСтрока.УпаковкаКод, 3);
			Если СтрДлина(НоваяСтрока.УпаковкаКод) < 3 Тогда
				НоваяСтрока.УпаковкаКод = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НоваяСтрока.УпаковкаКод, 3, "0", "Слева");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеУдалосьСопоставитьНоменклатуру Тогда
		
		СтруктураПараметров.Вставить("ДанныеПодготовлены", Ложь);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Формирование электронного документа отменено.'"));
		
		Возврат ;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Исполнитель",				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 			"4.02");
	СтруктураПараметров.Вставить("Роль", 					"Покупатель");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 			ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 			СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 				СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 						СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",		ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 					СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 					СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",					СсылкаНаОбъект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", 					СсылкаНаОбъект.Курс);
	СтруктураПараметров.Вставить("Сумма",					СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",			СсылкаНаОбъект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 				СсылкаНаОбъект.Запасы.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 					СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",			СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Комментарий",				СсылкаНаОбъект.Комментарий);
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента",	СсылкаНаОбъект.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента",		СсылкаНаОбъект.Дата);
	АдресДоставки = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресДоставки(СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("АдресДоставки", 			АдресДоставки);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.НомерВходящегоДокумента) Тогда
		
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика",	СсылкаНаОбъект.НомерВходящегоДокумента);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика",	СсылкаНаОбъект.ДатаВходящегоДокумента);
		
	КонецЕсли;
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(0, 4));
	ОписаниеТиповСумма 		= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2));
	ОписаниеТиповДата		= Новый ОписаниеТипов("Дата");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповКоличество);
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("ДатаПоступления", ОписаниеТиповДата);
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Номенклатура.Код КАК КодТовара,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Наименование,
	|	ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателя.Количество
	|		ИНАЧЕ ЗаказПокупателя.Количество * ЗаказПокупателя.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателя.Цена
	|		КОГДА ЗаказПокупателя.Количество * ЗаказПокупателя.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ЗаказПокупателя.Сумма / (ЗаказПокупателя.Количество * ЗаказПокупателя.ЕдиницаИзмерения.Коэффициент)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ЗаказПокупателя.Сумма КАК Сумма,
	|	ЗаказПокупателя.Характеристика КАК Характеристика,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	ЗаказПокупателя.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателя.СуммаНДС КАК СуммаНДС,
	|	0 КАК СуммаСкидки,
	|	ЗаказПокупателя.Сумма КАК СуммаСНДС,
	|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаПоступления,
	|	ЗаказПокупателя.Номенклатура.Комментарий КАК Описание
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаТоваров);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		
		ДополнительныеРеквизиты = Новый Структура;
		МассивДопЗначений 		= Новый Массив();
		МассивДопЗначений.Добавить(Строка.ДатаПоступления);
		ДополнительныеРеквизиты.Вставить("ДатаПоступления", МассивДопЗначений);
		Строка.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Исполнитель",				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 			"4.02");
	СтруктураПараметров.Вставить("Роль", 					"Продавец");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика",	СсылкаНаОбъект.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика",	СсылкаНаОбъект.Дата);
	СтруктураПараметров.Вставить("ТаблицаТоваров", 			ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 			СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 				СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 						СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",		ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 					ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураПараметров.Вставить("Дата", 					СсылкаНаОбъект.Дата);
	СтруктураПараметров.Вставить("Валюта",					СсылкаНаОбъект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", 					СсылкаНаОбъект.Курс);
	СтруктураПараметров.Вставить("Сумма",					СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",			СсылкаНаОбъект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 				СсылкаНаОбъект.Запасы.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 					СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",			СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Комментарий", 			СсылкаНаОбъект.Комментарий);
	АдресДоставки = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресДоставки(СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("АдресДоставки", 			АдресДоставки);
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайденныйОбъект = СсылкаНаВладельца;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12 
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		ВидОперации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		Иначе
			ЭтоАкт = СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, ЭтоАкт);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда

		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СохранитьДанныеКаталогаТоваров(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент, Записывать);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ
		ДокументыОснованияСчетаФактуры = Новый Массив();
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУПД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляУПД(ДеревоДанных);
	
	Если ДанныеУПД.Шапка.Исправление Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеУПД);
	Иначе
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеУПД);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУПД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументСчетФактураПолученный(СсылкаНаВладельца, ДанныеУПД);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, ПервичныйДокумент, Записывать);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУКД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляУКД(ДеревоДанных);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеУКД);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначени - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУКД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументСчетФактураПолученный(СсылкаНаВладельца, ДанныеУКД);
	
КонецПроцедуры

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслугДляПередачаТоваров(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура параметров записываемого объекта,
//  ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
// Возвращаемое значение:
//  НовыйЭлемент - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовЭл = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
	Возврат НовЭл;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка КАК Ссылка
	|ИЗ
	|	&ТипСправочника КАК Справочник
	|ГДЕ
	|	&УсловиеПоискаПоИНН И &УсловиеПоискаПоКПП";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипСправочника", "Справочник." + ТипОбъекта); 
	
	Если НЕ ПустаяСтрока(ИНН) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоИНН", "Справочник.ИНН ПОДОБНО (&ИНН)");
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоИНН", Истина);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КПП) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоКПП", "Справочник.КПП ПОДОБНО &КПП");
		Запрос.УстановитьПараметр("КПП", КПП);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоКПП", Истина);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов
//
// Возвращаемое значение:
//  Контрагент.Ссылка - ссылка на справочник контрагентов
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	НачатьТранзакцию();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		СсылкаНового = Неопределено;
		
	Иначе
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		СсылкаНового = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СсылкаОбъекта(Контрагент);
		
	КонецЕсли;
	
	ИНН_КПП = СтруктураРеквизитов.ИНН_КПП;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, СтрНайти(ИНН_КПП,"/")-1);
	Контрагент.КПП = Сред(ИНН_КПП, СтрНайти(ИНН_КПП,"/")+1);
	Контрагент.КодПоОКПО = СтруктураРеквизитов.ОКПО;
	
	// Контактная информация
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.ФактАдресПредставление) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		КИФактическийАдрес = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИФактическийАдрес = Неопределено Тогда
			
			КИФактическийАдрес = Контрагент.КонтактнаяИнформация.Добавить();
			КИФактическийАдрес.Вид = КИВид;
			КИФактическийАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
		КонецЕсли;
			
		КИФактическийАдрес.Представление = СтруктураРеквизитов.ФактАдресПредставление;
		КИФактическийАдрес.ЗначенияПолей = СтруктураРеквизитов.ФактАдресЗначенияПолей;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.ЮрАдресПредставление) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КИЮридическийАдрес = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИЮридическийАдрес = Неопределено Тогда
			
			КИЮридическийАдрес = Контрагент.КонтактнаяИнформация.Добавить();
			КИЮридическийАдрес.Вид = КИВид;
			КИЮридическийАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
		КонецЕсли;
		
		КИЮридическийАдрес.Представление = СтруктураРеквизитов.ЮрАдресПредставление;
		КИЮридическийАдрес.ЗначенияПолей = СтруктураРеквизитов.ЮрАдресЗначенияПолей;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.Телефон) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КИТелефоны = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИТелефоны = Неопределено Тогда
			
			КИТелефоны = Контрагент.КонтактнаяИнформация.Добавить();
			КИТелефоны.Вид = КИВид;
			КИТелефоны.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			
		КонецЕсли;
		
		КИТелефоны.Представление = СтруктураРеквизитов.Телефон;
		КИТелефоны.ЗначенияПолей = "НомерТелефона=" + СокрЛП(СтруктураРеквизитов.Телефон);
		
	КонецЕсли;
	
	// БАНКОВСКИЙ СЧЕТ
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.БИК)
		И ЗначениеЗаполнено(СтруктураРеквизитов.РасчетныйСчет) Тогда
		
		Банки = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", СтруктураРеквизитов.БИК);
		
		Если Банки.Количество() = 0 Тогда
				
			БанкКонтрагента = Справочники.Банки.СоздатьЭлемент();
			БанкКонтрагента.Код = СтруктураРеквизитов.БИК;
			БанкКонтрагента.КоррСчет = СтруктураРеквизитов.КорреспондентскийСчет;
			БанкКонтрагента.Наименование = СтруктураРеквизитов.Банк;
			БанкКонтрагента.Записать();
			
		Иначе
			
			БанкКонтрагента = Банки[0].Ссылка;
			
		КонецЕсли;
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоКоду(СтруктураРеквизитов.РасчетныйСчет);
		Если НЕ ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.СоздатьЭлемент();
			
			Если СсылкаНового = Неопределено Тогда
				БанковскийСчетКонтрагента.Владелец = Контрагент.Ссылка;
			Иначе
				БанковскийСчетКонтрагента.Владелец = СсылкаНового;
			КонецЕсли;
			
			БанковскийСчетКонтрагента.Банк = БанкКонтрагента;
			БанковскийСчетКонтрагента.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
			БанковскийСчетКонтрагента.НомерСчета = СтруктураРеквизитов.РасчетныйСчет;
			БанковскийСчетКонтрагента.Наименование = СтруктураРеквизитов.РасчетныйСчет + ", в " + БанкКонтрагента.Наименование;
			БанковскийСчетКонтрагента.ОбменДанными.Загрузка = Истина;
			БанковскийСчетКонтрагента.Записать();
			
		КонецЕсли;
		
		Контрагент.БанковскийСчетПоУмолчанию = БанковскийСчетКонтрагента;
		
	КонецЕсли;
	
	Попытка
		
		Контрагент.Записать();
		ЗафиксироватьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю();
		
		Если СсылкаНового <> Неопределено Тогда
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Новый контрагент ""%1"" был успешно создан.'"),
				Контрагент.Наименование);
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные контрагента ""%1"" перезаполнены.'"),
				Контрагент.Наименование);
		КонецЕсли;
		
		Сообщение.Сообщить();
		
		Возврат Контрагент.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка реквизитов контрагента'"), УровеньЖурналаРегистрации.Ошибка,,ТекстОшибки,ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку
//  ИД - идентификатор обмена ЭД
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", НоменклатураПоставщика) Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
		СтруктураВозврата.Характеристика = НоменклатураПоставщика.Характеристика;
	Иначе
		СтруктураВозврата.Номенклатура = Неопределено;
		СтруктураВозврата.Характеристика = Неопределено;
	КонецЕсли;
	
	СтруктураВозврата.Упаковка = Неопределено;
	
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры
//  Контрагент – ссылка на контрагента (Организация или Контрагент)
//  ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
// ИдКонтрагента - строка - значение ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
	Возврат ИдКонтрагента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
	|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
	|	ТаблицаИнформацияОТоваре.Описание КАК Описание
	|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
	|ИЗ
	|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Идентификатор,
	|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Описание,
	|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
	|ИЗ
	|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
	|			И (НоменклатураПоставщиков.Владелец = &Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
	|ГДЕ
	|	(НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL )";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	Для Каждого Запись из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			СпрСсылка = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Запись.Идентификатор, Контрагент, "НоменклатураПоставщика");
			Если Не ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрСсылка = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Запись.Идентификатор, Неопределено, "НоменклатураПоставщика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			Иначе
				СпрОбъект = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				СпрОбъект.Наименование  = Запись.НаименованиеНоменклатурыКонтрагента;
				СпрОбъект.Артикул       = Запись.АртикулНоменклатурыКонтрагента;
				СпрОбъект.Идентификатор = Запись.Идентификатор;
			КонецЕсли;
			СпрОбъект.Владелец      = Контрагент;
			СпрОбъект.Номенклатура   = Запись.Номенклатура;
			СпрОбъект.Характеристика = Запись.ХарактеристикаНоменклатуры;
			Попытка
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,,Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.СопоставлениеДанныхПоНоменклатуре");
	ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНесопоставленнойНоменклатуры",
		СсылкаНаЭД, Истина);
	СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	
	Возврат СтруктураПараметров
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	ДанныеФормы.ЗаполнитьТоварыИзВременногоХранилищаСервер(ЗначениеЗаполнения);
	ДанныеФормы.ОбновитьОтображениеДанных();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если ИмяПеречисления = "СтавкиНДС" Тогда
		
		НайденноеЗначение = ЗначениеПеречисленияСтавкаНДС(ПредставлениеПеречисления);
		
	Иначе
		
		Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
			Если СтрНайти(Врег(ЭлПеречисления.Синоним), Врег(ПредставлениеПеречисления)) > 0
				ИЛИ СтрНайти(Врег(ЭлПеречисления.Имя), Врег(ПредставлениеПеречисления)) > 0 Тогда
				НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - таблица значений с полями: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//  НаименованиеДляСообщенияПользователю.
//    Наименование - передается Оператору ЭДО,
//    НаименованиеДляСообщенияПользователю - выводится в сообщении пользователю ИБ.
//  МассивКонтрагентов - массив ссылок на участников-контрагентов.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Участник,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Код КАК ВнешнийКод,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП КАК АдресЭП,
		|	Контрагенты.Наименование КАК НаименованиеДляСообщенияПользователю
		|ИЗ
		|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник = Контрагенты.Ссылка
		|ГДЕ
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник В(&СписокУчастников)
		|	И УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СписокУчастников", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизитов = ТЗ.Скопировать();
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника - по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Организации") Тогда
		
		Сведения = "Свидетельство № " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИП, "СвидетельствоСерияНомер") 
								+ " от " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИП, "СвидетельствоДатаВыдачи");
		
	КонецЕсли;
	
КонецПроцедуры

// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтакнтаяИнформация.Вид,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Значение,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтакнтаяИнформация
	|ГДЕ
	|	ОрганизацииКонтакнтаяИнформация.Ссылка = &Объект
	|	И (ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	
	Запрос.УстановитьПараметр("Объект", Организация);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТабЗн Цикл
		стр.Значение    = СокрП(стр.Значение);
		стр.Комментарий = СокрП(стр.Комментарий);
	КонецЦикла;
	
	Возврат ТабЗн;
	
КонецФункции

// Возвращает название региона по коду
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение:
//  Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если ПустаяСтрока(КодРегиона) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	КодРегионаЧисло = Число(КодРегиона);
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегионаЧисло);
	
КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	СтруктураАдреса.Вставить("АдресТекст", "");
	СтруктураАдреса.Вставить("КодГАР", "");
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ВидКонтрагента]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Иначе
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	СведенияОбАдресе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СтруктураПараметров[ВидКонтрагента], ВидКонтактнойИнформации);
	
	СтруктураАдреса.АдрТекст   = СведенияОбАдресе.Представление;
	СтруктураАдреса.АдресТекст = СведенияОбАдресе.Представление;
	
	СтруктураАдреса.КодСтраны  = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодСтр     = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.АдресРФ    = СведенияОбАдресе.АдресРФ;
	СтруктураАдреса.КодРегион  = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.КодРегиона = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Индекс     = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Район      = СведенияОбАдресе.Район;
	СтруктураАдреса.Город      = СведенияОбАдресе.Город;
	СтруктураАдреса.НаселПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Улица      = СведенияОбАдресе.Улица;
	СтруктураАдреса.Дом        = СведенияОбАдресе.Дом;
	СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпус;
	СтруктураАдреса.Кварт      = СведенияОбАдресе.Квартира;
	СтруктураАдреса.Квартира   = СведенияОбАдресе.Квартира;
	
КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	АдресЭП = "";
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Получатели = Новый СписокЗначений;
		Получатели.Добавить(Контрагент);
		
		ЭлектронныеАдресаПолучателей = УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПодготовитьЭлектронныеАдресаПолучателей(Получатели, Ложь);
		
		Если ЭлектронныеАдресаПолучателей.Количество() > 0 Тогда
			
			АдресЭП = ЭлектронныеАдресаПолучателей[0].Адрес;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АдресЭП;
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И &УсловияОтбораПоБанку";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЗначениеЗаполнено(Банк) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоБанку", "БанковскиеСчета.Банк = &Банк");
		Запрос.УстановитьПараметр("Банк", Банк);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловияОтбораПоБанку", Истина);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КорреспондентскийСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Наименование, """") КАК БанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Код, """") КАК БанкДляРасчетовБИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.КоррСчет, """") КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	
	
КонецПроцедуры

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		//  Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		ЭСФ.ДатаВыставления = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		//  Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		ЭСФ.Дата = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		//  Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		// Реквизиты Выставлен И КодСпособаВыставления решено не добавлять в конфигурацию
		// с целью упрощения интерфейса.
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		//  Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		// Реквизит КодСпособаПолучения решено не добавлять в конфигурацию
		// с целью упрощения интерфейса.
		ЭСФ.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	
	Возврат УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Валюта = ?(ПустаяСтрока(КодВалюты), Константы.НациональнаяВалюта.Получить(), ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	Возврат УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции

// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда
		Возврат СтавкаНДС.Ставка;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	Если ТипЗнч(СтавкаЧислом) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаЧислом;
	ИначеЕсли ТипЗнч(СтавкаЧислом) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = Строка(СтавкаЧислом);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Наименование ПОДОБНО &НаименованиеЭлементаСправочника
	|	И СтавкиНДС.НеОблагается = &НеОблагается
	|	И СтавкиНДС.Расчетная = &Расчетная");
	
	//В случае если не сможем определить ставку НДС оставим поле пустым
	НаименованиеЭлементаСправочника = Неопределено;
	НеОблагается 					= Неопределено;
	Расчетная 						= Неопределено;
	
	Если ПредставлениеСтавкиНДС = Неопределено ИЛИ ВРЕГ(ПредставлениеСтавкиНДС) = ВРЕГ("без НДС") Тогда
		
		НаименованиеЭлементаСправочника = "Без НДС";
		НеОблагается 					= Истина;
		Расчетная 						= Ложь;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" Тогда
		
		НаименованиеЭлементаСправочника = "0%";
		НеОблагается 					= Ложь;
		Расчетная 						= Ложь;
		
	ИначеЕсли СтрНайти("10#0.1#0,1#0.10#0,10", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "10%";
		НеОблагается 					= Ложь;
		Расчетная 						= Ложь;
		
	ИначеЕсли СтрНайти("18#0.18#0,18#0.18#0,18", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "18%";
		НеОблагается 					= Ложь;
		Расчетная 						= Ложь;

	ИначеЕсли СтрНайти("10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "10% / 110%";
		НеОблагается 					= Ложь;
		Расчетная 						= Истина;
		
	ИначеЕсли СтрНайти("18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "18% / 118%";
		НеОблагается 					= Ложь;
		Расчетная 						= Истина;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаСправочника", НаименованиеЭлементаСправочника);
	Запрос.УстановитьПараметр("НеОблагается", 					НеОблагается);
	Запрос.УстановитьПараметр("Расчетная", 						Расчетная);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	ОтветственныйПоЭД = Пользователи.ТекущийПользователь();
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ВидКонтрагента") <> Неопределено Тогда
		
		ЭтоФизЛицо = ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
			ИЛИ ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		
	ИначеЕсли ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
		
		ЭтоФизЛицо = ДанныеКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	КонецЕсли;
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	
	
	Возврат Ложь;
	
КонецФункции

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат "Артикул";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'утверждение ЭД'"), УровеньЖурналаРегистрации.Ошибка,,ТекстОшибки,ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - ДокументОбъект - проверяемый объект
//  Отказ - Булево - в случае запрета изменения, устанавливается Истина
//
Процедура ПроверитьВозможностьРедактированияОбъекта(Источник, Отказ) Экспорт
	
	
КонецПроцедуры

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав на настройку параметров электронных документов.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоНастройкиПараметровЭД() Экспорт
	
	Результат = Пользователи.РолиДоступны("НастройкаПараметровЭД") ИЛИ Пользователи.ЭтоПолноправныйПользователь();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами форм

// В процедуре можно сформировать список пользователей, которым можно перенаправить на рассмотрение
// электронные документы (МассивЭД). Если в процедуре будет определён список пользователей, то он будет
// использоваться в качестве выпадающего списка на форме Обработки.ОбменСКонтрагентами.ПеренаправлениеЭД.
//
// Параметры:
//    МассивЭД           - Массив - элементы массива - ссылки на электронные документы, которые требуется
//                       перенаправить на рассмотрение пользователю, указанному на форме перенаправления ЭД.
//    МассивПолзователей - Массив - возвращаемый массив пользователей, для выпадающего списка выбора адресата.
//
Процедура СписокПользователейДляБыстрогоВыбораПриПеренаправленииНаРассмотрениеЭД(
	МассивЭД, МассивПолзователей) Экспорт
	
	
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКоманд - Структура - структура состава команд ЭДО
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.Исходящие.Добавить("Документ.РасходнаяНакладная");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактура");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетНаОплатуПоставщика");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриходнаяНакладная");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуПоставщика");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриходнаяНакладная");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РасходнаяНакладная");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриходнаяНакладная.ПустаяСсылка(),
			Метаданные.Документы.ПриходнаяНакладная.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот 
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриходнаяНакладная.ПустаяСсылка(),
			Метаданные.Документы.ПриходнаяНакладная.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		СписокВозврата.Добавить(
			Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокВозврата.Добавить(
			Документы.СчетНаОплатуПоставщика.ПустаяСсылка(), 
			Метаданные.Документы.СчетНаОплатуПоставщика.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказПокупателя.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПокупателя.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
			
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		СписокВозврата.Добавить(
			Справочники.Контрагенты.ПустаяСсылка(),
			Метаданные.Справочники.Контрагенты.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		СписокВозврата.Добавить(
			Документы.КорректировкаПоступления.ПустаяСсылка(),
			Метаданные.Документы.КорректировкаПоступления.Представление());

	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮридическоеФизическоеЛицо, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
		
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр");
	СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации.ЗначенияПолей;
	
	ФактАдресОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресИзКонтактнойИнформации(Организация, "Факт");
	СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации.ЗначенияПолей;
	
	СтруктураВозврата.Телефон = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Если СтруктураВозврата.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		СтруктураОтветственных = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Организация, ТекущаяДатаСеанса());
		СтруктураВозврата.Руководитель          = СтруктураОтветственных.ФИОРуководителя;
		СтруктураВозврата.ДолжностьРуководителя = СтруктураОтветственных.РуководительДолжность;
	Иначе
		СтруктураВозврата.СвидетельствоНомер = РеквизитыОрганизации.СвидетельствоСерияНомер;
		СтруктураВозврата.СвидетельствоДата  = РеквизитыОрганизации.СвидетельствоДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю

// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям
//  содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	Макет			    = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ПользовательскоеПредставлениеОбязательныхПолей");
	ОбластьДокументов	  = Макет.ПолучитьОбласть("ОбязательныеПоля");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ТипИсточника  = Тип(СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст));
		НоваяСтрока.Параметр	 = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		НоваяСтрока.Представление = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	
	Возврат Таблица;
	
КонецФункции

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен с банком

// Используется для включения подсистемы Сбербанк в прикладном решении.
//
// Параметры:
//  ФлагИспользования - <Булево> - необходимо присвоить параметру Истина, если используется подсистема Сбербанк.
//
Процедура ПроверитьИспользованиеПодсистемыСбербанк(ФлагИспользования) Экспорт
	
	ФлагИспользования = Ложь;
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("10",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("18",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("20",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("10/110",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("18/118",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("20/120",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("без НДС", Справочники.СтавкиНДС.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""0"" КАК Ставка,
	|	СтавкиНДС.Ссылка КАК Значение
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""10"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 10
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""18"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 18
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""20"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 20
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""10/110"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 10
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""18/118"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 18
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""20/120"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 20
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""без НДС"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 0
	|	И СтавкиНДС.НеОблагается";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ставка, Выборка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Продажа Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетФактуры(СсылкаНаОбъект);

	РеквизитыШапки 	   = ДанныеДокумента.РеквизитыШапки;
	ТаблицаТоваров 	   = ДанныеДокумента.ТаблицаТоваров;
	ПлатежныеДокументы = ДанныеДокумента.ПлатежныеДокументы;
	ДокументыОснования = ДанныеДокумента.ДокументыОснования;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", РеквизитыШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  РеквизитыШапки.Дата);
	
	//Поля из электронного документа.
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.Дата);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель");
	
	Если НЕ ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель) ИЛИ (РеквизитыШапки.ОнЖе) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
	Иначе
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, 
			ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.Дата), "СведенияОГрузоотправителе.Грузоотправитель");
	КонецЕсли;
	
	Грузополучатель = ?(НЕ ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель) ИЛИ (РеквизитыШапки.Грузополучатель = "он же"),
				СтруктураЭД.Контрагент, РеквизитыШапки.Грузополучатель);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Грузополучатель, РеквизитыШапки.Дата), "Грузополучатель");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.КодВалюты);
	
	//Платежные документы.
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	// Документы основания.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ДокументыОснования);
	
	// Табличная часть документа и ее дополнительные сведения.
	ТолькоУслуги = 0;
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьСтруктуруДопДанныхНоменклатуры(СтрокаТовары.Номенклатура, 
																														СтрокаТовары.Характеристика, 
																														СтрокаТовары.НаименованиеНоменклатуры);
		СтруктураДопДанных.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТовары.ЕдиницаИзмеренияНаименование);
		
		СтрокаТовары.ДопДанныеПодписанные = СтруктураДопДанных;
		
		Если НЕ СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ТолькоУслуги = ТолькоУслуги + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТолькоУслуги = (ТолькоУслуги <> 0 И ТолькоУслуги = ТаблицаТоваров.Количество());
	
	//Таблица запасов.
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаБезНДСВсего", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаСНДСВсего",  ТаблицаТоваров.Итог("СуммаСНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаНДСВсего",   ТаблицаТоваров.Итог("СуммаНДС"));
		
	//Прочие поля.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт

	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
		МассивСчетовФактур, Документы.СчетФактура.ТекстЗапросаПечатьКорректировочныхСчетовФактур());
		
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерКорСчетаФактуры", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаКорСчетаФактуры",  ДанныеШапки.Дата);
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерИсправленияКорСчетаФактуры", ДанныеШапки.НомерИсправленияКорректировочного);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаИсправленияКорСчетаФактуры", ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	КорректируемыеСчетаФактуры = ДанныеШапки.ТаблицаРеквизитовОснований;
	Если КорректируемыеСчетаФактуры.Количество()>0 Тогда
		КорректируемыйСчетФактура = КорректируемыеСчетаФактуры[0];
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", КорректируемыйСчетФактура.НомерСчетаФактуры);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  КорректируемыйСчетФактура.ДатаСчетаФактуры);
		Если КорректируемыйСчетФактура.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", КорректируемыйСчетФактура.НомерИсправления);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", КорректируемыйСчетФактура.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ДанныеДляФормированияЭД.ДокументыОснования);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.Валюта, "Код"));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТипДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("АкцизаДо");
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	ТолькоУслуги = Истина;
	НомерСтроки = 1;
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И Строка.Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДо    = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод      = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДо             = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество               = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаДо                   = Строка.ЦенаДоИзменения;
		НоваяСтрока.Цена                     = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СуммаБезНДСДо            = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СуммаБезНДС              = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтавкаНДСДо              = Строка.СтавкаНДС;
		НоваяСтрока.СтавкаНДС                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДСДо               = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНДС                 = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаСНДСДо              = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СуммаСНДС                = Строка.СтоимостьСНДСПослеИзменения;
		
		НоваяСтрока.Номенклатура             = Строка.Товар;
		НоваяСтрока.Упаковка                 = Строка.НаименованиеЕдиницыИзмерения;
		
		НоваяСтрока.АкцизаДо                 = "без акциза";
		НоваяСтрока.Акциза                   = "без акциза";
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	Сумма = ТаблицаТоваров.Итог("СуммаСНДС");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего", Сумма);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры: 
// СсылкаНаОбъект - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт


КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - Дерево значений - Дерево значений, соответствующее макету ПрайсЛист обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  Дерево документа - дерево значений - дерево значений, соответствующее макету СчетНаОплату обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетНаОплату(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаРабот;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.Артикул 							   = ДанныеСтроки.Артикул;
		СтрокаТаблицыТоваров.Наименование 						   = ДанныеСтроки.НоменклатураНаименование;
		СтрокаТаблицыТоваров.Описание 							   = ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 						   = ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 					   = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.ЕдиницаИзмеренияКодПоОКЕИ			   = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование 		   = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное 	   = ДанныеСтроки.ЕдиницаИзмеренияНаименованиеПолное;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = ДанныеСтроки.ЕдиницаИзмеренияМеждународноеСокращение;
		СтрокаТаблицыТоваров.Цена 								   = ДанныеСтроки.Цена;
		СтрокаТаблицыТоваров.Количество 						   = ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.Сумма 								   = ДанныеСтроки.Сумма;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 					   = РеквизитыШапки.СуммаВключаетНДС;
		Если ДанныеСтроки.СуммаНДС = 0 Тогда
			// Обход ошибки
			СтрокаТаблицыТоваров.СуммаНДС = "0";
		Иначе
			СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		КонецЕсли;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
	КонецЦикла;
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", "");   
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", '00010101'); 
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
	
	КонецЕсли;
	
	// Итоги по документу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 0);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки",  ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",        ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ЗаказТовара обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЗаказПоставщику(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаТоваров;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НоменклатураПоставщика");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	
	НеУдалосьСопоставитьНоменклатуру = Ложь;
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если СтрокаТаблицы.ИдТовараУКонтрагента = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сопоставить номенклатуру ""%1"" с номенклатурой поставщика'"),
					Строка(СтрокаТаблицы.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "(" + СтрокаТаблицы.Характеристика + ")", "") 
																		)
				);
				
			НеУдалосьСопоставитьНоменклатуру = Истина;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Описание = СтрокаТаблицы.Содержание;
		
	КонецЦикла;
	
	Если НеУдалосьСопоставитьНоменклатуру Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Формирование электронного документа отменено.'"));
		Возврат;
	КонецЕсли;
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.Комментарий);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		
		КонецЕсли;
	КонецЕсли;
	
	// Итоги по документу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЗаказПокупателя(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаТоваров;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Описание = СтрокаТаблицы.Содержание;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НомерДокументаОснования", РеквизитыШапки.НомерПоДаннымКлиента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаДокументаОснования", РеквизитыШапки.ДатаПоДаннымКлиента);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.Комментарий);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		
		КонецЕсли;
	КонецЕсли;
	
	// Итоги по документу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ЭлектронныеДокументы.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность

// Функция должна возвращать дату и номер документов оснований (договоров) по массиву ссылок.
// Параметры функции:
// Парам 1 -  массив ссылок на документы ИБ
// (в качестве возможных значений следует принимать те типы документов,
// на основании которых в данном прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»)
//
// Параметры:
//  МассивСсылок - массив ссылок на документы ИБ;
//  ВозвращаемоеСоответствие - Соответствие со следующими свойствами:
//    ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//    значение соответствия - Структура, с полями:
//    НомерДоговора, тип: Строка
//    ДатаДоговора, тип: Дата
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, помещать пустые значения указанных типов.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

/////////////////////////////////////////////////////////////////////////////////
// Прочие функции

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить_Локальная(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция СтрРазделить_Локальная(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = СтрНайти(Строка, "{");
	КонПозицияПервогоЭлемента = СтрНайти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = СтрНайти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

