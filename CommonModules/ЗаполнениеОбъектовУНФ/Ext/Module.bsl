
#Область ПрограммныйИнтерфейс

// Процедура предназначена для заполнения документов.
// Применяются следующие принципы:
// - всё что заполнено обработчиками в модуле объекта считается первичным и наиболее приоритетным.
// - остальное заполнение выполняется по цепочке, через структуру ДанныеЗаполнения.
// - каждая последующая процедура в цепочке дополняет структуру ДанныеЗаполнения,
// при этом, если указанный реквизит уже заполнен в ДокументОбъект, то в структуру
// ДанныеЗаполнения он не попадает.
// - по окончании выполнения цепочки ДокументОбъект заполняется данными из ДанныеЗаполнения.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект - заполняемый документ.
//  ДанныеЗаполнения	 - Структура, ЛюбаяСсылка - значение, на основании
//                       которого выполняется заполнение документа.
//  СтратегияЗаполнения	 - Строка - имя процедуры обработчика заполнения
//                       в модуле объекта;
//                       - Соответствие - соответствие типов параметра
//                       ДанныеЗаполнения и имён обработчиков заполнения
//                       в модуле объекта.
//  ИсключаяСвойства	 - Строка - список имен свойств, разделенный запятыми,
//                       которые необходимо исключить из заполнения.
//
Процедура ЗаполнитьДокумент(ДокументОбъект, Знач ДанныеЗаполнения, Знач СтратегияЗаполнения = Неопределено, ИсключаяСвойства = "") Экспорт
	
	Если ПропуститьЗаполнение(ДанныеЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗаполнениеПоШаблону(ДанныеЗаполнения) Тогда
		ОбработатьЗаполнениеПоШаблону(ДанныеЗаполнения, ДокументОбъект);
	Иначе
		ВызватьОбработчикПередЗаполнением(СтратегияЗаполнения, ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ПреобразоватьДанныеЗаполненияСсылочногоТипаВСтруктуру(ДанныеЗаполнения, ДокументОбъект);
	ПреобразоватьЗначенияДанныхЗаполненияТипаМассивВСсылку(ДанныеЗаполнения);
	ДополнитьПериодРегистрации(ДанныеЗаполнения, ДокументОбъект);
	ДополнитьЗначениямиИзНастроек(ДанныеЗаполнения, ДокументОбъект);
	РазыменоватьПоляСобытия(ДанныеЗаполнения);
	ДополнитьПредопределеннымиЭлементамиСправочников(ДанныеЗаполнения, ДокументОбъект);
	РазыменоватьПоля(ДанныеЗаполнения, ДокументОбъект);
	ДополнитьСуммаВключаетНДС(ДанныеЗаполнения, ДокументОбъект);
	
	ДанныеЗаполнения.Вставить("Автор", Пользователи.ТекущийПользователь());
	
	УдалитьНезаполненныеИсключаемыеСвойства(ДанныеЗаполнения, ИсключаяСвойства);
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения,, ИсключаяСвойства);
	
	ЗаполнитьТабличныеЧасти(ДокументОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура УдалитьНезаполненныеИсключаемыеСвойства(ДанныеЗаполнения, ИсключаяСвойства)
	
	Если ИсключаяСвойства="" Тогда
		Возврат;
	КонецЕсли;
	
	//Преобразуем строку ИсключаяСвойства в структуру
	СтруктураИсключаяСвойства = ОбщегоНазначенияПереопределяемый.СтрокаВСтруктуру(ИсключаяСвойства, ",");
	
	//Удалим из структуры ИсключаяСвойства те свойства, которых нет в ДанныеЗаполнения
	Для каждого ИмяСвойства Из СтруктураИсключаяСвойства Цикл
		Если НЕ ДанныеЗаполнения.Свойство(ИмяСвойства.Ключ) Тогда
			СтруктураИсключаяСвойства.Удалить(ИмяСвойства.Ключ);
	    КонецЕсли;
	КонецЦикла;
	
	//Преобразуем структуру ИсключаяСвойства обратно в строку с запятыми
	ИсключаяСвойства = ОбщегоНазначенияПереопределяемый.СтруктураВСтроку(СтруктураИсключаяСвойства, ",");
	
КонецПроцедуры

Процедура ДополнитьВалюты(ЗначенияИзНастроек, ДокументОбъект) Экспорт
	
	ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитов(ВалютаПоУмолчанию, ДокументОбъект) Цикл
		
		Если ЗначенияИзНастроек.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияИзНастроек.Вставить(ИмяРеквизита, ВалютаПоУмолчанию);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет подстановку значений из заполненных элементов справочников,
// например, из значения Организация заполняются БанковскийСчет, Касса,
// Ответственные лица и НалогообложениеНДС, из значения Контрагент
// заполняется Договор, а из Договора - ВалютаРасчетов, ВидЦен,
// ВидЦенКонтрагента и ВидСкидкиНаценки.
//
// Параметры:
//  ДанныеЗаполнения - Структура - структура, которая будет дополнена разыменованными значениями.
//  ДокументОбъект	 - ДокументОбъект - заполняемый документ.
//
Процедура РазыменоватьПоля(ДанныеЗаполнения, ДокументОбъект) Экспорт
	
	РазыменованныеПоля = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеЗаполнения);
	
	УдалитьНезаполненныеЗначения(РазыменованныеПоля);
	
	РазыменоватьПоляОрганизации(РазыменованныеПоля, ДокументОбъект);
	РазыменоватьПоляКонтрагента(РазыменованныеПоля);
	РазыменоватьПоляДоговора(РазыменованныеПоля, ДокументОбъект);
	ПроверитьВалюту(ДанныеЗаполнения, РазыменованныеПоля);
	РазыменоватьПоляДисконтнойКарты(РазыменованныеПоля);
	РазыменоватьПоляСтруктурнойЕдиницы(РазыменованныеПоля, ДокументОбъект);
	РазыменоватьПоляВидаЦен(РазыменованныеПоля);
	РазыменоватьПоляВалюты(РазыменованныеПоля);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
	ДанныеЗаполнения,
	РазыменованныеПоля, 
	Не ЭтоЗаполнениеПоШаблону(ДанныеЗаполнения));
	
КонецПроцедуры

Процедура ПроверитьВалюту(ДанныеЗаполнения, РазыменованныеПоля)
	
	Если Не РазыменованныеПоля.Свойство("ВалютаДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВалютаДокумента")
		И ДанныеЗаполнения.ВалютаДокумента = РазыменованныеПоля.ВалютаДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения.Удалить("ВалютаДокумента");
	
	Если ДанныеЗаполнения.Свойство("БанковскийСчет") Тогда
		ДанныеЗаполнения.Удалить("БанковскийСчет");
	КонецЕсли;
	
	Если РазыменованныеПоля.Свойство("БанковскийСчет") Тогда
		РазыменованныеПоля.Удалить("БанковскийСчет");
	КонецЕсли;
	
КонецПроцедуры

Функция ОтображаемыеРеквизиты(Знач Форма) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ТекЭлемент Из Форма.Элементы Цикл
		
		Если ТипЗнч(ТекЭлемент) <> Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекЭлемент.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрНачинаетсяС(ТекЭлемент.ПутьКДанным, "Объект.") Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(СтрЗаменить(ТекЭлемент.ПутьКДанным, "Объект.", ""));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает признак заполнения по шаблону.
//
// Параметры:
//  ДанныеЗаполнения - Структура - данные заполнения.
// 
// Возвращаемое значение:
//  Булево - Истина если данные заполнения содержат ссылку на шаблон.
//
Функция ЭтоЗаполнениеПоШаблону(ДанныеЗаполнения) Экспорт
	
	Перем ШаблонДокумента;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ШаблонДокумента", ШаблонДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ШаблонДокумента) <> Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ЗаполнитьАвтораПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Автор", Пользователи.ТекущийПользователь());
	
	ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПропуститьЗаполнение(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ПропуститьЗаполнение") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения.ПропуститьЗаполнение) = Тип("Булево") Тогда
		Возврат ДанныеЗаполнения.ПропуститьЗаполнение;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьЗаполнениеПоШаблону(ДанныеЗаполнения, ДокументОбъект)
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения.ШаблонДокумента.ЗначенияРеквизитов Цикл
		
		Если Не ТекСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить(ТекСтрока.Реквизит, ТекСтрока.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Выбирает обработчик заполнения на основе переданного
// параметра СтратегияЗаполнения, затем вызывает
// этот обработчик из модуля объекта ДокументОбъект.
//
// Параметры:
//  СтратегияЗаполнения	 - Строка - имя процедуры обработчика заполнения
//                       в модуле объекта;
//                       - Соответствие - соответствие типов параметра
//                       ДанныеЗаполнения и имён обработчиков заполнения
//                       в модуле объекта.
//  ДокументОбъект		 - ДокументОбъект - заполняемый документ.
//  ДанныеЗаполнения	 - Структура, ЛюбаяСсылка - значение, на основании
//                       которого выполняется заполнение документа.
//
Процедура ВызватьОбработчикПередЗаполнением(СтратегияЗаполнения, ДокументОбъект, ДанныеЗаполнения)
	
	Если Не ЗначениеЗаполнено(СтратегияЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтратегияЗаполнения) = Тип("Строка") Тогда
		РаботаВБезопасномРежиме.ВыполнитьМетодОбъекта(
		ДокументОбъект,
		СтратегияЗаполнения,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтратегияЗаполнения) <> Тип("Соответствие") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра ""ОбработчикЗаполнения"": ожидается Строка или Соответствие.'");
	КонецЕсли;
	
	ИмяОбработчикаПередЗаполнением = СтратегияЗаполнения[ТипЗнч(ДанныеЗаполнения)];
	
	Если Не ЗначениеЗаполнено(ИмяОбработчикаПередЗаполнением) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаВБезопасномРежиме.ВыполнитьМетодОбъекта(
	ДокументОбъект,
	ИмяОбработчикаПередЗаполнением,
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения));
	
КонецПроцедуры

// В случае когда в ДанныеЗаполнения передано значение ссылочного типа,
// преобразует ДанныеЗаполнения в Структуру.
// Если заполняемый документ ещё не содержит значения, переданного
// в параметре ДанныеЗаполнения, указанное значение будет помещено
// в структуру ДанныеЗаполнения.
//
// Параметры:
//  ДанныеЗаполнения	 - Произвольный - значение, на основании котрого
//                       выполняется заполнение документа.
//  ДокументОбъект		 - ДокументОбъект - заполняемый документ.
//
Процедура ПреобразоватьДанныеЗаполненияСсылочногоТипаВСтруктуру(ДанныеЗаполнения, ДокументОбъект)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ДанныеЗаполнения = Новый Структура;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрОснование = ДанныеЗаполнения;
	ДанныеЗаполнения = Новый Структура;
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитов(ПараметрОснование, ДокументОбъект) Цикл
		
		Если ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить(ИмяРеквизита, ПараметрОснование);
		
	КонецЦикла;
	
	ДополнитьИзОснованияСуммаВключаетНДС(ДанныеЗаполнения, ПараметрОснование);
	
КонецПроцедуры

Процедура ДополнитьИзОснованияСуммаВключаетНДС(ДанныеЗаполнения, ПараметрОснование)
	
	Если ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = ПараметрОснование.Метаданные();
	
	Если Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить(
	"СуммаВключаетНДС",
	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	ПараметрОснование,
	"СуммаВключаетНДС"));
	
КонецПроцедуры

Процедура ДополнитьСуммаВключаетНДС(ДанныеЗаполнения, ДокументОбъект)
	
	Если ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", ДокументОбъект.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СуммаВключаетНДС", Истина);
	
КонецПроцедуры

// В целях заполнения документов значениями из отбора преобразует все значения типа Массив
// в структуре ДанныеЗаполнения в одиночные значения, устанавливая в соответствющий ключ 
// последний элемент массива.
// 
// Параметры:
//  ДанныеЗаполнения - Структура.
//
Процедура ПреобразоватьЗначенияДанныхЗаполненияТипаМассивВСсылку(ДанныеЗаполнения)
	
	Для Каждого КлючИЗначение Из ДанныеЗаполнения Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоследнийЭлементМассива = КлючИЗначение.Значение[КлючИЗначение.Значение.ВГраница()];
		
		Если ТипЗнч(ПоследнийЭлементМассива) = Тип("Структура") Тогда
			// Здесь считаем, что это заполнение табличной части, пропускаем преобразование.
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить(КлючИЗначение.Ключ, ПоследнийЭлементМассива);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПериодРегистрации(ДанныеЗаполнения, ДокументОбъект)
	
	Если ДанныеЗаполнения.Свойство("ПериодРегистрации") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит("ПериодРегистрации", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ПериодРегистрации", НачалоМесяца(ТекущаяДатаСеанса()));
	
КонецПроцедуры

// Выполняет подстановку значений из настроек.
//
// Параметры:
//  ДанныеЗаполнения - Структура - структура, которая будет дополнена значениями из настроек.
//  ДокументОбъект	 - ДокументОбъект - заполняемый документ.
//
Процедура ДополнитьЗначениямиИзНастроек(ДанныеЗаполнения, ДокументОбъект)
	
	ЗначенияИзНастроек = Новый Структура;
	
	ДополнитьВалюты(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьОрганизация(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьПодразделение(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьСтруктурнуюЕдиницу(ЗначенияИзНастроек, ДокументОбъект, "ОсновноеПодразделение");
	ДополнитьСтруктурнуюЕдиницу(ЗначенияИзНастроек, ДокументОбъект, "ОсновнойСклад");
	ДополнитьОсновнойОтветственный(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьВидЦен(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьОснованиеПечати(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьПоложениеОтветственный(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьПоложениеДатыПоступленияВЗаказеПоставщику(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьНастройкиЗаказНаряда(ЗначенияИзНастроек, ДокументОбъект, ДанныеЗаполнения);
	ДополнитьПоложениеВидаРаботВЗаданииНаРаботу(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьПоложениеДатыОтгрузкиВЗаказеПокупателя(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьПоложениеЗаказаПокупателяВДокументахОтгрузки(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьПоложениеЗаказаПоставщикуВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьПоложениеЗаказаПокупателяВПеремещенииЗапасов(ЗначенияИзНастроек, ДокументОбъект);
	ДополнитьИспользоватьРесурсыПредприятияВЗаказеНаПроизводство(ЗначенияИзНастроек, ДокументОбъект);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, ЗначенияИзНастроек, Ложь);
	
КонецПроцедуры

#Область ДополнитьЗначениямиИзНастроек

Процедура ДополнитьОрганизация(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ОтсутствуетНезаполненныйРеквизит("Организация", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ОсновнаяОрганизация");
	
	Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		ЗначенияИзНастроек.Вставить("Организация", ОрганизацияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодразделение(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ОтсутствуетНезаполненныйРеквизит("Подразделение", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ОсновноеПодразделение");
	
	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		ЗначенияИзНастроек.Вставить("Подразделение", ПодразделениеПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктурнуюЕдиницу(ЗначенияИзНастроек, ДокументОбъект, ИмяНастройки)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	ИмяНастройки);
	
	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы");
	
	Для Каждого Реквизит Из ДокументОбъект.Ссылка.Метаданные().Реквизиты Цикл
		
		Если ЗначенияИзНастроек.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Реквизит.Тип.СодержитТип(ТипЗнч(СтруктурнаяЕдиница)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТипСтруктурнойЕдиницыВПараметрыВыбора(ТипСтруктурнойЕдиницы, Реквизит.ПараметрыВыбора) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект[Реквизит.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияИзНастроек.Вставить(Реквизит.Имя, СтруктурнаяЕдиница);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОсновнойОтветственный(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ОтсутствуетНезаполненныйРеквизит("Ответственный", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ОсновнойОтветственный");
	
	Если ЗначениеЗаполнено(ОсновнойОтветственный) Тогда
		ЗначенияИзНастроек.Вставить("Ответственный", ОсновнойОтветственный);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьВидЦен(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ЗначенияИзНастроек.Свойство("ВидЦен")
		И ЗначениеЗаполнено(ЗначенияИзНастроек.ВидЦен) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит("ВидЦен", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЦенПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ОсновнойВидЦенПродажи");
	
	Если ЗначениеЗаполнено(ВидЦенПоУмолчанию) Тогда
		ЗначенияИзНастроек.Вставить("ВидЦен", ВидЦенПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОснованиеПечати(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.РасходнаяНакладная")
		И ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ОтчетОПереработке") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ОснованиеПечати) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		ЗначенияИзНастроек.Вставить(
		"ОснованиеПечати",
		СтрШаблон(
		НСтр("ru = 'Договор: %1'"),
		ДокументОбъект.Договор));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоложениеОтветственный(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит("ПоложениеОтветственный", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ПоложениеОтветственный");
	
	Если ЗначениеЗаполнено(ПоложениеОтветственный) Тогда
		ЗначенияИзНастроек.Вставить("ПоложениеОтветственный", ПоложениеОтветственный);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоложениеДатыПоступленияВЗаказеПоставщику(ЗначенияИзНастроек, Документобъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеДатыПоступленияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ПоложениеДатыПоступленияВЗаказеПоставщику");
	
	Если ЗначениеЗаполнено(ПоложениеДатыПоступленияПоУмолчанию) Тогда
		ЗначенияИзНастроек.Вставить("ПоложениеДатыПоступления", ПоложениеДатыПоступленияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьНастройкиЗаказНаряда(ЗначенияИзНастроек, ДокументОбъект, ДанныеЗаполнения)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = ДокументОбъект.ВидОперации;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ДанныеЗаполнения.Свойство("ВидОперации", ВидОперации);
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаказНаряда = Новый Соответствие;
	РеквизитыЗаказНаряда["ПоложениеВидаРабот"] = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	РеквизитыЗаказНаряда["ИспользоватьТовары"] = Истина;
	РеквизитыЗаказНаряда["ИспользоватьМатериалыЗаказчика"] = Ложь;
	РеквизитыЗаказНаряда["ИспользоватьМатериалы"]= Ложь;
	РеквизитыЗаказНаряда["ИспользоватьЗарплатаИсполнителей"]= Ложь;
	
	Для Каждого КлючИЗначение Из РеквизитыЗаказНаряда Цикл
		
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(
			КлючИЗначение.Ключ,
			ДокументОбъект.Метаданные()) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		СтрШаблон(
		"%1ВЗаказНаряде",
		КлючИЗначение.Ключ),
		КлючИЗначение.Значение);
		
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ЗначенияИзНастроек.Вставить(КлючИЗначение.Ключ, ЗначениеНастройки);
		Иначе
			ЗначенияИзНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПоложениеВидаРаботВЗаданииНаРаботу(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит("ПоложениеВидаРабот", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеВидаРаботПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ПоложениеВидаРаботВЗаданииНаРаботу");
	
	Если ЗначениеЗаполнено(ПоложениеВидаРаботПоУмолчанию) Тогда
		ЗначенияИзНастроек.Вставить("ПоложениеВидаРабот", ПоложениеВидаРаботПоУмолчанию);
	Иначе
		ЗначенияИзНастроек.Вставить("ПоложениеВидаРабот", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоложениеДатыОтгрузкиВЗаказеПокупателя(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит("ПоложениеДатыОтгрузки", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеДатыОтгрузкиПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ПоложениеДатыОтгрузкиВЗаказеПокупателя");
	
	Если ЗначениеЗаполнено(ПоложениеДатыОтгрузкиПоУмолчанию) Тогда
		ЗначенияИзНастроек.Вставить("ПоложениеДатыОтгрузки", ПоложениеДатыОтгрузкиПоУмолчанию);
	Иначе
		ЗначенияИзНастроек.Вставить("ПоложениеДатыОтгрузки", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоложениеЗаказаПокупателяВДокументахОтгрузки(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.АктВыполненныхРабот")
		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит(
		"ПоложениеЗаказаПокупателя",
		ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеЗаказаПокупателяВДокументахОтгрузки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ПоложениеЗаказаПокупателяВДокументахОтгрузки");
	
	Если ЗначениеЗаполнено(ПоложениеЗаказаПокупателяВДокументахОтгрузки) Тогда
		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", ПоложениеЗаказаПокупателяВДокументахОтгрузки);
	Иначе
		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоложениеЗаказаПоставщикуВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит(
		"ПоложениеЗаказаПоставщику",
		ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеЗаказаПоставщикуВДокументахПоступления = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ПоложениеЗаказаПоставщикуВДокументахПоступления");
	
	Если ЗначениеЗаполнено(ПоложениеЗаказаПоставщикуВДокументахПоступления) Тогда
		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПоставщику", ПоложениеЗаказаПоставщикуВДокументахПоступления);
	Иначе
		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПоставщику", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоложениеЗаказаПокупателяВПеремещенииЗапасов(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит(
		"ПоложениеЗаказаПокупателя",
		ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеЗаказаПокупателяВПеремещенииЗапасов = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ПоложениеЗаказаПокупателяВПеремещенииЗапасов");
	
	Если ЗначениеЗаполнено(ПоложениеЗаказаПокупателяВПеремещенииЗапасов) Тогда
		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", ПоложениеЗаказаПокупателяВПеремещенииЗапасов);
	Иначе
		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИспользоватьРесурсыПредприятияВЗаказеНаПроизводство(ЗначенияИзНастроек, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит(
		"ИспользоватьРесурсыПредприятия",
		ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	Пользователи.ТекущийПользователь(),
	"ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство");
	
	Если ЗначениеЗаполнено(ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство) Тогда
		ЗначенияИзНастроек.Вставить("ИспользоватьРесурсыПредприятия", ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство);
	Иначе
		ЗначенияИзНастроек.Вставить("ИспользоватьРесурсыПредприятия", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьПредопределеннымиЭлементамиСправочников(ДанныеЗаполнения, ДокументОбъект)
	
	ПредопределенныеЭлементыСправочников = Новый Структура;
	
	ДополнитьПредопределеннойОрганизацией(ПредопределенныеЭлементыСправочников, ДокументОбъект);
	ДополнитьПредопределеннымПодразделением(ПредопределенныеЭлементыСправочников, ДокументОбъект);
	ДополнитьПредопределеннымиСтруктурнымиЕдиницами(ПредопределенныеЭлементыСправочников, ДокументОбъект);
	ДополнитьПредопределеннымВидомЦен(ПредопределенныеЭлементыСправочников, ДокументОбъект);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, ПредопределенныеЭлементыСправочников, Ложь);
	
КонецПроцедуры

#Область ДополнитьПредопределеннымиЭлементамиСправочников

Процедура ДополнитьПредопределеннойОрганизацией(ПредопределенныеЭлементыСправочников, ДокументОбъект)
	
	Если ОтсутствуетНезаполненныйРеквизит("Организация", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;

	ПредопределенныеЭлементыСправочников.Вставить(
	"Организация",
	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
	"Справочник.Организации.ОсновнаяОрганизация"));

КонецПроцедуры

Процедура ДополнитьПредопределеннымПодразделением(ПредопределенныеЭлементыСправочников, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит("Подразделение", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПредопределенныеЭлементыСправочников.Вставить(
	"Подразделение",
	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
	"Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение"));

КонецПроцедуры

Процедура ДополнитьПредопределеннымиСтруктурнымиЕдиницами(ПредопределенныеЭлементыСправочников, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОтсутствуетНезаполненныйРеквизит("СтруктурнаяЕдиница", ДокументОбъект) Тогда
		ПравилаЗаполненияДляСтруктурнойЕдиницы = Новый Соответствие;
		ЗаполнениеОбъектовУНФПереопределяемый.ПриОпределенииПравилУстановкиСтруктурныхЕдиниц(
		ПравилаЗаполненияДляСтруктурнойЕдиницы);
		
		ПредопределеннаяСтруктурнаяЕдиница = ПравилаЗаполненияДляСтруктурнойЕдиницы[ТипЗнч(ДокументОбъект)];
		
		Если ЗначениеЗаполнено(ПредопределеннаяСтруктурнаяЕдиница) Тогда
			ПредопределенныеЭлементыСправочников.Вставить(
			"СтруктурнаяЕдиница",
			ПредопределеннаяСтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОтсутствуетНезаполненныйРеквизит("СтруктурнаяЕдиницаПродажи", ДокументОбъект) Тогда
		ПредопределенныеЭлементыСправочников.Вставить(
		"СтруктурнаяЕдиницаПродажи",
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
		"Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение"));
	КонецЕсли;
	
	Если Не ОтсутствуетНезаполненныйРеквизит("СтруктурнаяЕдиницаРезерв", ДокументОбъект) Тогда
		ПредопределенныеЭлементыСправочников.Вставить(
		"СтруктурнаяЕдиницаРезерв",
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
		"Справочник.СтруктурныеЕдиницы.ОсновнойСклад"));
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПредопределеннымВидомЦен(ПредопределенныеЭлементыСправочников, ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтсутствуетНезаполненныйРеквизит("ВидЦен", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПредопределенныеЭлементыСправочников.Вставить(
	"ВидЦен",
	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
	"Справочник.ВидыЦен.Оптовая"));
	
КонецПроцедуры

#КонецОбласти

Процедура УдалитьНезаполненныеЗначения(РазыменованныеПоля)
	
	Для Каждого КлючИЗначение Из РазыменованныеПоля Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		РазыменованныеПоля.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;

КонецПроцедуры

#Область РазыменоватьПоля

Процедура РазыменоватьПоляСобытия(РазыменованныеПоля)
	
	Если Не РазыменованныеПоля.Свойство("Событие") Тогда
		Возврат;
	КонецЕсли;
	
	РазыменоватьПоляСобытияКонтрагент(РазыменованныеПоля);
	РазыменоватьПоляСобытияПроект(РазыменованныеПоля);
	
КонецПроцедуры

Процедура РазыменоватьПоляСобытияКонтрагент(РазыменованныеПоля)
	
	Если РазыменованныеПоля.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобытиеУчастники.Контакт КАК Контрагент
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	СобытиеУчастники.Контакт ССЫЛКА Справочник.Контрагенты
	|	И СобытиеУчастники.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", РазыменованныеПоля.Событие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РазыменованныеПоля.Вставить("Контрагент", Выборка.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазыменоватьПоляСобытияПроект(РазыменованныеПоля)
	
	Если Не ПолучитьФункциональнуюОпцию("УчетПоПроектам") Тогда
		Возврат;
	КонецЕсли;
	
	Если РазыменованныеПоля.Свойство("Проект") Тогда
		Возврат;
	КонецЕсли;
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РазыменованныеПоля.Событие, "Проект");
	Если ЗначениеЗаполнено(Проект) Тогда
		РазыменованныеПоля.Вставить("Проект", Проект);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазыменоватьПоляОрганизации(РазыменованныеПоля, ДокументОбъект)
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(
		"Организация",
		ДокументОбъект.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ДокументОбъект.Организация;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		РазыменованныеПоля.Свойство("Организация", Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	РазыменоватьПоляОрганизацииБанковскийСчет(РазыменованныеПоля, ДокументОбъект, Организация);
	РазыменоватьПоляОрганизацииКасса(РазыменованныеПоля, ДокументОбъект, Организация);
	РазыменоватьПоляОрганизацииОтветственныеЛица(РазыменованныеПоля, ДокументОбъект, Организация);
	РазыменоватьПоляОрганизацииНалогообложениеНДС(РазыменованныеПоля, ДокументОбъект, Организация);
	
КонецПроцедуры

Процедура РазыменоватьПоляОрганизацииБанковскийСчет(РазыменованныеПоля, ДокументОбъект, Организация)
	
	Если ОтсутствуетНезаполненныйРеквизит("БанковскийСчет", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", ДокументОбъект.Метаданные())
		И ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДенежныхСредств", ДокументОбъект.Метаданные())
		И ЗначениеЗаполнено(ДокументОбъект.ВалютаДенежныхСредств) Тогда
		ВалютаДенежныхСредств = ДокументОбъект.ВалютаДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		РазыменованныеПоля.Свойство("ВалютаДокумента", ВалютаДенежныхСредств);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		РазыменованныеПоля.Свойство("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
	|			ТОГДА Организации.БанковскийСчетПоУмолчанию
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчет
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Не ЗначениеЗаполнено(Выборка.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	РазыменованныеПоля.Вставить("БанковскийСчет", Выборка.БанковскийСчет);
	
	Если ОтсутствуетНезаполненныйРеквизит("БанковскийСчетПолучатель", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РазыменованныеПоля.Вставить("БанковскийСчетПолучатель", Выборка.БанковскийСчет);
	
КонецПроцедуры

Процедура РазыменоватьПоляОрганизацииКасса(РазыменованныеПоля, ДокументОбъект, Организация)
	
	Если ОтсутствуетНезаполненныйРеквизит("Касса", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	КассаПоУмолчанию = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
	
	Если Не ЗначениеЗаполнено(КассаПоУмолчанию) Тогда
		Возврат;
	КонецЕсли;
	
	РазыменованныеПоля.Вставить("Касса", КассаПоУмолчанию);
	
	Если ОтсутствуетНезаполненныйРеквизит("КассаПолучатель", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РазыменованныеПоля.Вставить("КассаПолучатель", КассаПоУмолчанию);
	
КонецПроцедуры

Процедура РазыменоватьПоляОрганизацииОтветственныеЛица(РазыменованныеПоля, ДокументОбъект, Организация)
	
	Если СтрНайти(ДокументОбъект.Метаданные().ПолноеИмя(), "Справочник") > 0 Тогда
		ОтветственныеЛица = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(
		Организация,
		ТекущаяДатаСеанса());
	Иначе
		ОтветственныеЛица = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(
		Организация,
		ДокументОбъект.Дата);
	КонецЕсли;
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей["Руководитель"] = "Руководитель";
	СоответствиеПолей["РуководительДолжность"] = "РуководительДолжностьСсылка";
	СоответствиеПолей["ГлавныйБухгалтер"] = "ГлавныйБухгалтер";
	СоответствиеПолей["Отпустил"] = "Кладовщик";
	СоответствиеПолей["ОтпустилДолжность"] = "КладовщикДолжностьСсылка";
	
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		
		Если ОтсутствуетНезаполненныйРеквизит(КлючИЗначение.Ключ, ДокументОбъект) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОтветственныеЛица[КлючИЗначение.Значение]) Тогда
			Продолжить;
		КонецЕсли;
		
		РазыменованныеПоля.Вставить(КлючИЗначение.Ключ, ОтветственныеЛица[КлючИЗначение.Значение]);
		
	КонецЦикла;

КонецПроцедуры

Процедура РазыменоватьПоляОрганизацииНалогообложениеНДС(РазыменованныеПоля, ДокументОбъект, Организация)
	
	Если ОтсутствуетНезаполненныйРеквизит("НалогообложениеНДС", ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РазыменованныеПоля.Вставить("НалогообложениеНДС",
	УправлениеНебольшойФирмойСервер.НалогообложениеНДС(
	Организация,,
	ТекущаяДатаСеанса()));
	
КонецПроцедуры

Процедура РазыменоватьПоляКонтрагента(РазыменованныеПоля)
	
	Если Не РазыменованныеПоля.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	РазыменованныеПоля.Контрагент,
	"ЭтоГруппа, ДоговорПоУмолчанию");
	
	Если ДанныеКонтрагента.ЭтоГруппа Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя выбирать группу контрагентов.'");
	КонецЕсли;
	
	Если РазыменованныеПоля.Свойство("Договор")
		И ЗначениеЗаполнено(РазыменованныеПоля.Договор)
		И РазыменованныеПоля.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РазыменованныеПоля.Договор,
		"Владелец") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РазыменованныеПоля.Вставить("Договор", ДанныеКонтрагента.ДоговорПоУмолчанию);
	
КонецПроцедуры

Процедура РазыменоватьПоляДоговора(РазыменованныеПоля, ДокументОбъект)
	
	Если Не РазыменованныеПоля.Свойство("Договор") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	РазыменованныеПоля.Договор,
	"ВалютаРасчетов, ВидЦен, ВидЦенКонтрагента, ВидСкидкиНаценки");
	
	Для Каждого КлючИЗначение Из ДанныеДоговора Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяРеквизита Из ИменаРеквизитов(КлючИЗначение.Значение, ДокументОбъект) Цикл
			РазыменованныеПоля.Вставить(ИмяРеквизита, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазыменоватьПоляДисконтнойКарты(РазыменованныеПоля)
	
	Если Не РазыменованныеПоля.Свойство("ДисконтнаяКарта") Тогда
		Возврат;
	КонецЕсли;
	
	РазыменованныеПоля.Вставить(
	"ПроцентСкидкиПоДисконтнойКарте",
	УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(
	ТекущаяДатаСеанса(),
	РазыменованныеПоля.ДисконтнаяКарта));
	
КонецПроцедуры

Процедура РазыменоватьПоляСтруктурнойЕдиницы(РазыменованныеПоля, ДокументОбъект)
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", ДокументОбъект.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурнаяЕдиница = ДокументОбъект.СтруктурнаяЕдиница;
	
	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		РазыменованныеПоля.Свойство("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПолейСтруктурнойЕдиницы = Новый Структура;
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаПродукции", "ПолучательПеремещения");
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("ЯчейкаПродукции", "ЯчейкаПолучателяПеремещения");
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаЗапасов", "ИсточникПеремещения");
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("ЯчейкаЗапасов", "ЯчейкаИсточникаПеремещения");
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаОтходов", "ПолучательОтходов");
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("ЯчейкаОтходов", "ЯчейкаПолучателяОтходов");
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаПолучатель", "ПолучательПеремещения");
	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаРезерв", "ИсточникПеремещения");
	
	ДанныеСтруктурнойЕдиницы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	СтруктурнаяЕдиница,
	ОписаниеПолейСтруктурнойЕдиницы);
	
	Для Каждого КлючИЗначение Из ДанныеСтруктурнойЕдиницы Цикл
		
		Если ОтсутствуетНезаполненныйРеквизит(КлючИЗначение.Ключ, ДокументОбъект) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			РазыменованныеПоля.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазыменоватьПоляВидаЦен(РазыменованныеПоля)
	
	Если Не РазыменованныеПоля.Свойство("ВидЦен") Тогда
		Возврат;
	КонецЕсли;
	
	РазыменованныеПоля.Вставить(
	"СуммаВключаетНДС",
	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	РазыменованныеПоля.ВидЦен,
	"ЦенаВключаетНДС"));
	
КонецПроцедуры

Процедура РазыменоватьПоляВалюты(РазыменованныеПоля)
	
	Для Каждого КлючИЗначение Из РазыменованныеПоля Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("СправочникСсылка.Валюты") Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		РазыменованныеПоля,
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(,
		Новый Структура("Валюта", КлючИЗначение.Значение)),
		Истина);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ТипСтруктурнойЕдиницыВПараметрыВыбора(ТипСтруктурнойЕдиницы, ПараметрыВыбора)
	
	Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
		
		Если ПараметрВыбора.Имя <> "Отбор.ТипСтруктурнойЕдиницы" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрВыбора.Значение) = Тип("ФиксированныйМассив") Тогда
			Для каждого ЗначениеПараметра Из ПараметрВыбора.Значение Цикл
				Если ТипСтруктурнойЕдиницы = ЗначениеПараметра Тогда
					Возврат Истина;
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрВыбора.Значение) = Тип("ПеречислениеСсылка.ТипыСтруктурныхЕдиниц") 
			И ТипСтруктурнойЕдиницы = ПараметрВыбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции 

Функция ОтсутствуетНезаполненныйРеквизит(ИмяРеквизита, ДокументОбъект)
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(
		ИмяРеквизита,
		ДокументОбъект.Метаданные()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);
	
КонецФункции

// Возвращает имена всех реквизитов документа, тип которых соответствуют
// типу указанного параметра Значение.
//
// Параметры:
//  Значение					 - Произвольный
//  ДокументОбъект				 - ДокументОбъект
// 
// Возвращаемое значение:
//  Массив - массив строк - имен реквизитов документа.
//
Функция ИменаРеквизитов(Значение, ДокументОбъект)
	
	Результат = Новый Массив;
	
	Для Каждого Реквизит Из ДокументОбъект.Ссылка.Метаданные().Реквизиты Цикл
		
		Если Реквизит.Тип.СодержитТип(ТипЗнч(Значение)) Тогда
			Результат.Добавить(Реквизит.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТабличныеЧасти(ДокументОбъект, ДанныеЗаполнения)
	
	Для Каждого ТабличнаяЧасть Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		
		Если Не ДанныеЗаполнения.Свойство(ТабличнаяЧасть.Имя) Тогда
			Продолжить;
		КонецЕсли;
		//Если уже было заполнение, не перезаполняем второй раз
		Если ДокументОбъект[ТабличнаяЧасть.Имя].Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого строкаЗаполнения Из ДанныеЗаполнения[ТабличнаяЧасть.Имя] Цикл
			НоваяСтрокаТЧ = ДокументОбъект[ТабличнаяЧасть.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, строкаЗаполнения);
			РаботаСНоменклатуройСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ДокументОбъект, ТабличнаяЧасть.Имя, НоваяСтрокаТЧ);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтдельныхРеквизитов

Функция ПолучитьКалендарьСотрудника(Сотрудник = Неопределено) Экспорт
	
	Пользователь = Неопределено;
	
	Если Сотрудник <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СотрудникиПользователя.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
			|ГДЕ
			|	СотрудникиПользователя.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Пользователь = Выборка.Пользователь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Календарь = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойКалендарь");
	
	Возврат Календарь;
	
КонецФункции

// Функция возвращает первое по бизнес-логике состояние заказа
//
// Параметры:
//  ВидЗаказа	 - СправочникСсылка.ВидыЗаказовПокупателей	 - параметр является обязательным, если включена ФО ИспользоватьВидыЗаказовПокупателей
// 
// Возвращаемое значение:
//  СправочникСсылка.СостоянияЗаказовПокупателей - состояние для заполнения документа
//
Функция ПолучитьСостояниеЗаказаПокупателя(знач ВидЗаказа = Неопределено) Экспорт
	
	ИспользуютсяВидыЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	Если ИспользуютсяВидыЗаказов И Не ЗначениеЗаполнено(ВидЗаказа) Тогда
		ВызватьИсключение НСтр("ru='Не указан вид заказа для заполнения состояния заказа покупателя'");
	КонецЕсли;
	
	Если Не ИспользуютсяВидыЗаказов Тогда
		ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	КонецЕсли;
	
	Результат = Неопределено;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыЗаказовПокупателейПорядокСостояний.Состояние КАК СостояниеЗаказа
		|ИЗ
		|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
		|ГДЕ
		|	ВидыЗаказовПокупателейПорядокСостояний.Ссылка = &ВидЗаказа
		|	И ВидыЗаказовПокупателейПорядокСостояний.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|	И ВидыЗаказовПокупателейПорядокСостояний.Состояние.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки";
	
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СостояниеЗаказа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВидЗаказаПокупателя() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
		Возврат Справочники.ВидыЗаказовПокупателей.Основной;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Автор = &Автор
		|	И ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка)
		|	И ЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидЗаказа;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка)
		|	И ЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидЗаказа;
	КонецЕсли;
	
	Возврат Справочники.ВидыЗаказовПокупателей.Основной;
	
КонецФункции

// Функция возвращает первое по бизнес-логике состояние заказ-наряда
//
// Параметры:
//  ВидЗаказа	 - СправочникСсылка.ВидыЗаказНарядов	 - параметр является обязательным, если включена ФО ИспользоватьВидыЗаказНарядов
// 
// Возвращаемое значение:
//  СправочникСсылка.СостоянияЗаказНарядов - состояние для заполнения документа
//
Функция ПолучитьСостояниеЗаказНаряда(знач ВидЗаказа = Неопределено) Экспорт
	
	ИспользуютсяВидыЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	Если ИспользуютсяВидыЗаказов И Не ЗначениеЗаполнено(ВидЗаказа) Тогда
		ВызватьИсключение НСтр("ru='Не указан вид заказа для заполнения состояния заказ-наряда'");
	КонецЕсли;
	
	Если Не ИспользуютсяВидыЗаказов Тогда
		ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
	КонецЕсли;
	
	Результат = Неопределено;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыЗаказНарядовПорядокСостояний.Состояние КАК СостояниеЗаказа
		|ИЗ
		|	Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
		|ГДЕ
		|	ВидыЗаказНарядовПорядокСостояний.Ссылка = &ВидЗаказа
		|	И ВидыЗаказНарядовПорядокСостояний.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|	И ВидыЗаказНарядовПорядокСостояний.Состояние.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки";
	
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СостояниеЗаказа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВидЗаказНаряда() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
		Возврат Справочники.ВидыЗаказНарядов.Основной;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Автор = &Автор
		|	И ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказНарядов.ПустаяСсылка)
		|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидЗаказа;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказНарядов.ПустаяСсылка)
		|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидЗаказа;
	КонецЕсли;
	
	Возврат Справочники.ВидыЗаказНарядов.Основной;
	
КонецФункции

Функция ПолучитьСостояниеЗаказаПоставщику() Экспорт
	
	Результат = Неопределено;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияЗаказовПоставщикам.Ссылка КАК СостояниеЗаказа
		|ИЗ
		|	Справочник.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
		|ГДЕ
		|	СостоянияЗаказовПоставщикам.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СостоянияЗаказовПоставщикам.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПоставщикам.Завершен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияЗаказовПоставщикам.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СостояниеЗаказа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСостояниеЗаказаНаПроизводство() Экспорт
	
	Результат = Неопределено;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияЗаказовНаПроизводство.Ссылка КАК СостояниеЗаказа
		|ИЗ
		|	Справочник.СостоянияЗаказовНаПроизводство КАК СостоянияЗаказовНаПроизводство
		|ГДЕ
		|	СостоянияЗаказовНаПроизводство.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СостоянияЗаказовНаПроизводство.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовНаПроизводство.Завершен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияЗаказовНаПроизводство.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СостояниеЗаказа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
