////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРК".
// ОбщийМодуль.СПАРКРискиКлиент.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ИндексыСПАРККонтрагента

// Функция по значению индекса выдает цвет.
// Значения цветов должны соответствовать элементам стиля:
//  ЦветГрадацияСПАРКНизкийРиск, ЦветГрадацияСПАРКСреднийРиск, ЦветГрадацияСПАРКВысокийРиск.
//
// Параметры:
//  ЗначениеИндекса - Число, NULL, Неопределено - числовое значение индекса;
//  ИмяИндекса      - Строка - одно из значений ИндексДолжнойОсмотрительности, ИндексПлатежнойДисциплины, ИндексФинансовогоРиска.
//
// Возвращаемое значение:
//   Цвет - цвет текста по значению индекса.
//
Функция ЦветИндекса(ЗначениеИндекса, ИмяИндекса) Экспорт

	Результат = Новый Цвет;

	ТипЧисло = Тип("Число");

	// Определение интервалов индексов СПАРК Риски.
	Если ТипЗнч(ЗначениеИндекса) = ТипЧисло Тогда
		Если ВРег(ИмяИндекса) = ВРег("ИндексДолжнойОсмотрительности") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=40 Тогда
				Результат = Новый Цвет(0, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск.
			ИначеЕсли ЗначениеИндекса >=41 И ЗначениеИндекса <=71 Тогда
				Результат = Новый Цвет(255, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск.
			ИначеЕсли ЗначениеИндекса >=72 И ЗначениеИндекса <=100 Тогда
				Результат = Новый Цвет(255, 40, 40); // ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск.
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексПлатежнойДисциплины") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=49 Тогда
				Результат = Новый Цвет(255, 40, 40); // ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск.
			ИначеЕсли ЗначениеИндекса >=50 И ЗначениеИндекса <=79 Тогда
				Результат = Новый Цвет(255, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск.
			ИначеЕсли ЗначениеИндекса >=80 И ЗначениеИндекса <=100 Тогда
				Результат = Новый Цвет(0, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск.
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексФинансовогоРиска") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=14 Тогда
				Результат = Новый Цвет(0, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск.
			ИначеЕсли ЗначениеИндекса >=15 И ЗначениеИндекса <=85 Тогда
				Результат = Новый Цвет(255, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск.
			ИначеЕсли ЗначениеИндекса >=86 И ЗначениеИндекса <=100 Тогда
				Результат = Новый Цвет(255, 40, 40); // ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЛогИОтладка

// Возвращает признак, надо ли вести подробный лог для подсистемы.
//
// Возвращаемое значение:
//   Булево - признак ведения подробного журнала регистрации.
//
Функция ВестиПодробныйЖурналРегистрации() Экспорт

	Возврат Истина;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет возможность использования сервиса в соответствии с текущим
//  режимом работы и правами пользователя.
//
// Возвращаемое значение:
//	Булево:
//		Истина - использование разрешено, Ложь - в противном случае.
//
Функция ИспользованиеРазрешено()

	#Если Клиент ИЛИ ВебКлиент Тогда

		Возврат СПАРКРискиКлиентПовтИсп.ИспользованиеРазрешено();

	#Иначе

		Возврат СПАРКРискиВызовСервера.ИспользованиеРазрешено();

	#КонецЕсли

КонецФункции

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - Проверяемый индивидуальный номер налогоплательщика.
//  ТекстСообщения     - Строка - Текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Истина       - ИНН соответствует требованиям;
//  Ложь         - ИНН не соответствует требованиям.
//
Функция ИННСоответствуетТребованиям(Знач ИНН, ТекстСообщения = Неопределено) Экспорт

	СоответствуетТребованиям = Истина;
	ТекстСообщения = "";

	ИНН      = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'ИНН должен состоять только из цифр.'");
	КонецЕсли;

	Если ДлинаИНН <> 10 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр.'");
	КонецЕсли;

	Если СоответствуетТребованиям Тогда

		КонтрольнаяСумма = 0;

		Для Индекс = 1 По 9 Цикл

			Если Индекс = 1 Тогда
				Множитель = 2;
			ИначеЕсли Индекс = 2 Тогда
				Множитель = 4;
			ИначеЕсли Индекс = 3 Тогда
				Множитель = 10;
			ИначеЕсли Индекс = 4 Тогда
				Множитель = 3;
			ИначеЕсли Индекс = 5 Тогда
				Множитель = 5;
			ИначеЕсли Индекс = 6 Тогда
				Множитель = 9;
			ИначеЕсли Индекс = 7 Тогда
				Множитель = 4;
			ИначеЕсли Индекс = 8 Тогда
				Множитель = 6;
			ИначеЕсли Индекс = 9 Тогда
				Множитель = 8;
			КонецЕсли;

			Цифра = Число(Сред(ИНН, Индекс, 1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;

		КонецЦикла;
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;

		Если КонтрольныйРазряд <> Число(Сред(ИНН, 10, 1)) Тогда
			СоответствуетТребованиям = Ложь;
			ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			               + НСтр("ru = 'Контрольное число для ИНН не совпадает с рассчитанным.'");
		КонецЕсли;
			
	КонецЕсли;

	Возврат СоответствуетТребованиям;

КонецФункции 

Функция АдресСтраницыОписанияСервисаСПАРКРиски() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/app/1spark-risks",
		0);
	
КонецФункции

Функция АдресСтраницыЛичныйКабинетВсеСправки() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/application/1C-Spark-risks/sub/getOrganizationReports?needAccessToken=true",
		0);
	
КонецФункции

Функция НовыйСвойстваКонтрагента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН"             , "");
	Результат.Вставить("ПодлежитПроверке", Ложь);
	Результат.Вставить("СвояОрганизация" , Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваКонтрагентаВОбъекте(КонтрагентОбъект, Форма = Неопределено) Экспорт
	
	Результат = НовыйСвойстваКонтрагента();
	
	СПАРКРискиКлиентСерверПереопределяемый.ПриОпределенииСвойствКонтрагентаВОбъекте(
		КонтрагентОбъект,
		Форма,
		Результат);
	
	Результат.ИНН = СокрЛП(Результат.ИНН);
	
	Возврат Результат;
	
КонецФункции

#Область ИндексыСПАРККонтрагента

// Возвращает структуру контрагента для получения по ним индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура возвращаемых данных с ключами:
//     * ОбластьДанных - Число - номер области данных или -1 при работе НЕ в модели сервиса.
//     * Контрагент    - ОпределяемыеТипы.КонтрагентБИП - контрагент;
//     * ИНН           - Строка.
//
Функция НовыйОписаниеКонтрагента() Экспорт

	Результат = Новый Структура();

	// Основные данные.
	Результат.Вставить("ОбластьДанных", -1);
	Результат.Вставить("Контрагент"   , Неопределено);
	Результат.Вставить("ИНН"          , "");

	Возврат Результат;

КонецФункции

// Возвращает структуру для хранения индексов и других показателей для контрагента.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура возвращаемых данных с ключами:
//     * Контрагент                      - ОпределяемыеТипы.КонтрагентБИП - контрагент;
//     * ИНН                             - Строка;
//     * ПодлежитПроверке                - Булево;
//     * ИндексДолжнойОсмотрительности   - Число - Индекс должной осмотрительности;
//     * ИДОГрадация                     - ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - Градация индекса должной осмотрительности;
//     * ИндексФинансовогоРиска          - Число - Индекс финансового результата;
//     * ИФРГрадация                     - ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - Градация индекса финансового результата;
//     * ИндексПлатежнойДисциплины       - Число - Индекс платежной дисциплины;
//     * ИПДГрадация                     - ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - Градация индекса платежной дисциплины;
//     * ИДОАдресКомандыПодсказки        - Строка - адрес команды подсказки;
//     * ИФРАдресКомандыПодсказки        - Строка - адрес команды подсказки;
//     * ИПДАдресКомандыПодсказки        - Строка - адрес команды подсказки;
//     * ИДОНавигационнаяСсылкаПодсказки - Строка - навигационная ссылка подсказки;
//     * ИФРНавигационнаяСсылкаПодсказки - Строка - навигационная ссылка подсказки;
//     * ИПДНавигационнаяСсылкаПодсказки - Строка - навигационная ссылка подсказки;
//     * Активен                         - Булево;
//     * ТекстСтатуса                    - Строка;
//     * ДатаСтатуса                     - Дата;
//     * КодСтатуса                      - Строка;
//     * ИдентификаторСобытия            - Строка;
//     * ИдентификаторТипаСобытия        - Строка;
//     * ТипСобытияНазвание              - Строка;
//     * ДатаСобытия                     - Строка;
//     * ЗначениеСтарое                  - Строка;
//     * ЗначениеНовое                   - Строка;
//     * ВидОшибки                       - ПеречислениеСсылка.ВидыОшибокСПАРКРиски;
//     * ТекстОшибки                     - Строка;
//     * ДатаОбновления                  - Дата;
//     * СостояниеВыводаДанных           - Перечисления.СостоянияВыводаИндексовСПАРКРиски;
//     * СостояниеЗагрузкиДанных         - Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски;
//     * ИдентификаторФоновогоЗадания    - Уникальный идентификатор, Неопределено - в случае, если данных нет в кеше,
//                             то будет запущено фоновое задание получения данных и вернется идентификатор запущенного фонового задания;
//     * АдресХранилищаФоновогоЗадания   - Строка - адрес временного хранилища, куда фоновое задание поместит результат;
//     * ДатаЗаполненияКлиентскогоКэша  -  Дата - для хранения маркера времени в клиентском кэше.
//
Функция НовыйДанныеИндексов() Экспорт

	Результат = Новый Структура();

	// Основные данные.
	Результат.Вставить("Контрагент", Неопределено);
	Результат.Вставить("ИНН", "");
	Результат.Вставить("ПодлежитПроверке", Ложь);
	// Индексы.
	Результат.Вставить("ИндексДолжнойОсмотрительности", -1);
	Результат.Вставить("ИндексФинансовогоРиска", -1);
	Результат.Вставить("ИндексПлатежнойДисциплины", -1);
	Результат.Вставить("Активен", Ложь);
	Результат.Вставить("ТекстСтатуса", "");
	Результат.Вставить("ДатаСтатуса", '00010101');
	Результат.Вставить("КодСтатуса", 0);
	// Монитор событий.
	Результат.Вставить("ИдентификаторСобытия", "");
	Результат.Вставить("ИдентификаторТипаСобытия", "");
	Результат.Вставить("ТипСобытияНазвание", "");
	Результат.Вставить("ДатаСобытия", '00010101');
	Результат.Вставить("ЗначениеСтарое", "");
	Результат.Вставить("ЗначениеНовое", "");
	// Адреса и навигационные ссылки команд.
	Результат.Вставить("ИДОАдресКомандыПодсказки", "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексДолжнойОсмотрительности");
	Результат.Вставить("ИФРАдресКомандыПодсказки", "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексФинансовогоРиска");
	Результат.Вставить("ИПДАдресКомандыПодсказки", "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексПлатежнойДисциплины");
	Результат.Вставить("ИДОНавигационнаяСсылкаПодсказки", "SPARK:WhatIsIndexOfDueDiligence");
	Результат.Вставить("ИФРНавигационнаяСсылкаПодсказки", "SPARK:WhatIsFailureScore");
	Результат.Вставить("ИПДНавигационнаяСсылкаПодсказки", "SPARK:WhatIsPaymentIndex");
	// Прочее.
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
	Результат.Вставить("АдресХранилищаФоновогоЗадания", Неопределено);
	Результат.Вставить("ДатаЗаполненияКлиентскогоКэша", '00010101');

	#Если Клиент ИЛИ ВебКлиент Тогда

		// Индексы.
		Результат.Вставить("ИДОГрадация", ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка"));
		Результат.Вставить("ИФРГрадация", ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка"));
		Результат.Вставить("ИПДГрадация", ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка"));
		// Прочее.
		Результат.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПустаяСсылка"));
		Результат.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
		Результат.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка"));
		Результат.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка"));

	#Иначе

		// Индексы.
		Результат.Вставить("ИДОГрадация", Перечисления.ГрадацияИндексовСПАРКРиски.ПустаяСсылка());
		Результат.Вставить("ИФРГрадация", Перечисления.ГрадацияИндексовСПАРКРиски.ПустаяСсылка());
		Результат.Вставить("ИПДГрадация", Перечисления.ГрадацияИндексовСПАРКРиски.ПустаяСсылка());
		// Прочее.
		Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка());
		Результат.Вставить("ДатаОбновления", ТекущаяДатаСеанса());
		Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
		Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());

	#КонецЕсли

	Возврат Результат;

КонецФункции

// Возвращает структуру для хранения представлений индексов и других показателей для контрагента.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура возвращаемых данных с ключами:
//     * Заголовок                       - ФорматированнаяСтрока - фиксированное значение "1СПАРК Риски";
//     * ИндексДолжнойОсмотрительности   - ФорматированнаяСтрока, Неопределено - Индекс должной осмотрительности;
//     * ИндексФинансовогоРиска          - ФорматированнаяСтрока, Неопределено - Индекс финансового результата;
//     * ИндексПлатежнойДисциплины       - ФорматированнаяСтрока, Неопределено - Индекс платежной дисциплины;
//     * ТекущийСтатус                   - ФорматированнаяСтрока, Неопределено - статус контрагента;
//     * ПоследнееСобытие                - ФорматированнаяСтрока, Неопределено - последнее событие контрагента;
//     * Контрагент                      - ОпределяемыеТипы.КонтрагентБИП - контрагент;
//     * ИНН                             - Строка;
//     * ПодлежитПроверке                - Булево;
//     * ТекстОшибки                     - Строка;
//     * ИдентификаторФоновогоЗадания    - Уникальный идентификатор, Неопределено - в случае, если данных нет в кеше,
//                             то будет запущено фоновое задание получения данных и вернется идентификатор запущенного фонового задания;
//     * АдресХранилищаФоновогоЗадания   - Строка - адрес временного хранилища, куда фоновое задание поместит результат;
//     * ДатаЗаполненияКлиентскогоКэша  -  Дата - для хранения маркера времени в клиентском кэше;
//     * ВидОшибки                       - ПеречислениеСсылка.ВидыОшибокСПАРКРиски;
//     * ДатаОбновления                  - Дата;
//     * СостояниеВыводаДанных           - Перечисления.СостоянияВыводаИндексовСПАРКРиски;
//     * СостояниеЗагрузкиДанных         - Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.
//
Функция НовыйПредставленияИндексов() Экспорт

	Результат = Новый Структура();

	// Форматированные строки (представления).
	Результат.Вставить("Заголовок", Новый ФорматированнаяСтрока(НСтр("ru='1СПАРК Риски'")));
	Результат.Вставить("ИндексДолжнойОсмотрительности", Неопределено);
	Результат.Вставить("ИндексФинансовогоРиска", Неопределено);
	Результат.Вставить("ИндексПлатежнойДисциплины", Неопределено);
	Результат.Вставить("ТекущийСтатус", Неопределено);
	Результат.Вставить("ПоследнееСобытие", Неопределено);
	// Основные данные.
	Результат.Вставить("Контрагент", Неопределено);
	Результат.Вставить("ИНН", "");
	Результат.Вставить("ПодлежитПроверке", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
	Результат.Вставить("АдресХранилищаФоновогоЗадания", Неопределено);
	Результат.Вставить("ДатаЗаполненияКлиентскогоКэша", '00010101');
	// Адреса и навигационные ссылки команд.
	Результат.Вставить("ИДОАдресКомандыПодсказки", "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексДолжнойОсмотрительности");
	Результат.Вставить("ИФРАдресКомандыПодсказки", "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексФинансовогоРиска");
	Результат.Вставить("ИПДАдресКомандыПодсказки", "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексПлатежнойДисциплины");
	Результат.Вставить("ИДОНавигационнаяСсылкаПодсказки", "SPARK:WhatIsIndexOfDueDiligence");
	Результат.Вставить("ИФРНавигационнаяСсылкаПодсказки", "SPARK:WhatIsFailureScore");
	Результат.Вставить("ИПДНавигационнаяСсылкаПодсказки", "SPARK:WhatIsPaymentIndex");

	#Если Клиент ИЛИ ВебКлиент Тогда

		// Прочее.
		Результат.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПустаяСсылка"));
		Результат.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
		Результат.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка"));
		Результат.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка"));

	#Иначе

		// Прочее.
		Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка());
		Результат.Вставить("ДатаОбновления", ТекущаяДатаСеанса());
		Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
		Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());

	#КонецЕсли

	Возврат Результат;

КонецФункции

// Функция по значению индекса выдает его градацию.
//
// Параметры:
//  ЗначениеИндекса - Число, NULL, Неопределено - числовое значение индекса;
//  ИмяИндекса      - Строка - одно из значений ИндексДолжнойОсмотрительности, ИндексПлатежнойДисциплины, ИндексФинансовогоРиска.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - градация по значению.
//
Функция ГрадацияИндекса(ЗначениеИндекса, ИмяИндекса) Экспорт

	Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка");

	ТипЧисло = Тип("Число");

	// Определение интервалов индексов СПАРК Риски.
	Если ТипЗнч(ЗначениеИндекса) = ТипЧисло Тогда
		Если ВРег(ИмяИндекса) = ВРег("ИндексДолжнойОсмотрительности") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=40 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий");
			ИначеЕсли ЗначениеИндекса >=41 И ЗначениеИндекса <=71 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний");
			ИначеЕсли ЗначениеИндекса >=72 И ЗначениеИндекса <=100 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий");
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексПлатежнойДисциплины") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=49 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий");
			ИначеЕсли ЗначениеИндекса >=50 И ЗначениеИндекса <=79 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний");
			ИначеЕсли ЗначениеИндекса >=80 И ЗначениеИндекса <=100 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий");
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексФинансовогоРиска") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=14 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий");
			ИначеЕсли ЗначениеИндекса >=15 И ЗначениеИндекса <=85 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний");
			ИначеЕсли ЗначениеИндекса >=86 И ЗначениеИндекса <=100 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выводит информацию об индексах СПАРК Риски в элемент управления.
// Эта служебная процедура непосредственно заполняет элементы управления.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  Контрагент - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма      - УправляемаяФорма - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//                   В этой форме должен присутствовать реквизит "ИндексыСПАРКРиски" произвольного типа
//                     и (если заполнение будет осуществляться стандартным библиотечным способом), то элементы с именами:
//    * ДекорацияИндексыСПАРКРиски - Декорация текст;
//    * КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски - Декорация картинка;
//  ПараметрыОтображения - Структура - прочие параметры. Возможные ключи:
//    * ВариантОтображения - Строка - вариант отображения надписей в элементе управления. Возможные значения:
//     ** "Многострочный" - выводить данные в несколько строк;
//     ** "Однострочный"  - выводить данные в одну строку.
//
Процедура ОтобразитьИндексыСПАРК(
			РезультатИндексыКонтрагента,
			КонтрагентОбъект,
			Контрагент,
			Форма,
			ИспользованиеРазрешено,
			ПараметрыОтображения = Неопределено) Экспорт
	
	Если ИспользованиеРазрешено Тогда
		Если КонтрагентОбъект <> Неопределено Тогда
			СвойстваКонтрагента = СПАРКРискиКлиентСервер.СвойстваКонтрагентаВОбъекте(
				КонтрагентОбъект,
				Форма);
		Иначе
			СвойстваКонтрагента = СПАРКРискиКлиентСервер.НовыйСвойстваКонтрагента();
			СвойстваКонтрагента.Вставить("ПодлежитПроверке", Истина);
		КонецЕсли;
		РезультатИндексыКонтрагента.Вставить("ПодлежитПроверке", СвойстваКонтрагента.ПодлежитПроверке);
	КонецЕсли;
	
	// Переопределение.
	
	СтандартнаяОбработка = Истина;
	СПАРКРискиКлиентСерверПереопределяемый.ОтобразитьИндексыСПАРК(
		РезультатИндексыКонтрагента,
		КонтрагентОбъект,
		Контрагент,
		Форма,
		ИспользованиеРазрешено,
		ПараметрыОтображения,
		СтандартнаяОбработка);

	Если СтандартнаяОбработка <> Истина Тогда
		Возврат;
	КонецЕсли;

	// Стандартная обработка.

	Если Не ИспользованиеРазрешено Тогда
		Форма.Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТипСтруктура = Тип("Структура");

	Если РезультатИндексыКонтрагента.ПодлежитПроверке <> Истина Тогда
		// НЕ юридических лиц (физлиц, иностранные организации и т.п.) - не выводим вообще.
		Форма.Элементы.ДекорацияИндексыСПАРКРиски.Видимость                 = Ложь;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;
		Возврат;
	Иначе
		Форма.Элементы.ДекорацияИндексыСПАРКРиски.Видимость                 = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
	КонецЕсли;

	// В форме имена элементов управления и реквизита - фиксированные.
	// 1. В зависимости от того, загружены данные, или выполнятся фоновое задание, вывести или скрыть картинку ожидания.
	Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Подсказка = НСтр("ru='Выполняется получение данных из Интернет.'");
	ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Картинка = БиблиотекаКартинок.Предупреждение;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Подсказка = НСтр("ru='Получение данных из Интернет отменено.'");
	ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Картинка = БиблиотекаКартинок.Предупреждение;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Подсказка = НСтр("ru='Ошибка получения данных из Интернет.'");
	Иначе // Загрузка завершена или не осуществлялась.
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;
	КонецЕсли;

	ЦветСтиляЦветОсобогоТекста = СПАРКРискиВызовСервера.ЦветСтиля("ЦветОсобогоТекста");

	МассивСтрок = Новый Массив;

	ВариантОтображения = Неопределено;
	Если ТипЗнч(ПараметрыОтображения) = ТипСтруктура Тогда
		Если ПараметрыОтображения.Свойство("ВариантОтображения") Тогда
			ВариантОтображения = ПараметрыОтображения.ВариантОтображения;
		КонецЕсли;
	КонецЕсли;
	Если ВариантОтображения = "Однострочный" Тогда
		// Допустимое значение.
	ИначеЕсли ВариантОтображения = "Многострочный" Тогда
		// Допустимое значение.
	Иначе
		ВариантОтображения = "Многострочный"; // Значение по-умолчанию.
	КонецЕсли;

	Если ВариантОтображения = "Однострочный" Тогда
#Область ВыводДанных_Однострочный
		// Если сервис не подключен, то выводится:
		// "1СПАРК Риски: оценка надежности контрагентов. _Подробнее_".
		// Если данные есть, то:
		// "Индекс должной осмотрительности: %1 (_%2 риск_)".
		// В случае других ошибок, вывести их.
		ЕстьОшибкаПодключения = Истина;
		Если РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестныйИНН") Тогда
			ЕстьОшибкаПодключения = Ложь;
			МассивСтрок.Добавить(НСтр("ru='Нет информации о контрагенте'"));
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйЗапрос") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйИНН") Тогда
			ЕстьОшибкаПодключения = Ложь;
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Нет информации о контрагенте'"),
					,
					ЦветСтиляЦветОсобогоТекста));
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеПодлежитПроверке") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ОшибкаПодключения") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПревышеноКоличествоПопытокАутентификации") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит") Тогда
		Иначе // Пустое поле - ошибок нет.
			ЕстьОшибкаПодключения = Ложь;
			ЕстьОшибкаПолученияДанных = Ложь;

			ТекстОшибки = "";
			ЦветТекстаОшибки = ЦветСтиляЦветОсобогоТекста;
			Если РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных") Тогда
				ЕстьОшибкаПолученияДанных = Истина;
				Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
					ТекстОшибки = НСтр("ru='Получение данных...'");
					ЦветТекстаОшибки = Неопределено; // Авто
				ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
					ТекстОшибки = НСтр("ru='Ошибка получения данных (слишком медленное соединение или отменено администратором)'");
				ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
					ТекстОшибки = НСтр("ru='Ошибка получения данных'");
				Иначе // Загрузка завершена или не осуществлялась.
					ТекстОшибки = НСтр("ru='Ошибка получения данных (данные не получены)'");
				КонецЕсли;
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН") Тогда
				ЕстьОшибкаПолученияДанных = Истина;
				ТекстОшибки = НСтр("ru='Нет информации о контрагенте'");
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша") Тогда
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания") Тогда
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка") Тогда
			Иначе
				ЕстьОшибкаПолученияДанных = Истина;
				ТекстОшибки = НСтр("ru='Неопределенная ошибка'");
			КонецЕсли;
			Если ЕстьОшибкаПолученияДанных = Истина Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки, , ЦветТекстаОшибки));
			Иначе
				
				// Если контрагент не активен, вывести сообщение "Контрагент прекратил деятельность %ДатаСтатуса%".
				Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='Контрагент прекратил деятельность %1'"),
								Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
							,
							ЦветСтиляЦветОсобогоТекста));
					МассивСтрок.Добавить(Символы.ПС);
				Иначе
					// Если есть событие, вывести его. В противном случае - индексы.
					Если НЕ ПустаяСтрока(РезультатИндексыКонтрагента.ТипСобытияНазвание) Тогда
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 %2'"),
									РезультатИндексыКонтрагента.ТипСобытияНазвание,
									Формат(РезультатИндексыКонтрагента.ДатаСобытия, "ДЛФ=D")),
								,
								ЦветСтиляЦветОсобогоТекста));
						МассивСтрок.Добавить(Символы.ПС);
					Иначе
						Если (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
								И (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда
							МассивСтрок.Добавить(
								Новый ФорматированнаяСтрока(
									НСтр("ru='Индекс должной осмотрительности:'")));
							МассивСтрок.Добавить(Символы.НПП);
							МассивСтрок.Добавить(
								Новый ФорматированнаяСтрока(
									СтрШаблон(
										НСтр("ru='%1 (%2)'"),
										РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
										НРег(РезультатИндексыКонтрагента.ИДОГрадация)),
									, // Шрифт
									ЦветИндекса(
										РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
										"ИндексДолжнойОсмотрительности"), // ЦветТекста
									, // ЦветФона
									"SPARK:WhatIsIndexOfDueDiligence")); // Ссылка
						Иначе
							МассивСтрок.Добавить(
								Новый ФорматированнаяСтрока(
									НСтр("ru='Нет информации о контрагенте'")));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьОшибкаПодключения = Истина Тогда
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='1СПАРК Риски: оценка надежности контрагентов. '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Подробнее'"),
					,
					,
					,
					"SPARK:About"));
		КонецЕсли;
#КонецОбласти
	Иначе // "Многострочный".
#Область ВыводДанных_Многострочный
		// Если сервис не подключен, то выводится:
		// "1СПАРК Риски|Оценка надежности контрагентов.|_Подробнее о сервисе_".
		// Если данные есть, то:
		// "1СПАРК Риски|Событие мониторинга %1|Индекс ...: %2 (_%3 риск_)|Индекс ...: %4 (_%5 риск_)|Индекс ...: %6 (_%7 риск_)".
		// В случае других ошибок, вывести их.
		ЕстьОшибкаПодключения = Истина;
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='1СПАРК Риски'"),
				Новый Шрифт(Форма.Элементы.ДекорацияИндексыСПАРКРиски.Шрифт, , , Истина))); // Жирный шрифт
		МассивСтрок.Добавить(Символы.ПС);
		Если РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестныйИНН") Тогда
			ЕстьОшибкаПодключения = Ложь;
			МассивСтрок.Добавить(НСтр("ru='Нет информации о контрагенте'"));
			ИнформацияВыведена = Истина;
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйЗапрос") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйИНН") Тогда
			ЕстьОшибкаПодключения = Ложь;
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Нет информации о контрагенте'"),
					,
					ЦветСтиляЦветОсобогоТекста));
			ИнформацияВыведена = Истина;
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеПодлежитПроверке") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ОшибкаПодключения") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПревышеноКоличествоПопытокАутентификации") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит") Тогда
		Иначе // Пустое поле - ошибок нет.
			ЕстьОшибкаПодключения = Ложь;
			ЕстьОшибкаПолученияДанных = Ложь;

			ТекстОшибки = "";
			ЦветТекстаОшибки = ЦветСтиляЦветОсобогоТекста;
			Если РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных") Тогда
				ЕстьОшибкаПолученияДанных = Истина;
				Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
					ТекстОшибки = НСтр("ru='Получение данных...'");
					ЦветТекстаОшибки = Неопределено; // Авто
				ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
					ТекстОшибки = НСтр("ru='Ошибка получения данных (слишком медленное соединение или отменено администратором)'");
				ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
					ТекстОшибки = НСтр("ru='Ошибка получения данных'");
				Иначе // Загрузка завершена или не осуществлялась.
					ТекстОшибки = НСтр("ru='Ошибка получения данных (данные не получены)'");
				КонецЕсли;
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН") Тогда
				ЕстьОшибкаПолученияДанных = Истина;
				ТекстОшибки = НСтр("ru='Нет информации о контрагенте'");
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша") Тогда
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания") Тогда
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка") Тогда
			Иначе
				ЕстьОшибкаПолученияДанных = Истина;
				ТекстОшибки = НСтр("ru='Неопределенная ошибка'");
			КонецЕсли;
			Если ЕстьОшибкаПолученияДанных = Истина Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки, , ЦветТекстаОшибки));
				МассивСтрок.Добавить(Символы.ПС);
			Иначе
				// Устаревшие данные вывести определенным цветом.
				Если РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
					ЦветТекста = СПАРКРискиВызовСервера.ЦветСтиля("ПросроченныеДанныеЦвет");
				Иначе
					ЦветТекста = Неопределено;
				КонецЕсли;

				// Если контрагент не активен, вывести сообщение "Контрагент прекратил деятельность %ДатаСтатуса%".
				Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='Контрагент прекратил деятельность %1'"),
								Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
							,
							ЦветСтиляЦветОсобогоТекста));
					МассивСтрок.Добавить(Символы.ПС);
				Иначе
					ИнформацияВыведена = Ложь;
					// Если есть событие, вывести его. В противном случае - индексы.
					Если НЕ ПустаяСтрока(РезультатИндексыКонтрагента.ТипСобытияНазвание) Тогда
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 %2'"),
									РезультатИндексыКонтрагента.ТипСобытияНазвание,
									Формат(РезультатИндексыКонтрагента.ДатаСобытия, "ДЛФ=D")),
								,
								ЦветСтиляЦветОсобогоТекста));
						МассивСтрок.Добавить(Символы.ПС);
						ИнформацияВыведена = Истина;
					КонецЕсли;

					Если (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
							И (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								НСтр("ru='Индекс должной осмотрительности:'")));
						МассивСтрок.Добавить(Символы.НПП);
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 (%2)'"),
									РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
									НРег(РезультатИндексыКонтрагента.ИДОГрадация)),
								, // Шрифт
								ЦветИндекса(
									РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
									"ИндексДолжнойОсмотрительности"), // ЦветТекста
								, // ЦветФона
								"SPARK:WhatIsIndexOfDueDiligence")); // Ссылка
						МассивСтрок.Добавить(Символы.ПС);
						ИнформацияВыведена = Истина;
					КонецЕсли;

					Если (РезультатИндексыКонтрагента.ИндексФинансовогоРиска >= 0)
							И (РезультатИндексыКонтрагента.ИндексФинансовогоРиска <= 100) Тогда
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								НСтр("ru='Индекс финансового риска:'")));
						МассивСтрок.Добавить(Символы.НПП);
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 (%2)'"),
									РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
									НРег(РезультатИндексыКонтрагента.ИФРГрадация)),
								, // Шрифт
								ЦветИндекса(
									РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
									"ИндексФинансовогоРиска"), // ЦветТекста
								, // ЦветФона
								"SPARK:WhatIsFailureScore")); // Ссылка
						МассивСтрок.Добавить(Символы.ПС);
						ИнформацияВыведена = Истина;
					КонецЕсли;

					Если (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0)
							И (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100) Тогда
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								НСтр("ru='Индекс платежной дисциплины:'")));
						МассивСтрок.Добавить(Символы.НПП);
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 (%2)'"),
									РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
									НРег(РезультатИндексыКонтрагента.ИПДГрадация)),
								, // Шрифт
								ЦветИндекса(
									РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
									"ИндексПлатежнойДисциплины"), // ЦветТекста
								, // ЦветФона
								"SPARK:WhatIsPaymentIndex")); // Ссылка
						МассивСтрок.Добавить(Символы.ПС);
						ИнформацияВыведена = Истина;
					КонецЕсли;

					Если ИнформацияВыведена <> Истина Тогда // Ничего не выведено - скрыть декорацию.
						МассивСтрок.Добавить(НСтр("ru='Нет информации о контрагенте'"));
						ИнформацияВыведена = Истина;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		Если ЕстьОшибкаПодключения = Истина Тогда
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Оценка надежности контрагентов. '")));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Подробнее о сервисе'"),
					,
					,
					,
					"SPARK:About"));
		КонецЕсли;
#КонецОбласти
	КонецЕсли;

	Результат = Новый ФорматированнаяСтрока(МассивСтрок);
	Форма.Элементы.ДекорацияИндексыСПАРКРиски.Заголовок = Результат;

КонецПроцедуры

// Возвращает информацию об индексах СПАРК Риски в виде структуры форматированных строк.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов());
//  Контрагент - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма      - УправляемаяФорма - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//  ИнициироватьЗагрузкуДанных - Булево - в случае, если данных нет или они просрочены, то запустить фоновое задание загрузки данных.
//
// Возвращаемое значение:
//   Структура - Структура представлений индексов и других показателей с ключами, как СПАРКРискиКлиентСервер.НовыйПредставленияИндексов().
//
Функция ПолучитьПредставленияИндексов(
			РезультатИндексыКонтрагента,
			Контрагент,
			Форма) Экспорт

	Результат = СПАРКРискиКлиентСервер.НовыйПредставленияИндексов();
	Результат.Вставить("Контрагент", Контрагент);

	Если НЕ ИспользованиеРазрешено() Тогда
		РезультатИндексыКонтрагента.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));
		Возврат Результат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	СПАРКРискиКлиентСерверПереопределяемый.ПолучитьПредставленияИндексов(
		Результат,
		РезультатИндексыКонтрагента,
		Контрагент,
		Форма,
		СтандартнаяОбработка);

	Если СтандартнаяОбработка = Истина Тогда

		ЦветСтиляЦветОсобогоТекста = СПАРКРискиВызовСервера.ЦветСтиля("ЦветОсобогоТекста");

		// Статусы и общая информация.
		ЗаполнитьЗначенияСвойств(
			Результат,
			РезультатИндексыКонтрагента,
			"Контрагент, ИНН, ПодлежитПроверке, ТекстОшибки, ИдентификаторФоновогоЗадания, АдресХранилищаФоновогоЗадания, ДатаЗаполненияКлиентскогоКэша,
				|ВидОшибки, ДатаОбновления, СостояниеВыводаДанных, СостояниеЗагрузкиДанных");

		// Форматированные строки (представления).
		Результат.Вставить("Заголовок", Новый ФорматированнаяСтрока(НСтр("ru='1СПАРК Риски'")));

		Если (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
				И (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда

			Результат.Вставить("ИндексДолжнойОсмотрительности",
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru='%1 (%2)'"),
						РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
						НРег(РезультатИндексыКонтрагента.ИДОГрадация)),
					, // Шрифт
					ЦветИндекса(
						РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
						"ИндексДолжнойОсмотрительности"), // ЦветТекста
					, // ЦветФона
					"SPARK:WhatIsIndexOfDueDiligence")); // Ссылка

		КонецЕсли;

		Если (РезультатИндексыКонтрагента.ИндексФинансовогоРиска >= 0)
				И (РезультатИндексыКонтрагента.ИндексФинансовогоРиска <= 100) Тогда

			Результат.Вставить("ИндексФинансовогоРиска",
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru='%1 (%2)'"),
						РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
						НРег(РезультатИндексыКонтрагента.ИФРГрадация)),
					, // Шрифт
					ЦветИндекса(
						РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
						"ИндексФинансовогоРиска"), // ЦветТекста
					, // ЦветФона
					"SPARK:WhatIsFailureScore")); // Ссылка

		КонецЕсли;

		Если (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0)
				И (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100) Тогда

			Результат.Вставить("ИндексПлатежнойДисциплины",
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru='%1 (%2)'"),
						РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
						НРег(РезультатИндексыКонтрагента.ИПДГрадация)),
					, // Шрифт
					ЦветИндекса(
						РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
						"ИндексПлатежнойДисциплины"), // ЦветТекста
					, // ЦветФона
					"SPARK:WhatIsPaymentIndex")); // Ссылка

		КонецЕсли;

		Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
			Результат.Вставить("ТекущийСтатус",
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru='Контрагент прекратил деятельность %1'"),
						Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
					,
					ЦветСтиляЦветОсобогоТекста));
		КонецЕсли;

		Если НЕ ПустаяСтрока(РезультатИндексыКонтрагента.ТипСобытияНазвание) Тогда
			Результат.Вставить("ПоследнееСобытие",
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru='%1 %2'"),
						РезультатИндексыКонтрагента.ТипСобытияНазвание,
						Формат(РезультатИндексыКонтрагента.ДатаСобытия, "ДЛФ=D")),
					,
					ЦветСтиляЦветОсобогоТекста));
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Тарификация

Функция ИдентификаторУслугиИндикаторыРиска() Экспорт
	
	Возврат "1c-spark-risks-indexes";
	
КонецФункции

Функция ИдентификаторУслугиМониторингКомпаний() Экспорт
	
	Возврат "1c-spark-risks-events";
	
КонецФункции

Функция ИдентификаторУслугиСправкиПоКомпаниям() Экспорт
	
	Возврат "1c-spark-risks-reports";
	
КонецФункции

#КонецОбласти

#КонецОбласти
