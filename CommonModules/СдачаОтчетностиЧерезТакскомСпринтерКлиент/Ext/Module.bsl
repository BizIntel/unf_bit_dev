
#Область ПрограммныйИнтерфейс

#Область ПриНажатииНаКнопкуЗашифроватьИОтправить

Процедура ПриНажатииНаКнопкуЗашифроватьИОтправить(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриНажатииНаКнопкуЗашифроватьИОтправитьПослеПроверки", 
		ЭтотОбъект, 
		ДополнительныеПараметры); 
	
	ПроверитьНастройкиИнтеграцииСоСпринтером(Форма, ОписаниеОповещения);
		
КонецПроцедуры

Процедура ПриНажатииНаКнопкуЗашифроватьИОтправитьПослеПроверки(Результат, ВходящийКонтекст) Экспорт
	
	ОрганизацияСсылка 	= ВходящийКонтекст.Форма.Объект.Организация;
	СсылкаНаОтчет 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(ВходящийКонтекст.Форма);
	
	//сохраняем тексты выгрузки в каталог 
	КаталогСохранения = СдачаОтчетностиЧерезТакскомСпринтерВызовСервера.ПолучитьНастройкиИнтеграцииСоСпринтером(ОрганизацияСсылка).КаталогОтправкиДанныхОтчетности;
	
	ИдентификаторФормы = ВходящийКонтекст.Форма.УникальныйИдентификатор;
	ИмяФайлаВыгрузки = "";
	
	СвойстваФайлаВыгрузки = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ВыгрузитьДокументСервер(СсылкаНаОтчет, ИдентификаторФормы);
	Если СвойстваФайлаВыгрузки = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отправка отчета прервана.'"));
		Возврат;
	Иначе
		АдресФайлаВыгрузки = СвойстваФайлаВыгрузки.АдресФайлаВыгрузки;
		ИмяФайлаВыгрузки = СвойстваФайлаВыгрузки.ИмяФайлаВыгрузки;	
	КонецЕсли;
	
	ПолноеИмяФайлаОтправки = КаталогСохранения + ИмяФайлаВыгрузки;
	
	ДополнительныеПараметры = Новый Структура("ОрганизацияСсылка", ОрганизацияСсылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуЗашифроватьИОтправитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	#Если ВебКлиент Тогда
		ПолучитьФайл(АдресФайлаВыгрузки, ИмяФайлаВыгрузки, Истина);
		ОткрытьФорму("РегистрСведений.НастройкиИнтеграцииСоСпринтером.Форма.ФормаПередОтправкой", Новый Структура("ПолноеИмяФайлаОтправки", ПолноеИмяФайлаОтправки),,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	#Иначе
		ФайлГотовКОтправке = ПолучитьФайл(АдресФайлаВыгрузки, ПолноеИмяФайлаОтправки, Ложь);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ФайлГотовКОтправке);
	#КонецЕсли

КонецПроцедуры

Процедура ПриНажатииНаКнопкуЗашифроватьИОтправитьЗавершение(ФайлГотовКОтправке, ДополнительныеПараметры) Экспорт
	
	ОрганизацияСсылка = ДополнительныеПараметры.ОрганизацияСсылка;
	//отправляем файл выгрузки в Спринтер
	Если ФайлГотовКОтправке = Истина Тогда
	
		ОтправитьВСпринтерСогласноНастройкамОрганизации(ОрганизацияСсылка);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверитьНастройки

Процедура ПроверитьНастройкиИнтеграцииСоСпринтером(Форма, ВыполняемоеОповещение) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", 					Форма);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьНастройкиИнтеграцииСоСпринтеромПослеУстановкиРасширенияРаботыСФайлами", 
		ЭтотОбъект, 
		ДополнительныеПараметры); 
	
	ТекстСообщения = НСтр("ru = 'Для работы подсистемы документооборота с контролирующими органами необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Истина);

КонецПроцедуры
	
Процедура ПроверитьНастройкиИнтеграцииСоСпринтеромПослеУстановкиРасширенияРаботыСФайлами(РасширенияРаботыСФайламиПодключено, ВходящийКонтекст) Экспорт
	
	Если НЕ РасширенияРаботыСФайламиПодключено Тогда
		ПоказатьПредупреждение(, "Не подключено расширение работы с файлами!");
		Возврат;
	КонецЕсли;
	
	ОрганизацияСсылка = ВходящийКонтекст.Форма.Объект.Организация;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ПоказатьПредупреждение(, "Не указана организация!");
		Возврат;
	КонецЕсли;
	
	НастройкиИнтеграцииСоСпринтером = СдачаОтчетностиЧерезТакскомСпринтерВызовСервера.ПолучитьНастройкиИнтеграцииСоСпринтером(ОрганизацияСсылка);
	Если НастройкиИнтеграцииСоСпринтером = Неопределено Тогда
		ПоказатьПредупреждение(, "В параметрах выбранной организации нужно включить возможность и настроить отправку отчетности через ПК ""Спринтер""!");
		Возврат;
	КонецЕсли;
	
	КодАбонента 					= НастройкиИнтеграцииСоСпринтером.КодАбонента;
	КаталогПрограммыЭлПочты 		= НастройкиИнтеграцииСоСпринтером.КаталогПрограммыЭлектроннойПочты;
	КаталогОтправкиДанныхОтчетности = НастройкиИнтеграцииСоСпринтером.КаталогОтправкиДанныхОтчетности;
	
	Если СтрДлина(КодАбонента) <> 7 Тогда 
		ПоказатьПредупреждение(, "В параметрах интеграции с ПК ""Спринтер"" неверно задан логин абонента!");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", 							ВходящийКонтекст.Форма);
	ДополнительныеПараметры.Вставить("КаталогПрограммыЭлПочты", 		КаталогПрограммыЭлПочты);
	ДополнительныеПараметры.Вставить("КаталогОтправкиДанныхОтчетности", КаталогОтправкиДанныхОтчетности);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 			ВходящийКонтекст.ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНастройкиИнтеграцииСоСпринтеромПослеПроверкиКаталогаПрограммыЭлПочты", ЭтотОбъект, ДополнительныеПараметры);
	ОперацииСФайламиЭДКОКлиент.ПолучитьСвойстваФайла(ОписаниеОповещения, КаталогПрограммыЭлПочты);

КонецПроцедуры

Процедура ПроверитьНастройкиИнтеграцииСоСпринтеромПослеПроверкиКаталогаПрограммыЭлПочты(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Если Результат.СвойстваФайла.Существует Тогда
			
			Если ПустаяСтрока(ВходящийКонтекст.КаталогОтправкиДанныхОтчетности) Тогда
				ПоказатьПредупреждение(, "В параметрах интеграции с ПК ""Спринтер"" не задан каталог отправки данных отчетности!");
				Возврат;
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНастройкиИнтеграцииСоСпринтеромПослеПроверкиИсполняемогоФайла", ЭтотОбъект, ВходящийКонтекст);
			ОперацииСФайламиЭДКОКлиент.ПолучитьСвойстваФайла(ОписаниеОповещения, ВходящийКонтекст.КаталогПрограммыЭлПочты + "run_dipost.bat");
		Иначе
			ПоказатьПредупреждение(, "В параметрах интеграции с ПК ""Спринтер"" неверно задан каталог программы электронной почты!");
			Возврат;
		КонецЕсли;
		
	Иначе
	     ПоказатьПредупреждение(, "В параметрах интеграции с ПК ""Спринтер"" неверно задан каталог программы электронной почты!");
		 Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНастройкиИнтеграцииСоСпринтеромПослеПроверкиИсполняемогоФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Если Результат.СвойстваФайла.Существует Тогда
			
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Истина);
			
		Иначе
			ПоказатьПредупреждение(, "В каталоге программы электронной почты, указанном в параметрах интеграции с ПК ""Спринтер"", не найден файл run_dipost.bat!");
		КонецЕсли;
		
	Иначе
	     ПоказатьПредупреждение(, "В каталоге программы электронной почты, указанном в параметрах интеграции с ПК ""Спринтер"", не найден файл run_dipost.bat!");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Процедура ОтправитьВСпринтерСогласноНастройкамОрганизации(ОрганизацияСсылка) Экспорт
	
	НастройкиИнтеграцииСоСпринтером = СдачаОтчетностиЧерезТакскомСпринтерВызовСервера.ПолучитьНастройкиИнтеграцииСоСпринтером(ОрганизацияСсылка);
	
	КодАбонента = НастройкиИнтеграцииСоСпринтером.КодАбонента;
	КаталогПрограммыЭлПочты = НастройкиИнтеграцииСоСпринтером.КаталогПрограммыЭлектроннойПочты;
	
	Попытка
		ОперацииСФайламиЭДКОКлиент.ЗапуститьПриложениеНаКлиенте(, 
			КаталогПрограммыЭлПочты + "run_dipost.bat " + КаталогПрограммыЭлПочты + " " + КодАбонента + " -t");
		
	Исключение
		ПоказатьПредупреждение(, "При запуске приложения для отправки отчетности произошла ошибка:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
