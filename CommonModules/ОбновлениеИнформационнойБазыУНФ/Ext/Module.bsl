////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы (УНФ)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Версия = "1.6.9.36";
	
	Если ВРег(Метаданные.Имя) = ВРег("УправлениеНебольшойФирмойБазовая") Тогда
		
		Описание.Имя = "УправлениеНебольшойФирмойБазовая";
		
	Иначе
		
		Описание.Имя = "УправлениеНебольшойФирмой";
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_РазделенныеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_ОбщиеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.5.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьРеквизитыСценариевПланирования";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.5.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПроверитьИспользованиеФактическогоСценария";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПеренестиПериодПланированияВДокументыПланПродаж";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1fd15eb-fe3e-474b-81e7-027e8e4eefcb");
	Обработчик.Комментарий = НСтр("ru = 'Перенос дат начала и окончания планирования из справочника в документы ""План продаж"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПеренестиПериодПланированияВДокументыБюджета";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c3660265-4bef-470d-b8af-2f3455a70b31");
	Обработчик.Комментарий = НСтр("ru = 'Перенос дат начала и окончания планирования из справочника в документы ""Бюджет"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "1.6.5.4";
	Обработчик.Процедура		= "ОбновлениеИнформационнойБазыУНФ.УстановитьПараметрыНабораСвойствСправочникаПроекты";
	Обработчик.Комментарий		= НСтр("ru = 'Подключение дополнительных реквизитов к справочнику ""Проекты"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.5.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьНастройкиОтчетов_1_6_5";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4a38548b-24a9-4b42-b69f-df427efb9bff");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек отчетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.5.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОчиститьЗаписиДублейСПустымИНН";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.ОбщиеДанные                  = Ложь;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.РежимВыполнения              = "Оперативно";
	Обработчик.Версия    = "1.6.5.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УдалитьУстаревшиеОбработчики";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия      = "1.6.5.10";
	Обработчик.Процедура   = "ОбновлениеИнформационнойБазыУНФ.ДобавитьВКалендарьЗадачуПоСЗВМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия      = "1.6.6.2";
	Обработчик.Процедура   = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьРеквизитыКлючевыхОпераций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.6.6";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ПравилаРабочегоПроцесса.ЗаполнитьПоставляемыеПравила";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.6.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьВходящееИсходящееСобытие";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1af561da-a528-490a-9530-944824b1f578");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака события ""Входящее/Исходящее"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.6.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ИнициализироватьНовыеВозможностиПодсистемыИмпорта";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.6.19";
	Обработчик.Процедура = "Справочники.РегламентированныеОтчеты.ЗаполнитьСписокРегламентированныхОтчетов";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.6.19";
	Обработчик.Процедура   = "ОбновлениеИнформационнойБазыУНФ.ДобавитьВКалендарьЗадачуПоАлкогольнойДекларации12";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.6.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновлениеСистемыНалогобложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("65e9dbd4-383a-4e84-b1d6-9c65dc26cffe");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака  розничной продажи алкоголя.");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.6.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ДобавитьОграничениеДоступаПоВидуДоговоровКредитаИЗайма";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.6.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ИнициализироватьНовыйСчетУчетаПодсистемыИмпорта";
	
	// МобильноеПриложение
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.6.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьКонстантуЭтоОбычноеПриложение";
	// Конец МобильноеПриложение
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "1.6.6.22";
	Обработчик.Процедура		= "ОбновлениеИнформационнойБазыУНФ.УстановитьПараметрыНабораСвойствСправочникаСерийныеНомера";
	Обработчик.Комментарий		= НСтр("ru = 'Подключение дополнительных реквизитов к справочнику ""Серийные номера"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.6.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьНастройкиОтчетов_1_6_6";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1afede5f-3c06-4646-a897-adfc32178313");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек отчетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "1.6.6.25";
	Обработчик.Процедура		= "ОбновлениеИнформационнойБазыУНФ.УстановитьПараметрыНабораСвойствДокументаПриемИПередачаВРемонт";
	Обработчик.Комментарий		= НСтр("ru = 'Подключение дополнительных реквизитов к документу Прием и передача в ремонт.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.6.36";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОчиститьОшибочныеСостоянияПроверкиКонтрагентов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fb9955ef-91b5-499c-8138-55b02992d477");
	Обработчик.Комментарий = НСтр("ru = 'Очистка ошибочных состояний проверки контрагентов по ФНС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.6.42";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновлениеВзносов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bd222b45-8271-45a1-b899-365da0b8ae65");
	Обработчик.Комментарий = НСтр("ru = 'Обновление взносов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.7.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ИнициализироватьНовыйСпособХраненияПаролейОбменаССайтом";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.7.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьКИ_ФизическиеЛица_Email";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьСправочникиСостояний";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.7.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьОсновныеВидыЗаказов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.7.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьЦветЗавершенныхСостоянийЗаказов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.7.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьВсеЗаказы";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a6850ce5-4bd3-4723-bfb6-5f211e36018d");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет виды заказов и состояния в заказах покупателей, заказ-нарядах, заказах поставщикам, заказах на производство.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.7.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьВидыНалогов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ebda4461-cafc-4fe5-b247-ad1bccad01b1");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет виды налогов КБК по умолчанию.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.7.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьНастройкиОтчетов_1_6_7";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eeefe3a3-d584-4cf8-9cb2-6875220436a2");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек отчетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "1.6.7.36";
	Обработчик.Процедура   = "ОбновлениеИнформационнойБазыУНФ.ДобавитьЗадачиОтчетностиНа2017год";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.7.45";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьВзносСвыше300трВПФР";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f0c4e9ed-7674-4010-8295-bdcdeab03100");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет виды налогов КБК по умолчанию.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.7.52";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ИсправлениеЗаписейОЦенахДинамическихВидовЦен";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0a7221e8-063b-4af9-a658-e7224ff2f1ce");
	Обработчик.Комментарий = НСтр("ru = 'Исправление записей о ценах динамических видов цен'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.8.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СоздатьКассовыеСменыПоОткрытымОтчетам";
	Обработчик.Комментарий = НСтр("ru = 'Открытие кассовых смен'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.8.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.КорректировкаШаблонаОчередиЗаданийРассылкаЭлектронныхЧеков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.8.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.КорректировкаЗаданияОбластиДанныхРассылкаЭлектронныхЧеков";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("79d75613-6ef0-45e2-af05-1a58edfed0ce");
	Обработчик.Комментарий = НСтр("ru = 'Включение признака Использования для фонового задания Рассылка электронных чеков'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.8.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьКБКНА2017год";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("993e5ca9-3584-442d-a27f-133e1a3b872e");
	Обработчик.Комментарий = НСтр("ru = 'Обновление справочника Виды налогов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.НастроитьРассылкуСостояниеКомпании";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ba62fa77-39c9-4870-a1fa-0b4c2eb796f2");
	Обработчик.Комментарий = НСтр("ru = 'Настройка рассылки ""Состояние компании"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьДатыВыставленияДокументовПоДоговорамОбслуживания";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0a9c2c66-ce20-4bf1-a4ff-e5653066d2fe");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение дат выставления документов в договорах обслуживания.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьКонстантуУчетПоЯчейкам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьСпособРасчетаСебестоимостиКалькуляции";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9fac974e-8a9d-45de-94ec-606d3f330cab");
	Обработчик.Комментарий = НСтр("ru = 'Обновление способа расчета себестоимости калькуляции в заказах покупателя.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОчиститьОчередьРасчетаЦенОтСтатическихВидовЦен";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПерезаполнитьОтчетыПереработчика";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьЦелевоеВремяОперацийПроизводительности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьШаблоныСообщений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьИспользованиеСервисаСпаркРиски";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "1.6.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьДвиженияРемонтыОплатаСчетовИЗаказов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.9.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьПоказателиНа2017год";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьНастройкиОтчетов_1_6_9";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2cfd57f-ef5e-4dfd-a6f6-00525d18f02e");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек отчетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.9.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьВычетыНДФЛНА2016год";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьЗначенияКБКНа2017год";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a9b71056-6625-4946-86c0-4442dba9268c");
	Обработчик.Комментарий = НСтр("ru = 'Обновление регистра сведений Значения КБК.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.24";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОтключитьРассылкуСостояниеКомпании";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b6139d98-a0f2-4eb0-b587-0c41fcb3d21a");
	Обработчик.Комментарий = НСтр("ru = 'Отключение рассылки ""Состояние компании"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.9.25";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьЗадачиВПФРНа2017год";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.26";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбработатьПеремещениеДенежныхСредств";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("520ddce7-723f-4aad-922e-071f8bcabb91");
	Обработчик.Комментарий = НСтр("ru = 'Обработка документов перемещения денежных средств'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.9.27";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УдалитьЗаданияРасчетаОчередиЦен";
	Обработчик.Комментарий = НСтр("ru = 'Удалить задания расчета очереди цен в сервисном приложении.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "1.6.9.27";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗапланироватьЗаданияРасчетаОчередиЦен";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d69d4eae-68cf-4ff3-9692-a449e6a200b4");
	Обработчик.Комментарий = НСтр("ru = 'Планировщик задания расчета очереди цен.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.9.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьТарифыСтраховыхВзносов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "1.6.9.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьПрофильПроизводствоСобственникам";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПервыйЗапуск_ОбщиеДанные

//(5.Общий) Заполняем справочник ОКУН
Процедура ЗагрузитьОКУН() Экспорт
	
	Справочники.ОКУН.ЗагрузитьКлассификатор();
	Справочники.ОКУН.ПроставитьВидДеятельностиОКУН();
	
КонецПроцедуры

//(6.Общий) Заполняет РС КоэффициентДефлятор
//
Процедура ЗаполнитьКоэффициентДефлятор() Экспорт
	
	// переписываем сразу весь набор
	Набор = РегистрыСведений.КоэффициентДефлятор.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20030101';
	Запись.Значение = 1;
	
	Запись = Набор.Добавить();
	Запись.Период = '20040101';
	Запись.Значение = 1.133;
	
	Запись = Набор.Добавить();
	Запись.Период = '20050101';
	Запись.Значение = 1.104;
	
	Запись = Набор.Добавить();
	Запись.Период = '20060101';
	Запись.Значение = 1.132;
	
	Запись = Набор.Добавить();
	Запись.Период = '20070101';
	Запись.Значение = 1.096;
	
	Запись = Набор.Добавить();
	Запись.Период = '20080101';
	Запись.Значение = 1.081;
	
	Запись = Набор.Добавить();
	Запись.Период = '20090101';
	Запись.Значение = 1.148;
	
	Запись = Набор.Добавить();
	Запись.Период = '20100101';
	Запись.Значение = 1.295;
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.Значение = 1.372;
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.Значение = 1.4942;
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.Значение = 1.569;
	
	Запись = Набор.Добавить();
	Запись.Период = '20140101';
	Запись.Значение = 1.672;
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.Значение = 1.798;
	
	Набор.Записать();
	
КонецПроцедуры

//(7.Общий) Заполнять РС МРОТ
//
Процедура ЗагрузитьМРОТ() Экспорт
	
	Набор = РегистрыСведений.МРОТ.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20000701';
	Запись.Значение = 132;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010101';
	Запись.Значение = 200;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010701';
	Запись.Значение = 300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20020501';
	Запись.Значение = 450;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20031001';
	Запись.Значение = 600;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050101';
	Запись.Значение = 720;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050901';
	Запись.Значение = 800;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20060501';
	Запись.Значение = 1100;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20070901';
	Запись.Значение = 2300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20090101';
	Запись.Значение = 4330;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20110601';
	Запись.Значение = 4611;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20130101';
	Запись.Значение = 5205;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20140101';
	Запись.Значение = 5554;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20150101';
	Запись.Значение = 5965;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20160101';
	Запись.Значение = 6204;
	
	Запись.Период = '20170101';
	Запись.Значение = 7500;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПервыйЗапуск_РазделенныеДанные

//(1) Процедура загружает управленческий план счетов из макета.
//
Процедура ЗагрузитьУправленческийПланСчетовПервыйЗапуск()
	
	// 00.
	Счет = ПланыСчетов.Управленческий.Служебный.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 01.
	Счет = ПланыСчетов.Управленческий.ВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 02.
	Счет = ПланыСчетов.Управленческий.АмортизацияВнеоборотныхАктивов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 08.
	Счет = ПланыСчетов.Управленческий.ВложенияВоВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 10.
	Счет = ПланыСчетов.Управленческий.СырьеИМатериалы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 20.
	Счет = ПланыСчетов.Управленческий.НезавершенноеПроизводство.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.ТоварыПродукция;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 25.
	Счет = ПланыСчетов.Управленческий.КосвенныеЗатраты.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемВыпуска;
	Счет.Записать();
	
	// 41.
	Счет = ПланыСчетов.Управленческий.ТоварыПродукция.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 42.
	Счет = ПланыСчетов.Управленческий.ТорговаяНаценка.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ТорговаяНаценка;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 50.
	Счет = ПланыСчетов.Управленческий.Касса.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 51.
	Счет = ПланыСчетов.Управленческий.Банк.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 57.
	Счет = ПланыСчетов.Управленческий.ПереводыВПути.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 58.
	Счет = ПланыСчетов.Управленческий.ФинансовыеВложения.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 60.
	Счет = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 60.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПоставщиками.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 60.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// 62.
	Счет = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 62.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПокупателями.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 62.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// 66.
	Счет = ПланыСчетов.Управленческий.РасчетыПоКраткосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 67.
	Счет = ПланыСчетов.Управленческий.РасчетыПоДолгосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 68.
	Счет = ПланыСчетов.Управленческий.РасчетыПоНалогам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 68.01
		Счет = ПланыСчетов.Управленческий.Налоги.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 68.02
		Счет = ПланыСчетов.Управленческий.НалогиКВозмещению.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 70.
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 71.
	Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 71.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетниками.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 71.02
		Счет = ПланыСчетов.Управленческий.ПерерасходПодотчетников.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// Прочие расчеты
	// 73
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 73.01
		Счет = ПланыСчетов.Управленческий.РасчетыПоПредоставленнымЗаймам.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
		Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 73.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоВозмещениюМатериальногоУщерба.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 75
	Счет = ПланыСчетов.Управленческий.РасчетыСУчредителями.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 75.01
		Счет = ПланыСчетов.Управленческий.РасчетыПоВкладамВУставныйКапитал.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 75.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоВыплатеДоходов.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 76
	Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 76.01
		Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 76.02
		Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		//76.05
		Счет = ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	// Конец Прочие расчеты
	
	// 80.
	Счет = ПланыСчетов.Управленческий.УставныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Капитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 82.
	Счет = ПланыСчетов.Управленческий.РезервныйИДобавочныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.РезервныйИДобавочныйКапитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 84.
	Счет = ПланыСчетов.Управленческий.НераспределеннаяПрибыль.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НераспределеннаяПрибыль;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();

	// 90.
	Счет = ПланыСчетов.Управленческий.Продажи.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 90.01
		Счет = ПланыСчетов.Управленческий.ВыручкаОтПродаж.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Доходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 90.02
		Счет = ПланыСчетов.Управленческий.СебестоимостьПродаж.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.СебестоимостьПродаж;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 90.07
		Счет = ПланыСчетов.Управленческий.КоммерческиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 90.08
		Счет = ПланыСчетов.Управленческий.УправленческиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
	// 91.
	Счет = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 91.01
		Счет = ПланыСчетов.Управленческий.ПрочиеДоходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 91.02
		Счет = ПланыСчетов.Управленческий.ПрочиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 91.03
		Счет = ПланыСчетов.Управленческий.ПроцентыПоКредитам.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПроцентыПоКредитам;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
	// 94.
	Счет = ПланыСчетов.Управленческий.НедостачиИПотериОтПорчиЦенностей.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 97.
	Счет = ПланыСчетов.Управленческий.РасходыБудущихПериодов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 99.
	Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 99.01
		Счет = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрибылиУбытки;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 99.02
		Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки_НалогНаПрибыль.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
		Счет.ТипСчета = Перечисления.ТипыСчетов.НалогНаПрибыль;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();		
		
КонецПроцедуры // ЗагрузитьУправленческийПланСчетовПервыйЗапуск()

//(3) Процедура заполняет в ИБ справочник "Виды налогов".
//
Процедура ЗаполнитьВидыНалоговПервыйЗапуск()
	
	// 1. НДС.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = "НДС";
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	// 2. Налог на прибыль.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = "Налог на прибыль";
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ТФОМС.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФФОМС.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ЕНВД.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.НДФЛ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФСССотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.Патент.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ТорговыйСбор.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ТорговыйСбор;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
КонецПроцедуры // ЗаполнитьВидыНалоговПервыйЗапуск()

//(5) Функция заполняет в ИБ спрвочник "Ставки НДС" и возвращает
// ссылку на ставку НДС 18% для дальнейшего использования.
//
Функция ЗаполнитьСтавкиНДСПервыйЗапуск()
	
	// 10%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10%";
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 18% / 118%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18% / 118%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 18;
	СтавкаНДС.Записать();
	
	// 10% / 110%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10% / 110%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 0%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "0%";
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать();
	
	// Без НДС
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "Без НДС";
	СтавкаНДС.НеОблагается = Истина;
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать();
	
	// 18%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18%";
	СтавкаНДС.Ставка = 18;	
	СтавкаНДС.Записать();
	
	Возврат СтавкаНДС.Ссылка;
	
КонецФункции // ЗаполнитьСтавкиНДСПервыйЗапуск()

//(7) Процедура создает график работы на основе производственного календаря 
// Российской Федерации по шаблону "Пятидневка"
//
Процедура СоздатьКалендарьПятидневкаРоссийскойФедерации() Экспорт
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	Если ПроизводственныйКалендарь = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь).Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйГрафикРаботы = Справочники.Календари.СоздатьЭлемент();
	НовыйГрафикРаботы.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроизводственныйКалендарь, "Наименование");
	НовыйГрафикРаботы.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	НовыйГрафикРаботы.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям;
	НовыйГрафикРаботы.ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
	НовыйГрафикРаботы.УчитыватьПраздники = Истина;
	
	// Заполняем недельный цикл как пятидневку
	Для НомерДня = 1 По 7 Цикл
		НовыйГрафикРаботы.ШаблонЗаполнения.Добавить().ДеньВключенВГрафик = НомерДня <= 5;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйГрафикРаботы, Истина, Истина);
	
КонецПроцедуры // СоздатьКалендарьПятидневкаРоссийскойФедерации()

//(14) Процедура заполняет классификатор использования рабочего времени.
//
Процедура ЗаполнитьКлассификаторИспользованияРабочегоВремени()
	
	// Б.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Болезнь;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Временная нетрудоспособность с назначением пособия согласно законодательству";
	ВидыРабочегоВремени.Записать();
	
	// В.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ВыходныеДни;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Выходные дни (еженедельный отпуск) и  нерабочие праздничные дни";
	ВидыРабочегоВремени.Записать();
	
	// ВП.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПростойПоВинеРаботника;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Простои по вине работника";
	ВидыРабочегоВремени.Записать();
	
	// ВЧ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.РаботаВечерниеЧасы;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в вечернее время";
	ВидыРабочегоВремени.Записать();
	
	// Г.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ГосударственныеОбязанности;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству";
	ВидыРабочегоВремени.Записать();
	
	// ДБ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Ежегодный дополнительный отпуск без сохранения заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// ДО.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск без сохранения заработной платы, предоставляемый работнику по разрешению работодателя";
	ВидыРабочегоВремени.Записать();
	
	// ЗБ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Забастовка;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Забастовка (при условиях и в порядке, предусмотренных законом)";
	ВидыРабочегоВремени.Записать();
	
	// К.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Командировка;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Служебная командировка";
	ВидыРабочегоВремени.Записать();
	
	// Н.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.РаботаНочныеЧасы;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в ночное время";
	ВидыРабочегоВремени.Записать();
	
	// НБ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтстранениеОтРаботыБезОплаты;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// НВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительные выходные дни (без сохранения заработной платы)";
	ВидыРабочегоВремени.Записать();
	
	// НЗ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время приостановки работы в случае задержки выплаты заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// НН.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеявкиПоНевыясненнымПричинам;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Неявки по невыясненным причинам (до выяснения обстоятельств)";
	ВидыРабочегоВремени.Записать();
	
	// НО.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтстранениеОтРаботыСОплатой;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством";
	ВидыРабочегоВремени.Записать();
	
	// НП.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Простой;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время простоя по причинам, не зависящим от работодателя и работника";
	ВидыРабочегоВремени.Записать();
	
	// ОВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительные выходные дни (оплачиваемые)";
	ВидыРабочегоВремени.Записать();
	
	// ОД.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ДополнительныйОтпуск;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Ежегодный дополнительный оплачиваемый отпуск";
	ВидыРабочегоВремени.Записать();
	
	// ОЖ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускПоУходуЗаРебенком;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск по уходу за ребенком до достижения им возраста трех лет";
	ВидыРабочегоВремени.Записать();
	
	// ОЗ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск без сохранения заработной платы в случаях, предусмотренных законодательством";
	ВидыРабочегоВремени.Записать();
	
	// ОТ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОсновнойОтпуск;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Ежегодный основной оплачиваемый отпуск";
	ВидыРабочегоВремени.Записать();
	
	// ПВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ВынужденныйПрогул;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время вынужденного прогула в случае признания увольнения, перевода на другую работу или отстранения от работы незаконными с восстановлением на прежней работе";
	ВидыРабочегоВремени.Записать();
	
	// ПК.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПовышениеКвалификации;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Повышение квалификации с отрывом от работы";
	ВидыРабочегоВремени.Записать();
	
	// ПМ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПовышениеКвалификацииВДругойМестности;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Повышение квалификации с отрывом от работы в другой местности";
	ВидыРабочегоВремени.Записать();
	
	// ПР.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Прогулы;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)";
	ВидыРабочегоВремени.Записать();
	
	// Р.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускПоБеременностиИРодам;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Отпуск по беременности и родам (отпуск в связи с усыновлением новорожденного ребенка)";
	ВидыРабочегоВремени.Записать();
	
	// РВ.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Праздники;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в выходные и нерабочие, праздничные дни";
	ВидыРабочегоВремени.Записать();
	
	// РП.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ПростойПоВинеРаботодателя;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Время простоя по вине работодателя";
	ВидыРабочегоВремени.Записать();
	
	// С.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Сверхурочные;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность сверхурочной работы";
	ВидыРабочегоВремени.Записать();
	
	// Т.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.БолезньБезОплаты;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Временная нетрудоспособность без назначения пособия в случаях, предусмотренных законодательством";
	ВидыРабочегоВремени.Записать();
	
	// У.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускНаОбучение;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительный отпуск в связи с обучением с сохранением среднего заработка работникам, совмещающим работу с обучением";
	ВидыРабочегоВремени.Записать();
	
	// УД.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Дополнительный отпуск в связи с обучением без сохранения заработной платы";
	ВидыРабочегоВремени.Записать();
	
	// Я.
	ВидыРабочегоВремениСсылка = Справочники.ВидыРабочегоВремени.Работа;
	ВидыРабочегоВремени = ВидыРабочегоВремениСсылка.ПолучитьОбъект();
	ВидыРабочегоВремени.ПолноеНаименование = "Продолжительность работы в дневное время";
	ВидыРабочегоВремени.Записать();
	
КонецПроцедуры // ЗаполнитьКлассификаторИспользованияРабочегоВремени()

//(15) Процедура заполняет справочники "Параметры расчетов" и "Виды начислений и удержаний".
//
Процедура ЗаполнитьПараметрыРасчетовИВидыНачислений()
	
	// Параметры расчетов.
	
	// Сумму продаж по ответственному (СПО)
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("СуммуПродажПоОтветственному") Тогда
		
		ПараметрРасчетовСПО = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		
		ПараметрРасчетовСПО.Наименование 		 = "Сумму продаж по ответственному";
		ПараметрРасчетовСПО.Идентификатор 	 = "СуммуПродажПоОтветственному"; 
		ПараметрРасчетовСПО.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСПО.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "НачалоПериода";
		НовыйПараметрЗапроса.Представление 			 = "НачалоПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "КонецПериода";
		НовыйПараметрЗапроса.Представление 			 = "КонецПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Подразделение";
		НовыйПараметрЗапроса.Представление 			 = "Подразделение";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Сотрудник";
		НовыйПараметрЗапроса.Представление 			 = "Сотрудник";
		
		ПараметрРасчетовСПО.Запрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(Продажи.Сумма * &ВалютаУчетаКурс * &ВалютаДокументаКратность / (&ВалютаДокументаКурс * &ВалютаУчетаКратность), 0)) КАК СуммаПродаж
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Сумма >= 0
		|	И Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Продажи.Организация = &Организация
		|	И Продажи.Подразделение = &Подразделение
		|	И Продажи.Ответственный = &Сотрудник
		|	И (ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.АктВыполненныхРабот) ССЫЛКА Документ.АктВыполненныхРабот
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОПереработке) ССЫЛКА Документ.ОтчетОПереработке
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОРозничныхПродажах) ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РасходнаяНакладная) ССЫЛКА Документ.РасходнаяНакладная
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЧекККМ) ССЫЛКА Документ.ЧекККМ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.Ответственный";
		
		ПараметрРасчетовСПО.Записать();
		
	КонецЕсли;
	
	// Фиксированная сумма
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ФиксированнаяСумма") Тогда
		
		ПараметрРасчетовФиксированнаяСумма = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовФиксированнаяСумма.Наименование 				= "Фиксированная сумма";
		ПараметрРасчетовФиксированнаяСумма.Идентификатор 	 			= "ФиксированнаяСумма";
		ПараметрРасчетовФиксированнаяСумма.ПроизвольныйЗапрос 			= Ложь;
		ПараметрРасчетовФиксированнаяСумма.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовФиксированнаяСумма.Записать();
		
	КонецЕсли;
	
	// Норма дней
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаДней") Тогда
		
		ПараметрРасчетовНормаДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаДней.Наименование 		 = "Норма дней";
		ПараметрРасчетовНормаДней.Идентификатор 	 = "НормаДней";
		ПараметрРасчетовНормаДней.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаДней.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаДней.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК НормаДней
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		
		ПараметрРасчетовНормаДней.Записать();
		
	КонецЕсли;
	
	// Норма часов
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаЧасов") Тогда
		
		ПараметрРасчетовНормаЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаЧасов.Наименование 	  = "Норма часов";
		ПараметрРасчетовНормаЧасов.Идентификатор 	  = "НормаЧасов";
		ПараметрРасчетовНормаЧасов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаЧасов.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаЧасов.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(8) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		ПараметрРасчетовНормаЧасов.Записать();
		
	КонецЕсли;
	
	// Отработано дней
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноДней") Тогда
		
		ПараметрРасчетовОтработаноДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноДней.Наименование 	  = "Отработано дней";
		ПараметрРасчетовОтработаноДней.Идентификатор	  = "ОтработаноДней";
		ПараметрРасчетовОтработаноДней.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноДней.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноДней.Записать();
		
	КонецЕсли;
	
	// Отработано часов
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноЧасов") Тогда
		
		ПараметрРасчетовОтработаноЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноЧасов.Наименование 	   = "Отработано часов";
		ПараметрРасчетовОтработаноЧасов.Идентификатор 	   = "ОтработаноЧасов";
		ПараметрРасчетовОтработаноЧасов.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноЧасов.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноЧасов.Записать();
		
	КонецЕсли;
	
	// Тарифная ставка
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ТарифнаяСтавка") Тогда
		
		ПараметрРасчетовТарифнаяСтавка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовТарифнаяСтавка.Наименование 	  = "Тарифная ставка";
		ПараметрРасчетовТарифнаяСтавка.Идентификатор 	  = "ТарифнаяСтавка";
		ПараметрРасчетовТарифнаяСтавка.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовТарифнаяСтавка.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовТарифнаяСтавка.Записать();
		
	КонецЕсли;
	
	// Отработано по заданиям
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноЧасовПоЗаданиям") Тогда
		
		ПараметрРасчетовСдельнаяВыработка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовСдельнаяВыработка.Наименование 	= "Отработано часов по заданиям";
		ПараметрРасчетовСдельнаяВыработка.Идентификатор = "ОтработаноЧасовПоЗаданиям";
		ПараметрРасчетовСдельнаяВыработка.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСдельнаяВыработка.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "НачалоПериода"; 
		НовыйПараметрЗапроса.Представление = "Начало периода"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "КонецПериода";
		НовыйПараметрЗапроса.Представление = "Конец периода";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Сотрудник";
		НовыйПараметрЗапроса.Представление = "Сотрудник";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Организация"; 
		НовыйПараметрЗапроса.Представление = "Организация"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Подразделение";
		НовыйПараметрЗапроса.Представление = "Подразделение";
		
		ПараметрРасчетовСдельнаяВыработка.Запрос =
		"ВЫБРАТЬ
		|	Источник.ЗагрузкаФактОборот
		|ИЗ
		|	РегистрНакопления.ЗаданияНаРаботу.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК Источник
		|ГДЕ
		|	Источник.Сотрудник = &Сотрудник
		|	И Источник.СтруктурнаяЕдиница = &Подразделение
		|	И Источник.Организация = &Организация";
		
		ПараметрРасчетовСдельнаяВыработка.Записать();
		
	КонецЕсли;
	
	// Виды начислений
	Если НЕ УправлениеНебольшойФирмойСервер.НачальноеЗаполнениеВидовНачисленийУдержанийПроизводилось() Тогда
		
		// Группы
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Начисления";
		НовоеНачисление.Записать(); 
		
		ГруппаНачисление 			 = НовоеНачисление.Ссылка;
		
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Удержания";
		НовоеНачисление.Записать();
		ГруппаУдержание 			 = НовоеНачисление.Ссылка;
		
		// Оклад по дням
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по дням";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДней]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по часам
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по часам";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.КосвенныеЗатраты;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасов]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по заданиям
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оплата по заданиям";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасовПоЗаданиям]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Процент от продаж по ответственному
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Процент от продаж по ответственному";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[СуммуПродажПоОтветственному]  / 100 *  [ТарифнаяСтавка]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по сдельным нарядам
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплата;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (тариф)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Сдельная оплата процентом
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (% от суммы)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		//Фиксированная сумма
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.ФиксированнаяСумма;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Код					= "";
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (фиксированная сумма)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ФиксированнаяСумма]";
		НовоеНачисление.УстановитьНовыйКод();
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Отпускные
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Отпускные";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2012;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Налог на доходы
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.НалогНаДоходы;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники;
		НовыйНалог.Записать();
		
		// ПФР по суммарному тарифу
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРПоСуммарномуТарифу;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР накопительная
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРНакопительная;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР страховая
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРСтраховая;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ФСС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФСС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники;
		НовыйНалог.Записать();
		
		// ФСС несчастные случаи
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФССНесчастныеСлучаи;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
		НовыйНалог.Записать();
		
		// ФФОМС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФФОМС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники;
		НовыйНалог.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыРасчетовИВидыНачислений()

//(24) Процедура заполняет в настройки подбора при первом запуске
//
Процедура ЗаполнитьПользовательскиеНастройкиПодбора()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	УправлениеНебольшойФирмойСервер.УстановитьСтандартныеНастройкиПодбора(ТекущийПользователь);
	
КонецПроцедуры // ЗаполнитьПользовательскиеНастройкиПодбора()

//(27) Процедура удаляет регистрацию изменений базовых классификаторов, которые должны выгружаться
// только при наличии на них ссылок в других выгружаемых объектах.
//
Процедура УдалитьРегистрациюИзмененийБазовыхКлассификаторов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20 КАК ОбменУправлениеНебольшойФирмойБухгалтерия20
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка <> &ЭтотУзелБП20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30 КАК ОбменУправлениеНебольшойФирмойБухгалтерия30
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка <> &ЭтотУзелБП30";
	
	Запрос.УстановитьПараметр("ЭтотУзелБП20", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП30", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30.ЭтотУзел());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УзлыОбменаСБП20 = МассивРезультатов[0].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	УзлыОбменаСБП30 = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // УдалитьРегистрациюИзмененийБазовыхКлассификаторов()

//(29) Процедура заполняет бланки договоров из макета.
//
Процедура ЗаполнитьБланкиДоговоров()
	
	НачатьТранзакцию();
	Попытка
		МакетДоговорАренды 			= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорАренды");
		МакетДоговорКуплиПродажи 	= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорКуплиПродажи");
		МакетДоговорОказанияУслуг 	= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорОказанияУслуг");
		МакетДоговорПоставки 		= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорПоставки");
		
		Макеты = Новый Массив(4);
		Макеты[0] = МакетДоговорАренды;
		Макеты[1] = МакетДоговорКуплиПродажи;
		Макеты[2] = МакетДоговорОказанияУслуг;
		Макеты[3] = МакетДоговорПоставки;
		
		НаименованияМакетов = Новый Массив(4);
		НаименованияМакетов[0] = "МакетДоговорАренды";
		НаименованияМакетов[1] = "МакетДоговорКуплиПродажи";
		НаименованияМакетов[2] = "МакетДоговорОказанияУслуг";
		НаименованияМакетов[3] = "МакетДоговорПоставки";
		
		Бланки = Новый Массив(4);
		Бланки[0] = Справочники.БланкиДоговоров.ДоговорАренды.Ссылка.ПолучитьОбъект();
		Бланки[1] = Справочники.БланкиДоговоров.ДоговорКуплиПродажи.Ссылка.ПолучитьОбъект();
		Бланки[2] = Справочники.БланкиДоговоров.ДоговорОказанияУслуг.Ссылка.ПолучитьОбъект();
		Бланки[3] = Справочники.БланкиДоговоров.ДоговорПоставки.Ссылка.ПолучитьОбъект();
		
		Итератор = 0;
		Пока Итератор < Макеты.Количество() Цикл 
			
			МакетДоговора = Справочники.БланкиДоговоров.ПолучитьМакет(НаименованияМакетов[Итератор]);
			
			ТекстХТМЛ = МакетДоговора.ПолучитьТекст();
			Вложения = Новый Структура;
			
			КоличествоРедактируемыхПараметров = СтрЧислоВхождений(ТекстХТМЛ, "{ЗаполняемоеПоле");
			
			Бланки[Итератор].РедактируемыеПараметры.Очистить();
			НомерПараметра = 1;
			Пока НомерПараметра <= КоличествоРедактируемыхПараметров Цикл 
				НоваяСтрока = Бланки[Итератор].РедактируемыеПараметры.Добавить();
				НоваяСтрока.Представление = "{ЗаполняемоеПоле" + НомерПараметра + "}";
				НоваяСтрока.Идентификатор = "parameter" + НомерПараметра;
				
				НомерПараметра = НомерПараметра + 1;
			КонецЦикла;
			
			Падежи = Новый Массив;
			Падежи.Добавить(Неопределено);
			Падежи.Добавить("именительный");
			Падежи.Добавить("родительный");
			Падежи.Добавить("дательный");
			Падежи.Добавить("винительный");
			Падежи.Добавить("творительный");
			Падежи.Добавить("предложный");
			
			Для каждого ПараметрПеречисление Из Перечисления.ПараметрыБланковДоговоровСКонтрагентами Цикл
				
				Для каждого Падеж Из Падежи Цикл
					Если Падеж = Неопределено Тогда
						ПредставлениеПадежа = "";
					Иначе
						ПредставлениеПадежа = " (" + Падеж + ")";
					КонецЕсли;
					
					Параметр = "{" + Строка(ПараметрПеречисление) + ПредставлениеПадежа + "}";
					ЧислоВхождений = СтрЧислоВхождений(ТекстХТМЛ, Параметр);
					Для НомерПараметра = 1 По ЧислоВхождений Цикл
						Если НомерПараметра = 1 Тогда
							Представление = "{" + Строка(ПараметрПеречисление) + ПредставлениеПадежа + "%deleteSymbols%" + "}";
							Идентификатор = "infoParameter" + Строка(ПараметрПеречисление) + НомерПараметра;
						Иначе
							Представление = "{" + Строка(ПараметрПеречисление) + НомерПараметра + ПредставлениеПадежа + "}";
							Идентификатор = "infoParameter" + Строка(ПараметрПеречисление) + НомерПараметра;
						КонецЕсли;
						
						ПервоеВхождение = Найти(ТекстХТМЛ, Параметр);
						
						ТекстХТМЛ = Лев(ТекстХТМЛ, ПервоеВхождение - 1) + Представление + Сред(ТекстХТМЛ, ПервоеВхождение + СтрДлина(Параметр));
						
						НоваяСтрока = Бланки[Итератор].ПараметрыИнфобазы.Добавить();
						НоваяСтрока.Представление = СтрЗаменить(Представление, "%deleteSymbols%", "");
						НоваяСтрока.Идентификатор = Идентификатор;
						НоваяСтрока.Параметр = ПараметрПеречисление;
						
					КонецЦикла;
					ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%deleteSymbols%", "");
				КонецЦикла;
			КонецЦикла;
			
			СтруктураФорматированногоДокумента = Новый Структура;
			СтруктураФорматированногоДокумента.Вставить("ТекстHTML", ТекстХТМЛ);
			СтруктураФорматированногоДокумента.Вставить("Вложения", Вложения);
			
			Бланки[Итератор].Бланк = Новый ХранилищеЗначения(СтруктураФорматированногоДокумента);
			Бланки[Итератор].МакетПредопределенногоБланка = НаименованияМакетов[Итератор];
			Бланки[Итератор].КоличествоРедактируемыхПараметров = КоличествоРедактируемыхПараметров;
			Бланки[Итератор].Записать();
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ru='Заполнение бланков договоров.'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

//(35) Заполняем регистр сведений ЗначенияКБК
Процедура ЗагрузитьЗначенияКБК()
	
	Набор = РегистрыСведений.ЗначенияКБК.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202110061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202110091000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202101081012160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202100081000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202101081011160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ЕНВД;
	Запись.Значение = "18210502010021000110";
	
	// 2012 год
	
	// начисление зп
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
	Запись.Значение = "39210202020061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "39210202010061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "39310202090071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
	Запись.Значение = "39310202050071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.НДФЛСотрудники;
	Запись.Значение = "18210102010011000110";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "39210202101081011160";
	
	// 2013 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202150061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202140061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300тр;
	Запись.Значение = "39210202140061000160";
	
	
	
	// 2015 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010020000110";
	
	// 2017 год
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061100160";
	// Было 39210202140061100160
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300тр;
	Запись.Значение = "18210202140061200160";
	// Было 39210202140061200160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061110160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061000160";
	// Было 39210202010061000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061010160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071000160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071010160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081011160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081013160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081011160";
	// Было 39210202103081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081013160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010021000110";
	
	Набор.Записать();
	
КонецПроцедуры

//(39) Заполняет справочник КодыДоходовНДФЛ
//
Процедура ЗаполнитьКодыНДФЛ()
	
	Код2000 = Справочники.КодыДоходовНДФЛ.Код2000.ПолучитьОбъект();
	Код2000.СтавкаНДФЛ = 13;
	Код2000.Записать();
	
	Код2010 = Справочники.КодыДоходовНДФЛ.Код2010.ПолучитьОбъект();
	Код2010.СтавкаНДФЛ = 13;
	Код2010.Записать();
	
	Код2012 = Справочники.КодыДоходовНДФЛ.Код2012.ПолучитьОбъект();
	Код2012.СтавкаНДФЛ = 13;
	Код2012.Записать();
	
КонецПроцедуры

//(40) Процедура заполняет справочник ДокументыФизическихЛиц по классификатору МВД.
// Для тех конфигураций, в которых в справочнике "Виды документов физических лиц" нет реквизитов.
//
Процедура ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД(СтруктураПараметров = Неопределено) Экспорт
	
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР,			"", 	"01", "ПАСПОРТ");						// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР,		"", 	"02", "ЗГПАСПОРТ");						// 99 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,	"", 	"03", "СВИД О РОЖД");					// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,	"", 	"04", "УДОСТ ОФИЦЕРА");					// ББ 9999990
	ОписатьДокумент(,"Справка об освобождении из места лишения свободы",					"05", "СПРАВКА ОБ ОСВ");				// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота, 	"",		"06", "ПАСПОРТ МОРФЛТ");				// ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет, "Военный билет солдата (матроса, сержанта, старшины)", "07", "ВОЕННЫЙ БИЛЕТ"); // ББ 0999999
	ОписатьДокумент(, "Временное удостоверение, выданное взамен военного билета",			"08", "ПРОЧЕЕ");						// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт, "",		"09", "ДИППАСПОРТ РФ"); 				// 99 9999999
	ОписатьДокумент(, "Паспорт иностранного гражданина",									"10", "ИНПАСПОРТ");						// -
	ОписатьДокумент(, "Свидетельство о рассмотрении ходатайства о признании беженцем на территории Российской Федерации по существу", "11", "СВИД БЕЖЕНЦА"); // -
	ОписатьДокумент(, "Вид на жительство в Российской Федерации",							"12", "ВИД НА ЖИТЕЛЬ");					// -
	ОписатьДокумент(, "Удостоверение беженца",												"13", "УДОСТ БЕЖЕНЦА");					// -
	ОписатьДокумент(, "Временное удостоверение личности гражданина Российской Федерации",	"14", "ВРЕМ УДОСТ");					// -
	ОписатьДокумент(, "Разрешение на временное проживание в Российской Федерации",			"15", "ПРОЧЕЕ");						// -
	ОписатьДокумент(, "Свидетельство о предоставлении временного убежища на территории Российской Федерации", "18", "ПРОЧЕЕ");		// ББ-999 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,				"",		"21", "ПАСПОРТ РОССИИ");				// 99 99 9999990
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ,		"",		"22", "ЗГПАСПОРТ РФ");					// 99 9999999
	ОписатьДокумент(, "Свидетельство о рождении, выданное уполномоченным органом иностранного государства", "23", "ПРОЧЕЕ");		// -
	ОписатьДокумент(, "Удостоверение личности военнослужащего Российской Федерации",		"24", "ПРОЧЕЕ");						// ББ 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка,			"",		"26", "ПАСПОРТ МОРЯКА");				// ББ 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса, "",	"27", "БИЛЕТ ОЗ");						// ББ 0999999
	ОписатьДокумент(, "Иные документы, выдаваемые ОВД",										"91", "ПРОЧЕЕ");						// -
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписатьДокумент(СсылкаНаЭлемент = Неопределено, Наименование = "", КодМВД = "", КодПФР = "")

	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Если Наименование = "" Тогда
			Возврат
		КонецЕсли;
		СсылкаНаЭлемент = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		ДанныеИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "КодМВД, КодПФР");
		Если ДанныеИБ.КодМВД = КодМВД И ДанныеИБ.КодПФР = КодПФР Тогда
			Возврат
		КонецЕсли;
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	Иначе
		Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
	КонецЕсли;

	Если ЗначениеЗаполнено(Наименование) Тогда
		Элемент.Наименование = Наименование;
	КонецЕсли;
	Элемент.КодМВД = КодМВД;
	Элемент.КодПФР = КодПФР;
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.Записать();

КонецПроцедуры

//(43) Создание шаблонов условий печати в счетах на оплату
Процедура ЗаполнитьДополнительныеУсловияДляПечати() Экспорт
	
	Справочники.ДополнительныеУсловия.ЗаполнениеТиповыхДополнительныхУсловий();
	
КонецПроцедуры

//(45) Идентификаторы формул и типы видов цен
Процедура ОбновитьПредопределенныеВидыЦен() Экспорт
	
	// Наличие видов цен контрагентов в новой ИБ не предполагается, но такую возможность поддержим...
	
	Запрос = Новый Запрос(
	"Выбрать Справочник.ВидыЦен.Ссылка КАК ВидЦен, Истина КАК ЭтоЦеныНоменклатуры 
	|	Где Справочник.ВидыЦен.ИдентификаторФормул = """" ИЛИ Справочник.ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.ПустаяСсылка)
	|
	|Объединить Все
	|
	|Выбрать Справочник.ВидыЦенКонтрагентов.Ссылка, Ложь Где Справочник.ВидыЦенКонтрагентов.ИдентификаторФормул = """"");
	
	РезультатЗапроса = Запрос.Выполнить();
	Попытка
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВидЦенОбъект = Выборка.ВидЦен.ПолучитьОбъект();
			
			ОписаниеВладельца = "";
			Если Выборка.ЭтоЦеныНоменклатуры Тогда
				
				ВидЦенОбъект.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
				
			Иначе
				
				ОписаниеВладельца = Строка(Выборка.ВидЦен.Владелец);
				
			конецЕсли;
			
			ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(ВидЦенОбъект.ИдентификаторФормул, Выборка.ВидЦен.Наименование, ОписаниеВладельца);
			
			ВидЦенОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Идентификаторы.ВидыЦен", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

//(47) Устанавливает константу ФункциональнаяОпцияОпросНалоги
Процедура УстановитьКонстантуУчастияВОпросеПоНалогам()
	
	Константы.ФункциональнаяОпцияОпросНалоги.Установить(Истина);
	
КонецПроцедуры

//(49) Заполняет справочник ключевых операций, устанавливает целевое время
Процедура ЗаполнитьРеквизитыКлючевыхОпераций() Экспорт
	
	Попытка
		ОценкаПроизводительностиПереопределяемый.ЗаполнитьЦелевоеВремяОперацийПроизводительности();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ru='Заполнение ключевых операций.'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Процедура заполняет пустую ИБ общими данными
//
// К данным относятся неразделенные сведения, например, глобальные настройки сервиса
//
Процедура ПервыйЗапуск_ОбщиеДанные() Экспорт
	
	НачатьТранзакцию();
	
	// 1. Заполним константу ИзвлекатьТекстыФайловНаСервере
	Константы.ИзвлекатьТекстыФайловНаСервере.Установить(Истина);
	Константы.ИспользоватьПроверкуКонтрагентов.Установить(Истина);
	
	// 2. Заполним календарь отчетности
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
	// 3. Загружаем  тарифы страховых взносов с предельными величинами
	Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьСправочникВидыТарифовСтраховыхВзносов();
	Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьКодыВидовТарифаСтраховыхВзносов_2012();
	РегистрыСведений.ТарифыСтраховыхВзносов.УстановитьЗначенияТарифовСтраховыхВзносов2011_2012();
	РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.УстановитьПредельнуюВеличинуБазыСтраховыхВзносов();
	
	// 4. Заполняем виды предпринимательской деятельности
	Справочники.ВидыПредпринимательскойДеятельности.ЗаполнитьВидыПредпринимательскойДеятельности();
	
	// 5. Заполняем справочник ОКУН
	ЗагрузитьОКУН();
	
	// 6. Заполняем регистр сведений КоэффициентДефлятор
	ЗаполнитьКоэффициентДефлятор();
	
	// 7. Заполняем регистр сведений МРОТ
	ЗагрузитьМРОТ();
	
	// 8. Заполняем справочник Вычеты НДФЛ
	Справочники.ВычетыНДФЛ.НачальноеЗаполнение();
	
	// 9. Заполним регистр сведений НДФЛРазмерВычетов.
	Сотрудники.ЗаполнитьРазмерыВычетовНДФЛ();
	
	// 10. Изменить расписание регламетного задания в сервисе (оптимизация нагрузки)
	ЦенообразованиеСервер.ИзменитьРасписаниеОчередиЦен();
	
	// 11. Заполнение классификатора категорий номенклатуры
	КатегорииНоменклатурыСервер.ОбновитьКлассификаторКатегорий();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура заполняет пустую ИБ данными пользователей
//
Процедура ПервыйЗапуск_РазделенныеДанные() Экспорт
	
	НачатьТранзакцию();
	
	// 1. Загрузим план счетов.
	ЗагрузитьУправленческийПланСчетовПервыйЗапуск();
	
	// 2. Заполним вид и направление деятельности.
	ПрочееНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.Прочее;
	ПрочееНаправлениеДеятельности = ПрочееНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ПрочееНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ПрочиеДоходы;
	ПрочееНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.ПрочиеРасходы;
	ПрочееНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ПрочееНаправлениеДеятельности.Записать();
	
	ОсновноеНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	ОсновноеНаправлениеДеятельности = ОсновноеНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ОсновноеНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ВыручкаОтПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.СебестоимостьПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ОсновноеНаправлениеДеятельности.Записать();
	
	// 3. Заполним виды налогов.
	ЗаполнитьВидыНалоговПервыйЗапуск();
	
	// 4. Заполним валюты.
	ВалютаОбъект = СправочникОбъектВалютыПоКоду("643");
	ВалютаОбъект.Наименование = НСтр("ru = 'руб.'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВалютаОбъект);
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(ВалютаОбъект.Ссылка);
	
	// 5. Заполним ставки НДС.
	СтавкаНДС18 = ЗаполнитьСтавкиНДСПервыйЗапуск();
	
	// 6. Заполним кассы.
	КассаРублевая = Справочники.Кассы.СоздатьЭлемент();
	КассаРублевая.Наименование = НСтр("ru = 'Основная касса'");
	КассаРублевая.ВалютаПоУмолчанию = ВалютаОбъект.Ссылка;
	КассаРублевая.СчетУчета = ПланыСчетов.Управленческий.Касса;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(КассаРублевая);
	
	// 7. Заполним Календарь на основании ПроизводственногоКалендаря.
	Календарь = УправлениеНебольшойФирмойСервер.ПолучитьКалендарьПоПроизводственномуКалендарюРФ(); 
	Если Календарь = Неопределено Тогда
		
		СоздатьКалендарьПятидневкаРоссийскойФедерации();
		Календарь = УправлениеНебольшойФирмойСервер.ПолучитьКалендарьПоПроизводственномуКалендарюРФ(); 
		
	КонецЕсли;
	
	// 8. Заполним организации.
	Константы.НеИспользоватьНесколькоОрганизаций.Установить(Истина);
	
	НашаОрганизацияСсылка = Справочники.Организации.ОсновнаяОрганизация;
	НашаОрганизация = НашаОрганизацияСсылка.ПолучитьОбъект();
	НашаОрганизация.НаименованиеПолное	  = НСтр("ru = 'ООО ""Наша фирма""'");
	НашаОрганизация.Префикс				  = НСтр("ru = 'НФ-'");
	НашаОрганизация.ЮридическоеФизическоеЛицо			  = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	НашаОрганизация.НДСВключатьВСтоимость = Истина;
	НашаОрганизация.КассаПоУмолчанию	  = КассаРублевая.Ссылка;
	НашаОрганизация.СтавкаНДСПоУмолчанию  = СтавкаНДС18;
	НашаОрганизация.ПроизводственныйКалендарь = Календарь;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НашаОрганизация);
	
	// 9. Заполним подразделения.
	ОсновноеПодразделениеСсылка = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	ОсновноеПодразделение = ОсновноеПодразделениеСсылка.ПолучитьОбъект();
	ОсновноеПодразделение.Организация = НашаОрганизация.Ссылка;
	ОсновноеПодразделение.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	ОсновноеПодразделение.Записать();
	
	// 10. Заполним основной склад.
	ОсновнойСкладСсылка = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	ОсновнойСклад = ОсновнойСкладСсылка.ПолучитьОбъект();
	ОсновнойСклад.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	ОсновнойСклад.Организация = НашаОрганизация.Ссылка;
	ОсновнойСклад.Записать();
	
	// 11. Заполним виды цен.
	// Оптовая.
	ОптоваяСсылка = Справочники.ВидыЦен.Оптовая;
	Оптовая = ОптоваяСсылка.ПолучитьОбъект();
	Оптовая.ИдентификаторФормул = Нстр("ru ='Оптовая'");
	Оптовая.ВалютаЦены = ВалютаОбъект.Ссылка;
	Оптовая.ЦенаВключаетНДС = Истина;
	Оптовая.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Оптовая.ОкруглятьВБольшуюСторону = Ложь;
	Оптовая.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Оптовая.Записать();
	
	// Учетная.
	УчетнаяСсылка = Справочники.ВидыЦен.Учетная;
	Учетная = УчетнаяСсылка.ПолучитьОбъект();
	Учетная.ИдентификаторФормул = Нстр("ru ='Учетная'");
	Учетная.ВалютаЦены = ВалютаОбъект.Ссылка;
	Учетная.ЦенаВключаетНДС = Истина;
	Учетная.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Учетная.ОкруглятьВБольшуюСторону = Ложь;
	Учетная.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Учетная.Записать();
	
	// 12. Заполним константы.
	Константы.ВалютаУчета.Установить(ВалютаОбъект.Ссылка);
	Константы.НациональнаяВалюта.Установить(ВалютаОбъект.Ссылка);
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
	
	Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Установить(Ложь);
	Константы.ЧастотаРасчетаКурсовыхРазниц.Установить(Перечисления.ЧастотаРасчетаКурсовыхРазниц.ТолькоПриЗакрытииПериода);
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(ОбменДаннымиПереопределяемый.ПрефиксИнформационнойБазыПоУмолчанию());
	КонецЕсли;
	Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	
	// 13. Заполним сценарий планирования.
	Справочники.СценарииПланирования.ЗаполнитьФактическийСценарий();
	Справочники.СценарииПланирования.ЗаполнитьПоставляемыеСценарии();
	
	// 14. Заполним классификатор использования рабочего времени.
	ЗаполнитьКлассификаторИспользованияРабочегоВремени();
	
	// 15. Заполним параметры расчета и виды начислений.
	ЗаполнитьПараметрыРасчетовИВидыНачислений();
	
	// 16. Заполним наборы свойств.
	ОсновнаяКатегорияСсылка = Справочники.КатегорииНоменклатуры.БезКатегории;
	ОсновнаяКатегория = ОсновнаяКатегорияСсылка.ПолучитьОбъект();
	ОсновнаяКатегория.Записать();
	
	// 17. Заполним реквизиты предопределенных единиц измерения.
	
	// Штука.
	ШтСсылка = Справочники.КлассификаторЕдиницИзмерения.шт;
	ШтОбъект = ШтСсылка.ПолучитьОбъект();
	ШтОбъект.НаименованиеПолное = "Штука";
	ШтОбъект.МеждународноеСокращение = "PCE";
	ШтОбъект.Записать();
	
	// Час.
	чСсылка = Справочники.КлассификаторЕдиницИзмерения.ч;
	чОбъект = чСсылка.ПолучитьОбъект();
	чОбъект.НаименованиеПолное = "Час";
	чОбъект.МеждународноеСокращение = "HUR";
	чОбъект.Записать();
	
	// 18. Заполним состояния заказов
	Справочники.СостоянияЗаказовПокупателей.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказовПокупателей.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказНарядов.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказНарядов.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказовПоставщикам.ЗаполнитьПоставляемыеСостояния();
	Справочники.СостоянияЗаказовНаПроизводство.ЗаполнитьПоставляемыеСостояния();
	
	// 21. Установим дату изменения движений по ордерному складу.
	Константы.ДатаОбновленияНаРелиз_1_2_1.Установить("19800101");
	
	// 22. Установим признак контроля остатков при пробитии чеков ККМ.
	Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Установить(Истина);
	
	// 23. Настройки подбора
	ЗаполнитьПользовательскиеНастройкиПодбора();
	
	// 24. Константа ПлановаяДатаОптимизацииИтогов
	Константы.ПлановаяДатаОптимизацииИтогов.Установить(КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), 1)));
	
	// 25. Контактная информация
	КонтактнаяИнформацияУНФ.УстановитьСвойстваПредопределенныхВидовКонтактнойИнформации();
	
	// 26. Константы прайс-листа.
	Константы.ПрайсЛистВыводитьКод.Установить(Перечисления.ДаНет.Да);
	Константы.ПрайсЛистВыводитьПолноеНаименование.Установить(Перечисления.ДаНет.Нет);
	Константы.ПрайсЛистИспользоватьИерархиюНоменклатуры.Установить(Истина);
	Константы.ПрайсЛистФормироватьПоНаличиюНаСкладах.Установить(Ложь);
	
	// 28. Регистрация
	УдалитьРегистрациюИзмененийБазовыхКлассификаторов();
	
	// 29. Заполнение бланков договоров.
	ЗаполнитьБланкиДоговоров();
	
	// 30. Константа.НачалоИспользованияСФ1137
	Константы.НачалоИспользованияСФ1137.Установить(Дата(2012, 04, 01));
	
	// 31. Константа.ЗачитыватьАвансыДолгиАвтоматически
	Константы.ЗачитыватьАвансыДолгиАвтоматически.Установить(Перечисления.ДаНет.Нет);
	
	// 32. БПО
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
	
	// 33. Заполним состояния событий.
	СостояниеЗапланированоОбъект = Справочники.СостоянияСобытий.Запланировано.ПолучитьОбъект();
	СостояниеЗапланированоОбъект.РеквизитДопУпорядочивания = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗапланированоОбъект);
	
	СостояниеЗавершеноОбъект = Справочники.СостоянияСобытий.Завершено.ПолучитьОбъект();
	СостояниеЗавершеноОбъект.РеквизитДопУпорядочивания = 2;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗавершеноОбъект);
	
	СостояниеОтмененоОбъект = Справочники.СостоянияСобытий.Отменено.ПолучитьОбъект();
	СостояниеОтмененоОбъект.РеквизитДопУпорядочивания = 3;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеОтмененоОбъект);
	
	// 34. Заполнение предопределенных элементов статьи расходов.
	ОплатаОтПокупателей = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей.ПолучитьОбъект();
	ОплатаОтПокупателей.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаОтПокупателей);
	
	ОплатаПоставщикам = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам.ПолучитьОбъект();
	ОплатаПоставщикам.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаПоставщикам);
	
	// 35. Заполняем регистр сведений ЗначенияКБК
	ЗагрузитьЗначенияКБК();
	
	// 36. Заполним сегменты контрагентов.
	Справочники.Сегменты.ЗаполнитьПоставляемыеСегменты();
	
	// 37. Заполним источники привлечения покупателей.
	Справочники.ИсточникиПривлеченияПокупателей.ЗаполнитьПоставляемыеИсточникиПривлеченияПокупателей();
	
	// 38. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	Справочники.ВидыДоходовПоСтраховымВзносам.ЗаполнитьВидыДоходовПоСтраховымВзносам();
	
	// 39. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьКодыНДФЛ();
	
	// 40. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД();
	
	// 41. Всегда ИспользоватьДополнительныеРеквизитыИСведения = Истина
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	// 42. Настройка отбора номенклатуры.
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры, "ОсновнойВидОтбора");
	
	// 43. Создание шаблонов условий печати в счетах на оплату
	ЗаполнитьДополнительныеУсловияДляПечати();
	
	// 44. Создание шаблонов наименований для предопределенной категории.
	ШаблоныНаименований.СоздатьШаблоныПоУмолчанию(Справочники.КатегорииНоменклатуры.БезКатегории);
	
	// 45. Идентификаторы
	ОбновитьПредопределенныеВидыЦен();
	
	// 46. Обновление документов заработной платы
	ОтчетыУНФ.Обновить();
	ОтчетыУНФ.ОбновитьТегиОтчетов();
	
	// 47. Установка константы функциональной опции участия в опросе
	УстановитьКонстантуУчастияВОпросеПоНалогам();
	
	// 48. Заполним справочник ПравилаРабочегоПроцесса.
	Справочники.ПравилаРабочегоПроцесса.ЗаполнитьПоставляемыеПравила();
	
	// 49. Заполняет справочник ключевых операций, устанавливает целевое время
	ЗаполнитьРеквизитыКлючевыхОпераций();
	
	// МобильноеПриложение
	// 50. Установка ФО это обычное приложение.
	УстановитьКонстантуЭтоОбычноеПриложение();
	// Конец МобильноеПриложение
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

#Область Обновление_1_6_4_20

Процедура ДобавитьВКалендарьЗадачуПоРосстатуИ6НДФЛ() Экспорт
	
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуЕНВД(СтруктураПараметров = Неопределено) Экспорт
	
	Выборка = Справочники.ВидыДеятельностиЕНВД.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.СтавкаЕНВД = 15;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Ложь, Ложь);
	КонецЦикла;
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_1_6_5

Процедура ЗаполнитьРеквизитыСценариевПланирования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииПланирования.Ссылка КАК Сценарий
		|ИЗ
		|	Справочник.СценарииПланирования КАК СценарииПланирования
		|ГДЕ
		|	СценарииПланирования.ИзмерениеПланирования = &ПустоеИзмерение
		|	И СценарииПланирования.Предопределенный = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ПустоеИзмерение", Перечисления.ИзмеренияПланирования.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СценарийОбъект = Выборка.Сценарий.ПолучитьОбъект();
		
		СценарийОбъект.ИзмерениеПланирования	= Перечисления.ИзмеренияПланирования.Номенклатура;
		СценарийОбъект.ДетализироватьДоЗаказа	= Истина;
		СценарийОбъект.ПланироватьКоличество	= Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СценарийОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИспользованиеФактическогоСценария() Экспорт
	
	// В предыдущих версиях было возможно выбрать предопределенный "Фактический" период в документах планирования
	// Обработчик обновления исправляет эти документы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Бюджет.Ссылка КАК ДокументСсылка,
		|	1 КАК ТипДокумента
		|ИЗ
		|	Документ.Бюджет КАК Бюджет
		|ГДЕ
		|	Бюджет.СценарийПланирования = &Фактический
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПланПродаж.Ссылка,
		|	2
		|ИЗ
		|	Документ.ПланПродаж КАК ПланПродаж
		|ГДЕ
		|	ПланПродаж.СценарийПланирования = &Фактический";
	
	Запрос.УстановитьПараметр("Фактический", Справочники.СценарииПланирования.Фактический);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Сценарий = Справочники.СценарииПланирования.СоздатьЭлемент();
		Сценарий.УстановитьНовыйКод();
		Сценарий.Наименование			= НСтр("ru='Основной'");
		Сценарий.ИзмерениеПланирования	= Перечисления.ИзмеренияПланирования.Номенклатура;
		Сценарий.Периодичность			= Перечисления.Периодичность.Месяц;
		Сценарий.ДетализироватьДоЗаказа	= Истина;
		Сценарий.ПланироватьКоличество	= Истина;
		Сценарий.Комментарий			= НСтр("ru='#Создан автоматически для перехода с предыдущей версии программы'");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сценарий);
		
		ИменаТЧ = Новый Массив;
		ИменаТЧ.Добавить("ПрямыеЗатраты");
		ИменаТЧ.Добавить("КосвенныеЗатраты");
		ИменаТЧ.Добавить("Поступления");
		ИменаТЧ.Добавить("Выбытия");
		ИменаТЧ.Добавить("Доходы");
		ИменаТЧ.Добавить("Расходы");
		ИменаТЧ.Добавить("Операции");
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.СценарийПланирования = Сценарий.Ссылка;
			
			МинДатаПланирования = '00010101';
			МаксДатаПланирования = '00010101';
			
			Если Выборка.ТипДокумента = 1 Тогда
				
				Для Каждого ИмяТЧ Из ИменаТЧ Цикл
					Для Каждого СтрТЧ Из ДокументОбъект[ИмяТЧ] Цикл
						Если Не ЗначениеЗаполнено(МинДатаПланирования) Или СтрТЧ.ДатаПланирования < МинДатаПланирования Тогда
							МинДатаПланирования = СтрТЧ.ДатаПланирования;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(МаксДатаПланирования) Или СтрТЧ.ДатаПланирования > МаксДатаПланирования Тогда
							МаксДатаПланирования = СтрТЧ.ДатаПланирования;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				ДокументОбъект.ДатаНачала		= НачалоМесяца(МинДатаПланирования);
				ДокументОбъект.ДатаОкончания	= КонецМесяца(МаксДатаПланирования);
				
			ИначеЕсли Выборка.ТипДокумента = 2 Тогда
				
				Для Каждого СтрТЧ Из ДокументОбъект.Запасы Цикл
					Если Не ЗначениеЗаполнено(МинДатаПланирования) Или СтрТЧ.ДатаПланирования < МинДатаПланирования Тогда
						МинДатаПланирования = СтрТЧ.ДатаПланирования;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(МаксДатаПланирования) Или СтрТЧ.ДатаПланирования > МаксДатаПланирования Тогда
						МаксДатаПланирования = СтрТЧ.ДатаПланирования;
					КонецЕсли;
				КонецЦикла;
				
				ДокументОбъект.НачалоПланирования		= НачалоМесяца(МинДатаПланирования);
				ДокументОбъект.ОкончаниеПланирования	= КонецМесяца(Мин(МаксДатаПланирования, ДобавитьМесяц(МинДатаПланирования, 59)));
				// Ограничение по количеству периодов-колонок в документе План продаж - не более 60
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиПериодПланированияВДокументыБюджета(Параметры) Экспорт
	
	РазмерПорцииДанных = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	Бюджет.Ссылка КАК ДокументСсылка,
		|	Бюджет.СценарийПланирования.УдалитьДатаНачала КАК ДатаНачала,
		|	Бюджет.СценарийПланирования.УдалитьДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.Бюджет КАК Бюджет
		|ГДЕ
		|	Бюджет.ДатаНачала = &ПустаяДата
		|	И Бюджет.ДатаОкончания = &ПустаяДата
		|	И Бюджет.СценарийПланирования.УдалитьДатаНачала <> &ПустаяДата
		|	И Бюджет.СценарийПланирования.УдалитьДатаОкончания <> &ПустаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Бюджет.Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", РазмерПорцииДанных);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.Бюджет");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ДокументСсылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаНачала) Или ЗначениеЗаполнено(ДокументОбъект.ДатаОкончания) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			// Обработка объекта.
			ДокументОбъект.ДатаНачала		= Выборка.ДатаНачала;
			ДокументОбъект.ДатаОкончания	= Выборка.ДатаОкончания;
			
			// Запись обработанного объекта.
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать документ, пропускаем и обрабатываем позднее.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить период планирования в документе Бюджета: %1 по причине:
					|%2'"), 
					Выборка.ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.Бюджет, Выборка.ДокументСсылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Или Выборка.Количество() < РазмерПорцииДанных Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ПараметрыПредметаИсчисления = НСтр("ru='документе, документах, документах'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре ОбновлениеИнформационнойБазыУНФ.ПеренестиПериодПланированияВДокументыБюджета
				|не удалось заполнить период планирования в %1 Бюджета'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ПроблемныхОбъектов, ПараметрыПредметаИсчисления)
			);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ПараметрыПредметаИсчисления = НСтр("ru='документ, документа, документов'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбновлениеИнформационнойБазыУНФ.ПеренестиПериодПланированияВДокументыБюджета
				|обработала очередную порцию: %1'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ОбъектовОбработано, ПараметрыПредметаИсчисления)
			);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
				Метаданные.Документы.Бюджет, , ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиПериодПланированияВДокументыПланПродаж(Параметры) Экспорт
	
	РазмерПорцииДанных = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ПланПродаж.Ссылка КАК ДокументСсылка,
		|	ПланПродаж.СценарийПланирования.УдалитьДатаНачала КАК ДатаНачала,
		|	ПланПродаж.СценарийПланирования.УдалитьДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.ПланПродаж КАК ПланПродаж
		|ГДЕ
		|	ПланПродаж.СценарийПланирования.УдалитьДатаНачала <> &ПустаяДата
		|	И ПланПродаж.СценарийПланирования.УдалитьДатаОкончания <> &ПустаяДата
		|	И ПланПродаж.НачалоПланирования = &ПустаяДата
		|	И ПланПродаж.ОкончаниеПланирования = &ПустаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланПродаж.Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", РазмерПорцииДанных);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПланПродаж");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ДокументСсылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.НачалоПланирования) Или ЗначениеЗаполнено(ДокументОбъект.ОкончаниеПланирования) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			// Обработка объекта.
			ДокументОбъект.НачалоПланирования		= Выборка.ДатаНачала;
			ДокументОбъект.ОкончаниеПланирования	= Выборка.ДатаОкончания;
			
			// Запись обработанного объекта.
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать документ, пропускаем и обрабатываем позднее.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить период планирования в документе Плана продаж: %1 по причине:
					|%2'"), 
					Выборка.ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродаж, Выборка.ДокументСсылка, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Или Выборка.Количество() < РазмерПорцииДанных Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ПараметрыПредметаИсчисления = НСтр("ru='документе, документах, документах'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре ОбновлениеИнформационнойБазыУНФ.ПеренестиПериодПланированияВДокументыПланПродаж
				|не удалось заполнить период планирования в %1 Плана продаж'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ПроблемныхОбъектов, ПараметрыПредметаИсчисления)
			);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ПараметрыПредметаИсчисления = НСтр("ru='документ, документа, документов'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбновлениеИнформационнойБазыУНФ.ПеренестиПериодПланированияВДокументыПланПродаж
				|обработала очередную порцию: %1'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ОбъектовОбработано, ПараметрыПредметаИсчисления)
			);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
				Метаданные.Документы.ПланПродаж, , ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочникаПроекты() Экспорт
	
	ПараметрыНабораСвойств = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_КонтактныеЛица", ПараметрыНабораСвойств);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Проекты", ПараметрыНабораСвойств);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочникаСерийныеНомера() Экспорт
	
	ПараметрыНабораСвойств = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_СерийныеНомера", ПараметрыНабораСвойств);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствДокументаПриемИПередачаВРемонт() Экспорт
	
	ПараметрыНабораСвойств = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПриемИПередачаВРемонт", ПараметрыНабораСвойств);
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов_1_6_5(СтруктураПараметров = Неопределено) Экспорт
	
	МассивОтчетов = Новый Массив;
	МассивОтчетов.Добавить(Метаданные.Отчеты.ДенежныеСредства);
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(МассивОтчетов);
	
КонецПроцедуры

Процедура ОчиститьЗаписиДублейСПустымИНН() Экспорт
	
	Набор = РегистрыСведений.НаличиеДублейУКонтрагентов.СоздатьНаборЗаписей();
	Набор.Отбор.ИНН.Установить("");
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
КонецПроцедуры

Процедура УдалитьУстаревшиеОбработчики(Параметры = Неопределено) Экспорт
	
	// Пример взят из БСП ВариантыОтчетов.УдалитьУстаревшиеОбработчики()
	
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ОбменСКонтрагентамиОбработчикиОбновления.ПроверитьКонтрагентовБЭД");
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ОбновлениеИнформационнойБазыУНФ.УстановитьНастройкиОтбораНоменклатуры");
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ОбновлениеИнформационнойБазыУНФ.УдалениеДублейДвиженийПоРегиструЗапасы");
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ОбновлениеИнформационнойБазыУНФ.ОбновлениеДокументовЗарплаты");
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ОтчетыУНФ.Обновить");
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ОтчетыУНФ.ОбновитьТегиОтчетов");
	
КонецПроцедуры

Процедура ДобавитьВКалендарьЗадачуПоСЗВМ() Экспорт
	
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_1_6_6

// МобильноеПриложение
Процедура УстановитьКонстантуЭтоОбычноеПриложение() Экспорт
	
	Если НЕ Константы.ЭтоМобильноеПриложение.Получить() Тогда
		Константы.ЭтоОбычноеПриложение.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры
// Конец МобильноеПриложение

Процедура ОбновитьНастройкиОтчетов_1_6_6(Параметры = Неопределено) Экспорт
	
	МассивОтчетов = Новый Массив;
	МассивОтчетов.Добавить(Метаданные.Отчеты.ДвиженияСерийныхНомеров);
	МассивОтчетов.Добавить(Метаданные.Отчеты.СкладПоСерийнымНомерам);
	МассивОтчетов.Добавить(Метаданные.Отчеты.СкладПоЗапасамВРемонте);
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(МассивОтчетов);
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВходящееИсходящееСобытие(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Событие.Ссылка
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.ПустаяСсылка)");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Событие = Выборка.Ссылка.ПолучитьОбъект();
		Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Событие);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Выборка.Количество() < 1000;
	
КонецПроцедуры

Процедура ИнициализироватьНовыеВозможностиПодсистемыИмпорта() Экспорт
	
	Константы.ДатаОбновленияНаРелиз_1_6_6.Установить(ТекущаяДатаСеанса());
	
	МожноВключить = ГрузовыеТаможенныеДекларацииСервер.МожноВключитьКонтролироватьОстаткиПоНомерамГТД();
	Константы.КонтролироватьОстаткиПоНомерамГТД.Установить(МожноВключить);
	
КонецПроцедуры

Процедура ДобавитьВКалендарьЗадачуПоАлкогольнойДекларации12() Экспорт
	
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
КонецПроцедуры

Процедура ОбновлениеСистемыНалогобложения(СтруктураПараметров = Неопределено)  Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВтАлкоНоменлатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.АлкогольнаяПродукция
		|	И Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Продажи.Организация
		|ПОМЕСТИТЬ ВТАлкоОрганизации
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАлкоНоменлатура КАК ВтАлкоНоменлатура
		|		ПО (Продажи.Период > &ДатаНачала)
		|			И Продажи.Номенклатура = ВтАлкоНоменлатура.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Продажи.Организация = Организации.Ссылка
		|			И (Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СистемыНалогообложенияОрганизаций.Период,
		|	СистемыНалогообложенияОрганизаций.Организация,
		|	СистемыНалогообложенияОрганизаций.СистемаНалогообложения,
		|	СистемыНалогообложенияОрганизаций.ПлательщикУСН,
		|	СистемыНалогообложенияОрганизаций.ПлательщикЕНВД,
		|	СистемыНалогообложенияОрганизаций.ПрименяетсяПатент,
		|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения,
		|	СистемыНалогообложенияОрганизаций.СтавкаНалога,
		|	СистемыНалогообложенияОрганизаций.ПлательщикТорговыйСбор,
		|	Истина КАК РозничнаяПродажаАлкоголя
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних КАК СистемыНалогообложенияОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАлкоОрганизации КАК ВТАлкоОрганизации
		|		ПО СистемыНалогообложенияОрганизаций.Организация = ВТАлкоОрганизации.Организация";
		Запрос.УстановитьПараметр("ДатаНачала", Дата('20160101'));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОграничениеДоступаПоВидуДоговоровКредитаИЗайма() Экспорт
	
	Выборка = Справочники.ПрофилиГруппДоступа.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Зарплата
		Если Выборка.ИдентификаторПоставляемыхДанных = Новый УникальныйИдентификатор("76337574-bff4-11df-9174-e0cb4ed5f4c3") Тогда
			
			ВыборкаГруппДоступа = Справочники.ГруппыДоступа.Выбрать();
			Пока ВыборкаГруппДоступа.Следующий() Цикл
				
				Если ВыборкаГруппДоступа.Профиль = Выборка.Ссылка Тогда
					Если ВыборкаГруппДоступа.ЗначенияДоступа.Количество() = 0 Тогда
						
						ГруппаДоступаОбъект = ВыборкаГруппДоступа.ПолучитьОбъект();
						
						ГруппаДоступаОбъект.ЗначенияДоступа.Очистить();
						
						НоваяСтрокаЗначение = ГруппаДоступаОбъект.ЗначенияДоступа.Добавить();
						НоваяСтрокаЗначение.ВидДоступа = Перечисления.ВидыДоговоровКредитаИЗайма.ПустаяСсылка();
						НоваяСтрокаЗначение.ЗначениеДоступа = Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный;
						
						ГруппаДоступаОбъект.Записать();
						
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьНовыйСчетУчетаПодсистемыИмпорта() Экспорт
	
	СчетУчета = ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами.ПолучитьОбъект();
	СчетУчета.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	СчетУчета.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	СчетУчета.Записать();
	
КонецПроцедуры

Процедура ОчиститьОшибочныеСостоянияПроверкиКонтрагентов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияКонтрагентов.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		|ГДЕ
		|	СостоянияКонтрагентов.Состояние В(&Состояния)";
	
	Запрос.УстановитьПараметр("Состояния", ПроверкаКонтрагентовКлиентСерверПовтИсп.ВсеОшибочныеСостоянияКонтрагента());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.СостоянияКонтрагентов.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		Набор.Отбор.Контрагент.Установить(Выборка.Контрагент);
		Набор.Очистить();
		Набор.Записать(Истина);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
	// Новая проверка запустится автоматически регламентным заданием "ПроверкаКонтрагентов"
	
КонецПроцедуры

Процедура ОбновлениеВзносов(СтруктураПараметров = Неопределено)  Экспорт
	
	МассивВзносов = Новый Массив;
	МассивВзносов.Добавить(Справочники.ВидыНачисленийИУдержаний.НалогНаДоходы);
	МассивВзносов.Добавить(Справочники.ВидыНачисленийИУдержаний.ПФРПоСуммарномуТарифу);
	МассивВзносов.Добавить(Справочники.ВидыНачисленийИУдержаний.ПФРСтраховая);
	МассивВзносов.Добавить(Справочники.ВидыНачисленийИУдержаний.ПФРНакопительная);
	МассивВзносов.Добавить(Справочники.ВидыНачисленийИУдержаний.ФСС);
	МассивВзносов.Добавить(Справочники.ВидыНачисленийИУдержаний.ФССНесчастныеСлучаи);
	МассивВзносов.Добавить(Справочники.ВидыНачисленийИУдержаний.ФФОМС);
	
	УправленческийСчетЗатрат = ПланыСчетов.Управленческий.УправленческиеРасходы;
	Для Каждого Взнос Из МассивВзносов Цикл
		ОбъектВзнос = Взнос.ПолучитьОбъект();
		ОбъектВзнос.СчетЗатрат = УправленческийСчетЗатрат;
		ОбъектВзнос.Записать();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектВзнос);
	КонецЦикла;
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_1_6_7

Процедура ИнициализироватьНовыйСпособХраненияПаролейОбменаССайтом() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка,
	|	ОбменУправлениеНебольшойФирмойСайт.Пароль
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
	
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Выборка.Ссылка, Выборка.Пароль);
	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов_1_6_7(Параметры = Неопределено) Экспорт
	
	МассивОтчетов = Новый Массив;
	МассивОтчетов.Добавить(Метаданные.Отчеты.ДоходыИРасходы);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ДоходыИРасходыКассовымМетодом);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ДоходыИРасходыПрогноз);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ФинансовыйРезультат);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ФинансовыйРезультатПрогноз);
	МассивОтчетов.Добавить(Метаданные.Отчеты.АнализБазыКонтрагентов);
	МассивОтчетов.Добавить(Метаданные.Отчеты.АнализРаботыМенеджеров);
	МассивОтчетов.Добавить(Метаданные.Отчеты.КалендарьСобытий);
	МассивОтчетов.Добавить(Метаданные.Отчеты.КонтрольЗаполненияКонтактнойИнформации);
	МассивОтчетов.Добавить(Метаданные.Отчеты.СводныйАнализЗаказовПокупателей);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ПланФактныйАнализПродаж);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ПланыПродаж);
	МассивОтчетов.Добавить(Метаданные.Отчеты.Продажи);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ABCАнализПродаж);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ABCXYZАнализПродаж);
	МассивОтчетов.Добавить(Метаданные.Отчеты.РеестрСтаренияДебиторскойЗадолженности);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ВоронкаПродаж);
	МассивОтчетов.Добавить(Метаданные.Отчеты.РасчетыПоКредитамИЗаймам);
	МассивОтчетов.Добавить(Метаданные.Отчеты.Себестоимость);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ИспользуемыеВнешниеРесурсы);
	МассивОтчетов.Добавить(Метаданные.Отчеты.СведенияОПользователях);
	МассивОтчетов.Добавить(Метаданные.Отчеты.Склад);
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(МассивОтчетов);
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКИ_ФизическиеЛица_Email() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид										= Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица;
	ПараметрыВида.Порядок									= 6;
	ПараметрыВида.МожноИзменятьСпособРедактирования			= Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге				= Ложь;
	ПараметрыВида.ОбязательноеЗаполнение					= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений			= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем		= Ложь;
	ПараметрыВида.Используется								= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	КонтактнаяИнформацияУНФ.УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид 									= Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица;
	ПараметрыВида.Порядок								= 7;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге			= Ложь;
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Функция НайтиСоздатьПричинуОтменыЗаказа()
	
	ПричинаОтмены = Справочники.ПричиныОтменыЗаказа.НайтиПоНаименованию("<Не указана>", Истина);
	
	Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
		
		ПричинаОтменыОбъект = Справочники.ПричиныОтменыЗаказа.СоздатьЭлемент();
		ПричинаОтменыОбъект.Наименование	= НСтр("ru='<Не указана>'");
		ПричинаОтменыОбъект.Комментарий		= НСтр("ru='Создана автоматически для обновления отмененных заказов'");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПричинаОтменыОбъект);
		ПричинаОтмены = ПричинаОтменыОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат ПричинаОтмены;
	
КонецФункции

Функция НайтиСоздатьСостояниеЗаказНаряда(Наименование, Цвет, ПометкаУдаления)
	
	СостояниеЗаказНаряда = Справочники.СостоянияЗаказНарядов.НайтиПоНаименованию(Наименование, Истина);
	
	Если Не ЗначениеЗаполнено(СостояниеЗаказНаряда) Тогда
		
		СостояниеЗаказНарядаОбъект = Справочники.СостоянияЗаказНарядов.СоздатьЭлемент();
		СостояниеЗаказНарядаОбъект.Наименование = Наименование;
		СостояниеЗаказНарядаОбъект.Цвет = Новый ХранилищеЗначения(Цвет);
		СостояниеЗаказНарядаОбъект.ПометкаУдаления = ПометкаУдаления;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗаказНарядаОбъект);
		СостояниеЗаказНаряда = СостояниеЗаказНарядаОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат СостояниеЗаказНаряда;
	
КонецФункции

Процедура ОбновитьСправочникиСостояний() Экспорт
	
	ОбновитьСправочникСостояний("СостоянияЗаказовПокупателей");
	ОбновитьСправочникСостояний("СостоянияЗаказовПоставщикам");
	ОбновитьСправочникСостояний("СостоянияЗаказовНаПроизводство");
	
КонецПроцедуры

Процедура ОбновитьСправочникСостояний(ИмяСправочника)
	
	Если Константы["УдалитьИспользовать" + ИмяСправочника].Получить() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияЗаказовПокупателей.Ссылка КАК Состояние
			|ИЗ
			|	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
			|ГДЕ
			|	СостоянияЗаказовПокупателей.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Открыт)
			|	И СостоянияЗаказовПокупателей.ПометкаУдаления = ИСТИНА";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостоянияЗаказовПокупателей", ИмяСправочника);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СостояниеОбъект = Выборка.Состояние.ПолучитьОбъект();
			СостояниеОбъект.УстановитьПометкуУдаления(Ложь);
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияЗаказовПокупателей.Ссылка КАК Состояние
			|ИЗ
			|	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
			|ГДЕ
			|	СостоянияЗаказовПокупателей.УдалитьСтатусЗаказа В (ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Открыт), ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Выполнен))
			|	И СостоянияЗаказовПокупателей.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостоянияЗаказовПокупателей", ИмяСправочника);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СостояниеОбъект = Выборка.Состояние.ПолучитьОбъект();
			
			Если ОбщегоНазначения.ЕстьСсылкиНаОбъект(Выборка.Состояние) Тогда
				СостояниеОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				СостояниеОбъект.Удалить();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОсновныеВидыЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЗаказовПокупателей.Ссылка КАК Состояние
		|ИЗ
		|	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
		|ГДЕ
		|	СостоянияЗаказовПокупателей.Ссылка <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияЗаказовПокупателей.УдалитьРеквизитДопУпорядочивания,
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЗаказовПокупателей.Ссылка КАК Состояние,
		|	СостоянияЗаказовПокупателей.Наименование КАК Наименование,
		|	СостоянияЗаказовПокупателей.Цвет КАК Цвет,
		|	СостоянияЗаказовПокупателей.ПометкаУдаления КАК ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА СостоянияЗаказовПокупателей.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Открыт)
		|			ТОГДА 1
		|		КОГДА СостоянияЗаказовПокупателей.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.ВРаботе)
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ПорядокСтатусов,
		|	СостоянияЗаказовПокупателей.УдалитьСтатусЗаказа КАК Статус
		|ИЗ
		|	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
		|ГДЕ
		|	СостоянияЗаказовПокупателей.Ссылка <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтатусов,
		|	СостоянияЗаказовПокупателей.УдалитьРеквизитДопУпорядочивания,
		|	Наименование";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаСостояний = МассивРезультатов[0].Выбрать();
	ОсновнойВидЗаказаПокупателя = Справочники.ВидыЗаказовПокупателей.Основной.ПолучитьОбъект();
	ОсновнойВидЗаказаПокупателя.ПорядокСостояний.Очистить();
	
	Пока ВыборкаСостояний.Следующий() Цикл
		
		НоваяСтрока = ОсновнойВидЗаказаПокупателя.ПорядокСостояний.Добавить();
		НоваяСтрока.Состояние = ВыборкаСостояний.Состояние;
		
	КонецЦикла;
	
	НоваяСтрока = ОсновнойВидЗаказаПокупателя.ПорядокСостояний.Добавить();
	НоваяСтрока.Состояние = Справочники.СостоянияЗаказовПокупателей.Завершен;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОсновнойВидЗаказаПокупателя);
	
	ВыборкаСостояний = МассивРезультатов[1].Выбрать();
	ОсновнойВидЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной.ПолучитьОбъект();
	ОсновнойВидЗаказНаряда.ПорядокСостояний.Очистить();
	
	Пока ВыборкаСостояний.Следующий() Цикл
		
		НовоеСостояниеЗаказНаряда = НайтиСоздатьСостояниеЗаказНаряда(
			ВыборкаСостояний.Наименование,
			ВыборкаСостояний.Цвет.Получить(),
			ВыборкаСостояний.ПометкаУдаления
		);
		
		НоваяСтрока = ОсновнойВидЗаказНаряда.ПорядокСостояний.Добавить();
		НоваяСтрока.Состояние = НовоеСостояниеЗаказНаряда;
		
		Если Не ЗначениеЗаполнено(ОсновнойВидЗаказНаряда.СостояниеВыполнения)
			И ВыборкаСостояний.Статус = Перечисления.УдалитьСтатусыЗаказов.Выполнен Тогда
			
			ОсновнойВидЗаказНаряда.СостояниеВыполнения		= НоваяСтрока.Состояние;
			ОсновнойВидЗаказНаряда.НомерСостоянияВыполнения	= НоваяСтрока.НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаЗавершен = ОсновнойВидЗаказНаряда.ПорядокСостояний.Добавить();
	СтрокаЗавершен.Состояние = Справочники.СостоянияЗаказНарядов.Завершен;
	
	Если Не ЗначениеЗаполнено(ОсновнойВидЗаказНаряда.СостояниеВыполнения) Тогда
		ОсновнойВидЗаказНаряда.СостояниеВыполнения		= СтрокаЗавершен.Состояние;
		ОсновнойВидЗаказНаряда.НомерСостоянияВыполнения	= СтрокаЗавершен.НомерСтроки;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОсновнойВидЗаказНаряда);
	
КонецПроцедуры

Процедура ОбновитьВсеЗаказы(Параметры) Экспорт
	
	ИспользоватьСостоянияЗаказовПокупателей		= Константы.УдалитьИспользоватьСостоянияЗаказовПокупателей.Получить();
	ИспользоватьСостоянияЗаказовПоставщикам		= Константы.УдалитьИспользоватьСостоянияЗаказовПоставщикам.Получить();
	ИспользоватьСостоянияЗаказовНаПроизводство	= Константы.УдалитьИспользоватьСостоянияЗаказовНаПроизводство.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
		|	ЗаказПокупателя.СостояниеЗаказа.УдалитьСтатусЗаказа КАК СтатусЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	НЕ ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|	И ЗаказПокупателя.ВидЗаказа = НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЗаказПокупателя.Ссылка КАК ЗаказНаряд,
		|	ЗаказПокупателя.СостояниеЗаказа.УдалитьСтатусЗаказа КАК СтатусЗаказа,
		|	ЗаказПокупателя.СостояниеЗаказа.Наименование КАК СостояниеНаименование,
		|	ЗаказПокупателя.СостояниеЗаказа.Цвет КАК СостояниеЦвет,
		|	ЗаказПокупателя.СостояниеЗаказа.ПометкаУдаления КАК СостояниеПометкаУдаления,
		|	ЗаказПокупателя.СостояниеЗаказа.УдалитьРеквизитДопУпорядочивания КАК СостояниеПорядок
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|	И ЗаказПокупателя.ВидЗаказа = НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
		|	ЗаказПоставщику.СостояниеЗаказа.УдалитьСтатусЗаказа КАК СтатусЗаказа
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	(ЗаказПоставщику.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Открыт)
		|				И НЕ ЗаказПоставщику.УдалитьЗакрыт
		|				И ЗаказПоставщику.Проведен
		|			ИЛИ ЗаказПоставщику.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Открыт)
		|				И ЗаказПоставщику.УдалитьЗакрыт
		|				И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
		|			ИЛИ ЗаказПоставщику.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.ВРаботе)
		|				И ЗаказПоставщику.УдалитьЗакрыт
		|				И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
		|			ИЛИ ЗаказПоставщику.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Выполнен)
		|				И (НЕ &ИспользоватьСостоянияЗаказовПоставщикам
		|					ИЛИ ЗаказПоставщику.УдалитьЗакрыт)
		|				И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Успешно))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщику.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЗаказНаПроизводство.Ссылка КАК ЗаказНаПроизводство,
		|	ЗаказНаПроизводство.СостояниеЗаказа.УдалитьСтатусЗаказа КАК СтатусЗаказа
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	(ЗаказНаПроизводство.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Открыт)
		|				И НЕ ЗаказНаПроизводство.УдалитьЗакрыт
		|				И ЗаказНаПроизводство.Проведен
		|			ИЛИ ЗаказНаПроизводство.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Открыт)
		|				И ЗаказНаПроизводство.УдалитьЗакрыт
		|				И НЕ ЗаказНаПроизводство.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
		|			ИЛИ ЗаказНаПроизводство.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.ВРаботе)
		|				И ЗаказНаПроизводство.УдалитьЗакрыт
		|				И НЕ ЗаказНаПроизводство.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
		|			ИЛИ ЗаказНаПроизводство.СостояниеЗаказа.УдалитьСтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыЗаказов.Выполнен)
		|				И (НЕ &ИспользоватьСостоянияЗаказовНаПроизводство
		|					ИЛИ ЗаказНаПроизводство.УдалитьЗакрыт)
		|				И НЕ ЗаказНаПроизводство.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Успешно))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ИспользоватьСостоянияЗаказовПоставщикам", ИспользоватьСостоянияЗаказовПоставщикам);
	Запрос.УстановитьПараметр("ИспользоватьСостоянияЗаказовНаПроизводство", ИспользоватьСостоянияЗаказовНаПроизводство);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаЗаказовПокупателя		= МассивРезультатов[0].Выбрать();
	ВыборкаЗаказНарядов				= МассивРезультатов[1].Выбрать();
	ВыборкаЗаказовПоставщику		= МассивРезультатов[2].Выбрать();
	ВыборкаЗаказовНаПроизводство	= МассивРезультатов[3].Выбрать();
	
	ВсегоОбработано = 0;
	ВсегоПроблемных = 0;
	
	МинимальнаяПорцияПоЗаказу = 250;
	МаксКоличествоЗаписываемыхОбъектов = 1000;
	ОбъектовКОбработкеВБолееПриоритетныхЗаказах = ВыборкаЗаказовПокупателя.Количество() + ВыборкаЗаказНарядов.Количество() + ВыборкаЗаказовПоставщику.Количество();
	Порция = Макс(МинимальнаяПорцияПоЗаказу, (МаксКоличествоЗаписываемыхОбъектов - ОбъектовКОбработкеВБолееПриоритетныхЗаказах));
	ТекущийЦикл = 0;
	
	Пока ВыборкаЗаказовНаПроизводство.Следующий() И (ТекущийЦикл < Порция) Цикл
		
		ТекущийЦикл = ТекущийЦикл + 1;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказНаПроизводство");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗаказовНаПроизводство.ЗаказНаПроизводство);
			Блокировка.Заблокировать();
			
			ЗаказНаПроизводствоОбъект = ВыборкаЗаказовНаПроизводство.ЗаказНаПроизводство.ПолучитьОбъект();
			
			Если ВыборкаЗаказовНаПроизводство.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
				
				Если ЗаказНаПроизводствоОбъект.УдалитьЗакрыт Тогда
					СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказНаПроизводствоОбъект.Ссылка, ЗаказНаПроизводствоОбъект.СостояниеЗаказа, ЗаказНаПроизводствоОбъект.Дата);
					ЗаказНаПроизводствоОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовНаПроизводство.Завершен;
					ЗаказНаПроизводствоОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
				Иначе
					ЗаказНаПроизводствоОбъект.Проведен = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВыборкаЗаказовНаПроизводство.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе
				И ЗаказНаПроизводствоОбъект.УдалитьЗакрыт Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказНаПроизводствоОбъект.Ссылка, ЗаказНаПроизводствоОбъект.СостояниеЗаказа, ЗаказНаПроизводствоОбъект.Дата);
				ЗаказНаПроизводствоОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовНаПроизводство.Завершен;
				ЗаказНаПроизводствоОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
				
			ИначеЕсли ВыборкаЗаказовНаПроизводство.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
				И (Не ИспользоватьСостоянияЗаказовНаПроизводство Или ЗаказНаПроизводствоОбъект.УдалитьЗакрыт) Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказНаПроизводствоОбъект.Ссылка, ЗаказНаПроизводствоОбъект.СостояниеЗаказа, ЗаказНаПроизводствоОбъект.Дата);
				ЗаказНаПроизводствоОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовНаПроизводство.Завершен;
				ЗаказНаПроизводствоОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Успешно;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаказНаПроизводствоОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ВсегоОбработано = ВсегоОбработано + 1;
			
		Исключение
			
			ВсегоПроблемных = ВсегоПроблемных + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить заказ на производство: ""%1"" по причине: %2'"),
					ВыборкаЗаказовНаПроизводство.ЗаказНаПроизводство,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаказНаПроизводство, ВыборкаЗаказовНаПроизводство.ЗаказНаПроизводство, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	МаксКоличествоЗаписываемыхОбъектов = МаксКоличествоЗаписываемыхОбъектов - ТекущийЦикл;
	ОбъектовКОбработкеВБолееПриоритетныхЗаказах = ВыборкаЗаказовПокупателя.Количество() + ВыборкаЗаказНарядов.Количество();
	Порция = Макс(МинимальнаяПорцияПоЗаказу, (МаксКоличествоЗаписываемыхОбъектов - ОбъектовКОбработкеВБолееПриоритетныхЗаказах));
	ТекущийЦикл = 0;
	
	Пока ВыборкаЗаказовПоставщику.Следующий() И (ТекущийЦикл < Порция) Цикл
		
		ТекущийЦикл = ТекущийЦикл + 1;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказПоставщику");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗаказовПоставщику.ЗаказПоставщику);
			Блокировка.Заблокировать();
			
			ЗаказПоставщикуОбъект = ВыборкаЗаказовПоставщику.ЗаказПоставщику.ПолучитьОбъект();
			
			Если ВыборкаЗаказовПоставщику.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
				
				Если ЗаказПоставщикуОбъект.УдалитьЗакрыт Тогда
					СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказПоставщикуОбъект.Ссылка, ЗаказПоставщикуОбъект.СостояниеЗаказа, ЗаказПоставщикуОбъект.Дата);
					ЗаказПоставщикуОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПоставщикам.Завершен;
					ЗаказПоставщикуОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
				Иначе
					ЗаказПоставщикуОбъект.Проведен = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВыборкаЗаказовПоставщику.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе
				И ЗаказПоставщикуОбъект.УдалитьЗакрыт Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказПоставщикуОбъект.Ссылка, ЗаказПоставщикуОбъект.СостояниеЗаказа, ЗаказПоставщикуОбъект.Дата);
				ЗаказПоставщикуОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПоставщикам.Завершен;
				ЗаказПоставщикуОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
				
			ИначеЕсли ВыборкаЗаказовПоставщику.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
				И (Не ИспользоватьСостоянияЗаказовПоставщикам Или ЗаказПоставщикуОбъект.УдалитьЗакрыт) Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказПоставщикуОбъект.Ссылка, ЗаказПоставщикуОбъект.СостояниеЗаказа, ЗаказПоставщикуОбъект.Дата);
				ЗаказПоставщикуОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПоставщикам.Завершен;
				ЗаказПоставщикуОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Успешно;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаказПоставщикуОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ВсегоОбработано = ВсегоОбработано + 1;
			
		Исключение
			
			ВсегоПроблемных = ВсегоПроблемных + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить заказ поставщику: ""%1"" по причине: %2'"),
					ВыборкаЗаказовПоставщику.ЗаказПоставщику,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаказПоставщику, ВыборкаЗаказовПоставщику.ЗаказПоставщику, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	МаксКоличествоЗаписываемыхОбъектов = МаксКоличествоЗаписываемыхОбъектов - ТекущийЦикл;
	ОбъектовКОбработкеВБолееПриоритетныхЗаказах = ВыборкаЗаказовПокупателя.Количество();
	Порция = Макс(МинимальнаяПорцияПоЗаказу, (МаксКоличествоЗаписываемыхОбъектов - ОбъектовКОбработкеВБолееПриоритетныхЗаказах));
	ТекущийЦикл = 0;
	
	Пока ВыборкаЗаказНарядов.Следующий() И (ТекущийЦикл < Порция) Цикл
		
		ТекущийЦикл = ТекущийЦикл + 1;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказПокупателя");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗаказНарядов.ЗаказНаряд);
			Блокировка.Заблокировать();
			
			ЗаказНарядОбъект = ВыборкаЗаказНарядов.ЗаказНаряд.ПолучитьОбъект();
			ЗаказНарядОбъект.ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
			ЗаказНарядОбъект.СостояниеЗаказа = НайтиСоздатьСостояниеЗаказНаряда(
				ВыборкаЗаказНарядов.СостояниеНаименование,
				ВыборкаЗаказНарядов.СостояниеЦвет.Получить(),
				ВыборкаЗаказНарядов.СостояниеПометкаУдаления
			);
			Если ВыборкаЗаказНарядов.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
				
				Если ЗаказНарядОбъект.УдалитьЗакрыт Тогда
					СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказНарядОбъект.Ссылка, ЗаказНарядОбъект.СостояниеЗаказа, ЗаказНарядОбъект.Дата);
					ЗаказНарядОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказНарядов.Завершен;
					ЗаказНарядОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
					ЗаказНарядОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
				Иначе
					ЗаказНарядОбъект.Проведен = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВыборкаЗаказНарядов.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе И ЗаказНарядОбъект.УдалитьЗакрыт Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказНарядОбъект.Ссылка, ЗаказНарядОбъект.СостояниеЗаказа, ЗаказНарядОбъект.Дата);
				ЗаказНарядОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказНарядов.Завершен;
				ЗаказНарядОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
				ЗаказНарядОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
				
			ИначеЕсли ВыборкаЗаказНарядов.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
				И (Не ИспользоватьСостоянияЗаказовПокупателей Или ЗаказНарядОбъект.УдалитьЗакрыт) Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказНарядОбъект.Ссылка, ЗаказНарядОбъект.СостояниеЗаказа, ЗаказНарядОбъект.Дата);
				ЗаказНарядОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен;
				ЗаказНарядОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаказНарядОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ВсегоОбработано = ВсегоОбработано + 1;
			
		Исключение
			
			ВсегоПроблемных = ВсегоПроблемных + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить заказ-наряд: ""%1"" по причине: %2'"),
					ВыборкаЗаказНарядов.ЗаказНаряд,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаказПокупателя, ВыборкаЗаказНарядов.ЗаказНаряд, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	МаксКоличествоЗаписываемыхОбъектов = МаксКоличествоЗаписываемыхОбъектов - ТекущийЦикл;
	ТекущийЦикл = 0;
	
	Пока ВыборкаЗаказовПокупателя.Следующий() И (ТекущийЦикл < МаксКоличествоЗаписываемыхОбъектов) Цикл
		
		ТекущийЦикл = ТекущийЦикл + 1;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказПокупателя");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗаказовПокупателя.ЗаказПокупателя);
			Блокировка.Заблокировать();
			
			ЗаказПокупателяОбъект = ВыборкаЗаказовПокупателя.ЗаказПокупателя.ПолучитьОбъект();
			ЗаказПокупателяОбъект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
			
			Если ВыборкаЗаказовПокупателя.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
				
				Если ЗаказПокупателяОбъект.УдалитьЗакрыт Тогда
					СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказПокупателяОбъект.Ссылка, ЗаказПокупателяОбъект.СостояниеЗаказа, ЗаказПокупателяОбъект.Дата);
					ЗаказПокупателяОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПокупателей.Завершен;
					ЗаказПокупателяОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
					ЗаказПокупателяОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
				Иначе
					ЗаказПокупателяОбъект.Проведен = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВыборкаЗаказовПокупателя.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе И ЗаказПокупателяОбъект.УдалитьЗакрыт Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказПокупателяОбъект.Ссылка, ЗаказПокупателяОбъект.СостояниеЗаказа, ЗаказПокупателяОбъект.Дата);
				ЗаказПокупателяОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПокупателей.Завершен;
				ЗаказПокупателяОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
				ЗаказПокупателяОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
				
			ИначеЕсли ВыборкаЗаказовПокупателя.СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
				И (Не ИспользоватьСостоянияЗаказовПокупателей Или ЗаказПокупателяОбъект.УдалитьЗакрыт) Тогда
				
				СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ЗаказПокупателяОбъект.Ссылка, ЗаказПокупателяОбъект.СостояниеЗаказа, ЗаказПокупателяОбъект.Дата);
				ЗаказПокупателяОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
				ЗаказПокупателяОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаказПокупателяОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ВсегоОбработано = ВсегоОбработано + 1;
			
		Исключение
			
			ВсегоПроблемных = ВсегоПроблемных + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить заказ покупателя: ""%1"" по причине: %2'"),
					ВыборкаЗаказовПокупателя.ЗаказПокупателя,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаказПокупателя, ВыборкаЗаказовПокупателя.ЗаказПокупателя, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ВсегоОбработано + ВсегоПроблемных = 0
		Или ВыборкаЗаказНарядов.Количество() + ВыборкаЗаказовНаПроизводство.Количество() + ВыборкаЗаказовПокупателя.Количество() + ВыборкаЗаказовПоставщику.Количество() < 1000 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ВсегоОбработано = 0 Тогда
			ПараметрыПредметаИсчисления = НСтр("ru='заказе, заказах, заказах'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре ОбновлениеИнформационнойБазыУНФ.ОбновитьВсеЗаказы
				|не удалось выполнить обновление в %1'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоПроблемных, ПараметрыПредметаИсчисления)
			);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ПараметрыПредметаИсчисления = НСтр("ru='заказ, заказа, заказов'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбновлениеИнформационнойБазыУНФ.ОбновитьВсеЗаказы
				|обработала очередную порцию: %1'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоОбработано, ПараметрыПредметаИсчисления)
			);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
				Метаданные.Документы.ЗаказПокупателя, , ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦветЗавершенныхСостоянийЗаказов() Экспорт
	
	Состояние = Справочники.СостоянияЗаказовПокупателей.Завершен.ПолучитьОбъект();
	Состояние.Цвет = Новый ХранилищеЗначения(ЦветаСтиля.ПрошедшееСобытие);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Состояние);
	
	Состояние = Справочники.СостоянияЗаказНарядов.Завершен.ПолучитьОбъект();
	Состояние.Цвет = Новый ХранилищеЗначения(ЦветаСтиля.ПрошедшееСобытие);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Состояние);
	
	Состояние = Справочники.СостоянияЗаказовПоставщикам.Завершен.ПолучитьОбъект();
	Состояние.Цвет = Новый ХранилищеЗначения(ЦветаСтиля.ПрошедшееСобытие);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Состояние);
	
	Состояние = Справочники.СостоянияЗаказовНаПроизводство.Завершен.ПолучитьОбъект();
	Состояние.Цвет = Новый ХранилищеЗначения(ЦветаСтиля.ПрошедшееСобытие);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Состояние);
	
КонецПроцедуры

Процедура ОбновитьВидыНалогов(Параметры) Экспорт
	
	// Обрабатываем все предопределенные элементы
	//  АвансовыйПлатежПриУСН - не обрабатываем, кбк различный,
	// в зависимости от типа налогообложения
	
	Налог = Справочники.ВидыНалогов.ПФРНакопительная.ПолучитьОбъект();
	Налог.Наименование = "Фиксированные взносы в ПФР, накопительная часть (до 2014 г.)";
	Налог.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ПФРСвыше300тр.ПолучитьОбъект();
	Налог.Наименование = "Взносы в ПФР при доходах свыше 300 тысяч руб.(ИП)";
	Налог.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ПФРСтраховая.ПолучитьОбъект();
	Налог.Наименование = "Фиксированные взносы в ПФР";
	Налог.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники.ПолучитьОбъект();
	Налог.Наименование = "Страховые взносы в ПФР, накопительная часть по сотрудникам (до 2014 г.)";
	Налог.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники.ПолучитьОбъект();
	Налог.Наименование = "Страховые взносы в ПФР по сотрудникам";
	Налог.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ТФОМС.ПолучитьОбъект();
	Налог.Наименование = "Фиксированные взносы в ТФОМС";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ФССТравматизмСотрудники.ПолучитьОбъект();
	Налог.Наименование = "Страховые взносы в ФСС от несчастных случаев";
	Налог.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ФСССотрудники.ПолучитьОбъект();
	Налог.Наименование = "Страховые взносы в ФСС";
	Налог.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ФФОМС.ПолучитьОбъект();
	Налог.Наименование = "Фиксированные взносы в ФФОМС";
	Налог.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ФОМССотрудники.ПолучитьОбъект();
	Налог.Наименование = "Страховые взносы в ФФОМС";
	Налог.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ЕНВД.ПолучитьОбъект();
	Налог.Наименование = "Единый налог(ЕНВД)";
	Налог.ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.НДФЛСотрудники.ПолучитьОбъект();
	Налог.Наименование = "НДФЛ при исполнении обязанностей налогового агента";
	Налог.ВидНалога = Перечисления.ВидыНалогов.НДФЛ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Налог = Справочники.ВидыНалогов.ТорговыйСбор.ПолучитьОбъект();
	Налог.Наименование = "Торговый сбор";
	Налог.ВидНалога = Перечисления.ВидыНалогов.ТорговыйСбор;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(Налог.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		Налог.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	// Проставляем оставшиеся значения КБК 
	// по данным банковских выписок
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНалогов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТВидыНалогов
	|ИЗ
	|	Справочник.ВидыНалогов КАК ВидыНалогов
	|ГДЕ
	|	НЕ ВидыНалогов.Предопределенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходСоСчета.ВидНалога,
	|	ПлатежноеПоручение.КодБК
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыНалогов КАК ВидыНалогов
	|		ПО (ВидыНалогов.Ссылка = РасходСоСчета.ВидНалога)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО (ПлатежноеПоручение.Ссылка = РасходСоСчета.ДокументОснование)
	|			И (НЕ ПлатежноеПоручение.ПометкаУдаления)
	|			И (НЕ РасходСоСчета.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.КодБК) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидНалога = Выборка.ВидНалога.ПолучитьОбъект();
		ВидНалога.КодБК = Выборка.КодБК;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидНалога, Ложь, Ложь);
	КонецЦикла;
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВзносСвыше300трВПФР(Параметры) Экспорт
	
	Налог = Справочники.ВидыНалогов.ПФРСвыше300тр.ПолучитьОбъект();
	Налог.Наименование = "Взносы в ПФР при доходах свыше 300 тысяч руб.(ИП)";
	Налог.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
	Налог.КодБК = "39210202140061200160";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Налог, Ложь, Ложь);
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьЕдиницуИзмеренияПоБазовойЗаписи(ИсправляющаяЗапись)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидЦен", ИсправляющаяЗапись.ВидЦен.БазовыйВидЦен);
	Отбор.Вставить("Номенклатура", ИсправляющаяЗапись.Номенклатура);
	Отбор.Вставить("Характеристика", ИсправляющаяЗапись.Характеристика);
	
	БазоваяЗапись = РегистрыСведений.ЦеныНоменклатуры.Получить(ИсправляющаяЗапись.Период, Отбор);
	Если ЗначениеЗаполнено(БазоваяЗапись.ЕдиницаИзмерения) Тогда
		
		ИсправляющаяЗапись.ЕдиницаИзмерения = БазоваяЗапись.ЕдиницаИзмерения;
		
	Иначе
		
		ИсправляющаяЗапись.ЕдиницаИзмерения = ИсправляющаяЗапись.Номенклатура.ЕдиницаИзмерения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеЗаписейОЦенахДинамическихВидовЦен(СтруктураПараметров = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 5000
	|	РегистрЦен.Период,
	|	РегистрЦен.ВидЦен,
	|	РегистрЦен.Номенклатура,
	|	РегистрЦен.Характеристика,
	|	РегистрЦен.Цена,
	|	РегистрЦен.Актуальность,
	|	РегистрЦен.ЕдиницаИзмерения,
	|	РегистрЦен.ВключаяХарактеристики,
	|	РегистрЦен.Автор
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РегистрЦен
	|ГДЕ
	|	РегистрЦен.ЕдиницаИзмерения В (ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка), НЕОПРЕДЕЛЕНО, NULL)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	ВсегоЗаписей = ВыборкаЗапроса.Количество();
	Если ВсегоЗаписей = 0 Тогда
		
		СтруктураПараметров.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	ИсправленоЗаписей = 0;
	Попытка
		
		НачатьТранзакцию();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ИсправляющийНабор = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			ИсправляющийНабор.Отбор.Период.Установить(ВыборкаЗапроса.Период);
			ИсправляющийНабор.Отбор.ВидЦен.Установить(ВыборкаЗапроса.ВидЦен);
			ИсправляющийНабор.Отбор.Номенклатура.Установить(ВыборкаЗапроса.Номенклатура);
			ИсправляющийНабор.Отбор.Характеристика.Установить(ВыборкаЗапроса.Характеристика);
			ИсправляющийНабор.Прочитать();
			
			Если ИсправляющийНабор.Количество() = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИсправляющаяЗапись = ИсправляющийНабор[0];
			Если ЗначениеЗаполнено(ИсправляющаяЗапись.ЕдиницаИзмерения) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИсправляющаяЗапись.Цена = ВыборкаЗапроса.Цена;
			ИсправляющаяЗапись.Актуальность = ВыборкаЗапроса.Актуальность;
			ИсправляющаяЗапись.ВключаяХарактеристики = ВыборкаЗапроса.ВключаяХарактеристики;
			ИсправляющаяЗапись.Автор = ВыборкаЗапроса.Автор;
			
			Если ИсправляющаяЗапись.ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
				
				ПодобратьЕдиницуИзмеренияПоБазовойЗаписи(ИсправляющаяЗапись);
				Если НЕ ЗначениеЗаполнено(ИсправляющаяЗапись.ЕдиницаИзмерения) Тогда
					
					ИсправляющаяЗапись.ЕдиницаИзмерения = ИсправляющаяЗапись.Номенклатура.ЕдиницаИзмерения;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ИсправляющаяЗапись.Номенклатура)
				И ЗначениеЗаполнено(ИсправляющаяЗапись.Номенклатура.ЕдиницаИзмерения) Тогда
				
				ИсправляющаяЗапись.ЕдиницаИзмерения = ИсправляющаяЗапись.Номенклатура.ЕдиницаИзмерения;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИсправляющаяЗапись.ЕдиницаИзмерения) Тогда
				
				ИсправляющаяЗапись.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ИсправляющийНабор, Истина, Ложь, Ложь);
			ИсправленоЗаписей = ИсправленоЗаписей + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru ='Исправление ошибки регистра цен с пустой единицей измерения. 
							|>
							|Период = %1;
							|Вид цен = %2;
							|Номенклатура = %3;
							|Характеристика = %4'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВыборкаЗапроса.Период, ВыборкаЗапроса.ВидЦен, ВыборкаЗапроса.Номенклатура, ВыборкаЗапроса.Характеристика);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Если ВсегоЗаписей < 5000
		И ВсегоЗаписей = ИсправленоЗаписей Тогда
		
		СтруктураПараметров.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьОчередьЦен()
	
	РезультатПроверки = Новый Структура("МассивСтатическихВидовЦенОчереди, ЕстьОшибкиОчередиЦен", Новый Массив, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Очередь.ВидЦенРасчетный КАК ВидЦен,
	|	Очередь.ВидЦенРасчетный.ТипВидаЦен КАК ТипВидаЦен
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК Очередь
	|ГДЕ
	|	Очередь.ВидЦенРасчетный.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		РезультатПроверки.ЕстьОшибкиОчередиЦен = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РезультатПроверки.МассивСтатическихВидовЦенОчереди.Добавить(Выборка.ВидЦен);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ОчиститьОчередьРасчетаЦенОтСтатическихВидовЦен() Экспорт
	
	РезультатПроверки = ПроверитьОчередьЦен();
	Если РезультатПроверки.ЕстьОшибкиОчередиЦен Тогда
		
		Для каждого ВидЦен Из РезультатПроверки.МассивСтатическихВидовЦенОчереди Цикл
			
			НаборЗаписейРегистраСведений = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
			НаборЗаписейРегистраСведений.Отбор.ВидЦенРасчетный.Установить(ВидЦен, Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРегистраСведений, Истина, Ложь, Ложь);
			
			Если ВидЦен.ЦеныАктуальны = Ложь Тогда
				
				ОбъектВидЦен = ВидЦен.ПолучитьОбъект();
				ОбъектВидЦен.ЦеныАктуальны = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектВидЦен, Ложь, Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеЗаказовИзФорм_1_6_7

Процедура ПроверитьОбновитьЗаказПокупателя(Форма, ТекущийОбъект) Экспорт
	
	// Условие аналогично запросу из обработчика ОбновитьВсеЗаказы()
	Если НЕ (НЕ ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд И ТекущийОбъект.ВидЗаказа = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	
	Если ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
		
		Если ТекущийОбъект.УдалитьЗакрыт Тогда
			СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
			ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПокупателей.Завершен;
			ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
			ТекущийОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
		Иначе
			ТекущийОбъект.Проведен = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе И ТекущийОбъект.УдалитьЗакрыт Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПокупателей.Завершен;
		ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		ТекущийОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
		И (Константы.УдалитьИспользоватьСостоянияЗаказовПокупателей.Получить() Или ТекущийОбъект.УдалитьЗакрыт) Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
		ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	Форма.Прочитать();
	
КонецПроцедуры

Процедура ПроверитьОбновитьЗаказНаряд(Форма, ТекущийОбъект) Экспорт
	
	// Условие аналогично запросу из обработчика ОбновитьВсеЗаказы()
	Если НЕ (ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд И ТекущийОбъект.ВидЗаказа = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусЗаказа = ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа;
	
	ТекущийОбъект.ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
	ТекущийОбъект.СостояниеЗаказа = НайтиСоздатьСостояниеЗаказНаряда(
		ТекущийОбъект.СостояниеЗаказа.Наименование,
		ТекущийОбъект.СостояниеЗаказа.Цвет.Получить(),
		ТекущийОбъект.СостояниеЗаказа.ПометкаУдаления
	);
	Если СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
		
		Если ТекущийОбъект.УдалитьЗакрыт Тогда
			СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
			ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказНарядов.Завершен;
			ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
			ТекущийОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
		Иначе
			ТекущийОбъект.Проведен = Ложь;
		КонецЕсли;
		
	ИначеЕсли СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе И ТекущийОбъект.УдалитьЗакрыт Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказНарядов.Завершен;
		ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		ТекущийОбъект.ПричинаОтмены		= НайтиСоздатьПричинуОтменыЗаказа();
		
	ИначеЕсли СтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
		И (Константы.УдалитьИспользоватьСостоянияЗаказовПокупателей.Получить() Или ТекущийОбъект.УдалитьЗакрыт) Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен;
		ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	Форма.Прочитать();
	
КонецПроцедуры

Процедура ПроверитьОбновитьЗаказПоставщику(Форма, ТекущийОбъект) Экспорт
	
	// Условие аналогично запросу из обработчика ОбновитьВсеЗаказы()
	Если НЕ (ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт И Не ТекущийОбъект.УдалитьЗакрыт И ТекущийОбъект.Проведен
		Или ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт И ТекущийОбъект.УдалитьЗакрыт И НЕ ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен
		Или ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе И ТекущийОбъект.УдалитьЗакрыт И НЕ ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен
		Или ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен И (НЕ Константы.УдалитьИспользоватьСостоянияЗаказовПоставщикам.Получить() Или ТекущийОбъект.УдалитьЗакрыт) И НЕ ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
		
		Если ТекущийОбъект.УдалитьЗакрыт Тогда
			СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
			ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПоставщикам.Завершен;
			ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		Иначе
			ТекущийОбъект.Проведен = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе
		И ТекущийОбъект.УдалитьЗакрыт Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПоставщикам.Завершен;
		ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
		И НЕ (Константы.УдалитьИспользоватьСостоянияЗаказовПоставщикам.Получить() И ТекущийОбъект.УдалитьЗакрыт = Ложь) Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовПоставщикам.Завершен;
		ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	Форма.Прочитать();
	
КонецПроцедуры

Процедура ПроверитьОбновитьЗаказНаПроизводство(Форма, ТекущийОбъект) Экспорт
	
	// Условие аналогично запросу из обработчика ОбновитьВсеЗаказы()
	Если НЕ (ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт И Не ТекущийОбъект.УдалитьЗакрыт И ТекущийОбъект.Проведен
		Или ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт И ТекущийОбъект.УдалитьЗакрыт И НЕ ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен
		Или ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе И ТекущийОбъект.УдалитьЗакрыт И НЕ ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен
		Или ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен И (НЕ Константы.УдалитьИспользоватьСостоянияЗаказовНаПроизводство.Получить() Или ТекущийОбъект.УдалитьЗакрыт) И НЕ ТекущийОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Открыт Тогда
		
		Если ТекущийОбъект.УдалитьЗакрыт Тогда
			СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
			ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовНаПроизводство.Завершен;
			ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		Иначе
			ТекущийОбъект.Проведен = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.ВРаботе
		И ТекущийОбъект.УдалитьЗакрыт Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовНаПроизводство.Завершен;
		ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаказа.УдалитьСтатусЗаказа = Перечисления.УдалитьСтатусыЗаказов.Выполнен
		И НЕ (Константы.УдалитьИспользоватьСостоянияЗаказовНаПроизводство.Получить() И ТекущийОбъект.УдалитьЗакрыт = Ложь) Тогда
		
		СостоянияЗаказов.СохранитьСостояниеЗаказаВИстории(ТекущийОбъект.Ссылка, ТекущийОбъект.СостояниеЗаказа, ТекущийОбъект.Дата);
		ТекущийОбъект.СостояниеЗаказа	= Справочники.СостоянияЗаказовНаПроизводство.Завершен;
		ТекущийОбъект.ВариантЗавершения	= Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	Форма.Прочитать();
	
КонецПроцедуры

Процедура ДобавитьЗадачиОтчетностиНа2017год() Экспорт
	
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_1_6_8

Процедура СоздатьКассовыеСменыПоОткрытымОтчетам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.КассаККМ,
	|	ОтчетОРозничныхПродажах.НачалоКассовойСмены,
	|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И ОтчетОРозничныхПродажах.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыОтчетаОРозничныхПродажах.Открыта)
	|	И ОтчетОРозничныхПродажах.КассоваяСмена = ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка)
	|	И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(Выборка.КассаККМ);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		НоваяКассоваяСмена.Дата                   = Выборка.НачалоКассовойСмены;
		НоваяКассоваяСмена.Статус                 = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = Выборка.НачалоКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		НоваяКассоваяСмена.ДополнительныеСвойства.Вставить("НеСоздаватьОтчетОРозничныхПродажах", Истина);
		
		Попытка
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			ОтчетОРозничныхПродажах = Выборка.Ссылка.ПолучитьОбъект();
			ОтчетОРозничныхПродажах.КассоваяСмена = НоваяКассоваяСмена.Ссылка;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОтчетОРозничныхПродажах, Ложь, Ложь);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать кассувую смену по документу: %1 по причине:
					|%2'"), 
					Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ОтчетОРозничныхПродажах, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПоказателиНа2017год() Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.МРОТ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = '20170101';
	МенеджерЗаписи.Значение = 7500;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписиПВ = РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.СоздатьМенеджерЗаписи();
	МенеджерЗаписиПВ.Период = '20170101';
	МенеджерЗаписиПВ.РазмерФСС = 755000;
	МенеджерЗаписиПВ.РазмерПФР = 876000;
	МенеджерЗаписиПВ.Записать();
	
КонецПроцедуры

// Возвращает объект по коду. Если объект не найден в справочнике, создаёт новый объет и заполняет его из классификатора.
// Сам объект в базу при этом не записывается.
//
// Параметры:
//   КодВалюты - Строка - код валюты.
//
// Возвращаемое значение:
//   СправочникОбъект.Валюты - объект справочника валюты.
//
Функция СправочникОбъектВалютыПоКоду(Знач КодВалюты)
	
	ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		Возврат ВалютаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Результат = Справочники.Валюты.СоздатьЭлемент();
	
	КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	ЗаписьОКВ = КлассификаторТаблица.Найти(КодВалюты, "Code"); 
	Если ЗаписьОКВ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = ЗаписьОКВ.Code;
	Результат.Наименование = ЗаписьОКВ.CodeSymbol;
	Результат.НаименованиеПолное = ЗаписьОКВ.Name;
	Если ЗаписьОКВ.RBCLoading Тогда
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
	Иначе
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
	КонецЕсли;
	Результат.ПараметрыПрописиНаРусском = ЗаписьОКВ.NumerationItemOptions;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Обработчики_1_6_9

Процедура НастроитьРассылкуСостояниеКомпании(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьДатыВыставленияДокументовПоДоговорамОбслуживания(Параметры) Экспорт
	
	РазмерПорции = 500;
	
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Владелец
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭтоДоговорОбслуживания
	|	И ДоговорыКонтрагентов.ДоговорОбслуживанияДнейДоВыставленияДокументов = 0
	|	И ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность <> ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.День)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДоговорОбъект.ДоговорОбслуживанияПериодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Неделя Тогда
				ДоговорОбъект.ДоговорОбслуживанияДнейДоВыставленияДокументов = ДеньНедели(ДоговорОбъект.ДоговорОбслуживанияДатаНачала);
				ДоговорОбъект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = 0;
			ИначеЕсли ДоговорОбъект.ДоговорОбслуживанияПериодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Месяц Тогда
				ДоговорОбъект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(ДоговорОбъект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(ДоговорОбъект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
				ДоговорОбъект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = 0;
			ИначеЕсли ДоговорОбъект.ДоговорОбслуживанияПериодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Квартал Тогда
				ДоговорОбъект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(ДоговорОбъект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(ДоговорОбъект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
				ДоговорОбъект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = Месяц(ДоговорОбъект.ДоговорОбслуживанияДатаНачала) - Месяц(НачалоКвартала(ДоговорОбъект.ДоговорОбслуживанияДатаНачала)) + 1;
			ИначеЕсли ДоговорОбъект.ДоговорОбслуживанияПериодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Полгода Тогда
				ДоговорОбъект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(ДоговорОбъект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(ДоговорОбъект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
				ДоговорОбъект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = ?(Месяц(ДоговорОбъект.ДоговорОбслуживанияДатаНачала) > 6, Месяц(ДоговорОбъект.ДоговорОбслуживанияДатаНачала) - 6, Месяц(ДоговорОбъект.ДоговорОбслуживанияДатаНачала));
			ИначеЕсли ДоговорОбъект.ДоговорОбслуживанияПериодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Год Тогда
				ДоговорОбъект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(ДоговорОбъект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(ДоговорОбъект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
				ДоговорОбъект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = Месяц(ДоговорОбъект.ДоговорОбслуживанияДатаНачала);
			КонецЕсли;
			ДоговорОбъект.Записать();
			Обработано = Обработано + 1;
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Не удалось обработать договор обслуживания %1 (%2) по причине %3'"),
				Выборка.Владелец,
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ЗаполнитьДатыВыставленияДокументовПоДоговорамОбслуживания"" не удалось обработать некоторые договоры обслуживания (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ДоговорыКонтрагентов,,
			НСтр("ru = 'Процедура ""ЗаполнитьДатыВыставленияДокументовПоДоговорамОбслуживания"" обработала очередную порцию документов расчета: 500'"));
			
	Параметры.ОбработкаЗавершена = КоличествоОшибок = 0 И Выборка.Количество() < РазмерПорции;
	
КонецПроцедуры

Процедура ОбновитьКонстантуУчетПоЯчейкам() Экспорт
	
	Если Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() 
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
	
		Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Установить(Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов_1_6_9(Параметры = Неопределено) Экспорт
	
	МассивОтчетов = Новый Массив;
	МассивОтчетов.Добавить(Метаданные.Отчеты.ОстаткиТоваров);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ОстаткиТоваровМеньшеНуля);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ВыполнениеДоговоровОбслуживания);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ABCXYZАнализПродаж);
	МассивОтчетов.Добавить(Метаданные.Отчеты.ABCАнализПродаж);
	МассивОтчетов.Добавить(Метаданные.Отчеты.АктСверки);
	МассивОтчетов.Добавить(Метаданные.Отчеты.Взаиморасчеты);
	МассивОтчетов.Добавить(Метаданные.Отчеты.Продажи);
	МассивОтчетов.Добавить(Метаданные.Отчеты.РозничныеПродажи);
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(МассивОтчетов);
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСпособРасчетаСебестоимостиКалькуляции(Параметры) Экспорт
	
	РазмерПорцииДанных = 500;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.СпособРасчетаСебестоимостиКалькуляции
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.СпособРасчетаСебестоимостиКалькуляции ССЫЛКА Справочник.ВидыЦен
	|	И ЗаказПокупателя.СпособРасчетаСебестоимостиКалькуляции <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЗаказПокупателяКалькуляция.Ссылка,
	|	ЗаказПокупателяКалькуляция.Ссылка.СпособРасчетаСебестоимостиКалькуляции
	|ИЗ
	|	Документ.ЗаказПокупателя.Калькуляция КАК ЗаказПокупателяКалькуляция
	|ГДЕ
	|	ЗаказПокупателяКалькуляция.Ссылка.СпособРасчетаСебестоимостиКалькуляции = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяКалькуляция.Ссылка,
	|	ЗаказПокупателяКалькуляция.Ссылка.СпособРасчетаСебестоимостиКалькуляции");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", РазмерПорцииДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Заказ = Выборка.Ссылка.ПолучитьОбъект();
		Заказ.ВидыЦенКалькуляции.Очистить();
		Если ЗначениеЗаполнено(Выборка.СпособРасчетаСебестоимостиКалькуляции) Тогда
			Заказ.ВидыЦенКалькуляции.Добавить().ВидЦен = Выборка.СпособРасчетаСебестоимостиКалькуляции;
			Заказ.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры;
		Иначе
			Заказ.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки;
		КонецЕсли; 
		Заказ.ДополнительныеСвойства.Вставить("Модифицированность", Ложь);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Заказ);
	КонецЦикла; 
	
	Если Выборка.Количество() < РазмерПорцииДанных Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьОтчетыПереработчика() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетПереработчика.Ссылка
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|ГДЕ
	|	НЕ ОтчетПереработчика.УдалитьНоменклатура = ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НовСтр = ДокОбъект.Продукция.Добавить();
		НовСтр.Номенклатура = ДокОбъект.УдалитьНоменклатура;
		НовСтр.Характеристика = ДокОбъект.УдалитьХарактеристика;
		НовСтр.Партия = ДокОбъект.УдалитьПартия;
		НовСтр.СерийныеНомера = ДокОбъект.УдалитьСерийныеНомераПредставление;
		НовСтр.Количество = ДокОбъект.УдалитьКоличество;
		НовСтр.ЕдиницаИзмерения = ДокОбъект.УдалитьЕдиницаИзмерения;
		НовСтр.Спецификация = ДокОбъект.УдалитьСпецификация;
		
		Попытка
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЦелевоеВремяОперацийПроизводительности() Экспорт

	ОценкаПроизводительностиПереопределяемый.ЗаполнитьЦелевоеВремяОперацийПроизводительности();
	
КонецПроцедуры

Процедура ОбновитьШаблоныСообщений() Экспорт
	
	Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	
	Выборка = Справочники.ШаблоныСообщений.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Шаблон = Выборка.Ссылка.ПолучитьОбъект();
		МД = Метаданные.НайтиПоПолномуИмени(Шаблон.УдалитьПолноеИмяОснования);
		
		СтруктураВложений = Выборка.УдалитьКартинкиТекстаHTML.Получить();
		Если СтруктураВложений <> Неопределено Тогда
			
			ТаблицаСоответствийИменВложенийИдентификаторам = Новый СписокЗначений;
			Для Каждого Вложение Из СтруктураВложений Цикл
				ТаблицаСоответствийИменВложенийИдентификаторам.Добавить(Вложение.Ключ, Новый УникальныйИдентификатор,, Вложение.Значение);
			КонецЦикла;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
				ДокументHTML = ШаблоныСообщенийСлужебный.ПолучитьОбъектДокументHTMLИзТекстаHTML(Шаблон.УдалитьТекстШаблонаHTML);
				ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
				Шаблон.ТекстШаблонаПисьмаHTML = ШаблоныСообщенийСлужебный.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
			
			Для Каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
				ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
				АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, Новый УникальныйИдентификатор);
				ПрисоединенныйФайл = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Шаблон.Ссылка, АдресКартинкиВоВременномХранилище,
					"_" + СтрЗаменить(Вложение.Представление, "-", "_"), ДвоичныеДанныеКартинки.Размер());
				
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Представление;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Шаблон.Автор = Пользователи.СсылкаНеуказанногоПользователя();
		
		Если МД = Метаданные.Документы.СчетНаОплату Тогда
			// Биллинг: в 1.6.7 это был шаблон для групповой отправки писем из обработки выставления счетов.
			Шаблон.Назначение = "Договор обслуживания";
			Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = "ДоговорыКонтрагентов";
		Иначе
			Шаблон.Назначение = ?(МД = Неопределено, "", МД.Представление());
			Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.УдалитьПолноеИмяОснования;
		КонецЕсли;
		Шаблон.ПредназначенДляSMS = Шаблон.УдалитьСпособОтправки = Перечисления.ВидыКаналовСвязи.SMS;
		Шаблон.ПредназначенДляВводаНаОсновании = Истина;
		Шаблон.ПредназначенДляЭлектронныхПисем = Шаблон.УдалитьСпособОтправки = Перечисления.ВидыКаналовСвязи.Email;
		
		Если Шаблон.ПредназначенДляSMS Тогда
			Шаблон.ТекстШаблонаSMS = ПреобразоватьПараметрыШаблона(Шаблон.УдалитьТекстШаблона, Шаблон.УдалитьПолноеИмяОснования);
		КонецЕсли;
		
		Если Шаблон.ПредназначенДляЭлектронныхПисем Тогда
			Шаблон.ТекстШаблонаПисьма = ПреобразоватьПараметрыШаблона(Шаблон.УдалитьТекстШаблона, Шаблон.УдалитьПолноеИмяОснования);
			Шаблон.ТекстШаблонаПисьмаHTML = ПреобразоватьПараметрыШаблона(
				?(Шаблон.ТекстШаблонаПисьмаHTML = "", Шаблон.УдалитьТекстШаблонаHTML, Шаблон.ТекстШаблонаПисьмаHTML),
				Шаблон.УдалитьПолноеИмяОснования
			);
			Шаблон.ТемаПисьма = ПреобразоватьПараметрыШаблона(Шаблон.УдалитьТемаШаблона, Шаблон.УдалитьПолноеИмяОснования);
			Шаблон.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		КонецЕсли;
		
		Шаблон.ТолькоДляАвтора = Ложь;
		Шаблон.УпаковатьВАрхив = Ложь;
		Шаблон.ШаблонПоВнешнейОбработке = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Шаблон);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML, ТаблицаСоответствий)
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		НайденнаяСтрока = ТаблицаСоответствий.НайтиПоЗначению(АтрибутИсточникКартинки.ТекстовоеСодержимое);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:" + НайденнаяСтрока.Представление);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо, АдресВоВременномХранилище, ИмяФайла,
		Размер, КоличествоПустыхИменВоВложениях = 0)
	
	ИмяФайлаДляРазбора = ИмяФайла;
	РасширениеБезТочки = "";
	МассивСтрок = СтрРазделить(ИмяФайлаДляРазбора, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяФайлаБезРасширения = НСтр("ru = 'Вложение без имени'") 
			+ ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
		КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
		
	Иначе
		ИмяБезРасширения = ?(РасширениеБезТочки = "", ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Письмо);
	ПараметрыФайла.Вставить("Автор",                       Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	Возврат ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресВоВременномХранилище, "");
	
КонецФункции

Функция ПреобразоватьПараметрыШаблона(знач ТекстШаблона, знач ПолноеИмяОснования)
	
	Результат = ТекстШаблона;
	МД = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОснования);
	
	Если МД = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПрефиксПараметра = МД.Имя + ".";
	ПараметрыШаблона = ОпределитьПараметрыСообщения(ТекстШаблона);
	Для Каждого КлючИЗначение Из ПараметрыШаблона Цикл
		Если МД = Метаданные.Документы.СчетНаОплату
			И (КлючИЗначение.Ключ = "Покупатель"
				ИЛИ КлючИЗначение.Ключ = "Обращение"
				ИЛИ КлючИЗначение.Ключ = "КонтактноеЛицоДолжность"
				ИЛИ КлючИЗначение.Ключ = "КонтактноеЛицоНаименование") Тогда
			Результат = СтрЗаменить(Результат, "[" + КлючИЗначение.Ключ + "]", "[ДоговорыКонтрагентов." + КлючИЗначение.Ключ + "]");
		Иначе
			Результат = СтрЗаменить(Результат, "[" + КлючИЗначение.Ключ + "]", "[" + ПрефиксПараметра + КлючИЗначение.Ключ + "]");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьПараметрыСообщения(ТекстСообщения)
	
	ПараметрыСообщения = Новый Соответствие;
	
	Текст = ТекстСообщения;
	Позиция = СтрНайти(Текст, "[");
	Пока Позиция > 0 Цикл
		Текст = Сред(Текст, Позиция + 1);
		Позиция = СтрНайти(Текст, "]");
		Если Позиция > 0 Тогда
			НайденныйПараметр = Лев(Текст, Позиция-1);
			ПараметрыСообщения.Вставить(НайденныйПараметр);
			Текст = Сред(Текст, Позиция + 1);
		КонецЕсли;
		Позиция = СтрНайти(Текст, "[");
	КонецЦикла;
	
	Возврат ПараметрыСообщения;
	
КонецФункции

Процедура УстановитьИспользованиеСервисаСпаркРиски() Экспорт
	
	Константы.ИспользоватьСервисСПАРКРиски.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновитьДвиженияРемонтыОплатаСчетовИЗаказов() Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемИПередачаВРемонт.Ссылка КАК Регистратор,
	|	ПриемИПередачаВРемонт.СуммаДокумента КАК Сумма,
	|	ПриемИПередачаВРемонт.Дата КАК Период,
	|	ПриемИПередачаВРемонт.Ссылка КАК СчетНаОплату,
	|	ПриемИПередачаВРемонт.Организация,
	|	ПриемИПередачаВРемонт.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам
	|ИЗ
	|	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт
	|ГДЕ
	|	ПриемИПередачаВРемонт.Проведен
	|	И ПриемИПередачаВРемонт.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|	И ПриемИПередачаВРемонт.СуммаДокумента > 0";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВестиУчетОплатыПоСчетам Тогда
		
			НЗОплатаСчетовИЗаказов = РегистрыНакопления.ОплатаСчетовИЗаказов.СоздатьНаборЗаписей();
			НЗОплатаСчетовИЗаказов.Отбор.Регистратор.Значение = Выборка.Регистратор;
			НовСтр = НЗОплатаСчетовИЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
			
			Попытка
			
				НЗОплатаСчетовИЗаказов.Записать();
			
			Исключение
				
			КонецПопытки;
		
		КонецЕсли; 
		
		НЗРасчетыСПокупателями = РегистрыНакопления.РасчетыСПокупателями.СоздатьНаборЗаписей();
		НЗРасчетыСПокупателями.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НЗРасчетыСПокупателями.Прочитать();
		Для каждого стр Из НЗРасчетыСПокупателями Цикл
			стр.Заказ = Выборка.Регистратор;
		КонецЦикла;
		
		Попытка
		
			НЗРасчетыСПокупателями.Записать();
		
		Исключение
			
		КонецПопытки;
	
	КонецЦикла;
		
	//Заполнить поле Заказ в ТЧ документов оплаты и соотв. движения регистров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПриемИПередачаВРемонт.Дата, ДЕНЬ) КАК Дата,
	|	ПриемИПередачаВРемонт.ВалютаДокумента КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ втДаты
	|ИЗ
	|	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт
	|ГДЕ
	|	ПриемИПередачаВРемонт.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ПриемИПередачаВРемонт.Ссылка.Проведен
	|	И ПриемИПередачаВРемонт.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Дата,
	|	ПоступлениеВКассу.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ПоступлениеВКассу.Ссылка.Проведен
	|	И ВЫРАЗИТЬ(ПоступлениеВКассу.Ссылка.ДокументОснование КАК Документ.ПриемИПередачаВРемонт).Проведен
	|	И ПоступлениеВКассу.Ссылка.ДокументОснование.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|	И ТИПЗНАЧЕНИЯ(ПоступлениеВКассу.Ссылка.ДокументОснование) = ТИП(Документ.ПриемИПередачаВРемонт)
	|	И НЕ ПоступлениеВКассу.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка)
	|	И ПоступлениеВКассу.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ПоступлениеНаСчет.Ссылка.Проведен
	|	И ВЫРАЗИТЬ(ПоступлениеНаСчет.Ссылка.ДокументОснование КАК Документ.ПриемИПередачаВРемонт).Проведен
	|	И ПоступлениеНаСчет.Ссылка.ДокументОснование.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|	И ТИПЗНАЧЕНИЯ(ПоступлениеНаСчет.Ссылка.ДокументОснование) = ТИП(Документ.ПриемИПередачаВРемонт)
	|	И НЕ ПоступлениеНаСчет.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка)
	|	И ПоступлениеНаСчет.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоКарте.Дата,
	|	ОперацияПоКарте.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоКарте
	|ГДЕ
	|	ОперацияПоКарте.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ОперацияПоКарте.Ссылка.Проведен
	|	И ВЫРАЗИТЬ(ОперацияПоКарте.Ссылка.ДокументОснование КАК Документ.ПриемИПередачаВРемонт).Проведен
	|	И ОперацияПоКарте.Ссылка.ДокументОснование.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|	И ТИПЗНАЧЕНИЯ(ОперацияПоКарте.Ссылка.ДокументОснование) = ТИП(Документ.ПриемИПередачаВРемонт)
	|	И НЕ ОперацияПоКарте.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка)
	|	И ОперацияПоКарте.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВалютаДенежныхСредств,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса,
	|	втДаты.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	втДаты.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ втДатыКурсов
	|ИЗ
	|	втДаты КАК втДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО втДаты.Дата >= КурсыВалют.Период
	|			И втДаты.ВалютаДенежныхСредств = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	втДаты.ВалютаДенежныхСредств,
	|	втДаты.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаКурса,
	|	ВалютаДенежныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДатыКурсов.ДатаДокумента КАК Период,
	|	КурсыВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ втКурсыВалют
	|ИЗ
	|	втДатыКурсов КАК втДатыКурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО (КурсыВалют.Период = втДатыКурсов.ДатаКурса)
	|			И втДатыКурсов.ВалютаДенежныхСредств = КурсыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка КАК Регистратор,
	|	ПоступлениеВКассу.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеВКассу.Ссылка.Дата КАК Период,
	|	ПоступлениеВКассу.Ссылка.Организация КАК Организация,
	|	ПоступлениеВКассу.Ссылка.ДокументОснование КАК СчетНаОплату,
	|	ПоступлениеВКассу.Ссылка.ДокументОснование КАК Заказ,
	|	ПоступлениеВКассу.Ссылка.ДокументОснование КАК ДокументРемонта,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ПоступлениеВКассу.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ПоступлениеВКассу.Ссылка.ВалютаДенежныхСредств = ПоступлениеВКассу.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеВКассу.СуммаПлатежа
	|			КОГДА ПоступлениеВКассу.Договор.ВалютаРасчетов = ПоступлениеВКассу.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеВКассу.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеВКассу.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ПоступлениеВКассу.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ПоступлениеВКассу.Ссылка.ВалютаДенежныхСредств = ПоступлениеВКассу.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеВКассу.СуммаПлатежа
	|			КОГДА ПоступлениеВКассу.Договор.ВалютаРасчетов = ПоступлениеВКассу.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеВКассу.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеВКассу.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеВКассу
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалютСчета
	|		ПО ПоступлениеВКассу.Ссылка.ДокументОснование.ВалютаДокумента = КурсыВалютСчета.Валюта
	|			И НАЧАЛОПЕРИОДА(ПоступлениеВКассу.Ссылка.ДокументОснование.Дата, ДЕНЬ) = КурсыВалютСчета.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалютКассы
	|		ПО ПоступлениеВКассу.Ссылка.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта
	|			И ПоступлениеВКассу.Ссылка.Дата = КурсыВалютКассы.Период
	|ГДЕ
	|	ПоступлениеВКассу.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ПоступлениеВКассу.Ссылка.Проведен
	|	И ВЫРАЗИТЬ(ПоступлениеВКассу.Ссылка.ДокументОснование КАК Документ.ПриемИПередачаВРемонт).Проведен
	|	И ПоступлениеВКассу.СуммаРасчетов > 0
	|	И ПоступлениеВКассу.Ссылка.ДокументОснование.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|	И ТИПЗНАЧЕНИЯ(ПоступлениеВКассу.Ссылка.ДокументОснование) = ТИП(Документ.ПриемИПередачаВРемонт)
	|	И НЕ ПоступлениеВКассу.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка)
	|	И ПоступлениеВКассу.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеВКассу.Ссылка,
	|	ПоступлениеВКассу.НомерСтроки,
	|	ПоступлениеВКассу.Ссылка.Организация,
	|	ПоступлениеВКассу.Ссылка.Дата,
	|	ПоступлениеВКассу.Заказ,
	|	ПоступлениеВКассу.Ссылка.ДокументОснование,
	|	ПоступлениеВКассу.Ссылка.ДокументОснование,
	|	ПоступлениеВКассу.Ссылка.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.НомерСтроки,
	|	ПоступлениеНаСчет.Ссылка.Дата,
	|	ПоступлениеНаСчет.Ссылка.Организация,
	|	ПоступлениеНаСчет.Ссылка.ДокументОснование,
	|	ПоступлениеНаСчет.Ссылка.ДокументОснование,
	|	ПоступлениеНаСчет.Ссылка.ДокументОснование,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ПоступлениеНаСчет.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ПоступлениеНаСчет.Ссылка.ВалютаДенежныхСредств = ПоступлениеНаСчет.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеНаСчет.СуммаПлатежа
	|			КОГДА ПоступлениеНаСчет.Договор.ВалютаРасчетов = ПоступлениеНаСчет.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеНаСчет.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеНаСчет.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ПоступлениеНаСчет.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ПоступлениеНаСчет.Ссылка.ВалютаДенежныхСредств = ПоступлениеНаСчет.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеНаСчет.СуммаПлатежа
	|			КОГДА ПоступлениеНаСчет.Договор.ВалютаРасчетов = ПоступлениеНаСчет.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ПоступлениеНаСчет.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеНаСчет.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалютСчета
	|		ПО ПоступлениеНаСчет.Ссылка.ДокументОснование.ВалютаДокумента = КурсыВалютСчета.Валюта
	|			И НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Ссылка.ДокументОснование.Дата, ДЕНЬ) = КурсыВалютСчета.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалютКассы
	|		ПО ПоступлениеНаСчет.Ссылка.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта
	|			И ПоступлениеНаСчет.Ссылка.Дата = КурсыВалютКассы.Период
	|ГДЕ
	|	ПоступлениеНаСчет.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ПоступлениеНаСчет.Ссылка.Проведен
	|	И ВЫРАЗИТЬ(ПоступлениеНаСчет.Ссылка.ДокументОснование КАК Документ.ПриемИПередачаВРемонт).Проведен
	|	И ПоступлениеНаСчет.СуммаРасчетов > 0
	|	И ПоступлениеНаСчет.Ссылка.ДокументОснование.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|	И ТИПЗНАЧЕНИЯ(ПоступлениеНаСчет.Ссылка.ДокументОснование) = ТИП(Документ.ПриемИПередачаВРемонт)
	|	И НЕ ПоступлениеНаСчет.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка)
	|	И ПоступлениеНаСчет.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.НомерСтроки,
	|	ПоступлениеНаСчет.Ссылка.Организация,
	|	ПоступлениеНаСчет.Ссылка.Дата,
	|	ПоступлениеНаСчет.Заказ,
	|	ПоступлениеНаСчет.Ссылка.ДокументОснование,
	|	ПоступлениеНаСчет.Ссылка.ДокументОснование,
	|	ПоступлениеНаСчет.Ссылка.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоКарте.Ссылка,
	|	ОперацияПоКарте.НомерСтроки,
	|	ОперацияПоКарте.Ссылка.Дата,
	|	ОперацияПоКарте.Ссылка.Организация,
	|	ОперацияПоКарте.Ссылка.ДокументОснование,
	|	ОперацияПоКарте.Ссылка.ДокументОснование,
	|	ОперацияПоКарте.Ссылка.ДокументОснование,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ОперацияПоКарте.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ОперацияПоКарте.Ссылка.ВалютаДенежныхСредств = ОперацияПоКарте.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ОперацияПоКарте.СуммаПлатежа
	|			КОГДА ОперацияПоКарте.Договор.ВалютаРасчетов = ОперацияПоКарте.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ОперацияПоКарте.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ОперацияПоКарте.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ОперацияПоКарте.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ОперацияПоКарте.Ссылка.ВалютаДенежныхСредств = ОперацияПоКарте.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ОперацияПоКарте.СуммаПлатежа
	|			КОГДА ОперацияПоКарте.Договор.ВалютаРасчетов = ОперацияПоКарте.Ссылка.ДокументОснование.ВалютаДокумента
	|				ТОГДА ОперацияПоКарте.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ОперацияПоКарте.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам.РасшифровкаПлатежа КАК ОперацияПоКарте
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалютСчета
	|		ПО ОперацияПоКарте.Ссылка.ДокументОснование.ВалютаДокумента = КурсыВалютСчета.Валюта
	|			И НАЧАЛОПЕРИОДА(ОперацияПоКарте.Ссылка.ДокументОснование.Дата, ДЕНЬ) = КурсыВалютСчета.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалютКассы
	|		ПО ОперацияПоКарте.Ссылка.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта
	|			И ОперацияПоКарте.Ссылка.Дата = КурсыВалютКассы.Период
	|ГДЕ
	|	ОперацияПоКарте.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ОперацияПоКарте.Ссылка.Проведен
	|	И ВЫРАЗИТЬ(ОперацияПоКарте.Ссылка.ДокументОснование КАК Документ.ПриемИПередачаВРемонт).Проведен
	|	И ОперацияПоКарте.СуммаРасчетов > 0
	|	И ОперацияПоКарте.Ссылка.ДокументОснование.ВариантРемонта В (ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр), ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт))
	|	И ТИПЗНАЧЕНИЯ(ОперацияПоКарте.Ссылка.ДокументОснование) = ТИП(Документ.ПриемИПередачаВРемонт)
	|	И НЕ ОперацияПоКарте.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка)
	|	И ОперацияПоКарте.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацияПоКарте.Ссылка,
	|	ОперацияПоКарте.НомерСтроки,
	|	ОперацияПоКарте.Ссылка.Организация,
	|	ОперацияПоКарте.Ссылка.Дата,
	|	ОперацияПоКарте.Заказ,
	|	ОперацияПоКарте.Ссылка.ДокументОснование,
	|	ОперацияПоКарте.Ссылка.ДокументОснование,
	|	ОперацияПоКарте.Ссылка.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Регистратор";
	
	Результат = Запрос.Выполнить();
	ВыборкаДокумент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		//ТЧ документа - заполняем поле Заказ
		ДокОбъект = ВыборкаДокумент.Регистратор.ПолучитьОбъект();
		ЕстьИзмененныеСтроки = Ложь;
		
		ВыборкаСтроки = ВыборкаДокумент.Выбрать();
		
		Пока ВыборкаСтроки.Следующий() Цикл
			
			СтрокаЗаполнить = ДокОбъект.РасшифровкаПлатежа.Найти(ВыборкаСтроки.НомерСтроки,"НомерСтроки");
			Если СтрокаЗаполнить=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаполнить.Заказ) Тогда
				Продолжить;
			КонецЕсли;
			ЕстьИзмененныеСтроки = Истина;
			СтрокаЗаполнить.Заказ = ВыборкаСтроки.ДокументРемонта;
		КонецЦикла;
		
		Если НЕ ЕстьИзмененныеСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Продолжить;
		КонецПопытки;
		
		//ОплатаСчетовИЗаказов - формируем движения
		ВыборкаСтроки.Сбросить();
		Пока ВыборкаСтроки.Следующий() Цикл
			
			НЗОплатаСчетовИЗаказов = РегистрыНакопления.ОплатаСчетовИЗаказов.СоздатьНаборЗаписей();
			НЗОплатаСчетовИЗаказов.Отбор.Регистратор.Значение = ВыборкаДокумент.Регистратор;
			
			НовСтр = НЗОплатаСчетовИЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСтроки);
			
		КонецЦикла;
		Попытка
			НЗОплатаСчетовИЗаказов.Записать();
		Исключение
			
		КонецПопытки;
		
		//РасчетыСПокупателями - заполняем поле заказ
		НЗРасчетыСПокупателями = РегистрыНакопления.РасчетыСПокупателями.СоздатьНаборЗаписей();
		НЗРасчетыСПокупателями.Отбор.Регистратор.Значение = ВыборкаДокумент.Регистратор;
		НЗРасчетыСПокупателями.Прочитать();
		Для каждого стр Из НЗРасчетыСПокупателями Цикл
			Если НЕ ЗначениеЗаполнено(стр.Заказ) Тогда
				стр.Заказ = ДокОбъект.ДокументОснование;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			НЗРасчетыСПокупателями.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьВычетыНДФЛНА2016год() Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ВычетыНДФЛ.ЗаполнитьКодыВычетовНДФЛ();
КонецПроцедуры

Процедура КорректировкаШаблонаОчередиЗаданийРассылкаЭлектронныхЧеков() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ШаблонЗадания = ОчередьЗаданий.ШаблонПоИмени("РассылкаЭлектронныхЧеков");
		Если ЗначениеЗаполнено(ШаблонЗадания) Тогда
			
			Если ШаблонЗадания.Использование = Ложь Тогда
				
				Попытка
					
					ШаблонЗаданияОбъект = ШаблонЗадания.ПолучитьОбъект();
					ШаблонЗаданияОбъект.Использование = Истина;
					ШаблонЗаданияОбъект.Записать();
					
				Исключение
					
					ВызватьИсключение;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КорректировкаЗаданияОбластиДанныхРассылкаЭлектронныхЧеков(СтруктураПараметров = Неопределено) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ШаблонЗадания = ОчередьЗаданий.ШаблонПоИмени("РассылкаЭлектронныхЧеков");
		Если ЗначениеЗаполнено(ШаблонЗадания) Тогда
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Шаблон", ШаблонЗадания);
			
			ТаблицаЗаданий = ОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
			Для каждого СтрокаТаблицы Из ТаблицаЗаданий Цикл
				
				Если СтрокаТаблицы.Использование = Ложь Тогда
					
					ОчередьЗаданий.ИзменитьЗадание(СтрокаТаблицы.Идентификатор, Новый Структура("Использование", Истина));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
	СтруктураПараметров.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ОбновитьКБКНА2017год(Параметры = Неопределено) Экспорт
	
	Справочники.ВидыНалогов.ОбновитьПоставляемыеДанныеИзКлассификатора();
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗначенияКБКНа2017год(Параметры = Неопределено) Экспорт
	ЗагрузитьЗначенияКБК();
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьРассылкуСостояниеКомпании(Параметры) Экспорт
	
	РазмерПорцииДанных = 500;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	НастройкиРассылкиСостояниеКомпании.Ссылка
	|ИЗ
	|	Справочник.НастройкиРассылкиСостояниеКомпании КАК НастройкиРассылкиСостояниеКомпании");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", РазмерПорцииДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдаляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдаляемыйОбъект.Удалить();
	КонецЦикла;
	
	Если Выборка.Количество() < РазмерПорцииДанных Тогда
		Параметры.ОбработкаЗавершена = Истина;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗадачиВПФРНа2017год() Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	// Меняем срок задач СЗВ-М с 2017 года на 15 число (было 10е)
	НовыеДаты = Новый Соответствие;
	НовыеДаты.Вставить('20170101', '20170116');
	НовыеДаты.Вставить('20170201', '20170215');
	НовыеДаты.Вставить('20170301', '20170315');
	НовыеДаты.Вставить('20170401', '20170417');
	НовыеДаты.Вставить('20170501', '20170515');
	НовыеДаты.Вставить('20170601', '20170615');
	НовыеДаты.Вставить('20170701', '20170717');
	НовыеДаты.Вставить('20170801', '20170815');
	НовыеДаты.Вставить('20170901', '20170915');
	НовыеДаты.Вставить('20171001', '20171016');
	НовыеДаты.Вставить('20171101', '20171115');
	НовыеДаты.Вставить('20171201', '20171215');
	НовыеДаты.Вставить('20180101', '20180115');
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия > &Начало2017Года";
	
	Запрос.УстановитьПараметр("Задача", Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах);
	Запрос.УстановитьПараметр("Начало2017Года", '20170101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Задача = Выборка.Ссылка.ПолучитьОбъект();
		Задача.ДатаОкончанияСобытия = НовыеДаты.Получить(НачалоМесяца(Задача.ДатаОкончанияСобытия));
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Задача, Ложь, Ложь);
	КонецЦикла;
	
	// Удаляем задачи по РСВ-1 на 2017 год
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаНачалаСобытия > &Начало2017Года";
	
	Запрос.УстановитьПараметр("Задача", Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Задача = Выборка.Ссылка.ПолучитьОбъект();
		Задача.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПеремещениеДенежныхСредств(Параметры) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(ПрименениеПереводовВПутиСрезПоследних.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств, ЛОЖЬ) КАК ПрименениеПереводовВПути
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеПереводовВПути.СрезПоследних КАК ПрименениеПереводовВПутиСрезПоследних
	|		ПО (ПрименениеПереводовВПутиСрезПоследних.Организация = Организации.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	РасходИзКассы.Ссылка КАК РасходИзКассы,
	|	РасходИзКассы.СчетОрганизации,
	|	РасходИзКассы.Касса
	|ПОМЕСТИТЬ ВТДокументыКОбработкеРасходИзКассы
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК ВТОрганизации
	|		ПО (ВТОрганизации.Организация = РасходИзКассы.Организация)
	|			И (НЕ ВТОрганизации.ПрименениеПереводовВПути)
	|			И (РасходИзКассы.Проведен)
	|			И (РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|		ПО (ДенежныеСредства.Регистратор = РасходИзКассы.Ссылка)
	|			И (ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|ГДЕ
	|	ДенежныеСредства.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходИзКассы.Ссылка,
	|	РасходИзКассы.СчетОрганизации,
	|	РасходИзКассы.Касса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ПоступлениеВКассу.Ссылка КАК ПоступлениеВКассу
	|ПОМЕСТИТЬ ВТДокументыКОбработкеПоступлениеВКассу
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК ВТОрганизации
	|		ПО (ВТОрганизации.Организация = ПоступлениеВКассу.Организация)
	|			И (ВТОрганизации.ПрименениеПереводовВПути)
	|			И (ПоступлениеВКассу.Проведен)
	|			И (ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ПолучениеНаличныхВБанке))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|		ПО (ДенежныеСредства.Регистратор = ПоступлениеВКассу.Ссылка)
	|			И (ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеВКассу.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.Период,
	|	ДенежныеСредства.Регистратор КАК Регистратор,
	|	ДенежныеСредства.НомерСтроки,
	|	ДенежныеСредства.Активность,
	|	ДенежныеСредства.ВидДвижения,
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.ТипДенежныхСредств,
	|	ДенежныеСредства.БанковскийСчетКасса,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.Сумма,
	|	ДенежныеСредства.СуммаВал,
	|	ДенежныеСредства.СодержаниеПроводки,
	|	ДенежныеСредства.Статья,
	|	ДенежныеСредства.ХозяйственнаяОперация,
	|	ДенежныеСредства.Аналитика
	|ИЗ
	|	ВТДокументыКОбработкеРасходИзКассы КАК ДокументыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|		ПО (ДенежныеСредства.Регистратор = ДокументыКОбработке.РасходИзКассы)
	|			И (ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.Период,
	|	ДенежныеСредства.Регистратор,
	|	ДенежныеСредства.НомерСтроки,
	|	ДенежныеСредства.Активность,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ДенежныеСредства.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.БезНаличные),
	|	ДокументыКОбработке.СчетОрганизации,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.Сумма,
	|	ДенежныеСредства.СуммаВал,
	|	ДенежныеСредства.СодержаниеПроводки,
	|	ДенежныеСредства.Статья,
	|	ДенежныеСредства.ХозяйственнаяОперация,
	|	ДокументыКОбработке.Касса
	|ИЗ
	|	ВТДокументыКОбработкеРасходИзКассы КАК ДокументыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|		ПО (ДенежныеСредства.Регистратор = ДокументыКОбработке.РасходИзКассы)
	|			И (ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.Период,
	|	ДенежныеСредства.Регистратор,
	|	ДенежныеСредства.НомерСтроки,
	|	ДенежныеСредства.Активность,
	|	ДенежныеСредства.ВидДвижения,
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.ТипДенежныхСредств,
	|	ДенежныеСредства.БанковскийСчетКасса,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.Сумма,
	|	ДенежныеСредства.СуммаВал,
	|	ДенежныеСредства.СодержаниеПроводки,
	|	ДенежныеСредства.Статья,
	|	ДенежныеСредства.ХозяйственнаяОперация,
	|	ДенежныеСредства.Аналитика
	|ИЗ
	|	ВТДокументыКОбработкеПоступлениеВКассу КАК ДокументыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|		ПО (ДенежныеСредства.Регистратор = ДокументыКОбработке.ПоступлениеВКассу)
	|			И (ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументов.Следующий() Цикл
		НаборЗаписейДенежныеСредства = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
		НаборЗаписейДенежныеСредства.Отбор.Регистратор.Значение = ВыборкаДокументов.Регистратор;
		ВыборкаЗаписей = ВыборкаДокументов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			НовСтр = НаборЗаписейДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаписей);
		КонецЦикла;
		Попытка
			НаборЗаписейДенежныеСредства.Записать();
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
	Если ВыборкаДокументов.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапланироватьЗаданияРасчетаОчередиЦен(Параметры = Неопределено) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Запрос = Новый Запрос("Выбрать Первые 1 * Из РегистрСведений.ОчередьРасчетаЦен");
		РезультатВыполнения = Запрос.Выполнить();
		
		Если НЕ РезультатВыполнения.Пустой() Тогда
			
			ЦенообразованиеСервер.ВыключитьВключитьИспользованиеЗаданияРасчетаОчередиЦен(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УдалитьЗаданияОбластейДанныхНаСервере(ТаблицаНайденныхЗаданий)
	
	Если ТаблицаНайденныхЗаданий.Количество() > 0 Тогда
		
		Для каждого ЗапланированноеРЗ Из ТаблицаНайденныхЗаданий Цикл
			
			ОчередьЗаданий.УдалитьЗадание(ЗапланированноеРЗ.Идентификатор);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаданияРасчетаОчередиЦен() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ИмяМетода = "ЦенообразованиеСервер.РасчетОчередиЦен";
		СтруктураОтбора = Новый Структура("ИмяМетода", ИмяМетода);
		УдалитьЗаданияОбластейДанныхНаСервере(ОчередьЗаданий.ПолучитьЗадания(СтруктураОтбора));
		
		ИмяМетода = "ЦенообразованиеСервер.РасчетОчередиЦенРазовымЗаданием";
		СтруктураОтбора.ИмяМетода = ИмяМетода;
		УдалитьЗаданияОбластейДанныхНаСервере(ОчередьЗаданий.ПолучитьЗадания(СтруктураОтбора));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТарифыСтраховыхВзносов() Экспорт
	Если ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ТарифыСтраховыхВзносов.УстановитьЗначенияТарифовСтраховыхВзносов2011_2012();
КонецПРоцедуры

Процедура УстановитьПрофильПроизводствоСобственникам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Профиль = &Профиль";
	Запрос.УстановитьПараметр("Профиль", Перечисления.ПрофилиМобильногоПриложения.Собственник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПланОбменаОбъект.УстановитьРолиПоПрофилю(Перечисления.ПрофилиМобильногоПриложения.Собственник);
			ПланОбменаОбъект.Записать();
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ru='Перезаполнение профилей мобильных приложений.'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти