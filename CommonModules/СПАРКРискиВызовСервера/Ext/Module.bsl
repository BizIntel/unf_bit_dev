
////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРК".
// ОбщийМодуль.СПАРКРискиВызовСервера.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет возможность использования сервиса в соответствии с текущим
//  режимом работы и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - использование разрешено, Ложь - в противном случае.
//
Функция ИспользованиеРазрешено() Экспорт

	Возврат СПАРКРиски.ИспользованиеРазрешено();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СправочникиКонтрагенты() Экспорт
	
	Результат = Новый СписокЗначений;
	
	СвойстваСправочников = СПАРКРиски.СвойстваСправочниковКонтрагентов();
	Для Каждого ОписаниеСправочника Из СвойстваСправочников Цикл
		Результат.Добавить(
			Новый Структура("Имя, ИмяФормыПодбора",
				ОписаниеСправочника.Имя,
				ОписаниеСправочника.ИмяФормыПодбора),
			Метаданные.Справочники[ОписаниеСправочника.Имя].Синоним);
	КонецЦикла;
	
	Результат.СортироватьПоПредставлению();
	
	Возврат Результат;
	
КонецФункции

Процедура ВключитьОтключитьМониторингСобытийКонтрагента(Контрагент, МониторингВключен) Экспорт
	
	Если Не СПАРКРиски.ИспользованиеРазрешено("ПостановкаНаМониторинг;") Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для постановки контрагентов на мониторинг.'");
	КонецЕсли;
	
	СПАРКРиски.ВключитьОтключитьМониторингСобытий(Контрагент, МониторингВключен, Истина);
	
КонецПроцедуры

#Область ИндексыСПАРКРиски

// Возвращает информацию о контрагенте (индексы и прочая информация).
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  Контрагент - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
// Возвращаемое значение:
//  Структура: структура с ключами как описано в СПАРКРискиКлиентСервер.НовыйДанныеИндексов().
//
Функция ИндексыСПАРККонтрагента(Контрагент, ПризнакЗагрузкиДанных = Ложь) Экспорт

	Результат = СПАРКРиски.ИндексыСПАРККонтрагента(Контрагент, ПризнакЗагрузкиДанных);

	Возврат Результат;

КонецФункции

// Процедура предназначена для проверки завершенности фоновых заданий.
//
// Параметры:
//  ПроверяемыеФоновыеЗадания - Массив - массив структур, описанных в СПАРКРискиКлиент.НовыйПроверкаЗавершенностиФоновогоЗадания.
//
// Возвращаемое значение:
//   Массив - массив структур, описанных в СПАРКРискиКлиент.НовыйПроверкаЗавершенностиФоновогоЗадания.
//
Функция ПроверкаЗавершенностиФоновыхЗаданий(ПроверяемыеФоновыеЗадания) Экспорт

	Результат = СПАРКРиски.ПроверкаЗавершенностиФоновыхЗаданий(ПроверяемыеФоновыеЗадания);

	Возврат Результат;

КонецФункции

// Из результата работы веб-сервиса, сохраненного в 
//
// Параметры:
//  АдресВременногоХранилища - Строка - адрес временного хранилища, в котором хранится
//                                      результат вызова СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов.
//
// Возвращаемое значение:
//   Структура - структура, как описано в СПАРКРискиКлиентСервер.НовыйДанныеИндексов.
//
Функция ПолучитьПервыйИндекс(АдресВременногоХранилища) Экспорт

	Результат = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();

	ТипСтруктура       = Тип("Структура");
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");

	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка);
		Результат.Вставить("ТекстОшибки", НСтр("ru='Вызов веб-сервиса не сохранил данные в хранилище.'"));
		Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных);
		Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
	Иначе
		ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		Если (ТипЗнч(ДанныеХранилища) = ТипСтруктура) Тогда
			Если (ДанныеХранилища.Свойство("ЗначенияИндексов"))
				И (ТипЗнч(ДанныеХранилища.ЗначенияИндексов) = ТипТаблицаЗначений)
				И (ДанныеХранилища.ЗначенияИндексов.Количество() > 0) Тогда
				ЗаполнитьЗначенияСвойств(Результат, ДанныеХранилища.ЗначенияИндексов[0]);
				// Если есть общая ошибка, то заполнить ее.
			КонецЕсли;
			Если НЕ ДанныеХранилища.ВидОшибки.Пустая() Тогда
				Результат.Вставить("ВидОшибки", ДанныеХранилища.ВидОшибки);
				Результат.Вставить("ПодлежитПроверке", Истина); // Чтобы отобразилась панель с описанием сервиса.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// Функция получает цвет стиля по имени элемента стиля.
//
// Параметры:
// ИмяЦветаСтиля - Строка -  Имя элемента стиля.
//
// Возвращаемое значение:
// Цвет.
//
Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт

	Возврат ЦветаСтиля[ИмяЦветаСтиля];

КонецФункции

#КонецОбласти