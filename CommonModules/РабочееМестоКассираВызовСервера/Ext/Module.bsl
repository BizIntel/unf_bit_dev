Процедура УстановитьМинимальныйИнтерфейсРМК() Экспорт
	
	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава.Лево.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	Настройки.УстановитьСостав(НастройкиСостава);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки);
	
	
	
КонецПроцедуры

#Область ПроцедурыИФункцииОбработкиСправочникаНастройкиРМК

// Функция получает настройку РМУ для рабочего места
//
// Параметры:
//  РабочееМесто - Справочник.РабочиеМеста - текущее рабочее место (для работы с подключаемым оборудованием)
//
Функция ПолучитьНастройкуРМК(РабочееМесто) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиРМК.Ссылка
		|ИЗ
		|	Справочник.НастройкиРМК КАК НастройкиРМК
		|ГДЕ
		|	НастройкиРМК.РабочееМесто = &РабочееМесто
		|	И НЕ НастройкиРМК.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		НоваяНастройкаРМК = Справочники.НастройкиРМК.СоздатьЭлемент();
		НоваяНастройкаРМК.ЗаполнитьТаблицуКнопокИзМакета();
		НоваяНастройкаРМК.РабочееМесто = РабочееМесто;
		НоваяНастройкаРМК.Наименование = СокрЛП(РабочееМесто.Наименование);
		Попытка
			НоваяНастройкаРМК.Записать();
			
			Возврат НоваяНастройкаРМК.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Процедура записывает новое значение реквизита НеПоказыватьПриОткрытииФормуВыбораКассы
//
// Параметры:
//  НастройкаРМК - Справочник.НастройкиРМК - текущие настройки РМК (определяются по рабочему месту)
//  НеПоказыватьПриОткрытииФормуВыбораКассы - Булево - новое значение реквизита
//
Процедура ОбновитьНастройкиРМК(НастройкаРМК, НеПоказыватьПриОткрытииФормуВыбораКассы, СверятьИтогиНаЭТПриЗакрытииСмены = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НастройкаРМК.Пустая() И
		(НастройкаРМК.НеПоказыватьПриОткрытииФормуВыбораКассы <> НеПоказыватьПриОткрытииФормуВыбораКассы 
		ИЛИ 
		НастройкаРМК.СверятьИтогиНаЭТПриЗакрытииСмены <> СверятьИтогиНаЭТПриЗакрытииСмены)
		Тогда
		
		НастройкаРМКОбъект = НастройкаРМК.ПолучитьОбъект();
		НастройкаРМКОбъект.НеПоказыватьПриОткрытииФормуВыбораКассы = НеПоказыватьПриОткрытииФормуВыбораКассы;
		НастройкаРМКОбъект.СверятьИтогиНаЭТПриЗакрытииСмены = СверятьИтогиНаЭТПриЗакрытииСмены;
		
		Попытка
			НастройкаРМКОбъект.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось записать изменения. "+Символы.ПС+ОписаниеОшибки();
			Если НастройкаРМК.НеПоказыватьПриОткрытииФормуВыбораКассы <> НеПоказыватьПриОткрытииФормуВыбораКассы Тогда
				Сообщение.Поле = "НеПоказыватьПриОткрытииФормуВыбораКассы";
			Иначе
				Сообщение.Поле = "СверятьИтогиНаЭТПриЗакрытииСмены";
			КонецЕсли;
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция определяет кассу кассу по умолчанию.
//
// Возвращает кассу ККМ, если найдена одна касса.
// Возвращает Неопределено, если касса не найдена или касс больше одной.
//
// Возвращаемое значение:
//	СправочникСсылка.КассыККМ - Найденная касса ККМ
//
&НаСервере
Функция ПолучитьКассуККМИТерминалПоУмолчанию() Экспорт
	
	СтруктураПараметров = Новый Структура("КассаККМ, ЭквайринговыйТерминал, КоличествоЭквайринговыхТерминалов, Организация, СтруктурнаяЕдиница", 
		Справочники.КассыККМ.ПустаяСсылка(), Справочники.ЭквайринговыеТерминалы.ПустаяСсылка(), 0);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.СтруктурнаяЕдиница,
	|	КассыККМ.Владелец КАК Организация
	|ПОМЕСТИТЬ КассыККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И КассыККМ.ТипКассы = &ТипКассы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал,
	|	ЭквайринговыеТерминалы.Касса
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ЭквайринговыеТерминалы.Касса = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса.ТипКассы = &ТипКассы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.КассаККМ,
	|	КассыККМ.СтруктурнаяЕдиница,
	|	КассыККМ.Организация
	|ИЗ
	|	КассыККМ КАК КассыККМ");
	
	Запрос.УстановитьПараметр("ТипКассы", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МРезультатов[2].Выбрать();
	КоличествоКассККМ = Выборка.Количество();
	Если КоличествоКассККМ = 1 
	   И Выборка.Следующий() Тогда
	
		СтруктураПараметров.КассаККМ = Выборка.КассаККМ;
		СтруктураПараметров.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		СтруктураПараметров.Организация = Выборка.Организация;
		
	Иначе
		
		СтруктураПараметров.КассаККМ = Неопределено;
		
	КонецЕсли;
	
	Если КоличествоКассККМ = 1 Тогда
		ТЗ_ЭТ = МРезультатов[1].Выгрузить();
		
		ЭТКассыПоУмолчанию = ТЗ_ЭТ.НайтиСтроки(Новый Структура("Касса", СтруктураПараметров.КассаККМ));
		
		СтруктураПараметров.КоличествоЭквайринговыхТерминалов = ЭТКассыПоУмолчанию.Количество();
		Если ЭТКассыПоУмолчанию.Количество() = 1 Тогда
			
			СтруктураПараметров.ЭквайринговыйТерминал = ЭТКассыПоУмолчанию[0].ЭквайринговыйТерминал;
			
		Иначе
			
			СтруктураПараметров.ЭквайринговыйТерминал = Неопределено;
			
		КонецЕсли;
	Иначе
		СтруктураПараметров.ЭквайринговыйТерминал = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьКассуПоУмолчанию()


#КонецОбласти