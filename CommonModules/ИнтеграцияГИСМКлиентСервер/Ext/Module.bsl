////////////////////////////////////////////////////////////////////////////////
//
// ИнтеграцияГИСМКлиент : клиент-серверные процедуры и функции подсистемы "Интеграция с ГИСМ"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет включение режима использования тестового контура ГИСМ.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром.
//
Функция РежимРаботыСТестовымКонтуромГИСМ() Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	#Иначе
		ПараметрЗапускаПриложения = ПараметрЗапуска;
	#КонецЕсли
	
	Возврат СтрНайти(ПараметрЗапускаПриложения, "РежимРаботыСТестовымКонтуромГИСМ") > 0;
	
КонецФункции

// Возвращает адрес сервера ГИСМ.
//
// Возвращаемое значение:
//  Строка - Адрес сервера.
Функция АдресСервераГИСМ() Экспорт
	
	Если РежимРаботыСТестовымКонтуромГИСМ() Тогда
		Возврат "195.149.110.235";
	Иначе
		Возврат "markirovka.nalog.ru";
	КонецЕсли;
	
КонецФункции

// Отправляет POST запрос для передачи данных на сервер системы маркировки.
//
// Параметры:
//  ТекстПодписанногоИсходящегоСообщенияXML - Строка - Текст сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КодСостояния - Число - Код состояния (ответа) HTTP-сервера.
//   * Заголовки - Соответствие - HTTP-заголовки ответа сервера.
//   * ТекстОтвета - Строка - Текст ответа.
//
Функция ОтправитьЗапросДляПередачиДанных(ТекстПодписанногоИсходящегоСообщенияXML) Экспорт
	
	#Если ВебКлиент Тогда
		
		ВозвращаемоеЗначение = ИнтеграцияГИСМВызовСервера.ОтправитьЗапросДляПередачиДанных(ТекстПодписанногоИсходящегоСообщенияXML);
		
	#Иначе
		
		Если РежимРаботыСТестовымКонтуромГИСМ() Тогда
			Порт = 7410;
		Иначе
			Порт = 81;
		КонецЕсли;
		
		ВозвращаемоеЗначение = ОтправитьДляОбработки(
			ТекстПодписанногоИсходящегоСообщенияXML,
			Порт, "IncomingService.svc", "http://tempuri.org/IIncomingService/CommunicateMessage");
		
	#КонецЕсли
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Отправляет POST запрос для получения данных с сервера системы маркировки.
//
// Параметры:
//  ТекстПодписанногоИсходящегоСообщенияXML - Строка - Текст сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КодСостояния - Число - Код состояния (ответа) HTTP-сервера.
//   * Заголовки - Соответствие - HTTP-заголовки ответа сервера.
//   * ТекстОтвета - Строка - Текст ответа.
//
Функция ОтправитьЗапросДляПолученияДанных(ТекстПодписанногоИсходящегоСообщенияXML) Экспорт
	
	#Если ВебКлиент Тогда
		
		ВозвращаемоеЗначение = ИнтеграцияГИСМВызовСервера.ОтправитьЗапросДляПолученияДанных(ТекстПодписанногоИсходящегоСообщенияXML);
		
	#Иначе
		
		Если РежимРаботыСТестовымКонтуромГИСМ() Тогда
			Порт = 7413;
		Иначе
			Порт = 82;
		КонецЕсли;
		
		ВозвращаемоеЗначение = ОтправитьДляОбработки(
			ТекстПодписанногоИсходящегоСообщенияXML,
			Порт, "OutgoingService.svc", "http://tempuri.org/IOutgoingService/CommunicateMessage");
		
	#КонецЕсли
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Отправляет POST запрос для получения данных с сервера системы маркировки.
//
// Параметры:
//  ТекстПодписанногоИсходящегоСообщенияXML - Строка - Текст сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КодСостояния - Число - Код состояния (ответа) HTTP-сервера.
//   * Заголовки - Соответствие - HTTP-заголовки ответа сервера.
//   * ТекстОтвета - Строка - Текст ответа.
//
Функция ОтправитьЗапросДляПолученияРеестров(ТекстПодписанногоИсходящегоСообщенияXML) Экспорт
	
	#Если ВебКлиент Тогда
		
		ВозвращаемоеЗначение = ИнтеграцияГИСМВызовСервера.ОтправитьЗапросДляПолученияРеестров(ТекстПодписанногоИсходящегоСообщенияXML);
		
	#Иначе
		
		Если РежимРаботыСТестовымКонтуромГИСМ() Тогда
			Порт = 7418;
		Иначе
			Порт = 83;
		КонецЕсли;
		
		ВозвращаемоеЗначение = ОтправитьДляОбработки(
			ТекстПодписанногоИсходящегоСообщенияXML,
			Порт, "RegistryService.svc", "http://tempuri.org/IRegistryService/CommunicateMessage");
		
	#КонецЕсли
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Отправляет текст запроса в ГИСМ
//
// Параметры:
//  ТекстПодписанногоИсходящегоСообщенияXML - Строка - текст отправляемого сообщения
//  ВариантЗапроса - Перечисление.ВариантыЗапросовГИСМ - вариант отправляемого запроса
//
// Возвращаемое значение:
// Структура - Структура со свойствами:
//  * КодСостояния - Число - Код состояния (ответа) HTTP-сервера.
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера.
//  * ТекстОтвета - Строка - Текст ответа.
//  * ТекстОтвета - Строка - Текст ошибки.
//
Функция ОтправитьЗапрос(ТекстПодписанногоИсходящегоСообщенияXML, ВариантЗапроса) Экспорт
	
	Если ВариантЗапроса = ПредопределенноеЗначение("Перечисление.ВариантыЗапросовГИСМ.ПередачаДанных") Тогда
		Возврат ИнтеграцияГИСМКлиентСервер.ОтправитьЗапросДляПередачиДанных(ТекстПодписанногоИсходящегоСообщенияXML);
	ИначеЕсли ВариантЗапроса = ПредопределенноеЗначение("Перечисление.ВариантыЗапросовГИСМ.ПолучениеДанных") Тогда
		Возврат ИнтеграцияГИСМКлиентСервер.ОтправитьЗапросДляПолученияДанных(ТекстПодписанногоИсходящегоСообщенияXML);
	ИначеЕсли ВариантЗапроса = ПредопределенноеЗначение("Перечисление.ВариантыЗапросовГИСМ.ПолучениеРеестров") Тогда
		Возврат ИнтеграцияГИСМКлиентСервер.ОтправитьЗапросДляПолученияРеестров(ТекстПодписанногоИсходящегоСообщенияXML);
	КонецЕсли;
	
КонецФункции

// Получает сертификат криптографии, которым подписано сообщение
//
// Параметры:
//  Сообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  СертификатКриптографии - Сертификат криптографии
//
Функция СертификатКриптографииИзСообщения(Сообщение) Экспорт
	
	КонвертSOAP = ИнтеграцияГИСМВызовСервера.КонвертSOAPИзПротокола(Сообщение);
	
	СертификатКриптографии = СертификатКриптографииИзКонвертаSOAP(КонвертSOAP);
	
	Возврат СертификатКриптографии;
	
КонецФункции

// Получает сертификат криптографии, которым подписано сообщение
//
// Параметры:
//  Сообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  СертификатКриптографии - Сертификат криптографии
//
Функция СертификатКриптографииИзКонвертаSOAP(КонвертSOAP) Экспорт
	
	ДвоичныеДанныеСертификата = Base64Значение(СокрЛП(ИнтеграцияГИСМКлиентСервер.НайтиВXML(КонвертSOAP, "wsse:BinarySecurityToken", Ложь, 1)));
	СертификатКриптографии    = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	
	Возврат СертификатКриптографии;
	
КонецФункции

// Сформировать представление подписи
//
// Параметры:
//  СертификатКриптографии - Сертификат криптографии
//  ПодписьВерна           - Булево - признак валидности подписи
//  ДатаПроверкиПодписи    - Дата - Дата проверки подписи
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление подписи
//
Функция ПредставлениеПодписи(СертификатКриптографии, Сообщение, ВыводитьГиперссылки, СтруктураЦветаСтиля) Экспорт
	
	ПолученСубьект = Истина;
	Если СертификатКриптографии.Субъект.Свойство("CN") Тогда
		Субьект = СертификатКриптографии.Субъект.CN;
	ИначеЕсли СертификатКриптографии.Субъект.Свойство("O") Тогда
		Субьект = СертификатКриптографии.Субъект.O;
	Иначе
		ПолученСубьект = Ложь;
		Субьект = "";
	КонецЕсли;
	
	СтрокаПодписано = Новый ФорматированнаяСтрока(НСтр("ru = 'Подписано'"));
	Если ВыводитьГиперссылки Тогда
		СтрокаСубъект = Новый ФорматированнаяСтрока(Субьект,,,,"ОткрытьСертификат");
	Иначе
		СтрокаСубъект = Новый ФорматированнаяСтрока(Субьект);
	КонецЕсли;
	Если Сообщение.ПодписьВерна Тогда
		СтрокаПодписьВерна = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'Подпись верна (Дата проверки: %1).'"), Формат(Сообщение.ДатаПроверкиПодписи, НСтр("ru = 'ДФ=dd.MM.yyyy'"))));
	Иначе
		Если ЗначениеЗаполнено(Сообщение.ДатаПроверкиПодписи) Тогда
			СтрокаПодписьВерна = Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = 'Подпись не верна (Дата проверки: %1).'"), Формат(Сообщение.ДатаПроверкиПодписи, НСтр("ru = 'ДФ=dd.MM.yyyy'"))),,
				СтруктураЦветаСтиля.ЦветТекстаТребуетВниманияГИСМ);
		Иначе
			СтрокаПодписьВерна = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Проверка подписи не выполнялась.'"),,
				СтруктураЦветаСтиля.ЦветТекстаТребуетВниманияГИСМ);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПроверить = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверить'"),,СтруктураЦветаСтиля.ЦветГиперссылкиГИСМ,,"ПроверитьПодпись");
	
	МассивСтрок = Новый Массив;
	Если ПолученСубьект Тогда
		МассивСтрок.Добавить(СтрокаПодписано);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		МассивСтрок.Добавить(СтрокаСубъект);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока("."));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	КонецЕсли;
	МассивСтрок.Добавить(СтрокаПодписьВерна);
	Если ВыводитьГиперссылки Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		МассивСтрок.Добавить(СтрокаПроверить);
	КонецЕсли;
	
	Подпись = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Возврат Подпись;
	
КонецФункции

// Формирует структуру свойств для уточнения данных конверта SOAP и
// алгоритмов подписания и хеширования.
// 
// Возвращаемое значение:
// Структура - со свойствами:
//   * XPathSignedInfo         - Строка - "(//. | //@* | //namespace::*)[ancestor-or-self::*[local-name()='SignedInfo']]".
//   * XPathПодписываемыйТег   - Строка - "(//. | //@* | //namespace::*)[ancestor-or-self::soap:Body]".
//   * ИмяАлгоритмаПодписи     - Строка - "GOST R 34.10-2001".
//   * OIDАлгоритмаПодписи     - Строка - "1.2.643.2.2.3" - ГОСТ R 34.11/34.10-2001.
//   * ИмяАлгоритмаХеширования - Строка - "GOST R 34.11-94".
//   * OIDАлгоритмаХеширования - Строка - "1.2.643.2.2.9" - ГОСТ R 34.11-94.
//
Функция ПараметрыXMLDSig() Экспорт
	
	ПараметрыXMLDSig = ЭлектроннаяПодписьКлиентСервер.ПараметрыXMLDSig();
	
	ПараметрыXMLDSig.XPathSignedInfo       = "(//. | //@* | //namespace::*)[ancestor-or-self::*[local-name()='SignedInfo']]";
	ПараметрыXMLDSig.XPathПодписываемыйТег = "(//. | //@* | //namespace::*)[ancestor-or-self::soap:Body]";
	
	ПараметрыXMLDSig.ИмяАлгоритмаПодписи = "GOST R 34.10-2001";
	ПараметрыXMLDSig.OIDАлгоритмаПодписи = "1.2.643.2.2.3"; // ГОСТ R 34.11/34.10-2001
	
	ПараметрыXMLDSig.ИмяАлгоритмаХеширования = "GOST R 34.11-94";
	ПараметрыXMLDSig.OIDАлгоритмаХеширования = "1.2.643.2.2.9"; // ГОСТ R 34.11-94
	
	Возврат ПараметрыXMLDSig;
	
КонецФункции

// Формирует пустую структуру сообщения XML
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие - Описание ошибок.
//   * Описание                    - Строка - Описание для отображения в форме подписания.
//   * ТекстСообщенияXML           - Строка - Текст сообщения XML.
//   * КонвертSOAP                 - Строка - Текст сообщения SOAP.
//   * ТипСообщения                - ПеречислениеСсылка.ТипыСообщенийГИСМ - Тип сообщения.
//   * Организация                 - ОпределяемыйТип.Организации - Организация.
//   * Документ                    - ДокументСсылка - Документ.
//   * Версия                      - Строка - Версия сообщения.
//   * GLN                         - Строка - Регистрационный номер GLN.
//   * СообщениеОснование          - СправочникСсылка.ГИСМПрисоединенныеФайлы - сообщение основание.
//   * ДанныеДляПолученияДокумента - Структура - Данные для получения документа.
//   * Основание                   - ДокументСсылка - Документ основание.
//
Функция СтруктураСообщенияXML() Экспорт
	
	СообщениеXML = Новый Структура;
	
	СообщениеXML.Вставить("ТекстОшибки", "");
	СообщениеXML.Вставить("Ошибки", Новый Соответствие);
	
	// Для отображения в форме подписания
	СообщениеXML.Вставить("Описание", "");
	
	// Для использования в механизмах электронной подписи
	СообщениеXML.Вставить("ТекстСообщенияXML");
	СообщениеXML.Вставить("КонвертSOAP");
	
	// Для сохранения в Протокол обмена
	СообщениеXML.Вставить("ТипСообщения");
	СообщениеXML.Вставить("Организация");
	СообщениеXML.Вставить("Операция");
	СообщениеXML.Вставить("Документ");
	СообщениеXML.Вставить("Версия", 0);
	
	// Используется при запросах входящих документов
	СообщениеXML.Вставить("GLN");
	
	// Используется при запросах квитанций
	СообщениеXML.Вставить("СообщениеОснование");
	
	// Используется при получении документов
	СообщениеXML.Вставить("ДанныеДляПолученияДокумента");
	
	// Для обновления в формах
	СообщениеXML.Вставить("Основание");
	
	Возврат СообщениеXML;
	
КонецФункции

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если Сообщение.ТекстОшибки = "" Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  GLN  - Число - GLN Организации.
//  Организация  - СправочникСсылка.Организация - Организация.
//
Процедура ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, GLN, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(GLN) Тогда
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Не заполнен GLN организации %1.'"), Организация));
	Иначе
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Указан не корректный GLN организации %1.'"), Организация));
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  GLN  - Число - GLN Организации.
//  Организация  - СправочникСсылка.Организация - Организация.
//
Процедура ДобавитьТекстОшибкиУказанНеКорректныйКППОрганизации(СообщениеXML, КПП, Организация) Экспорт
	
	ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Указан не корректный КПП организации %1.'"), Организация));
	
КонецПроцедуры

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  GLN  - Число - GLN Организации.
//  Организация  - СправочникСсылка.Организация - Организация.
//
Процедура ДобавитьТекстОшибкиНеЗаполненоПолноеНаименованиеКонтрагента(СообщениеXML, Контрагент) Экспорт
	
	ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Не заполнено полное наименование контрагента %1.'"), Контрагент));
	
КонецПроцедуры

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  GLN  - Число - GLN Организации.
//  Организация  - СправочникСсылка.Организация - Организация.
//
Процедура ДобавитьТекстОшибкиНеЗаполненGLNПартнера(СообщениеXML, GLN, Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(GLN) Тогда
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Не заполнен GLN партнера %1.'"), Партнер));
	Иначе
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Указан не корректный GLN партнера %1.'"), Партнер));
	КонецЕсли;
	
КонецПроцедуры

// Разбирает переданный массив штриховых кодов и формирует структуру массивов.
// Один массив содеждит штриховые коды, являющиеся номерами КиЗ, другой прочие штриховые коды.
//
// Параметры:
//  Штрихкоды - Массив - штриховые коды
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КиЗ     - Массив - номера КиЗ.
//   * БезТипа - Массив - прочие штриховые коды.
//
Функция РазложитьПоТипамШтрихкодов(Штрихкоды) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("БезТипа", Новый Массив);
	Результат.Вставить("КиЗ", Новый Массив);
	
	Для Каждого СтрМас из Штрихкоды Цикл
		
		Если ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(СтрМас.Штрихкод) Тогда
			Результат.КиЗ.Добавить(СтрМас);
		Иначе
			Результат.БезТипа.Добавить(СтрМас);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Если Не ВебКлиент Тогда

// Отправляет текст запроса для обработки в ГИСМ
//
// Параметры:
//   ТелоЗапроса - строка - строка отправляемого запроса
//   Порт - число -порт, на который отправляется запрос
//   АдресРесурса - строка - Строка http-ресурса, на который будет отправлен запрос.
//   SOAPAction - строка
//
// Возвращаемое значение:
// Структура;
//   КодСостояния
//   Заголовки
//   ТекстОтвета
//   ТекстОшибки
//
Функция ОтправитьДляОбработки(ТелоЗапроса, Порт, АдресРесурса, SOAPAction)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КодСостояния");
	ВозвращаемоеЗначение.Вставить("Заголовки");
	ВозвращаемоеЗначение.Вставить("ТекстОтвета");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("SOAPAction", SOAPAction);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	ТекстОшибки = "";
	Попытка
		
		АдресСервера = АдресСервераГИСМ();
		
		Соединение = Новый HTTPСоединение(АдресСервера, Порт,,, ИнтернетПрокси, 60);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		HTTPОтвет = Неопределено;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		#Если НЕ ТонкийКлиент Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ГИСМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Ошибка отправки POST-запроса к серверу ГИСМ 195.149.110.235'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
	КонецПопытки;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
	Если HTTPОтвет <> Неопределено Тогда
		ВозвращаемоеЗначение.КодСостояния = HTTPОтвет.КодСостояния;
		ВозвращаемоеЗначение.Заголовки    = HTTPОтвет.Заголовки;
		ВозвращаемоеЗначение.ТекстОтвета  = HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецЕсли

// Проверяет наличие у произвольного объекта реквизита с указанным именем.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Форматирует строку в формате base64, удаляя символы перевода строки и возврата каретки.
//
// Параметры:
//  СтрокаBase64 - Строка - строка, которая подлежит преобразования.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция ОтформатироватьСтрокуBase64(СтрокаBase64) Экспорт
	
	Значение = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	Значение = СтрЗаменить(Значение, Символы.ПС, "");
	
	Возврат Значение;
	
КонецФункции

// Находит в XML содержимое находящееся в теге.
//
// Параметры:
//  Текст                             - Строка - текст XML, в котором выполняется поиск.
//  ИмяТега                           - Строка - тег, содержимое которого необходимо найти.
//  ВключатьОткрывающийЗакрывающийТег - Булево - признак необходимости найденного тегом, по которому выполнялся поиск, по умолчанию Ложь.
//  НомерПоПорядку                    - Число  - позиция, с которой начинается поиск, по умолчанию 1.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция НайтиВXML(Текст, ИмяТега, ВключатьОткрывающийЗакрывающийТег = Ложь, НомерПоПорядку = 1) Экспорт
	
	Результат = Неопределено;
	
	Начало    = "<"  + ИмяТега;
	Окончание = "</" + ИмяТега + ">";
	
	Содержимое = Сред(
		Текст,
		СтрНайти(Текст, Начало, НаправлениеПоиска.СНачала, 1, НомерПоПорядку),
		СтрНайти(Текст, Окончание, НаправлениеПоиска.СНачала, 1, НомерПоПорядку) + СтрДлина(Окончание) - СтрНайти(Текст, Начало, НаправлениеПоиска.СНачала, 1, НомерПоПорядку));
		
	Если ВключатьОткрывающийЗакрывающийТег Тогда
		
		Результат = СокрЛП(Содержимое);
		
	Иначе
		
		ОткрывающийТег = Лев(Содержимое, СтрНайти(Содержимое, ">"));
		Содержимое = СтрЗаменить(Содержимое, ОткрывающийТег, "");
		
		ЗакрывающийТег = Прав(Содержимое, СтрДлина(Содержимое) - СтрНайти(Содержимое, "<", НаправлениеПоиска.СКонца) + 1);
		Содержимое = СтрЗаменить(Содержимое, ЗакрывающийТег, "");
		
		Результат = СокрЛП(Содержимое);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Инициализирует структуру результата исходящего сообщения после получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщеие отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLПолучен(ТекстВходящегоСообщенияXML) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  Истина);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Истина);
	
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                "");
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияXML", ТекстВходящегоСообщенияXML);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата исходящего сообщения после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщеие отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLНеПолучен(Ошибка, ТекстСообщенияXMLОтправлен) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  ТекстСообщенияXMLОтправлен);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Ложь);
	
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                Строка(Ошибка));
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияXML", "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет номер КиЗ на валидность
//
// Параметры:
//  Значение - Строка - Проверяемый номер КиЗ
// 
// Возвращаемое значение:
//   Булево - значение является номером КиЗ
//
Функция ЭтоНомерКиЗ(Значение) Экспорт
	
	Если СтрДлина(Значение) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сред(Значение, 3, 1) <> "-" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сред(Значение, 10, 1) <> "-" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получает данные контрагента по данным XML
//
// Параметры:
//  ДанныеДокумента    - Структура - должна содержать свойство sender_gln, содержащее GLN отправителя.
//  ДанныеОтправителя  - ДанныеОтправителя - структура содержащая данные отправителя
// 
// Возвращаемое значение:
//  Структура:
//   ИНН  - Строка - ИНН контрагента полученный от сервиса ГИСМ, по данным GLN отправителя.
//   КПП  - Строка - КПП контрагента полученный от сервиса ГИСМ, по данным GLN отправителя.
//
Функция ДанныеКонтрагентаПоДаннымXML(ДанныеДокумента, ДанныеОтправителя) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("АдресЭлектроннойПочты", ДанныеОтправителя.email);
	Данные.Вставить("Наименование", ДанныеОтправителя.organisation_name);
	Данные.Вставить("ИНН", "");
	Данные.Вставить("КПП", "");
	Данные.Вставить("GLN", ДанныеДокумента.sender_gln);
	
	Если ЗначениеЗаполнено(ДанныеОтправителя.ul) Тогда
		Данные.ИНН = ДанныеОтправителя.ul.inn;
		Данные.КПП = ДанныеОтправителя.ul.kpp;
	ИначеЕсли ЗначениеЗаполнено(ДанныеОтправителя.fl) Тогда
		Данные.ИНН = ДанныеОтправителя.fl.inn;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора
//
// Параметры:
//  Список - динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяКолонки, Значение) Тогда
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора и переданных настроек
//
// Параметры:
//  Список - динамический список, для которого треюуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Настройки - настройки, из которых могут получаться значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Настройки, Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяКолонки);
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяКолонки) Тогда
			Значение = Настройки.Получить(ИмяКолонки);
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяКолонки);
	
КонецПроцедуры

// Проверяет передан ли в форму списка документов отбор по дальнейшему действию ГИСМ
//
// Параметры:
// ДальнейшееДействиеГИСМ - Строка, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюГИСМ - поле отбора
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
//
// Возвращаемое значение:
// Булево
// Истина, если необходимо установить отбор по состоянию, иначе Ложь
//
Функция НеобходимОтборПоДальнейшемуДействиюГИСМПриСозданииНаСервере(ДальнейшееДействиеГИСМ, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействиеГИСМ", ДальнейшееДействиеГИСМ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, нужно ли устанавливать отбор по дальнейшему действию ГИСМ, загруженный из настроек или переданный в форму извне
//
// Отбор из настроек устанавливается только если отбор не передан в форму извне
//
// Параметры:
// ДальнейшееДействиеГИСМ -  Строка, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюГИСМ - поле отбора по дальнейшему действию ГИСМ
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
// Настройки - Соответствие - настройки формы
//
Функция НеобходимОтборПоДальнейшемуДействиюГИСМПередЗагрузкойИзНастроек(ДальнейшееДействиеГИСМ, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	НеобходимОтбор = Ложь;
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		ДальнейшееДействиеГИСМ = Настройки.Получить("ДальнейшееДействиеГИСМ");
		НеобходимОтбор = Истина;
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействиеГИСМ") Тогда
			ДальнейшееДействиеГИСМ = Настройки.Получить("ДальнейшееДействиеГИСМ");
			НеобходимОтбор = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("ДальнейшееДействиеГИСМ");

	Возврат НеобходимОтбор;
	
КонецФункции

#КонецОбласти