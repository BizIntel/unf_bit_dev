
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= Истина;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	БазаТоваров  = Неопределено;
	ФайлОтчета   = Неопределено;
	ФлагВыгрузки = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);
	Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
	Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);

	Если БазаТоваров  = Неопределено
	 Или ФайлОтчета   = Неопределено
	 Или ФлагВыгрузки = Неопределено  Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.'"));
		Результат = Ложь;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Процедура начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Неопределено;
	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	Возврат Результат;

КонецФункции

// Процедура начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в ККМ Offline.
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка	= ВходныеПараметры[1];
		РасширеннаяВыгрузка	= ВходныеПараметры[2];
		Результат = ВыгрузитьТовары(Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка);

	// Загрузка данных по продажам (отчета) из ККМ Offline.
	ИначеЕсли Команда = "ЗагрузитьОтчет" Тогда
		Результат = ЗагрузитьОтчет(Параметры, ВыходныеПараметры);
	
	// Определяет результат загрузки отчета.
	ИначеЕсли Команда = "ОтчетЗагружен" Тогда
		Результат = ОтчетЗагружен(Параметры, ВыходныеПараметры);
	
	// Очистить базу ККМ Offline
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры);
		
	// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
	ИначеЕсли Команда = "РасширеннаяВыгрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойВыгрузки();
		
	// Проверка возможности расширенной выгрузки отчета о продажах.
	ИначеЕсли Команда = "РасширеннаяЗагрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойЗагрузки();
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(Параметры, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	// Выгрузка товаров в ККМ Offline.
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка	= ВходныеПараметры[1];
		РасширеннаяВыгрузка	= ВходныеПараметры[2];
		НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка);
		
	// Загрузка данных по продажам (отчета) из ККМ Offline.
	ИначеЕсли Команда = "ЗагрузитьОтчет" Тогда
		НачатьЗагрузкуОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	// Определяет результат загрузки отчета.
	ИначеЕсли Команда = "ОтчетЗагружен" Тогда
		НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Очистить базу ККМ Offline.
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Очистить настройки ККМ Offline.
	ИначеЕсли Команда = "ОчиститьНастройки" Тогда
		НачатьОчисткуНастроекНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
	ИначеЕсли Команда = "РасширеннаяВыгрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойВыгрузки();
		
	// Проверка возможности расширенной выгрузки отчета о продажах.
	ИначеЕсли Команда = "РасширеннаяЗагрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойЗагрузки();
		
	// Загрузка расширенного отчете по продажам из ККМ Offline.
	ИначеЕсли Команда = "ЗагрузитьРасширенныйОтчет" Тогда
		НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Выгрузка настроек в ККМ Offline
	ИначеЕсли Команда = "ВыгрузитьНастройки" ИЛИ Команда = "UploadSettings" Тогда
	    СтруктураНастроек = ВходныеПараметры;
		НачатьВыгрузкуНастроек(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, СтруктураНастроек);
		
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронныеПроцедурыИФункции

// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
// Параметры:
//  ОбъектДрайвера                 - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Товары                         - <ТаблицаЗначений>
//                                 - Таблица товаров, подлежащих загрузке в ККМ.
//                                   Таблица имеет следующие колонки:
//                                     Код                        - <Число>
//                                                                - Идентификатор товара на кассе.
//                                     Штрихкод                  - <Число>, <Строка>
//                                                                - Код весового товара (для весовых товаров),
//                                                                  или штрихкод (для штучного товара).
//                                     Наименование               - <Строка>
//                                                                - Сокращенное наименование товара (для печати в чеке).
//                                     НаименованиеПолное         - <Строка>
//                                                                - Полное наименование товара (для отображения на
//                                                                мониторе).
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения номенклатуры.
//                                     Цена                       - <Число>
//                                                                - Цена номенклатуры.
//                                     Остаток                    - <Число>
//                                                                - Остаток товара на складе кассы.
//                                     ВесовойТовар               - <Булево>
//                                                                - Товар является весовым.
//
//  ЧастичнаяВыгрузка               - <Булево>
//                                  - Признак частичной выгрузки товара.
//
Функция ВыгрузитьТовары(Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка) 
	
	ФорматОбмена = ?(Параметры.Свойство("ФорматОбмена"), 0, Параметры.ФорматОбмена);
	// При частичной выгрузке нельзя делать новую выгрузку пока не произошла загрузка предыдущей.
	Если ЧастичнаяВыгрузка И НЕ МожноВыгружатьТовары(Параметры) Тогда
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'");
		ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	Разделитель = ПолучитьРазделитель();
	Файл = Новый ТекстовыйДокумент();
	
	Результат = СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, Разделитель, Товары, ФорматОбмена, ВыходныеПараметры);
	
	Если Результат Тогда
		
		Попытка
			
			Файл.Записать(Параметры.БазаТоваров, "windows-1251");
			
			Если Не ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
				Файл.Очистить();
				Файл.Записать(Параметры.ФлагВыгрузки, "windows-1251");
			КонецЕсли;
			
		Исключение
			
			ВыходныеПараметры.Добавить(999);
			ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.БазаТоваров));
			Результат = Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку отчета о продажах из ККМ, подключаемой в режиме Offline.
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Отчет                          - <ТаблицаЗначений>
//                                 - Выходной параметр; таблица, содержащая данные
//                                   о продажах за смену. Таблица содержит
//                                   следующие колонки:
//                                     Код        - <Число>
//                                                - Идентификатор проданного (возвращенного)
//                                                  товара.
//                                     Цена       - <Число>
//                                                - Цена за единицу товара.
//                                     Количество - <Число>
//                                                - Количество проданного (>0) или
//                                                  возвращенного (<0) товара.
//                                     Скидка     - <Число>
//                                                - Процент предоставленной скидки.
//                                     Сумма      - <Число>
//                                                - Сумма позиции: >0 - продажа, <0 - возврат.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗагрузитьОтчет(Параметры, ВыходныеПараметры) 
	
	Результат   = Истина;
	Файл = Новый ТекстовыйДокумент();
	
	Попытка
		Файл.Прочитать(Параметры.ФайлОтчета, "windows-1251");
	Исключение
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Не удалось прочитать файл отчета по адресу: %Адрес%'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.ФайлОтчета));
		Результат = Ложь;
	КонецПопытки;
	
	Если Результат Тогда
		Результат = РазобратьОтчет(Файл, ВыходныеПараметры);
	КонецЕсли;	

	Возврат Результат;

КонецФункции

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОтчетЗагружен(Параметры, ВыходныеПараметры) 
	
	Результат = Истина;
	
	Попытка
		
		Документ = Новый ТекстовыйДокумент();
		Документ.Прочитать(Параметры.ФайлОтчета, "windows-1251");
		Индекс  = 1;
		
		Пока Истина Цикл
			
			Строка = Документ.ПолучитьСтроку(Индекс);
			
			Если ПустаяСтрока(Строка) Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка = "#" Тогда
				Документ.ЗаменитьСтроку(Индекс, "@");
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Документ.Записать(Параметры.ФайлОтчета, "windows-1251");
		
	Исключение
		
		ТекстСообщения = НСтр("ru='При пометке отчета %1 произошла ошибка. Обработка отчета не зафиксирована!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Параметры.ФайлОтчета);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

// Функция осуществляет очистку товаров на ККМ, подключаемой в режиме Offline.
//
Функция ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры) 

	Результат = Истина;

	Если Параметры.Свойство("ФорматОбмена") Тогда
		ФорматОбмена = Параметры.ФорматОбмена;
	Иначе
		ФорматОбмена = 0;
	КонецЕсли;
	
	Файл = Новый ТекстовыйДокумент();
	
	ПерваяСтрока = "##@@&&";
	Файл.ДобавитьСтроку(ПерваяСтрока + "$$$CLR {COM_GR_TOV}");
	Файл.ДобавитьСтроку("#");
	
	Попытка
		Файл.Записать(Параметры.БазаТоваров, "windows-1251");
		Если Не ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, "windows-1251");
		КонецЕсли;
	Исключение
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
//
Функция ПроверитьВозможностьРасширеннойВыгрузки()
	
	Возврат Истина;
	
КонецФункции

// Проверка возможности расширенной выгрузки отчета о продажах.
//
Функция ПроверитьВозможностьРасширеннойЗагрузки()
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет проверку путей по которым хранятся файлы обмена.
//
Функция ТестУстройства(Параметры, ВыходныеПараметры) 
	
	Результат = Истина;
	ТекстОшибки = "";
	ТекстОшибкиОбщий = "";
	ВремПараметр = "";
	
	Параметры.Свойство("БазаТоваров", ВремПараметр);
	
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = НСтр("ru='Файл базы товаров не указан.'");
	КонецЕсли;
	
	Параметры.Свойство("ФайлОтчета", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Файл отчета не указан.'") 
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибкиОбщий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхронныеПроцедурыИФункции

#Область ВыгрузкаТоваров

// Процедура осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", Параметры.БазаТоваров);
	ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
	ДополнительныеПараметры.Вставить("Товары", Товары);
	ДополнительныеПараметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);	
	ДополнительныеПараметры.Вставить("ЧастичнаяВыгрузка", ЧастичнаяВыгрузка);
	ДополнительныеПараметры.Вставить("ФорматОбмена", ?(Параметры.Свойство("ФорматОбмена"), Параметры.ФорматОбмена, 0));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЧастичнаяВыгрузка Тогда
		НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, Параметры.БазаТоваров); // Проверяем обработанность файла.
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Продолжаем выгрузку.
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, ИмяФайла) 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещенияПриЗавершении = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат Тогда
		
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("ПроверкаОбработанностиФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеЗавершенияПолученияСодержания, КодировкаТекста.ANSI);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, Истина); // Файла не существует.
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОбработанностиФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат.Успешно Тогда
		
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Строка = Файл.ПолучитьСтроку(2);
		
		Если СтрДлина(Строка) = 1 И Найти(Строка,"#") > 0 Тогда
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'"));
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Нельзя если символ во второй строке "#".		
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Можно если символ во второй строке не "#" (если загрузка произошла, там стоит "@").
		КонецЕсли;
		
	Иначе
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Файл не прочитан, следовательно гарантировать обработанность файла нельзя.
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		Разделитель = ПолучитьРазделитель();
		ЧастичнаяВыгрузка = ДополнительныеПараметры.ЧастичнаяВыгрузка;
		РасширеннаяВыгрузка = ДополнительныеПараметры.РасширеннаяВыгрузка;
		Товары = ДополнительныеПараметры.Товары;
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
		ФорматОбмена = ДополнительныеПараметры.ФорматОбмена;

		Файл = Новый ТекстовыйДокумент();
		
		Результат = СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, Разделитель, Товары, ФорматОбмена, ВыходныеПараметры);
		
		Если Результат Тогда
			
			Попытка
				
				Файл.Записать(ИмяФайла, "windows-1251");
				
				Если Не ПустаяСтрока(ИмяФайлаФлага) Тогда
					Файл.Очистить();
					Файл.Записать(ИмяФайлаФлага, "windows-1251");
				КонецЕсли;
				
			Исключение
				
				ВыходныеПараметры.Добавить(999);
				ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
				ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
				Результат = Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНастроек

// Функция осуществляет выгрузку настроек в ККМ, подключаемой в режиме Offline.
//
Процедура НачатьВыгрузкуНастроек(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, Знач СтруктураНастроек)
	
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ФорматОбмена = Параметры.ФорматОбмена;
	Иначе
		ФорматОбмена = 0;
	КонецЕсли;
	
	Если ФорматОбмена > 0 Тогда
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ИмяФайла = Параметры.БазаТоваров;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
		ДополнительныеПараметры.Вставить("СтруктураНастроек", СтруктураНастроек);
		
		Файл = Новый Файл(ИмяФайла);
		
		ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриВыгрузкеНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриВыгрузкеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ФайлСуществует", Результат);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Результат Тогда
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ДополнительныеПараметры.ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ФайлСуществует = ДополнительныеПараметры.ФайлСуществует;
	СтруктураНастроек = ДополнительныеПараметры.СтруктураНастроек;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
	ТекстОшибки = "";

	Если ФайлСуществует И НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		
		Если ФайлСуществует Тогда
			
			ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
			
			ОчищатьДокумент = Истина;
			
			Если ТД.КоличествоСтрок()>=2 И ТД.ПолучитьСтроку(2)="#" Тогда
				ОчищатьДокумент = Ложь;
			КонецЕсли;
			
			Если ОчищатьДокумент Тогда
				ТД.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = СформироватьФайлНастроек(СтруктураНастроек, ТД, ТекстОшибки);
		
	КонецЕсли;
	
	Если Результат Тогда
		
		Попытка
			
			Имя = ИмяФайла;
			ТД.Записать(Имя, "windows-1251");
			
			Имя = ИмяФайлаФлага;
			Если Не ПустаяСтрока(Имя) Тогда
				ТД.Очистить();
				ТД.Записать(Имя, "windows-1251");
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", Имя);
			Результат = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОтчета

Процедура НачатьЗагрузкуОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриЗагрузкеОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриЗагрузкеОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует!'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если НЕ Результат.Успешно Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		Результат = Ложь;
	Иначе
		
		Файл = Новый ТекстовыйДокумент();
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Результат = РазобратьОтчет(Файл, ВыходныеПараметры);
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРасширенногоОтчета

Процедура НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует!'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если НЕ Результат.Успешно Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		Результат = Ложь;
	Иначе
		
		Файл = Новый ТекстовыйДокумент();
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Результат = РазобратьРасширенныйОтчет(Файл, ВыходныеПараметры);
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ПометкаОтчета

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
//
Процедура НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтчетЗагруженЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует!'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтчетЗагруженЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ТекстОшибки = "";

	Если НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Результат = Истина;
		
		ТД.ЗаменитьСтроку(1, "@");
		
		Попытка
			ТД.Записать(ИмяФайла, "windows-1251");
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", ИмяФайла);
			Результат = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТоваров

// Процедура осуществляет очистку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Результат = ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаНастроек

// Функция осуществляет выгрузку настроек в ККМ, подключаемой в режиме Offline.
//
Процедура НачатьОчисткуНастроекНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ФорматОбмена = Параметры.ФорматОбмена;
	Иначе
		ФорматОбмена = 0;
	КонецЕсли;
	
	Если ФорматОбмена>0 Тогда
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ИмяФайла = Параметры.БазаТоваров;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
		
		Файл = Новый Файл(ИмяФайла);
		
		ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриОчисткеНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриОчисткеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ФайлСуществует", Результат);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчисткаНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Результат Тогда
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ДополнительныеПараметры.ИмяФайла, ОписаниеОповещения, КодировкаТекста.ANSI);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ФайлСуществует = ДополнительныеПараметры.ФайлСуществует;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
	ТекстОшибки = "";

	Если ФайлСуществует И НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		
		Если ФайлСуществует Тогда
			
			ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
			
			ОчищатьДокумент = Истина;
			
			Если ТД.КоличествоСтрок()>=2 И ТД.ПолучитьСтроку(2)="#" Тогда
				ОчищатьДокумент = Ложь;
			КонецЕсли;
			
			Если ОчищатьДокумент Тогда
				ТД.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = ДополнитьФайлОчисткойНастроек(ТД, ТекстОшибки);
		
	КонецЕсли;
	
	Если Результат Тогда
		
		Попытка
			
			Имя = ИмяФайла;
			ТД.Записать(Имя, "windows-1251");
			
			Имя = ИмяФайлаФлага;
			Если Не ПустаяСтрока(Имя) Тогда
				ТД.Очистить();
				ТД.Записать(Имя, "windows-1251");
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", Имя);
			Результат = Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ТестУстройства

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Результат = ТестУстройства(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьТранзакцию(Строка, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	Попытка
		
		ПолеОшибки = Нстр("ru='Номер транзакции (1)'");
		
		// Номер транзакции.
		Транзакция.Вставить("Номер", Число(СтрПолучитьСтроку(Строка, 1)));
		
		ПолеОшибки = Нстр("ru='Дата и время транзакции (2,3)'");
		
		ДатаТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 2), ".", Символы.ПС);
		ВремяТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 3), ":", Символы.ПС);
		
		// Дата и время транзакции.
		Транзакция.Вставить("ДатаИВремя", Дата(Число(СтрПолучитьСтроку(ДатаТранзакции, 3)), Число(СтрПолучитьСтроку(ДатаТранзакции, 2)), Число(СтрПолучитьСтроку(ДатаТранзакции, 1)), Число(СтрПолучитьСтроку(ВремяТранзакции, 1)), Число(СтрПолучитьСтроку(ВремяТранзакции, 2)), Число(СтрПолучитьСтроку(ВремяТранзакции, 3))));
		
		ПолеОшибки = Нстр("ru='Тип транзакции (4)'");
		
		// Тип транзакции.
		Транзакция.Вставить("Тип", Число(СтрПолучитьСтроку(Строка, 4)));
		
		ПолеОшибки = Нстр("ru='Номер чека (6)'");
		
		// Номер чека транзакции.
		Транзакция.Вставить("НомерЧека", Число(СтрПолучитьСтроку(Строка, 6)));
		
		ПолеОшибки = Нстр("ru='Поле №8 (8)'");
		
		// Поле №8.
		Транзакция.Вставить("Поле8", СтрПолучитьСтроку(Строка, 8));
		
		ПолеОшибки = Нстр("ru='Поле №9 (9)'");
		
		// Поле №9.
		Транзакция.Вставить("Поле9", Число(СтрПолучитьСтроку(Строка, 9)));
		
		ПолеОшибки = Нстр("ru='Поле №10 (10)'");
		
		// Поле №10.
		Транзакция.Вставить("Поле10", Число(СтрПолучитьСтроку(Строка, 10)));
		
		ПолеОшибки = Нстр("ru='Поле №11 (11)'");
		
		// Поле №11.
		Транзакция.Вставить("Поле11", Число(СтрПолучитьСтроку(Строка, 11)));
		
		ПолеОшибки = Нстр("ru='Поле №12 (12)'");
		
		// Поле №12.
		Транзакция.Вставить("Поле12", Число(СтрПолучитьСтроку(Строка, 12)));
		
	Исключение
		
		// Если в процессе разбора транзакции произошла ошибка.
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно распознать поле: %1%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", ПолеОшибки);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЧек(Смена, НомерЧека)
	
	НайденныеЧеки = НайтиСтроки(Смена.Чеки, Новый Структура("НомерЧека", НомерЧека));
	
	Если НайденныеЧеки.Количество()>0 Тогда
		Возврат Смена.Чеки[НайденныеЧеки[0].ИндексВМассиве];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьСмену(Смена, Смены, Транзакция)
	
	// Если предыдущая смена не закрыта, закрываем ее.
	Если Смена<>Неопределено И НЕ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ЗакрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Смена = Новый Структура;
	
	Смена.Вставить("Номер");
	Смена.Вставить("ДатаОткрытия", Транзакция.ДатаИВремя);
	Смена.Вставить("ДатаЗакрытия");
	Смена.Вставить("Чеки", Новый Массив);
	
КонецПроцедуры

Процедура ЗакрытьСмену(Смена, Смены, Транзакция)
	
	// Если смена не открыта/закрыта, открываем ее.
	Если Смена=Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Смена.Номер = Транзакция.Поле8;
	Смена.ДатаЗакрытия = Транзакция.ДатаИВремя;
	Смены.Добавить(Смена);
	
КонецПроцедуры

Процедура ОткрытьЧек(Смена, Смены, Транзакция)
	
	// Проверяем инициализированность текущей смены.
	Если Смена = Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Чек = Новый Структура;
	
	Чек.Вставить("Закрыт", Ложь);
	Чек.Вставить("НомерЧека", Транзакция.НомерЧека);
	Чек.Вставить("Товары", Новый Массив);
	Чек.Вставить("Оплаты", Новый Массив);
	
	Смена.Чеки.Добавить(Чек);
	
КонецПроцедуры

Процедура ДобавитьТранзакциюВЧек(Смена, Смены, Транзакция, Оплата = Ложь)
	
	Если Смена = Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		
		ОткрытьЧек(Смена, Смены, Транзакция);
		ТекущийЧек = Смена.Чеки[Смена.Чеки.Количество()-1];
		
	КонецЕсли;
	
	Если Оплата Тогда
		
		ОплатыЧека = ТекущийЧек.Оплаты;
		
		НайденныеОплаты = НайтиСтроки(ОплатыЧека, Новый Структура("КодВидаОплаты", Транзакция.Поле11));
		
		Если НайденныеОплаты.Количество() > 0 Тогда
			
			Оплата = ОплатыЧека[НайденныеОплаты[0].ИндексВМассиве];
			Оплата.Сумма = Оплата.Сумма + Транзакция.Поле12 - Транзакция.Поле10;	// Сумма оплаты = Сумма оплаты + Сумма оплаты транзакции - Сумма сдачи транзакции.
			
		Иначе
			
			НоваяОплата = Новый Структура;
			
			НоваяОплата.Вставить("ТипОплаты", ?(Транзакция.Поле11 = 1, "0", "1")); // 1 - предопределенный тип оплаты "наличные".
			НоваяОплата.Вставить("КодВидаОплаты", Транзакция.Поле11);
			НоваяОплата.Вставить("Сумма", Транзакция.Поле12 - Транзакция.Поле10);
			
			ОплатыЧека.Добавить(НоваяОплата);
			
		КонецЕсли;
		
	Иначе
		
		НовыйТовар = Новый Структура;
		
		НовыйТовар.Вставить("Код", Транзакция.Поле8);
		НовыйТовар.Вставить("Количество", Транзакция.Поле11);
		НовыйТовар.Вставить("Цена", Транзакция.Поле10);
		НовыйТовар.Вставить("Сумма", Транзакция.Поле12);
		НовыйТовар.Вставить("НомерТранзакции", Транзакция.Номер);
		НовыйТовар.Вставить("ДатаИВремяТранзакции", Транзакция.ДатаИВремя);
		НовыйТовар.Вставить("ШтрихкодАлкогольнойПродукции", "");
		
		ТекущийЧек.Товары.Добавить(НовыйТовар);
		
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьТранзакциюИзЧека(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено ИЛИ ТекущийЧек.Товары.Количество()=0 Тогда
		Результат = Ложь;
	Иначе
		
		СторнируемаяТранзакция = Неопределено;
		
		Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
			
			Если ТекТовар.Код = Транзакция.Поле8 И ТекТовар.Количество = -1*Транзакция.Поле11 И ТекТовар.Цена = Транзакция.Поле10 Тогда
				СторнируемаяТранзакция = ТекТовар;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СторнируемаяТранзакция<>Неопределено Тогда
			ТекущийЧек.Товары.Удалить(ТекущийЧек.Товары.Найти(СторнируемаяТранзакция));
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ Результат Тогда
			ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%!'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция ДобавитьСкидкуНаТовар(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено Тогда
		Результат = Ложь;
	Иначе
		
		НайденныеТовары = НайтиСтроки(ТекущийЧек.Товары, Новый Структура("Код", Транзакция.Поле8));
		
		Если НайденныеТовары.Количество()>0 Тогда
			
			Знак = ?(Транзакция.Тип = 15 ИЛИ Транзакция.Тип = 17, -1, 1);
			
			Товар = НайденныеТовары[НайденныеТовары.Количество()-1];
			
			Товар.Сумма = Товар.Сумма + Знак*Транзакция.Поле12;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%!'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьСкидкуНаЧек(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено Тогда
		Результат = Ложь;
	Иначе
		
		Знак = ?(Транзакция.Тип = 35 ИЛИ Транзакция.Тип = 37, -1, 1);
		
		Если Транзакция.Тип = 35 ИЛИ Транзакция.Тип = 36 Тогда
			// Абсолютная скидка/надбавка.
			
			СуммаСкидки = Транзакция.Поле12;
			
			СуммаТоваров = 0;
			// Определяем общую сумму по товарам.
			Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
				СуммаТоваров = СуммаТоваров + ТекТовар.Сумма;
			КонецЦикла;
			
			Если СуммаТоваров>0 Тогда
				
				Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
					ТекТовар.Сумма = ТекТовар.Сумма + Знак*СуммаСкидки*(ТекТовар.Сумма/СуммаТоваров);
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			// Относительная скидка/надбавка.
			
			Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
				ТекТовар.Сумма = ТекТовар.Сумма + Знак*ТекТовар.Сумма*Транзакция.Поле11;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%!'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьЧек(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек<>Неопределено Тогда
		Смена.Чеки.Удалить(Смена.Чеки.Найти(ТекущийЧек));
	Иначе
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%!'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗакрытьЧек(Смена, НомерЧека, ТекстОшибки)
	
	ТекущийЧек = ПолучитьЧек(Смена, НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(НомерЧека, "ЧГ=0"));
		Результат = Ложь;
	Иначе
		ТекущийЧек.Закрыт = Истина;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьШтрихкодМарки(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);	
	
	Если ТекущийЧек = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.НомерЧека, "ЧГ=0"));
		Результат = Ложь;
	Иначе
		
		Если ТекущийЧек.Товары.Количество()>0 Тогда
			ПоследнийТовар = ТекущийЧек.Товары[ТекущийЧек.Товары.Количество()-1];
			ПоследнийТовар.ШтрихкодАлкогольнойПродукции = Транзакция.Поле8;;
		Иначе
			ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.НомерЧека, "ЧГ=0"));
			Результат = Ложь;
		КонецЕсли;
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВозвратПоНомеруЧека(Смена, Смены, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	Если Смена=Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено Тогда
		ОткрытьЧек(Смена, Смены, Транзакция);
		ТекущийЧек = Смена.Чеки[Смена.Чеки.Количество()-1];
	КонецЕсли;
	
	НайденныйЧек = Неопределено;
	
	НайденныйЧек = ПолучитьЧек(Смена, Транзакция.Поле12);
	
	Если НайденныйЧек=Неопределено Тогда
		ТекущийЧек.ОтменаЧекаТекущейСмены = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьРасширенныйОтчет(ТекстовыйДокумент, ВыходныеПараметры)
	
	Результат = Истина;
	
	ПродолжатьЧтениеФайла = Ложь;
	ТекстОшибки = "";
	Строка = ТекстовыйДокумент.ПолучитьСтроку(1);
	
	// Проверяем обработанность файла.
	Если Строка = "#" Тогда
		Индекс = 4;
		ПродолжатьЧтениеФайла = Истина;
	ИначеЕсли Строка = "@" Тогда
		ТекстОшибки = НСтр("ru='Операция прервана! Отчет уже был загружен.'");
		Результат = Ложь;
	Иначе
		ТекстОшибки = НСтр("ru='Загрузка невозможна! Неизвестный формат отчета.'");
		Результат = Ложь;
	КонецЕсли;
	
	Смены = Новый Массив;
	ТекущаяСмена = Неопределено;
	ВозвращаемыеЧеки = Новый Массив;
	ОткрытТэг = Ложь;
	
	
	// В цикле читаем транзакции.
	Пока ПродолжатьЧтениеФайла Цикл
		
		// Получаем строку с очередной транзакцией.
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		
		Если Строка = "#" Тогда
			Индекс = Индекс + 3;
			Продолжить;
		КонецЕсли;
		
		// Все строки с тэгами и внутри тэгов пропускаются.
		Если Лев(Строка, 1) = "<" Тогда
			
			Если Лев(Строка, 2) = "</" Тогда
				ОткрытТэг = Ложь;
			Иначе
				ОткрытТэг = Истина;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		Если ОткрытТэг Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		// Если транзакция существует.
		Если ПустаяСтрока(Строка) Тогда
			ПродолжатьЧтениеФайла = Ложь;
		Иначе
			
			Транзакция = Новый Структура;
			
			// Раскладываем транзакцию на поля.
			Если ЗаполнитьТранзакцию(СтрЗаменить(Строка, ";", Символы.ПС), Транзакция, ТекстОшибки) Тогда
				
				Если Транзакция.Тип = 1 ИЛИ Транзакция.Тип = 11 Тогда
					// Продажа товара.
					ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция);
				ИначеЕсли Транзакция.Тип = 2 ИЛИ Транзакция.Тип = 12 Тогда
					// Сторно продажи/возврата товара.
					Если НЕ УдалитьТранзакциюИзЧека(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
				ИначеЕсли Транзакция.Тип = 3 ИЛИ Транзакция.Тип = 4 ИЛИ Транзакция.Тип = 13 ИЛИ Транзакция.Тип = 14 Тогда
					// Возврат товара.
					ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция);
				ИначеЕсли Транзакция.Тип = 40 Тогда
					// Оплата.
					ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция, Истина);
				ИначеЕсли Транзакция.Тип = 15 ИЛИ Транзакция.Тип = 16 ИЛИ Транзакция.Тип = 17 ИЛИ Транзакция.Тип = 18 Тогда
					// Скидка / надбавка на товар.
					Если НЕ ДобавитьСкидкуНаТовар(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
				ИначеЕсли Транзакция.Тип = 35 ИЛИ Транзакция.Тип = 36 ИЛИ Транзакция.Тип = 37 ИЛИ Транзакция.Тип = 38 Тогда
					// Скидка / надбавка на чек.
					Если НЕ ДобавитьСкидкуНаЧек(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
				ИначеЕсли Транзакция.Тип = 55 Тогда
					// Закрытие чека.
					Если НЕ ЗакрытьЧек(ТекущаяСмена, Транзакция.НомерЧека, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
				ИначеЕсли Транзакция.Тип = 56 Тогда
					// Отмена чека.
					УдалитьЧек(ТекущаяСмена, Транзакция, ТекстОшибки);
				ИначеЕсли Транзакция.Тип = 61 Тогда
					// Z-отчет (закрытие смены).
					ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
				ИначеЕсли Транзакция.Тип = 80 Тогда
					// Возврат по номерам чека и транзакции.
					Если НЕ ВозвратПоНомеруЧека(ТекущаяСмена, Смены, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
				ИначеЕсли Транзакция.Тип = 160 Тогда
					// Акцизный товар.
					Если НЕ ДобавитьШтрихкодМарки(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Результат = Ложь;
				ПродолжатьЧтениеФайла = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если Результат Тогда
		
		// Если текущая смена не закрыта, закрываем ее.
		Если НЕ ТекущаяСмена = Неопределено И НЕ ЗначениеЗаполнено(ТекущаяСмена.ДатаЗакрытия) Тогда
			ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
		КонецЕсли;
		
		РезультатРазбора = Новый Массив;
		
		// Перебираем смены.
		Для Каждого Смена Из Смены Цикл
			
			// Формируем описание смены.
			ТекущаяСмена = Новый Структура;
			
			ТекущаяСмена.Вставить("НомерСмены",			Смена.Номер);
			ТекущаяСмена.Вставить("ДатаОткрытияСмены",	Смена.ДатаОткрытия);
			ТекущаяСмена.Вставить("ДатаЗакрытияСмены",	Смена.ДатаЗакрытия);
			ТекущаяСмена.Вставить("Товары",				Новый Массив);
			ТекущаяСмена.Вставить("Оплаты",				Новый Массив);
			ТекущаяСмена.Вставить("ВскрытияТары",		Новый Массив);
			
			// Перебираем все чеки смены.
			Для Каждого Чек Из Смена.Чеки Цикл
				
				// Если чек закрыт.
				Если Чек.Закрыт Тогда
					
					// Перебираем продажи/возвраты товаров чека.
					Для Каждого Товар Из Чек.Товары Цикл
						
						Если НЕ Товар.Количество = 0 Тогда
							НовыйТовар = Новый Структура("Код, Количество, Цена, Сумма, ШтрихкодАлкогольнойПродукции");
							ЗаполнитьЗначенияСвойств(НовыйТовар, Товар);
							
						КонецЕсли;
						
						ТекущаяСмена.Товары.Добавить(НовыйТовар);
						
					КонецЦикла;
					
					Для Каждого Оплата Из Чек.Оплаты Цикл
						
						НоваяОплата = Новый Структура("ТипОплаты, Сумма, КодВидаОплаты");
						ЗаполнитьЗначенияСвойств(НоваяОплата, Оплата);
						
						ТекущаяСмена.Оплаты.Добавить(НоваяОплата);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РезультатРазбора.Добавить(ТекущаяСмена);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат Тогда
		ВыходныеПараметры.Добавить(РезультатРазбора);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьОтчет(ТекстовыйДокумент, ВыходныеПараметры)
	
	Результат   = Истина;
	НеизвестнаяТранзакция = Ложь;
	
	Отчет = Новый Массив;
	Чеки  = Новый Массив;
	
	Строка = ТекстовыйДокумент.ПолучитьСтроку(1);
	Если Строка = "#" Тогда
		Индекс  = 4;
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		
		ОткрытТэг = Ложь;
		
		Пока Истина Цикл
			
			Строка = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
			
			Если Строка = "#" Тогда
				Индекс = Индекс + 3;
				Строка = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
			КонецЕсли;
			
			// Все строки с тэгами и внутри тэгов пропускаются.
			Если Лев(Строка, 1) = "<" Тогда
				
				Если Лев(Строка, 2) = "</" Тогда
					ОткрытТэг = Ложь;
				Иначе
					ОткрытТэг = Истина;
				КонецЕсли;
				
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			Если ОткрытТэг Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			Если ПустаяСтрока(Строка) Тогда
				Прервать;
			КонецЕсли;
			Строка             = СтрЗаменить(Строка, ";", Символы.ПС);
			НомерТранзакцииСтр = СтрПолучитьСтроку(Строка, 1);
			ДатаТранзакцииСтр  = СтрПолучитьСтроку(Строка, 2);
			ВремяТранзакцииСтр = СтрПолучитьСтроку(Строка, 3);
			ДатаТранзакцииСтр  = СтрЗаменить(ДатаТранзакцииСтр,  ".", Символы.ПС);
			ВремяТранзакцииСтр = СтрЗаменить(ВремяТранзакцииСтр, ":", Символы.ПС);
			ДеньСтр            = СтрПолучитьСтроку(ДатаТранзакцииСтр, 1);
			МесяцСтр           = СтрПолучитьСтроку(ДатаТранзакцииСтр, 2);
			ГодСтр             = СтрПолучитьСтроку(ДатаТранзакцииСтр, 3);
			ЧасСтр             = СтрПолучитьСтроку(ВремяТранзакцииСтр, 1);
			МинутаСтр          = СтрПолучитьСтроку(ВремяТранзакцииСтр, 2);
			СекундаСтр         = СтрПолучитьСтроку(ВремяТранзакцииСтр, 3);
			ТипТранзакцииСтр   = СтрПолучитьСтроку(Строка, 4);
			НомерККМСтр        = СтрПолучитьСтроку(Строка, 5);
			НомерЧекаСтр       = СтрПолучитьСтроку(Строка, 6);
			КодКассираСтр      = СтрПолучитьСтроку(Строка, 7);
			Попытка
				ПолеОшибки = Нстр("ru='Номер транзакции (1)'");
				НомерТранзакции = Число(НомерТранзакцииСтр);
				ПолеОшибки = Нстр("ru='Дата транзакции (2,3)'");
				ДатаТранзакции  = Дата(Число(ГодСтр), Число(МесяцСтр), Число(ДеньСтр),
				                       Число(ЧасСтр), Число(МинутаСтр), Число(СекундаСтр));
				ПолеОшибки = Нстр("ru='Тип транзакции (4)'");
				ТипТранзакции   = Число(ТипТранзакцииСтр);
				ПолеОшибки = Нстр("ru='Номер ККМ (5)'");
				НомерККМ        = Число(НомерККМСтр);
				ПолеОшибки = Нстр("ru='Номер чека (6)'");
				НомерЧека       = Число(НомерЧекаСтр);
			Исключение
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно распознать поле:'") + Символы.НПП + ПолеОшибки);
				Результат = Ложь;
				Прервать;
			КонецПопытки;
			
			
			Если ТипТранзакции = 1 ИЛИ ТипТранзакции = 11 Тогда
				// Продажа
				КодСтр        = СтрПолучитьСтроку(Строка, 8);
				СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
				ЦенаСтр       = СтрПолучитьСтроку(Строка, 10);
				КоличествоСтр = СтрПолучитьСтроку(Строка, 11);
				СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
				Попытка
					
					ПолеОшибки = Нстр("ru='Код товара (8)'");
					Если НЕ КодСтр = "" Тогда
						Код        = Число(КодСтр);
					Иначе
						Код = 0;
					КонецЕсли;
					
					ПолеОшибки = Нстр("ru='Секция (9)'");
					Секция     = Число(СекцияСтр);
					ПолеОшибки = Нстр("ru='Цена товара (10)'");
					Цена       = Число(ЦенаСтр);
					ПолеОшибки = Нстр("ru='Количество товара (11)'");
					Количество = Число(КоличествоСтр);
					ПолеОшибки = Нстр("ru='Сумма (12)'");
					Сумма      = Число(СуммаСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно распознать поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				Товар                 = Новый Структура("Код, Количество, Цена, Сумма, Секция, НомерЧека, НомерТранзакции");
				Товар.Код             = Код;
				Товар.Количество      = Количество;
				Товар.Цена            = Цена;
				Товар.Сумма           = Сумма;
				Товар.Секция          = Секция;
				Товар.НомерЧека       = НомерЧека;
				Товар.НомерТранзакции = НомерТранзакции;
				Чеки.Добавить(Товар);
				
			ИначеЕсли ТипТранзакции = 2 Тогда
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Ошибка сторно'"));
				Результат = Ложь;
				Прервать;
					
			ИначеЕсли ТипТранзакции = 12 Тогда
				// Сторно
				КодСтр        = СтрПолучитьСтроку(Строка, 8);
				СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
				ЦенаСтр       = СтрПолучитьСтроку(Строка, 10);
				КоличествоСтр = СтрПолучитьСтроку(Строка, 11);
				СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
				Попытка
					ПолеОшибки = Нстр("ru='Код товара (8)'");
					Код        = Число(КодСтр);
					ПолеОшибки = Нстр("ru='Секция (9)'");
					Секция     = Число(СекцияСтр);
					ПолеОшибки = Нстр("ru='Цена товара (10)'");
					Цена       = Число(ЦенаСтр);
					ПолеОшибки = Нстр("ru='Количество товара (11)'");
					Количество = Число(КоличествоСтр);
					ПолеОшибки = Нстр("ru='Сумма (12)'");
					Сумма      = Число(СуммаСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				СтруктураПоиска            = Новый Структура("Код, Цена, Секция, НомерЧека");
				СтруктураПоиска.Код        = Код;
				СтруктураПоиска.Цена       = Цена;
				СтруктураПоиска.Секция     = Секция;
				СтруктураПоиска.НомерЧека  = НомерЧека;
				Товар                      = НайтиСтроки(Чеки, СтруктураПоиска);
				Если Товар.Количество() > 0 Тогда
					НомерЭлемента = Товар[Товар.Количество() - 1].ИндексВМассиве;
					Товар = Чеки[НомерЭлемента];
					Товар.Количество = Товар.Количество + Количество;
					Товар.Сумма      = Товар.Сумма + Сумма;
					Если Товар.Количество = 0 Или Товар.Сумма = 0 Тогда
						Чеки.Удалить(НомерЭлемента);
					КонецЕсли;
				Иначе
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Ошибка сторно'"));
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ТипТранзакции = 3 Или ТипТранзакции = 4 Тогда
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Ошибка возврата'"));
				Результат = Ложь;
				Прервать;
				
			ИначеЕсли ТипТранзакции = 13 Или ТипТранзакции = 14 Тогда
				// Возврат
				КодСтр        = СтрПолучитьСтроку(Строка, 8);
				СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
				ЦенаСтр       = СтрПолучитьСтроку(Строка, 10);
				КоличествоСтр = СтрПолучитьСтроку(Строка, 11);
				СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
				Попытка
					ПолеОшибки = Нстр("ru='Код товара (8)'");
					Код        = Число(КодСтр);
					ПолеОшибки = Нстр("ru='Секция (9)'");
					Секция     = Число(СекцияСтр);
					ПолеОшибки = Нстр("ru='Цена товара (10)'");
					Цена       = Число(ЦенаСтр);
					ПолеОшибки = Нстр("ru='Количество товара (11)'");
					Количество = Число(КоличествоСтр);
					ПолеОшибки = Нстр("ru='Сумма (12)'");
					Сумма      = Число(СуммаСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				Товар                 = Новый Структура("Код, Количество, Цена, Сумма, Секция, НомерЧека, НомерТранзакции");
				Товар.Код             = Код;
				Товар.Количество      = Количество;
				Товар.Цена            = Цена;
				Товар.Сумма           = Сумма;
				Товар.Секция          = Секция;
				Товар.НомерЧека       = НомерЧека;
				Товар.НомерТранзакции = НомерТранзакции;
				Чеки.Добавить(Товар);
				
			ИначеЕсли ТипТранзакции = 24 Тогда
				// Регистрация единицы измерения.
			ИначеЕсли ТипТранзакции = 30 Тогда
				// Редактирование цены
			ИначеЕсли ТипТранзакции = 15 Или ТипТранзакции = 17 Тогда
				// Итоговая скидка на позицию
				КодСтр        = СтрПолучитьСтроку(Строка, 8);
				СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
				СкидкаСтр     = СтрПолучитьСтроку(Строка, 11);
				СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
				Попытка
					ПолеОшибки = Нстр("ru='Код товара (8)'");
					Код        = Число(КодСтр);
					ПолеОшибки = Нстр("ru='Секция (9)'");
					Секция     = Число(СекцияСтр);
					ПолеОшибки = Нстр("ru='Скидка (11)'");
					Скидка     = Число(СкидкаСтр);
					ПолеОшибки = Нстр("ru='Сумма (12)'");
					Сумма      = Число(СуммаСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				СтруктураПоиска            = Новый Структура("Код, Секция, НомерЧека");
				СтруктураПоиска.Код        = Код;
				СтруктураПоиска.Секция     = Секция;
				СтруктураПоиска.НомерЧека  = НомерЧека;
				Товар                      = НайтиСтроки(Чеки, СтруктураПоиска);
				Если Товар.Количество() > 0 Тогда
					НомерЭлемента = Товар[Товар.Количество() - 1].ИндексВМассиве;
					Товар = Чеки[НомерЭлемента];
					Если Товар.Сумма > 0 Тогда
						Товар.Сумма = Товар.Сумма - Макс(Сумма, -Сумма);
					Иначе
						Товар.Сумма = Товар.Сумма + Макс(Сумма, -Сумма);
					КонецЕсли;
				Иначе
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Ошибка итоговой скидки на позицию'"));
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ТипТранзакции = 16 Или ТипТранзакции = 18 Тогда
				// Итоговая надбавка на позицию.
				КодСтр        = СтрПолучитьСтроку(Строка, 8);
				СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
				НадбавкаСтр   = СтрПолучитьСтроку(Строка, 11);
				СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
				Попытка
					ПолеОшибки = Нстр("ru='Код товара (8)'");
					Код        = Число(КодСтр);
					ПолеОшибки = Нстр("ru='Секция (9)'");
					Секция     = Число(СекцияСтр);
					ПолеОшибки = Нстр("ru='Надбавка (11)'");
					Надбавка   = Число(НадбавкаСтр);
					ПолеОшибки = Нстр("ru='Сумма (12)'");
					Сумма      = Число(СуммаСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				СтруктураПоиска            = Новый Структура("Код, Секция, НомерЧека");
				СтруктураПоиска.Код        = Код;
				СтруктураПоиска.Секция     = Секция;
				СтруктураПоиска.НомерЧека  = НомерЧека;
				Товар                      = НайтиСтроки(Чеки, СтруктураПоиска);
				Если Товар.Количество() > 0 Тогда
					НомерЭлемента = Товар[Товар.Количество() - 1].ИндексВМассиве;
					Товар = Чеки[НомерЭлемента];
					Если Товар.Сумма > 0 Тогда
						Товар.Сумма = Товар.Сумма + Макс(Сумма, -Сумма);
					Иначе
						Товар.Сумма = Товар.Сумма - Макс(Сумма, -Сумма);
					КонецЕсли;
				Иначе
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Ошибка итоговой надбавки на позицию'"));
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ТипТранзакции = 70 Или ТипТранзакции = 71 Тогда
				// Детализация скидки
			ИначеЕсли ТипТранзакции = 40 Тогда
				// Оплата
			ИначеЕсли ТипТранзакции = 50 Тогда
				// Внесение
			ИначеЕсли ТипТранзакции = 51 Тогда
				// Выплата
			ИначеЕсли ТипТранзакции = 55 Тогда
				// Закрытие чека
			ИначеЕсли ТипТранзакции = 56 Тогда
				// Отмена чека
				СтруктураПоиска           = Новый Структура("НомерЧека");
				СтруктураПоиска.НомерЧека = НомерЧека;
				Товары                    = НайтиСтроки(Чеки, СтруктураПоиска);
				КоличествоСтрок           = Товары.Количество();
				Для УдалСтрока = 1 По КоличествоСтрок Цикл
					Чеки.Удалить(Товары[КоличествоСтрок - УдалСтрока].ИндексВМассиве);
				КонецЦикла;
			ИначеЕсли ТипТранзакции = 58 Тогда
				// Отложенный чек
			ИначеЕсли ТипТранзакции = 59 Тогда
				// Продолжение отложенного чека.
			ИначеЕсли ТипТранзакции = 64 Тогда
				// Печать товарного чека
			ИначеЕсли ТипТранзакции = 65 Тогда
				// Открыть денежный ящик
			ИначеЕсли ТипТранзакции = 66 Тогда
				// Просмотр товара
			ИначеЕсли ТипТранзакции = 67 Тогда
				// Просмотр дисконтной карты
			ИначеЕсли ТипТранзакции = 80 Тогда
				// Возврат по номеру чека
				ТранзакцияПозицииСтр      = СтрПолучитьСтроку(Строка, 11);
				НомерВозвращаемогоЧекаСтр = СтрПолучитьСтроку(Строка, 12);
				Попытка
					ПолеОшибки = Нстр("ru='Транзакция позиции (11)'");
					ТранзакцияПозиции      = Число(ТранзакцияПозицииСтр);
					ПолеОшибки = Нстр("ru='Номер возвращаемого чека (12)'");
					НомерВозвращаемогоЧека = Число(НомерВозвращаемогоЧекаСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				СтруктураПоиска                 = Новый Структура("НомерЧека");
				СтруктураПоиска.НомерЧека       = НомерВозвращаемогоЧека;
				Врем                            = НайтиСтроки(Чеки, СтруктураПоиска);
				КоличествоСтрок                 = Врем.Количество() - 1;
				Если КоличествоСтрок >= 0 Тогда
					Для УдалСтрока = 0 По КоличествоСтрок Цикл
						Товар = Новый Структура("Код, Количество, Цена, Сумма, Секция, НомерЧека, НомерТранзакции");
						Товар.Код             = Врем[УдалСтрока].Код;
						Товар.Количество      = -Врем[УдалСтрока].Количество;
						Товар.Цена            = Врем[УдалСтрока].Цена;
						Товар.Сумма           = -Врем[УдалСтрока].Сумма;
						Товар.Секция          = Врем[УдалСтрока].Секция;
						Товар.НомерЧека       = НомерЧека;
						Товар.НомерТранзакции = НомерТранзакции;
						Чеки.Добавить(Товар);
					КонецЦикла;
				Иначе
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Ошибка возврата по номеру чека'"));
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ТипТранзакции = 35 Тогда
				// Скидка суммой на чек
				СуммаСкидкиСтр = СтрПолучитьСтроку(Строка, 11);
				Попытка
					ПолеОшибки  = Нстр("ru='Сумма скидки (11)'");
					СуммаСкидки = Число(СуммаСкидкиСтр);
					СуммаСкидки = Макс(СуммаСкидки, -СуммаСкидки);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				
				СтруктураПоиска           = Новый Структура("НомерЧека");
				СтруктураПоиска.НомерЧека = НомерЧека;
				Товары                    = НайтиСтроки(Чеки, СтруктураПоиска);
				СуммаЧека                 = 0;
				
				Для Каждого Товар Из Товары Цикл
					СуммаЧека = СуммаЧека + Чеки[Товар.ИндексВМассиве].Сумма;
				КонецЦикла;
				
				ПроцентСкидки = СуммаСкидки / СуммаЧека * 100;
				Для Каждого Товар Из Товары Цикл
					Если Товар.ИндексВМассиве = Товары.Количество() - 1 Тогда
						ВремСкидка = СуммаСкидки;
					Иначе
						ВремСкидка = Окр(Чеки[Товар.ИндексВМассиве].Сумма / 100 * ПроцентСкидки, 2);
						СуммаСкидки = СуммаСкидки - ВремСкидка;
					КонецЕсли;
					Чеки[Товар.ИндексВМассиве].Сумма = Чеки[Товар.ИндексВМассиве].Сумма - ВремСкидка; 
				КонецЦикла;
				              
			ИначеЕсли ТипТранзакции = 36 Тогда
				// Надбавка суммой на чек
				СуммаНадбавкиСтр = СтрПолучитьСтроку(Строка, 11);
				Попытка
					ПолеОшибки    = Нстр("ru='Сумма надбавки (11)'");
					СуммаНадбавки = Число(СуммаНадбавкиСтр);
					СуммаНадбавки = Макс(СуммаНадбавки, -СуммаНадбавки);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				
				СтруктураПоиска           = Новый Структура("НомерЧека");
				СтруктураПоиска.НомерЧека = НомерЧека;
				Товары                    = НайтиСтроки(Чеки, СтруктураПоиска);
				СуммаЧека                 = 0;
				
				Для Каждого Товар Из Товары Цикл
					СуммаЧека = СуммаЧека + Чеки[Товар.ИндексВМассиве].Сумма;
				КонецЦикла;
				
				ПроцентНадбавки = СуммаНадбавки / СуммаЧека * 100;
				Для Каждого Товар Из Товары Цикл
					Если Товар.ИндексВМассиве = Товары.Количество() - 1 Тогда
						ВремНадбавка = СуммаНадбавки;
					Иначе
						ВремНадбавка  = Окр(Чеки[Товар.ИндексВМассиве].Сумма / 100 * ПроцентНадбавки, 2);
						СуммаНадбавки = СуммаНадбавки - ВремНадбавка;
					КонецЕсли;
					Чеки[Товар.ИндексВМассиве].Сумма = Чеки[Товар.ИндексВМассиве].Сумма + ВремНадбавка; 
				КонецЦикла;
				
			ИначеЕсли ТипТранзакции = 37 Тогда
				// Скидка в процентах на чек
				ПроцентСкидкиСтр = СтрПолучитьСтроку(Строка, 11);
				Попытка
					ПолеОшибки = Нстр("ru='Процент скидки (11)'");
					ПроцентСкидки = Число(ПроцентСкидкиСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				СтруктураПоиска           = Новый Структура("НомерЧека");
				СтруктураПоиска.НомерЧека = НомерЧека;
				Товар                     = НайтиСтроки(Чеки, СтруктураПоиска);
				Для Каждого Врем Из Товар Цикл
					Чеки[Врем.ИндексВМассиве].Сумма = Чеки[Врем.ИндексВМассиве].Сумма * (100 - ПроцентСкидки) / 100;
				КонецЦикла;
				
			ИначеЕсли ТипТранзакции = 38 Тогда
				// Надбавка в процентах на чек.
				ПроцентНадбавкиСтр = СтрПолучитьСтроку(Строка, 11);
				Попытка
					ПолеОшибки = Нстр("ru='Процент надбавки (11)'");
					ПроцентНадбавки = Число(ПроцентНадбавкиСтр);
				Исключение
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
					Результат = Ложь;
					Прервать;
				КонецПопытки;
				СтруктураПоиска           = Новый Структура("НомерЧека");
				СтруктураПоиска.НомерЧека = НомерЧека;
				Товар                     = НайтиСтроки(Чеки, СтруктураПоиска);
				Для Каждого Врем Из Товар Цикл
					Чеки[Врем.ИндексВМассиве].Сумма = Чеки[Врем.ИндексВМассиве].Сумма * (100 + ПроцентНадбавки) / 100;
				КонецЦикла;
			ИначеЕсли ТипТранзакции = 60 Или ТипТранзакции = 61 Или ТипТранзакции = 62 Или ТипТранзакции = 63 Тогда
				// Отчеты
			ИначеЕсли ТипТранзакции = 75 Тогда
				// Налоги
			ИначеЕсли ТипТранзакции = 90 Или ТипТранзакции = 91 Тогда
				// Информация о продавцах
			ИначеЕсли ТипТранзакции = 150 Или ТипТранзакции = 151 Или ТипТранзакции = 152 Или ТипТранзакции = 153 Или ТипТранзакции = 155 Тогда
				// Запуск программы, Оплата в платежной системе, Возврат в платежной системе, Отмена в платежной системе,
				// Авторизация.
			ИначеЕсли ТипТранзакции = 140 Тогда
				// Параметры безналичной оплаты.
			Иначе
				НеизвестнаяТранзакция = Истина;
				Продолжить; // Неизвестная транзакция (продолжаем перебор).
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Строка = "@" Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Операция прервана. Отчет уже был загружен!'"));
		Результат = Ложь;
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат данных или данные отсутствуют.'"));
		Результат = Ложь;
	КонецЕсли;

	Для каждого текСтрока Из Чеки Цикл
		текСтрока.Вставить("Скидка", 0);
	КонецЦикла;
	ВыходныеПараметры.Добавить(Чеки);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьФайлТоваров(ТекстовыйДокумент, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, Разделитель, Товары, ФорматОбмена, ВыходныеПараметры)
	
	Результат = Истина;

	ТекстовыйДокумент = Новый ТекстовыйДокумент();

	Если ЧастичнаяВыгрузка Тогда
		ТекстовыйДокумент.ДобавитьСтроку("##@@&&$$$RPL");
		ТекстовыйДокумент.ДобавитьСтроку("#");
	Иначе
		
		ПерваяСтрока = "##@@&&";
		
		Если РасширеннаяВыгрузка Тогда
			ТекстовыйДокумент.ДобавитьСтроку(ПерваяСтрока + "$$$CLR {COM_GR_TOV}" + ?(ФорматОбмена=0, " {NAL} {GR_NL}", "") + " $$$ADD");
		Иначе
			ТекстовыйДокумент.ДобавитьСтроку(ПерваяСтрока + "$$$CLR" + " $$$ADD");
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку("#");
		
	КонецЕсли;
	
	Если РасширеннаяВыгрузка Тогда
		
		Для Каждого ТекГруппа Из Товары.ГруппыТоваров Цикл
			
			ДанныеДляЗаполнения = Новый Структура;
			ДанныеДляЗаполнения.Вставить("Код", Формат(ТекГруппа.Код, "ЧН=0; ЧГ=0"));
			ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(ТекГруппа.Наименование));
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(ТекГруппа.КодГруппы, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(ТекстовыйДокумент, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	БлокДополнительныхАтрибутов = "";
	
	Для Каждого ТекТовар Из Товары.Товары Цикл
		
		Если Результат Тогда
			
			Параметры = Новый Структура;
			
			Параметры.Вставить("Разделитель",			Разделитель);
			Параметры.Вставить("Уровень",				"Номенклатура");
			Параметры.Вставить("Источник",				ТекТовар);
			Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
			Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
			
			ДополнитьФайл(Результат, ТекстовыйДокумент, Параметры, БлокДополнительныхАтрибутов, ВыходныеПараметры);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФорматОбмена=0 И НЕ ПустаяСтрока(БлокДополнительныхАтрибутов) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(БлокДополнительныхАтрибутов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьФайлНастроек(СтруктураНастроек, ТекстовыйФайл, ТекстОшибки)
	
	Результат = Истина;
	
	Налоги = СтруктураНастроек.Налоги;
	КомбинацииНалогов = СтруктураНастроек.КомбинацииНалогов;
	
	БлокСтавок = "";
	БлокГрупп = "";
	
	Если Налоги.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст!'");
		Результат = Ложь;
	Иначе
		
		Если КомбинацииНалогов.Количество() = 0 Тогда
			
			Если Налоги.Количество() > 1 Тогда
				ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. На товары начисляется несколько налогов, необходимо заполнить комбинации налогов!'");
				Результат = Ложь;
			Иначе
				
				Для Каждого ТекНалог Из Налоги Цикл
					
					Если ТекНалог.Ставки.Количество() = 0 Тогда
						ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст!'");
						Результат = Ложь;
						Прервать;
					Иначе
						
						Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
							
							Код = Формат(ТекСтавка.Код, "ЧЦ=2; ЧДЦ=; ЧГ=0");
							Текст30 = ?(СтрДлина(ТекСтавка.Текст)>30, Лев(ТекСтавка.Текст, 30), ТекСтавка.Текст);
							Текст25 = ?(СтрДлина(ТекСтавка.Текст)>25, Лев(ТекСтавка.Текст, 25), ТекСтавка.Текст);
							
							БлокГрупп = БлокГрупп + ?(ЗначениеЗаполнено(БлокГрупп), Символы.ПС, "") + "*"
										+ Код + ";"		// Код группы налогов.
										+ Текст25 + ";"	// Название группы налогов.
										+ Код + ";"		// Номер налога в группе.
										+ Код + ";";	// Код налога.
							
							БлокСтавок = БлокСтавок + ?(ЗначениеЗаполнено(БлокСтавок), Символы.ПС, "") + "+"
										+ Код + ";"																	// Код налога.
										+ Текст25 + ";"																// Название налога.
										+ Текст30 + ";"																// Текст для печати.
										+ Формат(ТекСтавка.Значение, "ЧЦ=5; ЧДЦ=1; ЧРД=.; ЧН=0; ЧГ=0") + ";"		// Процентная ставка налога.
										+ Код;																		// Номер налога в ККМ.
							
						КонецЦикла;
								
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
			
		Иначе
			
			// Индексируем ставки.
			ИндексСтавки = 1;
			
			Для Каждого ТекНалог Из Налоги Цикл
				
				Если ТекНалог.Ставки.Количество() = 0 Тогда
					ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст!'");
					Результат = Ложь;
					Прервать;
				Иначе
					
					Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
						
						ТекСтавка.Вставить("Индекс", ИндексСтавки);
						
						Код = Формат(ИндексСтавки, "ЧЦ=2; ЧДЦ=; ЧГ=0");
						Текст30 = ?(СтрДлина(ТекСтавка.Текст)>30, Лев(ТекСтавка.Текст, 30), ТекСтавка.Текст);
						Текст25 = ?(СтрДлина(ТекСтавка.Текст)>25, Лев(ТекСтавка.Текст, 25), ТекСтавка.Текст);
						
						БлокСтавок = БлокСтавок + ?(ЗначениеЗаполнено(БлокСтавок), Символы.ПС, "") + "+"
									+ Код + ";"																	// Код налога.
									+ Текст25 + ";"																// Название налога.
									+ Текст30 + ";"																// Текст для печати.
									+ Формат(ТекСтавка.Значение, "ЧЦ=5; ЧДЦ=1; ЧРД=.; ЧН=0; ЧГ=0") + ";"		// Процентная ставка налога.
									+ ИндексСтавки;																// Номер налога в ККМ.
						
						ИндексСтавки = ИндексСтавки + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Результат Тогда
				
				// Формируем список групп налогов.
				Для Каждого ТекКомбинация Из КомбинацииНалогов Цикл
					
					Код = Формат(ТекКомбинация.Код, "ЧЦ=2; ЧДЦ=; ЧГ=0");
					Текст = НСтр("ru = 'Группа №'") + Код;
					
					Для Каждого ТекСтавкаКомбинации Из ТекКомбинация.Ставки Цикл
						
						Для Каждого ТекНалог Из Налоги Цикл
							
							Если ТекНалог.Код = ТекСтавкаКомбинации.КодНалога Тогда
								
								Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
									
									Если ТекСтавка.Код = ТекСтавкаКомбинации.КодСтавки Тогда
										
										КодСтавки = Формат(ТекСтавка.Индекс, "ЧЦ=2; ЧДЦ=; ЧГ=0");
										
										Прервать;
										
									КонецЕсли;
									
								КонецЦикла;
								
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
						БлокГрупп = БлокГрупп + ?(ЗначениеЗаполнено(БлокГрупп), Символы.ПС, "") + "*"
									+ Код + ";"			// Код группы налогов.
									+ Текст + ";"		// Название группы налогов.
									+ КодСтавки + ";"	// Номер налога в группе.
									+ КодСтавки + ";";	// Код налога.
								
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		БлокНалогов = БлокГрупп + Символы.ПС + БлокСтавок;
		
	КонецЕсли;
	
	БлокНастроек = БлокНалогов;
	
	Если Результат Тогда
		
		Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
			
			// Определяем и удаляем блок видов оплаты.
			ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(3);
			
			Если Лев(ТекущаяСтрока, 1) = "*" Тогда
				
				ИндексПервойСтроки = 3;
				
				Для ИндексСтроки = ИндексПервойСтроки По ТекстовыйФайл.КоличествоСтрок() Цикл
					
					ИндексПоследнейСтроки = ИндексСтроки;
					ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
					
					Если Лев(ТекущаяСтрока, 1) <> "*" И Лев(ТекущаяСтрока, 1) <> "+" Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ИндексПоследнейСтроки = ИндексПоследнейСтроки - 1;
				
				Пока ИндексПоследнейСтроки>=ИндексПервойСтроки Цикл
					
					ТекстовыйФайл.УдалитьСтроку(ИндексПоследнейСтроки);
					ИндексПоследнейСтроки = ИндексПоследнейСтроки - 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТекстовыйФайл.ВставитьСтроку(3, БлокНастроек);
			
			ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(1);
			
			Если Сред(ТекущаяСтрока, 7, 6) = "$$$CLR" Тогда
				
				Если Найти(ТекущаяСтрока, "{NAL} {GR_NL}")=0 Тогда
					ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "$$$CLR", "$$$CLR {NAL} {GR_NL}"));
				КонецЕсли;
				
			Иначе
				ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "##@@&&","##@@&&$$$CLR {NAL} {GR_NL} "));
			КонецЕсли;
			
		Иначе
			
			// Выгружаем в новый файл
			ТекстовыйФайл.ДобавитьСтроку("##@@&&$$$CLR {NAL} {GR_NL}");
			ТекстовыйФайл.ДобавитьСтроку("#");
			ТекстовыйФайл.ДобавитьСтроку(БлокНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьФайлОчисткойНастроек(ТекстовыйФайл, ТекстОшибки)
	
	Результат = Истина;
	
	Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
		
		Строка1 = ТекстовыйФайл.ПолучитьСтроку(1);
		
		Если Найти(Строка1, "{NAL} {GR_NL}")<>0 Тогда
			Возврат Истина;
		Иначе
			Строка1 = Строка1 + " {NAL} {GR_NL}";
		КонецЕсли;
		
		ТекстовыйФайл.ЗаменитьСтроку(1, Строка1);
		
	Иначе
		
		Строка3	= "$$$CLR {NO_TOV} {NAL} {GR_NL}";
		
		ТекстовыйФайл.ВставитьСтроку(3, Строка3);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает разделитель полей таблицы содержащейся в файле.
//
Функция ПолучитьРазделитель();
	
	Возврат ";";
	
КонецФункции

// Подготавливает строку для выгрузки.
Функция ПодготовитьСтроку(Знач ИсходнаяСтрока);
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), ПолучитьРазделитель(), " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, 100);
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

// Функция возвращает флаг загрузки предыдущей выгрузки.
// Если результат Истина - значит можно выгружать товар поверх существующего файла.
//
Функция МожноВыгружатьТовары(Параметры) 
	
	Результат = Ложь;
	
	Попытка
		Файл = Новый ТекстовыйДокумент();
		Файл.Прочитать(Параметры.БазаТоваров, "windows-1251");
		Строка = Файл.ПолучитьСтроку(2);
		Если СтрДлина(Строка) = 1
			И Найти(Строка,"#") > 0 Тогда
			Результат = Ложь; // Нельзя если символ во второй строке "#".
		Иначе
			Результат = Истина; // Можно если символ во второй строке не "#" (как правило если загрузка произошла там стоит "@").
		КонецЕсли;
	Исключение
		Результат = Истина; // Можно если файла товаров нет.
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

// Возвращает массив элементов найденных в массиве структур по параметрам отбора. Параметры отбора являют собой
// структуру.
// Действует аналогично методу НайтиСтроки таблицы значений.
Функция НайтиСтроки(МассивПоиска, ПараметрыОтбора)
	
	Результат = Новый Массив;
	
	Для ВремИндекс = 0 По МассивПоиска.Количество()-1 Цикл
		
		ЭлементМассива = МассивПоиска[ВремИндекс];
		ПолноеСовпадение = Истина;
		
		Для каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			
			Если ЭлементМассива.Свойство(ЭлементОтбора.Ключ) 
				И НЕ ЭлементОтбора.Значение = ЭлементМассива[ЭлементОтбора.Ключ] Тогда
				ПолноеСовпадение = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолноеСовпадение Тогда
			ЭлементМассива.Вставить("ИндексВМассиве", ВремИндекс);
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьШтрихкодВМассив(ШтрихкодСтрокой)
	
	Штрихкод = СокрЛП(ШтрихкодСтрокой);
	
	СписокРазделителей = Новый Массив;
	
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(" ");
	
	Для Каждого Разделитель ИЗ СписокРазделителей Цикл
		
		Если Найти(Штрихкод, Разделитель) > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Пока Найти(Штрихкод, Разделитель) > 0 Цикл
		
		ИндексВхождения = Найти(Штрихкод, Разделитель);
		Результат.Добавить(Лев(Штрихкод, ИндексВхождения - 1));
		Штрихкод = Прав(Штрихкод, СтрДлина(Штрихкод) - ИндексВхождения);
		
	КонецЦикла;
	
	Результат.Добавить(Штрихкод);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьФайл(Результат, Файл, Параметры, БлокДополнительныхАтрибутов = Неопределено, ВыходныеПараметры, Знач ДанныеДляЗаполнения = Неопределено)

	Разделитель			= Параметры.Разделитель;
	Уровень				= Параметры.Уровень;
	Источник			= Параметры.Источник;
	ФорматОбмена		= Параметры.ФорматОбмена;
	РасширеннаяВыгрузка = Параметры.РасширеннаяВыгрузка;
	
	Если Уровень = "Номенклатура" Тогда
		
		ДанныеДляЗаполнения = Новый Структура;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(Источник.Наименование));
		// КодРодительскойГруппы
		ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(Источник.КодГруппы, "ЧДЦ=; ЧГ=0"));
		// Артикул
		ДанныеДляЗаполнения.Вставить("Артикул", ПодготовитьСтроку(Источник.Артикул));
		
		// КодНалога
		ДанныеДляЗаполнения.Вставить("КодНалога", Формат(Источник.КодНалога, "ЧДЦ=; ЧГ=0"));
		
		// ВесовойТовар
		ДанныеДляЗаполнения.Вставить("ВесовойТовар", Источник.Весовой);
		// РазрешитьДробноеКоличество
		ДанныеДляЗаполнения.Вставить("РазрешитьДробноеКоличество", ?(Источник.Весовой, "1", "0"));
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", "1.000");
		
		Если ЗначениеЗаполнено(Источник.Алкоголь) И Источник.Алкоголь Тогда
			
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Истина);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", Источник.Маркируемый);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", Источник.КодВидаАлкогольнойПродукции);
			// ЕмкостьТары
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", Формат(Источник.ЕмкостьТары, "ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", Формат(Источник.Крепость, "ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
		Иначе
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			ДанныеДляЗаполнения.Вставить("Крепость"   , "");
		КонецЕсли;
		
		Если Источник.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Упаковка");
				Параметры.Вставить("Источник",				ТекУпаковка);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		ИначеЕсли Источник.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Источник.Характеристики Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Характеристика");
				Параметры.Вставить("Источник",				ТекХарактеристика);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Штрихкод
			Штрихкоды = Новый Массив;
			Если ТипЗнч(Источник.Штрихкод) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкод) Тогда
				
				Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкод);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкод) = Тип("Массив") Тогда
				
				Если Источник.Штрихкод.Количество() = 0 Тогда 
					Штрихкоды.Добавить("");
				Иначе
					Штрихкоды = Источник.Штрихкод;
				КонецЕсли;
			Иначе
				Штрихкоды.Добавить("");
			КонецЕсли;
			
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
			НачалоИнтервала = 1;
			
			Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
				
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Источник.ИмеетУпаковки Тогда
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Упаковка");
				Параметры.Вставить("Источник",				ТекУпаковка);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			Штрихкоды = Новый Массив;
			Если ТипЗнч(Источник.Штрихкод) = Тип("Строка") Тогда
				Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкод);
			КонецЕсли;
			
			Если ТипЗнч(Источник.Штрихкод) = Тип("Массив") И Источник.Штрихкод.Количество() = 0 Тогда
				Штрихкоды.Добавить("");
			Иначе
				Штрихкоды.Добавить("");
			КонецЕсли;
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
			НачалоИнтервала = 1;
			
			Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		МассивСтрокУпаковок = Новый Массив;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("НаименованиеУпаковки", ПодготовитьСтроку(Источник.Наименование));
		// Код
		ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
		// Цена
		ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
		// Остаток
		ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		// Штрихкод
		Штрихкоды = Новый Массив;
		Если ТипЗнч(Источник.Штрихкод) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкод) Тогда
			
			Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкод);
			
		ИначеЕсли ТипЗнч(Источник.Штрихкод) = Тип("Массив") Тогда
			
			Если Источник.Штрихкод.Количество() = 0 Тогда 
				Штрихкоды.Добавить("");
			Иначе
				Штрихкоды = Источник.Штрихкод;
			КонецЕсли;
		Иначе
			Штрихкоды.Добавить("");
		КонецЕсли;
		
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", Формат(1, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
		ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
		НачалоИнтервала = 1;
		
		Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, ЭтоГруппа = Ложь, ДопШтрихкод = Ложь)
	
	ФорматШтрихМКассир = 0;
	
	Наименование = ДанныеДляЗаполнения.Наименование;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеХарактеристики") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеХарактеристики;
	КонецЕсли;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеУпаковки") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеУпаковки;
	КонецЕсли;
	
	Наименование = Лев(Наименование, 100);
	
	Если ДопШтрихкод Тогда
		
		Строка = "# "
			+ ДанныеДляЗаполнения.Код + Разделитель			//	 1. Код
			+ ДанныеДляЗаполнения.Штрихкод + Разделитель	//	 2. Штрихкод
			+ Наименование + Разделитель					//	 3. Наименование
			+ Наименование + Разделитель					//	 4. Наименование для кассы
			+ ДанныеДляЗаполнения.Цена + Разделитель		//	 5. Цена
			+ Разделитель									//	 6. Не используется
			+ Разделитель									//	 7. Не используется
			+ Разделитель									//	 8. Не используется
			+ Разделитель									//	 9. Не используется
			+ ДанныеДляЗаполнения.Коэффициент;				//	10. Коэффициент
			
		Файл.ДобавитьСтроку(Строка);
		
	Иначе
		
		БлокДополнительныхАтрибутов = "";
		
		Если ЭтоГруппа Тогда
			
			Строка =														//   №. Значение для Штрих-М: Кассир / значение для Штрих-М: Кассир miniPOS.
				ДанныеДляЗаполнения.Код + Разделитель						//	 1. Код.
				+ Разделитель												//	 2. Штрихкод.
				+ Наименование + Разделитель								//	 3. Наименование.
				+ Разделитель												//	 4. Текст для чека.
				+ Разделитель												//	 5. Цена.
				+ Разделитель												//	 6. Остаток.
				+ Разделитель												//	 7. Код группы скидок / схема автоматической скидки.
				+ Разделитель												//	 8. Разрешить дробное количество / контроль продажи дробного количества.
				+ Разделитель												//	 9. Номер секции.
				+ Разделитель												//	10. Максимальный процент скидки.
				+ Разделитель												//	11. Код группы налогов / код налоговой схемы.
				+ Разделитель												//	12. Артикул.
				+ Разделитель												//	13. Запрашивать марку / код ценника.
				+ Разделитель												//	14. Не используется / Страна производитель.
				+ Разделитель												//	15. Не используется / Единица измерения.
				+ ДанныеДляЗаполнения.КодРодительскойГруппы + Разделитель	//	16. Код родительской группы.
				+ "0" + Разделитель											//	17. Товар или группа (1 - товар, 0 - группа).
				+ Разделитель												//	18. Список кодов скидочных групп.
				+ "";														//	19. Подакцизный товар / категории блюд.
					
		Иначе
			
			Строка =																									//	 №. Значение для Штрих-М: Кассир / значение для Штрих-М: Кассир miniPOS.
				ДанныеДляЗаполнения.Код + Разделитель																	//	 1. Код.
				+ ДанныеДляЗаполнения.Штрихкод + Разделитель															//	 2. Штрихкод
				+ Наименование + Разделитель																			//	 3. Наименование
				+ Наименование + Разделитель																			//	 4. Текст для чека
				+ ДанныеДляЗаполнения.Цена + Разделитель																//	 5. Цена
				+ ДанныеДляЗаполнения.Остаток + Разделитель																//	 6. Остаток
				+ Разделитель																							//	 7. Код группы скидок / схема автоматической скидки.
				+ ДанныеДляЗаполнения.РазрешитьДробноеКоличество + Разделитель											//	 8. Разрешить дробное количество / контроль продажи дробного количества.
				+ Разделитель																							//	 9. Номер секции
				+ Разделитель																							//	10. Максимальный процент скидки
				+ ?(ФорматОбмена = ФорматШтрихМКассир, ДанныеДляЗаполнения.КодНалога, "") + Разделитель					//	11. Код группы налогов / код налоговой схемы.
				+ ДанныеДляЗаполнения.Артикул + Разделитель																//	12. Артикул
				+ ?(ФорматОбмена = ФорматШтрихМКассир, ?(ДанныеДляЗаполнения.Маркируемый, "1", "0"), "") + Разделитель	//	13. Запрашивать марку / код ценника.
				+ Разделитель																							//	14. Не используется / Страна производитель.
				+ Разделитель																							//	15. Не используется / Единица измерения.
				+ ДанныеДляЗаполнения.КодРодительскойГруппы + Разделитель												//	16. Код родительской группы
				+ "1" + Разделитель																						//	17. Товар или группа (1 - товар, 0 - группа).
				+ Разделитель																							//	18. Список кодов скидочных групп.
				+ ?(ФорматОбмена > ФорматШтрихМКассир, "", ?(ДанныеДляЗаполнения.Маркируемый, "1", "0"));				//	19. Подакцизный товар / категории блюд.
				
			Если ДанныеДляЗаполнения.Алкоголь Тогда
				БлокДополнительныхАтрибутов =
					"<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""22"">" + ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""23"">" + ДанныеДляЗаполнения.ЕмкостьТары + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""24"">" + ?(ДанныеДляЗаполнения.Маркируемый, "0", "1") + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""27"">" + ДанныеДляЗаполнения.Крепость + "</goods_attr>";
			КонецЕсли;
			
		КонецЕсли;
		
		Файл.ДобавитьСтроку(Строка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БлокДополнительныхАтрибутов) Тогда
		
		Файл.ДобавитьСтроку(БлокДополнительныхАтрибутов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти