
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры работы с обсуждениями
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывает процедуру записи обсуждения в регистр сведений Обсуждения для Ссылки, а также для упомянутых (по навигационным ссылкам) в тексте комментария объектов,
// формирует напоминания пользователям, упомянутым в тексте комментария
// Если объект ссылки не записан, предлагает запись в форме
// Параметры:
//  Комментарий			   Строка 		- текст сообщения
//  Ссылка				   Любая ссылка - ссылка на объект обсуждения
//  Форма				   Управляемая форма объекта ссылки
Процедура ДобавитьСообщение(Комментарий, Ссылка, Форма) Экспорт
	
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	Если (Ссылка.Пустая() Или Форма.Модифицированность) Тогда
		ТекстВопроса = НСтр("ru = 'Чтобы оставлять комментарии, нужно записать изменения. Продолжить?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
		ДополнительныеПараметры.Вставить("Комментарий", Комментарий);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСообщениеПодтверждениеЗаписи", ОбсужденияКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
			
	КонецЕсли;
	
	ОбсужденияВызовСервера.ДобавитьСообщение(Комментарий, Ссылка);
	Комментарий = "";
	Оповестить(ИмяСобытияДобавлениеКомментария(),, Ссылка);
	
КонецПроцедуры

// Продолжение процедуры записи обсуждения ДобавитьСообщение
// Параметры:
//  РезультатВопроса			Результат вопроса диалога записи в форме
//  ДополнительныеПараметры		Параметры Описания оповещения
Процедура ДобавитьСообщениеПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Ссылка = ДополнительныеПараметры.Ссылка;
	Комментарий = ДополнительныеПараметры.Комментарий;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		УспешноЗаписан = Форма.Записать();
		Если НЕ УспешноЗаписан ИЛИ (НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка)) Или Форма.Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		Иначе
			Ссылка = Форма.Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбсужденияВызовСервера.ДобавитьСообщение(Комментарий, Ссылка);
	Форма.СообщениеПользователя = "";
	Оповестить(ИмяСобытияДобавлениеКомментария(),, Ссылка);
	
КонецПроцедуры

// Возвращает текст HTML для навигационной ссылки для переданной ссылки
// Параметры:
//  Ссылка				Любая ссылка - Результат вопроса диалога записи в форме
Функция HTMLСсылка(Ссылка) Экспорт
	
	Возврат "<A HREF='"+ПолучитьНавигационнуюСсылку(Ссылка)+"'>"+Строка(Ссылка)+"</A>";
	
КонецФункции

#Область ОбработчикиСобытий

// Обработка оповещения события добавления комментария в обсуждения объекта
// для обновления списка комментариев в форме
// Параметры:
//  ИмяСобытия				Строка - ожидается имя "Обсуждение_ДобавлениеКомментария"
//	Параметр				Параметр сообщения
//	Источник				Ссылка объекта - источника оповещения
//	Форма					Управляемая форма для обновления данных
//	Ссылка					Ссылка объекта формы для обновления данных
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма, Ссылка) Экспорт
	
	Если ИмяСобытия=ИмяСобытияЗаписьПрисоединенногоФайла() Тогда
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Ссылка Тогда
			Если ТипЗнч(Источник)=Тип("Массив") Тогда
				ТекстИсточник = "";
				Для каждого стр Из Источник Цикл
					ТекстИсточник = ТекстИсточник + ОбсужденияКлиент.HTMLСсылка(стр)+" ";
				КонецЦикла;
			Иначе
				ТекстИсточник = ОбсужденияКлиент.HTMLСсылка(Источник);
			КонецЕсли; 
			Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый=Истина Тогда
				ОбсужденияВызовСервера.ДобавитьСообщение(НСтр("ru = 'Присоединен файл '")+ТекстИсточник, Ссылка, Истина);
			Иначе
				ОбсужденияВызовСервера.ДобавитьСообщение(НСтр("ru = 'Записан файл '")+ТекстИсточник, Ссылка,Истина);
			КонецЕсли;
			
			ФормаОбсуждение = ПолучитьФорму("РегистрСведений.Обсуждения.Форма.ФормаОбсуждения", , Форма, Ложь);
			Если ФормаОбсуждение<>Неопределено И ФормаОбсуждение.Открыта() Тогда
				ФормаОбсуждение.ОбновитьОбсуждения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка автоподбора ввода текста в поле комментария для обсуждений
// для обновления списка комментариев в форме
// Параметры:	Стандартные параметры события
//
Процедура СообщениеАвтоПодбор(Форма, Ссылка, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	//Для совместимости со старыми версиями платформы
	ПозицияПользователь	=СтрНайти(Текст, "@", НаправлениеПоиска.СКонца);
	ПозицияПробел		=СтрНайти(Текст, " ", НаправлениеПоиска.СКонца);
	
	Если ПозицияПользователь>0 И ПозицияПользователь>ПозицияПробел Тогда
		
		Подстрока = Сред(Текст, ПозицияПользователь+1);
		Если ПустаяСтрока(Подстрока) ИЛИ СтрНайти(Подстрока, " ")>0 ИЛИ СтрДлина(Подстрока)>10 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыбора = Новый СписокЗначений;
		ТекстДляПоиска = НРег(Подстрока);
		СоответствиеЧастейИменПользователей = ОбсужденияКлиентПовтИсп.СловарьОписанийПользователей();
		МассивПользователей = СоответствиеЧастейИменПользователей.Получить(ТекстДляПоиска);
		Если МассивПользователей <> Неопределено Тогда
			ДанныеВыбора.ЗагрузитьЗначения(МассивПользователей);
		КонецЕсли;
	Иначе
		
		Если ПозицияПробел=0 Тогда
			Подстрока = Текст;
		Иначе
			Подстрока = Сред(Текст, ПозицияПробел+1);
		КонецЕсли;
		
		ДлинаПодстроки = СтрДлина(Подстрока);
		Если ДлинаПодстроки<3 ИЛИ ДлинаПодстроки>10 Тогда
			Возврат;
		КонецЕсли; 

		ДанныеВыбора = Новый СписокЗначений;
		ТекстДляПоиска = НРег(Подстрока);
		СоответствиеЧастейИменПользователей = ОбсужденияКлиентПовтИсп.СловарьОписанийПользователей();
		МассивПользователей = СоответствиеЧастейИменПользователей.Получить(ТекстДляПоиска);
		Если МассивПользователей <> Неопределено Тогда
			ДанныеВыбора.ЗагрузитьЗначения(МассивПользователей);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеВыбора<>Неопределено Тогда
		СтандартнаяОбработка = ДанныеВыбора.Количество()=0;	
	КонецЕсли; 
	
КонецПроцедуры

// Обработка выбора ввода текста в поле комментария для обсуждений
// Параметры:	Стандартные параметры события
//
Процедура СообщениеОбработкаВыбора(Форма, Ссылка, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстПоля = Элемент.ТекстРедактирования;
	ПозицияСобака = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(ТекстПоля, "@");
	ПозицияПробел = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(ТекстПоля, " ");
	Если ПозицияПробел>=ПозицияСобака Тогда
		Подстрока = Сред(ТекстПоля, ПозицияПробел+1);
		Если ПустаяСтрока(Подстрока) Тогда
			Возврат;
		КонецЕсли;
		Форма.Элементы.Сообщение.УстановитьГраницыВыделения(ПозицияПробел+1, СтрДлина(ТекстПоля)+1);
		Форма.Элементы.Сообщение.ВыделенныйТекст = "@"+ВыбранноеЗначение+" ";
	Иначе
		Подстрока = Сред(ТекстПоля, ПозицияСобака+1);
		Если ПустаяСтрока(Подстрока) ИЛИ СтрНайти(Подстрока, " ")>0 Тогда
			Возврат;
		КонецЕсли;
		Форма.Элементы.Сообщение.УстановитьГраницыВыделения(ПозицияСобака+1, СтрДлина(ТекстПоля)+1);
		Форма.Элементы.Сообщение.ВыделенныйТекст = ВыбранноеЗначение+" ";
	КонецЕсли;
	
КонецПроцедуры

// Обработка нажатия ссылки в поле HTML документа обсуждений
// Параметры:	Стандартные параметры события
//
Процедура ОбработатьНажатие(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ДанныеСобытия.Свойство("Href") И ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Если СтрНайти(ДанныеСобытия.Href, "Справочник.Пользователи")>0 Тогда
			Представление = ПредставлениеНавигационнойСсылки(Сред(ДанныеСобытия.Href, СтрНайти(ДанныеСобытия.Href, "e1cib/")));
			Если НЕ ПустаяСтрока(Представление) Тогда
				ТекущееЗначение = Форма.СообщениеПользователя;
				ТекущееЗначение = ТекущееЗначение+?(НЕ ПустаяСтрока(ТекущееЗначение) И НЕ Прав(ТекущееЗначение, 1)=" ", " ", ""); 
				Форма.СообщениеПользователя = ТекущееЗначение+"@"+СтрЗаменить(Представление, " ", "_")+" ";
			КонецЕсли;
		ИначеЕсли СтрНайти(ДанныеСобытия.Href, "Справочник")>0 И СтрНайти(ДанныеСобытия.Href, "ПрисоединенныеФайлы")>0 Тогда
			
			ДанныеФайла = ОбсужденияВызовСервера.ПолучитьДанныеФайлаСправочникаПоНавигационнойСсылке(ДанныеСобытия.Href);
			ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ДанныеФайла.ФайлРедактируется);
			
		ИначеЕсли Прав(ДанныеСобытия.Href,12) = "/ПоказатьВсе" Тогда
			Форма.Обсуждение = ОбсужденияВызовСервера.ОбсужденияПоОбъекту(Форма.Объект.Ссылка);
		Иначе
			ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ИмяСобытияДобавлениеКомментария()
	
	Возврат "Обсуждение_ДобавлениеКомментария";
	
КонецФункции

Функция ИмяСобытияЗаписьПрисоединенногоФайла()
	
	Возврат "Запись_ПрисоединенныйФайл";
	
КонецФункции

Функция ПредставлениеНавигационнойСсылки(Ссылка)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	МассивПредставлений = ПолучитьПредставленияНавигационныхСсылок(МассивСсылок);
	Если МассивПредставлений.Количество()=0 ИЛИ МассивПредставлений[0]=Неопределено Тогда
		Возврат "";
	Иначе
		Возврат МассивПредставлений[0].Текст;
	КонецЕсли; 
	
КонецФункции

//Запускает проверку наличия текущих обсуждений
Процедура ПослеЗапускаСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	ИнтервалПроверкиНапоминаний = ПараметрыРаботыКлиента.НастройкиНапоминаний.ИнтервалПроверкиНапоминаний;
	ОтсрочкаПроверкиНапоминаний = Макс(180, ИнтервалПроверкиНапоминаний*60);
	
	Если ПараметрыРаботыКлиента.НастройкиНапоминаний.ИспользоватьНапоминания Тогда
		ПодключитьОбработчикОжидания("ПроверитьТекущиеОбсуждения", ОтсрочкаПроверкиНапоминаний, Истина); // Через 3 минуты после запуска клиента.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

 