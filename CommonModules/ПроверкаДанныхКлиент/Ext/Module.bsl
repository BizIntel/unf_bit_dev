///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С ПРОВЕРКОЙ ДАННЫХ НА КЛИЕНТЕ


// Выполняет проверку в соответствии со структурой параметров
// проверки данных
//
// Возвращает: РезультатРаботы (описание в модуле ПроверкаДанных)
//
Функция ВыполнитьПроверку(СтруктураПараметровПроверкиДанных, ОкноДляРезультатов = Неопределено, ОграниченияПроверки = Неопределено) Экспорт
	
	Состояние(
		НСтр("ru='Проверка данных'"));
	
	Попытка
		Если ЗначениеЗаполнено(СтруктураПараметровПроверкиДанных.ПараметрыРаботы.СобытиеКПроверке) Тогда
			
			Результат = ПроверкаДанных.ВыполнитьПроверкуПоСобытию(
				СтруктураПараметровПроверкиДанных.ПараметрыРаботы.Организация,
				СтруктураПараметровПроверкиДанных.ПараметрыРаботы.СобытиеКПроверке);
			
		Иначе
			
			Результат = ПроверкаДанных.ВыполнитьПроизвольнуюПроверку(
				СтруктураПараметровПроверкиДанных.ПараметрыРаботы.Организация,
				СтруктураПараметровПроверкиДанных.ПараметрыРаботы.ПараметрыКонтроля,
				СтруктураПараметровПроверкиДанных.ПараметрыРаботы.ПериодПроизвольногоКонтроля.ДатаНачала,
				СтруктураПараметровПроверкиДанных.ПараметрыРаботы.ПериодПроизвольногоКонтроля.ДатаОкончания,
				ОграниченияПроверки);
			
		КонецЕсли;
	Исключение
		
		
		Результат =  Новый Структура(
			"ЕстьКритическаяОшибка, ЕстьОшибки, ЕстьПредупреждения, ДеревоРезультата, КлючПротоколаПроверки",
			Истина,
			Ложь,
			Ложь,
			Неопределено,
			Неопределено);
		
	КонецПопытки;
	
	Если Результат.ЕстьКритическаяОшибка Тогда
		//
		//Ответ = Вопрос(
		//	НСтр("ru='Проверка данных закончилась с критической ошибкой.
		//			|Данные по ошибке отправлены администратору.
		//			|Продолжить без проверки данных?'"),
		//	РежимДиалогаВопрос.ДаНет);
		//
		//Если Ответ = КодВозвратаДиалога.Нет Тогда 
		//	Результат.ЕстьОшибки = Истина;
		//КонецЕсли;
		//
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Производит расшифровку протокола проверки
// на основании структуры расшифровки. Описание в модуле ПроверкаДанных
//
Процедура ПровестиРасшифровку(Расшифровка, Организация, СобытиеКалендаря = Неопределено) Экспорт
	
	Если Расшифровка.ТипРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Расшифровка.ТипРасшифровки = "Объектная" Тогда
		
		ОткрытьФорму(
			ПолучитьИмяФормыПоСсылке(Расшифровка.ЗначениеРасшифровки),
			Новый Структура(
				"Ключ,ОшибкиЗаполнения,ПереченьОшибок, Организация, СобытиеКалендаря",
				Расшифровка.ЗначениеРасшифровки,
				Истина,
				Расшифровка.ПараметрыРасшифровки,
				Организация,
				СобытиеКалендаря));
	ИначеЕсли Расшифровка.ТипРасшифровки = "НоваяЗаписьРегистраСведений" Тогда
		
		ОткрытьФорму(
			Расшифровка.ЗначениеРасшифровки,
			Расшифровка.ПараметрыРасшифровки);
		
	ИначеЕсли Расшифровка.ТипРасшифровки = "Списочная" Тогда
		
		ОткрытьФорму(
			Расшифровка.ЗначениеРасшифровки,
			Расшифровка.ПараметрыРасшифровки);
		
		
	ИначеЕсли Расшифровка.ТипРасшифровки = "Отчет" Тогда
		ОткрытьФорму(
			Расшифровка.ЗначениеРасшифровки,
			Расшифровка.ПараметрыРасшифровки);
		
	ИначеЕсли Расшифровка.ТипРасшифровки = "Произвольная" Тогда
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестный тип расшифровки'");
	КонецЕсли;
	
КонецПроцедуры


//-----------------------------------------------------------------------------
// вспомогательные процедуры и функции

Функция ПолучитьИмяФормыПоСсылке(ПроизвольнаяСсылка)
	
	ИмяТаблицы = ПроверкаДанных.ИмяТаблицыПоСсылке(ПроизвольнаяСсылка);
	ИмяФормы = "";
	
	Если Найти(ИмяТаблицы,"РегистрСведений") Тогда
		ИмяФормы = "Форма.ФормаЗаписи";
	Иначе
		ИмяФормы = "ФормаОбъекта";
	КонецЕсли;
	
	Возврат ИмяТаблицы + "." + ИмяФормы;
	
КонецФункции

// Возвращает Ложь - если есть ошибки, Истина - если все хорошо
//
&НаКлиенте
Функция ВыполнитьПроверкуДанныхДляСправки2НФДЛ(Дата, Организация, Сотрудник) Экспорт
	
	СтруктураПараметровКонтроля = ПроверкаДанныхКлиентСервер.ПолучитьОписаниеСтруктурПараметровПроверкиДанных(Организация).ПараметрыРаботы.ПараметрыКонтроля;
	ОграниченияПроверки = Новый Структура;
	ОграниченияПараметровКонтроля = Новый Массив;
	ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
	ОграниченияПараметровКонтроля.Добавить("ПериодыРаботыСотрудников");
	ОграниченияПараметровКонтроля.Добавить("ВзаиморасчетыССотрудниками");
	ОграниченияПараметровКонтроля.Добавить("СведенияПоСотрудникам");
	
	Для Каждого ЭлементКонтроля Из СтруктураПараметровКонтроля Цикл
		
		// Если Используются ограничения параметров контроля, тогда в массиве ограничений ключ
		// должен присутствовать и находится через Найти
		СтруктураПараметровКонтроля[ЭлементКонтроля.Ключ] = (ОграниченияПараметровКонтроля.Найти(ЭлементКонтроля.Ключ)<>Неопределено);
		
		ОграниченияПроверки.Вставить(ЭлементКонтроля.Ключ,Неопределено);
	КонецЦикла;
	
	ОграниченияПроверки.СведенияПоОрганизации = Новый Массив;
	ОграниченияПроверки.СведенияПоСотрудникам = Новый Массив;
	
	// Сведения по организации
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
	Если Год(Дата) < 2013 Тогда
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
	Иначе
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
	КонецЕсли;
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("Руководитель");
	ОграниченияПроверки.СведенияПоОрганизации.Добавить("ГлавныйБухгалтер");
	
	// Сведения по сотрудникам
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Фамилия");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Имя");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Отчество");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("ДатаРождения");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("ИНН");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("СтраховойНомерПФР");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Гражданство");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("АдресПоПрописке");
	ОграниченияПроверки.СведенияПоСотрудникам.Добавить("УдостоверениеЛичности");
	
	СтруктураПараметровПроверкиДанных = ПроверкаДанныхКлиентСервер.ПолучитьОписаниеСтруктурПараметровПроверкиДанных(Организация);
	СтруктураПараметровПроверкиДанных.ПараметрыРаботы.Организация = Организация;
	СтруктураПараметровПроверкиДанных.ПараметрыРаботы.ПараметрыКонтроля = СтруктураПараметровКонтроля;
	
	СтруктураПараметровПроверкиДанных.ПараметрыРаботы.ПериодПроизвольногоКонтроля.ДатаНачала = НачалоГода(Дата);
	СтруктураПараметровПроверкиДанных.ПараметрыРаботы.ПериодПроизвольногоКонтроля.ДатаОкончания = КонецГода(Дата);
	
	РезультатПроверки = ПроверкаДанныхКлиент.ВыполнитьПроверку(СтруктураПараметровПроверкиДанных,,ОграниченияПроверки);
	
	Если РезультатПроверки.ЕстьКритическаяОшибка ИЛИ РезультатПроверки.ЕстьОшибки Тогда
		
		КлючПоследнегоПротокола = РезультатПроверки.КлючПротоколаПроверки;
		КонтрольПройден = Истина;
		СправкиПоНДФЛ.ОтразитьОшибки(КонтрольПройден, КлючПоследнегоПротокола, Сотрудник);
		Возврат КонтрольПройден;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
