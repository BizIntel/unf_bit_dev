////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиПереопределяемый: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	
КонецПроцедуры

// Используется для получения номеров счетов в виде массив строк
//
// Параметры:
//  Организация - <СправочникСсылка.Организации> - отбор по организации.
//  Банк - <СправочникСсылка.КлассификаторБанковРФ> - отбор по банку.
//  МассивНомеровБанковскихСчетов - массив возврата, в элементах строки с номерами счетов
//
Процедура ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивНомеровБанковскихСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БанковскиеСчета.НомерСчета
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Банк = &Банк
	               |	И БанковскиеСчета.Владелец = &Организация
	               |	И НЕ БанковскиеСчета.ПометкаУдаления";
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Организация", Организация);
	ТабРез = Запрос.Выполнить().Выгрузить();
	МассивНомеровБанковскихСчетов = ТабРез.ВыгрузитьКолонку("НомерСчета");
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: ВидЭД, Банк, Организация.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ПлатежноеПоручение")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
		ПараметрыЭД.Организация = Источник.Организация;
		СчетОрганизации = Источник.БанковскийСчет;
		Если ЗначениеЗаполнено(СчетОрганизации) Тогда
			ПараметрыЭД.Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "Банк");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы,
//                  по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// ДеревоДокумента - ДеревоЗначений - соответствует макету ПлатежноеПоручение обработки ОбменСБанками.
//
Процедура ЗаполнитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	ПлатежноеПоручение.Контрагент.НаименованиеПолное КАК РеквизитыПолучателя_Наименование,
	|	ПлатежноеПоручение.Контрагент.ИНН КАК РеквизитыПолучателя_ИНН,
	|	ПлатежноеПоручение.Контрагент.КПП КАК РеквизитыПолучателя_КПП,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК РеквизитыПолучателя_РасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК РеквизитыПолучателя_Банк_БИК,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК РеквизитыПолучателя_Банк_Наименование,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК РеквизитыПолучателя_Банк_Город,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК РеквизитыПолучателя_Банк_КоррСчет,
	|	ПлатежноеПоручение.Организация.Наименование КАК РеквизитыПлательщика_Наименование,
	|	ПлатежноеПоручение.Организация.ИНН КАК РеквизитыПлательщика_ИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК РеквизитыПлательщика_КПП,
	|	ПлатежноеПоручение.БанковскийСчет.НомерСчета КАК РеквизитыПлательщика_РасчСчет,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Код КАК РеквизитыПлательщика_Банк_БИК,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Наименование КАК РеквизитыПлательщика_Банк_Наименование,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Город КАК РеквизитыПлательщика_Банк_Город,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.КоррСчет КАК РеквизитыПлательщика_Банк_КоррСчет,
	|	ПлатежноеПоручение.ВидПлатежа КАК РеквизитыПлатежа_ВидПлатежа,
	|	""01"" КАК РеквизитыПлатежа_ВидОплаты,
	|	ПлатежноеПоручение.ОчередностьПлатежа КАК РеквизитыПлатежа_Очередность,
	|	ПлатежноеПоручение.ИдентификаторПлатежа КАК РеквизитыПлатежа_Код,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК РеквизитыПлатежа_НазначениеПлатежа,
	|	ПлатежноеПоручение.Контрагент КАК Получатель,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПеречислениеВБюджет,
	|	ПлатежноеПоручение.СтатусСоставителя КАК ПлатежиВБюджет_СтатусСоставителя,
	|	ПлатежноеПоручение.КодБК КАК ПлатежиВБюджет_ПоказательКБК,
	|	ПлатежноеПоручение.КодОКАТО КАК ПлатежиВБюджет_ОКТМО,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПлатежиВБюджет_ПоказательОснования,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ПоказательПериода = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ПлатежноеПоручение.ПоказательПериода
	|	КОНЕЦ КАК ПлатежиВБюджет_ПоказательПериода,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ПоказательНомера = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ПлатежноеПоручение.ПоказательНомера
	|	КОНЕЦ КАК ПлатежиВБюджет_ПоказательНомера,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ПоказательДаты = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ПлатежноеПоручение.ПоказательДаты
	|	КОНЕЦ КАК ПлатежиВБюджет_ПоказательДаты
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаДанныхДокумента = Запрос.Выполнить().Выгрузить();
	
	СтрокаДанных = ТаблицаДанныхДокумента[0];
	Индекс = 0;
	
	Для Индекс = 0 По 22 Цикл
		Путь = СтрЗаменить(ТаблицаДанныхДокумента.Колонки[Индекс].Имя, "_", ".");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, Путь, СтрокаДанных[Индекс]);
	КонецЦикла;
	
	Если СтрокаДанных.ПеречислениеВБюджет Тогда
		Для Индекс = 25 По 31 Цикл
			Путь = СтрЗаменить(ТаблицаДанныхДокумента.Колонки[Индекс].Имя, "_", ".");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, Путь, СтрокаДанных[Индекс]);
		КонецЦикла;
	КонецЕсли;

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Получатель", СтрокаДанных.Получатель);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное требование.
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы,
//                  по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// ДеревоДокумента - ДеревоЗначений - соответствует макету ПлатежноеТребование обработки ОбменСБанками.
//
Процедура ЗаполнитьДанныеПоПлатежномуТребованию(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт

КонецПроцедуры

// Определяет возможно ли редактировать объект информационной базы
//
// Параметры
//  <СсылкаНаОбъект>  - <любая ссылка> - ссылка на проверяемый объект
/// <РедактированиеРазрешено> - <Булево>   - возвращает разрешено или нет редактирование
//
Процедура ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт

КонецПроцедуры

// Заполняет список команд ЭДО.
// 
// Параметры:
//  СоставКоманд - Массив - например "Документ._ДемоПлатежныйДокумент".
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Добавить("Документ.ПлатежноеПоручение");
	
КонецПроцедуры

// Включает тестовый режим обмена в банком.
// При включении тестового режима возможно ручное указание URL сервера для получения настроек обмена.
//
// Параметры:
//    Используется - Булево - признак использования тестового режима.
//
Процедура ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользуетсяТестовыйРежим = Константы.ИспользоватьТестовыйРежимDirectBank.Получить();
	
КонецПроцедуры

#Область ЗарплатныйПроект

// Вызывается для формирования XML файла в прикладном решении
//
// Параметры:
//    ОбъектДляВыгрузки = ДокументСсылка - ссылка на документ, на основании которого будет сформирован ЭД.
//    ИмяФайла - Строка - имя сформированного файла
//    АдресФайла - АдресВременногоХранилища - содержит двоичные данные файла
//
Процедура ПриФормированииXMLФайла(ОбъектДляВыгрузки, ИмяФайла, АдресФайла) Экспорт
	
КонецПроцедуры

// Формирует табличный документ на основании файла XML для визуального отображения электронного документа.
//
// Параметры:
//  ИмяФайла - Строка - полный путь к файлу XML
//  ТабличныйДокумент - ТабличныйДокумент - возвращаемое значение, визуальное отображение данных файла.
//
Процедура ЗаполнитьТабличныйДокумент(Знач ИмяФайла, ТабличныйДокумент) Экспорт
	
КонецПроцедуры

// Вызывается при получении файла из банка
//
// Параметры:
// АдресДанныхФайла - Строка - адрес временного хранилища с двоичными данными файла.
// ИмяФайла - Строка - формализованное имя файла данных
// ИдентификаторЭДВладельца - Строка - (возвращаемый параметр) идентификатор ЭД, на основании которого был получен ответ из банка.
// ОбъектВладелец - ДокументСсылка - (возвращаемый параметр) ссылка на документ, который был создан на основании ЭД.
// ДанныеОповещения - Структура - (возвращаемый параметр) данные для вызова метода Оповестить на клиенте.
//                 * Ключ - Строка - имя события
//                 * Значение - Произвольный - параметр сообщения
Процедура ПриПолученииXMLФайла(АдресДанныхФайла, ИмяФайла, ОбъектВладелец, ДанныеОповещения) Экспорт
	
КонецПроцедуры

// Вызвается при изменении состояния элекронного документооборота.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - владелец электронного документооборота;
//  СостояниеЭД - ПеречислениеСсылка.СостоянияОбменСБанками - новое состояние электронного документооборота.
//
Процедура ПриИзмененииСостоянияЭД(СсылкаНаОбъект, СостояниеЭД) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
