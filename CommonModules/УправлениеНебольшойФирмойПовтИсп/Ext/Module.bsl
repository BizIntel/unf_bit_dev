
#Область ЭкспортныеПроцедурыИФункции

// Получить значение Текущей даты сеанса
//
Функция ПолучитьТекущуюДатаСеанса() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции // ПолучитьТекущуюДатаСеанса()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, ПустоеЗначение = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	Если ПустоеЗначение = Неопределено Тогда
		ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
	КонецЕсли;

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеНастройки(Настройка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеНастройки()

// Возвращает Истина или Ложь - указанная настройка пользователя находится в шапке.
//
// Параметры:
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция РеквизитВШапке(Настройка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ЗначениеПоУмолчанию = Истина;

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ЗначениеПоУмолчанию;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			Возврат Выборка.Значение = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;

	Иначе
		Возврат ЗначениеПоУмолчанию;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Функция возвращает признак использования торгового оборудования.
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	 Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование")
		   И ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	 
КонецФункции // ИспользоватьПодключаемоеОборудование()

// Функция выполняет получение параметров кассы ККМ.
//
Функция ПолучитьПараметрыКассыККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФискальныйРегистратор,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	КассыККМ.ПодключаемоеОборудование КАК ИдентификаторУстройства,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	КассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С,
	|	КассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура(
			"ИдентификаторУстройства,
			|ИспользоватьБезПодключенияОборудования,
			|ЭтоФискальныйРегистратор,
			|Организация,
			|СтруктурнаяЕдиница,
			|ЭлектронныйЧекSMSПередаютсяПрограммой1С,
			|ЭлектронныйЧекEmailПередаютсяПрограммой1С",
			Выборка.ИдентификаторУстройства,
			Выборка.ИспользоватьБезПодключенияОборудования,
			Выборка.ЭтоФискальныйРегистратор,
			Выборка.Организация,
			Выборка.СтруктурнаяЕдиница,
			Выборка.ЭлектронныйЧекSMSПередаютсяПрограммой1С,
			Выборка.ЭлектронныйЧекEmailПередаютсяПрограммой1С
		);
		
	Иначе
		
		Возврат Новый Структура(
			"ИдентификаторУстройства,
			|ИспользоватьБезПодключенияОборудования,
			|ЭтоФискальныйРегистратор,
			|Организация,
			|СтруктурнаяЕдиница,
			|ЭлектронныйЧекSMSПередаютсяПрограммой1С,
			|ЭлектронныйЧекEmailПередаютсяПрограммой1С",
			Справочники.ПодключаемоеОборудование.ПустаяСсылка(),
			Ложь,
			Ложь,
			Справочники.Организации.ПустаяСсылка(),
			Справочники.СтруктурныеЕдиницы.ПустаяСсылка(),
			Ложь,
			Ложь
		);
		
	КонецЕсли;
	
КонецФункции // ПолучитьПараметрыКассыККМ()

// Функция выполняет получение параметров ЭТ.
//
Функция ПолучитьПараметрыЭТ(ЭквайринговыйТерминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ИдентификаторУстройства,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭквайринговыйТерминал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("ИдентификаторУстройства,
								|ИспользоватьБезПодключенияОборудования",
								Выборка.ИдентификаторУстройства,
								Выборка.ИспользоватьБезПодключенияОборудования
				);
		
	Иначе
		
		Возврат Новый Структура("ИдентификаторУстройства,
								|ИспользоватьБезПодключенияОборудования",
								Справочники.ПодключаемоеОборудование.ПустаяСсылка(),
								Истина
				);
		
	КонецЕсли;
	
КонецФункции

// Функция выполняет проверку необходимости контроля договоров контрагентов.
//
Функция ТребуетсяКонтрольДоговоровКонтрагентов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если (Не ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбменСБухгалтериейНастроен();
	
КонецФункции

// Функция проверяет наличие узлов в планах обмена с Бухгалтерией предприятия.
//
Функция ОбменСБухгалтериейНастроен() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20 КАК ОбменУправлениеНебольшойФирмойБухгалтерия20
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка <> &ЭтотУзелБП20
	|	И ОбменУправлениеНебольшойФирмойБухгалтерия20.Код <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30 КАК ОбменУправлениеНебольшойФирмойБухгалтерия30
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка <> &ЭтотУзелБП30
	|	И ОбменУправлениеНебольшойФирмойБухгалтерия30.Код <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка <> &ЭтотУзелУФ
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.Код <> """"";
	
	Запрос.УстановитьПараметр("ЭтотУзелБП20", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП30", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУФ", ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел());
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// Функция возвращает значение настройки зачета авансов.
//
// Параметры:
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеНастройкиЗачетаАвансов() Экспорт
	
	ЗачитыватьАвтоматически = ПолучитьЗначениеНастройки("ЗачитыватьАвансыДолгиАвтоматически");
	Если НЕ ЗначениеЗаполнено(ЗачитыватьАвтоматически) Тогда
		ЗачитыватьАвтоматически = Константы.ЗачитыватьАвансыДолгиАвтоматически.Получить();
	КонецЕсли;
	
	Возврат ЗачитыватьАвтоматически;
	
КонецФункции // ПолучитьЗначениеНастройки()

// Функция определяет для какого режима работы приложения должны использоваться настройки синхронизации.
//
Функция НастройкиДляСинхронизацииВМоделиСервиса() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("СтандартныеПодсистемыВМоделиСервиса");

КонецФункции // СинхронизацияВМоделиСервиса()

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
// В случае вызова в неразделенной конфигурации возвращает Истина.
//
// Возвращаемое значение:
// Булево.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() ИЛИ ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	
КонецФункции

// Определяет использование функционально опции УчетПоЯчейкам
// Возвращает: 
// 			Истина - если включено
// 			Ложь  - если выключено
Функция ВключеноИспользованиеЯчеек() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСоСтавкамиНДС

// Получить значение ставки НДС.
//
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС.Ставка, 0);

КонецФункции // ПолучитьЗначениеСтавкиНДС()

// Функция возвращает ставку НДС - Без НДС.
//
Функция ПолучитьСтавкуНДСБезНДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.НеОблагается
	|	И СтавкиНДС.Ставка = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	ТекстБезНДС = """Без НДС""";
	ТекстНеОблагается = """Не облагается""";
	ТекстСообщения = НСтр("ru='Не найдена ставка %БезНДС%. Откройте список ставок НДС (Компания - Все справочники - Ставки НДС) и проверьте,
		|что у ставки %БезНДС% значение ставки = 0 и установлен флаг %НеОблагается%.
		|Закройте и заново запустите программу.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БезНДС%", ТекстБезНДС);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеОблагается%", ТекстНеОблагается);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСБезНДС()

// Функция возвращает ставку НДС - Ноль.
//
Функция ПолучитьСтавкуНДСНоль() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	(НЕ СтавкиНДС.НеОблагается)
	|	И СтавкиНДС.Ставка = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСНоль()

// Функция возвращает ставку НДС - Расчетная.
//
Функция ПолучитьСтавкуНДСРасчетная(СтавкаНДС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РассчетныеСтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК РассчетныеСтавкиНДС
	|ГДЕ
	|	РассчетныеСтавкиНДС.Расчетная
	|	И НЕ РассчетныеСтавкиНДС.НеОблагается
	|	И РассчетныеСтавкиНДС.Ставка = &Ставка";
	
	Запрос.УстановитьПараметр("Ставка", СтавкаНДС.Ставка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции // ПолучитьСтавкуНДСРасчетная()

// Функция возвращает ставку НДС по значению ставки (не расчетная).
//
Функция ПолучитьСтавкуНДС(ЗначениеСтавкиНДС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	НЕ СтавкиНДС.Расчетная
	|	И НЕ СтавкиНДС.НеОблагается
	|	И СтавкиНДС.Ставка = &Ставка";
	
	Запрос.УстановитьПараметр("Ставка", ЗначениеСтавкиНДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСРасчетная()

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСКонстантами

// Функция возвращает национальную валюту
//
Функция ПолучитьНациональнуюВалюту() Экспорт
	
	Возврат Константы.НациональнаяВалюта.Получить();
	
КонецФункции // ПолучитьНациональнуюВалюту()

// Функция возвращает валюту учета
//
Функция ПолучитьВалютуУчета() Экспорт
	
	Возврат Константы.ВалютаУчета.Получить();
	
КонецФункции // ПолучитьВалютуУчета()

// Функция символьное представление валюты
//
Функция ПолучитьСимвольноеПредставлениеВалюты(Валюта) Экспорт
	
	Возврат Валюта.СимвольноеПредставление;
	
КонецФункции // ПолучитьВалютуУчета()

// Получение значения константы.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Возврат Константы[ИмяКонстанты].Получить();

КонецФункции

#КонецОбласти
