                                      
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	ИДТерминала = Неопределено;
	Порт        = Неопределено;
	Скорость    = Неопределено;
	БитыДанных  = Неопределено;
	Четность    = Неопределено;
	СтопБиты    = Неопределено;
	УправлениеПотоком    = Неопределено;
	ШиринаСлипЧека       = Неопределено;
	КоличествоКопий      = Неопределено;
	ТекстШапки = Неопределено;
	ТекстПодвала = Неопределено;
	ДанныеМакетаСлипЧека = Неопределено;
	
	Параметры.Свойство("ИДТерминала", ИДТерминала);
	Параметры.Свойство("Порт", Порт);
	Параметры.Свойство("Скорость", Скорость);
	Параметры.Свойство("БитыДанных", БитыДанных);
	Параметры.Свойство("Четность", Четность);
	Параметры.Свойство("СтопБиты", СтопБиты);
	Параметры.Свойство("УправлениеПотоком", УправлениеПотоком);
	Параметры.Свойство("ШиринаСлипЧека", ШиринаСлипЧека);
	Параметры.Свойство("КоличествоКопий", КоличествоКопий);
	Параметры.Свойство("ТекстШапки", ТекстШапки);
	Параметры.Свойство("ТекстПодвала", ТекстПодвала);
	Параметры.Свойство("ДанныеМакетаСлипЧека", ДанныеМакетаСлипЧека);
	
	Если Не Параметры.Свойство("ИДТерминала")
	 Или Параметры.ИДТерминала  = Неопределено
	 Или Параметры.Порт         = Неопределено
	 Или Параметры.Скорость     = Неопределено 
	 Или Параметры.БитыДанных   = Неопределено
	 Или Параметры.Четность     = Неопределено
	 Или Параметры.СтопБиты     = Неопределено
	 Или Параметры.УправлениеПотоком = Неопределено
	 Или Параметры.ШиринаСлипЧека    = Неопределено
	 Или Параметры.КоличествоКопий   = Неопределено
	 Или Параметры.ТекстШапки   = Неопределено
	 Или Параметры.ТекстПодвала   = Неопределено
	 Или Параметры.ДанныеМакетаСлипЧека = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ОбъектДрайвера.Подключить(Параметры);
	Если Результат Тогда
		ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
		ПараметрыПодключения.Вставить("ТипТранзакции", "");
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	
	Попытка
		ОбъектДрайвера.Отключить();	
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Оплата платежной картой
	Если Команда = "AuthorizeSales" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                    Сумма, НомерКарты, ВыходныеПараметры);
	
	// Возврат платежа
	ИначеЕсли Команда = "AuthorizeRefund" Тогда
		Сумма           = ВходныеПараметры[0];
		НомерКарты      = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	  
	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	
	// Аварийная отмена платежа
	ИначеЕсли Команда = "EmergencyVoid" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                    Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Сверка итогов по картам
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		Результат = ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Преавторизация платежа
	ИначеЕсли Команда = "AuthorizePreSales" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];

		Результат = ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                            Сумма, НомерКарты, ВыходныеПараметры);

	// Завершение преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeCompletion" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ВходныеПараметры[2];
		НомерЧека      = ВходныеПараметры[3];

		Результат = ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                                    Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Отмена преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeVoidPreSales" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ВходныеПараметры[2];
		НомерЧека      = ВходныеПараметры[3];

		Результат = ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                                   Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Получение слип чека последней операции.
	ИначеЕсли Команда = "ПолучитьСтрокиСлипЧека" Тогда
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, Неопределено, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьНомерВерсии" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Функция возвращает, будет ли печать слип чеков на терминале.
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		Результат = ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция осуществляет авторизацию (оплату) по карте.
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, НомерКарты, ВыходныеПараметры)

	Результат = Истина;

	СсылочныйНомер = "";
	КодАвторизации = "";

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
		
	Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(НомерКарты, Сумма, СсылочныйНомер, КодАвторизации);
	
	Если Не Ответ Тогда
		ПараметрыПодключения.ТипТранзакции = "Отказ";
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");		
		КодОшибки = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Результат = Ложь;
	Иначе
		ПараметрыПодключения.КодОригинальнойТранзакции = СсылочныйНомер;
		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.НомерКвитанции);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить("");
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        Сумма, СсылочныйНомер, ОбъектДрайвера.НомерКвитанции, ВыходныеПараметры);
		КонецЕсли;	
	КонецЕсли;    
	Возврат Результат;
КонецФункции

// Функция осуществляет возврат платежа по карте.
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
    
	Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(НомерКарты,
	                                                     Сумма,
	                                                     СсылочныйНомер,
	                                                     НомерЧека);
	Если Не Ответ Тогда
		ПараметрыПодключения.ТипТранзакции = "Отказ";
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	Иначе
		ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.НомерСсылки;

		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить("");
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену платежа по карте.
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить платеж'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
	
	Ответ = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте("", Сумма, СсылочныйНомер);
	Если Не Ответ Тогда
		ПараметрыПодключения.ТипТранзакции = "Отказ";
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	Иначе
		ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.НомерСсылки;

		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	ОбъектДрайвера.НомерСсылки = ПараметрыПодключения.КодОригинальнойТранзакции;

	Ответ = ОбъектДрайвера.АварийнаяОтменаОперации("", Сумма, СсылочныйНомер, НомерЧека);
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	Ответ     = Неопределено;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Сверка итогов'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	Ответ = ОбъектДрайвера.ИтогиДняПоКартам();
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	Иначе
		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);		
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет преавторизацию по карте.
// 
Функция ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                        Сумма, НомерКарты, ВыходныеПараметры)

	Результат = Истина;

	СсылочныйНомер = Неопределено;
	НомерЧека      = Неопределено;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
    
	
	Ответ = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(НомерКарты,
	                                                      Сумма,
	                                                      СсылочныйНомер,
	                                                      НомерЧека);
	Если Не Ответ Тогда
		ПараметрыПодключения.ТипТранзакции = "Отказ";
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	Иначе
		ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.НомерСсылки;

		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить("");
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;


	Возврат Результат;

КонецФункции

// Функция осуществляет завершение преавторизации по карте.
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                                Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
    
	Ответ = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(НомерКарты,
	                                                                Сумма,
	                                                                СсылочныйНомер,
	                                                                НомерЧека);
	Если Не Ответ Тогда
		ПараметрыПодключения.ТипТранзакции = "Отказ";
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	Иначе
		ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.НомерСсылки;

		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену преавторизации по карте.
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить преавторизацию'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	Ответ = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(НомерКарты,
	                                                              Сумма,
	                                                              СсылочныйНомер);
	Если Не Ответ Тогда
		ПараметрыПодключения.ТипТранзакции = "Отказ";
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	Иначе
		ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.НомерСсылки;

		СлипЧек = Неопределено;
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции
 
// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	РезультатТеста = "";

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
	Результат = ОбъектДрайвера.ТестУстройства(РезультатТеста);

	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	ВыходныеПараметры.Добавить(РезультатТеста);

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции
 
// Заполняет массив строками слип чека для последующей печати на ФР.
//
Функция ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры)

	Результат = Истина;
	СлипЧек = ОбъектДрайвера.ТекстКвитанции;
	Возврат Результат;

КонецФункции

// Установить параметры драйвера.
//
Процедура УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры)

	// Параметры системы
	ОбъектДрайвера.ИДТерминала = Параметры.ИДТерминала;
	ОбъектДрайвера.Порт = Параметры.Порт;
	ОбъектДрайвера.Скорость = Параметры.Скорость;
	ОбъектДрайвера.КодВалюты = Параметры.КодВалюты;
	ОбъектДрайвера.КодСимволаОтреза = Параметры.КодСимволаОтреза;
	
	Если Параметры.Свойство("ТекстШапки") Тогда
		ОбъектДрайвера.ТекстШапки = Параметры.ТекстШапки;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекстПодвала") Тогда
		ОбъектДрайвера.ТекстПодвала = Параметры.ТекстПодвала;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает, будет ли печать слип чеков на терминале.
//
Функция ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	ВыходныеПараметры.Очистить();  
	ВыходныеПараметры.Добавить(Ложь);
	Возврат Результат;
	
КонецФункции

#КонецОбласти