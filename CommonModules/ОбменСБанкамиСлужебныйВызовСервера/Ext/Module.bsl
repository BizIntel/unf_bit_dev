////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиСлужебныйВызовСервера: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Анализирует ответ банка на отправку пакета.
// Если банк вернул ошибку, то вызывается исключение с текстом ошибки.
//
// Параметры:
//    ОтветБанка - ДвоичныеДанные - содержимое ответа банка;
//    ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - отправленный пакет обмена.
//
Процедура ОбработатьОтветБанкаНаОтправкуДокументаAsync(ОтветБанка, ПакетОбменСБанками) Экспорт
	
	СодержимоеФайла = Новый Соответствие;
	Чтение = Новый ЧтениеXML;
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ОтветБанка.Записать(ВремФайл);
	Чтение.ОткрытьФайл(ВремФайл);
	ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	Иначе
		ВерсияФормата = ResultBank.formatVersion;
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

	Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);

	Чтение.ОткрытьФайл(ВремФайл);
	
	ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
	ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.SendPacketResponse = Неопределено Тогда
			ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
			ПакетОбъект.ВнешнийИдентификатор = ResultBank.Success.SendPacketResponse.ID;
			ПакетОбъект.Записать();
		КонецЕсли
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		Чтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
		ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Чтение.Закрыть();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
КонецПроцедуры

// Проверяет выполнение фонового задания на сервере.
//
// Параметры:
//  ФоновоеЗаданиеИдентификатор - УникальныйИдентификатор - идентификатор фонового задания.
//  ИдентификаторФормы - ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, на которую будут выводиться сообщения об ошибках.
// 
// Возвращаемое значение:
// Структура - информация о фоновом задании. Содержит следующие поля:
//  * Завершено - Булево - признак завершения фонового задания;
//  * Успешно - Булево - признак, что при выполнении задания не произошло ошибки.
//
Функция ПроверитьВыполнениеФоновогоЗаданияНаСервере(ФоновоеЗаданиеИдентификатор, ИдентификаторФормы) Экспорт
	
	Задание = Новый Структура("Завершено, Успешно", Ложь, Ложь);
	Попытка
		Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
			Задание.Завершено = Истина;
			МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
				ФоновоеЗаданиеИдентификатор);
			Если МассивСообщений.Количество() Тогда
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					СообщениеОбОшибке.ИдентификаторНазначения = ИдентификаторФормы;
					СообщениеОбОшибке.Сообщить();
				КонецЦикла;
				Задание.Успешно = Ложь;
			Иначе
				Задание.Успешно = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно   = Ложь;
		Текст = НСтр("ru = 'При выполнении операции произошла ошибка.'");
		ВидОперации = НСтр("ru = 'Фоновое задание на сервере'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, Текст, 1);
	КонецПопытки;
	Возврат Задание;
	
КонецФункции

// Проверяет использования тестового режима обмена с банком.
//
// Возвращаемое значение:
//    Булево - признак использования тестового режима.
//
Функция ТестовыйРежим() Экспорт

	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);
	Возврат ИспользуетсяТестовыйРежим;
	
КонецФункции

// Сохраняет полученный пакет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//  ПакетBase64 - Строка - файл, полученный их банка в формате Base64;
//  ДанныеВозврата - Структура - возвращаемые параметры:
//     * ЕстьОшибка - Булево - Если значение Истина, то при распаковке пакета возникла ошибка;
//     * ДанныеЭП - Соответствие - данные электронных подписей для обработки на клиенте;
//         ** Ключ - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена;
//         ** Значение - Массив - подписи электронного документа.
//               *** ДвоичныеДанные - двоичные данные электронной подписи.
//
Процедура СохранитьПолученныйПакетЧерезВК(Знач НастройкаОбмена, Знач ПакетBase64, ДанныеВозврата) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПакета = Base64Значение(ПакетBase64);
	ДвоичныеДанныеПакета.Записать(ВремФайл);
	
	ОбменСБанкамиСлужебный.СохранитьПолученныйПакет(НастройкаОбмена, ВремФайл, ДанныеВозврата);
	
КонецПроцедуры

#Область ОперацииСоСтроками

// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла в формате UTF8 без BOM.
//
// Параметры:
//  СтрокаДанных  - Строка - строка для преобразования в BASE64.
//
// Возвращаемое значение:
//   Строка   - строка в BASE64.
//
Функция СтрокаBase64БезBOM(СтрокаДанных) Экспорт

	ВремФайл = ПолучитьИмяВременногоФайла();
	Текст = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.UTF8, , , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаФорматBase64 = Сред(СтрокаФорматBase64, 5); // убираем BOM
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, ""); // убираем ВК
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, ""); // убираем ПС
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат СтрокаФорматBase64;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИзИнформационнойБазы

// Получает значения реквизитов сертификата.
//
// Параметры:
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат;
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * Отпечаток - Строка - отпечаток сертификата;
//      * СертификатBase64 - Строка - сертификат в формате Base64;
//      * ДанныеСертификат - Произвольный - данные сертификата в формате хранения.
//
Процедура ПолучитьЗначенияРеквизитовСертификата(Знач Сертификат, ЗапрашиваемыеРеквизиты) Экспорт
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, "Отпечаток, ДанныеСертификата");
	Если ЗапрашиваемыеРеквизиты.Свойство("СертификатBase64") Тогда
		СертификатBase64 = СертификатВФорматеBase64(РеквизитыСертификата.ДанныеСертификата);
		РеквизитыСертификата.Вставить("СертификатBase64", СертификатBase64);
	КонецЕсли;
	Если ЗапрашиваемыеРеквизиты.Свойство("ДанныеСертификата") Тогда
		РеквизитыСертификата.ДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыСертификата);
	
КонецПроцедуры

// Только для внутреннего использования. Получает выписку банка в текстовом формате, а также массив ссылок на банковские счета организаций в выписке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками, Массив - содержит ссылку или массив ссылок на выписки банка.
//  СсылкаНаХранилище - Строка - содержит ссылку на хранилище данных;
//  МассивСчетов - Массив - содержит ссылки на банковские счета организации;
//  Организация - СправочникСсылка.Организация - (не заполнять) в этот параметр вернется значение организации из сообщения обмена;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - (не заполнять) в этот параметр вернется значение настройки обмена из сообщения обмена.
//
Процедура ПолучитьДанныеВыписки(Знач СообщениеОбмена, СсылкаНаХранилище, МассивСчетов = Неопределено, Организация = Неопределено, НастройкаОбмена = Неопределено) Экспорт
	
	Перем ТекстВыписки;
	
	Если Не УстановленныеПодписиВалидны(СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Организация, НастройкаОбмена, ВидЭД");
	
	Если НЕ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		Возврат
	КонецЕсли;
	
	Организация  = РеквизитыСообщения.Организация;
	НастройкаОбмена = РеквизитыСообщения.НастройкаОбмена;
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(СообщениеОбмена, СсылкаНаХранилище, МассивСчетов);
	
КонецПроцедуры

// Получает двоичные данные прикрепленного с объекту присоединенного файла.
//
// Параметры:
//    СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы.
//
// Возвращаемое значение:
//    ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ДвоичныеДанныеПрисоединенногоФайла(Знач СсылкаНаОбъект) Экспорт
	
	МассивФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(СсылкаНаОбъект, МассивФайлов);
	Если НЕ МассивФайлов.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл объекта: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СсылкаНаОбъект);
		Операция = НСтр("ru = 'Получение двоичных данных присоединенного файла'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстОшибки, 1, СсылкаНаОбъект);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(МассивФайлов[0]);
		
КонецФункции

// Получает значения реквизитов сертификата.
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмен;
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * ИмяВнешнегоМодуля - Строка - имя внешней компоненты или дополнительной обработки;
//      * СертификатБанкаBase64 - Строка - сертификат банка в формате Base64;
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка;
//      * АутентификацияПоСертификату - Булево - признак аутентификации по сертификату;
//      * ИспользуетсяКриптография - Булево - признак использования криптографии;
//      * ВерсияФормата - Булево - признак использования криптографии;
//      * АдресСервера - Строка - адрес сервера банка;
//      * ИдентификаторОрганизации - Строка - идентификатор организации;
//      * ИспользоватьЖурналирование - Булево - признак журналирования обмена;
//      * КаталогДляЖурналирования - Строка - каталог для записи файлов журнала;
//      * Недействительна - Булево - признак отключенной настройки обмена.
//
Процедура ПолучитьЗначенияРеквизитовНастройкиОбмена(Знач НастройкаОбмена, ЗапрашиваемыеРеквизиты) Экспорт
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"ИмяВнешнегоМодуля, СертификатБанка, ПрограммаБанка, АутентификацияПоСертификату, ИспользуетсяКриптография,
		|ВерсияФормата, АдресСервера, ИдентификаторОрганизации, Недействительна");
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыНастройкиОбмена);
	
	Если ЗапрашиваемыеРеквизиты.Свойство("ИспользоватьЖурналирование") Тогда
		ПараметрыЖурналирования = ПараметрыЖурналирования(НастройкаОбмена);
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, ПараметрыЖурналирования);
	КонецЕсли;
	
	Если ЗапрашиваемыеРеквизиты.Свойство("СертификатБанкаBase64") Тогда
		ЗапрашиваемыеРеквизиты.СертификатБанкаBase64 = Base64Строка(РеквизитыНастройкиОбмена.СертификатБанка.Получить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискОбъектов

// Определяет документ, который имеет отражение в учете по указанному сообщению обмену.
//
// Параметры:
//    СообщениеОбмена - СправочникСсылка.СообщенияОбменСБанками - сообщение обмена.
//
// Возвращаемое значение:
//    ДокументСсылка - ссылка на объект информационной базы.
//
Функция ДокументУчета(Знач СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияОбменСБанками.СсылкаНаОбъект
	               |ИЗ
	               |	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	               |ГДЕ
	               |	СостоянияОбменСБанками.СообщениеОбмена = &СообщениеОбмена";
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СсылкаНаОбъект;
	КонецЕсли;
	
КонецФункции

// Определяет было ли получено извещение по отправленному запросу.
//
// Параметры:
//  СообщениеЗапрос - ДокументСсылка.СообщенияОбменСБанками - отправленный в банк запрос;
//  ЕстьОшибка - Булево - признак, что банк не принял запрос и вернул ошибку.
//
// Возвращаемое значение:
//  Булево - если извещение было получено, тогда Истина.
//
Функция ПолученоИзвещениеПоЗапросу(СообщениеЗапрос, ЕстьОшибка) Экспорт
	
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "ВидЭД");
	
	Извещение = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда 
		СтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "Статус");
		Если СтатусЭД = Перечисления.СтатусыОбменСБанками.ПолученоИзвещение Тогда 
			Возврат Истина;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СообщениеОбменСБанками.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		               |ГДЕ
		               |	СообщениеОбменСБанками.СообщениеРодитель = &СообщениеРодитель";
		
		Запрос.УстановитьПараметр("СообщениеРодитель", СообщениеЗапрос);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Извещение = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Извещение) Тогда 
		
		РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СообщениеЗапрос, "ВидЭД, ПричинаОтклонения, Статус");
		Если РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд
				И РеквизитыСообщенияОбмена.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			ЕстьОшибка = Истина;
			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РеквизитыСообщенияОбмена.ПричинаОтклонения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе // проверка синхронного отклонения запроса
		ЗапросОшибки = Новый Запрос;
		ЗапросОшибки.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СообщениеОбменСБанками.Ссылка,
		|	СообщениеОбменСБанками.ПричинаОтклонения
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|ГДЕ
		|	СообщениеОбменСБанками.Ссылка = &Запрос
		|	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОтклоненБанком)";
		ЗапросОшибки.УстановитьПараметр("Запрос", СообщениеЗапрос);
		Результат = ЗапросОшибки.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЕстьОшибка = Истина;
			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ПричинаОтклонения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Извещение);

КонецФункции

#КонецОбласти

#Область ОперацииСВК

// Получает актуальную версию внешней компоненты.
//
// Параметры:
//  ИмяВнешнегоМодуля - Строка - название внешнего модуля. Производит также запуск обновления ВК в фоновом режиме для "коробки".
// 
// Возвращаемое значение:
// Строка - актуальная версия внешней компоненты.
//
Функция ВерсияАктуальнойВК(ИмяВнешнегоМодуля) Экспорт
	
	ДанныеВнешнейКомпоненты = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(ИмяВнешнегоМодуля);
	
	Если ДанныеВнешнейКомпоненты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
	
		НаименованиеЗадания = НСтр("ru = '1С:ДиректБанк: Обновление внешней компоненты (%1).'");
		НаименованиеЗадания = СтрШаблон(НаименованиеЗадания, ИмяВнешнегоМодуля);
	
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ДанныеВнешнейКомпоненты.ДвоичныеДанныеМодуля);
	
		ФоновыеЗадания.Выполнить("ОбменСБанкамиСлужебный.ОбновитьВнешнююКомпоненту", МассивПараметров, , НаименованиеЗадания);
	КонецЕсли;
	
	Возврат ДанныеВнешнейКомпоненты.Версия;
	
КонецФункции

// Скачивает внешнюю компоненту с сервера банка в фоновом процессе.
//
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы,
//                           из которой выполняется запуск длительной операции.
//  URL - Строка - адрес, с которого скачивается внешняя компонента.
// 
// Возвращаемое значение:
// Структура - результат выполнения фонового задания. Содержит следующие поля:
//   * Завершено - Булево - задание было завершено;
//   * Успешно - Булево - признак выполнения задания без ошибок;
//   * Идентификатор - УникальныйИдентификатор - идентификатор фонового задания;
//   * АдресХранилища - Строка - адрес хранилища, в которое помещается результат выполнения метода.
//
Функция СкачатьВКНаСервере(Знач УникальныйИдентификатор, Знач URL) Экспорт
	
	Задание = Новый Структура(
		"Завершено, Успешно, Идентификатор, АдресХранилища", Ложь, Неопределено, Неопределено);
	
	Попытка
		НазваниеЗадания = НСтр("ru = '1С:ДиректБанк: Скачивание внешней компоненты с сервера банка'");
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, "Справочники.НастройкиОбменСБанками.СкачатьВКССервераБанка", URL, НазваниеЗадания);
		Задание.АдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		Задание.Идентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
				РезультатФоновогоЗадания.ИдентификаторЗадания);
			Если МассивСообщений.Количество() Тогда
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					СообщениеОбОшибке.Сообщить();
				КонецЦикла;
				Задание.Успешно = Ложь;
			Иначе
				Задание.Успешно = Истина;
			КонецЕсли;
			Задание.Завершено = Истина;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно = Ложь;
		Текст = НСтр("ru = 'Не удалось скачать внешний модуль с сервера банка.'");
		ВидОперации = НСтр("ru = 'Скачивание внешней компоненты с сервера банка'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Текст, 1);
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

// Сохраняет внешнюю компоненту банка в информационной базе.
//
// Параметры:
//  АдресФайла - Строка - адрес временного хранилища, содержащий данные внешней компоненты.
//
Процедура СохранитьВКБанка(Знач АдресФайла) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Информация = ОбменСБанкамиСлужебный.ИнформацияОВКБанка(АдресФайла);
		ОбменСБанкамиСлужебный.СохранитьВКБанка(АдресФайла, Информация);
	КонецЕсли;
	
КонецПроцедуры

// Создает пакет для передачи через внешнюю компоненту
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена;
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение, помещаемое в пакет;
//  СвойстваСертификатов - Соответствие - свойства сертификатов не x509:
//    * Ключ - Строка - отпечаток сертификата;
//    * Значение - Структура - свойства сертификата:
//          ** СерийныйНомер - Строка - серийный номер сертификата;
//          ** ИмяИздателя - Строка - имя издателя.
//
// Возвращаемое значение:
//   ДокументСсылка.ПакетОбменСБанками - ссылка на созданный пакет ЭД:
//   Неопределено - при создании пакета произошла ошибка.
//
Функция СоздатьПакетВК(НастройкаОбмена, СообщениеОбмена, СвойстваСертификатов = Неопределено) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(СообщениеОбмена);
	
	ТекстСообщения = "";
	
	ПакетОбменСБанками = Неопределено;
	ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщенийОбмена, ПакетОбменСБанками);
	Если ПакетОбменСБанками = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЕстьОшибка = Ложь;
	ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(ПакетОбменСБанками, ЕстьОшибка, СвойстваСертификатов);
	
	Если ЕстьОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьСтатусыСообщенийОбмена(МассивСообщенийОбмена, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	
	Возврат ПакетОбменСБанками;
	
КонецФункции

// Получает параметры для установки соединения через ВК.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена.
// 
// Возвращаемое значение:
// Структура - параметры создания соединения:
//   * ИдентификаторОрганизации - Строка - уникальный идентификатор организации на сервере банка;
//   * БИК - Строка - БИК банка;
//   * КлючУникальности - Строка - ключ уникальности клиента для сбора статистики;
//
Функция ПараметрыСоединенияВК(НастройкаОбмена) Экспорт
	
	ПараметрыСоединения = Новый Структура();
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "ИдентификаторОрганизации, Банк, Организация");
	ПараметрыСоединения.Вставить("ИдентификаторОрганизации", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыНастройкиОбмена.Банк, "Код");
	ПараметрыСоединения.Вставить("БИК", БИК);
	РеквизитыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация);
	ПараметрыСоединения.Вставить("КлючУникальности", РеквизитыОрганизации.ИНН + "_" + БИК);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

// Получает информацию о программе для инициализации внешней компоненты.
// 
// Возвращаемое значение:
// Структура - информация о программе, содержит поля:
//   ВерсияФормата - Строка - версия текущей схемы обмена;
//   СинонимКонфигурации - Строка - синоним имени (Имя) конфигурации;
//   ВерсияКонфигурации - Строка - Версия конфигурации;
//   ВерсияПриложения - Строка - Содержит версию используемого 1С:Предприятия 8;
//   ИдентификаторКлиента - Строка -  уникальный идентификатор клиента;
//   ИнформацияПрограммыПросмотра - Строка - Информация о веб-браузере (userAgent);
//   Язык - Строка - Код локализации (язык, страна), установленный для данной информационной базы.
//
Функция ИнформацияОПрограммеДляВК() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Информация = Новый Структура;
	Информация.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Информация.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Информация.Вставить("ВерсияПриложения", СистемнаяИнформация.ВерсияПриложения);
	Информация.Вставить("ИдентификаторКлиента", СистемнаяИнформация.ИдентификаторКлиента);
	Информация.Вставить("ИнформацияПрограммыПросмотра", СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	Информация.Вставить("Язык", КодЛокализацииИнформационнойБазы());
	
	Возврат СериализованныеДанные(Информация);
	
КонецФункции

// Получает информацию о внешней компоненте банка.
//
// Параметры:
//  АдресВнешнейКомпоненты - Строка - адрес временного хранилища, содержащий двоичные данные ВК.
// 
// Возвращаемое значение:
//  Структура - информация о ВК. Содержит следующие поля:
//     * ИмяМодуля - Строка - регистрируемое название модуля в ОС;
//     * Название - Строка - название модуля для вывода пользователю;
//     * Версия - Строка - версия модуля;
//     * ВерсияВБазе - Строка - версия модуля, которая сохранена в ИБ;
//     * URLВК - Строка - адрес в интернете для скачивания компоненты.
//
Функция ИнформацияОВКБанка(АдресВнешнейКомпоненты) Экспорт
	
	ДвоичныеДанныеВК = ПолучитьИзВременногоХранилища(АдресВнешнейКомпоненты);
	ВремФайл = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанныеВК.Записать(ВремФайл);
	
	ВремКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(Строка(Новый УникальныйИдентификатор));
	
	ЧтениеФайла = Новый ЧтениеZipФайла(ВремФайл);
	НайденаИнформация = Ложь;
	
	Для Каждого Элемент Из ЧтениеФайла.Элементы Цикл
		Если ВРег(Элемент.Имя) = "INFO.XML" Тогда
			НайденаИнформация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденаИнформация Тогда
		Операция = НСтр("ru = 'Чтение информации о файле внешнего модуля.'");
		ТекстОшибки = НСтр("ru = 'В архиве внешней компоненты отсутствует файл INFO.XML'");
		ТекстСообщения = НСтр("ru = 'При подключении внешнего модуля произошла ошибка.
									|Загрузите актуальную версию внешнего модуля.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, 1);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеФайла.Извлечь(Элемент, ВремКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ВремКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВремКаталог);
	
	ФайлИнформации = ВремКаталог + Элемент.Имя;
	
	СтруктураВозврата = ОбменСБанкамиСлужебный.ПараметрыВК(ФайлИнформации);
	
	ЧтениеФайла.Закрыть();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает адрес компоненты для работы с банком.
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//    ИмяМодуля - Строка - название внешнего модуля обмена.
//
// Возвращаемое значение:
//    Адрес - НавигационнаяСсылка или АдресВременногоХранилища - адрес данных внешней компоненты.
//
Функция АдресВнешнейКомпонентыБанка(НастройкаОбмена, ИмяМодуля) Экспорт
	
	Если ИмяМодуля = "VPNKeyTLS" Тогда
		Возврат ПолучитьНавигационнуюСсылку(НастройкаОбмена, "ВнешняяКомпонента");
	ИначеЕсли ИмяМодуля = "SBRFServiceProxy" Тогда
		Возврат "Обработка.ОбменСБанками.Макет.SBRFServiceProxy";
	Иначе
		ДанныеКомпоненты = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(ИмяМодуля);
		Возврат ПоместитьВоВременноеХранилище(ДанныеКомпоненты.ДвоичныеДанныеМодуля);
	КонецЕсли;

КонецФункции

// Возвращает адрес временного хранилища внешней компоненты.
// 
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//
// Возвращаемое значение:
// Строка - адрес во временном хранилище внешней компоненты.
//
Функция АдресВнешнейКомпоненты(НастройкаОбмена) Экспорт

	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Возврат ПолучитьНавигационнуюСсылку(НастройкаОбмена, "ВнешняяКомпонента");
	Иначе
		НазваниеМакета = "SBRFServiceProxy";
	КонецЕсли;
	МакетВК = Обработки.ОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Возврат ПоместитьВоВременноеХранилище(МакетВК, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ОперацииСЭлектроннымДокументом

// Определяет можно ли отклонить этот ЭД.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - - сообщение обмена с банком.
//
// Возвращаемое значение:
//  Булево - Если можно отклонять, тогда Истина.
//
Функция МожноОтклонитьЭтотЭД(СообщениеОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Статус, ВидЭД");
		
	Если (РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
			ИЛИ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование)
		И (РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
			ИЛИ РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.Утвержден
			ИЛИ РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.Подписан
			ИЛИ РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить;
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на ЭД.
//  УдалятьСтаруюВерсию - Булево - признак того что необходимо удалять старую версию сообщения.
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, СообщениеОбмена = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияОбменСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		НоваяЗаписьНабора.СообщениеОбмена = ?(СообщениеОбмена = Неопределено,
			Документы.СообщениеОбменСБанками.ПустаяСсылка(), СообщениеОбмена);
		НоваяЗаписьНабора.Состояние = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаОбъект);
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюСообщения(НоваяЗаписьНабора);
		КонецЕсли;
		НоваяЗаписьНабора.Состояние = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаОбъект);
		НоваяЗаписьНабора.СообщениеОбмена =?(СообщениеОбмена = Неопределено, Документы.СообщениеОбменСБанками.ПустаяСсылка(),
			СообщениеОбмена);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив - Массив ссылок на документы, для которых надо определить последовательность действий;
//  МассивОтпечатковСертификатов - Массив - Массив доступных сертификатов;
//  Действия - Строка - Представление необходимых действий;
//  ДопПараметры - Структура - Дополнительные параметры, определяющие последовательность действий с электронными документами;
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка сообщение обмена;
//  СоотвСертификатовИПаролей - Соответствие - ключ - СертификатЭП, значение - пароль к сертификату.
//
// Возвращаемое значение:
//  Структура - содержит следующие поля:
//    * КоличествоНовыхЭД - Число - количество сформированных электронных документов;
//    * КоличествоУтвержденныхЭД - Число - количество утвержденных электронных документов;
//    * КолПодписанных - Число - количество подписанных электронных документов;
//    * КолПодготовленных - Число - количество подготовленных электронных документов;
//    * КолОтправленных - Число - количество отправленных электронных документов;
//    * МассивНовыхСообщенийОбмена - Массив - содержит ссылки на сформированные электронные документы;
//    * СоотвСертификатовИМассивовСообщенийОбменаКПодписи - Соответствие - содержит следующие данные:
//      ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат электронной подписи
//      ** Значение - Массив - содержит ссылки на сообщения обмена для подписи на клиенте
//    * СтруктураКОтправке - Структура - содержит поля:
//      ** БезПодписи - Массив - сообщения обмена, которые не требуется подписывать;
//      ** СПодписью - Массив -   сообщения обмена, которые требуется подписать;
//      ** САвторизацией - Соответствие - (ключ - НастройкаОбмена, значение - МассивСообщенийОбмена к отправке).
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект, Знач МассивОтпечатковСертификатов, Знач Действия, ДопПараметры, Знач СообщениеОбмена, Знач СоотвСертификатовИПаролей) Экспорт
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
			"РАБОТАСБАНКАМИ");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	
	МассивОтпечатков = Новый Массив;
	МассивОтпечатковКлиент = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковКлиент, МассивОтпечатковСертификатов);
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать")
		ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
				МассивОтпечатковСертификатовНаСервере = Новый Массив;
			КонецПопытки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
		КонецЕсли;
		
		ТаблицаДоступныхСертификатов = ОбменСБанкамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(
			МассивОтпечатковСертификатов);

		МассивОтпечатков = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Отпечаток");

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СообщениеОбмена) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(СообщениеОбмена) И (СообщениеОбмена.Направление = Перечисления.НаправленияЭД.Входящий)) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(СообщениеОбмена) <> Тип("Массив") И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	// Ключи структуры возврата:
	// ВыполнятьКриптооперацииНаСервере - тип Булево;
	// КоличествоНовыхЭД, КоличествоУтвержденныхЭД, КолПодписанных, КолПодготовленных, КолОтправленных - тип Число;
	// МассивНовыхСообщенийОбмена - тип Массив;
	// СоотвСертификатовИМассивовСообщенийОбменаКПодписи - тип Соответствие (ключ - СертификатЭП,
	//   значение - МассивСообщенийОбмена к подписи на клиенте)
	// СтруктураКОтправке - тип Структура с ключами:
	//                   БезПодписи, СПодписью - тип Массив, МассивСообщенийОбмена (к подготовке) к отправке,
	//                        соответственно не подписываемые и подписываемые;
	//                   САвторизацией - тип Соответствие (ключ - НастройкаОбмена, значение - МассивСообщенийОбмена к отправке).
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("ОтправленныеДокументы", Новый Массив); // документы-владельцы отправленных электронных документов.
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	КолНовыхЭД = 0;
	Если СообщениеОбмена = Неопределено И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
				СсылкаНаОбъект, Истина, Неопределено, , ВидЭД);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
		
		Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
			ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
			ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
			|СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
			|ИЛИ (СостоянияЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НеСформирован)
			|		ИЛИ СостоянияЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Отклонен)
			|		ИЛИ СостоянияЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОшибкаПередачи))";
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивОбъектов = ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД");
			МассивНовыхСообщенийОбмена = ОбменСБанкамиСлужебный.СформироватьСообщенияОбмена(
				МассивОбъектов, НастройкиОбъектов);
			КолНовыхЭД = МассивНовыхСообщенийОбмена.Количество();
		КонецЕсли;
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхСообщенийОбмена", МассивНовыхСообщенийОбмена);
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых сообщений обмена, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	СообщенияОбмена.Ссылка,
			|	СообщенияОбмена.ВидЭД,
			|	СообщенияОбмена.Банк,
			|	СообщенияОбмена.Направление,
			|	СообщенияОбмена.Организация,
			|	СообщенияОбмена.НастройкаОбмена,
			|	СообщенияОбмена.СообщениеРодитель,
			|	СообщенияОбмена.Статус
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	Документ.СообщениеОбменСБанками КАК СообщенияОбмена
			|ГДЕ
			|	СообщенияОбмена.Ссылка В(&МассивСсылок)";
		Если ТипЗнч(СообщениеОбмена) <> Тип("Массив") Тогда
			МассивСсылокСообщенийОбмена = Новый Массив;
			МассивСсылокСообщенийОбмена.Добавить(СообщениеОбмена);
		Иначе
			МассивСсылокСообщенийОбмена = СообщениеОбмена;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокСообщенийОбмена);
	Иначе
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	СообщенияОбмена.Ссылка,
			|	СообщенияОбмена.ВидЭД,
			|	СообщенияОбмена.Банк,
			|	СообщенияОбмена.Направление,
			|	СообщенияОбмена.Организация,
			|	СообщенияОбмена.НастройкаОбмена,
			|	СообщенияОбмена.СообщениеРодитель,
			|	СообщенияОбмена.Статус
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеОбменСБанками КАК СообщенияОбмена
			|		ПО СостоянияЭД.СообщениеОбмена = СообщенияОбмена.Ссылка
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";

		Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(СообщенияОбмена.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	КонецЕсли;
	
	// Утверждение ЭД:
	
	КолУтвержденныхЭД = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		ТекстЗапроса =
			"
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ЭД.Ссылка КАК СсылкаНаСообщениеОбмена,
			|	ВТ_ЭД.Статус,
			|	ВТ_ЭД.ВидЭД,
			|	ВТ_ЭД.НастройкаОбмена
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|ГДЕ
			|	ВТ_ЭД.Статус В(&МассивСтатусов)";
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.Текст = ТекстОсновногоЗапроса + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КолУтвержденныхРанее = 0;
		
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			Если ТекСтрока.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
				ИЛИ ТекСтрока.Статус = Перечисления.СтатусыОбменСБанками.Получен Тогда
				СсылкаНаСообщениеОбмена = ТекСтрока.СсылкаНаСообщениеОбмена;
				УстановитьПризнакУтвержден(СсылкаНаСообщениеОбмена);
				ТекСтрока.Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаСообщениеОбмена, "Статус");
				Если ТекСтрока.Статус = Перечисления.СтатусыОбменСБанками.Утвержден Тогда
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
				КонецЕсли;
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
		КонецЦикла;
	
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
	КонецЕсли;
	
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для Каждого Элемент Из СертификатыСПаролями Цикл
		Структура = Новый Структура("ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату",
			Элемент.Значение, Истина, Ложь);
		СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
	КонецЦикла;
	
	СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке = Новый Соответствие;
	СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить(
		"СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке", СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке);
	СтруктураВозврата.Вставить("СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией",
		СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией);
	СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату",
		СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату);
		
	//////////////////////////////
	// Подписание электронных документов
	
	// Каждый подписанный ЭД должен пройти процесс отправки, который состоит из подготовки к отправке (формирование ПЭД)
	// и непосредственно отправки ПЭД (если настроена НемедленнаяОтправка). Подготовка (отправка) подразделяется на
	// отправку не подписываемых ЭД, отправку подписываемых ЭД, отправку с аутентификацией.
	// В связи с вышеописанным, сформируем для передачи на клиента структуру с массивами сообщений обмена к отправке:
	// Структура в первых 2-х элементах (БезПодписи, СПодписью) содержит массивы сообщений обмена к отправке.
	// В 3-м элементе - соответствие: ключ - настройка обмена, значение - массив сообщений обмена,
	// отправляемый в рамках настройки.
	// 3-й элемент заполняется только если в системе настроена немедленная отправка ЭД.
	СтруктураКОтправке = Новый Структура;
	СтруктураКОтправке.Вставить("БезПодписи", Новый Массив);
	СтруктураКОтправке.Вставить("СПодписью", Новый Массив);
	СтруктураКОтправке.Вставить("САвторизациейЛогинПароль", Новый Соответствие);
	СтруктураКОтправке.Вставить("ЧерезТокенСбербанка", Новый Массив);
	СтруктураКОтправке.Вставить("ЧерезВК", Новый Соответствие);
	
	ДобавитьОтпечаткиСертификатовСбербанка(МассивОтпечатков);
	Запрос.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
	
	КолПодписанных = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		// Для подписания формируем выборку:
		// В виртуальную таблицу выбираем сообщения обмена, которые надо и есть возможность подписать,
		// т.е. отвечающие следующим условиям:
		// - сообщение обмена входит в список к обработке (либо передан как параметр "СообщениеОбмена",
		// либо получен из Регистра "СостоянияОбменСБанками" отобранного по массиву владельцев, параметр "МассивСсылокНаОбъект");
		// - статус либо "Утвержден", либо "Частично подписан";
		// - ЭД надо подписывать (определяется по настройке обмена, указанному в сообщении обмена): если ЭД - исходящий, то в
		//     настройке обмена отмечен для обмена вид ЭД, совпадающий с видом подписываемого ЭД и отмечена
		//     опция "Использовать ЭП";
		// - существует сертификат для подписи сообщения обмена:
		//     - в сертификате отмечен вид ЭД, соответствующий виду подписываемого ЭД;
		//     - сертификат действует (не помечен на удаление, не отозван);
		//     - доступен для использования (не ограничен по пользователям, либо текущий пользователь совпадает с указанным в
		//         сертификате, а так же, отпечаток сертификата входит в массив отпечатков полученных из личного хранилища
		//         клиента либо сервера, в зависимости от настроек использования криптографии);
		//     -  сертификат должен быть добавлен в таб.часть "СертификатыПодписейОрганизации" настройки обмена.
		//
		// Если все описанные условия выполняются, то Сообщение обмена попадает в виртуальную таблицу,
		// туда же помещаются все необходимые для подписания ЭД, данные: сертификат подписи,
		// параметры сертификата, уже установленные в ЭД подписи, настройка обмена.
		// Затем из временной таблицы делается 3 выборки: Сообщения обмена на подпись, сертификаты для подписания ЭД,
		// установленные подписи.
		// Из первой выборки берем подписываемое сообщение обмена, из второй и третьей - выбираем сертификаты по условиям:
		// его отпечатка не должно быть среди уже установленных в ЭД подписей.
		
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.СертификатПодписи,
		|	ВложенныйЗапрос.Отпечаток,
		|	ВложенныйЗапрос.Отозван,
		|	ВложенныйЗапрос.ДанныеСертификата,
		|	ВложенныйЗапрос.ОрганизацияВСертификате,
		|	ВложенныйЗапрос.ВидДокумента,
		|	ВложенныйЗапрос.ПрограммаБанка,
		|	ВложенныйЗапрос.Наименование,
		|	ВложенныйЗапрос.СсылкаНаСообщениеОбмена
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		Сертификаты.Ссылка КАК СертификатПодписи,
		|		Сертификаты.Отпечаток КАК Отпечаток,
		|		Сертификаты.Отозван КАК Отозван,
		|		Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|		Сертификаты.Организация КАК ОрганизацияВСертификате,
		|		ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|		ПрограммыБанков.ПрограммаБанка КАК ПрограммаБанка,
		|		Сертификаты.Наименование КАК Наименование,
		|		ВТ_ЭД.Ссылка КАК СсылкаНаСообщениеОбмена
		|	ИЗ
		|		РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ПО (ВидыЭДЭП.Использовать)
		|				И (ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСертификатахОбменСБанками КАК ПрограммыБанков
		|				ПО (ПрограммыБанков.СертификатЭП = Сертификаты.Ссылка)
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП
		|				ИЗ
		|					ВТ_ЭД КАК ВТ_ЭД
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|						ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка) КАК СертификатыИзНастроек
		|				ПО Сертификаты.Ссылка = СертификатыИзНастроек.СертификатЭП
		|			ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
		|	ГДЕ
		|		НЕ Сертификаты.Отозван
		|		И НЕ Сертификаты.ПометкаУдаления
		|		И &ПроверкаПользователя
		|		И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Сертификаты.Ссылка,
		|		Сертификаты.Отпечаток,
		|		Сертификаты.Отозван,
		|		Сертификаты.ДанныеСертификата,
		|		Сертификаты.Организация,
		|		ВидыЭДЭП.ВидЭД,
		|		ПрограммыБанков.ПрограммаБанка,
		|		Сертификаты.Наименование,
		|		ВТ_ЭД.Ссылка
		|	ИЗ
		|		РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ПО (ВидыЭДЭП.Использовать)
		|				И (ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСертификатахОбменСБанками КАК ПрограммыБанков
		|				ПО (ПрограммыБанков.СертификатЭП = Сертификаты.Ссылка)
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП
		|				ИЗ
		|					ВТ_ЭД КАК ВТ_ЭД
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|						ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка) КАК СертификатыИзНастроек
		|				ПО Сертификаты.Ссылка = СертификатыИзНастроек.СертификатЭП
		|			ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
		|	ГДЕ
		|		НЕ Сертификаты.Отозван
		|		И НЕ Сертификаты.ПометкаУдаления
		|		И &ПроверкаПользователя
		|		И ПрограммыБанков.ПрограммаБанка В(&СписокПрограммБанков)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаСообщениеОбмена,
		|	НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
		|	ВТ_Сертификаты.Отпечаток,
		|	ВТ_Сертификаты.Отозван,
		|	ВТ_ЭД.Организация,
		|	ВТ_ЭД.Банк,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И ВТ_ЭД.НастройкаОбмена.АутентификацияПоСертификату = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАутентификацияЛогинПароль,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И НастройкиОбмена.АутентификацияПоСертификату = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАутентификацияПоСертификату,
		|	НастройкиОбмена.ПрограммаБанка,
		|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_Сертификаты.ДанныеСертификата
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбмена
		|			ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбмена.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменаИсходящие
		|			ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаИсходящие.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭД_ЭП
		|			ПО ВТ_ЭД.Ссылка = ЭД_ЭП.Ссылка.ВладелецФайла
		|		ПО (ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента)
		|			И ВТ_Сертификаты.СсылкаНаСообщениеОбмена = ВТ_ЭД.Ссылка
		|ГДЕ
		|	НастройкиОбменаИсходящие.ИспользоватьЭП
		|	И НЕ НастройкиОбмена.ПометкаУдаления
		|	И НЕ НастройкиОбмена.Недействительна
		|	И ВТ_ЭД.Статус В(&МассивСтатусов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.СсылкаНаСообщениеОбмена,
		|	ВТ.Организация,
		|	ВТ.Банк,
		|	ВТ.НастройкаОбмена,
		|	ВТ.ВидЭД,
		|	ВТ.ПрограммаБанка,
		|	ВТ.ТребуетсяАутентификацияЛогинПароль,
		|	ВТ.ТребуетсяАутентификацияПоСертификату
		|ИЗ
		|	ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаСообщениеОбмена,
		|	ВТ.СертификатПодписи,
		|	ВТ.Отпечаток,
		|	ВТ.Отозван,
		|	ВТ.Организация,
		|	ВТ.ДанныеСертификата КАК ДанныеСертификата,
		|	ВТ.ПрограммаБанка,
		|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
		|	ВТ.ТребуетсяАутентификацияЛогинПароль
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаСообщениеОбмена,
		|	ВТ.УстановленныеПодписи,
		|	ВТ.Организация
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ВТ.УстановленныеПодписи = Сертификаты.Отпечаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
		
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		
		СписокПрограммБанков = Новый Массив;
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку);
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.СбербанкОнлайн);
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.ОбменЧерезВК);

		Запрос.УстановитьПараметр("СписокПрограммБанков", СписокПрограммБанков);
		
		Запрос.Текст = ТекстОсновногоЗапроса +
			";
			 |////////////////
			 |" + ТекстЗапроса;
			 
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		КонецЕсли;

		Результат = Запрос.ВыполнитьПакет();
		ДоступныеСертификаты = Результат[2].Выгрузить();
		ТЗ_Сертификатов = Результат[4].Выгрузить();
		ТЗ_УстановленныхПодписей = Результат[5].Выгрузить();
		Выборка = Результат[3].Выбрать();
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("СсылкаНаСообщениеОбмена");
		ТЗ_ЭД.Колонки.Добавить("НастройкаОбмена");
		ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
		
		Если ТЗ_Сертификатов.Количество() = 0 И ЗначениеЗаполнено(СообщениеОбмена) Тогда
			ОшибкаНастройкиКриптографии = Ложь;
			ОшибкаНастройкиСертификата = Ложь;
			Если ДоступныеСертификаты[0].Количество > 0 Тогда
				НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
				ШаблонСообщения = НСтр("ru = 'В настройке обмена: %1
											|не найден ни один из доступных сертификатов ЭП.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НастройкаОбмена);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		// Для связки Сообщения, НастройкиОбмена и Сертификата, в числе прочих нужно соответствие,
		// ключом которого является ссылка на СообщениеОбмена, значение - Настройка обмена.
		// Например, 2 Сообщения обмена могут быть подписаны 2-я сертификатами (т.е пользователь должен выбрать,
		// каким сертификатом он будет подписывать эти сообщения обмена),
		// при этом сообщения обмена относятся к разным настройкам обмена, если пользователь отказался подписывать
		// эти сообщения обмена, то это сообщение обмена нужно удалить из массива на отправку,
		// для этого найдем его настройку обмена в соответствии (СообщениеОбмена - НастройкаОбмена),
		// по настройке обмена найдем это сообщение обмена в
		// соответствии НастройкиОбмена - Массивы сообщений обмена к отправке и удалим из массива нужное сообщение обмена.
		СоотвСообщенийОбменаИНастроекОбмена = Новый Соответствие;
		
		// Ключ - Строка (сумма УИД сертификатов: Строка(Сертификат1.УникальныйИдентификатор())
		// + Строка(Сертификат2.УникальныйИдентификатор()) + ...), Значение - Структура массивов (МассивСертификатов
		// и Массив сообщений обмена).
		// Смысл данной структуры в том, что для подписания разных ЭД возможно будет доступен одинаковый
		// набор сертификатов. НЕ ПРАВИЛЬНО 2 раза спрашивать пользователя,
		// каким из 2-х сертификатов он хочет подписывать документы, поэтому, надо для этой пары
		// сертификатов сформировать массив ЭД, для подписания которых доступна именно эта пара сертификатов.
		// Чтобы сделать запись в структуре уникальной и иметь возможность искать нужную запись по ключу,
		// ключ сделан составным (в результатах запроса сертификаты упорядочены по наименованию).
		СертификатыСообщенийОбмена = Новый Структура;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД требующие авторизации, 2- не требующие).
		ВыделятьСообщенияКОтправкеСАвторизацией = ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить");
		
		МассивСообщенийОбмена = Новый Массив;
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СсылкаНаСообщениеОбмена = Выборка.СсылкаНаСообщениеОбмена;
				Отбор = Новый Структура("СсылкаНаСообщениеОбмена", СсылкаНаСообщениеОбмена);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				МассивОтпечатковИсключения = Новый Массив;
				МассивСертификатов = Новый Массив;
				ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
				Если ТЗ_Отпечатков.Количество() > 0 Тогда
					МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
				КонецЕсли;
				ИДМассиваСообщений = "й";
				СтандартноеПодписание = Истина;
				Если Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
						ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
						ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
					// В зависимости от настройки, для подписания могут использоваться алгоритмы,
					// отличные от стандартных, поэтому добавим в идентификатор структуры УИД настройки обмена:
					СтандартноеПодписание = Ложь;
					ИДМассиваСообщений = ИДМассиваСообщений + Строка(Выборка.НастройкаОбмена.УникальныйИдентификатор());
				КонецЕсли;
				ПарольПолучен = Ложь;
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
						ИЛИ МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
					ИДМассиваСообщений = ИДМассиваСообщений + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
					
					СтруктураСертификата = Новый Структура("СертификатПодписи, ПрограммаБанка,
						|ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
					Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
						ПарольПолучен = Истина;
						ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
				КонецЦикла;
				Если МассивСертификатов.Количество() > 0 Тогда
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаСообщениеОбмена = СсылкаНаСообщениеОбмена;
					НоваяСтрока.НастройкаОбмена = Выборка.НастройкаОбмена;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					
					СоотвСообщенийОбменаИНастроекОбмена.Вставить(СсылкаНаСообщениеОбмена, Выборка.НастройкаОбмена);
					СтруктураМассивов = "";
					ИДМассиваСообщений = СтрЗаменить(ИДМассиваСообщений, "-", "_");
					Если НЕ СертификатыСообщенийОбмена.Свойство(ИДМассиваСообщений, СтруктураМассивов)
						ИЛИ ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
						СтруктураСертификатов = Новый Структура("МассивСертификатов", МассивСертификатов);
						СертификатыСообщенийОбмена.Вставить(ИДМассиваСообщений, СтруктураСертификатов);
						СтруктураМассивов = СертификатыСообщенийОбмена[ИДМассиваСообщений];
					КонецЕсли;
					Если СтандартноеПодписание Тогда
						СоответствиеСообщенийОбменаИДД = Неопределено;
						Если НЕ СтруктураМассивов.Свойство("СоответствиеСообщенийОбменаИДД", СоответствиеСообщенийОбменаИДД)
							ИЛИ ТипЗнч(СоответствиеСообщенийОбменаИДД) <> Тип("Соответствие") Тогда
							СтруктураМассивов.Вставить("СоответствиеСообщенийОбменаИДД", Новый Соответствие);
							СоответствиеСообщенийОбменаИДД = СтруктураМассивов.СоответствиеСообщенийОбменаИДД;
						КонецЕсли;
						Если МассивСертификатов.Количество() = 1 И СтандартноеПодписание Тогда
							ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(СсылкаНаСообщениеОбмена);
							Значение = ПоместитьВоВременноеХранилище(
								ДвоичныеДанныеФайла, СсылкаНаСообщениеОбмена.УникальныйИдентификатор());
						Иначе
							Значение = Неопределено;
						КонецЕсли;
						СоответствиеСообщенийОбменаИДД.Вставить(СсылкаНаСообщениеОбмена, Значение);
					Иначе
						ДанныеДляСпецОбработки = Неопределено;
						Если НЕ СертификатыСообщенийОбмена[ИДМассиваСообщений].Свойство("ДанныеДляСпецОбработки",ДанныеДляСпецОбработки)
							ИЛИ ТипЗнч(ДанныеДляСпецОбработки) <> Тип("Соответствие") Тогда
							
							СертификатыСообщенийОбмена[ИДМассиваСообщений].Вставить("ДанныеДляСпецОбработки", Новый Соответствие);
							ДанныеДляСпецОбработки = СертификатыСообщенийОбмена[ИДМассиваСообщений].ДанныеДляСпецОбработки;
						КонецЕсли;
						НастройкиОбменаИСообщенияОбмена = ДанныеДляСпецОбработки.Получить(Выборка.ПрограммаБанка);
						Если ТипЗнч(НастройкиОбменаИСообщенияОбмена) <> Тип("Соответствие") Тогда
							ДанныеДляСпецОбработки.Вставить(Выборка.ПрограммаБанка, Новый Соответствие);
							НастройкиОбменаИСообщенияОбмена = ДанныеДляСпецОбработки[Выборка.ПрограммаБанка];
						КонецЕсли;
						МассивБанковскихСообщенийОбмена = НастройкиОбменаИСообщенияОбмена.Получить(Выборка.НастройкаОбмена);
						Если ТипЗнч(МассивБанковскихСообщенийОбмена) <> Тип("Массив") Тогда
							НастройкиОбменаИСообщенияОбмена.Вставить(Выборка.НастройкаОбмена, Новый Массив);
							МассивБанковскихСообщенийОбмена = НастройкиОбменаИСообщенияОбмена[Выборка.НастройкаОбмена];
						КонецЕсли;
						МассивБанковскихСообщенийОбмена.Добавить(СсылкаНаСообщениеОбмена);
					КонецЕсли;
					Если ВыделятьСообщенияКОтправкеСАвторизацией И Выборка.ТребуетсяАутентификацияПоСертификату Тогда
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет попытаться их отправить, предварительно получив сертификат аутентификации по настройке обмена.
						МассивСообщенийОбмена = СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату.Получить(
							Выборка.НастройкаОбмена);
						Если МассивСообщенийОбмена = Неопределено Тогда
							МассивСообщенийОбмена = Новый Массив;
						КонецЕсли;
						Если МассивСообщенийОбмена.Найти(СсылкаНаСообщениеОбмена) = Неопределено Тогда
							МассивСообщенийОбмена.Добавить(СсылкаНаСообщениеОбмена);
						КонецЕсли;
						СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату.Вставить(
							Выборка.НастройкаОбмена, МассивСообщенийОбмена);
					ИначеЕсли Выборка.ТребуетсяАутентификацияЛогинПароль Тогда
						МассивСообщенийОбмена = СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией.Получить(
							Выборка.НастройкаОбмена);
					
						Если МассивСообщенийОбмена = Неопределено Тогда
							МассивСообщенийОбмена = Новый Массив;
						КонецЕсли;
						Если МассивСообщенийОбмена.Найти(СсылкаНаСообщениеОбмена) = Неопределено Тогда
							МассивСообщенийОбмена.Добавить(СсылкаНаСообщениеОбмена);
						КонецЕсли;
						СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией.Вставить(
							Выборка.НастройкаОбмена, МассивСообщенийОбмена);
					ИначеЕсли Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
						Если СтруктураКОтправке.ЧерезТокенСбербанка.Найти(СсылкаНаСообщениеОбмена) = Неопределено Тогда
							СтруктураКОтправке.ЧерезТокенСбербанка.Добавить(СсылкаНаСообщениеОбмена);
						КонецЕсли;
					ИначеЕсли Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
						МассивСообщенийОбмена = Новый Массив;
						МассивСообщенийОбмена.Добавить(СсылкаНаСообщениеОбмена);
						Если СтруктураКОтправке.ЧерезВК.Получить(Выборка.НастройкаОбмена) = Неопределено Тогда
							СтруктураКОтправке.ЧерезВК.Вставить(Выборка.НастройкаОбмена, МассивСообщенийОбмена);
						Иначе
							ИсходныйМассив = СтруктураКОтправке.ЧерезВК.Получить(Выборка.НастройкаОбмена);
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсходныйМассив, МассивСообщенийОбмена, Истина);
							СтруктураКОтправке.ЧерезВК.Вставить(Выборка.НастройкаОбмена, ИсходныйМассив);
						КонецЕсли;
					Иначе
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет подготовить их к отправке и при необходимости отправить.
						Если СтандартноеПодписание Тогда
							Для Каждого Элемент Из СоответствиеСообщенийОбменаИДД Цикл
								Если СтруктураКОтправке.СПодписью.Найти(Элемент.Ключ) = Неопределено Тогда
									СтруктураКОтправке.СПодписью.Добавить(Элемент.Ключ);
								КонецЕсли;
							КонецЦикла;
						Иначе
							Для Каждого Элемент Из МассивБанковскихСообщенийОбмена Цикл
								Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
									СтруктураКОтправке.СПодписью.Добавить(Элемент);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КолПодписанных > 0 Тогда
			СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
		КонецЕсли;
		Если СоотвСообщенийОбменаИНастроекОбмена.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвСообщенийОбменаИНастроекОбмена", СоотвСообщенийОбменаИНастроекОбмена);
		КонецЕсли;
		Если СертификатыСообщенийОбмена.Количество() > 0 Тогда
			СтруктураВозврата.Вставить(
				"СертификатыСообщенийОбмена", СертификатыСообщенийОбмена);
		КонецЕсли;
	КонецЕсли;
	
	//////////////////////////////////////////////////////
	// Отправка электронных документов
	
	СоотвНастроекОбменаИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвНастроекОбменаИСертификатовАвторизации", СоотвНастроекОбменаИСертификатовАвторизации);
	
	КолОтправленных = 0;
	КолПодготовленных = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.Организация КАК ОрганизацияВСертификате,
		|	Сертификаты.Наименование КАК Наименование,
		|	СертификатыИзНастроек.НастройкаОбмена
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП,
		|			НастройкиОбменаСертификаты.Ссылка КАК НастройкаОбмена
		|		ИЗ
		|			ВТ_ЭД КАК ВТ_ЭД
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|				ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка
		|		ГДЕ
		|			НастройкиОбменаСертификаты.Ссылка.АутентификацияПоСертификату) КАК СертификатыИзНастроек
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроек.СертификатЭП
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И &ПроверкаПользователя
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЭД.Ссылка КАК СсылкаНаСообщениеОбмена,
		|	ВТ_ЭД.Статус,
		|	ВТ_ЭД.НастройкаОбмена,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И НЕ НастройкиОбмена.АутентификацияПоСертификату
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизацияЛогинПароль,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяТокенСбербанка,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И НастройкиОбмена.ИспользуетсяКриптография
		|				И НастройкиОбмена.АутентификацияПоСертификату
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАутентификацияПоСертификату,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезВК)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтправкаЧерезВК,
		|	НастройкиОбменаИсходящие.ИспользоватьЭП КАК ТребуетсяПодпись
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбмена
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбмена.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменаИсходящие
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаИсходящие.Ссылка
		|			И ВТ_ЭД.ВидЭД = НастройкиОбменаИсходящие.ИсходящийДокумент
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НастройкиОбменаИсходящие.ИспользоватьЭП
		|				ТОГДА ВТ_ЭД.Статус В (&СтатусыКОтправкеСПодписью)
		|			ИНАЧЕ ВТ_ЭД.Статус В (&СтатусыКОтправкеБезПодписи)
		|		КОНЕЦ";
		
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.Подписан);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыОбменСБанками.Утвержден);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
			
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
		
		Запрос.Текст = ТекстОсновногоЗапроса 
						+ "
						|;
						|//////////
						|" + ТекстЗапроса;

		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		КонецЕсли;
	
		Результат = Запрос.ВыполнитьПакет();
		
		// Определение сертификатов, которые будут использованы для аутентификации на сервере банка.
		ТаблицаСертификатовАутентификации = Результат[1].Выгрузить();
		МассивНастроекОбмена = ТаблицаСертификатовАутентификации.ВыгрузитьКолонку("НастройкаОбмена");
		
		СоотвНастроекОбменаИСоответствийСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметровДляАвторизацииСервер(
			МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей);
		
		Если СоотвНастроекОбменаИСоответствийСертификатовИПараметров.Количество() Тогда
			Для Каждого Элемент Из ТаблицаСертификатовАутентификации Цикл
				СоотвСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметров.Получить(Элемент.НастройкаОбмена);
				Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
					Сертификат = КлючИЗначение.Ключ;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					СоотвСертификатовИИхСтруктур.Вставить(Сертификат, СтруктураСертификата);
					
					МассивСертификатов = СоотвНастроекОбменаИСертификатовАвторизации.Получить(Элемент.НастройкаОбмена);
					Если МассивСертификатов = Неопределено Тогда
						МассивСертификатов = Новый Массив;
						СоотвНастроекОбменаИСертификатовАвторизации.Вставить(Элемент.НастройкаОбмена, МассивСертификатов);
					КонецЕсли;
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
			
		СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		
		ТЗ_Эд_КОтправке = Результат[2].Выгрузить();
		
		КолОтправленных = 0;
		КолПодготовленных = 0;
		Если ТЗ_Эд_КОтправке.Количество() > 0 Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТребуетсяПодпись", Ложь);
			Отбор.Вставить("ТребуетсяАвторизацияЛогинПароль", Ложь);
			Отбор.Вставить("ТребуетсяАутентификацияПоСертификату", Ложь);
			Отбор.Вставить("ОтправкаЧерезВК", Ложь);
			ВремТЗ = ТЗ_Эд_КОтправке.Скопировать(Отбор);
			СтруктураКОтправке.Вставить("БезПодписи", ВремТЗ.ВыгрузитьКолонку("СсылкаНаСообщениеОбмена"));
			
			Отбор = Новый Структура("ТребуетсяПодпись", Истина);
			ВремТЗ = ТЗ_Эд_КОтправке.Скопировать(Отбор);
			МассивПодписанныхСообщенийОбменаКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаСообщениеОбмена");
			Для Каждого Элемент Из МассивПодписанныхСообщенийОбменаКОтправке Цикл
				Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			
			Отбор = Новый Структура("ТребуетсяТокенСбербанка", Истина);
			ВремТЗ = ТЗ_Эд_КОтправке.Скопировать(Отбор);
			МассивПодписанныхСообщенийОбменаКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаСообщениеОбмена");
			Для Каждого Элемент Из МассивПодписанныхСообщенийОбменаКОтправке Цикл
				Если СтруктураКОтправке.ЧерезТокенСбербанка.Найти(Элемент) = Неопределено Тогда
					СтруктураКОтправке.ЧерезТокенСбербанка.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			
			// Используется для отправки документов через ВК
			МассивСообщенийОбменаКОтправке = Новый Массив;
			Отбор = Новый Структура("ОтправкаЧерезВК", Истина);
			ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
			ТзНастроекОбмена = ВремТз.Скопировать();
			ТзНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТзНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВремТЗПоНастройкеОбмена = ВремТз.Скопировать(Отбор);
				Если ВремТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				МассивСообщенийОбмена = ВремТЗПоНастройкеОбмена.ВыгрузитьКолонку("СсылкаНаСообщениеОбмена");
				
				Если СтруктураКОтправке.ЧерезВК.Получить(НастройкаОбмена) = Неопределено Тогда
					СтруктураКОтправке.ЧерезВК.Вставить(НастройкаОбмена, МассивСообщенийОбмена);
				Иначе
					ИсходныйМассив = СтруктураКОтправке.ЧерезВК.Получить(НастройкаОбмена);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсходныйМассив, МассивСообщенийОбмена, Истина);
					СтруктураКОтправке.ЧерезВК.Вставить(НастройкаОбмена, ИсходныйМассив);
				КонецЕсли;
			КонецЦикла;
			
			/// Если есть расшифрованные маркеры по сертификатам авторизации,
			//// то здесь же отправим ЭД по данным сертификатам.
			МассивСообщенийОбменаКОтправкеССервера = Новый Массив;
			ЛокальноеСоотвНастроекОбменаИСтруктур = Новый Соответствие;
							
			// Используется для отправки документов в банк по схеме логин-пароль
			МассивСообщенийОбменаКОтправкеССервераБезПодписи = Новый Массив;
			Отбор = Новый Структура("ТребуетсяАвторизацияЛогинПароль", Истина);
			ВремТЗ = ТЗ_Эд_КОтправке.Скопировать(Отбор);
			ТЗНастроекОбмена = ВремТЗ.Скопировать();
			ТЗНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТЗНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВремТЗПоНастройкеОбмена = ВремТЗ.Скопировать(Отбор);
				Если ВремТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				МассивСообщенийОбмена = ВремТЗПоНастройкеОбмена.ВыгрузитьКолонку("СсылкаНаСообщениеОбмена");
				Если ЗначениеЗаполнено(СоотвСертификатовИПаролей)
					И НЕ СоотвСертификатовИПаролей.Получить(НастройкаОбмена) = Неопределено
					И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка") = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
					ЛокальноеСоотвНастроекОбменаИСтруктур.Вставить(НастройкаОбмена, СоотвСертификатовИПаролей.Получить(НастройкаОбмена));
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщенийОбменаКОтправкеССервераБезПодписи, МассивСообщенийОбмена);
				Иначе
					СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией.Вставить(
						НастройкаОбмена, МассивСообщенийОбмена);
				КонецЕсли;
			КонецЦикла;
			
			// Используется для отправки документов в банк с аутентификацией по сертификату
			МассивСообщенийОбменаКОтправкеССервераБезПодписи = Новый Массив;
			Отбор = Новый Структура("ТребуетсяАутентификацияПоСертификату", Истина);
			ВремТЗ = ТЗ_Эд_КОтправке.Скопировать(Отбор);
			ТЗНастроекОбмена = ВремТЗ.Скопировать();
			ТЗНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТЗНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВремТЗПоНастройкеОбмена = ВремТЗ.Скопировать(Отбор);
				Если ВремТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				МассивСообщенийОбмена = ВремТЗПоНастройкеОбмена.ВыгрузитьКолонку("СсылкаНаСообщениеОбмена");
				СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату.Вставить(
					НастройкаОбмена, МассивСообщенийОбмена);
			КонецЦикла;
			
			Если СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату.Количество() Тогда
				СоотвНастроекОбменаИСоответствийСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметровДляАвторизацииСервер(
					МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей);
				// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
				// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
				Для Каждого Элемент Из СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату Цикл
					НастройкаОбмена = Элемент.Ключ;
					
					СоотвСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметров.Получить(НастройкаОбмена);
					
					Если СоотвСертификатовИПараметров = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
						Сертификат           = КлючИЗначение.Ключ;
						СтруктураСертификата = КлючИЗначение.Значение;
						
						МаркерРасшифрованный = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							
							СоотвСертификатовИИхСтруктур.Вставить(Сертификат, СтруктураСертификата);
								
							МассивСертификатов = СоотвНастроекОбменаИСертификатовАвторизации.Получить(НастройкаОбмена);
							Если МассивСертификатов = Неопределено Тогда
								МассивСертификатов = Новый Массив;
								СоотвНастроекОбменаИСертификатовАвторизации.Вставить(НастройкаОбмена, МассивСертификатов);
							КонецЕсли;
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
				
			Если МассивСообщенийОбменаКОтправкеССервераБезПодписи.Количество() > 0 Тогда
				СтРезультата = СоздатьИОтправитьДокументыПЭД(
					МассивСообщенийОбменаКОтправкеССервераБезПодписи, ЛокальноеСоотвНастроекОбменаИСтруктур);
				КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
				КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ОтправленныеДокументы, СтРезультата.ОтправленныеДокументы);
			КонецЕсли;
			
			Если МассивСообщенийОбменаКОтправкеССервера.Количество() > 0 Тогда
				СтРезультата = СоздатьИОтправитьДокументыПЭД(
					МассивСообщенийОбменаКОтправкеССервера, ЛокальноеСоотвНастроекОбменаИСтруктур);
				КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
				КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ОтправленныеДокументы, СтРезультата.ОтправленныеДокументы);
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				
				Если Элемент.Ключ = "ЧерезТокенСбербанка" Тогда
					Продолжить;
				КонецЕсли;
				
				МассивКОтправке = Новый Массив;
				СтруктураКОтправке.Свойство(Элемент.Ключ, МассивКОтправке);
				МассивСообщенийОбмена = Элемент.Значение;
				Если ТипЗнч(МассивСообщенийОбмена) = Тип("Массив") И МассивСообщенийОбмена.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивСообщенийОбмена, ЛокальноеСоотвНастроекОбменаИСтруктур);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						СтруктураВозврата.ОтправленныеДокументы, СтРезультата.ОтправленныеДокументы);
					МассивКОтправке = СтРезультата.МассивПакетовДляОбработкиНаКлиенте;
				КонецЕсли;
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивКОтправке);
			КонецЦикла;
		КонецЕсли;

		СтруктураКОтправке.Вставить(
			"САвторизациейЛогинПароль", СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией);
		СтруктураКОтправке.Вставить(
			"САутентификациейПоСертификату", СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату);

		СтруктураВозврата.Вставить("КолОтправленных", КолОтправленных);
		СтруктураВозврата.Вставить("КолПодготовленных", КолПодготовленных);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		Если ТипЗнч(ДопПараметры)= Тип("Структура") Тогда
			ДопПараметры.Вставить("ЕстьОбработанныеЭД",
				(КолНовыхЭД + КолУтвержденныхЭД + КолПодписанных + КолПодготовленных + КолОтправленных) > 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - СправочникСсылка.НастройкиОбменСБанками, ДокументСсылка.СообщениеОбменСБанками - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить;
//  Гиперссылка - Булево - Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
// Возвращаемое значение:
//  Строка - текстовое представление версии электронного документа.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
			
			Если ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
				Гиперссылка = Истина;
				Возврат ТекстСостоянияЭД;
			Иначе
				ТекущееСостояниеЭД = СостояниеЭД(СсылкаНаВладельца);
				ТекстСостоянияЭД = Строка(ТекущееСостояниеЭД);
			КонецЕсли;
			
			ДействующиеПараметрыОбмена = ОбменСБанкамиСлужебный.ДействующиеПараметрыОбмена(СсылкаНаВладельца);
				
			Если ДействующиеПараметрыОбмена.НастройкаОбменаДействует
				И ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
				
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					Гиперссылка = Ложь;
					ТекстСостоянияЭД = НСтр("ru = 'ЭДО не начат'");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					ШаблонСостоянияЭД = НСтр("ru = '%1 (настройка обмена недействительна)'");
					ТекстСостоянияЭД = СтрШаблон(ШаблонСостоянияЭД, ТекстСостоянияЭД);
					Гиперссылка = Истина;
				Иначе
					Если ДействующиеПараметрыОбмена.НастройкаОбменаДействует
						И НЕ ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
						ТекстСостоянияЭД = НСтр("ru = 'Данный вид электронного документа банк не принимает'");
					Иначе
						ТекстСостоянияЭД = НСтр("ru = 'Прямой обмен с банком не подключен'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСостоянияЭД = НСтр("ru = 'Прямой обмен с банками отключен'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщенийОбмена

// Определяет объект информационной базы, к которому привязано сообщение обмена
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//    ДокументСсылка, Неопределено - ссылка на документ информационной базы.
//
Функция ОбъектПривязки(СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвязанныеОбъектыОбменСБанками.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СвязанныеОбъектыОбменСБанками КАК СвязанныеОбъектыОбменСБанками
	|ГДЕ
	|	СвязанныеОбъектыОбменСБанками.СообщениеОбмена = &СообщениеОбмена";
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СсылкаНаОбъект;
	КонецЕсли;
	
КонецФункции

// Меняет статус и состояние исполненных платежных поручений по выписке банка.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - документ выписки банка.
//
Процедура ОпределитьИсполненныеПлатежныеПоручения(Знач СообщениеОбмена) Экспорт
	
	МассивВнешнихИдентификаторов = МассивИдентификаторовВыпискиБанка(СообщениеОбмена);
	
	Если Не МассивВнешнихИдентификаторов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	СообщениеОбменСБанками.Ссылка
	              |ИЗ
	              |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	              |ГДЕ
	              |	СообщениеОбменСБанками.ВнешнийИдентификатор В(&МассивИдентификаторов)
	              |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение)
	              |	И СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	СообщениеОбменСБанками.Ссылка
	              |ИЗ
	              |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	              |ГДЕ
	              |	СообщениеОбменСБанками.ВнешнийИдентификатор В(&МассивИдентификаторов)
	              |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеТребование)
	              |	И СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивВнешнихИдентификаторов);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВнешнийИдентификатор", "Идентификатор");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Подтвержден);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзменитьСообщениеОбмена(Выборка.Ссылка, СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет двоичные данные присоединенного файла сообщения обмена.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбмена - ссылка на сообщение обмена;
//  ДвоичныеДанныеЭД - ДвоичныеДанные - данные, которые нужно записать в присоединенный файл.
//
Процедура ОбновитьДанныеЭД(Знач СообщениеОбмена, Знач ДвоичныеДанныеЭД) Экспорт
	
	ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

// Устанавливает статус сообщения обмена
//
// Параметры:
//  СообщениеОбмена	 - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена
//  Статус			 - ПеречислениеСсылка.СтатусыОбменСБанками - новый статус сообщения обмена.
//
Процедура УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Статус) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус", Статус);
	ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
	
КонецПроцедуры

// Получает сопоставление владельцев и актуальных ЭД.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
// Возвращаемое значение:
//  Соответствие - владельцы и сообщения обмена:
//     * Ключ - ЛюбаяСсылка - ссылка на владельца сообщения;
//     * Значение - ДокументСсылка.СообщениеОбменСБанками - найденное сообщение обмена.
//
Функция СообщенияОбменаПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИСообщенийОбмена = Новый Соответствие;
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	СостоянияЭД.СообщениеОбмена КАК СообщениеОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИСообщенийОбмена.Вставить(Результат.СсылкаНаОбъект, Результат.СообщениеОбмена);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИСообщенийОбмена;
	
КонецФункции

// Получает данные о владельцах сообщений обмена.
//
// Параметры:
//  МассивСообщений - Массив - ссылки на сообщения обмена, владельцев которых нужно определить.
//
// Возвращаемое значение:
//  Массив - владельцы сообщений обмена
//     * ЛюбаяСсылка - ссылка на владельца сообщения.
//
Функция ВладельцыСообщенийОбмена(МассивСообщений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СообщениеОбмена В(&МассивСообщенийОбмена)";
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщений);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
	
	Возврат Результат;
	
КонецФункции

// Изменяет реквизиты сообщения обмена.
//
// Параметры:
//    СообщениеОбмена - СправочникСсылка.СообщениеОбменСБанками - изменяемое сообщение,
//    Реквизиты - Структура - изменяемые реквизиты. Названия ключей совпадают с названиями реквизитов справочника.
//
Процедура ИзменитьСообщениеОбмена(СообщениеОбмена, Знач Реквизиты) Экспорт
	
	СообщениеОбменаОбъект = СообщениеОбмена.ПолучитьОбъект();
	Попытка
		СообщениеОбменаОбъект.Заблокировать();
	Исключение
		ВидОперации = НСтр("ru = 'Изменение параметров сообщения'");
		ТекстОшибки = НСтр("ru = 'Не удалось заблокировать сообщение обмена: %1
							|Причина: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(
			ТекстОшибки, СообщениеОбмена, ПодробноеПредставлениеОшибки);
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось изменить сообщение обмена: %1
									|Причина: %2
									|Операция не выполнена.");
		ТекстСообщения = СтрШаблон(
			ТекстСообщения, СообщениеОбмена, КраткоеПредставлениеОшибки);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, , 1, СообщениеОбмена);
		Возврат;
	КонецПопытки;
	
	Если Реквизиты.Свойство("ДополнительныеДанные") Тогда
		
		Если ЗначениеЗаполнено(СообщениеОбменаОбъект.ДополнительныеДанные) Тогда
			ДополнительныеДанные = СообщениеОбменаОбъект.ДополнительныеДанные.Получить();
			Если Не ЗначениеЗаполнено(ДополнительныеДанные) Тогда
				ДополнительныеДанные = Новый Структура;
			КонецЕсли;
		Иначе
			ДополнительныеДанные = Реквизиты.ДополнительныеДанные;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из Реквизиты.ДополнительныеДанные Цикл
			ДополнительныеДанные.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		СообщениеОбменаОбъект.ДополнительныеДанные = Новый ХранилищеЗначения(Реквизиты.ДополнительныеДанные);
	
		Реквизиты.Удалить("ДополнительныеДанные");
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("Статус") И Реквизиты.Статус <> СообщениеОбменаОбъект.Статус Тогда
		Реквизиты.Вставить("ДатаИзмененияСтатуса", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СообщениеОбменаОбъект, Реквизиты);
	
	СообщениеОбменаОбъект.Записать();
	СообщениеОбменаОбъект.Разблокировать();
	
	Если Реквизиты.Свойство("УдалитьЭП") Тогда
		ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		Попытка
			ПрисоединенныйФайлОбъект.Заблокировать();
		Исключение
			ВидОперации = НСтр("ru = 'Удаление электронных подписей'");
			ТекстОшибки = НСтр("ru = 'Не удалось заблокировать присоединенный файл: %1
									|Причина: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтрШаблон(
				ТекстОшибки, ПрисоединенныйФайл, ПодробноеПредставлениеОшибки);
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Не удалось удалить подписи присоединенного файла: %1
										|Причина: %2
										|Операция не выполнена.'");
			ТекстСообщения = СтрШаблон(
				ТекстСообщения, ПрисоединенныйФайл, КраткоеПредставлениеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, , 1, СообщениеОбмена);
			Возврат;
		КонецПопытки;
		ПрисоединенныйФайлОбъект.ЭлектронныеПодписи.Очистить();
		ПрисоединенныйФайлОбъект.Записать();
		ПрисоединенныйФайлОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Определяет вид электронного документа в сообщении обмена.
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
Функция ВидЭДСообщенияОбмена(СообщениеОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ВидЭД");
	
КонецФункции

// Устанавливает статусы сообщений обмена.
//
// Параметры:
//  МассивСообщенийОбмена - Массив - документы, для которых меняется статус:
//    * ДокументСсылка.СообщенияОбменСБанками - изменяемое сообщение.
//  Статус - ПеречислениеСсылка.СтатусыОбменСБанками - новый статус сообщения обмена.
//
Процедура УстановитьСтатусыСообщенийОбмена(Знач МассивСообщенийОбмена, Знач Статус) Экспорт
	
	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Статус);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление электронного документа сообщения обмена.
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена.
//
// Возвращаемое значение:
//    Строка - представление электронного документа.
//
Функция ПредставлениеСообщенияОбмена(СообщениеОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Представление");
	
КонецФункции

// Используется для получения списка представлений сообщений обмена с клиента.
//
// Параметры:
//   МассивСообщенийОбмена - Массив - содержит ссылки на сообщения обмена.
//    * ДокументСсылка.СообщениеОбменСБанками - сообщения для которых надо сформировать список представлений.
//
// Возвращаемое значение:
//   СписокЗначений - список представлений, вида:
//      Значение - ДокументСсылка.СообщениеОбменСБанками,
//      Представление - Строка - представление электронного документа.
//
Функция СписокПредставленийСообщенийОбмена(МассивСообщенийОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеОбменСБанками.Ссылка,
	               |	СообщениеОбменСБанками.Представление
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.Ссылка В(&МассивСообщенийОбмена)";
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокПредставлений = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокПредставлений.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат СписокПредставлений;
	
КонецФункции

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//  Структура - данные для проверки подписей электронного документа.
//    * ДанныеЭД - ДвоичныеДанные - двоичные данные электронного документа;
//    * Подписи - Массив - данные электронных подписей
//      ** Значение - Структура - содержит следующие поля:
//        *** НомерСтроки - Число - номер строки таблицы электронных подписей
//        *** Сертификат - ДвоичныеДанные - двоичные данные сертификата подписи
//        *** Подпись - ДвоичныеДанные - двоичные данные электронной подписи
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  Неопределено - не найдены двоичные данные для проверки подписи.
//
Функция СтруктураСодержимогоСообщенияОбмена(СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки КАК НомерСтроки,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.ВидЭД КАК ВидЭД,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла = &ВладелецФайла
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.УстановитьПараметр("ВладелецФайла", СообщениеОбмена);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	МассивПодписей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	Если Выборка.Количество() > 0 И Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		И Выборка.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
		
		СлужебныйЭД = ОбменСБанкамиСлужебный.СлужебноеСообщениеБанка(СообщениеОбмена);
		Если Не ЗначениеЗаполнено(СлужебныйЭД) Тогда
			ТекстСообщения = НСтр("ru = 'Не обнаружены служебные данные электронного документа.
										|Операция не выполнена.'");
			ТекстОшибки = НСтр("ru = 'Не обнаружены служебные данные для сообщения обмена:
									|%1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СообщениеОбмена);
			ВидОперации = НСтр("ru = 'Получение служебных данных электронного документа'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, ТекстСообщения, 1, СообщениеОбмена);
		Иначе
			ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СлужебныйЭД);
		КонецЕсли;
	Иначе
		ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	КонецЕсли;
	
	Если ДанныеЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеЭД", ДанныеЭД);
	СтруктураВозврата.Вставить("Подписи", МассивПодписей);
	СтруктураВозврата.Вставить("НастройкаОбмена", Выборка.НастройкаОбмена);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте.
//
// Параметры:
//   МассивСообщений - Массив - элементы массива - ДокументСсылка.СообщениеОбменСБанками.
//
// Возвращаемое значение:
//   Массив - данные сообщений
//     * Структура - содержит следующие элементы:
//        **  СообщениеОбмена - ДокументСсылка.СообщениеОбмена;
//        **  Подписи - Массив - Структуры с данными подписей;
//        **  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками;
//        **  ДанныеЭД - ДвоичныеДанные - данные ЭД.
//
Функция МассивСтруктурСодержимогоСообщенийОбмена(МассивСообщений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.ВидЭД КАК ВидЭД,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.НастройкаОбмена КАК НастройкаОбмена,
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла КАК СообщениеОбмена
	|ИЗ
	|	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла В(&МассивВладельцев)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка";
	
	Запрос.УстановитьПараметр("МассивВладельцев", МассивСообщений);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСтруктур = Новый Массив;
	ТекСообщениеОбмена = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекСообщениеОбмена <> Выборка.СообщениеОбмена Тогда
			ТекСообщениеОбмена = Выборка.СообщениеОбмена;
			МассивСтруктур.Добавить(Новый Структура);
			СтруктураВозврата = МассивСтруктур[МассивСтруктур.Количество() - 1];
			СтруктураВозврата.Вставить("СообщениеОбмена", ТекСообщениеОбмена);
			СтруктураВозврата.Вставить("Подписи", Новый Массив);
			МассивПодписей = СтруктураВозврата.Подписи;
			СтруктураВозврата.Вставить("НастройкаОбмена", Выборка.НастройкаОбмена);
			ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(ТекСообщениеОбмена);
			Если Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
				И Выборка.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
				
				СлужебноеСообщение = ОбменСБанкамиСлужебный.СлужебноеСообщениеБанка(ТекСообщениеОбмена);
				СтруктураВозврата.Вставить("ДанныеЭД", ДвоичныеДанныеПрисоединенногоФайла(СлужебноеСообщение));
			Иначе
				СтруктураВозврата.Вставить("ДанныеЭД",  ДвоичныеДанныеПрисоединенногоФайла(ТекСообщениеОбмена));
			КонецЕсли;
		КонецЕсли;
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураПодписей.Вставить("Сертификат", Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись", Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Определяет необходимость стандартной криптографии для обработки документов.
//
// Параметры:
//  МассивОбъектов - Массив - содержит ссылки на документы информационной базы.
// 
// Возвращаемое значение:
//    Булево - если требуется криптография, то возвращается Истина.
//
Функция ТребуетсяКриптографияДляОбработкиДокументов(Знач МассивОбъектов) Экспорт
	
	Для Каждого СсылкаНаДокумент Из МассивОбъектов Цикл
		
		ПараметрыЭД = ОбменСБанкамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаДокумент);
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_НастройкиОбмена.ИсходящийДокумент КАК ВидЭД,
		|	ТЧ_НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату КАК АутентификацияПоСертификату
		|ПОМЕСТИТЬ ВТ_ТЧ_НастройкиОбмена
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК ТЧ_НастройкиОбмена
		|ГДЕ
		|	НЕ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
		|	И НЕ ТЧ_НастройкиОбмена.Ссылка.Недействительна
		|	И ТЧ_НастройкиОбмена.Ссылка.Организация = &Организация
		|	И ТЧ_НастройкиОбмена.Ссылка.Банк = &Банк
		|	И ТЧ_НастройкиОбмена.ИсходящийДокумент = &ВидЭД
		|	И (ТЧ_НастройкиОбмена.ИспользоватьЭП
		|			ИЛИ ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату)
		|	И ТЧ_НастройкиОбмена.Ссылка.ПрограммаБанка В (ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АльфаБанкОнлайн), ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП,
		|			ВТ_ТЧ_НастройкиОбмена.АутентификацияПоСертификату КАК АутентификацияПоСертификату
		|		ИЗ
		|			ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|				ПО ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка) КАК СертификатыИзНастроекОбмена
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекОбмена.СертификатЭП
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВидыЭДЭП.ВидЭД = &ВидЭД
		|	И (ВидыЭДЭП.Использовать
		|			ИЛИ СертификатыИзНастроекОбмена.АутентификацияПоСертификату)
		|	И &ПроверкаПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК ТребуетсяКриптография
		|ИЗ
		|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_НастройкиОбмена.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|ГДЕ
		|	НЕ ВТ_Сертификаты.Ссылка ЕСТЬ NULL ";
		Запрос.УстановитьПараметр("ВидЭД", ПараметрыЭД.ВидЭД);
		Запрос.УстановитьПараметр("Организация", ПараметрыЭД.Организация);
		Запрос.УстановитьПараметр("Банк", ПараметрыЭД.Банк);
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПользовательНеУказан",  Пользователи.СсылкаНеуказанногоПользователя());
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Добавляет данные подписей в сообщение обмена
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
//  ДанныеПодписей - Массив - набор данных электронных подписей
//    * Соответствие - данные подписи:
//       ** Ключ - ДвоичныеДанные - двоичные данные сертификата подписи;
//       ** Значение - ДвоичныеДанные - двоичные данные электронной подписи.
//
Процедура ДобавитьПодписиВСообщениеОбмена(СообщениеОбмена, ДанныеПодписей) Экспорт
	
	Для Каждого СертификатИПодпись Из ДанныеПодписей Цикл
		Для Каждого КлючЗначение Из СертификатИПодпись Цикл
			Сертификат = Новый СертификатКриптографии(КлючЗначение.Ключ);
			ОтпечатокСтрокой = Base64Строка(Сертификат.Отпечаток);
			ПредставлениеСубъекта = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
			ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
			Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				Продолжить;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(ПрисоединенныйФайл, КлючЗначение.Значение,
				ОтпечатокСтрокой, ТекущаяДатаСеанса(), "", "", ПредставлениеСубъекта, КлючЗначение.Ключ);
		КонецЦикла
	КонецЦикла;
	
КонецПроцедуры

// Сохранить данные электронных подписей, полученного из банка документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком;
//  СвойстваСертификатаБанка - Структура - свойства сертификата банка;
//  ДанныеПодписей - Массив - данные установленных подписей.
//
Процедура СохранитьДанныеЭлектронныхПодписей(Знач СообщениеОбмена, Знач СвойстваСертификатаБанка, Знач ДанныеПодписей) Экспорт
	
	Для Каждого Элемент Из ДанныеПодписей Цикл
		ДанныеПодписи = Элемент.ДанныеПодписи;
		ДобавитьПодпись(СообщениеОбмена, ДанныеПодписи, СвойстваСертификатаБанка, Элемент);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет действия с сообщениями обмена после установки электронной подписи.
//
// Параметры:
//   МассивСообщенийОбменаКОбновлениюСтатуса - Массив - массив сообщений подписанного ЭД, типа ДокументСсылка.СообщениеОбменСБанками.
//
Процедура ДействияПослеПодписанияЭДНаСервере(МассивСообщенийОбменаКОбновлениюСтатуса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СообщениеОбмена Из МассивСообщенийОбменаКОбновлениюСтатуса Цикл
		НачатьТранзакцию();
		Попытка
			
			Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Подписан);
			Иначе
				СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
			КонецЕсли;
			ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа в сообщении обмена %1'");
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", СообщениеОбмена);
			Операция = НСтр("ru = 'Установка подписи ЭП'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, СообщениеОбмена);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет результаты проверки ЭП, выполненные на клиенте.
//
// Параметры:
// СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
// МассивРезультатов - Массив - содержит результаты проверки подписей:
//    * Структура - данные одиночной записи
//          * ДатаПроверкиПодписи - дата - дата и время проверки подписи;
//          * ПодписьВерна - Булево - признак валидности подписи.
//
Процедура СохранитьРезультатыПроверкиПодписей(Знач СообщениеОбмена, Знач МассивРезультатов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
	
	Объект = ПрисоединенныйФайл.ПолучитьОбъект();
	Объект.Прочитать();
	
	Попытка
		Объект.Заблокировать();
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При сохранении результата проверки электронных подписей произошла ошибка:
									|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки);

		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Сохранение результата проверки электронных подписей'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, СообщениеОбмена);
		Возврат;
	КонецПопытки;

	Индекс = -1;
	Для Каждого Элемент Из МассивРезультатов Цикл
		Индекс = Индекс + 1;
		Если Элемент.Количество() Тогда
			СтрокаТЧ = Объект.ЭлектронныеПодписи[Индекс];
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Объект.Записать();
	Объект.Разблокировать();
	
КонецПроцедуры

// Определяет, все ли установленные на ЭД подписи являются валидными.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка сообщение обмена.
//
// Возвращаемое значение:
//  Булево - если все подписи валидны, то возвращается Истина.
//
Функция УстановленныеПодписиВалидны(СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна
	|ИЗ
	|	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла = &ВладелецФайла
	|	И НЕ СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна";
	Запрос.УстановитьПараметр("ВладелецФайла", СообщениеОбмена);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		ШаблонТекста = НСтр("ru = 'Обработка сообщения обмена %1.
							|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтрШаблон(ШаблонТекста, СообщениеОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет добавление ЭП в электронный документ. Для исходящих документов также меняет статус.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - сообщение обмена с банками,
//  Подпись - ДвоичныеДанные - электронная подпись.
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи;
//             - Структура - свойства сертификата подписи:
//                  * Отпечаток - Строка -  отпечаток сертификата;
//                  * ДвоичныеДанные - Строка - двоичные данные сертификата;
//                  * КомуВыдан - Строка - владелец сертификата.
//  ДанныеПроверкиПодписи - Структура - результаты проверки подписи на клиенте. Содержит следующие поля:
//    * ДатаПроверкиПодписи - Дата - дата проверки подписи;
//    * ПодписьВерна - Булево - признак валидности подписи.
//
Процедура ДобавитьПодпись(Знач СообщениеОбмена, Знач Подпись, Знач Сертификат, Знач ДанныеПроверкиПодписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Сертификат) = Тип("Структура") Тогда
		ДвоичныеДанныеСертификата = Сертификат.ДвоичныеДанные;
		КомуВыданСертификат = Сертификат.КомуВыдан;
		Отпечаток = Сертификат.Отпечаток;
	Иначе
		РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сертификат, "Отпечаток, ДанныеСертификата, КомуВыдан");
		Отпечаток = РеквизитыСертификата.Отпечаток;
		ДвоичныеДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
		КомуВыданСертификат = РеквизитыСертификата.КомуВыдан;
	КонецЕсли;
	
	ДанныеПодписи = Новый Структура("Подпись, УстановившийПодпись, Комментарий, ИмяФайлаПодписи, ДатаПодписи, Отпечаток,
		|Сертификат, КомуВыданСертификат");

	ДанныеПодписи.Подпись = Подпись;
	ДанныеПодписи.ДатаПодписи = ТекущаяДатаСеанса();
	ДанныеПодписи.Отпечаток = Отпечаток;
	ДанныеПодписи.Сертификат = ДвоичныеДанныеСертификата;
	ДанныеПодписи.КомуВыданСертификат = КомуВыданСертификат;
	
	Если НЕ ДанныеПроверкиПодписи = Неопределено Тогда
		ДанныеПодписи.Вставить("ДатаПроверкиПодписи", ДанныеПроверкиПодписи.ДатаПроверкиПодписи);
		ДанныеПодписи.Вставить("ПодписьВерна", ДанныеПроверкиПодписи.ПодписьВерна);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
		ПрисоединенныеФайлы.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, ДанныеПодписи);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Направление") = Перечисления.НаправленияЭД.Исходящий Тогда
			Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Подписан);
			Иначе
				СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
			КонецЕсли;
			ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'Ошибка сохранения подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru = 'Сохранение данных электронной подписи'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ИнформацияОбОшибке, ТекстСообщения, 1, СообщениеОбмена);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Определяет готов ли электронный документ к отправке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на проверяемое сообщение обмена.
//
// Возвращаемое значение:
//  Булево - если документ полностью подписан, тогда Истина, иначе Ложь.
//
Функция ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Сертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток КАК Отпечаток,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.ВидЭД КАК ВидЭД,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла.НастройкаОбмена КАК НастройкаОбмена
	|ПОМЕСТИТЬ УстановленныеПодписи
	|ИЗ
	|	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток = Сертификаты.Отпечаток
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла = &СообщениеОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанками.ИспользоватьЭП
	|ПОМЕСТИТЬ ПодписываемыеВидыЭД
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.ИспользоватьЭП
	|	И НастройкиОбменСБанками.ИсходящийДокумент = &ВидЭД
	|	И НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменаСертификатыПодписейОрганизации.СертификатЭП КАК Сертификат
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменаСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И НЕ НастройкиОбменаСертификатыПодписейОрганизации.СертификатЭП В
	|				(ВЫБРАТЬ
	|					УстПодп.Сертификат
	|				ИЗ
	|					УстановленныеПодписи КАК УстПодп)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ
	|				ПодписываемыеВидыЭД.ИспользоватьЭП
	|			ИЗ
	|				ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(УстановленныеПодписи.Сертификат) КАК КоличествоУстановленныхПодписей
	|ИЗ
	|	УстановленныеПодписи КАК УстановленныеПодписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодписываемыеВидыЭД.ИспользоватьЭП
	|ИЗ
	|	ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД";
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "НастройкаОбмена, ВидЭД");

	ФлагПодписанПолностью = Истина;
	
	Запрос.УстановитьПараметр("НастройкаОбмена", РеквизитыСообщенияОбмена.НастройкаОбмена);
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Запрос.УстановитьПараметр("ВидЭД", РеквизитыСообщенияОбмена.ВидЭД);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Если РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД Тогда
		РезультатКоличествоПодписей = МассивРезультатов[3].Выбрать();
		РезультатКоличествоПодписей.Следующий();
		РезультатПодписыватьЭД = МассивРезультатов[4].Выбрать();
		РезультатПодписыватьЭД.Следующий();
		ФлагПодписанПолностью = Не РезультатПодписыватьЭД.ИспользоватьЭП
			ИЛИ (РезультатКоличествоПодписей.КоличествоУстановленныхПодписей > 0);
	Иначе
		Результат = МассивРезультатов[2].Выбрать();
		Если Результат.Следующий() Тогда
			ФлагПодписанПолностью = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПакетов

// Читает файл, полученный из банка и возвращает идентификаторы пакетов, которых еще нет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ДанныеФайлаBase64 - Строка - двоичные данные файла, полученного из банка в формате Base64;
//  МассивИдентификаторов - Массив - содержит идентификаторы новых пакетов банка:
//     * Строка - идентификатор пакета.
//  ЕстьОшибка - Булево - при разборе файла произошла ошибка.
//
Процедура ПрочитатьИдентификаторыПакетов(Знач НастройкаОбмена, Знач ДанныеФайлаBase64, МассивИдентификаторов, ЕстьОшибка) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = Base64Значение(ДанныеФайлаBase64);
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОбменСБанкамиСлужебный.ПрочитатьИдентификаторыПакетов(НастройкаОбмена, ВремФайл, МассивИдентификаторов, ЕстьОшибка);
	
КонецПроцедуры

// Получает список подготовленных к отправке пакетов.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
// 
// Возвращаемое значение:
// Массив - список пакетов обмена к отправке
//   * ДокументСсылка.ПакетОбменСБанками - готовый к отправке пакет.
//
Функция ПодготовленныеКОтправкеПакетыЭДО(НастройкаОбмена) Экспорт
	
	ЗапросПодготовленныхПакетов = Новый Запрос;
	ЗапросПодготовленныхПакетов.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ПакетЭД.НастройкаОбмена = &НастройкаОбмена";
	ЗапросПодготовленныхПакетов.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Результат = ЗапросПодготовленныхПакетов.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Обновляет статус пакета обмена, а также сообщений обмена, которые находятся в табличной части.
//
// Параметры:
//    ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - ссылка на пакет обмена;
//    НовыйСтатусПакетаЭД - ПеречислениеСсылка.СтатусыПакетовЭД - назначаемый статус пакета;
//    СтруктураПараметров - Структура - изменяемые реквизиты сообщений обмена, входящих в пакет.
//    СообщенияОбмена - Массив - Массив ссылок на сообщения, которые есть в пакете обмена;
//
Процедура ОбновитьСтатусыДокументовПакетаЭДО(Знач ПакетОбменСБанками, Знач НовыйСтатусПакетаЭД, Знач СтруктураПараметров, СообщенияОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетОбменСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияОбмена = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПакетОбменСБанкамиСообщения.Сообщение
		               |ИЗ
		               |	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
		               |ГДЕ
		               |	ПакетОбменСБанкамиСообщения.Ссылка = &ПакетОбменСБанками";
		Запрос.УстановитьПараметр("ПакетОбменСБанками", ПакетОбменСБанками);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИзменитьСообщениеОбмена(Выборка.Сообщение, СтруктураПараметров);
			СообщенияОбмена.Добавить(Выборка.Сообщение);
		КонецЦикла;
		
		ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
		ПакетОбъект.Статус = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Смена статуса пакета ЭДО и обновление статусов ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстСообщения, 1, ПакетОбменСБанками);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования. Создает и отправляет пакеты электронных документов.
//
// Параметры:
//   СообщенияОбмена - Массив - Массив ссылок на сообщения, которые надо включить в пакет;
//   СоотвНастроекОбменаИПараметровСертификатов - Соответствие - параметры настроек обмена.
//
// Возвращаемое значение:
//    Структура - результат создания и отправки, вида:
//      * КолПодготовленных - Число - количество пакетов подготовленных к отправке;
//      * ОтправленныеДокументы - Массив -  отправленные электронные документы;
//      * КолОтправленных - Число - количество отправленных документов;
//      * МассивПакетовДляОбработкиНаКлиенте - Массив - пакеты, которые следует обработать на клиенте;
//      * ДанныеДляОтправкиЧерезДопОбработку - Соответствие - настройки обмена и данные для отправки.
//
Функция СоздатьИОтправитьДокументыПЭД(Знач СообщенияОбмена, Знач СоотвНастроекОбменаИПараметровСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = СоздатьДокументыПакетовЭД(СообщенияОбмена);
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("КолПодготовленных", 0);
	СтруктураРезультата.Вставить("ОтправленныеДокументы", Новый Массив);

	Для Каждого Элемент Из МассивСтруктурПакетовЭД Цикл
		Если Элемент.ЭтоНовый Тогда
			СтруктураРезультата.КолПодготовленных = СтруктураРезультата.КолПодготовленных + 1;
		КонецЕсли;
	КонецЦикла;

	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			// Если пакет бы сформирован ранее, но аутентификация на сервере не производилась.
			ИначеЕсли СтруктураПЭД.АутентификацияПоСертификату
				И СоотвНастроекОбменаИПараметровСертификатов.Количество() = 0 Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			
			МассивПЭД = Новый Массив;
			МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
			Результат = ОтправкаПакетовЭДО(МассивПЭД, СоотвНастроекОбменаИПараметровСертификатов);
			КолОтправленных = КолОтправленных + Результат.КоличествоОтправлено;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураРезультата.ОтправленныеДокументы, Результат.ОтправленныеДокументы);
			
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных", КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	Если МассивПакетовДляОтправкиСКлиента.Количество() > 0 Тогда
		ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиВБанк(
			МассивПакетовДляОтправкиСКлиента, Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку);
		СтруктураРезультата.Вставить("ДанныеДляОтправкиЧерезДопОбработку", ДанныеДляОтправкиЧерезДопОбработку);
	КонецЕсли;
	Возврат СтруктураРезультата;
	
КонецФункции

// Отправляет пакеты ЭДО в банк.
//
// Параметры:
//  МассивПакетовЭДО - Массив - список пакетов для отправки в банк;
//    * ДокументСсылка.ПакетОбменСБанками - отправляемый пакет электронных документов.
//  СоотвНастроекОбменаИПараметровСертификатов - Соответствие - параметры настроек обмена;
//  ТекстСообщения - Строка - возвращает тест ошибки для вывода пользователю.
// 
// Возвращаемое значение:
//  Структура - результат отправки пакетов. Содержит следующие поля:
//   * КоличествоОтправлено - Число - количество отправленных электронных документов.
//   * ОтправленныеДокументы - Массив - список документов, для которых отправлены актуальные электронные документы.
//     ** Элемент - ОпределяемыйТип.ВладельцыОбменСБанками - ссылка на документ-владелец отправленного электронного документа.
//
Функция ОтправкаПакетовЭДО(Знач МассивПакетовЭДО, Знач СоотвНастроекОбменаИПараметровСертификатов, ТекстСообщения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураВозврата = Новый Структура("КоличествоОтправлено, ОтправленныеДокументы", 0, Новый Массив);
	
	МассивОтправленныхСообщенийОбмена = Новый Массив;
	
	Для Каждого ПакетОбменСБанками Из МассивПакетовЭДО Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		
		НачатьТранзакцию();
		
		СтруктураЭД = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Отправлен);
		
		ОбновитьСтатусыДокументовПакетаЭДО(ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Отправлен, СтруктураЭД);
		Если Не ПакетОбменСБанками.Статус = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетОбменСБанками, "НастройкаОбмена");
				
			РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
				"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ИспользуетсяКриптография, ПрограммаБанка,
				|ИдентификаторОрганизации, ВерсияФормата");
					
			Если Не РеквизитыНастройкиОбмена.ИспользуетсяКриптография
				И (СоотвНастроекОбменаИПараметровСертификатов = Неопределено
					ИЛИ СоотвНастроекОбменаИПараметровСертификатов.Получить(НастройкаОбмена) = Неопределено) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
				
			Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
				ИЛИ РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
				
			Настройки = Новый Структура("Адрес", РеквизитыНастройкиОбмена.АдресСервера);
				
			Если НЕ РеквизитыНастройкиОбмена.ИспользуетсяКриптография
				И РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
				ПараметрыАвторизации = СоотвНастроекОбменаИПараметровСертификатов.Получить(НастройкаОбмена);
				ХэшАвторизации = СтрокаBase64БезBOM(
					ПараметрыАвторизации.Пользователь + ":" + ПараметрыАвторизации.ПарольПользователя);
				Настройки.Вставить("Хэш", ХэшАвторизации);
			КонецЕсли;
				
			Данные = ДвоичныеДанныеПрисоединенногоФайла(ПакетОбменСБанками);
			Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
				Настройки.Вставить("Ресурс", "SendPack");
				ПараметрыАвторизации = СоотвНастроекОбменаИПараметровСертификатов.Получить(НастройкаОбмена);
				Если ПараметрыАвторизации = Неопределено ИЛИ НЕ ПараметрыАвторизации.Свойство("МаркерРасшифрованный")
					ИЛИ НЕ ЗначениеЗаполнено(ПараметрыАвторизации.МаркерРасшифрованный) Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
					ПараметрыАвторизации.МаркерРасшифрованный);
				Настройки.Вставить("ИдентификаторСессии", ИдентификаторСессии);
				Настройки.Вставить("ИдентификаторОрганизации", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
			Иначе
				Настройки.Вставить("Ресурс", РеквизитыНастройкиОбмена.РесурсИсходящихДокументов);
			КонецЕсли;
					
			ОтветБанка = Неопределено;
			ТекстОшибки = "";
			
			СообщениеОбмена = СообщениеОбменаВПакетеЭДО(ПакетОбменСБанками);
			
			Настройки.Вставить("ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);

			ОбменСБанкамиСлужебный.ОтправитьВБанк(Настройки, Данные, ОтветБанка, ТекстОшибки);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОтменитьТранзакцию();
				ШаблонВидаОперации = НСтр("ru = 'Отправка пакета в банк по настройке: %1'");
				ВидОперации = СтрШаблон(ШаблонВидаОперации, НастройкаОбмена);
				ТекстСообщения = ТекстОшибки;
				ОбменСБанкамиСлужебный.УстановитьСтатусПакета(ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Отменен);
				ОбменСБанкамиСлужебный.ОбработатьОшибкуПередачиПакета(СообщениеОбмена, ВидОперации, ТекстОшибки, ТекстСообщения);
				Продолжить;
			КонецЕсли;
					
			Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
				ОбменСБанкамиСлужебный.ОбработатьОтветИзБанка(ОтветБанка, СообщениеОбмена);
			Иначе
				УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Перечисления.СтатусыОбменСБанками.Отправлен);
				ОбработатьОтветБанкаНаОтправкуДокументаAsync(ОтветБанка, ПакетОбменСБанками);
			КонецЕсли;
			СтруктураВозврата.КоличествоОтправлено = СтруктураВозврата.КоличествоОтправлено + 1;
			
			МассивОтправленныхСообщенийОбмена.Добавить(СообщениеОбмена);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по настройке: %1
										|%2.'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, НастройкаОбмена, КраткоеПредставлениеОшибки);
			ШаблонВидаОперации = НСтр("ru = 'Отправка пакета по настройке: %1'");
			ВидОперации = СтрШаблон(ШаблонВидаОперации, НастройкаОбмена);
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, ПакетОбменСБанками);
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
			СтруктураРеквизитов.Вставить("ПричинаОтклонения", ТекстОшибки);
			ОбновитьСтатусыДокументовПакетаЭДО(ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Отменен, СтруктураРеквизитов);
			ЗафиксироватьТранзакцию();
		КонецПопытки;
			
	КонецЦикла;
	
	Если МассивОтправленныхСообщенийОбмена.Количество() Тогда
		ОтправленныеДокументы = ВладельцыСообщенийОбмена(МассивОтправленныхСообщенийОбмена);
		СтруктураВозврата.Вставить("ОтправленныеДокументы", ОтправленныеДокументы);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область Сертификаты

// Возвращает сертификаты в формате BASE64 для каждого сообщения обмена.
//
// Параметры:
//  МассивСообщенийОбмена - массив - сообщения обмена для получения сертификатов:
//      * ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком.
//
// Возвращаемое значение:
//  Соответствие - данные сертификатов подписи:
//    * Ключ - ДокументСсылка.СообщениеОбменаСБанками - ссылка на сообщение обмена;
//    * Значение - массив - данные сертификатов подписи:
//        ** Строка - сертификат в формате Base64;
//
Функция ДанныеСертификатовСообщенийОбмена(МассивСообщенийОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена,
	|	ПрисоединенныеФайлыЭлектронныеПодписи.Сертификат
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК ПрисоединенныеФайлыЭлектронныеПодписи
	|		ПО СообщениеОбменСБанками.Ссылка = ПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка В(&МассивСообщенийОбмена)
	|ИТОГИ ПО
	|	СообщениеОбмена";
	
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ВыборкаСообщениеОбмена = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ВыборкаСообщениеОбмена.Следующий() Цикл
		ВыборкаСертификаты = ВыборкаСообщениеОбмена.Выбрать();
		МассивДанныхСертификатов = Новый Массив;
		Пока ВыборкаСертификаты.Следующий() И НЕ ВыборкаСертификаты.Сертификат = NULL Цикл
			МассивДанныхСертификатов.Добавить(ВыборкаСертификаты.Сертификат.Получить());
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаСообщениеОбмена.СообщениеОбмена, МассивДанныхСертификатов);
	КонецЦикла;

	Возврат СоответствиеВозврата;
	
КонецФункции

// Определяет есть ли доступные сертификаты текущему пользователю для этого сообщения обмена.
//
// Параметры:
//  МассивОтпечатковСертификатов - Массив - содержит доступные сертификаты;
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком.
//
// Возвращаемое значение:
//  Булево - Если есть доступные сертификаты, тогда Истина.
//
Функция ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.ВидЭД,
	|	СообщениеОбменСБанками.НастройкаОбмена
	|ПОМЕСТИТЬ РеквизитыСообщения
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка = &СообщениеОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|		ПО НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП = ПодписываемыеВидыЭД.СертификатЭП
	|ГДЕ
	|	ПодписываемыеВидыЭД.ВидЭД В
	|			(ВЫБРАТЬ
	|				РеквизитыСообщения.ВидЭД
	|			ИЗ
	|				РеквизитыСообщения КАК РеквизитыСообщения)
	|	И НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка В
	|			(ВЫБРАТЬ
	|				РеквизитыСообщения.НастройкаОбмена
	|			ИЗ
	|				РеквизитыСообщения КАК РеквизитыСообщения)
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Отозван
	|	И &ПроверкаПользователя
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.ПометкаУдаления
	|	И ПодписываемыеВидыЭД.Использовать
	|	И НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Отпечаток В(&МассивОтпечатков)";
	
	Запрос.УстановитьПараметр("МассивОтпечатков", МассивОтпечатковСертификатов);
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Пользователь В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)");
	КонецЕсли;
	
	ЕстьСертификаты = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ЕстьСертификаты;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//
// Возвращаемое значение:
//  Соответствие - содержит данные сертификатов:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат;
//    * Значение - Структура - реквизиты сертификата:
//          ** Отпечаток - Строка - отпечаток сертификата;
//          ** ДанныеСертификата - ДвоичныеДанные - данные сертификата;
//          ** КомуВыдан - Строка - кому выдан сертификат.
//
Функция ДоступныеСертификаты(Знач НастройкаОбмена) Экспорт
	
	ДанныеВозврата = Новый Соответствие;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования) Тогда
		Возврат ДанныеВозврата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сертификаты.Ссылка,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	Сертификаты.Отпечаток,
	|	Сертификаты.КомуВыдан
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО СертификатыПодписейОрганизации.СертификатЭП = Сертификаты.Ссылка
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И &ПроверкаПользователя";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"Сертификаты.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Структура = Новый Структура("ПарольПользователя, Отпечаток, ДанныеСертификата, ПарольПолучен, КомуВыдан");
		ЗаполнитьЗначенияСвойств(Структура, Результат);
		Структура.Вставить("ДанныеСертификата", Результат.ДанныеСертификата.Получить());
		ДанныеВозврата.Вставить(Результат.Ссылка, Структура);
	КонецЦикла;
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//   МассивОтпечатковСертификатов - Массив - массив структур сертификатов,
//     установленных в личном хранилище на компьютере пользователя.
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - будут выбраны сертификаты,
//     зарегистрированные в указанной настройке и доступные текущему пользователю.
//
// Возвращаемое значение:
//  Соответствие - соответствие доступных сертификатов, вида:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//    * Значение - Структура - данные сертификата.
//
Функция СоответствиеДоступныхСертификатовИПараметров(Знач МассивОтпечатковСертификатов, Знач НастройкаОбмена = Неопределено) Экспорт
	
	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивОтпечатковСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера);
	КонецЕсли;
	МассивСтруктур = МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаОбмена);
	
	СоответствиеСертификатовИПаролей = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	ДанныеВозврата = Новый Соответствие;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивСтруктур Цикл
			ПарольКСертификату = СоответствиеСертификатовИПаролей.Получить(Элемент.Сертификат);
			Если ПарольКСертификату <> Неопределено Тогда
				Элемент.ПарольПользователя = ПарольКСертификату;
				Элемент.ПарольПолучен = Истина;
			КонецЕсли;
			ДанныеВозврата.Вставить(Элемент.Сертификат, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает структуру с полями сертификата.
//
// Параметры:
//   ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата криптографии.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция СтруктураСертификата(Знач ДвоичныеДанныеСертификата) Экспорт
	
	Попытка
		НовыйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ВидОперации = НСтр("ru = 'Загрузка сертификата с банковского ключа'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщения = НСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробныйТекстОшибки, ТестСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(НовыйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

// Возвращает данные сертификатов используемых в настройке обмена.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//
// Возвращаемое значение:
//  Массив - Массив данных сертификатов в виде структур.
//
Функция ДанныеСертификатовБанка(НастройкаОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП) КАК ВсегоСертификатов
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыЭП
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыЭП.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП КАК Сертификат,
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.ДанныеСертификата КАК ДанныеСертификата,
	|	НастройкиОбменСБанкамиСертификатыЭП.Ссылка.ПрограммаБанка,
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.Отпечаток КАК Отпечаток,
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.ДействителенДо КАК ДействителенДо,
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.ПользовательОповещенОСрокеДействия КАК ПользовательОповещенОСрокеДействия
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыЭП
	|ГДЕ
	|	&ПроверкаПользователя
	|	И НастройкиОбменСБанкамиСертификатыЭП.Ссылка = &НастройкаОбмена";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоКоличеству = МассивРезультатов[0].Выбрать();
	ВыборкаПоКоличеству.Следующий();
	ВсегоСертификатов = ВыборкаПоКоличеству.ВсегоСертификатов;

	ВыборкаСертификаты = МассивРезультатов[1].Выбрать();
	
	Если ВыборкаСертификаты.Количество() = 0 И ВсегоСертификатов > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Сертификат подписи недоступен для текущего пользователя.
								|Проверьте настройки обмена или обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ДанныеСертификатов = Новый Массив;
	Пока ВыборкаСертификаты.Следующий() Цикл
		Если ВыборкаСертификаты.ДействителенДо < ТекущаяДатаСеанса() Тогда
			ШаблонСообщения = НСтр("ru = 'Закончился срок действия сертификата: %1
										|Получите новый сертификат'");
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ВыборкаСертификаты.Сертификат);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		ДанныеСертификата = Новый Структура("Сертификат, ДвоичныеДанныеСертификата, ЗапомнитьПарольКСертификату,
			|ПарольПользователя, ПрограммаБанка, ПарольПолучен, Отпечаток, ДействителенДо, ПользовательОповещенОСрокеДействия");
		ЗаполнитьЗначенияСвойств(ДанныеСертификата, ВыборкаСертификаты);
		ДанныеСертификата.ДвоичныеДанныеСертификата = ВыборкаСертификаты.ДанныеСертификата.Получить();
		ДанныеСертификатов.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Возврат ДанныеСертификатов;
	
КонецФункции

#КонецОбласти

#Область НастройкаОбмена

// Возвращает параметры обмена с банком по настройке.
//
// Параметры:
//  НастройкаОбмена	 - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
// 
// Возвращаемое значение:
// Структура - параметры настройки, содержит следующие элементы:
//    * ПоследняяДатаПолученияЭД - Дата - дата последнего получения документов;
//    * Метка - Строка - используется для обмена со Сбербанком для хранения названия тестовой бизнес-системы.
//
Функция ПараметрыОбменаСБанком(НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	Возврат РегистрыСведений.ПараметрыОбменСБанками.Получить(Отбор);
	
КонецФункции

// Получает список действующих настроек обмена с банками. Если параметры не переданы, то возвращает все настройки.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация в настройке;
//  Банк  - СправочникСсылка.КлассификаторБанковРФ - банк в настройке.
//
// Возвращаемое значение:
//   Массив - содержит ссылки на справочник НастройкиОбменСБанками.
//
Функция НастройкиОбмена(Организация, Банк) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуетсяОбменСБанком = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
		"ИспользоватьОбменСБанками");
	Если НЕ ИспользуетсяОбменСБанком Тогда
		Константы.ИспользоватьОбменСБанками.Установить(Истина);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанками.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	ИСТИНА
	|	И НЕ НастройкиОбменСБанками.Недействительна
	|	И НЕ НастройкиОбменСБанками.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", "НастройкиОбменСБанками.Организация = &Организация
														|	И НастройкиОбменСБанками.Банк = &Банк");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает постоянные параметры обмена с банком.
//
// Параметры:
//   Банк - СправочникСсылка.КлассификаторБанковРФ - банк, для которого идет поиск настроек;
//   ВключитьФО - Булево - признак принудительного включения функциональной опции обмена с банками;
//   ЕстьПравоСозданияНастройкиЭДО - Булево - признак наличия у пользователя права создания настройки ЭДО.
//
// Возвращаемое значение:
//   Структура - параметры обмена, содержит поля:
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанков - используемая программа обмена с банком;
//      * СпособАутентификации - Строка - способ аутентификации при получении настроек с сервера банка;
//      * АдресСервера - Строка - адрес ресурса банка для автоматического получения настроек обмена.
//   Неопределено - параметры не найдены.
//
Функция ПоставляемыеНастройкиОбмена(Банк, ВключитьФО = Ложь, ЕстьПравоСозданияНастройкиЭДО = Ложь) Экспорт
	
	ЕстьПравоСозданияНастройкиЭДО = ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВключитьФО Тогда
		ИспользуетсяОбменСБанком = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
			"ИспользоватьОбменСБанками");
		Если НЕ ИспользуетсяОбменСБанком Тогда
			Константы.ИспользоватьОбменСБанками.Установить(Истина);
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
	КонецЕсли;

	Макет = ОбменСБанкамиСлужебныйПовтИсп.СписокБанков();
	
	БИКБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		БИК = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		ВариантПодключения = Макет.Область(Индекс, 3).Текст;
		СпособАутентификации = Макет.Область(Индекс, 4).Текст;
		Если ВариантПодключения = "СинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн;
		ИначеЕсли ВариантПодключения = "АсинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		ИначеЕсли ВариантПодключения = "ДополнительнаяОбработка" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;
		ИначеЕсли ВариантПодключения = "Сбербанк" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		ИначеЕсли ВариантПодключения = "ОбменЧерезВК" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
		КонецЕсли;
		
		Настройки = Новый Структура();
		Настройки.Вставить("ПрограммаБанка", ПрограммаБанка);
		Настройки.Вставить("СпособАутентификации", СпособАутентификации);
		Настройки.Вставить("АдресСервера", Макет.Область(Индекс, 5).Текст);
		Настройки.Вставить("АдресСтраницыБанка", Макет.Область(Индекс, 7).Текст);
		Прервать
	КонецЦикла;

	Возврат Настройки;
	
КонецФункции

// Получает значения реквизитов настройки обмена.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - Настройка обмена с банками,
//                     для которой необходимо получить значения реквизитов.
//
// Возвращаемое значение:
//   Структура - Значения реквизитов настройки обмена с банками.
//
Функция РеквизитыНастройкиОбмена(Знач НастройкаОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"ИдентификаторОрганизации, ИспользуетсяКриптография, ПрограммаБанка, СертификатБанка, АутентификацияПоСертификату,
		|ПометкаУдаления, АдресСервера, Недействительна, ИмяВнешнегоМодуля, ВерсияВнешнейКомпоненты");
	
КонецФункции

// Получает значения реквизитов настройки обмена.
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена;
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * АдресФайлаВК - Строка - адрес временного хранилища, содержащий данные внешнего модуля.
//
Процедура ПолучитьРеквизитыНастройкиОбмена(НастройкаОбмена, ЗапрашиваемыеРеквизиты) Экспорт
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "ВнешняяКомпонента");
	Если ЗапрашиваемыеРеквизиты.Свойство("АдресФайлаВК") Тогда
		ДвоичныеДанныеВК = РеквизитыНастройкиОбмена.ВнешняяКомпонента.Получить();
		АдресФайлаВК = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВК, Новый УникальныйИдентификатор);
		ЗапрашиваемыеРеквизиты.АдресФайлаВК = АдресФайлаВК;
	КонецЕсли;
	
КонецПроцедуры

// Получает значения реквизитов настройки обмена и признак требования подписи этого вида электронного документа.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - Настройка обмена с банками,
//                     для которой необходимо получить значения реквизитов.
//   ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//
// Возвращаемое значение:
//   Структура - Значения реквизитов настройки обмена с банками, с признаком необходимости подписания.
//
Функция ПараметрыОбменаПоВидуЭД(Знач НастройкаОбмена, Знач ВидЭД) Экспорт
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"ИдентификаторОрганизации, ИспользуетсяКриптография, ПрограммаБанка, СертификатБанка, АутентификацияПоСертификату,
		|ПометкаУдаления, АдресСервера, Недействительна, ВерсияФормата");
	РеквизитыНастройкиОбмена.Вставить("ТребуетсяПодпись", ПодписыватьВидЭД(НастройкаОбмена, ВидЭД));
	Возврат РеквизитыНастройкиОбмена;
	
КонецФункции

#КонецОбласти

#Область Сбербанк

// Добавляет новый сертификат в справочник СертификатыКлючейЭлектроннойПодписиИШифрования.
// 
// Параметры:
//    ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата;
//    Организация - СправочникСсылка.Организации - организация сертификата.
//
// Возвращаемое значение:
//    СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - созданный сертификат.
//
Функция СоздатьСертификатСбербанка(Знач ДвоичныеДанныеСертификата, Знач Организация) Экспорт
	
	НовыйСертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		ДвоичныеДанныеСертификата, Организация);
	
	Если ЗначениеЗаполнено(НовыйСертификат) Тогда
		МенеджерЗаписи = РегистрыСведений.СведенияОСертификатахОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		МенеджерЗаписи.СертификатЭП = НовыйСертификат;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат НовыйСертификат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет по настройке, подписывается ли данный вид ЭД.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена;
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//
// Возвращаемое значение:
//  Булево - Истина, если документ нужно подписывать.
//
Функция ПодписыватьВидЭД(НастройкаОбмена, ВидЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанками.ИспользоватьЭП
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.ИсходящийДокумент = &ВидЭД
	|	И НастройкиОбменСБанками.Ссылка = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий() И Выборка.ИспользоватьЭП;
	
КонецФункции

// Возвращает данные для отправки в банк через ВК.
//
// Параметры:
//  ИсходныеДанные - Соответствие - данные, в которыми производилась работа
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//    * Значение - Массив - документы для обработки
//        ** ДокументСсылка.СообщенияОбменСБанками - ссылка на электронный документ.
// 
// Возвращаемое значение:
//  Соответствие - данные, которые готовы к отправке в банк
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//    * Значение - Массив - документы для отправки
//        ** ДокументСсылка.СообщенияОбменСБанками - ссылка на электронный документ.
//
Функция ДанныеДляОтправкиЧерезВК(ИсходныеДанные) Экспорт
	
	ДанныеВозврата = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ИсходныеДанные Цикл
		МассивСообщенийОбмена = Новый Массив;
		Для Каждого СообщениеОбмена Из КлючЗначение.Значение Цикл
			Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				МассивСообщенийОбмена.Добавить(СообщениеОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСообщенийОбмена.Количество() Тогда
			ДанныеВозврата.Вставить(КлючЗначение.Ключ, МассивСообщенийОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

#Область НастройкиОбменаСБанками

// Получает параметры журналирования.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
// 
// Возвращаемое значение:
//  Структура - параметры обмена с банком:
//    * ИспользоватьЖурналирование - Булево - признак использования журналирования обмена;
//    * КаталогДляЖурналирования - Строка - каталог для сохранения файлов журнала.
//
Функция ПараметрыЖурналирования(Знач НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("ИспользоватьЖурналирование, КаталогДляЖурналирования", Ложь, "");
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Производит поиск настройки обмена с банком.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, указанная в настройке;
//   Банк - СправочникСсылка.КлассификаторБанковРФ - банк, указанный в настройке;
//   ЕстьПравоПросмотраНастройкиЭДО - Булево - признак наличия у пользователя права открытия настройки ЭДО для просмотра.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОбменСБанками или Неопределено - найденная настройка обмена с банком.
//
Функция НастройкаОбмена(Знач Организация, Знач Банк, ЕстьПравоПросмотраНастройкиЭДО = Ложь) Экспорт
	
	ЕстьПравоПросмотраНастройкиЭДО = ПравоДоступа("Просмотр", Метаданные.Справочники.НастройкиОбменСБанками);
	Возврат ОбменСБанками.НастройкаОбмена(Организация, Банк);
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части настройки обмена ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом настроек обмена, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  СтМассивовСтруктурСертификатов - структура массивов - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//
// Возвращаемое значение:
//  Структура соответствий - пустая, либо содержит 3 элемента:
//    СоотвНастроекОбменаИСертификатовПодписи;
//    СоотвНастроекОбменаИСертификатовАвторизации;
//    СоотвСертификатовИИхСтруктур.
//
Функция СтруктураСоответствийНастроекОбменаИСертификатовАвторизации(МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей)
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивОтпечатковКлиент = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковСервер", МассивОтпечатковСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		Если ВыполнятьКриптооперацииНаСервере И НЕ ЗначениеЗаполнено(МассивОтпечатковСервер) И ИспользоватьЭП Тогда
			Попытка
				МассивОтпечатковСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатковСервер = ?(ЗначениеЗаполнено(МассивОтпечатковСервер), МассивОтпечатковСервер, Новый Массив);
	МассивОтпечатковКлиент = ?(ЗначениеЗаполнено(МассивОтпечатковКлиент), МассивОтпечатковКлиент, Новый Массив);
	
	МассивОтпечатковДляАвторизации = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковКлиент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковСервер);
	
	Если (МассивОтпечатковСервер <> Неопределено И МассивОтпечатковСервер.Количество())
		ИЛИ (МассивОтпечатковКлиент <> Неопределено И МассивОтпечатковКлиент.Количество()) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСертификатов.Сертификат,
		|	ТаблицаСертификатов.ПарольПользователя
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	&ТаблицаСертификатов КАК ТаблицаСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	НастройкиОбмена.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапомнитьПарольКСертификату,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДействителенДо КАК ДатаОкончания,
		|	НастройкиОбмена.ПрограммаБанка КАК ПрограммаБанка
		|ИЗ
		|	Справочник.НастройкиОбменСБанками КАК НастройкиОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
		|				ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
		|			ПО НастройкиОбменаСертификаты.СертификатЭП = Сертификаты.Ссылка
		|		ПО (НастройкиОбменаСертификаты.Ссылка = НастройкиОбмена.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И &ПроверкаПользователя
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковДляАвторизации)
		|	И НЕ НастройкиОбмена.ПометкаУдаления
		|	И НастройкиОбмена.Ссылка В(&МассивНастроекОбмена)
		|	И ВЫБОР
		|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПарольПолучен УБЫВ";
		
		Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации", МассивОтпечатковДляАвторизации);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		КонецЕсли;

		
		СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковДляАвторизации);
		ТЗ_Сертификатов = Новый ТаблицаЗначений;
		ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ТЗ_Сертификатов.Колонки.Добавить("ПарольПользователя", Новый ОписаниеТипов("Строка"));
		Для Каждого Элемент Из СертификатыСПаролями Цикл
			НоваяСтрока = ТЗ_Сертификатов.Добавить();
			НоваяСтрока.Сертификат = Элемент.Ключ;
			НоваяСтрока.ПарольПользователя = Элемент.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
		Если НЕ ЗначениеЗаполнено(МассивНастроекОбмена) Тогда
			МассивНастроекОбмена = Новый Массив;
		КонецЕсли;
		Если МассивНастроекОбмена.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивНастроекОбмена", МассивНастроекОбмена);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НастройкиОбмена.Ссылка В(&МассивНастроекОбмена)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СоотвНастроекОбменаИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		ТекущаяНастройкаОбмена = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущаяНастройкаОбмена <> Выборка.НастройкаОбмена Тогда
				МассивСертификатов = Новый Массив;
				ТекущаяНастройкаОбмена = Выборка.НастройкаОбмена;
			КонецЕсли;
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
			
			Если СоотвНастроекОбменаИМассиваСертификатовАвторизации.Получить(ТекущаяНастройкаОбмена) = Неопределено Тогда
				СоотвНастроекОбменаИМассиваСертификатовАвторизации.Вставить(ТекущаяНастройкаОбмена, МассивСертификатов);
			КонецЕсли;
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток, Отозван,
													|ДанныеСертификата, ОповещенОСрокеДействия, ДатаОкончания, ЗапомнитьПарольКСертификату, ПрограммаБанка");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
		
			ПарольПолучен = Выборка.ПарольПолучен;
			СтруктураСертификата.Вставить("ПарольПользователя", Выборка.ПарольПользователя);
			СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
		
			СоотвСертификатовИИхСтруктур.Вставить(Выборка.СертификатПодписи, СтруктураСертификата);
			
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвНастроекОбменаИМассиваСертификатовАвторизации", СоотвНастроекОбменаИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЭлектронногоДокумента

// Только для внутреннего использования. Получает начальное состояние ЭД.
//
// Параметры:
//  СсылкаНаВладельца - Источник объекта либо ссылка электронного документа владельца.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияОбменСБанками - состояние ЭД.
//
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца)
	
	ПараметрыЭД = ОбменСБанкамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца.Ссылка);
	
	СостояниеЭД = Перечисления.СостоянияОбменСБанками.ПустаяСсылка();
	Направление = "";
	Если ПараметрыЭД.Свойство("Направление", Направление) И ЗначениеЗаполнено(Направление) Тогда
		Если Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован;
		ИначеЕсли Направление = Перечисления.НаправленияЭД.Входящий Тогда
			СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаУтверждении;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЭД;
	
КонецФункции

Функция ЗапросыВыписок(Знач НастройкаОбмена, Знач ДатаНачала, Знач ДатаОкончания, Знач НомерСчета, МассивОтпечатковСертификатов, НастройкиОбмена) Экспорт
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ПрограммаБанка, ИдентификаторОрганизации");
	
	МассивБанковскихСчетов = Новый Массив;
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		МассивБанковскихСчетов.Добавить(НомерСчета);
	Иначе
		ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
			РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
	КонецЕсли;
		
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
		МассивСообщенийЗапросов = МассивЗапросовВыписки(НастройкаОбмена, РеквизитыНастройкиОбмена.Организация,
			РеквизитыНастройкиОбмена.Банк, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов);
	Иначе
		МассивСообщенийЗапросов = МассивЗапросовВыпискиAsync(
			НастройкаОбмена, РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов);
	КонецЕсли;
		
	Если НЕ МассивСообщенийЗапросов.Количество() Тогда
		Возврат МассивСообщенийЗапросов;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСервера = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера, Истина);
	КонецЕсли;
	
	НастройкиОбмена = ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
		НастройкаОбмена, Истина, МассивОтпечатковСертификатов, МассивСообщенийЗапросов[0]);
	
	Возврат МассивСообщенийЗапросов;
	
КонецФункции

// Возвращает ссылку на присоединенный к сообщению файл.
// 
// Параметры:
//   СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//   СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы - присоединенный файл.
//
Функция ПрисоединенныйФайл(СообщениеОбмена) Экспорт
	
	МассивФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(СообщениеОбмена, МассивФайлов);
	Если МассивФайлов.Количество() Тогда
		Возврат МассивФайлов[0];
	Иначе
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл сообщения %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СообщениеОбмена);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстОшибки, 1, СообщениеОбмена);
	КонецЕсли;
	
КонецФункции

// Возвращает ссылку на владельца присоединенного файла.
//
// Параметры:
//   ПрисоединенныйФайл - СправочникСсылка - ссылка на присоединенный файл.
//
// Возвращаемое значение:
//   ДокументСсылка - ссылка на владельца присоединенного файла.
//
Функция ВладелецФайла(ПрисоединенныйФайл) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
	
КонецФункции

// Возвращает представление электронного документа.
// 
// Параметры:
//   СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//   Строка - строковое представление электронного документа.
//
Функция ПредставлениеЭлектронногоДокумента(СообщениеОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Представление");
	
КонецФункции

#КонецОбласти

#Область АсинхронныйОбменСБанками

// Возвращает зашифрованный маркер банка. Может вызывать исключение.
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера;
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//  ДанныеСертификата - ДвоичныеДанные - содержимое сертификата электронной подписи;
//  ВерсияФормата - Строка - текущая версия схемы обмена;
//  ПробнаяОперация - Булево - признак, что операция пробная и записывать ошибки в журнал регистрации не нужно;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//
// Возвращаемое значение:
//  ДвоичныеДанные - зашифрованные двоичные данные маркера.
//
Функция МаркерБанкаПоСертификату(АдресСервера, ИдентификаторОрганизации, ДвоичныеДанныеСертификата, ВерсияФормата = Неопределено, ПробнаяОперация = Ложь, НастройкаОбмена = Неопределено) Экспорт
	
	ВидОперации = НСтр("ru = 'Аутентификация на сервере банка'");

	Маркер = Неопределено;
	
	Если Не ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ДанныеАутентификации = ДанныеДляАутентификацииПоСертификату(ДвоичныеДанныеСертификата, ВерсияФормата);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", ВерсияФормата);
	Заголовки.Вставить("AvailableAPIVersion", ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена());
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(
		АдресСервера, "LogonCert", Заголовки, ДанныеАутентификации, , 30);
		
	Если НЕ Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка аутентификации на сервере банка.
								|Код ошибки: %1.
								|%2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		Если НЕ ПробнаяОперация Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, , 1, НастройкаОбмена);
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Попытка
		
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

		Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);

		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось пройти процесс аутентификации. Получен некорректный ответ банка.
									|Проверьте настройки обмена с сервисом 1С:ДиректБанк или обратитесь в техподдержку банка.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать файл, полученный из банка.
								|Полученный файл: %1
								|Подробная информация об ошибке: %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайлаРезультата, ПодробноеПредставлениеОшибки);
		Если Не ПробнаяОперация Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, , 1, НастройкаОбмена);
		КонецЕсли;
		Чтение.Закрыть();
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если НЕ ResultBank.Error = Неопределено Тогда
		Если Не ПробнаяОперация Тогда
			ТекстСообщенияОПолученнойОшибке = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщенияОПолученнойОшибке, , 1, НастройкаОбмена);
		КонецЕсли;
		Чтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
		ВызватьИсключение ТекстСообщенияОПолученнойОшибке;
	КонецЕсли;
	
	Маркер = ResultBank.Success.LogonCertResponse.EncryptedSID.__content;
	Чтение.Закрыть();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	
	Возврат Маркер;
	
КонецФункции

// Получает зашифрованный идентификатор сессии с сервера банка.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ДанныеСертификатаАутентификации - Структура - данные сертификата аутентификации. Содержит поля:
//     * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат аутентификации;
//     * Данные - Строка - адрес временного хранилища, содержащий двоичные данные сертификата аутентификации.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - зашифрованные двоичные данные идентификатора сессии;
//  Неопределено - при получении идентификатора сессии произошла ошибка.
//
Функция ЗашифрованныйИдентификаторСессии(Знач НастройкаОбмена, Знач ДанныеСертификатаАутентификации) Экспорт
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "ИдентификаторОрганизации, АдресСервера, ВерсияФормата");
	
	СертификатПодписи = ДанныеСертификатаАутентификации.Ссылка;
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСертификатаАутентификации.Данные);
	
	Возврат МаркерБанкаПоСертификату(РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДвоичныеДанныеСертификата, РеквизитыНастройкиОбмена.ВерсияФормата,
		, НастройкаОбмена)
	
КонецФункции

// Производит аутентификацию на сервере банка и получает идентификатор сессии.
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера банка;
//  ИдентификаторОрганизации  - Строка - идентификатор организации на сервере банка;
//  ДанныеАутентификации - Структура - данные аутентификации на сервере банка:
//        * Пользователь - Строка - логин на сервере банка;
//        * Пароль - Строка - пароль аутентификации на сервере банка.
//  ВерсияAPI - Строка - версия API;
//  ДанныеSMSАвторизации - Структура - возвращаемый параметр - содержит данные для дополнительной авторизации по SMS.
// Возвращаемое значение:
//  Строка - идентификатор сессии банка, Неопределено - если произошла ошибка получения идентификатора.
//
Функция МаркерБанкаБазоваяАутентификация(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач ДанныеАутентификации, Знач ВерсияAPI, ДанныеSMSАутентификации, Знач НастройкаОбмена = Неопределено, НеверныеДанныеАутентификации = Ложь) Экспорт
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", ВерсияAPI);
	Заголовки.Вставить("AvailableAPIVersion", ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена());
	ХЭШ = СтрокаBase64БезBOM(ДанныеАутентификации.Пользователь + ":" + ДанныеАутентификации.Пароль);
	Заголовки.Вставить("Authorization", "Basic " + Хэш);
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(АдресСервера, "Logon", Заголовки, , , 15);
	
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка отправки данных аутентификации на сервер банка.
								|Код ошибки: %1.
								|%2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ОписаниеОперации, ТекстОшибки, ТекстОшибки, 1, НастройкаОбмена);
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		Если НЕ ResultBank.Success = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
				Если НЕ ResultBank.Success.LogonResponse.ExtraAuth = Неопределено Тогда
					ДанныеSMSАутентификации = Новый Структура;
					ДанныеSMSАутентификации.Вставить("ТребуетсяSMSАвторизация");
					ДанныеSMSАутентификации.Вставить("МаскаТелефона", ResultBank.Success.LogonResponse.ExtraAuth.OTP.phoneMask);
				КонецЕсли;
				Чтение.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
				Возврат ResultBank.Success.LogonResponse.SID;
			Иначе
				ТекстСообщения = НСтр("ru = 'Получен некорректный ответ банковского сервиса'");
				ТекстОшибки = НСтр("ru = 'Ответ банка содержит некорректные данные.
										|Файл ответа банка: %1'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайлаРезультата);
				ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					ОписаниеОперации, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
				Возврат Неопределено;
			КонецЕсли
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, НастройкаОбмена);
			Если ResultBank.Error.Code = "1201" Тогда // неверные данные аутентификации
				НеверныеДанныеАутентификации = Истина;
			КонецЕсли;
		КонецЕсли;
		Чтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка.'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ШаблонОшибки = НСтр("ru = 'При чтении ответа банка произошла ошибка.
								|Файл ответа: %1
								|Ошибка: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ИмяФайлаРезультата, ПодробноеПредставлениеОшибки);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ОписаниеОперации, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
	КонецПопытки;
	
КонецФункции

// только для внутреннего использования
Процедура ПолучитьЭДИзБанкаАсинхронныйОбмен(Знач НастройкаОбмена, Знач Параметры, ДанныеВозврата) Экспорт
	
	ДанныеОСостоянии = ПараметрыОбменаСБанком(НастройкаОбмена);
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "АдресСервера, Банк, ИдентификаторОрганизации, ВерсияФормата");
		
	Заголовки = Новый Соответствие;
	Если Параметры.Свойство("МаркерРасшифрованный") Тогда
		ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
			Параметры.МаркерРасшифрованный);
		Заголовки.Вставить("SID", ИдентификаторСессии);
	Иначе
		Шаблон = НСтр("ru = 'Ошибка аутентификации на сервисе по адресу (%1)'");
		ТекстИсключения = СтрШаблон(Шаблон, РеквизитыНастройкиОбмена.АдресСервера);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		ДанныеВозврата.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	Заголовки.Вставить("CustomerId", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", РеквизитыНастройкиОбмена.ВерсияФормата);

	
	НачальнаяДатаПолученияЭД = ДанныеОСостоянии.ПоследняяДатаПолученияЭД;
	ПоследняяДатаПолученияЭД = НачальнаяДатаПолученияЭД;
	
	ДатаСтрокой = Формат(НачальнаяДатаПолученияЭД, "ДФ='dd.MM.yyyy HH:mm:ss'");
	
	ПараметрЗапроса = ?(ЗначениеЗаполнено(НачальнаяДатаПолученияЭД), "?date=" + ДатаСтрокой, "");
	
	АдресРесурса = "GetPackList" + ПараметрЗапроса;
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ПолучитьДанныеССервера(
		РеквизитыНастройкиОбмена.АдресСервера, АдресРесурса, Заголовки);
	
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			
			Если Результат.КодСостояния = 401 Тогда
				ДанныеВозврата.ТребуетсяПовторнаяАутентификация = Истина;
				ДанныеВозврата.ЕстьОшибка = Истина;
				Возврат;
			Иначе
				Шаблон = НСтр("ru = 'При получении списка новых документов из банка произошла ошибка.
								|Код ошибки: %1.
								|%2'");
				ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
			КонецЕсли;
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Получение списка новых пакетов из банка.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстОшибки, 1, НастройкаОбмена);
		ДанныеВозврата.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяФайлаРезультата = Результат.Тело;
	
	ЕстьОшибка = Ложь;
	МассивИдентификаторов = Новый Массив;
	
	ОбменСБанкамиСлужебный.ПрочитатьИдентификаторыПакетов(
		НастройкаОбмена, ИмяФайлаРезультата, МассивИдентификаторов, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		ДанныеВозврата.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		АдресРесурса = "GetPack?id=" + Идентификатор;
		
		Результат = ЭлектронноеВзаимодействиеСлужебный.ПолучитьДанныеССервера(
			РеквизитыНастройкиОбмена.АдресСервера, АдресРесурса, Заголовки);
	
		Если Не Результат.Статус Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Результат.Тело);
			
			Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
				Шаблон = НСтр("ru = 'При получении нового документа из банка произошла ошибка.
									|Код ошибки: %1.
									|%2'");
				ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
			Иначе
				ТекстОшибки = Результат.СообщениеОбОшибке;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, ТекстОшибки, 1, НастройкаОбмена);
			ДанныеВозврата.ЕстьОшибка = Истина;
			Продолжить;
		КонецЕсли;
	
		ИмяФайлаРезультата = Результат.Тело;
		
		ОбменСБанкамиСлужебный.СохранитьПолученныйПакет(НастройкаОбмена, ИмяФайлаРезультата, ДанныеВозврата);
		
		ДанныеВозврата.КолПолученныхПакетов = ДанныеВозврата.КолПолученныхПакетов + 1;

	КонецЦикла;
	
КонецПроцедуры

// Авторизуется на сервере банка и получает идентификатор сессии по одноразовому паролю из SMS.
//
// Параметры
//  АдресСервера - Строка - URL адрес сервера банка;
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//  ИдентификаторСессии  - Строка - неавторизованный идентификатор сессии;
//  ОдноразовыйПароль - Строка - пароль, полученный пользователем в виде СМС;
//  ВерсияAPI - Строка - версия API асинхронного обмена;
// Возвращаемое значение:
//   Строка   - идентификатор сессии банка, Неопределено - если произошла ошибка получения идентификатора.
//
Функция МаркерБанкаПоSMS(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач ИдентификаторСессии, Знач ОдноразовыйПароль, Знач ВерсияAPI) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("SID", ИдентификаторСессии);
	Заголовки.Вставить("OTP", ОдноразовыйПароль);
	Заголовки.Вставить("APIVersion", ВерсияAPI);
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(АдресСервера, "LogonOTP", Заголовки, , , 15);
	
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка отправки одноразового пароля.
								|Код ошибки: %1.
								|%2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ОписаниеОперации, ТекстОшибки, ТекстОшибки, 1);
		Возврат Неопределено;
	КонецЕсли;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		Если НЕ ResultBank.Success = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
				Чтение.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
				Возврат ResultBank.Success.LogonResponse.SID;
			КонецЕсли
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка.'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
	Чтение.Закрыть();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	
КонецФункции

// Формирует ЭД запрос-зонд.
//
// Параметры:
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБаками - настройка обмена с банком;
//  МассивСтруктурСертификатов - Массив - в элементах содержатся отпечатки сертификатов в виде строки;
//  НастройкиОбмена - Структура - (Возвращаемое значение) содержит настройки обмена;
//  НовоеСообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сформированное сообщение запрос-зонд.
//
Процедура СформироватьЗапросЗонд(Знач НастройкаОбмена, Знач МассивОтпечатковСертификатов, НовоеСообщениеОбмена, НастройкиОбмена) Экспорт
	
	ЗапросОтправлен = Ложь;
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, ВерсияФормата");

	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	ВерсияПрограммыКлиента = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыНастройкиОбмена.Организация);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");
	
	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	ТекстОшибки = "";
	
	Попытка
		
		Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);
		
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
			
		Идентификатор = Новый УникальныйИдентификатор;
		
		ЗапросЗонд = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "Probe", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "id", Строка(Идентификатор), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "userAgent", ВерсияПрограммыКлиента, , ТекстОшибки);
		Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросЗонд.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(Фабрика, ЗапросЗонд, ВремФайл, Ложь);
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбмена);
		ФайлСформирован = Ложь;
	КонецПопытки;
		
	Если Не ФайлСформирован Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

	Если ОбменСБанкамиСлужебный.ФайлИзменен(Фабрика, ЗапросЗонд, ВремФайл, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	НазваниеДокумента = НСтр("ru = 'Запрос-зонд'");
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("Представление", НазваниеДокумента);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	СтруктураРеквизитов.Вставить("Идентификатор", Строка(Идентификатор));
	СтруктураРеквизитов.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
	СтруктураРеквизитов.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	
	НовоеСообщениеОбмена = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);

	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСертификатовНаСервере = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
	КонецЕсли;
		
	НастройкиОбмена = ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(НастройкаОбмена, Истина,
		МассивОтпечатковСертификатов, НовоеСообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбменСБанкомЧерезДополнительнуюОбработку

// Обрабатывает ответ банка на отправку платежных документов
//
// Параметры:
//  ПакетыЭДО - Соответствие
//    * Ключ - ДокументСсылка.ПакетОбменСБанками - ссылка на документ ПакетОбменСБанками
//  ДанныеОтвета  - Соответствие - данные ответа банка
//  ОтправленныеДокументы - Массив - владельцы отправленных электронных документов
//    * ДокументСсылка - ссылка на владельца отправленного электронного документа.
//
Процедура ОбработатьОтветБанкаПослеОтправкиДокументовЧерезВнешнююОбработку(Знач ПакетыЭДО, Знач ДанныеОтвета, ОтправленныеДокументы) Экспорт
	
	Для Каждого Элемент Из ПакетыЭДО Цикл
		Параметры = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Отправлен);
		ОбновитьСтатусыДокументовПакетаЭДО(Элемент.Ключ, Перечисления.СтатусыПакетовЭД.Отправлен, Параметры);
	КонецЦикла;
	
	МассивОтправленныхСообщенийОбмена = Новый Массив;
	
	Для Каждого Ответ Из ДанныеОтвета Цикл
		
		СтруктураПараметров = Новый Структура;
		Если ЗначениеЗаполнено(Ответ.Значение.Идентификатор) Тогда
			Если Ответ.Значение.Статус = "30" Тогда
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.НеПодтвержден);
			Иначе
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
			КонецЕсли;
			СтруктураПараметров.Вставить("ВнешнийИдентификатор", Ответ.Значение.Идентификатор);
		Иначе
			СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
			СтруктураПараметров.Вставить("ПричинаОтклонения", Ответ.Значение.ТекстОшибки);
		КонецЕсли;
		СообщениеОбмена = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", Строка(Ответ.Ключ));
		
		Если Не ЗначениеЗаполнено(СообщениеОбмена) Тогда
			ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка.'");
			ТекстОшибки = НСтр("ru = 'Не найдено исходное сообщение обмена по идентификатору: %1.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Ответ.Ключ);
			ВидОперации = НСтр("ru = 'Чтение данных ответа банка'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 1);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответ.Значение.Идентификатор) Тогда // сообщение успешно отправлено
			МассивОтправленныхСообщенийОбмена.Добавить(СообщениеОбмена);
		КонецЕсли;
		
		ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);

	КонецЦикла;
	
	Если МассивОтправленныхСообщенийОбмена.Количество() Тогда
		ОтправленныеДокументы = ВладельцыСообщенийОбмена(МассивОтправленныхСообщенийОбмена);
	КонецЕсли;

КонецПроцедуры

// Производит сериализацию данных.
//
// Параметры:
// Значение - Произвольный - данные для сериализации.
//
// Возвращаемое значение:
//  Строка - сериализованные данные.
//
Функция СериализованныеДанные(Знач Значение) Экспорт

	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Значение);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Производит десериализацию данных.
//
// Параметры:
// ПредставлениеXML - Строка - сериализованные данные.
//
// Возвращаемое значение:
//  Произвольный - десериализованные данные.
//
Функция ДеСериализованныеДанные(Знач ПредставлениеXML) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
	ЧтениеXML.Прочитать();

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Возврат Сериализатор.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

// Получает структуру данных электронных документов для последующего формирования ЭП.
//
// Параметры
//  МассивСообщений  - Массив
//    * ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение.
//
// Возвращаемое значение:
// Структура, содержит данные для обработки на клиенте.
//
Функция ДанныеДляФормированияЭПЧерезДопОбработку(Знач МассивСообщений) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("МассивСообщенийБезСхем", Новый Массив);
	СтруктураВозврата.Вставить("МассивСообщенийСоСхемами", Новый Массив);
	СтруктураВозврата.Вставить("МассивТекстовыхДанныхЭД", Новый Массив);
	СтруктураВозврата.Вставить("МассивДанныхСхем", Новый Массив);
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		СообщениеСхема = ОбменСБанкамиСлужебный.СлужебноеСообщениеБанка(Сообщение);
		Если ЗначениеЗаполнено(СообщениеСхема) Тогда
			СтруктураВозврата.МассивСообщенийСоСхемами.Добавить(СообщениеСхема);
			ДвоичныеДанные = ДвоичныеДанныеПрисоединенногоФайла(СообщениеСхема);
			СтруктураВозврата.МассивДанныхСхем.Добавить(ДвоичныеДанные);
		Иначе
			СтруктураВозврата.МассивСообщенийБезСхем.Добавить(Сообщение);
			ДвоичныеДанные = ДвоичныеДанныеПрисоединенногоФайла(Сообщение);
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтруктураВозврата.МассивТекстовыхДанныхЭД.Добавить(СтрокаXML);
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Сохраняет схемы данных электронных документов.
//
// Параметры
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройки обмена с банком;
//  МассивСообщений  - Массив
//    * - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//  МассивСхемДанных  - Массив
//    * - Строка - текстовые данные электронного документа.
//
Процедура СохранитьСхемыДанных(Знач НастройкаОбмена, Знач МассивСообщений, Знач МассивСхемДанных) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Индекс = 0;
	КоличествоСообщений = МассивСообщений.Количество();
	
	Для Индекс = 0 По КоличествоСообщений - 1 Цикл
		
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивСхемДанных[Индекс]);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		СтруктураРеквизитов.Вставить("Представление", НСтр("ru = 'Схема данных'"));
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
		СтруктураРеквизитов.Вставить("СообщениеРодитель", МассивСообщений[Индекс]);
		НовоеСообщениеОбмена = Неопределено;
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);
	
	КонецЦикла;
		
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
КонецПроцедуры

// Сохраняет подписи электронного документа. Используется только для обмена через дополнительную обработку.
//
// Параметры:
//  МассивСообщений  - Массив
//    * ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//  МассивПодписей  - Массив - содержит массив данных подписей;
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписи - ссылка на сертификат подписи.
//
Процедура СохранитьДанныеПодписей(Знач МассивСообщений, Знач МассивПодписей, Знач Сертификат) Экспорт
	
	КоличествоЭД = МассивСообщений.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		ДанныеПроверкиПодписи = Новый Структура;
		ДанныеПроверкиПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
		ДанныеПроверкиПодписи.Вставить("ПодписьВерна", Истина);
		ДобавитьПодпись(МассивСообщений[Индекс], МассивПодписей[Индекс], Сертификат, ДанныеПроверкиПодписи);
	КонецЦикла

КонецПроцедуры

// только для внутреннего использования
Процедура ОтправитьЭДВБанк(Знач НастройкаОбмена, Знач ПараметрыАвторизации, ДанныеВозврата) Экспорт
	
	КолОтправленныхПакетов = ОтправкаСформированныхСообщенийВБанк(НастройкаОбмена, ПараметрыАвторизации);
	ДанныеВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	
	ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиВБанк(
		НастройкаОбмена, Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку);
	Если ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
		ДанныеВозврата.Вставить("ДанныеДляОтправкиЧерезДопОбработку", ДанныеДляОтправкиЧерезДопОбработку);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сбербанк

// Подбирает действующую настройку обмена, в которой есть указанный сертификат.
// 
// Параметры:
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи.
//
// Возвращаемое значение:
//    СправочникСсылка.НастройкиОбменСБанками или Неопределено - найденная настройка обмена.
//
Функция НастройкаОбменаПоСертификатуСбербанк(Сертификат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП = &СертификатЭП
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.Недействительна";
	
	Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

// Определяет, есть ли запросы ночных выписок, по которым еще не приходил ответ.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//
// Возвращаемое значение:
//    Булево - Истина - есть необработанные запросы, Ложь - получены ответы на все запросы.
//
Функция ЕстьЗапросыНочныхВыписокБезОтветаСбербанк(Знач НастройкаОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыЗапросовБанка.Идентификатор
	|ИЗ
	|	РегистрСведений.ТикетыОбменСБанками КАК ИдентификаторыЗапросовБанка
	|ГДЕ
	|	ИдентификаторыЗапросовБанка.НастройкаОбмена = &НастройкаОбмена
	|	И ИдентификаторыЗапросовБанка.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросНочнойВыписки)";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// Записывает ошибку в журнал регистрации и возвращает текст сообщения.
//
// Параметры:
//  Ответ - Строка - ответ банка с ошибкой;
//  ИдентификаторСобытия - УникальныйИдентификатор - идентификатор события в журнале аудита;
//  ТекстСообщения - Строка - сообщение, которое нужно показать пользователю.
//
Процедура ОбработатьИзвещениеСОшибкойСбербанк(Знач Ответ, Знач ИдентификаторСобытия, ТекстСообщения) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
								|Идентификатор события: %1
								|Текст ошибки: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(
			ТекстОшибки, ИдентификаторСобытия, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, , 1);
		Возврат
	КонецПопытки;
	
	ШаблонСообщения = НСтр("ru = 'Получена ошибка из банка.
								|Код: %1.
								|Тип: %2
								|Описание: %3'");
	Если ТипЗнч(ЭД.Errors.Error) = Тип("СписокXDTO") Тогда
		Для Каждого Error Из ЭД.Errors.Error Цикл
			ТекстСообщения = ТекстСообщения + СтрШаблон(ШаблонСообщения, Error.Code, Error.Type, Error.Desc) + Символы.ПС;
			ВидОперации = НСтр("ru = 'Отправка данных в банк'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения, , 1);
		КонецЦикла;
	Иначе
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭД.Errors.Error.Code, ЭД.Errors.Error.Type, ЭД.Errors.Error.Desc);
		ВидОперации = НСтр("ru = 'Отправка данных в банк'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения, , 1);
	КонецЕсли
	
КонецПроцедуры

// Возвращает имя бизнес-системы для организации канала, используется для подключения к разным стендам.
Функция ИмяБизнесСистемыДляТестов(НастройкаОбмена) Экспорт
	
	ИмяБизнесСистемы = "";
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	ВыборкаДанных = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	Если ВыборкаДанных.Следующий() Тогда
		ИмяБизнесСистемы = ВыборкаДанных.Метка;
	КонецЕсли;
	Возврат ИмяБизнесСистемы;
	
КонецФункции

// Возвращает выписки банка за период из информационной базы.
// Если не найдена выписка хоть за один из дней в периоде, то возвращается пустой массив.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкаОбменСБанками - настройка обмена с банком;
//   МассивСчетов - Массив - в элементах - строки, содержащие номера счетов;
//   ДатаНачала - Дата - дата начала периода;
//   ДатаОкончания - Дата - дата окончания периода;
//
// Возвращаемое значение:
//   Массив - в элементах ДокументСсылка.СообщениеОбменСБанком - ссылки на банковские выписки.
//
Функция ГотовыеВыпискиСбербанка(Знач НастройкаОбмена, Знач МассивСчетов, Знач ДатаНачала, Знач ДатаОкончания, Знач ДатаЗапроса = Неопределено) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СообщениеОбменСБанками.Ссылка,
	               |	СообщениеОбменСБанками.ДатаСообщения КАК ДатаВыпискиБанка
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	               |	И СообщениеОбменСБанками.НомерСчета В(&НомераБанковскихСчетов)
	               |	И СообщениеОбменСБанками.ДатаСообщения <= &ДатаОкончания
	               |	И СообщениеОбменСБанками.ДатаСообщения >= &ДатаНачала
	               |	И &УсловиеДатаЗапроса
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаВыпискиБанка,
	               |	СообщениеОбменСБанками.Дата УБЫВ";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("НомераБанковскихСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Если ЗначениеЗаполнено(ДатаЗапроса) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДатаЗапроса", "СообщениеОбменСБанками.Дата > &ДатаЗапроса");
		Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДатаЗапроса", "ИСТИНА");
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредыдущаяДата = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ПредыдущаяДата = Выборка.ДатаВыпискиБанка Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущаяДата = Выборка.ДатаВыпискиБанка;
		МассивВозврата.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ТребуемоеКоличествоДней = (НачалоДня(ДатаОкончания) - ДатаНачала)/60/60/24*МассивСчетов.Количество() + 1;
	
	Если ТребуемоеКоличествоДней <> МассивВозврата.Количество() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Удаляет идентификатор из регистра, чтобы в дальнейшем не происходил запрос состояния по нему.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена со сбербанком;
//   Идентификатор - Строка - идентификатор запроса;
//   ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
Процедура УдалитьИдентификаторЗапроса(Знач НастройкаОбмена, Знач Идентификатор) Экспорт

	НаборЗаписей = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Удаление идентификатора запроса банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбмена);
	КонецПопытки;
	
КонецПроцедуры

// Записывает событие в журнал аудита.
//
// Параметры
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ОписаниеСобытия  - строка - текстовое описание события для отражения в журнале;
//  ТекстСообщения  - строка - текст с данными;
//  ИдентификаторСобытия - Строка - (возвращаемое значение) - идентификатор события в журнале аудита.
//
Процедура ЗаписатьСобытиеВЖурналАудита(Знач НастройкаОбмена, Знач Метод, Знач Запрос, Знач Ответ = Неопределено, ИдентификаторСобытия = Неопределено) Экспорт

	Если ПараметрыЖурналирования(НастройкаОбмена).ИспользоватьЖурналирование Тогда
		
		ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор);

		НовЗапись = РегистрыСведений.ЖурналАудитаОбменСБанками.СоздатьМенеджерЗаписи();
		НовЗапись.ИдентификаторСобытия = ИдентификаторСобытия;
		НовЗапись.Метод = Метод;
		НовЗапись.Период = ТекущаяДатаСеанса();
		НовЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
		НовЗапись.НастройкаОбмена = НастройкаОбмена;
		НовЗапись.Запрос = Запрос;
		Если ЗначениеЗаполнено(Ответ) Тогда
			НовЗапись.Ответ = Ответ;
		КонецЕсли;
		НовЗапись.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет идентификаторы запросов для дальнейшего запроса статусов.
//
// Параметры
//  МассивИдентификаторов  - Массив - массив полученных идентификаторов запросов;
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ВидЭД  - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
Процедура СохранитьИдентификаторы(МассивИдентификаторов, НастройкаОбмена, ВидЭД) Экспорт
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		НовЗапись = РегистрыСведений.ТикетыОбменСБанками.СоздатьМенеджерЗаписи();
		НовЗапись.Идентификатор = Идентификатор;
		НовЗапись.НастройкаОбмена = НастройкаОбмена;
		НовЗапись.ВидЭД = ВидЭД;
		НовЗапись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает текст запроса для получения ночной выписки.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторЗапроса  - Строка - уникальный идентификатор запроса;
//  ИдентификаторОрганизации  - Строка - уникальный идентификатор организации в банковской системе;
//  ЭП  - Строка - электронная подпись дайджеста;
//  СертификатПодписи  - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи.
//
// Возвращаемое значение:
// Строка - текст запроса ночной выписки.
//
Функция ТекстЗапросаНочнойВыписки(НастройкаОбмена, ИдентификаторЗапроса, ИдентификаторОрганизации, ЭП, СертификатПодписи) Экспорт

	ПространствоИмен = "http://bssys.com/upg/request";
	
	ТекстОшибки = "";
	
	Попытка

		Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0", Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
		Incoming = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request.Incoming", ПространствоИмен);
		
		ПоследняяВходящаяДата = ПоследняяВходящаяДатаСбербанк(НастройкаОбмена);
		
		Если ЗначениеЗаполнено(ПоследняяВходящаяДата) Тогда
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
				Incoming, "lastIncomingTime", ПоследняяВходящаяДата, , ТекстОшибки);
		КонецЕсли;
		
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "Incoming", Incoming, Истина, ТекстОшибки);
		
		ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатПодписи, "ДанныеСертификата");
		ДвоичныеДанныеСертификата = ХранилищеСертификата.Получить();
		
		ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не найден сертификат установленной подписи'");
		КонецЕсли;
		DigitalSign = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "DigitalSign","http://bssys.com/upg/request");
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
		СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
		СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер," ","");
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", ЭП, Истина);
		Request.Sign.Добавить(DigitalSign);
	
		Request.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка формирования запроса ночной выписки'");
		КонецЕсли;
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Запись, Request);
		ТекстЗапроса = Запись.Закрыть();
		
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбмена);
		Возврат "";
		
	КонецПопытки;
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает массив идентификаторов для дальнейшего формирования запроса в банк.
//
// Параметры:
//  НастройкаОбмена   СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ВидЭД  - ПеречислениеСсылка.ВидыЭДОбменСБанками - Вид электронного документа.
//
Функция МассивИдентификаторовЗапроса(НастройкаОбмена, ВидЭД) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТикетыОбменСБанками.Идентификатор
	|ИЗ
	|	РегистрСведений.ТикетыОбменСБанками КАК ТикетыОбменСБанками
	|ГДЕ
	|	ТикетыОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И ТикетыОбменСБанками.ВидЭД = &ВидЭД";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		МассивИдентификаторов.Добавить(ВыборкаИдентификаторов.Идентификатор);
	КонецЦикла;
	
	Возврат МассивИдентификаторов;

КонецФункции

// Выполняет необходимые действия для разбора ответа банка.
//
// Параметры:
//  Ответ - Строка - текст с ответом;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа;
//  МассивНовыхСообщений - Массив - массив новых полученных сообщений
//    * ДокументСсылка.СообщениеОбменСБанками - полученное из банка сообщение;
//  Идентификатор - Строка - идентификатор запроса, на который пришел ответ;
//  ИдентификаторСобытия - Строка - идентификатор события в журнале аудита;
//  ЕстьОшибка - Булево - признак возникновения ошибки при чтении ответа банка.
//
Процедура ОбработатьОтветСбербанка(Знач Ответ, Знач НастройкаОбмена, МассивНовыхСообщений, Знач Идентификатор, Знач ИдентификаторСобытия, ЕстьОшибка) Экспорт
	
	УдалитьИдентификаторЗапроса(НастройкаОбмена, Идентификатор);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	Попытка
		ТипResponse = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, "http://bssys.com/upg/response", "Response");
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипResponse);
		ЭД.Проверить();
	Исключение
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
									|Идентификатор события: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИдентификаторСобытия);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'Чтение полученных данных из банка'"), ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
		ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;

	Если ЭД.Errors <> Неопределено Тогда
		ЕстьОшибка = Истина;
		ТекстСообщения = "";
		ОбработатьИзвещениеСОшибкойСбербанк(Ответ, ИдентификаторСобытия, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СохранитьОтветСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений);
	
КонецПроцедуры

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ИдентификаторЗапроса - Строка - возвращаемый идентификатор запроса;
//  ИдентификаторОрганизации - Строка - идентификатор клиента банка.
//
// Возвращаемое значение:
// Структура с данными файла или Неопределено.
//
Функция ПакетXMLСбербанка(Знач СообщениеОбмена, Знач НастройкаОбмена, ИдентификаторЗапроса, ИдентификаторОрганизации) Экспорт

	ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ФайлПакета = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла.Записать(ВремФайл);
		
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "PayDocRu") Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
			Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор");
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
				Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
				Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "PayDocRu", ЭД,                  Истина, ТекстОшибки);
			
			МассивПодписей = ОбменСБанкамиСлужебный.ПодписиСообщенияОбмена(СообщениеОбмена);
			
			Для Каждого ЭП Из МассивПодписей Цикл
				Подпись = ЭП.Подпись.Получить();
				ДвоичныеДанныеСертификата = ЭП.Сертификат.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение НСтр("ru='Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "DigitalSign", "http://bssys.com/upg/request");
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "StmtReqType") Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
			Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор");
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "StmtReq",  ЭД, Истина, ТекстОшибки);
			
			МассивПодписей = ОбменСБанкамиСлужебный.ПодписиСообщенияОбмена(СообщениеОбмена);

			Для Каждого ЭП Из МассивПодписей Цикл
				Подпись = ЭП.Подпись.Получить();
				Сертификат = ЭП.Сертификат.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(Сертификат);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "DigitalSign", "http://bssys.com/upg/request");
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		Иначе
			ВызватьИсключение НСтр("ru='Неизвестный формат файла'");
		КонецЕсли;
		ОбъектXML.Закрыть();
		ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(ФабрикаXDTO, Request, ФайлПакета);
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлПакета);
		
		Если ОбменСБанкамиСлужебный.ФайлИзменен(ФабрикаXDTO, Request, ФайлПакета) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПакета);

		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВремФайл);
	СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат СтрокаXML;

КонецФункции

// Формирует соответствие установленных на ЭД подписей и данных сертификатов.
//
// Параметры:
// СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками.
//
// Возвращаемое значение:
// Соответствие - содержит строки данных установленных подписей и строки данных сертификатов в формате BASE64.
//
Функция ДанныеУстановленныхПодписейИСертификатов(СообщениеОбмена) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменаЭлектронныеПодписи.Подпись,
	|	СообщениеОбменаЭлектронныеПодписи.Сертификат
	|ИЗ
	|	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК СообщениеОбменаЭлектронныеПодписи
	|ГДЕ
	|	СообщениеОбменаЭлектронныеПодписи.Ссылка.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", СообщениеОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеПодписи = Выборка.Подпись.Получить();
		СтрокаЭП = Base64Строка(ДвоичныеДанныеПодписи);
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ПС, "");
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ВК, "");
		СтрокаСертификата = СертификатВФорматеBase64(Выборка.Сертификат);
		СоответствиеВозврата.Вставить(СтрокаЭП, СтрокаСертификата);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Подготавливает строку (дайджест) для дальнейшей подписи в формате Base64.
//
// Параметры:
//   АдресФайла - Строка - адрес двоичных данных файла;
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//
// Возвращаемое значение:
//   Строка - дайджест документа.
//
Функция Дайджест(АдресФайла, НастройкаОбмена) Экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяФайла);
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ИмяФайла);
		
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	
	ДанныеЗаполнения = Новый СписокЗначений;

	ВидЭД = СтрокаОбъекта.ВидЭД;
	
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
		
		ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
			+ "Sender=1С: Предприятие 8" + Символ(10) + "ExtId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
		
		НомерДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Номер");
		ДанныеЗаполнения.Добавить(НомерДокумента, "AccDoc.AccDocNo");
		КодВидаВалютнойОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КодВидаВалютнойОперации");
		ДанныеЗаполнения.Добавить(КодВидаВалютнойОперации, "AccDoc.CodeVO");
		ДатаДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Дата");
		ДанныеЗаполнения.Добавить(Формат(ДатаДокумента, "ДФ=yyyy-MM-dd"), "AccDoc.DocDate");
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Сумма");
		ДанныеЗаполнения.Добавить(Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧГ="), "AccDoc.DocSum");
		ВидПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВидПлатежа");
		ДанныеЗаполнения.Добавить(ВидПлатежа, "AccDoc.PaytKind");
		Очередность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Очередность");
		ДанныеЗаполнения.Добавить(Очередность, "AccDoc.Priority");
		НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НазначениеПлатежа");
		ДанныеЗаполнения.Добавить(НазначениеПлатежа, "AccDoc.Purpose");
		ВидОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВидОперации");
		ДанныеЗаполнения.Добавить(ВидОперации, "AccDoc.TransKind");
		Код = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Код");
		ДанныеЗаполнения.Добавить(Код, "AccDoc.UIP");
		ДополнительнаяУслуга = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДополнительнаяУслуга");
		ДанныеЗаполнения.Добавить(ДополнительнаяУслуга, "AccDoc.UrgentSBRF");
		НомерКредитногоДоговора = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НомерКредитногоДоговора");
		ДанныеЗаполнения.Добавить(НомерКредитногоДоговора, "Credit.CredConNum");
		ЦелевоеПоручение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ЦелевоеПоручение");
		ДанныеЗаполнения.Добавить(ЦелевоеПоручение, "Credit.FlagTargetAssignment");
		ИспользоватьСобственныеСредства = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИспользоватьСобственныеСредства");
		ДанныеЗаполнения.Добавить(ИспользоватьСобственныеСредства, "Credit.FlagUseOwnMeans");
		ПоказательКБК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательКБК");
		ДанныеЗаполнения.Добавить(ПоказательКБК, "DepartmentalInfo.CBC");
		ПоказательДаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательДаты");
		ДанныеЗаполнения.Добавить(ПоказательДаты, "DepartmentalInfo.DocDate");
		ПоказательНомера = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательНомера");
		ДанныеЗаполнения.Добавить(ПоказательНомера, "DepartmentalInfo.DocNo");
		СтатусСоставителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "СтатусСоставителя");
		ДанныеЗаполнения.Добавить(СтатусСоставителя, "DepartmentalInfo.DrawerStatus");
		ОКТМО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ОКТМО");
		ДанныеЗаполнения.Добавить(ОКТМО, "DepartmentalInfo.OKATO");
		ПоказательОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательОснования");
		ДанныеЗаполнения.Добавить(ПоказательОснования, "DepartmentalInfo.PaytReason");
		ПоказательТипа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательТипа");
		ДанныеЗаполнения.Добавить(ПоказательТипа, "DepartmentalInfo.TaxPaytKind");
		ПоказательПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательПериода");
		ДанныеЗаполнения.Добавить(ПоказательПериода, "DepartmentalInfo.TaxPeriod");
		НаименованиеБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательНаименованиеБанка");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПолучателя, "Payee.Bank.Name");
		НаселенныйПунктБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НаселенныйПунктБанкаПолучателя");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПолучателя, "Payee.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипНаселенногоПунктаБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПолучателя, "Payee.Bank.SettlementType");
		БИКБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательБИКБанка");
		ДанныеЗаполнения.Добавить(БИКБанкаПолучателя, "Payee.Bank.Bic");
		СчетБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательКоррСчетБанка");
		ДанныеЗаполнения.Добавить(СчетБанкаПолучателя, "Payee.Bank.CorrespAcc");
		ФилиалБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ФилиалБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПолучателя, "Payee.Filial");
		ИННПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательИНН");
		ДанныеЗаполнения.Добавить(ИННПолучателя, "Payee.INN");
		КПППолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательКПП");
		ДанныеЗаполнения.Добавить(КПППолучателя, "Payee.KPP");
		ТекстПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательНаименование");
		ДанныеЗаполнения.Добавить(ТекстПолучателя, "Payee.Name");
		НомерСчетаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательРасчСчет");
		ДанныеЗаполнения.Добавить(НомерСчетаПолучателя, "Payee.PersonalAcc");
		НаименованиеБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикНаименованиеБанка");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПлательщика, "Payer.Bank.Name");
		НаселенныйПунктБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НаселенныйПунктБанкаПлательщика");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПлательщика, "Payer.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипНаселенногоПунктаБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПлательщика, "Payer.Bank.SettlementType");
		БИКБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикБИКБанка");
		ДанныеЗаполнения.Добавить(БИКБанкаПлательщика, "Payer.Bank.Bic");
		СчетБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикКоррСчетБанка");
		ДанныеЗаполнения.Добавить(СчетБанкаПлательщика, "Payer.Bank.CorrespAcc");
		ФилиалБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ФилиалБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПлательщика, "Payer.Filial");
		ИННПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикИНН");
		ДанныеЗаполнения.Добавить(ИННПлательщика, "Payer.INN");
		КПППлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикКПП");
		ДанныеЗаполнения.Добавить(КПППлательщика, "Payer.KPP");
		ТекстПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикНаименование");
		ДанныеЗаполнения.Добавить(ТекстПлательщика, "Payer.Name");
		НомерСчетаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикРасчСчет");
		ДанныеЗаполнения.Добавить(НомерСчетаПлательщика, "Payer.PersonalAcc");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		
		ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
		
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
			+ "Sender=1С: Предприятие 8" + Символ(10) + "ExtId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
		
		ДатаНачалаПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");

		ДанныеЗаполнения.Добавить(Формат(ДатаНачалаПериода, "ДФ=yyyy-MM-dd"), "BeginDate");
		ДатаОкончанияПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");

		ДанныеЗаполнения.Добавить(Формат(ДатаОкончанияПериода, "ДФ=yyyy-MM-dd"), "EndDate");
		ТипЗапроса = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипЗапроса");

		ДанныеЗаполнения.Добавить(ТипЗапроса, "StmtType");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		СтрокаВозврата = "ATTRIBUTES" + Символ(10)
			+ "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS" + Символ(10);
		
		УчетнаяЗапись = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "УчетнаяЗапись");

		ДанныеЗаполнения.Добавить(УчетнаяЗапись, "AccountName");
		Исполнитель = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Исполнитель");

		ДанныеЗаполнения.Добавить(Исполнитель, "Author");
		НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "РасчСчет");

		ДанныеЗаполнения.Добавить(НомерСчета, "ComRests.Acc");
		ДатаНачала = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаНачалаСтрокой");
		ДатаНачала = Сред(ДатаНачала, 1, 10);

		ДанныеЗаполнения.Добавить(ДатаНачала, "ComRests.BeginDate");
		БИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "БИК");
		ДанныеЗаполнения.Добавить(БИК, "ComRests.Bic");
		ДатаПредыдущейОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПредыдущейОперации");

		ДатаПредыдущейОперации = Формат(ДатаПредыдущейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПредыдущейОперации, "ComRests.DatePLast");
		ДатаОкончания = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаКонцаСтрокой");
		ДатаОкончания = Сред(ДатаОкончания, 1, 10);

		ДанныеЗаполнения.Добавить(ДатаОкончания, "ComRests.EndDate");
		ВходящийОстаток = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НачальныйОстаток");

		ВходящийОстаток = Формат(ВходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстаток, "ComRests.EnterBal");
		ВходящийОстатокВНациональнойВалюте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВходящийОстатокВНациональнойВалюте");

		ВходящийОстатокВНациональнойВалюте = Формат(ВходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстатокВНациональнойВалюте, "ComRests.EnterBalNat");
		ДатаПоследнейОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПоследнейОперации");

		ДатаПоследнейОперации = Формат(ДатаПоследнейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПоследнейОперации, "ComRests.LastMovetDate");
		ПлановыйИсходящийОстаток = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлановыйИсходящийОстаток");
		ПлановыйИсходящийОстаток = Формат(ПлановыйИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстаток, "ComRests.PlanOutBal");
		ПлановыйИсходящийОстатокВНациональнойВалюте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлановыйИсходящийОстатокВНациональнойВалюте");

		ПлановыйИсходящийОстатокВНациональнойВалюте = Формат(
			ПлановыйИсходящийОстатокВНациональнойВалюте, "ЧДЦ=3; ЧРД=.; ЧН=0.00; ЧГ=");

		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстатокВНациональнойВалюте, "ComRests.PlanOutBalNat");
		КурсНаНачалоПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КурсНаНачалоПериода");

		КурсНаНачалоПериода = Формат(КурсНаНачалоПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаНачалоПериода, "ComRests.RateIn");
		КурсНаКонецПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КурсНаКонецПериода");

		КурсНаКонецПериода = Формат(КурсНаКонецПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаКонецПериода, "ComRests.RateOut");
		ИсходящийОстаток = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КонечныйОстаток");

		ИсходящийОстаток = Формат(ИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстаток, "ComRests.OutBal");
		ИсходящийОстатокВНациональнойВалюте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИсходящийОстатокВНациональнойВалюте");

		ИсходящийОстатокВНациональнойВалюте = Формат(ИсходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстатокВНациональнойВалюте, "ComRests.OutBalNat");
		ДатаСоставленияВыписки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаСоставленияВыписки");
		ДатаСоставленияВыписки = Сред(ДатаСоставленияВыписки, 1, 19);

		ДанныеЗаполнения.Добавить(ДатаСоставленияВыписки, "ComRests.StmtDateTime");
		ТипЗапросаВыписки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипЗапросаВыписки");

		ДанныеЗаполнения.Добавить(ТипЗапросаВыписки, "ComRests.StmtType");
		Кредит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВсегоПоступило");

		Кредит = Формат(Кредит, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Кредит, "CreditSum");
		КредитВНациональнойВалюте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КредитВНациональнойВалюте");

		КредитВНациональнойВалюте = Формат(КредитВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(КредитВНациональнойВалюте, "CreditSumNat");
		ВсегоСписано = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВсегоСписано");

		Дебет = Формат(ВсегоСписано, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Дебет, "DebetSum");
		ДебетВНациональнойВалюте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДебетВНациональнойВалюте");
		ДебетВНациональнойВалюте = Формат(ДебетВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ДебетВНациональнойВалюте, "DebetSumNat");
		ДопИнформация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДопИнформация");
		ДанныеЗаполнения.Добавить(ДопИнформация, "DocComment");
		ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
		ДанныеЗаполнения.Добавить(ИдентификаторДокумента, "DocId");
		НомерДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Номер");
		ДанныеЗаполнения.Добавить(НомерДокумента, "DocNum");
		НаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НаименованиеОрганизации");
		ДанныеЗаполнения.Добавить(НаименованиеОрганизации, "OrgName");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция Тогда
		ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ");
		ДатаСозданияКвитка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка");
		ДатаВФормате = Сред(ДатаСозданияКвитка, 1, 10);
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "CreateTime=" + ДатаВФормате + Символ(10)
			+ "DocId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
		КодСостоянияДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента");
		ДанныеЗаполнения.Добавить(КодСостоянияДокумента, "Info.StatusStateCode");
		ДатаСписанияСоСчетаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
		ДатаСписанияСоСчетаПлательщика = Формат(ДатаСписанияСоСчетаПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаСписанияСоСчетаПлательщика, "Info.BankDate.ChargeOffDate");
		ДатаПеречисленияПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа");
		ДатаПеречисленияПлатежа = Формат(ДатаПеречисленияПлатежа, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПеречисленияПлатежа, "Info.BankDate.DPP");
		ДатаПостановкиВКартотеку = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку");
		ДатаПостановкиВКартотеку = Формат(ДатаПостановкиВКартотеку, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПостановкиВКартотеку, "Info.BankDate.FileDate");
		ДатаОтметкиБанкомПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПолучателя");
		ДатаОтметкиБанкомПолучателя = Формат(ДатаОтметкиБанкомПолучателя, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПолучателя, "Info.BankDate.RecDate");
		ДатаПоступленияВБанкПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
		ДатаПоступленияВБанкПлательщика = Формат(ДатаПоступленияВБанкПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПоступленияВБанкПлательщика, "Info.BankDate.ReceiptDate");
		ДатаОтметкиБанкомПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика");
		ДатаОтметкиБанкомПлательщика = Формат(ДатаОтметкиБанкомПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПлательщика, "Info.BankDate.SignDate");

		АвторСообщения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "АвторСообщения");
		ДанныеЗаполнения.Добавить(АвторСообщения, "Info.MsgFromBank.Author");
		СообщениеИзБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка");
		ДанныеЗаполнения.Добавить(СообщениеИзБанка, "Info.MsgFromBank.Message");
	КонецЕсли;
	
	Для каждого Элемент Из ДанныеЗаполнения Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			СтрокаВозврата = СтрокаВозврата + Элемент.Представление + "=" + Элемент.Значение + Символ(10);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Количество() Тогда
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES" + Символ(10) + "Table=Accounts" + Символ(10);
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			БИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БИК");
			НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерСчета");
			СтрокаВозврата = СтрокаВозврата + "Bic=" + БИК + Символ(10) + "Account=" + НомерСчета + Символ(10)+ "#"
				+ ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Если ВсегоЗаписей > 0 Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=TransInfo" + Символ(10);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДатаСписания = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаСписания");
			ДатаСписания = Сред(ДатаСписания, 1, 10);
			ДанныеЗаполненияСтроки.Добавить(ДатаСписания, "BankDate.ChargeOffDate=");
			ДатаПостановкиВКартотеку = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПостановкиВКартотеку");
			ДатаПостановкиВКартотеку = Сред(ДатаПостановкиВКартотеку, 1, 10);
			ДанныеЗаполненияСтроки.Добавить(ДатаПостановкиВКартотеку, "BankDate.FileDate=");
			
			ДатаПоступленияВБанкПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПоступленияВБанкПлательщика");
			ДатаПоступленияВБанкПлательщика = Сред(ДатаПоступленияВБанкПлательщика, 1, 10);
			ДанныеЗаполненияСтроки.Добавить(ДатаПоступленияВБанкПлательщика, "BankDate.ReceiptDate=");
			НомерДокументаБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерДокументаБанка");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаБанка, "ComTransInfo.BankNumDoc=");
			КодПодразделения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "КодПодразделения");
			ДанныеЗаполненияСтроки.Добавить(КодПодразделения, "ComTransInfo.BranchCode=");
			ДатаПроводки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПроводки");
			ДатаПроводки = Сред(ДатаПроводки, 1, 19);
			ДанныеЗаполненияСтроки.Добавить(ДатаПроводки, "ComTransInfo.CarryDate=");
			ПризнакПриложения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПризнакПриложения");
			ПризнакПриложения = Формат(ПризнакПриложения, "БЛ=0; БИ=1");
			ДанныеЗаполненияСтроки.Добавить(ПризнакПриложения, "ComTransInfo.Dc=");
			ВалютаПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВалютаПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВалютаПлатежа, "ComTransInfo.DocCurr=");
			ДатаРасчетногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Дата");
			ДатаРасчетногоДокумента = Формат(ДатаРасчетногоДокумента, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаРасчетногоДокумента, "ComTransInfo.DocDate=");
			НомерРасчетногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Номер");
			ДанныеЗаполненияСтроки.Добавить(НомерРасчетногоДокумента, "ComTransInfo.DocNum=");
			СуммаДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Сумма");
			Если СуммаДокумента <> 0 Тогда
				СуммаСтрокой = Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
				ДанныеЗаполненияСтроки.Добавить(СуммаСтрокой, "ComTransInfo.DocSum=");
			КонецЕсли;
			СуммаДокументаВНациональнойВалюте = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СуммаДокументаВНациональнойВалюте");
			СуммаДокументаВНациональнойВалюте = Формат(СуммаДокументаВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокументаВНациональнойВалюте, "ComTransInfo.DocSumNat=");
			ОчередностьПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Очередность");
			ОчередностьПлатежа = Формат(ОчередностьПлатежа, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(ОчередностьПлатежа, "ComTransInfo.PaymentOrder=");
			ВидПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВидПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВидПлатежа, "ComTransInfo.PaytKind=");
			НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НазначениеПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НазначениеПлатежа, "ComTransInfo.Purpose=");
			ВидОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВидОплаты");
			ДанныеЗаполненияСтроки.Добавить(ВидОперации, "ComTransInfo.TransKind=");
			ДопУслуга = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДопУслуга");
			ДанныеЗаполненияСтроки.Добавить(ДопУслуга, "ComTransInfo.UrgentSBRF=");
			ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ИдентификаторДокумента");
			ДанныеЗаполненияСтроки.Добавить(ИдентификаторДокумента, "DocId=");
			НаименованиеПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательНаименование");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПолучателя, "Payee.Name=");
			СчетПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПолучателя, "Payee.PayeeAcc=");
			ИННПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПолучателя, "Payee.PayeeINN=");
			БИКБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательБИКБанка");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПолучателя, "PayeeBank.PayeeBankBic=");
			СчетБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СчетБанкаПолучателя");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПолучателя, "PayeeBank.PayeeBankCorrAcc=");
			НаименованиеБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательНаименованиеБанка");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПолучателя, "PayeeBank.PayeeBankName=");
			НаименованиеПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименование");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПлательщика, "Payer.Name=");
			СчетПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПлательщика, "Payer.PayerAcc=");
			ИННПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПлательщика, "Payer.PayerINN=");
			БИКБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикБИКБанка");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПлательщика, "PayerBank.PayerBankBic=");
			СчетБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СчетБанкаПлательщика");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПлательщика, "PayerBank.PayerBankCorrAcc=");
			НаименованиеБанкаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименованиеБанка");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПлательщика, "PayerBank.PayerBankName=");
			Переоценка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Переоценка");
			ДанныеЗаполненияСтроки.Добавить(Переоценка, "s_TI=");
			КодБюджетнойКлассификации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательКБК");
			ДанныеЗаполненияСтроки.Добавить(КодБюджетнойКлассификации, "DepartmentalInfo.Cbc=");
			ДатаНалоговогоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательДаты");
			ДанныеЗаполненияСтроки.Добавить(ДатаНалоговогоДокумента, "DepartmentalInfo.DocDate=");
			НомерНалоговогоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательНомера");
			ДанныеЗаполненияСтроки.Добавить(НомерНалоговогоДокумента, "DepartmentalInfo.DocNo=");
			ПоказательСтатусаНалогоплательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СтатусСоставителя");
			ДанныеЗаполненияСтроки.Добавить(ПоказательСтатусаНалогоплательщика, "DepartmentalInfo.DrawerStatus=");
			КПП102 = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП102, "DepartmentalInfo.Kpp102=");
			КПП103 = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП103, "DepartmentalInfo.Kpp103=");
			ДанныеЗаполненияСтроки.Добавить(
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодОКАТО"),
				"DepartmentalInfo.Okato=");
			ПоказательОснованияПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательОснования");
			ДанныеЗаполненияСтроки.Добавить(ПоказательОснованияПлатежа, "DepartmentalInfo.PaytReason=");
			ТипНалоговогоПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательТип");
			ДанныеЗаполненияСтроки.Добавить(ТипНалоговогоПлатежа, "DepartmentalInfo.TaxPaytKind=");
			НалоговыйПериод = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательПериода");
			ДанныеЗаполненияСтроки.Добавить(НалоговыйПериод, "DepartmentalInfo.TaxPeriod=");
			ДатаДокументаКартотека = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаОтсылкиДок");
			Если ЗначениеЗаполнено(ДатаДокументаКартотека) Тогда
				ДатаДокументаКартотека = Формат(ДатаДокументаКартотека, "ДФ=yyyy-MM-dd");
				ДанныеЗаполненияСтроки.Добавить(ДатаДокументаКартотека, "DiffDoc.DocDateCard=");
			КонецЕсли;
			НомерДокументаКартотека = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаКартотека, "DiffDoc.DocNumberCard=");
			ШифрДокументаКартотека = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ШифрДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(ШифрДокументаКартотека, "DiffDoc.DocShifr=");
			СрокАкцепта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокАкцепта");
			СрокАкцепта = Формат(СрокАкцепта, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СрокАкцепта, "DiffDoc.LetterOfCreditAcceptDate=");
			ДополнительныеУсловияАккредитива = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДополнУсловия");
			ДанныеЗаполненияСтроки.Добавить(ДополнительныеУсловияАккредитива, "DiffDoc.LetterOfCreditAddCond=");
			ТребуемыеДокументы = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлатежПоПредст");
			ДанныеЗаполненияСтроки.Добавить(ТребуемыеДокументы, "DiffDoc.LetterOfCreditDemandDocs=");
			НомерСчетаПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерСчетаПоставщика");
			ДанныеЗаполненияСтроки.Добавить(НомерСчетаПоставщика, "DiffDoc.LetterOfCreditPayAcc=");
			УсловияОплатыАккредитива = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Условие1");
			ДанныеЗаполненияСтроки.Добавить(УсловияОплатыАккредитива, "DiffDoc.LetterOfCreditPaymCond=");
			СрокДействияАккредитива = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокПлатежа");
			СрокДействияАккредитива = Формат(СрокДействияАккредитива, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(СрокДействияАккредитива, "DiffDoc.LetterOfCreditPeriodVal=");
			ВидАккредитива = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВидАккредитива");
			ДанныеЗаполненияСтроки.Добавить(ВидАккредитива, "DiffDoc.LetterOfCreditType=");
			НомерПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НомерПлатежа, "DiffDoc.NumPaymentCard=");
			СодержаниеОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СодержаниеОперации");
			ДанныеЗаполненияСтроки.Добавить(СодержаниеОперации, "DiffDoc.OperContent=");
			УсловиеОплаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "УсловиеОплаты");
			ДанныеЗаполненияСтроки.Добавить(УсловиеОплаты, "DiffDoc.PayingCondition=");
			СуммаОстаткаПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СуммаОстаткаПлатежа");
			Если НЕ СуммаОстаткаПлатежа = Неопределено Тогда
				СуммаОстаткаПлатежаСтрокой = Формат(СуммаОстаткаПлатежа, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
				ДанныеЗаполненияСтроки.Добавить(СуммаОстаткаПлатежаСтрокой, "DiffDoc.SumRestCard=");
			КонецЕсли;
			ДополнительнаяИнформация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДополнительнаяИнформация");
			ДанныеЗаполненияСтроки.Добавить(ДополнительнаяИнформация, "Info=");
			Для каждого Элемент Из ДанныеЗаполненияСтроки Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					СтрокаВозврата= СтрокаВозврата + Элемент.Представление + Элемент.Значение + Символ(10);
				КонецЕсли;
			КонецЦикла;
			СтрокаВозврата = СтрокаВозврата + "#" + ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат СтрокаBase64БезBOM(СтрокаВозврата);
	
КонецФункции

// Возвращает строку подписанных данных в формате Base64.
//
// Параметры
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на документ сообщения.
//
// Возвращаемое значение:
//   Строка   - данные в формате base64.
//
Функция ПодписанныеДанныеBase64(СообщениеОбмена) Экспорт
	
	СлужебноеСообщение = ОбменСБанкамиСлужебный.СлужебноеСообщениеБанка(СообщениеОбмена);
	ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СлужебноеСообщение);
	Возврат Base64Строка(ДанныеЭД);
	
КонецФункции

// Возвращает массив, содержащий тесты запросов состояний электронных документов на обработке.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена со Сбербанком;
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
// Возвращаемое значение:
//   Массив - содержит тексты запросов.
//
Функция МассивЗапросовСостоянийОбработкиДокументов(НастройкаОбмена, ВидЭД) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.ВнешнийИдентификатор,
		|	СообщениеОбменСБанками.НастройкаОбмена.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
		|		ПО (СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
		|ГДЕ
		|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение)
		|	И СостоянияОбменСБанками.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение)
		|	И НЕ СообщениеОбменСБанками.ВнешнийИдентификатор = """"
		|	И НЕ СообщениеОбменСБанками.ПометкаУдаления
		|	И НЕ СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отклонен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеОбменСБанками.ВнешнийИдентификатор,
		|	СообщениеОбменСБанками.НастройкаОбмена.ИдентификаторОрганизации
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
		|		ПО (СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
		|ГДЕ
		|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение)
		|	И СостоянияОбменСБанками.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении)
		|	И НЕ СообщениеОбменСБанками.ВнешнийИдентификатор = """"
		|	И НЕ СообщениеОбменСБанками.ПометкаУдаления
		|	И НЕ СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отклонен)";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.ВнешнийИдентификатор,
		|	СообщениеОбменСБанками.НастройкаОбмена.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
		|		ПО (СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
		|ГДЕ
		|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки)
		|	И НЕ СообщениеОбменСБанками.ВнешнийИдентификатор = """"
		|	И НЕ СообщениеОбменСБанками.ПометкаУдаления
		|	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Доставлен)";

	КонецЕсли;
		
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивВозврата;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Попытка
			Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", "http://bssys.com/upg/request");
			ИдентификаторЗапроса = Новый УникальныйИдентификатор;
			ТекстОшибки = "";
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
				Request, "requestId", Строка(ИдентификаторЗапроса), Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
				Request, "orgId", Выборка.ИдентификаторОрганизации, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version", "1.0", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender", "1С: Предприятие 8", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
			
			DocIds = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request.DocIds", "http://bssys.com/upg/request");
			DocId = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request.DocIds.DocId", "http://bssys.com/upg/request");
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DocId, "docid", Выборка.ВнешнийИдентификатор, Истина, ТекстОшибки);
			DocIds.DocId.Добавить(DocId);
			
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
			
			Request.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(Запись, Request);
			ТекстЗапроса = Запись.Закрыть();
			
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				МассивВозврата.Добавить(ТекстЗапроса);
			КонецЕсли;
			
		Исключение
		
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Формирование запроса статуса электронного документа'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);

		КонецПопытки
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Подготавливает структуру данных для отправки в Сбербанк.
//
// Параметры:
//   МассивСообщений - сообщения к отправке в банк
//    * ДокументСсылка.СообщениеОбменСБанком - ссылка на отправляемое сообщение.
//
// Возвращаемое значение:
//   Соответствие 
//    * Ключ - СправочникСсылка.НастройкиОбменСБанком - ссылка на настройку ЭДО с банком
//    * Значение - Массив
//        ** ДокументСсылка.СообщениеОбменСБанком - ссылка на отправляемое сообщение.
//
Функция ДанныеДляОтправкиВСбербанк(Знач МассивСообщенийОбмена) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СообщениеОбменСБанками.Ссылка,
	               |	СообщениеОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.Ссылка В(&МассивСообщенийОбмена)
	               |	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Подписан)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НастройкаОбмена";
	
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НастройкаОбмена") Цикл
		МассивЭД = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивЭД.Добавить(Выборка.Ссылка);
		КонецЦикла;
		СоответствиеВозврата.Вставить(Выборка.НастройкаОбмена, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает строку с содержимым сертификата в формате Base64.
//
// Параметры:
//  СсылкаНаХранилище  - Строка - ссылка на хранилище с двоичными данными сертификата.
//
// Возвращаемое значение:
//   Строка   - Строка содержит данные сертификата в формате Base64.
//
Функция СертификатВФорматеBase64(СсылкаНаХранилище)

	ДвоичныеДанныеСертификата = СсылкаНаХранилище.Получить();
	
	СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	СтрокаBase64 = "-----BEGIN CERTIFICATE-----" + Символы.ПС + СтрокаBase64 + Символы.ПС + "-----END CERTIFICATE-----";

	Возврат СтрокаBase64;

КонецФункции // СертификатВФорматеBase64()

// Подготавливает структуру данных для отправки в Сбербанк.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка прямого обмена с банком;
//   ДатаНачала - Дата - дата начала периода запроса выписки;
//   ДатаОкончания - Дата - дата окончания периода запроса выписки;
//   НомерСчета - Строка - номер банковского счета или Неопределено;
//   ГотовыеВыписки - Массив - найденные готовые выписки за период (возвращаемое значение)
//      * ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение с выпиской.
//   ФормироватьПринудительно - Булево - формировать запрос даже при наличии выписок за указанный период;
//
// Возвращаемое значение:
//   ДокументСсылка.СообщениеОбменСБанками - сформированное сообщение запроса выписки банка.
//
Функция ЗапросВыпискиСбербанк(Знач НастройкаОбмена, Знач ДатаНачала, Знач ДатаОкончания, Знач НомерСчета, ФормироватьПринудительно = Ложь, ГотовыеВыписки = Неопределено) Экспорт
	
	ЕстьОшибка = Ложь;
	ИдентификаторЗапроса = "";
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ПрограммаБанка, ИдентификаторОрганизации");
	
	МассивБанковскихСчетов = Новый Массив;
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		МассивБанковскихСчетов.Добавить(НомерСчета);
	Иначе
		ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
			РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
	КонецЕсли;
	
	Если ФормироватьПринудительно Тогда
		ГотовыеВыписки = Новый Массив;
	Иначе
		ГотовыеВыписки = ГотовыеВыпискиСбербанка(НастройкаОбмена, МассивБанковскихСчетов, ДатаНачала, ДатаОкончания);
		Если ГотовыеВыписки.Количество() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	АдресФайла = Неопределено;
	
	СформироватьЗапросВыпискиСбербанк(
		НастройкаОбмена, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, ИдентификаторЗапроса, АдресФайла, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайла = НСтр("ru = 'Запрос выписки за период с %1 по %2'");
	ИмяФайла = СтрШаблон(
		ИмяФайла, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("Представление", ИмяФайла);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	СтруктураРеквизитов.Вставить("Идентификатор", ИдентификаторЗапроса);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	СообщениеЗапрос = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);

	ДайджестBase64 = Дайджест(АдресФайла, НастройкаОбмена);

	ПодписанныеДанные = Base64Значение(ДайджестBase64);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПодписанныеДанные);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("Представление", НСтр("ru = 'Схема данных'"));
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
	СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЗапрос);
	СообщениеДайджест = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеДайджест);
	
	Возврат СообщениеЗапрос;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ПоследняяВходящаяДатаСбербанк(НастройкаОбмена)
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	
	Если Выборка.Следующий() Тогда
		Возврат НачалоДня(Выборка.ПоследняяДатаПолученияЭД);
	КонецЕсли;
	
КонецФункции

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивСообщенийОбмена - Массив ссылок на сообщения, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭП.
//
Функция СоздатьДокументыПакетовЭД(МассивСообщенийОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("ПрограммаБанка");
	ТЗ_ПЭД.Колонки.Добавить("ФормироватьЭД");
	ТЗ_ПЭД.Колонки.Добавить("АутентификацияПоСертификату");
	
	МассивПодготовленныхКОтправкеСообщенийОбмена = Новый Массив;
	
	ПодготовленныеПакеты = НайтиПодготовленныеКОтправкеПакеты(МассивСообщенийОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Статус,
	|	СообщениеОбменСБанками.НастройкаОбмена,
	|	СообщениеОбменСБанками.Направление,
	|	СообщениеОбменСБанками.ВидЭД,
	|	СообщениеОбменСБанками.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка,
	|	СообщениеОбменСБанками.НастройкаОбмена.АутентификацияПоСертификату
	|		И СообщениеОбменСБанками.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен) КАК АутентификацияПоСертификату,
	|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПЭД = ПодготовленныеПакеты.Получить(Выборка.СообщениеОбмена);
		ФормироватьЭД = Ложь;
		
		Если ПЭД = Неопределено Тогда
			
			ФормироватьЭД = Истина;
					
			ДокументНеПодписан = Выборка.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
							ИЛИ Выборка.Статус = Перечисления.СтатусыОбменСБанками.Утвержден
							ИЛИ Выборка.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан;
			Если (ПодписыватьВидЭД(Выборка.НастройкаОбмена, Выборка.ВидЭД)
					И (ДокументНеПодписан ИЛИ НЕ УстановленныеПодписиВалидны(Выборка.СообщениеОбмена)))
				ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
				СлужебноеСообщениеБанка = ОбменСБанкамиСлужебный.СлужебноеСообщениеБанка(Выборка.СообщениеОбмена);
				Если Не ЗначениеЗаполнено(СлужебноеСообщениеБанка) Тогда
					ТекстСообщения = НСтр("ru = 'Невозможно сформировать пакет банка'");
					ВидОперации = НСтр("ru = 'Формирование пакета ЭД'");
					ТекстОшибки = НСтр("ru = 'Не найдены дополнительные данные для электронного документа'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						ВидОперации, ТекстОшибки, ТекстСообщения, 1, Выборка.СообщениеОбмена);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
				
			СообщенияОбменаТабличнойЧасти = Новый Массив;
			СообщенияОбменаТабличнойЧасти.Добавить(Выборка.СообщениеОбмена);
			
			Если ЗначениеЗаполнено(СлужебноеСообщениеБанка) Тогда
				СообщенияОбменаТабличнойЧасти.Добавить(СлужебноеСообщениеБанка);
			КонецЕсли;

			ПЭД = Неопределено;
			ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(Выборка.НастройкаОбмена, СообщенияОбменаТабличнойЧасти, ПЭД);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПЭД) Тогда
			НовСтрока = ТЗ_ПЭД.Добавить();
			НовСтрока.ПЭД = ПЭД;
			НовСтрока.ПрограммаБанка = Выборка.ПрограммаБанка;
			НовСтрока.ФормироватьЭД = ФормироватьЭД;
			НовСтрока.АутентификацияПоСертификату = Выборка.АутентификацияПоСертификату;
			Если ФормироватьЭД Тогда
				МассивПодготовленныхКОтправкеСообщенийОбмена.Добавить(Выборка.СообщениеОбмена);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД", ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("ЭтоНовый", ТекСтрока.ФормироватьЭД);
		СтруктураПЭД.Вставить("АутентификацияПоСертификату", ТекСтрока.АутентификацияПоСертификату);
		
		Если ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
			ИЛИ ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			СтруктураПЭД.Вставить("ОтправкаСКлиента");
		ИначеЕсли ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн И ТекСтрока.ФормироватьЭД Тогда
			ОбменСБанкамиСлужебный.СоздатьЭДПакетаCMSDETACHED(ТекСтрока.ПЭД)
		ИначеЕсли ТекСтрока.ФормироватьЭД Тогда
			ЕстьОшибка = Ложь;
			ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(ТекСтрока.ПЭД, ЕстьОшибка);
			Если ЕстьОшибка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		МассивСтруктурПЭД.Добавить(СтруктураПЭД);
	КонецЦикла;
	
	Для Каждого СообщениеОбмена Из МассивПодготовленныхКОтправкеСообщенийОбмена Цикл
		СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
	КонецЦикла;
		
	Возврат МассивСтруктурПЭД;
	
КонецФункции

Функция НайтиПодготовленныеКОтправкеПакеты(МассивСообщенийОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДСообщения.Ссылка КАК ПакетЭД,
	|	ПакетЭДСообщения.Сообщение КАК СообщениеОбмена
	|ИЗ
	|	Документ.ПакетОбменСБанками.Сообщения КАК ПакетЭДСообщения
	|ГДЕ
	|	ПакетЭДСообщения.Сообщение В(&МассивСообщенийОбмена)
	|	И ПакетЭДСообщения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)";
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеВозврата = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеВозврата.Вставить(Выборка.СообщениеОбмена, Выборка.ПакетЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает двоичные данные файла, содержащего данные для аутентификации на сервере банка по сертификату.
// Может вызывать исключение.
//
// Параметры:
//  ДанныеСертификата - ДвоичныеДанные - данные сертификата для аутентификации на ресурсе банка;
//  ВерсияФормата - Строка - версия схемы обмена с банком.
//
// Возвращаемое значение:
//  ДвоичныеДанные - данные файла аутентификации.
//
Функция ДанныеДляАутентификацииПоСертификату(ДанныеСертификата, ВерсияФормата)
	
	Операция = НСтр("ru = 'Формирование электронного документа.'");
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

	ТекстОшибки = "";
	
	Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);
	
	Попытка
		ЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "X509Data", ПространствоИмен);
		УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "id", УникальныйИдентификатор, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ВерсияПрограммыКлиентаДляБанка = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", ВерсияПрограммыКлиентаДляБанка, , ТекстОшибки);
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			ЭД, "X509IssuerName", Сертификат.Издатель.CN, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			ЭД, "X509SerialNumber", Сертификат.СерийныйНомер, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "X509Certificate", ДанныеСертификата, Истина, ТекстОшибки);
		ЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");

	ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(Фабрика, ЭД, ВремФайл, Ложь);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВремФайл);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

Функция ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаКонца, МассивБанковскихСчетов, Банк)
	
	Попытка
		URI = "urn:1C.ru:ClientBankExchange";
		
		Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"ClientBankExchange"));
		Пакет.ВерсияФормата = "1.08";
		Пакет.Получатель = Банк.Наименование;
		Пакет.Отправитель = "1С: Предприятие";
		Пакет.ДатаСоздания = ТекущаяДатаСеанса();
		Пакет.ВремяСоздания = ТекущаяДатаСеанса();
		
		УсловияОтбора = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"УсловияОтбора"));
		УсловияОтбора.ДатаНачала = ДатаНачала;
		УсловияОтбора.ДатаКонца = ДатаКонца;
		Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
			УсловияОтбора.РасчСчет.Добавить(НомерСчета);
		КонецЦикла;
		
		Пакет.УсловияОтбора = УсловияОтбора;
		
		Пакет.Проверить();
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Пакет;
	
КонецФункции

Функция МассивЗапросовВыписки(НастройкаОбмена, Организация, Банк, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	ПакетXDTO = ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, Банк);
		
	Если ПакетXDTO = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПолноеИмяФайла);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(
		Запись, ПакетXDTO, "ClientBankExchange", "urn:1C.ru:ClientBankExchange", , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ШаблонСообщения = НСтр("ru='Запрос выписки с %1 по %2'");
	
	ТекстСообщения = СтрШаблон(
		ШаблонСообщения, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("Представление", ТекстСообщения);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	
	СообщениеЗапрос = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(СообщениеЗапрос);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция МассивЗапросовВыпискиAsync(НастройкаОбмена, ИдентификаторОрганизации, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	МассивЗапросов = Новый Массив;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, ИспользуетсяКриптография, ВерсияФормата");
	
	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");

	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);
	
	Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
	
		ТекстОшибки = "";
		Попытка
			
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			
			Идентификатор = Новый УникальныйИдентификатор;
			
			ЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatementRequest", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "id", Строка(Идентификатор), Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", 
				ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка(), , ТекстОшибки);
			
			Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
			
			Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
			
			ДанныеЗапроса = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatementRequest.Data", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "StatementType", "0", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateFrom", ДатаНачала, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateTo", ДатаОкончания, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Account", НомерСчета, Истина, ТекстОшибки);
			
			БанкСчета = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(БанкСчета, "BIC", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(БанкСчета, "Name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Bank", БанкСчета, Истина, ТекстОшибки);
			
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеЗапроса, Истина, ТекстОшибки);
			
			ЭД.Проверить();
		
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ФайлСформирован = Ложь;
			Иначе
				ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(Фабрика, ЭД, ВремФайл, Ложь);
				ФайлСформирован = Истина;
			КонецЕсли;

		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Формирование ЭД'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбмена);
			ФайлСформирован = Ложь;
		КонецПопытки;
		
		Если Не ФайлСформирован Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		Если ОбменСБанкамиСлужебный.ФайлИзменен(Фабрика, ЭД, ВремФайл, Ложь) Тогда
			Продолжить;
		КонецЕсли;
	
		Шаблон = НСтр("ru = 'Запрос выписки с %1 по %2'");
	
		ИмяФайла = СтрШаблон(
			Шаблон, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
			
		СтруктураРеквизитов = Новый Структура;
		
		Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
		Иначе
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
		СтруктураРеквизитов.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
		СтруктураРеквизитов.Вставить("Представление", ИмяФайла);
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Идентификатор", Идентификатор);
		СообщениеЗапрос = Неопределено;
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);

		МассивЗапросов.Добавить(СообщениеЗапрос);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
	КонецЦикла;
	
	Возврат МассивЗапросов;
	
КонецФункции

Функция СообщениеОбменаВПакетеЭДО(ПакетОбменСБанками)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПакетОбменСБанкамиСообщения.Сообщение
	               |ИЗ
	               |	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
	               |ГДЕ
	               |	ПакетОбменСБанкамиСообщения.Ссылка = &ПакетОбменСБанками";
	Запрос.УстановитьПараметр("ПакетОбменСБанками", ПакетОбменСБанками);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Сообщение;
	
КонецФункции

Функция ОтправкаСформированныхСообщенийВБанк(НастройкаОбмена, ПараметрыАвторизации = Неопределено)

	ГотовыеКОтправкеПакеты = ПодготовленныеКОтправкеПакетыЭДО(НастройкаОбмена);
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОтправкаПакетовЭДО(ГотовыеКОтправкеПакеты, ПараметрыАвторизации);
		Возврат Результат.КоличествоОтправлено;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляОтправкиВБанк(Ссылки, ПрограммаБанка)
	
	ДанныеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.НастройкаОбмена КАК НастройкаОбмена
	|ПОМЕСТИТЬ Пакеты
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.НастройкаОбмена.ПометкаУдаления
	|	И НЕ ПакетЭД.НастройкаОбмена.Недействительна
	|	И ПакетЭД.НастройкаОбмена.ПрограммаБанка = &ПрограммаБанка
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.Сообщения.(
	|		Сообщение,
	|		Сообщение.ВидЭД,
	|		Сообщение.Идентификатор
	|	),
	|	ПакетЭД.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.Ссылка
	|			ИЗ
	|				Пакеты)
	|ИТОГИ ПО
	|	НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыПодписейОрганизации.СертификатЭП,
	|	СертификатыПодписейОрганизации.Ссылка КАК НастройкаОбмена
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.НастройкаОбмена
	|			ИЗ
	|				Пакеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Ссылка,
	|	СертификатыЭП.ДанныеСертификата КАК ДанныеСертификата,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	Сертификаты.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|		ПО (Сертификаты.СертификатЭП = СертификатыЭП.Ссылка)
	|ГДЕ
	|	&ПроверкаПользователя
	|	И СертификатыЭП.Ссылка В
	|			(ВЫБРАТЬ
	|				Сертификаты.СертификатЭП
	|			ИЗ
	|				Сертификаты)
	|ИТОГИ ПО
	|	НастройкаОбмена";
	Если ТипЗнч(Ссылки) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.НастройкаОбмена = &НастройкаОбмена");
		Запрос.УстановитьПараметр("НастройкаОбмена", Ссылки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.Ссылка В (&ПакетыЭД)");
		Запрос.УстановитьПараметр("ПакетыЭД", Ссылки);
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"СертификатыЭП.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПрограммаБанка", ПрограммаБанка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаНастройкиОбмена = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСертификатов = ПакетЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВремФайл = ПолучитьИмяВременногоФайла();
	Пока ВыборкаНастройкиОбмена.Следующий() Цикл
		ВыборкаПакеты = ВыборкаНастройкиОбмена.Выбрать();
		ДанныеПакетов = Новый Соответствие;
		Пока ВыборкаПакеты.Следующий() Цикл
			ВыборкаСообщений = ВыборкаПакеты.Сообщения.Выбрать();
			СтруктураДанных = Новый Структура;
			Пока ВыборкаСообщений.Следующий() Цикл
				ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(ВыборкаСообщений.Сообщение);
				Если ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
					ИЛИ ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
					ДвоичныеДанныеФайла.Записать(ВремФайл);
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ВремФайл);
					СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
					СтруктураДанных.Вставить("ПлатежноеПоручение", СтрокаXML);
					СтруктураДанных.Вставить("Ключ", ВыборкаСообщений.СообщениеИдентификатор);
					Подписи = ДанныеПодписей(ВыборкаСообщений.Сообщение);
					МассивПодписей = Новый Массив;
					Для Каждого ДанныеПодписи Из Подписи Цикл
						СтруктураДанныхПодписи = Новый Структура;
						СтруктураДанныхПодписи.Вставить("АдресПодписи", ДанныеПодписи.АдресПодписи);
						СтруктураДанныхПодписи.Вставить("Сертификат",   ДанныеПодписи.Сертификат);
						МассивПодписей.Добавить(СтруктураДанныхПодписи);
					КонецЦикла;
					СтруктураДанных.Вставить("Подписи", МассивПодписей);
				ИначеЕсли ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
					СтруктураДанных.Вставить("СлужебныеДанные", СсылкаНаДвоичныеДанныеФайла);
				КонецЕсли;
			КонецЦикла;
			ДанныеПакетов.Вставить(ВыборкаПакеты.Ссылка, СтруктураДанных);
		КонецЦикла;
		ВыборкаСертификатов.Сбросить();
		СтруктураПоиска = Новый Структура("НастройкаОбмена", ВыборкаНастройкиОбмена.НастройкаОбмена);
		Если ВыборкаСертификатов.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаСертификатовДанные = ВыборкаСертификатов.Выбрать();
			Сертификаты = Новый Массив;
			Пока ВыборкаСертификатовДанные.Следующий() Цикл
				ДанныеСертификата = Новый Структура();
				ДанныеСертификата.Вставить("СертификатСсылка",            ВыборкаСертификатовДанные.Ссылка);
				ДанныеСертификата.Вставить("ПарольПользователя",          ВыборкаСертификатовДанные.ПарольПользователя);
				ДанныеСертификата.Вставить("ДвоичныеДанныеСертификата",   ВыборкаСертификатовДанные.ДанныеСертификата.Получить());
				ДанныеСертификата.Вставить("ЗапомнитьПарольКСертификату", ВыборкаСертификатовДанные.ЗапомнитьПарольКСертификату);
				Сертификаты.Добавить(ДанныеСертификата);
			КонецЦикла;
			СтруктураДанных = Новый Структура("ДанныеПакетов, Сертификаты", ДанныеПакетов, Сертификаты);
			ДанныеВозврата.Вставить(ВыборкаНастройкиОбмена.НастройкаОбмена, СтруктураДанных);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не указаны сертификаты в настройке обмена с банком %1'");
			ТекстСообщения = СтрШаблон(
										ШаблонСообщения, ВыборкаНастройкиОбмена.НастройкаОбмена);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция МассивИдентификаторовВыпискиБанка(ВыпискаБанка)
	
	МассивВнешнихИдентификаторов = Новый Массив;
	
	ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(ВыпискаБанка);
	
	Если НЕ ТипЗнч(ДанныеЭД) = Тип("ДвоичныеДанные") Тогда
		Возврат МассивВнешнихИдентификаторов;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
	ДанныеЭД.Записать(ИмяФайла);
		
	СтруктураДанных = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ИмяФайла, Неопределено);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат МассивВнешнихИдентификаторов;
	КонецЕсли;
		
	ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
	СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		
	СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
	БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
	МассивСчетов = Новый Массив;
		
	Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
		НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
		МассивСчетов.Добавить(НомерСчета);
	КонецЦикла;
		
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ТекНомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			
		ЭтоИсходящийПлатеж = МассивСчетов.Найти(ТекНомерСчета) <> Неопределено;
		Если ЭтоИсходящийПлатеж Тогда
			ИДВнешний = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ИдПлатежа");
			Если ЗначениеЗаполнено(ИДВнешний) Тогда
				МассивВнешнихИдентификаторов.Добавить(ИДВнешний);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВнешнихИдентификаторов;

КонецФункции

Процедура ДобавитьОтпечаткиСертификатовСбербанка(МассивОтпечатков)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОСертификатахОбменСБанками.СертификатЭП.Отпечаток КАК Отпечаток
	|ИЗ
	|	РегистрСведений.СведенияОСертификатахОбменСБанками КАК СведенияОСертификатахОбменСБанками
	|ГДЕ
	|	СведенияОСертификатахОбменСБанками.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивОтпечатков.Добавить(Выборка.Отпечаток);
	КонецЦикла
	
КонецПроцедуры

Процедура СохранитьВыпискуСбербанка(ЭД, НастройкаОбмена, МассивВыписок, СообщениеВладелец = Неопределено)
	
	ОбновитьДатуПолученияДокументов = Ложь;
	
	Для Каждого ВыпискаXDTO Из ЭД.Statements.Statement Цикл
		ОбновитьДатуПолученияДокументов = Истина;
		ВнешнийИдентификатор = ВыпискаXDTO.docId;
		Если ВыпискаУжеБылаПолучена(НастройкаОбмена, ВнешнийИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(ФабрикаXDTO, ВыпискаXDTO, ВремФайл);
		ДвоичныеДанныеФайлаОтвета = Новый ДвоичныеДанные(ВремФайл);
		
		Если ОбменСБанкамиСлужебный.ФайлИзменен(ФабрикаXDTO, ВыпискаXDTO, ВремФайл) Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружена подмена файла.'");
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
		ТекДата = ТекущаяДатаСеанса();
		ДатаНачала = ВыпискаXDTO.beginDate;
		ДатаНачала = Дата(СтрЗаменить(Сред(ДатаНачала, 1, 10), "-", ""));
		ДатаОкончания = ВыпискаXDTO.endDate;
		ДатаОкончания = Дата(СтрЗаменить(Сред(ДатаОкончания, 1, 10), "-", ""));
		ПредставлениеДокумента = НСтр("ru = 'Выписка банка за период с'") + " " + Формат(ДатаНачала, "ДЛФ=D")
			+ " " + НСтр("ru = 'по'") + " " + Формат(ДатаОкончания, "ДЛФ=D");
			
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		СтруктураРеквизитов.Вставить("Представление", ПредставлениеДокумента);
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
		СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("ДатаСообщения", Дата(СтрЗаменить(Сред(ВыпискаXDTO.beginDate, 1, 10), "-", "")));
		СтруктураРеквизитов.Вставить("НомерСчета", ВыпискаXDTO.acc);
		СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ВнешнийИдентификатор);

		Если ЗначениеЗаполнено(СообщениеВладелец) Тогда
			СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеВладелец);
		КонецЕсли;
		СообщениеВыписка = Неопределено;
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеВыписка);
		ОпределитьИсполненныеПлатежныеПоручения(СообщениеВыписка);

		ДайджестBase64 = Дайджест(СсылкаНаХранилище, НастройкаОбмена);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(ДайджестBase64));
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		СтруктураРеквизитов.Вставить("Представление", НСтр("ru = 'Схема данных'"));
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
		СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеВыписка);
		
		СообщениеДайджест = Неопределено;
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеДайджест);

		Если ЗначениеЗаполнено(СообщениеВладелец) Тогда
			СтруктураВладельца = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Обработан);
			ИзменитьСообщениеОбмена(СообщениеВладелец, СтруктураВладельца);
		КонецЕсли;
		
		Если Не ВыпискаXDTO.Sign = Неопределено Тогда
			ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "СертификатБанка");
			ДанныеСертификата = ХранилищеСертификата.Получить();
			Если Не ДанныеСертификата = Неопределено Тогда
				Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
				ВладелецПодписи = ВыпискаXDTO.Sign.issuer;
				ДвоичныеДанныеПодписи = ВыпискаXDTO.Sign.value;
				ДатаУстановкиПодписи = ЭлектроннаяПодпись.ДатаПодписания(ДвоичныеДанныеПодписи);
				ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
				СвойстваПодписи.Вставить("УстановившийПодпись", Пользователи.АвторизованныйПользователь());
				СвойстваПодписи.Вставить("ДатаПодписи", ДатаУстановкиПодписи);
				СвойстваПодписи.Вставить("Сертификат", ДанныеСертификата);
				СвойстваПодписи.Вставить("Отпечаток", Сертификат.Отпечаток);
				СвойстваПодписи.Вставить("КомуВыданСертификат", ВладелецПодписи);
				МассивФайлов = Новый Массив;
				ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(СообщениеВыписка, МассивФайлов);
				ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеВыписка);
				ЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи);
			КонецЕсли;
		КонецЕсли;
		МассивВыписок.Добавить(СообщениеВыписка);
		СохранитьШтампыСбербанка(ВыпискаXDTO);
	КонецЦикла;
	
	Если ОбновитьДатуПолученияДокументов Тогда
		ДатаСоздания = XMLЗначение(Тип("Дата"), ЭД.createTime);
		УниверсальноеВремя = УниверсальноеВремя(ДатаСоздания, ЧасовойПояс());
		ВремяМосква = МестноеВремя(УниверсальноеВремя, "Europe/Moscow");
		Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
		ДанныеОСостоянии = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
		Если ДанныеОСостоянии.Следующий() Тогда
			ТекДатаРегистра = ДанныеОСостоянии.ПоследняяДатаПолученияЭД;
			ТекМетка = ДанныеОСостоянии.Метка;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДатаРегистра) ИЛИ ВремяМосква > ТекДатаРегистра Тогда // сдвигаем дату в РС
			МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПоследняяДатаПолученияЭД = ВремяМосква;
			МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
			Если ЗначениеЗаполнено(ТекМетка) Тогда
				МенеджерЗаписи.Метка = ТекМетка;
			КонецЕсли;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьШтампыСбербанка(ВыпискаXDTO)
	
	Если ВыпискаXDTO.Docs = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтампов = Новый Соответствие;
	
	МассивВнешнихИдентификаторов = Новый Массив;
	Для Каждого ПлатежноеПоручениеXDTO Из ВыпискаXDTO.Docs.TransInfo Цикл
		Если НЕ ПлатежноеПоручениеXDTO.Params = Неопределено Тогда
			ВнешнийИдентификатор = ПлатежноеПоручениеXDTO.docid;
			ДанныеШтампа = Новый Структура;
			Для Каждого Param Из ПлатежноеПоручениеXDTO.Params.Param Цикл
				Если Param.Name = "StampBankName" Тогда
					ДанныеШтампа.Вставить("НаименованиеБанка", Param.Value);
				ИначеЕсли Param.Name = "StampBranch" Тогда
					ДанныеШтампа.Вставить("Отделение", Param.Value);
				ИначеЕсли Param.Name = "StampSubBranch" Тогда
					ДанныеШтампа.Вставить("Офис", Param.Value);
				ИначеЕсли Param.Name = "StampDate" Тогда
					ДанныеШтампа.Вставить("ДатаОперации", Param.Value);
				ИначеЕсли Param.Name = "StampBIC" Тогда
					ДанныеШтампа.Вставить("БИК", Param.Value);
				ИначеЕсли Param.Name = "StampStatus" Тогда
					ДанныеШтампа.Вставить("Статус", Param.Value);
				КонецЕсли;
			КонецЦикла;
			МассивВнешнихИдентификаторов.Добавить(ВнешнийИдентификатор);
			ДанныеШтампов.Вставить(ВнешнийИдентификатор, ДанныеШтампа);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивВнешнихИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.ВнешнийИдентификатор,
	|	СообщениеОбменСБанками.Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.ВнешнийИдентификатор В(&МассивВнешнихИдентификаторов)
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение)";
	
	Запрос.УстановитьПараметр("МассивВнешнихИдентификаторов", МассивВнешнихИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеШтампа = ДанныеШтампов.Получить(Выборка.ВнешнийИдентификатор);
		СтруктураИзменения = Новый Структура("ДополнительныеДанные", ДанныеШтампа);
		ИзменитьСообщениеОбмена(Выборка.Ссылка, СтруктураИзменения);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьОтветСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений)
	
	Если НЕ ЭД.Statements = Неопределено Тогда
		СохранитьВыпискуСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений);
		Возврат;
	КонецЕсли;
		
	Если ЭД.Tickets = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка
	|ПОМЕСТИТЬ СообщенияВладельцы
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Идентификатор = &УникальныйИдентификатор
	|	И СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка
	|ПОМЕСТИТЬ ОтветыБанка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.СообщениеРодитель В
	|			(ВЫБРАТЬ
	|				СообщенияВладельцы.Ссылка
	|			ИЗ
	|				СообщенияВладельцы КАК СообщенияВладельцы)
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Квитанция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка
	|ПОМЕСТИТЬ ДайджестыКвитанций
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ДополнительныеДанные)
	|	И СообщениеОбменСБанками.СообщениеРодитель В
	|			(ВЫБРАТЬ
	|				ОтветыБанка.Ссылка
	|			ИЗ
	|				ОтветыБанка КАК ОтветыБанка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДайджестыКвитанций.Ссылка КАК Дайджест,
	|	ОтветыБанка.Ссылка КАК Квитанция,
	|	СообщенияВладельцы.Ссылка КАК Владелец
	|ИЗ
	|	СообщенияВладельцы КАК СообщенияВладельцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветыБанка КАК ОтветыБанка
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДайджестыКвитанций КАК ДайджестыКвитанций
	|		ПО (ИСТИНА)";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Для Каждого Тикет Из ЭД.Tickets.Ticket Цикл
		Если Тикет.Info = Неопределено ИЛИ Тикет.Info.docExtId = Неопределено И ЗначениеЗаполнено(Тикет.docId) Тогда
			УникальныйИДВнешний = Тикет.docId;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Идентификатор", ".ВнешнийИдентификатор");
			Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИДВнешний);
		ИначеЕсли ЗначениеЗаполнено(Тикет.Info.docExtId) Тогда
			УникальныйИД = Тикет.Info.docExtId;
			Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИД);
		ИначеЕсли ЗначениеЗаполнено(ЭД.RequestId) Тогда
			УникальныйИД = ЭД.RequestId;
			Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИД);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Не ЗначениеЗаполнено(Выборка.Владелец) Тогда
				Возврат;
			КонецЕсли;
			Если  НЕ ЭД.Statements = Неопределено Тогда
				СохранитьВыпискуСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений, Выборка.Владелец);
				Возврат;
			КонецЕсли;
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(ФабрикаXDTO, Тикет, ВремФайл);
			ДвоичныеДанныеФайлаОтвета = Новый ДвоичныеДанные(ВремФайл);
			
			Если ОбменСБанкамиСлужебный.ФайлИзменен(ФабрикаXDTO, Тикет, ВремФайл) Тогда
				Возврат;
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
			
			СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
			
			СтруктураВладельца = Новый Структура;
			
			Если НЕ ЗначениеЗаполнено(Выборка.Квитанция) Тогда
				НазваниеЭД = НСтр("ru = 'Квитанция от'")+ " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT");
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
				СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.Квитанция);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
				СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
				СтруктураРеквизитов.Вставить("Представление", НазваниеЭД);
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
				СтруктураРеквизитов.Вставить("СообщениеРодитель", Выборка.Владелец);
				СтруктураРеквизитов.Вставить("Идентификатор", ЭД.responseId);
		
				СообщениеКвитанция = Неопределено;
				ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеКвитанция);
				СтруктураВладельца.Вставить("ВнешнийИдентификатор", Тикет.docId);
			Иначе
				ПрисоединенныйФайл = ПрисоединенныйФайл(Выборка.Квитанция);
				
				ИнформацияОФайле = Новый Структура;
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
				ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
			
				СтруктураОтветаБанка = Новый Структура;
				Представление = НСтр("ru = 'Квитанция от'") + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT");
				СтруктураОтветаБанка.Вставить("Представление", Представление);
				СтруктураОтветаБанка.Вставить("Идентификатор", ЭД.responseId);
				СтруктураОтветаБанка.Вставить("УдалитьЭП");
				ИзменитьСообщениеОбмена(Выборка.Квитанция, СтруктураОтветаБанка);
				СообщениеКвитанция = Выборка.Квитанция;
			КонецЕсли;
			ДайджестBase64 = Дайджест(СсылкаНаХранилище, НастройкаОбмена);
	
			ДвоичныеДанныеДайджеста = Base64Значение(ДайджестBase64);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеДайджеста);
			
			Если Не ЗначениеЗаполнено(Выборка.Дайджест) Тогда
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
				СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
				СтруктураРеквизитов.Вставить("Представление", НСтр("ru = 'Схема данных'"));
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
				СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеКвитанция);
				
				СообщениеДайджест = Неопределено;
				ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеДайджест);
			Иначе
				ПрисоединенныйФайл = ПрисоединенныйФайл(Выборка.Дайджест);
				
				ИнформацияОФайле = Новый Структура;
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
				ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
			КонецЕсли;
			
			Если НЕ Тикет.Sign = Неопределено Тогда
				ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "СертификатБанка");
				ДанныеСертификата = ХранилищеСертификата.Получить();
				Если Не ДанныеСертификата = Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
					ВладелецПодписи = Тикет.Sign.issuer;
					ДвоичныеДанныеПодписи = Тикет.Sign.value;
					ДатаУстановкиПодписи = ЭлектроннаяПодпись.ДатаПодписания(ДвоичныеДанныеПодписи);
					ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
					ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеКвитанция);
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(ПрисоединенныйФайл,
						ДвоичныеДанныеПодписи, Сертификат.Отпечаток, ДатаУстановкиПодписи, "", "", ВладелецПодписи, ДанныеСертификата);
					МассивНовыхСообщений.Добавить(СообщениеКвитанция);
				КонецЕсли;
			КонецЕсли;
		
			Информация = Тикет.Info;
			Если Не Информация=Неопределено Тогда
				СтатусСББОЛ = ВРег(Информация.statusStateCode);
				Если СтатусСББОЛ = "ACCEPTED" ИЛИ СтатусСББОЛ = "EXPORTED" ИЛИ СтатусСББОЛ = "ACCEPTED_BY_ABS" Тогда
						НовыйСтатусЭД = Перечисления.СтатусыОбменСБанками.Принят
				ИначеЕсли СтатусСББОЛ = "IMPLEMENTED" ИЛИ СтатусСББОЛ = "PROCESSED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыОбменСБанками.Исполнен
				ИначеЕсли СтатусСББОЛ = "DELIVERED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыОбменСБанками.Доставлен
				ИначеЕсли СтатусСББОЛ = "FORMAT_ERROR" ИЛИ СтатусСББОЛ = "RQUID_DUPLIC" ИЛИ СтатусСББОЛ = "ORG_NOT_FOUND"
					ИЛИ СтатусСББОЛ = "SERT_NOT_FOUND" ИЛИ СтатусСББОЛ = "DECLINED_BY_BANK" ИЛИ СтатусСББОЛ = "DECLINED"
					ИЛИ СтатусСББОЛ = "FAIL" ИЛИ СтатусСББОЛ = "DOCUMENT_NOT_FOUND" ИЛИ СтатусСББОЛ = "DECLINED_BY_ABS"
					ИЛИ СтатусСББОЛ = "REQUISITE_ERROR" ИЛИ СтатусСББОЛ = "INVALIDEDS" ИЛИ СтатусСББОЛ = "RECALL"
					ИЛИ СтатусСББОЛ = "EXPORT_ERROR" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыОбменСБанками.ОтклоненБанком
				ИначеЕсли СтатусСББОЛ = "DELAYED" ИЛИ СтатусСББОЛ = "CARD2" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыОбменСБанками.Приостановлен
				ИначеЕсли ЗначениеЗаполнено(СтатусСББОЛ) Тогда
					НовыйСтатусЭД = Перечисления.СтатусыОбменСБанками.ОтклоненБанком
				КонецЕсли;
				Если ЗначениеЗаполнено(НовыйСтатусЭД) Тогда
					СтруктураВладельца.Вставить("Статус", НовыйСтатусЭД);
				КонецЕсли
			КонецЕсли;
			
			Если Тикет.Info.MsgFromBank <> Неопределено И Тикет.Info.MsgFromBank.Message <> Неопределено Тогда
				СтруктураВладельца.Вставить("ПричинаОтклонения", Тикет.Info.MsgFromBank.Message);
			КонецЕсли;
			
			Если СтруктураВладельца.Количество() > 0 Тогда
				ИзменитьСообщениеОбмена(Выборка.Владелец, СтруктураВладельца);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыпискаУжеБылаПолучена(НастройкаОбмена, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВнешнийИдентификатор = &ВнешнийИдентификатор";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", ВнешнийИдентификатор);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Подготавливает строку запроса для получения банковской выписки.
//
// Параметры:
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - по какой настройке идет прямой обмен с банком;
//  ДатаНачала  - Дата - дата начала периода запроса выписки;
//  ДатаОкончания  - Дата - дата окончания периода запроса выписки;
//  МассивСчетов - Массив - в элементах содержатся строки - номера банковских счетов;
//  ИдентификаторЗапроса - УникальныйИдентификатор - возвращает идентификатор запроса;
//  АдресФайла - Строка - возвращает адрес временного хранилища с данными файла;
//  ЕстьОшибка - Булево - признак ошибки при формировании запроса.
//
Процедура СформироватьЗапросВыпискиСбербанк(НастройкаОбмена, ДатаНачала, ДатаОкончания, МассивСчетов, ИдентификаторЗапроса, АдресФайла, ЕстьОшибка)

	ПространствоИмен = "http://bssys.com/upg/request";
	ФайлЗапроса = ПолучитьИмяВременногоФайла("xml");
	
	ТекстОшибки = "";
	ЕстьОшибка  = Ложь;
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	Операция = НСтр("ru = 'Формирование ЭД'");
	
	Попытка
		
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
		
		Организация = РеквизитыНастройкиОбмена.Организация;
		Банк = РеквизитыНастройкиОбмена.Банк;
		
		StmtReqType = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "StmtReqType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(StmtReqType, "docExtId", Строка(ИдентификаторЗапроса), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(StmtReqType, "createTime", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(StmtReqType, "beginDate", ДатаНачала, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(StmtReqType, "endDate", КонецДня(ДатаОкончания), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(StmtReqType, "stmtType", 101, Истина, ТекстОшибки);
		
		РеквизитСокращенноеНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СокращенноеНаименованиеОрганизации");
		Если НЕ ЗначениеЗаполнено(РеквизитСокращенноеНаименованиеОрганизации) Тогда
			РеквизитСокращенноеНаименованиеОрганизации = "Наименование";
		КонецЕсли;
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, РеквизитСокращенноеНаименованиеОрганизации);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(StmtReqType, "orgName", Наименование, , ТекстОшибки);
		
		Accounts =ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "StmtReqType.Accounts", ПространствоИмен);
		
		БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
		Для Каждого Счет Из МассивСчетов Цикл
			Acc = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Acc", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Acc, "__content", Счет, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Acc, "bic", БИК,  Истина, ТекстОшибки);
			Accounts.Account.Добавить(Acc);
		КонецЦикла;
		
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(StmtReqType, "Accounts", Accounts, Истина, ТекстОшибки);
		
		StmtReqType.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибка = Истина;
			ТекстСообщения = НСтр("ru = 'При формировании электронного документа произошла ошибка.
										|%1.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстСообщения, ТекстСообщения, 1, НастройкаОбмена);
			Возврат;
		КонецЕсли;
		
		ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(ФабрикаXDTO, StmtReqType, ФайлЗапроса);

	Исключение
		ТекстСообщения = НСтр("ru = 'При формировании электронного документа произошла ошибка.
									|Обратитесь к администратору.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбмена);
		ЕстьОшибка = Истина;
		Возврат
	КонецПопытки;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлЗапроса);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Если ОбменСБанкамиСлужебный.ФайлИзменен(ФабрикаXDTO, StmtReqType, ФайлЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЗапроса);
	
КонецПроцедуры

Функция ДанныеПодписей(СообщениеОбмена)
	
	МассивВозврата = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронныеПодписи.Подпись КАК Подпись,
	               |	ЭлектронныеПодписи.Сертификат
	               |ИЗ
	               |	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	               |ГДЕ
	               |	ЭлектронныеПодписи.Ссылка.ВладелецФайла = &ВладелецФайла";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", СообщениеОбмена);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		ДанныеСертификата = ВыборкаЗапроса.Сертификат.Получить();
		СтруктураВозврата = Новый Структура("АдресПодписи, Сертификат", АдресПодписи, ДанныеСертификата);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура УдалитьСтаруюВерсиюСообщения(ЗаписьНабора)
	
	СтруктураВерсии = СвязиОбмена(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И (СтруктураВерсии.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
		ИЛИ СтруктураВерсии.Статус = Перечисления.СтатусыОбменСБанками.Утвержден) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.Ссылка
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|ГДЕ
		|	СообщениеОбменСБанками.СообщениеРодитель = &СообщениеРодитель
		|	И НЕ СообщениеОбменСБанками.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("СообщениеРодитель", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвязиОбмена(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОбменСБанками.СообщениеОбмена,
	|	СостоянияОбменСБанками.Состояние,
	|	СостоянияОбменСБанками.СообщениеОбмена.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|ГДЕ
	|	СостоянияОбменСБанками.СсылкаНаОбъект = &СсылкаНаОбъект
	|	И НЕ СостоянияОбменСБанками.СообщениеОбмена.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	ВыборкаПоРегистру = Запрос.Выполнить().Выбрать();
	КомментарийРС = "";
	
	Если ВыборкаПоРегистру.Следующий() Тогда
		Состояние = ВыборкаПоРегистру.Состояние;
		СсылкаНаДокумент = ВыборкаПоРегистру.СообщениеОбмена;
		Статус = ВыборкаПоРегистру.Статус;
	Иначе
		Состояние = Перечисления.СостоянияОбменСБанками.ПустаяСсылка();
		СсылкаНаДокумент = Документы.СообщениеОбменСБанками.ПустаяСсылка();
		Статус = Перечисления.СтатусыОбменСБанками.ПустаяСсылка();
	КонецЕсли;

	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("Состояние", Состояние);
	СтруктураВерсииЭД.Вставить("Статус", Статус);
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаОбмена, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке сертификатов.
//
// Параметры:
//  МассивОтпечатковСертификатов - массив - массив отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена, список сертификатов
//    которой требуется получить.
//
// Возвращаемое значение - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаОбмена = Неопределено)
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ОбменСБанкамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(
		МассивОтпечатковСертификатов, НастройкаОбмена);
	Для Каждого ТекЭл Из МассивОтпечатковСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток",                   ТекЭл);
		СтруктураСертификата.Вставить("Сертификат",                  СтрокаТаблицы.Ссылка);
		СтруктураСертификата.Вставить("ПарольПолучен",               СтрокаТаблицы.ПарольПолучен);
		СтруктураСертификата.Вставить("ПарольПользователя",          СтрокаТаблицы.ПарольПользователя);
		СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", СтрокаТаблицы.ЗапомнитьПарольКСертификату);
		СтруктураСертификата.Вставить("Комментарий",                 "");
		
		МассивСтруктурДоступныхСертификатов.Добавить(СтруктураСертификата);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок.
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И СостоянияЭД.СообщениеОбмена.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отклонен)
	|	И СостоянияЭД.СообщениеОбмена.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.НеСформирован)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент Из НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.СообщениеОбмена,
	|	СостоянияЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И СостоянияЭД.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ПлатежИсполнен), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении))";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.СообщениеОбмена);
		
		ТекстСообщения = НСтр("ru = 'Обработка %1.
				|Не требуется выполнения действий с электронным документом.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  СообщениеОбмена - ссылка на сообщение обмена, который необходимо обработать.
//
Процедура УстановитьПризнакУтвержден(СообщениеОбмена)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Утвержден);
	
	ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);

КонецПроцедуры

// Функция возвращает соответствие настройке обмена - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивНастроекОбмена               - Массив    - содержит ссылки на настройки, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - настройка обмена, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвНастроекОбменаИСоответствийСертификатовИПараметровДляАвторизацииСервер(Знач МассивНастроекОбмена = Неопределено, Знач СтМассивовСтруктурСертификатов = Неопределено, Знач СоотвСертификатовИПаролей = Неопределено)
	
	Результат = СтруктураСоответствийНастроекОбменаИСертификатовАвторизации(
		МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей);
	
	СоотвНастроекОбмена = Новый Соответствие;
	СоотвНастроекОбменаИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвНастроекОбменаИМассиваСертификатовАвторизации", СоотвНастроекОбменаИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвНастроекОбменаИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвНастроекОбменаИМассиваСертификатовАвторизации - Ключ - Настройка обмена, Значение - Массив сертификатов
		// по данной настройке. Функция должна вернуть Соответствие, в котором Ключ - настройка обмена,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвНастроекОбменаИМассиваСертификатовАвторизации Цикл
			
			Соответствие = Новый Соответствие;
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
				Если ЗначениеЗаполнено(Структура) И Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере можно любым указанным в настройке обмена сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвНастроекОбмена.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвНастроекОбмена;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

Функция СостояниеЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияОбменСБанками.ПустаяСсылка();
	СтруктураЭД = СвязиОбмена(СсылкаНаВладельца);
	
	ВозвращаемоеЗначение = Строка(СтруктураЭД.Состояние);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата)
	
	СтруктураВозврата = Новый Структура;
	Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		
	Issuer = "EMAILADDRESS=%1, CN=%2, OU=%3, O=%4, C=%5"; 
	Issuer = СтрШаблон(Issuer, Сертификат.Издатель.E,
			Сертификат.Издатель.CN, Сертификат.Издатель.OU, Сертификат.Издатель.O, Сертификат.Издатель.C);
			
	СтруктураВозврата.Вставить("SN", Сертификат.СерийныйНомер);
	СтруктураВозврата.Вставить("Issuer", Issuer);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает массив сообщений, которые возникли при выполнении фонового задания.
//
// Параметры:
//   ИдентификаторЗадания - Строка - идентификатор фонового задания.
// 
// Возвращаемые параметры:
//   Массив - сообщения пользователю
//    * СообщениеПользователю - сообщение, содержащее текст ошибки.
//
Функция СообщенияОбОшибкахФоновогоЗадания(Знач ИдентификаторЗадания) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание = Неопределено Тогда
		МассивСообщений = Новый Массив;
	Иначе
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю();
		Если МассивСообщений = Неопределено Тогда
			МассивСообщений = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	Возврат МассивСообщений;
	
КонецФункции

// Запускает на сервере фоновое задание по отправке в банк запроса-зонда.
//
// Параметры:
//   ПараметрыЗапроса - Структура - первый параметр для процедуры ОбменСБанкамиСлужебный.ОтправитьЗапросЗондВБанк;
//   АдресХранилища - Строка - адрес для помещения результата выполнения фонового задания;
//   УникальныйИдентификатор - Строка - идентификатор формы для создания временного хранилища;
//   ИдентификаторЗадания - УникальныйИдентификатор - идентификатор созданного задания;
//   МассивСообщений - Массив - в элементах СообщенияПользователю - если возникли сообщения при выполнении фонового задания.
//
// Возвращаемое значение:
//   Булево - Истина, если задание завершено, иначе Ложь.
//
Функция ОтправитьЗапросЗондНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка тестового запроса в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросЗондВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		МассивСообщений =  Задание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

// Запускает на сервере фоновое задание по получению извещения о состоянии из банка.
//
// Параметры:
//   ПараметрыЗапроса - Структура - первый параметр для процедуры ОбменСБанкамиСлужебный.ПолучитьИзвещениеОСостоянииЭДАсинхронно;
//   АдресХранилища - Строка - адрес для помещения результата выполнения фонового задания;
//   УникальныйИдентификатор - Строка - идентификатор формы для создания временного хранилища;
//   ИдентификаторЗадания - УникальныйИдентификатор - идентификатор созданного задания;
//   МассивСообщений - Массив - в элементах СообщенияПользователю - если возникли сообщения при выполнении фонового задания.
//
// Возвращаемое значение:
//   Булево - Истина, если задание завершено, иначе Ложь.
//
Функция ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений = Неопределено) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Получение извещения о состоянии электронного документа'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбменСБанкамиСлужебный.ПолучитьИзвещениеОСостоянииЭДАсинхронно", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		МассивСообщений =  Задание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанкомЧерезДополнительнуюОбработку


// Производит подключение внешней обработки.
//
// Параметры:
//  ИмяВнешнегоМодуля - Строка - имя используемого внешнего модуля;
//  АдресФайла - Адрес временного хранилища, куда помещается двоичные данные обработки.
//
// Возвращаемое значение:
//  Булево - Истина, если обработка подключена.
//
Функция ПодключитьАктуальнуюВнешнююОбработку(Знач ИмяВнешнегоМодуля, АдресФайла = "") Экспорт

	ОбработкаПодключена = Ложь;
	
	ДанныеВнешнейОбработки = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейОбработки(ИмяВнешнегоМодуля);
	
	Если Не ЗначениеЗаполнено(ДанныеВнешнейОбработки) Тогда
		Возврат ОбработкаПодключена;
	КонецЕсли;
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеВнешнейОбработки.ДвоичныеДанныеМодуля);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбработкаПодключена = Истина;
	#Иначе
		ИмяОбъекта = Неопределено;
		ОбменСБанкамиСлужебный.ПодключитьВнешнююОбработку(АдресФайла, ИмяОбъекта);
		ОбработкаПодключена = ЗначениеЗаполнено(ИмяОбъекта);
	#КонецЕсли
	НоваяВерсия = ДанныеВнешнейОбработки.Версия;

	Возврат ОбработкаПодключена;
	
КонецФункции

// Получает сведения о внешней обработке.
//
// Параметры:
//    ИмяВнешнейОбработки - Строка - имя внешней обработки.
//
// Возвращаемое значение:
//   Структура - данные о внешней обработке
//     * Наименование - Строка -  наименование внешней обработки;
//     * Версия - Строка - версия внешней обработки.
//
Функция СведенияОВнешнейОбработке(ИмяВнешнегоМодуля) Экспорт
	
	Попытка
		// Получение сведений о внешней обработке.
		ВнешнийОбъект = ВнешниеОбработки.Создать(ИмяВнешнегоМодуля);
		ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
		СведенияОВнешнейОбработке = ВнешнийОбъект.СведенияОВнешнейОбработке();
		СтруктураВозврата = Новый Структура();
		СтруктураВозврата.Вставить("Наименование", СведенияОВнешнейОбработке.Наименование);
		СтруктураВозврата.Вставить("Версия", СведенияОВнешнейОбработке.Версия);
		Возврат СтруктураВозврата;
	Исключение
		Операция = НСтр("ru = 'Создание объекта внешней обработки.'");
		ТекстСообщения = НСтр("ru = 'Не удалось подключить указанный внешний модуль'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, 1);
	КонецПопытки;

КонецФункции

// Сравнивает переданную версию дополнительной обработки с версией обработки, сохраненной в базе.
// Если версии отличаются, то возвращает адрес временного хранилища и версию обработки, хранимой в базе.
//
// Параметры:
//    ИмяМодуля - Строка - имя дополнительной обработки;
//    ВерсияНовая - Строка - версия обработки для сравнения;
//    ВерсияСтарая - Строка - возвращает версию обработки в базе данных.
//
Процедура ПроверитьАктуальностьВнешнейОбработки(Знач ИмяМодуля, Знач ВерсияНовая, ВерсияСтарая) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВнешнихМодулей = Константы.ВнешниеФайлыОбменСБанками.Получить().Получить();
	Если ДанныеВнешнихМодулей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеВнешнихМодулей.Свойство("ВнешниеОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеМодуля = ДанныеВнешнихМодулей.ВнешниеОбработки.Получить(ИмяМодуля);
	
	Если ДанныеМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеМодуля.Версия <> ВерсияНовая Тогда
		ВерсияСтарая = ДанныеМодуля.Версия;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
