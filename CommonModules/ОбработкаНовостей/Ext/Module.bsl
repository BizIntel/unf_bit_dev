////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСоСпискамиНовостейИКлассификаторов

// Процедура устанавливает одинаковые состояния для новостей в текущей области данных.
// Это полезно, например, при первом старте программы (при создании из cf),
//  когда необходимо отключить оповещения и поставить признак прочтенности у всех новостей для предыдущих версий программы.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей, для которых необходимо установить состояния новостей;
//  СтруктураОтборов    - Структура - структура со значениями отборов. Возможные ключи:
//    * СписокНовостей - СписокЗначений - список новостей. Если параметр установлен, то остальные параметры отбора игнорируются;
//    * СписокЛентНовостей - СписокЗначений - список лент новостей. Если не указан, то по всем.;
//    * ИнтервалВерсийПродукта - Структура - отбор по версиям продукта. Содержит ключи:
//       * Продукт  - Строка - наименование продукта;
//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999;
//    * ИнтервалВерсийПлатформы - Структура - отбор по версиям платформы. Содержит ключи:
//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999;
//  ЗначенияСостояний   - Структура - структура значений для заполнения реквизитов регистра сведений СостоянияНовостей. Возможны ключи:
//    * Прочтена                - Булево - Признак прочтенности. Если не указано, то не будет изменено;
//    * Пометка                 - Число  - Признак пометки флажком. Если не указано, то не будет изменено;
//    * ОповещениеВключено      - Булево - Признак снятия оповещения. Если не указано, то не будет изменено;
//    * ДатаНачалаОповещения    - Дата   - Дата начала оповещения. Если не указано, то не будет изменено;
//    * УдаленаИзСпискаНовостей - Булево - Признак помещения в корзину. Если не указано, то не будет изменено.
//
Процедура УстановитьСостояниеНовостейДляПользователей(
			ЗНАЧ МассивПользователей = Неопределено,
			СтруктураОтборов,
			ЗначенияСостояний) Экспорт

	ТипМассив         = Тип("Массив");
	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");

	ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, начало работы.
		|МассивПользователей:
		|	%МассивПользователей%
		|СтруктураОтборов:
		|	%СтруктураОтборов%
		|ЗначенияСостояний:
		|	%ЗначенияСостояний%
		|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
	Если (ТипЗнч(МассивПользователей) <> ТипМассив)
			ИЛИ (МассивПользователей.Количество() = 0) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%МассивПользователей%", НСтр("ru='По всем'"));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%МассивПользователей%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(МассивПользователей, ", "));
	КонецЕсли;
	Если (ТипЗнч(СтруктураОтборов) = ТипСтруктура) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтруктураОтборов%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(СтруктураОтборов, " = ", Символы.ПС));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтруктураОтборов%", НСтр("ru='Передано значения типа, отличного от Структуры'"));
	КонецЕсли;
	Если (ТипЗнч(ЗначенияСостояний) = ТипСтруктура) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначенияСостояний%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ЗначенияСостояний, " = ", Символы.ПС));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначенияСостояний%", НСтр("ru='Передано значения типа, отличного от Структуры'"));
	КонецЕсли;
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.Справочники.Новости, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если (ТипЗнч(ЗначенияСостояний) = ТипСтруктура)
			И (ЗначенияСостояний.Количество() > 0) Тогда

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
			Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
				ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, ошибка выполнения: при работе в модели сервиса запускать получение новостей вручную можно только при отключенных разделителях.
					|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
					|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
					|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
					|Разделение включено: %РазделениеВключено()%
					|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
					|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
					|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
					|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
					|Текущий пользователь ИБ:
					|	Имя: %ТекущийПользователь().Имя%
					|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
					|	Разделение данных:
					|		%ТекущийПользователь().РазделениеДанных%
					|Пользователь: %ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
					НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'") , // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				Возврат;
			КонецЕсли;
		КонецЕсли;

		СписокПолейДляЗаполнения = "";
		Для Каждого ТекущееЗначениеЗаполнения Из ЗначенияСостояний Цикл
			Если ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("Прочтена") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#Прочтена#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("Пометка") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#Пометка#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("ОповещениеВключено") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#ОповещениеВключено#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("ДатаНачалаОповещения") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#ДатаНачалаОповещения#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("УдаленаИзСпискаНовостей") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#УдаленаИзСпискаНовостей#";
			КонецЕсли;
		КонецЦикла;
		СписокПолейДляЗаполнения = СтрЗаменить(СписокПолейДляЗаполнения, "##", ",");
		СписокПолейДляЗаполнения = СтрЗаменить(СписокПолейДляЗаполнения, "#", "");

		Если (ТипЗнч(МассивПользователей) <> ТипМассив)
				ИЛИ (МассивПользователей.Количество() = 0) Тогда
			// Если не передали список пользователей, то взять всех пользователей, без проверки, какие роли у него включены.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|// Список пользователей, для которых необходимо установить состояния новостей.
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК Пользователь
				|ИЗ
				|	Справочник.Пользователи КАК Спр
				|ГДЕ
				|	Спр.ПометкаУдаления = ЛОЖЬ
				|	И Спр.Недействителен = ЛОЖЬ
				|";
			РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, получение списка пользователей.
			Если НЕ РезультатЗапроса.Пустой() Тогда
				МассивПользователей = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Пользователь");
			КонецЕсли;
		КонецЕсли;

		// Если изначально не передали массив пользователей и в справочнике Пользователи нет ни одного
		//  действительного непомеченного на удаление пользователя.
		Если (ТипЗнч(МассивПользователей) <> ТипМассив) Тогда
			МассивПользователей = Новый Массив;
		КонецЕсли;

		// Удалить пользователей, у которых нет роли ЧтениеНовостей или ПолныеПрава.
		НовыйМассивПользователей = Новый Массив;
		Для Каждого ТекущийПользователь Из МассивПользователей Цикл
			Если Пользователи.РолиДоступны("ЧтениеНовостей,ПолныеПрава", ТекущийПользователь, Ложь) Тогда
				НовыйМассивПользователей.Добавить(ТекущийПользователь);
			КонецЕсли;
		КонецЦикла;
		МассивПользователей = НовыйМассивПользователей;

		// Если нет ни одного пользователя, который может работать с новостями, то выйти из обработчика.
		Если МассивПользователей.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Ошибка выполнения: нет пользователей, для которых бы следовало установить состояния новостей.
				|Состояния новостей можно установить только для пользователей с ролью ЧтениеНовостей или ПолныеПрава'");
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;

		КоличествоОбработанныхНовостей = 0;

		Если (ТипЗнч(СтруктураОтборов) = ТипСтруктура)
				И (СтруктураОтборов.Свойство("СписокНовостей"))
				И (ТипЗнч(СтруктураОтборов.СписокНовостей) = ТипСписокЗначений)
				И (СтруктураОтборов.СписокНовостей.Количество() > 0) Тогда
			// Указан список новостей.
			Для Каждого ТекущийПользователь Из МассивПользователей Цикл
				// Цикл по списку новостей.
				Для Каждого ТекущаяНовость Из СтруктураОтборов.СписокНовостей Цикл
					Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
					Запись.Пользователь = ТекущийПользователь;
					Запись.Новость      = ТекущаяНовость.Значение;
					Запись.Прочитать(); // Запись будет ниже.
					Запись.Пользователь = ТекущийПользователь;
					Запись.Новость      = ТекущаяНовость.Значение;
					ЗаполнитьЗначенияСвойств(Запись, ЗначенияСостояний, СписокПолейДляЗаполнения);
					Запись.Записать(Истина);
				КонецЦикла;
			КонецЦикла;
			КоличествоОбработанныхНовостей = СтруктураОтборов.СписокНовостей.Количество();
		Иначе
			// Возможные отборы:
			//    * СписокЛентНовостей - СписокЗначений - список лент новостей. Если не указан, то по всем;
			//    * ИнтервалВерсийПродукта - Структура - отбор по версиям продукта. Содержит ключи:
			//       * Продукт  - Строка - наименование продукта;
			//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
			//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999.
			//    * ИнтервалВерсийПлатформы - Структура - отбор по версиям платформы. Содержит ключи:
			//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
			//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999.

			// Список редко-меняющихся категорий.
			// План видов характеристик КатегорииНовостей должен уже быть заполнен с сервера.
			КатегорияВерсияПродукта  = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion");
			КатегорияВерсияПлатформы = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion");
			Если (КатегорияВерсияПродукта.Пустая())
					ИЛИ (КатегорияВерсияПлатформы.Пустая()) Тогда
				// Возможно, список категорий еще не пришел с сервера.
				Возврат;
			КонецЕсли;

			ПоВсемЛентамНовостей = Истина;
			СписокЛентНовостей = Новый СписокЗначений;
			Если (СтруктураОтборов.Свойство("СписокЛентНовостей"))
					И (ТипЗнч(СтруктураОтборов.СписокЛентНовостей) = ТипСписокЗначений) Тогда
				ПоВсемЛентамНовостей = Ложь;
				СписокЛентНовостей = СтруктураОтборов.СписокЛентНовостей;
			КонецЕсли;

			ПоВсемВерсиямПродукта = Истина;
			ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
			ПродуктВерсияОТ = "00.00.000.0000";
			ПродуктВерсияДО = "99.99.999.9999";
			Если (СтруктураОтборов.Свойство("ИнтервалВерсийПродукта"))
					И (ТипЗнч(СтруктураОтборов.ИнтервалВерсийПродукта) = ТипСтруктура) Тогда
				ПоВсемВерсиямПродукта = Ложь;
				Если СтруктураОтборов.ИнтервалВерсийПродукта.Свойство("ВерсияОТ") Тогда
					ПродуктВерсияОТ = СтруктураОтборов.ИнтервалВерсийПродукта.ВерсияОТ;
				КонецЕсли;
				Если СтруктураОтборов.ИнтервалВерсийПродукта.Свойство("ВерсияДО") Тогда
					ПродуктВерсияДО = СтруктураОтборов.ИнтервалВерсийПродукта.ВерсияДО;
				КонецЕсли;
			КонецЕсли;

			ПоВсемВерсиямПлатформы = Истина;
			ПлатформаВерсияОТ = "00.00.000.0000";
			ПлатформаВерсияДО = "99.99.999.9999";
			Если (СтруктураОтборов.Свойство("ИнтервалВерсийПлатформы"))
					И (ТипЗнч(СтруктураОтборов.ИнтервалВерсийПлатформы) = ТипСтруктура) Тогда
				ПоВсемВерсиямПлатформы = Ложь;
				Если СтруктураОтборов.ИнтервалВерсийПлатформы.Свойство("ВерсияОТ") Тогда
					ПлатформаВерсияОТ = СтруктураОтборов.ИнтервалВерсийПлатформы.ВерсияОТ;
				КонецЕсли;
				Если СтруктураОтборов.ИнтервалВерсийПлатформы.Свойство("ВерсияДО") Тогда
					ПлатформаВерсияДО = СтруктураОтборов.ИнтервалВерсийПлатформы.ВерсияДО;
				КонецЕсли;
			КонецЕсли;

			// Если есть отбор по интервалам версий (продукта или платформы), то запрос должен учитывать данные
			//  регистра сведений КатегорииНовостейИнтервалыВерсий, причем
			// - если новость не привязана к продуктам вообще, то это значит, что она удовлетворяет любым условиям по версии продукта;
			// - если новость не привязана к платформе вообще, то это значит, что она удовлетворяет любым условиям по версии платформы.
			ОбработатьРезультатЗапроса = Ложь;
			Если (ПоВсемВерсиямПродукта = Истина) И (ПоВсемВерсиямПлатформы = Истина) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка КАК Новость
					|ИЗ
					|	Справочник.Новости КАК Спр
					|ГДЕ
					|	&МетаУсловиеПоЛентамНовостей
					|";
				Если ПоВсемЛентамНовостей = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст,"&МетаУсловиеПоЛентамНовостей", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст,"&МетаУсловиеПоЛентамНовостей", "Спр.ЛентаНовостей В (&СписокЛентНовостей)");
					Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
				КонецЕсли;

				РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, по всем версиям продукта и платформы
				ОбработатьРезультатЗапроса = Истина;
			Иначе
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.Текст = "
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Спр.Ссылка КАК Новость
					|ИЗ
					|	Справочник.Новости КАК Спр
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииЭтогоПродукта
					|	ПО
					|		(Спр.Ссылка = РегВерсииЭтогоПродукта.Новость
					|			И РегВерсииЭтогоПродукта.Продукт = &ИмяКонфигурации
					|			И РегВерсииЭтогоПродукта.КатегорияНовостей = &КатегорияВерсияПродукта)
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииПродуктов
					|	ПО
					|		(Спр.Ссылка = РегВерсииПродуктов.Новость
					|			И РегВерсииПродуктов.КатегорияНовостей = &КатегорияВерсияПродукта)
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииПлатформы
					|	ПО
					|		(Спр.Ссылка = РегВерсииПлатформы.Новость
					|			И РегВерсииПлатформы.Продукт = &ПродуктПлатформа
					|			И РегВерсииПлатформы.КатегорияНовостей = &КатегорияВерсияПлатформы)
					|ГДЕ
					|	&МетаУсловиеПоЛентамНовостей
					|	И &МетаУсловиеПоВерсиямПродукта
					|	И &МетаУсловиеПоВерсиямПлатформы
					|";
				Если ПоВсемЛентамНовостей = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоЛентамНовостей", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоЛентамНовостей", "Спр.ЛентаНовостей В (&СписокЛентНовостей)");
					Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
				КонецЕсли;
				Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
				Запрос.УстановитьПараметр("КатегорияВерсияПродукта", КатегорияВерсияПродукта);
				Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", КатегорияВерсияПлатформы);
				Запрос.УстановитьПараметр("ПродуктПлатформа", "Platform");
				Если ПоВсемВерсиямПродукта = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПродукта", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПродукта", "
						|( // Версия этого продукта пересекается с условием или нет отборов по версиям продуктов вообще.
						|		РегВерсииПродуктов.Новость ЕСТЬ NULL // Нет отборов по версиям продуктов вообще.
						|		ИЛИ ( // Нижний или верхний интервал отбора новости входят в условие.
						|			НЕ РегВерсииЭтогоПродукта.Новость ЕСТЬ NULL
						|			И (
						|				РегВерсииЭтогоПродукта.ВерсияОТ МЕЖДУ &ПродуктВерсияОТ И &ПродуктВерсияДО
						|				ИЛИ РегВерсииЭтогоПродукта.ВерсияДО МЕЖДУ &ПродуктВерсияОТ И &ПродуктВерсияДО
						|			)
						|		)
						|	)");
					Запрос.УстановитьПараметр("ПродуктВерсияОТ", ПродуктВерсияОТ);
					Запрос.УстановитьПараметр("ПродуктВерсияДО", ПродуктВерсияДО);
				КонецЕсли;
				Если ПоВсемВерсиямПлатформы = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПлатформы", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПлатформы", "
						|( // Версия платформы пересекается с условием или нет отборов по версии платформы вообще.
						|		РегВерсииПлатформы.Новость ЕСТЬ NULL
						|		ИЛИ ( // Нижний или верхний интервал отбора новости входят в условие.
						|			РегВерсииПлатформы.ВерсияОТ МЕЖДУ &ПлатформаВерсияОТ И &ПлатформаВерсияДО
						|			ИЛИ РегВерсииПлатформы.ВерсияДО МЕЖДУ &ПлатформаВерсияОТ И &ПлатформаВерсияДО
						|		)
						|	)");
					Запрос.УстановитьПараметр("ПлатформаВерсияОТ", ПлатформаВерсияОТ);
					Запрос.УстановитьПараметр("ПлатформаВерсияДО", ПлатформаВерсияДО);
				КонецЕсли;

				РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, по заданным версиям продукта и платформы.
				ОбработатьРезультатЗапроса = Истина;
			КонецЕсли;

			Если ОбработатьРезультатЗапроса = Истина Тогда
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					// Цикл по списку новостей.
					Пока Выборка.Следующий() Цикл
						// Цикл по каждому пользователю.
						Для Каждого ТекущийПользователь Из МассивПользователей Цикл
							Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
							Запись.Пользователь = ТекущийПользователь;
							Запись.Новость      = Выборка.Новость;
							Запись.Прочитать(); // Запись будет ниже.
							Запись.Пользователь = ТекущийПользователь;
							Запись.Новость      = Выборка.Новость;
							ЗаполнитьЗначенияСвойств(Запись, ЗначенияСостояний, СписокПолейДляЗаполнения);
							Запись.Записать(Истина);
						КонецЦикла;
						КоличествоОбработанныхНовостей = КоличествоОбработанныхНовостей + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		ТекстСообщения = СтрШаблон(
			НСтр("ru='УстановитьСостояниеНовостейДляПользователей, завершение.
				|Обработано пользователей: %1
				|Обработано новостей: %2
				|'"),
			МассивПользователей.Количество(),
			Формат(КоличествоОбработанныхНовостей, "ЧЦ=15; ЧДЦ=; ЧРГ=' '; ЧГ=3,0"));
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'") , // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Иначе

		ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, ошибка выполнения: в качестве значений заполнения передано значение типа, отличного от Структура, либо не заполнены настройки заполнения (не указано ни одного ключа структуры).
			|Возможные имена ключей совпадают с наименованиями ресурсов регистра сведений СостоянияНовостей'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'") , // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#Область РаботаСПомеченнымиНовостями

// Процедура помечает несколько новостей пометкой (число 0..9, где 0 = нет пометки)
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей - Массив;
//  Пометка        - Число 0..9, где 0 - неотмеченная новость.
//
Процедура ИзменитьПометкуНовостей(Знач МассивНовостей, Знач Пометка = 1) Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
		ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПометкуНовостей(ПравильныйМассивНовостей, Пометка);
	Иначе
		ствСостоянияОповещения = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
			Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = ствСостоянияОповещения.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Пометка      = Пометка;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Прочтена;
			// Запись.УдаленаИзСпискаНовостей.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочтенности

// Процедура изменяет признак прочтенности у новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей      - Массив;
//  ПризнакПрочтенности - Булево.
//
Процедура ИзменитьПризнакПрочтенностиНовостей(Знач МассивНовостей, Знач ПризнакПрочтенности = Истина) Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
		ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакПрочтенностиНовостей(ПравильныйМассивНовостей, ПризнакПрочтенности);
	Иначе
		ствСостоянияОповещения = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
			Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = ствСостоянияОповещения.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Прочтена     = ПризнакПрочтенности;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Пометка;
			// Запись.УдаленаИзСпискаНовостей.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомУдаленияИзСписка

// Процедура изменяет признак удаления из списка у новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей          - Массив;
//  ПризнакУдаленияИзСписка - Булево.
//
Процедура ИзменитьПризнакУдаленияИзСпискаНовостей(Знач МассивНовостей, Знач ПризнакУдаленияИзСписка = Истина) Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
		ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакУдаленияИзСпискаНовостей(ПравильныйМассивНовостей, ПризнакУдаленияИзСписка);
	Иначе
		ствСостоянияОповещения = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
			Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = ствСостоянияОповещения.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.УдаленаИзСпискаНовостей = ПризнакУдаленияИзСписка;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Пометка;
			// Запись.Прочтена.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСНапоминаниями

// Процедура изменяет признак прекращения оповещения у новостей. Имеет смысл только для важных и очень важных новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей       - Массив;
//  ОповещениеВключено   - Булево;
//  ДатаНачалаОповещения - Дата.
//
Процедура ИзменитьПризнакОповещенияНовостей(Знач МассивНовостей, Знач ОповещениеВключено = Ложь, Знач ДатаНачалаОповещения = '00010101') Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
		ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакОповещенияНовостей(ПравильныйМассивНовостей, ОповещениеВключено, ДатаНачалаОповещения);
	Иначе
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
			Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь         = ПользователиКлиентСервер.ТекущийПользователь();
			Запись.Новость              = ТекущаяНовость;
			Запись.ОповещениеВключено   = ОповещениеВключено;
			Запись.ДатаНачалаОповещения = ДатаНачалаОповещения;
			// Не изменять эти данные:
			// Запись.Прочтена;
			// Запись.Пометка;
			// Запись.УдаленаИзСпискаНовостей.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает реальное состояние оповещения для новости на текущую дату.
// Возможна ситуация, когда записи в регистре сведений "СостоянияНовостей" нет, тогда программа рассчитывает их,
//   исходя из состояния Важности новости и Важности в привязке к метаданным (если важность > 0, то оповещение включено).
//
// Параметры:
//  МассивНовостей - Массив - массив новостей, которые необходимо обработать.
//
// Возвращаемое значение:
//   Соответствие - соответствие, где:
//     * ключ     - СправочникСсылка.Новости;
//     * значение - Булево - должно ли быть включено оповещение на данный момент или нет.
//
Функция ПолучитьСостояниеОповещения(МассивНовостей)

	ствРезультат = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// Важность общая для всей новости.
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость,
		|	// ВажностьОбщая.
		|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной).
		|		КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
		|				ИЛИ ((Спр.ДатаЗавершения <> &ПустаяДата) И (Спр.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
		|			ТОГДА 0
		|		ИНАЧЕ Спр.Важность
		|	КОНЕЦ КАК Важность
		|ПОМЕСТИТЬ ВТ_ВсеВажности
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.Ссылка В (&МассивНовостей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Важность в привязке к метаданным.
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость,
		|	// ВажностьМетаданных.
		|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной).
		|		КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
		|				ИЛИ ((Спр.Ссылка.ДатаЗавершения <> &ПустаяДата) И (Спр.Ссылка.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
		|			ТОГДА 0
		|		ИНАЧЕ Спр.Важность
		|	КОНЕЦ КАК Важность
		|ИЗ
		|	Справочник.Новости.ПривязкаКМетаданным КАК Спр
		|ГДЕ
		|	Спр.Ссылка В (&МассивНовостей)
		|;
		|
		|// Рассчитанная общая важность по новости (по максимуму).
		|ВЫБРАТЬ
		|	ВТ_ВсеВажности.Новость            КАК Новость,
		|	МАКСИМУМ(ВТ_ВсеВажности.Важность) КАК Важность
		|ИЗ
		|	ВТ_ВсеВажности
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеВажности.Новость
		|";
	Запрос.УстановитьПараметр("МассивНовостей", МассивНовостей);
	Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	Результат = Запрос.Выполнить(); // ПолучитьСостояниеОповещения()
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			ствРезультат.Вставить(Выборка.Новость, ?(Выборка.Важность > 0, Истина, Ложь));
		КонецЦикла;
	КонецЕсли;

	Возврат ствРезультат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСКатегориямиНовостей

// Функция возвращает результат конкатенации КатегорияНовостей и ЗначениеКатегорииНовостей.
// ////? Проверить использование.
//
// Параметры:
//  КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей;
//  ЗначениеКатегорииНовостей - Произвольное значение.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьПредставлениеКатегорииИЗначения(КатегорияНовостей, ЗначениеКатегорииНовостей) Экспорт

	Результат = "";

	ТипБулево = Тип("Булево");
	ТипСтрока = Тип("Строка");
	ТипДата   = Тип("Дата");
	ТипЧисло  = Тип("Число");

	// Категория.ТипЗначения - Строка     - СокрЛП(%).
	// Категория.ТипЗначения - Число      - Формат(%, "ЧЦ=32; ЧДЦ=4; ЧРД=,; ЧН=0; ЧГ=0; ЧО=1").
	// Категория.ТипЗначения - Булево     - Формат(%, "БЛ=Ложь; БИ=Истина").
	// Категория.ТипЗначения - Справочник - СокрЛП(%.Наименование).
	Если ТипЗнч(КатегорияНовостей) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей")
			И НЕ КатегорияНовостей.Пустая() Тогда
		ТипЗначения = КатегорияНовостей.ТипЗначения.Типы()[0];
		Если ТипЗначения = ТипСтрока Тогда
			ПредставлениеЗначения = СокрЛП(ЗначениеКатегорииНовостей);
		ИначеЕсли ТипЗначения = ТипДата Тогда
			ПредставлениеЗначения = Формат(ЗначениеКатегорииНовостей, "ДФ=yyyyMMddHHmmss");
		ИначеЕсли ТипЗначения = ТипЧисло Тогда
			ПредставлениеЗначения = Формат(ЗначениеКатегорииНовостей, "ЧЦ=32; ЧДЦ=4; ЧРД=,; ЧН=0; ЧГ=0; ЧО=1");
		ИначеЕсли ТипЗначения = ТипБулево Тогда
			ПредставлениеЗначения = Формат(ЗначениеКатегорииНовостей, "БЛ=Ложь; БИ=Истина");
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
			ПредставлениеЗначения = СокрЛП(ЗначениеКатегорииНовостей.Наименование);
		КонецЕсли;
		Результат = СокрЛП(КатегорияНовостей.Наименование) + "=" + ПредставлениеЗначения;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСПользователями

// Подсистема ЧтениеНовостей не рассчитана на работу с внешними пользователями, поэтому если в программу зашел внешний пользователь,
//  и у него включена роль ЧтениеНовостей или ПолныеПрава или РедактированиеНовостей, то вывести сообщение.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - Истина, если это внешний пользователь с возможностью чтения новостей (доступна одна из ролей: ЧтениеНовостей, РедактированиеНовостей, ПолныеПрава).
//
Функция ЭтоВнешнийПользовательСВозможностьюЧтениеНовостей() Экспорт

	Результат = Ложь;

	// Для пользователя без разделителей не заполняются параметры сеанса, поэтому будет ошибка.
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда

		Если (ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя()) Тогда

				РольДоступна_ЧтениеНовостей         = РольДоступна(Метаданные.Роли.ЧтениеНовостей);
				РольДоступна_РедактированиеНовостей = РольДоступна(Метаданные.Роли.РедактированиеНовостей);
				РольДоступна_АдминистраторСистемы   = РольДоступна(Метаданные.Роли.АдминистраторСистемы);
				РольДоступна_ПолныеПрава            = РольДоступна(Метаданные.Роли.ПолныеПрава);

			Если РольДоступна_ЧтениеНовостей
					ИЛИ РольДоступна_РедактированиеНовостей
					ИЛИ (РольДоступна_АдминистраторСистемы
							И РольДоступна_ПолныеПрава) Тогда

				Результат = Истина;

				// В модуле с повторными значениями запись в журнал регистрации будет происходить не чаще 1 раза в 20 минут
				//  (или после принудительного очищения кеша с помощью ОбновитьПовторноИспользуемыеЗначения();).
				ТекстСообщения = НСтр("ru='Не рекомендуется давать возможность чтения новостей внешнему пользователю (%ТекущийВнешнийПользователь%)
					|Подключены следующие роли:
					|	- ЧтениеНовостей         - %ЧтениеНовостей%
					|	- РедактированиеНовостей - %РедактированиеНовостей%
					|	- АдминистраторСистемы   - %АдминистраторСистемы%
					|	- ПолныеПрава            - %ПолныеПрава%
					|Это может привести к ошибкам в работе с конфигурацией.
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийВнешнийПользователь%", Пользователи.АвторизованныйПользователь());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЧтениеНовостей%", ?(РольДоступна_ЧтениеНовостей,"ПОДКЛЮЧЕНА", "Отключена"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РедактированиеНовостей%", ?(РольДоступна_РедактированиеНовостей,"ПОДКЛЮЧЕНА", "Отключена"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АдминистраторСистемы%", ?(РольДоступна_АдминистраторСистемы,"ПОДКЛЮЧЕНА", "Отключена"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолныеПрава%", ?(РольДоступна_ПолныеПрава,"ПОДКЛЮЧЕНА", "Отключена"));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Разное'"), // ИмяСобытия
					НСтр("ru='Новости. Разное. Ошибка работы с пользователями'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#Область НастройкиПользователей

// Изменяет настройку видимости лент новостей для пользователя.
//
// Параметры:
//  ЛентыНовостей - СправочникСсылка.ЛентаНовостей, Массив - Ленты новостей, для которых необходимо изменить настройку видимости;
//  Видимость     - Булево - истина = лента видима, ложь = лента скрыта;
//  Пользователь  - СправочникСсылка.Пользователи - пользователь, для которого необходимо изменить признак видимости ленты новостей;
//
Процедура ИзменитьПользовательскуюВидимостьЛентНовостей(ЛентыНовостей, Видимость = Ложь, Пользователь = Неопределено) Экспорт

	ТипМассив        = Тип("Массив");
	ТипЛентыНовостей = Тип("СправочникСсылка.ЛентыНовостей");
	ТипПользователь  = Тип("СправочникСсылка.Пользователи");

	Если Пользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Иначе
		ТекущийПользователь = Пользователь;
	КонецЕсли;
	Если ТипЗнч(ТекущийПользователь) <> ТипПользователь Тогда // Внешний пользователь, например.
		Возврат;
	КонецЕсли;

	МассивЛентНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = ТипЛентыНовостей Тогда
		МассивЛентНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		МассивЛентНовостей = ХранилищаНастроек.НастройкиНовостей.ПровестиВалидациюНастроек(ЛентыНовостей, "ОтключенныеЛентыНовостей", "");
	Иначе
		Возврат;
	КонецЕсли;

	БылиИзменения = Ложь;
	Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
		Запись = РегистрыСведений.ОтключенныеЛентыНовостей.СоздатьМенеджерЗаписи();
		Запись.Пользователь  = ТекущийПользователь;
		Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
		Если Видимость = Ложь Тогда
			Запись.Записать(Истина);
			БылиИзменения = Истина;
		Иначе
			Запись.Удалить();
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦикла;

	Если БылиИзменения = Истина Тогда
		// После изменения настройки видимости лент новостей (административные, пользовательские и т.п.) необходимо очистить кеш,
		//  чтобы ОбработкаНовостейПовтИсп.ПолучитьМассивОтключенныхЛентНовостей выдавала правильный результат.
		// Здесь может измениться: пользовательская видимость ленты новостей.
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВзаимодействиеСБСП

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	Типы.Добавить(Метаданные.Справочники.ЗначенияКатегорийНовостей);
	Типы.Добавить(Метаданные.Справочники.ЛентыНовостей);
	Типы.Добавить(Метаданные.Справочники.Новости);
	Типы.Добавить(Метаданные.ПланыВидовХарактеристик.КатегорииНовостей);

КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	// При выгрузке загрузке данных коробка -> сервис и сервис -> коробка никакие данные,
	//  относящиеся к подсистеме Новости не должны выгружаться и загружаться.
	Типы.Добавить(Метаданные.Константы.НастройкиНовостей);
	Типы.Добавить(Метаданные.Константы.РазрешенаРаботаСНовостями);
	Типы.Добавить(Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет);
	Типы.Добавить(Метаданные.Справочники.ЗначенияКатегорийНовостей);
	Типы.Добавить(Метаданные.Справочники.ЛентыНовостей);
	Типы.Добавить(Метаданные.Справочники.Новости);
	Типы.Добавить(Метаданные.ПланыВидовХарактеристик.КатегорииНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ВсеОбновленияНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейПростые);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиПользователейБИП);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным);
	Типы.Добавить(Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие);
	Типы.Добавить(Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские);
	Типы.Добавить(Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияНовостей);

КонецПроцедуры

// Процедура-обработчик перехода с другой программы, например с БухгалтерияБазовая на БухгалтерияПРОФ.
// В случае перехода с другой программы надо будет загрузить новости по новой программе (БухгалтерияПРОФ) за 1 месяц,
//   для этого необходимо отредактировать данные регистра сведений ДатыЗагрузкиПоследнихНовостей.
// Должна вызываться или вручную, или с помощью функциональности БСП (см. ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики)).
//
// Параметры:
//  Нет.
//
Процедура ПриПереходеСДругойПрограммы() Экспорт

	// 1. Сбросить настройки последней загрузки новостей, чтобы новости по новой программе загрузились за 1 месяц.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.ЛентаНовостей                        КАК ЛентаНовостей,
		|	Рег.ДатаЗагрузкиПоследнихНовостей        КАК ДатаЗагрузкиПоследнихНовостей,
		|	Рег.КоличествоНеудачПриЗагрузкеНовостей  КАК КоличествоНеудачПриЗагрузкеНовостей,
		|	Рег.ДатаПоследнейПопыткиЗагрузкиНовостей КАК ДатаПоследнейПопыткиЗагрузкиНовостей
		|ИЗ
		|	РегистрСведений.ДатыЗагрузкиПоследнихНовостей КАК Рег
		|ГДЕ
		|	Рег.ДатаЗагрузкиПоследнихНовостей > &ОграничениеДатыЗагрузкиПоследнихНовостей
		|";

	Запрос.УстановитьПараметр("ОграничениеДатыЗагрузкиПоследнихНовостей", '00020101'); // 1 января 0002 года
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ДатаЗагрузкиПоследнихНовостей = ДобавитьМесяц(Запись.ДатаЗагрузкиПоследнихНовостей, -1);
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

	// 2. Обновить классификаторы.
	// Принудительное обновление классификаторов не выполняется - оно автоматически сработает в течение суток.

	ОбработкаНовостейПереопределяемый.ПриПереходеСДругойПрограммы();

КонецПроцедуры

// См. описание этой же процедуры в ОбщегоНазначенияПереопределяемый.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

КонецПроцедуры

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт

	Обработчики.Вставить("ПараметрыОкруженияБИП_Новости", "ОбработкаНовостей.УстановкаПараметровСеанса");

КонецПроцедуры

// См. описание этой же процедуры в РаботаВБезопасномРежимеПереопределяемый
//  из СтандартныеПодсистемы.БазоваяФункциональность.
//
// Параметры:
//	ЗапросыРазрешений - заполняемые разрешения.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"news.webits.1c.ru",
		443,
		НСтр("ru = 'Веб-сервисы получения новостей'"));

	НовыеРазрешения = Новый Массив;
	НовыеРазрешения.Добавить(Разрешение);
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));

КонецПроцедуры

// Пользователи с ролью РедакторНовостей могут редактировать неразделенные данные (Справочник.Новости, например).
// Поэтому эту роль необходимо добавить в список специальных ролей в ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
// Для этого в ПользователиПереопределяемый.ПриОпределенииНазначенияРолей необходимо прописать
//  вызов ОбработкаНовостей.ПриОпределенииНазначенияРолей(НазначениеРолей).
//
// Параметры:
//  НазначениеРолей - Структура - описание см. в ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
//
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт

	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.РедактированиеНовостей.Имя);

КонецПроцедуры

// Процедура устанавливает параметры сеанса для подсистемы Новости.
//
// Параметры:
//  ИмяПараметра           - Неопределено;
//  УстановленныеПараметры - Неопределено.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ВерсияПлатформы", "");
	Результат.Вставить("ВерсияПродукта", "");
	Результат.Вставить("ИмяКонфигурации", "");
	Результат.Вставить("АдресWSDLОпределенияВебСервисаInformation", "https://news.webits.1c.ru/data/v1/classificators?wsdl");
	Результат.Вставить("СостояниеПриНачалеРаботыСистемы", Ложь);

		ВерсииПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion");
		Результат.Вставить("ВерсияПлатформы", ВерсииПлатформы[ВерсииПлатформы.Количество()-1].Значение); // Только полная версия платформы

		ВерсииПродукта = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion");
		Результат.Вставить("ВерсияПродукта", ВерсииПродукта[ВерсииПродукта.Количество()-1].Значение); // Только полная версия продукта (конфигурации)

		ИмяКонфигурации = "Unknown"; // ИмяКонфигурации (из метаданных), либо надо указать произвольное имя английскими буквами.
		ПереопределенноеИмяКонфигурации = ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории("ProductName", ИмяКонфигурации); // Обязательно изменить имя конфигурации
		Если ПустаяСтрока(ПереопределенноеИмяКонфигурации) Тогда
			ПереопределенноеИмяКонфигурации = ИмяКонфигурации;
		КонецЕсли;
		Результат.Вставить("ИмяКонфигурации", ПереопределенноеИмяКонфигурации);

	Хранилище_ПараметрыОкруженияБИП_Новости = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(0));

	УстановитьПривилегированныйРежим(Истина);
		ПараметрыСеанса.ПараметрыОкруженияБИП_Новости = Хранилище_ПараметрыОкруженияБИП_Новости;
	УстановитьПривилегированныйРежим(Ложь);

	Если УстановленныеПараметры <> Неопределено Тогда
		УстановленныеПараметры.Добавить("ПараметрыОкруженияБИП_Новости");
	КонецЕсли;

КонецПроцедуры

#Область ПриНачалеРаботыСистемы

// Процедура вызывается из модуля управляемого приложения,
//  затем ОбработкаНовостейКлиент.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейВызовСервера.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостей.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейПереопределяемый.ПриНачалеРаботыСистемы.
//
// Параметры:
//  Нет.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	ТипСтруктура = ТИп("Структура");

	// 1. Установить параметр сеанса "ПараметрыОкруженияБИП_Новости", (означает, что происходит вызов "ПриНачалеРаботыСистемы"),
	//  чтобы константы не сбрасывали кеш повторно используемых значений.
	УстановитьПривилегированныйРежим(Истина);
		ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			ПараметрыОкруженияБИП_Новости.Вставить("СостояниеПриНачалеРаботыСистемы", Истина);
		КонецЕсли;
		Хранилище_ПараметрыОкруженияБИП_Новости = Новый ХранилищеЗначения(ПараметрыОкруженияБИП_Новости, Новый СжатиеДанных(0));
		ПараметрыСеанса.ПараметрыОкруженияБИП_Новости = Хранилище_ПараметрыОкруженияБИП_Новости;
	УстановитьПривилегированныйРежим(Ложь);

	// 2. Проверять изменение версии платформы необходимо в нескольких случаях:
	// - старт клиентского приложения (если программа работает не в модели сервиса!),
	// - регулярная проверка (в режиме клиент-сервера предприятие могли не запускать долгое время после обновления платформы - например, после длительных выходных).
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		лкПроверитьИзменениеПлатформы = Ложь;
		Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				лкПроверитьИзменениеПлатформы = Ложь;
			Иначе
				лкПроверитьИзменениеПлатформы = Истина;
			КонецЕсли;
		Иначе
			лкПроверитьИзменениеПлатформы = Истина;
		КонецЕсли;
		Если лкПроверитьИзменениеПлатформы = Истина Тогда
			// Внутри процедуры будет проверка на монопольный режим.
			ПроверитьИзменениеВерсииПлатформы();
		КонецЕсли;
	КонецЕсли;

	// 3. Внешним пользователям не рекомендуется пользоваться подсистемой чтения новостей.
	// Никаких сообщений пользователю выводиться не будет - будет просто запись в журнале регистрации.
	Результат = ЭтоВнешнийПользовательСВозможностьюЧтениеНовостей();

	// 4. Переопределение.
	ОбработкаНовостейПереопределяемый.ПриНачалеРаботыСистемы();

	// 5. Сбросить параметр сеанса "ПараметрыОкруженияБИП_Новости" (означает, что вызов "ПриНачалеРаботыСистемы" завершен),
	//  чтобы константы начали сбрасывать кеш повторно используемых значений.
	УстановитьПривилегированныйРежим(Истина);
		ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			ПараметрыОкруженияБИП_Новости.Вставить("СостояниеПриНачалеРаботыСистемы", Ложь);
		КонецЕсли;
		Хранилище_ПараметрыОкруженияБИП_Новости = Новый ХранилищеЗначения(ПараметрыОкруженияБИП_Новости, Новый СжатиеДанных(0));
		ПараметрыСеанса.ПараметрыОкруженияБИП_Новости = Хранилище_ПараметрыОкруженияБИП_Новости;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СоединениеССерверомНовостей

// Функция возвращает адрес wsdl-определения для веб-сервиса Information (обновление стандартных списков для подсистемы новостей).
// Возврат простых строк (без расчетов) осуществляется быстрее из обычного модуля,
//  а не из модуля с использованием повторно используемых возвращаемых значений.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка - адрес wsdl-определения веб-сервиса обновления классификаторов.
//
Функция ПолучитьАдресWSDLОпределенияВебСервисаInformation() Экспорт

	// Попробовать получить данные из ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.
	// В случае неудачи вернуть значение по-умолчанию.
	ЗначениеПоУмолчанию = "https://news.webits.1c.ru/data/v1/classificators?wsdl";
	Результат = ЗначениеПоУмолчанию;
	ТипСтруктура = Тип("Структура");
	ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
	Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
		Если ПараметрыОкруженияБИП_Новости.Свойство("АдресWSDLОпределенияВебСервисаInformation") Тогда
			Если НЕ ПустаяСтрока(ПараметрыОкруженияБИП_Новости.АдресWSDLОпределенияВебСервисаInformation) Тогда
				Результат = ПараметрыОкруженияБИП_Новости.АдресWSDLОпределенияВебСервисаInformation;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает объект HTTPСоединение или Неопределено (в случае ошибок).
//
// Параметры:
//  ИмяСервера     - Строка - имя сервера, с которым необходимо соединиться;
//  Протокол       - Строка - протокол соединения, может быть "http", "https", "file". Также может быть = "", если ЛокальнаяЛентаНовостей = Истина;
//  Логин          - Строка;
//  Пароль         - Строка;
//  ХттпСоединение - Сюда вернется объект HTTPСоединение или Неопределено (в случае ошибок).
//
// Возвращаемое значение:
//  Булево.
//
Функция СоединитьсяССерверомНовостей(ИмяСервера, Протокол, Логин, Пароль, ХттпСоединение) Экспорт

	СоединениеУстановлено = Ложь;

	Если (ВРег(Протокол) <> ВРег("http")) И (ВРег(Протокол) <> ВРег("https")) Тогда // file?
		Возврат Ложь;
	КонецЕсли;

	// Прокси - брать из БСП.
	// Настройки прокси в БСП хранятся как для сервера (в виде соответствия в константе НастройкаПроксиСервера),
	//  так и для клиента (хранятся в хранилище настроек для каждого пользователя).
	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http://");

	// Таймаут и количество попыток соединения - брать из настроек.
	НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПолученияНовостей",
		,
		,
		""); // Для всех пользователей

	ПопыткаСоединения = 0;
	Пока (СоединениеУстановлено <> Истина) И (ПопыткаСоединения < НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения) Цикл

		// В имени сервера через двоеточие может идти порт (например, news1c.ru:8081), выделить его.
		ГдеДвоеточие = Найти(ИмяСервера, ":");
		Если ГдеДвоеточие > 0 Тогда
			ИмяСервера_Сервер = СокрЛП(Лев(ИмяСервера, ГдеДвоеточие - 1));
			Попытка
				ИмяСервера_Порт = Число(Прав(ИмяСервера, СтрДлина(ИмяСервера) - ГдеДвоеточие));
			Исключение
				ИмяСервера_Порт = Неопределено;
				ТекстСообщения = СтрШаблон(
					НСтр("ru='Попытка %1 / %2.
						|Ошибка определения порта из имени сервера %3 (%4).'"),
					ПопыткаСоединения,
					НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения,
					ИмяСервера,
					Протокол);
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Соединение с сервером новостей. Ошибка определения параметров'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				// Пропустить ленту новостей.
				Продолжить;
			КонецПопытки;
		Иначе
			ИмяСервера_Сервер = СокрЛП(ИмяСервера);
			ИмяСервера_Порт   = Неопределено;
		КонецЕсли;

		Попытка
			ПопыткаСоединения = ПопыткаСоединения + 1;

			ТекстСообщения = СтрШаблон(
				НСтр("ru='Попытка %1 / %2:
					|Протокол    = %3
					|Имя сервера = %4
					|Порт        = %5'"),
				ПопыткаСоединения,
				НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения,
				ИмяСервера_Сервер,
				ИмяСервера_Порт,
				Протокол);
			// Запись в журнал регистрации
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка новостей. Соединение с сервером новостей'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			// Параметр "Таймаут" поддерживается начиная с 8.2.16.*.
			ХттпСоединение = Новый HTTPСоединение(
				ИмяСервера_Сервер, // Сервер
				ИмяСервера_Порт, // Порт
				Логин,
				Пароль,
				Прокси,
				НастройкиПолученияНовостей.HTTPСоединениеТаймаутСоединенияСекунд, // Таймаут
				?(ВРег(Протокол) = ВРег("https"), Новый ЗащищенноеСоединениеOpenSSL, Неопределено)); // ЗащищенноеСоединение
			СоединениеУстановлено = Истина;
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Попытка %1 / %2:
					|Ошибка подключения к серверу %3 (%4) для получения новостей по причине:
					|%5'"),
				ПопыткаСоединения,
				НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения,
				ИмяСервера,
				Протокол,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			// Запись в журнал регистрации
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка новостей. Соединение с сервером новостей. Ошибка соединения'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			// Пропустить ленту новостей
		КонецПопытки;
	КонецЦикла;

	Возврат СоединениеУстановлено;

КонецФункции

#КонецОбласти

#Область ИнтерактивнаяРаботаСТекстомНовости

// Процедура заполняет параметры Действие и СписокПараметров для объекта
//  новости по переданному уникальному идентификатору гиперссылки.
//
// Параметры:
//  Объект           - Данные формы коллекция, ДокументСсылка.Новости, СправочникСсылка.Новости;
//  УИНДействия      - Строка;
//  Действие         - Строка;
//  СписокПараметров - СписокЗначений.
//
Процедура ПодготовитьПараметрыНавигационнойСсылки(Знач Объект, УИНДействия, Действие, СписокПараметров) Экспорт

	Действие = "";
	СписокПараметров = Новый СписокЗначений;

	// В поле ХТМЛ документа гиперссылка 1C:idAction (Действие) преобразуется 1c:idAction (меняется регистр букв),
	//  поэтому поиск по точному соответствию невозможен - надо сравнивать вручную, преобразуя все к верхнему регистру.
	Для каждого ТекущееДействие Из Объект.Действия Цикл
		Если ВРег(УИНДействия) = ВРег(ТекущееДействие.УИНДействия) Тогда
			Действие = ТекущееДействие.Действие;
			// В поле ХТМЛ документа гиперссылка 1C:idAction (Действие) преобразуется 1c:idAction (меняется регистр букв),
			//  поэтому поиск по точному соответствию невозможен - надо сравнивать вручную, преобразуя все к верхнему регистру.
			Для каждого ТекущийПараметр Из Объект.ПараметрыДействий Цикл
				Если ВРег(УИНДействия) = ВРег(ТекущийПараметр.УИНДействия) Тогда
					СписокПараметров.Добавить(ТекущийПараметр.ЗначениеПараметра, ТекущийПараметр.Параметр);
				КонецЕсли;
			КонецЦикла;
			Прервать; ////! Или сделать последовательную обработку, если для одного идентификатора указано несколько действий?
		КонецЕсли;
	КонецЦикла;

	ОбработкаНовостейПереопределяемый.ДополнительноПодготовитьПараметрыНавигационнойСсылки(Объект, УИНДействия, Действие, СписокПараметров);

КонецПроцедуры

#КонецОбласти

#Область Настройки

// Получение настройки чтения новости.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Произвольное.
//
Функция ПолучитьНастройкиПоказаНовостейНастроенныеАдминистратором() Экспорт

	Результат = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостейНастроенныеАдминистратором",
		"");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСоСпискамиНовостейИКлассификаторов

// Процедура возвращает список значений очень важных и просто важных новостей с неотключенными напоминаниями, т.е. новостей,
// которые удовлетворяют настройкам отборов пользователей, не просрочены, напоминания не отключены ранее,
// и с включенным свойством "Важность" = 1 или 2.
// Если включено разделение данных, то такой список должен получаться только при включенном разделителе.
//
// Параметры:
//  ОченьВажныеНовости - Массив структур - в этот параметр будут возвращены новости с важностью "Очень важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * ОповещениеВключено             - Булево - Признак, что оповещение включено.
//  ВажныеНовости      - Массив структур - в этот параметр будут возвращены новости с важностью "Важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НавигационнаяСсылка            - Строка - навигационная ссылка на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * ОповещениеВключено             - Булево - Признак, что оповещение включено.
//
Процедура ПолучитьНовостиСНапоминаниями(ОченьВажныеНовости, ВажныеНовости) Экспорт

	ОченьВажныеНовости = Новый Массив;
	ВажныеНовости      = Новый Массив;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей",
		"");

	// Ленты новостей могут быть отключены как самим пользователем, так и администратором в настройках самой ленты новостей.
	МассивОтключенныхЛентНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"ОтключенныеЛентыНовостей", // КлючОбъекта
		""); // КлючНастроек, пока не обрабатывается

	// Выбор из справочника Новостей.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|// {Блок запроса новостей-исключений. Начало
		|// Временная таблица с новостями-исключениями, которые не проходят по отборам.
		|// Фильтр по редко меняющимся отборам (версия платформы, версия продукта, продукт, ...)
		|ВЫБРАТЬ
		|	Рег.Новость КАК Новость
		|ПОМЕСТИТЬ ВТ_НовостиИсключения
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК Рег
		|ГДЕ
		|	Рег.РезультатОтбора = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список.
		|
		|// Фильтр по общим отборам.
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_Общие КАК Рег
		|//ГДЕ // В регистре и так хранятся только исключения.
		|//	Рег.РезультатОтбора = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список.
		|
		|// Фильтр по пользовательским отборам.
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские КАК Рег
		|ГДЕ
		|	Рег.Пользователь = &ТекущийПользователь
		|	// И Рег.РезультатОтбора = ЛОЖЬ // В регистре и так хранятся только исключения.
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Новость
		|
		|// Блок запроса новостей-исключений. Конец}
		|;
		|
		|// Временная таблица с преобразованными периодическими значениями (актуальность, важность).
		|ВЫБРАТЬ
		|	Спр.Ссылка                                               КАК Новость,
		|	Спр.ЛентаНовостей                                        КАК ЛентаНовостей,
		|	ЕСТЬNULL(РегСвойства.ВажностьОбщая, 0)                   КАК Важность,
		|	ЕСТЬNULL(РегСвойства.Актуальность, ИСТИНА)               КАК Актуальность,
		|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)                    КАК Прочтена,
		|	ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)        КАК ОповещениеВключено,
		|	ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения,
		|	ЕСТЬNULL(РегСостояния.УдаленаИзСпискаНовостей, ЛОЖЬ)     КАК УдаленаИзСпискаНовостей
		|ПОМЕСТИТЬ ВТ_НовостиТребующиеПрочтения
		|ИЗ
		|	Справочник.Новости КАК Спр
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СостоянияНовостей КАК РегСостояния
		|		ПО
		|			РегСостояния.Новость = Спр.Ссылка
		|			И РегСостояния.Пользователь = &ТекущийПользователь
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПериодическиеСвойстваНовостей КАК РегСвойства
		|		ПО
		|			РегСвойства.Новость = Спр.Ссылка
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|
		|	// {Фильтры по категориям, версиям}
		|	И НЕ Спр.Ссылка В (
		|		ВЫБРАТЬ
		|			ВТ_НовостиИсключения.Новость
		|		ИЗ
		|			ВТ_НовостиИсключения
		|	)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Важность, Актуальность
		|;
		|
		|// Основной запрос - важные и очень важные новости, требующие прочтения.
		|ВЫБРАТЬ
		|	Спр.Новость              КАК Новость,
		|	Спр.Новость.УИННовости   КАК УИННовости,
		|	Спр.Важность             КАК Важность, // С учетом даты сброса важности
		|	Спр.Новость.Наименование КАК НовостьНаименование,
		|	Спр.Новость.Подзаголовок КАК НовостьПодзаголовок,
		|	Спр.Прочтена             КАК Прочтена,
		|	Спр.ОповещениеВключено   КАК ОповещениеВключено
		|ИЗ
		|	ВТ_НовостиТребующиеПрочтения КАК Спр
		|ГДЕ
		|	Спр.Важность В (1, 2) // Очень важная, важная
		|
		|	И ( // Не просроченные новости
		|		Спр.Актуальность = ИСТИНА
		|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
		|	)
		|
		|	И ( // С включенным (неотключенным) оповещением
		|		(Спр.ОповещениеВключено = ИСТИНА)
		|		И (Спр.ДатаНачалаОповещения <= &ТекущаяУниверсальнаяДата)
		|	)
		|
		|	И ( // Не удалена пользователем в корзину
		|		Спр.УдаленаИзСпискаНовостей = ЛОЖЬ
		|	)
		|
		|	// Только из доступных (включенных и видимых лент новостей).
		|	И НЕ Спр.ЛентаНовостей В (&МассивОтключенныхЛентНовостей)
		|
		|";
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
	Запрос.УстановитьПараметр("МассивОтключенныхЛентНовостей", МассивОтключенныхЛентНовостей);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	Результат = Запрос.Выполнить(); // ПолучитьНовостиСНапоминаниями()

	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Важность = 1 Тогда // Очень важная
				ОченьВажныеНовости.Добавить(
					Новый Структура("Новость,НовостьУникальныйИдентификатор,УИНновости,
										|НовостьНаименование,НовостьПодзаголовок,ОповещениеВключено",
						Выборка.Новость,
						Выборка.Новость.УникальныйИдентификатор(),
						Выборка.УИННовости,
						Выборка.НовостьНаименование,
						Выборка.НовостьПодзаголовок,
						Выборка.ОповещениеВключено));
			Иначе // Если Выборка.Важность = 2, важная
				ВажныеНовости.Добавить(
					Новый Структура("Новость,НовостьУникальныйИдентификатор,УИНновости,НавигационнаяСсылка,
										|НовостьНаименование,НовостьПодзаголовок,ОповещениеВключено",
						Выборка.Новость,
						Выборка.Новость.УникальныйИдентификатор(),
						Выборка.УИННовости,
						ПолучитьНавигационнуюСсылку(Выборка.Новость),
						Выборка.НовостьНаименование,
						Выборка.НовостьПодзаголовок,
						Выборка.ОповещениеВключено));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция находит новость по ее УИН и, если передан параметр, то по ленте новостей
// Если найдено несколько новостей с таким кодом, то открывается.
//
// Параметры:
//  УИННовости       - Строка - уникальный код новости (реквизит УИННовости);
//  ЛентаНовостейКод - Строка - код ленты новостей (реквизит Код).
//
Функция ПолучитьНовостиПоУИН(УИННовости, ЛентаНовостейКод = Неопределено) Экспорт

	Результат = Новый СписокЗначений;

	ТипСтрока = Тип("Строка");

	Если ТипЗнч(ЛентаНовостейКод) = ТипСтрока
			И НЕ ПустаяСтрока(ЛентаНовостейКод) Тогда
		ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоКоду(ЛентаНовостейКод, Ложь);
	Иначе
		ЛентаНовостей = Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.ЛентаНовостей КАК ЛентаНовостей,
		|	Спр.Ссылка        КАК Новость
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.УИННовости = &УИННовости
		|	И &МетаУсловиеЛентаНовостей
		|";
	Запрос.УстановитьПараметр("УИННовости", УИННовости);

	Если (ТипЗнч(ЛентаНовостей) = Тип("СправочникСсылка.ЛентыНовостей"))
			И (НЕ ЛентаНовостей.Пустая()) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеЛентаНовостей", "Спр.ЛентаНовостей = &ЛентаНовостей");
		Запрос.УстановитьПараметр("ЛентаНовостей", ЛентаНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеЛентаНовостей", "ИСТИНА");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьНовостиПоУИН()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Выгрузить колонку "Новость" и загрузить ее в список значений.
		Результат.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость"));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура сбрасывает дату последней загрузки новостей и, при необходимости, помечает загруженные ранее новости на удаление.
//
// Параметры:
//  ЛентыНовостей             - СправочникСсылка.ЛентаНовостей или Массив - Лента новостей или Массив лент новостей,
//                              у которой необходимо сбросить дату последней загрузки новостей;
//  ПомечатьНовостиНаУдаление - Булево - Если ИСТИНА, то пометить загруженные ранее новости на удаление.
//
Процедура СбросДатыПоследнейУспешнойЗагрузкиНовостей(ЛентыНовостей, ПомечатьНовостиНаУдаление = Ложь) Экспорт

	ТипМассив = Тип("Массив");

	лкЛентыНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
		лкЛентыНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		лкЛентыНовостей = ЛентыНовостей;
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого ТекущаяЛентаНовостей Из лкЛентыНовостей Цикл
		Если НЕ ТекущаяЛентаНовостей.Пустая() Тогда
			// Очистка даты последней успешной загрузки.
			Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
			Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
			Запись.Удалить();
			// Пометка всех новостей из этой ленты на удаление.
			Если ПомечатьНовостиНаУдаление = Истина Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка КАК Новость
					|ИЗ
					|	Справочник.Новости КАК Спр
					|ГДЕ
					|	Спр.ЛентаНовостей = &ЛентаНовостей
					|	И Спр.ПометкаУдаления = ЛОЖЬ
					|";
				Запрос.УстановитьПараметр("ЛентаНовостей", ТекущаяЛентаНовостей);
				РезультатЗапроса = Запрос.Выполнить(); // СбросДатыПоследнейУспешнойЗагрузкиНовостей()
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						НовостьОбъект = Выборка.Новость.ПолучитьОбъект();
						НовостьОбъект.УстановитьПометкуУдаления(Истина);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура сбрасывает дату последней загрузки классификаторов.
//
// Параметры:
//  Списки - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка или Массив - Классификатор или Массив классификаторов,
//                                                                               дату загрузки которых надо сбросить.
//
Процедура СбросДатыПоследнейУспешнойЗагрузкиКлассификатора(Списки) Экспорт

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");

	лкСписки = Новый Массив;
	Если ТипЗнч(Списки) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		лкСписки.Добавить(Списки);
	ИначеЕсли ТипЗнч(Списки) = ТипСтрока Тогда
		лкСписки.Добавить(Списки);
	ИначеЕсли ТипЗнч(Списки) = ТипМассив Тогда
		лкСписки = Списки;
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого ТекущийСписок Из лкСписки Цикл
		МожноОбработать = Истина;
		Если ТипЗнч(ТекущийСписок) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
			Если ТекущийСписок.Пустая() Тогда
				МожноОбработать = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийСписок) = ТипСтрока Тогда
			Если ПустаяСтрока(ТекущийСписок) Тогда
				МожноОбработать = Ложь;
			КонецЕсли;
		Иначе
			МожноОбработать = Ложь;
		КонецЕсли;
		Если МожноОбработать = Истина Тогда
			// Очистка даты последней успешной загрузки.
			Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
			Запись.Список                 = ТекущийСписок;
			Запись.ТекущаяВерсияНаКлиенте = '00010101';
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция возвращает подробную информацию о хранении новости и ее окружении по идентификатору.
//
// Параметры:
//  УИННовости - Строка - Идентификатор новости.
//
// Возвращаемое значение:
//   Строка - текст с подробной информацией о новости для службы техподдержки.
//
Функция ПолучитьИнформациюОНовости(УИННовости) Экспорт

	ТипСтруктура = Тип("Структура");
	ТипФоновоеЗадание = Тип("ФоновоеЗадание");
	ТипИнформацияОбОшибке = Тип("ИнформацияОбОшибке");

	МассивСсылокНовостей  = Новый Массив;
	МассивЛентНовостей    = Новый Массив;
	ВсеПоставляемыеДанные = Новый Соответствие;

	// Чтение некоторых значений может потребовать административного доступа.
	УстановитьПривилегированныйРежим(Истина);

	ПолучитьТекущегоПользователя = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Если включено разделение данных, и мы зашли в неразделенном сеансе,
		//  то нельзя устанавливать пользовательские свойства новости.
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		Иначе
			ПолучитьТекущегоПользователя = Истина;
		КонецЕсли;
	Иначе
		ПолучитьТекущегоПользователя = Истина;
	КонецЕсли;

#Область Шаблоны

	// Информация включает в себя:
	// 1. Текущая информация о новости:
	//  1.1. Содержимое элемента справочника новости;
	//  1.2. Содержимое регистров сведений;
	// 2. Другие данные;
	//  2.1. Данные из всех макетов для загрузки стандартных значений новостей;
	// 3. Текущая информация о лентах новостей, где найдена новость с таким UIN;
	// 4. Данные о всех регламентных операциях;
	// 5. Информация об окружении:
	//  5.1. Константы;
	//  5.2. Другие параметры работы (файловая база, модель сервиса и т.п.);
	//  5.3. Параметры сеанса;
	//  5.4. Данные о конфигурации (из метаданных);
	//  5.5. Данные регламентного задания.

	// MarkdownPad:
	// # - заголовок первого уровня;
	// ## - заголовок второго уровня;
	// ###### - заголовок шестого уровня;
	// *Текст* - текст курсивом;
	// **Текст** - текст жирный;
	// строка, начинающаяся с Tab - равноширинный текст, код;
	// ---------- - горизонтальный разделитель.

	Результат = НСтр("ru='
		|# ОТЛАДОЧНАЯ ИНФОРМАЦИЯ О НОВОСТЯХ
		|
		|Дата отчета: **%ТекущаяУниверсальнаяДата%**
		|
		|Найдено элементов справочника Новости с UIN **%УИННовости%**: %КоличествоНайденныхНовостей%
		|
		|----------
		|## ДАННЫЕ О НОВОСТЯХ
		|%ДанныеОНовостях%
		|
		|----------
		|
		|----------
		|## ДАННЫЕ О ЛЕНТАХ НОВОСТЕЙ
		|%ДанныеОЛентахНовостей%
		|
		|----------
		|
		|----------
		|## ДАННЫЕ О РЕГЛАМЕНТНЫХ ОПЕРАЦИЯХ
		|%ДанныеОРегламентныхОперациях%
		|
		|----------
		|
		|----------
		|## ДАННЫЕ О ПРОГРАММНОМ ОКРУЖЕНИИ
		|%ДанныеОПрограммномОкружении%
		|
		|----------
		|'");

	ШаблонРезультатаНовости = НСтр("ru='
		|### Новость: %НомерПоПорядку% / %КоличествоНайденныхНовостей%
		|
		|#### Элемент справочника новости
		|%ЭлементСправочникаНовости%
		|
		|#### Вспомогательные регистры сведений
		|##### РегистрСведений.КатегорииНовостейИнтервалыВерсий
		|%РегистрСведений.КатегорииНовостейИнтервалыВерсий%
		|
		|##### РегистрСведений.КатегорииНовостейПростые
		|%РегистрСведений.КатегорииНовостейПростые%
		|
		|##### РегистрСведений.ПериодическиеСвойстваНовостей
		|%РегистрСведений.ПериодическиеСвойстваНовостей%
		|
		|##### РегистрСведений.ПривязкаНовостейКМетаданным
		|%РегистрСведений.ПривязкаНовостейКМетаданным%
		|
		|##### РегистрСведений.РассчитанныеОтборыПоНовостям_Общие
		|%РегистрСведений.РассчитанныеОтборыПоНовостям_Общие%
		|
		|##### РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся
		|%РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся%
		|
		|##### РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские (для текущего пользователя)
		|%РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские%
		|
		|##### РегистрСведений.ОтключенныеЛентыНовостей (для текущего пользователя)
		|%РегистрСведений.ОтключенныеЛентыНовостей%
		|
		|##### РегистрСведений.СостоянияНовостей
		|%РегистрСведений.СостоянияНовостей%
		|
		|#### Данные в основных макетах поставляемых данных
		|%ПоставляемыеДанные%
		|
		|'");

	ШаблонРезультатаПоставляемыеДанные = НСтр("ru='
		|##### Поставляемые данные, идентификатор %ИдентификаторПоставляемыхДанных%
		|
		|Текст, где встречается UIN (+-200 символов):
		|	
		|%ТекстПоставляемыхДанных%
		|	
		|'");

	ШаблонРезультатаЛентыНовостей = НСтр("ru='
		|### Лента новостей: %НомерПоПорядку% / %КоличествоНайденныхЛентНовостей%
		|
		|#### Элемент справочника Ленты новостей
		|%ЭлементСправочникаЛентыНовостей%
		|
		|'");

	ШаблонРезультатаРегламентныеОперации = НСтр("ru='
		|### РегистрСведений.ВсеОбновленияНовостей
		|%РегистрСведений.ВсеОбновленияНовостей%
		|
		|### РегистрСведений.ДатыЗагрузкиПоследнихНовостей
		|%РегистрСведений.ДатыЗагрузкиПоследнихНовостей%
		|
		|### РегистрСведений.ДатыОбновленияСтандартныхСписковНовостей
		|%РегистрСведений.ДатыОбновленияСтандартныхСписковНовостей%
		|
		|'");

	ШаблонРезультатаПрограммноеОкружение = НСтр("ru='
		|### Константы
		|%Константы%
		|
		|### Другие параметры программного окружения
		|%ДругиеПараметрыПрограммногоОкружения%
		|
		|### Значения предопределенных категорий
		|%ЗначенияПредопределенныхКатегорий%
		|
		|### Параметры сеанса
		|%ПараметрыСеанса%
		|
		|### Данные о конфигурации (из метаданных) и операционной системы
		|%ДанныеОКонфигурацииИзМетаданных%
		|
		|### Расписание регламентного задания
		|%РасписаниеРегламентногоЗадания%
		|
		|'");

#КонецОбласти

#Область ПолучениеДанных

	// 1. Получить список новостей
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// 0. Новости с нужным UIN
		|ВЫБРАТЬ
		|	Спр.Ссылка            КАК Новость,
		|	Спр.ЛентаНовостей     КАК ЛентаНовостей,
		|	Спр.ЛентаНовостей.Код КАК ЛентаНовостейКод
		|ПОМЕСТИТЬ ВТ_НайденныеНовости
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.УИННовости = &УИННовости
		|;
		|
		|// 1. Все новости
		|ВЫБРАТЬ
		|	ВТ_НайденныеНовости.Новость КАК Новость
		|ИЗ
		|	ВТ_НайденныеНовости
		|;
		|
		|// 2. Все ленты новостей
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НайденныеНовости.ЛентаНовостей    КАК ЛентаНовостей,
		|	ВТ_НайденныеНовости.ЛентаНовостейКод КАК ЛентаНовостейКод
		|ИЗ
		|	ВТ_НайденныеНовости
		|";
	Запрос.УстановитьПараметр("УИННовости", УИННовости);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		МассивСсылокНовостей = РезультатыЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
	КонецЕсли;
	Если НЕ РезультатыЗапроса[2].Пустой() Тогда
		Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			МассивЛентНовостей.Добавить(
				Новый Структура("ЛентаНовостей, ЛентаНовостейКод",
					Выборка.ЛентаНовостей,
					Выборка.ЛентаНовостейКод));
		КонецЦикла;
	КонецЕсли;

	Если МассивЛентНовостей.Количество() > 0 Тогда
		// Стандартные макеты
		Для каждого ТекущийМакет Из Метаданные.Справочники.Новости.Макеты Цикл
			Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
				Если ВРег(ТекущийМакет.Имя) = (ВРег("СтандартныеЗначения_" + ТекущаяЛентаНовостей.ЛентаНовостейКод)) Тогда
					СодержимоеМакета = Справочники.Новости.ПолучитьМакет(ТекущийМакет.Имя).ПолучитьТекст();
					ВсеПоставляемыеДанные.Вставить(
						"Справочник.Новости." + ТекущийМакет.Имя, // Идентификатор.
						СодержимоеМакета);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		// Вспомогательные макеты
		Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
			ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей(ТекущаяЛентаНовостей.ЛентаНовостей, ВсеПоставляемыеДанные);
		КонецЦикла;
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов

#Область ЗаполнениеШаблонов_ОбщиеДанные

	Результат = СтрЗаменить(Результат, "%ТекущаяУниверсальнаяДата%", Формат(ТекущаяУниверсальнаяДата(), "ДЛФ=DT") + " (GMT)");
	Результат = СтрЗаменить(Результат, "%УИННовости%", УИННовости);
	Результат = СтрЗаменить(Результат, "%КоличествоНайденныхНовостей%", МассивСсылокНовостей.Количество());

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости

	Если МассивСсылокНовостей.Количество() > 0 Тогда
		РезультатНовости = "";

		С = 1;
		Для Каждого ТекущаяНовость Из МассивСсылокНовостей Цикл
			НовостьОбъект = ТекущаяНовость.ПолучитьОбъект();
			НовостьХДТО = СериализаторXDTO.ЗаписатьXDTO(НовостьОбъект);
			ПредставлениеНовостьХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
				ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НовостьХДТО),
				Символы.Таб,
				Истина);

#Область ЗаполнениеШаблонов_Новости_ОбщиеДанные

			РезультатТекущейНовости = ШаблонРезультатаНовости;
			РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%НомерПоПорядку%", С);
			РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%КоличествоНайденныхНовостей%", МассивСсылокНовостей.Количество());
			РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%ЭлементСправочникаНовости%", ПредставлениеНовостьХДТО);

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_КатегорииНовостейИнтервалыВерсий

			ИмяРегистраСведений = "КатегорииНовостейИнтервалыВерсий";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_КатегорииНовостейПростые

			ИмяРегистраСведений = "КатегорииНовостейПростые";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ПериодическиеСвойстваНовостей

			ИмяРегистраСведений = "ПериодическиеСвойстваНовостей";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ПривязкаНовостейКМетаданным

			ИмяРегистраСведений = "ПривязкаНовостейКМетаданным";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_РассчитанныеОтборыПоНовостям_Общие

			ИмяРегистраСведений = "РассчитанныеОтборыПоНовостям_Общие";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_РассчитанныеОтборыПоНовостям_РедкоМеняющиеся

			ИмяРегистраСведений = "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_РассчитанныеОтборыПоНовостям_Пользовательские

			ИмяРегистраСведений = "РассчитанныеОтборыПоНовостям_Пользовательские";
			Если ПолучитьТекущегоПользователя = Истина Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор["Пользователь"].Установить(ПользователиКлиентСервер.ТекущийПользователь());
				НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
				НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
					ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
						ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
						Символы.Таб,
						Истина);
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						ПредставлениеНаборЗаписейХДТО);
				Иначе
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						Символы.Таб + НСтр("ru='Набор записей пустой.'"));
				КонецЕсли;
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					НСтр("ru='В модели сервиса для администратора системы нельзя получить пользовательские настройки или отборы.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ОтключенныеЛентыНовостей

			ИмяРегистраСведений = "ОтключенныеЛентыНовостей";
			Если ПолучитьТекущегоПользователя = Истина Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор["Пользователь"].Установить(ПользователиКлиентСервер.ТекущийПользователь());
				НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
					ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
						ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
						Символы.Таб,
						Истина);
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						ПредставлениеНаборЗаписейХДТО);
				Иначе
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						Символы.Таб + НСтр("ru='Набор записей пустой.'"));
				КонецЕсли;
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					НСтр("ru='В модели сервиса для администратора системы нельзя получить пользовательские настройки или отборы.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_СостоянияНовостей

			ИмяРегистраСведений = "СостоянияНовостей";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ПоставляемыеДанные

			РезультатПоставляемыеДанные = "";

			Для Каждого ТекущиеПоставляемыеДанные Из ВсеПоставляемыеДанные Цикл
				ЧислоВхождений = СтрЧислоВхождений(ВРег(ТекущиеПоставляемыеДанные.Значение), ВРег(УИННовости));
				Если ЧислоВхождений > 0 Тогда
					РезультатТекущиеПоставляемыеДанные = ШаблонРезультатаПоставляемыеДанные;
					РезультатТекущиеПоставляемыеДанные = СтрЗаменить(РезультатТекущиеПоставляемыеДанные, "%ИдентификаторПоставляемыхДанных%", ТекущиеПоставляемыеДанные.Ключ);
					ГдеНачалоПодстроки = СтрНайти(ВРег(ТекущиеПоставляемыеДанные.Значение), ВРег(УИННовости)); // Первое вхождение
					ТекстПоставляемыхДанных = Сред(ТекущиеПоставляемыеДанные.Значение, ГдеНачалоПодстроки - 200, 400);
					ТекстПоставляемыхДанных = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(ТекстПоставляемыхДанных, Символы.Таб, Истина);
					РезультатТекущиеПоставляемыеДанные = СтрЗаменить(РезультатТекущиеПоставляемыеДанные, "%ТекстПоставляемыхДанных%", ТекстПоставляемыхДанных);
					РезультатПоставляемыеДанные = РезультатПоставляемыеДанные + РезультатТекущиеПоставляемыеДанные;
				КонецЕсли;
			КонецЦикла;

			Если НЕ ПустаяСтрока(РезультатПоставляемыеДанные) Тогда
				РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%ПоставляемыеДанные%", РезультатПоставляемыеДанные);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%ПоставляемыеДанные%", Символы.Таб + НСтр("ru='Не найдено в поставляемых данных.'"));
			КонецЕсли;

#КонецОбласти

			РезультатНовости = РезультатНовости + РезультатТекущейНовости;
			С = С + 1;
		КонецЦикла;

		Результат = СтрЗаменить(Результат, "%ДанныеОНовостях%", РезультатНовости);
	Иначе
		Результат = СтрЗаменить(Результат, "%ДанныеОНовостях%", НСтр("ru='Не найдено ни одной новости с таким UIN'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ЛентыНовостей

	Если МассивЛентНовостей.Количество() > 0 Тогда
		РезультатЛентыНовостей = "";

		С = 1;
		Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
			ЛентаНовостейОбъект = ТекущаяЛентаНовостей.ЛентаНовостей.ПолучитьОбъект();
			ЛентаНовостейХДТО = СериализаторXDTO.ЗаписатьXDTO(ЛентаНовостейОбъект);
			ПредставлениеЛентаНовостейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
				ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(ЛентаНовостейХДТО),
				Символы.Таб,
				Истина);

			РезультатТекущейЛентыНовостей = ШаблонРезультатаЛентыНовостей;
			РезультатТекущейЛентыНовостей = СтрЗаменить(РезультатТекущейЛентыНовостей, "%НомерПоПорядку%", С);
			РезультатТекущейЛентыНовостей = СтрЗаменить(РезультатТекущейЛентыНовостей, "%КоличествоНайденныхЛентНовостей%", МассивЛентНовостей.Количество());
			РезультатТекущейЛентыНовостей = СтрЗаменить(РезультатТекущейЛентыНовостей, "%ЭлементСправочникаЛентыНовостей%", ПредставлениеЛентаНовостейХДТО);

			РезультатЛентыНовостей = РезультатЛентыНовостей + РезультатТекущейЛентыНовостей;
			С = С + 1;
		КонецЦикла;

		Результат = СтрЗаменить(Результат, "%ДанныеОЛентахНовостей%", РезультатЛентыНовостей);
	Иначе
		Результат = СтрЗаменить(Результат, "%ДанныеОЛентахНовостей%", НСтр("ru='Не найдено ни одной ленты новостей для новости с таким UIN'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях

	РезультатДанныеОРегламентныхОперациях = ШаблонРезультатаРегламентныеОперации;

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях_ВсеОбновленияНовостей

	ИмяРегистраСведений = "ВсеОбновленияНовостей";
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
		ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
			Символы.Таб,
			Истина);
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			ПредставлениеНаборЗаписейХДТО);
	Иначе
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			Символы.Таб + НСтр("ru='Набор записей пустой.'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях_ДатыЗагрузкиПоследнихНовостей

	ИмяРегистраСведений = "ДатыЗагрузкиПоследнихНовостей";
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
		ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
			Символы.Таб,
			Истина);
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			ПредставлениеНаборЗаписейХДТО);
	Иначе
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			Символы.Таб + НСтр("ru='Набор записей пустой.'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях_ДатыОбновленияСтандартныхСписковНовостей

	ИмяРегистраСведений = "ДатыОбновленияСтандартныхСписковНовостей";
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
		ПредставлениеНаборЗаписейХДТО = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
			Символы.Таб,
			Истина);
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			ПредставлениеНаборЗаписейХДТО);
	Иначе
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			Символы.Таб + НСтр("ru='Набор записей пустой.'"));
	КонецЕсли;

#КонецОбласти

	Результат = СтрЗаменить(Результат, "%ДанныеОРегламентныхОперациях%", РезультатДанныеОРегламентныхОперациях);

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение

	РезультатДанныеОПрограммномОкружении = ШаблонРезультатаПрограммноеОкружение;

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_Константы

	НастройкиНовостей = Константы.НастройкиНовостей.Получить().Получить();
	Если ТипЗнч(НастройкиНовостей) = ТипСтруктура Тогда
		ПредставлениеНастройкиНовостей = ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(НастройкиНовостей, "=", Символы.ПС);
	Иначе
		ПредставлениеНастройкиНовостей = СтрШаблон(НСтр("ru='Настройки новостей необрабатываемого типа %1'"), ТипЗнч(НастройкиНовостей));
	КонецЕсли;

	РезультатДанныеОПрограммномОкружении_Константы = СтрШаблон(
		НСтр("ru='Константа.НастройкиНовостей:
			|%1
			|РазрешенаРаботаСНовостями: %2
			|РазрешенаРаботаСНовостямиЧерезИнтернет: %3'"),
		ПредставлениеНастройкиНовостей,
		Константы.РазрешенаРаботаСНовостями.Получить(),
		Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Получить());

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%Константы%",
		ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_Константы, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ДругиеПараметрыПрограммногоОкружения

	ВременныйТекст = НСтр("ru='Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
		|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
		|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
		|Разделение включено: %РазделениеВключено()%
		|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
		|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
		|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
		|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
		|Текущий пользователь ИБ:
		|	Имя: %ТекущийПользователь().Имя%
		|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
		|	Разделение данных:
		|		%ТекущийПользователь().РазделениеДанных%
		|'");
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));

	РезультатДанныеОПрограммномОкружении_ДругиеПараметрыПрограммногоОкружения = ВременныйТекст;

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ДругиеПараметрыПрограммногоОкружения%",
		ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ДругиеПараметрыПрограммногоОкружения, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ЗначенияПредопределенныхКатегорий

	РезультатДанныеОПрограммномОкружении_ЗначенияПредопределенныхКатегорий = СтрШаблон(
		НСтр("ru='PlatformVersion = %1
			|ProductVersion = %2
			|Product = %3
			|ВерсияПлатформы = %4
			|ВерсияПродукта = %5
			|ProductName = %6
			|ЭтотПродукт = %7
			|МетаданныеИмя = %8
			|МетаданныеВерсия = %9
			|'"),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion"), Символы.ПС),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion"), Символы.ПС),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("Product"), Символы.ПС),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ЭтотПродукт"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"));

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ЗначенияПредопределенныхКатегорий%",
		ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ЗначенияПредопределенныхКатегорий, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ПараметрыСеанса

	ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
	Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
		ПредставлениеПараметрыОкруженияБИП_Новости = ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПараметрыОкруженияБИП_Новости, "=", Символы.ПС);
	Иначе
		ПредставлениеПараметрыОкруженияБИП_Новости = СтрШаблон(НСтр("ru='Параметры окружения подсистемы новостей необрабатываемого типа %1'"), ТипЗнч(ПараметрыОкруженияБИП_Новости));
	КонецЕсли;

	РезультатДанныеОПрограммномОкружении_ПараметрыСеанса = СтрШаблон(
		НСтр("ru='Параметры окружения подсистемы новостей:
			|%1'"),
		ПредставлениеПараметрыОкруженияБИП_Новости);

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ПараметрыСеанса%",
		ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ПараметрыСеанса, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ДанныеОКонфигурацииИзМетаданных

	СистемнаяИнформация = Новый СистемнаяИнформация;

	РезультатДанныеОПрограммномОкружении_ДанныеОКонфигурацииИзМетаданных = СтрШаблон(
		НСтр("ru='Имя конфигурации: %1
			|Версия конфигурации: %2
			|Версия подсистемы БИП: %3
			|Версия платформы: %4
			|Операционная система: %5
			|Программа просмотра: %6
			|Данные компьютера: %7'"),
		Метаданные.Имя,
		Метаданные.Версия,
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
		СистемнаяИнформация.ВерсияПриложения,
		СокрЛП(СистемнаяИнформация.ТипПлатформы) + ", " + СокрЛП(СистемнаяИнформация.ВерсияОС),
		СистемнаяИнформация.ИнформацияПрограммыПросмотра,
		СокрЛП(СистемнаяИнформация.Процессор) + ", " + СистемнаяИнформация.ОперативнаяПамять);

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ДанныеОКонфигурацииИзМетаданных%",
		ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ДанныеОКонфигурацииИзМетаданных, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_РасписаниеРегламентногоЗадания

	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей);
	Если РегламентноеЗадание = Неопределено Тогда
		ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено'");
		РегламентноеЗадание_Использование = Ложь;
		ПредставлениеРегламентноеЗадание_ПоследнееЗадание = НСтр("ru='Никогда не выполнялось'");
	Иначе
		СтруктураРасписания = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(РегламентноеЗадание.Расписание);
		ПредставлениеРасписания = ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(СтруктураРасписания, "=", Символы.ПС);
		РегламентноеЗадание_Использование = РегламентноеЗадание.Использование;
		РегламентноеЗадание_ПоследнееЗадание = РегламентноеЗадание.ПоследнееЗадание;
		Если ТипЗнч(РегламентноеЗадание_ПоследнееЗадание) = ТипФоновоеЗадание Тогда
			РегламентноеЗадание_СтруктураПоследнегоЗадания = Новый Структура("Наименование, Начало, Конец, Состояние, Расположение",
				РегламентноеЗадание_ПоследнееЗадание.Наименование,
				РегламентноеЗадание_ПоследнееЗадание.Начало,
				РегламентноеЗадание_ПоследнееЗадание.Конец,
				РегламентноеЗадание_ПоследнееЗадание.Состояние,
				РегламентноеЗадание_ПоследнееЗадание.Расположение);
			Если ТипЗнч(РегламентноеЗадание_ПоследнееЗадание.ИнформацияОбОшибке) = ТипИнформацияОбОшибке Тогда
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить(
					"ПодробноеПредставлениеОшибки",
					ПодробноеПредставлениеОшибки(РегламентноеЗадание_ПоследнееЗадание.ИнформацияОбОшибке));
			Иначе
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить("ПодробноеПредставлениеОшибки", НСтр("ru='Выполнено без ошибок'"));
			КонецЕсли;
			ПредставлениеРегламентноеЗадание_ПоследнееЗадание = ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
				РегламентноеЗадание_СтруктураПоследнегоЗадания, "=", Символы.ПС);
		Иначе
			ПредставлениеРегламентноеЗадание_ПоследнееЗадание = НСтр("ru='Не выполнялось'");
		КонецЕсли;
	КонецЕсли;

	РезультатДанныеОПрограммномОкружении_РасписаниеРегламентногоЗадания = СтрШаблон(
		НСтр("ru='Расписание регламентного задания:
			|%1
			|Использование: %2
			|Последнее задание:
			|%3'"),
		ПредставлениеРасписания,
		РегламентноеЗадание.Использование,
		ПредставлениеРегламентноеЗадание_ПоследнееЗадание);

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%РасписаниеРегламентногоЗадания%",
		ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_РасписаниеРегламентногоЗадания, Символы.Таб, Истина, Ложь));

#КонецОбласти

	Результат = СтрЗаменить(Результат, "%ДанныеОПрограммномОкружении%", РезультатДанныеОПрограммномОкружении);

#КонецОбласти

#КонецОбласти

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПоискНовостей

// Выполняет полнотекстовый поиск по новостям. Возможна передача дополнительных параметров (период поиска и т.п.).
//
// Параметры:
//  СтруктураПараметровПоиска - Структура с ключами:
//    * СтрокПоиска - Строка;
//    * ПоискДатаОТ - Дата;
//    * ПоискДатаДО - Дата.
//
// Возвращаемое значение:
//  Массив.
//
Функция НайтиНовости(СтруктураПараметровПоиска) Экспорт

	Результат = Новый Массив;

	ТипДата = Тип("Дата");

	лкСтрокаПоиска = Неопределено;
	лкПоискДатаОТ  = Неопределено;
	лкПоискДатаДО  = Неопределено;
	СтруктураПараметровПоиска.Свойство("СтрокаПоиска", лкСтрокаПоиска);
	СтруктураПараметровПоиска.Свойство("ПоискДатаОТ", лкПоискДатаОТ);
	Если ТипЗнч(лкПоискДатаОТ) <> ТипДата Тогда
		лкПоискДатаОТ = '00010101';
	КонецЕсли;
	СтруктураПараметровПоиска.Свойство("ПоискДатаДО", лкПоискДатаДО);
	Если ТипЗнч(лкПоискДатаДО) <> ТипДата Тогда
		лкПоискДатаДО = '00010101';
	КонецЕсли;

	МассивНайденныхНовостей = Новый Массив;

	// Если передали УИН (Строка 32 или Строка 36), то попробовать найти новость по реквизиту УИН или guid.
	лкСтрокаПоискаУИН = "";
	Если СтрДлина(лкСтрокаПоиска) = 32 Тогда
		лкСтрокаПоискаУИН =
			Сред(лкСтрокаПоиска, 1, 8) + "-"
			+ Сред(лкСтрокаПоиска, 9, 4) + "-"
			+ Сред(лкСтрокаПоиска, 13, 4) + "-"
			+ Сред(лкСтрокаПоиска, 17, 4) + "-"
			+ Сред(лкСтрокаПоиска, 21, 12);
	ИначеЕсли СтрДлина(лкСтрокаПоиска) = 36 Тогда
		лкСтрокаПоискаУИН = лкСтрокаПоиска;
	КонецЕсли;
	Если СтрДлина(лкСтрокаПоискаУИН) = 36 Тогда
		// Поиск по реквизиту "УИННовости" справочника Новости.
		// Здесь надо выбрать все новости, без учета дат - по датам будет отбор в общем запросе, ниже.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК Новость
			|ИЗ
			|	Справочник.Новости КАК Спр
			|ГДЕ
			|	Спр.ПометкаУдаления = ЛОЖЬ
			|	И Спр.УИННовости = &УИННовости
			|";
		Запрос.УстановитьПараметр("УИННовости", лкСтрокаПоискаУИН);

		РезультатЗапроса = Запрос.Выполнить(); // НайтиНовости() по УИН
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				МассивНайденныхНовостей.Добавить(Выборка.Новость);
			КонецЦикла;
		КонецЕсли;

		// Поиск по уникальному идентификатору элемента справочника Новости.
		Попытка
			лкНовостьПоУИН = Справочники.Новости.ПолучитьСсылку(Новый УникальныйИдентификатор(лкСтрокаПоискаУИН));
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			лкНовостьПоУИН = Неопределено;
		КонецПопытки;
		Если лкНовостьПоУИН <> Неопределено Тогда
			Если ТипЗнч(лкНовостьПоУИН) = Тип("СправочникСсылка.Новости") И НЕ ПустаяСтрока(лкНовостьПоУИН.ВерсияДанных) Тогда
				МассивНайденныхНовостей.Добавить(лкНовостьПоУИН);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Полнотекстовый поиск можно осуществлять, если он включен в настройках.
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		Если НЕ ПустаяСтрока(лкСтрокаПоиска) Тогда
			СписокДанных = ПолнотекстовыйПоиск.СоздатьСписок(); // Создать без параметров
			МассивОбластейПоиска = Новый Массив;
			МассивОбластейПоиска.Добавить(Метаданные.Справочники.Новости);
			СписокДанных.ОбластьПоиска = МассивОбластейПоиска;
			СписокДанных.ПолучатьОписание = Ложь; //По-умолчанию = Истина. Отключать для быстрого поиска и дальнейшей обработки НЕ визуально
			СписокДанных.РазмерПорции = 1000;
			СписокДанных.СтрокаПоиска = СокрЛП(лкСтрокаПоиска);
			Попытка
				СписокДанных.ПерваяЧасть();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = НСтр("ru='ОбработкаНовостей.НайтиНовости: произошла ошибка поиска новостей, строка поиска [%СтрокаПоиска%] по причине: %ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПоиска%", лкСтрокаПоиска);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Разное'"), // ИмяСобытия
					НСтр("ru='Новости. Разное. Ошибка полнотекстового поиска'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				Возврат Результат;
			КонецПопытки;
			Если СписокДанных.ПолноеКоличество() > 0 Тогда // Есть данные
				ЕстьПорцияДанных = Истина;
				Пока ЕстьПорцияДанных Цикл
					Для каждого НайденныйЭлемент Из СписокДанных Цикл
						// Проверка дат будет осуществлена позже, запросом.
						МассивНайденныхНовостей.Добавить(НайденныйЭлемент.Значение);
					КонецЦикла;
					Попытка
						СписокДанных.СледующаяЧасть();
						ЕстьПорцияДанных = Истина;
					Исключение
						ЕстьПорцияДанных = Ложь;
					КонецПопытки;
				КонецЦикла;
			Иначе
				// Нет данных - не выводить никаких сообщений, просто пометить все новости как невидимые.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Вне зависимости от того, включен ли полнотекстовый поиск или нет, попробовать найти новости по текстовым полям.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|	И (
		|		Спр.Ссылка В (&МассивНайденныхНовостей)
		|		ИЛИ Спр.Наименование ПОДОБНО ""%#СтрокаПоиска#%""
		|		ИЛИ Спр.Подзаголовок ПОДОБНО ""%#СтрокаПоиска#%""
		|		ИЛИ Спр.ТекстНовости ПОДОБНО ""%#СтрокаПоиска#%""
		|	)
		|	И &МетаУсловиеДатаОТ
		|	И &МетаУсловиеДатаДО
		|";
	Запрос.УстановитьПараметр("МассивНайденныхНовостей", МассивНайденныхНовостей);

	// Проверка по датам.
	// Проверка: Дата начала.
	Если (ТипЗнч(лкПоискДатаОТ) = ТипДата)
			И (лкПоискДатаОТ <> '00010101') Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаОТ", "Спр.ДатаПубликации >= &ПоискДатаОТ");
		Запрос.УстановитьПараметр("ПоискДатаОТ", лкПоискДатаОТ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаОТ", "ИСТИНА");
	КонецЕсли;
	// Проверка: Дата окончания.
	Если (ТипЗнч(лкПоискДатаДО) = ТипДата)
			И (лкПоискДатаДО <> '00010101') Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаДО", "Спр.ДатаПубликации <= &ПоискДатаДО");
		Запрос.УстановитьПараметр("ПоискДатаДО", лкПоискДатаДО);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаДО", "ИСТИНА");
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СтрокаПоиска#", лкСтрокаПоиска);

	РезультатЗапроса = Запрос.Выполнить(); // НайтиНовости() по текстовым полям
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Добавление новости или получение объекта новости по уникальному идентификатору.
//
// Параметры:
//  ЛентаНовостей         - СправочникСсылка.ЛентыНовостей;
//  УИННовости            - Строка - уникальный идентификатор новостей;
//  ДатаПубликации        - Дата - дата публикации;
//  ОчищатьТабличныеЧасти - Булево - очищать табличные части. Как правило объект "Новости" получается для его перезаполнения.
//
// Возвращаемое значение:
//  СправочникОбъект.Новости - объект новой или существующей новости.
//
Функция ПолучитьОбъектНовости(НовостьСсылка, ЛентаНовостей, УИННовости, ДатаПубликации, ОчищатьТабличныеЧасти = Истина) Экспорт

	Если НовостьСсылка.Пустая() Тогда
		Объект = Справочники.Новости.СоздатьЭлемент();
	Иначе
		Объект = НовостьСсылка.ПолучитьОбъект();
	КонецЕсли;

	Объект.ЛентаНовостей  = ЛентаНовостей;
	Объект.УИННовости     = СокрЛП(УИННовости);
	Объект.ДатаПубликации = ДатаПубликации;

	Если ОчищатьТабличныеЧасти = Истина Тогда
		Объект.Действия.Очистить();
		Объект.ПараметрыДействий.Очистить();
		Объект.ПривязкаКМетаданным.Очистить();
		Объект.БинарныеДанные.Очистить();
	КонецЕсли;

	Возврат Объект;

КонецФункции

// Получение структуры новости по уникальному идентификатору и ленте новостей.
//
// Параметры:
//  ЛентаНовостей  - СправочникСсылка.ЛентыНовостей;
//  УИННовости     - Строка - уникальный идентификатор новостей.
//
// Возвращаемое значение:
//  Структура с ключами:
//    * Ссылка          - СправочникСсылка.Новости;
//    * УИН_ИБ          - Строка - Уникальный идентификатор ссылки на новость в ИБ;
//    * ДатаПубликации  - Дата;
//    * ПометкаУдаления - Булево.
//
Функция ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости) Экспорт

	// Выбор из справочника Новостей.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка          КАК НовостьСсылка,
		|	Спр.ДатаПубликации  КАК ДатаПубликации,
		|	Спр.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ЛентаНовостей = &ЛентаНовостей
		|	И Спр.УИННовости = &УИННовости
		|";
	Запрос.УстановитьПараметр("ЛентаНовостей", ЛентаНовостей);
	Запрос.УстановитьПараметр("УИННовости", СокрЛП(УИННовости));

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйУникальныйИдентификатор = СокрЛП(Новый УникальныйИдентификатор);
		Объект = Новый Структура("УИН_ИБ, Ссылка, ДатаПубликации, ПометкаУдаления",
			НовыйУникальныйИдентификатор,
			Справочники.Новости.ПустаяСсылка(),
			'00010101',
			Ложь);
	Иначе
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Если Выборка.Следующий() Тогда
			Объект = Новый Структура("УИН_ИБ, Ссылка, ДатаПубликации, ПометкаУдаления",
				СокрЛП(Выборка.НовостьСсылка.УникальныйИдентификатор()),
				Выборка.НовостьСсылка,
				Выборка.ДатаПубликации,
				Выборка.ПометкаУдаления);
		Иначе
			НовыйУникальныйИдентификатор = СокрЛП(Новый УникальныйИдентификатор);
			Объект = Новый Структура("УИН_ИБ, Ссылка, ДатаПубликации, ПометкаУдаления",
				НовыйУникальныйИдентификатор,
				Справочники.Новости.ПустаяСсылка(),
				'00010101',
				Ложь);
		КонецЕсли;
	КонецЕсли;

	Возврат Объект;

КонецФункции

// Функция возвращает таблицу новостей для определенного объекта метаданных, имени формы и события.
// Настроенные пользователем отборы НЕ накладываются.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  СписокЛентНовостей - Список значений, Массив или Неопределено - в каких лентах новостей искать новость;
//  ИмяМетаданных      - Строка - имя метаданных, обязательная часть идентификатора новости;
//  ИмяФормы           - Строка или Неопределено - имя формы, необязательная часть идентификатора новости;
//  ИмяСобытия         - Строка или Неопределено - имя события, необязательная часть идентификатора новости;
//  Вариант            - Строка:
//                       - если = "Для форм, все поля", то выводить подробную таблицу, с событиями и именами форм - в этом случае новости
//                           будут встречаться по два раза. Этот вариант нужен для заполнения реквизита Новости справочников
//                           и документов (чтобы при возникновении события можно было показать новость).
//                       - если = "Для форм, простой", то выводить таблицу с именами форм, но без событий (удобно для получения уникального списка новостей).
//                       - если = "Для формы контекстных новостей", то выводить сжатую таблицу с уникальностью по новостям.
//                           Этот вариант нужен для формы контекстных новостей.
//
// Возвращаемое значение:
//  Таблица значений с колонками:
//    * НомерСтрокиНовости      - Число - для реализации нажатия в подменю формы;
//    * ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//    * Новость                 - СправочникСсылка.Новости;
//    * НовостьНаименование     - Строка (100) - заголовок новости;
//    * НовостьПодзаголовок     - Строка (100) - подзаголовок новости;
//    * УИННовости              - Строка (255) -;
//    * ДатаПубликации          - Дата;
//    * Важность                - Число (1,0) - рассчитанная на текущую дату контекстная важность (с учетом даты сброса контекстной важности);
//    * Актуальность            - Булево - рассчитанная на текущую дату актуальность (с учетом даты завершения новости);
//    * Метаданные              - Строка (50);
//    * Форма                   - Строка (30);
//    * Событие                 - Строка (30) // Для варианта "Для форм, простой" - пустая строка;
//    * ПоказыватьВФормеОбъекта - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * ЭтоПостояннаяНовость    - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * Прочтена                - Булево;
//    * ОповещениеВключено      - Булево // Ложь, если ДатаНачалаОповещения > ТекущаяУниверсальнаяДата();
//    * ДатаНачалаОповещения    - Дата // Для варианта "Для форм, простой" - всегда пустая дата (01.01.0001).
//
Функция ПолучитьТаблицуКонтекстныхНовостей(
			СписокЛентНовостей = Неопределено,
			ИмяМетаданных,
			ИмяФормы = Неопределено,
			ИмяСобытия = Неопределено,
			Вариант = "Для форм, все поля") Экспорт

	ТипМассив         = Тип("Массив");
	ТипСписокЗначений = Тип("СписокЗначений");

	ТекущаяУниверсальнаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей",
		"");

	Таблица = Новый ТаблицаЗначений;

	// Пользователь может отключить в своих настройках все ленты новостей.
	// В таком случае можно не тратить время на выполнение запроса.
	Если ((ТипЗнч(СписокЛентНовостей) = ТипМассив) И (СписокЛентНовостей.Количество() <= 0))
			ИЛИ ((ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений) И (СписокЛентНовостей.Количество() <= 0)) Тогда
		Возврат Таблица;
	КонецЕсли;

	Если Вариант = "Для форм, все поля" Тогда
		// В запросе не учитываются отборы, настроенные администратором.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	0                                                        КАК НомерСтрокиНовости,
			|	Рег.Новость.ЛентаНовостей                                КАК ЛентаНовостей,
			|	Рег.Новость                                              КАК Новость,
			|	Рег.Новость.Наименование                                 КАК НовостьНаименование,
			|	Рег.Новость.Подзаголовок                                 КАК НовостьПодзаголовок,
			|	Рег.Новость.УИННовости                                   КАК УИННовости,
			|	Рег.Новость.ДатаПубликации                               КАК ДатаПубликации,
			|	""                                                                                                    "" КАК НавигационнаяСсылка,
			|	Рег.Важность                                             КАК Важность,
			|	Рег.Актуальность                                         КАК Актуальность,
			|	Рег.Метаданные                                           КАК Метаданные,
			|	Рег.Форма                                                КАК Форма,
			|	Рег.Событие                                              КАК Событие,
			|	Рег.ПоказыватьВФормеОбъекта                              КАК ПоказыватьВФормеОбъекта,
			|	Рег.ЭтоПостояннаяНовость                                 КАК ЭтоПостояннаяНовость,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)                    КАК Прочтена,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) <= &ТекущаяУниверсальнаяДата ТОГДА
			|			ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ                                                    КАК ОповещениеВключено,
			|	ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения
			|ИЗ
			|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияНовостей КАК РегСостояния
			|	ПО
			|		РегСостояния.Пользователь = &ТекущийПользователь
			|		И РегСостояния.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегРассчитанныеОтборы
			|	ПО
			|		РегРассчитанныеОтборы.Новость = Рег.Новость
			|
			|ГДЕ
			|	(&МетаУсловиеМетаданных)
			|	И ( // Не просроченные новости
			|		Рег.Актуальность = ИСТИНА
			|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
			|	)
			|	И Рег.Новость.ПометкаУдаления = ЛОЖЬ
			|	И ЕСТЬNULL(РегРассчитанныеОтборы.РезультатОтбора, ИСТИНА) = ИСТИНА // Отбор по версии платформы, версии конфигурации
			|	И (&МетаУсловиеСписокЛентНовостей)
			|	И Рег.Новость.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Вне зависимости от переданного списка лент новостей, лента новостей не должна быть помечена на удаление
			|УПОРЯДОЧИТЬ ПО
			|	Рег.Новость.ДатаПубликации УБЫВ
			|";
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь()); // В модели сервиса запускается только с включенным разделителем
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
		// Условие по метаданным (Метаданные + Форма(если есть) + Событие (если есть)).
		УсловиеМетаданных = "(Рег.Метаданные = &ИмяМетаданных)";
		Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
		Если ИмяФормы <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Рег.Форма = &ИмяФормы)";
			Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		КонецЕсли;
		Если ИмяСобытия <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Спр.Событие = &ИмяСобытия)";
			Запрос.УстановитьПараметр("ИмяСобытия", ИмяСобытия);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеМетаданных", УсловиеМетаданных);
		// Условие по лентам новостей.
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей.ВыгрузитьЗначения());
		Иначе // Если СписокЛентНовостей = Неопределено или переданы массив или список значений нулевого размера.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "ИСТИНА");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // ПолучитьТаблицуКонтекстныхНовостей(... "Для форм, все поля")

		Если НЕ Результат.Пустой() Тогда
			Таблица = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			С = 0;
			Для Каждого ТекущаяНовость Из Таблица Цикл
				ТекущаяНовость.НомерСтрокиНовости = С;
				ТекущаяНовость.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущаяНовость.Новость);
				С = С + 1;
			КонецЦикла;
		Иначе
			Таблица = Новый ТаблицаЗначений;
		КонецЕсли;

	ИначеЕсли Вариант = "Для форм, простой" Тогда
		// В запросе не учитываются отборы, настроенные администратором.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	0                                                 КАК НомерСтрокиНовости,
			|	Рег.Новость.ЛентаНовостей                         КАК ЛентаНовостей,
			|	Рег.Новость                                       КАК Новость,
			|	Рег.Новость.Наименование                          КАК НовостьНаименование,
			|	Рег.Новость.Подзаголовок                          КАК НовостьПодзаголовок,
			|	Рег.Новость.УИННовости                            КАК УИННовости,
			|	Рег.Новость.ДатаПубликации                        КАК ДатаПубликации,
			|	МАКСИМУМ(Рег.Важность)                            КАК Важность,
			|	МАКСИМУМ(Рег.Актуальность)                        КАК Актуальность,
			|	Рег.Метаданные                                    КАК Метаданные,
			|	Рег.Форма                                         КАК Форма,
			|	""""                                              КАК Событие,
			|	ЛОЖЬ                                              КАК ПоказыватьВФормеОбъекта,
			|	ЛОЖЬ                                              КАК ЭтоПостояннаяНовость,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)             КАК Прочтена,
			|	ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА) КАК ОповещениеВключено,
			|	&ПустаяДата                                       КАК ДатаНачалаОповещения
			|ИЗ
			|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияНовостей КАК РегСостояния
			|	ПО
			|		РегСостояния.Новость = Рег.Новость
			|		И РегСостояния.Пользователь = &ТекущийПользователь
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегРассчитанныеОтборы
			|	ПО
			|		РегРассчитанныеОтборы.Новость = Рег.Новость
			|
			|ГДЕ
			|	(&МетаУсловиеМетаданных)
			|	И
			|	( // Не просроченные новости
			|		Рег.Актуальность = ИСТИНА
			|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
			|	)
			|	И Рег.Новость.ПометкаУдаления = ЛОЖЬ
			|	И ЕСТЬNULL(РегРассчитанныеОтборы.РезультатОтбора, ИСТИНА) = ИСТИНА // Отбор по версии платформы, версии конфигурации
			|	И (&МетаУсловиеСписокЛентНовостей)
			|	И Рег.Новость.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Вне зависимости от переданного списка лент новостей, лента новостей не должна быть помечена на удаление
			|
			|СГРУППИРОВАТЬ ПО
			|	Рег.Новость.ЛентаНовостей,
			|	Рег.Новость,
			|	Рег.Новость.Наименование,
			|	Рег.Новость.Подзаголовок,
			|	Рег.Новость.УИННовости,
			|	Рег.Новость.ДатаПубликации,
			|	Рег.Метаданные,
			|	Рег.Форма,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ),
			|	ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Рег.Новость.ДатаПубликации УБЫВ
			|";
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь()); // В модели сервиса запускается только с включенным разделителем.
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
		// Условие по метаданным.
		УсловиеМетаданных = "(Рег.Метаданные = &ИмяМетаданных)";
		Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
		Если ИмяФормы <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Рег.Форма = &ИмяФормы)";
			Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеМетаданных", УсловиеМетаданных);
		// Условие по лентам новостей.
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей.ВыгрузитьЗначения());
		Иначе // Если СписокЛентНовостей = Неопределено или переданы массив или список значений нулевого размера.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "ИСТИНА");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // ПолучитьТаблицуКонтекстныхНовостей(... "Для форм, простой")

		Если НЕ Результат.Пустой() Тогда
			Таблица = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			С = 0;
			Для Каждого ТекущаяНовость Из Таблица Цикл
				ТекущаяНовость.НомерСтрокиНовости = С;
				С = С + 1;
			КонецЦикла;
		Иначе
			Таблица = Новый ТаблицаЗначений;
		КонецЕсли;

	ИначеЕсли Вариант = "Для формы контекстных новостей" Тогда
		// В запросе не учитываются отборы, настроенные администратором.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|// Набор полей должен быть таким, чтобы исключить задвоение новостей.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	0                                                        КАК НомерСтрокиНовости,
			|	Рег.Новость.ЛентаНовостей                                КАК ЛентаНовостей,
			|	Рег.Новость                                              КАК Новость,
			|	Рег.Новость.Наименование                                 КАК НовостьНаименование,
			|	Рег.Новость.Подзаголовок                                 КАК НовостьПодзаголовок,
			|	Рег.Новость.УИННовости                                   КАК УИННовости,
			|	Рег.Новость.ДатаПубликации                               КАК ДатаПубликации,
			|	Рег.Метаданные                                           КАК Метаданные,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)                    КАК Прочтена,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) <= &ТекущаяУниверсальнаяДата ТОГДА
			|			ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ                                                    КАК ОповещениеВключено,
			|	ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения
			|ИЗ
			|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияНовостей КАК РегСостояния
			|	ПО
			|		РегСостояния.Новость = Рег.Новость
			|		И РегСостояния.Пользователь = &ТекущийПользователь
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегРассчитанныеОтборы
			|	ПО
			|		РегРассчитанныеОтборы.Новость = Рег.Новость
			|ГДЕ
			|	(&МетаУсловиеМетаданных)
			|	И ( // Не просроченные новости.
			|		Рег.Актуальность = ИСТИНА
			|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
			|	)
			|	И Рег.Новость.ПометкаУдаления = ЛОЖЬ
			|	И ЕСТЬNULL(РегРассчитанныеОтборы.РезультатОтбора, ИСТИНА) = ИСТИНА // Отбор по версии платформы, версии конфигурации
			|	И (&МетаУсловиеСписокЛентНовостей)
			|	И Рег.Новость.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Вне зависимости от переданного списка лент новостей, лента новостей не должна быть помечена на удаление
			|УПОРЯДОЧИТЬ ПО
			|	Рег.Новость.ДатаПубликации УБЫВ
			|";
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь()); // В модели сервиса запускается только с включенным разделителем.
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
		// Условие по метаданным (Метаданные + Форма(если есть)).
		УсловиеМетаданных = "(Рег.Метаданные = &ИмяМетаданных)";
		Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
		Если ИмяФормы <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Рег.Форма = &ИмяФормы)";
			Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеМетаданных", УсловиеМетаданных);
		// Условие по лентам новостей.
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей.ВыгрузитьЗначения());
		Иначе // Если СписокЛентНовостей = Неопределено или переданы массив или список значений нулевого размера.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "ИСТИНА");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // ПолучитьТаблицуКонтекстныхНовостей(... "Для формы контекстных новостей")

		Если НЕ Результат.Пустой() Тогда
			Таблица = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			С = 0;
			Для Каждого ТекущаяНовость Из Таблица Цикл
				ТекущаяНовость.НомерСтрокиНовости = С;
				С = С + 1;
			КонецЦикла;
		Иначе
			Таблица = Новый ТаблицаЗначений;
		КонецЕсли;

	КонецЕсли;

	Возврат Таблица;

КонецФункции

// Функция возвращает структуру новости из массива структур контекстных новостей.
// Массив структур готовится с помощью ОбщегоНазначения.ТаблицаЗначенийВМассив(ПолучитьТаблицуКонтекстныхНовостей(...)).
//
// Параметры:
//  АдресМассиваНовостей - Строка - Адрес временного хранилища;
//  НомерСтрокиНовости  - Число  - идентификатор новости, которую необходимо найти по значению ключа НомерСтрокиНовости.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//    * НомерСтрокиНовости      - Число - для реализации нажатия в подменю формы;
//    * ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//    * Новость                 - СправочникСсылка.Новости;
//    * НовостьНаименование     - Строка (100) - заголовок новости;
//    * НовостьПодзаголовок     - Строка (100) - подзаголовок новости;
//    * УИННовости              - Строка (255) -;
//    * ДатаПубликации          - Дата;
//    * Важность                - Число (1,0) - рассчитанная на текущую дату контекстная важность (с учетом даты сброса контекстной важности);
//    * Актуальность            - Булево - рассчитанная на текущую дату актуальность (с учетом даты завершения новости);
//    * Метаданные              - Строка (50);
//    * Форма                   - Строка (30);
//    * Событие                 - Строка (30) // Для варианта "Для форм, простой" - пустая строка;
//    * ПоказыватьВФормеОбъекта - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * ЭтоПостояннаяНовость    - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * Прочтена                - Булево;
//    * ОповещениеВключено      - Булево;
//    * ДатаНачалаОповещения    - Дата // Для варианта "Для форм, простой" - всегда пустая дата (01.01.0001).
//
Функция НайтиКонтекстнуюНовостьВМассиве(АдресМассиваНовостей, НомерСтрокиНовости) Экспорт

	ТипМассив = Тип("Массив");

	Попытка
		МассивСтруктурНовостей = ПолучитьИзВременногоХранилища(АдресМассиваНовостей);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	НайденнаяНовость = Неопределено;

	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
		Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
			Если ТекущаяНовость.НомерСтрокиНовости = НомерСтрокиНовости Тогда
				НайденнаяНовость = ТекущаяНовость;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат НайденнаяНовость;

КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Процедура выполняет все обновления новостей:
//   1. Получение и обработка новостей с серверов новостных центров (ежеминутно, каждые 15 минут, каждый час, ежедневно);
//   2. Обновление классификаторов (ежедневно);
//   3. Автоудаление новостей (ежедневно);
//   4. Обновление периодических свойств (важность, актуальность) (каждые 30 минут);
//   5. Обновление привязок к метаданным (+ важность) (каждые 30 минут);
//   6. Проверка версии платформы (каждые 6 часов).
//
// Параметры:
//  Нет.
//
Процедура ВсеОбновленияНовостей() Экспорт

	// Если идет обновление конфигурации, то все регламентные задания блокируются.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();

	УстановитьПривилегированныйРежим(Истина);

	// Запись в журнал регистрации.
	ЛогШаговВыполнения = Новый Массив;
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало выполнения регламентного задания
		|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
		|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
		|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
		|Разделение включено: %РазделениеВключено()%
		|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
		|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
		|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
		|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
		|Текущий пользователь ИБ:
		|	Имя: %ТекущийПользователь().Имя%
		|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
		|	Разделение данных:
		|		%ТекущийПользователь().РазделениеДанных%
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Все обновления новостей. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ЕстьОшибки = Ложь;

	Если МонопольныйРежим() Тогда

		// Если база работает в монопольном режиме (например, запущено фоновое задание, которое включило монопольный режим
		//  и выгружает данные из области данных для последующей загрузки в модели сервиса),
		//  то будут ошибки при всех попытках записи данных в базу.
		// Поэтому в монопольном режиме не следует выполнять никаких обновлений в подсистеме новостей.
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Все обновления новостей. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			НСтр("ru='Принудительное завершение выполнения регламентного задания: информационная база работает в монопольном режиме.'"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЕстьОшибки = Истина;

	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		// Даты последних обновлений хранятся в регистре сведений ВсеОбновленияНовостей.
		// Измерение ВидОбновления может содержать следующие значения:
		// 1. Получение и обработка новостей из лент новостей (с обязательным заполнением измерения "ЛентаНовостей");
		// 2. Обновление классификаторов;
		// 3. Автоудаление новостей;
		// 4. Обновление периодических свойств (важность, актуальность);
		// 5. Обновление привязок к метаданным (+ важность);
		// 6. Проверка версии платформы.

		// Все даты хранятся "по гринвичу".
		ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда

#Область ВсеОбновленияНовостей_ЗагрузкаНовостей

			// 1. Получение и обработка новостей из лент новостей (с обязательным заполнением измерения "ЛентаНовостей").
			ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
			РазрешенаРаботаСНовостямиЧерезИнтернет = ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();

			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Ссылка                                          КАК ЛентаНовостей,
				|	Спр.ЧастотаОбновления                               КАК ЧастотаОбновления,
				|	ЕСТЬNULL(Рег.ДатаСледующегоОбновления, &ПустаяДата) КАК ДатаСледующегоОбновления
				|ИЗ
				|	Справочник.ЛентыНовостей КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ВсеОбновленияНовостей КАК Рег
				|	ПО
				|		Рег.ВидОбновления = ""Получение новостей""
				|		И Рег.ЛентаНовостей = Спр.Ссылка
				|ГДЕ
				|	Спр.ПометкаУдаления = ЛОЖЬ
				|	И Спр.ЧастотаОбновления > 0
				|	// Если установлен режим работы только с локальными новостями, то
				|	//  - не загружать никакие классификаторы;
				|	//  - не обрабатывать ленты новостей с протоколами, отличными от file.
				|	И
				|	(
				|		&РазрешенаРаботаСНовостямиЧерезИнтернет = ИСТИНА
				|		ИЛИ
				|		Спр.Протокол = ""file""
				|	)
				|";
			Запрос.УстановитьПараметр("РазрешенаРаботаСНовостямиЧерезИнтернет", РазрешенаРаботаСНовостямиЧерезИнтернет);
			Запрос.УстановитьПараметр("ПустаяДата", '00010101');

			РезультатЗапроса = Запрос.Выполнить(); // ВсеОбновленияНовостей()

			МассивЛентНовостей = Новый Массив;
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					Если Выборка.ЧастотаОбновления = 1 Тогда // Ежедневно
						Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
							МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
						КонецЕсли;
					ИначеЕсли Выборка.ЧастотаОбновления = 2 Тогда // Ежечасно
						Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
							МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
						КонецЕсли;
					ИначеЕсли Выборка.ЧастотаОбновления = 3 Тогда // Каждые 15 минут
						Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
							МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
						КонецЕсли;
					ИначеЕсли Выборка.ЧастотаОбновления = 4 Тогда // Ежеминутно
						Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
							МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если МассивЛентНовостей.Количество() > 0 Тогда

				// Запись в журнал регистрации
				Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = НСтр("ru='Получение и обработка новостей для лент новостей: %ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(МассивЛентНовостей)%
					|Время начала (мс): %ТНачало%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(МассивЛентНовостей)%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(МассивЛентНовостей, ", "));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Получение и обработка новостей по лентам новостей. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				ПолучитьИОбработатьНовостиПоЛентамНовостей(МассивЛентНовостей);

				// Запись в журнал регистрации
				Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Т1Длительность = Т1Конец - Т1Начало;
				ТекстСообщения = НСтр("ru='Завершение получения и обработки новостей для лент новостей
					|Время начала (мс): %ТНачало%
					|Время окончания (мс): %ТКонец%
					|Длительность (мс): %ТДлительность%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Получение и обработка новостей по лентам новостей. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					Т1Длительность, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			Иначе
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Получение и обработка новостей по лентам новостей. Отсутствие лент новостей для обработки'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					НСтр("ru='Нет лент новостей для регламентного обновления'"), // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецЕсли;
			ЛогШаговВыполнения.Добавить(
				Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
					НСтр("ru='1. Получение и обработка новостей из лент новостей (с обязательным заполнением измерения ЛентаНовостей)'"),
					ТШаг,
					ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВсеОбновленияНовостей_ОбновлениеКлассификаторов

			// 2. Обновление классификаторов.
			ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Если РазрешенаРаботаСНовостямиЧерезИнтернет = Истина Тогда
				Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = "Обновление классификаторов"; // Идентификатор.
				Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
				Запись.Прочитать(); // Только чтение, без последующей записи.
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;
				Запись = Неопределено;

				// Обновлять классификаторы 1 раз в день.
				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда

					// Запись в журнал регистрации
					Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
					ТекстСообщения = НСтр("ru='Обновление классификаторов через интернет, начало
						|Время начала (мс): %ТНачало%
						|'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
					ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
						НСтр("ru='Новости. Все обновления новостей. Обновление классификаторов. Начало'"), // ИдентификаторШага
						УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
						Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

					ОбновитьСтандартныеСпискиДляНовостей_Ежедневно();

					// Запись в журнал регистрации
					Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
					Т1Длительность = Т1Конец - Т1Начало;
					ТекстСообщения = НСтр("ru='Обновление классификаторов через интернет, завершение
						|Время начала (мс): %ТНачало%
						|Время окончания (мс): %ТКонец%
						|Длительность (мс): %ТДлительность%
						|'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
					ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
						НСтр("ru='Новости. Все обновления новостей. Обновление классификаторов. Конец'"), // ИдентификаторШага
						УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
						Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
						Т1Длительность, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				КонецЕсли;
			Иначе
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Обновление классификаторов. Отключена работа через интернет'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					НСтр("ru='Обновление классификаторов через интернет отключено'"), // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецЕсли;
			ЛогШаговВыполнения.Добавить(
				Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
					НСтр("ru='2. Обновление классификаторов'"),
					ТШаг,
					ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВсеОбновленияНовостей_АвтоудалениеНовостей

			// 3. Автоудаление новостей.
			ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = "Автоудаление новостей";
			Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
			Запись.Прочитать(); // Только чтение, без последующей записи.
			Если Запись.Выбран() Тогда
				ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
			Иначе
				ДатаСледующегоОбновления = '00010101';
			КонецЕсли;
			Запись = Неопределено;

			// Автоудалять новости 1 раз в день.
			Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда

				// Запись в журнал регистрации
				Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = НСтр("ru='Автоудаление новостей, начало
					|Время начала (мс): %ТНачало%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Автоудаление новостей. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				РезультатВыполнения = "";
				УдалитьНовости_Ежедневно(РезультатВыполнения);

				// Запись в журнал регистрации
				Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Т1Длительность = Т1Конец - Т1Начало;
				ТекстСообщения = НСтр("ru='Автоудаление новостей, завершение.
					|Результат выполнения:
					|%РезультатВыполнения%
					|Время начала (мс): %ТНачало%
					|Время окончания (мс): %ТКонец%
					|Длительность (мс): %ТДлительность%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Автоудаление новостей. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					Т1Длительность, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			КонецЕсли;
			ЛогШаговВыполнения.Добавить(
				Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
					НСтр("ru='3. Автоудаление новостей'"),
					ТШаг,
					ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВсеОбновленияНовостей_ОбновлениеПериодическихСвойств

			// 4. Обновление периодических свойств (важность, актуальность).
			ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = "Обновление периодических свойств";
			Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
			Запись.Прочитать(); // Только чтение, без последующей записи.
			Если Запись.Выбран() Тогда
				ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
			Иначе
				ДатаСледующегоОбновления = '00010101';
			КонецЕсли;
			Запись = Неопределено;

			// Обновление периодических свойств каждые 30 минут (а также после получения новостей).
			Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда

				// Запись в журнал регистрации
				Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = НСтр("ru='Обновление периодических свойств, начало
					|Время начала (мс): %ТНачало%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Обновление периодических свойств. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				РезультатВыполнения = "";
				ОбновлениеПериодическихСвойствНовостей(РезультатВыполнения);

				// Запись в журнал регистрации
				Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Т1Длительность = Т1Конец - Т1Начало;
				ТекстСообщения = НСтр("ru='Обновление периодических свойств, завершение.
					|Результат выполнения:
					|%РезультатВыполнения%
					|Время начала (мс): %ТНачало%
					|Время окончания (мс): %ТКонец%
					|Длительность (мс): %ТДлительность%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Обновление периодических свойств. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					Т1Длительность, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			КонецЕсли;
			ЛогШаговВыполнения.Добавить(
				Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
					НСтр("ru='4. Обновление периодических свойств (важность, актуальность)'"),
					ТШаг,
					ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВсеОбновленияНовостей_ОбновлениеПривязокКМетаданным

			// 5. Обновление привязок к метаданным (+ важность).
			ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = "Обновление привязок к метаданным";
			Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
			Запись.Прочитать(); // Только чтение, без последующей записи.
			Если Запись.Выбран() Тогда
				ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
			Иначе
				ДатаСледующегоОбновления = '00010101';
			КонецЕсли;
			Запись = Неопределено;

			// Обновление привязок к метаданным каждые 30 минут (а также после получения новостей).
			Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда

				// Запись в журнал регистрации
				Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = НСтр("ru='Обновление привязок к метаданным, начало
					|Время начала (мс): %ТНачало%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Обновление привязок к метаданным. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				РезультатВыполнения = "";
				ОбновлениеПривязокКМетаданным(РезультатВыполнения);

				// Запись в журнал регистрации
				Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Т1Длительность = Т1Конец - Т1Начало;
				ТекстСообщения = НСтр("ru='Обновление привязок к метаданным, завершение.
					|Результат выполнения:
					|%РезультатВыполнения%
					|Время начала (мс): %ТНачало%
					|Время окончания (мс): %ТКонец%
					|Длительность (мс): %ТДлительность%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Обновление привязок к метаданным. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			КонецЕсли;
			ЛогШаговВыполнения.Добавить(
				Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
					НСтр("ru='5. Обновление привязок к метаданным (+ важность)'"),
					ТШаг,
					ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВсеОбновленияНовостей_ПроверкаВерсииПлатформы

			// 6. Проверка версии платформы.
			ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = "Проверка версии платформы";
			Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
			Запись.Прочитать(); // Только чтение, без последующей записи.
			Если Запись.Выбран() Тогда
				ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
			Иначе
				ДатаСледующегоОбновления = '00010101';
			КонецЕсли;
			Запись = Неопределено;

			// Проверка версии платформы каждые 6 часов (а также при старте клиентского приложения).
			Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда

				// Запись в журнал регистрации
				Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = НСтр("ru='Проверка версии платформы, начало
					|Время начала (мс): %ТНачало%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Проверка версии платформы. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				РезультатВыполнения = "";
				ПроверитьИзменениеВерсииПлатформы(РезультатВыполнения);

				// Запись в журнал регистрации
				Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Т1Длительность = Т1Конец - Т1Начало;
				ТекстСообщения = НСтр("ru='Проверка версии платформы, завершение.
					|Результат выполнения:
					|%РезультатВыполнения%
					|Время начала (мс): %ТНачало%
					|Время окончания (мс): %ТКонец%
					|Длительность (мс): %ТДлительность%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Все обновления новостей. Проверка версии платформы. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					Т1Длительность, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			КонецЕсли;
			ЛогШаговВыполнения.Добавить(
				Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
					НСтр("ru='6. Проверка версии платформы'"),
					ТШаг,
					ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

		КонецЕсли;

	КонецЕсли;

	// Запись в журнал регистрации
	РезультатПоШагам = "";
	РезультатШага = "";
	ШаблонРезультатаШага = НСтр("ru='Шаг: %Шаг%
		|	Время начала (мс): %ТНачало%
		|	Время окончания (мс): %ТКонец%
		|	Длительность (мс): %ТДлительность%
		|'");
	Для Каждого ТекущийШаг Из ЛогШаговВыполнения Цикл
		РезультатШага = ШаблонРезультатаШага;
		РезультатШага = СтрЗаменить(РезультатШага, "%Шаг%", ТекущийШаг.Шаг);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТНачало%", ТекущийШаг.ВремяНачала);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТКонец%", ТекущийШаг.ВремяОкончания);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТДлительность%", (ТекущийШаг.ВремяОкончания - ТекущийШаг.ВремяНачала));
		РезультатПоШагам = РезультатПоШагам
			+ РезультатШага + Символы.ПС;
	КонецЦикла;
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Завершение выполнения регламентного задания
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|
		|По шагам:
		|%РезультатПоШагам%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатПоШагам%", РезультатПоШагам);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Все обновления новостей. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура запускает удаление новостей (неактуальных и актуальных).
//
// Параметры:
//  РезультатВыполнения - Строка - в эту переменную вернется текстовое описание результата выполнения.
//
Процедура УдалитьНовости_Ежедневно(РезультатВыполнения = "") Экспорт

	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
		ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

		ТекстСообщения = НСтр("ru='Выполнение регламентного задания
			|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
			|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
			|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
			|Разделение включено: %РазделениеВключено()%
			|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
			|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
			|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
			|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
			|Текущий пользователь ИБ:
			|	Имя: %ТекущийПользователь().Имя%
			|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
			|	Разделение данных:
			|		%ТекущийПользователь().РазделениеДанных%
			|'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. УдалитьНовости_Ежедневно. Начало удаления'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// 1. Подготовить список новостей и список вспомогательных данных (регистры сведений) для удаления.
		// В следующих регистрах сведений Новость установлена как "Ведущее измерение", а значит запись удалится автоматически:
		// - РегистрСведений.КатегорииНовостейИнтервалыВерсий;
		// - РегистрСведений.КатегорииНовостейПростые;
		// - РегистрСведений.РассчитанныеОтборыПоНовостям_Общие;
		// - РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские;
		// - РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся;
		// - РегистрСведений.СостоянияНовостей.
		// В следующих регистрах сведений Новость хранится не как ссылка, а только как УИН - необходимо найти такие записи и удалить их вручную:
		// - РегистрСведений.КатегорииНовостейПростыеНеобработанные;
		// - РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.
		ДанныеДляУдаления = УдалениеНовостей_ПолучитьСписокДанныхДляУдаления(
			ТекущаяДатаДляРасчетов,
			Новый Структура("Актуальные, Неактуальные, ПомеченныеНаУдаление, СтараяВерсия",
				Истина,
				Истина,
				Истина,
				Истина));

		ТекстСообщения = НСтр("ru='Собраны данные для удаления:
			|Новостей (для удаления): %ДанныеДляУдаления.НовостиДляУдаления.Количество()%
			|Новостей (для установки пометки удаления): %ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество()%
			|КатегорииНовостейПростыеНеобработанные: %ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество()%
			|КатегорииНовостейИнтервалыВерсийНеобработанные: %ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество()%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.НовостиДляУдаления.Количество()%", ДанныеДляУдаления.НовостиДляУдаления.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество()%", ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество()%", ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество()%", ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество());
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. УдалитьНовости_Ежедневно. После сбора данных для удаления'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// 2. Непосредственно удаление.
		РезультатВыполнения = "";
		УдалениеНовостей_ПометитьНаУдалениеДанные(ДанныеДляУдаления, РезультатВыполнения);

		// 3. Сохранить дату последнего выполнения / обновления.
		Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = "Автоудаление новостей";
		Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
		Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРасчетов;
		Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРасчетов + 24*60*60;
		Запись.Записать(Истина);

		ТекстСообщения = НСтр("ru='Результат удаления: %РезультатВыполнения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. УдалитьНовости_Ежедневно. Окончание удаления'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура запускает пересчет периодических свойств новостей (важность, актуальность).
//
// Параметры:
//  РезультатВыполнения - Строка - в эту переменную вернется текстовое описание результата выполнения.
//
Процедура ОбновлениеПериодическихСвойствНовостей(РезультатВыполнения = "") Экспорт

	РезультатВыполнения = "";

	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
		ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

		ТекстСообщения = НСтр("ru='Выполнение регламентного задания
			|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
			|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
			|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
			|Разделение включено: %РазделениеВключено()%
			|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
			|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
			|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
			|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
			|Текущий пользователь ИБ:
			|	Имя: %ТекущийПользователь().Имя%
			|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
			|	Разделение данных:
			|		%ТекущийПользователь().РазделениеДанных%
			|'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ОбновлениеПериодическихСвойствНовостей. Начало'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// Получить данные, которые необходимо обновить.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК Новость,
			|	// ВажностьОбщая
			|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной)
			|		КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
			|				ИЛИ ((Спр.ДатаЗавершения <> &ПустаяДата) И (Спр.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
			|			ТОГДА 0
			|		ИНАЧЕ Спр.Важность
			|	КОНЕЦ КАК ВажностьОбщаяРассчитанная,
			|	// Актуальность
			|	ВЫБОР
			|		КОГДА ((Спр.ДатаЗавершения <> &ПустаяДата)
			|				И (Спр.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК АктуальностьРассчитанная
			|ИЗ
			|	Справочник.Новости КАК Спр
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ПериодическиеСвойстваНовостей КАК Рег
			|	ПО
			|		Спр.Ссылка = Рег.Новость
			|ГДЕ
			|	(
			|		ЕСТЬNULL(Рег.ВажностьОбщая, -1) // Сохраненная
			|		<>
			|		ВЫБОР
			|			КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
			|					ИЛИ ((Спр.ДатаЗавершения <> &ПустаяДата) И (Спр.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
			|				ТОГДА 0
			|			ИНАЧЕ Спр.Важность
			|		КОНЕЦ // Рассчитанная
			|
			|		ИЛИ
			|
			|		ВЫБОР
			|			КОГДА Рег.Актуальность ЕСТЬ NULL
			|				ТОГДА -1
			|			КОГДА Рег.Актуальность = ИСТИНА
			|				ТОГДА 1
			|			КОГДА Рег.Актуальность = ЛОЖЬ
			|				ТОГДА 0
			|		КОНЕЦ // Сохраненная
			|		<>
			|		ВЫБОР
			|			КОГДА Спр.ДатаЗавершения <> &ПустаяДата
			|					И Спр.ДатаЗавершения < &ТекущаяДатаДляРасчетов
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ // Рассчитанная
			|	)
			|";
		Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяДатаДляРасчетов);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101');

		Результат = Запрос.Выполнить(); // ОбновлениеПериодическихСвойствНовостей()
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ВсегоСтрок = Выборка.Количество();
			РезультатВыполнения = НСтр("ru='Найдено %ВсегоСтрок% новостей для обновления периодических свойств'");
			РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%ВсегоСтрок%", ВсегоСтрок);
			Пока Выборка.Следующий() Цикл
				Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
				Запись.Новость = Выборка.Новость;
				Запись.ВажностьОбщая = Выборка.ВажностьОбщаяРассчитанная;
				Запись.Актуальность  = Выборка.АктуальностьРассчитанная;
				Запись.Записать(Истина);
			КонецЦикла;
		Иначе
			РезультатВыполнения = НСтр("ru='Не найдено данных для обновления'");
		КонецЕсли;

		// Сохранить дату последнего выполнения / обновления.
		Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = "Обновление периодических свойств";
		Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
		Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРасчетов;
		Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРасчетов + 30*60;
		Запись.Записать(Истина);

		ТекстСообщения = НСтр("ru='Результат обработки периодических реквизитов: %РезультатВыполнения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ОбновлениеПериодическихСвойствНовостей. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура запускает пересчет привязок к метаданным (+ контекстная важность).
//
// Параметры:
//  РезультатВыполнения - Строка - в эту переменную вернется текстовое описание результата выполнения.
//
Процедура ОбновлениеПривязокКМетаданным(РезультатВыполнения = "") Экспорт

	РезультатВыполнения = "";

	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
		ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

		ТекстСообщения = НСтр("ru='Выполнение регламентного задания
			|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
			|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
			|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
			|Разделение включено: %РазделениеВключено()%
			|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
			|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
			|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
			|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
			|Текущий пользователь ИБ:
			|	Имя: %ТекущийПользователь().Имя%
			|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
			|	Разделение данных:
			|		%ТекущийПользователь().РазделениеДанных%
			|'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ОбновлениеПривязокКМетаданным. Начало'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// Получить данные, которые необходимо обновить.
		// Для оптимизации считаем, что обновляться надо только в такую сторону:
		//   Важность - сбрасывается до 0;
		//   Актуальность - до ЛОЖЬ.
		// Это существенно сократит размер обрабатываемых данных.
		// Обратные преобразования (увеличение Важности или установка Актуальности в ИСТИНУ) считаем невозможными.
		// Универсальный запрос по обработке всех данных в любую сторону, навроде:
		// ВЫБРАТЬ
		//   Спр.Ссылка,
		//   ВЫБРАТЬ ... КАК РасчетноеПоле1,
		//   ВЫБРАТЬ ... КАК РасчетноеПоле2
		//   ...
		// ГДЕ
		//   Спр.Поле1 <> РасчетноеПоле1
		//   ИЛИ Спр.Поле2 <> РасчетноеПоле2
		// Приводит к TableScan и серьезному ухудшению производительности.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка                  КАК Новость,
			|	Спр.Ссылка.ДатаЗавершения   КАК ДатаЗавершения,
			|	Спр.ДатаСбросаВажности      КАК ДатаСбросаВажности,
			|	Спр.Метаданные              КАК Метаданные,
			|	Спр.Форма                   КАК Форма,
			|	Спр.Событие                 КАК Событие,
			|	Спр.ПоказыватьВФормеОбъекта КАК ПоказыватьВФормеОбъекта,
			|	Спр.ЭтоПостояннаяНовость    КАК ЭтоПостояннаяНовость,
			|	ВЫБОР КОГДА
			|		(Спр.ДатаСбросаВажности МЕЖДУ ДАТАВРЕМЯ(1,1,1,0,0,1) И &ТекущаяДатаДляРасчетов) ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ                       КАК ВажностьДолжнаБытьСброшена,
			|	ВЫБОР КОГДА
			|		(Спр.Ссылка.ДатаЗавершения МЕЖДУ ДАТАВРЕМЯ(1,1,1,0,0,1) И &ТекущаяДатаДляРасчетов) ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ                       КАК АктуальностьДолжнаБытьСброшена
			|ПОМЕСТИТЬ ВТ_Новости
			|ИЗ
			|	Справочник.Новости.ПривязкаКМетаданным КАК Спр
			|
			|// Проверять имеет смысл только записи с датой > 00010101 и меньше переданной, а также те,
			|// где Актуальность и Важность еще не сброшены.
			|ГДЕ
			|	(
			|		( // Дата сброса важности или целиком дата актуальности новости установлена и удовлетворяет условию.
			|			(Спр.ДатаСбросаВажности МЕЖДУ ДАТАВРЕМЯ(1,1,1,0,0,1) И &ТекущаяДатаДляРасчетов)
			|			ИЛИ
			|			(Спр.Ссылка.ДатаЗавершения МЕЖДУ ДАТАВРЕМЯ(1,1,1,0,0,1) И &ТекущаяДатаДляРасчетов)
			|		)
			|		И Спр.Важность > 0
			|	)
			|	ИЛИ
			|	// Дата завершения установлена
			|	(Спр.Ссылка.ДатаЗавершения МЕЖДУ ДАТАВРЕМЯ(1,1,1,0,0,1) И &ТекущаяДатаДляРасчетов)
			|ИНДЕКСИРОВАТЬ ПО
			|	Спр.Метаданные,
			|	Спр.Форма,
			|	Спр.Событие,
			|	Спр.Ссылка
			|;
			|
			|ВЫБРАТЬ
			|	ВТ_Новости.Новость                        КАК Новость,
			|	ВТ_Новости.ДатаЗавершения                 КАК ДатаЗавершения,
			|	ВТ_Новости.ДатаСбросаВажности             КАК ДатаСбросаВажности,
			|	ВТ_Новости.Метаданные                     КАК Метаданные,
			|	ВТ_Новости.Форма                          КАК Форма,
			|	ВТ_Новости.Событие                        КАК Событие,
			|	ВТ_Новости.ПоказыватьВФормеОбъекта        КАК ПоказыватьВФормеОбъекта,
			|	ВТ_Новости.ЭтоПостояннаяНовость           КАК ЭтоПостояннаяНовость,
			|	ВТ_Новости.ВажностьДолжнаБытьСброшена     КАК ВажностьДолжнаБытьСброшена,
			|	ЕСТЬNULL(Рег.Важность, 0)                 КАК ВажностьИзБазы,
			|	ВТ_Новости.АктуальностьДолжнаБытьСброшена КАК АктуальностьДолжнаБытьСброшена,
			|	ЕСТЬNULL(Рег.Актуальность, ЛОЖЬ)          КАК АктуальностьИзБазы
			|ИЗ
			|	ВТ_Новости
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|
			|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
			|	ПО
			|		ВТ_Новости.Метаданные = Рег.Метаданные
			|		И ВТ_Новости.Форма    = Рег.Форма
			|		И ВТ_Новости.Событие  = Рег.Событие
			|		И ВТ_Новости.Новость  = Рег.Новость
			|
			|// Проверять имеет смысл только записи с датой > 00010101 и меньше переданной, а также те,
			|//  где Актуальность и Важность еще не сброшены.
			|ГДЕ
			|	(
			|		( // Дата сброса важности или целиком дата актуальности новости установлена и удовлетворяет условию.
			|			(ВТ_Новости.ВажностьДолжнаБытьСброшена = ИСТИНА)
			|			ИЛИ
			|			(ВТ_Новости.АктуальностьДолжнаБытьСброшена = ИСТИНА)
			|		)
			|		И (ЕСТЬNULL(Рег.Важность, 9) > 0) // И важность еще может быть сброшена
			|	)
			|	ИЛИ
			|	(
			|		// Дата завершения установлена и удовлетворяет условию.
			|		(ВТ_Новости.АктуальностьДолжнаБытьСброшена = ИСТИНА)
			|		И
			|		(
			|			ВЫБОР
			|				КОГДА Рег.Актуальность ЕСТЬ NULL
			|					ТОГДА ИСТИНА
			|				КОГДА Рег.Актуальность = ИСТИНА
			|					ТОГДА ИСТИНА
			|				КОГДА Рег.Актуальность = ЛОЖЬ
			|					ТОГДА ЛОЖЬ
			|			КОНЕЦ
			|		) = ИСТИНА // И актуальность еще может быть сброшена.
			|	)
			|";
		Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяДатаДляРасчетов);
		Результат = Запрос.Выполнить(); // ОбновлениеПривязокКМетаданным()

		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ВсегоСтрок = Выборка.Количество();
			РезультатВыполнения = НСтр("ru='Найдено %ВсегоСтрок% новостей для обновления привязок к метаданным'");
			РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%ВсегоСтрок%", ВсегоСтрок);
			Пока Выборка.Следующий() Цикл
				Запись = РегистрыСведений.ПривязкаНовостейКМетаданным.СоздатьМенеджерЗаписи();
				Запись.Новость                 = Выборка.Новость;
				Запись.Метаданные              = Выборка.Метаданные;
				Запись.Форма                   = Выборка.Форма;
				Запись.Событие                 = Выборка.Событие;
				Запись.ПоказыватьВФормеОбъекта = Выборка.ПоказыватьВФормеОбъекта;
				Запись.ЭтоПостояннаяНовость    = Выборка.ЭтоПостояннаяНовость;
				Запись.Записать(Истина);
				Если Выборка.ВажностьДолжнаБытьСброшена = Истина Тогда
					Запись.Важность            = 0;
				Иначе
					Запись.Важность            = Выборка.ВажностьИзБазы;
				КонецЕсли;
				Если Выборка.АктуальностьДолжнаБытьСброшена = Истина Тогда
					Запись.Актуальность        = Ложь;
				Иначе
					Запись.Актуальность        = Выборка.АктуальностьИзБазы;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РезультатВыполнения = НСтр("ru='Не найдено данных для обновления'");
		КонецЕсли;

		// Сохранить дату последнего выполнения / обновления.
		Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = "Обновление привязок к метаданным";
		Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
		Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРасчетов;
		Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРасчетов + 30*60;
		Запись.Записать(Истина);

		ТекстСообщения = НСтр("ru='Результат обработки привязок к метаданным: %РезультатВыполнения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ОбновлениеПривязокКМетаданным. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура запускает получение файлов новостей и обновление новостей для лент новостей по списку лент новостей.
// Процедуры должны иметь похожий код:
//  Справочник.Новости.ЗагрузитьСтандартныеЗначения();
//  ОбработкаНовостей.ПолучитьИОбработатьНовостиПоЛентамНовостей().
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  МассивЛентНовостей - Массив - список лент новостей. Если пустой, то по всем лентам новостей.
//
Процедура ПолучитьИОбработатьНовостиПоЛентамНовостей(МассивЛентНовостей) Экспорт

	ЕстьЛентыНовостей = Истина;
	ЛогШаговВыполнения = Новый Массив;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ТекстСообщения = НСтр("ru='ПолучитьИОбработатьНовостиПоЛентамНовостей, при работе в модели сервиса запускать получение новостей вручную можно только при отключенных разделителях.
				|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
				|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
				|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
				|Разделение включено: %РазделениеВключено()%
				|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
				|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
				|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
				|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
				|Текущий пользователь ИБ:
				|	Имя: %ТекущийПользователь().Имя%
				|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
				|	Разделение данных:
				|		%ТекущийПользователь().РазделениеДанных%
				|Пользователь: %ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ПолучитьИОбработатьНовостиПоЛентамНовостей. Ошибка выполнения'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОбъектМетаданных = Справочники.Новости;

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ИдентификаторШага = НСтр("ru='Новости. Сервис и регламент. ПолучитьИОбработатьНовостиПоЛентамНовостей. Начало'");
	ТекстСообщения = НСтр("ru='Начало загрузки и обработки новостей
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		ИдентификаторШага, // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		ОбъектМетаданных, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если (ПравоДоступа("Изменение", Метаданные.Справочники.Новости))
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейПростые))
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные))
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий))
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные)) Тогда

		// Если установлен режим работы только с локальными новостями, то не загружать никакие классификаторы
		//  и не обрабатывать ленты новостей с протоколами, отличными от file.
		РазрешенаРаботаСНовостямиЧерезИнтернет = ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();

		// Структура таблицы ЛентыНовостей (см. Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера):
		//  - Пометка                - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
		//  - ОбязательныйКанал      - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
		//  - ЛентаНовостей          - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
		//  - Сайт                   - Строка -;
		//  - ИмяФайла               - Строка -;
		//  - Протокол               - Строка - возможные значения http, https, file;
		//  - ВариантЛогинаПароля    - ПеречислениеСсылка.ВариантЛогинаПароляДляЛентыНовостей - БезЛогинаПароля, ВручнуюОдинаковыйДляВсех, ВручнуюРазныйДляВсех, ВебИТС;
		//  - Логин                  - Строка -;
		//  - Пароль                 - Строка -;
		//  - ЛокальнаяЛентаНовостей - Булево - лента новостей не обновляется из файла или из интернета, а заполняется напрямую в справочник Новости;
		//  - ЧастотаОбновления      - Число(1,0) - Частота обновления;
		//  - АдресВХранилище        - Строка - Адрес загруженного файла во временном хранилище.

		// 1. Получить список лент новостей, которые необходимо обновить по этому расписанию.
		// 1.1. Получить список лент новостей с параметрами.
		// Чтобы лента новостей автоматически не обновлялась - надо поставить ЧастотаОбновления=0, или установить пометку удаления.

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	ИСТИНА                          КАК Пометка,
			|	Спр.Ссылка                      КАК ЛентаНовостей,
			|	Спр.ОбязательныйКанал           КАК ОбязательныйКанал,
			|	Спр.Сайт                        КАК Сайт,
			|	Спр.ИмяФайла                    КАК ИмяФайла,
			|	Спр.Протокол                    КАК Протокол,
			|	Спр.ВариантЛогинаПароля         КАК ВариантЛогинаПароля,
			|	Спр.Логин                       КАК Логин,
			|	Спр.Пароль                      КАК Пароль,
			|	Спр.ЛокальнаяЛентаНовостей      КАК ЛокальнаяЛентаНовостей,
			|	Спр.ЧастотаОбновления           КАК ЧастотаОбновления,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК АдресВХранилище // Заполнится потом
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|ГДЕ
			|	(
			|		Спр.Ссылка В (&МассивЛентНовостей)
			|		ИЛИ &ПоВсемЛентамНовостей = ИСТИНА
			|	)
			|	И Спр.ПометкаУдаления = ЛОЖЬ
			|	И Спр.ЛокальнаяЛентаНовостей = ЛОЖЬ // Ленты новости, где новости создаются напрямую в справочнике, а не загружаются из файла или из интернета - не надо обновлять.
			|	// Если установлен режим работы только с локальными новостями, то не загружать никакие классификаторы,
			|	//  и не обрабатывать ленты новостей с протоколами, отличными от file.
			|	И
			|	(
			|		&РазрешенаРаботаСНовостямиЧерезИнтернет = ИСТИНА
			|		ИЛИ Спр.Протокол = ""file""
			|	)
			|";

		Запрос.УстановитьПараметр("МассивЛентНовостей", МассивЛентНовостей);
		Запрос.УстановитьПараметр("ПоВсемЛентамНовостей", МассивЛентНовостей.Количество() = 0);
		Запрос.УстановитьПараметр("РазрешенаРаботаСНовостямиЧерезИнтернет", РазрешенаРаботаСНовостямиЧерезИнтернет);

		Результат = Запрос.Выполнить(); // ПолучитьИОбработатьНовостиПоЛентамНовостей()
		Если НЕ Результат.Пустой() Тогда
			ЛентыНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		Иначе
			ТекстСообщения = НСтр("ru='ПолучитьИОбработатьНовостиПоЛентамНовостей, не удалось определить список лент новостей
				|Передан параметр с количеством значений: %МассивЛентНовостей.Количество()%
				|Результат выполнения запроса: Пустой
				|Возможно, список лент новостей пустой, или у всех лент новостей установлен признак ЛокальнаяЛентаНовостей (что означает, что по ней не надо загружать новости), или у всех лент новостей установлена пометка удаления.
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%МассивЛентНовостей.Количество()%", МассивЛентНовостей.Количество());
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ПолучитьИОбработатьНовостиПоЛентамНовостей. Ошибка выполнения'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			ЕстьЛентыНовостей = Ложь;
		КонецЕсли;

		Если ЕстьЛентыНовостей = Истина Тогда

			// 1.2. Заполнить логины / пароли.
			Для каждого ТекущаяЛентаНовостей Из ЛентыНовостей Цикл
				Если ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.БезЛогинаПароля Тогда
					// Нет логина / пароля.
				ИначеЕсли ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВебИТС Тогда
					// ////? Взять логин / пароль из регистра сведений ВебИТС.
				ИначеЕсли ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВручнуюОдинаковыйДляВсех Тогда
					// Берется из Справочника Ленты новостей, т.е. уже проставлен в запросе.
				ИначеЕсли ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВручнуюРазныйДляВсех Тогда
					////!
					// Такой сценарий возможен для СааС, где у каждой области данных для одной ленты новостей
					//  может быть свой логин / пароль, и данные авторизации будут храниться отдельно.
				КонецЕсли;
			КонецЦикла;

			// 2. Для выбранных лент новостей запустить получение новостей.
			// Следующие строки должны запуститься последовательно на одном сервере, поэтому значения адресов
			//  временного хранилища (отдельная колонка в таблице ЛентыНовостей) не должны пропасть.
			Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера(ЛентыНовостей, ЛогШаговВыполнения);
			Обработки.УправлениеНовостями.ПарсингХМЛФайловНовостей(ЛентыНовостей, ЛогШаговВыполнения);

		КонецЕсли;

	Иначе
		ТекстСообщения = НСтр("ru='ПолучитьИОбработатьНовостиПоЛентамНовостей, у пользователя
			|%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
			|недостаточно прав для выполнения операции загрузки новостей.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ПолучитьИОбработатьНовостиПоЛентамНовостей. Ошибка выполнения'") , // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

	// Запись в журнал регистрации
	РезультатПоШагам = "";
	РезультатШага = "";
	ШаблонРезультатаШага = НСтр("ru='Шаг: %Шаг%
		|	Время начала (мс): %ТНачало%
		|	Время окончания (мс): %ТКонец%
		|	Длительность (мс): %ТДлительность%
		|'");
	Для Каждого ТекущийШаг Из ЛогШаговВыполнения Цикл
		РезультатШага = ШаблонРезультатаШага;
		РезультатШага = СтрЗаменить(РезультатШага, "%Шаг%", ТекущийШаг.Шаг);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТНачало%", ТекущийШаг.ВремяНачала);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТКонец%", ТекущийШаг.ВремяОкончания);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТДлительность%", (ТекущийШаг.ВремяОкончания - ТекущийШаг.ВремяНачала));
		РезультатПоШагам = РезультатПоШагам
			+ РезультатШага + Символы.ПС;
	КонецЦикла;
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ИдентификаторШага = НСтр("ru='Новости. Сервис и регламент. ПолучитьИОбработатьНовостиПоЛентамНовостей. Конец'");
	ТекстСообщения = НСтр("ru='Окончание загрузки и обработки новостей
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|
		|По шагам:
		|%РезультатПоШагам%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатПоШагам%", РезультатПоШагам);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		ИдентификаторШага, // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		ОбъектМетаданных, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура запускает обновление стандартных списков для новостей с графиком получения "Ежедневно"
// Это списки лент новостей, категорий новостей, значений категорий новостей и т.п.
//
// Должно запускаться от имени пользователя с правами, достаточными для изменения этих данных.
//
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьСтандартныеСпискиДляНовостей_Ежедневно()

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ТекстСообщения = НСтр("ru='ОбновитьСтандартныеСпискиДляНовостей_Ежедневно, при работе в модели сервиса запускать обновление стандартных списков можно только при отключенных разделителях.
				|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
				|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
				|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
				|Разделение включено: %РазделениеВключено()%
				|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
				|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
				|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
				|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
				|Текущий пользователь ИБ:
				|	Имя: %ТекущийПользователь().Имя%
				|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
				|	Разделение данных:
				|		%ТекущийПользователь().РазделениеДанных%
				|Пользователь: %ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ОбновитьСтандартныеСпискиДляНовостей_Ежедневно. Ошибка выполнения'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	Если (ПравоДоступа("Изменение", Метаданные.Справочники.ЗначенияКатегорийНовостей))
			И (ПравоДоступа("Изменение", Метаданные.Справочники.ЛентыНовостей))
			И (ПравоДоступа("Изменение", Метаданные.ПланыВидовХарактеристик.КатегорииНовостей)) Тогда

		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда

			Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет() Тогда

				ТекстСообщения = НСтр("ru='Выполнение регламентного задания (начало)
					|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
					|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
					|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
					|Разделение включено: %РазделениеВключено()%
					|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
					|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
					|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
					|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
					|Текущий пользователь ИБ:
					|	Имя: %ТекущийПользователь().Имя%
					|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
					|	Разделение данных:
					|		%ТекущийПользователь().РазделениеДанных%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
					НСтр("ru='Новости. Сервис и регламент. ОбновитьСтандартныеСпискиДляНовостей_Ежедневно. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				Результат = Обработки.УправлениеНовостями.ОбновитьВсеСтандартныеСпискиССервера();

				ТекстСообщения = НСтр("ru='Выполнение регламентного задания (конец)
					|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
					|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
					|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
					|Разделение включено: %РазделениеВключено()%
					|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
					|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
					|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
					|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
					|Текущий пользователь ИБ:
					|	Имя: %ТекущийПользователь().Имя%
					|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
					|	Разделение данных:
					|		%ТекущийПользователь().РазделениеДанных%
					|Результат выполнения:
					|	%Результат%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Результат%", Формат(Результат, "БЛ='Были ошибки'; БИ=Успешно"));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
					НСтр("ru='Новости. Сервис и регламент. ОбновитьСтандартныеСпискиДляНовостей_Ежедневно. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			Иначе
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
					НСтр("ru='Новости. Сервис и регламент. ОбновитьСтандартныеСпискиДляНовостей_Ежедневно. Предупреждение выполнения'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					НСтр("ru='ОбновитьСтандартныеСпискиДляНовостей_Ежедневно, включен режим [Работа только с локальными новостями],
						|поэтому никакие классификаторы не обновляются с серверов 1С.
						|Их можно обновлять из метаданных (при обновлении конфигурации), либо вручную.'"), // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецЕсли;

			// Вне зависимости от того, были ли загрузки из интернета или нет, очистить регистр сведений от пустых значений.
			НаборЗаписей = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать(); // Запись будет ниже.
			БылиУдаления = Истина;
			Пока БылиУдаления = Истина Цикл
				БылиУдаления = Ложь;
				Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
					Если (ТекущаяЗапись.Список = Неопределено)
							ИЛИ (ПустаяСтрока(ТекущаяЗапись.Список))
							ИЛИ (
								ТипЗнч(ТекущаяЗапись.Список) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей")
								И ТекущаяЗапись.Список.Пустая()) Тогда
						НаборЗаписей.Удалить(ТекущаяЗапись);
						БылиУдаления = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если БылиУдаления = Истина Тогда
				НаборЗаписей.Записать(Истина);
			КонецЕсли;

		Иначе
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ОбновитьСтандартныеСпискиДляНовостей_Ежедневно. Предупреждение выполнения'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				НСтр("ru='ОбновитьСтандартныеСпискиДляНовостей_Ежедневно, отключен режим [Разрешена работа с новостями],
					|поэтому все механизмы новостного центра отключены.'"), // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		КонецЕсли;

		// Сохранить дату последнего выполнения / обновления.
		Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = "Обновление классификаторов"; // Идентификатор.
		Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
		Если Результат = Истина Тогда // Успешно
			Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
			Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60;
		Иначе // Неудача
			// Настроить так, чтобы следующая проверка была через 1 час +-30 минут.
			// Разброс необходим, чтобы все клиенты не попали на одно и то же время, а были более-менее равномерно распределены.
			ГенераторСЧ = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяУниверсальнаяДата()));
			СлучайноеЧислоСекунд = ГенераторСЧ.СлучайноеЧисло(0, 30*60) - 15*60; // В секундах, -15..+15 минут.
			// Обновления не произошло, поэтому Запись.ДатаПоследнегоОбновления не трогать.
			Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60*60 + СлучайноеЧислоСекунд;
		КонецЕсли;
		Запись.Записать(Истина);

	Иначе
		ТекстСообщения = НСтр("ru='ОбновитьСтандартныеСпискиДляНовостей_Ежедневно, у пользователя
			|%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
			|недостаточно прав для выполнения операции загрузки стандартных списков.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ОбновитьСтандартныеСпискиДляНовостей_Ежедневно. Ошибка выполнения'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистры сведений "КатегорииНовостейПростыеНеобработанные"
//  и "КатегорииНовостейИнтервалыВерсийНеобработанные" - парсит строковое представление категории и значения
//  и переносит в другой регистр сведений - "КатегорииНовостейПростые" и "КатегорииНовостейИнтервалыВерсий".
// Это процесс связан с тем, что при поступлении новости еще могут быть не загружены все значения категорий.
// Поэтому вначале загружается строковое представление категории и значения
//  ("География=Усть-Илимск" (category) или "География", "Усть-Илимск", "eq" (category1C)), а потом
//  происходит заполнение отдельно категории (ПВХ.КатегорииНовостей), отдельно значения (Строка, Число, Дата,
//  Булево или СправочникСсылка.ЗначенияКатегорийНовостей).
// Простые значения (Строка, Число, Булево, Дата) можно преобразовать сразу,
//  а значения СправочникСсылка.ЗначенияКатегорийНовостей - только при условии наличия таких элементов справочника.
//
// Должно запускаться от имени пользователя с правами, достаточными для изменения этих данных.
//
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьНеобработанныеКатегорииНовостей() Экспорт

	ТипДата = Тип("Дата");

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ТекстСообщения = НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, при работе в модели сервиса запускать обновление стандартных списков можно только при отключенных разделителях.
				|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
				|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
				|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
				|Разделение включено: %РазделениеВключено()%
				|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
				|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
				|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
				|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
				|Текущий пользователь ИБ:
				|	Имя: %ТекущийПользователь().Имя%
				|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
				|	Разделение данных:
				|		%ТекущийПользователь().РазделениеДанных%
				|Пользователь: %ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Ошибка выполнения'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				Метаданные.РегистрыСведений.КатегорииНовостейПростые, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейПростые))
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные))
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий))
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные)) Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Выполнение, шаг 1/4'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегистрыСведений.КатегорииНовостейПростые, // ОбъектМетаданных
			, // Данные
			НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, начало выполнения обработки перезаполнения категорий новостей.'"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// 1. Попытаться обновить категории и значения.

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|// Категории новостей, простые
			|ВЫБРАТЬ
			|	Рег.КатегорияНовостейСтрока                                     КАК КатегорияНовостейСтрока,
			|	Рег.ЗначениеКатегорииНовостейСтрока                             КАК ЗначениеКатегорииНовостейСтрока,
			|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.КатегорииНовостей.ПустаяСсылка) КАК КатегорияНовостей,
			|	Рег.УсловиеОтбора                                               КАК УсловиеОтбора,
			|	Рег.ЛентаНовостей                                               КАК ЛентаНовостей,
			|	Рег.УИННовости                                                  КАК УИННовости,
			|	Спр.Ссылка                                                      КАК Новость,
			|	ЛОЖЬ                                                            КАК ВсеЗаполнено,
			|	ЛОЖЬ                                                            КАК УдалитьЗапись
			|ИЗ
			|	РегистрСведений.КатегорииНовостейПростыеНеобработанные КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Новости КАК Спр
			|	ПО
			|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
			|		И Рег.УИННовости = Спр.УИННовости
			|ГДЕ
			|	НЕ Спр.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	КатегорияНовостейСтрока
			|;
			|
			|// Категории новостей, интервалы версий
			|ВЫБРАТЬ
			|	Рег.КатегорияНовостейСтрока                                     КАК КатегорияНовостейСтрока,
			|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.КатегорииНовостей.ПустаяСсылка) КАК КатегорияНовостей,
			|	Рег.Продукт                                                     КАК Продукт,
			|	Рег.ВерсияОТ                                                    КАК ВерсияОТ,
			|	Рег.ВерсияДО                                                    КАК ВерсияДО,
			|	Рег.ЛентаНовостей                                               КАК ЛентаНовостей,
			|	Рег.УИННовости                                                  КАК УИННовости,
			|	Спр.Ссылка                                                      КАК Новость,
			|	ЛОЖЬ                                                            КАК ВсеЗаполнено,
			|	ЛОЖЬ                                                            КАК УдалитьЗапись
			|ИЗ
			|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Новости КАК Спр
			|	ПО
			|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
			|		И Рег.УИННовости = Спр.УИННовости
			|ГДЕ
			|	НЕ Спр.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	КатегорияНовостейСтрока
			|";

		Результаты = Запрос.ВыполнитьПакет();
		Если НЕ Результаты[0].Пустой() Тогда
			ТаблицаКатегорийИЗначенийПростые = Результаты[0].Выгрузить(ОбходРезультатаЗапроса.Прямой);
		Иначе
			ТаблицаКатегорийИЗначенийПростые = Новый ТаблицаЗначений;
		КонецЕсли;
		Если НЕ Результаты[1].Пустой() Тогда
			ТаблицаКатегорийИЗначенийИнтервалыВерсий = Результаты[1].Выгрузить(ОбходРезультатаЗапроса.Прямой);
		Иначе
			ТаблицаКатегорийИЗначенийИнтервалыВерсий = Новый ТаблицаЗначений;
		КонецЕсли;

		Если (ТаблицаКатегорийИЗначенийПростые.Количество() <= 0) И (ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() <= 0) Тогда
			// Нечего обрабатывать.
			Возврат;
		КонецЕсли;

		Если ТаблицаКатегорийИЗначенийПростые.Количество() > 0 Тогда
			// 1.1. Добавить необходимые колонки.
			ТаблицаКатегорийИЗначенийПростые.Колонки.Добавить("ЗначениеКатегорииНовостей"); // Произвольного типа
			ТаблицаКатегорийИЗначенийПростые.Колонки.Добавить("ТипЗначенияСтрока", Новый ОписаниеТипов("Строка")); // Строка, а не Тип
			// 1.2. Добавить необходимые индексы.
			ТаблицаКатегорийИЗначенийПростые.Индексы.Добавить("КатегорияНовостейСтрока");
			ТаблицаКатегорийИЗначенийПростые.Индексы.Добавить("ЗначениеКатегорииНовостейСтрока");
			ТаблицаКатегорийИЗначенийПростые.Индексы.Добавить("ТипЗначенияСтрока");
		КонецЕсли;

		Если ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() > 0 Тогда
			ТаблицаКатегорийИЗначенийИнтервалыВерсий.Индексы.Добавить("КатегорияНовостейСтрока");
		КонецЕсли;

		// 1.3. Заполнить Категории.
		// 1.3.1. Категории новостей, простые.
		Если ТаблицаКатегорийИЗначенийПростые.Количество() > 0 Тогда
			ТаблицаКатегорий = ТаблицаКатегорийИЗначенийПростые.Скопировать(, "КатегорияНовостейСтрока");
			ТаблицаКатегорий.Свернуть("КатегорияНовостейСтрока");
			ТаблицаКатегорий.Индексы.Добавить("КатегорияНовостейСтрока");
			Для каждого ТекущаяКатегория Из ТаблицаКатегорий Цикл
				// Наименование категории и ее значение может быть как английскими буквами (поиск по коду), так и русскими (поиск по наименованию).
				// Вначале надо искать по коду (английскими буквами) потом по наименованию.
				// Если категория не найдена ни по коду, ни по наименованию, то строку не добавлять - значит не все необходимые данные загружены.
				КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(ТекущаяКатегория.КатегорияНовостейСтрока);
				Если (КатегорияНовостей = Неопределено) ИЛИ (КатегорияНовостей.Пустая()) Тогда
					КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоНаименованию(ТекущаяКатегория.КатегорияНовостейСтрока, Истина);
				КонецЕсли;
				Если (КатегорияНовостей <> Неопределено) И (НЕ КатегорияНовостей.Пустая()) Тогда
					Если КатегорияНовостей.ТипЗначения.Типы().Количество() >= 1 Тогда
						Если КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Булево Тогда
							ТипЗначенияСтрока = "Булево";
						ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Дата Тогда
							ТипЗначенияСтрока = "Дата";
						ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Число Тогда
							ТипЗначенияСтрока = "Число";
						ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка Тогда
							ТипЗначенияСтрока = "Строка";
						ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ЗначенияКатегорийНовостей Тогда
							ТипЗначенияСтрока = "СправочникСсылка.ЗначенияКатегорийНовостей";
						ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта Тогда
							// Значения типа СправочникСсылка.ИнтервалыВерсийПродукта должны передаваться в другом регистре (КатегорииНовостейИнтервалыВерсийНеобработанные),
							//  поэтому потом эта строка будет удалена.
							ТипЗначенияСтрока = "СправочникСсылка.ИнтервалыВерсийПродукта";
						КонецЕсли;
					Иначе
						ТипЗначенияСтрока = "";
					КонецЕсли;
					// Заполнить во всех строках со значением КатегорияНовостейСтрока значение КатегорияНовостей.
					НайденныеСтроки = ТаблицаКатегорийИЗначенийПростые.НайтиСтроки(Новый Структура("КатегорияНовостейСтрока", ТекущаяКатегория.КатегорияНовостейСтрока));
					Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
						ТекущаяНайденнаяСтрока.КатегорияНовостей = КатегорияНовостей;
						ТекущаяНайденнаяСтрока.ТипЗначенияСтрока = ТипЗначенияСтрока;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// 1.3.2. Категории новостей, интервалы версий.
		Если ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() > 0 Тогда
			ТаблицаКатегорий = ТаблицаКатегорийИЗначенийИнтервалыВерсий.Скопировать(, "КатегорияНовостейСтрока");
			ТаблицаКатегорий.Свернуть("КатегорияНовостейСтрока");
			ТаблицаКатегорий.Индексы.Добавить("КатегорияНовостейСтрока");
			Для каждого ТекущаяКатегория Из ТаблицаКатегорий Цикл
				// Наименование категории и ее значение может быть как английскими буквами (поиск по коду), так и русскими (поиск по наименованию).
				// Вначале надо искать по коду (английскими буквами) потом по наименованию.
				// Если категория не найдена ни по коду, ни по наименованию, то строку не добавлять - значит не все необходимые данные загружены.
				КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(ТекущаяКатегория.КатегорияНовостейСтрока);
				Если (КатегорияНовостей = Неопределено) ИЛИ (КатегорияНовостей.Пустая()) Тогда
					КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоНаименованию(ТекущаяКатегория.КатегорияНовостейСтрока, Истина);
				КонецЕсли;
				Если (КатегорияНовостей <> Неопределено) И (НЕ КатегорияНовостей.Пустая()) Тогда
					// Заполнить во всех строках со значением КатегорияНовостейСтрока значение КатегорияНовостей.
					НайденныеСтроки = ТаблицаКатегорийИЗначенийИнтервалыВерсий.НайтиСтроки(Новый Структура("КатегорияНовостейСтрока", ТекущаяКатегория.КатегорияНовостейСтрока));
					Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
						ТекущаяНайденнаяСтрока.КатегорияНовостей = КатегорияНовостей;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// 1.4. Заполнить простые значения - булево, число, строка, дата.
		// 1.4.1. Для простых категорий.
		Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийПростые Цикл
			// Булево записывается в формате XML (true, false) или по-русски Истина, Ложь.
			Если ТекущаяСтрока.ТипЗначенияСтрока = "Булево" Тогда
				Если (ВРег(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока) = ВРег("Истина"))
						ИЛИ (ВРег(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока) = ВРег("True")) Тогда
					Значение = Истина;
				Иначе
					Значение = Ложь;
				КонецЕсли;
				ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
				ТекущаяСтрока.ВсеЗаполнено = Истина;
			ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "Дата" Тогда
				// Дата хранится в формате XML или ГГГГММДДЧЧММСС.
				Попытка
					Значение = XMLЗначение(ТипДата, ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока);
				Исключение
					Попытка
						Значение = Дата(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока);
					Исключение
						Значение = '00010101';
						// Удалять такие неправильные записи.
						ТекущаяСтрока.УдалитьЗапись = Истина;
					КонецПопытки;
				КонецПопытки;
				ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
				ТекущаяСтрока.ВсеЗаполнено = Истина;
			ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "Число" Тогда
				// Число хранится в формате ####.#### - разделитель дробной части ".", без разделителя групп разрядов и т.п.
				ГдеРазделитель = Найти(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, ".");
				Если ГдеРазделитель > 0 Тогда
					ЦелаяЧасть = Число(Лев(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, ГдеРазделитель - 1));
					ДробнаяЧастьСтрока = Прав(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, СтрДлина(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока) - ГдеРазделитель);
					Попытка
						// 0,1    -> 1 / (10^1) = 1 / 10;
						// 0,01   -> 1 / (10^2) = 1 / 100;
						// 0,001  -> 1 / (10^3) = 1 / 1000;
						// 0,0001 -> 1 / (10^4) = 1 / 10000.
						ДробнаяЧасть = Число(ДробнаяЧастьСтрока) / Pow(10, СтрДлина(ДробнаяЧастьСтрока));
						Если ЦелаяЧасть > 0 Тогда // 123.45
							Значение = ЦелаяЧасть + ДробнаяЧасть;
						Иначе // -123.45
							Значение = ЦелаяЧасть - ДробнаяЧасть;
						КонецЕсли;
					Исключение
						Значение = 0;
						// Удалять такие неправильные записи.
						ТекущаяСтрока.УдалитьЗапись = Истина;
					КонецПопытки;
				Иначе
					Попытка
						Значение = Число(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока);
					Исключение
						Значение = 0;
						// Удалять такие неправильные записи.
						ТекущаяСтрока.УдалитьЗапись = Истина;
					КонецПопытки;
				КонецЕсли;
				ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
				ТекущаяСтрока.ВсеЗаполнено = Истина;
			ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "Строка" Тогда
				Значение = ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока;
				ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
				ТекущаяСтрока.ВсеЗаполнено = Истина;
			ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "СправочникСсылка.ЗначенияКатегорийНовостей" Тогда
				// Может передаться как по наименованию (русскими буквами), так и по коду (английскими) - искать обоими способами внутри владельца.
				Значение = Справочники.ЗначенияКатегорийНовостей.НайтиПоКоду(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, Ложь, , ТекущаяСтрока.КатегорияНовостей);
				Если (Значение = Неопределено) ИЛИ (Значение.Пустая()) Тогда
					Значение = Справочники.ЗначенияКатегорийНовостей.НайтиПоНаименованию(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, Истина, , ТекущаяСтрока.КатегорияНовостей);
				КонецЕсли;
				Если (Значение <> Неопределено) И (НЕ Значение.Пустая()) Тогда
					ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
					ТекущаяСтрока.ВсеЗаполнено = Истина;
				Иначе
					// Возможно, все еще не обновились стандартные списки с сервера.
				КонецЕсли;
			Иначе
				// Удалять такие неправильные записи.
				ТекущаяСтрока.УдалитьЗапись = Истина;
			КонецЕсли;
			// Заодно проверить УсловиеОтбора:
			// Для категорий "Product", "ProductVersion", "PlatformVersion" должно быть одно из: eq ne lt le gt ge.
			// Во всех остальных случаях установить eq.
			ТекущаяСтрока.УсловиеОтбора = НРег(ТекущаяСтрока.УсловиеОтбора);
			Если ВРег(ТекущаяСтрока.КатегорияНовостей.Код) = ВРег("Product")
					ИЛИ ВРег(ТекущаяСтрока.КатегорияНовостей.Код) = ВРег("ProductVersion")
					ИЛИ ВРег(ТекущаяСтрока.КатегорияНовостей.Код) = ВРег("PlatformVersion") Тогда
				Если ТекущаяСтрока.УсловиеОтбора = "eq"
						ИЛИ ТекущаяСтрока.УсловиеОтбора = "ne"
						ИЛИ ТекущаяСтрока.УсловиеОтбора = "lt"
						ИЛИ ТекущаяСтрока.УсловиеОтбора = "le"
						ИЛИ ТекущаяСтрока.УсловиеОтбора = "gt"
						ИЛИ ТекущаяСтрока.УсловиеОтбора = "ge" Тогда
					// Все нормально.
				Иначе // установить eq
					ТекущаяСтрока.УсловиеОтбора = "eq";
				КонецЕсли;
			Иначе // установить eq
				ТекущаяСтрока.УсловиеОтбора = "eq";
			КонецЕсли;
		КонецЦикла;
		// 1.4.2. Для интервалов версий.
		Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийИнтервалыВерсий Цикл
			// Категория новостей должна быть правильного типа - интервалы версий продукта, иначе - удалить строку.
			Если (ТипЗнч(ТекущаяСтрока.КатегорияНовостей) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей"))
					И НЕ ТекущаяСтрока.КатегорияНовостей.Пустая() Тогда
				Если ТекущаяСтрока.КатегорияНовостей.ТипЗначенияВспомогательный <> Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта Тогда
					ТекущаяСтрока.УдалитьЗапись = Истина;
				Иначе
					// Тут достаточно, чтобы была заполнена категория, все остальные значения (Продукт, ВерсияОТ, ВерсияДО) - строковые.
					ТекущаяСтрока.ВсеЗаполнено = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Выполнение, шаг 2/4'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегистрыСведений.КатегорииНовостейПростые, // ОбъектМетаданных
			, // Данные
			НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, удаление неправильных записей, которые невозможно обработать.'"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// 1.5. Удалить неправильные записи.
		// 1.5.1. Для простых категорий.
		Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийПростые Цикл
			Если ТекущаяСтрока.УдалитьЗапись = Истина Тогда
				Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
				Запись.КатегорияНовостейСтрока         = ТекущаяСтрока.КатегорияНовостейСтрока;
				Запись.ЗначениеКатегорииНовостейСтрока = ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока;
				Запись.ЛентаНовостей                   = ТекущаяСтрока.ЛентаНовостей;
				Запись.УИННовости                      = ТекущаяСтрока.УИННовости;
				Запись.Удалить();

				ТекстСообщения = НСтр("ru='Удалена запись из регистра сведений КатегорииНовостейПростыеНеобработанные с ключами:
					| - КатегорияНовостейСтрока: %ТекущаяСтрока.КатегорияНовостейСтрока%
					| - ЗначениеКатегорииНовостейСтрока: %ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока%
					| - Условие отбора: %ТекущаяСтрока.УсловиеОтбора%
					| - ЛентаНовостей: %ТекущаяСтрока.ЛентаНовостей%
					| - УИННовости: %ТекущаяСтрока.УИННовости%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.КатегорияНовостейСтрока%", ТекущаяСтрока.КатегорияНовостейСтрока);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока%", ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.УсловиеОтбора%", ТекущаяСтрока.УсловиеОтбора);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.УИННовости%", ТекущаяСтрока.УИННовости);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
					НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Удаление неправильных записей простых категорий'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецЕсли;
		КонецЦикла;
		// 1.5.2. Для интервалов версий.
		Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийИнтервалыВерсий Цикл
			Если ТекущаяСтрока.УдалитьЗапись = Истина Тогда
				Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
				Запись.КатегорияНовостейСтрока         = ТекущаяСтрока.КатегорияНовостейСтрока;
				Запись.ЛентаНовостей                   = ТекущаяСтрока.ЛентаНовостей;
				Запись.УИННовости                      = ТекущаяСтрока.УИННовости;
				Запись.Продукт                         = ТекущаяСтрока.Продукт;
				Запись.ВерсияОТ                        = ТекущаяСтрока.ВерсияОТ;
				Запись.ВерсияДО                        = ТекущаяСтрока.ВерсияДО;
				Запись.Удалить();

				ТекстСообщения = НСтр("ru='Удалена запись из регистра сведений КатегорииНовостейИнтервалыВерсийНеобработанные с ключами:
					| - КатегорияНовостейСтрока: %ТекущаяСтрока.КатегорияНовостейСтрока%
					| - Продукт: %ТекущаяСтрока.Продукт%
					| - ВерсияОТ: %ТекущаяСтрока.ВерсияОТ%
					| - ВерсияДО: %ТекущаяСтрока.ВерсияДО%
					| - ЛентаНовостей: %ТекущаяСтрока.ЛентаНовостей%
					| - УИННовости: %ТекущаяСтрока.УИННовости%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.КатегорияНовостейСтрока%", ТекущаяСтрока.КатегорияНовостейСтрока);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.Продукт%", ТекущаяСтрока.Продукт);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.ВерсияОТ%", ТекущаяСтрока.ВерсияОТ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.ВерсияДО%", ТекущаяСтрока.ВерсияДО);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрока.УИННовости%", ТекущаяСтрока.УИННовости);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
					НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Удаление неправильных записей интервалов версий'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецЕсли;
		КонецЦикла;

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Выполнение, шаг 3/4'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегистрыСведений.КатегорииНовостейПростые, // ОбъектМетаданных
			, // Данные
			НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, удаление неправильных записей, которые невозможно обработать.'"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// 1.6. Перенести правильные записи в регистры сведений.
		// 1.6.1. Перенос правильных записей в регистр сведений КатегорииНовостейПростые.
		Если ТаблицаКатегорийИЗначенийПростые.Количество() > 0 Тогда
			ТаблицаЗаполненныхКатегорийИЗначений = ТаблицаКатегорийИЗначенийПростые.Скопировать(Новый Структура("ВсеЗаполнено, УдалитьЗапись", Истина, Ложь));
			ТаблицаЗаполненныхКатегорийИЗначений.Свернуть("КатегорияНовостей, ЗначениеКатегорииНовостей, КатегорияНовостейСтрока, ЗначениеКатегорииНовостейСтрока");
			Для каждого ТекущаяСтрокаКатегорийИЗначений Из ТаблицаЗаполненныхКатегорийИЗначений Цикл
				// Заполнить регистр сведений "КатегорииНовостейПростые".
				НайденныеСтроки = ТаблицаКатегорийИЗначенийПростые.НайтиСтроки(
					Новый Структура("КатегорияНовостей, ЗначениеКатегорииНовостей",
						ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостей,
						ТекущаяСтрокаКатегорийИЗначений.ЗначениеКатегорииНовостей));
				Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
					Запись = РегистрыСведений.КатегорииНовостейПростые.СоздатьМенеджерЗаписи();
					Запись.Новость                   = ТекущаяНайденнаяСтрока.Новость;
					Запись.КатегорияНовостей         = ТекущаяНайденнаяСтрока.КатегорияНовостей;
					Запись.ЗначениеКатегорииНовостей = ТекущаяНайденнаяСтрока.ЗначениеКатегорииНовостей;
					Запись.УсловиеОтбора             = ТекущаяНайденнаяСтрока.УсловиеОтбора;
					Запись.Записать(Истина);
				КонецЦикла;
				// Очистить регистр сведений "КатегорииНовостейПростыеНеобработанные" для обработанной строки
				//  КатегорияНовостейСтрока / ЗначениеКатегорииНовостейСтрока и всех лент новостей и УИН новостей.
				НаборЗаписей = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.КатегорияНовостейСтрока.Установить(ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостейСтрока);
				НаборЗаписей.Отбор.ЗначениеКатегорииНовостейСтрока.Установить(ТекущаяСтрокаКатегорийИЗначений.ЗначениеКатегорииНовостейСтрока);
				НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
			КонецЦикла;
		КонецЕсли;

		// 1.6.2. Перенос правильных записей в регистр сведений КатегорииНовостейИнтервалыВерсий.
		Если ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() > 0 Тогда
			ТаблицаЗаполненныхКатегорийИЗначений = ТаблицаКатегорийИЗначенийИнтервалыВерсий.Скопировать(Новый Структура("ВсеЗаполнено, УдалитьЗапись", Истина, Ложь));
			ТаблицаЗаполненныхКатегорийИЗначений.Свернуть("КатегорияНовостей, Продукт, ВерсияОТ, ВерсияДО");
			Для каждого ТекущаяСтрокаКатегорийИЗначений Из ТаблицаЗаполненныхКатегорийИЗначений Цикл
				// Заполнить регистр сведений "КатегорииНовостейИнтервалыВерсий".
				НайденныеСтроки = ТаблицаКатегорийИЗначенийИнтервалыВерсий.НайтиСтроки(
					Новый Структура("КатегорияНовостей, Продукт, ВерсияОТ, ВерсияДО",
						ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостей,
						ТекущаяСтрокаКатегорийИЗначений.Продукт,
						ТекущаяСтрокаКатегорийИЗначений.ВерсияОТ,
						ТекущаяСтрокаКатегорийИЗначений.ВерсияДО));
				Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
					Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсий.СоздатьМенеджерЗаписи();
					Запись.Новость                   = ТекущаяНайденнаяСтрока.Новость;
					Запись.КатегорияНовостей         = ТекущаяНайденнаяСтрока.КатегорияНовостей;
					Запись.Продукт                   = ТекущаяНайденнаяСтрока.Продукт;
					Запись.ВерсияОТ                  = ТекущаяНайденнаяСтрока.ВерсияОТ;
					Запись.ВерсияДО                  = ТекущаяНайденнаяСтрока.ВерсияДО;
					Запись.Записать(Истина);
				КонецЦикла;
				// Очистить регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные" для обработанной строки
				//  КатегорияНовостейСтрока / Продукт / ВерсияОТ / ВерсияДО и всех лент новостей и УИН новостей.
				НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.КатегорияНовостейСтрока.Установить(ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостей);
				НаборЗаписей.Отбор.Продукт.Установить(ТекущаяСтрокаКатегорийИЗначений.Продукт);
				НаборЗаписей.Отбор.ВерсияОТ.Установить(ТекущаяСтрокаКатегорийИЗначений.ВерсияОТ);
				НаборЗаписей.Отбор.ВерсияДО.Установить(ТекущаяСтрокаКатегорийИЗначений.ВерсияДО);
				НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
			КонецЦикла;
		КонецЕсли;

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Выполнение, шаг 4/4'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегистрыСведений.КатегорииНовостейПростые, // ОбъектМетаданных
			, // Данные
			НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, удаление записей, не привязанных к новостям.'"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// 2. Со временем в регистрах "КатегорииНовостейПростыеНеобработанные" и "КатегорииНовостейИнтервалыВерсийНеобработанные"
		//  могут скапливаться не привязанные к новостям данные.
		// Например, когда новость удалили, а категория/значение так и осталась необработанная.
		// Т.к. в регистрах сведений "КатегорииНовостейПростыеНеобработанные" и "КатегорииНовостейИнтервалыВерсийНеобработанные"
		//  привязка к новости осуществляется не по внутренней ссылке (которая на этапе загрузки новостей еще не сформирована),
		//  а по комбинации ЛентаНовостей / УИННовости, то записи из этого регистра не будут удаляться при удалении новости.
		// Необходимо проверить, есть ли комбинации ЛентаНовостей / УИННовости, привязанные к этим необработанным категориям и удалить записи,
		//  которые не привязаны к новостям.
		// 2.1. Регистр сведений "КатегорииНовостейПростыеНеобработанные".
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Рег.ЛентаНовостей КАК ЛентаНовостей,
			|	Рег.УИННовости    КАК УИННовости,
			|	Спр.Ссылка        КАК Новость
			|ИЗ
			|	РегистрСведений.КатегорииНовостейПростыеНеобработанные КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Новости КАК Спр
			|	ПО
			|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
			|		И Рег.УИННовости = Спр.УИННовости
			|ГДЕ
			|	Спр.Ссылка ЕСТЬ NULL
			|";

		Результат = Запрос.Выполнить(); // ПересчитатьНеобработанныеКатегорииНовостей(), Регистр сведений "КатегорииНовостейПростыеНеобработанные"
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				// Если по связке Лента новостей / УИННовости нет новостей, то удалять весь набор записей (со всеми значениями категорий).
				НаборЗаписей = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЛентаНовостей.Установить(Выборка.ЛентаНовостей);
				НаборЗаписей.Отбор.УИННовости.Установить(Выборка.УИННовости);
				НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
			КонецЦикла;
		КонецЕсли;

		// 2.2. Регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные".
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Рег.ЛентаНовостей КАК ЛентаНовостей,
			|	Рег.УИННовости    КАК УИННовости,
			|	Спр.Ссылка        КАК Новость
			|ИЗ
			|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Новости КАК Спр
			|	ПО
			|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
			|		И Рег.УИННовости = Спр.УИННовости
			|ГДЕ
			|	Спр.Ссылка ЕСТЬ NULL
			|";

		Результат = Запрос.Выполнить(); // ПересчитатьНеобработанныеКатегорииНовостей(), Регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные".
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				// Если по связке Лента новостей / УИННовости нет новостей, то удалять весь набор записей.
				НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЛентаНовостей.Установить(Выборка.ЛентаНовостей);
				НаборЗаписей.Отбор.УИННовости.Установить(Выборка.УИННовости);
				НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
			КонецЦикла;
		КонецЕсли;

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Выполнение завершено'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегистрыСведений.КатегорииНовостейПростые, // ОбъектМетаданных
			, // Данные
			НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, обработка окончена.'"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Иначе
		ТекстСообщения = НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, у пользователя
			|%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
			|недостаточно прав для выполнения операции обработка категорий новостей.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей. Ошибка выполнения'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.РегистрыСведений.КатегорииНовостейПростые, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистр сведений "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся".
// В этом регистре хранятся заранее рассчитанные результаты отборов по новостям по редко меняющимся категориям:
//  - Версия платформы;
//  - Версия конфигурации;
//  - Продукт (включает в себя Имя+Версия, поэтому тоже меняется).
// Этот регистр имеет смысл пересчитывать после получения новостей, а также после обновления конфигурации и платформы.
// Для расчета будет браться информация из двух регистров - КатегорииНовостейПростые и КатегорииНовостейИнтервалыВерсий.
//
// Должно запускаться от имени пользователя с правами, достаточными для изменения этих данных.
//
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьОтборыПоНовостям_РедкоМеняющиеся() Экспорт

	// Сохранить текущую версию платформы ДО выполнения остального кода.
	// Это связано с тем, что может быть не заполнен план видов характеристик (КатегорияПродукт,
	//  КатегорияВерсияПродукта, КатегорияВерсияПлатформы) и выполнение прервется (см. "Возврат;").

	// Сохранить в хранилище настроек текущую версию платформы.
	лкСистемнаяИнформация = Новый СистемнаяИнформация;
	лкТекущаяВерсия = лкСистемнаяИнформация.ВерсияПриложения;
	КлючОбъекта = "СистемнаяИнформация_ВерсияПриложения";
	// Получить сохраненную ранее версию платформы. Сохранять только в случае, если она изменена.
	лкПоследняяВерсия = ХранилищаНастроек.НастройкиНовостей.Загрузить(КлючОбъекта);
	Если лкТекущаяВерсия <> лкПоследняяВерсия Тогда
		ХранилищаНастроек.НастройкиНовостей.Сохранить(
			КлючОбъекта,
			,
			лкТекущаяВерсия);
	КонецЕсли;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ТекстСообщения = НСтр("ru='ПересчитатьОтборыПоНовостям_РедкоМеняющиеся, при работе в модели сервиса запускать обновление стандартных списков можно только при отключенных разделителях.
				|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
				|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
				|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
				|Разделение включено: %РазделениеВключено()%
				|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
				|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
				|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
				|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
				|Текущий пользователь ИБ:
				|	Имя: %ТекущийПользователь().Имя%
				|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
				|	Разделение данных:
				|		%ТекущийПользователь().РазделениеДанных%
				|Пользователь: %ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям_РедкоМеняющиеся. Ошибка выполнения'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся) = Истина Тогда

		// Список редко-меняющихся категорий.
		// План видов характеристик КатегорииНовостей должен уже быть заполнен с сервера.
		КатегорияВерсияПродукта  = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion");
		КатегорияВерсияПлатформы = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion");
		Если (КатегорияВерсияПродукта.Пустая())
				ИЛИ (КатегорияВерсияПлатформы.Пустая()) Тогда
			// Возможно, список категорий еще не пришел с сервера.
			ТекстСообщения = НСтр("ru='ПересчитатьОтборыПоНовостям_РедкоМеняющиеся, не заполнены значения плана видов характеристик КатегорииНовостей:
				|КатегорияВерсияПродукта: %КатегорияВерсияПродукта%
				|КатегорияВерсияПлатформы: %КатегорияВерсияПлатформы%
				|Возможно, они еще не обновились с сервера при обновлении классификаторов, а также не были заполнены в макете СтандартныеЗначения плана видов характеристик КатегорииНовостей
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КатегорияВерсияПродукта%", КатегорияВерсияПродукта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КатегорияВерсияПлатформы%", КатегорияВерсияПлатформы);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям_РедкоМеняющиеся. Ошибка выполнения'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;

		// Получим списки значений отборов, но для некоторых условий (>, >=, <, <=) нам будут нужны только единственные значения, а не список.

		// Значения предопределенных категорий.
		ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
		ВерсияПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы
		ВерсияПродукта  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"); // Только полная версия продукта

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|// 0. Поместим все значения интервалов версий платформы во временную таблицу.
			|// Поместим все значения интервалов версий во временную таблицу.
			|ВЫБРАТЬ
			|	Рег.Новость                   КАК Новость,
			|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
			|	Рег.Продукт                   КАК Продукт,
			|	//Рег.ВерсияОТ                  КАК ВерсияОТ,
			|	//Рег.ВерсияДО                  КАК ВерсияДО,
			|	ВЫБОР
			|		КОГДА (Рег.Продукт = &ЭтаПлатформа)
			|			И (&ВерсияПлатформы МЕЖДУ Рег.ВерсияОТ И Рег.ВерсияДО) ТОГДА
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ РезультатПоПлатформе
			|ПОМЕСТИТЬ ВТ_ЗначенияОтборов_ИнтервалыВерсийПлатформы
			|ИЗ
			|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
			|ГДЕ
			|	Рег.КатегорияНовостей = &КатегорияВерсияПлатформы
			|ИНДЕКСИРОВАТЬ ПО
			|	Новость,
			|	КатегорияНовостей
			|;
			|
			|// 1. Поместим все значения интервалов версий продукта во временную таблицу.
			|// Поместим все значения интервалов версий во временную таблицу.
			|ВЫБРАТЬ
			|	Рег.Новость                   КАК Новость,
			|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
			|	Рег.Продукт                   КАК Продукт,
			|	//Рег.ВерсияОТ                  КАК ВерсияОТ,
			|	//Рег.ВерсияДО                  КАК ВерсияДО,
			|	ВЫБОР
			|		КОГДА (Рег.Продукт = &ИмяКонфигурации)
			|			И (&ВерсияПродукта МЕЖДУ Рег.ВерсияОТ И Рег.ВерсияДО) ТОГДА
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ РезультатПоПродукту
			|ПОМЕСТИТЬ ВТ_ЗначенияОтборов_ИнтервалыВерсийПродукта
			|ИЗ
			|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
			|ГДЕ
			|	Рег.КатегорияНовостей = &КатегорияВерсияПродукта
			|ИНДЕКСИРОВАТЬ ПО
			|	Новость,
			|	КатегорияНовостей
			|;
			|
			|// 2. Итоговый результат отбора по платформе.
			|ВЫБРАТЬ
			|	ВТ.Новость                        КАК Новость,
			|	ВТ.КатегорияНовостей              КАК КатегорияНовостей,
			|	МАКСИМУМ(ВТ.РезультатПоПлатформе) КАК ИтоговыйРезультатПоПлатформе
			|ПОМЕСТИТЬ ВТ_РезультатОтборов_Платформа
			|ИЗ
			|	ВТ_ЗначенияОтборов_ИнтервалыВерсийПлатформы КАК ВТ
			|ГДЕ
			|	// Для категории Версия платформы в поле Продукт должно быть написано Platform (т.к. может быть еще мобильная платформа и т.п.).
			|	ВТ.КатегорияНовостей = &КатегорияВерсияПлатформы
			|СГРУППИРОВАТЬ ПО
			|	ВТ.Новость,
			|	ВТ.КатегорияНовостей
			|ИНДЕКСИРОВАТЬ ПО
			|	Новость,
			|	КатегорияНовостей
			|;
			|
			|// 3. Результат отбора по продукту.
			|ВЫБРАТЬ
			|	ВТ.Новость                       КАК Новость,
			|	ВТ.КатегорияНовостей             КАК КатегорияНовостей,
			|	МАКСИМУМ(ВТ.РезультатПоПродукту) КАК ИтоговыйРезультатПоПродукту
			|ПОМЕСТИТЬ ВТ_РезультатОтборов_Продукт
			|ИЗ
			|	ВТ_ЗначенияОтборов_ИнтервалыВерсийПродукта КАК ВТ
			|ГДЕ
			|	// Для категории Версия платформы в поле Продукт должно быть написано Platform (т.к. может быть еще мобильная платформа и т.п.).
			|	ВТ.КатегорияНовостей = &КатегорияВерсияПродукта
			|СГРУППИРОВАТЬ ПО
			|	ВТ.Новость,
			|	ВТ.КатегорияНовостей
			|ИНДЕКСИРОВАТЬ ПО
			|	Новость,
			|	КатегорияНовостей
			|;
			|
			|// 4. Основная таблица, все новости.
			|ВЫБРАТЬ
			|	Спр.Ссылка                                        КАК Новость,
			|	ВЫБОР
			|		КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе ЕСТЬ NULL ТОГДА 2
			|		КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ИСТИНА ТОГДА 1
			|		КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ЛОЖЬ ТОГДА 0
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ                                             КАК РассчитанныйРезультатПоПлатформе,
			|	ВЫБОР
			|		КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту ЕСТЬ NULL ТОГДА 2
			|		КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ИСТИНА ТОГДА 1
			|		КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ЛОЖЬ ТОГДА 0
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ                                             КАК РассчитанныйРезультатПоПродукту,
			|	ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПлатформы, 2) КАК СохраненныйРезультатПоПлатформе,
			|	ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПродукта, 2)  КАК СохраненныйРезультатПоПродукту
			|ИЗ
			|	Справочник.Новости КАК Спр
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК Рег
			|	ПО
			|		Спр.Ссылка = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВТ_РезультатОтборов_Платформа
			|	ПО
			|		Спр.Ссылка = ВТ_РезультатОтборов_Платформа.Новость
			|		//И ВТ_КатегорииНовостей.КатегорияНовостей = ВТ_РезультатОтборов_Платформа.КатегорияНовостей
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВТ_РезультатОтборов_Продукт
			|	ПО
			|		Спр.Ссылка = ВТ_РезультатОтборов_Продукт.Новость
			|		//И ВТ_КатегорииНовостей.КатегорияНовостей = ВТ_РезультатОтборов_Продукт.КатегорияНовостей
			|
			|ГДЕ
			|	(
			|		ВЫБОР
			|			КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе ЕСТЬ NULL ТОГДА 2
			|			КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ИСТИНА ТОГДА 1
			|			КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ЛОЖЬ ТОГДА 0
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|		<>
			|		ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПлатформы, 2)
			|	)
			|	ИЛИ
			|	(
			|		ВЫБОР
			|			КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту ЕСТЬ NULL ТОГДА 2
			|			КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ИСТИНА ТОГДА 1
			|			КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ЛОЖЬ ТОГДА 0
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|		<>
			|		ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПродукта, 2)
			|	)
			|
			|";
		Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", КатегорияВерсияПлатформы);
		Запрос.УстановитьПараметр("КатегорияВерсияПродукта", КатегорияВерсияПродукта);
		Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
		Запрос.УстановитьПараметр("ВерсияПродукта",  ВерсияПродукта);
		Запрос.УстановитьПараметр("ЭтаПлатформа",    "Platform");
		Запрос.УстановитьПараметр("ВерсияПлатформы", ВерсияПлатформы);

		// Новость  | Категория       | ЗначениеВНовости    | ЗначениеВБазе  | Попадает в отбор?
		// Новость1 | ВерсияПродукта  | NULL                | 03.02.000.0001 | \ NULL = ДА;
		// Новость1 | ВерсияПлатформы | NULL                | 08.03.005.1110 | / NULL = ДА, в итоге ДА;
		// Новость2 | ВерсияПродукта  | 03.02.000.0000.9999 | 03.02.000.0001 | \ ДА;
		// Новость2 | ВерсияПлатформы | NULL                | 08.03.005.1110 | / NULL = ДА, в итоге ДА;
		// Новость3 | ВерсияПродукта  | NULL                | 03.02.000.0001 | \ NULL = ДА;
		// Новость3 | ВерсияПлатформы | 08.03.005.0000.9999 | 08.03.005.1110 | / ДА, в итоге ДА;
		// Новость4 | ВерсияПродукта  | 03.03.000.0000.9999 | 03.02.000.0001 | \ НЕТ;
		// Новость4 | ВерсияПлатформы | 08.03.005.0000.9999 | 08.03.005.1110 | / ДА, в итоге НЕТ;
		// Новость5 | ВерсияПродукта  | NULL                | 03.02.000.0001 | \ NULL = ДА;
		// Новость5 | ВерсияПлатформы | 08.04.005.0000.9999 | 08.03.005.1110 | / НЕТ, в итоге НЕТ.
		Результат = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_РедкоМеняющиеся(), версия по любым продуктам
		Если НЕ Результат.Пустой() Тогда
			// В выборку попали только те записи, где изменилось значение.
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				// Если явное несовпадение или по платформе или по продукту, то новость не попадает в отбор.
				Если (Выборка.РассчитанныйРезультатПоПродукту = 0)
						ИЛИ (Выборка.РассчитанныйРезультатПоПлатформе = 0) Тогда
					лкРезультатОтбораОбщий = Ложь;
				Иначе
					лкРезультатОтбораОбщий = Истина;
				КонецЕсли;
				Запись = РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.СоздатьМенеджерЗаписи();
				Запись.Новость                          = Выборка.Новость;
				Запись.РезультатОтбораПоВерсииПлатформы = Выборка.РассчитанныйРезультатПоПлатформе;
				Запись.РезультатОтбораПоВерсииПродукта  = Выборка.РассчитанныйРезультатПоПродукту;
				Запись.РезультатОтбораПоПродукту        = 2; // Всегда 2, т.к. по продукту у нас больше не проверяется
				Запись.РезультатОтбора                  = лкРезультатОтбораОбщий;
				Запись.Записать(Истина);
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистр сведений "РассчитанныеОтборыПоНовостям_Общие".
// В этом регистре хранятся заранее рассчитанные результаты отборов по новостям по настроенным администратором отборам,
//  за исключением отборов по категориям:
//  - Версия платформы;
//  - Версия конфигурации;
//  - Продукт (включает в себя Имя+Версия, поэтому тоже меняется);
//  которые рассчитываются и сохраняются в другом регистре.
// Этот регистр имеет смысл пересчитывать после получения новостей, а также после изменения отборов в справочнике ЛентыНовостей.
// Также работает в модели сервиса в неразделенном сеансе.
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьОтборыПоНовостям_Общие() Экспорт

	УстановитьПривилегированныйРежим(Истина);

		// Подготовка значений отборов, которые рассчитываются автоматически:
		//  - DataSeparation (Separated, Disabled) (общий);
		//  - InfoBaseStorageType (File, ClientServer) (общий);
		//  - SubsystemRealized (имя подсистемы) (общий);
		//  - SubsystemNotRealized (имя подсистемы) (общий);
		//  - FunctionalOptionOn (имя неразделенной функциональной опции) (общий);
		//  - FunctionalOptionOff (имя неразделенной функциональной опции) (общий).

#Область Категория_DataSeparation

		КодКатегорииНовостей = "DataSeparation";
		КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(КодКатегорииНовостей);
		ЗначениеКатегорииНовостей = Неопределено;
		Если НЕ КатегорияНовостей.Пустая() Тогда
			ЗначениеКатегорииНовостей = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории(КодКатегорииНовостей);
			// Записей в регистре сведений настроенных отборов может не быть - добавить на основании доступных категорий в лентах новостей.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК ЛентаНовостей
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей = &КатегорияНовостей
				|";
			Запрос.УстановитьПараметр("КатегорияНовостей", КатегорияНовостей);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					// ЗначениеКатегорииНовостей - это измерение, а необходимо оставить только единственное значение отбора.
					НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
					НаборЗаписей.Отбор["КатегорияНовостей"].Установить(КатегорияНовостей, Истина);
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
						НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = ЗначениеКатегорииНовостей;
					НаборЗаписей.Записать(Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

#Область Категория_InfoBaseStorageType

		КодКатегорииНовостей = "InfoBaseStorageType";
		КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(КодКатегорииНовостей);
		ЗначениеКатегорииНовостей = Неопределено;
		Если НЕ КатегорияНовостей.Пустая() Тогда
			ЗначениеКатегорииНовостей = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории(КодКатегорииНовостей);
			// Записей в регистре сведений настроенных отборов может не быть - добавить на основании доступных категорий в лентах новостей.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК ЛентаНовостей
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей = &КатегорияНовостей
				|";
			Запрос.УстановитьПараметр("КатегорияНовостей", КатегорияНовостей);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					// ЗначениеКатегорииНовостей - это измерение, а необходимо оставить только единственное значение отбора.
					НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
					НаборЗаписей.Отбор["КатегорияНовостей"].Установить(КатегорияНовостей, Истина);
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
						НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = ЗначениеКатегорииНовостей;
					НаборЗаписей.Записать(Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

#Область Категория_SubsystemRealized

		// Получить список значений этой категории.
		КодКатегорииНовостей = "SubsystemRealized"; // SubsystemRealized / SubsystemNotRealized
		КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(КодКатегорииНовостей);
		Если НЕ КатегорияНовостей.Пустая() Тогда

			// Если по какой-то ленте новостей отключили категорию, то этот отбор пропадет
			//  из регистра сведений РегистрыСведений.ОтборыПоЛентамНовостейОбщие при вызове ОптимизироватьОтборыПоНовостям().

			Запрос = Новый Запрос;
			Запрос.Текст = "
				|// 0. Список лент новостей, где есть эта категория (временная таблица)
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК ЛентаНовостей
				|ПОМЕСТИТЬ ВТ_ЛентыНовостей
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей = &КатегорияНовостей
				|ИНДЕКСИРОВАТЬ ПО
				|	ЛентаНовостей
				|;
				|
				|// 1. Список значений категорий по лентам новостей (временная таблица)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Рег.Новость.ЛентаНовостей     КАК ЛентаНовостей,
				|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийПоЛентамНовостей
				|ИЗ
				|	ВТ_ЛентыНовостей
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейПростые КАК Рег
				|	ПО
				|		ВТ_ЛентыНовостей.ЛентаНовостей = Рег.Новость.ЛентаНовостей
				|ГДЕ
				|	Рег.КатегорияНовостей = &КатегорияНовостей
				|;
				|
				|// 2. Общий список значений категорий (для расчета)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|;
				|
				|// 3. Общий список лент новостей и значений категорий (для заполнения общего отбора)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЛентаНовостей             КАК ЛентаНовостей,
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|УПОРЯДОЧИТЬ ПО
				|	ЛентаНовостей,
				|	ЗначениеКатегорииНовостей
				|;
				|
				|";
			Запрос.УстановитьПараметр("КатегорияНовостей", КатегорияНовостей);

			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Если НЕ РезультатыЗапроса[2].Пустой() Тогда
				// Заполнить значения отбора.
				ЗначенияКатегорииНовостей = Новый Соответствие;
				Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					ПодсистемаВнедрена = ОбщегоНазначения.ПодсистемаСуществует(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
					ЗначенияКатегорииНовостей.Вставить(СокрЛП(Выборка.ЗначениеКатегорииНовостей), ПодсистемаВнедрена);
				КонецЦикла;
				// Настроить отбор по найденным значениям.
				Если НЕ РезультатыЗапроса[3].Пустой() Тогда
					Выборка = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
						НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
						НаборЗаписей.Отбор["КатегорияНовостей"].Установить(КатегорияНовостей, Истина);
						// Наличие настроенного отбора в новостях по этой категории означает,
						//  что надо добавить хотя бы одно фиктивное значение отбора (например "*").
						//  В противном случае пустое значение настроенного отбора по этой категории будет означать "Отбирать все новости".
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
						НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = "*";
						// Дозаполним отбор по явно указанным значениям отбора.
						Пока Выборка.Следующий() Цикл
							Результат = ЗначенияКатегорииНовостей.Получить(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
							Если Результат = Истина Тогда // SubsystemRealized / SubsystemNotRealized
								НоваяЗапись = НаборЗаписей.Добавить();
								НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
								НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
								НоваяЗапись.ЗначениеКатегорииНовостей = СокрЛП(Выборка.ЗначениеКатегорииНовостей);
							КонецЕсли;
						КонецЦикла;
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

#Область Категория_SubsystemNotRealized

		// Получить список значений этой категории.
		КодКатегорииНовостей = "SubsystemNotRealized"; // SubsystemRealized / SubsystemNotRealized
		КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(КодКатегорииНовостей);
		Если НЕ КатегорияНовостей.Пустая() Тогда

			// Если по какой-то ленте новостей отключили категорию, то этот отбор пропадет
			//  из регистра сведений РегистрыСведений.ОтборыПоЛентамНовостейОбщие при вызове ОптимизироватьОтборыПоНовостям().

			Запрос = Новый Запрос;
			Запрос.Текст = "
				|// 0. Список лент новостей, где есть эта категория (временная таблица)
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК ЛентаНовостей
				|ПОМЕСТИТЬ ВТ_ЛентыНовостей
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей = &КатегорияНовостей
				|ИНДЕКСИРОВАТЬ ПО
				|	ЛентаНовостей
				|;
				|
				|// 1. Список значений категорий по лентам новостей (временная таблица)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Рег.Новость.ЛентаНовостей     КАК ЛентаНовостей,
				|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийПоЛентамНовостей
				|ИЗ
				|	ВТ_ЛентыНовостей
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейПростые КАК Рег
				|	ПО
				|		ВТ_ЛентыНовостей.ЛентаНовостей = Рег.Новость.ЛентаНовостей
				|ГДЕ
				|	Рег.КатегорияНовостей = &КатегорияНовостей
				|;
				|
				|// 2. Общий список значений категорий (для расчета)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|;
				|
				|// 3. Общий список лент новостей и значений категорий (для заполнения общего отбора)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЛентаНовостей             КАК ЛентаНовостей,
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|УПОРЯДОЧИТЬ ПО
				|	ЛентаНовостей,
				|	ЗначениеКатегорииНовостей
				|;
				|
				|";
			Запрос.УстановитьПараметр("КатегорияНовостей", КатегорияНовостей);

			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Если НЕ РезультатыЗапроса[2].Пустой() Тогда
				// Заполнить значения отбора.
				ЗначенияКатегорииНовостей = Новый Соответствие;
				Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					ПодсистемаВнедрена = ОбщегоНазначения.ПодсистемаСуществует(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
					ЗначенияКатегорииНовостей.Вставить(СокрЛП(Выборка.ЗначениеКатегорииНовостей), ПодсистемаВнедрена);
				КонецЦикла;
				// Настроить отбор по найденным значениям.
				Если НЕ РезультатыЗапроса[3].Пустой() Тогда
					Выборка = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
						НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
						НаборЗаписей.Отбор["КатегорияНовостей"].Установить(КатегорияНовостей, Истина);
						// Наличие настроенного отбора в новостях по этой категории означает,
						//  что надо добавить хотя бы одно фиктивное значение отбора (например "*").
						//  В противном случае пустое значение настроенного отбора по этой категории будет означать "Отбирать все новости".
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
						НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = "*";
						// Дозаполним отбор по явно указанным значениям отбора.
						Пока Выборка.Следующий() Цикл
							Результат = ЗначенияКатегорииНовостей.Получить(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
							Если Результат = Ложь Тогда // SubsystemRealized / SubsystemNotRealized
								НоваяЗапись = НаборЗаписей.Добавить();
								НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
								НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
								НоваяЗапись.ЗначениеКатегорииНовостей = СокрЛП(Выборка.ЗначениеКатегорииНовостей);
							КонецЕсли;
						КонецЦикла;
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

#Область Категория_FunctionalOptionOn

		// Получить список значений этой категории.
		КодКатегорииНовостей = "FunctionalOptionOn"; // FunctionalOptionOn / FunctionalOptionOff
		КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(КодКатегорииНовостей);
		Если НЕ КатегорияНовостей.Пустая() Тогда

			// Если по какой-то ленте новостей отключили категорию, то этот отбор пропадет
			//  из регистра сведений РегистрыСведений.ОтборыПоЛентамНовостейОбщие при вызове ОптимизироватьОтборыПоНовостям().

			Запрос = Новый Запрос;
			Запрос.Текст = "
				|// 0. Список лент новостей, где есть эта категория (временная таблица)
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК ЛентаНовостей
				|ПОМЕСТИТЬ ВТ_ЛентыНовостей
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей = &КатегорияНовостей
				|ИНДЕКСИРОВАТЬ ПО
				|	ЛентаНовостей
				|;
				|
				|// 1. Список значений категорий по лентам новостей (временная таблица)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Рег.Новость.ЛентаНовостей     КАК ЛентаНовостей,
				|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийПоЛентамНовостей
				|ИЗ
				|	ВТ_ЛентыНовостей
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейПростые КАК Рег
				|	ПО
				|		ВТ_ЛентыНовостей.ЛентаНовостей = Рег.Новость.ЛентаНовостей
				|ГДЕ
				|	Рег.КатегорияНовостей = &КатегорияНовостей
				|;
				|
				|// 2. Общий список значений категорий (для расчета)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|;
				|
				|// 3. Общий список лент новостей и значений категорий (для заполнения общего отбора)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЛентаНовостей             КАК ЛентаНовостей,
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|УПОРЯДОЧИТЬ ПО
				|	ЛентаНовостей,
				|	ЗначениеКатегорииНовостей
				|;
				|
				|";
			Запрос.УстановитьПараметр("КатегорияНовостей", КатегорияНовостей);

			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Если НЕ РезультатыЗапроса[2].Пустой() Тогда
				// Заполнить значения отбора.
				ЗначенияКатегорииНовостей = Новый Соответствие;
				Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					Попытка
						ФОВключена = ПолучитьФункциональнуюОпцию(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ФОВключена = Ложь;
						ТекстСообщения = СтрШаблон(
							НСтр("ru='Ошибка получения значения функциональной опции %1 для категории %2.
								|Подробности:
								|%3'"),
							СокрЛП(Выборка.ЗначениеКатегорииНовостей),
							КодКатегорииНовостей,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
							НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям. Общие'"), // ИдентификаторШага
							УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
							Метаданные.Справочники.Новости, // ОбъектМетаданных
							, // Данные
							ТекстСообщения, // Комментарий
							ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
					КонецПопытки;
					ЗначенияКатегорииНовостей.Вставить(СокрЛП(Выборка.ЗначениеКатегорииНовостей), ФОВключена);
				КонецЦикла;
				// Настроить отбор по найденным значениям.
				Если НЕ РезультатыЗапроса[3].Пустой() Тогда
					Выборка = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
						НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
						НаборЗаписей.Отбор["КатегорияНовостей"].Установить(КатегорияНовостей, Истина);
						// Наличие настроенного отбора в новостях по этой категории означает,
						//  что надо добавить хотя бы одно фиктивное значение отбора (например "*").
						//  В противном случае пустое значение настроенного отбора по этой категории будет означать "Отбирать все новости".
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
						НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = "*";
						// Дозаполним отбор по явно указанным значениям отбора.
						Пока Выборка.Следующий() Цикл
							Результат = ЗначенияКатегорииНовостей.Получить(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
							Если Результат = Истина Тогда // FunctionalOptionOn / FunctionalOptionOff
								НоваяЗапись = НаборЗаписей.Добавить();
								НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
								НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
								НоваяЗапись.ЗначениеКатегорииНовостей = СокрЛП(Выборка.ЗначениеКатегорииНовостей);
							КонецЕсли;
						КонецЦикла;
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

#Область Категория_FunctionalOptionOff

		// Получить список значений этой категории.
		КодКатегорииНовостей = "FunctionalOptionOff"; // FunctionalOptionOn / FunctionalOptionOff
		КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(КодКатегорииНовостей);
		Если НЕ КатегорияНовостей.Пустая() Тогда

			// Если по какой-то ленте новостей отключили категорию, то этот отбор пропадет
			//  из регистра сведений РегистрыСведений.ОтборыПоЛентамНовостейОбщие при вызове ОптимизироватьОтборыПоНовостям().

			Запрос = Новый Запрос;
			Запрос.Текст = "
				|// 0. Список лент новостей, где есть эта категория (временная таблица)
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК ЛентаНовостей
				|ПОМЕСТИТЬ ВТ_ЛентыНовостей
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей = &КатегорияНовостей
				|ИНДЕКСИРОВАТЬ ПО
				|	ЛентаНовостей
				|;
				|
				|// 1. Список значений категорий по лентам новостей (временная таблица)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Рег.Новость.ЛентаНовостей     КАК ЛентаНовостей,
				|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийПоЛентамНовостей
				|ИЗ
				|	ВТ_ЛентыНовостей
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейПростые КАК Рег
				|	ПО
				|		ВТ_ЛентыНовостей.ЛентаНовостей = Рег.Новость.ЛентаНовостей
				|ГДЕ
				|	Рег.КатегорияНовостей = &КатегорияНовостей
				|;
				|
				|// 2. Общий список значений категорий (для расчета)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|;
				|
				|// 3. Общий список лент новостей и значений категорий (для заполнения общего отбора)
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЛентаНовостей             КАК ЛентаНовостей,
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_ЗначенияКатегорийПоЛентамНовостей
				|УПОРЯДОЧИТЬ ПО
				|	ЛентаНовостей,
				|	ЗначениеКатегорииНовостей
				|;
				|
				|";
			Запрос.УстановитьПараметр("КатегорияНовостей", КатегорияНовостей);

			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Если НЕ РезультатыЗапроса[2].Пустой() Тогда
				// Заполнить значения отбора.
				ЗначенияКатегорииНовостей = Новый Соответствие;
				Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					Попытка
						ФОВключена = ПолучитьФункциональнуюОпцию(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ФОВключена = Ложь;
						ТекстСообщения = СтрШаблон(
							НСтр("ru='Ошибка получения значения функциональной опции %1 для категории %2.
								|Подробности:
								|%3'"),
							СокрЛП(Выборка.ЗначениеКатегорииНовостей),
							КодКатегорииНовостей,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
							НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям. Общие'"), // ИдентификаторШага
							УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
							Метаданные.Справочники.Новости, // ОбъектМетаданных
							, // Данные
							ТекстСообщения, // Комментарий
							ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
					КонецПопытки;
					ЗначенияКатегорииНовостей.Вставить(СокрЛП(Выборка.ЗначениеКатегорииНовостей), ФОВключена);
				КонецЦикла;
				// Настроить отбор по найденным значениям.
				Если НЕ РезультатыЗапроса[3].Пустой() Тогда
					Выборка = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
						НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
						НаборЗаписей.Отбор["КатегорияНовостей"].Установить(КатегорияНовостей, Истина);
						// Наличие настроенного отбора в новостях по этой категории означает,
						//  что надо добавить хотя бы одно фиктивное значение отбора (например "*").
						//  В противном случае пустое значение настроенного отбора по этой категории будет означать "Отбирать все новости".
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
						НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = "*";
						// Дозаполним отбор по явно указанным значениям отбора.
						Пока Выборка.Следующий() Цикл
							Результат = ЗначенияКатегорииНовостей.Получить(СокрЛП(Выборка.ЗначениеКатегорииНовостей));
							Если Результат = Ложь Тогда // FunctionalOptionOn / FunctionalOptionOff
								НоваяЗапись = НаборЗаписей.Добавить();
								НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
								НоваяЗапись.КатегорияНовостей         = КатегорияНовостей;
								НоваяЗапись.ЗначениеКатегорииНовостей = СокрЛП(Выборка.ЗначениеКатегорииНовостей);
							КонецЕсли;
						КонецЦикла;
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

		// Непосредственно пересчет отборов.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			|// Из всех проверок необходимо исключить категории:
			|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы,
			|//  т.к. по ним существует отдельный расчет отборов, который хранится
			|//  в регистре сведений РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.
			|
			|//_________________________________________________________________________
			|// Оптимизация: исключить ленты новостей, по которым новости всегда видны.
			|
			|// Если у ленты новостей не настраиваются категории (табличная часть
			|//  ДоступныеКатегории пустая), то новости по этой ленте видны всегда.
			|// Если для ленты новостей не настроены общие отборы,
			|//  то новости по этой ленте видны всегда.
			|
			|// Список лент новостей, по которым не настраиваются категории.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Спр.Ссылка КАК ЛентаНовостей,
			|	КОЛИЧЕСТВО(Спр_ТЧ.КатегорияНовостей) КАК КоличествоКатегорий
			|ПОМЕСТИТЬ ВТ_ЛентыНовостейБезДоступныхОтборов
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|		ВЫБРАТЬ
			|			Спр.Ссылка КАК ЛентаНовостей,
			|			Спр.КатегорияНовостей КАК КатегорияНовостей
			|		ИЗ
			|			Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
			|		ГДЕ
			|			Спр.КатегорияНовостей <> &КатегорияПродукт
			|			И Спр.КатегорияНовостей <> &КатегорияВерсияПродукта
			|			И Спр.КатегорияНовостей <> &КатегорияВерсияПлатформы
			|	)  КАК Спр_ТЧ
			|	ПО
			|		Спр.Ссылка = Спр_ТЧ.ЛентаНовостей
			|СГРУППИРОВАТЬ ПО
			|	Спр.Ссылка
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(Спр_ТЧ.КатегорияНовостей) = 0
			|;
			|
			|// Все общие отборы (за исключением лент новостей, по которым отборы не настраиваются
			|//   и за исключением категорий
			|//   КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы)
			|//   необходимо перемножить с категориями новостей по ленте новостей и категории.
			|//  Каждое совпадение значений категории оценивается как 1, несовпадение как 0.
			|//  Если хотя бы по одной категории итоговое количество совпадений = 0,
			|//   то новость не соответствует общим отборам и должна попасть в исключения.
			|//  Если в новости не указан отбор по какой-то категории, или в общих отборах не указана какая-то категория,
			|//   то эта строка не попадет в соединение ВНУТРЕННЕЕ СОЕДИНЕНИЕ и не будет учтена ни как 0, ни как 1.
			|ВЫБРАТЬ
			|	РегКатегории.Новость               КАК Новость,
			|	РегКатегории.Новость.ЛентаНовостей КАК ЛентаНовостей,
			|	РегКатегории.КатегорияНовостей     КАК КатегорияНовостей,
			|	ВЫБОР
			|		КОГДА РегКатегории.ЗначениеКатегорииНовостей = РегОтборы.ЗначениеКатегорииНовостей ТОГДА
			|			1
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК ЕстьСовпадение
			|ПОМЕСТИТЬ ВТ_СовпаденияЗначенийКатегорийНовостей
			|ИЗ
			|	РегистрСведений.КатегорииНовостейПростые КАК РегКатегории
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК РегОтборы
			|	ПО
			|		РегКатегории.Новость.ЛентаНовостей = РегОтборы.ЛентаНовостей
			|		И РегКатегории.КатегорияНовостей = РегОтборы.КатегорияНовостей
			|ГДЕ
			|	РегКатегории.Новость.ЛентаНовостей НЕ В (
			|		ВЫБРАТЬ
			|			ВТ_ЛентыНовостейБезДоступныхОтборов.ЛентаНовостей
			|		ИЗ
			|			ВТ_ЛентыНовостейБезДоступныхОтборов
			|	)
			|	И РегКатегории.КатегорияНовостей <> &КатегорияПродукт
			|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПродукта
			|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПлатформы
			|;
			|
			|// Итоги по новостям / категориям.
			|ВЫБРАТЬ
			|	ВТ_СовпаденияЗначенийКатегорийНовостей.Новость               КАК Новость,
			|	ВТ_СовпаденияЗначенийКатегорийНовостей.КатегорияНовостей     КАК КатегорияНовостей,
			|	СУММА(ВТ_СовпаденияЗначенийКатегорийНовостей.ЕстьСовпадение) КАК КоличествоСовпадений
			|ПОМЕСТИТЬ ВТ_ВсеНеподходящиеНовости
			|ИЗ
			|	ВТ_СовпаденияЗначенийКатегорийНовостей
			|СГРУППИРОВАТЬ ПО
			|	ВТ_СовпаденияЗначенийКатегорийНовостей.Новость,
			|	ВТ_СовпаденияЗначенийКатегорийНовостей.КатегорияНовостей
			|ИМЕЮЩИЕ
			|	СУММА(ВТ_СовпаденияЗначенийКатегорийНовостей.ЕстьСовпадение) = 0
			|ИНДЕКСИРОВАТЬ ПО
			|	ВТ_СовпаденияЗначенийКатегорийНовостей.Новость
			|;
			|
			|// Список новостей без повторений.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_ВсеНеподходящиеНовости.Новость КАК Новость,
			|	ЛОЖЬ                              КАК РезультатОтбора
			|ИЗ
			|	ВТ_ВсеНеподходящиеНовости
			|УПОРЯДОЧИТЬ ПО
			|	ВТ_ВсеНеподходящиеНовости.Новость
			|
			|";
		Запрос.УстановитьПараметр("КатегорияПродукт",         ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product"));
		Запрос.УстановитьПараметр("КатегорияВерсияПродукта",  ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
		Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion"));

		НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие.СоздатьНаборЗаписей();

			Результат = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_Общие()
			Если НЕ Результат.Пустой() Тогда
				НаборЗаписей.Загрузить(Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой));
			КонецЕсли;

		НаборЗаписей.Записать(Истина);

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			// Пересчитать отборы по всем пользователям.
			// Может работать в модели сервиса.
			ПересчитатьОтборыПоНовостям_Пользовательские(Неопределено);
		Иначе
			// Если есть пользовательские отборы, то после пересчета общих отборов необходимо пересчитать пользовательские отборы - они могли измениться.
			КоличествоОтборов = КоличествоНастроенныхОтборов(ПользователиКлиентСервер.ТекущийПользователь());
			Если (КоличествоОтборов.КоличествоПользовательскихОтборов > 0) Тогда
				// Пересчитать отборы по всем пользователям.
				// Может работать в модели сервиса.
				ПересчитатьОтборыПоНовостям_Пользовательские(Неопределено);
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистр сведений "РассчитанныеОтборыПоНовостям_Пользовательские".
// В этом регистре хранятся заранее рассчитанные результаты отборов по новостям по настроенным пользователем отборам,
//  за исключением отборов по категориям:
//  - Версия платформы;
//  - Версия конфигурации;
//  - Продукт (включает в себя Имя+Версия, поэтому тоже меняется);
//  которые рассчитываются и сохраняются в другом регистре.
// Этот регистр имеет смысл пересчитывать после получения новостей, после изменения отборов в справочнике
//  ЛентыНовостей (по всем пользователям), а также после настройки пользовательских отборов (для текущего пользователя).
//
// Параметры:
//  Пользователь - Неопределено, СправочникСсылка.Пользователи, Массив - пользователи, по которым необходимо пересчитать новости-исключения.
//                      Если Неопределено, то по всем.
//
Процедура ПересчитатьОтборыПоНовостям_Пользовательские(Пользователь = Неопределено) Экспорт

	ТипМассив = Тип("Массив");
	ТипПользователь = Тип("СправочникСсылка.Пользователи");
	ПропуститьПересчет = Ложь;

	УстановитьПривилегированныйРежим(Истина);

		// Пользовательские отборы уже должны быть приведены к корректному виду с помощью ОптимизироватьОтборыПоНовостям(),
		//  т.е. не должно быть отборов по категориям, которых нет в лентах новостей, количество отборов не должно
		//  быть шире, чем в общих отборах и т.п.

		// 1. Получить список пользователей, по которым установлены отборы.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&МетаВыбрать_ПолеДляМоделиСервиса,
			|	Рег.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
			|ГДЕ
			|	&МетаУсловиеОтбораПоПользователям
			|";
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
		КонецЕсли;
		Если (ТипЗнч(Пользователь) = ТипПользователь) И (НЕ Пользователь.Пустая()) Тогда
			// По одному пользователю.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеОтбораПоПользователям", "Рег.Пользователь = &Пользователь");
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
		ИначеЕсли ТипЗнч(Пользователь) = ТипМассив Тогда
			// По нескольким пользователям.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеОтбораПоПользователям", "Рег.Пользователь В (&МассивПользователей)");
			Запрос.УстановитьПараметр("МассивПользователей", Пользователь);
		Иначе
			// По всем пользователям.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеОтбораПоПользователям", "ИСТИНА");
		КонецЕсли;
		Результат = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_Пользовательские(), Получить список пользователей, по которым установлены отборы
		Если НЕ Результат.Пустой() Тогда
			МассивПользователей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Пользователь");
		Иначе
			// Пользовательские отборы не установлены - просто очистить предыдущий результат.
			ПропуститьПересчет = Истина;
		КонецЕсли;

		// 2. Очистить предыдущий результат расчета.
		Если (ТипЗнч(Пользователь) = ТипПользователь) И (НЕ Пользователь.Пустая()) Тогда
			// По одному пользователю.
			// Справочник Пользователи - разделенный, поэтому в модели сервиса не надо делать отбор по области данных.
			НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Пользователь"].Установить(Пользователь, Истина);
			НаборЗаписей.Записать(Истина);
		ИначеЕсли ТипЗнч(Пользователь) = ТипМассив Тогда
			// По одному пользователю.
			// Справочник Пользователи - разделенный, поэтому в модели сервиса не надо делать отбор по области данных.
			Для Каждого ТекущийПользователь Из Пользователь Цикл
				Если (ТипЗнч(ТекущийПользователь) = ТипПользователь) И (НЕ ТекущийПользователь.Пустая()) Тогда
					НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор["Пользователь"].Установить(ТекущийПользователь, Истина);
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// По всем пользователям.
			НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
			НаборЗаписей.Записать(Истина);
		КонецЕсли;

		// 3. Сформировать список новостей-исключений.
		Если ПропуститьПересчет <> Истина Тогда
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|// Из всех проверок необходимо исключить категории:
				|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы,
				|//  т.к. по ним существует отдельный расчет отборов, который хранится
				|//  в регистре сведений РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.
				|
				|//_________________________________________________________________________
				|// Оптимизация: исключить ленты новостей, по которым новости всегда видны.
				|
				|// Если у ленты новостей не настраиваются категории (табличная часть
				|//  ДоступныеКатегории пустая), то новости по этой ленте видны всегда.
				|// Если для ленты новостей не настроены общие отборы,
				|//  то новости по этой ленте видны всегда.
				|
				|// Список лент новостей, по которым не настраиваются категории.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Спр.Ссылка КАК ЛентаНовостей,
				|	КОЛИЧЕСТВО(Спр_ТЧ.КатегорияНовостей) КАК КоличествоКатегорий
				|ПОМЕСТИТЬ ВТ_ЛентыНовостейБезДоступныхОтборов
				|ИЗ
				|	Справочник.ЛентыНовостей КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	(
				|		ВЫБРАТЬ
				|			Спр.Ссылка КАК ЛентаНовостей,
				|			Спр.КатегорияНовостей КАК КатегорияНовостей
				|		ИЗ
				|			Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|		ГДЕ
				|			Спр.КатегорияНовостей <> &КатегорияПродукт
				|			И Спр.КатегорияНовостей <> &КатегорияВерсияПродукта
				|			И Спр.КатегорияНовостей <> &КатегорияВерсияПлатформы
				|	)  КАК Спр_ТЧ
				|	ПО
				|		Спр.Ссылка = Спр_ТЧ.ЛентаНовостей
				|СГРУППИРОВАТЬ ПО
				|	Спр.Ссылка
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(Спр_ТЧ.КатегорияНовостей) = 0
				|;
				|
				|//_______________________________________________________________________
				|// Пользовательские отборы.
				|
				|// Список всех пользователей, которые переданы как параметр и по которым настроены отборы.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&МетаВыбрать_ПолеДляМоделиСервиса_1,
				|	Рег.Пользователь КАК Пользователь
				|ПОМЕСТИТЬ
				|ВТ_Пользователи
				|ИЗ
				|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
				|ГДЕ
				|	Рег.Пользователь В (&Пользователи)
				|ИНДЕКСИРОВАТЬ ПО
				|	Рег.Пользователь
				|;
				|
				|// Все пользовательские отборы (за исключением лент новостей, по которым отборы не настраиваются
				|//  и за исключением категорий:
				|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы)
				|//  необходимо перемножить с категориями новостей по ленте новостей и категории.
				|//  Каждое совпадение значений категории оценивается как 1, несовпадение как 0.
				|//  Если хотя бы по одной категории (по пользователю и новости) итоговое количество совпадений = 0,
				|//  то новость не соответствует пользовательским отборам и должна попасть в исключения.
				|ВЫБРАТЬ
				|	&МетаВыбрать_ПолеДляМоделиСервиса_2,
				|	ВТ_Пользователи.Пользователь       КАК Пользователь,
				|	РегКатегории.Новость               КАК Новость,
				|	РегКатегории.Новость.ЛентаНовостей КАК ЛентаНовостей,
				|	РегКатегории.КатегорияНовостей     КАК КатегорияНовостей,
				|	ВЫБОР
				|		КОГДА РегКатегории.ЗначениеКатегорииНовостей = РегОтборы.ЗначениеКатегорииНовостей ТОГДА
				|			1
				|		ИНАЧЕ
				|			0
				|	КОНЕЦ КАК ЕстьСовпадение
				|ПОМЕСТИТЬ ВТ_СовпаденияЗначенийКатегорийНовостей
				|ИЗ
				|	ВТ_Пользователи
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейПростые КАК РегКатегории
				|	ПО
				|		ИСТИНА
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК РегОтборы
				|	ПО
				|		&МетаСоединение_ПолеДляМоделиСервиса_2 И
				|		ВТ_Пользователи.Пользователь = РегОтборы.Пользователь
				|		И РегКатегории.Новость.ЛентаНовостей = РегОтборы.ЛентаНовостей
				|		И РегКатегории.КатегорияНовостей = РегОтборы.КатегорияНовостей
				|ГДЕ
				|	РегКатегории.Новость.ЛентаНовостей НЕ В (
				|		ВЫБРАТЬ
				|			ВТ_ЛентыНовостейБезДоступныхОтборов.ЛентаНовостей
				|		ИЗ
				|			ВТ_ЛентыНовостейБезДоступныхОтборов
				|	)
				|	И РегКатегории.КатегорияНовостей <> &КатегорияПродукт
				|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПродукта
				|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПлатформы
				|;
				|
				|// Итоги по пользователям / новостям / категориям.
				|ВЫБРАТЬ
				|	&МетаВыбрать_ПолеДляМоделиСервиса_3,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.Пользователь          КАК Пользователь,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.Новость               КАК Новость,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.КатегорияНовостей     КАК КатегорияНовостей,
				|	СУММА(ВТ_СовпаденияЗначенийКатегорийНовостей.ЕстьСовпадение) КАК КоличествоСовпадений
				|ИЗ
				|	ВТ_СовпаденияЗначенийКатегорийНовостей
				|СГРУППИРОВАТЬ ПО
				|	&МетаСгруппировать_ПолеДляМоделиСервиса_3,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.Пользователь,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.Новость,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.КатегорияНовостей
				|ИМЕЮЩИЕ
				|	СУММА(ВТ_СовпаденияЗначенийКатегорийНовостей.ЕстьСовпадение) = 0
				|УПОРЯДОЧИТЬ ПО
				|	&МетаУпорядочить_ПолеДляМоделиСервиса_3,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.Пользователь,
				|	ВТ_СовпаденияЗначенийКатегорийНовостей.Новость
				|
				|";
			Запрос.УстановитьПараметр("КатегорияПродукт",         ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product"));
			Запрос.УстановитьПараметр("КатегорияВерсияПродукта",  ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
			Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion"));
			Запрос.УстановитьПараметр("Пользователи", МассивПользователей);

			// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_1,", "Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_2,", "ВТ_Пользователи.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_3,", "ВТ_СовпаденияЗначенийКатегорийНовостей.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСоединение_ПолеДляМоделиСервиса_2 И", "ВТ_Пользователи.ОбластьДанныхВспомогательныеДанные = РегОтборы.ОбластьДанныхВспомогательныеДанные И ");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса_3,", "ВТ_СовпаденияЗначенийКатегорийНовостей.ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса_3,", "ВТ_СовпаденияЗначенийКатегорийНовостей.ОбластьДанныхВспомогательныеДанные,");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_1,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_2,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_3,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСоединение_ПолеДляМоделиСервиса_2 И", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса_3,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса_3,", "");
			КонецЕсли;

			Результат = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_Пользовательские(), Сформировать список новостей-исключений
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл
					НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор["Пользователь"].Установить(Выборка.Пользователь, Истина);
					Пока Выборка.СледующийПоЗначениюПоля("Новость") Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
						Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
							НоваяЗапись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанныхВспомогательныеДанные;
						КонецЕсли;
						НоваяЗапись.Пользователь    = Выборка.Пользователь;
						НоваяЗапись.Новость         = Выборка.Новость;
						НоваяЗапись.РезультатОтбора = Ложь;
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				КонецЦикла;
			Иначе
				// Т.к. предварительно регистр уже был очищен. то ничего делать не нужно.
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры

// Процедура проверяет, была ли изменена версия платформы с момента последнего запуска и запускает необходимые процедуры.
//
// Параметры:
//  РезультатВыполнения - Строка - Результат выполнения проверки изменения версии платформы.
//
Процедура ПроверитьИзменениеВерсииПлатформы(РезультатВыполнения = "") Экспорт

	Если МонопольныйРежим() Тогда
		// Если база работает в монопольном режиме (например, запущено фоновое задание, которое включило монопольный режим
		//  и выгружает данные из области данных для последующей загрузки в модели сервиса),
		//  то будут ошибки при всех попытках записи данных в базу.
		// Поэтому в монопольном режиме не следует выполнять никаких обновлений в подсистеме новостей.
		РезультатВыполнения = НСтр("ru='В монопольном режиме проверка версии платформы не осуществляется'");
		Возврат;
	КонецЕсли;

	РезультатВыполнения = НСтр("ru='Сохраненная версия платформы: %СохраненнаяВерсияПлатформы%
		|Текущая версия платформы: %ТекущаяВерсияПлатформы%
		|%ТребуетсяОбновлениеРедкоменяющихсяОтборов%
		|
		|Версия конфигурации в этой обработке не проверяется, а пересчитывается принудительно в модуле обновления конфигурации, а также после каждого получения новостей.'");

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	ТипСтрока = Тип("Строка");

	УстановитьПривилегированныйРежим(Истина);

		// 1. Получить текущую версию платформы.
		лкСистемнаяИнформация = Новый СистемнаяИнформация;
		лкТекущаяВерсия = лкСистемнаяИнформация.ВерсияПриложения;

		// 2. Получить сохраненную ранее версию платформы.
		КлючОбъекта = "СистемнаяИнформация_ВерсияПриложения";
		лкПоследняяВерсия = ХранилищаНастроек.НастройкиНовостей.Загрузить(КлючОбъекта);

		Если (ТипЗнч(лкПоследняяВерсия) <> ТипСтрока) // Первый запуск
				ИЛИ СокрЛП(лкТекущаяВерсия) <> СокрЛП(лкПоследняяВерсия) Тогда // Или обновили платформу
			// 3. Рассчитать заново регистр "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся" для отборов
			//  по новостям по редко меняющимся категориям (версия конфигурации, платформы, продукт).
			// Запускать как фоновое задание, но предварительно проверить - не запускал ли кто уже это фоновое задание?
			МенеджерЗаданийАктивен = Истина;
			ИмяМетода = "ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся";
			Попытка
				МассивВыполняемыхФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода", ИмяМетода));
			Исключение
				// Менеджер заданий не активен.
				МенеджерЗаданийАктивен = Ложь;
			КонецПопытки;
			Если МенеджерЗаданийАктивен = Истина Тогда
				Если МассивВыполняемыхФоновыхЗаданий.Количество() = 0 Тогда
					МассивФоновыхЗаданий = Новый Массив;
					МассивФоновыхЗаданий.Добавить(ФоновыеЗадания.Выполнить(
						ИмяМетода,
						,
						"", // Ключ
						СтрШаблон(
							НСтр("ru='ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся в связи с изменением версии платформы с %1 на %2'"),
							лкПоследняяВерсия,
							лкТекущаяВерсия)));
					// Последняя версия платформы сохранится в "ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся".
				КонецЕсли;
				РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%ТребуетсяОбновлениеРедкоменяющихсяОтборов%", НСтр("ru='Редко меняющиеся отборы будут пересчитаны (запущено фоновое задание)'"));
			Иначе
				РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%ТребуетсяОбновлениеРедкоменяющихсяОтборов%", НСтр("ru='Редко меняющиеся отборы будут пересчитаны (явный запуск ПересчитатьОтборыПоНовостям_РедкоМеняющиеся())'"));
				ПересчитатьОтборыПоНовостям_РедкоМеняющиеся(); // здесь сохранится последняя версия платформы
			КонецЕсли;
			РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%СохраненнаяВерсияПлатформы%", лкПоследняяВерсия);
			РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%ТекущаяВерсияПлатформы%", лкТекущаяВерсия);

			// Сохранить в хранилище настроек текущую версию платформы.
			ХранилищаНастроек.НастройкиНовостей.Сохранить(
				КлючОбъекта,
				,
				лкТекущаяВерсия);

		Иначе
			РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%СохраненнаяВерсияПлатформы%", лкПоследняяВерсия);
			РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%ТекущаяВерсияПлатформы%", лкТекущаяВерсия);
			РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%ТребуетсяОбновлениеРедкоменяющихсяОтборов%", НСтр("ru='Редко меняющиеся отборы останутся как есть'"));
		КонецЕсли;

		// Сохранить дату последнего выполнения / обновления.
		Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = "Проверка версии платформы"; // Идентификатор.
		Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
		Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
		Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 6*60*60;
		Запись.Записать(Истина);

КонецПроцедуры

// Процедура удаляет из регистров сведений ОтборыПоЛентамНовостейОбщие и ОтборыПоЛентамНовостейПользовательские категории и
//   значения категорий, которые некорректны.
// Некорректными записями этих регистров считаются:
//  1. записи с категориями, которых нет в табличной части "ДоступныеКатегорииНовостей" в ленте новостей,
//  2. пользовательские отборы по категориям, по которым в ленте новостей установлен признак РазрешеноНастраиватьПользователям = Ложь,
//     (за исключением записей, у который реквизит УстановленоПрограммно = Истина);
//  3. пользовательские отборы, по значениям категорий, по которым уже установлен общий отбор,
//     а значения пользовательского отбора не входят в подмножество общего отбора
//     (например, общий отбор: География = Москва, Хабаровск, а пользователь установил География = Киев);
// Такие ситуации возможны, если:
//  а) со временем из какой-то ленты новостей удалили категории,
//  б) администратор со временем отключил пользователям возможность настраивать какие-то категории (но программно может задавать им отборы),
//  в) администратор со временем изменил общие отборы.
// Процедура должна вызываться после получения новостей.
// При работе в локальном режиме может запускаться без ограничений.
// При работе в модели сервиса:
//   - если запущена из неразделенного сеанса (фоновым заданием), то пересчитает и общие и пользовательские отборы;
//   - если запущена из разделенного сеанса (обработчик обновления каждой области данных), то пересчитает только пользовательские отборы.
//
// Параметры:
//  Нет.
//
Процедура ОптимизироватьОтборыПоНовостям() Экспорт

	ОптимизироватьОтборыПоНовостямОбщие = Истина;
	ОптимизироватьОтборыПоНовостямПользовательские = Истина;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ОптимизироватьОтборыПоНовостямОбщие = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ОптимизироватьОтборыПоНовостямОбщие = Истина Тогда
		// 1. Категории общего и пользовательского отборов должны присутствовать в табличной части "ДоступныеКатегорииНовостей" ленты новостей.
		// 2. Пользовательские отборы: не должно быть категорий, по которым в ленте новостей сброшен флаг РазрешеноНастраиватьПользователям.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			|// Доступные для отборов категории по лентам новостей.
			|ВЫБРАТЬ
			|	Спр.Ссылка                            КАК ЛентаНовостей,
			|	Спр.КатегорияНовостей                 КАК КатегорияНовостей,
			|	Спр.РазрешеноНастраиватьПользователям КАК РазрешеноНастраиватьПользователям
			|ПОМЕСТИТЬ ВТ_ДоступныеКатегорииДляОтборов
			|ИЗ
			|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
			|;
			|
			|// Записи для удаления из регистра сведений ОтборыПоЛентамНовостейОбщие.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Рег.ЛентаНовостей                      КАК ЛентаНовостей,
			|	Рег.КатегорияНовостей                  КАК КатегорияНовостей
			|ИЗ
			|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВТ_ДоступныеКатегорииДляОтборов
			|	ПО
			|		Рег.ЛентаНовостей       = ВТ_ДоступныеКатегорииДляОтборов.ЛентаНовостей
			|		И Рег.КатегорияНовостей = ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей
			|ГДЕ
			|	ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей ЕСТЬ NULL
			|СГРУППИРОВАТЬ ПО
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|УПОРЯДОЧИТЬ ПО
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|;
			|
			|// Записи для удаления из регистра сведений ОтборыПоЛентамНовостейПользовательские.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&МетаВыбрать_ПолеДляМоделиСервиса,
			|	Рег.ЛентаНовостей     КАК ЛентаНовостей,
			|	Рег.КатегорияНовостей КАК КатегорияНовостей
			|ИЗ
			|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВТ_ДоступныеКатегорииДляОтборов
			|	ПО
			|		Рег.ЛентаНовостей       = ВТ_ДоступныеКатегорииДляОтборов.ЛентаНовостей
			|		И Рег.КатегорияНовостей = ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей
			|ГДЕ
			|	ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей ЕСТЬ NULL // Нет такой категории
			|	ИЛИ
			|	(
			|		ВТ_ДоступныеКатегорииДляОтборов.РазрешеноНастраиватьПользователям = ЛОЖЬ // Запрещено настраивать пользователям вручную
			|		И Рег.УстановленоПрограммно = ЛОЖЬ // Установлено пользователем вручную (а не программно, например, регламентным заданием)
			|	)
			|СГРУППИРОВАТЬ ПО
			|	&МетаСгруппировать_ПолеДляМоделиСервиса,
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|УПОРЯДОЧИТЬ ПО
			|	&МетаУпорядочить_ПолеДляМоделиСервиса,
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|;
			|
			|";

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса,", "");
		КонецЕсли;

		Результаты = Запрос.ВыполнитьПакет();
		Если НЕ Результаты[1].Пустой() Тогда
			Выборка = Результаты[1].Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
				// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
					НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(Выборка.ОбластьДанныхВспомогательныеДанные, Истина);
				КонецЕсли;
				НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
				НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;

		Если НЕ Результаты[2].Пустой() Тогда
			Выборка = Результаты[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
				// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
					НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(Выборка.ОбластьДанныхВспомогательныеДанные, Истина);
				КонецЕсли;
				НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
				НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ОптимизироватьОтборыПоНовостямПользовательские = Истина Тогда
		// 3. Пользовательские отборы: не должно быть значений, которых нет в списке общего отбора (в случае, если общий отбор включен).
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			|// Количество общих отборов по каждой категории.
			|// Если отборов нет, то пользователю разрешено отбирать по любым значениям.
			|// Если есть хотя бы один общий отбор, то пользователь может выбирать только из указанных в общем отборе значений.
			|ВЫБРАТЬ
			|	Спр.Ссылка            КАК ЛентаНовостей,
			|	Спр.КатегорияНовостей КАК КатегорияНовостей,
			|	СУММА(
			|		ВЫБОР
			|			КОГДА Рег.ЗначениеКатегорииНовостей ЕСТЬ NULL ТОГДА
			|				0
			|			ИНАЧЕ
			|				1
			|		КОНЕЦ
			|	)                     КАК Количество
			|ПОМЕСТИТЬ ВТ_КоличествоОбщихОтборовПоКатегориям
			|ИЗ
			|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
			|	ПО
			|		Спр.Ссылка = Рег.ЛентаНовостей
			|		И Спр.КатегорияНовостей = Рег.КатегорияНовостей
			|СГРУППИРОВАТЬ ПО
			|	Спр.Ссылка,
			|	Спр.КатегорияНовостей
			|;
			|
			|// Найти значения пользовательских отборов, которых нет в общих отборах (при условии, что общий отбор вообще включен).
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&МетаВыбрать_ПолеДляМоделиСервиса,
			|	Спр.ЛентаНовостей                         КАК ЛентаНовостей,
			|	Спр.КатегорияНовостей                     КАК КатегорияНовостей,
			|	РегПользователь.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
			|ИЗ
			|	ВТ_КоличествоОбщихОтборовПоКатегориям КАК Спр
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК РегПользователь
			|	ПО
			|		Спр.ЛентаНовостей = РегПользователь.ЛентаНовостей
			|		И Спр.КатегорияНовостей = РегПользователь.КатегорияНовостей
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК РегОбщий
			|	ПО
			|		Спр.ЛентаНовостей = РегОбщий.ЛентаНовостей
			|		И Спр.КатегорияНовостей = РегОбщий.КатегорияНовостей
			|		И РегПользователь.ЗначениеКатегорииНовостей = РегОбщий.ЗначениеКатегорииНовостей
			|ГДЕ
			|	Спр.Количество > 0
			|	И РегОбщий.ЗначениеКатегорииНовостей ЕСТЬ NULL
			|	И НЕ РегПользователь.ЗначениеКатегорииНовостей ЕСТЬ NULL
			|СГРУППИРОВАТЬ ПО
			|	&МетаСгруппировать_ПолеДляМоделиСервиса,
			|	Спр.ЛентаНовостей,
			|	Спр.КатегорияНовостей,
			|	РегПользователь.ЗначениеКатегорииНовостей
			|";

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
				// АдминистраторСистемы или фоновое задание (пустой пользователь).
				И ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
				// АдминистраторСистемы или фоновое задание (пустой пользователь) НЕ вошли в область данных.
				И НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "РегПользователь.ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса,", "РегПользователь.ОбластьДанныхВспомогательныеДанные,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса,", "");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // ОптимизироватьОтборыПоНовостям()
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
				// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
						// АдминистраторСистемы или фоновое задание (пустой пользователь).
						И ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
						// АдминистраторСистемы или фоновое задание (пустой пользователь) НЕ вошли в область данных.
						И НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
					НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(Выборка.ОбластьДанныхВспомогательныеДанные, Истина);
				КонецЕсли;
				НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
				НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
				НаборЗаписей.Отбор["ЗначениеКатегорииНовостей"].Установить(Выборка.ЗначениеКатегорииНовостей, Истина);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// 4. Категории в новостях, которых нет в списке доступных в ленте новостей.
	// Новости на клиенте не должны отличаться от новостей в новостном центре.
	// Возможна ситуация, когда новость уже загружена, а лента новостей не обновлена
	//  (а в ленте новостей добавилась новая доступная категория). И новая категория из новости будет удалена.
	// Поэтому категории в уже загруженных новостях не трогать - они будут "отрезаться" в запросе при фильтрации по категориям.
	// Тем более, в случае изменения новости на клиенте, она останется измененной до тех пор,
	//  пока ее не переопубликуют в Новостном центре (т.е. с большой вероятностью останется измененной навсегда).

КонецПроцедуры

// Функция возвращает структуру с количеством настроенных пользовательских и административных (общих) отборов.
// Если пользовательские отборы не заданы, то необходимо проверять только административные отборы.
// Если административные (общие) отборы не заданы, то можно показывать все новости.
// Это позволит оптимизировать быстродействие запросы выборки новостей (не накладывая лишних условий).
// В количество отборов не попадают отборы по Продукту, Версии Продукта и Версии платформы, т.к. по ним есть отдельный регистр сведений.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - (необязательное) Пользователь, по которому необходимо проверить пользовательский отбор.
//                 Если не задано, то текущий пользователь.
//
// Возвращаемое значение:
//   Структура - Структура с ключами "КоличествоОбщихОтборов", "КоличествоПользовательскихОтборов".
//
Функция КоличествоНастроенныхОтборов(Пользователь = Неопределено)

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Результат = Новый Структура("КоличествоОбщихОтборов, КоличествоПользовательскихОтборов", 0, 0);

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// Общие отборы.
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоличествоОбщихОтборов
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
		|ГДЕ
		|	Рег.КатегорияНовостей <> &КатегорияПродукт
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПродукта
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПлатформы
		|;
		|
		|// Пользовательские отборы.
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоличествоПользовательскихОтборов
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
		|ГДЕ
		|	Рег.Пользователь = &Пользователь
		|	И Рег.КатегорияНовостей <> &КатегорияПродукт
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПродукта
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПлатформы
		|";

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	// Вне зависимости, найдутся ли такие категории или нет, поместить их в параметры запроса.
	Запрос.УстановитьПараметр("КатегорияПродукт",         ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product"));
	Запрос.УстановитьПараметр("КатегорияВерсияПродукта",  ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
	Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion"));

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		Выборка = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат.Вставить("КоличествоОбщихОтборов", Выборка.КоличествоОбщихОтборов);
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		Выборка = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат.Вставить("КоличествоПользовательскихОтборов", Выборка.КоличествоПользовательскихОтборов);
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура сбрасывает все настройки всех пользователей при повторном получении (перепубликации) новости.
// В случае работы в неразделенном режиме  - для всех пользователей.
// В случае работы в разделенном режиме - для всех пользователей всех областей данных.
//
// Параметры:
//  НовостьСсылка - СправочникСсылка.Новости - Ссылка на новость.
//
Процедура СбросСостоянияНовостиДляВсехПользователей(НовостьСсылка) Экспорт

	УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	&МетаВыбрать_ПолеДляМоделиСервиса,
			|	Рег.Пользователь                       КАК Пользователь,
			|	Рег.Новость                            КАК Новость,
			|	Рег.Прочтена                           КАК Прочтена,
			|	Рег.Пометка                            КАК Пометка,
			|	Рег.ОповещениеВключено                 КАК ОповещениеВключено,
			|	Рег.ДатаНачалаОповещения               КАК ДатаНачалаОповещения,
			|	Рег.УдаленаИзСпискаНовостей            КАК УдаленаИзСпискаНовостей
			|ИЗ
			|	РегистрСведений.СостоянияНовостей КАК Рег
			|ГДЕ
			|	Рег.Новость = &Новость
			|УПОРЯДОЧИТЬ ПО
			|	&МетаУпорядочить_ПолеДляМоделиСервиса,
			|	Рег.Новость,
			|	Рег.Пользователь
			|";
		Запрос.УстановитьПараметр("Новость", НовостьСсылка);

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "0 КАК ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса,", "ОбластьДанныхВспомогательныеДанные,");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // СбросСостоянияНовостиДляВсехПользователей()
		Если НЕ Результат.Пустой() Тогда
			// Обработка записей.
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.СледующийПоЗначениюПоля("ОбластьДанныхВспомогательныеДанные") Цикл
				// В области данных для всех пользователей сбросить настройки.
				Пока Выборка.СледующийПоЗначениюПоля("Новость") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл
						Если (Выборка.Прочтена <> Ложь)
								ИЛИ (Выборка.ОповещениеВключено <> Истина)
								ИЛИ (Выборка.УдаленаИзСпискаНовостей <> Ложь) Тогда
							Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
							ЗаполнитьЗначенияСвойств(Запись, Выборка);
							Запись.Прочтена                = Ложь;
							Запись.ОповещениеВключено      = Истина;
							Запись.УдаленаИзСпискаНовостей = Ложь;
							Запись.Записать(Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

КонецПроцедуры

// Процедура анализирует регистр сведений ДатыЗагрузкиПоследнихНовостей, и если по ленте новостей были проблемы
//  с получением новостей, то в этой ленте новостей будет создана специальная новость с предложением
//  отключить ленту новостей из автоматического обновления, чтобы не генерировать ненужный трафик или не заставлять
//  сервер подвисать при обращении на несуществующий адрес.
// Новость о ошибке имеет фиксированный УИН - 6588f3f9-d569-478f-a370-7cd75d833966.
//
// Параметры:
//  Нет.
//
Процедура НайтиИОбработатьНеактивныеЛентыНовостей() Экспорт

	Перем РезультатВыполнения, РезультатВыполнения_ЛентаНовостей;

	РезультатВыполнения = "";

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало проверки лент новостей на актуальность
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Новости. Сервис и регламент. НайтиИОбработатьНеактивныеЛентыНовостей. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// Неактивной считается лента новостей, по которой накопилось > 10 неудачных попыток получения файла новостей
	//  и последнее успешное получение было > суток назад.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.ЛентаНовостей                        КАК ЛентаНовостей,
		|	Рег.ЛентаНовостей.Протокол               КАК ЛентаНовостейПротокол,
		|	Рег.ЛентаНовостей.Сайт                   КАК ЛентаНовостейСайт,
		|	Рег.ЛентаНовостей.ИмяФайла               КАК ЛентаНовостейИмяФайла,
		|	Рег.ЛентаНовостей.ЧастотаОбновления      КАК ЛентаНовостейЧастотаОбновления,
		|	Рег.ДатаЗагрузкиПоследнихНовостей        КАК ДатаЗагрузкиПоследнихНовостей,
		|	Рег.КоличествоНеудачПриЗагрузкеНовостей  КАК КоличествоНеудачПриЗагрузкеНовостей,
		|	Рег.ДатаПоследнейПопыткиЗагрузкиНовостей КАК ДатаПоследнейПопыткиЗагрузкиНовостей,
		|	ВЫБОР
		|		КОГДА (Рег.КоличествоНеудачПриЗагрузкеНовостей > 10)
		|				И (Рег.ДатаЗагрузкиПоследнихНовостей < &СуткиНазад) ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ                                    КАК ЛентаНовостейАктивна
		|ИЗ
		|	РегистрСведений.ДатыЗагрузкиПоследнихНовостей КАК Рег
		|ГДЕ
		|	Рег.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Помеченные на удаление и так не обновляются
		|	И Рег.ЛентаНовостей.ЧастотаОбновления > 0 // Частота обновления - НЕ вручную
		|";
	Запрос.УстановитьПараметр("СуткиНазад", ТекущаяУниверсальнаяДата() - 1*24*60*60);

	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда

		УстановитьПривилегированныйРежим(Истина);

			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				// Обновлять только вручную(0), Редко (один раз в день)(1), Часто (каждый час)(2), Очень часто (каждые 15 минут)(3), Каждую минуту(4).
				Если Выборка.ЛентаНовостейЧастотаОбновления = 0 Тогда
					лкЧастотаОбновления = НСтр("ru='вручную (0)'");
				ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 1 Тогда
					лкЧастотаОбновления = НСтр("ru='один раз в день (1)'");
				ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 2 Тогда
					лкЧастотаОбновления = НСтр("ru='каждый час (2)'");
				ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 3 Тогда
					лкЧастотаОбновления = НСтр("ru='каждые 15 минут (3)'");
				ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 4 Тогда
					лкЧастотаОбновления = НСтр("ru='каждую минуту (4)'");
				Иначе
					лкЧастотаОбновления = СтрШаблон(
						НСтр("ru='неопределено (%1)'"),
						Строка(Выборка.ЛентаНовостейЧастотаОбновления));
				КонецЕсли;

				РезультатВыполнения_ЛентаНовостей = НСтр("ru='Лента новостей %ЛентаНовостей%, частота обновления ленты новостей: %ЧастотаОбновления%, дата последней успешной загрузки: %ДатаЗагрузкиПоследнихНовостей%, неудач: %КоличествоНеудачПриЗагрузкеНовостей%, последняя попытка загрузки: %ДатаПоследнейПопыткиЗагрузкиНовостей%. %Действие%'");
				РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
					РезультатВыполнения_ЛентаНовостей,
					"%ЛентаНовостей%",
					Выборка.ЛентаНовостей);
				РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
					РезультатВыполнения_ЛентаНовостей,
					"%ДатаЗагрузкиПоследнихНовостей%",
					?(Выборка.ДатаЗагрузкиПоследнихНовостей = '00010101',
						НСтр("ru='(никогда)'"),
						Формат(МестноеВремя(Выборка.ДатаЗагрузкиПоследнихНовостей),"ДЛФ=DT")));
				РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
					РезультатВыполнения_ЛентаНовостей,
					"%КоличествоНеудачПриЗагрузкеНовостей%",
					Выборка.КоличествоНеудачПриЗагрузкеНовостей);
				РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
					РезультатВыполнения_ЛентаНовостей,
					"%ДатаПоследнейПопыткиЗагрузкиНовостей%",
					Формат(МестноеВремя(Выборка.ДатаПоследнейПопыткиЗагрузкиНовостей),"ДЛФ=DT"));
				РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
					РезультатВыполнения_ЛентаНовостей,
					"%ЧастотаОбновления%",
					лкЧастотаОбновления);

				// Для активной ленты новостей (вдруг "заработала") - удалить новость о неактивности.
				// Для НЕактивной ленты новостей - создать / обновить новость о неактивности.
				СтруктураНовости = ОбработкаНовостейПовтИсп.ПолучитьСсылкуНаНовость(
					Выборка.ЛентаНовостей,
					"6588f3f9-d569-478f-a370-7cd75d833966");
				Если Выборка.ЛентаНовостейАктивна = Истина Тогда
					// Найти новость. Если она есть - пометить на удаление.
					Если СтруктураНовости.Ссылка.Пустая() Тогда
						// Новости и нет - ничего делать не надо.
						РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей активна, новости о неактивности нет'"));
					ИначеЕсли СтруктураНовости.ПометкаУдаления = Истина Тогда
						// Новость была создана, но сейчас помечена на удаление - ничего делать не надо.
						РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей активна, новость о неактивности уже была помечена на удаление'"));
					Иначе
						// Пометить найденную новость на удаление.
						НовостьОбъект = СтруктураНовости.Ссылка.ПолучитьОбъект();
						НовостьОбъект.УстановитьПометкуУдаления(Истина);
						РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей активна, новость о неактивности будет помечена на удаление'"));
					КонецЕсли;
				Иначе
					// Найти новость и обновить. Если ее нет - создать и заполнить.
					Если СтруктураНовости.Ссылка.Пустая() Тогда
						НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
						РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей НЕактивна, новость о неактивности будет создана'"));
					Иначе
						НовостьОбъект = СтруктураНовости.Ссылка.ПолучитьОбъект();
						РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей НЕактивна, новость о неактивности будет обновлена'"));
					КонецЕсли;

					ТекстНовости = "Невозможно получить новости по ленте новостей %ЛентаНовостей%<br/>
						|Адрес (URL), по которому получаются новости: <a href=""%URL%"" title=""Нажмите для открытия списка новостей в браузере"">%URL%</a><br/>
						|<br/>
						|Последнее удачное получение новостей: %ДатаЗагрузкиПоследнихНовостей%<br/>
						|С тех пор было %КоличествоНеудачПриЗагрузкеНовостей% неудачных попыток (частота обновления ленты новостей: %ЧастотаОбновления%), последняя такая попытка была: %ДатаПоследнейПопыткиЗагрузкиНовостей%<br/>
						|<br/>
						|<!-- Текст для администраторов --><br/>
						|";
					ТекстНовости = СтрЗаменить(ТекстНовости, "%ЛентаНовостей%", Выборка.ЛентаНовостей);
					ТекстНовости = СтрЗаменить(ТекстНовости,
						"%ДатаЗагрузкиПоследнихНовостей%",
						Формат(МестноеВремя(Выборка.ДатаЗагрузкиПоследнихНовостей),"ДЛФ=DT"));
					ТекстНовости = СтрЗаменить(ТекстНовости, "%КоличествоНеудачПриЗагрузкеНовостей%", Выборка.КоличествоНеудачПриЗагрузкеНовостей);
					ТекстНовости = СтрЗаменить(ТекстНовости, "%ЧастотаОбновления%", лкЧастотаОбновления);
					ТекстНовости = СтрЗаменить(ТекстНовости,
						"%ДатаПоследнейПопыткиЗагрузкиНовостей%",
						Формат(МестноеВремя(Выборка.ДатаПоследнейПопыткиЗагрузкиНовостей),"ДЛФ=DT"));
					ТекстНовости = СтрЗаменить(ТекстНовости,
						"%URL%",
						ОбработкаНовостейПовтИсп.ПолучитьАдресДляПолученияНовостей(
							Новый Структура("Ссылка, Протокол, Сайт, ИмяФайла",
								Выборка.ЛентаНовостей,
								Выборка.ЛентаНовостейПротокол,
								Выборка.ЛентаНовостейСайт,
								Выборка.ЛентаНовостейИмяФайла),
							Выборка.ДатаЗагрузкиПоследнихНовостей,
							?(Выборка.КоличествоНеудачПриЗагрузкеНовостей = 0, Выборка.ДатаПоследнейПопыткиЗагрузкиНовостей, '00010101')));

					НовостьОбъект.ПометкаУдаления                    = Ложь;
					НовостьОбъект.Наименование                       = НСтр("ru='Лента новостей неактивна'");
					НовостьОбъект.Подзаголовок                       = НСтр("ru='Лента новостей неактивна. Рекомендуется исключить ее из автообновления'");
					НовостьОбъект.ЛентаНовостей                      = Выборка.ЛентаНовостей;
					НовостьОбъект.УИННовости                         = "6588f3f9-d569-478f-a370-7cd75d833966";
					НовостьОбъект.ДатаПубликации                     = ТекущаяУниверсальнаяДата();
					НовостьОбъект.СкрыватьВОбщемСпискеНовостей       = Ложь;
					НовостьОбъект.ДатаЗавершения                     = ТекущаяУниверсальнаяДата() + 1*24*60*60; // Через 1 день
					НовостьОбъект.ТекстНовостиДляВнешнихИсточников   = "";
					НовостьОбъект.СсылкаНаПолныйТекстНовости         = "";
					НовостьОбъект.Важность                           = 0; // Обычная
					НовостьОбъект.ДатаСбросаВажности                 = '00010101';
					НовостьОбъект.АвтоСбросНапоминанияПриПрочтении   = Истина;
					НовостьОбъект.ПриОткрытииСразуПереходитьПоСсылке = Ложь;
					НовостьОбъект.ТекстНовости                       = ТекстНовости;
					НовостьОбъект.Действия.Очистить();
					НовостьОбъект.ПараметрыДействий.Очистить();
					НовостьОбъект.ПривязкаКМетаданным.Очистить();
					НовостьОбъект.БинарныеДанные.Очистить();
					Отказ = Ложь;
					ОбработкаНовостейПереопределяемый.ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей(Выборка.ЛентаНовостей, НовостьОбъект, Отказ);
					Если Отказ <> Истина Тогда
						Попытка
							НовостьОбъект.Записать();
						Исключение
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ТекстСообщения = НСтр("ru='Произошла ошибка при создании / обновлении новости о неактивности ленты новостей %ЛентаНовостей%
								|Подробно:
								|%ИнформацияОбОшибке%
								|'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", Выборка.ЛентаНовостей);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
							ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
								НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
								НСтр("ru='Новости. Сервис и регламент. НайтиИОбработатьНеактивныеЛентыНовостей. Ошибка'"), // ИдентификаторШага
								УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
								, // ОбъектМетаданных
								, // Данные
								ТекстСообщения, // Комментарий
								ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
						КонецПопытки;
					Иначе
						РезультатВыполнения_ЛентаНовостей = РезультатВыполнения_ЛентаНовостей + Символы.ПС + НСтр("ru='Отменено создание / изменение новости про отсутствие активности для ленты новостей'");
					КонецЕсли;
				КонецЕсли;
				РезультатВыполнения = РезультатВыполнения + РезультатВыполнения_ЛентаНовостей + Символы.ПС;
			КонецЦикла;

		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Окончание проверки лент новостей на актуальность.
		|Лента новостей считается НЕактуальной, если по ней было более 10 неудачных попыток получения новостей и последняя удачная попытка была более суток назад.
		|
		|Результат выполнения:
		|%РезультатВыполнения%
		|
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Новости. Сервис и регламент. НайтиИОбработатьНеактивныеЛентыНовостей. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура-обработчик события перед записью элемента справочника Пользователи.
// Определяет разные параметры:
//  - что записывается новый пользователь;
//  - реквизиты пользователя ДО записи (Недействителен, Служебный, Подготовлен, ИдентификаторПользователяИБ, ИдентификаторПользователяСервиса);
// и передает эту информацию дальше, в подписку на событие "ПриЗаписи".
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи - записываемый объект;
//  Отказ              - Булево - установить в Истина, если надо отменить запись.
//
Процедура ПередЗаписьюПользователя(ПользовательОбъект, Отказ) Экспорт

	// Если происходит загрузка данных, то выйти из обработчика.
	Если ПользовательОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПользовательОбъект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ПользовательОбъект.ЭтоНовый());
	Если ПользовательОбъект.ЭтоНовый() Тогда
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Недействителен", ПользовательОбъект.Недействителен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Служебный", ПользовательОбъект.Служебный);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Подготовлен", ПользовательОбъект.Подготовлен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяИБ", ПользовательОбъект.ИдентификаторПользователяИБ);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяСервиса", ПользовательОбъект.ИдентификаторПользователяСервиса);
	Иначе
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Недействителен", ПользовательОбъект.Ссылка.Недействителен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Служебный", ПользовательОбъект.Ссылка.Служебный);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Подготовлен", ПользовательОбъект.Ссылка.Подготовлен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяИБ", ПользовательОбъект.Ссылка.ИдентификаторПользователяИБ);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяСервиса", ПользовательОбъект.Ссылка.ИдентификаторПользователяСервиса);
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик события при записи элемента справочника Пользователи.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи - записываемый объект;
//  Отказ              - Булево - установить в Истина, если надо отменить запись.
//
Процедура ПриЗаписиПользователя(ПользовательОбъект, Отказ) Экспорт

	// Если происходит загрузка данных, то выйти из обработчика.
	Если ПользовательОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ЭтоНовыйПользователь = Ложь;

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи") Тогда

		Если ТипЗнч(ПользовательОбъект.ДополнительныеСвойства) = ТипСтруктура Тогда
			Если ПользовательОбъект.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект")
					И ПользовательОбъект.ДополнительныеСвойства.ЭтоНовыйОбъект = Истина Тогда
				ЭтоНовыйПользователь = Истина;
			КонецЕсли;
		КонецЕсли;

		// Выполнить какие-то специфические действия при записи пользователя.
		ОбработкаНовостейПереопределяемый.ОбработатьЗаписьПользователя(ПользовательОбъект, ЭтоНовыйПользователь, Отказ);

	КонецЕсли;

КонецПроцедуры

// Процедура включает / отключает регламентное задание.
//
// Параметры:
//  Использовать - Булево - Ложь - отключить использование регламентного задания, Истина - включить, иначе - без изменений.
//
Процедура ИзменитьИспользованиеРегламентныхЗаданий(Использовать) Экспорт

	ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей);
	Если ТекущееРегламентноеЗадание <> Неопределено Тогда
		Записывать = Истина;
		Если Использовать = Истина Тогда
			ТекущееРегламентноеЗадание.Использование = Истина;
		ИначеЕсли Использовать = Ложь Тогда
			ТекущееРегламентноеЗадание.Использование = Ложь;
		Иначе
			Записывать = Ложь;
			ТекстСообщения = СтрШаблон(
				НСтр("ru='ОбработкаНовостей.ИзменитьИспользованиеРегламентныхЗаданий:
					|в параметре Использовать передано значение неправильного типа: %1'"),
				ТипЗнч(Использовать));
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. ИзменениеИспользованияРегламентныхЗаданий'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		КонецЕсли;
		Если Записывать = Истина Тогда
			ТекущееРегламентноеЗадание.Записать();
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='Не найдено предопределенное регламентное задание ВсеОбновленияНовостей.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. ИзменениеИспользованияРегламентныхЗаданий'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УдалениеНовостей

// Функция подготавливает список данных для удаления.
//
// Параметры:
//  ТекущаяДатаДляРасчетов - Дата - текущая дата, относительно которой необходимо рассчитывать интервал удаляемых данных;
//  Отборы  - Структура - отборы удаляемых данных. Структура с ключами:
//             * Актуальные - если ИСТИНА, то удалять актуальные новости;
//             * Неактуальные - если ИСТИНА, то удалять НЕактуальные новости;
//             * ПомеченныеНаУдаление - если ИСТИНА, то удалять помеченные на удаление новости;
//             * СтараяВерсия - если ИСТИНА, то удалять новости для старых версий платформы или конфигурации.
//
// Возвращаемое значение:
//   Структура - Структура удаляемых данных с ключами:
//     * НовостиДляУдаления - Массив ссылок на удаляемые новости;
//     * НовостиДляУстановкиПометкиУдаления - Массив ссылок на новости, которые будут помечены на удаление;
//     * КатегорииНовостейПростыеНеобработанные - массив структур с измерениями регистра сведений КатегорииНовостейПростыеНеобработанные:
//       ** КатегорияНовостейСтрока;
//       ** ЗначениеКатегорииНовостейСтрока;
//       ** ЛентаНовостей;
//       ** УИННовости.
//     * КатегорииНовостейИнтервалыВерсийНеобработанные - массив структур с измерениями регистра сведений КатегорииНовостейИнтервалыВерсийНеобработанные:
//       ** КатегорияНовостейСтрока;
//       ** ЛентаНовостей;
//       ** УИННовости;
//       ** Продукт;
//       ** ВерсияОТ;
//       ** ВерсияДО.
//
Функция УдалениеНовостей_ПолучитьСписокДанныхДляУдаления(ТекущаяДатаДляРасчетов, Отборы)

	Результат = Новый Структура("НовостиДляУдаления, НовостиДляУстановкиПометкиУдаления, КатегорииНовостейПростыеНеобработанные, КатегорииНовостейИнтервалыВерсийНеобработанные",
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив);

	// 1. Подготовить параметры.
	// 1.1. Даты.
	НастройкиАвтоудаленияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиАвтоудаленияНовостей",
		"");
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Актуальные_Месяцев = 0) ИЛИ (Отборы.Актуальные = Ложь) Тогда
		УдалятьАктуальныеОт = '00010101';
	Иначе
		УдалятьАктуальныеОт = ДобавитьМесяц(ТекущаяДатаДляРасчетов, -НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Актуальные_Месяцев);
	КонецЕсли;
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Неактуальные_Дней = 0) ИЛИ (Отборы.Неактуальные = Ложь) Тогда
		УдалятьНеактуальныеОт = '00010101';
	Иначе
		УдалятьНеактуальныеОт = ТекущаяДатаДляРасчетов - НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Неактуальные_Дней * 24 * 60 * 60;
	КонецЕсли;
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней = 0) ИЛИ (Отборы.ПомеченныеНаУдаление = Ложь) Тогда
		УдалятьПомеченныеНаУдалениеОт = '00010101';
	Иначе
		УдалятьПомеченныеНаУдалениеОт = ТекущаяДатаДляРасчетов - НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней * 24 * 60 * 60;
	КонецЕсли;
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_СтараяВерсия_Дней = 0) ИЛИ (Отборы.СтараяВерсия = Ложь) Тогда
		УдалятьСтарыеВерсииОт = '00010101';
	Иначе
		УдалятьСтарыеВерсииОт = ТекущаяДатаДляРасчетов - НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_СтараяВерсия_Дней * 24 * 60 * 60;
	КонецЕсли;

	// 1.2. Текущая версия.
	// Значения предопределенных категорий.
	ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
	ВерсияПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы
	ВерсияПродукта  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"); // Только полная версия продукта

	// Запрос к новостям.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|// 0. Старые версии платформы.
		|ВЫБРАТЬ
		|	Рег.Новость КАК Новость,
		|	МИНИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПлатформы
		|				ТОГДА 1
		|			ИНАЧЕ 2
		|		КОНЕЦ
		|	)           КАК ЕстьСтараяВерсия
		|ПОМЕСТИТЬ ВТ_Новости_СтарыеВерсииПлатформы
		|ИЗ
		|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
		|ГДЕ
		|	Рег.Новость.ПометкаУдаления = ЛОЖЬ
		|	И Рег.КатегорияНовостей.Код = ""PlatformVersion""
		|	И Рег.Продукт = ""Platform""
		|
		|СГРУППИРОВАТЬ ПО
		|	Рег.Новость
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПлатформы
		|				ТОГДА 1
		|			ИНАЧЕ 2
		|		КОНЕЦ
		|	) = 1
		|;
		|
		|// 1. Старые версии конфигурации.
		|ВЫБРАТЬ
		|	Рег.Новость КАК Новость,
		|	МИНИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПродукта
		|				ТОГДА 1
		|			ИНАЧЕ 2
		|		КОНЕЦ
		|	)           КАК ЕстьСтараяВерсия
		|ПОМЕСТИТЬ ВТ_Новости_СтарыеВерсииПродукта
		|ИЗ
		|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
		|ГДЕ
		|	Рег.Новость.ПометкаУдаления = ЛОЖЬ
		|	И Рег.КатегорияНовостей.Код = ""ProductVersion""
		|	И Рег.Продукт = &ИмяКонфигурации
		|
		|СГРУППИРОВАТЬ ПО
		|	Рег.Новость
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПродукта
		|				ТОГДА 1
		|			ИНАЧЕ 2
		|		КОНЕЦ
		|	) = 1
		|;
		|
		|// 2. Все новости для удаления.
		|// Помеченные на удаление новости.
		|ВЫБРАТЬ
		|	""Удаление помеченных"" КАК Причина,
		|	Спр.Ссылка              КАК Новость,
		|	Спр.ЛентаНовостей       КАК ЛентаНовостей,
		|	Спр.УИННовости          КАК УИННовости
		|ПОМЕСТИТЬ ВТ_НовостиДляУдаления
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ИСТИНА
		|		И Спр.ДатаПубликации <= &УдалятьПомеченныеНаУдалениеОт
		|;
		|
		|// 3. Все новости для установки пометки удаления.
		|// Неактуальные новости.
		|ВЫБРАТЬ
		|	""Неактуальная""  КАК Причина,
		|	Спр.Ссылка        КАК Новость,
		|	Спр.ЛентаНовостей КАК ЛентаНовостей,
		|	Спр.УИННовости    КАК УИННовости
		|ПОМЕСТИТЬ ВТ_НовостиДляУстановкиПометкиУдаления
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|		И Спр.ДатаЗавершения <= &УдалятьНеактуальныеОт
		|		И Спр.ДатаЗавершения > &ПустаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Актуальные новости.
		|ВЫБРАТЬ
		|	""Актуальная""    КАК Причина,
		|	Спр.Ссылка        КАК Новость,
		|	Спр.ЛентаНовостей КАК ЛентаНовостей,
		|	Спр.УИННовости    КАК УИННовости
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|		И Спр.ДатаПубликации < &УдалятьАктуальныеОт
		|		И Спр.ДатаЗавершения = &ПустаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Старые версии платформы.
		|ВЫБРАТЬ
		|	""Старая версия платформы""                            КАК Причина,
		|	ВТ_Новости_СтарыеВерсииПлатформы.Новость               КАК Новость,
		|	ВТ_Новости_СтарыеВерсииПлатформы.Новость.ЛентаНовостей КАК ЛентаНовостей,
		|	ВТ_Новости_СтарыеВерсииПлатформы.Новость.УИННовости    КАК УИННовости
		|ИЗ
		|	ВТ_Новости_СтарыеВерсииПлатформы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Старые версии продукта.
		|ВЫБРАТЬ
		|	""Старая версия продукта""                            КАК Причина,
		|	ВТ_Новости_СтарыеВерсииПродукта.Новость               КАК Новость,
		|	ВТ_Новости_СтарыеВерсииПродукта.Новость.ЛентаНовостей КАК ЛентаНовостей,
		|	ВТ_Новости_СтарыеВерсииПродукта.Новость.УИННовости    КАК УИННовости
		|ИЗ
		|	ВТ_Новости_СтарыеВерсииПродукта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЛентаНовостей,
		|	УИННовости
		|;
		|
		|// 4. Основной запрос к новостям для удаления.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НовостиДляУдаления.Новость
		|ИЗ
		|	ВТ_НовостиДляУдаления
		|;
		|
		|// 5. Основной запрос к новостям для установки пометки удаления.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НовостиДляУстановкиПометкиУдаления.Новость
		|ИЗ
		|	ВТ_НовостиДляУстановкиПометкиУдаления
		|;
		|
		|// 6. Основной запрос к вспомогательным данным (КатегорииНовостейПростыеНеобработанные).
		|ВЫБРАТЬ
		|	Рег.КатегорияНовостейСтрока         КАК КатегорияНовостейСтрока,
		|	Рег.ЗначениеКатегорииНовостейСтрока КАК ЗначениеКатегорииНовостейСтрока,
		|	Рег.ЛентаНовостей                   КАК ЛентаНовостей,
		|	Рег.УИННовости                      КАК УИННовости
		|ИЗ
		|	ВТ_НовостиДляУдаления
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КатегорииНовостейПростыеНеобработанные КАК Рег
		|	ПО
		|		ВТ_НовостиДляУдаления.ЛентаНовостей = Рег.ЛентаНовостей
		|		И ВТ_НовостиДляУдаления.УИННовости = Рег.УИННовости
		|;
		|
		|// 7. Основной запрос к вспомогательным данным (КатегорииНовостейИнтервалыВерсийНеобработанные).
		|ВЫБРАТЬ
		|	Рег.КатегорияНовостейСтрока КАК КатегорияНовостейСтрока,
		|	Рег.ЛентаНовостей           КАК ЛентаНовостей,
		|	Рег.УИННовости              КАК УИННовости,
		|	Рег.Продукт                 КАК Продукт,
		|	Рег.ВерсияОТ                КАК ВерсияОТ,
		|	Рег.ВерсияДО                КАК ВерсияДО
		|ИЗ
		|	ВТ_НовостиДляУдаления
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК Рег
		|	ПО
		|		ВТ_НовостиДляУдаления.ЛентаНовостей = Рег.ЛентаНовостей
		|		И ВТ_НовостиДляУдаления.УИННовости = Рег.УИННовости
		|
		|";
	Запрос.УстановитьПараметр("УдалятьАктуальныеОт", УдалятьАктуальныеОт);
	Запрос.УстановитьПараметр("УдалятьНеактуальныеОт", УдалятьНеактуальныеОт);
	Запрос.УстановитьПараметр("УдалятьПомеченныеНаУдалениеОт", УдалятьПомеченныеНаУдалениеОт);
	Запрос.УстановитьПараметр("УдалятьСтарыеВерсииОт", УдалятьСтарыеВерсииОт);
	Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
	Запрос.УстановитьПараметр("ТекущаяВерсияПродукта", ВерсияПродукта);
	Запрос.УстановитьПараметр("ТекущаяВерсияПлатформы", ВерсияПлатформы);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	// Новости для удаления.
	Если НЕ РезультатыЗапроса[4].Пустой() Тогда
		МассивНовостей = РезультатыЗапроса[4].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
		Результат.Вставить("НовостиДляУдаления", МассивНовостей);
	КонецЕсли;

	// Новости для установки пометки удаления.
	Если НЕ РезультатыЗапроса[5].Пустой() Тогда
		МассивНовостей = РезультатыЗапроса[5].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
		Результат.Вставить("НовостиДляУстановкиПометкиУдаления", МассивНовостей);
	КонецЕсли;

	// Необработанные категории (простые) для удаляемых новостей.
	// Привязка осуществляется по УИННовости, поэтому автоматического удаления при удалении новости не произойдет.
	Если НЕ РезультатыЗапроса[6].Пустой() Тогда
		МассивЗаписей = Новый Массив;
		Выборка = РезультатыЗапроса[6].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			МассивЗаписей.Добавить(
				Новый Структура("КатегорияНовостейСтрока, ЗначениеКатегорииНовостейСтрока, ЛентаНовостей, УИННовости",
					Выборка.КатегорияНовостейСтрока,
					Выборка.ЗначениеКатегорииНовостейСтрока,
					Выборка.ЛентаНовостей,
					Выборка.УИННовости));
		КонецЦикла;
		Результат.Вставить("КатегорииНовостейПростыеНеобработанные", МассивЗаписей);
	КонецЕсли;

	// Необработанные категории (интервалы версий) для удаляемых новостей.
	// Привязка осуществляется по УИННовости, поэтому автоматического удаления при удалении новости не произойдет.
	Если НЕ РезультатыЗапроса[7].Пустой() Тогда
		МассивЗаписей = Новый Массив;
		Выборка = РезультатыЗапроса[7].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			МассивЗаписей.Добавить(
				Новый Структура("КатегорияНовостейСтрока, ЛентаНовостей, УИННовости, Продукт, ВерсияОТ, ВерсияДО",
					Выборка.КатегорияНовостейСтрока,
					Выборка.ЛентаНовостей,
					Выборка.УИННовости,
					Выборка.Продукт,
					Выборка.ВерсияОТ,
					Выборка.ВерсияДО));
		КонецЦикла;
		Результат.Вставить("КатегорииНовостейИнтервалыВерсийНеобработанные", МассивЗаписей);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура помечает на удаление новости со вспомогательными данными по переданному списку данных.
//
// Параметры:
//  ДанныеДляУдаления   - Структура - соответствует возвращаемому значению функции УдалениеНовостей_ПолучитьСписокДанныхДляУдаления;
//  РезультатВыполнения - Строка - Результат выполнения удаления для записи в журнал регистрации.
//
Процедура УдалениеНовостей_ПометитьНаУдалениеДанные(ДанныеДляУдаления, РезультатВыполнения)

	Перем НайденныеДанные;

	ТипМассив = Тип("Массив");

	УстановитьПривилегированныйРежим(Истина);

		РезультатВыполнения = "
			|%НовостиДляУдаления%
			|%НовостиДляУстановкиПометкиУдаления%
			|%КатегорииНовостейПростыеНеобработанные%
			|%КатегорииНовостейИнтервалыВерсийНеобработанные%";

		// Удалить новости.
		Если (ДанныеДляУдаления.Свойство("НовостиДляУдаления"))
				И (ТипЗнч(ДанныеДляУдаления.НовостиДляУдаления) = ТипМассив)
				И ДанныеДляУдаления.НовостиДляУдаления.Количество() > 0 Тогда
			////? Удалить новости по списку. Для этого необходимо наличие полных прав, монопольного режима и т.п.
			ТекстСообщения = НСтр("ru='Есть помеченные на удаление новости (%ДанныеДляУдаления.НовостиДляУдаления.Количество()% новостей). Их надо удалить вручную через Все функции / Стандартные / Удаление помеченных объектов.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.НовостиДляУдаления.Количество()%", ДанныеДляУдаления.НовостиДляУдаления.Количество());
		Иначе
			ТекстСообщения = НСтр("ru='Нет помеченных на удаление новостей'");
		КонецЕсли;
		РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%НовостиДляУдаления%", ТекстСообщения);

		// Установить пометку удаления устаревшим новостям.
		Если (ДанныеДляУдаления.Свойство("НовостиДляУстановкиПометкиУдаления"))
				И (ТипЗнч(ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления) = ТипМассив)
				И ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество() > 0 Тогда
			Для Каждого ТекущаяНовость Из ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления Цикл
				НовостьОбъект = ТекущаяНовость.ПолучитьОбъект();
				Если ТипЗнч(НовостьОбъект) = Тип("СправочникОбъект.Новости") Тогда // Для "<Объект не найден>" будет Неопределено, или проверять ПустаяСтрока(ТекущаяНовость.ВерсияДанных)
					НовостьОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Все устаревшие новости успешно помечены на удаление (%ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество()% новостей).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество()%", ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество());
		Иначе
			ТекстСообщения = НСтр("ru='Нет устаревших новостей, которые надо пометить на удаление.'");
		КонецЕсли;
		РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%НовостиДляУстановкиПометкиУдаления%", ТекстСообщения);

		// Записи регистров сведений удалять без учета того, что какие-то новости могли быть НЕ удалены.
		Если (ДанныеДляУдаления.Свойство("КатегорииНовостейПростыеНеобработанные"))
				И (ТипЗнч(ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные) = ТипМассив)
				И (ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество() > 0) Тогда
			Для Каждого ТекущаяЗапись Из ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные Цикл
				Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ТекущаяЗапись);
				Запись.Удалить();
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Было удалено %ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество()% необработанных простых категорий.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество()%", ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество());
		Иначе
			ТекстСообщения = НСтр("ru='Простых необработанных категорий не было найдено.'");
		КонецЕсли;
		РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%КатегорииНовостейПростыеНеобработанные%", ТекстСообщения);

		// Записи регистров сведений удалять без учета того, что какие-то новости могли быть НЕ удалены.
		Если (ДанныеДляУдаления.Свойство("КатегорииНовостейИнтервалыВерсийНеобработанные"))
				И (ТипЗнч(ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные) = ТипМассив)
				И (ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество() > 0) Тогда
			Для Каждого ТекущаяЗапись Из ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные Цикл
				Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ТекущаяЗапись);
				Запись.Удалить();
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Было удалено %ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество()% необработанных категорий интервалов версий.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество()%", ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество());
		Иначе
			ТекстСообщения = НСтр("ru='Необработанных категорий интервалов версий не было найдено.'");
		КонецЕсли;
		РезультатВыполнения = СтрЗаменить(РезультатВыполнения, "%КатегорииНовостейИнтервалыВерсийНеобработанные%", ТекстСообщения);

КонецПроцедуры

#КонецОбласти

#Область ДругиеСервисныеВозможности

// Процедура загружает все стандартные значения необходимые для подсистемы новостей из макетов с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры, логины и пароли для доступа к веб-сервисам обновлений.
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьВсеСтандартныеЗначения() Экспорт

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало загрузки всех стандартных значений
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Все стандартные значения. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// Загрузка должна происходить именно в такой последовательности.
	ПланыВидовХарактеристик.КатегорииНовостей.ЗагрузитьСтандартныеЗначения();
	Справочники.ЗначенияКатегорийНовостей.ЗагрузитьСтандартныеЗначения();
	Справочники.ЛентыНовостей.ЗагрузитьСтандартныеЗначения();
	Справочники.Новости.ЗагрузитьСтандартныеЗначения();

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Окончание загрузки всех стандартных значений
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Все стандартные значения. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Процедура выполняет все необходимые действия для управления контекстными новостями. Должна вызываться из ПриСозданииНаСервере().
// Она используется в том случае, если выбрана стратегия расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  Форма                                    - УправляемаяФорма - форма, в которой необходимо включить механизм контекстных новостей;
//  ИдентификаторМетаданных                  - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы                       - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости;
//  НастройкиКнопкиНовостей                  - Структура, Неопределено - структура настроек для создания кнопки / подменю новостей
//                                             или Неопределено, если кнопку / подменю создавать не надо. Ключи:
//   * ЭлементФормыДляРазмещениеКомандыНовостей - ЭлементФормы -  Группа формы, в которой необходимо разместить создаваемую кнопку / подменю новостей;
//   * ТипЗначенияКомандыНовостей               - Тип, Неопределено - может быть Тип("КнопкаФормы") (для создания кнопки Новости)
//                                                или Тип("ГруппаФормы") для создания подменю новостей,
//                                                или Неопределено, если не надо создавать кнопку / подменю.
//                                                По-умолчанию берется Тип("ГруппаФормы") (для создания подменю новостей).
//  ЗаголовокФормыНовостей                   - Строка - заголовок формы, которая появляется при нажатии на кнопку показа списка контекстных новостей из формы;
//  СоздаватьРеквизитФормы                   - Булево - Истина, если надо динамически создать реквизит "Новости" произвольного типа;
//  НастройкиЗаполненияНовостями             - Структура - структура, определяющая стратегию получения и хранения новостей;
//                                             Можно получать новости на сервере в ПриСозданииНаСервере - это будет тратить время при каждом
//                                               открытии формы, но позволит реализовать сценарий показа новостей при наступлении клиентских
//                                               событий (ПриИзмененииГалочки, ПриУстановкеДатыБольше2014 и т.п.);
//                                             Можно получать новости в обработчике ожидания после открытия формы, также будет задействован клиентский кеш.
//                                               Это сократит время открытия формы, но некоторые сценарии станут недоступны.
//                                             Ключи:
//   * ПолучатьНовостиНаСервере                - Булево - если Истина, то новости будут получаться в этой процедуре. По-умолчанию = Истина;
//   * ХранитьМассивНовостейТолькоНаСервере    - Булево - если Истина, то на клиента не передается массив новостей.
//                                             Это сокращает размер передаваемых данных, но не дает возможность показывать новости
//                                             по другим событиям, отличным от ПриОткрытии.
//                                             Имеет смысл только если ПолучатьНовостиНаСервере = Истина. По-умолчанию = Ложь.
//  ИдентификаторыСобытийПриОткрытии         - Строка, Массив - строка или массив строк идентификаторов события "ПриОткрытии".
//                                             Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                             новостей. И если это количество > 0, то открывающая форма инициирует
//                                             открытие формы просмотра таких новостей.
//
Процедура КонтекстныеНовости_ПриСозданииНаСервере(
				Форма,
				ИдентификаторМетаданных,
				ИдентификаторФормы,
				НастройкиКнопкиНовостей = Неопределено,
				ЗаголовокФормыКонтекстныхНовостей = "",
				СоздаватьРеквизитФормы = Истина,
				НастройкиЗаполненияНовостями,
				ИдентификаторыСобытийПриОткрытии = "ПриОткрытии") Экспорт

	Если НЕ ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");
	МассивСтруктурНовостей = Новый Массив;

	Если СоздаватьРеквизитФормы = Истина Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Новости", Новый ОписаниеТипов(Новый Массив))); // Произвольный тип
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

	ПолучатьНовостиНаСервере = Истина;
	ХранитьМассивНовостейТолькоНаСервере = Ложь;
	Если ТипЗнч(НастройкиЗаполненияНовостями) = ТипСтруктура Тогда
		НастройкиЗаполненияНовостями.Свойство("ПолучатьНовостиНаСервере", ПолучатьНовостиНаСервере);
		НастройкиЗаполненияНовостями.Свойство("ХранитьМассивНовостейТолькоНаСервере", ХранитьМассивНовостейТолькоНаСервере);
	КонецЕсли;
	ПолучатьНовостиНаСервере             = ?(ПолучатьНовостиНаСервере = Ложь, Ложь, Истина);
	ХранитьМассивНовостейТолькоНаСервере = ?(ХранитьМассивНовостейТолькоНаСервере = Истина, Истина, Ложь);

	Форма.Новости = Новый Структура("Новости, ЗаголовокФормыКонтекстныхНовостей, Метаданные, Форма, ТекущаяНовость,
			|КоличествоНовостей, КоличествоНепрочитанныхНовостей, КоличествоВажныхНовостейПриОткрытии,
			|КоличествоОченьВажныхНовостейПриОткрытии, КоличествоПостоянныхНовостей,
			|ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере,
			|АдресМассиваНовостей, МассивСтруктурВажныхНовостей, МассивСтруктурПостоянныхНовостей,
			|СписокНовостейИзменениеПризнака_Прочтена, СписокНовостейИзменениеПризнака_ОповещениеВключено",
		Новый Массив, // Массив структур
		ЗаголовокФормыКонтекстныхНовостей,
		ИдентификаторМетаданных,
		ИдентификаторФормы,
		Справочники.Новости.ПустаяСсылка(), // ТекущаяНовость
		0, // КоличествоНовостей
		0, // КоличествоНепрочитанныхНовостей
		0, // КоличествоВажныхНовостейПриОткрытии
		0, // КоличествоОченьВажныхНовостейПриОткрытии
		0, // КоличествоПостоянныхНовостей
		ПолучатьНовостиНаСервере, // ПолучатьНовостиНаСервере
		ХранитьМассивНовостейТолькоНаСервере, // ХранитьМассивНовостейТолькоНаСервере
		"", // АдресМассиваНовостей
		Неопределено, // МассивСтруктурВажныхНовостей, должно быть Неопределено, если новостей для показа нет.
		Неопределено, // МассивСтруктурПостоянныхНовостей, должно быть Неопределено, если постоянных новостей нет.
		Новый СписокЗначений, // СписокНовостейИзменениеПризнака_Прочтена - заполняется на клиенте в процессе работы в случае,
							// если новости хранятся на сервере и приходят оповещения о прочтении новостей.
		Новый СписокЗначений); // СписокНовостейИзменениеПризнака_ОповещениеВключено - заполняется на клиенте в процессе работы в случае,
							// если новости хранятся на сервере и приходят оповещения об изменении оповещения для важных и очень важных новостей.

	Если ПолучатьНовостиНаСервере = Истина Тогда
		СтруктураКонтекстныхНовостей = ПолучитьКонтекстныеНовости(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии);

		МассивСтруктурНовостей = СтруктураКонтекстныхНовостей.Новости;

		ЗаполнитьЗначенияСвойств(
			Форма.Новости,
			СтруктураКонтекстныхНовостей,
			"КоличествоНовостей, КоличествоНепрочитанныхНовостей, КоличествоОченьВажныхНовостейПриОткрытии,
				|КоличествоПостоянныхНовостей, КоличествоВажныхНовостейПриОткрытии,
				|МассивСтруктурВажныхНовостей, МассивСтруктурПостоянныхНовостей");

		Если ХранитьМассивНовостейТолькоНаСервере = Истина Тогда
			Форма.Новости.АдресМассиваНовостей = ПоместитьВоВременноеХранилище(
				СтруктураКонтекстныхНовостей.Новости,
				Форма.УникальныйИдентификатор); // Удалять после закрытия новости
			Форма.Новости.Новости = Неопределено;
		Иначе
			Форма.Новости.Новости = МассивСтруктурНовостей;
		КонецЕсли;

	КонецЕсли;

	// Для информации: добавление кнопки происходит примерно в 5 раз быстрее, чем добавление подменю.
	СозданнаяКнопкаИлиПодменюНовости = Неопределено;
	Если ТипЗнч(НастройкиКнопкиНовостей) = ТипСтруктура Тогда
		ЭлементФормыДляРазмещениеКомандыНовостей = Неопределено;
		ТипЗначенияКомандыНовостей               = Неопределено;
		НастройкиКнопкиНовостей.Свойство("ЭлементФормыДляРазмещениеКомандыНовостей", ЭлементФормыДляРазмещениеКомандыНовостей);
		НастройкиКнопкиНовостей.Свойство("ТипЗначенияКомандыНовостей", ТипЗначенияКомандыНовостей);
		Если ТипЗначенияКомандыНовостей = Тип("КнопкаФормы") Тогда
			СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьКнопкуПросмотраСпискаНовостей(
				Форма,
				ЭлементФормыДляРазмещениеКомандыНовостей, // Куда выводить кнопку
				МассивСтруктурНовостей); // Массив структур (таблица) новостей, для определения количества новостей. Пустой, если на сервере не происходит заполнение новостями.
		ИначеЕсли ТипЗначенияКомандыНовостей = Тип("ГруппаФормы") Тогда
			// Если новости НЕ были получены на сервере или НЕ хранятся на клиенте (а хранится только адрес временного хранилища),
			// то нельзя создавать подменю, т.к. на клиенте невозможно будет обработать нажатия на элементы подменю.
			Если (ПолучатьНовостиНаСервере = Ложь)
					ИЛИ (ХранитьМассивНовостейТолькоНаСервере = Истина) Тогда
				СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьКнопкуПросмотраСпискаНовостей(
					Форма,
					ЭлементФормыДляРазмещениеКомандыНовостей, // Куда выводить кнопку
					МассивСтруктурНовостей); // Массив структур (таблица) новостей, для определения количества новостей. Пустой, если на сервере не происходит заполнение новостями.
			Иначе
				СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьПодменюПросмотраСпискаНовостей(
					Форма,
					ЭлементФормыДляРазмещениеКомандыНовостей, // Куда выводить кнопку
					МассивСтруктурНовостей); // Массив структур (таблица) новостей, для создания пунктов меню. Пустой, если на сервере не происходит заполнение новостями.
			КонецЕсли;
		Иначе
			// Ничего не создавать.
		КонецЕсли;
	КонецЕсли;

	ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуПриСозданииНаСервере(
		Форма,
		НастройкиЗаполненияНовостями,
		ИдентификаторыСобытийПриОткрытии,
		СозданнаяКнопкаИлиПодменюНовости,
		МассивСтруктурНовостей);

КонецПроцедуры

// Функция получает все необходимые данные по контекстным новостям.
// Может использоваться как при стратегии получения новостей в ПриСозданииНаСервере(), так и в обработчике ожидания из ПриОткрытии() формы.
//
// Параметры:
//  ИдентификаторМетаданных           - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы                - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости;
//  ЗаголовокФормыКонтекстныхНовостей - Строка - Заголовок формы контекстных новостей (в случае, если будут новости для отображения в этой форме);
//  ИдентификаторыСобытийПриОткрытии  - Строка, Массив - строка или массив строк идентификаторов события "ПриОткрытии".
//                                        Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                        новостей. И если это количество > 0, то открывающая форма инициирует
//                                        открытие формы просмотра таких новостей.
//
// Возвращаемое значение:
//   Структура - структура контекстных новостей для указанной комбинации ИдентификаторМетаданных / ИдентификаторФормы с ключами:
//     * ДатаЗаполнения                           - Дата - если прошло много времени, то обновить;
//     * Новости                                  - Массив структур:
//        ** НомерСтрокиНовости      - Число -;
//        ** ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//        ** Новость                 - СправочникСсылка.Новости -;
//        ** НовостьНаименование     - Строка -;
//        ** НовостьПодзаголовок     - Строка -;
//        ** УИННовости              - Строка -;
//        ** ДатаПубликации          - Дата -;
//        ** Важность                - Число -;
//        ** Актуальность            - Булево -;
//        ** Метаданные              - Строка -;
//        ** Форма                   - Строка -;
//        ** Событие                 - Строка -;
//        ** ПоказыватьВФормеОбъекта - Булево -;
//        ** ЭтоПостояннаяНовость    - Булево -;
//        ** Прочтена                - Булево -;
//        ** ОповещениеВключено      - Булево -;
//        ** ДатаНачалаОповещения    - Дата - ;
//     * ЗаголовокФормыКонтекстныхНовостей        - Строка;
//     * КоличествоНовостей                       - Число - общее количество уникальных новостей для этих метаданных / формы;
//     * КоличествоНепрочитанныхНовостей          - Число - общее количество уникальных непрочтенных новостей для этих метаданных / формы;
//     * КоличествоВажныхНовостейПриОткрытии      - Число - количество важных новостей, которые надо показать при открытии;
//     * КоличествоОченьВажныхНовостейПриОткрытии - Число - количество очень важных новостей, которые надо показать при открытии;
//     * КоличествоПостоянныхНовостей             - Число - количество новостей с признаком ЭтоПостояннаяНовость;
//     * МассивСтруктурВажныхНовостей             - Массив структур - важные новости, которые необходимо показать при открытии;
//        ** Новость                 - СправочникСсылка.Новости -;
//        ** НавигационнаяСсылка     - Строка -;
//        ** НовостьНаименование     - Строка -;
//        ** НовостьПодзаголовок     - Строка -;
//     * МассивСтруктурПостоянныхНовостей         - Массив структур - новости, которые можно использовать для формирования информационных ссылок;
//        ** Новость             - СправочникСсылка.Новости - ссылка на новость;
//        ** НовостьНаименование - Строка - заголовок новости (для формирования представления).
//
Функция ПолучитьКонтекстныеНовости(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей = "",
			ИдентификаторыСобытийПриОткрытии = "ПриОткрытии") Экспорт

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");
	ТипСписокЗначений = Тип("СписокЗначений");

	МассивИдентификаторовСобытийПриОткрытии = Новый Массив();
	Если ТипЗнч(ИдентификаторыСобытийПриОткрытии) = ТипСтрока Тогда
		МассивИдентификаторовСобытийПриОткрытии.Добавить(ИдентификаторыСобытийПриОткрытии);
	ИначеЕсли ТипЗнч(ИдентификаторыСобытийПриОткрытии) = ТипМассив Тогда
		МассивИдентификаторовСобытийПриОткрытии = ИдентификаторыСобытийПриОткрытии;
	Иначе
		// Пустой массив
	КонецЕсли;

	МассивСтруктурНовостей = Новый Массив;

	Результат = Новый Структура("ДатаЗаполнения, Новости, ЗаголовокФормыКонтекстныхНовостей,
			|КоличествоНовостей, КоличествоНепрочитанныхНовостей, КоличествоВажныхНовостейПриОткрытии,
			|КоличествоОченьВажныхНовостейПриОткрытии, КоличествоПостоянныхНовостей,
			|МассивСтруктурВажныхНовостей, МассивСтруктурПостоянныхНовостей",
		ТекущаяДатаСеанса(),
		МассивСтруктурНовостей, // Массив структур новостей
		ЗаголовокФормыКонтекстныхНовостей,
		0, // КоличествоНовостей
		0, // КоличествоНепрочитанныхНовостей
		0, // КоличествоВажныхНовостейПриОткрытии
		0, // КоличествоОченьВажныхНовостейПриОткрытии
		0, // КоличествоПостоянныхНовостей
		Неопределено, // МассивСтруктурВажныхНовостей, должно быть Неопределено, если новостей для показа нет
		Неопределено); // МассивСтруктурПостоянныхНовостей, должно быть Неопределено, если постоянных новостей нет

	// Загрузить список всех новостей по объекту (возможно дублирование самих новостей,
	//  т.к. одна новость может быть привязана к разным событиям).

	// Для неразделенного сеанса не возвращать контекстные новости, т.к. невозможно определить их
	//  пользовательские свойства (прочтенность, сброшенное оповещение и т.п.).
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		// Запустились в неразделенной конфигурации или
		// Запустились в разделенной конфигурации, но вошли в область данных.
		ПолучатьКонтекстныеНовости = Истина;
	Иначе
		ПолучатьКонтекстныеНовости = Ложь;
	КонецЕсли;

	Если ПолучатьКонтекстныеНовости = Истина Тогда
		МассивДоступныхЛентНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
			"ДоступныеЛентыНовостей", // КлючОбъекта
			""); // КлючНастроек, пока не обрабатывается
		СписокЛентНовостей = Новый СписокЗначений;
		СписокЛентНовостей.ЗагрузитьЗначения(МассивДоступныхЛентНовостей);
		ОбработкаНовостейПереопределяемый.ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей(СписокЛентНовостей);
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив) Тогда
			// Корректный параметр
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений) Тогда
			// Корректный параметр
		ИначеЕсли (СписокЛентНовостей = Неопределено) Тогда
			// Корректный параметр
		Иначе
			СписокЛентНовостей = Неопределено; // По всем лентам новостей
		КонецЕсли;
		МассивСтруктурНовостей = ОбщегоНазначения.ТаблицаЗначенийВМассив(
			ПолучитьТаблицуКонтекстныхНовостей(
				СписокЛентНовостей, // По всем лентам новостей (Неопределено) или по списку новостей (СписокЗначений, Массив)
				ИдентификаторМетаданных, // Метаданные
				ИдентификаторФормы, // Форма
				Неопределено, // Событие - вывести все
				"Для форм, все поля")); // Вариант списка новостей - со всеми полями
	КонецЕсли;

	ОбработкаНовостейПереопределяемый.ДополнительноОбработатьМассивКонтекстныхНовостей(
		ИдентификаторМетаданных,
		ИдентификаторФормы,
		ИдентификаторыСобытийПриОткрытии,
		МассивСтруктурНовостей);

	Результат.Новости = МассивСтруктурНовостей;

	// В таблице новостей могут храниться одинаковые новости, но привязанные к разным формам / событиям.
	// Поэтому необходимо вывести не общее количество строк, а количество уникальных новостей для этой формы.
	// Параллельно заполнить массив структур постоянных новостей и рассчитать количество постоянных и непрочтенных новостей.
	КоличествоНепрочитанныхНовостей = 0;
	КоличествоПостоянныхНовостей = 0;
	МассивСтруктурПостоянныхНовостей = Новый Массив;
	СписокДобавленныхНовостей = Новый СписокЗначений;
	Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
		Если СписокДобавленныхНовостей.НайтиПоЗначению(ТекущаяНовость.Новость) = Неопределено Тогда
			Если (ВРег(ТекущаяНовость.Форма) = ВРег(ИдентификаторФормы)) Тогда
				СписокДобавленныхНовостей.Добавить(ТекущаяНовость.Новость);
			КонецЕсли;
			// Количество непрочтенных новостей должно быть уникально по каждой новости.
			Если ТекущаяНовость.Прочтена = Ложь Тогда
				КоличествоНепрочитанныхНовостей = КоличествоНепрочитанныхНовостей + 1;
			КонецЕсли;
		КонецЕсли;
		// Количество постоянных новостей.
		Если ТекущаяНовость.ЭтоПостояннаяНовость = Истина Тогда
			МассивСтруктурПостоянныхНовостей.Добавить(
				Новый Структура("Новость, НовостьНаименование",
					ТекущаяНовость.Новость,
					ТекущаяНовость.НовостьНаименование));
			КоличествоПостоянныхНовостей = КоличествоПостоянныхНовостей + 1;
		КонецЕсли;
	КонецЦикла;
	Результат.КоличествоНовостей               = СписокДобавленныхНовостей.Количество();
	Результат.КоличествоНепрочитанныхНовостей  = КоличествоНепрочитанныхНовостей ;
	Результат.КоличествоПостоянныхНовостей     = КоличествоПостоянныхНовостей;
	Результат.МассивСтруктурПостоянныхНовостей = МассивСтруктурПостоянныхНовостей;

	// В отличие от очень важных новостей, которые отображаются в отдельной форме (и получение таких новостей
	//  можно возложить на форму контекстных новостей), важные новости показываются в виде оповещений,
	//  поэтому необходимо сразу подготовить все необходимые для отображения данные для передачи в вызывающую форму.
	МассивСтруктурВажныхНовостей = Новый Массив;

	// В полученной таблице могут храниться несколько одинаковых новостей (для разных событий, например).
	//  Но мы ищем по конкретному событию, поэтому задвоений быть не должно.
	// Сразу вычислить количество очень важных новостей, которые необходимо показать при открытии этой формы.
	КоличествоОченьВажныхНовостейПриОткрытии = 0;
	КоличествоВажныхНовостейПриОткрытии      = 0;
	Если МассивИдентификаторовСобытийПриОткрытии.Количество() > 0 Тогда
		Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
			Если ТекущаяНовость.Важность = 1 Тогда // Очень важная
				Если ТекущаяНовость.ОповещениеВключено = Истина Тогда // Показывать оповещение
					Для Каждого ТекущийИдентификаторСобытия Из МассивИдентификаторовСобытийПриОткрытии Цикл
						Если (ВРег(ТекущаяНовость.Событие) = ВРег(ТекущийИдентификаторСобытия))
								И (ВРег(ТекущаяНовость.Форма) = ВРег(ИдентификаторФормы)) Тогда
							КоличествоОченьВажныхНовостейПриОткрытии = КоличествоОченьВажныхНовостейПриОткрытии + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ТекущаяНовость.Важность = 2 Тогда // Важная
				Если ТекущаяНовость.ОповещениеВключено = Истина Тогда // Показывать оповещение
					Для Каждого ТекущийИдентификаторСобытия Из МассивИдентификаторовСобытийПриОткрытии Цикл
						Если (ВРег(ТекущаяНовость.Событие) = ВРег(ТекущийИдентификаторСобытия))
								И (ВРег(ТекущаяНовость.Форма) = ВРег(ИдентификаторФормы)) Тогда
							КоличествоВажныхНовостейПриОткрытии = КоличествоВажныхНовостейПриОткрытии + 1;
							МассивСтруктурВажныхНовостей.Добавить(
								Новый Структура("Новость, НавигационнаяСсылка, НовостьНаименование, НовостьПодзаголовок, ОповещениеВключено",
									ТекущаяНовость.Новость,
									ПолучитьНавигационнуюСсылку(ТекущаяНовость.Новость),
									ТекущаяНовость.НовостьНаименование,
									ТекущаяНовость.НовостьПодзаголовок,
									ТекущаяНовость.ОповещениеВключено));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Результат.КоличествоОченьВажныхНовостейПриОткрытии = КоличествоОченьВажныхНовостейПриОткрытии;
		Результат.КоличествоВажныхНовостейПриОткрытии      = КоличествоВажныхНовостейПриОткрытии;
		Результат.МассивСтруктурВажныхНовостей             = ?(МассивСтруктурВажныхНовостей.Количество() = 0, Неопределено, МассивСтруктурВажныхНовостей);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСОтборамиПоКатегории

// Процедура очищает все категории для новости ОбъектНовость из регистра сведений КатегорииНовостейПростыеНеобработанные,
//  КатегорииНовостейПростые, КатегорииНовостейИнтервалыВерсийНеобработанные и КатегорииНовостейИнтервалыВерсий.
// Такая очистка производится, например, при загрузке новости.
//  Если новость была изменена, то вначале очищаются все категории, а затем загружаются заново.
//
// Параметры:
//  ОбъектНовость - СправочникОбъект.Новости.
//
Процедура ОчиститьКатегорииНовости(ОбъектНовость) Экспорт

	// 1. Регистр сведений КатегорииНовостейПростые.
	Если НЕ ОбъектНовость.Ссылка.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.КатегорииНовостейПростые.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["Новость"].Установить(ОбъектНовость.Ссылка);
		НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
	КонецЕсли;

	// 2. Регистр сведений КатегорииНовостейПростыеНеобработанные.
	НаборЗаписей = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["ЛентаНовостей"].Установить(ОбъектНовость.ЛентаНовостей);
	НаборЗаписей.Отбор["УИННовости"].Установить(ОбъектНовость.УИННовости);
	НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей

	// 3. Регистр сведений КатегорииНовостейИнтервалыВерсий.
	Если НЕ ОбъектНовость.Ссылка.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["Новость"].Установить(ОбъектНовость.Ссылка);
		НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
	КонецЕсли;

	// 4. Регистр сведений КатегорииНовостейИнтервалыВерсийНеобработанные.
	НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["ЛентаНовостей"].Установить(ОбъектНовость.ЛентаНовостей);
	НаборЗаписей.Отбор["УИННовости"].Установить(ОбъектНовость.УИННовости);
	НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Вызывается перед началом обновления данных ИБ.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	// Обработчики, выполняемые при переходе на новую версию.
	//

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на любую новую версию, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.4.1"; // Сработает также при переходе с 2.1.3.* на 2.1.4.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.4.1"; // Сработает также при переходе с 2.1.3.* на 2.1.4.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.5.1"; // Сработает также при переходе с 2.1.4.* на 2.1.5.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.5.1"; // Сработает также при переходе с 2.1.4.* на 2.1.5.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Первый запуск (общие данные)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПервыйЗапуск. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.

			Результат = ПроверитьПравильностьВнедренияПодсистемы();
			Если НЕ ПустаяСтрока(Результат) Тогда
				ТекстСообщения = НСтр("ru='Обнаружены ошибки внедрения подсистемы ИнтернетПоддержкаПользователей.Новости.
					|Обнаруженные ошибки внедрения:
					|%Результат%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Результат%", Результат);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
					НСтр("ru='Новости. Обновление ИБ. Проверка внедрения'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецЕсли;

			Константы.РазрешенаРаботаСНовостями.Установить(Истина);
			Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);

			// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
			//  т.к. из-за них новости могут не загрузиться из макетов.
			НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
			НаборЗаписей.Записать(Истина);

			// Код обновления из файлов, встроенных в конфигурацию.
			// После загрузки новостей автоматически вызовутся:
			//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Пользовательские();
			// поэтому явно вызывать их не нужно.
			ЗагрузитьВсеСтандартныеЗначения();

			// После загрузки стандартных значений проверить регистр сведений "ДатыЗагрузкиПоследнихНовостей".
			// Для всех лент новостей должны быть заполнены даты, чтобы не получать новости "с начала времен".
			// Если для какой-то ленты новостей дата не заполнена, то установить "минус 3 месяца" от текущей даты.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК ЛентаНовостей
				|ИЗ
				|	Справочник.ЛентыНовостей КАК Спр
				|ГДЕ
				|	Спр.ЗагруженоССервера = ИСТИНА
				|";
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ДатаЗагрузкиПоследнихНовостей = ДобавитьМесяц(ТекущаяУниверсальнаяДата(), -3);
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
					Запись.ЛентаНовостей                        = Выборка.ЛентаНовостей;
					Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостей;
					Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = '00010101';
					Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
					Запись.Записать(Истина);
				КонецЦикла;
			КонецЕсли;

			// Установить / переустановить значение расписания для регламентного задания ВсеОбновленияНовостей.
			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей);
			Если ТекущееРегламентноеЗадание <> Неопределено Тогда
				МассивДнейНедели = Новый Массив;
				Для С=1 По 7 Цикл
					МассивДнейНедели.Добавить(С);
				КонецЦикла;

				МассивМесяцев = Новый Массив;
				Для С=1 По 12 Цикл
					МассивМесяцев.Добавить(С);
				КонецЦикла;

				Расписание = Новый РасписаниеРегламентногоЗадания;
				Расписание.ВремяНачала              = '00010101000000';
				Расписание.ВремяКонца               = '00010101000000';
				Расписание.ДатаНачала               = '00010101000000';
				Расписание.ДатаКонца                = '00010101000000';
				Расписание.ДеньВМесяце              = 0;
				Расписание.ДеньНеделиВМесяце        = 0;
				Расписание.ДетальныеРасписанияДня   = Новый Массив;
				Расписание.ДниНедели                = МассивДнейНедели;
				Расписание.ИнтервалЗавершения       = 600;
				Расписание.Месяцы                   = МассивМесяцев;
				Расписание.ПаузаПовтора             = 0;
				Расписание.ПериодНедель             = 1;
				Расписание.ПериодПовтораВТечениеДня = 60;
				Расписание.ПериодПовтораДней        = 1;

				ТекущееРегламентноеЗадание.Расписание = Расписание;
				ТекущееРегламентноеЗадание.Записать();
			КонецЕсли;

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПервыйЗапуск. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПервыйЗапуск. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		УстановитьПривилегированныйРежим(Ложь);

	Иначе

		ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка первого запуска не выполнена.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПервыйЗапуск. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Первый запуск (общие данные)
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПервыйЗапуск. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Первый запуск (область данных)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПервыйЗапуск. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ЕстьОшибки = Ложь;

	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда

		ТекстСообщения = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПервыйЗапуск. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЕстьОшибки = Истина;

	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

			// Основные действия.
			//

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПервыйЗапуск. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПервыйЗапуск. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		Иначе

			ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка первого запуска не выполнена.'");
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПервыйЗапуск. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонецЕсли;

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Первый запуск (область данных)
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПервыйЗапуск. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для общих данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию() Экспорт

	лкРазрешенаРаботаСНовостями = Неопределено;

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (общие данные)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.

			лкРазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.Получить();
			Если лкРазрешенаРаботаСНовостями = Истина Тогда

				// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
				//  т.к. из-за них новости могут не загрузиться из макетов.
				НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
				НаборЗаписей.Записать(Истина);

				// Код обновления из файлов, встроенных в конфигурацию.
				// После загрузки новостей автоматически вызовутся:
				//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Пользовательские();
				// поэтому явно вызывать их не нужно.
				ЗагрузитьВсеСтандартныеЗначения();

				// После загрузки стандартных значений проверить регистр сведений "ДатыЗагрузкиПоследнихНовостей".
				// Для всех лент новостей должны быть заполнены даты, чтобы не получать новости "с начала времен".
				// Если для какой-то ленты новостей дата не заполнена, то установить "минус 3 месяца" от текущей даты.
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка КАК ЛентаНовостей
					|ИЗ
					|	Справочник.ЛентыНовостей КАК Спр
					|ГДЕ
					|	Спр.ЗагруженоССервера = ИСТИНА
					|";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ДатаЗагрузкиПоследнихНовостей = ДобавитьМесяц(ТекущаяУниверсальнаяДата(), -3);
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
						Запись.ЛентаНовостей                        = Выборка.ЛентаНовостей;
						Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостей;
						Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = '00010101';
						Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
						Запись.Записать(Истина);
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			// В зависимости от текущего значения константы отключить или включить использование регламентного задания "ВсеОбновленияНовостей".
			ИзменитьИспользованиеРегламентныхЗаданий(лкРазрешенаРаботаСНовостями);

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПерейтиНаВерсию. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПерейтиНаВерсию. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		УстановитьПривилегированныйРежим(Ложь);

	Иначе

		ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка обновления не выполнена.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (общие данные)
		|Разрешена работа с новостями = %лкРазрешенаРаботаСНовостями%
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%лкРазрешенаРаботаСНовостями%", лкРазрешенаРаботаСНовостями);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для общих данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4() Экспорт

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (общие данные)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.

			Константы.РазрешенаРаботаСНовостями.Установить(Истина);
			Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);

			// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
			//  т.к. из-за них новости могут не загрузиться.
			НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
			НаборЗаписей.Записать(Истина);

			// Код обновления из файлов, встроенных в конфигурацию.
			// После загрузки новостей автоматически вызовутся:
			//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Пользовательские();
			// поэтому явно вызывать их не нужно.
			ЗагрузитьВсеСтандартныеЗначения();

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		УстановитьПривилегированныйРежим(Ложь);

	Иначе

		ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка обновления не выполнена.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (общие данные)
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для общих данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5() Экспорт

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (общие данные)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.

			Константы.РазрешенаРаботаСНовостями.Установить(Истина);
			Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);

			// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
			//  т.к. из-за них новости могут не загрузиться.
			НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
			НаборЗаписей.Записать(Истина);

			// Код обновления из файлов, встроенных в конфигурацию.
			// После загрузки новостей автоматически вызовутся:
			//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие();
			//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Пользовательские();
			// поэтому явно вызывать их не нужно.
			ЗагрузитьВсеСтандартныеЗначения();

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. Переопределяемый. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		УстановитьПривилегированныйРежим(Ложь);

	Иначе

		ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка обновления не выполнена.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (общие данные)
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию() Экспорт

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ЕстьОшибки = Ложь;

	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда

		ТекстСообщения = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЕстьОшибки = Истина;

	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

			// Основные действия.
			//

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПерейтиНаВерсию. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПерейтиНаВерсию. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		Иначе

			ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка обновления не выполнена.'");
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонецЕсли;

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4() Экспорт

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ЕстьОшибки = Ложь;

	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда

		ТекстСообщения = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЕстьОшибки = Истина;

	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

			// Основные действия.
			//

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		Иначе

			ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка обновления не выполнена.'");
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонецЕсли;

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5() Экспорт

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ЕстьОшибки = Ложь;

	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда

		ТекстСообщения = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЕстьОшибки = Истина;

	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда

			// Основные действия.
			//

			// Переопределяемые действия.

			// Запись в журнал регистрации
			Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстСообщения = НСтр("ru='Начало процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
				|Время начала (мс): %ТНачало%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПерейтиНаВерсию_ХХХ. Начало'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5();

			// Запись в журнал регистрации
			Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Т1Длительность = Т1Конец - Т1Начало;
			ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
				|Время начала (мс): %ТНачало%
				|Время окончания (мс): %ТКонец%
				|Длительность (мс): %ТДлительность%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. Переопределяемый. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				Т1Длительность, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		Иначе

			ТекстСообщения = НСтр("ru='Подсистема ИнтернетПоддержкаПользователей.Новости не существует. Обработка обновления не выполнена.'");
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонецЕсли;

	КонецЕсли;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Конец процедуры обновления. Переход на версию %ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()% (область данных)
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()%", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Обновление ИБ'"), // ИмяСобытия
		НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Функция проверяет правильность внедрения подсистемы Новости.
// В случае ошибок возвращаются тексты ошибок.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  - Строка - тексты ошибок или пустая строка, если ошибок не было.
//
Функция ПроверитьПравильностьВнедренияПодсистемы() Экспорт

	Результат = "";

	// 1. Проверить правильность настройки состава общих реквизитов.
	Свойство_Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	Свойство_НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	РезультатЛокальный = "";

	ИмяРеквизита = "ОбластьДанныхОсновныеДанные";
	НайденныйРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
	Если НайденныйРеквизит <> Неопределено Тогда
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.НастройкиНовостей,                                      РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостями,                              РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                 РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЗначенияКатегорийНовостей,                            РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЛентыНовостей,                                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.Новости,                                              РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                           РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                   РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,                РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные,  РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,          РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.НастройкиПользователейБИП,                       РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                     РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,          РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                   РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                     РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,       РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,              РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,   РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,    РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.СостоянияНовостей,                               РезультатЛокальный);
	КонецЕсли;
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ СтрШаблон(
				НСтр("ru='Ошибки настройки общего реквизита ОбластьДанныхОсновныеДанные:
					|%1
					|
					|'"),
				РезультатЛокальный);
	КонецЕсли;

	РезультатЛокальный = "";
	ИмяРеквизита = "ОбластьДанныхВспомогательныеДанные";
	НайденныйРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
	Если НайденныйРеквизит <> Неопределено Тогда
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.НастройкиНовостей,                                      РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостями,                              РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                 РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЗначенияКатегорийНовостей,                            РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЛентыНовостей,                                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.Новости,                                              РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                           РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                   РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,                РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные,  РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,          РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.НастройкиПользователейБИП,                       РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                     РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,          РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                   РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                     РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,       РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,              РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,   РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,    РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.СостоянияНовостей,                               РезультатЛокальный);
	КонецЕсли;
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ СтрШаблон(
				НСтр("ru='Ошибки настройки общего реквизита ОбластьДанныхВспомогательныеДанные:
					|%1
					|
					|'"),
				РезультатЛокальный);
	КонецЕсли;

	// 2. Проверить правильность настройки прав для ролей АдминистраторСистемы и ПолныеПрава.
	// Проверяются не все права, а минимально необходимые: Чтение и Редактирование.
	РольАС = Метаданные.Роли.АдминистраторСистемы;
	РольПП = Метаданные.Роли.ПолныеПрава;

	РезультатЛокальный = "";
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Константы.НастройкиНовостей,                                      РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Константы.РазрешенаРаботаСНовостями,                              РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                 РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Справочники.ЗначенияКатегорийНовостей,                            РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Справочники.ЛентыНовостей,                                        РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Справочники.Новости,                                              РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                        РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                           РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                   РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,        РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,                РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные,  РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                        РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,          РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.НастройкиПользователейБИП,                       РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                     РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,          РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                        РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                   РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                     РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,       РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,              РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,   РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,    РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.СостоянияНовостей,                               РезультатЛокальный);

	Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,          РезультатЛокальный);
	Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                        РезультатЛокальный);
	Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,       РезультатЛокальный);
	Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,   РезультатЛокальный);
	Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.СостоянияНовостей,                               РезультатЛокальный);
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ НСтр("ru='Ошибки настройки прав для роли АдминистраторСистемы:'")
			+ Символы.ПС + РезультатЛокальный
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;

	РезультатЛокальный = "";
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Константы.НастройкиНовостей,                                      РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Константы.РазрешенаРаботаСНовостями,                              РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                 РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Справочники.ЗначенияКатегорийНовостей,                            РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Справочники.ЛентыНовостей,                                        РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Справочники.Новости,                                              РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                        РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                           РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                   РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,        РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,                РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные,  РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейПростые,                        РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,          РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.НастройкиПользователейБИП,                       РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                     РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,          РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                        РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                   РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                     РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,       РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,              РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,   РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,    РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.СостоянияНовостей,                               РезультатЛокальный);

	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Константы.НастройкиНовостей,                                      РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Константы.РазрешенаРаботаСНовостями,                              РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                 РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Справочники.ЗначенияКатегорийНовостей,                            РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Справочники.ЛентыНовостей,                                        РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Справочники.Новости,                                              РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                        РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                           РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                   РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,        РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,                РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные,  РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                        РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,          РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                     РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                   РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                     РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,              РезультатЛокальный);
	Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,    РезультатЛокальный);
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ НСтр("ru='Ошибки настройки прав для роли ПолныеПрава:'")
			+ Символы.ПС + РезультатЛокальный
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;

	// 3. Правильно настроен идентификатор конфигурации.
	РезультатЛокальный = "";
	ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
	Если ВРег(ИмяКонфигурации) = ВРег("Unknown") Тогда
		РезультатЛокальный = НСтр("ru='Не настроен идентификатор конфигурации.
			|Для его настройки необходимо внести изменения в общий модуль
			|ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории,
			|для строки условия ProductName.
			|В противном случае новости для этой конфигурации приходить НЕ будут.
			|'");
	КонецЕсли;

	РазрешенныеСимволы = ОбработкаНовостейКлиентСервер.РазрешенныеДляИдентификацииСимволы();
	СписокЗапрещенныхСимволов = ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьСтрокуНаЗапрещенныеСимволы(
		ИмяКонфигурации,
		РазрешенныеСимволы);

	Если СписокЗапрещенныхСимволов.Количество() > 0 Тогда
		Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
			РезультатЛокальный = РезультатЛокальный + Символы.Символы.ПС;
		КонецЕсли;
		РезультатЛокальный = РезультатЛокальный  + НСтр("ru='Неправильно настроен идентификатор конфигурации.
			|Для его настройки необходимо внести изменения в общий модуль
			|ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории,
			|для строки условия ProductName.
			|Идентификатор конфигурации должен состоять из английских букв, цифр, знака минуса и знака подчеркивания.
			|'");
	КонецЕсли;

	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ НСтр("ru='Ошибки настройки кода конфигурации:'")
			+ Символы.ПС + РезультатЛокальный
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;

	// 4. Версия конфигурации должна иметь правильный формат (А.Б.В.Г - четыре числа, разделенные точками).
	// Если версия в метаданных особого формата (известны следующие случаи: А.Б.В.Г.Д или А.Б.В.Г/Д.Е.Ж.З),
	//  то в переопределяемом модуле ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории
	//  "особая" версия должна приводиться к виду А.Б.В.Г.
	РезультатЛокальный = "";
	Версия = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта");
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Версия, ".");
	Если МассивСлов.Количество() <> 4 Тогда
		РезультатЛокальный = НСтр("ru='Неправильно настроена версия конфигурации (количество чисел отлично от 4).
			|В метаданных, в поле Версия должны быть данные вида А.Б.В.Г (четыре числа, разделенные точкой).
			|Если по каким-то причинам версия в метаданных задана в отличном от А.Б.В.Г формате,
			|то необходимо внести изменения в общий модуль
			|ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории,
			|для строки условия ProductVersion.'")
	Иначе
		НайденныеНеправильныеСимволы = Новый Массив;
		ВсеЦифры = ИнтернетПоддержкаПользователейКлиентСервер.ВсеЦифры();
		Для Каждого ТекущееСлово Из МассивСлов Цикл
			Для С=1 По СтрДлина(ТекущееСлово) Цикл
				ТекущаяБуква = Сред(ТекущееСлово, С, 1);
				Если Найти(ВсеЦифры, ТекущаяБуква) = 0 Тогда
					Если НайденныеНеправильныеСимволы.Найти(ТекущаяБуква) = Неопределено Тогда
						НайденныеНеправильныеСимволы.Добавить(ТекущаяБуква);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если НайденныеНеправильныеСимволы.Количество() > 0 Тогда
			РезультатЛокальный = НСтр("ru='Неправильно настроена версия конфигурации (есть неправильные символы).
				|В метаданных, в поле Версия должны быть данные вида А.Б.В.Г (четыре числа, разделенные точкой).
				|Если по каким-то причинам версия в метаданных задана в отличном от А.Б.В.Г формате,
				|то необходимо внести изменения в общий модуль
				|ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории,
				|для строки условия ProductVersion.
				|Список неправильных символов: %НайденныеНеправильныеСимволы%'");
			СНайденныеНеправильныеСимволы = "";
			Для Каждого ТекущийНеправильныйСимвол Из НайденныеНеправильныеСимволы Цикл
				СНайденныеНеправильныеСимволы = СНайденныеНеправильныеСимволы + "#" + ТекущийНеправильныйСимвол + "#";
			КонецЦикла;
			СНайденныеНеправильныеСимволы = СтрЗаменить(СНайденныеНеправильныеСимволы, "##", ", ");
			СНайденныеНеправильныеСимволы = СтрЗаменить(СНайденныеНеправильныеСимволы, "#", "");
			РезультатЛокальный = СтрЗаменить(РезультатЛокальный, "%НайденныеНеправильныеСимволы%", СНайденныеНеправильныеСимволы);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ НСтр("ru='Ошибки настройки версии конфигурации:'")
			+ Символы.ПС + РезультатЛокальный
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура проверяет правильность установки свойств состава общего реквизита для объекта метаданных.
//
// Параметры:
//  лкОбщийРеквизит                 - ОбщийРеквизит - общий реквизит, для которого осуществляется проверка;
//  лкОбъектМетаданных              - ОбъектМетаданных - проверяемый объект;
//  ПравильноеЗначениеИспользования - ИспользованиеОбщегоРеквизита - правильное значение, которое должно быть;
//  Результат                       - Строка - сюда будет дописан текст ошибки.
//
Процедура Проверка_ОбщиеРеквизиты(
			лкОбщийРеквизит,
			ПравильноеЗначениеИспользования,
			лкОбъектМетаданных,
			Результат)

	Свойство_ОбъектАвто           = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	Свойство_ОбъектИспользовать   = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	Свойство_ОбъектНеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	Свойство_АвтоИспользовать     = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
	Свойство_АвтоНеИспользовать   = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать;
	СоответствующееСвойствоОбщегоРеквизита = Неопределено;
	Если ПравильноеЗначениеИспользования = Свойство_ОбъектИспользовать Тогда
		СоответствующееСвойствоОбщегоРеквизита = Свойство_АвтоИспользовать;
	ИначеЕсли ПравильноеЗначениеИспользования = Свойство_ОбъектНеИспользовать Тогда
		СоответствующееСвойствоОбщегоРеквизита = Свойство_АвтоНеИспользовать;
	КонецЕсли;

	НайденныйЭлемент = лкОбщийРеквизит.Состав.Найти(лкОбъектМетаданных);
	Если НайденныйЭлемент <> Неопределено Тогда
		Если (НайденныйЭлемент.Использование = ПравильноеЗначениеИспользования)
				ИЛИ ((НайденныйЭлемент.Использование = Свойство_ОбъектАвто)
					И (лкОбщийРеквизит.АвтоИспользование = СоответствующееСвойствоОбщегоРеквизита)) Тогда
			// Допустимо, если:
			//  признак Использование = ПравильноеЗначениеИспользования;
			//  признак Использование = Авто и лкОбщийРеквизит.Автоиспользование = соответствующее ПравильноеЗначениеИспользования.
		Иначе
			ТекущийРезультат = НСтр("ru='Неправильно установлено использование для %ПолноеИмяМетаданных% в общем реквизите %ИмяОбщегоРеквизита%. Установлено: %НайденныйЭлемент.Использование%, ожидается: %ПравильноеЗначениеИспользования%.
				|Также допустимо, что у %ПолноеИмяМетаданных% установлено использование Авто, но тогда у общего реквизита %ИмяОбщегоРеквизита% должно быть установлено Автоиспользование в %ПравильноеЗначениеИспользования%.'");
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%ПолноеИмяМетаданных%",
				ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(лкОбъектМетаданных) + "." + лкОбъектМетаданных.Имя);
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%ИмяОбщегоРеквизита%",
				лкОбщийРеквизит.Имя);
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%НайденныйЭлемент.Использование%",
				Строка(НайденныйЭлемент.Использование));
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%ПравильноеЗначениеИспользования%",
				Строка(ПравильноеЗначениеИспользования));
			Результат = Результат + ТекущийРезультат + Символы.ПС;
		КонецЕсли;
	Иначе
		ТекущийРезультат = НСтр("ru='Не найден требуемый объект метаданных: %ПолноеИмяМетаданных%'");
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПолноеИмяМетаданных%",
			ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(лкОбъектМетаданных) + "." + лкОбъектМетаданных.Имя);
		Результат = Результат + ТекущийРезультат + Символы.ПС;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет правильность установки прав для объекта метаданных.
//
// Параметры:
//  лкРоль                  - Роль - проверяемая роль;
//  лкПраво                 - Строка - проверяемое право;
//  ПравильноеЗначениеПрава - Булево - правильное значение, которое должно быть;
//  лкОбъектМетаданных      - ОбъектМетаданных - проверяемый объект;
//  Результат               - Строка - сюда будет дописан текст ошибки.
//
Процедура Проверка_Права(
			лкРоль,
			лкПраво,
			ПравильноеЗначениеПрава,
			лкОбъектМетаданных,
			Результат)

	ТекущееЗначениеПрава = ПравоДоступа(лкПраво, лкОбъектМетаданных, лкРоль);
	Если ТекущееЗначениеПрава <> ПравильноеЗначениеПрава Тогда
		ТекущийРезультат = НСтр("ru='Неправильно установлено право %Право% в роли %Роль% для %ПолноеИмяМетаданных%. Установлено: %ТекущееЗначениеПрава%, ожидается: %ПравильноеЗначениеПрава%'");
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПолноеИмяМетаданных%",
			ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(лкОбъектМетаданных) + "." + лкОбъектМетаданных.Имя);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%Право%",
			лкПраво);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%Роль%",
			лкРоль.Имя);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ТекущееЗначениеПрава%",
			ТекущееЗначениеПрава);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПравильноеЗначениеПрава%",
			ПравильноеЗначениеПрава);
		Результат = Результат + ТекущийРезультат + Символы.ПС;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПользователями

// Функция возвращает текущего пользователя ИБ.
// Если список пользователей информационной базы пустой, то в качестве текущего пользователя будет возвращен
//  пользователь с пустым именем и идентификатором объекта, полученного методом НайтиПоИмени, если в параметре указано пустое имя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  ПользовательИнформационнойБазы - текущий пользователь ИБ. Может быть пустым, если в конфигураторе не заполнены пользователи ИБ.
//
Функция ТекущийПользовательИБ() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Возврат ПользовательИБ;

КонецФункции

// Функция возвращает список пользователей, которым разрешено редактировать новости в этой ленте новостей.
// Разрешено редактировать новости пользователям с включенной ролью ПолныеПрава (без каких-либо дополнительных настроек)
//  и пользователям с ролью "РедактированиеНовостей" (если это разрешение явно указано).
// У ЛентыНовостей обязательно должны быть такие настройки: ЗагруженоССервера = Ложь, ЛокальнаяЛентаНовостей = Истина.
//
// Параметры:
//  ЛентаНовостей             - СправочникСсылка.ЛентыНовостей, Структура - Лента новостей, для которой необходимо выполнить проверку.
//                              Если передана структура, то там обязательно должны быть ключи:
//      * Ссылка                 - СправочникСсылка.ЛентыНовостей;
//      * ЗагруженоССервера      - Булево;
//      * ЛокальнаяЛентаНовостей - Булево;
//  ВыводитьВсехПользователей - Булево - Истина, если выводить всех пользователей с ролью РедактированиеНовостей,
//                                       Ложь - если выводить только тех, у кого право редактирования включено;
//
// Возвращаемое значение:
//   Массив - массив структур всех пользователей, которым разрешено редактировать новости в этой ленте новостей, с ключами:
//    * Пользователь              - СправочникСсылка.Пользователи;
//    * ПользовательПредставление - Строка;
//    * ПолныеПрава               - Булево - доступна роль АдминистраторСистемы и ПолныеПрава (т.е. может редактировать новости без дополнительных разрешений);
//    * Пометка                   - Булево - Истина, если разрешено редактировать ленту новостей.
//
Функция ПолучитьСписокРедакторовЛентыНовостей(ЛентаНовостей, ВыводитьВсехПользователей = Ложь) Экспорт

	Результат = Новый Массив;

	ДанныеЛентыНовостей = Новый Структура("Ссылка, ЗагруженоССервера, ЛокальнаяЛентаНовостей",
		Справочники.ЛентыНовостей.ПустаяСсылка(),
		Истина,
		Ложь);
	ЗаполнитьЗначенияСвойств(ДанныеЛентыНовостей, ЛентаНовостей);

	Если (ДанныеЛентыНовостей.ЗагруженоССервера = Ложь)
			И (ДанныеЛентыНовостей.ЛокальнаяЛентаНовостей = Истина) Тогда
		МассивВсехРедакторовНовостей = ОбработкаНовостейПовтИсп.ПолучитьСписокРедакторовНовостей();
		МассивПользователейСРольюРедакторНовостей = Новый Массив;
		// Пользователей с ролью АдминистраторСистемы и ПолныеПрава добавить сразу, с ролью РедактированиеНовостей - проверить.
		Для Каждого ТекущийРедактор Из МассивВсехРедакторовНовостей Цикл
			// Подготовить список пользователей с ролью "АдминистраторСистемы" и "ПолныеПрава" - им разрешено редактировать новости без каких-либо ограничений.
			// Подготовить список пользователей с ролью "РедактированиеНовостей" для дальнейшей обработки.
			Если ТекущийРедактор.ПолныеПрава = Истина Тогда
				Результат.Добавить(
					Новый Структура("Пользователь, ПользовательПредставление, ПолныеПрава, Пометка",
						ТекущийРедактор.Пользователь,
						ТекущийРедактор.ПользовательПредставление,
						Истина,
						Истина));
			Иначе
				МассивПользователейСРольюРедакторНовостей.Добавить(ТекущийРедактор.Пользователь);
			КонецЕсли;
		КонецЦикла;
		// Если есть пользователи с ролью РедакторНовостей, то проверить - разрешено ли им редактировать именно эту ленту новостей.
		Если МассивПользователейСРольюРедакторНовостей.Количество() > 0 Тогда
			Если ВыводитьВсехПользователей = Истина Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка       КАК Пользователь,
					|	Спр.Наименование КАК ПользовательПредставление,
					|	ВЫБОР
					|		КОГДА Рег.Пользователь ЕСТЬ NULL ТОГДА
					|			ЛОЖЬ
					|		ИНАЧЕ
					|			ИСТИНА
					|	КОНЕЦ            КАК Пометка
					|ИЗ
					|	Справочник.Пользователи КАК Спр
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.РазрешенныеДляРедактированияЛентыНовостей КАК Рег
					|	ПО
					|		Рег.Пользователь = Спр.Ссылка
					|		И Рег.ЛентаНовостей = &ЛентаНовостей
					|ГДЕ
					|	Спр.Ссылка В (&МассивПользователейСРольюРедакторНовостей)
					|";
				Запрос.УстановитьПараметр("МассивПользователейСРольюРедакторНовостей", МассивПользователейСРольюРедакторНовостей);
				Запрос.УстановитьПараметр("ЛентаНовостей", ДанныеЛентыНовостей.Ссылка);
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Результат.Добавить(
							Новый Структура("Пользователь, ПользовательПредставление, ПолныеПрава, Пометка",
								Выборка.Пользователь,
								Выборка.ПользовательПредставление,
								Ложь,
								Выборка.Пометка));
					КонецЦикла;
				КонецЕсли;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Рег.Пользователь              КАК Пользователь,
					|	Рег.Пользователь.Наименование КАК ПользовательПредставление
					|ИЗ
					|	РегистрСведений.РазрешенныеДляРедактированияЛентыНовостей КАК Рег
					|ГДЕ
					|	Рег.ЛентаНовостей = &ЛентаНовостей
					|	И Рег.Пользователь В (&МассивПользователейСРольюРедакторНовостей)
					|";
				Запрос.УстановитьПараметр("МассивПользователейСРольюРедакторНовостей", МассивПользователейСРольюРедакторНовостей);
				Запрос.УстановитьПараметр("ЛентаНовостей", ДанныеЛентыНовостей.Ссылка);
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Результат.Добавить(
							Новый Структура("Пользователь, ПользовательПредставление, ПолныеПрава, Пометка",
								Выборка.Пользователь,
								Выборка.ПользовательПредставление,
								Ложь,
								Истина));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
