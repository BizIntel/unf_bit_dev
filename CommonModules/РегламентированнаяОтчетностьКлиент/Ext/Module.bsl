////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм регламентированной
// отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру с текстом выгрузки бухгалтерской отчетности
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой требуется получить сведения.
//   ОтчетныйПериод - Дата - дата в пределах года, за который требуется получить сведения отчета;
//                  - Число - год, за который требуется получить сведения отчета.
// Возвращаемое значение:
//  Неопределено - в случае, если за указанный отчетный период не обнаружен актуальный отчет.
//  Структура - сведения о типе актуального отчета и текст электронного представления.
//   * ТипОтчетности - Строка - одно из значений, определяющих тип отчета: БО, БОМП, БОСОНКО.
//   * ЭлектронноеПредставление - Строка - текст электронного представления отчета
//
Функция ЭлектронноеПредставлениеБухгалтерскойОтчетности(Организация, ОтчетныйПериод) Экспорт
	
	ВыгружаемыйОтчет = РегламентированнаяОтчетностьВызовСервера.АктуальнаяБухгалтерскаяОтчетность(Организация, ОтчетныйПериод);
	
	ЭлектронноеПредставление = Неопределено;
	
	Если ВыгружаемыйОтчет <> Неопределено Тогда
		РеквизитыОтчета = РегламентированнаяОтчетностьВызовСервера.РеквизитыСохраненнойБухгалтерскойОтчетности(ВыгружаемыйОтчет);
		
		ТипОтчетности = РеквизитыОтчета.ИсточникОтчета;
		ТипОтчетности = СтрЗаменить(ТипОтчетности, "РегламентированныйОтчетБухОтчетность", "БО");
		
		ЭлектронноеПредставление = Новый Структура;
		ЭлектронноеПредставление.Вставить("ТипОтчетности", ТипОтчетности);
		ЭлектронноеПредставление.Вставить("ЭлектронноеПредставление", Неопределено);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", РеквизитыОтчета.ДатаНачала);
		ПараметрыФормы.Вставить("мСохраненныйДок",          ВыгружаемыйОтчет);
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  РеквизитыОтчета.ДатаОкончания);
		ПараметрыФормы.Вставить("мВыбраннаяФорма",          РеквизитыОтчета.ВыбраннаяФорма);
		ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
		
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(РеквизитыОтчета.ИсточникОтчета, РеквизитыОтчета.ВыбраннаяФорма);
		ФормаОтчета = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
		
		ТекстВыгрузки = "";
		ВыгрузкаУспешна = ФормаОтчета.УниверсальнаяВыгрузка(ТекстВыгрузки, Ложь);
		
		Если ВыгрузкаУспешна Тогда
			ЭлектронноеПредставление.Вставить("ЭлектронноеПредставление", ТекстВыгрузки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭлектронноеПредставление;
	
КонецФункции

Функция ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст() Экспорт

	Возврат НСтр("ru='Не выбрана организация.'");

КонецФункции

Функция ПриЗаписиРегламентированногоОтчетаНаКлиенте(Форма, КодИФНС = "не применимо", Автосохранение = Ложь, Вариант = Неопределено) Экспорт
	
	Если Вариант <> Неопределено И (Автосохранение И Вариант <> Форма.СтруктураРеквизитовФормы.мВариант) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Форма.Заголовок), , , БиблиотекаКартинок.Записать);
		
	Возврат Истина;
	
КонецФункции

Процедура ВставитьДополнительнуюСтраницуНаКлиенте(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.Элементы.Страницы.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;
    	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			
			ЗаголовокСтраницы=Форма.Элементы.Страницы.ТекущаяСтраница.Заголовок;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			
			Сообщение.Сообщить();
                
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе").Количество();
		
		// Если есть многострочность, то она очищена в проц роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		// Если многострочность есть, то она удалится и запустится Расчет на стадии роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		Если КолМногострочныхЧастей = 0 Тогда
				// Очищаем текущее поле
			Форма.ОчиститьТабличноеПолеНаКлиенте(ИмяТекТабличногоПоля);
		КонецЕсли;

		Если КолМногострочныхЧастей = 0 Тогда
			// Выполняем расчет показателей добавленной страницы
			Форма.РасчетНаКлиенте(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Форма.Модифицированность = Истина;
				                                   
	КонецЕсли;
    		
КонецПроцедуры

Функция ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено) Экспорт
	
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];

		Если ПолучитьЭталонную Тогда
						
			Если Форма.мСтруктураВариантыЗаполненияЭталон.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
				
				МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];
								
				НоваяТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц.Добавить();	
				
				КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения, НоваяТаблицаВариантовЗаполнения.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		Иначе
			
			НомерТекущейСтраницы = 1;
			
			Попытка
				МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
			Исключение
				МногостраничностьЕсть = Ложь;
			КонецПопытки;
			
			Если МногостраничностьЕсть Тогда
				
				Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
					
					ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
					
					СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
					
					Если СтрТаблицаСтраницы.Количество() > 0 Тогда
						НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
					КонецЕсли;
					
				КонецЕсли;
				
				Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
					
					Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
						
						НоваяТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц.Добавить();	
						
						КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения, НоваяТаблицаВариантовЗаполнения.ТаблицаВариантовЗаполнения);
						
					КонецЦикла;
					
				КонецЕсли;
								
			КонецЕсли;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1].ТаблицаВариантовЗаполнения;
			
		КонецЕсли;
		    		
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции

Функция ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, Знач КодПоказателя) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мПоляПоискаПоказателяВТСП") Тогда
		ПоляПоиска = Форма.мПоляПоискаПоказателяВТСП;
	Иначе
		ПоляПоиска = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
	КонецЕсли;

	// В случае, если показатель многострочный (для импорта XML данных в зарплатных отчетах, тогда
	// определим его смысловую часть и найдем раздел.
	Если (Лев(КодПоказателя, 1) = "П") И (СтрНайти(КодПоказателя, "_") = 14) Тогда
		КодПоказателя = Сред(КодПоказателя, 1, СтрНайти(КодПоказателя, "_") - 1);
		// Временный обход для показателя по графе 10 раздела 3. В составе показателей
		// графы 10 нет, поэтому временно привяжем к разделу 3.
		Если КодПоказателя = "П000030001010" Тогда
			Возврат "Раздел3";
		КонецЕсли;
	КонецЕсли;

	МассивПолейПоиска = Новый Массив;
		
	Пока ЗначениеЗаполнено(ПоляПоиска) Цикл
		
		Индекс = СтрНайти(ПоляПоиска, ",");
		
		Если Индекс = 0 Тогда
			МассивПолейПоиска.Добавить(СокрЛП(ПоляПоиска));
			ПоляПоиска = "";
		Иначе
			МассивПолейПоиска.Добавить(СокрЛП(Лев(ПоляПоиска, Индекс - 1)));
			ПоляПоиска = Сред(ПоляПоиска, Индекс + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденнаяСтрока = Неопределено;
		
	Для Каждого Элемент Из Форма.мТаблицаСоставПоказателей Цикл
		
		Для Каждого ПолейПоиска Из МассивПолейПоиска Цикл
			
			Если СокрЛП(Элемент[ПолейПоиска]) = КодПоказателя Тогда
				
				Возврат Элемент.ИмяПоляТаблДокумента;
							
			КонецЕсли;
						
		КонецЦикла;
				
	КонецЦикла;
		
	Возврат Неопределено;

КонецФункции

Процедура ПослеВставкиДополнительнойСтраницыНаКлиенте(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист = Истина) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеВставкиДополнительнойСтраницы(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист);

КонецПроцедуры

Функция НайтиСтрокиВДанныхФормыДерево(ЭлементыДанныхФормыДерево, ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок) Экспорт
	
	Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			МассивНайденныхСтрок.Добавить(ЭлементДерева);
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиСтрокиВДанныхФормыДерево(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат МассивНайденныхСтрок;
	
КонецФункции

Процедура МеханизмыОчисткиРегламентированныхОтчетов(Форма, РежимОчистки = Неопределено, ВыполняемоеОповещение = Неопределено) Экспорт

	Если РежимОчистки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		// Запоминаем текущий раздел, выбранный в дереве разделов формы отчета.
		ТекущийРазделОтчетаСокрНаим = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	КонецЕсли;
	
	Если РежимОчистки = "ОчиститьВесьОтчет" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		// Это описание оповещения будет выполнено после того как выполнена очистка
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОчисткиВсегоОтчета", ЭтотОбъект, ДополнительныеПараметры);
		Форма.Очистить(ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;

	ИмяСтраницы = СтрЗаменить(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела", "");
	ИмяСтраницы = СтрЗаменить(ИмяСтраницы, "ОчиститьТекущийРаздел", "");
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Ложь);
	Многостраничность = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);
	ПредставлениеРазделаОтчета = НРег(ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы));
	СведенияОФЛ = (СтрНайти(НРег(ПредставлениеРазделаОтчета), "физ") > 0) И (СтрНайти(НРег(ПредставлениеРазделаОтчета), "лиц") > 0);

	ОчищенИлиОчищено = "очищен"; // Очищен раздел ...
	Если СтрНайти(НРег(ПредставлениеРазделаОтчета), "заявление") > 0 Тогда
		ОчищенИлиОчищено = "очищено"; // Очищено заявление ...
	КонецЕсли;

	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		// Очистить текущий раздел. Может быть многостраничный.
		Если Многостраничность Тогда
			КолВоСтраницВРазделе = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницы]].Количество();
			Если КолВоСтраницВРазделе > 1 Тогда
				ТекстВопроса = "Внимание! Будут удалены все страницы текущего раздела." + Символы.ПС
				  + "Продолжить?";
			Иначе
				Если СведенияОФЛ Тогда 
					// Очищаем лист со сведениями о физических лицах.
					ТекстВопроса = "Внимание! Будут очищены сведения о физическом лице." + Символы.ПС
					  + "Продолжить?";
				Иначе
					ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС
					  + "Продолжить?";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС
			  + "Продолжить?";
		КонецЕсли;

		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстВопроса);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ИмяСтраницы",ИмяСтраницы);
		ДополнительныеПараметры.Вставить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста",ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		ДополнительныеПараметры.Вставить("РежимОчистки",РежимОчистки);
		ДополнительныеПараметры.Вставить("Многостраничность",Многостраничность);
		ДополнительныеПараметры.Вставить("КолВоСтраницВРазделе",КолВоСтраницВРазделе);
		ДополнительныеПараметры.Вставить("ТекущийРазделОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
		ДополнительныеПараметры.Вставить("НомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущийРазделЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда

		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ИмяСтраницы",ИмяСтраницы);
		ДополнительныеПараметры.Вставить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста",ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		ДополнительныеПараметры.Вставить("РежимОчистки",РежимОчистки);
		ДополнительныеПараметры.Вставить("Многостраничность",Многостраничность);
		ДополнительныеПараметры.Вставить("КолВоСтраницВРазделе",КолВоСтраницВРазделе);
		ДополнительныеПараметры.Вставить("ТекущийРазделОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
		ДополнительныеПараметры.Вставить("НомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущийЭкземплярМногостраничногоРазделаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	КонецЕсли;

КонецПроцедуры

Процедура ВопросОчиститьТекущийРазделЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяСтраницы = ДополнительныеПараметры.ИмяСтраницы;
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = ДополнительныеПараметры.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста;
	РежимОчистки = ДополнительныеПараметры.РежимОчистки;
	Многостраничность = ДополнительныеПараметры.Многостраничность;
	КолВоСтраницВРазделе = ДополнительныеПараметры.КолВоСтраницВРазделе;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Форма.ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе);
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
					НомерСтраницыРазделаОтчета = 1;
				КонецЕсли;
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросОчиститьТекущийЭкземплярМногостраничногоРазделаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяСтраницы = ДополнительныеПараметры.ИмяСтраницы;
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = ДополнительныеПараметры.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста;
	РежимОчистки = ДополнительныеПараметры.РежимОчистки;
	Многостраничность = ДополнительныеПараметры.Многостраничность;
	КолВоСтраницВРазделе = ДополнительныеПараметры.КолВоСтраницВРазделе;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Форма.ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе);
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
					НомерСтраницыРазделаОтчета = 1;
				КонецЕсли;
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Очистить(Форма, ВыполняемоеОповещение = Неопределено, ЗадаватьВопросПередОчисткой = Истина, Знач ТекстВопроса = "") Экспорт
	
	Если ЗадаватьВопросПередОчисткой Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = "Внимание! Будут очищены все разделы отчета." + Символы.ПС
				 + "Продолжить?";
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		Форма.ОчиститьНаСервере();
		
		// устанавливаем флаг модифицированности формы
		Форма.Модифицированность = Истина;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Форма = ДополнительныеПараметры.Форма;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Форма.ОчиститьНаСервере();
		
		// устанавливаем флаг модифицированности формы
		Форма.Модифицированность = Истина;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОчисткиВсегоОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОбновитьДеревоРазделовВФормеОтчета(Форма);
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДеревоРазделовВФормеОтчета(Форма) Экспорт
		
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		// Запоминаем текущий раздел, выбранный в дереве разделов формы отчета.
		ТекущийРазделОтчетаСокрНаим = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	КонецЕсли;
	
	Форма.СформироватьДеревоРазделовОтчетаНаКлиенте();
			
	Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
		
		Если НЕ НайденнаяСтрока = Неопределено 
			И НЕ НомерСтраницыРазделаОтчета = Неопределено 
			И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
				НомерСтраницыРазделаОтчета = 1;
			КонецЕсли;
			
			НайденнаяСтрока2 = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			
			Если НайденнаяСтрока2 = Неопределено Тогда
				
				НомерСтраницыРазделаОтчета = НайденнаяСтрока.ПолучитьЭлементы().Количество();
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			Иначе
				
				НайденнаяСтрока = НайденнаяСтрока2;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	Иначе
		ИмяТекОбласти = ТекущаяОбласть.Имя;
		ПозицияНачалаИмениПараметра = СтрНайти(ИмяТекОбласти, "П0");
		ИмяАктивногоРаздела = Сред(ИмяТекОбласти, ПозицияНачалаИмениПараметра, ДлИмениОбласти);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаполнитьСведенияОбОрганизацииНаКлиенте(Форма, ОргСведения, ПБОЮЛ, Знач СписокСведений, Дополнения = "", РазделДляВывода = "Титульный") Экспорт
	Перем ДанныеПредставителя;
		
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодФНС = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
	КППТитульныйЛист = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1");
	
	РегламентированнаяОтчетностьВызовСервера.ПолучитьСведения(ОргСведения, ПБОЮЛ, Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СписокСведений, ДанныеПредставителя, КодФНС, КППТитульныйЛист);
	
	Результат = "";
	Титульный = Форма["ПолеТабличногоДокумента" + РазделДляВывода];

	// ЕСЛИ В ДЕКЛАРАЦИИ СТАРЫЙ ФОРМАТ "УПОЛНОМОЧЕННЫЙ ПРЕДСТАВИТЕЛЬ", ТОГДА ДАННЫЕ ПО ПРЕДСТАВИТЕЛЮ ПОЛУЧИМ В Т.Ч. ИЗ СПРАВОЧНИКА РЕГИСТРАЦИИИФНС.
	// Алкогольные декларации.
	Если (Титульный.Области.Найти("ИННУп") <> Неопределено)
	 ИЛИ (Титульный.Области.Найти("ИННУпП") <> Неопределено) Тогда
		        		
		// "Сольем" данные в общую структуру.
		Если ОргСведения.Свойство("ФИОУпПред") Тогда
			ОргСведения.Вставить("ФИОУпПред", ДанныеПредставителя.ФИОУпПред);
		КонецЕсли;

		Если ОргСведения.Свойство("ИННУпПред") Тогда
			ОргСведения.Вставить("ИННУпПред", ДанныеПредставителя.ИННУпПред);
		КонецЕсли;

	КонецЕсли;

	ФИО = Неопределено;
	Если НЕ ОргСведения.Свойство("ФИО", ФИО) Тогда
		ФИО = Неопределено;
	КонецЕсли;

	НаимЮЛПол = Неопределено;
	Если НЕ ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол) Тогда
		НаимЮЛПол = Неопределено;
	КонецЕсли;

	ТипНП = Неопределено;
	Если ОргСведения.Свойство("ТипНП", ТипНП) Тогда
		Форма.УправлениеЛистамиНаКлиенте(ТипНП);
	КонецЕсли;

	Для Каждого ПолученныйРезультат Из ОргСведения Цикл

		Результат = ПолученныйРезультат.Значение;
		Параметр  = ПолученныйРезультат.Ключ;

		Если Параметр = "ИННРук" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННРук", 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННБух" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННГБ" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННУпПред" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННУП" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "НаимЮЛПол" Тогда
			Титульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		ИначеЕсли Параметр = "ТелОрганизации" Тогда
			Титульный.Области.ТелОрганизации.Значение = Результат;
		ИначеЕсли Параметр = "ИННЮЛ" Тогда
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 12, "0");
			Иначе
				Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 12, " ");
			КонецЕсли;

			ПроставитьНаВсехЛистахНаКлиенте(Форма, Результат, "ИНН", "", ,,, Истина, ПБОЮЛ);

		ИначеЕсли Параметр = "КППЮЛ" Тогда
			Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 9, " ");
			ПроставитьНаВсехЛистахНаКлиенте(Форма, Результат, "КПП", "", ,,, Истина, ПБОЮЛ);
		ИначеЕсли Параметр = "ОГРН" Тогда
			Если Дополнения = "не предусмотрено для заполнения ФЛ" И ПБОЮЛ Тогда
				ОГРН = "             ";
				ОГРНКоордината = "ОГРН";
			Иначе
				ОГРНКоордината = ?(ТипНП = 3, "ОГРНИП", "ОГРН");
				ОГРН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, ?(ТипНП = 3, 15, 13), " ");
			КонецЕсли;

			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", ОГРНКоордината, СтрДлина(ОГРН), ОГРН);
		ИначеЕсли Параметр = "КодНО" Тогда
			Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 4, " ");
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "КодИМНС", 4, Результат);
		ИначеЕсли Параметр = "НаимНО" Тогда
			Титульный.Области.ОргИМНС.Значение = Результат;
		ИначеЕсли Параметр = "ФИОРук" Тогда
			Титульный.Области.ОргДиректор.Значение  = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "НаимОППол" Тогда
			Если ТипНП = 2 Тогда
				// Если данной организация - обособленное подразделение, то запишем ее название, а в ячейку
				// под название организации, запишем название головной организации.
				Титульный.Области.ОбПодрНазв.Значение = Результат;
				Титульный.Области.ОргНазв.Значение = ОргСведения.НаимГоловнОрг;
			Иначе
				// Если заданная организация не обособка, тогда очистим ее поле.
				Титульный.Области.ОбПодрНазв.Значение = "";
			КонецЕсли;
		ИначеЕсли Параметр = "ФИОБух" Тогда
			Титульный.Области.ОргБухгалтер.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "ФИОУпПред" Тогда
			Титульный.Области.ОргУП.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли СтрНайти(Параметр, "ТитульныйЛистФИО_") > 0 Тогда
			Титульный.Области[Сред(Параметр, 18)].Значение = ФИО;
		ИначеЕсли Параметр = "НаимИОПол" Тогда
			Титульный.Области.ИноОргНазв.Значение = Результат;
		КонецЕсли;

		// Если дата подписи поменялась, то перепишем название в декл. только для ПБОЮЛов.
		Если (Параметр = "НаимЮЛПол" Или Параметр = "ФИО") И ПБОЮЛ Тогда
			Титульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		КонецЕсли;

	КонецЦикла;
    	
	// Если на титульном листе найдена область ДокУпПред - докуент уполномоченного представителя, тогда получим данные о представителе.
	// В отчете должна быть процедура ПроставитьСведенияОПредставителеОрганизации().
	Если Титульный.Области.Найти("ДокУпПред") <> Неопределено Тогда
		Попытка
			Форма.ПроставитьСведенияОПредставителеОрганизацииКлиент();
		Исключение
		КонецПопытки;
	КонецЕсли;

	Форма.ЗаполнитьДатуВЯчейкахНаКлиенте();
	Возврат ОргСведения;

КонецФункции

Процедура ПроставитьНаВсехЛистахНаКлиенте(Форма, Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина, ПБОЮЛ) Экспорт

	Перем ТаблицаСтраницРаздела;

	Если СтрНайти(ПрефиксНаЛисте, "КПП") > 0 Тогда

		Попытка

			Если ПБОЮЛ Тогда
				Значение = "         ";
			КонецЕсли;

		Исключение

		КонецПопытки;

	КонецЕсли;

	ПереборЗнач = Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Количество();

	// В тех отчетах, которые используют процедуру простановки показателей в отчете по собственному алгоритму, там в отчете
	// присутствует экспортная процедура ПроставитьВКвадратыЗначения.
	// Все остальные отчеты используют общую процедуру роПроставитьВКвадратыЗначения, которая находится в общем модуле РО.
	// По имени объекта и по названию формы будем запускать ту или иную процедуру. Ранее, механизм использовал конструкцию
	// Попытка ... Исключение ... КонецПопытки. Было не удобно работать в режиме "ОстанавливатьсяПоОшибкам".
	ФормаОтчета = Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма;
	
	ИмяОбъектаМетаданных = Сред(Лев(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма") - 1), 7);

	ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму = Ложь;
	Если ((ИмяОбъектаМетаданных = "РегламентированныйОтчетДеятельностьИнОргВРФ") И (ФормаОтчета = "ФормаОтчета2004Кв1"))
	 Или ((ИмяОбъектаМетаданных = "РегламентированныйОтчетПрибыльИностраннойОрганизации") И ((ФормаОтчета = "ФормаОтчета2005Кв1") Или (ФормаОтчета = "ФормаОтчета2007Кв1")))
	 Или ((ИмяОбъектаМетаданных = "РегламентированныйОтчетСтатистикаФорма1П ") И ((ФормаОтчета = "ФормаОтчета2005Кв1") Или (ФормаОтчета = "ФормаОтчета2007Кв1"))) Тогда
		ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму = Истина;
	КонецЕсли;
		
	Пока ПереборЗнач > 0 Цикл

		ИмяДляРасчета = Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[ПереборЗнач-1].ИмяСтраницы;

		Если ЗначениеЗаполнено(ТолькоДляЛиста) Тогда
			ЛистыТолько = Новый Структура(ТолькоДляЛиста);
			Если НЕ ЛистыТолько.Свойство(ИмяДляРасчета) Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ЛистИсключение) Тогда
			ЛистыИскл = Новый Структура(ЛистИсключение);
			Если ЛистыИскл.Свойство(ИмяДляРасчета) Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		РезВыбор = (Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяДляРасчета, ТаблицаСтраницРаздела));
		Если (НЕ ЛистыМногостраничные) Или (РезВыбор) Тогда
			
			Колво = РегламентированнаяОтчетностьКлиентСервер.КолвоЛистоВРазделе(Форма, ИмяДляРасчета);

			Для Инд = 1 По Колво Цикл
				// В случае, если в декларации нет своей специализированной процедуры простановки
				// тогда вызовем стандатную из этого модуля.
				// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
				Если ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму Тогда
					Форма.ПроставитьВКвадратыЗначенияКлиент(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				Иначе
					РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ЛистыМногостраничные И (НЕ РезВыбор) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногостраничныхРазделов(Форма, ИмяДляРасчета);

			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндА = 0;
			АктивныйНомерСтр = 0;
			Для Каждого Страница Из ТаблицаСтраницРаздела Цикл

				ИндА = ИндА + 1;

				Колво = РегламентированнаяОтчетностьКлиентСервер.КолвоЛистоВРазделе(Форма, ИмяДляРасчета);

				Для Инд77 = 1 По Колво Цикл

					Если Страница.АктивнаяСтраница Тогда
						// В случае, если в декларации нет своей специализированной процедуры простановки
						// тогда вызовем стандатную из этого модуля.
						// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
						Если ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму Тогда
							Форма.ПроставитьВКвадратыЗначенияКлиент(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						Иначе
							РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						КонецЕсли;

					Иначе

						Если НЕ ТолькоАктивныйЛистМногостраничнойчасти Тогда
							Для Инд = 1 По СтрДлина(Значение) Цикл
									Страница.Данные[0].Значение.Вставить(ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", "") + Строка(Инд), Сред(Значение, Инд, 1));
							КонецЦикла;
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

		ПереборЗнач = ПереборЗнач - 1;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьИННКППНаВсехЛистахРегОтчетаНаКлиенте(Форма, ОргСведения, ПБОЮЛ, НачальноеЗаполнение = Истина, Знач ИННЮЛ = Неопределено, Знач КППЮЛ = Неопределено) Экспорт
    	
	Если ИННЮЛ = Неопределено Тогда
		РезультатИНН = ОргСведения.ИННЮЛ;
	Иначе
		РезультатИНН = ИННЮЛ;
	КонецЕсли;

	Если КППЮЛ = Неопределено Тогда
		РезультатКПП = ОргСведения.КППЮЛ;
	Иначе
		РезультатКПП = КППЮЛ;
	КонецЕсли;

	Если ЗначениеЗаполнено(РезультатИНН) Тогда
		РезультатИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(РезультатИНН, 12, "0");
	Иначе
		РезультатИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(РезультатИНН, 12, " ");
	КонецЕсли;

	РезультатКПП = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(РезультатКПП, 9, " ");

	Если НачальноеЗаполнение Тогда
		Для каждого Страница Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			ИмяСтраницы = Страница.ИмяСтраницы;
			КолвоСтраниц = РегламентированнаяОтчетностьКлиентСервер.КолвоЛистоВРазделе(Форма, ИмяСтраницы);
			Для Инд = 1 По КолвоСтраниц Цикл
				Стр = Строка(Инд) + "_";
				РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяСтраницы, "ИНН" + Стр, 12, РезультатИНН);
				РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяСтраницы, "КПП" + Стр, 9, РезультатКПП);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ПроставитьНаВсехЛистахНаКлиенте(Форма, РезультатИНН, "ИНН", "", ,,, Истина, ПБОЮЛ);
		ПроставитьНаВсехЛистахНаКлиенте(Форма, РезультатКПП, "КПП", "", ,,, Истина, ПБОЮЛ);
	КонецЕсли;

КонецПроцедуры
	
Функция ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(Форма, Область, СтандартнаяОбработка) Экспорт
    
	// Попытка сделана для того, чтобы в случае выделения нескольких ячеек (даже случайно)
	// не возникала ошибка
	Попытка
		Если (Область.Защита)
		 Или (СтрНайти(Область.Имя, "R") >0)
		 Или (СтрНайти(Область.Имя, "C") >0) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат Истина;
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	КонецПопытки;

	Возврат Ложь; // Выбранная область не выделение.

КонецФункции

Функция ИННСоответствуетТребованиямБезТипаНаКлиенте(Форма, Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИННФизЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИННФизЛицо = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИННСоответствуетТребованиямНаКлиенте(Форма, ИНН, ВладелецИННФизЛицо);
	
КонецФункции

Функция ИННСоответствуетТребованиямНаКлиенте(Форма, Знач ИНН, Знач ТипЛица) Экспорт

	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ПеречисленияЮрФизЛицо = Неопределено Тогда
		ПроверяетсяИННФизЛица = ТипЛица;
	Иначе
		ПроверяетсяИННФизЛица = (ТипЛица = Истина ИЛИ ТипЛица = Форма.СтруктураРеквизитовФормы.ПеречисленияЮрФизЛицо);
	КонецЕсли;
	
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда

		КонтрольнаяСумма = 0;

		Для Н = 1 По 9 Цикл

			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОбщуюФормуПоИмени(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
		
	Попытка
		
		Возврат ПолучитьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма." + ИмяФормы, Параметры, Владелец, КлючУникальности);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ПередЗакрытиемРегламентированногоОтчета(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения) Экспорт
				
	Если Форма.Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
		
			ТекстПредупреждения = НСтр("ru='Данные отчета были изменены.
											|Перед завершением работы рекомендуется записать отчет,
											|иначе измененные данные будут утеряны.'");
			
			Возврат;
		
		КонецЕсли;
				
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект, Форма);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросСохранитьИзмененияЗавершение(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Форма.СохранитьНаКлиенте(,Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Форма.Модифицированность = Ложь;
		
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

Процедура ПоказатьСтраницыОтчетаНаКлиенте(Форма) Экспорт

	Если ТипЗнч(Форма.мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат;
	КонецЕсли;
    
	// обновляем исходное дерево значений 
	КопироватьДанныеФормы(Форма.мДеревоВыбранныхСтраниц, Форма.мДеревоСтраницОтчета);
	
	Если РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ПоказатьСтраницу", 1) = Неопределено Тогда
		Форма.Элементы.Отчет.Видимость = Ложь;
	ИначеЕсли Форма.Элементы.Отчет.Видимость = Ложь Тогда
		Форма.Элементы.Отчет.Видимость = Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриИзмененииВидаДокументаИКорректировки(Форма, РазделДокумента = Неопределено, ВидДок = Неопределено, НомКоррект = Неопределено) Экспорт

	ВыбранКорректирующийВидДок = (Форма.ВидДокументаПредставление = "Корректирующий");
	
	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(ВыбранКорректирующийВидДок, 1, 0);
	
	Если РазделДокумента <> Неопределено Тогда

		Если ВидДок <> Неопределено Тогда
			РазделДокумента.Области[ВидДок].Значение = ?(ВыбранКорректирующийВидДок, "3", "1");
		КонецЕсли;

		Если НомКоррект <> Неопределено Тогда
			РазделДокумента.Области[НомКоррект].Значение = Форма.НомерКорректировки;

			Если НЕ ВыбранКорректирующийВидДок Тогда
				РазделДокумента.Области[НомКоррект].Значение = "";
			Иначе
				РазделДокумента.Области[НомКоррект].Значение = Форма.НомерКорректировки;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Форма.Элементы.НомерКорректировки.Доступность = ВыбранКорректирующийВидДок;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда
	
Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт
	
	РазделительПутиОС = ПолучитьРазделительПути();
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Длг.Заголовок = "Укажите каталог";
	Длг.Каталог   = ПутьДляВыгрузки;
	Если Длг.Выбрать() Тогда
		ПутьДляВыгрузки = Длг.Каталог+?(Прав(Длг.Каталог, 1) <> РазделительПутиОС, РазделительПутиОС, "");
		Возврат ПутьДляВыгрузки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецЕсли

Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = СтрНайти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1))
					   + Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции

Процедура ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета() Экспорт
	
	ПоказатьПредупреждение(, НСтр("ru='Отчет не может быть выгружен.
	|Выгрузить этот отчет могут только организации.
	|Для индивидуальных предпринимателей выгрузка не предусмотрена форматом ФНС.
	|Это связано с тем, что индивидуальные предприниматели не обязаны сдавать бухгалтерскую отчетность (пп. 5 п. 1 ст. 23 НК РФ).'"));
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеОНевозможностиОтправкиОтчета() Экспорт
	
	ПоказатьПредупреждение(, НСтр("ru='Отчет не может быть отправлен.
	|Отправить этот отчет могут только организации.
	|Для индивидуальных предпринимателей отправка не предусмотрена форматом ФНС.
	|Это связано с тем, что индивидуальные предприниматели не обязаны сдавать бухгалтерскую отчетность (пп. 5 п. 1 ст. 23 НК РФ).'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вывести машиночитаемую форму уведомления о спецрежимах.

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(Форма) Экспорт
	
	#Если ВебКлиент Тогда
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиенте(Форма);
	#Иначе
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиенте(Форма);
	#КонецЕсли	
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда
Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиентеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	
	Выгрузка = Форма.СформироватьВыгрузкуИПолучитьДанные();
	Если Выгрузка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СохраняемыйФайл = Новый ТекстовыйДокумент;
	СохраняемыйФайл.УстановитьТекст(Выгрузка.ТестВыгрузки);
	СохраняемыйФайл.Записать(ИмяВременногоФайла, Выгрузка.КодировкаВыгрузки);
	СоздатьКаталог(ВременныйКаталог);
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	Для Каждого Элемент Из ДистрибутивКомпонентыПечатиМашиночитаемыхФорм Цикл
		Попытка
			Элемент.Значение.Записать(ВременныйКаталог + Элемент.Представление);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить шаблон машиночитаемой формы ""%1"" во временный каталог!%2'"), Элемент.Представление, Символы.ПС + ОписаниеОшибки());
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
	ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
	Если ТаксДокПринт = Неопределено Тогда
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВременныйКаталог", ВременныйКаталог);
		ДополнительныеПараметры.Вставить("Выгрузка", Выгрузка);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		ДополнительныеПараметры.Вставить("ТаксДокПринт", ТаксДокПринт);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиентеУстановитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для формирования машиночитаемой формы необходимо установить в системе вспомогательную компоненту.%1Установить компоненту сейчас?'"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиентеЗавершение(ТаксДокПринт, ВременныйКаталог, ИмяВременногоФайла, Выгрузка)
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиентеУстановитьКомпонентуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВременныйКаталог = ДополнительныеПараметры.ВременныйКаталог;
	Выгрузка = ДополнительныеПараметры.Выгрузка;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	ИмяВременногоФайла = ДополнительныеПараметры.ИмяВременногоФайла;
	ТаксДокПринт = ДополнительныеПараметры.ТаксДокПринт;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВременныйКаталог) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.'"));
			Возврат;
		Иначе
			ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
			КомпонентаУжеУстанавливалась = Истина;
		КонецЕсли;
		
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиентеЗавершение(ТаксДокПринт, ВременныйКаталог, ИмяВременногоФайла, Выгрузка)
	
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#Если ВебКлиент Тогда
Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыводЧерезВебСервис = ДополнительныеПараметры.ВыводЧерезВебСервис;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	
	Если ВыводЧерезВебСервис Тогда
		Форма = ДополнительныеПараметры.Форма;
		ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
		
		Выгрузка = ДополнительныеПараметры.Форма.СформироватьВыгрузкуИПолучитьДанные();
		Если Выгрузка = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки", Выгрузка.КодировкаВыгрузки);
		ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки", Выгрузка.ИмяФайла);
		ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", РегламентированнаяОтчетностьВызовСервера.ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Выгрузка.ТестВыгрузки, Строка(Новый УникальныйИдентификатор), Выгрузка.КодировкаВыгрузки, Форма.УникальныйИдентификатор ));
		
		ДП = Новый Структура;
		ДП.Вставить("ИмяКнопки", ИмяКнопки);
		ДП.Вставить("Форма", ДополнительныеПараметры.Форма);
		ДП.Вставить("Выгрузка", Выгрузка);
		ДП.Вставить("КодировкаФайлаВыгрузки", Выгрузка.КодировкаВыгрузки);
		ДП.Вставить("ИмяФайлаВыгрузки", Выгрузка.ИмяФайла);
		ДП.Вставить("ФайлВыгрузкиВоВременномХранилище", ФайлВыгрузкиВоВременномХранилище);
		ДП.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЧерезВебСервис", ЭтотОбъект, ДП);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	ВебБраузер = ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
		И НЕ ВебБраузер = "MSIE" Тогда
		ПоказатьПредупреждение(,НСтр("ru='Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.'"));
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЧерезВебСервис(Результат, ДополнительныеПараметры) Экспорт
	// Попытаться напечатать через сервис
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузкиВоВременномХранилище = ДополнительныеПараметры.ФайлВыгрузкиВоВременномХранилище;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	ПараметрыСформированногоОтчета = Новый Структура;
	НаименованиеИФНС = "";
	Если РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахЧерезВебСервис(ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище, ДополнительныеПараметры.Выгрузка.Данные) Тогда
		
		РасширениеФайлаОтчета = "pdf";
		ИмяФайлаВыгрузки = Неопределено;
		Если ПараметрыСформированногоОтчета.Свойство("ИдФайл", ИмяФайлаВыгрузки) И ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ПозицияТочки = СтрНайти(ИмяФайлаВыгрузки, ".");
			ИмяФайлаОтчета = ?(ПозицияТочки = 0, ИмяФайлаВыгрузки, Лев(ИмяФайлаВыгрузки, ПозицияТочки - 1)) + "." + РасширениеФайлаОтчета;
		Иначе
			ИмяФайлаОтчета = "" + Новый УникальныйИдентификатор() + "." + РасширениеФайлаОтчета;
		КонецЕсли; 
		
		// Дополним список параметров для получения отчета
		ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		// Откроем специальную форму длительной операции. Из нее с возрастающим периодом
		// производится вызов серверной процедуры для проверки готовности отчета на веб-сервисе.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
		ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
		
		ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, Форма).Открыть();
		Возврат;
		
	КонецЕсли;
	
	ВебБраузер = ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
		И НЕ ВебБраузер = "MSIE" Тогда
		ПоказатьПредупреждение(,НСтр("ru='Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.'"));
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЧерезВебСервисПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЧерезВебСервисПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки)
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеУстановкиРасширенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеУстановкиРасширенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеУстановкиРасширенияЗавершение(ДополнительныеПараметры) Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеУстановкиРасширенияЗавершениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеУстановкиРасширенияЗавершениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Возврат;
	КонецЕсли;
		
	ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки)
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжениеПослеОтображенияДиалогаВыбораФайла(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВремФайлов = ВыбранныеФайлы[0];
	
	РазделительПутиОС = ПолучитьРазделительПути();
	
	ВремФайл = КаталогВремФайлов + РазделительПутиОС + "ФайлВыгрузки_" + Новый УникальныйИдентификатор + ".tmp";
	
	Если НЕ ДопПараметры.Форма.Окно = Неопределено Тогда
		ДопПараметры.Форма.Окно.Активизировать();
	КонецЕсли;
	
	ФайлВыгрузки = Новый Файл(ВремФайл);
	Выгрузка = ДопПараметры.Форма.СформироватьВыгрузкуИПолучитьДанные();
	Если Выгрузка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	КодировкаФайлаВыгрузки = Выгрузка.КодировкаВыгрузки;
	Текст.УстановитьТекст(Выгрузка.ТестВыгрузки);
	
	Попытка
		Текст.Записать(ВремФайл, КодировкаФайлаВыгрузки);
	Исключение
		Возврат;
	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ДопПараметры.ИмяКнопки);
	ДополнительныеПараметры.Вставить("КаталогВремФайлов", КаталогВремФайлов);
	ДополнительныеПараметры.Вставить("Форма", ДопПараметры.Форма);
	ДополнительныеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	ДополнительныеПараметры.Вставить("Выгрузка", Выгрузка);
	ДополнительныеПараметры.Вставить("КодировкаВыгрузки", Выгрузка.КодировкаВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеФормированияВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеФормированияВыгрузки(Результат, ДополнительныеПараметры) Экспорт
	
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	КаталогВремФайлов = ДополнительныеПараметры.КаталогВремФайлов;
	Форма = ДополнительныеПараметры.Форма;
	Выгрузка = ДополнительныеПараметры.Выгрузка;
	ФайлВыгрузки = Новый Файл(ДополнительныеПараметры.ВремФайл);
	
	Если НЕ ФайлВыгрузки.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДок = Новый ТекстовыйДокумент;
	ВерФормВыгрузки = Выгрузка.КодировкаВыгрузки;
	ТекстДок.Прочитать(ВремФайл, Выгрузка.КодировкаВыгрузки);
	Адрес = ПоместитьВоВременноеХранилище(ТекстДок, Новый УникальныйИдентификатор);
	СтруктураПараметров = РегламентированнаяОтчетностьВызовСервера.СформироватьСтруктуруПараметровФайлаВыгрузкиНаСервере(Адрес, ВерФормВыгрузки);
	
	Если НЕ СтруктураПараметров.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РазделительПутиОС = ПолучитьРазделительПути();
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = РазделительПутиОС, КаталогВремФайлов, КаталогВремФайлов + РазделительПутиОС);
	ВремКаталог = КаталогВремФайлов + "ШаблоныМЧБ_" + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ВремКаталог);
	
	// выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	ОписаниеПолучаемыеФайлы = Новый ОписаниеПередаваемогоФайла(ВремКаталог + Выгрузка.ИмяФайла, ПоместитьВоВременноеХранилище(Выгрузка.Данные, Новый УникальныйИдентификатор));
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ОписаниеПолучаемыеФайлы);
	ПолучитьФайлы(ПолучаемыеФайлы, , , Ложь);
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	КомпонентаУжеУстанавливалась = Истина;
	
	// пытаемся создать объект для формирования машиночитаемой формы
	ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
	Если ТаксДокПринт = Неопределено Тогда
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВремКаталог", ВремКаталог);
		ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("ТаксДокПринт", ТаксДокПринт);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуВВебКлиентеЗавершениеУведомленияОСпецрежимах", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для формирования машиночитаемой формы необходимо установить в системе вспомогательную компоненту.%1Установить компоненту сейчас?'"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВВебКлиентеЗавершениеУведомленияОСпецрежимах(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ТаксДокПринт = ДополнительныеПараметры.ТаксДокПринт;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.'"));
		Иначе
			ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
			КомпонентаУжеУстанавливалась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Вывести машиночитаемую форму.

Процедура ВывестиМашиночитаемуюФорму(Форма, ИмяКнопки) Экспорт
	
	// Специальная проверка для регл. отчета "Единая (упрощенная) налоговая декларация".
	Если Форма.ИмяФормы = "Отчет.РегламентированныйОтчетЕУНД.Форма.ФормаОтчета2007Кв3" Тогда
		НаименованиеНО = "";
		Форма.СтруктураДанныхТитульный.Свойство("ОргИМНС", НаименованиеНО);
		Если НЕ ЗначениеЗаполнено(НаименованиеНО) Тогда
			ТекстПредупреждения = НСтр(
			"ru='На титульном листе не указано наименование налогового органа, в который представляется декларация.
			|Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюМЧБРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	
	#Если ВебКлиент Тогда
		ВывестиМашиночитаемуюФормуВВебКлиенте(Форма, ИмяКнопки);
	#Иначе
		ВывестиМашиночитаемуюФормуВТонкомКлиенте(Форма, ИмяКнопки);
	#КонецЕсли	
		
КонецПроцедуры

#Если ВебКлиент Тогда

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыводЧерезВебСервис = ДополнительныеПараметры.ВыводЧерезВебСервис;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	
	Если ВыводЧерезВебСервис Тогда
		Форма = ДополнительныеПараметры.Форма;
		ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ФайлВыгрузкиВоВременномХранилище", ФайлВыгрузкиВоВременномХранилище);
		ДополнительныеПараметры.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервис", ЭтотОбъект, ДополнительныеПараметры);
		СформироватьТекстВыгрузки(Форма, Неопределено, Истина, , ФайлВыгрузкиВоВременномХранилище, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	ВебБраузер = ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
		И НЕ ВебБраузер = "MSIE" Тогда
		ПоказатьПредупреждение(,НСтр("ru='Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.'"));
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервис(Результат, ДополнительныеПараметры) Экспорт
	// Попытаться напечатать через сервис
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузкиВоВременномХранилище = ДополнительныеПараметры.ФайлВыгрузкиВоВременномХранилище;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	ПараметрыСформированногоОтчета = Новый Структура;
	НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
	Если РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис(Форма.ИмяФормы, НаименованиеИФНС, ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище) Тогда
		
		РасширениеФайлаОтчета = "pdf";
		ИмяФайлаВыгрузки = Неопределено;
		Если ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки) И ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ПозицияТочки = СтрНайти(ИмяФайлаВыгрузки, ".");
			ИмяФайлаОтчета = ?(ПозицияТочки = 0, ИмяФайлаВыгрузки, Лев(ИмяФайлаВыгрузки, ПозицияТочки - 1)) + "." + РасширениеФайлаОтчета;
		Иначе
			ИмяФайлаОтчета = "" + Новый УникальныйИдентификатор() + "." + РасширениеФайлаОтчета;
		КонецЕсли; 
		
		// Дополним список параметров для получения отчета
		ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		// Откроем специальную форму длительной операции. Из нее с возрастающим периодом
		// производится вызов серверной процедуры для проверки готовности отчета на веб-сервисе.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
		ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
		
		ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, Форма).Открыть();
		Возврат;
		
	КонецЕсли;
	
	ВебБраузер = ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
		И НЕ ВебБраузер = "MSIE" Тогда
		ПоказатьПредупреждение(,НСтр("ru='Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.'"));
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервисПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервисПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки)
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение(ДополнительныеПараметры) Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Возврат;
	КонецЕсли;
		
	ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки)
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПродолжениеПослеОтображенияДиалогаВыбораФайла(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВремФайлов = ВыбранныеФайлы[0];
	
	РазделительПутиОС = ПолучитьРазделительПути();
	
	ВремФайл = КаталогВремФайлов + РазделительПутиОС + "ФайлВыгрузки_" + Новый УникальныйИдентификатор + ".tmp";
	
	Если НЕ ДопПараметры.Форма.Окно = Неопределено Тогда
		ДопПараметры.Форма.Окно.Активизировать();
	КонецЕсли;
	
	ФайлВыгрузки = Новый Файл(ВремФайл);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ДопПараметры.ИмяКнопки);
	ДополнительныеПараметры.Вставить("КаталогВремФайлов", КаталогВремФайлов);
	ДополнительныеПараметры.Вставить("Форма", ДопПараметры.Форма);
	ДополнительныеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеФормированияВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	
	СформироватьТекстВыгрузки(ДопПараметры.Форма, ВремФайл, Истина, , ,ОписаниеОповещения);
		
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеФормированияВыгрузки(Результат, ДополнительныеПараметры) Экспорт
			
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	КаталогВремФайлов = ДополнительныеПараметры.КаталогВремФайлов;
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузки = Новый Файл(ДополнительныеПараметры.ВремФайл);
	
	Если НЕ ФайлВыгрузки.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ВерФормВыгрузки = Строка(РегламентированнаяОтчетностьВызовСервера.ВерсияФорматаВыгрузки(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, Лев(СтрЗаменить(Форма.ИмяФормы, "Отчет.", ""), СтрНайти(СтрЗаменить(Форма.ИмяФормы, "Отчет.", ""), ".") - 1)));
	
	ТекстДок = Новый ТекстовыйДокумент;
	
	ТекстДок.Прочитать(ВремФайл, ?(СтрЧислоВхождений(ВерФормВыгрузки, "Версия 2") > 0 ИЛИ СтрЧислоВхождений(ВерФормВыгрузки, "Версия 3") > 0, "cp866", "windows-1251"));
	
	Адрес = ПоместитьВоВременноеХранилище(ТекстДок, Новый УникальныйИдентификатор);
	
	// извлекаем параметры сформированного файла выгрузки
	СтруктураПараметров = РегламентированнаяОтчетностьВызовСервера.СформироватьСтруктуруПараметровФайлаВыгрузкиНаСервере(Адрес, ВерФормВыгрузки);
	
	Если НЕ СтруктураПараметров.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РазделительПутиОС = ПолучитьРазделительПути();
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = РазделительПутиОС, КаталогВремФайлов, КаталогВремФайлов + РазделительПутиОС);
	ВремКаталог = КаталогВремФайлов + "ШаблоныМЧБ_" + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ВремКаталог);
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	
	// выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	Если НЕ ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, СтруктураПараметров["КНД"], ?(СтруктураПараметров["ЭтоXML"], СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]), ДистрибутивКомпонентыПечатиМашиночитаемыхФорм) Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентаУжеУстанавливалась = Истина;
	
	// пытаемся создать объект для формирования машиночитаемой формы
	ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
	Если ТаксДокПринт = Неопределено Тогда
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВремКаталог", ВремКаталог);
		ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("ТаксДокПринт", ТаксДокПринт);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуВВебКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для формирования машиночитаемой формы необходимо установить в системе вспомогательную компоненту.%1Установить компоненту сейчас?'"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВВебКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ТаксДокПринт = ДополнительныеПараметры.ТаксДокПринт;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.'"));
		Иначе
			ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
			КомпонентаУжеУстанавливалась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

Процедура ВопросОткрытьСправкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьСправку("v8help://1cv8/FeatureIE");
	КонецЕсли;
	
КонецПроцедуры

Процедура АктивизироватьОсновноеОкно()

	ОкнаКлиентПрил = ПолучитьОкна();
	
	ОсновноеОкно = Неопределено;
	Для Каждого ОткрытоеОкно Из ОкнаКлиентПрил Цикл
		Если ОткрытоеОкно.Основное Тогда
			ОсновноеОкно = ОткрытоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ОсновноеОкно = Неопределено Тогда
		ОсновноеОкно.Активизировать();
	КонецЕсли;

КонецПроцедуры

#Иначе

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтоВебКлиент = Ложь;
	АдресПараметровПроксиВоВременномХранилище = "";
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище,, ЭтоВебКлиент);
	
	Если ВыводЧерезВебСервис Тогда
		Форма = ДополнительныеПараметры.Форма;
		ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ФайлВыгрузкиВоВременномХранилище", ФайлВыгрузкиВоВременномХранилище);
		ДополнительныеПараметры.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезСервис", ЭтотОбъект, ДополнительныеПараметры);
		СформироватьТекстВыгрузки(Форма, Неопределено, Истина, , ФайлВыгрузкиВоВременномХранилище, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	ФайлВыгрузки = Новый Файл(ВремФайл);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеПослеФормированияВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	СформироватьТекстВыгрузки(Форма, ВремФайл, Истина, , ,ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезСервис(Результат, ДополнительныеПараметры) Экспорт
	// Попытаться напечатать через сервис
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузкиВоВременномХранилище = ДополнительныеПараметры.ФайлВыгрузкиВоВременномХранилище;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	ПараметрыСформированногоОтчета = Новый Структура;
	НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
	Если РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис(Форма.ИмяФормы, НаименованиеИФНС, ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище) Тогда
		
		РасширениеФайлаОтчета = "pdf";
		ИмяФайлаВыгрузки = Неопределено;
		Если ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки) И ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ПозицияТочки = СтрНайти(ИмяФайлаВыгрузки, ".");
			ИмяФайлаОтчета = ?(ПозицияТочки = 0, ИмяФайлаВыгрузки, Лев(ИмяФайлаВыгрузки, ПозицияТочки - 1)) + "." + РасширениеФайлаОтчета;
		Иначе
			ИмяФайлаОтчета = "" + Новый УникальныйИдентификатор() + "." + РасширениеФайлаОтчета;
		КонецЕсли; 
		
		// Дополним список параметров для получения отчета
		ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		// Откроем специальную форму длительной операции. Из нее с возрастающим периодом
		// производится вызов серверной процедуры для проверки готовности отчета на веб-сервисе.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
		ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
		
		ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, Форма).Открыть();
		Возврат;
		
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузки = Новый Файл(ВремФайл);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеПослеФормированияВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	СформироватьТекстВыгрузки(Форма, ВремФайл, Истина, , ,ОписаниеОповещения);
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеПослеФормированияВыгрузки(Результат, ДополнительныеПараметры) Экспорт
	
	РазделительПутиОС = ПолучитьРазделительПути();
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузки = ДополнительныеПараметры.ФайлВыгрузки;
	
	Если Не ФайлВыгрузки.Существует() Тогда
		Возврат;
	КонецЕсли;
	// извлекаем параметры сформированного файла выгрузки
	СтруктураПараметров = СформироватьСтруктуруПараметровФайлаВыгрузкиНаКлиенте(ВремФайл);
	КаталогВремФайлов = КаталогВременныхФайлов();
	
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = РазделительПутиОС, КаталогВремФайлов, КаталогВремФайлов + РазделительПутиОС);
	ВремКаталог = КаталогВремФайлов + "ШаблоныМЧБ_" + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ВремКаталог);
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	
	// выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	Если НЕ ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, СтруктураПараметров["КНД"], ?(СтруктураПараметров["ЭтоXML"], СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]), ДистрибутивКомпонентыПечатиМашиночитаемыхФорм) Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентаУжеУстанавливалась = Истина;
	
	// пытаемся создать объект для формирования машиночитаемой формы
	ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
	
	Если ТаксДокПринт = Неопределено Тогда
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВремКаталог", ВремКаталог);
		ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("ТаксДокПринт", ТаксДокПринт);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуВТонкомКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для формирования машиночитаемой формы необходимо установить в системе вспомогательную компоненту.%1Установить компоненту сейчас?'"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВывестиМашиночитаемуюФормуВТонкомКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВТонкомКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ТаксДокПринт = ДополнительныеПараметры.ТаксДокПринт;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.'"));
		Иначе
			ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
			КомпонентаУжеУстанавливалась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМашиночитаемуюФормуВТонкомКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

#КонецЕсли

Функция СоздатьОбъектДляФормированияМашичитаемойФормы() Экспорт
	
	Попытка
		Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint2");
	Исключение
		Попытка
			Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

Функция УстановитьКомпонентуПечатиМашиночитаемыхФорм(ЖдатьЗавершения, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог = "") Экспорт
	
	Если ЖдатьЗавершения = Неопределено Тогда
		ЖдатьЗавершения = Истина;
	КонецЕсли;
						
	// сохраняем дистрибутив во временный файл с расширением = исходное имя файла дистрибутива
	#Если ВебКлиент Тогда
		ВремФайлДистрибутива = ВремКаталог + ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Представление;
	#Иначе
		ВремФайлДистрибутива = ПолучитьИмяВременногоФайла(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Представление);
	#КонецЕсли
		
	Попытка
		#Если ВебКлиент Тогда
			ОписаниеПолучаемыеФайлы = Новый ОписаниеПередаваемогоФайла(ВремФайлДистрибутива, ПоместитьВоВременноеХранилище(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Значение, Новый УникальныйИдентификатор));
			
			ПолучаемыеФайлы = Новый Массив;
			
			ПолучаемыеФайлы.Добавить(ОписаниеПолучаемыеФайлы);
			
			РезультатПолученияФайлов = ПолучитьФайлы(ПолучаемыеФайлы, , , Ложь);
		#Иначе
			ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Значение.Записать(ВремФайлДистрибутива);
		#КонецЕсли
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось сохранить дистрибутив компоненты печати машиночитаемых форм во временный файл!%1'"), Символы.ПС + ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	#Если ВебКлиент Тогда
		Если НЕ РезультатПолученияФайлов Тогда
			
			ПоказатьПредупреждение(,НСтр("ru='Установка компоненты отменена.'"));
			
			Возврат Ложь;
			
		КонецЕсли;
	#КонецЕсли
		
	// запускаем инсталляцию
	Попытка
		ЗапуститьПриложение(ВремФайлДистрибутива, , ЖдатьЗавершения);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При попытке установки компоненты печати машиночитаемых форм произошла ошибка!%1'"), Символы.ПС + ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	// возвращаем признак
	Если ЖдатьЗавершения Тогда
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Возврат КомпонентаПечатиМашиночитаемыхФормДоступна();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция КомпонентаПечатиМашиночитаемыхФормДоступна() Экспорт
	
	Возврат (СоздатьОбъектДляФормированияМашичитаемойФормы() <> Неопределено);
	
КонецФункции

Процедура ОбработатьОшибкуМодуляПечатиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезапускаПрограммыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сейчас будет запущена программа установки компоненты печати.%1Возможно, в ходе установки потребуется завершение сеанса работы ""1С:Предприятие"".%2Продолжить?'"), Символы.ПС, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросПерезапускаПрограммыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		УстановитьКомпонентуПечатиМашиночитаемыхФорм(Ложь, ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ДополнительныеПараметры.ВремКаталог);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, ПризнакНумеруемыхФорм, СписокПечатаемыхЛистов) Экспорт

	Если ПризнакНумеруемыхФорм = Неопределено Тогда
		ПризнакНумеруемыхФорм = Истина;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокПечатаемыхЛистов", СписокПечатаемыхЛистов);
	ПараметрыФормы.Вставить("ВидПечати",              ВидПечати);
	ПараметрыФормы.Вставить("ЗаголовокФормы",         Форма.Заголовок);
	
	ПредПросмотр = ПолучитьОбщуюФормуПоИмени("ПечатьРегламентированныхОтчетов", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
	СписокПечатаемыхЛистов.Очистить();
	
	Если НЕ ПредПросмотр = Неопределено Тогда
		
		Если ВидПечати = "ПечататьСразу" Тогда
			
			ПредПросмотр.ПечататьСразу();
		
		Иначе
			
			ПредПросмотр.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
			ПредПросмотр.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура АктивизироватьЯчейку(Форма, Ячейка) Экспорт
		
	ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", Ячейка.Раздел);
	
	Если НЕ ТекущаяСтраницаРаздела = Неопределено
		И ЗначениеЗаполнено(Ячейка.Страница)
		И ТекущаяСтраницаРаздела.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущаяСтраницаРаздела.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", Число(Ячейка.Страница));
		
	КонецЕсли;
	
	Если НЕ ТекущаяСтраницаРаздела = Неопределено Тогда
		
		Форма.СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРаздела.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено
		    И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	
		Иначе
			
			НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	
		Иначе
			
			НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	
			Иначе
				
				Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = Форма.ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
					
КонецПроцедуры

// Функция выводит на печать/предварительный просмотр регламентированные отчеты.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СписокЗначений - список ссылок на регламентированные отчеты.
//   ВидПечати                - Строка - вид печати ("ПоказатьБланк" или "ПечататьСразу").
//
// Возвращаемое значение:
//   Булево - Ложь - если не был найден регл. отчет.
//
Функция НапечататьОтчеты(СписокСсылокНаРеглОтчеты, ВидПечати = "ПоказатьБланк") Экспорт
	
	Для Каждого Стр Из СписокСсылокНаРеглОтчеты Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Попытка
			
			ПредставлениеДокументаРеглОтч = "";
			
			Отчет = ИнициализацияОтчета(Стр.Значение, ПредставлениеДокументаРеглОтч);
			Если Отчет = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
						
			Отчет.Печать(ВидПечати, Истина);
			Отчет = Неопределено;
			
		Исключение
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Не удалось напечатать отчет! Вероятно, отчетом не предусмотрена возможность печати без открытия формы.'"), ПредставлениеДокументаРеглОтч);

			Сообщение.Сообщить();
            						
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ИнициализацияОтчета(Док, ПредставлениеДокументаРеглОтч = Неопределено) Экспорт
	
	ПараметрыФормыИзСохраненногоОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыФормыИзСохраненногоОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыФормыИзСохраненногоОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          ПараметрыФормыИзСохраненногоОтчета.мСохраненныйДок);
	ПараметрыФормы.Вставить("мПериодичность",           ПараметрыФормыИзСохраненногоОтчета.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              ПараметрыФормыИзСохраненногоОтчета.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыФормыИзСохраненногоОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыФормыИзСохраненногоОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ВыбФормаОтчета = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВыбФормаОтчета.СтруктураРеквизитовФормы.мВерсияФормы) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
		
	Возврат ВыбФормаОтчета;
	
КонецФункции

// Функция выгружает в электронном виде регламентированные отчеты.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СписокЗначений - список ссылок на регламентированные отчеты.
//	 КаталогСохранения        - Строка - каталог, в котором будет сохранен сформированный файл выгрузки.
//   СообщенияОбОшибках       - Массив - массив структур, содержащий сообщения об ошибках.
// 		 					             Если параметр не указан, то сообщения об ошибках,
// 							             обнаруженных при проверке выгрузки, выводятся
// 							             в специальной форме, иначе возвращаются в параметре.
//   ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно - Булево - признак интерактивного сохранения файла выгрузки в веб-клиенте.
//   ВыгружатьСОшибками - Булево - признак выгрузки с ошибками.
//   ФайлВыгрузкиВоВременномХранилище - Структура - файл выгрузки во временном хранилище.
//   УникальныйИДФормы - Строка - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево - Истина - выгрузка выполнена,
//            Ложь   - выгрузка прервана.
//
// Пример:
//   СообщенияОбОшибках = Новый Массив;
//	 РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(СписокСсылокНаРеглОтчеты, "C:\Temp\", СообщенияОбОшибках);
//
Функция ВыгрузитьОтчеты(СписокСсылокНаРеглОтчеты, КаталогСохранения = Неопределено, СообщенияОбОшибках = Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина, ВыгружатьСОшибками = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, УникальныйИДФормы = Неопределено) Экспорт

	Попытка
		Если ТипЗнч(СписокСсылокНаРеглОтчеты) <> Тип("СписокЗначений") ИЛИ СписокСсылокНаРеглОтчеты.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверки = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыгрузки(СписокСсылокНаРеглОтчеты);
		
		Если РезультатПроверки = 1 Тогда
			
			ПоказатьПредупреждение(,НСтр("ru='У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна!'"));
			
		ИначеЕсли РезультатПроверки = 2 Тогда
			
			ПоказатьПредупреждение(,НСтр("ru='У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна!'"));
			
		Иначе
			
			ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента");
			
			ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СписокСсылокНаРеглОтчеты, , , , , Истина, КаталогСохранения, СообщенияОбОшибках, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно, ВыгружатьСОшибками, ФайлВыгрузкиВоВременномХранилище, УникальныйИДФормы);
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Функция проверяет возможность выгрузки в электронном виде регламентированных отчетов.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СпискоЗначений - список ссылок на регламентированные отчеты.
//   СообщенияОбОшибках       - Массив - массив структур, содержащий сообщения об ошибках.
// 							             Если параметр не указан, то сообщения об ошибках,
// 							             обнаруженных при проверке выгрузки, выводятся
// 							             в специальной форме, иначе возвращаются в параметре.
//
// Возвращаемое значение:
//   Булево - Истина - проверка выполнена,
//            Ложь   - проверка прервана.
//
// Пример:
//   СообщенияОбОшибках = Новый Массив;
//   РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СписокСсылок, СообщенияОбОшибках);
//
Функция ПроверитьРегламентированныеОтчеты(СписокСсылокНаРеглОтчеты, СообщенияОбОшибках = Неопределено) Экспорт
	
	Попытка
		
		Если ТипЗнч(СписокСсылокНаРеглОтчеты) <> Тип("СписокЗначений") ИЛИ СписокСсылокНаРеглОтчеты.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента");
	
		ФормаВыгрузкиРеглОтчета.Проверить(СписокСсылокНаРеглОтчеты, СообщенияОбОшибках);
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура ПослеЗаписиРегламентированногоОтчета(Форма) Экспорт
	
	Форма.СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено;
	
	Попытка
		Источник = Новый Структура(); 
		Источник.Вставить("Ссылка", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		Источник.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
		Если Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина Тогда
			Оповестить("Позиционирование в списке отчетов", Источник);
		Иначе
			Оповестить("Запись_РегламентированныйОтчет", Источник);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыбратьФормуОтчетаИзДействующегоСписка(Форма, ВыполняемоеОповещение = Неопределено, ДопТекстОписания = "") Экспорт

	// Получим таблицу соответствующих периоду форм.
	ТаблицаВыбораФормы = РегламентированнаяОтчетностьКлиентСервер.ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мВыбраннаяФорма", Форма.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("ТаблицаВыбораФормы", ТаблицаВыбораФормы);
	
	ВыборФормыОтчета = ПолучитьОбщуюФормуПоИмени("ВыборФормыОтчета", ПараметрыФормы, Форма);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ДопТекстОписания", ДопТекстОписания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФормуОтчетаИзДействующегоСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВыборФормыОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ВыборФормыОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ВыборФормыОтчета.Открыть();
	
КонецПроцедуры

Процедура ВыбратьФормуОтчетаИзДействующегоСпискаЗавершение(ВыбСтрока, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Форма = ДополнительныеПараметры.Форма;
	Результат = Неопределено;
	
	Если Не ВыбСтрока = Неопределено Тогда
		
		СтрОтбора = Новый Структура;
		СтрОтбора.Вставить("ОписаниеОтчета", ВыбСтрока.ОписаниеОтчета);
		
		ВыбСтрока = Форма.мТаблицаФормОтчета.НайтиСтроки(СтрОтбора);
		
		Результат = ВыбСтрока[0].ФормаОтчета;
		
		Форма.ОписаниеНормативДок = ВыбСтрока[0].ОписаниеОтчета;
		
		СохрОписаниеНормативДок = Форма.ОписаниеНормативДок;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = ДополнительныеПараметры.ДопТекстОписания;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СохрОписаниеНормативДок)
		   И ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = Форма.ОписаниеНормативДок + "
			|" + СохрОписаниеНормативДок + ".";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКодОКВЭДНаТитульномЛисте(Форма, СтандартнаяОбработка) Экспорт
	
	Титульный = Форма.ТабличныйДокумент;
	НачЗначение = СокрЛП(Титульный.Области.ОКВЭД);

	СтандартнаяОбработка = Ложь;
	ВводЗначений = ПолучитьОбщуюФормуПоИмени("ФормаВводаОКВЭД");
	
	ВводЗначений.ОКВЭД = НачЗначение;
	ДополнительныеПараметры = Новый Структура("Титульный, Форма", Титульный, Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьКодОКВЭДНаТитульномЛистеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВводЗначений.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ВводЗначений.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ВводЗначений.Открыть();

КонецПроцедуры

Процедура УстановитьКодОКВЭДНаТитульномЛистеЗавершение(ЗначОКВЭД, ДополнительныеПараметры) Экспорт
	
	Титульный = ДополнительныеПараметры.Титульный;
	Форма = ДополнительныеПараметры.Форма;
	
	Если НЕ ЗначОКВЭД = Неопределено Тогда
		
		Форма.Модифицированность = Истина;
		
		РезультатВвода = ЗначОКВЭД;
		
		Если СтрЗаменить(РезультатВвода, " ", "") = ".." Тогда
			РезультатВвода = "";
		КонецЕсли;
		
		Титульный.Области.ОКВЭД = РезультатВвода;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИУстановитьТерриториальныйОрганФНС(Форма, СтандартнаяОбработка, ИмяТитульногоЛиста, ВыполняемоеОповещение = Неопределено) Экспорт
    
	Титульный = Форма["ТабличныйДокумент"];
		
	КодИМНС = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, ИмяТитульногоЛиста, "КодИМНС");
	КПП     = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, ИмяТитульногоЛиста, "КПП1"); 
		
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, Форма);
	
	ФормаВыбораНалоговогоОргана.Элементы.ТаблицаНОНаименование.Видимость  = Истина;
    ФормаВыбораНалоговогоОргана.Элементы.ТаблицаНОПредставитель.Видимость = Ложь;
		
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() > 1 Тогда
		ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, Титульный, Форма", ВыполняемоеОповещение, Титульный, Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИУстановитьТерриториальныйОрганФНСЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для выбора инспекции необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИУстановитьТерриториальныйОрганФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Титульный = ДополнительныеПараметры.Титульный;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ВыбранноеНаименованиеНО = РезультатВыбора.Наименование;
		
		Если ВыбранноеНаименованиеНО <> "Пустое значение" Тогда
			
			Титульный.Области.КодИМНС.Значение = ВыбранныйКодНО;
			Титульный.Области.ОргИМНС.Значение = ВыбранноеНаименованиеНО;
			// Если есть в декларации лист ФизЛиц, тогда считаем ФИО на листе, если оно пустое, то КПП на листе Ф.Л. не проставляем.
			ЛистФЛЕсть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, "ФизЛица", "МногострочностьВРазделе") <> Неопределено;
			ЛистФЛ = "";
			Если ЛистФЛЕсть Тогда
				Попытка
					ФИОФЛ = Форма["ПолеТабличногоДокументаФизЛица"].Области.ФизЛицФИО.Значение;
					Если ПустаяСтрока(ФИОФЛ) Тогда
						// Если на листе нет ФИО, значит лист не заполняем, пропускае простановку КПП.
						ЛистФЛ = "ФизЛица";
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Титульный.Области.КПП1.Значение = РезультатВыбора.КПП;
			
		Иначе
			
			Титульный.Области.КодИМНС.Значение = "";
			Титульный.Области.ОргИМНС.Значение = "";
			
			Титульный.Области.КПП1.Значение = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Функция ВебБраузер() Экспорт
			
	СисИнфо = Новый СистемнаяИнформация;
	
	ВебБраузер = СисИнфо.ИнформацияПрограммыПросмотра;
	
	Если СтрЧислоВхождений(ВРег(ВебБраузер), "MSIE") > 0 
			ИЛИ СтрЧислоВхождений(ВРег(ВебБраузер), "TRIDENT") > 0 Тогда
		
		ВебБраузер = "MSIE";
		
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "FIREFOX") > 0 Тогда
		
		ВебБраузер = "FIREFOX";
		
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "CHROME") > 0 Тогда
		
		ВебБраузер = "CHROME";
		
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "SAFARI") > 0 Тогда	
		
		ВебБраузер = "SAFARI";
		
	КонецЕсли;
		
	Возврат ВебБраузер;
	
КонецФункции

Функция ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417() Экспорт
			
	Возврат Истина;
		
КонецФункции

Процедура ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор) Экспорт
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		ПоказатьПредупреждение(,"Недостаточно прав!");
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		ПоказатьПредупреждение(,"Отчет не найден!");
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетностьВызовСервера.ПроверитьДоступностьОтчета(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОрганизацияОтбор);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ДатаНач);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаКон);
	ПараметрыФормы.Вставить("мПериодичность", Периодичность);
	
	Если ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
		ОткрытьФорму("Отчет." + ИсточникОтчета + ".Форма." + РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1(), ПараметрыФормы);
	Иначе
		ОткрытьФорму("Отчет." + ИсточникОтчета + ".Форма.ОсновнаяФорма", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНапоминанияПользователяКалендарьБухгалтера() Экспорт
	
	Напоминания = РегламентированнаяОтчетностьВызовСервера.СформироватьНапоминанияПользователяКалендарьБухгалтера();
	
	Если Напоминания <> Неопределено И Напоминания.Количество() > 0 Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Напоминания", Напоминания);
						
		ОткрытьФорму("Обработка.КалендарьБухгалтера.Форма.ФормаНапоминания", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношения(Форма, ОбработкаКС, НеОткрыватьПриОтсутствииОшибок = Ложь) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("НеОткрыватьПриОтсутствииОшибок", НеОткрыватьПриОтсутствииОшибок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(, ОписаниеОповещения)
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОбработкаКС = Форма.ОбработкаКС;
	РезультатПроверки = Форма.ПроверитьКонтрольныеСоотношенияВОтчете();
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверки);
	ПараметрыФормы.Вставить("ТекстДляЗаголовочнойЧасти", Форма.СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	Если РезультатПроверки.Свойство("ЭтоАвтопроверкаСтатистики") Тогда 
		ПараметрыФормы.Вставить("ЭтоАвтопроверкаСтатистики");
	КонецЕсли;
	
	Если РезультатПроверки.КоличествоНайденныхОшибок > 0 Тогда
		
		Если ОбработкаКС = Неопределено Тогда
			ОбработкаКС = ПолучитьФорму("Обработка.РегламентированнаяОтчетностьСоотношенияПоказателей.Форма.КонтрольныеСоотношения",
				ПараметрыФормы, Форма);
				ОбработкаКС.Открыть();
		Иначе
			Если ОбработкаКС.Открыта() Тогда
				ОбработкаКС.Активизировать();
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
			Иначе
				ОбработкаКС.Открыть();
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
			КонецЕсли;
		КонецЕсли;
		Форма.ОбработкаКС = ОбработкаКС;
		
	ИначеЕсли ДополнительныеПараметры.НеОткрыватьПриОтсутствииОшибок = Ложь Тогда 
		ДополнительныеПараметры = Новый Структура("ПараметрыФормы, Форма", ПараметрыФормы, Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВывестиФормуПросмотраСоотношенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='В отчете не обнаружены ошибки по соотношениям показателей.
			|Вывести форму для просмотра соотношений?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношенияПоШаблону(Форма, ОбработкаКС, ФормаВладелец) Экспорт
	
	ОбработкаКС = Форма.ОбработкаКС;
	РезультатПроверки = Форма.ПроверитьКонтрольныеСоотношенияВОтчете();
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверки);
	ПараметрыФормы.Вставить("ТекстДляЗаголовочнойЧасти", Форма.СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	Если РезультатПроверки.Свойство("ЭтоАвтопроверкаСтатистики") Тогда 
		ПараметрыФормы.Вставить("ЭтоАвтопроверкаСтатистики");
	КонецЕсли;
	
	Если РезультатПроверки.КоличествоНайденныхОшибок > 0 Тогда
		
		Если ОбработкаКС = Неопределено Тогда
			ОбработкаКС = ПолучитьФорму("Обработка.РегламентированнаяОтчетностьСоотношенияПоказателей.Форма.КонтрольныеСоотношения",
				ПараметрыФормы, ФормаВладелец);
				ОбработкаКС.Открыть();
		Иначе
			Если ОбработкаКС.Открыта() Тогда
				ОбработкаКС.Активизировать();
				Оповестить("ОбновитьКС", ПараметрыФормы, ФормаВладелец);
			Иначе
				ОбработкаКС.Открыть();
				Оповестить("ОбновитьКС", ПараметрыФормы, ФормаВладелец);
			КонецЕсли;
		КонецЕсли;
		ФормаВладелец.ОбработкаКС = ОбработкаКС;
		
	Иначе
		ДополнительныеПараметры = Новый Структура("ПараметрыФормы, Форма", ПараметрыФормы, ФормаВладелец);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВывестиФормуПросмотраСоотношенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='В отчете не обнаружены ошибки по соотношениям показателей.
			|Вывести форму для просмотра соотношений?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиКонтрольныеСоотношенияПоШаблону(РезультатПроверки, ОбработкаКС, ФормаВладелец) Экспорт
	
	ОбработкаКС = ФормаВладелец.ОбработкаКС;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверки);
	ПараметрыФормы.Вставить("ТекстДляЗаголовочнойЧасти", ФормаВладелец.СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	Если РезультатПроверки.Свойство("ЭтоАвтопроверкаСтатистики") Тогда 
		ПараметрыФормы.Вставить("ЭтоАвтопроверкаСтатистики");
	КонецЕсли;
	
	Если РезультатПроверки.КоличествоНайденныхОшибок > 0 Тогда
		
		Если ОбработкаКС = Неопределено Тогда
			ОбработкаКС = ПолучитьФорму("Обработка.РегламентированнаяОтчетностьСоотношенияПоказателей.Форма.КонтрольныеСоотношения",
				ПараметрыФормы, ФормаВладелец);
				ОбработкаКС.Открыть();
		Иначе
			Если ОбработкаКС.Открыта() Тогда
				ОбработкаКС.Активизировать();
				Оповестить("ОбновитьКС", ПараметрыФормы, ФормаВладелец);
			Иначе
				ОбработкаКС.Открыть();
				Оповестить("ОбновитьКС", ПараметрыФормы, ФормаВладелец);
			КонецЕсли;
		КонецЕсли;
		ФормаВладелец.ОбработкаКС = ОбработкаКС;
		
	Иначе
		ДополнительныеПараметры = Новый Структура("ПараметрыФормы, Форма", ПараметрыФормы, ФормаВладелец);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВывестиФормуПросмотраСоотношенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='В отчете не обнаружены ошибки по соотношениям показателей.
			|Вывести форму для просмотра соотношений?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросВывестиФормуПросмотраСоотношенийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	Форма = ДополнительныеПараметры.Форма;
	ОбработкаКС = Форма.ОбработкаКС;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ОбработкаКС = Неопределено Тогда
			ОбработкаКС = ПолучитьФорму("Обработка.РегламентированнаяОтчетностьСоотношенияПоказателей.Форма.КонтрольныеСоотношения",
			ПараметрыФормы, Форма);
			ОбработкаКС.Открыть();
		Иначе
			Если ОбработкаКС.Открыта() Тогда
				ОбработкаКС.Активизировать();
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
			Иначе
				ОбработкаКС.Открыть();
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
			КонецЕсли;
		КонецЕсли;
		Форма.ОбработкаКС = ОбработкаКС;
		
	Иначе	
		Если ОбработкаКС <> Неопределено Тогда
			Если ОбработкаКС.Открыта() Тогда
				ОбработкаКС.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьФайлы(ВыгружаемыеДанные) Экспорт 
	#Если НЕ ВебКлиент Тогда
		ПутьВыгрузки = ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		#Если ВебКлиент Тогда
			Попытка
				ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
							   + """! Возможно, недостаточно места на диске, диск защищен от записи"
							   + " или не подключено расширение для работы с файлами.";
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецПопытки;
		#Иначе
			ДвоичныйФайл = ПолучитьИзВременногоХранилища(ФайлВыгрузки.АдресФайлаВыгрузки);
			Попытка
				ДвоичныйФайл.Записать(ПутьВыгрузки + ФайлВыгрузки.ИмяФайлаВыгрузки);
				ТекстСообщения = "Файл выгрузки регламентированного отчета """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """ сохранен в каталог """ + ПутьВыгрузки + """.";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """! Возможно, недостаточно места на диске или диск защищен от записи.";
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецПопытки;
		#КонецЕсли
		
	КонецЦикла;
КонецПроцедуры

// Процедура возвращает в параметрах даты  начала и конца периода
// расчитанные по строковому представлению периода, сформированному ранее 
// функцией ПредставлениеПериода().
//
// Параметры:
//  СтрПредставлениеПериода		- Строка - сформированная функцией ПредставлениеПериода().
//  ДатаНачала					- Дата - дата начала периода.
//  ДатаКонца					- Дата - дата конца периода.
//
// Пример:
//  СтрПредставлениеПериода = "Октябрь 2014 г. - Декабрь 2014 г.";
//  РегламентированнаяОтчетностьКлиент.ПолучитьНачалоКонецПериода(СтрПредставлениеПериода, ДатаНачала, ДатаКонца);
//
Процедура ПолучитьНачалоКонецПериода(СтрПредставлениеПериода, ДатаНачала, ДатаКонца) Экспорт
	
	// Вначале нужно определить - имеем дело с интервалом дат или
	// одинарным периодом
	ПозицияТире = СтрНайти(СтрПредставлениеПериода,"-");
	
	Если ПозицияТире > 0 Тогда
		// Интервал дат.
		СтрПервыйОдинарныйПериод = СокрЛП(Лев(СтрПредставлениеПериода, ПозицияТире-1));
		СтрВторойОдинарныйПериод = СокрЛП(Сред(СтрПредставлениеПериода, ПозицияТире+1));
		ДатаНачалаПервогоПериода = "";
		ДатаКонцаПервогоПериода = "";
		ДатаНачалаВторогоПериода = "";
		ДатаКонцаВторогоПериода = "";
		// Используем рекурсию.
		ПолучитьНачалоКонецПериода(СтрПервыйОдинарныйПериод, ДатаНачалаПервогоПериода, ДатаКонцаПервогоПериода);
		ПолучитьНачалоКонецПериода(СтрВторойОдинарныйПериод, ДатаНачалаВторогоПериода, ДатаКонцаВторогоПериода);
		ДатаНачала	= ДатаНачалаПервогоПериода;
		ДатаКонца	= ДатаКонцаВторогоПериода;
		Возврат;
		
	КонецЕсли;
	
	// Одинарный период.
			
	Если СтрНайти(Врег(СтрПредставлениеПериода), "ПОЛУГОДИЕ") > 0 Тогда
		// Первые 6 месяцев.
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодДаты, 6, 1));
		
	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "ГОД") > 0 Тогда
		
	    СтрГодДаты = СтрЗаменить(Врег(СтрПредставлениеПериода), "ГОДОВАЯ", "");
		СтрГодДаты = СокрЛП(СтрЗаменить(СтрГодДаты, "Г.", ""));
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецГода(ДатаНачала);
		
	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "МЕСЯЦЕВ") > 0 Тогда
		// 9 месяцев.
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодДаты, 9, 1));

	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "КВАРТАЛ") > 0 Тогда
		
	    ПозСтрКвартал = СтрНайти(Врег(СтрПредставлениеПериода), "КВАРТАЛ");
		СтрНомерКвартала = Лев(СтрПредставлениеПериода, ПозСтрКвартал-1);
		НомерКвартала = Число(СокрЛП(СтрНомерКвартала));
		СтрГодКвартала = СтрЗаменить(Врег(СтрПредставлениеПериода), СтрНомерКвартала+"КВАРТАЛ", "");
		СтрГодКвартала	= СокрЛП(СтрЗаменить(СтрГодКвартала, "Г.", ""));	
	    ГодКвартала = Число(СтрГодКвартала);
		МесяцНачалаКвартала = НомерКвартала*3 - 2;
		МесяцКонцаКвартала  = НомерКвартала*3;
		
		ДатаНачала = Дата(ГодКвартала, МесяцНачалаКвартала, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодКвартала, МесяцКонцаКвартала, 1));
		
	Иначе
		// В представлении месяц  или год.
		СоответствиеМесяцев = Новый Соответствие;
		СоответствиеМесяцев.Вставить("ЯНВАРЬ", 	1);
		СоответствиеМесяцев.Вставить("ФЕВРАЛЬ", 2);
		СоответствиеМесяцев.Вставить("МАРТ", 	3);
		СоответствиеМесяцев.Вставить("АПРЕЛЬ", 	4);
		СоответствиеМесяцев.Вставить("МАЙ", 	5);
		СоответствиеМесяцев.Вставить("ИЮНЬ", 	6);
		СоответствиеМесяцев.Вставить("ИЮЛЬ", 	7);
		СоответствиеМесяцев.Вставить("АВГУСТ", 	8);
		СоответствиеМесяцев.Вставить("СЕНТЯБРЬ", 9);
		СоответствиеМесяцев.Вставить("ОКТЯБРЬ", 10);
		СоответствиеМесяцев.Вставить("НОЯБРЬ", 	11);
		СоответствиеМесяцев.Вставить("ДЕКАБРЬ", 12);
		
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		
		СтрМесяцДаты = СокрЛП(СтрЗаменить(СтрПредставлениеПериода, СтрГодДаты, ""));
		
		ГодДаты = Число(СтрГодДаты);
		
		Если ПустаяСтрока(стрМесяцДаты) Тогда
		    // Годовая.
			ДатаНачала = Дата(ГодДаты, 1, 1);
			ДатаКонца  = КонецГода(ДатаНачала);
		Иначе
			// Месяц.
			МесяцДаты  = СоответствиеМесяцев.Получить(стрМесяцДаты);
		
			ДатаНачала = Дата(ГодДаты, МесяцДаты, 1);
			ДатаКонца  = КонецМесяца(ДатаНачала);

		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура ищет окно по имени формы, если находит то активизирует его.
// Необходима при работе Веб-клиента для предотвращения дублирования открытых окон.
// Необходимость связана с некорректностью нахождения окон открытых форм 
// по Уникальности процедурой ОткрытьФорму() в Веб-клиенте.
//
// Параметры:
//   ИмяФормыДляПоиска - Строка - имя формы, открытое окно которой нужно найти.
//   ВызывающаяФорма - Форма - форма, окно которой будет пропущено при просмотре окон.
//							   Параметр необходим в случае, если процедура вызывается 
//							   из формы до ее открытия. Иногда при обращении к содержимому окна
//							   такой формы возникает ошибка.
//   Результат - Булево - возвращается Истина, если окно найдено,
//					      Ложь, если окно не найдено,
//						  Неопределено, если неверные параметры.
//
Процедура ВебКлиентНайтиАктивизироватьОкно(ИмяФормыДляПоиска, ВызывающаяФорма, Результат = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИмяФормыДляПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипЗнч(ВызывающаяФорма) = Тип("УправляемаяФорма")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытыеОкна = ПолучитьОкна();
	
	Для каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		
		// Обход ошибки платформы, при вызове из формы до открытия формы,
		// обращение к содержимому окна этой формы вызывает ошибку.
		// Поэтому переданная в качестве параметра вызывающая форма
		// позволяет обойти этот момент.
		Если ОткрытоеОкно = Неопределено ИЛИ ОткрытоеОкно = ВызывающаяФорма.Окно Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Содержимое = ОткрытоеОкно.Содержимое;
		
		Если Содержимое.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОсновнаяФорма = Содержимое[0];
		ИмяФормыОкна = ОсновнаяФорма.ИмяФормы;
		
		Если ИмяФормыОкна = ИмяФормыДляПоиска Тогда
			
			Результат = Истина;
			
			ЗаголовокОкна = ОткрытоеОкно.Заголовок;
			
			ВладелецФормы = ОсновнаяФорма.ВладелецФормы;
			Если ВладелецФормы <> Неопределено Тогда
				
				ВладелецФормы.Активизировать();
				
			КонецЕсли; 
			
			Оповестить(ЗаголовокОкна, "Активизировать");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Ложь;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс взаимодействия с конфигурациями (библиотеками) - потребителями.

// Функция автоматически формирует регламентированный отчет заданного вида для указанной организации
// за нужный отчетный период, сохраняет его в ИБ и возвращает ссылку.
//
// Параметры:
//	 ИсточникОтчета - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
// 	 Организация    - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаОкончания  - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   ДатаНачала     - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//   КорректирующийОтчет - Булево - признак корректирующего отчета.
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет - ссылка на сформированный регламентированный отчет.
//
// Пример:
//   РегламентированнаяОтчетностьКлиент.СформироватьАвтоматическиРеглОтчет("РегламентированныйОтчетРСВ1", Организация, '20110930', '20110101');
//
Функция СформироватьАвтоматическиРеглОтчет(ИсточникОтчета, Организация, ДатаОкончания, ДатаНачала = '00010101', КорректирующийОтчет = Ложь) Экспорт
	
	ТекФорма = ПолучитьАвтоматическиСформированнуюФормуРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, , КорректирующийОтчет);
	
	Если ТекФорма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ТекФорма.СохранитьНаКлиенте();
		
	Возврат ТекФорма.СтруктураРеквизитовФормы.мСохраненныйДок;
		
КонецФункции

// Процедура обновляет сохраненные данные регламентированного отчета 
// заданного вида для указанной организации за нужный отчетный период.
//
// Параметры:
//   ИсточникОтчета        - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
//   Организация           - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаОкончания         - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регламентированный отчет, данные которого нужно получить.
//   ДатаНачала            - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//
// Пример:
//   РегламентированнаяОтчетностьКлиент.ОбновитьДанныеРеглОтчета("РегламентированныйОтчетРСВ1", Организация, '20110930', СсылкаНаСохрРеглОтчет, '20110101');
//
Процедура ОбновитьДанныеРеглОтчета(ИсточникОтчета, Организация, ДатаОкончания, СсылкаНаСохрРеглОтчет, ДатаНачала = '00010101') Экспорт
	
	ТекФорма = ПолучитьАвтоматическиСформированнуюФормуРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
	
	Если ТекФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекФорма.СохранитьНаКлиенте();
		
КонецПроцедуры

// Процедура открывает форму сохраненного регл. отчета.
//
// Параметры:
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный
//							 регламентированный отчет, форму которого необходимо открыть.
//   НеОтображатьПредупреждение - Булево - признак отображения предупреждения в форме регл. отчета.
//
// Пример:
//   ОткрытьФормуРеглОтчета(СсылкаНаСохрРеглОтчет, Истина);
//
Процедура ОткрытьФормуРеглОтчета(СсылкаНаСохрРеглОтчет, НеОтображатьПредупреждение = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                       СсылкаНаСохрРеглОтчет);
	ПараметрыФормы.Вставить("НеОтображатьПредупреждение", НеОтображатьПредупреждение);
	ПараметрыФормы.Вставить("ОткрытьФормуОтчета",         Истина);
	
	ОткрытьФорму("Документ.РегламентированныйОтчет.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура открывает форму навигации по ошибкам выгрузки.
//
// Параметры:
//   СообщенияОбОшибках - Массив - массив структур, содержащий сообщения об ошибках.
//
Процедура ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках) Экспорт
	
	ТаблицаСообщенийСтруктура = Новый Структура("ТаблицаСообщений", СообщенияОбОшибках);
	
	ПараметрыФормы = Новый Структура("ВладелецТС", ТаблицаСообщенийСтруктура);
	
	ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		
		ФормаНавигацииПоОшибкам.Закрыть();
		
		ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		
	КонецЕсли;
		
	ФормаНавигацииПоОшибкам.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма расшифровки.

Процедура ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции стыковки с сервисом сдачи отчетности через представителя.

Процедура ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("КонтролирующийОрган", КонтролирующийОрган);
	ДополнительныеПараметры.Вставить("СсылкаНаОтчет", СсылкаНаОтчет);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправкаЧерезПредставителяПослеСохранения", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.Модифицированность Тогда
		Если ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет")
			ИЛИ ТипЗнчСсылкаНаОтчет = Тип("Неопределено") Тогда
			
			Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
			
		Иначе // все, кроме документа РегламентированныйОтчет
			ПоказатьПредупреждение(,НСтр("ru = 'Необходимо записать отчет перед отправкой.'"));
		КонецЕсли;
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЧерезПредставителяПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет;
	Форма = ДополнительныеПараметры.Форма;

	Если СсылкаНаОтчет = Неопределено Тогда
		СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СсылкаНаОтчет", СсылкаНаОтчет);
	
	// запрашиваем подтверждение
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправкаЧерезПредставителяПослеСохраненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправкаЧерезПредставителяПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	
	ПараметрыФормы = Новый Структура("СсылкаНаОтчет", СсылкаНаОтчет);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправкаЧерезПредставителяПослеСохраненияПодтверждениеОтправкиОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	// при отправке из списка подтверждение запрашивается перед запуском отправки для предотвращения попадания сообщений в диалог подтверждения
	Если ДополнительныеПараметры.Форма = Неопределено ИЛИ ДополнительныеПараметры.Форма.ИмяФормы <> "ОбщаяФорма.РегламентированнаяОтчетность" Тогда
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПодтверждениеОтправкиОтчета", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЧерезПредставителяПослеСохраненияПодтверждениеОтправкиОтчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	
	// регистрируем заявку на отправку
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьЗаявкуНаОтправкуОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СдачаОтчетностиЧерезСервисСпецоператораКлиент.ЗарегистрироватьЗаявкуНаОтправкуОтчета(Форма, КонтролирующийОрган, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ЗарегистрироватьЗаявкуНаОтправкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ДополнительныеПараметры.Форма, ДополнительныеПараметры.КонтролирующийОрган);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколОтправки(Форма, КонтролирующийОрган);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(Форма, КонтролирующийОрган = "ФНС", КодРегионаВФорме = Неопределено, 
		ЭтоОтправкаИзФормыОтчетность = Ложь, СсылкаНаОтчет = Неопределено, Организация = Неопределено, АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(Форма, КонтролирующийОрган, КодРегионаВФорме,  
	ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, Организация, АдресГотовыхДанных, ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган, АдресГотовыхДанных, ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

Процедура ПроверитьВИнтернете(Форма, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьВИнтернете(Форма, КонтролирующийОрган, АдресГотовыхДанных, ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

// Для открытия истории отправки на форме УправлениеОбменом, закладка ФНС страница Отчетность
// Источник - это либо форма регламентированного отчета, либо непосредственно ссылка на отчет/ документ/ элемент справочника
// В случае, если история отправки открывается для объекта, не входящего в БРО, Источник - обязательно ссылка, а не форма
//
// Параметры:
//  Источник				 - ДокументСсылка, СправочникСсылка - отправляемый объект, для которого открывается история.
//  ТипКонтролирующихОрганов - Перечисления.ТипыКонтролирующихОрганов - орган, в который отправляется объект.
//  Организация				 - Справочники.Организации - Организация отправляемого объекта.
//  ИмяСобытия				 - Строка - Имя сообщения для отпределения того, на какой закладке открыть форму управления обменом.
//
Процедура ОткрытьИсториюОтправки(
	Знач Источник,
	Знач ТипКонтролирующихОрганов,
	Знач Организация = Неопределено,
	Знач ИмяСобытия = Неопределено) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник",                 Источник);
	ДополнительныеПараметры.Вставить("ТипКонтролирующихОрганов", ТипКонтролирующихОрганов);
	ДополнительныеПараметры.Вставить("Организация",              Организация);
	ДополнительныеПараметры.Вставить("ИмяСобытия",               ИмяСобытия);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьИсториюОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#Область ПроцедурыИФункцииРаботыСОтчетамиСтатистики

Процедура ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация, ОрганизацияДоступна = Истина, ПредупредитьОПовторномВыполнении = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",         Организация);
	ПараметрыФормы.Вставить("ОрганизацияДоступна", ОрганизацияДоступна);
	ПараметрыФормы.Вставить("ПредупредитьОПовторномВыполнении", ПредупредитьОПовторномВыполнении);
	
	РезультатВыбора = ОткрытьФорму(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.НастройкиФорматаВыгрузкиОтчетовСтатистики", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Область, СтруктураРеквизитовФормы) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        "");
		РоссийскийАдрес.Вставить("Регион",          "");
		РоссийскийАдрес.Вставить("Район",           "");
		РоссийскийАдрес.Вставить("Город",           "");
		РоссийскийАдрес.Вставить("НаселенныйПункт", "");
		РоссийскийАдрес.Вставить("Улица",           "");
		РоссийскийАдрес.Вставить("Дом",             "");
		РоссийскийАдрес.Вставить("Корпус",          "");
		РоссийскийАдрес.Вставить("Квартира",        "");
		РоссийскийАдрес.Вставить("ТипДома",         "");
		РоссийскийАдрес.Вставить("ТипКорпуса",      "");
		РоссийскийАдрес.Вставить("ТипКвартиры",     "");
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес);
		
		СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "643,"
								  + РоссийскийАдрес["Индекс"] + ","
								  + РоссийскийАдрес["Регион"] + ","
								  + РоссийскийАдрес["Район"] + ","
								  + РоссийскийАдрес["Город"] + ","
								  + РоссийскийАдрес["НаселенныйПункт"] + ","
								  + РоссийскийАдрес["Улица"] + ","
								  + РоссийскийАдрес["Дом"] + ","
								  + РоссийскийАдрес["Корпус"] + ","
								  + РоссийскийАдрес["Квартира"] + ","
								  + РоссийскийАдрес["ТипДома"] + ","
								  + РоссийскийАдрес["ТипКорпуса"] + ","
								  + РоссийскийАдрес["ТипКвартиры"];
								  
		Если СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "643,,,,,,,,," Тогда
			СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;
		
		Область.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьЗаполнение(ЭтаФорма) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ЭтаФорма.СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ИДОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	ПараметрыФормы.Вставить("ИДРедакцииОтчета", Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7));
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуНастройкиАвтозаполнения(ПараметрыФормы);
	
КонецПроцедуры

Процедура НастроитьЗаполнениеТекущегоПоказателя(ЭтаФорма, ИмяЭлемента = "ПолеТабличногоДокументаФормаОтчета") Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ЭтаФорма.СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ИДОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	ПараметрыФормы.Вставить("ИДРедакцииОтчета", Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7));
	
	ТекущаяОбластьИмя = ЭтаФорма.Элементы[ИмяЭлемента].ТекущаяОбласть.Имя;
	Позиция = СтрНайти(ТекущаяОбластьИмя, "_");
	ДлинаСмысловойЧастиПоказателя = ?(Позиция = 0, СтрДлина(ТекущаяОбластьИмя), Позиция - 1);
	ИДТекущегоПоказателя = Лев(ТекущаяОбластьИмя, ДлинаСмысловойЧастиПоказателя);
	
	ПараметрыФормы.Вставить("ИДТекущегоПоказателя", ИДТекущегоПоказателя);
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуНастройкиАвтозаполнения(ПараметрыФормы);
	
КонецПроцедуры

Процедура ОбработкаАдресаВСтатистическомОтчете(Форма, Область, СтандартнаяОбработка) Экспорт 
	СтандартнаяОбработка = Ложь;
	
	ЗначенияПолей = Новый СписокЗначений;
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		ЗначенияПолей.Добавить(СтруктураАдреса.Индекс,          "Индекс");
		ЗначенияПолей.Добавить(СтруктураАдреса.Регион,          "Регион");
		ЗначенияПолей.Добавить(СтруктураАдреса.Район,           "Район");
		ЗначенияПолей.Добавить(СтруктураАдреса.Город,           "Город");
		ЗначенияПолей.Добавить(СтруктураАдреса.НаселенныйПункт, "НаселенныйПункт");
		ЗначенияПолей.Добавить(СтруктураАдреса.Улица,           "Улица");
		ЗначенияПолей.Добавить(СтруктураАдреса.Дом,             "Дом");
		ЗначенияПолей.Добавить(СтруктураАдреса.Корпус,          "Корпус");
		ЗначенияПолей.Добавить(СтруктураАдреса.Квартира,        "Квартира");
		ЗначенияПолей.Добавить(СтруктураАдреса.ТипДома,         "ТипДома");
		ЗначенияПолей.Добавить(СтруктураАдреса.ТипКорпуса,      "ТипКорпуса");
		ЗначенияПолей.Добавить(СтруктураАдреса.ТипКвартиры,     "ТипКвартиры");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей",           ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление",           РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки));
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", Форма.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Область", Область);
	
	ТипЗначения = Тип("ОписаниеОповещения");
	ПараметрыКонструктора = Новый Массив(3);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = Форма;
	ПараметрыКонструктора[2] = ДополнительныеПараметры;
	
	Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

Процедура ОбработкаВыбораПоляОбособленныхПодразделений(Форма, Область, СтандартнаяОбработка, ИмяТД = "ПолеТабличногоДокументаФормаОтчета") Экспорт
	Если Область.Имя = "ИсключитьДанныеОбособленныхПодразделений" Тогда 
		СтандартнаяОбработка = Ложь;
		ИсключитьДанныеОбособленныхПодразделений = Не Форма.ИсключитьДанныеОбособленныхПодразделений;
		Форма.ИсключитьДанныеОбособленныхПодразделений = ИсключитьДанныеОбособленныхПодразделений;
		Область.Значение = ИсключитьДанныеОбособленныхПодразделений;
		ОблОбособленноеПодразделение = Форма[ИмяТД].Области.ОбособленноеПодразделение;
		Если ИсключитьДанныеОбособленныхПодразделений Тогда 
			ОблОбособленноеПодразделение.Значение = "";
			ОблОбособленноеПодразделение.Защита = Истина;
			ОблОбособленноеПодразделение.ЦветФона = Новый Цвет(255,255,255);
		Иначе
			ОблОбособленноеПодразделение.Значение = Форма.ОбособленноеПодразделение;
			ОблОбособленноеПодразделение.Защита = Ложь;
			ОблОбособленноеПодразделение.ЦветФона = Новый Цвет(255,255,192);
		КонецЕсли;
		Форма.Модифицированность = Истина;
		Форма.ИсключитьДанныеОбособленныхПодразделенийПриИзменении(Неопределено);
	ИначеЕсли Область.Имя = "ОбособленноеПодразделение" И ЗначениеЗаполнено(Форма.ИмяСправочникаОбособленныхПодразделений) И Область.Защита = Ложь Тогда
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОбработкаВыбораПоляОбособленныхПодразделений(Форма, СтандартнаяОбработка);
		Если СтандартнаяОбработка <> Ложь Тогда 
			СтандартнаяОбработка = Ложь;
			Отбор = Новый Структура("Владелец", Форма.СтруктураРеквизитовФормы.Организация);
			Если ЗначениеЗаполнено(Форма.ИмяРеквизитаПризнакаОбособленногоПодразделения) Тогда
				Отбор.Вставить(Форма.ИмяРеквизитаПризнакаОбособленногоПодразделения, Истина);
			КонецЕсли;
			Параметры = Новый Структура("Отбор, РежимВыбора", Отбор, Истина);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораОбособленногоПодразделения", ЭтотОбъект, Новый Структура("Форма", Форма));
			ОткрытьФорму("Справочник." + Форма.ИмяСправочникаОбособленныхПодразделений + ".ФормаВыбора",Параметры,Форма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбораОбособленногоПодразделения(Ответ, ДопПараметры) Экспорт 
	Если Ответ <> Неопределено Тогда 
		Форма = ДопПараметры.Форма;
		Форма.Модифицированность = Истина;
		Форма.ОбособленноеПодразделение = Ответ;
		
		Если Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") <> Неопределено Тогда 
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОбособленноеПодразделение.Значение = Ответ;
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ИсключитьДанныеОбособленныхПодразделений.Значение = Ложь;
		ИначеЕсли Форма.Элементы.Найти("ТабличныйДокумент") <> Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОбособленноеПодразделение.Значение = Ответ;
			Форма.ТабличныйДокумент.Области.ИсключитьДанныеОбособленныхПодразделений.Значение = Ложь;
		КонецЕсли;
		Форма.ОбособленноеПодразделениеПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура ПередОткрытиемОсновнойФормыРаботыСОтчетностью(Форма) Экспорт
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРОПриНеобходимости(Форма);
	
КонецПроцедуры

Процедура ПередВыгрузкойРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ВыполняемоеОповещение, ТекФорма, Отказ);

КонецПроцедуры

Процедура ПередОтправкойРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ВыполняемоеОповещение, ТекФорма, Отказ);

КонецПроцедуры

Процедура ПередПечатьюРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ВыполняемоеОповещение, ТекФорма, Отказ);
	
КонецПроцедуры

#Область НоваяФормаРегламентированнойОтчетности

Процедура ПечатьПереопределяемый(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.Печать(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Выгрузить(Ссылка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить(Ссылка);
	
КонецПроцедуры

Процедура СоздатьНовыйОбъект(Организация, Тип, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект(Организация, Тип, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриПроверкеВыгрузкиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПриПроверкеВыгрузкиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыгрузитьПереопределяемый(Ссылка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить(Ссылка);
	
КонецПроцедуры

Процедура ФормаРегламентированнойОтчетности_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма);
	
КонецПроцедуры

#КонецОбласти

Процедура СпрятатьСсылкуУдалитьСтраницу(Форма) Экспорт 
	Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОблУдалитьСтраницу = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьТекущуюСтрокуВДеревеРазделов(Форма, НовыйUID) Экспорт
	UID_Пустой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Если НовыйUID <> Неопределено Тогда
		НомСтр = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Форма.Разделы.ПолучитьЭлементы(), НовыйUID, UID_Пустой);
		Если НомСтр <> Неопределено Тогда
			Форма.Элементы.Разделы.ТекущаяСтрока = НомСтр;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область УведомленияОСпецрежимах
Процедура ОткрытьФормуВыбораРегистрацииВИФНС(Форма, Инфо, ИмяКБПроцедуры = "ОбработкаКодаНОЗавершение") Экспорт 
	ПараметрыРегистрации = Новый Структура("Владелец", Форма.Объект.Организация);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыРегистрации);
	
	ДополнительныеПараметры = Новый Структура("Инфо", Инфо);
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяКБПроцедуры, Форма, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.ФормаВыбора", ПараметрыФормы, Форма,,,,ОписаниеОповещения ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ОткрытьФормуВыбораФИО(Форма, СтандартнаяОбработка, ИмяПоля, ИмяСтраницы) Экспорт 
	ВыборФИО = Новый ОписаниеОповещения("ВыборФИОЗавершение", ЭтотОбъект);
	
	ПараметрыВыборФИО = Новый Структура;
	ПараметрыВыборФИО.Вставить("Фамилия", Форма.Объект.ПодписантФамилия);
	ПараметрыВыборФИО.Вставить("Имя", Форма.Объект.ПодписантИмя);
	ПараметрыВыборФИО.Вставить("Отчество", Форма.Объект.ПодписантОтчество);
	ПараметрыВыборФИО.Вставить("ИмяПоля", ИмяПоля);
	ПараметрыВыборФИО.Вставить("ИмяСтраницы", ИмяСтраницы);
																				
	ФормаВыбораФИО = ПолучитьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораФИО", ПараметрыВыборФИО, Форма);
	ФормаВыбораФИО.Оповещение = ВыборФИО;
	ФормаВыбораФИО.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбораФИО.Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ВыборФИОЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда 
		Форма = Неопределено;
		ИмяПоля = Неопределено;
		ИмяСтраницы = Неопределено;
		Ответ.Свойство("Форма", Форма);
		Ответ.Свойство("ИмяПоля", ИмяПоля);
		Ответ.Свойство("ИмяСтраницы", ИмяСтраницы);
		Ответ.Свойство("Фамилия", Форма.Объект.ПодписантФамилия);
		Ответ.Свойство("Имя", Форма.Объект.ПодписантИмя);
		Ответ.Свойство("Отчество", Форма.Объект.ПодписантОтчество);
		Представление = СокрЛП(Форма.Объект.ПодписантФамилия + " " + Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
		Если ЗначениеЗаполнено(ИмяПоля) Тогда 
			Форма[ИмяПоля].Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = Представление;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
			Форма[ИмяСтраницы][0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = Представление;
		КонецЕсли;
		Форма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// Создание уведомления о спецрежимах
//
// Параметры:
//  Организация						 - СправочникСсылка.Организации - Организация, по которой будет создаваться сверка.
//  ВидУведомления					 - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения - вид уведомления
//  Данные							 - Структура - данные, которые буду переданы в форму при создании (например, для заполнения)
//
Процедура СоздатьУведомлениеОСпецрежимах(Организация, ВидУведомления, Данные) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
	ПараметрыФормы.Вставить("Данные", Данные);
	ПараметрыФормы.Вставить("Создание_УведомлениеОСпецрежимахНалогообложения", Истина);
	ПараметрыФормы.Вставить("УчитыватьУведомленияНеВходящиеВБРО", Истина);
	
	ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораВидаСообщения", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
#КонецОбласти

// Процедура обрабатывает регламентированный отчет с последующим открытием формы с присоединенными файлами
// (выполняется сохранение регламентированного отчета в случае, если он не сохранен).
//
// Параметры:
//  Форма - УправляемаяФорма - форма регламентированного отчета.
//
Процедура СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Отчет.РегламентированныйОтчет") Тогда
			
			ДопПараметры = Новый Структура();
			
			Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				
				ДопПараметры.Вставить("Форма", Форма);
				ДопПараметры.Вставить("ТипВладельцаФайла", Тип("ДокументСсылка.РегламентированныйОтчет"));
				
				Оп = Новый ОписаниеОповещения("ОткрытьФормуПрисоединенныеФайлы", ЭтотОбъект, ДопПараметры);
				
				Форма.СохранитьНаКлиенте(, Оп);
				
			Иначе
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ВладелецФайла",  Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
				ДопПараметры.Вставить("Организация",    Форма.СтруктураРеквизитовФормы.Организация);
				ДопПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
				ДопПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
				
				ОткрытьФормуПрисоединенныеФайлы(, ДопПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает уведомление о спецрежимах налогообложения с последующим открытием формы с
// присоединенными файлами (выполняется сохранение уведомления в случае, если оно не сохранено).
//
// Параметры:
//  Форма - УправляемаяФорма - форма уведомления о спецрежимах налогообложения.
//
Процедура СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Отчет.РегламентированноеУведомление") Тогда
			
			ДопПараметры = Новый Структура();
			
			Если Форма.Объект.Ссылка.Пустая() Тогда
				
				ДопПараметры.Вставить("Форма", Форма);
				ДопПараметры.Вставить("ТипВладельцаФайла", Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения"));
				
				Оп = Новый ОписаниеОповещения("ОткрытьФормуПрисоединенныеФайлы", ЭтотОбъект, ДопПараметры);
				
				Форма.СохранитьНаКлиенте(, Оп);
				
			Иначе
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ВладелецФайла",  Форма.Объект.Ссылка);
				ДопПараметры.Вставить("Организация",    Форма.Объект.Организация);
				ДопПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
				ДопПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
				
				ОткрытьФормуПрисоединенныеФайлы(, ДопПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму с присоединенными файлами.
//
// Параметры:
//  ДопПараметры - структура. Варианты:
//    1) Ключи:
//      "ВладелецФайла"  - ДокументСсылка, СправочникСсылка - ссылка на объект в регистре сведений "Журнал отчетов статусы";
//      "Организация"    - ссылка на элемент справочника организаций;
//      "ТолькоПросмотр" - Булево - признак открытия формы с присоединенными файлами только на просмотр;
//      "Заголовок"      - Строка - текст в заголовке формы, следующий после "Присоединенные файлы: ";
//    2) Ключи (если тип владельца присоединенного файла - ДокументСсылка.РегламентированныйОтчет
//             или ДокументСсылка.УведомлениеОСпецрежимахНалогообложения; документ должен быть сохранен):
//      "Форма"             - УправляемаяФорма - форма регламентированного отчета или уведомления о спецрежимах налогообложения;
//      "ТипВладельцаФайла" - Тип - Тип("ДокументСсылка.РегламентированныйОтчет") или
//                            Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения").
//
Процедура ОткрытьФормуПрисоединенныеФайлы(Результат, ДопПараметры) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Неопределено;
	ТипВладельцаФайла = Неопределено;
	
	Если ДопПараметры.Свойство("Форма", Форма)
	   И ДопПараметры.Свойство("ТипВладельцаФайла", ТипВладельцаФайла) Тогда
		
		Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
			
			Если ДопПараметры.Свойство("ТипВладельцаФайла") Тогда
				
				Если ДопПараметры.ТипВладельцаФайла = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ВладелецФайла",  Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
					ДополнительныеПараметры.Вставить("Организация",    Форма.СтруктураРеквизитовФормы.Организация);
					ДополнительныеПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
					ДополнительныеПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
					ДопПараметры = ДополнительныеПараметры;
					
				ИначеЕсли ДопПараметры.ТипВладельцаФайла = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ВладелецФайла",  Форма.Объект.Ссылка);
					ДополнительныеПараметры.Вставить("Организация",    Форма.Объект.Организация);
					ДополнительныеПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
					ДополнительныеПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
					ДопПараметры = ДополнительныеПараметры;
					
				Иначе
					
					Возврат;
					
				КонецЕсли;
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДопПараметры.ВладелецФайла)
		= Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		ТекстПредупреждения = НСтр(
		"ru='Присоединение файлов к электронным представлениям регламентированных отчетов не предусмотрено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	Иначе
		
		Если ТипЗнч(ДопПараметры.ВладелецФайла) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			Если РегламентированнаяОтчетностьВызовСервера.ВозможноПрисоединениеФайловКОбъекту(
				ДопПараметры.ВладелецФайла) Тогда
				
				ПараметрыПроверки = Новый Структура;
				
				ПараметрыПроверки.Вставить("Владелец", ДопПараметры.ВладелецФайла);
				ПараметрыПроверки.Вставить("ТекстПредупреждения", "");
				ПараметрыПроверки.Вставить("СтандартнаяОбработка", Истина);
				
				ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(ПараметрыПроверки);
				
				Если НЕ ПараметрыПроверки.СтандартнаяОбработка Тогда
					
					Если ЗначениеЗаполнено(ПараметрыПроверки.ТекстПредупреждения) Тогда
						ТекстПредупреждения = ПараметрыПроверки.ТекстПредупреждения;
					Иначе
						ТекстПредупреждения = НСтр(
						"ru='Присоединение файлов к отчетам данного вида из формы списка отчетов не предусмотрено'");
					КонецЕсли;
					
					ПоказатьПредупреждение(, ТекстПредупреждения);
					
					Возврат;
					
				КонецЕсли;
				
			Иначе
				
				ТекстПредупреждения = НСтр(
				"ru='Присоединение файлов к отчетам данного вида не предусмотрено'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДопПарам = Новый Структура(
		"ВладелецФайла,Организация", ДопПараметры.ВладелецФайла, ДопПараметры.Организация);
		
		Оп = Новый ОписаниеОповещения(
		"ОткрытьФормуПрисоединенныеФайлыЗавершение", ЭтотОбъект, ДопПарам);
		
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы",
		ДопПараметры,
		,
		ДопПараметры.ВладелецФайла,
		,
		,
		Оп,
		РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПрисоединенныеФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры.ВладелецФайла) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		
		ОповеститьСписокУведомленийОбИзмененииИндексаКартинки(ДополнительныеПараметры);
		
	Иначе
		
		ОповеститьСписокОтчетовОбИзмененииИндексаКартинки(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещает динамический список отчетов об изменении индекса картинки.
//
// Параметры:
//  ДополнительныеПараметры - структура:
//    "ВладелецФайла" - ДокументСсылка, СправочникСсылка - ссылка на объект
//                      в регистре сведений "Журнал отчетов статусы";
//    "Организация"   - ссылка на элемент справочника организаций.
//
Процедура ОповеститьСписокОтчетовОбИзмененииИндексаКартинки(ДополнительныеПараметры) Экспорт
	
	Отборы = Новый Массив;
	Отборы.Добавить(Новый Структура("Организация,Ссылка",
	ДополнительныеПараметры.Организация, ДополнительныеПараметры.ВладелецФайла));
	
	Ключ = Новый(Тип("РегистрСведенийКлючЗаписи.ЖурналОтчетовСтатусы"), Отборы);
	
	Если НЕ Ключ.Пустой() Тогда
		ОповеститьОбИзменении(Ключ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещает динамический список уведомлений об изменении индекса картинки.
//
// Параметры:
//  ДополнительныеПараметры - структура:
//    "ВладелецФайла" - ДокументСсылка, СправочникСсылка - ссылка на объект
//                      в регистре сведений "Журнал отправок в контролирующие органы";
//    "Организация"   - ссылка на элемент справочника организаций.
//
Процедура ОповеститьСписокУведомленийОбИзмененииИндексаКартинки(ДополнительныеПараметры)
	
	Отборы = Новый Массив;
	
	Отборы.Добавить(Новый Структура(
	"СтраницаЖурнала,Организация,Ссылка",
	ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"),
	ДополнительныеПараметры.Организация, ДополнительныеПараметры.ВладелецФайла));
	
	Ключ = Новый(Тип("РегистрСведенийКлючЗаписи.ЖурналОтправокВКонтролирующиеОрганы"), Отборы);
	
	Если НЕ Ключ.Пустой() Тогда
		ОповеститьОбИзменении(Ключ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет, открывать или нет из формы "1С-Отчетность" файлы, присоединенные к объекту.
//
// Параметры:
//  ПараметрыПроверки - Структура:
//   "Владелец"             - СправочникСсылка, ДокументСсылка - ссылка на объект;
//   "ТекстПредупреждения"  - Строка - если заполнен и СтандартнаяОбработка = Ложь, то будет выведено предупреждение;
//   "СтандартнаяОбработка" - Булево - если Ложь, открытие присоединенных файлов не выполняется.
//
Процедура ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(ПараметрыПроверки)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(
		ПараметрыПроверки);
		
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(
		ПараметрыПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьИсториюОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Источник = ДополнительныеПараметры.Источник;
	ТипКонтролирующихОрганов = ДополнительныеПараметры.ТипКонтролирующихОрганов;
	Организация = ДополнительныеПараметры.Организация;
	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	// Если нет доступа к ЭДО, просто выходим
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав для использования модуля документооборота!'"));
		Возврат;
	КонецЕсли;
	
	// Если в параметр передали форму, то получаем из нее ссылку, определяем организацию
	Если Организация = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
			Организация = ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Источник);
			Источник = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Источник);
		Иначе
			Организация = КонтекстЭДОКлиент.ПолучитьРеквизитНаСервере(Источник, "Организация");
		КонецЕсли;
	КонецЕсли;
	
	// Если объект не записан, историю отправки не показываем
	Если Источник = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Объект не записан.'"));
		Возврат;
	КонецЕсли;
	
	// Открываем форму цикла обмена
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.УправлениеОбменом");
	
	Если ИмяСобытия = Неопределено Тогда
		
		// Для регламентированных отчетов из БРО имя события жестко определены
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			Если ТипКонтролирующихОрганов = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			
				// Определяем имя события для регламентированных отчетов
				ИсточникОтчета = КонтекстЭДОКлиент.ПолучитьРеквизитНаСервере(Источник, "ИсточникОтчета");
				Если ИсточникОтчета = "РегламентированныйОтчетЗаявлениеОВвозеТоваров" Тогда
					ИмяСобытия = "Показать циклы обмена заявления";
				ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетУведомлениеОКонтролируемыхСделках" Тогда
					ИмяСобытия = "Показать циклы обмена уведомления";
				Иначе
					ИмяСобытия = "Показать циклы обмена";
				КонецЕсли;
				
			ИначеЕсли ТипКонтролирующихОрганов = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
				
				ИмяСобытия = "Показать циклы обмена отчета ПФР";
				
			ИначеЕсли ТипКонтролирующихОрганов = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда

				ИмяСобытия = "Показать циклы обмена отчета статистики";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
			
			ИмяСобытия = "Показать циклы обмена уведомления";
			
		Иначе
			
			// Если это не регламентированный отчет, то имя события определяется в переопределяемой функции
			ИмяСобытия = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ИмяСобытияОткрытияИсторииОтправки(Источник);
			
		КонецЕсли;
			
	КонецЕсли;
		
	Оповестить(ИмяСобытия, Источник);
	
КонецПроцедуры

Функция ПолучитьАвтоматическиСформированнуюФормуРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет = Неопределено, КорректирующийОтчет = Ложь)
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания, СсылкаНаСохрРеглОтчет);
	
	Если ИмяФормыОтчета = Неопределено Тогда
		Возврат ИмяФормыОтчета;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(ДатаОкончания);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета",             ДатаНачала);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",              ДатаОкончания);
	ПараметрыФормы.Вставить("Организация", 						    Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",                      ИмяФормыОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок", 						СсылкаНаСохрРеглОтчет);
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
	ПараметрыФормы.Вставить("БезОткрытияФормы",						Истина);
	Если КорректирующийОтчет Тогда
		ПараметрыФормы.Вставить("ВидДокумента",	1);
	КонецЕсли;
	
	// Для совместимости с универсальным отчетом статистики
	Если ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ИмяТекФормыОтчета = ?(СтрНайти(ИмяФормыОтчета, "_") = 0, ИмяФормыОтчета
						 , Лев(ИмяФормыОтчета, СтрНайти(ИмяФормыОтчета, "_") - 1));
	Иначе
		ИмяТекФормыОтчета = ИмяФормыОтчета;
	КонецЕсли;
	
	ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ИмяТекФормыОтчета);
	ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы);
	
	Если ТекФорма = Неопределено Тогда
				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось открыть отчет!'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Возврат ТекФорма;
	
КонецФункции

Процедура УдалитьВременныйКаталогШаблонов(ВремКаталог)
	
	Попытка
		УдалитьФайлы(ВремКаталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОшибкуМодуляПечати(ОписаниеОшибки, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог)
	
	КодОшибки = Сред(ОписаниеОшибки, СтрНайти(ОписаниеОшибки, "0x"), 10);
	
	ТекстПредупреждения = "";
	Если КодОшибки = "0x80040004" ИЛИ КодОшибки = "0x80040005" Тогда
		ТекстПредупреждения = "Не удалось установить параметр печати!";
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		ТекстПредупреждения = "При попытке печати в компоненте печати возникла неизвестная ошибка!";
	ИначеЕсли КодОшибки = "0x80040032" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти файл выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x80040033" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к файлу выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x8004000A" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000B" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000F" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать версию формата выгрузки из текста выгрузки!";
	ИначеЕсли КодОшибки = "0x80040010" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать форму по КНД в файле выгрузки!";
	ИначеЕсли КодОшибки = "0x80040014" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось сформировать машиночитаемую форму по причине некорректного файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004003C" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОшибку0x8004003CЗавершение", ЭтотОбъект);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует шаблон для формирования машиночитаемой формы!%1Возможно, необходимо зарегистрировать в информационной базе внешний шаблон.%2Показать список зарегистрированных шаблонов?'"),
			Символы.ПС, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru='Ошибка при формировании машиночитаемой формы'"));
		Возврат;
	ИначеЕсли КодОшибки = "0x80040046" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти каталог с шаблонами для печати!";
	ИначеЕсли КодОшибки = "0x80040047" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к каталогу с шаблонами для печати!";
	ИначеЕсли КодОшибки = "0x80040050" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось сформировать машиночитаемую форму из-за ошибки в шаблоне печати или подмены шаблона!";
	ИначеЕсли КодОшибки = "0x80050035" Тогда
		ТекстПредупреждения = "Не найдена одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll)!";
	ИначеЕсли КодОшибки = "0x800501C5" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), подменена или устарела!";
	ИначеЕсли КодОшибки = "0x8004006E" Тогда
		ТекстПредупреждения = "Пакет ""Microsoft XML 4.0 SP 2"", используемый компонентой печати, отсутствует или нарушена его целостность!";
	ИначеЕсли КодОшибки = "0x80040078" Тогда
		ТекстПредупреждения = "Пакет ""Windows Script 5.6"", используемый компонентой печати, отсутствует или нарушена его целостность!";
	ИначеЕсли КодОшибки = "0x80050030" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), повреждена!";
	ИначеЕсли КодОшибки = "0x8004003D" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к файлу требуемого шаблона!";
	ИначеЕсли КодОшибки = "0x80040065" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось обнаружить в системе ни одного принтера!";
	ИначеЕсли КодОшибки = "0x80040064" Тогда // печать прервана
		Возврат;
	Иначе
		ТекстПредупреждения = ОписаниеОшибки;
	КонецЕсли;

	ТекстПредупреждения = "Возможно, необходимо переустановить компоненту или вспомогательные библиотеки, используемые ей.
							|Хотите переустановить компоненту сейчас?
							|
							|Подробнее:
							|" + ?(ЗначениеЗаполнено(ТекстПредупреждения), ТекстПредупреждения, "<подробная информация отсутствует>");
	ДополнительныеПараметры = Новый Структура("ВремКаталог, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ВремКаталог, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОшибкуМодуляПечатиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстПредупреждения),
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru='Ошибка при формировании машиночитаемой формы'"));
	
КонецПроцедуры
			
Функция ЭтоФормаБаланса(Форма)
		
	Возврат (СтрЧислоВхождений(Форма.ИмяФормы, "РегламентированныйОтчетБаланс") > 0
		ИЛИ СтрЧислоВхождений(Форма.ИмяФормы, "РегламентированныйОтчетФорма2") > 0
		ИЛИ СтрЧислоВхождений(Форма.ИмяФормы, "РегламентированныйОтчетФорма3") > 0
		ИЛИ СтрЧислоВхождений(Форма.ИмяФормы, "РегламентированныйОтчетФорма4") > 0
		ИЛИ СтрЧислоВхождений(Форма.ИмяФормы, "РегламентированныйОтчетФорма5") > 0
		ИЛИ СтрЧислоВхождений(Форма.ИмяФормы, "РегламентированныйОтчетФорма6") > 0);
		
КонецФункции
	
Функция ОпределитьНаименованиеИФНСПолучателяОтчета(Форма)
	
	// если это бухгалтерская отчетность, то устанавливать параметр не нужно
	Если ЭтоФормаБаланса(Форма) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// извлекаем наименование налогового органа
	
	ОргИМНС = Неопределено;
	
	Попытка
		ФормаТитульный = Форма.СтруктураДанныхТитульный;
	Исключение
		ФормаТитульный = Форма.СтруктураДанныхБаланс;
	КонецПопытки;
				
	Если ФормаТитульный.Свойство("ОргИМНС", ОргИМНС) Тогда
		Возврат ОргИМНС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива)
	
	Попытка
		УдалитьФайлы(ВремФайлДистрибутива);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, Знач КНД, Знач ВерсияФорматаВыгрузки, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм)
	
	ТочныеПараметрыШаблонаЗаданы = (ЗначениеЗаполнено(КНД) И ЗначениеЗаполнено(ВерсияФорматаВыгрузки));
	
	// если точные параметры заданы, то сначала пытаемся извлечь внутренний шаблон
	КоличествоВыгруженныхШаблонов = 0;
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		ИспользуемыйШаблон = Неопределено;
		Пока СтрДлина(ВерсияФорматаВыгрузки) < 7 Цикл
			ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузки + "0";
		КонецЦикла;
		ПрефиксИмениШаблона = СокрЛП(КНД + "_" + ВерсияФорматаВыгрузки);
		ПрефиксИмениМакетаШаблона = "МБ_" + СтрЗаменить(ПрефиксИмениШаблона, ".", "_");
	Иначе
		ПрефиксИмениМакетаШаблона = "МБ_";
	КонецЕсли;
	
	ШаблоныМашиночитаемыхФорм = РегламентированнаяОтчетностьВызовСервера.ПолучитьШаблоныМашиночитаемыхФорм(Форма.ИмяФормы, ПрефиксИмениМакетаШаблона, КоличествоВыгруженныхШаблонов, ТочныеПараметрыШаблонаЗаданы, ПрефиксИмениШаблона, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	
	Для Каждого Элемент Из ШаблоныМашиночитаемыхФорм Цикл
		
		Попытка
			
			#Если ВебКлиент Тогда
								
				ОписаниеПолучаемыеФайлы = Новый ОписаниеПередаваемогоФайла(ВремКаталог + Элемент.Представление, ПоместитьВоВременноеХранилище(Элемент.Значение, Новый УникальныйИдентификатор));
				
				ПолучаемыеФайлы = Новый Массив;
				
				ПолучаемыеФайлы.Добавить(ОписаниеПолучаемыеФайлы);
				
				ПолучитьФайлы(ПолучаемыеФайлы, , , Ложь);
				
			#Иначе
				Элемент.Значение.Записать(ВремКаталог + Элемент.Представление);
			#КонецЕсли
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить шаблон машиночитаемой формы ""%1"" во временный каталог!%2'"), Элемент.Представление, Символы.ПС + ОписаниеОшибки());
			
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЦикла;
			
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтруктуруПараметровФайлаВыгрузкиНаКлиенте(ФайлВыгрузки)

	Возврат РегламентированнаяОтчетностьКлиентСервер.СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки);

КонецФункции

Процедура СформироватьТекстВыгрузки(Форма, ВремФайл, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, ВыполняемоеОповещение = Неопределено)
		
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , Форма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн, , , ВремФайл, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы, , , , , ФайлВыгрузкиВоВременномХранилище, , ВыполняемоеОповещение);
	
КонецПроцедуры

#Если ВебКлиент Тогда
	
Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиенте(Форма)
		
	ЭтоВебКлиент = Истина;
	АдресПараметровПроксиВоВременномХранилище = "";
	
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище,, ЭтоВебКлиент);
	
	Если Не ВыводЧерезВебСервис Тогда 
		ВебБраузер = ВебБраузер();
		
		Если ЗначениеЗаполнено(ВебБраузер)
			И НЕ ВебБраузер = "MSIE" Тогда
			ПоказатьПредупреждение(,НСтр("ru='Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ВыводЧерезВебСервис", ВыводЧерезВебСервис);
	ДополнительныеПараметры.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
	ДополнительныеПараметры.Вставить("ИмяКнопки", "");
												
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	// сохраняем форму, если она не сохранена
	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжение(Форма, ИмяКнопки)
		
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = "Выберите каталог для размещения временных файлов.";
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	
	АктивизироватьОсновноеОкно();
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжениеПослеОтображенияДиалогаВыбораФайла", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма)
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			АктивизироватьОсновноеОкно();
			ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
		
		ТаксДокПринт = Неопределено;
		
		Если НЕ Форма.Окно = Неопределено Тогда
			Форма.Окно.Активизировать();
		КонецЕсли;
	Иначе
		ТекстВопроса = НСтр("ru='Формирование бланка формы прервано. Не удалось подключить вспомогательную
			|компоненту для формирования бланков форм с двухмерным штрихкодом PDF417.
			|Возможно, браузер не настроен в соответствии с особенностями настройки веб-браузера.
			|Открыть справочную информацию с описанием особенностей настроек веб-браузера?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОткрытьСправкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет)
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиенте(Форма, ИмяКнопки) 
	
	ЭтоВебКлиент = Истина;
	АдресПараметровПроксиВоВременномХранилище = "";
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище,, ЭтоВебКлиент);
	
	Если Не ВыводЧерезВебСервис Тогда 
		ВебБраузер = ВебБраузер();
		
		Если ЗначениеЗаполнено(ВебБраузер)
			И НЕ ВебБраузер = "MSIE" Тогда
			ПоказатьПредупреждение(,НСтр("ru='Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ДополнительныеПараметры.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
	ДополнительныеПараметры.Вставить("ВыводЧерезВебСервис", ВыводЧерезВебСервис);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	// сохраняем форму, если она не сохранена
	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(Форма, ИмяКнопки)
		
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = "Выберите каталог для размещения временных файлов.";
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	
	АктивизироватьОсновноеОкно();
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПродолжениеПослеОтображенияДиалогаВыбораФайла", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма)
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
			Если ЗначениеЗаполнено(НаименованиеИФНС) Тогда
				ТаксДокПринт.SetPrintTiffParam1C("Наименование налогового органа-получателя", НаименованиеИФНС);
			КонецЕсли;
			Если ИмяКнопки = "ПечататьСразуСДвухмернымШтрихкодомPDF417" Тогда
				ТаксДокПринт.PrintFile(ВремФайл, "", "", 0);
			Иначе
				АктивизироватьОсновноеОкно();
				ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
			КонецЕсли;
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
		
		ТаксДокПринт = Неопределено;
		
		Если НЕ Форма.Окно = Неопределено Тогда
			Форма.Окно.Активизировать();
		КонецЕсли;
	Иначе
		ТекстВопроса = НСтр("ru='Формирование бланка формы прервано. Не удалось подключить вспомогательную
			|компоненту для формирования бланков форм с двухмерным штрихкодом PDF417.
			|Возможно, браузер не настроен в соответствии с особенностями настройки веб-браузера.
			|Открыть справочную информацию с описанием особенностей настроек веб-браузера?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОткрытьСправкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет)
	КонецЕсли;
	
КонецПроцедуры

#Иначе
	
Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиенте(Форма)
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиентеПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	// сохраняем форму, если она не сохранена
	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, Знач ИмяКнопки, ТаксДокПринт, Форма)
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
			Если ЗначениеЗаполнено(НаименованиеИФНС) Тогда
				ТаксДокПринт.SetPrintTiffParam1C("Наименование налогового органа-получателя", НаименованиеИФНС);
			КонецЕсли;
			Если ИмяКнопки = "ПечататьСразуСДвухмернымШтрихкодомPDF417" Тогда
				ТаксДокПринт.PrintFile(ВремФайл, "", "", 0);
			Иначе
				ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
			КонецЕсли;
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ТаксДокПринт = Неопределено;
	
	УдалитьВременныйКаталогШаблонов(ВремКаталог);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиенте(Форма, ИмяКнопки)
	
	// сохраняем форму, если она не сохранена
	ДополнительныеПараметры = Новый Структура("Форма, ИмяКнопки", Форма, ИмяКнопки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеПродолжение", ЭтотОбъект, ДополнительныеПараметры);

	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиентеЗавершение(ТаксДокПринт, ВременныйКаталог, ИмяВременногоФайла, Выгрузка)
	
	ТаксДокПринт.PrintTiffFolder = ВременныйКаталог;
	
	Попытка
		ОписаниеПолучаемыеФайлы = Новый ОписаниеПередаваемогоФайла;
		ОписаниеПолучаемыеФайлы.Имя = ВременныйКаталог + Выгрузка.ИмяФайла;
		ОписаниеПолучаемыеФайлы.Хранение = ПоместитьВоВременноеХранилище(Выгрузка.Данные, Новый УникальныйИдентификатор);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ОписаниеПолучаемыеФайлы);
		ПолучитьФайлы(ПолучаемыеФайлы, , , Ложь);
		
		ТаксДокПринт.PreviewFile1C(ИмяВременногоФайла, 0);
	Исключение
		Возврат;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ВременныйКаталог);
	Исключение
		Возврат;
	КонецПопытки;
	
	ТаксДокПринт = Неопределено;

КонецПроцедуры

#КонецЕсли

Функция ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы)
	Для Каждого СтрокаУровня1 Из Форма.мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Попытка
				Результат = СтрокаУровня1.Представление;
			Исключение
				Результат = ИмяСтраницы;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти