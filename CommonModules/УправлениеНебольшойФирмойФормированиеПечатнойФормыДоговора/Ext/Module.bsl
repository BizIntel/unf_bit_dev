#Область ПрограммныйИнтерфейс

// Возвращает HTML текст сформированного текста договора.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьHTMLСформированногоДоговора(Объект, Документ = Неопределено, СписокПараметров = Неопределено, ДляПечати = Ложь, РасширениеДляПечати = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.БланкДоговора) Тогда
		ДоговорHTMLДокумент = ПустоеПолеДокумента();
		Возврат ДоговорHTMLДокумент;
	КонецЕсли;
	
	Если Объект.БланкДоговора.Бланк.Получить() = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ДоговорHTMLДокумент = Объект.БланкДоговора.Бланк.Получить().ТекстHTML;
	
	Если НЕ ДляПечати Тогда
		
		Если СтрНайти(ДоговорHTMLДокумент, "<body>") Тогда 
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "<body>", "<body style='margin:0;padding:0px;overflow:auto;width:100%;height:100%;'>");
		ИначеЕсли СтрНайти(ДоговорHTMLДокумент, "<BODY>") Тогда 
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "<BODY>", "<BODY style='margin:0;padding:0px;overflow:auto;width:100%;height:100%;'>");
		КонецЕсли;
		
	ИначеЕсли ДляПечати И РасширениеДляПечати = "html" Тогда
		
		Если СтрНайти(ДоговорHTMLДокумент, "BODY {") Тогда
			
			Начало = СтрНайти(ДоговорHTMLДокумент, "BODY {");
			Конец = СтрНайти(ДоговорHTMLДокумент, "}",, Начало);
			
			СтильBODY = Сред(ДоговорHTMLДокумент, Начало, Конец - Начало + 1);
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, СтильBODY, "");
			
		ИначеЕсли СтрНайти(ДоговорHTMLДокумент, "body {") Тогда
			
			Начало = СтрНайти(ДоговорHTMLДокумент, "body {");
			Конец = СтрНайти(ДоговорHTMLДокумент, "}",, Начало);
			
			СтильBODY = Сред(ДоговорHTMLДокумент, Начало, Конец - Начало + 1);
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, СтильBODY, "");
			
		КонецЕсли;
		
		Если СтрНайти(ДоговорHTMLДокумент, "<body>") Тогда 
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "<body>", "<body style='margin:0;padding:0px;overflow:auto;width:600px;padding: 30px 20px 30px 50px;margin: 20px auto;box-shadow: 0px 0px 12px 0px #b3b3b3;background-color: white;'>");
		ИначеЕсли СтрНайти(ДоговорHTMLДокумент, "<BODY>") Тогда 
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "<BODY>", "<BODY style='margin:0;padding:0px;overflow:auto;width:600px;padding: 30px 20px 30px 50px;margin: 20px auto;box-shadow: 0px 0px 12px 0px #b3b3b3;background-color: white;'>");
		КонецЕсли;
		
		Если СтрНайти(ДоговорHTMLДокумент, "<html>") Тогда 
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "<html>", "<html style='background-color: #e6e6e6;'>");
		ИначеЕсли СтрНайти(ДоговорHTMLДокумент, "<HTML>") Тогда 
			ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "<HTML>", "<HTML style='background-color: #e6e6e6;'>");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(ДоговорHTMLДокумент, "http-equiv=""X-UA-Compatible""") Тогда
		ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "http-equiv=""X-UA-Compatible""", "");
	ИначеЕсли СтрНайти(ДоговорHTMLДокумент, "http-equiv=""X-UA-Compatible""") Тогда
		ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "http-equiv='X-UA-Compatible'", "");
	КонецЕсли;
	
	ПаспортныеДанныеКонтрагента = Неопределено;
	
	Если СписокПараметров = Неопределено Тогда
		СписокПараметров = СписокПараметровБланка(Объект, Объект.БланкДоговора);
	КонецЕсли;
	
	ТипПараметра = "";
	Для каждого Параметр Из СписокПараметров Цикл
		Если ТипЗнч(Параметр.Параметр) = Тип("ПеречислениеСсылка.ПараметрыБланковДоговоровСКонтрагентами") Тогда
			Если Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_ДатаВыдачи
				ИЛИ Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_КемВыдан
				ИЛИ Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_КодПодразделения
				ИЛИ Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_Номер
				ИЛИ Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_Серия
				ИЛИ Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_СрокДействия Тогда
				
				Если ПаспортныеДанныеКонтрагента = Неопределено Тогда
					ПаспортныеДанныеКонтрагента = ПолучитьЗначениеПараметра(Объект, , "ПаспортныеДанные");
				КонецЕсли;
				
				РеквизитПаспортныхДанных = Сред(Параметр.Параметр, СтрДлина("ПаспортныеДанные_") + 1, СтрДлина(Параметр.Параметр) - СтрДлина("ПаспортныеДанные_"));
				ПараметрЗначение = ПаспортныеДанныеКонтрагента[РеквизитПаспортныхДанных];
			Иначе
				ПараметрЗначение = ПолучитьЗначениеПараметра(Объект, Документ, Параметр.Параметр, Параметр.Представление);
			КонецЕсли;
			
			Если Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.Факсимиле
				ИЛИ Параметр.Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.Логотип Тогда
				ТипПараметра = "imageParameter";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Параметр.Значение) Тогда
				ПараметрЗначение = Параметр.Значение;
			Иначе
				Параметр.Значение = ПараметрЗначение;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрЗначение) Тогда
				ПараметрЦвет = "#FFFFFF";
				ПараметрКласс = "Filled";
			Иначе
				ПараметрЗначение = НезаполненноеПолеПредставление();
				ПараметрЦвет = "#DCDCDC";
				ПараметрКласс = "Empty";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Параметр.Параметр) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			
			ПараметрЗначение = ПолучитьЗначениеДополнительногоРеквизита(Объект, Документ, Параметр.Параметр);
			
			Если ЗначениеЗаполнено(Параметр.Значение) Тогда
				ПараметрЗначение = Параметр.Значение;
			Иначе
				Параметр.Значение = ПараметрЗначение;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрЗначение) Тогда
				ПараметрЦвет = "#FFFFFF";
				ПараметрКласс = "Filled";
			Иначе
				ПараметрЗначение = НезаполненноеПолеПредставление();
				ПараметрЦвет = "#DCDCDC";
				ПараметрКласс = "Empty";
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполнено(Параметр.Значение) Тогда 
				ПараметрЗначение = Параметр.Значение;
				ПараметрЦвет = "#FFFFFF";
				ПараметрКласс = "Filled";
			Иначе
				ПараметрЗначение = НезаполненноеПолеПредставление();
				ПараметрЦвет = "#DCDCDC";
				ПараметрКласс = "Empty";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДляПечати Тогда
			ПараметрHTML = "<a name='parameterType' id='parameterID' style = 'background-color: parameterColor' class='parameterClass'>parameterValue</a>";
			ПараметрHTML = СтрЗаменить(ПараметрHTML, "parameterID", Параметр.Идентификатор);
			ПараметрHTML = СтрЗаменить(ПараметрHTML, "parameterValue", ПараметрЗначение);
			ПараметрHTML = СтрЗаменить(ПараметрHTML, "parameterColor", ПараметрЦвет);
			ПараметрHTML = СтрЗаменить(ПараметрHTML, "parameterClass", ПараметрКласс);
			Если ЗначениеЗаполнено(ТипПараметра) Тогда
				ПараметрHTML = СтрЗаменить(ПараметрHTML, "parameterType", ТипПараметра);
			Иначе
				ПараметрHTML = СтрЗаменить(ПараметрHTML, "parameterType", "parameter");
			КонецЕсли;
		Иначе
			ПараметрHTML = ПараметрЗначение;
		КонецЕсли;
		
		ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, Параметр.Представление, ПараметрHTML);
	КонецЦикла;
	
	ДоговорHTMLДокумент = СтрЗаменить(ДоговорHTMLДокумент, "/*РазрывСтраницы*/", "<div style='page-break-after:always'></div>");
	
	Возврат ДоговорHTMLДокумент;
	
КонецФункции // ПолучитьHTMLСформированногоДоговора()

Функция НезаполненноеПолеПредставление() Экспорт
	Возврат "__________";
КонецФункции

// Возвращает значение параметра инфобазы.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьЗначениеПараметра(Объект, Документ = Неопределено, Параметр, ПараметрПредставление = Неопределено) Экспорт
	
	Параметры = Перечисления.ПараметрыБланковДоговоровСКонтрагентами;
	
	Если Документ <> Неопределено Тогда
		Организация = Документ.Организация;
	Иначе
		Если УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
			И ЗначениеЗаполнено(Объект.Организация) Тогда
			Организация = Объект.Организация;
		ИначеЕсли ЗначениеЗаполнено(УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация")) Тогда
			Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		Иначе
			Организация = Справочники.Организации.ОсновнаяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр = Параметры.БанкОрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.БанковскийСчетПоУмолчанию.Банк.Наименование <> "",
					Организация.БанковскийСчетПоУмолчанию.Банк.Наименование, "");
		
	ИначеЕсли Параметр = Параметры.БанкКонтрагента Тогда
		
		ЗначениеПараметра = ?(Объект.Владелец.БанковскийСчетПоУмолчанию.Банк.Наименование <> "",
					Объект.Владелец.БанковскийСчетПоУмолчанию.Банк.Наименование, "");
		
	ИначеЕсли Параметр = Параметры.Дата Тогда
		
		ЗначениеПараметра = ?(Формат(Объект.ДатаДоговора, "ДЛФ=ДД") <> "",
					Формат(Объект.ДатаДоговора, "ДЛФ=ДД"), "");
		
	ИначеЕсли Параметр = Параметры.ДолжностьКонтактногоЛицаКонтрагента Тогда
		
		Если ЗначениеЗаполнено(Объект.Владелец.КонтактноеЛицо.Должность) Тогда
			ЗначениеПараметра = Объект.Владелец.КонтактноеЛицо.Должность;
		Иначе
			Если Объект.Владелец.КонтактноеЛицо.Роли.Количество() <> 0 Тогда 
				ЗначениеПараметра = ?(Объект.Владелец.КонтактноеЛицо.Роли[0].Роль.Наименование <> "",
							Объект.Владелец.КонтактноеЛицо.Роли[0].Роль.Наименование, "");
			Иначе
				ЗначениеПараметра = "";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Параметр = Параметры.КонтактноеЛицоКонтрагента Тогда
		
		ЗначениеПараметра = ?(ЗначениеЗаполнено(Объект.Владелец.КонтактноеЛицо),
					Объект.Владелец.КонтактноеЛицо.Наименование, "");
		
	ИначеЕсли Параметр = Параметры.КонтактноеЛицоКонтрагентаИнициалы Тогда
		
		КонтактноеЛицо = Объект.Владелец.КонтактноеЛицо;
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Возврат "";
		КонецЕсли;
		
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(КонтактноеЛицо.Наименование);
		Фамилия = ЧастиИмени.Фамилия;
		
		Падеж = ПадежПараметра(ПараметрПредставление);
		ПросклонятьЗначение(Параметр, Фамилия, Падеж);
		ФамилияИницициалы = УправлениеНебольшойФирмойСервер.ПолучитьФамилиюИмяОтчество(Фамилия, ЧастиИмени.Имя, ЧастиИмени.Отчество, Истина);
		
		Возврат ФамилияИницициалы;
		
	ИначеЕсли Параметр = Параметры.НазваниеОрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.НаименованиеПолное <> "",
					Организация.НаименованиеПолное, "");
					
	ИначеЕсли Параметр = Параметры.НазваниеОрганизацииКонтрагента Тогда
		
		ЗначениеПараметра = ?(Объект.Владелец.НаименованиеПолное <> "",
					Объект.Владелец.НаименованиеПолное, "");
		
	ИначеЕсли Параметр = Параметры.НомерДоговора Тогда
		
		ЗначениеПараметра = ?(Объект.НомерДоговора <> "",
					Объект.НомерДоговора, "");
		
	ИначеЕсли Параметр = Параметры.РасчетныйСчетОрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.БанковскийСчетПоУмолчанию.НомерСчета <> "",
					Организация.БанковскийСчетПоУмолчанию.НомерСчета, "");
		
	ИначеЕсли Параметр = Параметры.РасчетныйСчетКонтрагента Тогда
		
		ЗначениеПараметра = ?(Объект.Владелец.БанковскийСчетПоУмолчанию.НомерСчета <> "",
					Объект.Владелец.БанковскийСчетПоУмолчанию.НомерСчета, "");
		
	ИначеЕсли Параметр = Параметры.СрокОплатыПокупателя Тогда
		
		ЗначениеПараметра = ?(Объект.СрокОплатыПокупателя <> "",
					Объект.СрокОплатыПокупателя, "");
		
	ИначеЕсли Параметр = Параметры.СрокОплатыПоставщику Тогда
		
		ЗначениеПараметра = ?(Объект.СрокОплатыПоставщику <> "",
					Объект.СрокОплатыПоставщику, "");
		
	ИначеЕсли Параметр = Параметры.ЮридическийАдресОрганизации Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Организация.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда 
				ЗначениеПараметра = Строка.Представление;
				
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ФактическийАдресОрганизации Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Организация.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ТелефонОрганизации Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Организация.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ФаксОрганизации Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Организация.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.АдресЭлектроннойПочтыОрганизации Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Организация.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ПочтовыйАдресОрганизации Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Организация.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ЮридическийАдресКонтрагента Тогда 
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Объект.Владелец.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ФактическийАдресКонтрагента Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Объект.Владелец.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ТелефонКонтрагента Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Объект.Владелец.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ФаксКонтрагента Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Объект.Владелец.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.АдресЭлектроннойПочтыКонтрагента Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Объект.Владелец.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ПочтовыйАдресКонтрагента Тогда
		
		ЗначениеПараметра = "";
		Для Каждого Строка Из Объект.Владелец.КонтактнаяИнформация Цикл 
			
			Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента Тогда 
				ЗначениеПараметра = Строка.Представление;
			КонецЕсли;
		КонецЦикла;
		ЗначениеПараметра = ?(ЗначениеПараметра <> "", ЗначениеПараметра, "");
		
	ИначеЕсли Параметр = Параметры.ИННКонтрагента Тогда
		
		ЗначениеПараметра = ?(Объект.Владелец.ИНН <> "",
					Объект.Владелец.ИНН, "");
		
	ИначеЕсли Параметр = Параметры.ИННОрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.ИНН <> "",
					Организация.ИНН, "");
		
	ИначеЕсли Параметр = Параметры.КППКонтрагента Тогда
		
		ЗначениеПараметра = ?(Объект.Владелец.КПП <> "",
					Объект.Владелец.КПП, "");
		
	ИначеЕсли Параметр = Параметры.КППОрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.КПП <> "",
					Организация.КПП, "");
		
	ИначеЕсли Параметр = Параметры.ОКТМООрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.КодПоОКТМО <> "",
					Организация.КодПоОКТМО, "");
		
	ИначеЕсли Параметр = Параметры.ОКАТООрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.КодПоОКАТО <> "",
					Организация.КодПоОКАТО, "");
		
	ИначеЕсли Параметр = Параметры.ОКПОКонтрагента Тогда
		
		ЗначениеПараметра = ?(Объект.Владелец.КодПоОКПО <> "",
					Объект.Владелец.КодПоОКПО, "");
		
	ИначеЕсли Параметр = Параметры.ОКПООрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.КодПоОКПО <> "",
					Организация.КодПоОКПО, "");
		
	ИначеЕсли Параметр = Параметры.ОГРНОрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.ОГРН <> "",
					Организация.ОГРН, "");
		
	ИначеЕсли Параметр = Параметры.ОГРНКонтрагента Тогда
		
		ЗначениеПараметра = ?(Объект.Владелец.РегистрационныйНомер <> "",
					Объект.Владелец.РегистрационныйНомер, "");
		
	ИначеЕсли Параметр = Параметры.ОКВЭДОрганизации Тогда
		
		ЗначениеПараметра = ?(Организация.КодОКВЭД <> "",
					Организация.КодОКВЭД, "");
		
	ИначеЕсли Параметр = Параметры.РуководительОрганизации Тогда
		
		ОтветственныеЛица = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Организация, ТекущаяДата());
		Если НЕ ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда
			Возврат "";
		КонецЕсли;
		ЗначениеПараметра = ?(ЗначениеЗаполнено(ОтветственныеЛица.Руководитель.Физлицо),
					ОтветственныеЛица.Руководитель.Физлицо.Наименование, "");
					
	ИначеЕсли Параметр = Параметры.РуководительОрганизацииИнициалы Тогда
		
		ОтветственныеЛица = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Организация, ТекущаяДата());
		Если НЕ ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда
			Возврат "";
		КонецЕсли;
		РуководительОрганизации = ОтветственныеЛица.Руководитель.Физлицо;
		
		ФамилияИнициалы = РегистрыСведений.ФИОФизЛиц.ФИОФизЛица(, РуководительОрганизации);
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФамилияИнициалы);
		Фамилия = ЧастиИмени.Фамилия;
		
		Падеж = ПадежПараметра(ПараметрПредставление);
		ПросклонятьЗначение(Параметр, Фамилия, Падеж);
		ФамилияИнициалы = СтрЗаменить(ФамилияИнициалы, ЧастиИмени.Фамилия, Фамилия);
		
		Возврат ФамилияИнициалы;
		
	ИначеЕсли Параметр = Параметры.БикКонтрагента Тогда
		
		ЗначениеПараметра = ?(ЗначениеЗаполнено(Объект.Владелец.БанковскийСчетПоУмолчанию.Банк.Код),
					Объект.Владелец.БанковскийСчетПоУмолчанию.Банк.Код, "");
					
	ИначеЕсли Параметр = Параметры.КоррСчетКонтрагента Тогда
		
		ЗначениеПараметра = ?(ЗначениеЗаполнено(Объект.Владелец.БанковскийСчетПоУмолчанию.Банк.КоррСчет),
					Объект.Владелец.БанковскийСчетПоУмолчанию.Банк.КоррСчет, "");
					
	ИначеЕсли Параметр = Параметры.БикОрганизации Тогда
		
		ЗначениеПараметра = ?(ЗначениеЗаполнено(Организация.БанковскийСчетПоУмолчанию.Банк.Код),
					Организация.БанковскийСчетПоУмолчанию.Банк.Код, "");
					
	ИначеЕсли Параметр = Параметры.КоррСчетОрганизации Тогда
		
		ЗначениеПараметра = ?(ЗначениеЗаполнено(Организация.БанковскийСчетПоУмолчанию.Банк.КоррСчет),
					Организация.БанковскийСчетПоУмолчанию.Банк.КоррСчет, "");
					
	ИначеЕсли Параметр = Параметры.СуммаДокумента Тогда
		
		Если Документ <> Неопределено Тогда 
			ЗначениеПараметра = Документ.СуммаДокумента;
		Иначе 
			ЗначениеПараметра = "";
		КонецЕсли;
		
	ИначеЕсли Параметр = Параметры.СуммаДокументаПрописью Тогда
		
		Если Документ <> Неопределено Тогда 
			ЗначениеПараметра = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаДокумента, Документ.ВалютаДокумента);
			ЧислоПрописью(Документ.СуммаДокумента);
		Иначе 
			ЗначениеПараметра = "";
		КонецЕсли;
		
	ИначеЕсли Параметр = Параметры.НомерДокумента Тогда
		
		Если Документ <> Неопределено Тогда 
			ЗначениеПараметра = Документ.Номер;
		Иначе 
			ЗначениеПараметра = "";
		КонецЕсли;
		
	ИначеЕсли Параметр = Параметры.ДатаДокумента Тогда 
		
		Если Документ <> Неопределено Тогда 
			ЗначениеПараметра = Формат(Документ.Дата, "ДФ='дд ММММ гггг'");
		Иначе 
			ЗначениеПараметра = "";
		КонецЕсли;
		
	ИначеЕсли Параметр = Параметры.ПаспортныеДанные Тогда
		
		Контрагент = Объект.Владелец;
		
		Если Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
			ИЛИ Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			
			ЗначениеПараметра = Контрагент.ДокументУдостоверяющийЛичность;
		Иначе
			КонтактноеЛицо = Контрагент.КонтактноеЛицо;
			ЗначениеПараметра = КонтактноеЛицо.ДокументУдостоверяющийЛичность;
		КонецЕсли;
		
		Возврат ЗначениеПараметра;
		
	ИначеЕсли Параметр = Параметры.ПаспортныеДанныеКонтактногоЛица Тогда
		
		КонтактноеЛицо = Объект.Владелец.КонтактноеЛицо;
		Возврат КонтактноеЛицо.ДокументУдостоверяющийЛичность;
		
	ИначеЕсли Параметр = "ПаспортныеДанные" Тогда
		
		ПаспортныеДанные = Новый Структура;
		ПаспортныеДанные.Вставить("Серия", "");
		ПаспортныеДанные.Вставить("Номер", "");
		ПаспортныеДанные.Вставить("ДатаВыдачи", "");
		ПаспортныеДанные.Вставить("СрокДействия", "");
		ПаспортныеДанные.Вставить("КемВыдан", "");
		ПаспортныеДанные.Вставить("КодПодразделения", "");
		
		Возврат ПаспортныеДанные;
		
	ИначеЕсли Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_ДатаВыдачи
		ИЛИ Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_КемВыдан
		ИЛИ Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_КодПодразделения
		ИЛИ Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_Номер
		ИЛИ Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_Серия
		ИЛИ Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ПаспортныеДанные_СрокДействия Тогда
		
		
		Возврат "";
		
	ИначеЕсли Параметр = Параметры.Факсимиле Тогда 
		Если ЗначениеЗаполнено(Организация.ФайлФаксимильнаяПечать) Тогда
			ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Организация.ФайлФаксимильнаяПечать);
			Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
				Возврат "<img src=""data:image/png;base64," + Base64Строка(ДанныеКартинки) + """>";
			КонецЕсли;
		КонецЕсли;
		
		Возврат "<span style='background-color: #DCDCDC'>Факсимиле не установлено для организации</span>";
		
	ИначеЕсли Параметр = Параметры.Логотип Тогда 
		Если ЗначениеЗаполнено(Организация.ФайлЛоготип) Тогда
			ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Организация.ФайлЛоготип);
			Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
				Возврат "<img src=""data:image/png;base64," + Base64Строка(ДанныеКартинки) + """>";
			КонецЕсли;
		КонецЕсли;
		
		Возврат "<span style='background-color: #DCDCDC'>Логотип не установлен для организации</span>";
		
	КонецЕсли;
	
	Падеж = ПадежПараметра(ПараметрПредставление);
	Если Падеж = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
	ПросклонятьЗначение(Параметр, ЗначениеПараметра, Падеж);
	Возврат ЗначениеПараметра;
	
КонецФункции

// Возвращает значение дополнительного реквизита.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьЗначениеДополнительногоРеквизита(Объект, Документ, РеквизитСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Неопределено;
	
	Если РеквизитСсылка.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДоговорыКонтрагентов Тогда
		ЗначенияДополнительныхРеквизитов = Объект.ДополнительныеРеквизиты;
	ИначеЕсли РеквизитСсылка.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты Тогда
		ЗначенияДополнительныхРеквизитов = Объект.Владелец.ДополнительныеРеквизиты;
	ИначеЕсли РеквизитСсылка.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя Тогда
		Если Документ <> Неопределено Тогда
			ЗначенияДополнительныхРеквизитов = Документ.ДополнительныеРеквизиты;
		Иначе
			ЗначенияДополнительныхРеквизитов = Неопределено;
		КонецЕсли;
	ИначеЕсли РеквизитСсылка.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплату Тогда
		Если Документ <> Неопределено Тогда
			ЗначенияДополнительныхРеквизитов = Документ.ДополнительныеРеквизиты;
		Иначе
			ЗначенияДополнительныхРеквизитов = Неопределено;
		КонецЕсли;
	ИначеЕсли РеквизитСсылка.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Организации Тогда
		ЗначенияДополнительныхРеквизитов = Объект.Организация.ДополнительныеРеквизиты;
	КонецЕсли;
	
	Если ЗначенияДополнительныхРеквизитов = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Свойство", РеквизитСсылка);
	ТаблицаДанныхРеквизита = ЗначенияДополнительныхРеквизитов.Выгрузить(ПараметрыОтбора);
	
	Если ТаблицаДанныхРеквизита.Количество() = 0 Тогда
		
		Значение = Неопределено;
		ТипыРеквизита = РеквизитСсылка.ТипЗначения.Типы();
		Если ТипыРеквизита.Количество() > 0 Тогда 
			СоставнойРеквизит = ?(ТипыРеквизита.Количество() > 1, Истина, Ложь);
		КонецЕсли;
		
		Если Не СоставнойРеквизит Тогда 
			ТипРеквизита = ТипыРеквизита[0];
		Иначе
			Если ТаблицаДанныхРеквизита.Количество() = 0 Тогда 
				Возврат "";
			Иначе 
				ТипРеквизита = ТипЗнч(ТаблицаДанныхРеквизита[0].Значение);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Значение = ТаблицаДанныхРеквизита[0].Значение;
		ТипРеквизита = ТипЗнч(Значение);
		
	КонецЕсли;
	
	ФорматнаяСтрока = РеквизитСсылка.ФорматСвойства;
	
	Если ТипРеквизита = Тип("Булево") Тогда 
		
		Если ТаблицаДанныхРеквизита.Количество() > 0 Тогда 
			Возврат Формат(Значение, ФорматнаяСтрока);
		Иначе 
			Возврат Формат(Ложь, РеквизитСсылка.ФорматСвойства);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Строка") Тогда 
		
		Если ТаблицаДанныхРеквизита.Количество() > 0 Тогда 
			Возврат Значение;
		Иначе 
			Возврат "";
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Дата") Тогда 
		
		Если НЕ ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
			
			Если РеквизитСсылка.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
				ФорматнаяСтрока = "ДЛФ=Д";
			ИначеЕсли РеквизитСсылка.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				ФорматнаяСтрока = "ДЛФ=В";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТаблицаДанныхРеквизита.Количество() > 0 Тогда 
			Возврат Формат(Значение, ФорматнаяСтрока);
		Иначе
			Возврат "";
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Число") Тогда 
		
		Если ТаблицаДанныхРеквизита.Количество() > 0 Тогда 
			Возврат Формат(Значение, ФорматнаяСтрока);
		Иначе
			Возврат "";
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипРеквизита = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипРеквизита = Тип("СправочникСсылка.ФизическиеЛица") 
		ИЛИ ТипРеквизита = Тип("СправочникСсылка.Валюты") Тогда 
		
		Если ТаблицаДанныхРеквизита.Количество() > 0 Тогда 
			Возврат Значение.Наименование;
		Иначе
			Возврат "";
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") 
		ИЛИ ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда 
		
		Если ТаблицаДанныхРеквизита.Количество() > 0 Тогда 
			Возврат Значение.Наименование;
		Иначе 
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Возвращает значение заполняемого поля.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьЗначениеЗаполняемогоПоляПриФормированииПечатнойФормы(Объект, ПараметрИдентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентовРедактируемыеПараметры.Значение
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.РедактируемыеПараметры КАК ДоговорыКонтрагентовРедактируемыеПараметры
		|ГДЕ
		|	ДоговорыКонтрагентовРедактируемыеПараметры.СсылкаБланка = &БланкСсылка
		|	И ДоговорыКонтрагентовРедактируемыеПараметры.Идентификатор = &ПараметрИдентификатор
		|	И ДоговорыКонтрагентовРедактируемыеПараметры.Ссылка = &ДоговорСсылка";
		
	Запрос.УстановитьПараметр("БланкСсылка", Объект.БланкДоговора);
	Запрос.УстановитьПараметр("ДоговорСсылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПараметрИдентификатор", ПараметрИдентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Значение;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СписокПараметровБланка(Договор, Бланк)
	
	СписокПараметров = Новый ТаблицаЗначений;
	СписокПараметров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	СписокПараметров.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	СписокПараметров.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	СписокПараметров.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ПараметрыБланковДоговоровСКонтрагентами"));
	СписокПараметров.Колонки.Добавить("Параметр", Новый ОписаниеТипов(МассивТипов));
	
	ПараметрыОтбора = Новый Структура("СсылкаБланка", Бланк);
	
	МассивПараметрыИнфобазы = Договор.ПараметрыИнфобазы.НайтиСтроки(ПараметрыОтбора);
	Для каждого Параметр Из МассивПараметрыИнфобазы Цикл
		НоваяСтрока = СписокПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,  Параметр)
	КонецЦикла;
	
	МассивРедактируемыеПараметры = Договор.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
	Для каждого Параметр Из МассивРедактируемыеПараметры Цикл
		НоваяСтрока = СписокПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,  Параметр);
	КонецЦикла;
	
	Возврат СписокПараметров;
	
КонецФункции

Функция ПустоеПолеДокумента()
	ПустоеПолеДокумента = 
	"
	|<html>
	|<head>
	|<style type='text/css'>
	|</style>
	|</head>
	|<body>
	|</br>
	|<p align='center'><font color='grey'>Укажите бланк договора</font></p>
	|</body>
	|</html>";
	Возврат ПустоеПолеДокумента;
КонецФункции

Функция ПадежПараметра(Параметр)
	Если СтрНайти(Параметр, "именительный") <> 0 Тогда
		Возврат 1;
	ИначеЕсли СтрНайти(Параметр, "родительный") <> 0 Тогда
		Возврат 2;
	ИначеЕсли СтрНайти(Параметр, "дательный") <> 0 Тогда
		Возврат 3;
	ИначеЕсли СтрНайти(Параметр, "винительный") <> 0 Тогда
		Возврат 4;
	ИначеЕсли СтрНайти(Параметр, "творительный") <> 0 Тогда
		Возврат 5;
	ИначеЕсли СтрНайти(Параметр, "предложный") <> 0 Тогда
		Возврат 6;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ПросклонятьЗначение(Параметр, ПараметрЗначение, Падеж)
	Если Параметр = Перечисления.ПараметрыБланковДоговоровСКонтрагентами.ДолжностьКонтактногоЛицаКонтрагента Тогда
		// Склонение должности
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗначение, " ", Истина, Истина);
		
		СловаИсключения = Новый Массив();
		СловаИсключения.Добавить("ведущий");
		СловаИсключения.Добавить("младший");
		СловаИсключения.Добавить("заведующий");
		СловаИсключения.Добавить("исполняющий");
		СловаИсключения.Добавить("разряда");
		
		СловаРазделители = Новый Массив();
		СловаРазделители.Добавить("по");
		СловаРазделители.Добавить("на");
		СловаРазделители.Добавить("монтажник");
		СловаРазделители.Добавить("координатор");
		СловаРазделители.Добавить("инженер");
		СловаРазделители.Добавить("помощник");
		СловаРазделители.Добавить("разработчик");
		СловаРазделители.Добавить("заместитель");
		СловаРазделители.Добавить("начальник");
		СловаРазделители.Добавить("директор");
		СловаРазделители.Добавить("руководитель");
		СловаРазделители.Добавить("заведующий");
		СловаРазделители.Добавить("администратор");
		СловаРазделители.Добавить("исполняющий");
		СловаРазделители.Добавить("ио");
		СловаРазделители.Добавить("и.о.");
		СловаРазделители.Добавить("и.");
		СловаРазделители.Добавить("врио");
		СловаРазделители.Добавить("вр.и.о.");
		СловаРазделители.Добавить("вр.и.о.");
		СловаРазделители.Добавить("разряда");
		
		СклоненныеСлова = Новый Массив;
		НеобходимоПросклонять = Истина;
		Для каждого Слово Из МассивСлов Цикл
			
			Если НеобходимоПросклонять Тогда
				Если СловаИсключения.Найти(НРег(Слово)) = Неопределено Тогда
					Попытка
						ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "NameDecl", ТипВнешнейКомпоненты.Native);
						КомпонентаСклонения = Новый("AddIn.NameDecl.CNameDecl");
						НовоеСлово = КомпонентаСклонения.Просклонять(Слово, Падеж);
					Исключение
						НовоеСлово = Слово;
					КонецПопытки;
				Иначе
					НовоеСлово = ПросклонятьИсключение(Слово, Падеж);
				КонецЕсли;
			Иначе
				НовоеСлово = Слово;
			КонецЕсли;
			СклоненныеСлова.Добавить(НовоеСлово);
			
			Для каждого СловоРазделитель Из СловаРазделители Цикл
				Если НРег(Слово) = СловоРазделитель Тогда
					НеобходимоПросклонять = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПараметрЗначение = СтрСоединить(СклоненныеСлова, " ");
	Иначе
		// Склонение ФИО
		Попытка
			ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "NameDecl", ТипВнешнейКомпоненты.Native);
			КомпонентаСклонения = Новый("AddIn.NameDecl.CNameDecl");
			ПараметрЗначение = КомпонентаСклонения.Просклонять(ПараметрЗначение, Падеж);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПросклонятьИсключение(Слово, Падеж)
	
	ПереданноеСлово = НРег(Слово);
	
	Если ПереданноеСлово = "ведущий"
		ИЛИ ПереданноеСлово = "заведующий"
		ИЛИ ПереданноеСлово = "исполняющий" Тогда
		
		Если Падеж = 1 Тогда
			Возврат Слово;
		ИначеЕсли Падеж = 2 Тогда
			Возврат СтрЗаменить(Слово, "щий", "щего");
		ИначеЕсли Падеж = 3 Тогда
			Возврат СтрЗаменить(Слово, "щий", "щему");
		ИначеЕсли Падеж = 4 Тогда
			Возврат СтрЗаменить(Слово, "щий", "щего");
		ИначеЕсли Падеж = 5 Тогда
			Возврат СтрЗаменить(Слово, "щий", "щим");
		ИначеЕсли Падеж = 6 Тогда
			Возврат СтрЗаменить(Слово, "щий", "щем");
		КонецЕсли;
		
	ИначеЕсли ПереданноеСлово = "младший" Тогда
		
		Если Падеж = 1 Тогда
			Возврат Слово;
		ИначеЕсли Падеж = 2 Тогда
			Возврат СтрЗаменить(Слово, "ший", "шего");
		ИначеЕсли Падеж = 3 Тогда
			Возврат СтрЗаменить(Слово, "ший", "шему");
		ИначеЕсли Падеж = 4 Тогда
			Возврат СтрЗаменить(Слово, "ший", "шего");
		ИначеЕсли Падеж = 5 Тогда
			Возврат СтрЗаменить(Слово, "ший", "шим");
		ИначеЕсли Падеж = 6 Тогда
			Возврат СтрЗаменить(Слово, "ший", "шем");
		КонецЕсли;
		
	ИначеЕсли ПереданноеСлово = "разряда" Тогда
		
		Возврат Слово;
		
	Иначе
		Возврат Слово;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


