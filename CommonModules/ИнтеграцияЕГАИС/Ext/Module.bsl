
#Область ПрограммныйИнтерфейс

// Подбирает справки Б по остаткам для списания, начиная с самой ранней.
//
// Параметры:
//  ТЧТовары - ТабличнаяЧасть, ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть, содержащая реквизиты:
//                                                                     АлкогольнаяПродукция, СправкаБ, Количество,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация учета остатков,
//  Период - Дата, Граница - дата получения остатков. Если не указана, то берутся последние.
//
Процедура ПодобратьСправкиБДляСписания(ТЧТовары, ОрганизацияЕГАИС, Период = Неопределено) Экспорт
	
	СтрокиСоСправкой = Новый Массив;
	
	СписокАлкогольнойПродукции = Новый Массив;
	Для Каждого СтрокаТЧ Из ТЧТовары Цикл
		Если СтрокаТЧ.СправкаБ.Пустая() Тогда
			СписокАлкогольнойПродукции.Добавить(СтрокаТЧ.АлкогольнаяПродукция);
		Иначе
			СтрокиСоСправкой.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокАлкогольнойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТЧТовары) = Тип("ТаблицаЗначений") Тогда
		ЕстьСумма = ТЧТовары.Колонки.Найти("Сумма") <> Неопределено;
		
		СправкиВДокументе = ТЧТовары.Скопировать(СтрокиСоСправкой, "АлкогольнаяПродукция, СправкаБ, Количество");
	Иначе
		ТаблицаТоваров = ТЧТовары.Выгрузить();
		ЕстьСумма = ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено;
		
		СправкиВДокументе = ТЧТовары.Выгрузить(СтрокиСоСправкой, "АлкогольнаяПродукция, СправкаБ, Количество");
	КонецЕсли;
	
	СправкиВДокументе.Свернуть("АлкогольнаяПродукция, СправкаБ", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокАлкогольнойПродукции", СписокАлкогольнойПродукции);
	Запрос.УстановитьПараметр("СправкиВДокументе", СправкиВДокументе);
	
	Если ЗначениеЗаполнено(Период) Тогда
		Запрос.УстановитьПараметр("Период", Период);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкиВДокументе.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СправкиВДокументе.СправкаБ КАК СправкаБ,
	|	СправкиВДокументе.Количество КАК Количество
	|ПОМЕСТИТЬ СправкиВДокументе
	|ИЗ
	|	&СправкиВДокументе КАК СправкиВДокументе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СправкаБ КАК СправкаБ,
	|	ЕСТЬNULL(ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СправкаБ.ДокументОснование.ДатаТТН, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаТТН,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(СправкиВДокументе.Количество, 0) КАК Остаток
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(" + ?(ЗначениеЗаполнено(Период), "&Период", "") + "
	|			,
	|			ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|				И АлкогольнаяПродукция В (&СписокАлкогольнойПродукции)) КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СправкиВДокументе КАК СправкиВДокументе
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция = СправкиВДокументе.АлкогольнаяПродукция
	|			И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СправкаБ = СправкиВДокументе.СправкаБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	АлкогольнаяПродукция,
	|	ДатаТТН
	|ИТОГИ ПО
	|	АлкогольнаяПродукция";
	
	ВыборкаАлкогольнаяПродукция = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАлкогольнаяПродукция.Следующий() Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("АлкогольнаяПродукция", ВыборкаАлкогольнаяПродукция.АлкогольнаяПродукция);
		Отбор.Вставить("СправкаБ", Справочники.СправкиБЕГАИС.ПустаяСсылка());
		
		Выборка = ВыборкаАлкогольнаяПродукция.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОстатокПоСправке = Выборка.Остаток;
			ЕстьСтрокиДляЗаполнения = Истина;
			
			Пока ОстатокПоСправке > 0 Цикл
				МассивСтрок = ТЧТовары.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() = 0 Тогда
					ЕстьСтрокиДляЗаполнения = Ложь;
					Прервать;
				КонецЕсли;
				
				Для Каждого СтрокаТЧ Из МассивСтрок Цикл
					СтрокаТЧ.СправкаБ = Выборка.СправкаБ;
					Если СтрокаТЧ.Количество > ОстатокПоСправке Тогда
						РазницаПоКоличеству = СтрокаТЧ.Количество - ОстатокПоСправке;
						СтрокаТЧ.Количество = ОстатокПоСправке;
						
						Если ЕстьСумма Тогда
							РазницаПоСумме = СтрокаТЧ.Сумма - ОстатокПоСправке * СтрокаТЧ.Цена;
							СтрокаТЧ.Сумма = ОстатокПоСправке * СтрокаТЧ.Цена;
						КонецЕсли;
						
						НоваяСтрока = ТЧТовары.Вставить(ТЧТовары.Индекс(СтрокаТЧ) + 1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
						НоваяСтрока.СправкаБ = Справочники.СправкиБЕГАИС.ПустаяСсылка();
						
						НоваяСтрока.Количество = РазницаПоКоличеству;
						
						Если ЕстьСумма Тогда
							НоваяСтрока.Сумма = РазницаПоСумме;
						КонецЕсли;
					КонецЕсли;
					
					ОстатокПоСправке = ОстатокПоСправке - СтрокаТЧ.Количество;
					Если ОстатокПоСправке <= 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если НЕ ЕстьСтрокиДляЗаполнения Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Создает (или обновляет, если найдена по рег. номеру) справку на основании переданных данных.
//
// Параметры:
//  ДанныеСправки - Структура - заполненная структура, полученная функцией ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки(А)(Б),
//  ВидСправки - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид справки,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации,
//  ТекстОшибки - Строка - возвращаемый текст ошибки создания справки,
//  ВызыватьОбработчик - Булево - признак вызова обработчика переопределяемого модуля.
//
// Возвращаемое значение:
//   СправочникСсылка.СправкиАЕГАИС, СправочникСсылка.СправкиБЕГАИС - созданная (найденная) справка.
//
Функция СоздатьСправку(ДанныеСправки, ВидСправки, ДополнительныеПараметры, ТекстОшибки, ВызыватьОбработчик = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрационныйНомер", ДанныеСправки.РегистрационныйНомер);
	
	ИмяСправочника = ?(ВидСправки = Перечисления.ВидыДокументовЕГАИС.СправкаА, "СправкиАЕГАИС", "СправкиБЕГАИС");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкиЕГАИС.Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК СправкиЕГАИС
	|ГДЕ
	|	СправкиЕГАИС.РегистрационныйНомер = &РегистрационныйНомер";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Справка = Справочники[ИмяСправочника].СоздатьЭлемент();
	Иначе
		Справка = РезультатЗапроса.Выгрузить()[0].Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеСправки Цикл
		
		Если ЗначениеЗаполнено(КлючЗначение.Значение) И Справка[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Справка[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Справка.Модифицированность() Тогда
		Если ВызыватьОбработчик Тогда
			ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеСправки(Справка, ДополнительныеПараметры);
		КонецЕсли;
		
		Если НЕ ЗаписатьОбъект(Справка, ТекстОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справка.Ссылка;
	
КонецФункции

// Обновляет статус обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  НовыйСтатус - ПеречислениеСсылка - новый статус документа.
//
// Возвращаемое значение:
//   Структура - результат изменения статуса.
//
Функция ИзменитьСтатусОбработкиДокумента(ДокументСсылка, НовыйСтатус) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СтатусОбработки");
	
	Если ТекущийСтатус <> НовыйСтатус Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.СтатусОбработки = НовыйСтатус;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, Результат.ОписаниеОшибки, РежимЗаписи) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Процедура запуска регламентного задания ОбработкаОтветовЕГАИС.
//
// Параметры: нет.
//
Процедура ЗапуститьОбработкуОтветовЕГАИС() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаОтветовЕГАИС);
	
	Отбор = Новый Структура("Поле, Значение", "ОбменНаСервере", Истина);
	СписокУТМ = РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(Отбор);
	
	Для Каждого ТранспортныйМодуль Из СписокУТМ Цикл
		ИнтеграцияЕГАИСВызовСервера.ОбработатьОтветыИзУТМ(ТранспортныйМодуль, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//   ИмяПараметра           - строка с именем параметра сеанса.
//   УстановленныеПараметры - массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ИдентификаторСеансаЕГАИС" Тогда
		ПараметрыСеанса.ИдентификаторСеансаЕГАИС = Новый УникальныйИдентификатор;
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода конфигурации.
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоАдресВременногоХранилища(Строка(ПараметрыСеанса.ИдентификаторСеансаЕГАИС)) Тогда
		Расписание = ПолучитьИзВременногоХранилища(Строка(ПараметрыСеанса.ИдентификаторСеансаЕГАИС));
	Иначе
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработкаОтветовЕГАИС);
		Если РегЗадание <> Неопределено Тогда
			Расписание = РегЗадание.Расписание;
		Иначе
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ПериодПовтораДней = 1;
			Расписание.ПериодНедель = 1;
			Расписание.ПериодПовтораВТечениеДня = 300;
			
			Месяцы = Новый Массив;
			ДниНедели = Новый Массив;
			
			Для Сч = 1 По 12 Цикл
				Месяцы.Добавить(Сч);
				
				Если Сч <= 7 Тогда
					ДниНедели.Добавить(Сч);
				КонецЕсли;
			КонецЦикла;
			
			Расписание.Месяцы = Месяцы;
			Расписание.ДниНедели = ДниНедели;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("РасписаниеОбработкиОтветов", ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание));
	
КонецПроцедуры

// Определяет следующие свойства регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОтветовЕГАИС;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
КонецПроцедуры

// Параметры функциональных опций, действие которых распространяется на командный интерфейс и рабочий стол.
//
Процедура ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса) Экспорт
	
	ДоступныеУТМ = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули();
	
	Если ДоступныеУТМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодыФСРАР = Новый Массив;
	
	Для Каждого ТранспортныйМодуль Из ДоступныеУТМ Цикл
		Если КодыФСРАР.Найти(ТранспортныйМодуль.ИдентификаторФСРАР) = Неопределено Тогда
			КодыФСРАР.Добавить(ТранспортныйМодуль.ИдентификаторФСРАР);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыФСРАР", КодыФСРАР);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код В(&КодыФСРАР)";
	
	ОпцииИнтерфейса.Вставить("ОрганизацияЕГАИС", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Возвращает имя справочника, содержащего классификатор видов алкогольной продукции.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Строка - имя справочника.
//
Функция СправочникВидовАлкогольнойПродукции() Экспорт

	МассивТипов = Метаданные.ОпределяемыеТипы.ВидАлкогольнойПродукции.Тип.Типы();
	
	Если МассивТипов.Количество() = 1 Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		Возврат ОбъектМетаданных.Имя;
	Иначе
		ВызватьИсключение НСтр("ru = 'Определено более одного справочника видов алкогольной продукции.'");
	КонецЕсли;

КонецФункции

// Функция возвращает таблицу значений классификатора видов алкогольной продукции.
//
Функция КлассификаторВидовАлкогольнойПродукции() Экспорт
	
	ТаблицаВидовПродукции = Новый ТаблицаЗначений;
	
	Макет = ПолучитьОбщийМакет("КлассификаторВидовАлкогольнойПродукции");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	ИменаКолонок = СтрЗаменить(ЧтениеXML.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	КоличествоКолонок = СтрЧислоСтрок(ИменаКолонок);
	
	Для Сч = 1 По КоличествоКолонок Цикл
		ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
		
		Если ИмяКолонки = "Маркируемый" Тогда
			ТаблицаВидовПродукции.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
		Иначе
			ТаблицаВидовПродукции.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаВидовПродукции.Добавить();
		Для Сч = 1 По КоличествоКолонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			
			Если ИмяКолонки = "Маркируемый" Тогда
				новСтр[Сч-1] = Булево(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут(ИмяКолонки)));
			Иначе
				новСтр[Сч-1] = ЧтениеXML.ПолучитьАтрибут(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаВидовПродукции.Сортировать(ТаблицаВидовПродукции.Колонки[0].Имя + " Возр");
	
	Возврат ТаблицаВидовПродукции;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаДанных

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
Функция ТекстXMLВыгрузкиДокумента(ТранспортныйМодуль, ФорматОбмена, ВидДокумента, ПараметрыЗапроса, ТекстОшибки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Documents", КорневоеПространствоИмен());
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(
		Перечисления.ВидыДокументовЕГАИС.ПрефиксПространстваИмен(КорневоеПространствоИмен()),
		КорневоеПространствоИмен());
		
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, ФорматОбмена, ТекстОшибки);
	
	Зависимости = Новый Массив;
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema-instance");
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema");
	
	ЗависимыеПространстваИмен(ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).Зависимости, Зависимости);
	
	Если Зависимости.Найти(ПространствоИмен) = Неопределено Тогда
		Зависимости.Добавить(ПространствоИмен);
	КонецЕсли;
	
	Для Каждого ЗависимоеПространство Из Зависимости Цикл
		Префикс = Перечисления.ВидыДокументовЕГАИС.ПрефиксПространстваИмен(ЗависимоеПространство);
		Если НЕ ПустаяСтрока(Префикс) Тогда
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Префикс, ЗависимоеПространство);
		КонецЕсли;
	КонецЦикла;
	
	ОтправительXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(КорневоеПространствоИмен(), "SenderInfo"));
	УстановитьЗначениеСвойстваXDTO(ОтправительXDTO, "FSRAR_ID", ТранспортныйМодуль.ИдентификаторФСРАР, ТекстОшибки);
	
	СодержимоеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(КорневоеПространствоИмен(), "DocBody"));
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryAP = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryAP_v2 = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОрганизаций Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryClients = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryClients_v2 = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатков Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryRests = ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryRests_v2 = ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале Тогда
		СодержимоеXDTO.QueryRestsShop_v2 = ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросСправкиА Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryFormA = ПреобразоватьВXDTOЗапросСправки(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryFormF1 = ПреобразоватьВXDTOЗапросСправки_v2(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросСправкиБ Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryFormB = ПреобразоватьВXDTOЗапросСправки(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryFormF2 = ПреобразоватьВXDTOЗапросСправки_v2(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросТТН Тогда
		СодержимоеXDTO.QueryResendDoc = ПреобразоватьВXDTOЗапросТТН(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		СодержимоеXDTO.RequestRepealWB = ПреобразоватьВXDTOЗапросНаОтменуПроведенияТТН(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.ActChargeOn = ПреобразоватьВXDTOАктПостановкиНаБаланс(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.ActChargeOn_v2 = ПреобразоватьВXDTOАктПостановкиНаБаланс_v2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВТорговомЗале Тогда
		СодержимоеXDTO.ActChargeOnShop_v2 = ПреобразоватьВXDTOАктПостановкиНаБалансВТорговомЗале(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс Тогда
		СодержимоеXDTO.RequestRepealACO = ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаПостановкиНаБаланс(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписания Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.ActWriteOff = ПреобразоватьВXDTOАктСписания(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.ActWriteOff_v2 = ПреобразоватьВXDTOАктСписания_v2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала Тогда
		СодержимоеXDTO.ActWriteOffShop_v2 = ПреобразоватьВXDTOАктСписанияИзТорговогоЗала(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания Тогда
		СодержимоеXDTO.RequestRepealAWO = ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаСписания(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.WayBill = ПреобразоватьВXDTOТТН(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.WayBill_v2 = ПреобразоватьВXDTOТТН_v2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.WayBillAct = ПреобразоватьВXDTOАктПодтвержденияТТН(ВидДокумента, ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.WayBillAct_v2 = ПреобразоватьВXDTOАктПодтвержденияТТН_v2(ВидДокумента, ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН Тогда
		СодержимоеXDTO.ConfirmTicket = ПреобразоватьВXDTOПодтверждениеАктаРасхожденийТТН(ВидДокумента, ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал Тогда
		СодержимоеXDTO.TransferToShop = ПреобразоватьВXDTOПередачуВТорговыйЗал(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала Тогда
		СодержимоеXDTO.TransferFromShop = ПреобразоватьВXDTOВозвратИзТорговогоЗала(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена Тогда
		СодержимоеXDTO.InfoVersionTTN = ПреобразоватьВXDTOИнформациюОФорматеОбмена(ПараметрыЗапроса, ТекстОшибки);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ЗаписьXML.Закрыть();
		Возврат "";
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтправительXDTO, "Owner", КорневоеПространствоИмен());
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СодержимоеXDTO, "Document", КорневоеПространствоИмен());
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
Функция ТекстXMLВыгрузкиЧека(ВидДокумента, ШапкаЧека, СтрокиЧека, ТекстОшибки) Экспорт

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЧекXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Cheque");
	
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "inn", ШапкаЧека.ИНН, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ШапкаЧека.КПП) Тогда
		УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "kpp", ШапкаЧека.КПП, ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "address" , ШапкаЧека.АдресМагазина                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "name"    , ШапкаЧека.НаименованиеМагазина                  , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "kassa"   , ШапкаЧека.ЗаводскойНомерККМ                     , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "shift"   , ШапкаЧека.НомерСменыККМ                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "number"  , ШапкаЧека.НомерЧекаККМ                          , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "datetime", Формат(ШапкаЧека.ДатаВремяЧека, "ДФ=ddMMyyHHmm"), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого СтрокаЧека Из СтрокиЧека Цикл
		
		Цена = Формат(?(ШапкаЧека.Свойство("Возврат") И ШапкаЧека.Возврат, -1, 1) * СтрокаЧека.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		Объем = Формат(СтрокаЧека.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		СтрокаЧекаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
		УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "price"  , Цена, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "barcode", СтрокаЧека.ШтрихкодМарки , ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаЧека.ШтрихкодТовара) Тогда
			УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "ean", СтрокаЧека.ШтрихкодТовара, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объем) Тогда
			УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "volume" , Объем, ТекстОшибки);
		КонецЕсли;
		
		ЧекXDTO.Bottle.Добавить(СтрокаЧекаXDTO);
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ЧекXDTO, "Cheque");
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""" + ПространствоИмен + """ ", "");
	
	Возврат ТекстXML;

КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному типу запроса.
//
Функция ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки)

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryParameters"));
	
	ПараметрыЗапросаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Parameters", ЗапросXDTO);
	
	ПараметрXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Parameter"));
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Name", "ИНН", ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Value", ПараметрыЗапроса.ИНН, ТекстОшибки);
	
	ПараметрыЗапросаXDTO.Parameter.Добавить(ПараметрXDTO);
	ЗапросXDTO.Parameters.Добавить(ПараметрыЗапросаXDTO);
	
	Возврат ЗапросXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу остатков.
//
Функция ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибки)

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryParameters"));
	
	Возврат ЗапросXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному типу запроса.
//
Функция ПреобразоватьВXDTOЗапросСправки(ВидДокумента, ПараметрыЗапроса, ТекстОшибки)

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ЗапросСправкиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryFormAB"));
	УстановитьЗначениеСвойстваXDTO(ЗапросСправкиXDTO, "FormRegId", ПараметрыЗапроса.РегистрационныйНомер, ТекстОшибки);
	
	Возврат ЗапросСправкиXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному типу запроса.
//
Функция ПреобразоватьВXDTOЗапросСправки_v2(ВидДокумента, ПараметрыЗапроса, ТекстОшибки)

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	ЗапросСправкиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryFormF1F2"));
	УстановитьЗначениеСвойстваXDTO(ЗапросСправкиXDTO, "FormRegId", ПараметрыЗапроса.РегистрационныйНомер, ТекстОшибки);
	
	Возврат ЗапросСправкиXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий повторному запросу ТТН.
//
Функция ПреобразоватьВXDTOЗапросТТН(ВидДокумента, ПараметрыЗапроса, ТекстОшибки)

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryParameters"));
	
	ПараметрыЗапросаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Parameters", ЗапросXDTO);
	
	ПараметрXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Parameter"));
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Name", "WBREGID", ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Value", ПараметрыЗапроса.ИдентификаторЕГАИС, ТекстОшибки);
	
	ПараметрыЗапросаXDTO.Parameter.Добавить(ПараметрXDTO);
	ЗапросXDTO.Parameters.Добавить(ПараметрыЗапросаXDTO);
	
	Возврат ЗапросXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу на отмену проведения ТТН.
//
Функция ПреобразоватьВXDTOЗапросНаОтменуПроведенияТТН(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ТТНВходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "RequestRepealWB"));
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ClientId"     , ДанныеДляВыгрузки.ИдентификаторФСРАР, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestNumber", ДанныеДляВыгрузки.Номер             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestDate"  , ДанныеДляВыгрузки.Дата              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "WBRegId"      , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	Возврат ЗапросXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной организации.
//
Функция ПреобразоватьВXDTOОрганизацию(Организация, ТекстОшибки)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Код КАК Код,
	|	КлассификаторОрганизацийЕГАИС.Наименование КАК Наименование,
	|	КлассификаторОрганизацийЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.КодСтраны КАК КодСтраны,
	|	КлассификаторОрганизацийЕГАИС.КодРегиона КАК КодРегиона,
	|	КлассификаторОрганизацийЕГАИС.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	КлассификаторОрганизацийЕГАИС.ПредставлениеАдреса КАК ПредставлениеАдреса
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка";
	
	РеквизитыОрганизации = Запрос.Выполнить().Выбрать();
	РеквизитыОрганизации.Следующий();
	
	ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfo"));
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "Identity"   , Строка(Организация.УникальныйИдентификатор())    , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ClientRegId", РеквизитыОрганизации.Код                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "FullName"   , Лев(РеквизитыОрганизации.НаименованиеПолное, 255), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ShortName"  , Лев(РеквизитыОрганизации.Наименование, 64)       , ТекстОшибки);
	
	Если НЕ ПустаяСтрока(РеквизитыОрганизации.ИНН) Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "INN" , РеквизитыОрганизации.ИНН, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыОрганизации.КПП) Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "KPP", РеквизитыОрганизации.КПП, ТекстОшибки);
	КонецЕсли;
	
	АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressType"));
	УстановитьЗначениеСвойстваXDTO(АдресXDTO, "Country", Формат(РеквизитыОрганизации.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), ТекстОшибки);
	
	Если НЕ РеквизитыОрганизации.ПочтовыйИндекс = 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "Index", Формат(РеквизитыОрганизации.ПочтовыйИндекс, "ЧЦ=6; ЧВН=; ЧГ="), ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыОрганизации.КодРегиона = 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "RegionCode", Формат(РеквизитыОрганизации.КодРегиона, "ЧЦ=2; ЧВН="), ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыОрганизации.ПредставлениеАдреса) Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "description", Лев(РеквизитыОрганизации.ПредставлениеАдреса, 2000), ТекстОшибки);
	КонецЕсли;
	
	ОрганизацияXDTO.address = АдресXDTO;
	
	Возврат ОрганизацияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной организации.
//
Функция ПреобразоватьВXDTOОрганизацию_v2(Организация, ОрганизацияРФ, ТекстОшибки)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Код КАК Код,
	|	КлассификаторОрганизацийЕГАИС.Наименование КАК Наименование,
	|	КлассификаторОрганизацийЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.КодСтраны КАК КодСтраны,
	|	КлассификаторОрганизацийЕГАИС.КодРегиона КАК КодРегиона,
	|	КлассификаторОрганизацийЕГАИС.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	КлассификаторОрганизацийЕГАИС.ПредставлениеАдреса КАК ПредставлениеАдреса,
	|	КлассификаторОрганизацийЕГАИС.ТипОрганизации КАК ТипОрганизации,
	|	КлассификаторОрганизацийЕГАИС.ИдентификаторОрганизацииТС КАК ИдентификаторОрганизацииТС
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка";
	
	РеквизитыОрганизации = Запрос.Выполнить().Выбрать();
	РеквизитыОрганизации.Следующий();
	
	Если РеквизитыОрганизации.ТипОрганизации.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Для организации %1 не заполнен тип.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Организация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ОрганизацияРФ И РеквизитыОрганизации.ТипОрганизации <> Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ
		И РеквизитыОрганизации.ТипОрганизации <> Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ТекстОшибки = НСтр("ru='Организация %1 не зарегистрирована на территории РФ.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Организация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ULType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeULFL"));
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "FLType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeULFL"));
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "FOType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeFOTS"));
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TSType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeFOTS"));
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ClientRegId", РеквизитыОрганизации.Код                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "FullName"   , Лев(РеквизитыОрганизации.НаименованиеПолное, 255), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ShortName"  , Лев(РеквизитыОрганизации.Наименование, 64)       , ТекстОшибки);
	
	Если ЕстьСвойствоОбъектаXDTO(ОрганизацияXDTO, "INN") Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "INN" , РеквизитыОрганизации.ИНН, ТекстОшибки);
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ОрганизацияXDTO, "KPP") Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "KPP", РеквизитыОрганизации.КПП, ТекстОшибки);
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ОрганизацияXDTO, "TSNUM") И НЕ ПустаяСтрока(РеквизитыОрганизации.ИдентификаторОрганизацииТС) Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "TSNUM", РеквизитыОрганизации.ИдентификаторОрганизацииТС, ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АдресXDTO, "Country", Формат(РеквизитыОрганизации.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), ТекстОшибки);
	
	Если ЕстьСвойствоОбъектаXDTO(АдресXDTO, "RegionCode") Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "RegionCode", Формат(РеквизитыОрганизации.КодРегиона, "ЧЦ=2; ЧВН="), ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АдресXDTO, "description", Лев(РеквизитыОрганизации.ПредставлениеАдреса, 2000), ТекстОшибки);
	
	ОрганизацияXDTO.address = АдресXDTO;
	
	Если ОрганизацияРФ Тогда
		ИнформацияОбОрганизацииXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoRus_v2"));
	Иначе
		ИнформацияОбОрганизацииXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfo_v2"));
	КонецЕсли;
	
	Если РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ИнформацияОбОрганизацииXDTO.UL = ОрганизацияXDTO;
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ИнформацияОбОрганизацииXDTO.FL = ОрганизацияXDTO;
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ИнформацияОбОрганизацииXDTO.FO = ОрганизацияXDTO;
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ИнформацияОбОрганизацииXDTO.TS = ОрганизацияXDTO;
	КонецЕсли;
	
	Возврат ИнформацияОбОрганизацииXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной алкогольной продукции.
//
Функция ПреобразоватьВXDTOАлкогольнуюПродукцию(АлкогольнаяПродукция, ТекстОшибки)
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", АлкогольнаяПродукция);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Код КАК Код,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем КАК Объем,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость КАК Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель КАК Производитель,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Импортер КАК Импортер,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Код, """") КАК КодВидаПродукции,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.ВидЛицензии, ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.ПустаяСсылка)) КАК ВидЛицензии
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + СправочникВидовАлкогольнойПродукции() + " КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &Ссылка";
	
	РеквизитыАлкогольнойПродукции = Запрос.Выполнить().Выбрать();
	РеквизитыАлкогольнойПродукции.Следующий();
	
	АлкогольнаяПродукцияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "ProductInfo"));
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Identity", Строка(АлкогольнаяПродукция.УникальныйИдентификатор()), ТекстОшибки);
	
	Если НЕ РеквизитыАлкогольнойПродукции.ВидЛицензии.Пустая() Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Type", ТипыАП[РеквизитыАлкогольнойПродукции.ВидЛицензии], ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "FullName", Лев(РеквизитыАлкогольнойПродукции.НаименованиеПолное, 255), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(РеквизитыАлкогольнойПродукции.Наименование) Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ShortName", Лев(РеквизитыАлкогольнойПродукции.Наименование, 64), ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcCode", РеквизитыАлкогольнойПродукции.Код, ТекстОшибки);
	
	Если РеквизитыАлкогольнойПродукции.Объем > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Capacity", РеквизитыАлкогольнойПродукции.Объем, ТекстОшибки);
	КонецЕсли;
	
	Если РеквизитыАлкогольнойПродукции.Крепость > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcVolume", РеквизитыАлкогольнойПродукции.Крепость, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыАлкогольнойПродукции.Производитель.Пустая() Тогда
		АлкогольнаяПродукцияXDTO.Producer = ПреобразоватьВXDTOОрганизацию(РеквизитыАлкогольнойПродукции.Производитель, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыАлкогольнойПродукции.Импортер.Пустая() Тогда
		АлкогольнаяПродукцияXDTO.Importer = ПреобразоватьВXDTOОрганизацию(РеквизитыАлкогольнойПродукции.Импортер, ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ProductVCode", РеквизитыАлкогольнойПродукции.КодВидаПродукции, ТекстОшибки);
	
	Возврат АлкогольнаяПродукцияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной алкогольной продукции.
//
Функция ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(АлкогольнаяПродукция, ТекстОшибки)
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
	
	ТипыПродукции = Новый Соответствие;
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.ПустаяСсылка(), "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Упакованная, "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Неупакованная, "Unpacked");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", АлкогольнаяПродукция);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Код КАК Код,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем КАК Объем,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость КАК Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель КАК Производитель,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Код, """") КАК КодВидаПродукции,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции КАК ТипПродукции,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.ВидЛицензии, ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.ПустаяСсылка)) КАК ВидЛицензии
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + СправочникВидовАлкогольнойПродукции() + " КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &Ссылка";
	
	РеквизитыАлкогольнойПродукции = Запрос.Выполнить().Выбрать();
	РеквизитыАлкогольнойПродукции.Следующий();
	
	АлкогольнаяПродукцияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "ProductInfo_v2"));
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "UnitType", ТипыПродукции[РеквизитыАлкогольнойПродукции.ТипПродукции], ТекстОшибки);
	
	Если НЕ РеквизитыАлкогольнойПродукции.ВидЛицензии.Пустая() Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Type", ТипыАП[РеквизитыАлкогольнойПродукции.ВидЛицензии], ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "FullName", Лев(РеквизитыАлкогольнойПродукции.НаименованиеПолное, 255), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(РеквизитыАлкогольнойПродукции.Наименование) Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ShortName", Лев(РеквизитыАлкогольнойПродукции.Наименование, 64), ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcCode", РеквизитыАлкогольнойПродукции.Код, ТекстОшибки);
	
	Если РеквизитыАлкогольнойПродукции.Объем > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Capacity", РеквизитыАлкогольнойПродукции.Объем, ТекстОшибки);
	КонецЕсли;
	
	Если РеквизитыАлкогольнойПродукции.Крепость > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcVolume", РеквизитыАлкогольнойПродукции.Крепость, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыАлкогольнойПродукции.Производитель.Пустая() Тогда
		АлкогольнаяПродукцияXDTO.Producer = ПреобразоватьВXDTOОрганизацию_v2(РеквизитыАлкогольнойПродукции.Производитель, Ложь, ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ProductVCode", РеквизитыАлкогольнойПродукции.КодВидаПродукции, ТекстОшибки);
	
	Возврат АлкогольнаяПродукцияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному списку акцизных марок.
//
Функция ПреобразоватьВXDTOСписокАкцизныхМарок(АкцизныеМарки, ТекстОшибки)
	
	АкцизныеМаркиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/CommonEnum", "MarkCodeInfoType"));
	
	Для Каждого ШтрихкодМарки Из АкцизныеМарки Цикл
		УстановитьЗначениеСвойстваXDTO(АкцизныеМаркиXDTO, "MarkCode", ШтрихкодМарки, ТекстОшибки);
	КонецЦикла;
	
	Возврат АкцизныеМаркиXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту постановки на баланс.
//
Функция ПреобразоватьВXDTOАктПостановкиНаБаланс(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Number", ДанныеДляВыгрузки.Номер, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate", ДанныеДляВыгрузки.Дата, ТекстОшибки);
	
	Если НЕ ДанныеДляВыгрузки.Комментарий = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnPositionType"));
		
		ДанныеСправокXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "InformAB", ЭлементСодержимогоXDTO);
		
		СправкаАXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ActInventoryABInfo", "InformARegType"));
		УстановитьЗначениеСвойстваXDTO(СправкаАXDTO, "Quantity"    , СтрокаТовары.КоличествоПоСправкеА, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(СправкаАXDTO, "BottlingDate", СтрокаТовары.ДатаРозлива         , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(СправкаАXDTO, "TTNNumber"   , СтрокаТовары.НомерТТН            , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(СправкаАXDTO, "TTNDate"     , СтрокаТовары.ДатаТТН             , ТекстОшибки);
		
		Если НЕ ПустаяСтрока(СтрокаТовары.НомерПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(СправкаАXDTO, "EGAISFixNumber", СтрокаТовары.НомерПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДатаПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(СправкаАXDTO, "EGAISFixDate", СтрокаТовары.ДатаПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		ДанныеСправкиАXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InformABRegType"));
		ДанныеСправкиАXDTO.InformA = СправкаАXDTO;
		
		ДанныеСправокXDTO.InformABReg = ДанныеСправкиАXDTO;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformAB = ДанныеСправокXDTO;
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			АкцизныеМаркиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "MarkCodeInfoType"));
			
			Для Каждого ШтрихкодМарки Из СтрокаТовары.АкцизныеМарки Цикл
				УстановитьЗначениеСвойстваXDTO(АкцизныеМаркиXDTO, "MarkCode", ШтрихкодМарки, ТекстОшибки);
			КонецЦикла;
			
			ЭлементСодержимогоXDTO.MarkCodeInfo = АкцизныеМаркиXDTO;
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ДанныеДляВыгрузки.Идентификатор = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту постановки на баланс.
//
Функция ПреобразоватьВXDTOАктПостановкиНаБаланс_v2(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Number", ДанныеДляВыгрузки.Номер, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate", ДанныеДляВыгрузки.Дата, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeChargeOn", Строка(ДанныеДляВыгрузки.ПричинаПостановкиНаБаланс), ТекстОшибки);
	
	Если ДанныеДляВыгрузки.ИдентификаторАктаСписания <> Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActWriteOff", ДанныеДляВыгрузки.ИдентификаторАктаСписания, ТекстОшибки);
	КонецЕсли;
	
	Если ДанныеДляВыгрузки.Комментарий <> Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnPositionType"));
		
		ДанныеСправокXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "InformF1F2", ЭлементСодержимогоXDTO);
		
		Справка1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ActInventoryF1F2Info", "InformF1RegType"));
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "Quantity"    , СтрокаТовары.КоличествоПоСправкеА, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "BottlingDate", СтрокаТовары.ДатаРозлива         , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "TTNNumber"   , СтрокаТовары.НомерТТН            , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "TTNDate"     , СтрокаТовары.ДатаТТН             , ТекстОшибки);
		
		Если НЕ ПустаяСтрока(СтрокаТовары.НомерПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "EGAISFixNumber", СтрокаТовары.НомерПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДатаПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "EGAISFixDate", СтрокаТовары.ДатаПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		ДанныеСправки1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InformF1F2RegType"));
		ДанныеСправки1XDTO.InformF1 = Справка1XDTO;
		
		ДанныеСправокXDTO.InformF1F2Reg = ДанныеСправки1XDTO;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF1F2 = ДанныеСправокXDTO;
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			ЭлементСодержимогоXDTO.MarkCodeInfo = ПреобразоватьВXDTOСписокАкцизныхМарок(СтрокаТовары.АкцизныеМарки, ТекстОшибки);
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ДанныеДляВыгрузки.Идентификатор = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту постановки на баланс в торговом зале.
//
Функция ПреобразоватьВXDTOАктПостановкиНаБалансВТорговомЗале(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВТорговомЗале;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnShopType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Number", ДанныеДляВыгрузки.Номер, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate", ДанныеДляВыгрузки.Дата, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeChargeOn", Строка(ДанныеДляВыгрузки.ПричинаПостановкиНаБаланс), ТекстОшибки);
	
	Если ДанныеДляВыгрузки.ИдентификаторАктаСписания <> Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActWriteOff", ДанныеДляВыгрузки.ИдентификаторАктаСписания, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ДанныеДляВыгрузки.Комментарий = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnShopPositionType"));
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
		
	КонецЦикла;
	
	Если НЕ ДанныеДляВыгрузки.Идентификатор = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу на отмену проведения акта постановки на баланс.
//
Функция ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаПостановкиНаБаланс(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "RequestRepealACO"));
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ClientId"     , ДанныеДляВыгрузки.ИдентификаторФСРАР, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestNumber", ДанныеДляВыгрузки.Номер             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestDate"  , ДанныеДляВыгрузки.Дата              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ACORegId"     , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	Возврат ЗапросXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту списания.
//
Функция ПреобразоватьВXDTOАктСписания(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписания;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActNumber"   , СокрЛП(ДанныеДляВыгрузки.Номер)                  , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate"     , ДанныеДляВыгрузки.Дата                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeWriteOff", Строка(ДанныеДляВыгрузки.ПричинаСписания), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		СправкаБXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformBTypeItem"));
		УстановитьЗначениеСвойстваXDTO(СправкаБXDTO, "BRegId", СтрокаТовары.НомерСправкиБ, ТекстОшибки);
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformB  = СправкаБXDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header  = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту списания.
//
Функция ПреобразоватьВXDTOАктСписания_v2(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписания;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActNumber"   , СокрЛП(ДанныеДляВыгрузки.Номер)                  , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate"     , ДанныеДляВыгрузки.Дата                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeWriteOff", Строка(ДанныеДляВыгрузки.ПричинаСписания), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(Справка2XDTO, "F2RegId", СтрокаТовары.НомерСправкиБ, ТекстОшибки);
		
		ДанныеСправокXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InformF1F2"));
		ДанныеСправокXDTO.InformF2 = Справка2XDTO;
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF1F2 = ДанныеСправокXDTO;
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			ЭлементСодержимогоXDTO.MarkCodeInfo = ПреобразоватьВXDTOСписокАкцизныхМарок(СтрокаТовары.АкцизныеМарки, ТекстОшибки);
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header  = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту списания из торгового зала.
//
Функция ПреобразоватьВXDTOАктСписанияИзТорговогоЗала(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffShopType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActNumber"   , СокрЛП(ДанныеДляВыгрузки.Номер)                  , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate"     , ДанныеДляВыгрузки.Дата                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeWriteOff", Строка(ДанныеДляВыгрузки.ПричинаСписания), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffShopPositionType"));
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			ЭлементСодержимогоXDTO.MarkCodeInfo = ПреобразоватьВXDTOСписокАкцизныхМарок(СтрокаТовары.АкцизныеМарки, ТекстОшибки);
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header  = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу на отмену проведения акта списания.
//
Функция ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаСписания(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "RequestRepealAWO"));
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ClientId"     , ДанныеДляВыгрузки.ИдентификаторФСРАР, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestNumber", ДанныеДляВыгрузки.Номер             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestDate"  , ДанныеДляВыгрузки.Дата              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "AWORegId"     , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	Возврат ЗапросXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу ТТН.
//
Функция ПреобразоватьВXDTOТТН(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ТипыТТН = Новый Соответствие;
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная, "WBInvoiceFromMe");
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику, "WBReturnFromMe");
	
	ТТНXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ТТНXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Type"        , ТипыТТН[ДанныеДляВыгрузки.ВидОперации]              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "UnitType"    , ?(ДанныеДляВыгрузки.Упакована, "Packed", "Unpacked"), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "NUMBER"      , ДанныеДляВыгрузки.НомерТТН                          , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Date"        , ДанныеДляВыгрузки.ДатаТТН                           , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ShippingDate", ДанныеДляВыгрузки.ДатаОтгрузки                      , ТекстОшибки);
	
	ШапкаXDTO.Transport = ПреобразоватьВXDTOТранспортныйРазделТТН(ПространствоИмен, ДанныеДляВыгрузки, ТекстОшибки);
	ШапкаXDTO.Shipper = ПреобразоватьВXDTOОрганизацию(ДанныеДляВыгрузки.Грузоотправитель, ТекстОшибки);
	ШапкаXDTO.Consignee = ПреобразоватьВXDTOОрганизацию(ДанныеДляВыгрузки.Грузополучатель, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Поставщик) Тогда
		ШапкаXDTO.Supplier = ПреобразоватьВXDTOОрганизацию(ДанныеДляВыгрузки.Поставщик, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Основание) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Base", Лев(ДанныеДляВыгрузки.Основание, 200), ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 200), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ТТНXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		СправкаАXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformAType"));
		УстановитьЗначениеСвойстваXDTO(СправкаАXDTO, "RegId", СтрокаТовары.НомерСправкиА, ТекстОшибки);
		
		СправкаБXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformBType"));
		
		ЭлементСправкиБXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformBTypeItem"));
		УстановитьЗначениеСвойстваXDTO(
			ЭлементСправкиБXDTO,
			"BRegId",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СправкаБ, "РегистрационныйНомер"),
			ТекстОшибки);
		
		СправкаБXDTO.InformBItem = ЭлементСправкиБXDTO;
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторУпаковки) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Pack_ID", СтрокаТовары.ИдентификаторУпаковки, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Price"   , СтрокаТовары.Цена      , ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.НомерПартии) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Party", СтрокаТовары.НомерПартии, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.InformA = СправкаАXDTO;
		ЭлементСодержимогоXDTO.InformB = СправкаБXDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ТТНXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ТТНXDTO.Header = ШапкаXDTO;
	ТТНXDTO.Content = СодержимоеXDTO;
	
	Возврат ТТНXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу ТТН.
//
Функция ПреобразоватьВXDTOТТН_v2(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
		
	ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ТипыТТН = Новый Соответствие;
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная, "WBInvoiceFromMe");
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику, "WBReturnFromMe");
	
	ТТНXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ТТНXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Type"        , ТипыТТН[ДанныеДляВыгрузки.ВидОперации], ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "NUMBER"      , ДанныеДляВыгрузки.НомерТТН            , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Date"        , ДанныеДляВыгрузки.ДатаТТН             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ShippingDate", ДанныеДляВыгрузки.ДатаОтгрузки        , ТекстОшибки);
	
	ШапкаXDTO.Transport = ПреобразоватьВXDTOТранспортныйРазделТТН(ПространствоИмен, ДанныеДляВыгрузки, ТекстОшибки);
	ШапкаXDTO.Shipper = ПреобразоватьВXDTOОрганизацию_v2(ДанныеДляВыгрузки.Грузоотправитель, Истина, ТекстОшибки);
	ШапкаXDTO.Consignee = ПреобразоватьВXDTOОрганизацию_v2(ДанныеДляВыгрузки.Грузополучатель, Ложь, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Основание) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Base", Лев(ДанныеДляВыгрузки.Основание, 200), ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 200), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ТТНXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		Справка1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF1Type"));
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "RegId", СтрокаТовары.НомерСправкиА, ТекстОшибки);
		
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2Type"));
		
		ЭлементСправки2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(
			ЭлементСправки2XDTO,
			"F2RegId",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СправкаБ, "РегистрационныйНомер"),
			ТекстОшибки);
		
		Справка2XDTO.InformF2Item = ЭлементСправки2XDTO;
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторУпаковки) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Pack_ID", СтрокаТовары.ИдентификаторУпаковки, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Price"   , СтрокаТовары.Цена      , ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.НомерПартии) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Party", СтрокаТовары.НомерПартии, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.InformF1 = Справка1XDTO;
		ЭлементСодержимогоXDTO.InformF2 = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ТТНXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ТТНXDTO.Header = ШапкаXDTO;
	ТТНXDTO.Content = СодержимоеXDTO;
	
	Возврат ТТНXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий транспортному разделу ТТН.
//
Функция ПреобразоватьВXDTOТранспортныйРазделТТН(ПространствоИмен, ДанныеДляВыгрузки, ТекстОшибки)
	
	ДоставкаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransportType"));
	
	ПоляДоставки = Новый Соответствие;
	ПоляДоставки.Вставить("TRAN_TYPE"       , "ТипДоставки");
	ПоляДоставки.Вставить("TRAN_COMPANY"    , "Перевозчик");
	ПоляДоставки.Вставить("TRAN_CAR"        , "Автомобиль");
	ПоляДоставки.Вставить("TRAN_TRAILER"    , "Прицеп");
	ПоляДоставки.Вставить("TRAN_CUSTOMER"   , "Заказчик");
	ПоляДоставки.Вставить("TRAN_DRIVER"     , "Водитель");
	ПоляДоставки.Вставить("TRAN_LOADPOINT"  , "ПунктПогрузки");
	ПоляДоставки.Вставить("TRAN_UNLOADPOINT", "ПунктРазгрузки");
	ПоляДоставки.Вставить("TRAN_REDIRECT"   , "Перенаправление");
	ПоляДоставки.Вставить("TRAN_FORWARDER"  , "Экспедитор");
	
	Для Каждого СвойствоДоставкиXDTO Из ДоставкаXDTO.Свойства() Цикл
		ИмяПоляДанных = ПоляДоставки[СвойствоДоставкиXDTO.Имя];
		Если НЕ ИмяПоляДанных = Неопределено И НЕ ДанныеДляВыгрузки[ИмяПоляДанных] = Неопределено Тогда
			МаксДлина = 0;
			Для Каждого Фасет Из СвойствоДоставкиXDTO.Тип.Фасеты Цикл
				Если Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
					МаксДлина = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Фасет.Значение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если МаксДлина > 0 Тогда
				УстановитьЗначениеСвойстваXDTO(ДоставкаXDTO, СвойствоДоставкиXDTO.Имя, Лев(ДанныеДляВыгрузки[ИмяПоляДанных], МаксДлина), ТекстОшибки);
			Иначе
				УстановитьЗначениеСвойстваXDTO(ДоставкаXDTO, СвойствоДоставкиXDTO.Имя, ДанныеДляВыгрузки[ИмяПоляДанных], ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоставкаXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту подтверждения ТТН.
//
Функция ПреобразоватьВXDTOАктПодтвержденияТТН(ВидДокумента, ДокументСсылка, ТекстОшибки)

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНВходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	Иначе
		ТекстОшибки = НСтр("ru='Для документа %1 не предусмотрена выгрузка акта подтверждения.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		Возврат Неопределено;
	КонецЕсли;
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillActType"));
	
	ШапкаАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "IsAccept" , ?(ДанныеДляВыгрузки.Отказ, "Rejected", "Accepted"), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ACTNUMBER", ДанныеДляВыгрузки.Номер                           , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ActDate"  , ТекущаяДатаСеанса()                               , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "WBRegId"  , ДанныеДляВыгрузки.ИдентификаторЕГАИС              , ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"    , СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "InformBRegId", СтрокаТовары.НомерСправкиБ      , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "RealQuantity", СтрокаТовары.КоличествоФакт     , ТекстОшибки);
		
		СодержимоеАктаXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаАктаXDTO;
	АктXDTO.Content = СодержимоеАктаXDTO;
	
	Возврат АктXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий акту подтверждения ТТН.
//
Функция ПреобразоватьВXDTOАктПодтвержденияТТН_v2(ВидДокумента, ДокументСсылка, ТекстОшибки)

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНВходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	Иначе
		ТекстОшибки = НСтр("ru='Для документа %1 не предусмотрена выгрузка акта подтверждения.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыАктов = Новый Соответствие;
	ВидыАктов.Вставить(Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН, "Accepted");
	ВидыАктов.Вставить(Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН, "Rejected");
	ВидыАктов.Вставить(Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН, "Differences");
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillActType_v2"));
	
	ШапкаАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "IsAccept" , ВидыАктов[ВидДокумента]             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ACTNUMBER", ДанныеДляВыгрузки.Номер             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ActDate"  , ТекущаяДатаСеанса()                 , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "WBRegId"  , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"     , СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "InformF2RegId", СтрокаТовары.НомерСправкиБ      , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "RealQuantity" , СтрокаТовары.КоличествоФакт     , ТекстОшибки);
		
		СодержимоеАктаXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаАктаXDTO;
	АктXDTO.Content = СодержимоеАктаXDTO;
	
	Возврат АктXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий подтверждению акта расхождений.
//
Функция ПреобразоватьВXDTOПодтверждениеАктаРасхожденийТТН(ВидДокумента, ДокументСсылка, ТекстОшибки)
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	КвитанцияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ConfirmTicketType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", КвитанцияXDTO);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "IsConfirm"   , ?(ДанныеДляВыгрузки.Отказ, "Rejected", "Accepted"), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TicketNumber", ДанныеДляВыгрузки.Номер                           , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TicketDate"  , ТекущаяДатаСеанса()                               , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "WBRegId"     , ДанныеДляВыгрузки.ИдентификаторЕГАИС              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note"        , ДанныеДляВыгрузки.Комментарий                     , ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(КвитанцияXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки);
	КонецЕсли;
	
	КвитанцияXDTO.Header = ШапкаXDTO;
	
	Возврат КвитанцияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу передачи в торговый зал.
//
Функция ПреобразоватьВXDTOПередачуВТорговыйЗал(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ПередачаВТорговыйЗалЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка);
	
	ДокументXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferToShopType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ДокументXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferNumber", ДанныеДляВыгрузки.Номер, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferDate"  , ДанныеДляВыгрузки.Дата , ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ДокументXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(Справка2XDTO, "F2RegId", СтрокаТовары.НомерСправкиБ, ТекстОшибки);
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferToShopPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"   , СтрокаТовары.ИдентификаторСтроки    , ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "ProductCode", СтрокаТовары.КодАлкогольнойПродукции, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity"   , СтрокаТовары.Количество             , ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF2 = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ДокументXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ДокументXDTO.Header  = ШапкаXDTO;
	ДокументXDTO.Content = СодержимоеXDTO;
	
	Возврат ДокументXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу возврата из торгового зала.
//
Функция ПреобразоватьВXDTOВозвратИзТорговогоЗала(ДокументСсылка, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ВозвратИзТорговогоЗалаЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка);
	
	ДокументXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferFromShopType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ДокументXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferNumber", ДанныеДляВыгрузки.Номер, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferDate"  , ДанныеДляВыгрузки.Дата , ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ДокументXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(Справка2XDTO, "F2RegId", СтрокаТовары.НомерСправкиБ, ТекстОшибки);
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferFromShopPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"   , СтрокаТовары.ИдентификаторСтроки    , ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "ProductCode", СтрокаТовары.КодАлкогольнойПродукции, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity"   , СтрокаТовары.Количество             , ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF2 = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ДокументXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ДокументXDTO.Header  = ШапкаXDTO;
	ДокументXDTO.Content = СодержимоеXDTO;
	
	Возврат ДокументXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий информации о формате обмена.
//
Функция ПреобразоватьВXDTOИнформациюОФорматеОбмена(ПараметрыЗапроса, ТекстОшибки)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена;
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ИнформацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InfoVersionTTN"));
	УстановитьЗначениеСвойстваXDTO(ИнформацияXDTO, "ClientId", ПараметрыЗапроса.ИдентификаторФСРАР, ТекстОшибки);
	
	Если ПараметрыЗапроса.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		УстановитьЗначениеСвойстваXDTO(ИнформацияXDTO, "WBTypeUsed", "WayBill", ТекстОшибки);
	ИначеЕсли ПараметрыЗапроса.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		УстановитьЗначениеСвойстваXDTO(ИнформацияXDTO, "WBTypeUsed", "WayBill_v2", ТекстОшибки);
	КонецЕсли;
	
	Возврат ИнформацияXDTO;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Загружает список документов, полученных из УТМ.
//
// Параметры:
//  МассивДокументов        - Массив - полученные документы из ТМ ЕГАИС,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Соответствие  - загруженные документы.
//
Функция ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	СправкиБ = Новый ТаблицаЗначений;
	СправкиБ.Колонки.Добавить("Обработана"            , Новый ОписаниеТипов("Булево"));
	СправкиБ.Колонки.Добавить("Идентификатор"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("НомерТТН"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("ДатаТТН"               , Новый ОписаниеТипов("Дата"));
	СправкиБ.Колонки.Добавить("Грузоотправитель"      , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	СправкиБ.Колонки.Добавить("Грузополучатель"       , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	СправкиБ.Колонки.Добавить("ИдентификаторТТН"      , Новый ОписаниеТипов("Строка"));
	СправкиБ.Колонки.Добавить("ИдентификаторСтрокиТТН", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("НомерСтрокиТТН"        , Новый ОписаниеТипов("Число"));
	СправкиБ.Колонки.Добавить("НомерСправкиБ"         , Новый ОписаниеТипов("Строка"));
	СправкиБ.Колонки.Добавить("СправкаБ"              , Новый ОписаниеТипов("СправочникСсылка.СправкиБЕГАИС"));
	СправкиБ.Колонки.Добавить("ИдентификаторЗапроса"  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	СправкиБ.Колонки.Добавить("АдресЗапроса"          , Новый ОписаниеТипов("Строка"));
	СправкиБ.Колонки.Добавить("ТекстXML"              , Новый ОписаниеТипов("Строка"));
	
	МассивТТН = Новый Массив;
	
	Для Каждого СтруктураДокумента Из МассивДокументов Цикл
		
		РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
		РезультатОбработкиДокумента.ИдентификаторЗапроса = СтруктураДокумента.ИдентификаторЗапроса;
		РезультатОбработкиДокумента.ТекстXML = СтруктураДокумента.ТекстXML;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтруктураДокумента.ТекстXML);
		
		Попытка
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), "Documents").Тип());
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать входящий документ %1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураДокумента.АдресЗапроса);
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			РезультатОбработкиДокумента.ОписаниеОшибки =
				ТекстОшибки + Символы.ПС +
				ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, ЧтениеXML.КонтекстПространствИмен.Глубина);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			Продолжить;
		КонецПопытки;
		
		Если НЕ ОбъектXDTO.Document.TTNInformBReg = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.TTNInformF2Reg = Неопределено Тогда
			
			НовыеСправки = СправкиБ.СкопироватьКолонки();
			
			Если НЕ ОбъектXDTO.Document.TTNInformBReg = Неопределено Тогда
				ШапкаXDTO = ОбъектXDTO.Document.TTNInformBReg.Header;
				СписокСправокБXDTO = ОбъектXDTO.Document.TTNInformBReg.Content.Position;
			Иначе
				ШапкаXDTO = ОбъектXDTO.Document.TTNInformF2Reg.Header;
				СписокСправокБXDTO = ОбъектXDTO.Document.TTNInformF2Reg.Content.Position;
			КонецЕсли;
			
			ТекстОшибки = "";
			Для Каждого ЭлементСодержимого Из СписокСправокБXDTO Цикл
				ДанныеСправкиБ = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправкиБ();
				ДанныеСправкиБ.НомерПодтвержденияЕГАИС = ШапкаXDTO.EGAISFixNumber;
				ДанныеСправкиБ.ДатаПодтвержденияЕГАИС  = ШапкаXDTO.EGAISFixDate;
				
				НомерСправкиБ = "";
				Если ЕстьСвойствоОбъектаXDTO(ЭлементСодержимого, "InformBRegId") Тогда
					НомерСправкиБ = ЭлементСодержимого.InformBRegId;
				ИначеЕсли ЕстьСвойствоОбъектаXDTO(ЭлементСодержимого, "InformF2RegId") Тогда
					НомерСправкиБ = ЭлементСодержимого.InformF2RegId;
				КонецЕсли;
				
				ДанныеСправкиБ.РегистрационныйНомер = НомерСправкиБ;
				ДанныеСправкиБ.Наименование = НомерСправкиБ;
				
				Грузоотправитель = ЗагрузитьОрганизацию(ШапкаXDTO.Shipper, ДополнительныеПараметры, ТекстОшибки);
				Грузополучатель  = ЗагрузитьОрганизацию(ШапкаXDTO.Consignee, ДополнительныеПараметры, ТекстОшибки);
				
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаНовыхСправок = НовыеСправки.Добавить();
				СтрокаНовыхСправок.Идентификатор          = ШапкаXDTO.Identity;
				СтрокаНовыхСправок.ИдентификаторТТН       = ШапкаXDTO.WBRegId;
				СтрокаНовыхСправок.НомерТТН               = ШапкаXDTO.WBNUMBER;
				СтрокаНовыхСправок.ДатаТТН                = ШапкаXDTO.WBDate;
				СтрокаНовыхСправок.Грузоотправитель       = Грузоотправитель;
				СтрокаНовыхСправок.Грузополучатель        = Грузополучатель;
				СтрокаНовыхСправок.ИдентификаторСтрокиТТН = ЭлементСодержимого.Identity;
				СтрокаНовыхСправок.НомерСтрокиТТН         = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЭлементСодержимого.Identity);
				СтрокаНовыхСправок.НомерСправкиБ          = НомерСправкиБ;
				
				Если ПустаяСтрока(СтруктураДокумента.ИдентификаторЗапроса) Тогда
					СтрокаНовыхСправок.СправкаБ = СоздатьСправку(ДанныеСправкиБ, Перечисления.ВидыДокументовЕГАИС.СправкаБ, ДополнительныеПараметры, ТекстОшибки);
				КонецЕсли;
				
				СтрокаНовыхСправок.ИдентификаторЗапроса   = СтруктураДокумента.ИдентификаторЗапроса;
				СтрокаНовыхСправок.АдресЗапроса           = СтруктураДокумента.АдресЗапроса;
				СтрокаНовыхСправок.ТекстXML               = СтруктураДокумента.ТекстXML;
				
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				Для Каждого СтрокаНовыхСправок Из НовыеСправки Цикл
					СтрокаСправокБ = СправкиБ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСправокБ, СтрокаНовыхСправок);
				КонецЦикла;
			Иначе
				РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
				Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			КонецЕсли;
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ActInventoryInformBReg = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ActInventoryInformF2Reg = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.ActInventoryInformBReg = Неопределено Тогда
				РезультатОперации = ЗарегистрироватьСправкиПоАктуПостановкиНаБаланс(ОбъектXDTO.Document.ActInventoryInformBReg, ДополнительныеПараметры);
			Иначе
				РезультатОперации = ЗарегистрироватьСправкиПоАктуПостановкиНаБаланс(ОбъектXDTO.Document.ActInventoryInformF2Reg, ДополнительныеПараметры);
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат         = РезультатОперации.Результат;
			РезультатОбработкиДокумента.ОписаниеОшибки    = ?(РезультатОперации.Результат, "", РезультатОперации.ОписаниеОшибки);
			РезультатОбработкиДокумента.ВидДокумента      = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс;
			РезультатОбработкиДокумента.ДокументОснование = РезультатОперации.ДокументОснование;
			РезультатОбработкиДокумента.ПолученОтказ      = РезультатОперации.ПолученОтказ;
			
			Если РезультатОперации.Результат Тогда
				РезультатОбработкиДокумента.КомментарийЕГАИС = ?(РезультатОперации.ПолученОтказ, РезультатОперации.ОписаниеОшибки, НСтр("ru = 'Справки зарегистрированы.'"));
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.WayBill = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.WayBill_v2 = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.WayBill = Неопределено Тогда
				ДанныеТТН = ПолучитьДанныеТТНВходящей(ОбъектXDTO.Document.WayBill, ДополнительныеПараметры, РезультатОбработкиДокумента.ОписаниеОшибки);
			Иначе
				ДанныеТТН = ПолучитьДанныеТТНВходящей(ОбъектXDTO.Document.WayBill_v2, ДополнительныеПараметры, РезультатОбработкиДокумента.ОписаниеОшибки);
			КонецЕсли;
			
			Если ДанныеТТН = Неопределено Тогда
				Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			Иначе
				ДанныеТТН.Вставить("АдресЗапроса", СтруктураДокумента.АдресЗапроса);
				ДанныеТТН.Вставить("ТекстXML", СтруктураДокумента.ТекстXML);
				
				МассивТТН.Добавить(ДанныеТТН);
			КонецЕсли;
			
		ИначеЕсли НЕ ОбъектXDTO.Document.WayBillAct = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.WayBillAct_v2 = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.WayBillAct = Неопределено Тогда
				РезультатОперации = ЗагрузитьАктПодтвержденияТТН(ОбъектXDTO.Document.WayBillAct, ДополнительныеПараметры);
			Иначе
				РезультатОперации = ЗагрузитьАктПодтвержденияТТН(ОбъектXDTO.Document.WayBillAct_v2, ДополнительныеПараметры);
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат         = РезультатОперации.Результат;
			РезультатОбработкиДокумента.ОписаниеОшибки    = ?(РезультатОперации.Результат, "", РезультатОперации.ОписаниеОшибки);
			РезультатОбработкиДокумента.ВидДокумента      = РезультатОперации.ВидДокумента;
			РезультатОбработкиДокумента.ДокументОснование = РезультатОперации.ДокументОснование;
			РезультатОбработкиДокумента.ПолученОтказ      = РезультатОперации.ПолученОтказ;
			
			Если РезультатОперации.Результат Тогда
				РезультатОбработкиДокумента.КомментарийЕГАИС = ?(РезультатОперации.ПолученОтказ, РезультатОперации.ОписаниеОшибки, НСтр("ru = 'Загружен акт подтверждения ТТН.'"));
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ConfirmTicket = Неопределено Тогда
			
			РезультатОперации = ЗагрузитьПодтверждениеАктаРасхожденийТТН(ОбъектXDTO.Document.ConfirmTicket, ДополнительныеПараметры);
			
			РезультатОбработкиДокумента.Результат         = РезультатОперации.Результат;
			РезультатОбработкиДокумента.ОписаниеОшибки    = ?(РезультатОперации.Результат, "", РезультатОперации.ОписаниеОшибки);
			РезультатОбработкиДокумента.ВидДокумента      = РезультатОперации.ВидДокумента;
			РезультатОбработкиДокумента.ДокументОснование = РезультатОперации.ДокументОснование;
			РезультатОбработкиДокумента.ПолученОтказ      = РезультатОперации.ПолученОтказ;
			
			Если РезультатОперации.Результат Тогда
				РезультатОбработкиДокумента.КомментарийЕГАИС = ?(РезультатОперации.ПолученОтказ, РезультатОперации.ОписаниеОшибки, НСтр("ru = 'Обработано подтверждение акта расхождений.'"));
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.Ticket = Неопределено Тогда
			
			РезультатОбработкиДокумента.Результат = Истина;
			
			ДанныеЗапроса = РегистрыСведений.ПротоколОбменаЕГАИС.НайтиИсходящийЗапрос(СтруктураДокумента.ИдентификаторЗапроса);
			
			ИдентификаторЕГАИС = "";
			Если НЕ ДанныеЗапроса = Неопределено Тогда
				Если ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс
					ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВТорговомЗале
					ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписания
					ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала
					ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН
					ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал
					ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала Тогда
					ИдентификаторЕГАИС = Строка(ОбъектXDTO.Document.Ticket.RegID);
				КонецЕсли;
				
				РезультатОбработкиДокумента.ДокументОснование = ДанныеЗапроса.ДокументОснование;
			КонецЕсли;
			
			Если НЕ ОбъектXDTO.Document.Ticket.Result = Неопределено Тогда
				
				РезультатXDTO = ОбъектXDTO.Document.Ticket.Result;
				
				РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.КвитанцияФиксации;
				
				РезультатОперации = ЗагрузитьКвитанциюФиксации(
					РезультатXDTO,
					?(ДанныеЗапроса = Неопределено, Неопределено, ДанныеЗапроса.ДокументОснование),
					?(ДанныеЗапроса = Неопределено, Неопределено, ДанныеЗапроса.ВидДокумента),
					ИдентификаторЕГАИС);
					
				Если НЕ РезультатОперации.Результат Тогда
					РезультатОбработкиДокумента.Результат = Ложь;
					РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
				Иначе
					РезультатОбработкиДокумента.ПолученОтказ = РезультатОперации.ПолученОтказ;
					РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОперации.КомментарийЕГАИС;
				КонецЕсли;
				
			ИначеЕсли НЕ ОбъектXDTO.Document.Ticket.OperationResult = Неопределено Тогда
				
				РезультатXDTO = ОбъектXDTO.Document.Ticket.OperationResult;
				
				РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведения;
				
				РезультатОперации = ЗагрузитьКвитанциюПроведения(
					РезультатXDTO,
					?(ДанныеЗапроса = Неопределено, Неопределено, ДанныеЗапроса.ДокументОснование),
					ИдентификаторЕГАИС);
				
				Если НЕ РезультатОперации.Результат Тогда
					РезультатОбработкиДокумента.Результат = Ложь;
					РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
				Иначе
					РезультатОбработкиДокумента.ПолученОтказ = РезультатОперации.ПолученОтказ;
					РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОперации.КомментарийЕГАИС;
				КонецЕсли;
				
			Иначе
				РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Не удалось определить формат ответа на запрос %1'");
				РезультатОбработкиДокумента.КомментарийЕГАИС = СтрЗаменить(РезультатОбработкиДокумента.ОписаниеОшибки, "%1", СтруктураДокумента.АдресЗапроса);
				РезультатОбработкиДокумента.ПолученОтказ = Истина;
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyClient = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyClient_v2 = Неопределено Тогда
			
			СписокОрганизацийXDTO = ?(ОбъектXDTO.Document.ReplyClient = Неопределено,
				ОбъектXDTO.Document.ReplyClient_v2.Clients.Client,
				ОбъектXDTO.Document.ReplyClient.Clients.Client);
			
			ТекстОшибки = "";
			Для Каждого ДанныеОрганизацииXDTO Из СписокОрганизацийXDTO Цикл
				ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, ДополнительныеПараметры, ТекстОшибки);
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
			
			Если СписокОрганизацийXDTO.Количество() = 0 Тогда
				РезультатОбработкиДокумента.ПолученОтказ = Истина;
				РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Отсутствуют данные для загрузки.'");
			Иначе
				РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загрузка завершена.
																	|Загружено элементов: %1.'");
				РезультатОбработкиДокумента.КомментарийЕГАИС = СтрЗаменить(РезультатОбработкиДокумента.КомментарийЕГАИС, "%1", Формат(СписокОрганизацийXDTO.Количество(), "ЧГ="));
			КонецЕсли;
			
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветОрганизации;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyAP = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyAP_v2 = Неопределено Тогда
			
			СписокАлкогольнойПродукцииXDTO = ?(ОбъектXDTO.Document.ReplyAP = Неопределено,
				ОбъектXDTO.Document.ReplyAP_v2.Products.Product,
				ОбъектXDTO.Document.ReplyAP.Products.Product);
			
			ТекстОшибки = "";
			ЗагрузитьСписокАлкогольнойПродукции(СписокАлкогольнойПродукцииXDTO, ДополнительныеПараметры, ТекстОшибки);
			
			РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
			
			КоличествоЭлементов = СписокАлкогольнойПродукцииXDTO.Количество();
			
			Если КоличествоЭлементов = 0 Тогда
				РезультатОбработкиДокумента.ПолученОтказ = Истина;
				РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Отсутствуют данные для загрузки.'");
			Иначе
				РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загрузка завершена.
					|Загружено элементов: %1.'");
				РезультатОбработкиДокумента.КомментарийЕГАИС = СтрЗаменить(РезультатОбработкиДокумента.КомментарийЕГАИС, "%1", Формат(КоличествоЭлементов, "ЧГ="));
			КонецЕсли;
			
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветАлкогольнаяПродукция;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyFormA = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyForm1 = Неопределено Тогда
			
			ТекстОшибки = "";
			Если НЕ ОбъектXDTO.Document.ReplyFormA = Неопределено Тогда
				ЗагрузитьСправку(ОбъектXDTO.Document.ReplyFormA, Перечисления.ВидыДокументовЕГАИС.СправкаА, ДополнительныеПараметры, ТекстОшибки);
			Иначе
				ЗагрузитьСправку(ОбъектXDTO.Document.ReplyForm1, Перечисления.ВидыДокументовЕГАИС.СправкаА, ДополнительныеПараметры, ТекстОшибки);
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружена справка 1.'");
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.СправкаА;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyFormB = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyForm2 = Неопределено Тогда
			
			ТекстОшибки = "";
			Если НЕ ОбъектXDTO.Document.ReplyFormB = Неопределено Тогда
				ЗагрузитьСправку(ОбъектXDTO.Document.ReplyFormB, Перечисления.ВидыДокументовЕГАИС.СправкаБ, ДополнительныеПараметры, ТекстОшибки);
			Иначе
				ЗагрузитьСправку(ОбъектXDTO.Document.ReplyForm2, Перечисления.ВидыДокументовЕГАИС.СправкаБ, ДополнительныеПараметры, ТекстОшибки);
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружена справка 2.'");
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.СправкаБ;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyRests = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyRests_v2 = Неопределено Тогда
			
			ДанныеЗапроса = РегистрыСведений.ПротоколОбменаЕГАИС.НайтиИсходящийЗапрос(СтруктураДокумента.ИдентификаторЗапроса);
			Если НЕ ДанныеЗапроса = Неопределено И ЗначениеЗаполнено(ДанныеЗапроса.ДокументОснование) Тогда
				ТекстОшибки = "";
				Если НЕ ОбъектXDTO.Document.ReplyRests_v2 = Неопределено Тогда
					ЗагрузитьОстатки(ОбъектXDTO.Document.ReplyRests_v2, ДанныеЗапроса.ДокументОснование, ДополнительныеПараметры, ТекстОшибки);
				Иначе
					ЗагрузитьОстатки(ОбъектXDTO.Document.ReplyRests, ДанныеЗапроса.ДокументОснование, ДополнительныеПараметры, ТекстОшибки);
				КонецЕсли;
				РезультатОбработкиДокумента.ДокументОснование = ДанныеЗапроса.ДокументОснование;
			Иначе
				ТекстОшибки = НСтр("ru = 'Не найден исходящий документ запроса остатков.'");
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружены остатки по складу.'");
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветОстатки;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyRestsShop_v2 = Неопределено Тогда
			
			ДанныеЗапроса = РегистрыСведений.ПротоколОбменаЕГАИС.НайтиИсходящийЗапрос(СтруктураДокумента.ИдентификаторЗапроса);
			Если НЕ ДанныеЗапроса = Неопределено И ЗначениеЗаполнено(ДанныеЗапроса.ДокументОснование) Тогда
				ТекстОшибки = "";
				ЗагрузитьОстаткиВТорговомЗале(ОбъектXDTO.Document.ReplyRestsShop_v2, ДанныеЗапроса.ДокументОснование, ДополнительныеПараметры, ТекстОшибки);
				РезультатОбработкиДокумента.ДокументОснование = ДанныеЗапроса.ДокументОснование;
			Иначе
				ТекстОшибки = НСтр("ru = 'Не найден исходящий документ запроса остатков.'");
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружены остатки по торговому залу.'");
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветОстаткиВТорговомЗале;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		Иначе
			РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не удалось определить формат входящего документа %1'");
			РезультатОбработкиДокумента.ОписаниеОшибки = СтрЗаменить(РезультатОбработкиДокумента.ОписаниеОшибки, "%1", СтруктураДокумента.АдресЗапроса);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				РезультатОбработкиДокумента.ОписаниеОшибки);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивТТН.Количество() > 0 Тогда
		СоздатьТТНИзСписка(МассивТТН, СправкиБ, Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	Если СправкиБ.Количество() > 0
		И НЕ СправкиБ.Найти(Ложь, "Обработана") = Неопределено Тогда
		ЗарегистрироватьСправкиБПоТТН(СправкиБ, Результат);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Результат Цикл
		РезультатОбработкиДокумента = КлючЗначение.Значение;
		Если НЕ РезультатОбработкиДокумента.Результат Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСессииОбмена = ИнтеграцияЕГАИСКлиентСервер.ПараметрыСессииОбмена();
		ЗаполнитьЗначенияСвойств(ПараметрыСессииОбмена, РезультатОбработкиДокумента);
		
		ПараметрыСессииОбмена.ТипЗапроса   = Перечисления.ТипыЗапросовЕГАИС.Входящий;
		ПараметрыСессииОбмена.ПолученОтказ = РезультатОбработкиДокумента.ПолученОтказ;
		ПараметрыСессииОбмена.Комментарий  = РезультатОбработкиДокумента.КомментарийЕГАИС;
		ПараметрыСессииОбмена.ФайлОбмена   = Новый ХранилищеЗначения(ФорматироватьТекстXML(РезультатОбработкиДокумента.ТекстXML), Новый СжатиеДанных(9));
		
		РегистрыСведений.ПротоколОбменаЕГАИС.ЗаписатьСессиюОбменаСУТМ(ПараметрыСессииОбмена);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру результата обработки ответа сервера ЕГАИС на запрос.
//
Функция РезультатОбработкиВходящегоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"           , Ложь);
	Результат.Вставить("ОписаниеОшибки"      , "");
	Результат.Вставить("ИдентификаторЗапроса", "");
	Результат.Вставить("ВидДокумента"        , Неопределено);
	Результат.Вставить("ДокументОснование"   , Неопределено);
	Результат.Вставить("ПолученОтказ"        , Ложь);
	Результат.Вставить("КомментарийЕГАИС"    , "");
	Результат.Вставить("ТекстXML"            , "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для загрузки строки ТТН.
//
Функция СтруктураДанныхСтрокиТТНВходящей()
	
	Результат = Новый Структура;
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено); // Элемент справочника КлассификаторАлкогольнойПродукцииЕГАИС.
	Результат.Вставить("ИдентификаторУпаковки"  , "");           // Идентификатор упаковки.
	Результат.Вставить("Количество"             , 0);            // Количество продукции в ТТН.
	Результат.Вставить("Цена"                   , 0);            // Цена продукции в ТТН.
	Результат.Вставить("НомерПартии"            , "");           // Номер партии продукции.
	Результат.Вставить("ИдентификаторСтроки"    , "");           // Идентификатор позиции внутри накладной.
	Результат.Вставить("НомерСправкиА"          , "");           // Номер справки "А"
	Результат.Вставить("НомерСправкиБПоставщика", "");           // Номер справки "Б", по которой поставщик получил товар.
	Результат.Вставить("СправкаБ"               , Неопределено); // Элемент справочника СправкиБЕГАИС.
	Результат.Вставить("ДиапазоныНомеровМарок"  , Новый Массив); // Массив диапазонов номеров.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для загрузки строки диапазона марок в ТТН.
//
Функция СтруктураДанныхСтрокиДиапазонаМарок()
	
	Результат = Новый Структура;
	Результат.Вставить("ТипМарки"      , "");           // Тип марки
	Результат.Вставить("Идентификатор" , Неопределено); // Идентификатор диапазона в списке
	Результат.Вставить("Серия"         , "");           // Серия
	Результат.Вставить("НачальныйНомер", "");           // Начальный номер
	Результат.Вставить("КонечныйНомер" , "");           // Конечный номер
	
	Возврат Результат;
	
КонецФункции

// Создает документы ТТНВходящаяЕГАИС из переданного массива данных.
//
Процедура СоздатьТТНИзСписка(МассивТТН, СправкиБ, Результат, ДополнительныеПараметры)
	
	Для Каждого ДанныеТТН Из МассивТТН Цикл
		
		АдресРегистрацииСправок = "";
		ТекстXMLРегистрацииСправок = "";
		
		Для Каждого СтрокаТовары Из ДанныеТТН.ТаблицаТоваров Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Идентификатор"         , ДанныеТТН.Идентификатор);
			ПараметрыОтбора.Вставить("НомерТТН"              , ДанныеТТН.НомерТТН);
			ПараметрыОтбора.Вставить("ДатаТТН"               , ДанныеТТН.ДатаТТН);
			ПараметрыОтбора.Вставить("Грузоотправитель"      , ДанныеТТН.Грузоотправитель);
			ПараметрыОтбора.Вставить("Грузополучатель"       , ДанныеТТН.Грузополучатель);
			ПараметрыОтбора.Вставить("ИдентификаторСтрокиТТН", СтрокаТовары.ИдентификаторСтроки);
			
			МассивСтрок = СправкиБ.НайтиСтроки(ПараметрыОтбора);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				ДанныеТТН.ИдентификаторЕГАИС = МассивСтрок[0].ИдентификаторТТН;
				СтрокаТовары.СправкаБ = МассивСтрок[0].СправкаБ;
				
				АдресРегистрацииСправок = МассивСтрок[0].АдресЗапроса;
				ТекстXMLРегистрацииСправок = МассивСтрок[0].ТекстXML;
				
				Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
					МассивСтрок[Индекс].Обработана = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ДанныеТТН.ИдентификаторЕГАИС) Тогда
			Продолжить;
		КонецЕсли;
		
		ТТН = СоздатьТТНВходящую(ДанныеТТН, ДополнительныеПараметры);
		
		Если НЕ ТТН = Неопределено Тогда
			РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
			РезультатОбработкиДокумента.Результат = Истина;
			РезультатОбработкиДокумента.ТекстXML = ДанныеТТН.ТекстXML;
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН;
			РезультатОбработкиДокумента.ДокументОснование = ТТН;
			
			Если Результат[ДанныеТТН.АдресЗапроса] = Неопределено Тогда
				Результат.Вставить(ДанныеТТН.АдресЗапроса, РезультатОбработкиДокумента);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(АдресРегистрацииСправок) И Результат[АдресРегистрацииСправок] = Неопределено Тогда
				РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
				РезультатОбработкиДокумента.Результат = Истина;
				РезультатОбработкиДокумента.ТекстXML = ТекстXMLРегистрацииСправок;
				РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.РегистрацияСправокПоТТН;
				РезультатОбработкиДокумента.ДокументОснование = ТТН;
				
				Результат.Вставить(АдресРегистрацииСправок, РезультатОбработкиДокумента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает ТТН на основании переданных данных.
//
Функция СоздатьТТНВходящую(ДанныеТТН, ДополнительныеПараметры)
	
	НоваяСсылка = Документы.ТТНВходящаяЕГАИС.ПолучитьСсылку();
	
	ТТН = Документы.ТТНВходящаяЕГАИС.СоздатьДокумент();
	ТТН.УстановитьСсылкуНового(НоваяСсылка);
	
	ТТН.Дата = ТекущаяДатаСеанса();
	ТТН.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
	ЗаполнитьЗначенияСвойств(ТТН, ДанныеТТН);
	
	ТекстОшибки = "";
	Для Каждого СтрокаТоварыТТН Из ДанныеТТН.ТаблицаТоваров Цикл
		СтрокаТовары = ТТН.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТоварыТТН);
		
		СправкаБ = СтрокаТовары.СправкаБ.ПолучитьОбъект();
		СправкаБ.АлкогольнаяПродукция = СтрокаТовары.АлкогольнаяПродукция;
		СправкаБ.Количество = СтрокаТовары.Количество;
		СправкаБ.НомерСправкиА = СтрокаТоварыТТН.НомерСправкиА;
		СправкаБ.ДокументОснование = НоваяСсылка;
		ЗаписатьОбъект(СправкаБ, ТекстОшибки);
		
		СтрокаТовары.Сумма = СтрокаТовары.Количество * СтрокаТоварыТТН.Цена;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ТТН.СуммаДокумента = ТТН.Товары.Итог("Сумма");
	
	ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеТТН(ТТН, ДополнительныеПараметры);
	
	Если ТТН.Модифицированность() Тогда
		Если НЕ ЗаписатьОбъект(ТТН, ТекстОшибки, РежимЗаписиДокумента.Проведение) Тогда
			Если НЕ ЗаписатьОбъект(ТТН, ТекстОшибки) Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТТН.Ссылка;
	
КонецФункции

// Регистрирует новые справки Б и заполняет их в табличной части ТТН.
//
Процедура ЗарегистрироватьСправкиБПоТТН(СправкиБ, Результат)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СправкиБ", СправкиБ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкиБ.Идентификатор КАК Идентификатор,
	|	СправкиБ.НомерТТН КАК НомерТТН,
	|	СправкиБ.ДатаТТН КАК ДатаТТН,
	|	СправкиБ.Грузоотправитель КАК Грузоотправитель,
	|	СправкиБ.Грузополучатель КАК Грузополучатель,
	|	СправкиБ.ИдентификаторТТН КАК ИдентификаторТТН,
	|	СправкиБ.ИдентификаторСтрокиТТН КАК ИдентификаторСтрокиТТН,
	|	СправкиБ.НомерСтрокиТТН КАК НомерСтрокиТТН,
	|	СправкиБ.СправкаБ КАК СправкаБ,
	|	СправкиБ.НомерСправкиБ КАК НомерСправкиБ,
	|	СправкиБ.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	|	СправкиБ.АдресЗапроса КАК АдресЗапроса,
	|	СправкиБ.ТекстXML КАК ТекстXML
	|ПОМЕСТИТЬ СправкиБ
	|ИЗ
	|	&СправкиБ КАК СправкиБ
	|ГДЕ
	|	НЕ СправкиБ.Обработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкиБ.ИдентификаторТТН,
	|	СправкиБ.СправкаБ,
	|	СправкиБ.НомерСправкиБ,
	|	СправкиБ.ИдентификаторЗапроса,
	|	СправкиБ.АдресЗапроса,
	|	СправкиБ.ТекстXML,
	|	ТТНВходящаяЕГАИСТовары.Ссылка КАК ДокументОснование,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправкиБ КАК СправкиБ
	|		ПО ТТНВходящаяЕГАИСТовары.Ссылка.Идентификатор = СправкиБ.Идентификатор
	|			И ТТНВходящаяЕГАИСТовары.Ссылка.НомерТТН = СправкиБ.НомерТТН
	|			И (НАЧАЛОПЕРИОДА(ТТНВходящаяЕГАИСТовары.Ссылка.ДатаТТН, ДЕНЬ) = НАЧАЛОПЕРИОДА(СправкиБ.ДатаТТН, ДЕНЬ))
	|			И ТТНВходящаяЕГАИСТовары.Ссылка.Грузоотправитель = СправкиБ.Грузоотправитель
	|			И ТТНВходящаяЕГАИСТовары.Ссылка.Грузополучатель = СправкиБ.Грузополучатель
	|			И ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки = СправкиБ.ИдентификаторСтрокиТТН
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.СправкаБ = ЗНАЧЕНИЕ(Справочник.СправкиБЕГАИС.ПустаяСсылка)
	|	И СправкиБ.ИдентификаторЗапроса = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправкиБ.ИдентификаторТТН,
	|	СправкиБ.СправкаБ,
	|	СправкиБ.НомерСправкиБ,
	|	СправкиБ.ИдентификаторЗапроса,
	|	СправкиБ.АдресЗапроса,
	|	СправкиБ.ТекстXML,
	|	ТТНИсходящаяЕГАИСТовары.Ссылка,
	|	ТТНИсходящаяЕГАИСТовары.НомерСтроки,
	|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТТНИсходящаяЕГАИСТовары.Количество
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправкиБ КАК СправкиБ
	|		ПО ТТНИсходящаяЕГАИСТовары.Ссылка.Идентификатор = СправкиБ.Идентификатор
	|			И ТТНИсходящаяЕГАИСТовары.Ссылка.НомерТТН = СправкиБ.НомерТТН
	|			И (НАЧАЛОПЕРИОДА(ТТНИсходящаяЕГАИСТовары.Ссылка.ДатаТТН, ДЕНЬ) = НАЧАЛОПЕРИОДА(СправкиБ.ДатаТТН, ДЕНЬ))
	|			И ТТНИсходящаяЕГАИСТовары.Ссылка.Грузоотправитель = СправкиБ.Грузоотправитель
	|			И ТТНИсходящаяЕГАИСТовары.Ссылка.Грузополучатель = СправкиБ.Грузополучатель
	|			И ТТНИсходящаяЕГАИСТовары.НомерСтроки = СправкиБ.НомерСтрокиТТН
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.НомерСправкиБПокупателя = """"
	|	И СправкиБ.ИдентификаторЗапроса <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТТН = Выборка.ДокументОснование.ПолучитьОбъект();
		ТТН.ИдентификаторЕГАИС = Выборка.ИдентификаторТТН;
		
		Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			ТТН.Товары[Выборка.НомерСтроки - 1].СправкаБ = Выборка.СправкаБ;
		Иначе
			ТТН.Товары[Выборка.НомерСтроки - 1].НомерСправкиБПокупателя = Выборка.НомерСправкиБ;
		КонецЕсли;
		
		РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
		РезультатОбработкиДокумента.ИдентификаторЗапроса = Выборка.ИдентификаторЗапроса;
		РезультатОбработкиДокумента.ТекстXML = Выборка.ТекстXML;
		
		Если ЗаписатьОбъект(ТТН, РезультатОбработкиДокумента.ОписаниеОшибки, РежимЗаписиДокумента.Проведение) Тогда
			РезультатОбработкиДокумента.ДокументОснование = ТТН.Ссылка;
		КонецЕсли;
		
		Если НЕ Выборка.СправкаБ.Пустая() Тогда
			СправкаБ = Выборка.СправкаБ.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СправкаБ, Выборка);
			ЗаписатьОбъект(СправкаБ, РезультатОбработкиДокумента.ОписаниеОшибки);
		КонецЕсли;
		
		РезультатОбработкиДокумента.Результат = ПустаяСтрока(РезультатОбработкиДокумента.ОписаниеОшибки);
		
		Если Результат[Выборка.АдресЗапроса] = Неопределено Тогда
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.РегистрацияСправокПоТТН;
			Результат.Вставить(Выборка.АдресЗапроса, РезультатОбработкиДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует новые справки А и Б и заполняет их в табличной части акта.
//
Функция ЗарегистрироватьСправкиПоАктуПостановкиНаБаланс(КвитанцияXDTO, ДополнительныеПараметры)

	Результат = Новый Структура("Результат, ОписаниеОшибки, ПолученОтказ, ДокументОснование", Истина, "", Ложь, Неопределено);
	
	Если НЕ ЗначениеЗаполнено(КвитанцияXDTO.Header.Identity) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор акта.'");
		Результат.ПолученОтказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ИдентификаторАкта = Новый УникальныйИдентификатор(КвитанцияXDTO.Header.Identity);
	Исключение
		Результат.ОписаниеОшибки = НСтр("ru = 'Некорректный идентификатор акта %1.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ОписаниеОшибки = СтрЗаменить(Результат.ОписаниеОшибки, "%1", КвитанцияXDTO.Header.Identity);
		Результат.ПолученОтказ = Истина;
		Возврат Результат;
	КонецПопытки;
	
	Результат.ДокументОснование = Документы.АктПостановкиНаБалансЕГАИС.ПолучитьСсылку(ИдентификаторАкта);
	
	АктОбъект = Результат.ДокументОснование.ПолучитьОбъект();
	Если АктОбъект = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неизвестный идентификатор акта %1.'");
		Результат.ОписаниеОшибки = СтрЗаменить(Результат.ОписаниеОшибки, "%1", КвитанцияXDTO.Header.Identity);
		Результат.ПолученОтказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаКвитанцииXDTO Из КвитанцияXDTO.Content.Position Цикл
		ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаКвитанцииXDTO.Identity) - 1;
		
		НомерНовойСправкиА = "";
		Если ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformARegId") Тогда
			НомерНовойСправкиА = СтрокаКвитанцииXDTO.InformARegId;
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformF1RegId") Тогда
			НомерНовойСправкиА = СтрокаКвитанцииXDTO.InformF1RegId;
		КонецЕсли;
		
		СтрокаТоваров = Неопределено;
		Если АктОбъект.Товары.Количество() > ИндексСтроки Тогда
			СтрокаТоваров = АктОбъект.Товары[ИндексСтроки];
		КонецЕсли;
		
		ДанныеСправкиА = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправкиА();
		ДанныеСправкиА.РегистрационныйНомер = НомерНовойСправкиА;
		ДанныеСправкиА.Наименование = НомерНовойСправкиА;
		
		Если СтрокаТоваров <> Неопределено Тогда
			ДанныеСправкиА.АлкогольнаяПродукция    = СтрокаТоваров.АлкогольнаяПродукция;
			ДанныеСправкиА.НомерТТН                = СтрокаТоваров.НомерТТН;
			ДанныеСправкиА.ДатаТТН                 = СтрокаТоваров.ДатаТТН;
			ДанныеСправкиА.ДатаРозлива             = СтрокаТоваров.ДатаРозлива;
			ДанныеСправкиА.Количество              = СтрокаТоваров.КоличествоПоСправкеА;
			ДанныеСправкиА.НомерПодтвержденияЕГАИС = СтрокаТоваров.НомерПодтвержденияЕГАИС;
			ДанныеСправкиА.ДатаПодтвержденияЕГАИС  = СтрокаТоваров.ДатаПодтвержденияЕГАИС;
		КонецЕсли;
		
		НоваяСправкаА = СоздатьСправку(ДанныеСправкиА, Перечисления.ВидыДокументовЕГАИС.СправкаА, ДополнительныеПараметры, Результат.ОписаниеОшибки);
		Если НоваяСправкаА = Неопределено Тогда
			Результат.Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		СписокСправокБXDTO = Новый Массив;
		Если ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformB") Тогда
			СписокСправокБXDTO = СтрокаКвитанцииXDTO.InformB.InformBItem;
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformF2") Тогда
			СписокСправокБXDTO = СтрокаКвитанцииXDTO.InformF2.InformF2Item;
		КонецЕсли;
		
		Для Каждого СтрокаСправокБ Из СписокСправокБXDTO Цикл
			НомерНовойСправкиБ = "";
			Если ЕстьСвойствоОбъектаXDTO(СтрокаСправокБ, "BRegId") Тогда
				НомерНовойСправкиБ = СтрокаСправокБ.BRegId;
			ИначеЕсли ЕстьСвойствоОбъектаXDTO(СтрокаСправокБ, "F2RegId") Тогда
				НомерНовойСправкиБ = СтрокаСправокБ.F2RegId;
			КонецЕсли;
			
			ДанныеСправкиБ = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправкиБ();
			ДанныеСправкиБ.РегистрационныйНомер = НомерНовойСправкиБ;
			ДанныеСправкиБ.Наименование         = НомерНовойСправкиБ;
			ДанныеСправкиБ.НомерСправкиА        = НомерНовойСправкиА;
			ДанныеСправкиБ.СправкаА             = НоваяСправкаА;
			ДанныеСправкиБ.ДокументОснование    = Результат.ДокументОснование;
			
			Если СтрокаТоваров <> Неопределено Тогда
				ДанныеСправкиБ.АлкогольнаяПродукция = СтрокаТоваров.АлкогольнаяПродукция;
				ДанныеСправкиБ.Количество = СтрокаТоваров.Количество;
			КонецЕсли;
			
			НоваяСправкаБ = СоздатьСправку(ДанныеСправкиБ, Перечисления.ВидыДокументовЕГАИС.СправкаБ, ДополнительныеПараметры, Результат.ОписаниеОшибки);
			Если НоваяСправкаБ = Неопределено Тогда
				Результат.Результат = Ложь;
				Возврат Результат;
			КонецЕсли;
		
			Если СтрокаТоваров <> Неопределено Тогда
				СтрокаТоваров.СправкаБ = НоваяСправкаБ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если АктОбъект.Модифицированность() Тогда
		Если НЕ ЗаписатьОбъект(АктОбъект, Результат.ОписаниеОшибки, РежимЗаписиДокумента.Проведение) Тогда
			Результат.Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет действия при получении подтверждения акта расхождений ТТН.
//
Функция ЗагрузитьПодтверждениеАктаРасхожденийТТН(КвитанцияXDTO, ДополнительныеПараметры)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки, ПолученОтказ, ДокументОснование, ВидДокумента", Истина, "", Ложь);
	
	Если НЕ ЗначениеЗаполнено(КвитанцияXDTO.Header.WBRegId) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор ТТН.'");
		Результат.ПолученОтказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ТТН = Документы.ТТНВходящаяЕГАИС.ТТНПоИдентификатору(КвитанцияXDTO.Header.WBRegId);
	Если НЕ ЗначениеЗаполнено(ТТН) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не найдена входящая ТТН с идентификатором %1.'");
		Результат.ОписаниеОшибки = СтрЗаменить(Результат.ОписаниеОшибки, "%1", КвитанцияXDTO.Header.WBRegId);
		Результат.ПолученОтказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДокументОснование = ТТН;
	
	Если ВРег(КвитанцияXDTO.Header.IsConfirm) = ВРег("Rejected") Тогда
		НовыйСтатус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятОтказОтАктаРасхождений;
		ОтказОтАкта = Истина;
		Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН;
	Иначе
		НовыйСтатус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений;
		ОтказОтАкта = Ложь;
		Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН;
		
		ДокументОбъект = ТТН.ПолучитьОбъект();
		ДокументОбъект.ДатаРегистрацииДвижений = КвитанцияXDTO.Header.TicketDate;
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, Результат.ОписаниеОшибки) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатОперации = ИзменитьСтатусОбработкиДокумента(ТТН, НовыйСтатус);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.Результат = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(ТТН, ОтказОтАкта);
	
	Возврат Результат;
	
КонецФункции

// Выполняет действия при получении акта подтверждения ТТН.
//
Функция ЗагрузитьАктПодтвержденияТТН(АктXDTO, ДополнительныеПараметры)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки, ПолученОтказ, ДокументОснование, ВидДокумента", Истина, "", Ложь);
	
	Если ВРег(АктXDTO.Header.IsAccept) = ВРег("Rejected") Тогда
		Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН;
	ИначеЕсли ВРег(АктXDTO.Header.IsAccept) = ВРег("Differences") Тогда
		Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН;
	Иначе
		Если АктXDTO.Content.Position.Количество() > 0 Тогда
			Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН;
		Иначе
			Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АктXDTO.Header.WBRegId) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор ТТН.'");
		Результат.ПолученОтказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ТТН = Документы.ТТНИсходящаяЕГАИС.ТТНПоИдентификатору(АктXDTO.Header.WBRegId);
	
	Если НЕ ЗначениеЗаполнено(ТТН) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не найдена исходящая ТТН с идентификатором %1.'");
		Результат.ОписаниеОшибки = СтрЗаменить(Результат.ОписаниеОшибки, "%1", АктXDTO.Header.WBRegId);
		Результат.ПолученОтказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДокументОснование = ТТН;
	
	ТТНОбъект = ТТН.ПолучитьОбъект();
	
	ПредыдущийСтатус = ТТНОбъект.СтатусОбработки;
	
	Если Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН Тогда
		ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктОтказа;
	Иначе
		Для Каждого СтрокаРасхожденияXDTO Из АктXDTO.Content.Position Цикл
			НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаРасхожденияXDTO.Identity);
			
			Если ТТНОбъект.Товары.Количество() >= НомерСтроки Тогда
				ТТНОбъект.Товары[НомерСтроки - 1].КоличествоФакт = СтрокаРасхожденияXDTO.RealQuantity;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
			ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктРасхождений;
		Иначе
			ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктПодтверждения;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН ИЛИ ТТНОбъект.СтатусОбработки <> ПредыдущийСтатус Тогда
		Если НЕ ЗаписатьОбъект(ТТНОбъект, Результат.ОписаниеОшибки, РежимЗаписиДокумента.Проведение) Тогда
			Результат.Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАктаПодтвержденияТТН(ТТН,
		Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН,
		Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН);
	
	Возврат Результат;
	
КонецФункции

// Загружает организацию в базу.
//
Функция ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, ДополнительныеПараметры, ТекстОшибки)
	
	ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ПустаяСсылка();
	ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.ПустаяСсылка();
	
	Если ЕстьСвойствоОбъектаXDTO(ДанныеОрганизацииXDTO, "OrgInfoV2") Тогда
		Если ВРег(ДанныеОрганизацииXDTO.VersionWB) = ВРег("WayBill") Тогда
			ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1;
		ИначеЕсли ВРег(ДанныеОрганизацииXDTO.VersionWB) = ВРег("WayBill_v2") Тогда
			ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2;
		КонецЕсли;
		
		ЗагружаемаяОрганизацияXDTO = ОпределитьЗагружаемуюОрганизацию(ДанныеОрганизацииXDTO.OrgInfoV2, ТипОрганизации);
	Иначе
		ЗагружаемаяОрганизацияXDTO = ОпределитьЗагружаемуюОрганизацию(ДанныеОрганизацииXDTO, ТипОрганизации);
	КонецЕсли;
	
	НайденнаяОрганизация = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ЗагружаемаяОрганизацияXDTO.ClientRegId);
	
	Если НЕ ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
		Организация = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
		Организация.Код = ЗагружаемаяОрганизацияXDTO.ClientRegId;
		Организация.Наименование = ЗагружаемаяОрганизацияXDTO.ShortName;
		Если ПустаяСтрока(Организация.Наименование) Тогда
			Организация.Наименование = ЗагружаемаяОрганизацияXDTO.FullName;
		КонецЕсли;
		Организация.НаименованиеПолное = ЗагружаемаяОрганизацияXDTO.FullName;
	Иначе
		Организация = НайденнаяОрганизация.ПолучитьОбъект();
	КонецЕсли;
	
	Если Организация.ТипОрганизации <> ТипОрганизации И НЕ ТипОрганизации.Пустая() Тогда
		Организация.ТипОрганизации = ТипОрганизации;
	КонецЕсли;
	
	Если Организация.ФорматОбмена <> ФорматОбмена И НЕ ФорматОбмена.Пустая() Тогда
		Организация.ФорматОбмена = ФорматОбмена;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO, "INN") Тогда
		Если НЕ ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.INN) И СокрЛП(Организация.ИНН) <> СокрЛП(ЗагружаемаяОрганизацияXDTO.INN) Тогда
			Организация.ИНН = СокрЛП(ЗагружаемаяОрганизацияXDTO.INN);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO, "KPP") Тогда
		Если НЕ ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.KPP) И СокрЛП(Организация.КПП) <> СокрЛП(ЗагружаемаяОрганизацияXDTO.KPP) Тогда
			Организация.КПП = СокрЛП(ЗагружаемаяОрганизацияXDTO.KPP);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO, "TSNUM") Тогда
		Если НЕ ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.TSNUM) И СокрЛП(Организация.ИдентификаторОрганизацииТС) <> СокрЛП(ЗагружаемаяОрганизацияXDTO.TSNUM) Тогда
			Организация.ИдентификаторОрганизацииТС = СокрЛП(ЗагружаемаяОрганизацияXDTO.TSNUM);
		КонецЕсли;
	КонецЕсли;
	
	КодСтраны = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Country);
	
	Если КодСтраны <> 0 И Организация.КодСтраны <> КодСтраны Тогда
		Организация.КодСтраны = КодСтраны;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO.address, "RegionCode") Тогда
		КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.RegionCode);
		Если КодРегиона <> 0 И Организация.КодРегиона <> КодРегиона Тогда
			Организация.КодРегиона = КодРегиона;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO.address, "Index") Тогда
		ПочтовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Index);
		Если ПочтовыйИндекс <> 0 И Организация.ПочтовыйИндекс <> ПочтовыйИндекс Тогда
			Организация.ПочтовыйИндекс = ПочтовыйИндекс;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.ПредставлениеАдреса) Тогда
		Организация.ПредставлениеАдреса = СокрЛП(ЗагружаемаяОрганизацияXDTO.address.description);
	КонецЕсли;
	
	Если Организация.ТипОрганизации.Пустая() Тогда
		Если НЕ ПустаяСтрока(Организация.ИдентификаторОрганизацииТС) Тогда
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		ИначеЕсли ПустаяСтрока(Организация.ИНН) И ПустаяСтрока(Организация.КПП) Тогда
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		ИначеЕсли ПустаяСтрока(Организация.КПП) И СтрДлина(СокрЛП(Организация.ИНН)) = 12 Тогда
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		Иначе
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		КонецЕсли;
	КонецЕсли;
	
	Если Организация.Модифицированность() Тогда
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеОрганизации(Организация, ДополнительныеПараметры);
		
		Если НЕ ЗаписатьОбъект(Организация, ТекстОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация.Ссылка;
	
КонецФункции

// Возвращает объект XDTO организации, которую требуется загрузить.
//
Функция ОпределитьЗагружаемуюОрганизацию(ДанныеОрганизацииXDTO, ТипОрганизации)
	
	ОрганизацияXDTO = Неопределено;
	
	Если ЕстьСвойствоОбъектаXDTO(ДанныеОрганизацииXDTO, "UL") Тогда
		
		Если ДанныеОрганизацииXDTO.UL <> Неопределено Тогда
			ОрганизацияXDTO = ДанныеОрганизацииXDTO.UL;
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
			
		ИначеЕсли ДанныеОрганизацииXDTO.FL <> Неопределено Тогда
			ОрганизацияXDTO = ДанныеОрганизацииXDTO.FL;
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
			
		ИначеЕсли ДанныеОрганизацииXDTO.FO <> Неопределено Тогда
			ОрганизацияXDTO = ДанныеОрганизацииXDTO.FO;
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
			
		ИначеЕсли ДанныеОрганизацииXDTO.TS <> Неопределено Тогда
			ОрганизацияXDTO = ДанныеОрганизацииXDTO.TS;
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		КонецЕсли;
		
	Иначе
		ОрганизацияXDTO = ДанныеОрганизацииXDTO;
	КонецЕсли;
	
	Возврат ОрганизацияXDTO;
	
КонецФункции

// Загружает список алкогольной продукции в базу.
//
Функция ЗагрузитьСписокАлкогольнойПродукции(СписокАлкогольнойПродукцииXDTO, ДополнительныеПараметры, ТекстОшибки)

	КлассификаторВидовПродукции = КлассификаторВидовАлкогольнойПродукции();
	
	ИмяКлассификатора = СправочникВидовАлкогольнойПродукции();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлассификаторВидовПродукции", КлассификаторВидовПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КлассификаторВидовПродукции.Код КАК Строка(3)) КАК Код,
	|	КлассификаторВидовПродукции.Наименование КАК Наименование,
	|	КлассификаторВидовПродукции.Маркируемый КАК Маркируемый
	|ПОМЕСТИТЬ КлассификаторВидовПродукции
	|ИЗ
	|	&КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторВидовПродукции.Код,
	|	КлассификаторВидовПродукции.Наименование,
	|	КлассификаторВидовПродукции.Маркируемый,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник." + ИмяКлассификатора + ".ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяКлассификатора + " КАК ВидыАлкогольнойПродукцииЕГАИС
	|		ПО КлассификаторВидовПродукции.Код = ВидыАлкогольнойПродукцииЕГАИС.Код";
	
	КлассификаторВидовПродукции = Запрос.Выполнить().Выгрузить();
	КлассификаторВидовПродукции.Индексы.Добавить("Код");
	
	ТаблицаАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Код"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Наименование"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Объем"             , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Крепость"          , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Производитель"     , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Импортер"          , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ВидПродукции"      , Новый ОписаниеТипов("СправочникСсылка." + ИмяКлассификатора));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ТипПродукции"      , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПродукцииЕГАИС"));
	
	ВидыЛицензий = Новый Соответствие;
	ВидыЛицензий.Вставить("АП", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ВидыЛицензий.Вставить("ССП", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ВидыЛицензий.Вставить("ССНП", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ВидыЛицензий.Вставить("Спирт", Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	
	МассивКодов = Новый Массив;
	
	Для Каждого ДанныеАлкогольнойПродукцииXDTO Из СписокАлкогольнойПродукцииXDTO Цикл
		
		Если МассивКодов.Найти(ДанныеАлкогольнойПродукцииXDTO.AlcCode) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКодов.Добавить(ДанныеАлкогольнойПродукцииXDTO.AlcCode);
		
		СтрокаТаблицы = ТаблицаАлкогольнойПродукции.Добавить();
		СтрокаТаблицы.Код                = ДанныеАлкогольнойПродукцииXDTO.AlcCode;
		СтрокаТаблицы.Наименование       = ДанныеАлкогольнойПродукцииXDTO.ShortName;
		СтрокаТаблицы.НаименованиеПолное = ДанныеАлкогольнойПродукцииXDTO.FullName;
		СтрокаТаблицы.Объем              = ДанныеАлкогольнойПродукцииXDTO.Capacity;
		СтрокаТаблицы.Крепость           = ДанныеАлкогольнойПродукцииXDTO.AlcVolume;
		
		Если ПустаяСтрока(СтрокаТаблицы.Наименование) И НЕ ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
			СтрокаТаблицы.Наименование = СтрокаТаблицы.НаименованиеПолное;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) И НЕ ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
			СтрокаТаблицы.НаименованиеПолное = СтрокаТаблицы.Наименование;
		КонецЕсли;
		
		Если ДанныеАлкогольнойПродукцииXDTO.Producer <> Неопределено Тогда
			СтрокаТаблицы.Производитель = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Producer, ДополнительныеПараметры, ТекстОшибки);
		КонецЕсли;
		
		Если ЕстьСвойствоОбъектаXDTO(ДанныеАлкогольнойПродукцииXDTO, "Importer") Тогда
			Если ДанныеАлкогольнойПродукцииXDTO.Importer <> Неопределено Тогда
				СтрокаТаблицы.Импортер = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Importer, ДополнительныеПараметры, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоОбъектаXDTO(ДанныеАлкогольнойПродукцииXDTO, "UnitType") Тогда
			СтрокаТаблицы.ТипПродукции = ?(ДанныеАлкогольнойПродукцииXDTO.UnitType = "Unpacked",
				Перечисления.ТипыПродукцииЕГАИС.Неупакованная,
				Перечисления.ТипыПродукцииЕГАИС.Упакованная);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаКлассификатора = КлассификаторВидовПродукции.Найти(ДанныеАлкогольнойПродукцииXDTO.ProductVCode, "Код");
		Если СтрокаКлассификатора <> Неопределено Тогда
			Если СтрокаКлассификатора.Ссылка.Пустая() Тогда
				ВидПродукции = Справочники[ИмяКлассификатора].СоздатьЭлемент();
				ВидПродукции.Код          = СтрокаКлассификатора.Код;
				ВидПродукции.Наименование = СтрокаКлассификатора.Наименование;
				ВидПродукции.ВидЛицензии  = ВидыЛицензий[ДанныеАлкогольнойПродукцииXDTO.Type];
				ВидПродукции.Маркируемый  = СтрокаКлассификатора.Маркируемый;
				
				Если НЕ ЗаписатьОбъект(ВидПродукции, ТекстОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				СтрокаКлассификатора.Ссылка = ВидПродукции.Ссылка;
			КонецЕсли;
			
			СтрокаТаблицы.ВидПродукции = СтрокаКлассификатора.Ссылка;
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код КАК Код,
	|	ТаблицаАлкогольнойПродукции.Наименование КАК Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем КАК Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость КАК Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель КАК Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер КАК Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции КАК ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции КАК ТипПродукции
	|ПОМЕСТИТЬ ТаблицаАлкогольнойПродукции
	|ИЗ
	|	&ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код,
	|	ТаблицаАлкогольнойПродукции.Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции,
	|	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК Ссылка,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка ЕСТЬ NULL 
	|		ИЛИ НЕ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.Наименование КАК СТРОКА(100))) = (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК СТРОКА(100)))
	|			И НЕ ТаблицаАлкогольнойПродукции.Наименование = """"
	|		ИЛИ НЕ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК СТРОКА(1000)))
	|			И НЕ ТаблицаАлкогольнойПродукции.НаименованиеПолное = """"
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Объем = КлассификаторАлкогольнойПродукцииЕГАИС.Объем
	|			И НЕ ТаблицаАлкогольнойПродукции.Объем = 0
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Крепость = КлассификаторАлкогольнойПродукцииЕГАИС.Крепость
	|			И НЕ ТаблицаАлкогольнойПродукции.Крепость = 0
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Производитель = КлассификаторАлкогольнойПродукцииЕГАИС.Производитель
	|			И НЕ ТаблицаАлкогольнойПродукции.Производитель = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Импортер = КлассификаторАлкогольнойПродукцииЕГАИС.Импортер
	|			И НЕ ТаблицаАлкогольнойПродукции.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.ВидПродукции = КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции
	|			И НЕ ТаблицаАлкогольнойПродукции.ВидПродукции = ЗНАЧЕНИЕ(Справочник." + ИмяКлассификатора + ".ПустаяСсылка) 
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.ТипПродукции = КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции
	|			И НЕ ТаблицаАлкогольнойПродукции.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка) КАК ЕстьИзменения
	|ИЗ
	|	ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТаблицаАлкогольнойПродукции.Код = КлассификаторАлкогольнойПродукцииЕГАИС.Код";
	
	Запрос.УстановитьПараметр("ТаблицаАлкогольнойПродукции", ТаблицаАлкогольнойПродукции);
	
	СозданныеЭлементы = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЕстьИзменения Тогда
			СозданныеЭлементы.Вставить(Выборка.Код, Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.Пустая() Тогда
			АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Иначе
			АлкогольнаяПродукция = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаАлкогольнойПродукции.Колонки Цикл
			Если ЗначениеЗаполнено(Выборка[Колонка.Имя]) Тогда
				АлкогольнаяПродукция[Колонка.Имя] = Выборка[Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ДополнительныеПараметры);
		
		Если НЕ ЗаписатьОбъект(АлкогольнаяПродукция, ТекстОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СозданныеЭлементы.Вставить(Выборка.Код, АлкогольнаяПродукция.Ссылка);
	КонецЦикла;
	
	Возврат СозданныеЭлементы;
	
КонецФункции

// Загружает остатки ЕГАИС в базу данных.
//
Процедура ЗагрузитьОстатки(ОтветОстаткиXDTO, ДокументОснование, ДополнительныеПараметры, ТекстОшибки)
	
	Док = ДокументОснование.ПолучитьОбъект();
	Док.Дата = ОтветОстаткиXDTO.RestsDate;
	
	Док.ОстаткиПоДаннымЕГАИС.Очистить();
	
	Если НЕ ОтветОстаткиXDTO.Products = Неопределено Тогда
		МассивXDTO = Новый Массив;
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.StockPosition Цикл
			МассивXDTO.Добавить(ЭлементXDTO.Product);
		КонецЦикла;
		
		ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивXDTO, ДополнительныеПараметры, ТекстОшибки);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.StockPosition Цикл
			СтрокаТЧ = Док.ОстаткиПоДаннымЕГАИС.Добавить();
			СтрокаТЧ.АлкогольнаяПродукция = ЗагруженныеПозиции[ЭлементXDTO.Product.AlcCode];
			СтрокаТЧ.Количество = ЭлементXDTO.Quantity;
			
			Если ЕстьСвойствоОбъектаXDTO(ЭлементXDTO, "InformF1RegId") Тогда
				НомерСправкиА = ЭлементXDTO.InformF1RegId;
				НомерСправкиБ = ЭлементXDTO.InformF2RegId;
			Иначе
				НомерСправкиА = ЭлементXDTO.InformARegId;
				НомерСправкиБ = ЭлементXDTO.InformBRegId;
			КонецЕсли;
			
			ДанныеСправкиБ = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправкиБ();
			ДанныеСправкиБ.РегистрационныйНомер = НомерСправкиБ;
			ДанныеСправкиБ.Наименование = НомерСправкиБ;
			ДанныеСправкиБ.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			ДанныеСправкиБ.НомерСправкиА = НомерСправкиА;
			
			СтрокаТЧ.СправкаБ = СоздатьСправку(ДанныеСправкиБ, Перечисления.ВидыДокументовЕГАИС.СправкаБ, ДополнительныеПараметры, ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Док.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки;
	
	РежимЗаписи = ?(Док.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ЗаписатьОбъект(Док, ТекстОшибки, РежимЗаписи);
	
КонецПроцедуры

// Загружает остатки ЕГАИС в базу данных.
//
Процедура ЗагрузитьОстаткиВТорговомЗале(ОтветОстаткиXDTO, ДокументОснование, ДополнительныеПараметры, ТекстОшибки)
	
	Док = ДокументОснование.ПолучитьОбъект();
	Док.Дата = ОтветОстаткиXDTO.RestsDate;
	
	Док.ОстаткиПоДаннымЕГАИС.Очистить();
	
	Если НЕ ОтветОстаткиXDTO.Products = Неопределено Тогда
		МассивXDTO = Новый Массив;
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.ShopPosition Цикл
			МассивXDTO.Добавить(ЭлементXDTO.Product);
		КонецЦикла;
		
		ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивXDTO, ДополнительныеПараметры, ТекстОшибки);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.ShopPosition Цикл
			СтрокаТЧ = Док.ОстаткиПоДаннымЕГАИС.Добавить();
			СтрокаТЧ.АлкогольнаяПродукция = ЗагруженныеПозиции[ЭлементXDTO.Product.AlcCode];
			СтрокаТЧ.Количество = ЭлементXDTO.Quantity;
		КонецЦикла;
	КонецЕсли;
	
	Док.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки;
	
	РежимЗаписи = ?(Док.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ЗаписатьОбъект(Док, ТекстОшибки, РежимЗаписи);
	
КонецПроцедуры

// Загружает справки по формам А и Б в базу данных.
//
Функция ЗагрузитьСправку(СправкаXDTO, ВидСправки, ДополнительныеПараметры, ТекстОшибки)
	
	ДанныеСправки = ПолучитьДанныеСправки(СправкаXDTO, ВидСправки, ДополнительныеПараметры, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СоздатьСправку(ДанныеСправки, ВидСправки, ДополнительныеПараметры, ТекстОшибки);
	
КонецФункции

// Загружает информацию о фиксации документа в ЕГАИС.
//
Функция ЗагрузитьКвитанциюФиксации(РезультатXDTO, ДокументОснование, ВидДокумента, ИдентификаторЕГАИС)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки, ПолученОтказ, КомментарийЕГАИС", Истина, "", Ложь, "");
	
	Результат.ПолученОтказ = ВРег(РезультатXDTO.Conclusion) = ВРег("Rejected");
	Результат.КомментарийЕГАИС = РезультатXDTO.Comments;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОтразитьФиксацию = Ложь;
	
	Если Результат.ПолученОтказ Тогда
		ОтразитьФиксацию = Истина;
	Иначе
		ОтразитьФиксацию =
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания;
	КонецЕсли;
	
	Если ОтразитьФиксацию Тогда
		РезультатОперации = ОтразитьФиксациюДокумента(ДокументОснование, НЕ Результат.ПолученОтказ, ИдентификаторЕГАИС);
		
		Если НЕ РезультатОперации.Результат Тогда
			Результат.Результат = Ложь;
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Загружает информацию о проведении документа в ЕГАИС.
//
Функция ЗагрузитьКвитанциюПроведения(РезультатXDTO, ДокументОснование, ИдентификаторЕГАИС)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки, ПолученОтказ, КомментарийЕГАИС", Истина, "", Ложь, "");
	
	Результат.КомментарийЕГАИС = РезультатXDTO.OperationComment;
	
	ДатаРегистрацииДвижений = Неопределено;
	
	Если ВРег(РезультатXDTO.OperationName) = ВРег("Confirm") Тогда
		
		Если ВРег(РезультатXDTO.OperationResult) = ВРег("Rejected") Тогда
			Результат.ПолученОтказ = Истина;
		Иначе
			ДатаРегистрацииДвижений = РезультатXDTO.OperationDate;
		КонецЕсли;
		
	ИначеЕсли ВРег(РезультатXDTO.OperationName) = ВРег("UnConfirm") Тогда
		
		Если ВРег(РезультатXDTO.OperationResult) = ВРег("Accepted") Тогда
			Результат.ПолученОтказ = Истина;
			ДатаРегистрацииДвижений = '00010101';
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтатусОбработки");
				Если СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений Тогда
					Результат.ПолученОтказ = Ложь;
				ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС Тогда
					Результат.ПолученОтказ = Ложь;
					
					ТТНОбъект = ДокументОснование.ПолучитьОбъект();
					ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктОтказа;
					Если НЕ ЗаписатьОбъект(ТТНОбъект, Результат.ОписаниеОшибки, РежимЗаписиДокумента.Проведение) Тогда
						Результат.Результат = Ложь;
						Возврат Результат;
					КонецЕсли;
					
					ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАктаПодтвержденияТТН(ДокументОснование, Истина, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(РезультатXDTO.OperationName) = ВРег("BarCodeCheck") Тогда
		
		Если ВРег(РезультатXDTO.OperationResult) = ВРег("Rejected") Тогда
			Результат.ПолученОтказ = Истина;
			ДатаРегистрацииДвижений = '00010101';
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатОперации = ОтразитьФиксациюДокумента(ДокументОснование, НЕ Результат.ПолученОтказ, ИдентификаторЕГАИС, ДатаРегистрацииДвижений);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.Результат = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет статус передачи документа в ЕГАИС и дату регистрации движений.
//
Функция ОтразитьФиксациюДокумента(ДокументОснование, ДокументПередан, ИдентификаторЕГАИС, ДатаРегистрацииДвижений = Неопределено)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	СтатусыПередачиВЕГАИС = Новый Соответствие;
	
	// Акт постановки на баланс
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиВЕГАИС));
			
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданЗапросНаОтменуПроведения,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения));
		
	// Акт списания
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиВЕГАИС));
			
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданЗапросНаОтменуПроведения,
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения));
		
	// ТТН входящая
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданЗапросНаОтменуПроведения,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения));
		
	// ТТН исходящая
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданАктОтказа,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиАктаОтказа));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеАктаРасхождений,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияАктаРасхождений));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтАктаРасхождений,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтАктаРасхождений));
		
	// Остатки ЕГАИС
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос,
			Перечисления.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков));
			
	// Передача в торговый зал
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ПередаетсяВЕГАИС
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ОшибкаПередачиВЕГАИС));
			
	// Возврат из торгового зала
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПередаетсяВЕГАИС
		,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ОшибкаПередачиВЕГАИС));
		
	ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтатусОбработки");
	
	Если НЕ СтатусыПередачиВЕГАИС[ТекущийСтатус] = Неопределено
		ИЛИ НЕ ПустаяСтрока(ИдентификаторЕГАИС)
		ИЛИ НЕ ДатаРегистрацииДвижений = Неопределено Тогда
		
		ДокументОбъект = ДокументОснование.ПолучитьОбъект();
		
		Если НЕ СтатусыПередачиВЕГАИС[ТекущийСтатус] = Неопределено Тогда
			ДокументОбъект.СтатусОбработки = ?(ДокументПередан, СтатусыПередачиВЕГАИС[ТекущийСтатус].СтатусПередан, СтатусыПередачиВЕГАИС[ТекущийСтатус].СтатусОшибкаПередачи);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИдентификаторЕГАИС) Тогда
			ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
		КонецЕсли;
		
		Если НЕ ДатаРегистрацииДвижений = Неопределено Тогда
			ДокументОбъект.ДатаРегистрацииДвижений = ДатаРегистрацииДвижений;
		КонецЕсли;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, Результат.ОписаниеОшибки, РежимЗаписи) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если НЕ СтатусыПередачиВЕГАИС[ТекущийСтатус] = Неопределено Тогда
			ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаОбработкиДокумента(ДокументОснование, ТекущийСтатус, ДокументОбъект.СтатусОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Получает данные справок А и Б в виде структуры для последующей загрузки в базу.
//
Функция ПолучитьДанныеСправки(СправкаXDTO, ВидСправки, ДополнительныеПараметры, ТекстОшибки)
	
	// Соответствие между реквизитами справки (Ключ) и свойствами объекта XDTO (Значение)
	СоответствияРеквизитов = Новый Соответствие;
	СоответствияРеквизитов.Вставить("Количество", "Quantity");
	
	Если ВидСправки = Перечисления.ВидыДокументовЕГАИС.СправкаА Тогда
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправкиА();
		
		Если ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformARegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformARegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "TTNNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "TTNDate");
			СоответствияРеквизитов.Вставить("ДатаОтгрузки", "ShippingDate");
			
			ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(СправкаXDTO.Shipper, ДополнительныеПараметры, ТекстОшибки);
			ДанныеСправки.Грузополучатель = ЗагрузитьОрганизацию(СправкаXDTO.Consignee, ДополнительныеПараметры, ТекстОшибки);
			
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformF1RegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF1RegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "OriginalDocNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "OriginalDocDate");
			
			Если СправкаXDTO.OriginalClient <> Неопределено Тогда
				ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(СправкаXDTO.OriginalClient, ДополнительныеПараметры, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		СоответствияРеквизитов.Вставить("ДатаРозлива", "BottlingDate");
		СоответствияРеквизитов.Вставить("НомерПодтвержденияЕГАИС", "EGAISNumber");
		СоответствияРеквизитов.Вставить("ДатаПодтвержденияЕГАИС", "EGAISDate");
	Иначе
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправкиБ();
		
		Если ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformBRegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformBRegId");
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformF2RegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF2RegId");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствияРеквизитов Цикл
		ДанныеСправки[КлючЗначение.Ключ] = СправкаXDTO.Получить(КлючЗначение.Значение);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивXDTO = Новый Массив;
	МассивXDTO.Добавить(СправкаXDTO.Product);
	
	ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивXDTO, ДополнительныеПараметры, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСправки.АлкогольнаяПродукция = ЗагруженныеПозиции[СправкаXDTO.Product.AlcCode];
	
	Возврат ДанныеСправки;
	
КонецФункции

// Получает данные ТТН в виде структуры для последующей загрузки в базу.
//
Функция ПолучитьДанныеТТНВходящей(ТТНXDTO, ДополнительныеПараметры, ТекстОшибки)

	ДанныеТТН = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхТТН();
	ДанныеТТН.Идентификатор = Строка(ТТНXDTO.Identity);
	
	ДанныеТТН.ВидОперации = ?(СтрНайти(ВРег(ТТНXDTO.Header.Type), ВРег("Return")) <> 0,
		Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя,
		Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная);
		
	Если ЕстьСвойствоОбъектаXDTO(ТТНXDTO.Header, "UnitType") Тогда
		ДанныеТТН.Упакована = ТТНXDTO.Header.UnitType = "Packed";
	КонецЕсли;
	
	ДанныеТТН.НомерТТН         = ТТНXDTO.Header.NUMBER;
	ДанныеТТН.ДатаТТН          = ТТНXDTO.Header.Date;
	ДанныеТТН.ДатаОтгрузки     = ТТНXDTO.Header.ShippingDate;
	ДанныеТТН.Грузоотправитель = ЗагрузитьОрганизацию(ТТНXDTO.Header.Shipper, ДополнительныеПараметры, ТекстОшибки);
	ДанныеТТН.Грузополучатель  = ЗагрузитьОрганизацию(ТТНXDTO.Header.Consignee, ДополнительныеПараметры, ТекстОшибки);
	
	Если ЕстьСвойствоОбъектаXDTO(ТТНXDTO.Header, "Supplier") И ТТНXDTO.Header.Supplier <> Неопределено Тогда
		ДанныеТТН.Поставщик = ЗагрузитьОрганизацию(ТТНXDTO.Header.Supplier, ДополнительныеПараметры, ТекстОшибки);
	КонецЕсли;
	
	ДанныеТТН.Основание = ТТНXDTO.Header.Base;
	ДанныеТТН.Комментарий = ТТНXDTO.Header.Note;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТТН.ТипДоставки     = ТТНXDTO.Header.Transport.TRAN_TYPE;
	ДанныеТТН.Перевозчик      = ТТНXDTO.Header.Transport.TRAN_COMPANY;
	ДанныеТТН.Автомобиль      = ТТНXDTO.Header.Transport.TRAN_CAR;
	ДанныеТТН.Прицеп          = ТТНXDTO.Header.Transport.TRAN_TRAILER;
	ДанныеТТН.Заказчик        = ТТНXDTO.Header.Transport.TRAN_CUSTOMER;
	ДанныеТТН.Водитель        = ТТНXDTO.Header.Transport.TRAN_DRIVER;
	ДанныеТТН.ПунктПогрузки   = ТТНXDTO.Header.Transport.TRAN_LOADPOINT;
	ДанныеТТН.ПунктРазгрузки  = ТТНXDTO.Header.Transport.TRAN_UNLOADPOINT;
	ДанныеТТН.Перенаправление = ТТНXDTO.Header.Transport.TRAN_REDIRECT;
	ДанныеТТН.Экспедитор      = ТТНXDTO.Header.Transport.TRAN_FORWARDER;
	
	МассивАлкогольнойПродукцииXDTO = Новый Массив;
	
	Для Каждого ЭлементСодержимогоXDTO Из ТТНXDTO.Content.Position Цикл
		
		Если МассивАлкогольнойПродукцииXDTO.Найти(ЭлементСодержимогоXDTO.Product) = Неопределено Тогда
			МассивАлкогольнойПродукцииXDTO.Добавить(ЭлементСодержимогоXDTO.Product);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивАлкогольнойПродукцииXDTO, ДополнительныеПараметры, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ЭлементСодержимогоXDTO Из ТТНXDTO.Content.Position Цикл
		
		СтрокаТТН = СтруктураДанныхСтрокиТТНВходящей();
		СтрокаТТН.АлкогольнаяПродукция  = ЗагруженныеПозиции[ЭлементСодержимогоXDTO.Product.AlcCode];
		СтрокаТТН.ИдентификаторУпаковки = ЭлементСодержимогоXDTO.Pack_ID;
		СтрокаТТН.Количество            = ЭлементСодержимогоXDTO.Quantity;
		СтрокаТТН.Цена                  = ЭлементСодержимогоXDTO.Price;
		СтрокаТТН.НомерПартии           = ЭлементСодержимогоXDTO.Party;
		СтрокаТТН.ИдентификаторСтроки   = ЭлементСодержимогоXDTO.Identity;
		
		Если ЕстьСвойствоОбъектаXDTO(ЭлементСодержимогоXDTO, "InformA") Тогда
			СтрокаТТН.НомерСправкиА = ЭлементСодержимогоXDTO.InformA.RegId;
			СтрокаТТН.НомерСправкиБПоставщика = ЭлементСодержимогоXDTO.InformB.InformBItem.BRegId;
		Иначе
			СтрокаТТН.НомерСправкиА = ЭлементСодержимогоXDTO.InformF1.RegId;
			СтрокаТТН.НомерСправкиБПоставщика = ЭлементСодержимогоXDTO.InformF2.InformF2Item.F2RegId;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЕстьСвойствоОбъектаXDTO(ЭлементСодержимогоXDTO, "InformB") Тогда
			МаркировкаXDTO = ЭлементСодержимогоXDTO.InformB.InformBItem.MarkInfo;
		Иначе
			МаркировкаXDTO = ЭлементСодержимогоXDTO.InformF2.InformF2Item.MarkInfo;
		КонецЕсли;
		
		Если МаркировкаXDTO <> Неопределено Тогда
			Для Каждого ЭлементДиапазонаXDTO Из МаркировкаXDTO.Ranges.Range Цикл
				ДиапазонНомеров = СтруктураДанныхСтрокиДиапазонаМарок();
				ДиапазонНомеров.ТипМарки       = МаркировкаXDTO.Type;
				ДиапазонНомеров.Идентификатор  = ЭлементДиапазонаXDTO.Identity;
				ДиапазонНомеров.Серия          = ЭлементДиапазонаXDTO.Rank;
				ДиапазонНомеров.НачальныйНомер = ЭлементДиапазонаXDTO.Start;
				ДиапазонНомеров.КонечныйНомер  = ЭлементДиапазонаXDTO.Last;
				
				СтрокаТТН.ДиапазоныНомеровМарок.Добавить(ДиапазонНомеров);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеТТН.ТаблицаТоваров.Добавить(СтрокаТТН);
		
	КонецЦикла;
	
	Возврат ДанныеТТН;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует строку в вид XML.
//
Функция ФорматироватьТекстXML(СтрокаXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		Возврат СтрокаXML;
	КонецПопытки;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Создает ОбъектXDTO из пространства имен по имени свойства.
//
Функция ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойства, ОбъектXDTOРодитель = Неопределено)
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		ТипОбъекта = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяСвойства).Тип;
	Иначе
		ТипОбъекта = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства).Тип;
	КонецЕсли;
	
	Возврат ФабрикаXDTO.Создать(ТипОбъекта);
	
КонецФункции

// Проверяет наличие свойства у объекта XDTO. Возвращает Истина, если свойство присутствует.
//
Функция ЕстьСвойствоОбъектаXDTO(ОбъектXDTO, ИмяСвойства)
	
	Возврат ОбъектXDTO.Свойства().Получить(ИмяСвойства) <> Неопределено;
	
КонецФункции

// Устанавливает значение свойства объекта XDTO.
//
Процедура УстановитьЗначениеСвойстваXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, ТекстОшибки, Глубина = Неопределено)
	
	Попытка
		Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяСвойства].Добавить(ЗначениеСвойства);
		Иначе
			ОбъектXDTO[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	Исключение
		ЧтениеXML = Новый Структура;
		ЧтениеXML.Вставить("Имя"                , ИмяСвойства);
		ЧтениеXML.Вставить("ЛокальноеИмя"       , ИмяСвойства);
		ЧтениеXML.Вставить("Значение"           , ЗначениеСвойства);
		ЧтениеXML.Вставить("ТипУзла"            , ТипУзлаXML.КонецЭлемента);
		ЧтениеXML.Вставить("URIПространстваИмен", ОбъектXDTO.Тип().URIПространстваИмен);
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПредставлениеОшибкиXDTO(ТекстОшибки, ЧтениеXML, Глубина);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает пользовательское представление ошибки при чтении/записи xml-файла.
//
Функция ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, Глубина = Неопределено)
	
	Если СтрНайти(ПредставлениеОшибки, НСтр("ru = 'Ошибка проверки данных XDTO'")) = 0 Тогда
		Возврат ПредставлениеОшибки;
	КонецЕсли;
	
	ЗначениеПоля = ЧтениеXML.Значение;
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	ТаблицаПредставлений = ПредставленияПолейЕГАИС();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПространствоИмен", ЧтениеXML.URIПространстваИмен);
	Отбор.Вставить("ЛокальноеИмя", ЧтениеXML.ЛокальноеИмя);
	
	МассивСтрок = ТаблицаПредставлений.НайтиСтроки(Отбор);
	
	СтрокаТаблицы = Неопределено;
	Если МассивСтрок.Количество() = 1 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	ИначеЕсли МассивСтрок.Количество() > 1 И НЕ Глубина = Неопределено Тогда
		Отбор.Вставить("Глубина", Глубина);
		МассивСтрокПоГлубине = ТаблицаПредставлений.НайтиСтроки(Отбор);
		Если МассивСтрокПоГлубине.Количество() = 1 Тогда
			СтрокаТаблицы = МассивСтрокПоГлубине[0];
		Иначе
			СтрокаТаблицы = МассивСтрок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ПредставлениеОшибки = НСтр("ru = 'Не заполнено значение поля ""%1"" (%2)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			Иначе
				ПредставлениеОшибки = НСтр("ru = 'Некорректное значение ""%1"" поля ""%2"" (%3)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ЗначениеПоля, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			КонецЕсли;
		Иначе
			ИндексСтроки = ТаблицаПредставлений.Индекс(СтрокаТаблицы);
			
			Пока ИндексСтроки > 0 Цикл
				ПредыдущееПоле = ТаблицаПредставлений[ИндексСтроки - 1];
				Если ПредыдущееПоле.ПространствоИмен <> СтрокаТаблицы.ПространствоИмен
					ИЛИ ПредыдущееПоле.Глубина <> СтрокаТаблицы.Глубина Тогда
					Прервать;
				КонецЕсли;
				Если ПредыдущееПоле.Обязательное Тогда
					ПредставлениеОшибки = НСтр("ru = 'Отсутствует обязательное поле ""%1"" (%2)'");
					ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ПредыдущееПоле.Представление, ПредыдущееПоле.ЛокальноеИмя);
					Прервать;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

// Возвращает корневое пространство имен для документов ЕГАИС.
//
Функция КорневоеПространствоИмен()
	
	Возврат "http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01";
	
КонецФункции

// Возвращает все пространства зависимые пространства имен из коллекции пакетов.
//
Функция ЗависимыеПространстваИмен(ЗависимыеПакеты, Результат)
	
	Для Каждого ПакетXDTO Из ЗависимыеПакеты Цикл
		Если Результат.Найти(ПакетXDTO.URIПространстваИмен) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ПакетXDTO.URIПространстваИмен);
		
		ЗависимыеПространстваИмен(ПакетXDTO.Зависимости, Результат);
	КонецЦикла;
	
КонецФункции

// Функция возвращает таблицу значений представлений полей файла обмена с УТМ.
//
Функция ПредставленияПолейЕГАИС()
	
	ТаблицаПредставлений = Новый ТаблицаЗначений;
	
	Макет = ПолучитьОбщийМакет("ПредставленияПолейЕГАИС");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	ИменаКолонок = СтрЗаменить(ЧтениеXML.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	КоличествоКолонок = СтрЧислоСтрок(ИменаКолонок);
	
	Для Сч = 1 По КоличествоКолонок Цикл
		ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
		
		Если ИмяКолонки = "Глубина" Тогда
			ТаблицаПредставлений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"));
		ИначеЕсли ИмяКолонки = "Обязательное" Тогда
			ТаблицаПредставлений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
		Иначе
			ТаблицаПредставлений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаПредставлений.Добавить();
		Для Сч = 1 По КоличествоКолонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			
			Если ИмяКолонки = "Глубина" Тогда
				новСтр[Сч-1] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут(ИмяКолонки));
			ИначеЕсли ИмяКолонки = "Обязательное" Тогда
				новСтр[Сч-1] = Булево(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут(ИмяКолонки)));
			Иначе
				новСтр[Сч-1] = ЧтениеXML.ПолучитьАтрибут(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПредставлений.Сортировать(ТаблицаПредставлений.Колонки[0].Имя + " Возр");
	
	Возврат ТаблицаПредставлений;
	
КонецФункции

// Формирует уникальный идентификатор для нового элемента справочника.
//
// Параметры:
//  Источник - СправочникОбъект - записываемый элемент справочника,
//  Отказ - Булево - признак отказа от записи.
//
Процедура СформироватьИдентификаторОбъектаРИБПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСправочника = Источник.Метаданные().Имя;
	
	Если Источник.ЭтоНовый() Тогда
		НовыйИдентификатор = Неопределено;
		
		Если ИмяСправочника = "СправкиАЕГАИС"
			ИЛИ ИмяСправочника = "СправкиБЕГАИС" Тогда
			Если ЗначениеЗаполнено(Источник.РегистрационныйНомер) Тогда
				НовыйИдентификатор = СформироватьУникальныйИдентификатор(Источник.РегистрационныйНомер, ИмяСправочника);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				НовыйИдентификатор = СформироватьУникальныйИдентификатор(Источник.Код, ИмяСправочника);
			КонецЕсли;
		КонецЕсли;
		
		Если НовыйИдентификатор <> Неопределено Тогда
			НоваяСсылка = Справочники[ИмяСправочника].ПолучитьСсылку(НовыйИдентификатор);
			Источник.УстановитьСсылкуНового(НоваяСсылка);
		КонецЕсли;
	Иначе
		Если ИмяСправочника = "СправкиАЕГАИС"
			ИЛИ ИмяСправочника = "СправкиБЕГАИС" Тогда
			ИмяРеквизита = "РегистрационныйНомер";
		Иначе
			ИмяРеквизита = "Код";
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, ИмяРеквизита);
		
		ПредыдущийКод = Реквизиты[ИмяРеквизита];
		Если ПредыдущийКод <> Источник[ИмяРеквизита] Тогда
			Отказ = Истина;
			СтрокаСообщения = НСтр("ru = 'Изменение реквизита %1 для существующих элементов запрещено.'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", "'" + ИнтеграцияЕГАИСКлиентСервер.Синоним(ИмяРеквизита) + "'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения,
				Источник,
				ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует уникальный идентификатор из переданной строки добавлением лидирующих нулей.
//
Функция СформироватьУникальныйИдентификатор(ИсходнаяСтрока, ИмяСправочника)
	
	Префиксы = Новый Соответствие;
	Префиксы.Вставить("КлассификаторАлкогольнойПродукцииЕГАИС", "00");
	Префиксы.Вставить("КлассификаторОрганизацийЕГАИС"         , "01");
	Префиксы.Вставить("СправкиАЕГАИС"                         , "02");
	Префиксы.Вставить("СправкиБЕГАИС"                         , "03");
	Префиксы.Вставить(СправочникВидовАлкогольнойПродукции()   , "04");
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Префиксы[ИмяСправочника] + ИсходнаяСтрока);
	
	ХешСумма = Строка(ХешированиеДанных.ХешСумма);
	
	Строка32 = "";
	Для Сч = 1 По СтрДлина(ХешСумма) Цикл
		ТекСимвол = Сред(ХешСумма, Сч, 1);
		Если Найти("0123456789abcdef", НРег(ТекСимвол)) <> 0 Тогда
			Строка32 = Строка32 + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Строка32) < 32 Тогда
		Строка32 = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка32, 32, "0");
	КонецЕсли;
	
	СтрокаGUID = Лев(Строка32, 8)
		+ "-" + Сред(Строка32, 9, 4)
		+ "-" + Сред(Строка32, 13, 4)
		+ "-" + Сред(Строка32, 17, 4)
		+ "-" + Сред(Строка32, 21, 12);
	
	НовыйИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID);
	
	Возврат НовыйИдентификатор;
	
КонецФункции

// Записывает переданный объект в базу данных.
//
Функция ЗаписатьОбъект(Объект, ТекстОшибки, РежимЗаписи = Неопределено)
	
	Объект.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзЕГАИС", Истина);
	
	Попытка
		Если НЕ РежимЗаписи = Неопределено Тогда
			Объект.Записать(РежимЗаписи);
		Иначе
			Объект.Записать();
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка записи %1.'");
		
		ПредставлениеОбъекта = "";
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			ПредставлениеОбъекта = ПредставлениеОбъекта + НСтр("ru = 'документа'");
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			ПредставлениеОбъекта = ПредставлениеОбъекта + НСтр("ru = 'элемента справочника'");
		КонецЕсли;
		
		ПредставлениеОбъекта = ПредставлениеОбъекта + " '" + Объект.Метаданные().Представление() + "'";
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ПредставлениеОбъекта);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти