
#Область ПрограммныйИнтерфейс

// Возвращает структуру, необходимую для формирования исходящего запроса в УТМ.
//
// Параметры:
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид исходящего документа.
//
// Возвращаемое значение:
//   Структура - параметры исходящего запроса.
//
Функция ПараметрыИсходящегоЗапроса(ВидДокумента) Экспорт
	
	Если ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОрганизаций") Тогда
		
		Возврат ПараметрыЗапросаКлассификатора();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиА")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиБ") Тогда
		
		Возврат ПараметрыЗапросаСправки();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросТТН") Тогда
		
		Возврат ПараметрыЗапросаТТН();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена") Тогда
		
		Возврат ПараметрыВыгрузкиИнформацииОФорматеОбмена();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПодтвержденияТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктРасхожденийТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБаланс")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВТорговомЗале")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктСписания")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатков")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН") Тогда
		
		Возврат ПараметрыВыгрузкиДокумента();
		
	Иначе 
		ВызватьИсключение НСтр("ru = 'Для переданного вида документа параметры не предусмотрены.'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру, необходимую для записи справки А.
//
Функция СтруктураДанныхСправкиА() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомер"   , "");
	Результат.Вставить("Наименование"           , "");
	Результат.Вставить("НомерТТН"               , Неопределено);
	Результат.Вставить("ДатаТТН"                , Неопределено);
	Результат.Вставить("Грузоотправитель"       , Неопределено);
	Результат.Вставить("Грузополучатель"        , Неопределено);
	Результат.Вставить("ДатаОтгрузки"           , Неопределено);
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено);
	Результат.Вставить("ДатаРозлива"            , Неопределено);
	Результат.Вставить("Количество"             , Неопределено);
	Результат.Вставить("НомерПодтвержденияЕГАИС", Неопределено);
	Результат.Вставить("ДатаПодтвержденияЕГАИС" , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для записи справки Б.
//
Функция СтруктураДанныхСправкиБ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомер"   , "");
	Результат.Вставить("Наименование"           , "");
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено);
	Результат.Вставить("Количество"             , Неопределено);
	Результат.Вставить("НомерСправкиА"          , "");
	Результат.Вставить("СправкаА"               , Неопределено);
	Результат.Вставить("ДокументОснование"      , Неопределено);
	Результат.Вставить("НомерПодтвержденияЕГАИС", Неопределено);
	Результат.Вставить("ДатаПодтвержденияЕГАИС" , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для загрузки ТТН.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Структура - структура данных ТТН.
//
Функция СтруктураДанныхТТН() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор"     , "");           // Идентификатор накладной (клиентский, к заполнению необязательный).
	Результат.Вставить("ИдентификаторЕГАИС", "");           // Идентификатор накладной в системе (присвоенный). Заполняется при фиксации ТТН в ЕГАИС.
	Результат.Вставить("ВидОперации"       , Неопределено); // Значение перечисления ВидыОперацийТТНВходящейЕГАИС, ВидыОперацийТТНИсходящейЕГАИС.
	Результат.Вставить("Упакована"         , Истина);       // Признак упаковки товаров ТТН.
	Результат.Вставить("НомерТТН"          , "");           // Номер документа.
	Результат.Вставить("ДатаТТН"           , '00010101');   // Дата составления документа.
	Результат.Вставить("ДатаОтгрузки"      , '00010101');   // Дата отгрузки продукции.
	Результат.Вставить("Грузоотправитель"  , Неопределено); // Элемент справочника КлассификаторОрганизацийЕГАИС.
	Результат.Вставить("Грузополучатель"   , Неопределено); // Элемент справочника КлассификаторОрганизацийЕГАИС.
	Результат.Вставить("Поставщик"         , Неопределено); // Элемент справочника КлассификаторОрганизацийЕГАИС.
	Результат.Вставить("Основание"         , Неопределено); // Основание накладной.
	Результат.Вставить("Комментарий"       , Неопределено); // Комментарий к накладной.
	Результат.Вставить("ТаблицаТоваров"    , Новый Массив); // Массив строк ТТН.
	
	// Параметры доставки
	Результат.Вставить("ТипДоставки"       , Неопределено); // Тип перевозки.
	Результат.Вставить("Перевозчик"        , Неопределено); // Название компании перевозчика.
	Результат.Вставить("Автомобиль"        , Неопределено); // Название транспортного средства.
	Результат.Вставить("Прицеп"            , Неопределено); // Прицеп транспортного средства.
	Результат.Вставить("Заказчик"          , Неопределено); // Название компании заказчика.
	Результат.Вставить("Водитель"          , Неопределено); // Водитель.
	Результат.Вставить("ПунктПогрузки"     , Неопределено); // Место погрузки.
	Результат.Вставить("ПунктРазгрузки"    , Неопределено); // Место разгрузки.
	Результат.Вставить("Перенаправление"   , Неопределено); // Перенаправление.
	Результат.Вставить("Экспедитор"        , Неопределено); // Экспедитор.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки акта подтверждения ТТН в УТМ.
//
Функция СтруктураДанныхАктаПодтвержденияТТН() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор"     , "");           // Идентификатор документа (клиентский, к заполнению необязательный).
	Результат.Вставить("Отказ"             , Ложь);         // Признак отказа от ТТН.
	Результат.Вставить("Номер"             , "");           // Номер акта подтверждения. Если не указан, будет взят номер из ТТН.
	Результат.Вставить("ИдентификаторЕГАИС", "");           // Идентификатор ТТН в системе ЕГАИС.
	Результат.Вставить("Комментарий"       , "");           // Произвольный комментарий к акту.
	Результат.Вставить("ТаблицаТоваров"    , Новый Массив); // Массив строк с фактическим количеством. Используется для акта расхождений.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки запроса на отмену проведения документа.
//
Функция СтруктураДанныхЗапросаНаОтменуПроведения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФСРАР", "");         // Код организации в ФСРАР.
	Результат.Вставить("Номер"             , "");         // Номер запроса на отмену проведения.
	Результат.Вставить("Дата"              , '00010101'); // Дата запроса на отмену проведения.
	Результат.Вставить("ИдентификаторЕГАИС", "");         // Идентификатор документа в системе ЕГАИС.
	
	Возврат Результат;
	
КонецФункции

// Загружает новые документы, полученные из УТМ.
//
Функция ЗагрузитьМассивДокументов(ТранспортныйМодуль, МассивДокументов, ОтображатьСообщения, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатЗагрузкиВходящихДокументов();
	
	ЗагруженныеДокументы = ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы(ТранспортныйМодуль, МассивДокументов, ДополнительныеПараметры);
	
	ВидыЗагруженныхДокументов = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ЗагруженныеДокументы Цикл
		РезультатОбработкиДокумента = КлючЗначение.Значение;
		
		Если НЕ РезультатОбработкиДокумента.Результат Тогда
			Результат.ДокументыСОшибками.Добавить(Новый Структура("АдресДокумента, ОписаниеОшибки", КлючЗначение.Ключ, РезультатОбработкиДокумента.ОписаниеОшибки));
			Если ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиДокумента.ОписаниеОшибки);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(РезультатОбработкиДокумента.ВидДокумента) Тогда
				Если ВидыЗагруженныхДокументов[РезультатОбработкиДокумента.ВидДокумента] = Неопределено Тогда
					ВидыЗагруженныхДокументов.Вставить(РезультатОбработкиДокумента.ВидДокумента, 0);
				КонецЕсли;
				ВидыЗагруженныхДокументов[РезультатОбработкиДокумента.ВидДокумента] = ВидыЗагруженныхДокументов[РезультатОбработкиДокумента.ВидДокумента] + 1;
			КонецЕсли;
			
			Результат.ЗагруженныеДокументы.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗагруженныхДокументов = "";
	Для Каждого КлючЗначение Из ВидыЗагруженныхДокументов Цикл
		ТекстЗагруженныхДокументов = ТекстЗагруженныхДокументов + Символы.ПС;
		ТекстЗагруженныхДокументов = ТекстЗагруженныхДокументов + Строка(КлючЗначение.Ключ) + ": " + Формат(КлючЗначение.Значение, "ЧГ=0");
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗагруженныхДокументов) Тогда
		Результат.ЗагруженоДокументов = ТекстЗагруженныхДокументов;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

#Если НЕ ВебКлиент Тогда

// Формирует HTTP-запрос в УТМ ЕГАИС.
//
Функция СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса) Экспорт

	Результат = РезультатВыполненияHTTPЗапроса();
	
	HTTPЗапрос = Новый HTTPЗапрос(ДанныеЗапроса.АдресЗапроса, ДанныеЗапроса.Заголовки);
	
	Если НЕ ПустаяСтрока(ДанныеЗапроса.ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеЗапроса.ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");
	
	#Если Клиент Тогда
		Состояние(НСтр("ru = 'Обращение к транспортному модулю ЕГАИС...'"));
	#КонецЕсли
	
	Попытка
		Соединение = Новый HTTPСоединение(СокрЛП(ТранспортныйМодуль.АдресУТМ), ТранспортныйМодуль.ПортУТМ,,, ИнтернетПрокси, 60);
		Если ДанныеЗапроса.ТипЗапроса = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ДанныеЗапроса.ТипЗапроса = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ДанныеЗапроса.ТипЗапроса = "DELETE" Тогда
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		КонецЕсли;
	Исключение
		Результат.Результат = Ложь;
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		#Если НЕ ТонкийКлиент Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка формирования запроса в УТМ по адресу %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ДанныеЗапроса.АдресЗапроса);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
									УровеньЖурналаРегистрации.Ошибка,,,
									ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
		Возврат Результат;
	КонецПопытки;
	
	Результат = ПрочитатьОтветМодуляЕГАИС(HTTPОтвет.КодСостояния, HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8), ДанныеЗапроса.ТипЗапроса = "POST");
	
	Если НЕ Результат.Результат Тогда
		#Если НЕ ТонкийКлиент Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка при выполнении %1-запроса по адресу %2'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ДанныеЗапроса.ТипЗапроса);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", ДанныеЗапроса.АдресЗапроса);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
									УровеньЖурналаРегистрации.Ошибка,,,
									ТекстОшибки + Символы.ПС + Результат.ОписаниеОшибки);
		#КонецЕсли
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Разбирает ответ, полученный из УТМ.
//
Функция ПрочитатьОтветМодуляЕГАИС(КодСостояния, ОтветМодуляЕГАИС, РазбиратьОтвет) Экспорт
	
	Результат = РезультатВыполненияHTTPЗапроса();
	Результат.ОтветМодуляЕГАИС = ОтветМодуляЕГАИС;
	
	Если КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Нет связи с УТМ.'");
	Иначе
		Если КодСостояния <> 200 Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Сервер отклонил запрос:'");
		КонецЕсли;
		
		Если РазбиратьОтвет Тогда
			Попытка
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
				
				ПостроительDOM = Новый ПостроительDOM;
				ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
				
				УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("*");
				
				Для Каждого УзелURL Из УзлыURL Цикл
					Если УзелURL.ИмяУзла = "url" Тогда
						Результат.ИдентификаторЗапроса = УзелURL.ТекстовоеСодержимое;
					ИначеЕсли УзелURL.ИмяУзла = "sign" Тогда
						Результат.Подпись = УзелURL.ТекстовоеСодержимое;
					ИначеЕсли УзелURL.ИмяУзла = "error" Тогда
						Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС + УзелURL.ТекстовоеСодержимое;
					КонецЕсли;
				КонецЦикла;
				
				ЧтениеXML.Закрыть();
			Исключение
				Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС + ОтветМодуляЕГАИС;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// Разбирает список входящих документов и подготавливает список URL-адресов документов к загрузке.
//
Функция ПодготовитьСписокURLДокументовКЗагрузке(ОтветМодуляЕГАИС) Экспорт
	
	ФильтрURL = "/WAYBILL/,/WAYBILL_V2/,/FORMBREGINFO/,/FORM2REGINFO/,/WAYBILLACT/,/WAYBILLACT_V2/,/WAYBILLTICKET/";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Результат = Новый Массив;
	
	Для Каждого УзелURL Из УзлыURL Цикл
		
		Если УзелURL.Атрибуты.ПолучитьИменованныйЭлемент("replyId") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокФильтров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФильтрURL, ",", Истина);
		
		ЗагрузкаДокумента = Ложь;
		Для Каждого Фильтр Из СписокФильтров Цикл
			Если Найти(ВРег(УзелURL.ТекстовоеСодержимое), ВРег(СокрЛП(Фильтр))) <> 0 Тогда
				ЗагрузкаДокумента = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗагрузкаДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Новый Структура("ИдентификаторЗапроса, АдресURL", "", УзелURL.ТекстовоеСодержимое));
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

// Возвращает структуру, необходимую для запроса классификатора.
//
Функция ПараметрыЗапросаКлассификатора()

	Результат = Новый Структура;
	Результат.Вставить("ИНН", "");
	
	Возврат Результат;

КонецФункции

// Возвращает структуру, необходимую для запроса справок А и Б.
//
Функция ПараметрыЗапросаСправки()

	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомер", "");
	
	Возврат Результат;

КонецФункции

// Возвращает структуру, необходимую для запроса ТТН.
//
Функция ПараметрыЗапросаТТН()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЕГАИС", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки документа.
//
Функция ПараметрыВыгрузкиДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ДокументСсылка", Неопределено); // Ссылка на выгружаемый документ.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки информации о формате обмена УТМ.
//
Функция ПараметрыВыгрузкиИнформацииОФорматеОбмена()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФСРАР", "");     // Код организации в ФСРАР.
	Результат.Вставить("ФорматОбмена", Неопределено); // Используемый формат обмена.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для записи информации об одной сессии обмена с УТМ.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Структура - параметры сессии.
// 
Функция ПараметрыСессииОбмена() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипЗапроса"          , Неопределено);
	Результат.Вставить("ВидДокумента"        , Неопределено);
	Результат.Вставить("ПолученОтказ"        , Ложь);
	Результат.Вставить("ИдентификаторЗапроса", "");
	Результат.Вставить("ДокументОснование"   , Неопределено);
	Результат.Вставить("Комментарий"         , "");
	Результат.Вставить("ФайлОбмена"          , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает соответствие между исходящим запросом и полученным ответом.
//
Процедура УстановитьСоответствиеЗапросов(СоответствиеЗапросов, ОтветМодуляЕГАИС, ПолеАдреса) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Для Каждого УзелURL Из УзлыURL Цикл
		
		АтрибутDOM = УзелURL.Атрибуты.ПолучитьИменованныйЭлемент("replyId");
		
		Если АтрибутDOM = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СоответствиеЗапросов[АтрибутDOM.Значение] = Неопределено Тогда
			СоответствиеЗапросов.Вставить(АтрибутDOM.Значение, Новый Структура("АдресЗапроса, АдресаОтветов", "", Новый Массив));
		КонецЕсли;
		
		Если ПолеАдреса = "АдресЗапроса" Тогда
			СоответствиеЗапросов[АтрибутDOM.Значение][ПолеАдреса] = УзелURL.ТекстовоеСодержимое;
		Иначе
			СоответствиеЗапросов[АтрибутDOM.Значение][ПолеАдреса].Добавить(УзелURL.ТекстовоеСодержимое);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Возвращает структуру выполнения операции к транспортному модулю ЕГАИС.
//
Функция РезультатВыполненияHTTPЗапроса() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Результат"           , Ложь);
	Результат.Вставить("ОписаниеОшибки"      , "");
	Результат.Вставить("ОтветМодуляЕГАИС"    , "");
	Результат.Вставить("ИдентификаторЗапроса", "");
	Результат.Вставить("Подпись"             , "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для отправки запроса в УТМ.
//
Функция СтруктураДанныхHTTPЗапроса(ТипЗапроса = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипЗапроса"  , ТипЗапроса);
	Результат.Вставить("АдресЗапроса", "");
	Результат.Вставить("ТелоЗапроса" , "");
	Результат.Вставить("ТекстXML"    , "");
	Результат.Вставить("Заголовки"   , Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру результата обработки входящих документов.
//
Функция РезультатЗагрузкиВходящихДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"           , Ложь);
	Результат.Вставить("ОписаниеОшибки"      , "");
	Результат.Вставить("ЗагруженоДокументов" , "0");
	Результат.Вставить("ДокументыСОшибками"  , Новый Массив);
	Результат.Вставить("ЗагруженныеДокументы", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру обработки входящего документов.
//
Функция СтруктураЗагрузкиВходящегоДокумента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗапроса", Неопределено); // Заполняется, если получен ответ на исходящий запрос.
	Результат.Вставить("АдресЗапроса"        , Неопределено); // URL-адрес документа в УТМ.
	Результат.Вставить("ТекстXML"            , Неопределено); // Текст XML входящего документа.
	
	Возврат Результат;
	
КонецФункции

// Формирует синоним по переданному имени.
//
// Параметры:
//  Имя  - Строка - имя элемента или объекта.
//
// Возвращаемое значение:
//   Строка - синоним, сформированный из имени.
//
Функция Синоним(Имя) Экспорт

	Наименование = "";
	ТекСимвол = "";
	
	Для Сч = 1 По СтрДлина(Имя) Цикл
		
		Если НРег(ТекСимвол) = ТекСимвол И ВРег(Сред(Имя, Сч, 1)) = Сред(Имя, Сч, 1) И Найти("0123456789", Сред(Имя, Сч, 1)) = 0 И НЕ ПустаяСтрока(ТекСимвол) Тогда
			Наименование = Наименование + " ";
			
			Если Сч + 1 <= СтрДлина(Имя) Тогда
				Если ВРег(Сред(Имя, Сч + 1, 1)) = Сред(Имя, Сч + 1, 1) Тогда
					Наименование = Наименование + Сред(Имя, Сч, 1);
				Иначе
					Наименование = Наименование + НРег(Сред(Имя, Сч, 1));
				КонецЕсли;
			Иначе
				Наименование = Наименование + Сред(Имя, Сч, 1);
			КонецЕсли;
			
		Иначе
			Наименование = Наименование + Сред(Имя, Сч, 1);
		КонецЕсли;
		
		ТекСимвол = Сред(Имя, Сч, 1);
	
	КонецЦикла;
	
	Возврат Наименование;

КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	
	Версия1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ТекстСообщения = НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаВерсии1);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
		
	Версия2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ТекстСообщения = НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаВерсии2);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущую версию подсистемы ЕГАИС
//
Функция ВерсияПодсистемыЕГАИС() Экспорт
	
	Возврат "1.2.1.5";
	
КонецФункции

#КонецОбласти