
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с обсуждениями
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//Формирует Массив структур, содержащий имена и описания пользователей для использования в тексте обсуждений.
// 
// Параметры: Нет
//
// Возвращаемое значение:
//  Массив           - по числу пользователей: 
//   * Пользователь  - эл. справочника Пользователи
//   * Представление - Строка - Наименование пользователя,
//   * Имя 			 - Строка - Наименование пользователя сплошной строкой с нижним подчеркиванием, по типу "Фамилия_Имя";
//   * ДляПоиска 	 - Строка - Наименование пользователя сплошной строкой с нижним подчеркиванием, по типу "Фамилия_Имя",
//	 				   в нижнем регистре
Функция МассивОписанийПользователей() Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОписания = Новый Структура;
		СтруктураОписания.Вставить("Пользователь", Выборка.Пользователь);
		СтруктураОписания.Вставить("Представление", Выборка.Представление);
		СтруктураОписания.Вставить("Имя", СтрЗаменить(Выборка.Представление, " ", "_"));
		СтруктураОписания.Вставить("ДляПоиска", НРег(СтруктураОписания.Имя));
		Результат.Добавить(СтруктураОписания);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Функция СловарьОписанийПользователей() Экспорт
Функция СловарьОписанийПользователей() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОписания = Новый Структура;
		СтруктураОписания.Вставить("Имя", СтрЗаменить(Выборка.Представление, " ", "_"));
		
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.Представление);
		номерСловаФИО = 1;
		Для каждого элементФИО Из СтруктураФИО Цикл
			СтруктураОписания.Вставить("ФИО"+номерСловаФИО, элементФИО.Значение);
			номерСловаФИО = номерСловаФИО + 1;
		КонецЦикла;
		
		Для н=1 По 10 Цикл // 10 первых букв слова ФИО для поиска
			Для номерСловаФИО=1 По 3 Цикл //3 части Представления - отдельные слова ФИО Представления пользователя 
				СловоПоиска = Лев(СтруктураОписания["ФИО"+номерСловаФИО],н);
				СловоПоиска = НРег(СловоПоиска);
				МассивПользователей = Результат.Получить(СловоПоиска);
				Если МассивПользователей = Неопределено Тогда
					МассивПользователей = Новый Массив;
					МассивПользователей.Добавить(СтруктураОписания.Имя);
					Результат.Вставить(СловоПоиска, МассивПользователей);
				ИначеЕсли МассивПользователей.Найти(СтруктураОписания.Имя)=Неопределено Тогда
					МассивПользователей.Добавить(СтруктураОписания.Имя);
					Результат.Вставить(СловоПоиска, МассивПользователей);
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует содержимое поля HTML документа, которое отображает обсуждения
// 
// Параметры: 
//  Объект		     - любая ссылка - объект, по которому выводятся данные обсуждений 
//  ЗаПериод		 - Булево - регулирует ограничение показываемых записей. Если ЗаПериод=Истина И
//						число записей обсуждений больше 15, то показываются записи за последние 14 дней
//						от текущей даты
// Возвращаемое значение:
//  Результат        - Строка - содержимое поля HTML документа 
//
Функция ОбсужденияПоОбъекту(Объект, ЗаПериод=Ложь) Экспорт
	
	Результат = 
	"<HTML>
	|<STYLE type=text/css>
    |BODY {
	|	/* Шрифты */ FONT-FAMILY: sans-serif; FONT-SIZE:12px;
    |}
	|</STYLE>
	|<BODY>
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обсуждения.МоментВремени КАК МоментВремени,
	|	Обсуждения.Комментарий,
	|	Обсуждения.Системный,
	|	Обсуждения.Пользователь
	|ИЗ
	|	РегистрСведений.Обсуждения КАК Обсуждения
	|ГДЕ
	|	Обсуждения.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	//Если больше 15 записей и используем ограничение по периоду, 
	//то показываем данные за последние 2 недели (14 дней)
	Если ЗаПериод = Истина И Выборка.Количество()>15 Тогда
		ЧислоДнейОграничения = 14;
		ДатаОграничения = ТекущаяДата()-3600*24*ЧислоДнейОграничения;
	Иначе
		ДатаОграничения = Дата("00010101");
	КонецЕсли;
	
	ПредВремя = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если Выборка.МоментВремени<ДатаОграничения Тогда
			
			Результат = Результат+СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<DIV STYLE=""DISPLAY: BLOCK; WIDTH: 100%; MARGIN-BOTTOM: 5px; %1"">
			|<DIV STYLE=""WIDTH: 9em; FLOAT: LEFT; COLOR: gray;"">%2</DIV>
			|<DIV STYLE=""WIDTH: 12em; FLOAT: LEFT; COLOR: gray;"">%3</DIV>
			|<DIV STYLE=""MARGIN-LEFT: 21em;"">%4</DIV>
			|</DIV><BR>'"),
			?(Выборка.Системный, "COLOR: gray;", ""),
			"",
			"",
			"<A HREF='ПоказатьВсе'>Показать все</A>");

			Результат = Результат+Символы.ПС;
			
			Прервать;
		КонецЕсли;
		
		ТекстКомментария = СтрЗаменить(Выборка.Комментарий, Символы.ПС, "<BR>");
		ОбновитьПредставлениеОбъектаВНавигационнойСсылке(ТекстКомментария);

		Если НачалоДня(ТекущаяДатаСеанса())=НачалоДня(Выборка.МоментВремени) Тогда
			МоментВремениСтрокой = НСтр("ru = 'Сегодня в '")+Формат(Выборка.МоментВремени, НСтр("ru = 'ДФ=ЧЧ:мм'"));
		ИначеЕсли НачалоДня(НачалоДня(ТекущаяДатаСеанса())-1)=НачалоДня(Выборка.МоментВремени) Тогда
			МоментВремениСтрокой = НСтр("ru = 'Вчера в '")+Формат(Выборка.МоментВремени, НСтр("ru = 'ДФ=ЧЧ:мм'"));
		ИначеЕсли Год(Выборка.МоментВремени)<>Год(ТекущаяДатаСеанса()) Тогда 
			МоментВремениСтрокой = Формат(Выборка.МоментВремени, НСтр("ru = 'ДФ=''дд МММ гггг ЧЧ:мм'''"))
		Иначе
			МоментВремениСтрокой = Формат(Выборка.МоментВремени, НСтр("ru = 'ДФ=''дд МММ ЧЧ:мм'''"))
		КонецЕсли; 
		Результат = Результат+СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '<DIV STYLE=""DISPLAY: BLOCK; WIDTH: 100%; MARGIN-BOTTOM: 5px; %1"">
		|<DIV STYLE=""WIDTH: 9em; FLOAT: LEFT; COLOR: gray;"">%2</DIV>
		|<DIV STYLE=""WIDTH: 12em; FLOAT: LEFT; COLOR: gray;"">%3</DIV>
		|<DIV STYLE=""MARGIN-LEFT: 21em;"">%4</DIV>
		|</DIV><BR>'"),
		?(Выборка.Системный, "COLOR: gray;", ""),
		МоментВремениСтрокой,
		HTMLСсылка(Выборка.Пользователь),
		ТекстКомментария);
		Результат = Результат+Символы.ПС;
		ПредВремя = НачалоМинуты(Выборка.МоментВремени);
	КонецЦикла;
	Результат = Результат+"</BODY></HTML>";
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьПредставлениеОбъектаВНавигационнойСсылке(ТекстКомментария)
	
	Текст = ТекстКомментария;
	
	НачалоСсылки = СтрНайти(Текст, "<A HREF='");
	Пока НачалоСсылки>0 Цикл
		КонецСсылки = СтрНайти(Текст, "'>");
		КонецОбъекта= СтрНайти(Текст, "</A>");
		ОписаниеОбъекта = Сред(Текст, КонецСсылки+2, КонецОбъекта-КонецСсылки-2);
		
		ДлинаСсылки = КонецСсылки - НачалоСсылки;
		НС = Сред(Текст, НачалоСсылки+9, ДлинаСсылки-9);
		Если СокрЛП(НС)="" Тогда
			//Перечисления
			СсылкаОбъекта = ОписаниеОбъекта;
		Иначе
			СсылкаОбъекта = ПолучитьСсылкуИзНавигационной(НС);
		КонецЕсли;
	
		ТекстКомментария = СтрЗаменить(ТекстКомментария, 
				ОписаниеОбъекта,
				Строка(СсылкаОбъекта)
				);
		Текст = Сред(Текст, КонецОбъекта+4, СтрДлина(Текст));
		НачалоСсылки = СтрНайти(Текст, "<A HREF='");
	КонецЦикла; 
	
КонецПроцедуры	

// Добавляет запись обсуждения в регистр сведений Обсуждения для Ссылки, а также для упомянутых (по навигационным ссылкам) в тексте комментария объектов,
// формирует напоминания пользователям, упомянутым в тексте комментария
// Параметры:
//  Комментарий			   Строка 		- текст сообщения
//  Ссылка				   Любая ссылка - ссылка на объект обсуждения
//  МоментВремени          Дата и время - время сохранения сообщения
//  Системный			   Булево 		- Истина для сохранения изменений объекта, Ложь для сохранения комментариев к объекту
//  Пользователь		   Справочник Пользователи - Пользователь, сохраняющий комментарий
//
Процедура ДобавитьСообщение(
	Комментарий, 
	Ссылка, 
	МоментВремени = Неопределено, 
	Системный = Ложь, 
	Пользователь = Неопределено) Экспорт
	
	Если ПустаяСтрока(Комментарий) ИЛИ НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательДляЗаписи	= ?(НЕ ЗначениеЗаполнено(Пользователь), Пользователи.АвторизованныйПользователь(), Пользователь);
	
	ПользователиРассылки= Новый Массив;
	//Заменяем в тексте сообщения навигационные ссылки на HTML-ссылки
	Если НЕ Системный Тогда
		
		ЗаменитьТехническиеСимволы(Комментарий);
		
		МассивСсылокУпоминаний = ПреобразоватьНавигационныеСсылки(Комментарий);
		
		//Записать упоминания других объектов в сообщении, если есть
		Для каждого СсылкаУпоминание Из МассивСсылокУпоминаний Цикл
			КомментарийУпоминание = НСтр("ru = 'Упоминание в: '")+HTMLСсылка(Ссылка);
			ЗаписатьДанные(КомментарийУпоминание, СсылкаУпоминание, МоментВремени, Системный, ПользовательДляЗаписи);
		КонецЦикла;
	КонецЕсли;
	//Заменяем имена пользователей по тегу @ на HTML-ссылки пользователей
	ПреобразоватьСсылкиПользователей(Комментарий, ПользователиРассылки);
	
	//Записать основное сообщение
	ЗаписатьДанные(Комментарий, Ссылка, МоментВремени, Системный, ПользовательДляЗаписи);
	
	СформироватьНапоминанияПользователям(Ссылка, ПользовательДляЗаписи, Комментарий, ПользователиРассылки);
	
КонецПроцедуры

Процедура ЗаменитьТехническиеСимволы(Комментарий)
	
	Комментарий = СтрЗаменить(Комментарий, "<", "&lt;");
	Комментарий = СтрЗаменить(Комментарий, ">", "&gt;");
	
КонецПроцедуры

Процедура ЗаписатьДанные(Комментарий, Ссылка, МоментВремени, Системный, Пользователь)
	
	Менеджер = РегистрыСведений.Обсуждения.СоздатьМенеджерЗаписи();
	Менеджер.Объект = Ссылка;
	Менеджер.МоментВремени = ?(НЕ ЗначениеЗаполнено(МоментВремени), ТекущаяДатаСеанса(), МоментВремени);
	Менеджер.Комментарий = Комментарий;
	Менеджер.Системный = Системный;
	Менеджер.Пользователь = Пользователь;
	Менеджер.Записать(Истина);
	
КонецПроцедуры

#Область ОбработчикиСобытий

// Обновляет содержание обсуждений в форме объекта.
// 
// Параметры:
//  Форма				   - Форма объекта
//  Ссылка				   - Ссылка объекта, для которого будут обновлены обсуждения
Процедура ПослеЗаписиНаСервере(Форма, Ссылка) Экспорт
	
	Если Форма.Элементы.Обсуждение.Родитель<>Неопределено Тогда
		ГруппаОбсужденияИмя = Форма.Элементы.Обсуждение.Родитель.Имя;
		ГруппаСтраницы		= Форма.Элементы.Обсуждение.Родитель.Родитель.Имя;
		Если Форма.Элементы[ГруппаСтраницы].ТекущаяСтраница = Форма.Элементы[ГруппаОбсужденияИмя] Тогда
			Форма.Обсуждение = ОбсужденияПоОбъекту(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные об изменениях объекта по подписке на событие.
// 
// Параметры:
//  Источник			   - Ссылка объекта, для которого будут записаны данные обсуждений
//  Отказ				   - Отказ записи
//Дополнительно формируются записи: 
//		при наличии поля "Контрагент" - формируется запись в обсуждениях контрагента об упоминании в этом объекте
//		при вводе на основании - формируется запись о введенном дочернем объекте в обсуждении для родительского объекта
Процедура ОбсужденияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
	    Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповаяЗагрузкаДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Если ОбщегоНазначения.ЭтоДокумент(Источник.Метаданные()) Тогда
			Сообщение = ?(Источник.Проведен, НСтр("ru = 'Создан и проведен'"), НСтр("ru = 'Создан'"));
		Иначе
			Сообщение = НСтр("ru = 'Создан'");
		КонецЕсли; 
		
		ДобавитьСообщение(
		Сообщение, 
		Источник.Ссылка,
		, 
		Истина);
		
		ДобавитьЗаписьУпоминаниеКонтрагента(,Источник);
		ДобавитьЗаписьВводНаОсновании(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные об изменениях объекта по подписке на событие.
// 
// Параметры:
//  Источник			   - Ссылка объекта, для которого будут записаны данные обсуждений
//  Отказ				   - Отказ записи
//  РежимЗаписи			   - Режим записи объекта
//  РежимПроведения		   - Режим проведения объекта
// Если объект новый и еще не сохранен, запись обсуждений передается в процедуру ОбсужденияПриЗаписи, где уже есть ссылка объекта
//В ДополнительныеСвойства передаются параметры: 
//	Модифицированность		- модифицированность объекта в форме
Процедура ОбсужденияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
	    Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповаяЗагрузкаДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбсуждениеЗаписано") Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоДокумент(Источник.Метаданные()) Тогда
		Сообщение = ОбсужденияСравнитьОбъектыДокумент(Источник, РежимЗаписи, РежимПроведения);
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(Источник.Метаданные()) Тогда
		Сообщение = ОбсужденияСравнитьОбъектыСправочник(Источник);
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ДобавитьСообщение(
		Сообщение, 
		Источник.Ссылка,
		, 
		Истина);
	КонецЕсли; 
	
КонецПроцедуры

Функция ОбсужденияСравнитьОбъектыСправочник(НовыйОбъект)
	
	СтруктураПроверяемыхРеквизитов = РеквизитыДляПроверкиИзмененийСправочник(НовыйОбъект);
	СтарыйОбъект = ДанныеСправочникаВыборка(НовыйОбъект, СтруктураПроверяемыхРеквизитов);
	
	Сообщение = "";
	Если НЕ СтарыйОбъект.ПометкаУдаления И НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Помечен на удаление'");
	КонецЕсли; 
	
	Если СтарыйОбъект.ПометкаУдаления И НЕ НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Снята пометка на удаление'");
	КонецЕсли;
	
	ОписаниеИзменений = ОписаниеИзмененийРеквизитов(СтруктураПроверяемыхРеквизитов, СтарыйОбъект, НовыйОбъект);
	
	// ТЧ КонтактнаяИнформация
	Если НовыйОбъект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация")<>Неопределено Тогда
		СтараяТЧ = СтарыйОбъект.КонтактнаяИнформация.Выгрузить();
		НоваяТЧ = НовыйОбъект.КонтактнаяИнформация;
		
		МассивСтарыхЗначений = СтараяТЧ.ВыгрузитьКолонку("Представление");
		МассивНовыхЗначений = НоваяТЧ.ВыгрузитьКолонку("Представление");
		Текст = ОписаниеСравненияМассивов(МассивСтарыхЗначений, МассивНовыхЗначений);
		Если НЕ ПустаяСтрока(Текст) Тогда
			ОписаниеИзменений = ОписаниеИзменений+
			?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
			"Контактная информация: "+Текст;
		КонецЕсли;
	КонецЕсли; 
	
	ДобавитьЗаписьУпоминаниеКонтрагента(СтарыйОбъект, НовыйОбъект);

	Если НЕ ПустаяСтрока(ОписаниеИзменений) Тогда
		Сообщение = Сообщение+?(ПустаяСтрока(Сообщение), "", Символы.ПС)+
		ОписаниеИзменений;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция ОбсужденияСравнитьОбъектыДокумент(НовыйОбъект, РежимЗаписи, РежимПроведения)
	
	СтруктураПроверяемыхРеквизитов = РеквизитыДляПроверкиИзмененийДокумент(НовыйОбъект);
	СтарыйОбъект = ДанныеДокументаВыборка(НовыйОбъект, СтруктураПроверяемыхРеквизитов);
	
	Сообщение = "";
	ДобавитьТекстСтандартныхСообщений(Сообщение, СтарыйОбъект, НовыйОбъект, РежимЗаписи);
	
	ОбъектМодифицирован = Неопределено;
	Если НовыйОбъект.ДополнительныеСвойства.Свойство("Модифицированность") Тогда
		ОбъектМодифицирован = НовыйОбъект.ДополнительныеСвойства.Модифицированность;
		Если ОбъектМодифицирован = Ложь Тогда
			Возврат Сообщение;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеИзменений = ОписаниеИзмененийРеквизитов(СтруктураПроверяемыхРеквизитов, СтарыйОбъект, НовыйОбъект);

	МетаданныеДокумента = НовыйОбъект.Метаданные();
	
	// ТЧ ТоварыИУслуги
	Если ЕстьРеквизитОбъекта("Запасы", СтарыйОбъект) Тогда
		
		СтараяТЧ = СтарыйОбъект.Запасы.Выгрузить();
		НоваяТЧ = НовыйОбъект.Запасы;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.Найти("Всего")<>Неопределено И НЕ СтараяТЧ.Итог("Всего")=НоваяТЧ.Итог("Всего") Тогда
			ОписаниеИзменений = ОписаниеИзменений + ?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
			НСтр("ru = 'Изменена табличная часть'");
		ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.Найти("Сумма")<>Неопределено И НЕ СтараяТЧ.Итог("Сумма")=НоваяТЧ.Итог("Сумма") Тогда
			ОписаниеИзменений = ОписаниеИзменений + 
			?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
			НСтр("ru = 'Табличная часть Запасы: Сумма '")+СтараяТЧ.Итог("Сумма") + " -> " + НоваяТЧ.Итог("Сумма");
		ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.Найти("Количество")<>Неопределено И НЕ СтараяТЧ.Итог("Количество")=НоваяТЧ.Итог("Количество") Тогда
			ОписаниеИзменений = ОписаниеИзменений + 
			?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
			НСтр("ru = 'Табличная часть Запасы: Количество '")+СтараяТЧ.Итог("Количество") + " -> " + НоваяТЧ.Итог("Количество");
		КонецЕсли;
		
	КонецЕсли; 
	
	// ТЧ РасшифровкаПлатежа
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа")<>Неопределено Тогда
		
		СтараяТЧ = СтарыйОбъект.РасшифровкаПлатежа.Выгрузить();
		НоваяТЧ = НовыйОбъект.РасшифровкаПлатежа;
	
		Если НЕ СтараяТЧ.Итог("СуммаПлатежа")=НоваяТЧ.Итог("СуммаПлатежа") Тогда 
			ОписаниеИзменений = ОписаниеИзменений+
			?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
			НСтр("ru = 'Изменена табличная часть'");
		КонецЕсли;
	
	КонецЕсли;
	
	// Калькуляция
	Если МетаданныеДокумента = Метаданные.Документы.ЗаказПокупателя Тогда
		Если НЕ СтарыйОбъект.КалькуляцияРассчитана И НовыйОбъект.КалькуляцияРассчитана Тогда
			ОписаниеИзменений = ОписаниеИзменений +
			?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС) +
			НСтр("ru = 'Калькуляция заказа сформирована'");
		ИначеЕсли СтарыйОбъект.КалькуляцияРассчитана И НЕ НовыйОбъект.КалькуляцияРассчитана Тогда
			ОписаниеИзменений = ОписаниеИзменений+
			?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
			НСтр("ru = 'Калькуляция заказа не актуальна'");
		ИначеЕсли НовыйОбъект.КалькуляцияРассчитана Тогда
			СтараяТЧ = СтарыйОбъект.Калькуляция.Выгрузить();
			НоваяТЧ = НовыйОбъект.Калькуляция;
			Если СтараяТЧ.Количество()<>НоваяТЧ.Количество()
				ИЛИ СтараяТЧ.Итог("Себестоимость")<>НоваяТЧ.Итог("Себестоимость")
				ИЛИ СтараяТЧ.Итог("Количество")<>НоваяТЧ.Итог("Количество") Тогда
				ОписаниеИзменений = ОписаниеИзменений+
				?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
				НСтр("ru = 'Изменена калькуляция заказа'");
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ОписаниеИзменений = "" И ОбъектМодифицирован = Истина Тогда
		//Изменены реквизиты, не входящие в список для проверки
		ОписаниеИзменений = НСтр("ru = 'Внесены изменения'")
	КонецЕсли;
	
	ДобавитьЗаписьУпоминаниеКонтрагента(СтарыйОбъект, НовыйОбъект);
	
	Если НЕ ПустаяСтрока(ОписаниеИзменений) Тогда
		Сообщение = Сообщение+?(ПустаяСтрока(Сообщение), "", Символы.ПС)+ ОписаниеИзменений;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ДобавитьЗаписьУпоминаниеКонтрагента(СтарыйОбъект=Неопределено, НовыйОбъект)
	
	Если НЕ ЕстьРеквизитОбъекта("Контрагент", НовыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтарыйОбъект=Неопределено  Тогда
		//Вызов из несохраненного документа
		Сообщение = НСтр("ru = 'Добавлен в : '")+HTMLСсылка(НовыйОбъект.Ссылка);
		ДобавитьСообщение(
			Сообщение, 
			НовыйОбъект.Контрагент,, 
			Истина);
	ИначеЕсли СтарыйОбъект.Контрагент<>НовыйОбъект.Контрагент Тогда
		Сообщение = НСтр("ru = 'Добавлен в : '")+HTMLСсылка(НовыйОбъект.Ссылка);
		ДобавитьСообщение(
			Сообщение, 
			НовыйОбъект.Контрагент,, 
			Истина);
		
		Сообщение = НСтр("ru = 'Удален из : '")+HTMLСсылка(СтарыйОбъект.Ссылка);
		ДобавитьСообщение(
			Сообщение, 
			СтарыйОбъект.Контрагент,, 
			Истина);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаписьВводНаОсновании(Источник)
	
	спДокументовОснований = Новый СписокЗначений;
	
	Если ЕстьРеквизитОбъекта("ДокументОснование", Источник) И ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
		спДокументовОснований.Добавить(Источник.ДокументОснование);
	Иначе
		спДокументовОснований = ПолучитьРодительскийДокумент(Источник.Ссылка);
	КонецЕсли;
	
	Если спДокументовОснований.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	Сообщение = НСтр("ru = 'Использован в: '")+HTMLСсылка(Источник.Ссылка);
	
	Для каждого стр Из спДокументовОснований Цикл
		ДокументОснование = стр.Значение;
		
		ДобавитьСообщение(
			Сообщение, 
			ДокументОснование,, 
			Истина);
	
	КонецЦикла; 
	
КонецПроцедуры

Функция РеквизитыДляПроверкиИзмененийДокумент(ДокументОбъект)
	
	СтруктураПроверяемыхРеквизитов = Новый Структура("
	|БанковскийСчет,
	|ВалютаДокумента,
	|ВидОперации,
	|ВидЦен,
	|Договор,
	|ДокументОснование,
	|Исполнитель,
	|КалькуляцияРассчитана,
	|Касса,
	|Комментарий,
	|Контрагент,
	|Курс,
	|НалогообложениеНДС,
	|Организация,
	|Ответственный,
	|Подразделение,
	|Состояние,
	|СостояниеЗаказа,
	|Сотрудник,
	|Статус,
	|СтруктурнаяЕдиница,
	|СтруктурнаяЕдиницаПродажи,
	|СтруктурнаяЕдиницаРезерв,
	|СуммаДокумента");

	РеквизитыДокумента = ДокументОбъект.Метаданные().Реквизиты;
	Для каждого КлючИЗначение Из СтруктураПроверяемыхРеквизитов Цикл
		Если РеквизитыДокумента.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			СтруктураПроверяемыхРеквизитов.Удалить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПроверяемыхРеквизитов;
	
КонецФункции

Функция ДанныеСправочникаВыборка(СправочникОбъект, СтруктураПроверяемыхРеквизитов)
	
	ТекстПолей = "";
	Для каждого КлючИЗначение Из СтруктураПроверяемыхРеквизитов Цикл
		
		ИмяПоля = КлючИЗначение.Ключ;
		ТекстПолей  = ТекстПолей + "
		|	," + ИмяПоля + " КАК " + ИмяПоля;
		
	КонецЦикла;
	
	ТекстТабличнойЧасти = "";
	Если СправочникОбъект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация")<>Неопределено Тогда
		Если СправочникОбъект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("Представление") <> Неопределено Тогда
			ТекстТабличнойЧасти = " 
			| ,КонтактнаяИнформация.(
			|		Представление КАК Представление
			|)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СправочникОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|Ссылка КАК Ссылка,
	|ПометкаУдаления КАК ПометкаУдаления
	|" + ТекстПолей + "
	|
	|" + ТекстТабличнойЧасти + "
	|ИЗ
	|	" + СправочникОбъект.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ДанныеДокументаВыборка(ДокументОбъект, СтруктураПроверяемыхРеквизитов)
	
	ТекстПолей = "";
	Для каждого КлючИЗначение Из СтруктураПроверяемыхРеквизитов Цикл
		
		ИмяПоля = КлючИЗначение.Ключ;
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + ИмяПоля;
		
	КонецЦикла;
	
	СтруктураПроверяемыхРеквизитов.Вставить("Проведен");
	СтруктураПроверяемыхРеквизитов.Вставить("ПометкаУдаления");
	
	ТекстТабличнойЧастиЗапасы="";
	Если ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("Запасы")<>Неопределено Тогда
		ТекстРеквизитов = "";
		Если ДокументОбъект.Метаданные().ТабличныеЧасти.Запасы.Реквизиты.Найти("Сумма") <> Неопределено Тогда
			ТекстРеквизитов = ТекстРеквизитов + ?(ТекстРеквизитов="","",",")+"
			|		СУММА(Сумма) КАК Сумма";
		КонецЕсли;	
		Если ДокументОбъект.Метаданные().ТабличныеЧасти.Запасы.Реквизиты.Найти("Количество") <> Неопределено Тогда
			
			ТекстРеквизитов = ТекстРеквизитов + ?(ТекстРеквизитов="","",",")+"
			|		СУММА(Количество) КАК Количество";
		КонецЕсли;
		Если ДокументОбъект.Метаданные().ТабличныеЧасти.Запасы.Реквизиты.Найти("Всего") <> Неопределено Тогда
			
			ТекстРеквизитов = ТекстРеквизитов + ?(ТекстРеквизитов="","",",")+" 
			|		СУММА(Всего) КАК Всего";
		КонецЕсли;
		Если ТекстРеквизитов<>"" Тогда
			ТекстТабличнойЧастиЗапасы = " ,Запасы.(" + ТекстРеквизитов + ")";
		КонецЕсли;
	КонецЕсли;
	
	ТекстТабличнойЧастиРасшифровкаПлатежа = "";
	Если ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа")<>Неопределено Тогда
		Если ДокументОбъект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СуммаПлатежа") <> Неопределено Тогда
			ТекстТабличнойЧастиРасшифровкаПлатежа = " 
			| ,РасшифровкаПлатежа.(
			|		СУММА(СуммаПлатежа) КАК СуммаПлатежа
			|)";
		КонецЕсли;
	КонецЕсли;
	
	ТекстТабличнойЧастиКалькуляция = "";
	Если ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("Калькуляция")<>Неопределено Тогда
		ТекстТабличнойЧастиКалькуляция = " 
		| ,Калькуляция.(
		|		СУММА(Количество) КАК Количество,
		|		СУММА(Себестоимость) КАК Себестоимость
		|)";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|Ссылка КАК Ссылка,
	|Проведен КАК Проведен,
	|ПометкаУдаления КАК ПометкаУдаления,
	|" + ТекстПолей + "
	|
	|" + ТекстТабличнойЧастиЗапасы + "
	|" + ТекстТабличнойЧастиРасшифровкаПлатежа + "
	|" + ТекстТабличнойЧастиКалькуляция + "
	|ИЗ
	|	" + ДокументОбъект.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция РеквизитыДляПроверкиИзмененийСправочник(СправочникОбъект)
	
	СтруктураПроверяемыхРеквизитов = Новый Структура("
	|Наименование,
	|Комментарий,
	/////////////////////////////////
	|ИНН,
	|КодПоОКПО,
	|КПП,
	|Контрагент,
	|Договор,
	|НаименованиеПолное,
	|ВестиРасчетыПоДоговорам,
	|ВестиРасчетыПоДокументам,
	|ВестиРасчетыПоЗаказам,
	|ВестиУчетОплатыПоСчетам,
	|ВидКонтрагента");

	РеквизитыСправочника = СправочникОбъект.Метаданные().Реквизиты;
	Для каждого КлючИЗначение Из СтруктураПроверяемыхРеквизитов Цикл
		Если РеквизитыСправочника.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			СтруктураПроверяемыхРеквизитов.Удалить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
 	Возврат СтруктураПроверяемыхРеквизитов;
	
КонецФункции

#КонецОбласти

#Область АвтоматическиеСобытия

Процедура ДобавитьТекстСтандартныхСообщений(Сообщение, СтарыйОбъект, НовыйОбъект, РежимЗаписи)
	
	Если НЕ СтарыйОбъект.Проведен И РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		Сообщение = НСтр("ru = 'Проведен'");
	КонецЕсли; 
	
	Если СтарыйОбъект.Проведен И РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда
		Сообщение = НСтр("ru = 'Проведение отменено'");
	КонецЕсли; 
	
	Если НЕ СтарыйОбъект.ПометкаУдаления И НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Помечен на удаление'");
	КонецЕсли; 
	
	Если СтарыйОбъект.ПометкаУдаления И НЕ НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Снята пометка на удаление'");
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеИзмененийРеквизитов(СтруктураРеквизитов, СтарыйОбъект, НовыйОбъект)
	
	МетаданныеОбъекта = НовыйОбъект.Метаданные();
	ОписаниеИзменений = "";
	
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		
		Если СтарыйОбъект[Реквизит.Ключ]=НовыйОбъект[Реквизит.Ключ] Тогда
			Продолжить;
		КонецЕсли;

		// Текст описания изменения формируется автоматически
		Синоним = ПредставлениеРеквизита(МетаданныеОбъекта, Реквизит.Ключ);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтарыйОбъект[Реквизит.Ключ])) 
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтарыйОбъект[Реквизит.Ключ]))
			Тогда
			ТекстСтарыйОбъект = HTMLСсылка(СтарыйОбъект[Реквизит.Ключ]);
		Иначе
			ТекстСтарыйОбъект = СтарыйОбъект[Реквизит.Ключ];
		КонецЕсли; 
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(НовыйОбъект[Реквизит.Ключ])) 
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НовыйОбъект[Реквизит.Ключ]))
			Тогда
			ТекстНовыйОбъект  = HTMLСсылка(НовыйОбъект[Реквизит.Ключ]);
		Иначе
			ТекстНовыйОбъект  = НовыйОбъект[Реквизит.Ключ]
		КонецЕсли; 
		
		ОписаниеИзменений = ОписаниеИзменений+
		?(ПустаяСтрока(ОписаниеИзменений), "", Символы.ПС)+
		Синоним+": "+
		ТекстСтарыйОбъект+" -> "+ТекстНовыйОбъект;
	КонецЦикла;
	
	Возврат ОписаниеИзменений;
	
КонецФункции

Функция ЕстьРеквизитОбъекта(Знач ИмяРеквизита, Знач Объект)
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, Неопределено);
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Если ПроверкаРеквизита[ИмяРеквизита] <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОписаниеСравненияМассивов(МассивСтарыхЗначений, МассивНовыхЗначений)
	
	Результат = "";
	
	СписокДобавленных = Новый СписокЗначений;
	СписокУдаленных = Новый СписокЗначений;
	Для каждого Элемент Из МассивСтарыхЗначений Цикл
		Если МассивНовыхЗначений.Найти(Элемент)=Неопределено И СписокУдаленных.НайтиПоЗначению(Элемент)=Неопределено Тогда
			СписокУдаленных.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Элемент Из МассивНовыхЗначений Цикл
		Если МассивСтарыхЗначений.Найти(Элемент)=Неопределено И СписокДобавленных.НайтиПоЗначению(Элемент)=Неопределено Тогда
			СписокДобавленных.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла;
	
	Если СписокДобавленных.Количество()=0 И СписокУдаленных.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если СписокДобавленных.Количество()>0 И СписокУдаленных.Количество()>0 Тогда
		Результат = НСтр("ru = 'Удалены: '")+Строка(СписокУдаленных)+", "+НСтр("ru = 'Добавлены: '")+Строка(СписокДобавленных);;
		Возврат Результат;
	КонецЕсли; 
	
	Если СписокУдаленных.Количество()>0 Тогда
		Результат = НСтр("ru = 'Удалены: '")+Строка(СписокУдаленных);
	КонецЕсли;
	
	Если СписокДобавленных.Количество()>0 Тогда
		Результат = НСтр("ru = 'Добавлены: '")+Строка(СписокДобавленных);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПреобразоватьСсылкиПользователей(Текст, ПользователиРассылки)
	
	ОписанияПользователей = МассивОписанийПользователей();
	Для каждого Элемент Из ОписанияПользователей Цикл
		Если СтрНайти(Текст, "@"+Элемент.Имя)=0 Тогда
			Продолжить;
		КонецЕсли;
		Текст = СтрЗаменить(Текст, "@"+Элемент.Имя, HTMLСсылка(Элемент.Пользователь));
		ПользователиРассылки.Добавить(Элемент.Пользователь);
	КонецЦикла; 
	
КонецПроцедуры

Процедура СформироватьНапоминанияПользователям(Ссылка, Пользователь, Комментарий, ПользователиРассылки)
	
	Если НЕ (РольДоступна(Метаданные.Роли.ИспользованиеОбсуждений)
		ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава))
		Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПользовательРассылки Из ПользователиРассылки Цикл
		Напоминание = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
		Напоминание.Описание = ""+Пользователь+": "+УдалитьТеги(Комментарий);
		Напоминание.СрокНапоминания = ТекущаяДатаСеанса();
		Напоминание.ВремяСобытия = ТекущаяДатаСеанса();
		Напоминание.Пользователь = ПользовательРассылки;
		Напоминание.Источник = Ссылка;
		Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		Напоминание.ПредставлениеИсточника = Строка(Ссылка);
		Напоминание.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеРеквизита(МетаданныеОбъекта, Имя)
	
	Реквизит=МетаданныеОбъекта.Реквизиты.Найти(Имя);
	Если НЕ Реквизит=Неопределено Тогда
		Возврат ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя=Имя Тогда
			Возврат ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Имя;
	
КонецФункции

Функция HTMLСсылка(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	СсылкаСтрокой = Строка(Ссылка);
	СсылкаСтрокой = СтрЗаменить(СсылкаСтрокой, " (не проведен)", "");
	СсылкаСтрокой = СтрЗаменить(СсылкаСтрокой, " (удален)", "");
	
	Возврат "<A HREF='"+ПолучитьНавигационнуюСсылку(Ссылка)+"'>"+СсылкаСтрокой+"</A>";
	
КонецФункции

Функция УдалитьТеги(Текст)
	
	Результат = "";
	Остаток = Текст;
	Позиция = СтрНайти(Остаток, "<");
	Пока Позиция>0 Цикл
		Результат = Результат+Лев(Остаток, Позиция-1);
		Остаток = Сред(Остаток, Позиция);
		ПозицияКонца = СтрНайти(Остаток, ">");
		Если ПозицияКонца=0 Тогда
			Остаток = "";
			Прервать;
		КонецЕсли; 
		Тег = Лев(Остаток, ПозицияКонца);
		Если ВРег(Тег)="<BR>" Тогда
			Результат = Результат+Символы.ПС;
		Иначе
			Остаток = Сред(Остаток, ПозицияКонца+1);
		КонецЕсли;
		Позиция = СтрНайти(Остаток, "<");
	КонецЦикла;
	Результат = Результат+Остаток;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкуИзНавигационной(НС) Экспорт
	
	ПерваяТочка = СтрНайти(НС, "e1cib/data/");
	ВтораяТочка = СтрНайти(НС, "?ref=");
	ТретьяТочка = СтрНайти(НС, "'>");
	
	ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
	Если ТретьяТочка> 0 Тогда
		КонецНС = Прав(НС, СтрДлина(НС) - ТретьяТочка+1);
		ЗначениеСсылки = СтрЗаменить(ЗначениеСсылки, КонецНС, "");
	КонецЕсли;
	Попытка
		Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	Исключение
		Возврат НСтр("ru = 'Ошибка преобразования: '")+НС;
	КонецПопытки; 
	
КонецФункции

Функция ПолучитьРодительскийДокумент(ДокументСсылка)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	мУжеВСписке = Новый Соответствие;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
					Попытка
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
					Исключение
						ОтладкаТекстОшибки = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		Если МетаданныеДокумента = Метаданные.Документы.СверкаВзаиморасчетов Тогда
			
			Прервать;
			
		КонецЕсли;
		
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						Попытка
							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						Исключение
							ОтладкаТекстОшибки = ОписаниеОшибки();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	возврат СписокРеквизитов;
	
КонецФункции

// Устанавливает функциональную опцию ИспользоватьНапоминанияПользователя=Истина при обновлении версии конфигурации.
// 
// Параметры:
//  СтруктураПараметров    - Структура - Входящие параметры при обновлении
//				ОбработкаЗавершена - Булево - признак окончания процедуры обработки
Процедура ВключитьФОИспользоватьНапоминанияПользователяПриОбновлении(СтруктураПараметров) Экспорт
	
	Попытка
		
		Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
		СтруктураПараметров.ОбработкаЗавершена = Истина;
		
	Исключение
		// запись ЖР
	КонецПопытки;
	
КонецПроцедуры

Функция ПреобразоватьНавигационныеСсылки(Комментарий)
	
	МассивСсылок = Новый Массив;
	МассивНавигационныхСсылок = Новый Массив;
	Остаток = Комментарий;
	Комментарий = "";
	Позиция = СтрНайти(Остаток, "e1cib");
	Пока Позиция>0 Цикл
		Комментарий = Комментарий+Лев(Остаток, Позиция-1);
		Остаток = Сред(Остаток, Позиция);
		Позиция = СтрНайти(Остаток, " ");
		СловоПосле = ?(Позиция=0, Остаток, Лев(Остаток, Позиция-1));
		Остаток = ?(Позиция=0, "", Сред(Остаток, Позиция));
		
		ТретьяТочка = СтрНайти(СловоПосле, "'>");
		Если ТретьяТочка> 0 Тогда
			КонецНС = Прав(СловоПосле, СтрДлина(СловоПосле) - ТретьяТочка+1);
			СловоПослеДляСсылки = СтрЗаменить(СловоПосле, КонецНС, "");
			МассивНавигационныхСсылок.Добавить(СловоПослеДляСсылки);
		Иначе
			МассивНавигационныхСсылок.Добавить(СловоПосле);
		КонецЕсли;
		
		Комментарий = Комментарий+"<A HREF='"+СловоПосле+"'>%"+Формат(МассивНавигационныхСсылок.Количество(), "ЧГ=0")+"</A>";
		СсылкаНаОбъект = ПолучитьСсылкуИзНавигационной(СловоПосле);
		МассивСсылок.Добавить(СсылкаНаОбъект); 
		Позиция = СтрНайти(Остаток, "e1cib");
	КонецЦикла;
	Комментарий = Комментарий+Остаток;  
	ПредставленияСсылок = ПолучитьПредставленияНавигационныхСсылок(МассивНавигационныхСсылок);
	Индекс = ПредставленияСсылок.Количество();
	Пока Индекс>0 Цикл
		Представление = ПредставленияСсылок[Индекс-1].Текст;
		Комментарий = СтрЗаменить(Комментарий, "%"+Формат(Индекс, "ЧГ=0"), Представление);
		Индекс = Индекс-1;
	КонецЦикла;
	
	возврат МассивСсылок;
	
КонецФункции

//Возвращает данные присоединенного файла для открытия по нажатию на навигационную ссылку в обсуждениях
Функция ПолучитьДанныеФайлаСправочникаПоНавигационнойСсылке(СтрокаНавигационнойСсылкиСправочника) Экспорт

	СсылкаПрисоединенныеФайлы = ПолучитьСсылкуИзНавигационной(СтрокаНавигационнойСсылкиСправочника);
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаПрисоединенныеФайлы);
	
	Возврат ДанныеФайла;
			
КонецФункции

#КонецОбласти 

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ГруппаДел	= НСтр("ru = 'Напоминания'");
	ИмяФормы	= "РегистрСведений.НапоминанияПользователя.Форма.МоиНапоминания";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя")
		Или Не ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.НапоминанияПользователя)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК МоиНапоминанияВсегоНапоминаний
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК РегистрСведенийНапоминанияПользователя
		|ГДЕ
		|	РегистрСведенийНапоминанияПользователя.Пользователь = &Пользователь";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "МоиНапоминанияВсегоНапоминаний";
	Дело.ЕстьДела		= ДанныеДел.МоиНапоминанияВсегоНапоминаний > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'Мои напоминания'");
	Дело.Количество		= ДанныеДел.МоиНапоминанияВсегоНапоминаний;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура;
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

// Интерфейс рабочего процесса для создания напоминаний
//
Процедура СоставПолейЗаполненияДляРабочегоПроцесса(ТаблицаОписанияПолей, знач ТипДействия) Экспорт
	
	НовоеОписание = ТаблицаОписанияПолей.Добавить();
	НовоеОписание.ИмяРеквизита				= "Пользователь";
	НовоеОписание.Заголовок					= НСтр("ru='Кому напомнить'");
	НовоеОписание.ВариантЗаполнения			= "ИзОснования";
	НовоеОписание.ТипЗначения				= Метаданные.РегистрыСведений.НапоминанияПользователя.Измерения.Пользователь.Тип;
	НовоеОписание.ОбязательноеЗаполнение	= Истина;
	
	НовоеОписание = ТаблицаОписанияПолей.Добавить();
	НовоеОписание.ИмяРеквизита				= "ВремяСобытия";
	НовоеОписание.Заголовок					= НСтр("ru='Дата напоминания'");
	НовоеОписание.ВариантЗаполнения			= "Смещение";
	НовоеОписание.ТипЗначения				= ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	НовоеОписание.ОбязательноеЗаполнение	= Истина;
	
КонецПроцедуры

#КонецОбласти
