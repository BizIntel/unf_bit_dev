
#Область ПрограммныйИнтерфейс

// Возвращает дерево используемых категорий.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево используемых категорий.
//
Функция ДеревоКатегорий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка КАК Значение,
	|	КатегорииНоменклатуры.Наименование КАК Представление
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииНоменклатуры.Наименование ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Дерево.Строки.Количество() > 1 Тогда
		
		СтрокаНетКатегории = Дерево.Строки.Вставить(0);
		СтрокаНетКатегории.Значение = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаНетКатегории.Представление = НСтр("ru='<Все категории>'");
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Создает на форме список используемых свойств выбранной категории для выполнения отборов по списку номенклатуры.
//
// Параметры:
//  Форма					 - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода списка свойств.
//  ВыбраннаяКатегория		 - СправочникСсылка.КатегорииНоменклатуры - Выбранная категория номенклатуры, являющаяся
//                             владельцем свойств.
//  ИмяЭлементаДляРазмещения - Строка - Имя группы на форме, в которой будут размещены свойства номенклатуры.
//  СвойстваХарактеристики	 - Булево - Определяет, нужно ли показывать свойства характеристик выбранной номенклатуры.
//
Процедура ПоказатьСвойстваКатегории(Форма, Список, ВыбраннаяКатегория, ИмяЭлементаДляРазмещения, СвойстваХарактеристики) Экспорт
	
	Элементы = Форма.Элементы;
	
	УдалитьСтарыеРеквизитыИЭлементы(Форма, Список, СвойстваХарактеристики);
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория) Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойстваХарактеристики Тогда
		НаборСвойств = ВыбраннаяКатегория.НаборСвойствХарактеристики;
	Иначе
		НаборСвойств = ВыбраннаяКатегория.НаборСвойств;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаполненностьСвойствКатегорий.Свойство,
	|	ЗаполненностьСвойствКатегорий.Значение
	|ПОМЕСТИТЬ СвойстваИЗначения
	|ИЗ
	|	РегистрСведений.ЗаполненностьСвойствКатегорий КАК ЗаполненностьСвойствКатегорий
	|ГДЕ
	|	ЗаполненностьСвойствКатегорий.НаборСвойств = &НаборСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваИЗначения.Свойство КАК Свойство,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СвойстваИЗначения.Значение) КАК Количество
	|ИЗ
	|	СвойстваИЗначения КАК СвойстваИЗначения
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваИЗначения.Свойство";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Выборка.Свойство.ТипЗначения, Тип("Число")) Тогда
			
			НовыйОписаниеСвойства(
				Форма.СвойстваОписаниеДополнительныхРеквизитов,
				НаборСвойств,
				Выборка.Свойство,
				СвойстваХарактеристики,
				"от");
			
			НовыйОписаниеСвойства(
				Форма.СвойстваОписаниеДополнительныхРеквизитов,
				НаборСвойств,
				Выборка.Свойство,
				СвойстваХарактеристики,
				"до");
			
		Иначе
			
			НовыйОписаниеСвойства(
				Форма.СвойстваОписаниеДополнительныхРеквизитов,
				НаборСвойств,
				Выборка.Свойство,
				СвойстваХарактеристики);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для каждого ОписаниеСвойства Из Форма.СвойстваОписаниеДополнительныхРеквизитов Цикл
		
		Если ОписаниеСвойства.СвойствоХарактеристики <> СвойстваХарактеристики Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначения = ?(ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Число")),
						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024)),
						ОписаниеСвойства.ТипЗначения);
		
		Реквизит = Новый РеквизитФормы(
			ОписаниеСвойства.ИмяРеквизитаЗначение,
			ТипЗначения,,
			ОписаниеСвойства.Наименование);
			
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭлементРодительРазмещенияСвойств = Элементы[ИмяЭлементаДляРазмещения];
	Для каждого ОписаниеСвойства Из Форма.СвойстваОписаниеДополнительныхРеквизитов Цикл
		
		Если ОписаниеСвойства.СвойствоХарактеристики <> СвойстваХарактеристики Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			
			ЭлементЛеваяГраница = ОписаниеСвойства;
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИмяРеквизитаЗначение", СтрЗаменить(ОписаниеСвойства.ИмяРеквизитаЗначение, "_от", "_до"));
			Строки = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество() <> 0 Тогда
				ЭлементПраваяГраница = Строки[0];
			КонецЕсли;
			
			СоздаваемыеЭлементы = Новый Массив;
			СоздаваемыеЭлементы.Добавить(ЭлементЛеваяГраница);
			СоздаваемыеЭлементы.Добавить(ЭлементПраваяГраница);
			НовыйЭлементФормы(Форма, СоздаваемыеЭлементы, ЭлементРодительРазмещенияСвойств);
			
		ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			
			Продолжить;
			
		Иначе
			
			Если ОписаниеСвойства.ДополнительноеЗначение Тогда
				ПараметрыОтбора = Новый Структура("Свойство", ОписаниеСвойства.Свойство);
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СвойстваИЗначения.Свойство,
				|	СвойстваИЗначения.Значение
				|ИЗ
				|	СвойстваИЗначения КАК СвойстваИЗначения
				|ГДЕ
				|	СвойстваИЗначения.Свойство = &Свойство";
				Запрос.УстановитьПараметр("Свойство", ОписаниеСвойства.Свойство);
				ВыборкаЗначенийВыбора = Запрос.Выполнить();//.Выбрать();
				
			КонецЕсли;
			
			СоздаваемыеЭлементы = Новый Массив;
			СоздаваемыеЭлементы.Добавить(ОписаниеСвойства);
			НовыйЭлементФормы(Форма, СоздаваемыеЭлементы, ЭлементРодительРазмещенияСвойств, ВыборкаЗначенийВыбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет свойства номенклатуры по выбранной категории.
// Заполняемые свойства: тип номенклатуры, единица измерения, признак использования характеристик.
//
// Параметры:
//  Номенклатура - ДанныеФормыСтруктура - Объект номенклатуры.
//
Процедура ЗаполнитьСвойстваНоменклатурыПоКатегории(Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура.КатегорияНоменклатуры) Тогда
		Категория = Номенклатура.КатегорияНоменклатуры;
	Иначе
		Категория = ЗначениеЗаполненияКатегории();
		Номенклатура.КатегорияНоменклатуры = Категория;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Категория.ТипНоменклатурыПоУмолчанию)
		И НЕ ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		
		Номенклатура.ТипНоменклатуры = Категория.ТипНоменклатурыПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Категория.ЕдиницаИзмерения) Тогда
		Номенклатура.ЕдиницаИзмерения = Категория.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
		ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		ИспользоватьХарактеристики = Категория.ИспользоватьХарактеристики;
		Если НЕ ИспользоватьХарактеристики Тогда
			ИспользоватьХарактеристики = Справочники.Номенклатура.ЕстьХарактеристики(Номенклатура.Ссылка);
		КонецЕсли;
		
		Номенклатура.ИспользоватьХарактеристики = ИспользоватьХарактеристики;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает категорию номенклатуры по выбранной категории из классификатора.
//
// Параметры:
//  КатегорияКлассификатора	 - СправочникСсылка.КлассификаторКатегорийНоменклатуры - Выбранная категория в классификаторе.
//  Родитель				 - СправочникСсылка.КатегорииНоменклатуры - Используется при перетаскивании. Родитель категории
//                                      из классификатора.
//  Результат				 - Структура - Возвращает данные о количестве созданных групп и элементов.
// 
// Возвращаемое значение:
//  СправочникСсылка.КатегорииНоменклатуры - Созданная категория.
//
Функция КатегорияНоменклатурыПоКлассификатору(КатегорияКлассификатора, Родитель, Результат) Экспорт
	
	Если Родитель <> Неопределено И НЕ ОбщегоНазначения.ОбъектЯвляетсяГруппой(Родитель) Тогда
		Родитель = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Категория", КатегорияКлассификатора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторКатегорийНоменклатуры.Ссылка КАК Классификатор,
	|	КлассификаторКатегорийНоменклатуры.Код КАК КлассификаторКод,
	|	ЕСТЬNULL(КатегорииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка)) КАК Категория,
	|	КлассификаторКатегорийНоменклатуры.ЭтоГруппа,
	|	КлассификаторКатегорийНоменклатуры.ЭтоУслуга,
	|	КлассификаторКатегорийНоменклатуры.Наименование,
	|	КлассификаторКатегорийНоменклатуры.Родитель КАК Родитель
	|ИЗ
	|	Справочник.КлассификаторКатегорийНоменклатуры КАК КлассификаторКатегорийНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ПО КлассификаторКатегорийНоменклатуры.Код = КатегорииНоменклатуры.КатегорияПоКлассификатору
	|ГДЕ
	|	КлассификаторКатегорийНоменклатуры.Ссылка В ИЕРАРХИИ(&Категория)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Классификатор ИЕРАРХИЯ";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВестиУчетВРазрезеХарактеристик = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	МассивКатегорий = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Категория) Тогда
			МассивКатегорий.Добавить(Выборка.Категория);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ЭтоГруппа Тогда
			Категория = Справочники.КатегорииНоменклатуры.СоздатьГруппу();
			Результат.СозданоГрупп = Результат.СозданоГрупп + 1;
		Иначе
			Категория = Справочники.КатегорииНоменклатуры.СоздатьЭлемент();
			Результат.СозданоЭлементов = Результат.СозданоЭлементов + 1;
		КонецЕсли; 
		
		Категория.Наименование = Выборка.Наименование;
		Категория.КатегорияПоКлассификатору = Выборка.КлассификаторКод;
		
		
		Если Выборка.Классификатор = КатегорияКлассификатора И ЗначениеЗаполнено(Родитель) Тогда
			Категория.Родитель = Родитель;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Родитель) Тогда
			Категория.Родитель = Справочники.КатегорииНоменклатуры.НайтиПоРеквизиту("КатегорияПоКлассификатору", Выборка.Родитель.Код);
		КонецЕсли;
		
		Категория.УстановитьНовыйКод("");
		Категория.ДополнительныеСвойства.Вставить("СозданиеКатегорииИзКлассификатора", Истина);
		Категория.Записать();
		
		Если НЕ Категория.ЭтоГруппа Тогда
			
			Категория.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
			Если Выборка.Классификатор.ЭтоУслуга Тогда
				Категория.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга;
			Иначе
				Категория.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас;
			КонецЕсли;
			Категория.Записать();
			
			СоздатьДополнительныеРеквизитыКатегории(Категория, Выборка.Классификатор);
			ИспользоватьХарактеристики = (Категория.НаборСвойствХарактеристики.ДополнительныеРеквизиты.Количество() <> 0);
			
			Если НЕ ВестиУчетВРазрезеХарактеристик И ИспользоватьХарактеристики Тогда
				ФункциональнаяОпцияИспользоватьХарактеристики();
				ВестиУчетВРазрезеХарактеристик = Истина;
			КонецЕсли;
			
			Категория.ИспользоватьХарактеристики = ИспользоватьХарактеристики;
			Категория.Записать();
			
		КонецЕсли;
		
		МассивКатегорий.Добавить(Категория.Ссылка);
	КонецЦикла;
	
	Если МассивКатегорий.Количество() > 0 Тогда
		Возврат МассивКатегорий[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Формирует список подбора категорий номенклатуры из классификатора.
//
// Параметры:
//  Текст					 - Строка - Строка текста, введенная в поле ввода.
//  Параметры				 - Структура - Содержит параметры поиска.
//  ПоказыватьСуществующие	 - Булево - Определяет, нужно ли показывать созданные категории номенклатуры вместе 
//                                      с категориями из классификатора.
// 
// Возвращаемое значение:
//  СписокЗначений - Список подбора.
//
Функция СписокАвтоПодбораКатегорииТоваровИУслуг(Текст, Параметры, ПоказыватьСуществующие) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	Выборка = ВыборкаКатегорийПоНаименованию(Текст, Параметры, ПоказыватьСуществующие);
	
	Пока Выборка.Следующий() Цикл
		Длина = СтрДлина(Текст);
		Позиция = Найти(НРег(Выборка.Наименование), НРег(Текст));
		ЛеваяЧасть = Лев(Выборка.Наименование, Позиция-1);
		СредняяЧасть = Сред(Выборка.Наименование, Позиция, Длина);
		ПраваяЧасть = Сред(Выборка.Наименование, Позиция + Длина);
		
		ПредставлениеЭлемента = Новый Массив;
		ПредставлениеЭлемента.Добавить(ЛеваяЧасть);
		ПредставлениеЭлемента.Добавить(Новый ФорматированнаяСтрока(СредняяЧасть, Новый Шрифт(,, Истина), WebЦвета.Зеленый));
		ПредставлениеЭлемента.Добавить(ПраваяЧасть);
		
		ТекстРодитель = Выборка.Родитель + 
		                ?(ПустаяСтрока(Выборка.Родитель) ИЛИ ПустаяСтрока(Выборка.РодительРодитель),"",", ") +
		                Выборка.РодительРодитель;
		
		ПредставлениеРодителя = Новый Массив;
		Если ПустаяСтрока(ТекстРодитель) Тогда
			ПредставлениеРодителя.Добавить("");
		Иначе
			ПредставлениеРодителя.Добавить(" ");
			ПредставлениеРодителя.Добавить(ТекстРодитель);
		КонецЕсли;
		ПредставлениеРодителя = Новый ФорматированнаяСтрока(ПредставлениеРодителя,, Новый Цвет(153, 153, 153));
		
		Представление = Новый ФорматированнаяСтрока(ПредставлениеЭлемента, ПредставлениеРодителя);
		
		Результат.Добавить(Выборка.Ссылка,
		Представление,,
		?(Выборка.Существующая, Неопределено, БиблиотекаКартинок.ЯндексЛоготип16х16));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя поля отбора для установления отбора списка номенклатуры по значению свойства.
//
// Параметры:
//  Форма					 - УправляемаяФорма - Форма объекта-владельца, в котором происходит отбор по свойству номенклатуры.
//  ЭлементИмя				 - Строка - Имя элемента на форме, в котором был произведен выбор значения номенклатуры для отбора.
//  КатегорияНоменклатуры	 - СправочникСсылка.КатегорииНоменклатуры - Выбранная категория номенклатуры.
// 
// Возвращаемое значение:
//  Строка - Имя поля отбора.
//
Функция ПолеОтбораДополнительногоРеквизита(Форма, ЭлементИмя, КатегорияНоменклатуры) Экспорт
	
	ОписаниеСвойства = ОписаниеСвойства(Форма, ЭлементИмя);
	ПолеОтбора = ПолеОтбораДополнительногоРеквизитаИзОписанияСвойства(ОписаниеСвойства, КатегорияНоменклатуры);
	Возврат ПолеОтбора;
	
КонецФункции

// Устанавливает отбор списка номенклатуры по выбранной категории.
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма объекта-владельца, в котором требуется установить отбор номенклатуры по категории.
//  Список				 - ДинамическийСписок - Список на форме.
//  ВыбраннаяКатегория	 - СправочникСсылка.КатегорииНоменклатуры - Категория, по которой требуется установить отбор.
//
Процедура УстановитьОтборПоКатегории(Форма, Список, ВыбраннаяКатегория) Экспорт
	
	УдалитьОтборыСвойствПредыдущейКатегории(Форма, Список);
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,,
			"ОтборПоКатегории");
		Возврат;
		
	КонецЕсли;
	
	ГруппаОтборПоКатегории = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоКатегории",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКатегории,
		"КатегорияНоменклатуры",
		ВидСравненияКомпоновкиДанных.Равно,
		ВыбраннаяКатегория,
		"ОтборПоКатегории",
		ЗначениеЗаполнено(ВыбраннаяКатегория));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКатегории,
		"КатегорияНоменклатуры",
		ВидСравненияКомпоновкиДанных.ВИерархии,
		ВыбраннаяКатегория,
		"ОтборПоКатегорииВИерархии",
		ЗначениеЗаполнено(ВыбраннаяКатегория));
	
КонецПроцедуры

// Устанавливает отбор списка номенклатуры по значению свойства номенклатуры или характеристики.
//
// Параметры:
//  Форма					 - УправляемаяФорма - Форма объекта-владельца, в котором происходит отбор по свойству.
//  Список					 - ДинамическийСписок - Список на форме.
//  ЭлементИмя				 - Строка - Имя элемента на форме, в котором был произведен выбор значения номенклатуры для отбора.
//  КатегорияНоменклатуры	 - СправочникСсылка.КатегорииНоменклатуры - Выбранная категория номенклатуры.
//
Процедура УстановитьОтборПоДополнительномуРеквизиту(Форма, Список, ЭлементИмя, КатегорияНоменклатуры) Экспорт
	
	ОписаниеСвойства = ОписаниеСвойства(Форма, ЭлементИмя);
	ПолеОтбора = ПолеОтбораДополнительногоРеквизитаИзОписанияСвойства(ОписаниеСвойства, КатегорияНоменклатуры);
	
	Значение = Форма[ЭлементИмя];
	ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.Равно;
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Число")) Тогда
		
		Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ЭлементИмя) Тогда
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ЭлементИмя) Тогда
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			УдалитьОтборВСписке(Список, ЭлементИмя);
		Иначе
			Значение = Число(Значение);
			УстановитьОтборВСписке(Список, ПолеОтбора, ВидСравненияЗначения, Значение, ЭлементИмя);
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Булево")) Тогда
		
		Если Значение Тогда
			УстановитьОтборВСписке(Список, ПолеОтбора, ВидСравненияЗначения, Значение, ЭлементИмя);
		Иначе
			УдалитьОтборВСписке(Список, ЭлементИмя);
		КонецЕсли;
		
	Иначе
		
		УстановитьОтборВСписке(Список, ПолеОтбора, ВидСравненияЗначения, Значение, ЭлементИмя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияСвойствПередЗаписью(Объект, Отказ) Экспорт
	
	// Сохраним предыдущие значения для анализа в ПриЗаписи()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектДополнительныеРеквизиты.Свойство,
	|	ОбъектДополнительныеРеквизиты.Значение
	|ИЗ
	|	" + Объект.Ссылка.Метаданные().ПолноеИмя() + ".ДополнительныеРеквизиты КАК ОбъектДополнительныеРеквизиты
	|ГДЕ
	|	ОбъектДополнительныеРеквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.ПометкаУдаления
	|	%ПоляОбъекта%
	|ИЗ
	|	" + Объект.Ссылка.Метаданные().ПолноеИмя() + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка";
	
	ЭтоНоменклатура = (ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура"));
	Если ЭтоНоменклатура Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОбъекта%", ",Объект.КатегорияНоменклатуры");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОбъекта%", "");
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	СвойстваОбъекта = Результат[0].Выгрузить();
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ПометкаУдаления = Выборка.ПометкаУдаления;
		
		Если ЭтоНоменклатура Тогда
			КатегорияНоменклатуры = Выборка.КатегорияНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПометкаУдаления = Неопределено Тогда
		ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("СвойстваОбъекта", СвойстваОбъекта);
	Объект.ДополнительныеСвойства.Вставить("ПометкаУдаления", ПометкаУдаления);
	Если ЭтоНоменклатура Тогда
		Объект.ДополнительныеСвойства.Вставить("КатегорияНоменклатуры", КатегорияНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияСвойствПриЗаписи(Объект, КатегорияНоменклатуры, Отказ) Экспорт
	
	ЭтоНоменклатура = (ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура"));
	
	Если Объект.ДополнительныеСвойства.Свойство("ПометкаУдаления") Тогда
		ОбъектПометкаУдаления = Объект.ДополнительныеСвойства.ПометкаУдаления;
	Иначе
		ОбъектПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ЭтоНоменклатура Тогда
		Если Объект.ДополнительныеСвойства.Свойство("КатегорияНоменклатуры") Тогда
			ОбъектКатегорияНоменклатуры = Объект.ДополнительныеСвойства.КатегорияНоменклатуры;
			Если ОбъектКатегорияНоменклатуры <> Объект.КатегорияНоменклатуры Тогда
				ЗаписатьЗначениеЗаполненияКатегории(Объект.КатегорияНоменклатуры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНоменклатура Тогда
		НаборСвойств = КатегорияНоменклатуры.НаборСвойств;
	Иначе
		НаборСвойств = КатегорияНоменклатуры.НаборСвойствХарактеристики;
	КонецЕсли;
	
	// при обмене данными НаборСвойств может оказаться пустым, поэтому прекращаем запись
	// данные регистра свой 
	Если НЕ ЗначениеЗаполнено(НаборСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеСвойства = Новый ТаблицаЗначений;
	ДобавляемыеСвойства = Новый ТаблицаЗначений;
	
	УдаляемыеСвойства.Колонки.Добавить("Свойство");
	УдаляемыеСвойства.Колонки.Добавить("Значение");
	
	ДобавляемыеСвойства.Колонки.Добавить("Свойство");
	ДобавляемыеСвойства.Колонки.Добавить("Значение");
	
	Если Объект.ПометкаУдаления И Объект.ПометкаУдаления <> ОбъектПометкаУдаления Тогда 
		
		// Объект стал помечен на удаление
		Для каждого СтрокаОбъекта Из Объект.ДополнительныеРеквизиты Цикл
			
			НоваяСтрока = УдаляемыеСвойства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
			
		КонецЦикла;
		
	ИначеЕсли НЕ Объект.ПометкаУдаления И Объект.ПометкаУдаления <> ОбъектПометкаУдаления Тогда
		
		// Объект снят с удаления
		Для каждого СтрокаОбъекта Из Объект.ДополнительныеРеквизиты Цикл
			
			НоваяСтрока = ДобавляемыеСвойства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
			
		КонецЦикла;
		
	ИначеЕсли НЕ Объект.ПометкаУдаления И Объект.ПометкаУдаления = ОбъектПометкаУдаления Тогда 
		
		// Обычная запись
		Если Объект.ДополнительныеСвойства.Свойство("СвойстваОбъекта") Тогда
			
			СвойстваОбъекта = Объект.ДополнительныеСвойства.СвойстваОбъекта;
			
			Для каждого СтрокаОбъекта Из Объект.ДополнительныеРеквизиты Цикл
				
				СтрокаБД = СвойстваОбъекта.Найти(СтрокаОбъекта.Свойство, "Свойство");
				
				Если СтрокаБД = Неопределено Тогда 
					
					// Добавлено свойство
					НоваяСтрока = ДобавляемыеСвойства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
					Продолжить;
					
				КонецЕсли;
					
				Если СтрокаБД.Значение = СтрокаОбъекта.Значение Тогда
					
					// Свойство не изменено
					СвойстваОбъекта.Удалить(СтрокаБД);
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокаБД.Значение <> СтрокаОбъекта.Значение Тогда
					
					// Свойство изменено
					НоваяСтрока = УдаляемыеСвойства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБД);
					
					НоваяСтрока = ДобавляемыеСвойства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
					
					СвойстваОбъекта.Удалить(СтрокаБД);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Остались удаленные свойства
			Для каждого СтрокаБД Из СвойстваОбъекта Цикл
				
				НоваяСтрока = УдаляемыеСвойства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБД);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого УдаляемоеСвойство Из УдаляемыеСвойства Цикл
		УдалитьСвойствоИзРегистра(УдаляемоеСвойство, НаборСвойств);
	КонецЦикла;
	
	Для каждого ДобавляемоеСвойство Из ДобавляемыеСвойства Цикл
		ДобавитьСвойствоВРегистр(ДобавляемоеСвойство, НаборСвойств);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкуВидОтбораНоменклатуры(ВидОтбора = Неопределено) Экспорт
	
	Если ВидОтбора = Неопределено Тогда
		ВидОтбора = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры;
	КонецЕсли;
	
	ТекущаяНастройка = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидОтбора");
	Если ТекущаяНастройка <> ВидОтбора Тогда
		УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ВидОтбора, "ОсновнойВидОтбора");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкуВидОтбораНоменклатуры() Экспорт
	
	ВидОтбора = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидОтбора");
	Если ВидОтбора = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ВидОтбора) Тогда
		
		ВидОтбораПоУмолчанию = НастройкаВидОтбораНоменклатурыПоУмолчанию();
		Если ВидОтбораПоУмолчанию = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ВидОтбораПоУмолчанию) Тогда
			ВидОтбора = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры;
		Иначе
			ВидОтбора = ВидОтбораПоУмолчанию;
		КонецЕсли;
		
		УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ВидОтбора, "ОсновнойВидОтбора");
		
	КонецЕсли;
	
	Возврат ВидОтбора;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НастройкаВидОтбораНоменклатурыПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОтбора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОтбора.ТипЗначения.ПривестиЗначение();
	
	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;
		
	ИначеЕсли Выборка.Следующий() Тогда
		
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
		
	Иначе
		Возврат ПустоеЗначение;
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеНастройки()

Функция ЗначениеЗаполненияКатегории() Экспорт
	
	КатегорияЗаполнения = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
	
	Категория = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗначениеЗаполненияКатегорияНоменклатуры");
	
	Если НЕ Категория.ЭтоГруппа Тогда
		КатегорияЗаполнения = Категория;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КатегорияЗаполнения) Тогда
		КатегорияЗаполнения = Справочники.КатегорииНоменклатуры.БезКатегории;
		ЗаписатьЗначениеЗаполненияКатегории(КатегорияЗаполнения);
	КонецЕсли;
	
	Возврат КатегорияЗаполнения;
	
КонецФункции

Процедура ЗаписатьЗначениеЗаполненияКатегории(Категория) Экспорт
	
	КатегорияВНастройке = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗначениеЗаполненияКатегорияНоменклатуры");
	Если КатегорияВНастройке = Категория
		ИЛИ НЕ ЗначениеЗаполнено(Категория) Тогда
		
		Возврат;
	КонецЕсли;
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(Категория, "ЗначениеЗаполненияКатегорияНоменклатуры");
	
КонецПроцедуры

Функция ОписаниеСвойства(Форма, ЭлементИмя)
	
	ПараметрыОтбора = Новый Структура("ИмяРеквизитаЗначение", ЭлементИмя);
	Строки = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
	Если Строки.Количество() <> 0 Тогда
		Возврат Строки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСвойстваЭлемента(Форма, Элемент, ОписаниеСвойства, ЗначенияВыбора = Неопределено)
	
	Если ОписаниеСвойства.Булево Тогда
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Иначе
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.КнопкаОткрытия = Ложь;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			ПодсказкаВвода = ОписаниеСвойства.Заголовок + " от";
			Подсказка = ОписаниеСвойства.Заголовок;
		ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			ПодсказкаВвода = "до";
			Подсказка = ОписаниеСвойства.Заголовок;
		Иначе
			ПодсказкаВвода = ОписаниеСвойства.Заголовок;
			Подсказка = ОписаниеСвойства.Заголовок;
		КонецЕсли;
		
		Элемент.ПодсказкаВвода = ПодсказкаВвода;
		Элемент.Подсказка = Подсказка;
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		
	КонецЕсли;
	
	Элемент.Заголовок = ОписаниеСвойства.Заголовок;
	Элемент.ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоРеквизита");
	
	Если ОписаниеСвойства.ДополнительноеЗначение Тогда
		
		Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораДополнительногоРеквизита");
		
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			?(ЗначениеЗаполнено(ОписаниеСвойства.ВладелецДополнительныхЗначений),
				ОписаниеСвойства.ВладелецДополнительныхЗначений, ОписаниеСвойства.Свойство)));
		
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
		Если ЗначенияВыбора <> Неопределено Тогда
			
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораДополнительногоРеквизита");
			
			ЗначенияВыбора = ЗначенияВыбора.Выбрать();
			Если ЗначенияВыбора.Количество() <= 10 Тогда
				
				ЗначенияВыбора.Выбрать();
				Пока ЗначенияВыбора.Следующий() Цикл
					Элемент.СписокВыбора.Добавить(ЗначенияВыбора.Значение);
				КонецЦикла;
				
				Элемент.РежимВыбораИзСписка = Истина;
				
			Иначе
				
				ЗначенияВыбора = ЗначенияВыбора.Владелец();
				ОписаниеСвойства.СписокВыбораЗначенийСсылка = ПоместитьВоВременноеХранилище(ЗначенияВыбора, Форма.УникальныйИдентификатор);
				
				Элемент.РежимВыбораИзСписка = Ложь;
				Элемент.БыстрыйВыбор = Ложь;
				Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.КнопкаСоздания = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйЭлементФормы(Форма, СоздаваемыеЭлементы, Родитель, ЗначенияВыбора = Неопределено)
	
	ПервыйЭлемент = СоздаваемыеЭлементы[0].ИмяРеквизитаЗначение;
	Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ПервыйЭлемент) Тогда
		ПервыйЭлемент = СтрЗаменить(ПервыйЭлемент, "_от", "");
	ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ПервыйЭлемент) Тогда
		ПервыйЭлемент = СтрЗаменить(ПервыйЭлемент, "_до", "");
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ПервыйЭлемент + "_группа", Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Если СоздаваемыеЭлементы.Количество() > 1 Тогда
		
		Группа = Форма.Элементы.Добавить(ПервыйЭлемент + "_группа_группа", Тип("ГруппаФормы"), Группа);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		Для каждого ДобавляемыйЭлемент Из СоздаваемыеЭлементы Цикл
			
			Элемент = Форма.Элементы.Добавить(ДобавляемыйЭлемент.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Группа);
			
			УстановитьСвойстваЭлемента(Форма, Элемент, ДобавляемыйЭлемент);
			
		КонецЦикла;
		
	Иначе
		
		Элемент = Форма.Элементы.Добавить(СоздаваемыеЭлементы[0].ИмяРеквизитаЗначение, Тип("ПолеФормы"), Группа);
		
		УстановитьСвойстваЭлемента(Форма, Элемент, СоздаваемыеЭлементы[0], ЗначенияВыбора);
		
	КонецЕсли;
	
КонецФункции

Функция НовыйОписаниеСвойства(ТаблицаОписание, НаборСвойств, Свойство, ЭтоСвойствоХарактеристики, Постфикс = "")
	
	НоваяСтрока = ТаблицаОписание.Добавить();
	НоваяСтрока.НаборСвойств                   = НаборСвойств;
	НоваяСтрока.Свойство                       = Свойство;
	НоваяСтрока.ВладелецДополнительныхЗначений = Свойство.ВладелецДополнительныхЗначений;
	НоваяСтрока.Заголовок                      = Свойство.Заголовок;
	НоваяСтрока.Наименование                   = Свойство.Наименование;
	НоваяСтрока.ТипЗначения                    = Свойство.ТипЗначения;
	НоваяСтрока.ФорматСвойства                 = Свойство.ФорматСвойства;
	НоваяСтрока.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(НоваяСтрока.ТипЗначения, Тип("Булево"));
	НоваяСтрока.СвойствоХарактеристики         = ЭтоСвойствоХарактеристики;
	
	НоваяСтрока.ДополнительноеЗначение = 
		УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(Свойство.ТипЗначения);
	
	Если ЗначениеЗаполнено(Постфикс) Тогда
		Постфикс = "_" + Постфикс;
	КонецЕсли;
	
	ИмяУникальнаяЧасть = 
			СтрЗаменить(ВРег(Строка(НаборСвойств.УникальныйИдентификатор())), "-", "x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(Свойство.УникальныйИдентификатор())), "-", "x")
			+ Постфикс;
	
	НоваяСтрока.ИмяРеквизитаЗначение =
			"ДополнительныйРеквизитЗначение_" + ИмяУникальнаяЧасть;
	
КонецФункции

Функция ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ИмяРеквизита)
	
	ПостфиксНачалаДиапазона = "_от";
	Возврат СтрНайти(ИмяРеквизита,
					ПостфиксНачалаДиапазона,, 
					СтрДлина(ИмяРеквизита) - СтрДлина(ПостфиксНачалаДиапазона) + 1) <> 0;
	
КонецФункции

Функция ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ИмяРеквизита)
	
	ПостфиксНачалаДиапазона = "_до";
	Возврат СтрНайти(ИмяРеквизита,
					ПостфиксНачалаДиапазона,, 
					СтрДлина(ИмяРеквизита) - СтрДлина(ПостфиксНачалаДиапазона) + 1) <> 0;
	
КонецФункции

Процедура ФункциональнаяОпцияИспользоватьХарактеристики()
	
	Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Установить(Истина);
	
КонецПроцедуры

Функция ДополнительныеЗначенияИспользуются(Тип)
	
	Возврат (Тип = "СправочникСсылка.ЗначенияСвойствОбъектов");
	
КонецФункции

Функция ВыборкаКатегорийПоНаименованию(Текст, Параметры, ПоказыватьСуществующие)
	
	Если СтрДлина(Текст)<3 Тогда
		Отбор = Текст+"%";
	Иначе
		Отбор = "%"+Текст+"%";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Отбор);
	Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
		Запрос.УстановитьПараметр("Режим", 1);
	ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
		Запрос.УстановитьПараметр("Режим", 2);
	Иначе
		Запрос.УстановитьПараметр("Режим", 0);
	КонецЕсли;
	
	ЗапросТекстСуществующие =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КатегорииНоменклатуры.Ссылка,
	|	КатегорииНоменклатуры.Наименование,
	|	ИСТИНА КАК Существующая,
	|	ЕСТЬNULL(КатегорииНоменклатуры.Родитель.Наименование, """") КАК Родитель,
	|	ЕСТЬNULL(КатегорииНоменклатуры.Родитель.Родитель.Наименование, """") КАК РодительРодитель
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Наименование ПОДОБНО &Текст
	|	И (&Режим = 0
	|			ИЛИ &Режим = 1
	|				И НЕ КатегорииНоменклатуры.ЭтоГруппа
	|			ИЛИ &Режим = 2
	|				И КатегорииНоменклатуры.ЭтоГруппа)
	|	И НЕ КатегорииНоменклатуры.ПометкаУдаления";
	
	ЗапросТекстКлассификатор =
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	КлассификаторКатегорийНоменклатуры.Ссылка,
	|	КлассификаторКатегорийНоменклатуры.Наименование,
	|	ЛОЖЬ КАК Существующая,
	|	ЕСТЬNULL(КлассификаторКатегорийНоменклатуры.Родитель.Наименование, """") КАК Родитель,
	|	ЕСТЬNULL(КлассификаторКатегорийНоменклатуры.Родитель.Родитель.Наименование, """") КАК РодительРодитель
	|ИЗ
	|	Справочник.КлассификаторКатегорийНоменклатуры КАК КлассификаторКатегорийНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ПО КлассификаторКатегорийНоменклатуры.Код = КатегорииНоменклатуры.КатегорияПоКлассификатору
	|ГДЕ
	|	КлассификаторКатегорийНоменклатуры.Наименование ПОДОБНО &Текст
	|	И КатегорииНоменклатуры.Ссылка ЕСТЬ NULL 
	|	И (&Режим = 0
	|			ИЛИ &Режим = 1
	|				И НЕ КлассификаторКатегорийНоменклатуры.ЭтоГруппа
	|			ИЛИ &Режим = 2
	|				И КлассификаторКатегорийНоменклатуры.ЭтоГруппа)";
	
	Если ПоказыватьСуществующие Тогда
		Запрос.Текст = "" + 
			ЗапросТекстСуществующие + "
			|ОБЪЕДИНИТЬ ВСЕ
			|" + 
			ЗапросТекстКлассификатор;
	Иначе
		Запрос.Текст = ЗапросТекстКлассификатор;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

Процедура СоздатьДополнительныеРеквизитыКатегории(Категория, КатегорияКлассификатора)
	
	ИспользоватьДополнительныеРеквизиты = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	Если НЕ ИспользоватьДополнительныеРеквизиты И КатегорияКлассификатора.ДополнительныеРеквизиты.Количество() <> 0 Тогда
		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	КонецЕсли;
	
	СвойстваНоменклатуры = КатегорияКлассификатора.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("СвойствоХарактеристики", Ложь));
	СвойстваХарактеристики = КатегорияКлассификатора.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("СвойствоХарактеристики", Истина));
	
	Если СвойстваНоменклатуры.Количество() <> 0 Тогда
		
		НаборСвойств = Категория.НаборСвойств;
		НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		
		Для каждого ДопРеквизитКлассификатора Из СвойстваНоменклатуры Цикл
			НовыйДопРеквизит(Категория, КатегорияКлассификатора, ДопРеквизитКлассификатора, НаборСвойствОбъект);
		КонецЦикла;
		
		НаборСвойствОбъект.Записать();
		
	КонецЕсли;
	
	Если СвойстваХарактеристики.Количество() <> 0 Тогда
		
		НаборСвойств = Категория.НаборСвойствХарактеристики;
		НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		
		Для каждого ДопРеквизитКлассификатора Из СвойстваХарактеристики Цикл
			НовыйДопРеквизит(Категория, КатегорияКлассификатора, ДопРеквизитКлассификатора, НаборСвойствОбъект);
		КонецЦикла;
		
		НаборСвойствОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НовыйДопРеквизит(Категория, КатегорияКлассификатора, ДопРеквизитКлассификатора, НаборСвойствОбъект)
	
	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ДопРеквизит.НаборСвойств = НаборСвойствОбъект.Ссылка;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип(ДопРеквизитКлассификатора.Тип));
	
	ДопРеквизит.Заголовок                          = ДопРеквизитКлассификатора.Наименование;
	ДопРеквизит.ТипЗначения                        = Новый ОписаниеТипов(МассивТипов,,, Новый КвалификаторыЧисла(10,2,ДопустимыйЗнак.Любой));
	ДопРеквизит.Виден                              = Истина;
	ДопРеквизит.Доступен                           = Истина;
	ДопРеквизит.ЭтоДополнительноеСведение          = Ложь;
	ДопРеквизит.ЗаполнятьОбязательно               = Ложь;
	ДопРеквизит.ДополнительныеЗначенияИспользуются = ДополнительныеЗначенияИспользуются(ДопРеквизитКлассификатора.Тип);
	ДопРеквизит.ДополнительныеЗначенияСВесом       = Ложь;
	ДопРеквизит.МногострочноеПолеВвода             = 0;
	ДопРеквизит.ВладелецДополнительныхЗначений     = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	ДопРеквизит.ЗаголовокФормыЗначения             = "";
	ДопРеквизит.ЗаголовокФормыВыбораЗначения       = "";
	ДопРеквизит.ФорматСвойства                     = "";
	ДопРеквизит.Комментарий                        = "";
	ДопРеквизит.Подсказка                          = "";
	ДопРеквизит.Наименование = ДопРеквизит.Заголовок + " (" + Категория.Наименование + ")";
	
	ДопРеквизит.Записать();
	
	НоваяСтрока = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
	НоваяСтрока.Свойство = ДопРеквизит.Ссылка;
	НоваяСтрока.ПометкаУдаления = Ложь;
	
	НаборСвойствОбъект.КоличествоРеквизитов = НаборСвойствОбъект.КоличествоРеквизитов + 1;
	
	ПараметрыОтбора = Новый Структура("Ключ", ДопРеквизитКлассификатора.Ключ);
	ЗначенияСвойства = КатегорияКлассификатора.ДополнительныеРеквизитыЗначения.НайтиСтроки(ПараметрыОтбора);
	Для каждого ЗначениеСвойства Из ЗначенияСвойства Цикл
		
		ЗначениеСвойстваДопРеквизита = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		ЗначениеСвойстваДопРеквизита.Владелец = ДопРеквизит.Ссылка;
		ЗначениеСвойстваДопРеквизита.Наименование = ЗначениеСвойства.Значение;
		
		ЗначениеСвойстваДопРеквизита.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтарыеРеквизитыИЭлементы(Форма, Список, СвойстваХарактеристики)
	
	Если СвойстваХарактеристики Тогда
		
		Отбор = Новый Структура("СвойствоХарактеристики", Истина);
		ЭлементыФормы = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
	Иначе
		
		ЭлементыФормы = Форма.СвойстваОписаниеДополнительныхРеквизитов;
		
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого ЭлементФормы Из ЭлементыФормы Цикл
		
		УдаляемыеРеквизиты.Добавить(ЭлементФормы.ИмяРеквизитаЗначение);
		
		ЭлементРеквизита = ЭлементФормы.ИмяРеквизитаЗначение;
		
		УдаляемыеЭлементы.Очистить();
		УдаляемыеЭлементы.Добавить(ЭлементРеквизита);
		
		ЭлементРеквизита = СтрЗаменить(ЭлементРеквизита, "_от", "");
		ЭлементРеквизита = СтрЗаменить(ЭлементРеквизита, "_до", "");
		
		ЭлементРеквизита = ЭлементРеквизита + "_группа";
		УдаляемыеЭлементы.Добавить(ЭлементРеквизита);
		
		ЭлементРеквизита = ЭлементРеквизита + "_группа";
		УдаляемыеЭлементы.Добавить(ЭлементРеквизита + "_группа" + "_группа");
		
		Для каждого ИмяЭлемента Из УдаляемыеЭлементы Цикл
			
			УдаляемыйЭлемент = Элементы.Найти(ИмяЭлемента);
			Если УдаляемыйЭлемент <> Неопределено Тогда
				
				Элементы.Удалить(УдаляемыйЭлемент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого УдаляемыйРеквизит Из УдаляемыеРеквизиты Цикл
		
		УдалитьОтборВСписке(Список, УдаляемыйРеквизит);
		
		Отбор = Новый Структура("ИмяРеквизитаЗначение", УдаляемыйРеквизит);
		Строки = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если Строки.Количество() <> 0 Тогда
			Форма.СвойстваОписаниеДополнительныхРеквизитов.Удалить(Строки[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

Процедура УдалитьОтборыСвойствПредыдущейКатегории(Форма, Список)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,,
		"ОтборПоСвойствамВыбраннойКатегории");
			
	ДанныеМеток = Форма.ДанныеМеток.Выгрузить(, "ИмяПоляОтбора");
	ДанныеМеток.Свернуть("ИмяПоляОтбора");
	Для каждого Метка Из ДанныеМеток Цикл
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,
			Метка.ИмяПоляОтбора);
		
	КонецЦикла;
	
	Форма.ДанныеМеток.Очистить();
	
КонецПроцедуры

Процедура УстановитьОтборВСписке(Список, ИмяПоля, ВидСравненияЗначения, Значение, Представление)
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоСвойствамВыбраннойКатегории");
	
	Если ГруппаОтбора = Неопределено Тогда
		
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
			"ОтборПоСвойствамВыбраннойКатегории",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	КонецЕсли;
	
	ЭлементОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
		ГруппаОтбора.Элементы,
		Представление);
	
	Если ЭлементОтбора = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора,
			ИмяПоля,
			ВидСравненияЗначения,
			Значение,
			Представление,
			Истина);
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,
			ИмяПоля,
			Представление,
			Значение,
			ВидСравненияЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОтборВСписке(Список, Представление)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,,
		Представление);
	
КонецПроцедуры

Процедура УдалитьСвойствоИзРегистра(Строка, НаборСвойств)
	
	Если ТипЗнч(Строка.Значение) = Тип("Число") Тогда
		
		Строка.Значение = 1;
		Строка.Значение = Неопределено;
		
	ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Булево") Тогда
		
		
		
	ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Дата") Тогда
		
		Строка.Значение = Дата(1, 1, 1, 0, 0, 0);
		Строка.Значение = Неопределено;
		
	ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Строка") Тогда
		
		Строка.Значение = "Истина";
		Строка.Значение = Неопределено;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаполненностьСвойствКатегорий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НаборСвойств.Установить(НаборСвойств);
	НаборЗаписей.Отбор.Свойство.Установить(Строка.Свойство);
	НаборЗаписей.Отбор.Значение.Установить(Строка.Значение);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Возврат;
		
	Иначе
		
		Запись = НаборЗаписей.Получить(0);
		Если Запись.Счетчик > 1 Тогда
			Запись.Счетчик = Запись.Счетчик - 1;
		Иначе
			НаборЗаписей.Удалить(Запись);
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСвойствоВРегистр(Строка, НаборСвойств)
	
	Если ТипЗнч(Строка.Значение) = Тип("Число") Тогда
		
		Строка.Значение = Неопределено;
		
	ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Дата") Тогда
		
		Строка.Значение = Неопределено;
		
	ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Строка") Тогда
		
		Строка.Значение = Неопределено;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаполненностьСвойствКатегорий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НаборСвойств.Установить(НаборСвойств);
	НаборЗаписей.Отбор.Свойство.Установить(Строка.Свойство);
	НаборЗаписей.Отбор.Значение.Установить(Строка.Значение);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НаборСвойств = НаборСвойств;
		НоваяЗапись.Свойство = Строка.Свойство;
		НоваяЗапись.Значение = Строка.Значение;
		НоваяЗапись.Счетчик = 1;
		НаборЗаписей.Записать();
		
	Иначе
		
		Запись = НаборЗаписей.Получить(0);
		Запись.Счетчик = Запись.Счетчик + 1;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолеОтбораДополнительногоРеквизитаИзОписанияСвойства(ОписаниеСвойства, КатегорияНоменклатуры)
	
	Если ОписаниеСвойства.НаборСвойств = КатегорияНоменклатуры.НаборСвойств Тогда
		РодительСвойства = "Ссылка.";
	ИначеЕсли ОписаниеСвойства.НаборСвойств = КатегорияНоменклатуры.НаборСвойствХарактеристики Тогда
		РодительСвойства = "Характеристика.";
	КонецЕсли;
	
	Возврат РодительСвойства + ОписаниеСвойства.Наименование;
	
КонецФункции

#КонецОбласти

#Область КлассификаторКатегорий

Процедура ОбновитьКлассификаторКатегорий() Экспорт
	
	МакетКлассификаторКатегорийНоменклатуры = Справочники.КлассификаторКатегорийНоменклатуры.
	                                          ПолучитьМакет("КлассификаторКатегорийНоменклатуры").ПолучитьТекст();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(МакетКлассификаторКатегорийНоменклатуры);
	
	НачатьТранзакцию();
	
	ЭтоУслуга = Ложь;
	Наименование = "";
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.Имя = "category" Тогда
				
				Наименование       = ЧтениеXML.ПолучитьАтрибут("name");
				
				Если Наименование = "Пирометры и тепловизоры" Тогда
					Сообщить("");
				КонецЕсли;
				
				Код                = Число(ЧтениеXML.ПолучитьАтрибут("id"));
				Код                = Формат(Код, "ЧГ=0,0");
				КодРодителя        = ЧтениеXML.ПолучитьАтрибут("parent-id");
				КодРодителя        = Формат(КодРодителя, "ЧГ=0,0");
				Если ЗначениеЗаполнено(КодРодителя) Тогда
					Родитель = Справочники.КлассификаторКатегорийНоменклатуры.НайтиПоКоду(КодРодителя);
				Иначе
					Родитель = Неопределено
				КонецЕсли;
				
				Если НЕ ЭтоУслуга Тогда
					ЭтоУслуга = ?(Наименование = "Услуги" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента, Истина, Ложь);
				КонецЕсли;
				ЭтоГруппа = ?(Число(ЧтениеXML.ПолучитьАтрибут("children-count")) = 0, Ложь, Истина);
				
				Категория = Справочники.КлассификаторКатегорийНоменклатуры.НайтиПоКоду(Код);
				
				Если Категория.Пустая() Тогда
					
					Если ЭтоГруппа Тогда
						Категория = Справочники.КлассификаторКатегорийНоменклатуры.СоздатьГруппу();
					Иначе
						Категория = Справочники.КлассификаторКатегорийНоменклатуры.СоздатьЭлемент();
					КонецЕсли;
					
					Категория.Код = Код;
					
				Иначе
					
					Категория = Категория.Ссылка.ПолучитьОбъект();
					
				КонецЕсли;
				
				Категория.Наименование = Наименование;
				
				Если ЭтоГруппа Тогда
					
					Категория.Записать();
					
					Если Родитель <> Неопределено Тогда
						
						Категория.Родитель = Родитель.Ссылка;
						Категория.Записать();
						
					КонецЕсли;
					
				Иначе
					
					Категория.ЭтоУслуга = ЭтоУслуга;
					
					ЗаполнитьФильтры(ЧтениеXML, Категория);
					
					Категория.Записать();
					
					Если Родитель <> Неопределено Тогда
						
						Категория.Родитель = Родитель.Ссылка;
						Категория.Записать();
						
					КонецЕсли; 
					
				КонецЕсли;
				
			Иначе
				
				ЭтоУслуга = ?(Наименование = "Услуги" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента, Истина, Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьФильтры(ЧтениеXML, Категория)
	
	Категория.ДополнительныеРеквизиты.Очистить();
	Категория.ДополнительныеРеквизитыЗначения.Очистить();
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "category" Тогда
			Прервать;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСвойствоХарактеристики = Ложь;
		Если ЧтениеXML.Имя = "filter" Тогда
			
			Наименование = ЧтениеXML.ПолучитьАтрибут("name");
			ТипФильтра = ЧтениеXML.ПолучитьАтрибут("type");
			Если ТипФильтра = "numeric" ИЛИ ТипФильтра = "NUMERIC" Тогда
				ТипДополнительногоРеквизита = "Число";
			ИначеЕсли ТипФильтра = "enum" ИЛИ ТипФильтра = "ENUMERATOR" Тогда
				ТипДополнительногоРеквизита = "СправочникСсылка.ЗначенияСвойствОбъектов";
			ИначеЕсли ТипФильтра = "bool" ИЛИ ТипФильтра = "BOOL" Тогда
				ТипДополнительногоРеквизита = "Булево";
			ИначеЕсли ТипФильтра = "text" ИЛИ ТипФильтра = "TEXT" Тогда
				ТипДополнительногоРеквизита = "Строка";
			КонецЕсли;
			
			ЭтоСвойствоХарактеристики = ЧтениеXML.ПолучитьАтрибут("is-characteristic");
			Если ЭтоСвойствоХарактеристики = Неопределено Тогда
				ЭтоСвойствоХарактеристики = Ложь;
			КонецЕсли;
			
			Ключ = Категория.ДополнительныеРеквизиты.Количество();
			
			НоваяСтрока = Категория.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Наименование = Наименование;
			НоваяСтрока.Тип          = ТипДополнительногоРеквизита;
			НоваяСтрока.Ключ         = Ключ;
			НоваяСтрока.СвойствоХарактеристики = ЭтоСвойствоХарактеристики;
			
		ИначеЕсли ЧтениеXML.Имя = "option" Тогда
		
			НоваяСтрока = Категория.ДополнительныеРеквизитыЗначения.Добавить();
			НоваяСтрока.Ключ = Ключ;
			НоваяСтрока.Значение = ЧтениеXML.ПолучитьАтрибут("name");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
