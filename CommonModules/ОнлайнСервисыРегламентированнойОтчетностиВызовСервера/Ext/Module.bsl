#Область ПрограммныйИнтерфейс

#Область НастрокиДоступаКРесурсуСАктуальнымиСведениями

Функция ПолучитьНастройкиМеханизмаОнлайнСервисовРО() Экспорт
	
	Результат = Новый Структура("Использовать, УведомлятьОбОшибках, АвтоматическиПодключатьФормыРО, РазрешитьДоступВИнтернет, ИспользоватьПрокси, ИмяПользователяПрокси, ПарольПрокси");
	
	// заполняем общие настройки
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ИспользоватьМеханизмОнлайнСервисовРО,
	                      |	Константы.УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО,
	                      |	Константы.АвтоматическиПодключатьФормыРОЧерезМеханизмОнлайнСервисовРО
	                      |ИЗ
	                      |	Константы КАК Константы");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Использовать = Выборка.ИспользоватьМеханизмОнлайнСервисовРО;
		Результат.УведомлятьОбОшибках = Выборка.УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО;
		Результат.АвтоматическиПодключатьФормыРО = Выборка.АвтоматическиПодключатьФормыРОЧерезМеханизмОнлайнСервисовРО;
	КонецЕсли;
	
	// заполняем индивидуальные настройки
	Результат.РазрешитьДоступВИнтернет	= ХранилищеОбщихНастроек.Загрузить("ОнлайнСервисыРО_ОбновлениеИнформацииИзИнтернетРазрешено");
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьОбщиеНастройкиМеханизмаОнлайнСервисовРО(ИспользоватьМеханизмОнлайнСервисовРО = Неопределено, УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО = Неопределено, АвтоматическиПодключатьФормыРОЧерезМеханизмОнлайнСервисовРО = Неопределено) Экспорт
	
	Если ИспользоватьМеханизмОнлайнСервисовРО <> Неопределено ИЛИ УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО <> Неопределено Тогда
		КонстантыНабор = Константы.СоздатьНабор("ИспользоватьМеханизмОнлайнСервисовРО, УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО, АвтоматическиПодключатьФормыРОЧерезМеханизмОнлайнСервисовРО");
		Если ИспользоватьМеханизмОнлайнСервисовРО <> Неопределено Тогда
			КонстантыНабор.ИспользоватьМеханизмОнлайнСервисовРО = ИспользоватьМеханизмОнлайнСервисовРО;
		КонецЕсли;
		Если УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО <> Неопределено Тогда
			КонстантыНабор.УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО = УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО;
		КонецЕсли;
		Если АвтоматическиПодключатьФормыРОЧерезМеханизмОнлайнСервисовРО <> Неопределено Тогда
			КонстантыНабор.АвтоматическиПодключатьФормыРОЧерезМеханизмОнлайнСервисовРО = АвтоматическиПодключатьФормыРОЧерезМеханизмОнлайнСервисовРО;
		КонецЕсли;
		КонстантыНабор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьИндивидуальныеНастройкиМеханизмаОнлайнСервисовРО(ОбновлениеИнформацииИзИнтернетРазрешено = Неопределено, ИспользоватьАвторизациюПрокси = Неопределено, 
	ИмяПользователяПрокси = Неопределено, ПарольПользователяПрокси = Неопределено) Экспорт
	
	Если ОбновлениеИнформацииИзИнтернетРазрешено <> Неопределено Тогда
		ХранилищеОбщихНастроек.Сохранить("ОнлайнСервисыРО_ОбновлениеИнформацииИзИнтернетРазрешено",	,ОбновлениеИнформацииИзИнтернетРазрешено);
		Если ОбновлениеИнформацииИзИнтернетРазрешено Тогда
			ХранилищеОбщихНастроек.Сохранить("ОнлайнСервисыРО_ДоступЗапрещенВерсияРелиза",,Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьСоединениеССерверомМеханизмаОнлайнСервисовРО(ОписаниеОшибки = Неопределено) Экспорт
	
	URLСервера = "downloads.1c.ru";
	
	// инициализируем настройки прокси, если они определены
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		Прокси = СформироватьПрокси(НастройкаПроксиСервера, "ftp");
	Иначе
		Прокси = Новый ИнтернетПрокси;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(URLСервера, , , , Прокси);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция СформироватьПрокси(НастройкиПрокси, Протокол)
	
	Прокси = Новый ИнтернетПрокси;
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкиПрокси["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Прокси.Установить(Протокол, НастройкиПрокси["Сервер"], СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НастройкиПрокси["Порт"]), НастройкиПрокси["Пользователь"], НастройкиПрокси["Пароль"]);
		
	Возврат Прокси;
	
КонецФункции

Функция ПолучитьРесурсССервера(Соединение, ИмяРесурсаНаСервере, ОписаниеОшибки = Неопределено) Экспорт
	
	ИспользуетсяТестовыйСервер = ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.ИспользоватьТестовыйСервер();

	ПутьККаталогуРесурсов = "/RO_OnlineServices/";
	Если ИспользуетсяТестовыйСервер Тогда
		ПутьККаталогуРесурсов = ПутьККаталогуРесурсов + "Test/";
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(ПутьККаталогуРесурсов + ИмяРесурсаНаСервере, ИмяВременногоФайла);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Процедура ВключитьМеханизмОнлайнСервисовРО() Экспорт
	
	ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СохранитьОбщиеНастройкиМеханизмаОнлайнСервисовРО(Истина, Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция ЗапуститьФоновоеЗаданиеАктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРО(УникальныйИдентификаторФормы, МожноЗагружатьВнешниеФормыОтчетов = Ложь) Экспорт
	
	Возврат ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификаторФормы, 
				"ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРО",
				Новый Структура("МожноЗагружатьВнешниеФормыОтчетов", МожноЗагружатьВнешниеФормыОтчетов),
				НСтр("ru = 'Производится обновление служебной информации из Интернет...'"));
			
КонецФункции

// Запускается в момент открытия формы управления обменом, актуализирует информацию по отчетам из Интернет
Процедура АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРО(ПараметрыОтчета, АдресХранилища) Экспорт
	
	МожноЗагружатьВнешниеФормыОтчетов = ПараметрыОтчета.МожноЗагружатьВнешниеФормыОтчетов;
	
	НастройкиМеханизмаОнлайнСервисов = ПолучитьНастройкиМеханизмаОнлайнСервисовРО();
	
	АвтоподключениеРОВключено = НастройкиМеханизмаОнлайнСервисов.АвтоматическиПодключатьФормыРО;
	УведомлятьОбОшибках = НастройкиМеханизмаОнлайнСервисов.УведомлятьОбОшибках;
	ОписаниеОшибки = "";
	
	// константы
	ИмяКлючевогоФайла					= "infomap.dat";
	РасширениеФайловНаСервере			= ".zip";
	
	ТипРесурсаСправочникФормИФорматов	= Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов;
	ТипРесурсаСправочникРелизов			= Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникРелизов;
	ТипРесурсаИнформацияОРелизе			= Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе;
	
	ИДРесурсаСправочникФормИФорматов	= "SFF";
	ИДРесурсаСправочникРелизов			= "IVS";
	
	ДатаПолученияРесурсов				= ТекущаяДата();
	
	// объявляем "таблицу-результат"
	ТаблицаАктуальныхРесурсов = Новый ТаблицаЗначений;
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("Тип");
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("Имя");
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("Данные");
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("ДатаПолучения");
	
	// показываем окно "Подождите, пожалуйста..."
	ВремяОткрытияФормыПодождите = ТекущаяДата();
	
	// устанавливаем соединение с сервером
	Соединение = УстановитьСоединениеССерверомМеханизмаОнлайнСервисовРО(ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		ОписаниеОшибки = "Ошибка установки соединения с сервером справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		Если УведомлятьОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// получаем ключевой файл
	ИмяВременногоКлючевогоФайла = ПолучитьРесурсССервера(Соединение, ИмяКлючевогоФайла, ОписаниеОшибки);
	Если ИмяВременногоКлючевогоФайла = Неопределено Тогда
		ОписаниеОшибки = "Ошибка получения ключевого файла с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		Если УведомлятьОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// считываем ключевой файл
	СодержимоеКлючевогоФайла = ПрочитатьТекстовыйФайл(ИмяВременногоКлючевогоФайла, ОписаниеОшибки, Истина);
	Если СодержимоеКлючевогоФайла = Неопределено Тогда
		ОписаниеОшибки = "Некорректный формат ключевого файла" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		Если УведомлятьОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// разбираем ключевой файл
	РезультатРазбораКлючевогоФайла = РазобратьСодержимоеКлючевогоФайла(СодержимоеКлючевогоФайла, ОписаниеОшибки);
	Если НЕ ЗначениеЗаполнено(РезультатРазбораКлючевогоФайла) Тогда
		ОписаниеОшибки = "Некорректный формат ключевого файла" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		Если УведомлятьОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// получаем версии файлов, хранимых в ИБ, для сравнения с опубликованными на сервере
	ХранимаяВИБИнформация = ПолучитьХранимуюВИБИнформациюМеханизмаОнлайнСервисовРО();
	
	// актуализация справочника форм и форматов
	ИмяФайлаСправочникаФормаИФорматов = РезультатРазбораКлючевогоФайла[ИДРесурсаСправочникФормИФорматов];
	СвойстваХранимогоВИБСправочникаФормИФорматов = ХранимаяВИБИнформация[ТипРесурсаСправочникФормИФорматов];
	Если ИмяФайлаСправочникаФормаИФорматов <> Неопределено Тогда
		
		// получаем версию хранящейся в ИБ информации
		ИмяХранимогоВИБФайла = ?(СвойстваХранимогоВИБСправочникаФормИФорматов = Неопределено, Неопределено, СвойстваХранимогоВИБСправочникаФормИФорматов.Имя);
		
		Если ИмяФайлаСправочникаФормаИФорматов <> ИмяХранимогоВИБФайла Тогда
		
			// получаем файл с сервера
			ИмяВременногоФайлаСправочникаФормИФорматов = ПолучитьРесурсССервера(Соединение, ИмяФайлаСправочникаФормаИФорматов + РасширениеФайловНаСервере, ОписаниеОшибки);
			Если ИмяВременногоФайлаСправочникаФормИФорматов = Неопределено Тогда
				ОписаниеОшибки = "Ошибка получения файла справочника форм и форматов с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// распаковываем полученный файл
			РезультатРаспаковки = РаспаковатьФайл(ИмяВременногоФайлаСправочникаФормИФорматов, ОписаниеОшибки);
			Если НЕ РезультатРаспаковки Тогда
				ОписаниеОшибки = "Некорректный формат файла - справочника форм и форматов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// считываем содержимое
			СодержимоеСправочникаФормИФорматов = ПрочитатьТекстовыйФайл(ИмяВременногоФайлаСправочникаФормИФорматов, ОписаниеОшибки, Истина);
			Если СодержимоеСправочникаФормИФорматов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла - справочника форм и форматов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// загружаем XML в дерево
			ДеревоСправочникаФормИФорматов = ЗагрузитьСтрокуXMLВДеревоЗначений(СодержимоеСправочникаФормИФорматов, ОписаниеОшибки);
			Если ДеревоСправочникаФормИФорматов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника форм и форматов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// сохраняем полученную XML-строку в таблице-результате
			ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, ИмяФайлаСправочникаФормаИФорматов, СодержимоеСправочникаФормИФорматов, ДатаПолученияРесурсов);
			
		Иначе
			Если СвойстваХранимогоВИБСправочникаФормИФорматов = Неопределено Тогда
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, , , ДатаПолученияРесурсов);
			Иначе
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, СвойстваХранимогоВИБСправочникаФормИФорматов.Имя, СвойстваХранимогоВИБСправочникаФормИФорматов.Данные, СвойстваХранимогоВИБСправочникаФормИФорматов.ДатаПолучения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвойстваХранимогоВИБСправочникаФормИФорматов = Неопределено Тогда
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, , , ДатаПолученияРесурсов);
	Иначе
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, , , ?(ЗначениеЗаполнено(СвойстваХранимогоВИБСправочникаФормИФорматов.Имя), ДатаПолученияРесурсов, СвойстваХранимогоВИБСправочникаФормИФорматов.ДатаПолучения));
	КонецЕсли;
	
	// актуализация справочника релизов
	ДеревоСправочникаРелизов = Неопределено;
	ИмяФайлаСправочникаРелизов = РезультатРазбораКлючевогоФайла[ИДРесурсаСправочникРелизов];
	СвойстваХранимогоВИБСправочникаРелизов = ХранимаяВИБИнформация[ТипРесурсаСправочникРелизов];
	Если ИмяФайлаСправочникаРелизов <> Неопределено Тогда
		
		// получаем версию хранящейся в ИБ информации
		ИмяХранимогоВИБФайла = ?(СвойстваХранимогоВИБСправочникаРелизов = Неопределено, Неопределено, СвойстваХранимогоВИБСправочникаРелизов.Имя);
		
		Если ИмяФайлаСправочникаРелизов <> ИмяХранимогоВИБФайла Тогда
		
			// получаем файл
			ИмяВременногоФайлаСправочникаРелизов = ПолучитьРесурсССервера(Соединение, ИмяФайлаСправочникаРелизов + РасширениеФайловНаСервере, ОписаниеОшибки);
			Если ИмяВременногоФайлаСправочникаРелизов = Неопределено Тогда
				ОписаниеОшибки = "Ошибка получения справочника релизов с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// распаковываем полученный файл
			РезультатРаспаковки = РаспаковатьФайл(ИмяВременногоФайлаСправочникаРелизов, ОписаниеОшибки);
			Если НЕ РезультатРаспаковки Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// считываем содержимое
			СодержимоеФайлаСправочникаРелизов = ПрочитатьТекстовыйФайл(ИмяВременногоФайлаСправочникаРелизов, ОписаниеОшибки, Истина);
			Если НЕ ЗначениеЗаполнено(СодержимоеФайлаСправочникаРелизов) Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// загружаем XML в дерево
			ДеревоСправочникаРелизов = ЗагрузитьСтрокуXMLВДеревоЗначений(СодержимоеФайлаСправочникаРелизов, ОписаниеОшибки);
			Если ДеревоСправочникаРелизов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			// сохраняем полученную XML-строку в таблице-результате
			ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, ИмяФайлаСправочникаРелизов, СодержимоеФайлаСправочникаРелизов, ДатаПолученияРесурсов);
			
		Иначе
			Если СвойстваХранимогоВИБСправочникаРелизов = Неопределено Тогда
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, , , ДатаПолученияРесурсов);
			Иначе
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, СвойстваХранимогоВИБСправочникаРелизов.Имя, СвойстваХранимогоВИБСправочникаРелизов.Данные, СвойстваХранимогоВИБСправочникаРелизов.ДатаПолучения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвойстваХранимогоВИБСправочникаРелизов = Неопределено Тогда
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, , , ДатаПолученияРесурсов);
	Иначе
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, , , ?(ЗначениеЗаполнено(СвойстваХранимогоВИБСправочникаРелизов.Имя), ДатаПолученияРесурсов, СвойстваХранимогоВИБСправочникаРелизов.ДатаПолучения));
	КонецЕсли;
	
	
	// актуализация информации о текущем релизе
	СвойстваХранимогоВИБФайлаСИнформациейОРелизе = ХранимаяВИБИнформация[ТипРесурсаИнформацияОРелизе];
	СтрСправочникРелизов = ТаблицаАктуальныхРесурсов.Найти(ТипРесурсаСправочникРелизов, "Тип");
	Если СтрСправочникРелизов <> Неопределено И ЗначениеЗаполнено(СтрСправочникРелизов.Данные) Тогда
		
		// формируем дерево справочника релизов, если оно еще не было сформировано
		Если ДеревоСправочникаРелизов = Неопределено Тогда
			ДеревоСправочникаРелизов = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрСправочникРелизов.Данные, ОписаниеОшибки);
			Если ДеревоСправочникаРелизов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				Если УведомлятьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаСИнформациейОТекущемРелизе = ИзвлечьИмяФайлаСИнформациейОТекущемРелизеИзДереваСправочникаРелизов(ДеревоСправочникаРелизов);
		
		// получаем версию хранящейся в ИБ информации
		ИмяХранимогоВИБФайла = ?(СвойстваХранимогоВИБФайлаСИнформациейОРелизе = Неопределено, Неопределено, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Имя);
		
		Если ИмяФайлаСИнформациейОТекущемРелизе <> Неопределено Тогда
			
			Если ИмяФайлаСИнформациейОТекущемРелизе <> ИмяХранимогоВИБФайла Тогда
			
				// получаем файл
				ИмяВременногоФайлаСИнформациейОТекущемРелизе = ПолучитьРесурсССервера(Соединение, ИмяФайлаСИнформациейОТекущемРелизе + РасширениеФайловНаСервере, ОписаниеОшибки);
				Если ИмяВременногоФайлаСИнформациейОТекущемРелизе = Неопределено Тогда
					ОписаниеОшибки = "Ошибка получения информации о текущем релизе с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
					Если УведомлятьОбОшибках Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
				
				// распаковываем полученный файл
				РезультатРаспаковки = РаспаковатьФайл(ИмяВременногоФайлаСИнформациейОТекущемРелизе, ОписаниеОшибки);
				Если НЕ РезультатРаспаковки Тогда
					ОписаниеОшибки = "Некорректный формат файла с информацией о текущем релизе" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
					Если УведомлятьОбОшибках Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
				
				// считываем содержимое
				СодержимоеФайлаСИнформациейОТекущемРелизе = ПрочитатьТекстовыйФайл(ИмяВременногоФайлаСИнформациейОТекущемРелизе, ОписаниеОшибки, Истина);
				Если НЕ ЗначениеЗаполнено(СодержимоеФайлаСИнформациейОТекущемРелизе) Тогда
					ОписаниеОшибки = "Некорректный формат файла с информацией о текущем релизе" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
					Если УведомлятьОбОшибках Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
				
				// сохраняем полученную XML-строку в таблице-результате
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, ИмяФайлаСИнформациейОТекущемРелизе, СодержимоеФайлаСИнформациейОТекущемРелизе, ДатаПолученияРесурсов);
				
			Иначе
				Если СвойстваХранимогоВИБФайлаСИнформациейОРелизе = Неопределено Тогда
					ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ДатаПолученияРесурсов);
				Иначе
					ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Имя, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Данные, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.ДатаПолучения);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ДатаПолученияРесурсов);
		КонецЕсли;
		
	ИначеЕсли СвойстваХранимогоВИБФайлаСИнформациейОРелизе = Неопределено Тогда
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ДатаПолученияРесурсов);
	Иначе
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ?(ЗначениеЗаполнено(СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Имя), ДатаПолученияРесурсов, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.ДатаПолучения));
	КонецЕсли;
	
	// считываем информацию из кэша механизма
	НаборЗаписей = РегистрыСведений.РесурсыМеханизмаОнлайнСервисовРО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	// перебираем имеющиеся записи и перезаписываем их новыми данными
	ЧислоЗаписей = НаборЗаписей.Количество();
	Для Инд = 0 По ЧислоЗаписей - 1 Цикл
		ТекЗапись = НаборЗаписей.Получить(Инд);
		ТекЗаписьТип = ТекЗапись.Тип;
		СтрТекТип = ТаблицаАктуальныхРесурсов.Найти(ТекЗаписьТип, "Тип");
		Если СтрТекТип <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекЗапись, СтрТекТип);
			ТаблицаАктуальныхРесурсов.Удалить(СтрТекТип);
		КонецЕсли;
	КонецЦикла;
	
	// добавляем новые записи
	Для Каждого Стр Из ТаблицаАктуальныхРесурсов Цикл
		НовСтр = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	
	// записываем новый набор
	Если НаборЗаписей.Модифицированность() Тогда
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОписаниеОшибки = "Ошибка сохранения в информационной базе информации, полученной с сервера: " + ИнформацияОбОшибке().Описание;
			Если УведомлятьОбОшибках Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если АвтоподключениеРОВключено <> Истина ИЛИ МожноЗагружатьВнешниеФормыОтчетов <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// проверим необходимость обновления отчетов в справочнике РО
	ТаблицаВнешнихФормРО = ПолучитьТаблицуВнешнихФормРО();
	Если ТаблицаВнешнихФормРО = Неопределено ИЛИ ТаблицаВнешнихФормРО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьВнешниеОтчетыВСправочникРО(ТаблицаВнешнихФормРО);
	
	ОбновленныеВнешниеФормыРО = Новый Массив;
	Для каждого ПараметрыВнешнейФормыРО Из ТаблицаВнешнихФормРО Цикл
		Если ПараметрыВнешнейФормыРО.РезультатСравнения = 3 Тогда // внешний отчет загружен
			ТекстСообщения = "Форма загружена в справочник регламентированных отчетов" + Символы.ПС + ПараметрыВнешнейФормыРО.ДопИнформация;
			ОбновленныеВнешниеФормыРО.Добавить(ТекстСообщения);
		ИначеЕсли ПараметрыВнешнейФормыРО.РезультатСравнения = 4 Тогда // внешний отчет отключен
			ТекстСообщения = "В справочнике регламентированных отчетов отключена внешняя форма отчета" + Символы.ПС + """" + ПараметрыВнешнейФормыРО.Представление + """";
			ОбновленныеВнешниеФормыРО.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ОбновленныеВнешниеФормыРО, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьТаблицуБлокировокОбъектовРО() Экспорт
	
	// пытаемся получить из кэша актуальную таблицу блокировок
	ИнформацияОРелизеСвед = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе, Ложь);
	
	// если в кэше актуальной таблицы нет, то получим XML с данными из регистра
	СтрДанныеТекущегоРелиза = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе);
	Если СтрДанныеТекущегоРелиза.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрИнформацияОТекущемРелизе = СтрДанныеТекущегоРелиза[0].Данные;
	Если НЕ ЗначениеЗаполнено(СтрИнформацияОТекущемРелизе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразуем XML к дереву
	ДеревоДанных = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрИнформацияОТекущемРелизе);
	Если НЕ ЗначениеЗаполнено(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем - соответствует ли информация текущему релизу (возможно, в ИБ информация об одном из прошлых релизов)
	Если ИнформацияОРелизеСоответствуетТекущейПрограмме(ДеревоДанных) <> Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переводим дерево XML в таблицу
	ТаблицаБлокировокОбъектовРО = ЗаполнитьТаблицуБлокировокОбъектовРОНаОсновеДереваИнформацииОТекущемРелизе(ДеревоДанных);
	
	Возврат ТаблицаБлокировокОбъектовРО;
	
КонецФункции

Функция ПолучитьТаблицуВнешнихФормРО()
	
	// пытаемся получить из кэша информацию о релизе
	ИнформацияОРелизеСвед = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе, Ложь);
	
	// если в кэше актуальной таблицы нет, то получим XML с данными из регистра
	СтрДанныеТекущегоРелиза = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе);
	Если СтрДанныеТекущегоРелиза.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрИнформацияОТекущемРелизе = СтрДанныеТекущегоРелиза[0].Данные;
	Если НЕ ЗначениеЗаполнено(СтрИнформацияОТекущемРелизе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразуем XML к дереву
	ДеревоДанных = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрИнформацияОТекущемРелизе);
	Если НЕ ЗначениеЗаполнено(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем - соответствует ли информация текущему релизу (возможно, в ИБ информация об одном из прошлых релизов)
	Если ИнформацияОРелизеСоответствуетТекущейПрограмме(ДеревоДанных) <> Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переводим дерево XML в таблицу
	ТаблицаВнешнихФормРО = ЗаполнитьТаблицуВнешнихФормРОНаОсновеДереваИнформацииОТекущемРелизе(ДеревоДанных);
	
	// ставим в соответствие каждой внешней форме отчета элемент справочника регламентированной отчетности
	НазначитьЭлементыСправочникаРОВнешнимФормамРО(ТаблицаВнешнихФормРО);
	
	Возврат ТаблицаВнешнихФормРО;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВерсияПрограммы() Экспорт
	
	Возврат Метаданные.Версия;
	
КонецФункции

Функция ПрочитатьТекстовыйФайл(ИмяФайла, ОписаниеОшибки, УдалятьПослеПрочтения = Ложь)
	
	Попытка
		ОбъектЧтение = Новый ЧтениеТекста(ИмяФайла);
		Результат = ОбъектЧтение.Прочитать();
		ОбъектЧтение.Закрыть();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Результат = Неопределено;
	КонецПопытки;
	
	Если УдалятьПослеПрочтения Тогда
		УдалитьФайл(ИмяФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьСодержимоеКлючевогоФайла(Стр, ОписаниеОшибки = Неопределено)
	
	Результат = Новый Соответствие;
	Разделитель = "=";
	Для НомСтр = 1 По СтрЧислоСтрок(Стр) Цикл
		ТекСтр = СтрПолучитьСтроку(Стр, НомСтр);
		ВхождениеРазделителя = СтрНайти(ТекСтр, Разделитель);
		Если ВхождениеРазделителя <> 0 Тогда
			СтрКлюч = СокрЛП(Лев(ТекСтр, ВхождениеРазделителя - 1));
			СтрЗначение = СокрЛП(Сред(ТекСтр, ВхождениеРазделителя + 1));
			Если ЗначениеЗаполнено(СтрКлюч) И ЗначениеЗаполнено(СтрЗначение) Тогда
				Результат.Вставить(СтрКлюч, СтрЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьХранимуюВИБИнформациюМеханизмаОнлайнСервисовРО()
	
	ДанныеМеханизма = ПолучитьДанныеМеханизмаОнлайнСервисовРО();
	
	Результат = Новый Соответствие;
	Для Каждого Стр Из ДанныеМеханизма Цикл
		Результат.Вставить(Стр.Тип, Новый Структура("Имя, Данные, ДатаПолучения", СокрЛП(Стр.Имя), СокрЛП(Стр.Данные), Стр.ДатаПолучения));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеМеханизмаОнлайнСервисовРО(ФильтрПоТипу = Неопределено, СДанными = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Тип,
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Имя,
	                      |	РесурсыМеханизмаОнлайнСервисовРО.ДатаПолучения";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                      |ИЗ
	                      |	РегистрСведений.РесурсыМеханизмаОнлайнСервисовРО КАК РесурсыМеханизмаОнлайнСервисовРО";
	Если ЗначениеЗаполнено(ФильтрПоТипу) Тогда
		Запрос.Текст = Запрос.Текст + "
		                  |ГДЕ
		                  |	РесурсыМеханизмаОнлайнСервисовРО.Тип В (&ТипыДанных)";
		Запрос.УстановитьПараметр("ТипыДанных", ФильтрПоТипу);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РаспаковатьФайл(ФайлАрхива, ОписаниеОшибки = Неопределено)
	
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла;
		ЧтениеЗИП.Открыть(ФайлАрхива);
		Если ЧтениеЗИП.Элементы.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		ПервыйЭлементАрхива = ЧтениеЗИП.Элементы.Получить(0);
		ИмяПервогоФайлаАрхива = ПервыйЭлементАрхива.Имя;
		ВременныйКаталог = ПолучитьИмяВременногоФайла() + "\";
		СоздатьКаталог(ВременныйКаталог);
		ЧтениеЗИП.Извлечь(ПервыйЭлементАрхива, ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЧтениеЗИП.Закрыть();
		УдалитьФайл(ФайлАрхива);
		ПереместитьФайл(ВременныйКаталог + ИмяПервогоФайлаАрхива, ФайлАрхива);
		УдалитьФайл(ВременныйКаталог);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаРесурсов, Тип, Имя = "", Данные = "", ДатаПолучения = Неопределено)
	
	НовСтр = ТаблицаРесурсов.Добавить();
	НовСтр.Тип				= Тип;
	НовСтр.Имя				= Имя;
	НовСтр.Данные			= Данные;
	НовСтр.ДатаПолучения	= ?(ДатаПолучения = Неопределено, ТекущаяДата(), ДатаПолучения);
	
КонецПроцедуры

Функция ИзвлечьИмяФайлаСИнформациейОТекущемРелизеИзДереваСправочникаРелизов(ДеревоСправочникаРелизов)
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	// если формат "непонятный", то разбирать не будем
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоСправочникаРелизов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Стр1 Из ДеревоСправочникаРелизов.Строки Цикл // уровень узла Файл
		Для Каждого Стр2 Из Стр1.Строки Цикл // уровень узла Платформа
			Если Стр2.Тип = "Э" И ТекущаяПлатформаСоответствуетУзлу(Стр2, ИнформацияОПрограмме.ВерсияПлатформы) Тогда
				Для Каждого Стр3 Из Стр2.Строки Цикл // уровень узла Конфигурация
					Если Стр3.Тип = "Э" И ТекущаяКонфигурацияСоответствуетУзлу(Стр3, ИнформацияОПрограмме) Тогда
						Для Каждого Стр4 Из Стр3.Строки Цикл // уровень узла Релиз
							Если Стр4.Тип = "Э" Тогда
								РезультатПоискаАтрибутаСВерсиейРелиза = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Верс", "А"));
								Если РезультатПоискаАтрибутаСВерсиейРелиза.Количество() = 0 Тогда
									Возврат Неопределено;
								КонецЕсли;
								ВерсияРелиза = СокрЛП(РезультатПоискаАтрибутаСВерсиейРелиза[0].Значение);
								Если ВерсияРелиза = ИнформацияОПрограмме.ВерсияКонфигурации Тогда
									РезультатПоискаАтрибутаСИменемФайла = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Свед", "А"));
									Если РезультатПоискаАтрибутаСИменемФайла.Количество() = 0 Тогда
										Возврат Неопределено;
									КонецЕсли;
									УзелАтрибутСИменемФайла = РезультатПоискаАтрибутаСИменемФайла[0];
									Возврат ?(ЗначениеЗаполнено(УзелАтрибутСИменемФайла.Значение), СокрЛП(УзелАтрибутСИменемФайла.Значение), Неопределено);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьФайл(ИмяФайла)
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ИнформацияОПрограмме() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияПлатформы",			ПолучитьВерсиюТекущейПлатформы());
	Результат.Вставить("ИмяМетаданныхКонфигурации",	СокрЛП(Метаданные.Имя));
	Результат.Вставить("ИДКонфигурации",			РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации());
	Результат.Вставить("ВерсияКонфигурации",		СокрЛП(Метаданные.Версия));
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВерсиюТекущейПлатформы()
	
	ОбъектСисИнфо = Новый СистемнаяИнформация;
	Возврат СокрЛП(ОбъектСисИнфо.ВерсияПриложения);
	
КонецФункции

Функция РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Экспорт
	
	НомерРедакцииФормата = "1";
	
	Для Каждого Стр Из ДеревоДанных.Строки Цикл
		АтрибутыКлючевогоУзла = ПолучитьАтрибутыУзла(Стр);
		Если АтрибутыКлючевогоУзла.Свойство("Формат") Тогда
			ФорматИнформации = АтрибутыКлючевогоУзла.Формат;
			Если ЗначениеЗаполнено(ФорматИнформации) Тогда
				СоставляющиеФорматаИнформации = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФорматИнформации), ".");
				Если СоставляющиеФорматаИнформации.Количество() > 0 И СоставляющиеФорматаИнформации[0] = НомерРедакцииФормата Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПорядокПоНомеруВерсии(НомерВерсии) Экспорт
	
	Результат = "";

	МассивСоставляющих = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомерВерсии, ".");
	Для Инд = 0 По МассивСоставляющих.Количество() - 1 Цикл
		ТекСоставляющая = СокрЛП(МассивСоставляющих[Инд]);
		Для НомСимв = СтрДлина(ТекСоставляющая) + 1 По 5 Цикл
			ТекСоставляющая = "0" + ТекСоставляющая;
		КонецЦикла;
		Результат = Результат + ТекСоставляющая;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекущаяПлатформаСоответствуетУзлу(УзелПлатформа, ВерсияТекущейПлатформы)
	
	РезультатПоискаАтрибута = УзелПлатформа.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Верс", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ШаблонВерсии = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Возврат ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии);
	КонецЕсли;
	
КонецФункции

Функция ТекущаяКонфигурацияСоответствуетУзлу(УзелКонфигурация, ИнформацияОПрограмме)
	
	РезультатПоискаАтрибута = УзелКонфигурация.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ИД", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ИДКонфигурацииУзла = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Если ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, ИДКонфигурацииУзла)
		ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, ИДКонфигурацииУзла) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАтрибутыУзла(Узел) Экспорт
	
	УзлыАтрибуты = Узел.Строки.НайтиСтроки(Новый Структура("Тип", "А"));
	
	АтрибутыУзла = Новый Структура;
	Для Каждого УзелАтрибут Из УзлыАтрибуты Цикл
		АтрибутыУзла.Вставить(УзелАтрибут.Имя, УзелАтрибут.Значение);
	КонецЦикла;
	
	Возврат АтрибутыУзла;
	
КонецФункции

Функция ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии) Экспорт
	
	МассивЧастейШаблона = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ШаблонВерсии, ".");
	МассивЧастейТекущейВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсияТекущейПлатформы, ".");
	
	Для Инд = 0 По МассивЧастейШаблона.Количество() - 1 Цикл
		Если МассивЧастейТекущейВерсии.Количество() <= Инд Тогда
			Прервать;
		КонецЕсли;
		ТекущаяЧастьШаблона = МассивЧастейШаблона[Инд];
		ТекущаяЧастьТекущейВерсии = МассивЧастейТекущейВерсии[Инд];
		Если НЕ ЧастьВерсииСоответствуетЧастиШаблонаВерсии(ТекущаяЧастьТекущейВерсии, ТекущаяЧастьШаблона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ИДТекущейКонфигурацииСоответствуетШаблону(ИДТекущейКонфигурации, ИДКонфигурации) Экспорт
	
	Возврат ВРЕГ(СокрЛП(ИДТекущейКонфигурации)) = ВРЕГ(СокрЛП(ИДКонфигурации));
	
КонецФункции

Функция ЧастьВерсииСоответствуетЧастиШаблонаВерсии(Знач ЧастьТекущейВерсии, Знач ЧастьШаблона)
	
	ЧастьТекущейВерсии = СокрЛП(ЧастьТекущейВерсии);
	ЧастьШаблона = СокрЛП(ЧастьШаблона);
	
	Если Лев(ЧастьШаблона, 1) <> "[" ИЛИ Прав(ЧастьШаблона, 1) <> "]" Тогда
		Возврат (ЧастьШаблона = ЧастьТекущейВерсии);
	КонецЕсли;
	
	ЧастьШаблона = СокрЛП(Сред(ЧастьШаблона, 2, СтрДлина(ЧастьШаблона) - 2));
	СоставляющиеЧастиШаблона = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЧастьШаблона, ",");
	Если СоставляющиеЧастиШаблона.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИДПеременной = "X";
	Для Каждого Составляющее Из СоставляющиеЧастиШаблона Цикл
		Если ЗначениеЗаполнено(Составляющее) Тогда
			Если НЕ УсловиеВыполняется(Составляющее, ИДПеременной, ЧастьТекущейВерсии) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УсловиеВыполняется(Условие, ИДПеременной, ЗначениеПеременной)
	
	РезультатВычисления = Неопределено;
	Попытка
		РезультатВычисления = Вычислить(СтрЗаменить(Условие, ИДПеременной, ЗначениеПеременной));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(РезультатВычисления) <> Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат РезультатВычисления;
	КонецЕсли;
	
КонецФункции

Функция МеханизмОнлайнСервисовВключен() Экспорт
	
	Возврат Константы.ИспользоватьМеханизмОнлайнСервисовРО.Получить();
	
КонецФункции

Функция ИнформацияОРелизеСоответствуетТекущейПрограмме(Данные) Экспорт
	
	УзлыФайл = Данные.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Файл", "Э"));
	Если УзлыФайл.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелФайл = УзлыФайл[0];
	
	УзлыРелиз = УзелФайл.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Рлз", "Э"));
	Если УзлыРелиз.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелРелиз = УзлыРелиз[0];
	
	АтрибутыУзла = ПолучитьАтрибутыУзла(УзелРелиз);
	
	Если НЕ АтрибутыУзла.Свойство("Верс")
	 ИЛИ НЕ АтрибутыУзла.Свойство("Платф")
	 ИЛИ НЕ АтрибутыУзла.Свойство("ИД") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Если НЕ ВерсияТекущейПлатформыСоответствуетШаблону(ИнформацияОПрограмме.ВерсияПлатформы, АтрибутыУзла.Платф)
	 ИЛИ НЕ (ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, АтрибутыУзла.ИД)
	 ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, АтрибутыУзла.ИД))
	 ИЛИ НЕ ИнформацияОПрограмме.ВерсияКонфигурации = АтрибутыУзла.Верс Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьТаблицуВнешнихФормРОНаОсновеДереваИнформацииОТекущемРелизе(ИнформацияОТекущемРелизе)
	
	ТаблицаВнешнихФормРО = СоздатьТаблицуВнешнихФормРО();
	
	УзлыФайл = ИнформацияОТекущемРелизе.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Файл", "Э"));
	Если УзлыФайл.Количество() = 0 Тогда
		Возврат ТаблицаВнешнихФормРО;
	КонецЕсли;
	УзелФайл = УзлыФайл[0];
	
	УзлыРелиз = УзелФайл.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Рлз", "Э"));
	Если УзлыРелиз.Количество() = 0 Тогда
		Возврат ТаблицаВнешнихФормРО;
	КонецЕсли;
	УзелРелиз = УзлыРелиз[0];
	
	// заполняем информацию о внешних отчетах
	УзлыДочерниеВыпуски = УзелРелиз.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ДочВып", "Э"));
	Если УзлыДочерниеВыпуски.Количество() > 0 Тогда
		
		УзелДочерниеВыпуски = УзлыДочерниеВыпуски[0];
		Для Каждого УзелВыпуск Из УзелДочерниеВыпуски.Строки Цикл
			
			Если УзелВыпуск.Имя = "Вып" И УзелВыпуск.Тип = "Э" Тогда
				
				АтрибутыУзла = ПолучитьАтрибутыУзла(УзелВыпуск);
				
				ВерсияОбъекта = ?(АтрибутыУзла.Свойство("Верс") И ЗначениеЗаполнено(АтрибутыУзла.Верс), СокрЛП(АтрибутыУзла.Верс), Неопределено);
				ДатаВыпуска   = ?(АтрибутыУзла.Свойство("ДатаВ") И ЗначениеЗаполнено(АтрибутыУзла.ДатаВ), СокрЛП(АтрибутыУзла.ДатаВ), Неопределено);
				ДопИнформация = ?(АтрибутыУзла.Свойство("ДопИнф") И ЗначениеЗаполнено(АтрибутыУзла.ДопИнф), СокрЛП(АтрибутыУзла.ДопИнф), "");
				ВебСсылка     = ?(АтрибутыУзла.Свойство("URL") И ЗначениеЗаполнено(АтрибутыУзла.URL), СокрЛП(АтрибутыУзла.URL), "");
				
				УзлыОбъекты = УзелВыпуск.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Обкты", "Э"));
				Если УзлыОбъекты.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				УзлыОбъект = УзлыОбъекты[0];
				
				Для Каждого УзелОбъект Из УзлыОбъект.Строки Цикл
					Если УзелОбъект.Имя = "Обкт" ИЛИ УзелОбъект.Тип = "Э" Тогда
						АтрибутыУзлаОбъект = ПолучитьАтрибутыУзла(УзелОбъект);
						ИсточникОтчета      = ?(АтрибутыУзлаОбъект.Свойство("ИД") И ЗначениеЗаполнено(АтрибутыУзлаОбъект.ИД), СокрЛП(АтрибутыУзлаОбъект.ИД), Неопределено);
						ПредставлениеОтчета = ?(АтрибутыУзлаОбъект.Свойство("Предст") И ЗначениеЗаполнено(АтрибутыУзлаОбъект.Предст), СокрЛП(АтрибутыУзлаОбъект.Предст), Неопределено);
						
						НовСтр = ТаблицаВнешнихФормРО.Добавить();
						НовСтр.Версия        = ?(ЗначениеЗаполнено(ВерсияОбъекта), ВРег(ВерсияОбъекта), Неопределено);
						НовСтр.Дата          = ДатаВыпуска;
						НовСтр.Отчет         = ?(ЗначениеЗаполнено(ИсточникОтчета), ВРег(ИсточникОтчета), Неопределено);
						НовСтр.Представление = ПредставлениеОтчета;
						НовСтр.ДопИнформация = ДопИнформация;
						НовСтр.ВебСсылка     = ВебСсылка;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаВнешнихФормРО;
	
КонецФункции

Процедура НазначитьЭлементыСправочникаРОВнешнимФормамРО(ТаблицаВнешнихФормРО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеОтчеты.Ссылка,
	               |	РегламентированныеОтчеты.ИсточникОтчета,
	               |	РегламентированныеОтчеты.Наименование
	               |ИЗ
	               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	               |ГДЕ
	               |	РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета";
	
	Для каждого СтрокаТаблицыВнешнихФормРО Из ТаблицаВнешнихФормРО Цикл
	
		Запрос.УстановитьПараметр("ИсточникОтчета", СтрокаТаблицыВнешнихФормРО.Отчет);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыВнешнихФормРО.ОтчетСсылка = Выборка.Ссылка;
			
			Если ВРег(СокрЛП(Выборка.Наименование)) = ВРег(СтрокаТаблицыВнешнихФормРО.Представление) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыВнешнихФормРО.ОтчетСсылка) Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыВнешнихФормРО.ОтчетСсылка.ВнешнийОтчетВерсия) И ЗначениеЗаполнено(СтрокаТаблицыВнешнихФормРО.Версия) Тогда
			
				РезультатСравнения = РегламентированнаяОтчетностьКлиентСервер.СравнитьКраткиеВерсииОтчетов(
					СтрокаТаблицыВнешнихФормРО.ОтчетСсылка.ВнешнийОтчетВерсия, СтрокаТаблицыВнешнихФормРО.Версия);
					
				СтрокаТаблицыВнешнихФормРО.РезультатСравнения = РезультатСравнения;
			
			Иначе
				
				СтрокаТаблицыВнешнихФормРО.РезультатСравнения = 2;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьТаблицуВнешнихФормРО()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Версия");
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("Отчет");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("ДопИнформация");
	Результат.Колонки.Добавить("ВебСсылка");
	Результат.Колонки.Добавить("ОтчетСсылка");
	Результат.Колонки.Добавить("РезультатСравнения");
	
	Результат.Индексы.Добавить("Версия");
	Результат.Индексы.Добавить("Отчет");
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьТаблицуБлокировокОбъектовРОНаОсновеДереваИнформацииОТекущемРелизе(ИнформацияОТекущемРелизе)
	
	ТаблицаБлокировокОбъектовРО = СоздатьТаблицуБлокировокОбъектовРО();
	
	УзлыФайл = ИнформацияОТекущемРелизе.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Файл", "Э"));
	Если УзлыФайл.Количество() = 0 Тогда
		Возврат ТаблицаБлокировокОбъектовРО;
	КонецЕсли;
	УзелФайл = УзлыФайл[0];
	
	УзлыРелиз = УзелФайл.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Рлз", "Э"));
	Если УзлыРелиз.Количество() = 0 Тогда
		Возврат ТаблицаБлокировокОбъектовРО;
	КонецЕсли;
	УзелРелиз = УзлыРелиз[0];
	
	// заполняем блокировки объектов в составе конфигурации
	УзлыБлокировки = УзелРелиз.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Блки", "Э"));
	Если УзлыБлокировки.Количество() > 0 Тогда
		
		УзелБлокировки = УзлыБлокировки[0];
		Для Каждого УзелБлокировка Из УзелБлокировки.Строки Цикл
			Если УзелБлокировка.Имя = "Блк" ИЛИ УзелБлокировка.Тип = "Э" Тогда
				ЗаполнитьТаблицуБлокировокПоУзлуБлокировка(ТаблицаБлокировокОбъектовРО, УзелБлокировка, ИнформацияОПрограмме().ВерсияКонфигурации);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// заполняем блокировки внешних отчетов
	УзлыДочерниеВыпуски = УзелРелиз.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ДочВып", "Э"));
	Если УзлыДочерниеВыпуски.Количество() > 0 Тогда
		
		УзелДочерниеВыпуски = УзлыДочерниеВыпуски[0];
		Для Каждого УзелВыпуск Из УзелДочерниеВыпуски.Строки Цикл
			
			Если УзелВыпуск.Имя = "Вып" И УзелВыпуск.Тип = "Э" Тогда
				
				АтрибутыУзла = ПолучитьАтрибутыУзла(УзелВыпуск);
				ВерсияВыпуска = ?(АтрибутыУзла.Свойство("Верс") И ЗначениеЗаполнено(АтрибутыУзла.Верс), СокрЛП(АтрибутыУзла.Верс), Неопределено);
				
				УзлыБлокировки = УзелВыпуск.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Блки", "Э"));
				Если УзлыБлокировки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				УзелБлокировки = УзлыБлокировки[0];
				
				Для Каждого УзелБлокировка Из УзелБлокировки.Строки Цикл
					Если УзелБлокировка.Имя = "Блк" ИЛИ УзелБлокировка.Тип = "Э" Тогда
						ЗаполнитьТаблицуБлокировокПоУзлуБлокировка(ТаблицаБлокировокОбъектовРО, УзелБлокировка, ВерсияВыпуска);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаБлокировокОбъектовРО;
	
КонецФункции

Функция СоздатьТаблицуБлокировокОбъектовРО()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Версия");
	Результат.Колонки.Добавить("Отчет");
	Результат.Колонки.Добавить("Форма");
	Результат.Колонки.Добавить("Функция");
	Результат.Колонки.Добавить("Жесткая");
	Результат.Колонки.Добавить("Комментарий");
	Результат.Колонки.Добавить("ВерсияМодуляДокументооборотаСИсправлениемОшибки");
	
	Результат.Индексы.Добавить("Версия");
	Результат.Индексы.Добавить("Отчет");
	Результат.Индексы.Добавить("Форма");
	Результат.Индексы.Добавить("Функция");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуБлокировокПоУзлуБлокировка(ТаблицаБлокировок, УзелБлокировка, ВерсияОбъекта)
	
	АтрибутыУзла = ПолучитьАтрибутыУзла(УзелБлокировка);
	
	БлокировкаЖесткая 								= (АтрибутыУзла.Свойство("Урвн") И АтрибутыУзла.Урвн = "1");
	БлокируемаяФункция 								= ?(АтрибутыУзла.Свойство("Фнкц"), ВРЕГ(СокрЛП(АтрибутыУзла.Фнкц)), "И");
	Комментарий 									= ?(АтрибутыУзла.Свойство("Кмнт"), СокрЛП(АтрибутыУзла.Кмнт), "");
	ВерсияМодуляДокументооборотаСИсправлениемОшибки = ?(АтрибутыУзла.Свойство("Мдль"), СокрЛП(АтрибутыУзла.Мдль), "");
	
	Для Каждого УзелОбъект Из УзелБлокировка.Строки Цикл
		Если УзелОбъект.Имя = "Обкт" И УзелОбъект.Тип = "Э" Тогда
			АтрибутыУзла = ПолучитьАтрибутыУзла(УзелОбъект);
			Если АтрибутыУзла.Свойство("Отч") И ЗначениеЗаполнено(АтрибутыУзла.Отч) Тогда
				
				ИмяОтчета = СокрЛП(АтрибутыУзла.Отч);
				ИмяФормы = ?(АтрибутыУзла.Свойство("Фрм") И ЗначениеЗаполнено(АтрибутыУзла.Фрм), СокрЛП(АтрибутыУзла.Фрм), Неопределено);
				
				НовСтр = ТаблицаБлокировок.Добавить();
				НовСтр.Версия = ВРЕГ(ВерсияОбъекта);
				НовСтр.Отчет = ?(ЗначениеЗаполнено(ИмяОтчета), ВРЕГ(ИмяОтчета), Неопределено);
				НовСтр.Форма = ?(ЗначениеЗаполнено(ИмяФормы), ВРЕГ(ИмяФормы), Неопределено);
				НовСтр.Функция = ?(ЗначениеЗаполнено(БлокируемаяФункция), ВРЕГ(БлокируемаяФункция), Неопределено);
				НовСтр.Жесткая = БлокировкаЖесткая;
				НовСтр.Комментарий = Комментарий;
				НовСтр.ВерсияМодуляДокументооборотаСИсправлениемОшибки = ВерсияМодуляДокументооборотаСИсправлениемОшибки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаОнлайнБлокировкиСервер(ВерсияВыпуска, ИДОтчета, ИДФормы, БлокируемаяФункция) Экспорт
	
	СведенияПоБлокировке = Новый Структура();
	СведенияПоБлокировке.Вставить("РезультатПроверки", Истина);

	ТаблицаБлокировок = ПолучитьТаблицуБлокировокОбъектовРО();
	Если НЕ ЗначениеЗаполнено(ТаблицаБлокировок) Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	СтрБлокировкиОтчета = ТаблицаБлокировок.НайтиСтроки(Новый Структура("Версия, Отчет, Форма, Функция", ВерсияВыпуска, ИДОтчета, ИДФормы, БлокируемаяФункция));
	Если ЗначениеЗаполнено(ИДФормы) Тогда
		СтрБлокировкиОтчетаДоп = ТаблицаБлокировок.НайтиСтроки(Новый Структура("Версия, Отчет, Форма, Функция", ВерсияВыпуска, ИДОтчета, Неопределено, БлокируемаяФункция));
		Для Каждого СтрБлокировкаОтчетаДоп Из СтрБлокировкиОтчетаДоп Цикл
			СтрБлокировкиОтчета.Добавить(СтрБлокировкаОтчетаДоп);
		КонецЦикла;
	КонецЕсли;
	
	ЧислоБлокировокОтчета = СтрБлокировкиОтчета.Количество();
	Если ЧислоБлокировокОтчета = 0 Тогда
		Возврат СведенияПоБлокировке;
	ИначеЕсли ЧислоБлокировокОтчета = 1 Тогда
		СтрБлокировкаОтчета = СтрБлокировкиОтчета[0];
	Иначе // если блокировок несколько, то приоритетной является жесткая или, если жесткие отсутствуют, то последняя в списке
		СтрБлокировкаОтчета = СтрБлокировкиОтчета[0];
		Для Каждого Стр Из СтрБлокировкиОтчета Цикл
			Если Стр.Жесткая Тогда
				СтрБлокировкаОтчета = Стр;
			ИначеЕсли НЕ СтрБлокировкаОтчета.Жесткая Тогда
				СтрБлокировкаОтчета = Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СведенияПоБлокировке.Вставить("РезультатПроверки", 									Ложь);
	СведенияПоБлокировке.Вставить("Жесткая", 											СтрБлокировкаОтчета.Жесткая);
	СведенияПоБлокировке.Вставить("Функция", 											СтрБлокировкаОтчета.Функция);
	СведенияПоБлокировке.Вставить("Комментарий", 										СтрБлокировкаОтчета.Комментарий);
	СведенияПоБлокировке.Вставить("ВерсияМодуляДокументооборотаСИсправлениемОшибки",	СтрБлокировкаОтчета.ВерсияМодуляДокументооборотаСИсправлениемОшибки);
	
	Возврат СведенияПоБлокировке;
	
КонецФункции

Функция ФайлИнформацииОРелизеСоответствуетТекущейПрограмме(УзелРелиз) Экспорт
	
	АтрибутыУзла = ПолучитьАтрибутыУзла(УзелРелиз);
	
	Если НЕ АтрибутыУзла.Свойство("Верс")
	 ИЛИ НЕ АтрибутыУзла.Свойство("Платф")
	 ИЛИ НЕ АтрибутыУзла.Свойство("ИД") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Если НЕ ВерсияТекущейПлатформыСоответствуетШаблону(ИнформацияОПрограмме.ВерсияПлатформы, АтрибутыУзла.Платф)
	 ИЛИ НЕ (ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, АтрибутыУзла.ИД)
	 ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, АтрибутыУзла.ИД))
	 ИЛИ НЕ ИнформацияОПрограмме.ВерсияКонфигурации = АтрибутыУзла.Верс Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СформироватьТекстИспользуйте(ЗаменяющийДокумент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗаменяющийДокумент) Тогда
		Возврат "";
	Иначе
		Если ТипЗнч(ЗаменяющийДокумент) <> Тип("Массив") Тогда
			МассивЗаменяющихДокументов = Новый Массив;
			МассивЗаменяющихДокументов.Добавить(ЗаменяющийДокумент);
		Иначе
			МассивЗаменяющихДокументов = ЗаменяющийДокумент;
		КонецЕсли;
		КоличествоЭлементовМассива = МассивЗаменяющихДокументов.Количество();
		Если КоличествоЭлементовМассива = 0 Тогда
			Возврат "";
		ИначеЕсли КоличествоЭлементовМассива = 1 Тогда
			Возврат СокрЛП(МассивЗаменяющихДокументов[0]) + ".<BR>";
		Иначе
			СтрРезультат = "";
			Для Каждого Стр Из ЗаменяющийДокумент Цикл
				СтрРезультат = СтрРезультат + "- " + СокрЛП(Стр) + ";<BR>";
			КонецЦикла;
			СтрРезультат = Лев(СтрРезультат, СтрДлина(СтрРезультат) - 1);
			СтрРезультат = СтрРезультат + ".";
			Возврат СтрРезультат;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПроверкаФормыПоПериодуПримененияСервер(СтруктураРеквизитовФормы, ДатаКонцаПериодаОтчета, ИмяФормы, ИДОтчета) Экспорт
	
	СведенияПоБлокировке = Новый Структура();
	СведенияПоБлокировке.Вставить("РезультатПроверки", Истина);
	
	// получаем таблицу периодов применения форм
	ТаблицаПериодовПримененияФорм = ПолучитьТаблицуПериодовПримененияФорм();
	Если ТаблицаПериодовПримененияФорм = Неопределено Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	// получаем дерево форм и форматов отчета
	Попытка
		ДеревоФормИФорматовОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИДОтчета).ДеревоФормИФорматов();
	Исключение
		Возврат СведенияПоБлокировке;
	КонецПопытки;
	
	// приводим ключевые строковые поля дерева к верхнему регистру
	ОбработатьДеревоФормИФорматовОтчета(ДеревоФормИФорматовОтчета);
	
	// если одно из ключевых свойств отчета не заполнено, то прерываем проверку
	Если НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета)
	ИЛИ НЕ ЗначениеЗаполнено(ИмяФормы)
	ИЛИ НЕ ЗначениеЗаполнено(ДеревоФормИФорматовОтчета) Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	// ищем в дереве форму, соответствующую реализованной в проверяемом объекте
	РезультатПоиска = ДеревоФормИФорматовОтчета.Строки.НайтиСтроки(Новый Структура("ИмяОбъекта", ВРЕГ(ИмяФормы)));
	ЧислоРезультатовПоиска = РезультатПоиска.Количество();
	Если ЧислоРезультатовПоиска = 0 Тогда
		Возврат СведенияПоБлокировке;
	ИначеЕсли ЧислоРезультатовПоиска = 1 Тогда
		СтрФорма = РезультатПоиска[0];
	Иначе
		СтрФорма = Неопределено;
		Для Каждого Стр Из РезультатПоиска Цикл
			ДатаНачалаПериодаПримененияФормы = НачалоДня(Стр.ДатаНачалаДействия);
			ДатаКонцаПериодаПримененияФормы = КонецДня(?(ЗначениеЗаполнено(Стр.ДатаОкончанияДействия), Стр.ДатаОкончанияДействия, '39991231'));
			Если ДатаКонцаПериодаОтчета >= ДатаНачалаПериодаПримененияФормы И ДатаКонцаПериодаОтчета <= ДатаКонцаПериодаПримененияФормы Тогда
				СтрФорма = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// если в дереве форм и форматов отчета не найдена строка, соответствующая форме, реализованной в проверяемом объекте, то прервем проверку
	Если СтрФорма = Неопределено Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	// извлекаем дату, номер приказа и код формы
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(СтрФорма, "ДатаПриказа") Тогда
		ДатаПриказаФормы = СтрФорма.ДатаПриказа;
	Иначе
		ДатаПриказаФормы = Неопределено;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(СтрФорма, "НомерПриказа") Тогда
		НомерПриказаФормы = СтрФорма.НомерПриказа;
	Иначе
		НомерПриказаФормы = Неопределено;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(СтрФорма, "Код") Тогда
		КодФормы = СтрФорма.Код;
	Иначе
		КодФормы = Неопределено;
	КонецЕсли;
	
	// проверяем форму на применимость в указанном периоде
	ПараметрыДиалогаБлокировки = Неопределено;
	Если ФормаПрименимаВУказанномПериоде(ТаблицаПериодовПримененияФорм, КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки) Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	СведенияПоБлокировке.РезультатПроверки = Ложь;
	СведенияПоБлокировке.Вставить("Жесткая", 			ПараметрыДиалогаБлокировки.Жесткая);
	СведенияПоБлокировке.Вставить("ТекстЗаголовок", 	ПараметрыДиалогаБлокировки.Заголовок);
	СведенияПоБлокировке.Вставить("ТекстПодробнее", 	ПараметрыДиалогаБлокировки.Подробно);
	СведенияПоБлокировке.Вставить("ТекстИспользуйте", 	СформироватьТекстИспользуйте(ПараметрыДиалогаБлокировки.ЗаменяющийДокумент));
	
	Возврат СведенияПоБлокировке;
	
КонецФункции

Функция ПроверкаФорматаПоПериодуПримененияСервер(СтруктураРеквизитовФормы, ДатаКонцаПериодаОтчета, ИмяФормы, ИДОтчета) Экспорт
	
	СведенияПоБлокировке = Новый Структура();
	СведенияПоБлокировке.Вставить("РезультатПроверки", Истина);
	
	// получаем таблицу периодов применения форм
	ТаблицаПериодовПримененияФорматов = ПолучитьТаблицуПериодовПримененияФорматов();
	Если ТаблицаПериодовПримененияФорматов = Неопределено Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	// получаем дерево форм и форматов отчета
	Попытка
		ДеревоФормИФорматовОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИДОтчета).ДеревоФормИФорматов();
	Исключение
		Возврат СведенияПоБлокировке;
	КонецПопытки;
	
	// приводим ключевые строковые поля дерева к верхнему регистру
	ОбработатьДеревоФормИФорматовОтчета(ДеревоФормИФорматовОтчета);
	
	// если одно из ключевых свойств отчета не заполнено, то прерываем проверку
	Если НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета)
	ИЛИ НЕ ЗначениеЗаполнено(ИмяФормы)
	ИЛИ НЕ ЗначениеЗаполнено(ДеревоФормИФорматовОтчета) Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	// ищем в дереве форму, соответствующую реализованной в проверяемом объекте
	
	СтрФорма = Неопределено;
	РезультатПоиска = ДеревоФормИФорматовОтчета.Строки.НайтиСтроки(Новый Структура("ИмяОбъекта", ИмяФормы));
	ЧислоРезультатовПоиска = РезультатПоиска.Количество();
	Если ЧислоРезультатовПоиска = 0 Тогда
		Возврат СведенияПоБлокировке;
	ИначеЕсли ЧислоРезультатовПоиска = 1 Тогда
		СтрФорма = РезультатПоиска[0];
	Иначе
		СтрФорма = Неопределено;
		Для Каждого Стр Из РезультатПоиска Цикл
			ДатаНачалаПериодаПримененияФормы = НачалоДня(Стр.ДатаНачалаДействия);
			ДатаКонцаПериодаПримененияФормы = КонецДня(?(ЗначениеЗаполнено(Стр.ДатаОкончанияДействия), Стр.ДатаОкончанияДействия, '39991231'));
			Если ДатаКонцаПериодаОтчета >= ДатаНачалаПериодаПримененияФормы И ДатаКонцаПериодаОтчета <= ДатаКонцаПериодаПримененияФормы Тогда
				СтрФорма = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// если в дереве форм и форматов отчета не найдена строка, соответствующая форме, реализованной в проверяемом объекте, то прервем проверку
	Если СтрФорма = Неопределено Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	СтрФормат = Неопределено;

	Для Каждого ЭлФормат Из СтрФорма.Строки Цикл
		ДатаНачалаПериодаПримененияФормата = НачалоДня(ЭлФормат.ДатаНачалаДействия);
		ДатаКонцаПериодаПримененияФормата = КонецДня(?(ЗначениеЗаполнено(ЭлФормат.ДатаОкончанияДействия), ЭлФормат.ДатаОкончанияДействия, '39991231'));
		Если ДатаКонцаПериодаОтчета >= ДатаНачалаПериодаПримененияФормата И ДатаКонцаПериодаОтчета <= ДатаКонцаПериодаПримененияФормата Тогда
			СтрФормат = ЭлФормат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрФормат = Неопределено Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	// извлекаем дату, номер приказа и код формы
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(СтрФорма, "ДатаПриказа") Тогда
		ДатаПриказаФормы = СтрФорма.ДатаПриказа;
	Иначе
		ДатаПриказаФормы = Неопределено;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(СтрФорма, "НомерПриказа") Тогда
		НомерПриказаФормы = СтрФорма.НомерПриказа;
	Иначе
		НомерПриказаФормы = Неопределено;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(СтрФорма, "Код") Тогда
		КодФормы = СтрФорма.Код;
	Иначе
		КодФормы = Неопределено;
	КонецЕсли;

	// извлекаем версию, дату и номер приказа формата
	ВерсияФормата = ВРЕГ(СокрЛП(СтрФормат.Код));
	ДатаПриказаФормат = ?(ЗначениеЗаполнено(СтрФормат.ДатаПриказа), СтрФормат.ДатаПриказа, Неопределено);
	НомерПриказаФормат = ?(ЗначениеЗаполнено(СтрФормат.НомерПриказа), ВРЕГ(СокрЛП(СтрФормат.НомерПриказа)), Неопределено);
	
	// проверяем форму на применимость в указанном периоде
	ПараметрыДиалогаБлокировки = Неопределено;
	Если ФорматПрименимВУказанномПериоде(ТаблицаПериодовПримененияФорматов, КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ВерсияФормата, ДатаПриказаФормат, НомерПриказаФормат, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки) Тогда
		Возврат СведенияПоБлокировке;
	КонецЕсли;
	
	СведенияПоБлокировке.РезультатПроверки = Ложь;
	СведенияПоБлокировке.Вставить("Жесткая", 			ПараметрыДиалогаБлокировки.Жесткая);
	СведенияПоБлокировке.Вставить("ТекстЗаголовок", 	ПараметрыДиалогаБлокировки.Заголовок);
	СведенияПоБлокировке.Вставить("ТекстПодробнее", 	ПараметрыДиалогаБлокировки.Подробно);
	СведенияПоБлокировке.Вставить("ТекстИспользуйте", 	СформироватьТекстИспользуйте(ПараметрыДиалогаБлокировки.ЗаменяющийДокумент));
	
	Возврат СведенияПоБлокировке;
	
КонецФункции

Функция ПолучитьТаблицуПериодовПримененияФорматов()
	
	// пытаемся получить из кэша актуальную таблицу блокировок
	ДеревоФормИФорматовСвед = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов, Ложь);
	
	// если в кэше актуальной таблицы нет, то получим XML с данными из регистра
	СтрДанныеДеревоФормИФорматов = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов);
	Если СтрДанныеДеревоФормИФорматов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрДеревоФормИФорматов = СтрДанныеДеревоФормИФорматов[0].Данные;
	Если НЕ ЗначениеЗаполнено(СтрДеревоФормИФорматов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразуем XML к дереву
	ДеревоДанных = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрДеревоФормИФорматов);
	Если НЕ ЗначениеЗаполнено(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переводим дерево XML в таблицу
	ТаблицаПериодовПримененияФорматов = ЗаполнитьТаблицуПериодовПримененияФорматовНаОсновеДереваФормИФорматов(ДеревоДанных);
	
	// оставляем только те записи, на которые не установлено ограничение по времени
	Индекс = ТаблицаПериодовПримененияФорматов.Количество() - 1; 
	Пока Индекс >= 0 Цикл 
		Если ЗначениеЗаполнено(ТаблицаПериодовПримененияФорматов[Индекс].ФорматУчитыватьНачинаяС) 
			И НачалоДня(ТекущаяДатаСеанса()) < ТаблицаПериодовПримененияФорматов[Индекс].ФорматУчитыватьНачинаяС Тогда 
			ТаблицаПериодовПримененияФорматов.Удалить(Индекс); 
		КонецЕсли; 
		Индекс = Индекс - 1; 
	КонецЦикла;   
	
	Возврат ТаблицаПериодовПримененияФорматов;
	
КонецФункции

Функция ЗаполнитьТаблицуПериодовПримененияФорматовНаОсновеДереваФормИФорматов(ДеревоФормИФорматов)
	
	ТаблицаПериодовПримененияФорматов = СоздатьТаблицуПериодовПримененияФорматов();
	
	УзелФайл = ДеревоФормИФорматов.Строки.Найти("Файл", "Имя");
	Если УзелФайл = Неопределено Тогда
		Возврат ТаблицаПериодовПримененияФорматов;
	КонецЕсли;
	
	ТаблицаЗамещений = Новый ТаблицаЗначений;
	ТаблицаЗамещений.Колонки.Добавить("Версия");
	ТаблицаЗамещений.Колонки.Добавить("ДатаПриказа");
	ТаблицаЗамещений.Колонки.Добавить("НомерПриказа");
	ТаблицаЗамещений.Колонки.Добавить("КодФормы");
	ТаблицаЗамещений.Колонки.Добавить("ДатаПриказаФормы");
	ТаблицаЗамещений.Колонки.Добавить("НомерПриказаФормы");
	ТаблицаЗамещений.Колонки.Добавить("СтрЗамещение");
	
	Для Каждого УзелФрм Из УзелФайл.Строки Цикл
		Если УзелФрм.Имя = "Фрм" И УзелФрм.Тип = "Э" Тогда
			
			АтрибутыУзлаФрм = ПолучитьАтрибутыУзла(УзелФрм);
			
			ФормаКод						= ?(АтрибутыУзлаФрм.Свойство("ИД") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ИД),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.ИД)),								Неопределено);
			ФормаДатаПриказа				= ?(АтрибутыУзлаФрм.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДП),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДП, Неопределено),			Неопределено);
			ФормаНомерПриказа				= ?(АтрибутыУзлаФрм.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.НП),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.НП)),								Неопределено);
			
			Для Каждого УзелФрмт Из УзелФрм.Строки Цикл
				Если УзелФрмт.Имя = "Фрмт" И УзелФрмт.Тип = "Э" Тогда
					
					АтрибутыУзлаФрмт = ПолучитьАтрибутыУзла(УзелФрмт);
					
					НовСтр = ТаблицаПериодовПримененияФорматов.Добавить();
					
					НовСтр.КодФормы					= ФормаКод;
					НовСтр.ДатаПриказаФормы			= ФормаДатаПриказа;
					НовСтр.НомерПриказаФормы		= ФормаНомерПриказа;
					
					НовСтр.Версия					= ?(АтрибутыУзлаФрмт.Свойство("ИД") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ИД),		ВРЕГ(СокрЛП(АтрибутыУзлаФрмт.ИД)),						Неопределено);
					НовСтр.ДатаПриказа				= ?(АтрибутыУзлаФрмт.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДП),		СтрДатаXMLВДата1С(АтрибутыУзлаФрмт.ДП, Неопределено),	Неопределено);
					НовСтр.НомерПриказа				= ?(АтрибутыУзлаФрмт.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.НП),		ВРЕГ(СокрЛП(АтрибутыУзлаФрмт.НП)),						Неопределено);
					НовСтр.ПредставлениеПриказа		= ?(АтрибутыУзлаФрмт.Свойство("ПП") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ПП),		СокрЛП(АтрибутыУзлаФрмт.ПП),							Неопределено);
					НовСтр.ФорматУчитыватьНачинаяС	= ?(АтрибутыУзлаФрмт.Свойство("УС") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.УС),		СтрДатаXMLВДата1С(АтрибутыУзлаФрмт.УС),					'00010101');
					
					НовСтр.ДатаНачала				= ?(АтрибутыУзлаФрмт.Свойство("ДН") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДН),		СтрДатаXMLВДата1С(АтрибутыУзлаФрмт.ДН),		'00010101');
					НовСтр.ДатаОкончания			= ?(АтрибутыУзлаФрмт.Свойство("ДК") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДК),		СтрДатаXMLВДата1С(АтрибутыУзлаФрмт.ДК),		'00010101');
					НовСтр.ДатаНачалаСтрого			= (АтрибутыУзлаФрмт.Свойство("ДНС") И АтрибутыУзлаФрмт.ДНС = "1");
					НовСтр.ДатаОкончанияСтрого		= (АтрибутыУзлаФрмт.Свойство("ДКС") И АтрибутыУзлаФрмт.ДКС = "1");
					НовСтр.ДатаНачалаСообщение		= ?(АтрибутыУзлаФрмт.Свойство("ДНСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДНСбщ),	СокрЛП(АтрибутыУзлаФрмт.ДНСбщ),				Неопределено);
					НовСтр.ДатаОкончанияСообщение	= ?(АтрибутыУзлаФрмт.Свойство("ДКСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДКСбщ),	СокрЛП(АтрибутыУзлаФрмт.ДКСбщ),				Неопределено);
					
					Для Каждого УзелОбнвл Из УзелФрмт.Строки Цикл
						Если УзелОбнвл.Имя = "Обнвл" И УзелОбнвл.Тип = "Э" Тогда
							Для Каждого УзелОбнвлФрмт Из УзелОбнвл.Строки Цикл
								Если УзелОбнвлФрмт.Имя = "Фрмт" И УзелОбнвлФрмт.Тип = "Э" Тогда
									АтрибутыУзла = ПолучитьАтрибутыУзла(УзелОбнвлФрмт);
									Если АтрибутыУзла.Свойство("ИДФрм") И АтрибутыУзла.Свойство("ДПФрм") И АтрибутыУзла.Свойство("НПФрм") И АтрибутыУзла.Свойство("ИД") Тогда
										
										НовСтрЗамещение = ТаблицаЗамещений.Добавить();
										
										НовСтрЗамещение.Версия = ?(ЗначениеЗаполнено(АтрибутыУзла.ИД), ВРЕГ(СокрЛП(АтрибутыУзла.ИД)), Неопределено);
										НовСтрЗамещение.ДатаПриказа = ?(АтрибутыУзла.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзла.ДП), СтрДатаXMLВДата1С(АтрибутыУзла.ДП, Неопределено), Неопределено);
										НовСтрЗамещение.НомерПриказа = ?(АтрибутыУзла.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзла.НП), ВРЕГ(СокрЛП(АтрибутыУзла.НП)), Неопределено);
										НовСтрЗамещение.КодФормы = ?(ЗначениеЗаполнено(АтрибутыУзла.ИДФрм), ВРЕГ(СокрЛП(АтрибутыУзла.ИДФрм)), Неопределено);
										НовСтрЗамещение.ДатаПриказаФормы = СтрДатаXMLВДата1С(АтрибутыУзла.ДПФрм, Неопределено);
										НовСтрЗамещение.НомерПриказаФормы = ?(ЗначениеЗаполнено(АтрибутыУзла.НПФрм), ВРЕГ(СокрЛП(АтрибутыУзла.НПФрм)), Неопределено);
										НовСтрЗамещение.СтрЗамещение = НовСтр;
										
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаЗамещений Цикл
		РезультатПоиска = ТаблицаПериодовПримененияФорматов.НайтиСтроки(Новый Структура("Версия, ДатаПриказа, НомерПриказа, КодФормы, ДатаПриказаФормы, НомерПриказаФормы", Стр.Версия, Стр.ДатаПриказа, Стр.НомерПриказа, Стр.КодФормы, Стр.ДатаПриказаФормы, Стр.НомерПриказаФормы));
		Если РезультатПоиска.Количество() > 0 Тогда
			ПервыйРезультатПоиска = РезультатПоиска[0];
			ПервыйРезультатПоиска_Обновления = ПервыйРезультатПоиска.Обновления;
			Если НЕ ЗначениеЗаполнено(ПервыйРезультатПоиска_Обновления) Тогда
				ПервыйРезультатПоиска_Обновления = Новый Массив;
			КонецЕсли;
			ПервыйРезультатПоиска_Обновления.Добавить(Стр.СтрЗамещение);
			ПервыйРезультатПоиска.Обновления = ПервыйРезультатПоиска_Обновления;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПериодовПримененияФорматов;
	
КонецФункции

Функция ПолучитьТаблицуПериодовПримененияФорм()
	
	// пытаемся получить из кэша актуальную таблицу блокировок
	ДеревоФормИФорматовСвед = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов, Ложь);
	
	// если в кэше актуальной таблицы нет, то получим XML с данными из регистра
	СтрДанныеДеревоФормИФорматов = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов);
	Если СтрДанныеДеревоФормИФорматов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрДеревоФормИФорматов = СтрДанныеДеревоФормИФорматов[0].Данные;
	Если НЕ ЗначениеЗаполнено(СтрДеревоФормИФорматов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразуем XML к дереву
	ДеревоДанных = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрДеревоФормИФорматов);
	Если НЕ ЗначениеЗаполнено(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переводим дерево XML в таблицу
	ТаблицаПериодовПримененияФорм = ЗаполнитьТаблицуПериодовПримененияФормНаОсновеДереваФормИФорматов(ДеревоДанных);
	
	// оставляем только те записи, на которые не установлено ограничение по времени
	Индекс = ТаблицаПериодовПримененияФорм.Количество() - 1; 
	Пока Индекс >= 0 Цикл 
		Если ЗначениеЗаполнено(ТаблицаПериодовПримененияФорм[Индекс].ФормуУчитыватьНачинаяС) 
			И НачалоДня(ТекущаяДатаСеанса()) < ТаблицаПериодовПримененияФорм[Индекс].ФормуУчитыватьНачинаяС Тогда 
			ТаблицаПериодовПримененияФорм.Удалить(Индекс); 
		КонецЕсли; 
		Индекс = Индекс - 1; 
	КонецЦикла;
	
	Возврат ТаблицаПериодовПримененияФорм;
	
КонецФункции

Функция ОбработатьДеревоФормИФорматовОтчета(Узел)
	
	ПоляДляОбработки = Новый Массив;
	ПоляДляОбработки.Добавить("Код");
	ПоляДляОбработки.Добавить("НомерПриказа");
	ПоляДляОбработки.Добавить("ИмяОбъекта");
	
	Для Каждого Стр Из Узел.Строки Цикл
		Для Каждого ПолеДляОбработки Из ПоляДляОбработки Цикл
			Если ЗначениеЗаполнено(Стр[ПолеДляОбработки]) Тогда
				Стр[ПолеДляОбработки] = ВРЕГ(Стр[ПолеДляОбработки]);
			КонецЕсли;
		КонецЦикла;
		ОбработатьДеревоФормИФорматовОтчета(Стр);
	КонецЦикла;
	
КонецФункции

Функция ФормаПрименимаВУказанномПериоде(ТаблицаПериодовПримененияФорм, КодФормы, ДатаПриказа, НомерПриказа, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки)
	
	Если НЕ ЗначениеЗаполнено(КодФормы)	ИЛИ НЕ ЗначениеЗаполнено(ДатаПриказа) ИЛИ НЕ ЗначениеЗаполнено(НомерПриказа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РезультатПоиска = ТаблицаПериодовПримененияФорм.НайтиСтроки(Новый Структура("Код, ДатаПриказа, НомерПриказа", КодФормы, ДатаПриказа, НомерПриказа));
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрРезультатПоиска = РезультатПоиска[0];
	
	Если ЗначениеЗаполнено(СтрРезультатПоиска.ДатаНачала) ИЛИ ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания) Тогда
		ДатаНачалаПрименимостиФормы = НачалоДня(СтрРезультатПоиска.ДатаНачала);
		ДатаКонцаПрименимостиФормы = КонецДня(?(ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания), СтрРезультатПоиска.ДатаОкончания, '39991231'));
	Иначе
		ДатаНачалаПрименимостиФормы = '00010101';
		ДатаКонцаПрименимостиФормы = '00010101';
	КонецЕсли;
	
	СтрЗаголовок = "Форма в редакции:" + Символы.ПС + СокрЛП(СтрРезультатПоиска.ПредставлениеПриказа) + Символы.ПС + "за период составления отчета более не применяется.";
	
	Если ДатаКонцаПериодаОтчета < ДатаНачалаПрименимостиФормы Тогда
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаНачалаСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаНачалаСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", СтрЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", НайтиЗаменяющиеДокументыФормы(ТаблицаПериодовПримененияФорм, СтрРезультатПоиска, ДатаКонцаПериодаОтчета));
	ИначеЕсли ДатаКонцаПериодаОтчета > ДатаКонцаПрименимостиФормы Тогда
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаОкончанияСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаОкончанияСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", СтрЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", НайтиЗаменяющиеДокументыФормы(ТаблицаПериодовПримененияФорм, СтрРезультатПоиска, ДатаКонцаПериодаОтчета));
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ФорматПрименимВУказанномПериоде(ТаблицаПериодовПримененияФорматов, КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ВерсияФормата, ДатаПриказаФормат, НомерПриказаФормат, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки)
	
	Если НЕ ЗначениеЗаполнено(КодФормы)	ИЛИ НЕ ЗначениеЗаполнено(ДатаПриказаФормы) ИЛИ НЕ ЗначениеЗаполнено(НомерПриказаФормы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РезультатПоиска = ТаблицаПериодовПримененияФорматов.НайтиСтроки(Новый Структура("КодФормы, ДатаПриказаФормы, НомерПриказаФормы, Версия, ДатаПриказа, НомерПриказа", КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ВерсияФормата, ДатаПриказаФормат, НомерПриказаФормат));
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрРезультатПоиска = РезультатПоиска[0];
	
	Если ЗначениеЗаполнено(СтрРезультатПоиска.ДатаНачала) ИЛИ ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания) Тогда
		ДатаНачалаПрименимостиФормата = НачалоДня(СтрРезультатПоиска.ДатаНачала);
		ДатаКонцаПрименимостиФормата = КонецДня(?(ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания), СтрРезультатПоиска.ДатаОкончания, '39991231'));
	Иначе
		ДатаНачалаПрименимостиФормата = '00010101';
		ДатаКонцаПрименимостиФормата = '00010101';
	КонецЕсли;
	
	ПредставлениеФормата = СокрЛП(ВерсияФормата);
	Если ЗначениеЗаполнено(СтрРезультатПоиска.ПредставлениеПриказа) Тогда
		ПредставлениеФормата = ПредставлениеФормата + " в редакции:<BR>" + СокрЛП(СтрРезультатПоиска.ПредставлениеПриказа) + "<BR>";
	КонецЕсли;
	ТекстЗаголовок = "Формат версии " + СокрЛП(ПредставлениеФормата) + " за период составления отчета более не применяется.";
	
	Если ДатаКонцаПериодаОтчета < ДатаНачалаПрименимостиФормата Тогда
		ЗаменяющиеДокументы = НайтиЗаменяющиеДокументыФормата(ТаблицаПериодовПримененияФорматов, СтрРезультатПоиска, ДатаКонцаПериодаОтчета);
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаНачалаСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаНачалаСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", ТекстЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", ЗаменяющиеДокументы);
	ИначеЕсли ДатаКонцаПериодаОтчета > ДатаКонцаПрименимостиФормата Тогда
		ЗаменяющиеДокументы = НайтиЗаменяющиеДокументыФормата(ТаблицаПериодовПримененияФорматов, СтрРезультатПоиска, ДатаКонцаПериодаОтчета);
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаОкончанияСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаОкончанияСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", ТекстЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", ЗаменяющиеДокументы);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполнитьТаблицуПериодовПримененияФормНаОсновеДереваФормИФорматов(ДеревоФормИФорматов)
	
	ТаблицаПериодовПримененияФорм = СоздатьТаблицуПериодовПримененияФорм();
	
	УзелФайл = ДеревоФормИФорматов.Строки.Найти("Файл", "Имя");
	Если УзелФайл = Неопределено Тогда
		Возврат ТаблицаПериодовПримененияФорм;
	КонецЕсли;
	
	ТаблицаЗамещений = Новый ТаблицаЗначений;
	ТаблицаЗамещений.Колонки.Добавить("Код");
	ТаблицаЗамещений.Колонки.Добавить("ДатаПриказа");
	ТаблицаЗамещений.Колонки.Добавить("НомерПриказа");
	ТаблицаЗамещений.Колонки.Добавить("СтрЗамещение");
	
	Для Каждого УзелФрм Из УзелФайл.Строки Цикл
		Если УзелФрм.Имя = "Фрм" И УзелФрм.Тип = "Э" Тогда
			
			АтрибутыУзлаФрм = ПолучитьАтрибутыУзла(УзелФрм);
			
			НовСтр = ТаблицаПериодовПримененияФорм.Добавить();
			
			НовСтр.Код						= ?(АтрибутыУзлаФрм.Свойство("ИД") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ИД),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.ИД)),								Неопределено);
			НовСтр.ДатаПриказа				= ?(АтрибутыУзлаФрм.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДП),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДП, Неопределено),			Неопределено);
			НовСтр.НомерПриказа				= ?(АтрибутыУзлаФрм.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.НП),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.НП)),								Неопределено);
			НовСтр.ПредставлениеПриказа		= ?(АтрибутыУзлаФрм.Свойство("ПП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ПП),		СокрЛП(АтрибутыУзлаФрм.ПП),										Неопределено);
			НовСтр.ФормуУчитыватьНачинаяС	= ?(АтрибутыУзлаФрм.Свойство("УС") И ЗначениеЗаполнено(АтрибутыУзлаФрм.УС),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.УС),							'00010101');
			НовСтр.ДатаНачала				= ?(АтрибутыУзлаФрм.Свойство("ДН") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДН),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДН),							'00010101');
			НовСтр.ДатаОкончания			= ?(АтрибутыУзлаФрм.Свойство("ДК") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДК),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДК),							'00010101');
			НовСтр.ДатаНачалаСтрого			= (АтрибутыУзлаФрм.Свойство("ДНС") И АтрибутыУзлаФрм.ДНС = "1");
			НовСтр.ДатаОкончанияСтрого		= (АтрибутыУзлаФрм.Свойство("ДКС") И АтрибутыУзлаФрм.ДКС = "1");
			НовСтр.ДатаНачалаСообщение		= ?(АтрибутыУзлаФрм.Свойство("ДНСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДНСбщ),	СокрЛП(АтрибутыУзлаФрм.ДНСбщ),		Неопределено);
			НовСтр.ДатаОкончанияСообщение	= ?(АтрибутыУзлаФрм.Свойство("ДКСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДКСбщ),	СокрЛП(АтрибутыУзлаФрм.ДКСбщ),		Неопределено);
			
			Для Каждого УзелОбнвл Из УзелФрм.Строки Цикл
				Если УзелОбнвл.Имя = "Обнвл" И УзелОбнвл.Тип = "Э" Тогда
					Для Каждого УзелОбнвлФрм Из УзелОбнвл.Строки Цикл
						Если УзелОбнвлФрм.Имя = "Фрм" И УзелОбнвлФрм.Тип = "Э" Тогда
							АтрибутыУзла = ПолучитьАтрибутыУзла(УзелОбнвлФрм);
							Если АтрибутыУзла.Свойство("ИД") И АтрибутыУзла.Свойство("ДП") И АтрибутыУзла.Свойство("НП") Тогда
								НовСтрЗамещение = ТаблицаЗамещений.Добавить();
								НовСтрЗамещение.Код = ВРЕГ(СокрЛП(АтрибутыУзла.ИД));
								НовСтрЗамещение.ДатаПриказа = СтрДатаXMLВДата1С(АтрибутыУзла.ДП, Неопределено);
								НовСтрЗамещение.НомерПриказа = ВРЕГ(СокрЛП(АтрибутыУзла.НП));
								НовСтрЗамещение.СтрЗамещение = НовСтр;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаЗамещений Цикл
		РезультатПоиска = ТаблицаПериодовПримененияФорм.НайтиСтроки(Новый Структура("Код, ДатаПриказа, НомерПриказа", Стр.Код, Стр.ДатаПриказа, Стр.НомерПриказа));
		Если РезультатПоиска.Количество() > 0 Тогда
			ПервыйРезультатПоиска = РезультатПоиска[0];
			ПервыйРезультатПоиска_Обновления = ПервыйРезультатПоиска.Обновления;
			Если НЕ ЗначениеЗаполнено(ПервыйРезультатПоиска_Обновления) Тогда
				ПервыйРезультатПоиска_Обновления = Новый Массив;
			КонецЕсли;
			ПервыйРезультатПоиска_Обновления.Добавить(Стр.СтрЗамещение);
			ПервыйРезультатПоиска.Обновления = ПервыйРезультатПоиска_Обновления;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПериодовПримененияФорм;
	
КонецФункции

Функция НайтиЗаменяющиеДокументыФормы(ТаблицаФорм, СтрИсходныйДокумент, ДатаКонцаПериодаОтчета, МассивРезультат = Неопределено)
	
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив;
	КонецЕсли;
	
	Обновления = СтрИсходныйДокумент.Обновления;
	Если НЕ ЗначениеЗаполнено(Обновления) Тогда
		Возврат МассивРезультат;
	Иначе
		Для Каждого Стр Из Обновления Цикл
			СтрДатаОкончания = ?(НЕ ЗначениеЗаполнено(Стр.ДатаОкончания), '39991231', Стр.ДатаОкончания);
			Если (ЗначениеЗаполнено(Стр.ДатаНачала) ИЛИ ЗначениеЗаполнено(СтрДатаОкончания))
			И (НачалоМесяца(Стр.ДатаНачала) <= ДатаКонцаПериодаОтчета И КонецМесяца(СтрДатаОкончания) >= ДатаКонцаПериодаОтчета) Тогда
				Если ЗначениеЗаполнено(Стр.ПредставлениеПриказа) Тогда
					МассивРезультат.Добавить(Стр.ПредставлениеПриказа);
				КонецЕсли;
			Иначе
				НайтиЗаменяющиеДокументыФормы(ТаблицаФорм, Стр, ДатаКонцаПериодаОтчета, МассивРезультат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция НайтиЗаменяющиеДокументыФормата(ТаблицаФорм, СтрИсходныйДокумент, ДатаКонцаПериодаОтчета, МассивРезультат = Неопределено)
	
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив;
	КонецЕсли;
	
	Обновления = СтрИсходныйДокумент.Обновления;
	Если НЕ ЗначениеЗаполнено(Обновления) Тогда
		Возврат МассивРезультат;
	Иначе
		Для Каждого Стр Из Обновления Цикл
			СтрДатаОкончания = ?(НЕ ЗначениеЗаполнено(Стр.ДатаОкончания), '39991231', Стр.ДатаОкончания);
			Если (ЗначениеЗаполнено(Стр.ДатаНачала) ИЛИ ЗначениеЗаполнено(Стр.ДатаНачала))
			И (НачалоМесяца(Стр.ДатаНачала) <= ДатаКонцаПериодаОтчета И КонецМесяца(СтрДатаОкончания) >= ДатаКонцаПериодаОтчета) Тогда
				ПредставлениеФормата = СокрЛП(Стр.Версия);
				Если ЗначениеЗаполнено(Стр.ПредставлениеПриказа) Тогда
					ПредставлениеФормата = ПредставлениеФормата + ", в редакции: " + СокрЛП(Стр.ПредставлениеПриказа);
				КонецЕсли;
				МассивРезультат.Добавить(ПредставлениеФормата);
			Иначе
				НайтиЗаменяющиеДокументыФормата(ТаблицаФорм, Стр, ДатаКонцаПериодаОтчета, МассивРезультат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция СоздатьТаблицуПериодовПримененияФорм()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Код");
	Результат.Колонки.Добавить("ДатаПриказа");
	Результат.Колонки.Добавить("НомерПриказа");
	Результат.Колонки.Добавить("ПредставлениеПриказа");
	Результат.Колонки.Добавить("ДатаНачала");
	Результат.Колонки.Добавить("ДатаОкончания");
	Результат.Колонки.Добавить("ДатаНачалаСтрого");
	Результат.Колонки.Добавить("ДатаОкончанияСтрого");
	Результат.Колонки.Добавить("ДатаНачалаСообщение");
	Результат.Колонки.Добавить("ДатаОкончанияСообщение");
	Результат.Колонки.Добавить("Обновления");
	Результат.Колонки.Добавить("ФормуУчитыватьНачинаяС");
	
	Результат.Индексы.Добавить("Код");
	Результат.Индексы.Добавить("ДатаПриказа");
	Результат.Индексы.Добавить("НомерПриказа");
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьТаблицуПериодовПримененияФорматов()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Версия");
	Результат.Колонки.Добавить("ДатаПриказа");
	Результат.Колонки.Добавить("НомерПриказа");
	Результат.Колонки.Добавить("ПредставлениеПриказа");
	Результат.Колонки.Добавить("КодФормы");
	Результат.Колонки.Добавить("ДатаПриказаФормы");
	Результат.Колонки.Добавить("НомерПриказаФормы");
	Результат.Колонки.Добавить("ДатаНачала");
	Результат.Колонки.Добавить("ДатаОкончания");
	Результат.Колонки.Добавить("ДатаНачалаСтрого");
	Результат.Колонки.Добавить("ДатаОкончанияСтрого");
	Результат.Колонки.Добавить("ДатаНачалаСообщение");
	Результат.Колонки.Добавить("ДатаОкончанияСообщение");
	Результат.Колонки.Добавить("Обновления");
	Результат.Колонки.Добавить("ФорматУчитыватьНачинаяС");
	
	Результат.Индексы.Добавить("Версия");
	Результат.Индексы.Добавить("ДатаПриказа");
	Результат.Индексы.Добавить("НомерПриказа");
	Результат.Индексы.Добавить("КодФормы");
	Результат.Индексы.Добавить("ДатаПриказаФормы");
	Результат.Индексы.Добавить("НомерПриказаФормы");
	
	Возврат Результат;
	
КонецФункции

Функция СтрДатаXMLВДата1С(СтрДатаВремяXML, ЗначениеВозвращаемоеПриНеудаче = '00010101')
	
	Попытка
		Возврат XMLЗначение(Тип("Дата"), СтрДатаВремяXML);
	Исключение
		Возврат ЗначениеВозвращаемоеПриНеудаче;
	КонецПопытки;
	
КонецФункции

Функция ИспользоватьТестовыйСервер() Экспорт
	
	ИспользоватьТестовыйСервер = Ложь;
	Попытка
		ИспользоватьТестовыйСервер = Константы.ДокументооборотСКонтролирующимиОрганами_РежимТестирования.Получить();
	Исключение
	КонецПопытки;
	
	Возврат ИспользоватьТестовыйСервер;

КонецФункции

Функция ИнформационнаяБазаФайловая() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()); 
	
КонецФункции

Функция ЕстьПравоИзмененияРегистраРесурсыМеханизмаОнлайнСервисовРО() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РесурсыМеханизмаОнлайнСервисовРО)
		И ПравоДоступа("Добавление", Метаданные.РегистрыСведений.РесурсыМеханизмаОнлайнСервисовРО);
	
КонецФункции

Функция ДоступВИнтернетОткрыт(ИспользоватьПрокси, ИмяПользователя = "", Пароль = "") ЭКспорт
	
	Соединение = ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.УстановитьСоединениеССерверомМеханизмаОнлайнСервисовРО();
	ОшибкаУстановкиСоединения = Ложь;
	Если Соединение = Неопределено Тогда
		ОшибкаУстановкиСоединения = Истина;
	Иначе
		КлючевойФайл = ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.ПолучитьРесурсССервера(Соединение, "infomap.dat");
		Если КлючевойФайл = Неопределено Тогда
			ОшибкаУстановкиСоединения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ ОшибкаУстановкиСоединения;
	
КонецФункции

Функция ПредставлениеФормы(ИДОтчета, ВыбраннаяФорма) Экспорт
	
	ПредставлениеФормы = Неопределено;
	ТаблицаФормОтчета = Неопределено;
	
	Попытка
		ТаблицаФормОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИДОтчета).ТаблицаФормОтчета();
	Исключение
	КонецПопытки;
	
	Если ТаблицаФормОтчета <> Неопределено Тогда
		
		РезультатПоиска = ТаблицаФормОтчета.Найти(ВыбраннаяФорма, "ФормаОтчета");
		
		Если РезультатПоиска <> Неопределено Тогда
			ПредставлениеФормы = РезультатПоиска.ОписаниеОтчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеФормы;
	
КонецФункции

Процедура ЗагрузитьВнешниеОтчетыВСправочникРО(ТаблицаВнешнихФормРО)
	
	Перем ЗащищенноеСоединение, Логин, Пароль;
	
	Аутентификация = ИнтернетПоддержкаПользователейБРОСлужебныйВызовСервера.ПараметрыАутентификацииНаСайте();
	Если Аутентификация <> Неопределено Тогда
		Логин  = Аутентификация.Логин;
		Пароль = Аутентификация.Пароль;
	КонецЕсли;
	
	Для каждого ПараметрыВнешнейФормыРО Из ТаблицаВнешнихФормРО Цикл
		
		Если ПараметрыВнешнейФормыРО.РезультатСравнения <> Неопределено И ПараметрыВнешнейФормыРО.РезультатСравнения > 0 Тогда
			
			АдресСервера = СокрЛП(ПараметрыВнешнейФормыРО.ВебСсылка);
			Если ПустаяСтрока(АдресСервера) Тогда
				Продолжить;
			КонецЕсли;
			
			Адрес = ""; Протокол = "";
			ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
			ПараметрыПолучения = Новый Структура("Пользователь, Пароль, ЗащищенноеСоединение, Таймаут", Логин, Пароль, ЗащищенноеСоединение, 120);
			
			РезультатПолученияФайла = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
			
			Если РезультатПолученияФайла.Статус Тогда
				
				ОбработатьИЗаписатьВнешнийОтчетВСправочникРО(ПараметрыВнешнейФормыРО, РезультатПолученияФайла.Путь);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол)
	
	АдресСайта = СтрЗаменить(СокрЛП(АдресСайта), " ", "");
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСайта);
	Если НЕ ПустаяСтрока(СтруктураURI.ПутьНаСервере) Тогда
		ПозицияПараметры = СтрНайти(СтруктураURI.ПутьНаСервере, "?");
		Если ПозицияПараметры > 0 Тогда
			ПараметрыURI = Сред(СтруктураURI.ПутьНаСервере, ПозицияПараметры + 1);
			ПозицияПараметраПуть = СтрНайти(ПараметрыURI, "path=");
			Если ПозицияПараметраПуть > 0 Тогда
				ПараметрПутьНаСервере = СтрЗаменить(Сред(ПараметрыURI, ПозицияПараметраПуть + 5), "\", "/");
				АдресСайта = "http://downloads.v8.1c.ru/ftp//" + ПараметрПутьНаСервере;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта,8);
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол = "https";
		Адрес = Сред(АдресСайта,9);
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИЗаписатьВнешнийОтчетВСправочникРО(ПараметрыВнешнейФормы, ПутьКФайлу)
	
	Перем Манифест, ОбъектСправочник;
	
	КаталогРаспаковки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогРаспаковки);
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ПутьКФайлу);
		Архиватор.ИзвлечьВсе(КаталогРаспаковки);
		Архиватор.Закрыть();
		
		Разделитель = ПолучитьРазделительПути();
		Если Прав(КаталогРаспаковки, 1) <> Разделитель Тогда
			КаталогРаспаковки = КаталогРаспаковки + Разделитель;
		КонецЕсли;
		
		Манифест = ПрочитатьМанифест(КаталогРаспаковки);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось распаковать архив с внешней формой отчета.'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка внешних регламентированных отчетов'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
		Возврат;
		
	КонецПопытки;
	
	ВнешнийОтчетИспользовать = Истина;
	Если ВРег(Манифест.ВнешнийОтчетИспользовать) = "FALSE"
	 ИЛИ ВРег(Манифест.ВнешнийОтчетИспользовать) = "ЛОЖЬ"
	 ИЛИ ВРег(Манифест.ВнешнийОтчетИспользовать) = "НЕТ" Тогда
		ВнешнийОтчетИспользовать = Ложь;
	КонецЕсли;
	
	СвойстваМанифеста    = Новый Структура;
	СвойстваКонфигурации = Новый Структура;
	СвойстваОтчета       = Новый Структура;
	
	СвойстваМанифеста.Вставить("ИДКонфигурации", Манифест.ИДКонфигурации);
	СвойстваМанифеста.Вставить("ВерсияКонфигурации", Манифест.ВерсияКонфигурации);
	СвойстваМанифеста.Вставить("ИсточникОтчета", Манифест.ИсточникОтчета);
	СвойстваМанифеста.Вставить("КраткаяВерсияВнешнегоОтчета", Манифест.ВерсияКонфигурации + "." + Манифест.Версия);
	
	СвойстваКонфигурации.Вставить("ИДКонфигурации", РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации());
	СвойстваКонфигурации.Вставить("ВерсияКонфигурации", Манифест.ВерсияКонфигурации);
	
	// Проверка на соответствие идентификатора конфигурации в отчете идентификатору текущей конфигурации
	Если СвойстваМанифеста["ИДКонфигурации"] <> СвойстваКонфигурации["ИДКонфигурации"] Тогда
		ТекстОшибки = НСтр("ru = 'Не пройдена проверка на соответствие идентификатора конфигурации в отчете идентификатору текущей конфигурации'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Проверка на соответствие версии в отчете версии текущей конфигурации
	Если СвойстваМанифеста["ВерсияКонфигурации"] <> СвойстваКонфигурации["ВерсияКонфигурации"] Тогда
		ТекстОшибки = НСтр("ru = 'Не пройдена проверка на соответствие версии в отчете версии текущей конфигурации.'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбъектСправочник = ПараметрыВнешнейФормы.ОтчетСсылка.ПолучитьОбъект();
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получение объекта отчета по ссылке.
			|Описание:
			|""%1""'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Если НЕ ВнешнийОтчетИспользовать Тогда 
		ОбъектСправочник.ВнешнийОтчетИспользовать = Ложь;
		ОбъектСправочник.Записать();
		ПараметрыВнешнейФормы.РезультатСравнения = 4; // внешний отчет отключен
		ТекстДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внешний отчет ""%1"" вер. ""%2"" отключен.'"), СвойстваМанифеста["Имя"], СвойстваМанифеста["КраткаяВерсияВнешнегоОтчета"]);
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация, ТекстДляЖурнала);
		Возврат;
	КонецЕсли;
	
	ИспользуетсяВнешнийОтчет = ОбъектСправочник.ВнешнийОтчетИспользовать;
	
	Если ИспользуетсяВнешнийОтчет Тогда
		
		СвойстваКонфигурации.Вставить("КраткаяВерсияВнешнегоОтчета", ОбъектСправочник.ВнешнийОтчетВерсия);
		
		// Сравнение версий манифеста выбранного и хранимого отчетов
		РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов = 
		РегламентированнаяОтчетностьКлиентСервер.СравнитьКраткиеВерсииОтчетов(СвойстваКонфигурации["КраткаяВерсияВнешнегоОтчета"],
			СвойстваМанифеста["КраткаяВерсияВнешнегоОтчета"]);
		Если РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов  = -1 Тогда // если загружаемый отчет старее хранимого
			ТекстОшибки = НСтр("ru = 'Не пройдена проверка на сравнение версий манифеста выбранного и хранимого отчетов'");
			ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		ФайлОтчета = ФайлОтчетаИзАрхива(КаталогРаспаковки);
		ОбъектВнешнийОтчет = ВнешниеОтчеты.Создать(ФайлОтчета.ПолноеИмя, Истина);
		ХранилищеВнешнегоОтчета = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлОтчета.ПолноеИмя), Новый СжатиеДанных(9));
		
	Исключение
		
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
		
	КонецПопытки;
	
	СвойстваКонфигурации.Вставить("ИсточникОтчета", ОбъектСправочник.ИсточникОтчета);
	
	ПолнаяВерсияВнешнегоОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьВерсиюРегламентированногоОтчета(ОбъектВнешнийОтчет);
	СвойстваПолнойВерсии = РегламентированнаяОтчетностьВызовСервера.РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	СвойстваОтчета.Вставить("ИДКонфигурации", СвойстваПолнойВерсии.ИДКонфигурации);
	СвойстваОтчета.Вставить("ВерсияКонфигурации", СвойстваПолнойВерсии.ВерсияКонфигурации);
	СвойстваОтчета.Вставить("ИсточникОтчета", ОбъектВнешнийОтчет.Метаданные().Имя);
	СвойстваОтчета.Вставить("КраткаяВерсияВнешнегоОтчета", СвойстваПолнойВерсии.КраткаяВерсия);
	
	// Проверка на соответствие идентификатора конфигурации в отчете идентификатору конфигурации в подключаемом отчете
	Если СвойстваКонфигурации["ИДКонфигурации"] <> СвойстваОтчета["ИДКонфигурации"] Тогда
		ТекстОшибки = НСтр("ru = 'Не пройдена проверка на соответствие идентификатора конфигурации идентификатору конфигурации в текущем подключаемом отчете'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Проверка на соответствие версии в подключаемом отчете, при условии, что подключен внешний
	Если ИспользуетсяВнешнийОтчет Тогда
		Если СвойстваОтчета["ВерсияКонфигурации"] <> СвойстваКонфигурации["ВерсияКонфигурации"] Тогда
			ТекстОшибки = НСтр("ru = 'Не пройдена проверка на соответствие версий текущего и подключаемого отчетов'");
			ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на соответствие имени метаданных отчета имени метаданных текущего подключенного отчета
	Если ВРег(СвойстваОтчета["ИсточникОтчета"]) <> ВРег(СвойстваКонфигурации["ИсточникОтчета"]) Тогда
		ТекстОшибки = НСтр("ru = 'Не пройдена проверка на соответствие имен метаданных текущего и подключаемого отчетов'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Сравнение версий выбранного и хранимого отчетов, при условии, что подключен внешний
	Если ИспользуетсяВнешнийОтчет Тогда
		РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов = 
		РегламентированнаяОтчетностьКлиентСервер.СравнитьКраткиеВерсииОтчетов(СвойстваКонфигурации["КраткаяВерсияВнешнегоОтчета"], 
		СвойстваОтчета["КраткаяВерсияВнешнегоОтчета"]);
		Если РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов  = -1 Тогда // если загружаемый отчет старее хранимого
			ТекстОшибки = НСтр("ru = 'Не пройдена проверка на сравнение версий выбранного и хранимого отчетов'");
			ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		
		ОбъектСправочник.ВнешнийОтчетИспользовать = Истина;
		
		ОбъектСправочник.ВнешнийОтчетХранилище = ХранилищеВнешнегоОтчета;
		ОбъектСправочник.ВнешнийОтчетВерсия = СвойстваОтчета["КраткаяВерсияВнешнегоОтчета"];
		
		ОбъектСправочник.Записать();
		
		ПараметрыВнешнейФормы.РезультатСравнения = 3; // внешний отчет загружен
		
		ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внешний отчет вер. ""%1"" успешно загружен.'"), СвойстваОтчета["КраткаяВерсияВнешнегоОтчета"]);
		
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация, ТекстИнформации);
		
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запись объекта отчета с новыми данными.
			|Описание:
			|""%1""'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(КаталогРаспаковки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПрочитатьМанифест(КаталогРаспаковки)
	
	ФайлМанифеста = КаталогРаспаковки + "ExternalManifest.xml";
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ФайлМанифеста);
	Чтение.ПерейтиКСодержимому();
	
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента ИЛИ Чтение.Имя <> "Info" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Info.'"));
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	Манифест = Новый Структура;
	Манифест.Вставить("ИДКонфигурации", "");
	Манифест.Вставить("ВерсияКонфигурации", "");
	Манифест.Вставить("ИсточникОтчета", "");
	Манифест.Вставить("Версия", "");
	Манифест.Вставить("Имя", "");
	Манифест.Вставить("ВнешнийОтчетИспользовать", "true");
	
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(Чтение);
	
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "ExternalReport" Тогда
			Продолжить;
		КонецЕсли;
		
		УзлыМанифеста = Узел.ДочерниеУзлы;
		Для Каждого УзелМанифеста Из УзлыМанифеста Цикл
			Манифест.Вставить(УзелМанифеста.ИмяЭлемента, УзелМанифеста.ТекстовоеСодержимое);
		КонецЦикла;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Возврат Манифест;
	
КонецФункции

Функция ФайлОтчетаИзАрхива(КаталогРаспаковки)
	
	НайденныеФайлы = НайтиФайлы(КаталогРаспаковки, "*.erf", Ложь);
	Если НайденныеФайлы.Количество() = 0 Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка получения отчета. Архив не содержит файл с расширением ""*.erf"".'"));
	Иначе
		Возврат НайденныеФайлы[0];
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьВЖурналРегистрации(Уровень, ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка внешних регламентированных отчетов'"), Уровень,,, ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

