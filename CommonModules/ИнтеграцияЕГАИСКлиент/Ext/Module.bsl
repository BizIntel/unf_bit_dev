
#Область ПрограммныйИнтерфейс

// Инициирует формирование исходящего запроса в ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - описание оповещения процедуры окончания формирования запроса,
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид документа ЕГАИС,
//  ВходныеПараметры - Структура - необходимые данные для формирования запроса,
//  ТранспортныйМодуль - Структура - модуль ТМ, в котором требуется сформировать запрос,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками.
//
Процедура НачатьФормированиеИсходящегоЗапроса(ОповещениеПриЗавершении, ВидДокумента, ВходныеПараметры,
	ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	Контекст.Вставить("ВидДокумента"           , ВидДокумента);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	
	Если ТранспортныйМодуль = Неопределено Тогда
		Отбор = Новый Массив;
		
		Если ВходныеПараметры.Свойство("ДокументСсылка") Тогда
			Если ТипЗнч(ВходныеПараметры.ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
				ОрганизацияЕГАИС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузополучатель");
			ИначеЕсли ТипЗнч(ВходныеПараметры.ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
				ОрганизацияЕГАИС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузоотправитель");
			Иначе
				ОрганизацияЕГАИС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "ОрганизацияЕГАИС");
			КонецЕсли;
			
			ИдентификаторФСРАР = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "Код");
			Отбор.Добавить(Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ИдентификаторФСРАР));
		КонецЕсли;
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
		ВыбратьТранспортныйМодуль(ОповещениеВыбора, Контекст, Отбор);
	Иначе
		ФормированиеИсходящегоЗапроса_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Инициирует загрузку новых документов из ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - описание оповещения процедуры окончания загрузки документов,
//  ТранспортныйМодуль      - Структура - модуль ТМ, из которого требуется загрузить документы,
//  ОтображатьСообщения     - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ИдентификаторКлиента    - УникальныйИдентификатор - идентификатор формы, вызвавшей процедуру,
//  ДополнительныеПараметры - Произвольный - произвольные параметры прикладной конфигурации.
//
Процедура НачатьЗагрузкуДокументов(ОповещениеПриЗавершении,
	ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ИдентификаторКлиента = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Контекст.Вставить("Результат"              , ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов());
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ОповещениеВыбора = Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
		ВыбратьТранспортныйМодуль(ОповещениеВыбора, Контекст, Новый Структура("Поле, Значение", "ЗагружатьВходящиеДокументы", Истина));
	Иначе
		ЗагрузкаДокументов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
	КонецЕсли;

КонецПроцедуры

// Инициирует обработку ответов на запросы из ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - описание оповещения процедуры окончания обработки ответов,
//  ТранспортныйМодуль - Структура - модуль ТМ, из которого требуется загрузить ответы,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ИдентификаторКлиента - УникальныйИдентификатор - идентификатор формы, вызвавшей процедуру,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации,
//  УстанавливатьКомпонентуHTTPЗапросов - Булево - признак установки компоненты для веб-клиента.
//
Процедура НачатьОбработкуОтветов(ОповещениеПриЗавершении,
	ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ИдентификаторКлиента = Неопределено,
	ДополнительныеПараметры = Неопределено, УстанавливатьКомпонентуHTTPЗапросов = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Контекст.Вставить("УстанавливатьКомпоненту", УстанавливатьКомпонентуHTTPЗапросов);
	Контекст.Вставить("Результат"              , ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов());
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаОтветов_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
		ВыбратьТранспортныйМодуль(ОповещениеВыбора, Контекст);
	Иначе
		ОбработкаОтветов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Подписывает чек в системе ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания чека,
//  ПараметрыЧека           - Массив - параметры чека в формате БПО,
//  ТранспортныйМодуль      - Структура - данные транспортного модуля, если Неопределено, то будет предложен выбор,
//  ОтображатьСообщения     - Булево - если Истина, то пользователю будут отображены сообщения с ошибками.
//
Процедура НачатьФормированиеПодписиЧека(ОповещениеПриЗавершении, ПараметрыЧека, ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Результат = РезультатПодписиЧека(ТранспортныйМодуль);
	
	Если НЕ ИнтеграцияЕГАИСКлиентПовтИсп.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС() Тогда
		Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	РезультатПодготовки = РезультатПодписиЧека();
	ПараметрыЧекаЕГАИС = ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, РезультатПодготовки);
	
	Если НЕ РезультатПодготовки.Результат Тогда
		ЗавершитьОперациюСОшибкой(ОповещениеПриЗавершении, ОтображатьСообщения, РезультатПодготовки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() > 0 Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Контекст.Вставить("ТранспортныйМодуль"     , ТранспортныйМодуль);
		Контекст.Вставить("ПараметрыЧека"          , ПараметрыЧека);
		Контекст.Вставить("ПараметрыЧекаЕГАИС"     , ПараметрыЧекаЕГАИС);
		Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
		Контекст.Вставить("Результат"              , Результат);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			ОповещениеВыбора = Новый ОписаниеОповещения("ФормированиеПодписиЧека_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
			ВыбратьТранспортныйМодуль(ОповещениеВыбора, Контекст);
		Иначе
			ФормированиеПодписиЧека_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
		КонецЕсли;
	Иначе
		Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Прекращает выполнение текущей операции с оборудованием с ошибкой и вызывает завершающую процедуру.
//
// Параметры:
//  ОповещениеПриЗавершении  - ОписаниеОповещения - процедура, вызываемая после выполнения операции на оборудовании,
//  ОтображатьСообщения      - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ТекстОшибки              - Строка - описание ошибки.
//
Процедура ЗавершитьОперациюСОшибкой(ОповещениеПриЗавершении, ОтображатьСообщения = Истина, ТекстОшибки = "") Экспорт
	
	Если ОтображатьСообщения И НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
		
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Результат", Ложь);
		Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Подключает обработчик ожидания для получения ответов из ЕГАИС.
//
Процедура ПодключитьОбработчикОтветовЕГАИС() Экспорт
	
	Если НЕ ИнтеграцияЕГАИСВызовСервера.ДоступнаОбработкаОтветов() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Поле, Значение", "ОбменНаСервере", Ложь);
	СписокУТМ = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	
	Если СписокУТМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьОтветыЕГАИСНаКлиенте", 300, Ложь);
	
КонецПроцедуры

// Проверяет возможность и при необходимости выполняет обработку ответов из ЕГАИС.
//
Процедура НачатьОбработкуОтветовПоРасписанию() Экспорт
	
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ИмяПараметра = "ИнтеграцияЕГАИС.ДатаПоследнейОбработкиОтветов";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ДатаПроверки);
	КонецЕсли;
	
	РасписаниеСтруктура = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РасписаниеОбработкиОтветов;
	Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(РасписаниеСтруктура);
	
	Если ЗначениеЗаполнено(ПараметрыПриложения[ИмяПараметра]) И НЕ ИнтеграцияЕГАИСВызовСервера.ПроверитьРасписание(Расписание, ДатаПроверки, ПараметрыПриложения[ИмяПараметра]) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения[ИмяПараметра] = ДатаПроверки;
	
	Отбор = Новый Структура("Поле, Значение", "ОбменНаСервере", Ложь);
	
	СписокУТМ = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если СписокУТМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОбработкаОтветовПоРасписанию_Завершение", ЭтотОбъект));
	Контекст.Вставить("СписокУТМ", СписокУТМ);
	Контекст.Вставить("ТекущийИндекс", 0);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветовПоРасписанию_ПослеОбработкиОтветовУТМ", ЭтотОбъект, Контекст);
	НачатьОбработкуОтветов(ОповещениеПриЗавершении, СписокУТМ[0], Ложь,,, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Начинает получение данных из УТМ по переданному списку URL-адресов.
//
Процедура НачатьПолучениеДанныхПоСпискуURL(ОповещениеПриЗавершении, ТранспортныйМодуль, СписокURL, ОтображатьСообщения)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки, ПолученныеДанные", Ложь, "", Новый Массив);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ТранспортныйМодуль"     , ТранспортныйМодуль);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("СписокURL"              , СписокURL);
	Контекст.Вставить("ТекущийИндекс"          , 0);
	Контекст.Вставить("Результат"              , Результат);
	
	Если СписокURL.Количество() = 0 Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СписокURL[0].АдресURL);
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка", ЭтотОбъект, Контекст),
			Контекст.ТранспортныйМодуль,
			ДанныеЗапроса,
			Контекст.ОтображатьСообщения);
	#Иначе
		ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка(
			ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
			Контекст);
	#КонецЕсли
	
КонецПроцедуры

// Начинает удаление данных из УТМ по переданному списку URL-адресов.
//
Процедура НачатьУдалениеДанныхПоСпискуURL(ОповещениеПриЗавершении, ТранспортныйМодуль, СписокURL, ОтображатьСообщения)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ТранспортныйМодуль"     , ТранспортныйМодуль);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("СписокURL"              , СписокURL);
	Контекст.Вставить("ТекущийИндекс"          , 0);
	Контекст.Вставить("Результат"              , Результат);
	
	Если СписокURL.Количество() = 0 Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СписокURL[0]);
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
	ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка", ЭтотОбъект, Контекст),
			Контекст.ТранспортныйМодуль,
			ДанныеЗапроса,
			Контекст.ОтображатьСообщения);
	#Иначе
		УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка(
			ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
			Контекст);
	#КонецЕсли
	
КонецПроцедуры

// Сохраняет текст полученного документа из списка URL-адресов.
//
Процедура ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента = ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента();
	СтруктураДокумента.ИдентификаторЗапроса = Контекст.СписокURL[Контекст.ТекущийИндекс].ИдентификаторЗапроса;
	СтруктураДокумента.АдресЗапроса = Контекст.СписокURL[Контекст.ТекущийИндекс].АдресURL;
	СтруктураДокумента.ТекстXML = Результат.ОтветМодуляЕГАИС;
	
	Контекст.Результат.ПолученныеДанные.Добавить(СтруктураДокумента);
	
	Если Контекст.ТекущийИндекс = Контекст.СписокURL.ВГраница() Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	Иначе
		URLАдрес = Контекст.СписокURL[Контекст.ТекущийИндекс + 1].АдресURL;
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLАдрес);
		
		Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
		#Иначе
			ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка(
				ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
				Контекст);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Удаляет успешно загруженные документы.
//
Процедура УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось удалить документ %1'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Контекст.СписокURL[Контекст.ТекущийИндекс]);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Результат.ОписаниеОшибки;
		
		Если Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.ТекущийИндекс = Контекст.СписокURL.ВГраница() Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	Иначе
		URLАдрес = Контекст.СписокURL[Контекст.ТекущийИндекс + 1];
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLАдрес);
		
		Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
		#Иначе
			УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка(
				ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
				Контекст);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Продолжает формирование исходящего запроса после выбора транспортного модуля.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт
	
	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Если (Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОрганизаций")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции"))
		И ПустаяСтрока(Контекст.ВходныеПараметры.ИНН) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров", ЭтотОбъект, Контекст);
		Если Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции") Тогда
			ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите ИНН производителя или импортера алкогольной продукции'"), 12);
		Иначе
			ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите ИНН производителя, импортера или собственной организации'"), 12);
		КонецЕсли;
		
	ИначеЕсли (Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиА")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиБ"))
		И ПустаяСтрока(Контекст.ВходныеПараметры.РегистрационныйНомер) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров", ЭтотОбъект, Контекст);
		Если Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиА") Тогда
			ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите регистрационный номер справки 1'"), 50);
		Иначе
			ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите регистрационный номер справки 2'"), 50);
		КонецЕсли;
		
	ИначеЕсли Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросТТН")
		И ПустаяСтрока(Контекст.ВходныеПараметры.ИдентификаторЕГАИС) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров", ЭтотОбъект, Контекст);
		ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите идентификатор ТТН'"), 50);
		
	Иначе
		ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ввод параметра исходящего запроса.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров(ПараметрЗапроса, Контекст) Экспорт
	
	Если ПараметрЗапроса = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	Если Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОрганизаций")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции") Тогда
		
		Если ПустаяСтрока(ПараметрЗапроса) Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Не введен ИНН.'"));
			Возврат;
		КонецЕсли;
		
		Контекст.ВходныеПараметры.Вставить("ИНН", ПараметрЗапроса);
		
	ИначеЕсли Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиА")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиБ") Тогда
		
		Если ПустаяСтрока(ПараметрЗапроса) Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Не введен регистрационный номер.'"));
			Возврат;
		КонецЕсли;
		
		Контекст.ВходныеПараметры.Вставить("РегистрационныйНомер", ПараметрЗапроса);
		
	ИначеЕсли Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросТТН") Тогда
		
		Если ПустаяСтрока(ПараметрЗапроса) Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Не введен идентификатор ТТН.'"));
			Возврат;
		КонецЕсли;
		
		Контекст.ВходныеПараметры.Вставить("ИдентификаторЕГАИС", ПараметрЗапроса);
		
	КонецЕсли;
	
	ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных(Контекст);
	
КонецПроцедуры

// Формирует исходящий запрос в УТМ после получения всех данных.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных(Контекст)
	
	ДокументОснование = ?(
		ТипЗнч(Контекст.ВходныеПараметры) = Тип("Структура") И Контекст.ВходныеПараметры.Свойство("ДокументСсылка"),
		Контекст.ВходныеПараметры.ДокументСсылка,
		Неопределено);
	
	Контекст.Вставить("ДокументОснование", ДокументОснование);
	
	Если Контекст.ТранспортныйМодуль.ОбменНаСервере Тогда
		Результат = ИнтеграцияЕГАИСВызовСервера.СформироватьЗапросВУТМ(
			Контекст.ТранспортныйМодуль,
			Контекст.ВидДокумента,
			Контекст.ВходныеПараметры,
			ДокументОснование);
			
		Если НЕ Результат.Результат Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Оповестить("ОбновитьСписокЗапросовЕГАИС");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	Иначе
		ТекстОшибки = "";
		Если НЕ ПустаяСтрока(Контекст.ТранспортныйМодуль.ИмяОбработкиОбслуживания) Тогда
			ДанныеЗапроса = ИнтеграцияЕГАИСВызовСервера.ПодготовитьДанныеЗапросаВУТМЧерезОбработкуОбслуживания(
				Контекст.ТранспортныйМодуль,
				Контекст.ВидДокумента,
				Контекст.ВходныеПараметры,
				ТекстОшибки);
		Иначе
			ДанныеЗапроса = ИнтеграцияЕГАИСВызовСервера.ПодготовитьДанныеЗапросаВУТМ(
				Контекст.ТранспортныйМодуль,
				Контекст.ВидДокумента,
				Контекст.ВходныеПараметры,
				ТекстОшибки);
		КонецЕсли;
	
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Контекст.Вставить("ДанныеЗапроса", ДанныеЗапроса);
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеФормированияHTTPЗапроса", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
			Возврат;
		#Иначе
			Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, Контекст.ДанныеЗапроса);
		#КонецЕсли
		
		ФормированиеИсходящегоЗапроса_ПослеФормированияHTTPЗапроса(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные исходящего запроса после получения ответа из УТМ.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеФормированияHTTPЗапроса(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.ДанныеЗапроса.Вставить("ИдентификаторЗапроса", Результат.ИдентификаторЗапроса);
	
	ИнтеграцияЕГАИСВызовСервера.ЗавершитьФормированиеИсходящегоЗапроса(Контекст.ДанныеЗапроса, Контекст.ВидДокумента, Контекст.ДокументОснование);
	
	Оповестить("ОбновитьСписокЗапросовЕГАИС");
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	
КонецПроцедуры

// Начинает загрузку документов из ЕГАИС.
//
Процедура ЗагрузкаДокументов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт
	
	Если НЕ ТранспортныйМодуль.ЗагружатьВходящиеДокументы Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Загрузка документов запрещена.'"));
		Возврат;
	КонецЕсли;
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, РезультатБлокировки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Если ТранспортныйМодуль.ОбменНаСервере Тогда
		Результат = ИнтеграцияЕГАИСВызовСервера.ЗагрузитьДокументыИзУТМ(ТранспортныйМодуль, Контекст.ДополнительныеПараметры);
		
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		Если НЕ Результат.Результат Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Оповестить("ОбновитьСписокЗапросовЕГАИС");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	Иначе
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "/opt/out";
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеПолученияСпискаДокументов", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
			Возврат;
		#Иначе
			Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		#КонецЕсли
		
		ЗагрузкаДокументов_ПослеПолученияСпискаДокументов(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает массив документов для последующей загрузки.
//
Процедура ЗагрузкаДокументов_ПослеПолученияСпискаДокументов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		СписокURL = ИнтеграцияЕГАИСВызовСервера.ПодготовитьСписокURLДокументовКЗагрузке(Результат.ОтветМодуляЕГАИС);
	#Иначе
		СписокURL = ИнтеграцияЕГАИСКлиентСервер.ПодготовитьСписокURLДокументовКЗагрузке(Результат.ОтветМодуляЕГАИС);
	#КонецЕсли
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеЗагрузкиСпискаДокументов", ЭтотОбъект, Контекст);
	НачатьПолучениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, СписокURL, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Записывает в базу данных загруженные документы.
//
Процедура ЗагрузкаДокументов_ПослеЗагрузкиСпискаДокументов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(Контекст.ТранспортныйМодуль, Результат.ПолученныеДанные, Контекст.ОтображатьСообщения, Контекст.ДополнительныеПараметры);
	
	Если Контекст.Результат.ЗагруженныеДокументы.Количество() = 0 Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеУдаленияЗагруженныхДокументов", ЭтотОбъект, Контекст);
	НачатьУдалениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, Контекст.Результат.ЗагруженныеДокументы, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Вызывает оповещение процедуры завершения загрузки документов.
//
Процедура ЗагрузкаДокументов_ПослеУдаленияЗагруженныхДокументов(Результат, Контекст) Экспорт
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ Результат.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
	Иначе
		Оповестить("ОбновитьСписокЗапросовЕГАИС");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	КонецЕсли;
	
КонецПроцедуры

// Начинает обработку ответов из ЕГАИС.
//
Процедура ОбработкаОтветов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт

	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, РезультатБлокировки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Если ТранспортныйМодуль.ОбменНаСервере Тогда
		Результат = ИнтеграцияЕГАИСВызовСервера.ОбработатьОтветыИзУТМ(ТранспортныйМодуль, Контекст.ДополнительныеПараметры);
		
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		Если НЕ Результат.Результат Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Оповестить("ОбновитьСписокЗапросовЕГАИС");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	Иначе
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "/opt/in";
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ОбработкаОтветов_ПослеПолученияСпискаИсходящихЗапросов", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения,
				Контекст.УстанавливатьКомпоненту);
			Возврат;
		#Иначе
			Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		#КонецЕсли
		
		ОбработкаОтветов_ПослеПолученияСпискаИсходящихЗапросов(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Наичнает получение списка ответов из ЕГАИС.
//
Процедура ОбработкаОтветов_ПослеПолученияСпискаИсходящихЗапросов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("СоответствиеЗапросов", Новый Соответствие);
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВызовСервера.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресЗапроса");
	#Иначе
		ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресЗапроса");
	#КонецЕсли
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("ОбработкаОтветов_ПослеПолученияСпискаОтветов", ЭтотОбъект, Контекст),
			Контекст.ТранспортныйМодуль,
			ДанныеЗапроса,
			Контекст.ОтображатьСообщения);
		Возврат;
	#Иначе
		Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса);
	#КонецЕсли
	
	ОбработкаОтветов_ПослеПолученияСпискаОтветов(Результат, Контекст);
	
КонецПроцедуры

// Подготавливает массив документов для последующей загрузки.
//
Процедура ОбработкаОтветов_ПослеПолученияСпискаОтветов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВызовСервера.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресаОтветов");
	#Иначе
		ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресаОтветов");
	#КонецЕсли
	
	СписокURL = ИнтеграцияЕГАИСВызовСервера.ПодготовитьСписокURLОтветовКЗагрузке(Контекст.СоответствиеЗапросов);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветов_ПослеЗагрузкиСпискаОтветов", ЭтотОбъект, Контекст);
	НачатьПолучениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, СписокURL, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Записывает в базу данных полученные ответы.
//
Процедура ОбработкаОтветов_ПослеЗагрузкиСпискаОтветов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(Контекст.ТранспортныйМодуль, Результат.ПолученныеДанные, Контекст.ОтображатьСообщения, Контекст.ДополнительныеПараметры);
	
	Если Контекст.Результат.ЗагруженныеДокументы.Количество() = 0 Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	СписокURL = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Контекст.Результат.ЗагруженныеДокументы);
	
	Для Каждого КлючЗначение Из Контекст.СоответствиеЗапросов Цикл
		Если ПустаяСтрока(КлючЗначение.Значение.АдресЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресаОтветов = КлючЗначение.Значение.АдресаОтветов;
		
		Для Каждого АдресОтвета Из АдресаОтветов Цикл
			Если СписокURL.Найти(АдресОтвета) <> Неопределено И СписокURL.Найти(КлючЗначение.Значение.АдресЗапроса) = Неопределено Тогда
				СписокURL.Добавить(КлючЗначение.Значение.АдресЗапроса);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветов_ПослеУдаленияЗагруженныхОтветов", ЭтотОбъект, Контекст);
	НачатьУдалениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, СписокURL, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Вызывает оповещение процедуры завершения обработи ответов.
//
Процедура ОбработкаОтветов_ПослеУдаленияЗагруженныхОтветов(Результат, Контекст) Экспорт
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ Результат.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
	Иначе
		Оповестить("ОбновитьСписокЗапросовЕГАИС");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат подписи чека ККМ в ЕГАИС.
//
Функция РезультатПодписиЧека(ТранспортныйМодуль = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("Результат"         , Ложь);
	Результат.Вставить("ОписаниеОшибки"    , "");
	Результат.Вставить("АдресЧека"         , "");
	Результат.Вставить("ПодписьЧека"       , "");
	Результат.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру данных чека для формирования подписи ЕГАИС.
//
Функция СтруктураДанныхЧекаККМ()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИНН"                 , "");           // ИНН Организации
	СтруктураДанных.Вставить("КПП"                 , Неопределено); // КПП обособленного подразделения по розничной лицензии.
	СтруктураДанных.Вставить("АдресМагазина"       , "");           // Адрес обособленного подразделения по розничной лицензии (Длина до 128 символов).
	СтруктураДанных.Вставить("НаименованиеМагазина", "");           // Наименование магазина (Длина до 128 символов).
	СтруктураДанных.Вставить("ЗаводскойНомерККМ"   , "");           // Заводской номер ККМ (Длина до 128 символов).
	СтруктураДанных.Вставить("НомерСменыККМ"       , 0);            // Номер смены.
	СтруктураДанных.Вставить("НомерЧекаККМ"        , 0);            // Номер чека.
	СтруктураДанных.Вставить("ДатаВремяЧека"       , '00010101');   // Дата, время чека. Формат: ДДММГГЧЧММ - день, месяц, год, часы, минуты.
	СтруктураДанных.Вставить("Возврат"             , Ложь);         // Если Истина - то покупатель возвращает товар.
	СтруктураДанных.Вставить("ТаблицаТоваров"      , Новый Массив); // Таблица товаров
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру данных строки чека для формирования подписи ЕГАИС.
//
Функция СтруктураДанныхСтрокиЧекаККМ()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Наименование"  , "");
	СтруктураДанных.Вставить("Цена"          , 0);
	СтруктураДанных.Вставить("ШтрихкодМарки" , "");
	СтруктураДанных.Вставить("ШтрихкодТовара", "");
	СтруктураДанных.Вставить("Объем"         , 0);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Добавляет в текст ошибки строку с ошибкой.
//
// Параметры:
//  ТекстОшибки  - Строка - Общий текст ошибки,
//  СтрокаОшибки - Строка - Добавляемая строка ошибки,
//  Номенклатура - Строка - Номенклатура, для которой зафиксирована ошибка.
//
Процедура ДобавитьСтрокуСОшибкой(ТекстОшибки, СтрокаОшибки, Номенклатура)

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС;
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибки + СтрЗаменить(СтрокаОшибки, "%1", Номенклатура);

КонецПроцедуры

// Подготавливает входящие данные для подписи чека.
//
Функция ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, РезультатПодготовки)

	ВходящиеДанные = СтруктураДанныхЧекаККМ();
	
	Если ТипЗнч(ПараметрыЧека) = Тип("Массив") Тогда
		ТаблицаТоваров = ПараметрыЧека[0];
		ШапкаЧека = ПараметрыЧека[2];
		
		Если ТаблицаТоваров.Количество() > 0 И ТаблицаТоваров[0].Количество() < 18 ИЛИ ШапкаЧека.Количество() < 21 Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		ВходящиеДанные.ИНН                  = ШапкаЧека[14];
		ВходящиеДанные.КПП                  = ШапкаЧека[17];
		ВходящиеДанные.АдресМагазина        = ШапкаЧека[19];
		ВходящиеДанные.НаименованиеМагазина = ШапкаЧека[18];
		ВходящиеДанные.ЗаводскойНомерККМ    = ШапкаЧека[20];
		ВходящиеДанные.НомерСменыККМ        = ШапкаЧека[8];
		ВходящиеДанные.НомерЧекаККМ         = ШапкаЧека[9];
		ВходящиеДанные.ДатаВремяЧека        = ШапкаЧека[11];
		ВходящиеДанные.Возврат              = ШапкаЧека[0] = 1;
		
	ИначеЕсли ТипЗнч(ПараметрыЧека) = Тип("Структура") Тогда
		ТаблицаТоваров = ПараметрыЧека.ПозицииЧека;
		
		ВходящиеДанные.ИНН                  = ПараметрыЧека.ОрганизацияИНН;
		ВходящиеДанные.КПП                  = ПараметрыЧека.ОрганизацияКПП;
		ВходящиеДанные.АдресМагазина        = ПараметрыЧека.АдресМагазина;
		ВходящиеДанные.НаименованиеМагазина = ПараметрыЧека.НаименованиеМагазина;
		ВходящиеДанные.ЗаводскойНомерККМ    = ПараметрыЧека.СерийныйНомер;
		ВходящиеДанные.НомерСменыККМ        = ПараметрыЧека.НомерСмены;
		ВходящиеДанные.НомерЧекаККМ         = ПараметрыЧека.НомерЧека;
		ВходящиеДанные.ДатаВремяЧека        = ПараметрыЧека.ДатаВремя;
		ВходящиеДанные.Возврат              = ПараметрыЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		
	КонецЕсли;
	
	Если Число(ВходящиеДанные.НомерСменыККМ) <= 0 Тогда
		ВходящиеДанные.НомерСменыККМ = 1;
	КонецЕсли;
	
	Если ВходящиеДанные.НомерЧекаККМ <= 0 Тогда
		ВходящиеДанные.НомерЧекаККМ = 1;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если ТипЗнч(СтрокаТаблицы) = Тип("СписокЗначений") Тогда
			ПараметрыАлкогольнойПродукции = СтрокаТаблицы[17].Значение;
		Иначе
			ПараметрыАлкогольнойПродукции = СтрокаТаблицы.ПараметрыАлкогольнойПродукции;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыАлкогольнойПродукции) <> Тип("Массив") Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		Если ПараметрыАлкогольнойПродукции.Количество() <> 0 Тогда
			
			Маркируемый = ПараметрыАлкогольнойПродукции[0];
			
			Если НЕ Маркируемый Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТаблицы) = Тип("СписокЗначений") Тогда
				КоличествоСтрок = СтрокаТаблицы[5].Значение;
			Иначе
				КоличествоСтрок = СтрокаТаблицы.Количество;
			КонецЕсли;
			
			Для Сч = 1 По КоличествоСтрок Цикл
				СтрокаЧека = СтруктураДанныхСтрокиЧекаККМ();
				Если ТипЗнч(СтрокаТаблицы) = Тип("СписокЗначений") Тогда
					СтрокаЧека.Наименование = СокрЛП(СтрокаТаблицы[0].Значение);
					
					Если СтрокаТаблицы[7].Значение = 0 Тогда
						СтрокаЧека.Цена = СтрокаТаблицы[4].Значение;
					ИначеЕсли СтрокаТаблицы[9].Значение = 0 Тогда
						СтрокаЧека.Цена = СтрокаТаблицы[4].Значение;
					Иначе
						СтрокаЧека.Цена = Окр(СтрокаТаблицы[9].Значение / СтрокаТаблицы[5].Значение, 2, 1);
					КонецЕсли;
					
					СтрокаЧека.ШтрихкодТовара = СтрокаТаблицы[1].Значение;
				Иначе
					СтрокаЧека.Наименование = СтрокаТаблицы.Наименование;
					СтрокаЧека.Цена = СтрокаТаблицы.Цена;
					СтрокаЧека.ШтрихкодТовара = СтрокаТаблицы.Штрихкод;
				КонецЕсли;
				
				Если ТипЗнч(ПараметрыАлкогольнойПродукции[1]) = Тип("Массив") Тогда
					СтрокаЧека.ШтрихкодМарки = ?(ПараметрыАлкогольнойПродукции[1].ВГраница() < Сч - 1, "", ПараметрыАлкогольнойПродукции[1][Сч - 1]);
				ИначеЕсли ТипЗнч(ПараметрыАлкогольнойПродукции[1]) = Тип("Строка") И Сч = 1 Тогда
					СтрокаЧека.ШтрихкодМарки = ПараметрыАлкогольнойПродукции[1];
				КонецЕсли;
				
				СтрокаЧека.Объем = ПараметрыАлкогольнойПродукции[2];
				
				ВходящиеДанные.ТаблицаТоваров.Добавить(СтрокаЧека);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПодготовки.Результат = Истина;
	
	Возврат ВходящиеДанные;

КонецФункции

// Проверяет корректность входящих данных перед отправкой запроса в УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные УТМ, в котором требуется подписать чек,
//  ПараметрыЧекаЕГАИС - Структура - подготовленные ранее данные чека.
//
// Возвращаемое значение:
//   Структура - результат проверки данных.
//
Функция ПроверитьВходящиеДанныеПередПодписьюЧека(ТранспортныйМодуль, ПараметрыЧекаЕГАИС)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) И НЕ ПустаяСтрока(ТранспортныйМодуль.ИНН) Тогда
		ПараметрыЧекаЕГАИС.ИНН = ТранспортныйМодуль.ИНН;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И НЕ ПустаяСтрока(ТранспортныйМодуль.КПП) Тогда
		ПараметрыЧекаЕГАИС.КПП = ТранспортныйМодуль.КПП;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) И НЕ ПустаяСтрока(ТранспортныйМодуль.Адрес) Тогда
		ПараметрыЧекаЕГАИС.АдресМагазина = Лев(ТранспортныйМодуль.Адрес, 128);
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.НаименованиеМагазина) И НЕ ПустаяСтрока(ТранспортныйМодуль.Представление) Тогда
		ПараметрыЧекаЕГАИС.НаименованиеМагазина = Лев(ТранспортныйМодуль.Представление, 128);
	КонецЕсли;
	
	МассивКодовМарок = Новый Массив;
	ТекстОшибки  = "";
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан ИНН организации.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И СтрДлина(ПараметрыЧекаЕГАИС.ИНН) = 10 Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан КПП торгового объекта.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан адрес магазина.'"), "");
	КонецЕсли;
	
	Для Каждого СтрокаЧека Из ПараметрыЧекаЕГАИС.ТаблицаТоваров Цикл
		
		Если СтрокаЧека.Цена = 0 Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указана цена.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаЧека.ШтрихкодМарки) Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указан штрихкод марки алкогольной продукции.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
		Если МассивКодовМарок.Найти(СокрЛП(СтрокаЧека.ШтрихкодМарки)) <> Неопределено Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'В чеке обнаружены дублирующиеся позиции.'"), "");
		КонецЕсли;
		
		МассивКодовМарок.Добавить(СокрЛП(СтрокаЧека.ШтрихкодМарки));
	КонецЦикла;
	
	Результат.ОписаниеОшибки = ТекстОшибки;
	Результат.Результат = ПустаяСтрока(ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

// Начинает выгрузку алкогольной продукции в УТМ.
//
Процедура ФормированиеПодписиЧека_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт

	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	Контекст.Результат.ТранспортныйМодуль = ТранспортныйМодуль;
	
	РезультатОперации = ПроверитьВходящиеДанныеПередПодписьюЧека(Контекст.ТранспортныйМодуль, Контекст.ПараметрыЧекаЕГАИС);
	Если НЕ РезультатОперации.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры = Новый Массив;
	ВходныеПараметры.Добавить(Контекст.ПараметрыЧекаЕГАИС);
	ВходныеПараметры.Добавить(Контекст.ПараметрыЧекаЕГАИС.ТаблицаТоваров);
		
	НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ФормированиеПодписиЧека_ПослеФормированияИсходящегоЗапроса", ЭтотОбъект, Контекст),
		ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ"),
		ВходныеПараметры,
		Контекст.ТранспортныйМодуль,
		Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Возвращает результат подписи чека в исходную процедуру.
//
Процедура ФормированиеПодписиЧека_ПослеФормированияИсходящегоЗапроса(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		Контекст.Результат.ОписаниеОшибки = Результат.ОписаниеОшибки;
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Контекст.Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Результат.Результат   = Истина;
	Контекст.Результат.АдресЧека   = Результат.ИдентификаторЗапроса;
	Контекст.Результат.ПодписьЧека = Результат.Подпись;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	
КонецПроцедуры

// Выбирает доступный транспортный модуль из настроек обмена.
//
Процедура ВыбратьТранспортныйМодуль(ОповещениеВыбора, Контекст, Отбор = Неопределено)

	СписокДоступныхМодулей = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	
	Если СписокДоступныхМодулей.Количество() = 0 Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Отсутствуют доступные транспортные модули.'"));
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхМодулей.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, СписокДоступныхМодулей[0]);
	Иначе
		ИдентификаторФСРАРПоУмолчанию = "";
		
		СписокДляВыбора = Новый СписокЗначений;
		Для Каждого ТранспортныйМодуль Из СписокДоступныхМодулей Цикл
			Если ТранспортныйМодуль.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
				ИдентификаторФСРАРПоУмолчанию = ТранспортныйМодуль.ИдентификаторФСРАР;
			ИначеЕсли ТранспортныйМодуль.ИдентификаторФСРАР = ИдентификаторФСРАРПоУмолчанию Тогда
				Продолжить;
			КонецЕсли;
			
			СписокДляВыбора.Добавить(ТранспортныйМодуль, ТранспортныйМодуль.Представление);
		КонецЦикла;
		
		Если СписокДляВыбора.Количество() = 1 Тогда
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, СписокДляВыбора[0].Значение);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Контекст.ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ОповещениеВыбора"       , ОповещениеВыбора);
		
		СписокДляВыбора.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения("ВыборТранспортногоМодуля_Завершение", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru = 'Выберите транспортный модуль ЕГАИС'"));
	КонецЕсли;

КонецПроцедуры

// Передает в вызвавшую процедуру выбранную настройку обмена.
//
Процедура ВыборТранспортногоМодуля_Завершение(ВыбранныйЭлемент, Контекст) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеВыбора, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

// Обрабатывает ответы следующего элемента массива УТМ.
//
Процедура ОбработкаОтветовПоРасписанию_ПослеОбработкиОтветовУТМ(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'ЕГАИС'"),
			"Ошибка",
			Результат.ОписаниеОшибки);
	КонецЕсли;
	
	Если Контекст.ТекущийИндекс = Контекст.СписокУТМ.ВГраница() Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении);
	Иначе
		ТранспортныйМодуль = Контекст.СписокУТМ[Контекст.ТекущийИндекс + 1];
		Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
		
		НачатьОбработкуОтветов(
			Новый ОписаниеОповещения("ОбработкаОтветовПоРасписанию_ПослеОбработкиОтветовУТМ", ЭтотОбъект, Контекст),
			ТранспортныйМодуль,
			Ложь,,,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Записывает сообщения в журнал регистрации.
//
Процедура ОбработкаОтветовПоРасписанию_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
	Если ТипЗнч(ПараметрыПриложения[ИмяПараметра]) <> Тип("СписокЗначений") ИЛИ ПараметрыПриложения[ИмяПараметра].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(ПараметрыПриложения[ИмяПараметра]);
	
КонецПроцедуры

#КонецОбласти