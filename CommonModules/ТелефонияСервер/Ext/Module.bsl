
#Область ПрограммныйИнтерфейс

Процедура ОбработатьЗвонок(знач НомерТелефонаАбонента, знач ПользовательКому,
	знач ДатаЗвонка, знач ТипЗвонка, знач ВариантСобытия) Экспорт
	
	Если Не ОбрабатыватьЗвонокСНомера(НомерТелефонаАбонента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗвонка = "Входящий" Тогда
		
		АбонентОтКого = Неопределено;
		
		Если Не ПустаяСтрока(НомерТелефонаАбонента) Тогда
			АбонентОтКого = ПолучитьАбонентаПоНомеруТелефона(НомерТелефонаАбонента);
		КонецЕсли;
		
		Если ВариантСобытия = "НачалоСигналаВходящего" Тогда
			
			Событие = Неопределено;
			Если ЗначениеЗаполнено(АбонентОтКого) Тогда
				Событие = ЗарегистрироватьСобытиеЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка);
			КонецЕсли;
			
			ЗарегистрироватьТекущийВходящийЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка, Событие);
			
		ИначеЕсли ВариантСобытия = "ЗавершениеВходящего" Тогда
			
			УстановитьОкончаниеСобытияЗвонка(ПользовательКому, ДатаЗвонка);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗвонка = "Пропущенный" Тогда
		
		Если ВариантСобытия = "ЗавершениеВходящего" Тогда
			
			УстановитьОкончаниеСобытияЗвонка(ПользовательКому, ДатаЗвонка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВходящийЗвонокПользователя(Пользователь = Неопределено) Экспорт
	
	Результат = Новый Структура("АбонентОтКого, ДатаЗвонка, НомерТелефонаАбонента, ПредставлениеАбонента");
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеВходящиеЗвонки.ИдентификаторЗвонка КАК ИдентификаторЗвонка,
		|	ТекущиеВходящиеЗвонки.АбонентОтКого КАК АбонентОтКого,
		|	ТекущиеВходящиеЗвонки.ДатаЗвонка КАК ДатаЗвонка,
		|	ТекущиеВходящиеЗвонки.НомерТелефонаАбонента КАК НомерТелефонаАбонента,
		|	ПРЕДСТАВЛЕНИЕ(ТекущиеВходящиеЗвонки.АбонентОтКого) КАК ПредставлениеАбонента
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.ПользовательКому = &ПользовательКому
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗвонка УБЫВ";
	
	Запрос.УстановитьПараметр("ПользовательКому", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПользовательКому.Установить(Пользователь);
	НаборЗаписей.Записать(Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПерсональноеМобильноеУстройство() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТелефонии", "УзелОбмена", Неопределено);
	
КонецФункции

Функция ПолучитьНастройкиТелефонии() Экспорт
	
	Результат = НастройкиТелефонииПоУмолчанию();
	СохраненныеНастройки = Константы.НастройкиТелефонии.Получить().Получить();
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из Результат Цикл
			Если СохраненныеНастройки.Свойство(КлючИЗначение.Ключ) Тогда
				Результат[КлючИЗначение.Ключ] = СохраненныеНастройки[КлючИЗначение.Ключ];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьНастройкуТелефонии(Ключ, Значение) Экспорт
	
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	НастройкиТелефонии.Вставить(Ключ, Значение);
	
	Константы.НастройкиТелефонии.Установить(Новый ХранилищеЗначения(НастройкиТелефонии));
	
КонецФункции

// Процедура обработчик подписки "ОчиститьВходящиеЗвонки". Очищает вспомогательные данные по удаляемому абоненту.
//
Процедура ОчиститьВходящиеЗвонкиПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеВходящиеЗвонки.ПользовательКому КАК ПользовательКому
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.АбонентОтКого = &УдаляемыйАбонент";
	
	Запрос.УстановитьПараметр("УдаляемыйАбонент", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПользовательКому.Установить(Выборка.ПользовательКому);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьАбонентаПоНомеруТелефона(НомерТелефонаАбонента)
	
	ТипыАбонентов = Новый Массив;
	ТипыАбонентов.Добавить(Метаданные.Справочники.Контрагенты);
	ТипыАбонентов.Добавить(Метаданные.Справочники.КонтактныеЛица);
	
	СекцияОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	БазаЗапроса = "
		|ВЫБРАТЬ
		|	КонтактнаяИнформация_1.Ссылка
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация_1
		|ГДЕ
		|	КонтактнаяИнформация_1.НомерТелефона ПОДОБНО &НомерТелефона
		|	И КонтактнаяИнформация_1.Тип = &ТипТелефон";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерТелефона", СтрЗаменить(НомерТелефонаАбонента, "+", "") + "%");
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.Текст = "";
	НомерОбъединения = 0;
	
	Для Каждого ТипАбонента Из ТипыАбонентов Цикл
		
		НомерОбъединения = НомерОбъединения + 1;
		ЧастьОбъединения = СтрЗаменить(БазаЗапроса, "Справочник.Контрагенты", ТипАбонента.ПолноеИмя());
		ЧастьОбъединения = СтрЗаменить(ЧастьОбъединения, "КонтактнаяИнформация_1", "КонтактнаяИнформация_" + НомерОбъединения);
		
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", СекцияОбъединить) + ЧастьОбъединения;
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПользователяОтветственногоЗаАбонента(АбонентОтКого) Экспорт
	
	Если Не ЗначениеЗаполнено(АбонентОтКого) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АбонентОтКого.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Ответственный");
	Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Сотрудники") Тогда
		Ответственный = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(Ответственный);
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

Функция ЗарегистрироватьСобытиеЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка)
	
	СотрудникиПользователя = УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя(ПользовательКому);
	
	Событие = Документы.Событие.СоздатьДокумент();
	Событие.Заполнить(Неопределено);
	Событие.Дата = ТекущаяДатаСеанса();
	Событие.УстановитьНовыйНомер();
	
	Событие.НачалоСобытия = ДатаЗвонка;
	Событие.ОкончаниеСобытия = ДатаЗвонка;
	Событие.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок;
	Событие.Состояние = Справочники.СостоянияСобытий.Запланировано;
	Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее;
	Событие.Ответственный = ?(СотрудникиПользователя.Количество() > 0, СотрудникиПользователя[0], Справочники.Сотрудники.ПустаяСсылка());
	Событие.Автор = ПользовательКому;
	Событие.КалендарьСотрудника = ЗаполнениеОбъектовУНФ.ПолучитьКалендарьСотрудника(Событие.Ответственный);
	
	Участник = Событие.Участники.Добавить();
	Участник.Контакт = АбонентОтКого;
	Участник.КакСвязаться = НомерТелефонаАбонента;
	
	Если ТипЗнч(АбонентОтКого) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Участник = Событие.Участники.Вставить(0);
		Участник.Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Владелец");
	КонецЕсли;
	
	Событие.Записать();
	Возврат Событие.Ссылка;
	
КонецФункции

Процедура УстановитьОкончаниеСобытияЗвонка(ПользовательКому, ДатаЗвонка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеВходящиеЗвонки.Событие
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.ПользовательКому = &ПользовательКому
		|	И ТекущиеВходящиеЗвонки.Событие <> ЗНАЧЕНИЕ(Документ.Событие.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ПользовательКому", ПользовательКому);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Событие = Выборка.Событие.ПолучитьОбъект();
		
		Попытка
			Событие.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				"Телефония",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.Событие,
				Выборка.Событие,
				НСтр("ru='Не удалось установить время завершения телефонного звонка. Объект заблокирован.'")
			);
			Возврат;
		КонецПопытки;
		
		Событие.ОкончаниеСобытия = ДатаЗвонка;
		Событие.Состояние = Справочники.СостоянияСобытий.Завершено;
		Событие.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьТекущийВходящийЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка, Событие)
	
	Набор = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
	Набор.Отбор.ПользовательКому.Установить(ПользовательКому);
	
	ЗаписьНабора = Набор.Добавить();
	ЗаписьНабора.ПользовательКому		= ПользовательКому;
	ЗаписьНабора.НомерТелефонаАбонента	= НомерТелефонаАбонента;
	ЗаписьНабора.АбонентОтКого			= АбонентОтКого;
	ЗаписьНабора.ДатаЗвонка				= ДатаЗвонка;
	ЗаписьНабора.Событие				= Событие;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

Функция НастройкиТелефонииПоУмолчанию()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ДействиеТекущегоЗвонкаНайденногоАбонента", "ОткрытьКарточкуАбонента");
	Результат.Вставить("ДействиеТекущегоЗвонкаНеизвестногоАбонента", "ЗадаватьВопрос");
	
	Возврат Результат;
	
КонецФункции

Функция ОбрабатыватьЗвонокСНомера(НомерТелефонаАбонента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента
		|ИЗ
		|	РегистрСведений.НеобрабатываемыеТелефонныеНомера КАК НеобрабатываемыеТелефонныеНомера
		|ГДЕ
		|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента = &НомерТелефонаАбонента";
	
	Запрос.УстановитьПараметр("НомерТелефонаАбонента", НомерТелефонаАбонента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти
