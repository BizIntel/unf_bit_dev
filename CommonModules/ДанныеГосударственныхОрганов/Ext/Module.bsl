#Область ПрограммныйИнтерфейс

// Возвращаются реквизиты налоговой инспекции по коду
//
// Параметры:
//  КодНалоговогоОргана  - Строка - код налогового органа
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция РеквизитыНалоговогоОрганаПоКоду(Знач КодНалоговогоОргана) Экспорт
	
	РеквизитыНалоговогоОргана = НовыеРеквизитыГосударственногоОргана();
	РеквизитыНалоговогоОргана.Код = КодГосударственногоОргана(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, КодНалоговогоОргана);
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			Ответ = Прокси.getIfnsTaxRequisitesByCode(РеквизитыНалоговогоОргана.Код, Метаданные.Имя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код налогового органа %1:'"), РеквизитыНалоговогоОргана.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, РеквизитыНалоговогоОргана);
		Возврат РеквизитыНалоговогоОргана;
	КонецЕсли;
	
	Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, РеквизитыНалоговогоОргана.Код);
	
	РеквизитыНалоговогоОргана.Ссылка = ГосударственныйОрганИБ.Ссылка;
	РеквизитыНалоговогоОргана.Вид = Вид;
	РеквизитыНалоговогоОргана.Код = Ответ.Code;
	РеквизитыНалоговогоОргана.ИНН = Ответ.INN;
	РеквизитыНалоговогоОргана.КПП = Ответ.KPP;
	РеквизитыНалоговогоОргана.Наименование = Ответ.ShortName;
	РеквизитыНалоговогоОргана.ПолноеНаименование = Ответ.FullName;
	РеквизитыНалоговогоОргана.Адрес   = Ответ.Address;
	РеквизитыНалоговогоОргана.Телефон = Ответ.Phone;
	РеквизитыНалоговогоОргана.ЭлектроннаяПочта = Ответ.EMail;
	РеквизитыНалоговогоОргана.ИнтернетСайт = Ответ.WebSite;
	Если Ответ.PaymentDetails <> Неопределено Тогда
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.БанковскийСчет    = ГосударственныйОрганИБ.БанковскийСчет;
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.Банк              = ГосударственныйОрганИБ.Банк;
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.ПолучательПлатежа = Ответ.PaymentDetails.RecipientName;
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.РасчетныйСчет     = Ответ.PaymentDetails.PaymentAccount;
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.КоррСчет          = Ответ.PaymentDetails.CorrespondentAccount;
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.БИК               = Ответ.PaymentDetails.BIK;
	КонецЕсли;
	
	Возврат РеквизитыНалоговогоОргана;
	
КонецФункции

// Возвращаются реквизиты отделения ФСС по коду
//
// Параметры:
//  КодОтделенияФСС  - Строка - Код отделения ФСС
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ФСС. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция РеквизитыОтделенияФССПоКоду(Знач КодОтделенияФСС) Экспорт
	
	РеквизитыФСС = НовыеРеквизитыГосударственногоОргана();
	РеквизитыФСС.Код = КодГосударственногоОргана(Перечисления.ВидыГосударственныхОрганов.ОрганФСС, КодОтделенияФСС);
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			Ответ = Прокси.getFssTaxRequisitesByCode(РеквизитыФСС.Код, Метаданные.Имя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ФСС %1:'"), РеквизитыФСС.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, РеквизитыФСС);
		Возврат РеквизитыФСС;
	КонецЕсли;
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, РеквизитыФСС.Код);
	
	РеквизитыФСС.Ссылка = ГосударственныйОрганИБ.Ссылка;
	РеквизитыФСС.Вид = Вид;
	РеквизитыФСС.Код = Ответ.Code;
	РеквизитыФСС.ИНН = Ответ.INN;
	РеквизитыФСС.КПП = Ответ.KPP;
	РеквизитыФСС.Наименование = Ответ.ShortName;
	РеквизитыФСС.ПолноеНаименование = Ответ.FullName;
	РеквизитыФСС.Адрес   = Ответ.Address;
	РеквизитыФСС.Телефон = Ответ.Phone;
	РеквизитыФСС.ЭлектроннаяПочта = Ответ.EMail;
	РеквизитыФСС.ИнтернетСайт = Ответ.WebSite;
	Если РеквизитыФСС.ПлатежныеРеквизиты <> Неопределено Тогда
		РеквизитыФСС.ПлатежныеРеквизиты.БанковскийСчет    = ГосударственныйОрганИБ.БанковскийСчет;
		РеквизитыФСС.ПлатежныеРеквизиты.Банк              = ГосударственныйОрганИБ.Банк;
		РеквизитыФСС.ПлатежныеРеквизиты.ПолучательПлатежа = Ответ.PaymentDetails.RecipientName;
		РеквизитыФСС.ПлатежныеРеквизиты.РасчетныйСчет     = Ответ.PaymentDetails.PaymentAccount;
		РеквизитыФСС.ПлатежныеРеквизиты.КоррСчет          = Ответ.PaymentDetails.CorrespondentAccount;
		РеквизитыФСС.ПлатежныеРеквизиты.БИК               = Ответ.PaymentDetails.BIK;
	КонецЕсли;
	
	Возврат РеквизитыФСС;
	
КонецФункции

// Возвращаются реквизиты отделения ПФР по коду
//
// Параметры:
//  КодОтделенияПФР  - Строка - код отделения ПФР
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ПФР. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция РеквизитыОтделенияПФРПоКоду(Знач КодОтделенияПФР) Экспорт
	
	РеквизитыПФР = НовыеРеквизитыГосударственногоОргана();
	РеквизитыПФР.Код = КодГосударственногоОргана(Перечисления.ВидыГосударственныхОрганов.ОрганПФР, КодОтделенияПФР);
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			Ответ = Прокси.getPfrTaxRequisitesByCode(РеквизитыПФР.Код, Метаданные.Имя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ПФР %1:'"), РеквизитыПФР.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, РеквизитыПФР);
		Возврат РеквизитыПФР;
	КонецЕсли;
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, КодОтделенияПФР);
	
	РеквизитыПФР.Ссылка = ГосударственныйОрганИБ.Ссылка;
	РеквизитыПФР.Вид = Вид;
	РеквизитыПФР.Код = Ответ.Code;
	РеквизитыПФР.ИНН = Ответ.INN;
	РеквизитыПФР.КПП = Ответ.KPP;
	РеквизитыПФР.Наименование = Ответ.ShortName;
	РеквизитыПФР.ПолноеНаименование = Ответ.FullName;
	РеквизитыПФР.Адрес   = Ответ.Address;
	РеквизитыПФР.Телефон = Ответ.Phone;
	РеквизитыПФР.ЭлектроннаяПочта = Ответ.EMail;
	РеквизитыПФР.ИнтернетСайт = Ответ.WebSite;
	Если РеквизитыПФР.ПлатежныеРеквизиты <> Неопределено Тогда
		РеквизитыПФР.ПлатежныеРеквизиты.БанковскийСчет    = ГосударственныйОрганИБ.БанковскийСчет;
		РеквизитыПФР.ПлатежныеРеквизиты.Банк              = ГосударственныйОрганИБ.Банк;
		РеквизитыПФР.ПлатежныеРеквизиты.ПолучательПлатежа = Ответ.PaymentDetails.RecipientName;
		РеквизитыПФР.ПлатежныеРеквизиты.РасчетныйСчет     = Ответ.PaymentDetails.PaymentAccount;
		РеквизитыПФР.ПлатежныеРеквизиты.КоррСчет          = Ответ.PaymentDetails.CorrespondentAccount;
		РеквизитыПФР.ПлатежныеРеквизиты.БИК               = Ответ.PaymentDetails.BIK;
	КонецЕсли;
	
	Возврат РеквизитыПФР;
	
КонецФункции

// Возвращает сведения о государственном органе из справочника Контрагенты
//
// Параметры:
//  ВидГосударственногоОргана - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
//  КодГосударственногоОргана - Строка - код государственного органа
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция ГосударственныйОрган(Знач ВидГосударственногоОргана, Знач КодГосударственногоОргана) Экспорт
	
	ГосударственныйОрган = НовыеРеквизитыГосударственногоОргана();
	
	Код = КодГосударственногоОргана(ВидГосударственногоОргана, КодГосударственногоОргана);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", ВидГосударственногоОргана);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.НаименованиеПолное КАК ПолноеНаименование,
	|	Контрагенты.Наименование,
	|	Контрагенты.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.НомерСчета, """") КАК РасчетныйСчет,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.ТекстКорреспондента, """") КАК ПолучательПлатежа,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк.КоррСчет, """") КАК КоррСчет
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган, Выборка);
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган.ПлатежныеРеквизиты, Выборка);
		
		Если НЕ ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
			ПолучательПлатежа = НаименованиеПлательщикаПолучателяПоУмолчанию(
					Выборка.Ссылка, Выборка.БанковскийСчет);
			ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа = ПолучательПлатежа;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ГосударственныйОрган;
	
КонецФункции

// Проверяет, что реквизиты в справочнике Контрагенты совпадают с данными сервиса
//
// Параметры:


//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//   Булево - признак, что платежные реквизиты в справочнике "Контрагенты" актуальны
//
Функция ПлатежныеРеквизитыАктуальны(Реквизиты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыИнформационнойБазы = ДанныеГосударственныхОрганов.ГосударственныйОрган(Реквизиты.Вид, Реквизиты.Код);
	
	Если Реквизиты.ИНН <> РеквизитыИнформационнойБазы.ИНН
		ИЛИ Реквизиты.КПП <> РеквизитыИнформационнойБазы.КПП
		ИЛИ Реквизиты.ПолноеНаименование <> РеквизитыИнформационнойБазы.ПолноеНаименование
		ИЛИ Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.РасчетныйСчет
		ИЛИ Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.ПолучательПлатежа
		ИЛИ Реквизиты.ПлатежныеРеквизиты.БИК <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.БИК Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Обновляет платежные реквизиты государственного органа в справочнике "Контрагенты".
// В том случае, если в справочнике "Контрагенты" нет элемента, соответствующего гос.органу, он будет создан.
//
// Параметры:
//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//
Процедура ОбновитьДанныеГосударственногоОргана(Реквизиты) Экспорт
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		
		Объект = Реквизиты.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		//Определим родителя для государственного органа
		НаименованиеРодителя = НСтр("ru='Государственные органы'");
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Вид", Реквизиты.Вид);
		Запрос.Параметры.Вставить("Наименование", НаименованиеРодителя);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Родитель КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ВидГосударственногоОргана = &Вид
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа = ИСТИНА
		|	И Контрагенты.Наименование = &Наименование
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.Родитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Родитель = Выборка.Ссылка;
		Иначе
			НовыйРодитель = Справочники.Контрагенты.СоздатьГруппу();
			НовыйРодитель.Наименование = НаименованиеРодителя;
			НовыйРодитель.Записать();
			Родитель = НовыйРодитель.Ссылка;
		КонецЕсли;
		
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган;
		Объект.Родитель = Родитель;
		Объект.ВидГосударственногоОргана = Реквизиты.Вид;
		Объект.Наименование = Реквизиты.Наименование;
	КонецЕсли;
	
	Объект.КодГосударственногоОргана = КодГосударственногоОргана(Реквизиты.Вид, Реквизиты.Код);
	Объект.ИНН = Реквизиты.ИНН;
	Объект.КПП = Реквизиты.КПП;
	Объект.НаименованиеПолное = Реквизиты.ПолноеНаименование;
	Объект.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	Объект.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	Объект.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	Объект.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	Объект.ПрочиеОтношения = Истина;
	
	//Проверим, что данные банковского счета актуальны (совпадают БИК и расчетный счет)
	//Если данные актуальны, обновляем счет.
	//В противном случае создаем новый расчетный счет, предварительно убедившись, что такого расчетного счета у контрагента уже нет.
	ДанныеБанковскогоСчетаАктуальны = Ложь;
	Если ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию) Тогда
		РеквизитыРасчетногоСчета = РеквизитыБанковскогоСчета(Объект.БанковскийСчетПоУмолчанию);
		Если РеквизитыРасчетногоСчета.РасчетныйСчет = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет
			И РеквизитыРасчетногоСчета.БИК = Реквизиты.ПлатежныеРеквизиты.БИК Тогда
			ДанныеБанковскогоСчетаАктуальны = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию)
		И ДанныеБанковскогоСчетаАктуальны Тогда
		БанковскийСчет = Объект.БанковскийСчетПоУмолчанию.ПолучитьОбъект();
	Иначе
		
		БанковскийСчетКонтрагента = БанковскийСчетПоРеквизитам(Объект.Ссылка, 
			Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет, Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет);
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчет = БанковскийСчетКонтрагента.ПолучитьОбъект();
			Объект.ОсновнойБанковскийСчет = БанковскийСчет.Ссылка;
		Иначе
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.ВалютаДенежныхСредств =  Константы.НациональнаяВалюта.Получить();
			БанковскийСчет.ВидСчета = "Расчетный";
			БанковскийСчет.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях;
			НоваяСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку();
			БанковскийСчет.УстановитьСсылкуНового(НоваяСсылка);
			ТаблицаБанков = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", Реквизиты.ПлатежныеРеквизиты.БИК);
			БанковскийСчет.Банк = ?(ТаблицаБанков.Количество()>0, ТаблицаБанков[0].Ссылка, Справочники.Банки.ПустаяСсылка());
			БанковскийСчет.НомерСчета = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет;
			БанкЗаполнен = ЗначениеЗаполнено(БанковскийСчет.Банк);
			Объект.БанковскийСчетПоУмолчанию = БанковскийСчет.ПолучитьСсылкуНового();
			БанковскийСчет.Наименование = Лев(
				СокрЛП(БанковскийСчет.НомерСчета)
				+ ?(БанкЗаполнен, ", " + БанковскийСчет.Банк, "")
				+ ", " + БанковскийСчет.ВалютаДенежныхСредств ,
				100);
		КонецЕсли;
	КонецЕсли;
	
	БанковскийСчет.ТекстКорреспондента = Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа;
	
	НачатьТранзакцию();
	Попытка
		Объект.Записать();
		БанковскийСчет.Владелец = Объект.Ссылка;
		БанковскийСчет.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка сохранения государственного органа %1:'"), Реквизиты.Код)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбработатьОшибкуСервиса(ОписаниеОшибки, Реквизиты);
	КонецПопытки;
	
	Реквизиты.Ссылка = Объект.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.БанковскийСчет = БанковскийСчет.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.Банк           = БанковскийСчет.Банк;
	
КонецПроцедуры

// Проверяет, что платежные реквизиты, переданные в параметре, соответствуют платежным реквизитам государственного органа
//
// Параметры:
//  Параметры - Структура - структура должна содержать параметры Контрагент, ПлатежныеРеквизиты, АдресРезультатаПроверкиПлатежныхРеквизитов
//
// Возвращаемое значение:
//
Процедура ПроверитьПлатежныеРеквизитыКонтрагента(Параметры) Экспорт
	
	АдресХранилища = Параметры.АдресРезультатаПроверкиПлатежныхРеквизитов;
	
	Результат = Новый Структура();
	
	Если Параметры.Свойство("Контрагент") Тогда
		
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Контрагент,
					"ВидКонтрагента, ВидГосударственногоОргана, КодГосударственногоОргана");
		
		Если РеквизитыКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган
			И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
			И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
			И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
			
			Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
			Код = РеквизитыКонтрагента.КодГосударственногоОргана;
			Реквизиты = Неопределено;
			Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты) Тогда
				
				Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					
					ПлатежныеРеквизиты = Параметры.ПлатежныеРеквизиты;
					
					//Сравним полученные реквизиты и текущие значения
					СписокРасхождений = "";
					Если Реквизиты.ИНН <> ПлатежныеРеквизиты.ИНН Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='ИНН'");
					КонецЕсли;
					
					Если Реквизиты.КПП <> ПлатежныеРеквизиты.КПП Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='КПП'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> ПлатежныеРеквизиты.ПолучательПлатежа Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Получатель платежа'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> ПлатежныеРеквизиты.РасчетныйСчет Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Расчетный счет'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.БИК <> ПлатежныеРеквизиты.БИК Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='БИК'");
					КонецЕсли;
					
					Если СписокРасхождений = "" Тогда
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Истина);
						Результат.Вставить("РезультатПроверки", НСтр("ru='Платежные реквизиты 
																		|указаны верно'"));
					Иначе
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Ложь);
						Результат.Вставить("РезультатПроверки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Возможно, платежные реквизиты указаны не верно.
								|Найдены отличия в реквизитах: %1'"), СписокРасхождений));
					КонецЕсли;
					
				ИначеЕсли Реквизиты.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
					Результат.Вставить("ТребуетсяАутентификация", Истина);
					Результат.Вставить("РезультатПроверки", НСтр("ru='Для проверки платежных реквизитов
									|необходимо подключиться к интернет-поддержке пользователей.'"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Получает эталонные платежные реквизиты контрагента, если он является государственным органом
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагент - ссылка на контрагента, для которого требуется определить платежные реквизиты, должен иметь тип "Государственный орган"
//
// Возвращаемое значение:
//     Структура или Неопределено   - реквизиты государственного органа, либо Неопределено, если определить сведения не удается
Функция ПолучитьПлатежныеРеквизитыКонтрагента(Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			"ВидКонтрагента, ВидГосударственногоОргана, КодГосударственногоОргана");
	
	Если РеквизитыКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган
			И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
			И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
			И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
			
			Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
			Код = РеквизитыКонтрагента.КодГосударственногоОргана;
			Реквизиты = Неопределено;
			Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты) Тогда
				Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					Возврат Реквизиты;
				КонецЕсли;
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст гиперссылки "Платежные реквизиты" для отображения на форме
//
// Параметры:
//  ГосударственныйОрган - Структура или Неопределено - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//     Строка - текстовое описание гиперссылки "Платежные реквизиты" для отображения на форме
Функция ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган) Экспорт
	
	Если ЗначениеЗаполнено(ГосударственныйОрган)
		И ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
		Возврат ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа;
	Иначе
		Возврат НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
КонецФункции

// Возвращает контрагента-получателя налога
//
// Параметры:
//  Налог       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//  Организация - СправочникСсылка.Организации
//  Период      - Дата
//
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты
//
Функция АдминистраторНалогаОрганизации(Налог, Организация, Период = Неопределено) Экспорт
	Перем КодГосударственногоОргана;
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ВидГосударственногоОргана = Справочники.ВидыНалогов.ВидГосударственногоОргана(Налог);
	
	КодГосударственногоОргана = КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана);
		
	Если ЗначениеЗаполнено(КодГосударственногоОргана) Тогда
		Контрагент = ГосударственныйОрган(ВидГосударственногоОргана, КодГосударственногоОргана).Ссылка;
	КонецЕсли;
		
	Возврат Контрагент;
	
КонецФункции

// Определяет код государственного органа, администрирующего деятельность организации
//
// Параметры:
//  Организация					 - СправочникСсылка.Организации, СправочникОбъект.Организации - администрируемая организация
//  ВидГосударственногоОргана	 - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
// 
// Возвращаемое значение:
//  Строка - значащая часть кода государственного органа, заданного в информационной базе
//
Функция КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана) Экспорт
	
	Код = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане.Код");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОрганаПФР");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОрганаФСС");
		КонецЕсли;
	Иначе
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = Организация.РегистрацияВНалоговомОргане.Код;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = Организация.КодОрганаПФР;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = Организация.КодОрганаФСС;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		Возврат СокрЛП(Код);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОписанияРеквизитов

Функция НовыеРеквизитыГосударственногоОргана() Экспорт

	РеквизитыГосударственногоОргана = Новый Структура;
	
	// Заполняется на основе данных ФИАС
	
	РеквизитыГосударственногоОргана.Вставить("Ссылка");             // СправочникСсылка.Контрагенты
	РеквизитыГосударственногоОргана.Вставить("Вид");                // ПеречислениеСсылка.ВидыГосударственныхОрганов
	РеквизитыГосударственногоОргана.Вставить("Код");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("ИНН");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("КПП");                // Строка, 9
	РеквизитыГосударственногоОргана.Вставить("Наименование");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПолноеНаименование"); // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Адрес");              // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Телефон");            // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ЭлектроннаяПочта");   // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ИнтернетСайт");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПлатежныеРеквизиты"); // Структура из НовыеПлатежныеРеквизиты
	
	РеквизитыГосударственногоОргана.ПлатежныеРеквизиты = НовыеПлатежныеРеквизиты();
	
	// Служебный реквизит
	РеквизитыГосударственногоОргана.Вставить("ОписаниеОшибки");     // Строка, 0
	
	Возврат РеквизитыГосударственногоОргана;

КонецФункции

Функция НовыеПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура;
	
	ПлатежныеРеквизиты.Вставить("БанковскийСчет");     // СправочникСсылка.БанковскиеСчета
	ПлатежныеРеквизиты.Вставить("Банк");               // СправочникСсылка.Банки
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа");  // Строка
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет");      // Строка, 20
	ПлатежныеРеквизиты.Вставить("КоррСчет");           // Строка
	ПлатежныеРеквизиты.Вставить("БИК");                // Строка
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КодГосударственногоОргана(ВидГосударственногоОргана, КодГосударственногоОргана)
	
	Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		Возврат Лев(КодГосударственногоОргана, 3);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	Иначе
		Возврат КодГосударственногоОргана;
	КонецЕсли;
	
КонецФункции

Функция ГосударственныйОрганИнформационнойБазы(Вид, Код);
	
	ГосударственныйОрганИнформационнойБазы = Новый Структура();
	ГосударственныйОрганИнформационнойБазы.Вставить("Ссылка", Справочники.Контрагенты.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("Банк", Справочники.Банки.ПустаяСсылка());
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", Вид);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.БанковскийСчетПоУмолчанию.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрганИнформационнойБазы, Выборка);
	КонецЕсли;
	
	Возврат ГосударственныйОрганИнформационнойБазы;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(БанковскийСчет)
	
	Реквизиты = Новый Структура("ПолучательПлатежа, РасчетныйСчет, КоррСчет, БИК");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	БанковскиеСчета.Банк.КоррСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	БанковскиеСчета.ТекстКорреспондента КАК ПолучательПлатежа
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &РасчетныйСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция БанковскийСчетПоРеквизитам(Контрагент, РасчетныйСчет, БИК)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка()
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", РасчетныйСчет);
	Запрос.Параметры.Вставить("Владелец", Контрагент);
	Запрос.Параметры.Вставить("БИК", БИК);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &РасчетныйСчет
	|	И Банки.Код = &БИК
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	
КонецФункции

Функция ПроксиСервиса(ОписаниеОшибки)
	
	Прокси = Неопределено;
	ПараметрыАутентификации = ПараметрыАутентификацииВСервисе();
	
	Если ПараметрыАутентификации = Неопределено Тогда
		
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказаныПараметрыАутентификации"; 
		
	Иначе
		
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(Новый Структура(
				"АдресWSDL,
				|URIПространстваИмен,
				|ИмяСервиса,
				|ИмяТочкиПодключения,
				|ИмяПользователя,
				|Пароль,
				|Таймаут",
				АдресСервиса(),                            // АдресWSDL
				ПространствоИмен(),                        // URIПространстваИмен
				"RequisitesWebServiceEndpointImplService", // ИмяСервиса
				"RequisitesWebServiceEndpointImplPort",    // ИмяТочкиПодключения
				ПараметрыАутентификации.login,             // ИмяПользователя
				ПараметрыАутентификации.password,          // Пароль
				30));                                       //Таймаут
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки; 
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПараметрыАутентификацииВСервисе()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Новый Структура("login,password", 
			"fresh", "fresh");
				
	Иначе
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Возврат Новый Структура("login,password", 
				ДанныеАутентификации.Логин, 
				ДанныеАутентификации.Пароль);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьОшибкуСервиса(ОписаниеОшибки, СтруктураРеквизитов)
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистраации
	
	Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
		ТекстОшибки    = "НеУказаныПараметрыАутентификации"; // Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = НСтр("ru='Не указаны логин и пароль для доступа к интернет-поддержке'");
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибки, """status"":401") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Неверно указаны логин и пароль для доступа к интернет-поддержке'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибки, "SERVER-1") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Не указан код государственного органа'");
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибки, "SERVER-3") > 0 Тогда
		ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Данные о государственном органе с кодом %1 не найдены'"),
			СтруктураРеквизитов.Код);
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибки, "SERVER-7") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Превышен лимит количества вызовов сервиса за один день'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибки, "SERVER-8") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Отсутствует действующий договор ИТС'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	Иначе
		ТекстОшибки  = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ТекстСобытия = НСтр("ru='Ошибка при работе с сервисом'", КодОсновногоЯзыка);
	КонецЕсли;
	
	СтруктураРеквизитов.ОписаниеОшибки = ТекстОшибки;
	
	ИмяСобытия = НСтр("ru = 'Сервис данных гос_органов.'", КодОсновногоЯзыка) + " " + ТекстСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ОписаниеОшибки);
	
КонецПроцедуры

Функция АдресСервиса()

	Возврат "https://api.taxregister.1c.ru/taxregister/v1?wsdl";

КонецФункции

Функция ПространствоИмен()
	
	Возврат "http://ws.taxregister.company1c.com/";
	
КонецФункции


Функция ВидНалоговогоОргана(ВидГосударственногоОргана) Экспорт
	
	Если ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
		ВидНалоговогоОргана = "КодНО";
	ИначеЕсли ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
		ВидНалоговогоОргана = "КодОрганаПФР";
	ИначеЕсли ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
		ВидНалоговогоОргана = "КодПодчиненностиФСС";
	Иначе
		ВидНалоговогоОргана = "";
	КонецЕсли;
	
	Возврат ВидНалоговогоОргана;
	
КонецФункции

Функция НаименованиеПлательщикаПолучателяПоУмолчанию(ВладелецСчета, БанковскийСчет) Экспорт
	
	СвойстваВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецСчета, "Наименование, НаименованиеПолное");
	
	СвойстваБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Банк, БанкРасчетов");
	
	Наименование = СокрЛП(СвойстваВладельца.НаименованиеПолное);
	
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СокрЛП(СвойстваВладельца.Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СвойстваБанковскогоСчета.БанкРасчетов)
			И ЗначениеЗаполнено(СвойстваБанковскогоСчета.Банк) Тогда
			
		СвойстваБанка  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваБанковскогоСчета.Банк, "Наименование, Город");
		
		Наименование = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 р/с %2 в %3 %4'"),
			Наименование, СвойстваБанковскогоСчета.НомерСчета, СокрЛП(СвойстваБанка.Наименование), СвойстваБанка.Город));
			
	КонецЕсли;
		
	Возврат Наименование;
	
КонецФункции

#КонецОбласти
