////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис криптографии (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

Функция Зашифровать(Данные, Получатели, ТипШифрования, ПараметрыШифрования) Экспорт
	
	ЗашифроватьПроверкаВходящихПараметров(Данные, Получатели, ТипШифрования, ПараметрыШифрования);
		
	Попытка
		ВернутьКакАдрес = ВернутьРезультатКакАдресВоВременномХранилище(Данные);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("data", ?(ВернутьКакАдрес, ПолучитьИзВременногоХранилища(Данные), Данные));
		ПараметрыМетода.Вставить("certificates", ПолучитьДвоичныеДанныеСертификатов(Получатели));
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/encryptor", ПараметрыМетода);
		
		Возврат ?(ВернутьКакАдрес, ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор), Результат);		
	Исключение
		Параметры = Новый Структура("Получатели,Данные,ТипШифрования,ПараметрыШифрования",
									Получатели, Данные, ТипШифрования, ПараметрыШифрования);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияШифрование(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
		
КонецФункции

Функция Расшифровать(ЗашифрованныеДанные, Сертификат, ТипШифрования, ПараметрыШифрования) Экспорт

	РасшифроватьПроверкаВходящихПараметров(ЗашифрованныеДанные, ТипШифрования, ПараметрыШифрования);
	
	МаркерБезопасности = ПараметрыСеанса.МаркерыБезопасности.Получить(Сертификат.Идентификатор);
	
	Если Не ЗначениеЗаполнено(МаркерБезопасности) Тогда
		Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
	КонецЕсли;
		
	Попытка
		ВернутьКакАдрес = ВернутьРезультатКакАдресВоВременномХранилище(ЗашифрованныеДанные);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("data", ?(ВернутьКакАдрес, ПолучитьИзВременногоХранилища(ЗашифрованныеДанные), ЗашифрованныеДанные));
		ПараметрыМетода.Вставить("security_token", МаркерБезопасности);
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/decryptor", ПараметрыМетода);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ВызватьИсключение(НСтр("ru = 'Не удалось выполнить расшифровку сообщения'"));
		КонецЕсли;
		
		Возврат ?(ВернутьКакАдрес, ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор), Результат);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если СтрНайти(ТекстИсключения, "InvalidSecurityTokenError") Тогда
			Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
		КонецЕсли;
		
		Параметры = Новый Структура("ЗашифрованныеДанные,Сертификат,ТипШифрования,ПараметрыШифрования",
									ЗашифрованныеДанные, Сертификат, ТипШифрования, ПараметрыШифрования);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияРасшифровка(), ИнформацияОбОшибке, Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция Подписать(Данные, Подписант, ТипПодписи, ПараметрыПодписания) Экспорт 
	
	ПодписатьПроверкаВходящихПараметров(Данные, Подписант, ТипПодписи, ПараметрыПодписания);
	
	Сертификат = Неопределено;
	Если ТипЗнч(Подписант) = Тип("ДвоичныеДанные") Тогда
		Сертификат = СервисКриптографии.ПолучитьСвойстваСертификата(Подписант);
	ИначеЕсли (ТипЗнч(Подписант) = Тип("Структура")
		ИЛИ  ТипЗнч(Подписант) = Тип("ФиксированнаяСтруктура"))
		И Подписант.Свойство("Сертификат") Тогда
		Сертификат = СервисКриптографии.ПолучитьСвойстваСертификата(Подписант.Сертификат);
	Иначе
		Сертификат = ХранилищеСертификатов.НайтиСертификат(Подписант);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сертификат) Тогда
		ВызватьИсключение(НСтр("ru = 'Сертификат подписанта не найден в хранилище сертификатов.'"));
	КонецЕсли;
	
	МаркерБезопасности = ПараметрыСеанса.МаркерыБезопасности.Получить(Сертификат.Идентификатор);
	
	Если Не ЗначениеЗаполнено(МаркерБезопасности) Тогда
		Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
	КонецЕсли;
		
	Попытка
		Если ЗначениеЗаполнено(ПараметрыПодписания) И ПараметрыПодписания.Свойство("ОтсоединеннаяПодпись") Тогда
			ОтсоединеннаяПодпись = ПараметрыПодписания.ОтсоединеннаяПодпись;
		Иначе
			ОтсоединеннаяПодпись = Истина;
		КонецЕсли;
		
		ВернутьКакАдрес = ВернутьРезультатКакАдресВоВременномХранилище(Данные);
		
	    ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("security_token", МаркерБезопасности);
		ПараметрыМетода.Вставить("data", ?(ВернутьКакАдрес, ПолучитьИзВременногоХранилища(Данные), Данные));
		ПараметрыМетода.Вставить("type", ТипПодписи);
		ПараметрыМетода.Вставить("include_data", Не ОтсоединеннаяПодпись);
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/signature", ПараметрыМетода);
		
		Возврат ?(ВернутьКакАдрес, ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор), Результат);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если СтрНайти(ТекстИсключения, "InvalidSecurityTokenError") Тогда
			Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
		КонецЕсли;
		
		Параметры = Новый Структура("Данные,Подписант,ТипПодписи,ПараметрыПодписания",
									Данные, Подписант, ТипПодписи, ПараметрыПодписания);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПодписание(), ИнформацияОбОшибке, Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПроверитьПодпись(Подпись, Данные, ТипПодписи, ПараметрыПодписания) Экспорт
	
	ПроверитьПодписьПроверкаВходящихПараметров(Подпись, Данные, ТипПодписи, ПараметрыПодписания);
	
	Попытка
		Если ТипЗнч(Подпись) = Тип("Строка") Тогда
			Подпись = ПолучитьИзВременногоХранилища(Подпись);
		КонецЕсли;
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Данные = ПолучитьИзВременногоХранилища(Данные);
		КонецЕсли;
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("signature", Подпись);
		ПараметрыМетода.Вставить("data", Данные);
		ПараметрыМетода.Вставить("type", ТипПодписи);
		
		Если ТипПодписи = "GOST3410" Тогда
			ПараметрыМетода.Вставить("certificate", ПараметрыПодписания.Сертификат);
		КонецЕсли;
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/verification/signature", ПараметрыМетода);
		
		Возврат Результат;
	Исключение
		Параметры = Новый Структура("Подпись, Данные, ТипПодписи, ПараметрыПодписания",
									Подпись, Данные, ТипПодписи, ПараметрыПодписания);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПроверкаПодписи(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПроверитьСертификат(Сертификат) Экспорт
	
	ПроверитьСертификатПроверкаВходящихПараметров(Сертификат);
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("certificate", ХранилищеСертификатов.СертификатВКодировкеDER(Сертификат));
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/verification/certificate", ПараметрыМетода);
		
		Возврат Результат;
	Исключение
		Параметры = Новый Структура("Сертификат", Сертификат);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПроверкаСертификата(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСвойстваСертификата(Сертификат) Экспорт
	
	ПолучитьСвойстваСертификатаПроверкаВходящихПараметров(Сертификат);
	
	Попытка
		СертификатВКодировкеDER = ХранилищеСертификатов.СертификатВКодировкеDER(Сертификат);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("certificate", СертификатВКодировкеDER);
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/certificate", ПараметрыМетода);
		
		Свойства = Новый Структура;
		Свойства.Вставить("Версия"                   , СтрШаблон("V%1", Результат.version + 1));
		Свойства.Вставить("ДатаНачала"            	 , XMLЗначение(Тип("Дата"), Лев(Результат.valid_from, 19)));
		Свойства.Вставить("ДатаОкончания"            , XMLЗначение(Тип("Дата"), Лев(Результат.valid_to, 19)));
		Свойства.Вставить("Издатель"                 , ПреобразоватьOID(Результат.issuer));
		Свойства.Вставить("ИспользоватьДляПодписи"   , Результат.use_to_sign);
		Свойства.Вставить("ИспользоватьДляШифрования", Результат.use_to_encrypt);
		Свойства.Вставить("ОткрытыйКлюч"             , Результат.public_key);
		Свойства.Вставить("Отпечаток"                , Результат.thumbprint);
		Свойства.Вставить("РасширенныеСвойства"      , РасширенныеСвойстваСертификата(Результат.extensions));
		Свойства.Вставить("СерийныйНомер"            , Результат.serial_number);
		Свойства.Вставить("Субъект"                  , ПреобразоватьOID(Результат.subject));
		Свойства.Вставить("Наименование"             , НаименованиеСертификата(Результат.subject));
		Свойства.Вставить("Сертификат"               , СертификатВКодировкеDER);
		Свойства.Вставить("Идентификатор"            , ВычислитьИдентификаторСертификатаJson(Результат));
		
		Возврат Новый ФиксированнаяСтруктура(Свойства);
	
	Исключение
		Параметры = Новый Структура("Сертификат", Сертификат);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияСвойстваСертификата(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСпособыДоставкиПаролей(ИдентификаторСертификата) Экспорт
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("certificate_id", ИдентификаторСертификата);
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/auth_parameters", ПараметрыМетода);
		
		СпособыДоставкиПаролей = Новый Структура("Телефон,ЭлектроннаяПочта", "", "");
		Для Каждого ЭлементРезультата Из Результат Цикл 
			Если ЭлементРезультата.type = "phone" Тогда
				СпособыДоставкиПаролей.Телефон = ЭлементРезультата.value;
			ИначеЕсли ЭлементРезультата.type = "email" Тогда
				СпособыДоставкиПаролей.ЭлектроннаяПочта = ЭлементРезультата.value;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат СпособыДоставкиПаролей;
	Исключение
		Параметры = Новый Структура("ИдентификаторСертификата",
									ИдентификаторСертификата);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияАутентификация(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьВременныйПароль(ИдентификаторСертификата, ПовторнаяОтправка = Ложь, Тип = "phone") Экспорт
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("certificate_id", ИдентификаторСертификата);
		ПараметрыМетода.Вставить("repeat", ПовторнаяОтправка);
		ПараметрыМетода.Вставить("type", Тип);

		
		Результат = ВыполнитьМетодКриптосервиса("crypto/password", ПараметрыМетода);
		
		Возврат Новый Структура("ЗадержкаПередПовторнойОтправкой, ВремяДействияПароля", Результат.delay, Результат.life_time);
	Исключение
		Параметры = Новый Структура("ИдентификаторСертификата,ПовторнаяОтправка,Тип",
									ИдентификаторСертификата, ПовторнаяОтправка, Тип);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияАутентификация(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСвойстваКриптосообщения(Криптосообщение, ТолькоКлючевыеСвойства = Ложь) Экспорт
	
	ПолучитьСвойстваКриптосообщенияПроверкаВходящихПараметров(Криптосообщение);
	
	Если ТипЗнч(Криптосообщение) = Тип("Строка") Тогда
		КриптосообщениеДвоичныеДанные = ПолучитьИзВременногоХранилища(Криптосообщение);
	Иначе
		КриптосообщениеДвоичныеДанные = Криптосообщение;
	КонецЕсли;
	
	СвойстваКриптосообщения = Новый Структура;
	СвойстваКриптосообщения.Вставить("Размер", КриптосообщениеДвоичныеДанные.Размер());
	СвойстваКриптосообщения.Вставить("Тип", "unknown");
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("message", КриптосообщениеДвоичныеДанные);
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/crypto_message", ПараметрыМетода);
		
		СвойстваКриптосообщения.Вставить("Тип", Результат.type);	
			
		Получатели = ПолучитьСвойстваСертификатовИзJson(Результат.recipient_infos);
		СвойстваКриптосообщения.Вставить("Получатели", Новый ФиксированныйМассив(Получатели));
		
		Подписанты = ПолучитьСвойстваСертификатовИзJson(Результат.signer_infos);
		СвойстваКриптосообщения.Вставить("Подписанты", Новый ФиксированныйМассив(Подписанты));			
		
		Если Не ТолькоКлючевыеСвойства Тогда
			СвойстваКриптосообщения.Вставить("Сертификаты", Новый Массив);
			Для Каждого certificate Из Результат.certificates Цикл
				СвойстваКриптосообщения.Сертификаты.Добавить(certificate);		
			КонецЦикла;
			СвойстваКриптосообщения.Сертификаты = Новый ФиксированныйМассив(СвойстваКриптосообщения.Сертификаты);
			
			СвойстваКриптосообщения.Вставить("Содержимое", Результат.content);
		КонецЕсли;
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияСвойстваКриптосообщения(), ИнформацияОбОшибке(), СвойстваКриптосообщения);
	КонецПопытки;
		
	Возврат Новый ФиксированнаяСтруктура(СвойстваКриптосообщения);
	
КонецФункции

Функция ПолучитьСеансовыйКлюч(ИдентификаторСертификата, ВременныйПароль) Экспорт
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("certificate_id", ИдентификаторСертификата);
		ПараметрыМетода.Вставить("password", ВременныйПароль);
		
		Результат = ВыполнитьМетодКриптосервиса("crypto/security_token", ПараметрыМетода);
								
		МаркерыБезопасности = Новый Соответствие;
		Для Каждого ЭлементСоответствия Из ПараметрыСеанса.МаркерыБезопасности Цикл
			МаркерыБезопасности.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		
		МаркерыБезопасности[ИдентификаторСертификата] = Результат;
		
		ПараметрыСеанса.МаркерыБезопасности = Новый ФиксированноеСоответствие(МаркерыБезопасности);		
		
		Возврат Результат;
	Исключение
		Параметры = Новый Структура("ИдентификаторСертификата,ВременныйПароль,Тип",
									ИдентификаторСертификата, ?(СтрДлина(ВременныйПароль) = 6, 999999, ВременныйПароль));
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияАутентификация(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСертификатыИзПодписи(Подпись) Экспорт
		
	ПолучитьСертификатыИзПодписиПроверкаВходящихПараметров(Подпись);
	
	Если ТипЗнч(Подпись) = Тип("Строка") Тогда
		Подпись = ПолучитьИзВременногоХранилища(Подпись);
	КонецЕсли;
	
	СвойстваКриптосообщения = ПолучитьСвойстваКриптосообщения(Подпись);
	Если СвойстваКриптосообщения.Тип = "signedData" Тогда
		Возврат СвойстваКриптосообщения.Сертификаты;	
	Иначе
		ВызватьИсключение(НСтр("ru = 'Параметр <Подпись> не является файлом подписи'"));
	КонецЕсли;	
		
КонецФункции

Функция ХешированиеДанных(Данные, АлгоритмХеширования, ПараметрыХеширования) Экспорт 
	
	ХешированиеДанныхПроверкаВходящихПараметров(Данные, АлгоритмХеширования, ПараметрыХеширования);
	
	Попытка
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Данные = ПолучитьИзВременногоХранилища(Данные);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыХеширования) И ПараметрыХеширования.Свойство("ИнвертироватьПолубайты") Тогда
			ИнвертироватьПолубайты = ПараметрыХеширования.ИнвертироватьПолубайты;
		Иначе
			ИнвертироватьПолубайты = Истина;
		КонецЕсли;
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("data", Данные);
		ПараметрыМетода.Вставить("algorithm", АлгоритмХеширования);
		ПараметрыМетода.Вставить("inverted_halfbytes", ИнвертироватьПолубайты);
				
		Результат = ВыполнитьМетодКриптосервиса("crypto/hash", ПараметрыМетода);
		
		Возврат Результат;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	
		Параметры = Новый Структура("Данные", Данные);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияХеширование(), ИнформацияОбОшибке, Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ВычислитьИдентификаторСертификата(СерийныйНомер, Издатель) Экспорт
	
	СоответствиеИмяOID = СоответствиеИмяOID();
	Для Каждого Элемент Из Издатель Цикл
		Если СоответствиеИмяOID.Получить(Элемент.Представление) <> Неопределено Тогда
			Элемент.Представление = СоответствиеИмяOID.Получить(Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСертификата(СерийныйНомер, Издатель);
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИменаСвойствДляВосстановления(Метод)
	
	СвойстваДляПреобразования = Новый Массив;
	Если СтрРазделить("crypto/encryptor,crypto/decryptor,crypto/hash,crypto/signature", ",").Найти(Метод) <> Неопределено Тогда
		СвойстваДляПреобразования.Добавить("data");
	ИначеЕсли Метод = "crypto/certificate" Тогда
		СвойстваДляПреобразования.Добавить("public_key");
		СвойстваДляПреобразования.Добавить("thumbprint");
		СвойстваДляПреобразования.Добавить("serial_number");
	ИначеЕсли Метод = "crypto/crypto_message" Тогда
		СвойстваДляПреобразования.Добавить("content");
		СвойстваДляПреобразования.Добавить("certificates");
		СвойстваДляПреобразования.Добавить("serial_number");
	КонецЕсли;
	
	Возврат СвойстваДляПреобразования;
	
КонецФункции

#Область РаботаСJson

Функция ПреобразоватьДвоичныеДанныеВBase64(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ЗаменятьДвоичныеДанные")
			И ДополнительныеПараметры.ЗаменятьДвоичныеДанные Тогда
			Возврат Значение.Размер();
		Иначе
			Возврат Base64Строка(Значение);
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция ПреобразоватьBase64ВДвоичныеДанные(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат Base64Значение(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Индекс = 0 По Значение.ВГраница() Цикл
			Значение[Индекс] = Base64Значение(Значение[Индекс]);	
		КонецЦикла;
		Возврат Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция JsonВСтруктуру(СтрокаJSON, ПараметрыПреобразования = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Если ТипЗнч(ПараметрыПреобразования) = Тип("Структура")
		И ПараметрыПреобразования.Свойство("ИменаСвойствДляВосстановления")
		И ЗначениеЗаполнено(ПараметрыПреобразования.ИменаСвойствДляВосстановления) Тогда
		Объект = ПрочитатьJSON(
			ЧтениеJSON,,,, 
			"ПреобразоватьBase64ВДвоичныеДанные", 
			СервисКриптографииСлужебный, 
			ПараметрыПреобразования,
			ПараметрыПреобразования.ИменаСвойствДляВосстановления);
	Иначе
		Объект = ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Объект;
	
КонецФункции

Функция СтруктураВJson(Объект, ПараметрыПреобразования = Неопределено)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(
		ЗаписьJSON, 
		Объект,, 
		"ПреобразоватьДвоичныеДанныеВBase64", 
		СервисКриптографииСлужебный, 
		ПараметрыПреобразования);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

Функция ПолучитьДвоичныеДанныеСертификата(Сертификат)
	
	ДвоичныеДанныеСертификата = Неопределено;
	
	Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеСертификата = ХранилищеСертификатов.СертификатВКодировкеDER(Сертификат);
	ИначеЕсли (ТипЗнч(Сертификат) = Тип("Структура") ИЛИ ТипЗнч(Сертификат) = Тип("ФиксированнаяСтруктура"))
		И Сертификат.Свойство("Сертификат") Тогда
		ДвоичныеДанныеСертификата = ХранилищеСертификатов.СертификатВКодировкеDER(Сертификат.Сертификат);
	Иначе
		ДвоичныеДанныеСертификата = ХранилищеСертификатов.НайтиСертификат(Сертификат).Сертификат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеСертификата) Тогда
		ВызватьИсключение(НСтр("ru = 'Не удалось извлечь двоичные данные сертификата'"));
	КонецЕсли;
	
	Возврат ДвоичныеДанныеСертификата;
	
КонецФункции

Функция ПолучитьДвоичныеДанныеСертификатов(Сертификаты)
	
	ДвоичныеДанныеСертификатов = Новый Массив;
	
	Если ТипЗнч(Сертификаты) = Тип("Массив") ИЛИ ТипЗнч(Сертификаты) = Тип("ФиксированныйМассив") Тогда
		МассивСертификатов = Сертификаты;
	Иначе
		МассивСертификатов = Новый Массив;
		МассивСертификатов.Добавить(Сертификаты);
	КонецЕсли;
	
	Для Каждого Сертификат Из МассивСертификатов Цикл 
		ДвоичныеДанныеСертификатов.Добавить(ПолучитьДвоичныеДанныеСертификата(Сертификат));	
	КонецЦикла;
	
	Возврат ДвоичныеДанныеСертификатов;
	
КонецФункции

Функция ВернутьРезультатКакАдресВоВременномХранилище(Параметр)
	
	ВернутьКакАдрес = Ложь;
	Если ТипЗнч(Параметр) = Тип("Строка") И ЭтоАдресВременногоХранилища(Параметр) Тогда
		ВернутьКакАдрес = Истина;
	КонецЕсли;
	
	Возврат ВернутьКакАдрес;
	
КонецФункции

// Устанавливает соединение с сервером Интернета по протоколу http(s).
//
// Параметры:
//  URL                 - Строка - url сервера в формате [Протокол://]<Сервер>/.
//  ПараметрыСоединения - Структуруа - дополнительные параметры для "тонкой" настройки.
//    * Таймаут - Число - определяет время ожидания осуществляемого соединения и операций, в секундах.
//
Функция СоединениеССерверомИнтернета(URL, ПараметрыСоединения = Неопределено)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	Схема = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Схема);
	
	Таймаут = 30;
	Если ТипЗнч(ПараметрыСоединения) = Тип("Структура") Тогда
		Если ПараметрыСоединения.Свойство("Таймаут") Тогда
			Таймаут = ПараметрыСоединения.Таймаут;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			Таймаут,
			?(НРег(Схема) = "http", Неопределено, Новый ЗащищенноеСоединениеOpenSSL));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();	
		ЗаписьЖурналаРегистрации(
			ИмяСобытияУстановкаСоединенияССервером(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ВызватьСтандартноеИсключение();
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ВерсияПрограммногоИнтерфейса()
	
	Возврат "v3";
	
КонецФункции

Функция ВыполнитьМетодКриптосервиса(Метод, ПараметрыМетода)
	
	УстановитьПривилегированныйРежим(Истина);
	АдресСервиса = Константы.АдресКриптосервиса.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Соединение = СоединениеССерверомИнтернета(АдресСервиса);		
	Запрос = ПодготовитьHTTPЗапрос(Метод, ПараметрыМетода);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная подпись в модели сервиса.Сервис криптографии.Выполнение запроса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			КомментарийПоИсключению(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				Новый Структура("Метод,Версия", Метод, ВерсияПрограммногоИнтерфейса())));	 
		
		ВызватьСтандартноеИсключение();
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 400 Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная подпись в модели сервиса.Сервис криптографии.Выполнение запроса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			КомментарийПоИсключению(
				Ответ.ПолучитьТелоКакСтроку(),
				Новый Структура("Метод,Версия", Метод, ВерсияПрограммногоИнтерфейса())));	 
		
		ВызватьСтандартноеИсключение();
	КонецЕсли;
	
	ПараметрыПреобразования = Новый Структура;
	Если Ответ.КодСостояния = 200 Тогда
		ПараметрыПреобразования.Вставить("ИменаСвойствДляВосстановления", ПолучитьИменаСвойствДляВосстановления(Метод));
	КонецЕсли;
			
	Результат = JsonВСтруктуру(Ответ.ПолучитьТелоКакСтроку(), ПараметрыПреобразования);
	
	Если Результат.status = "success" Тогда
		Возврат Результат.data;
	ИначеЕсли Результат.status = "fail" Тогда
		ВызватьИсключение(Результат.data);
	КонецЕсли;
			
КонецФункции

Функция АдресРесурса(Метод)
	
	Возврат СтрШаблон("/api/%1/%2", ВерсияПрограммногоИнтерфейса(), Метод);
	
КонецФункции

Функция ПодготовитьHTTPЗапрос(Метод, ПараметрыМетода)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыМетода.Вставить("client", НаименованиеКлиента());
	Запрос = Новый HTTPЗапрос(АдресРесурса(Метод), Заголовки);
	Запрос.УстановитьТелоИзСтроки(СтруктураВJson(ПараметрыМетода),, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Запрос;
	
КонецФункции

Функция НаименованиеКлиента()
	
	Возврат СтрШаблон("%1 (%2):%3", Метаданные.Имя, Метаданные.Версия, Формат(ОбщегоНазначения.ЗначениеРазделителяСеанса(), "ЧГ="));
	
КонецФункции

Функция ПреобразоватьOID(СписокOID)
	
	Свойства = Новый Структура;
	Для Каждого RDN Из СписокOID Цикл
		Свойства.Вставить(ПолучитьИмяПоOID(RDN.OID), RDN.Value);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция РасширенныеСвойстваСертификата(СписокOID)
	
	EKU = Новый Массив;
	Для Каждого OID Из СписокOID Цикл
		Имя = ПолучитьИмяПоOID(OID, "");
		Если ЗначениеЗаполнено(Имя) Тогда
			EKU.Добавить(СтрШаблон("%1 (%2)", Имя, OID));
		Иначе
			EKU.Добавить(OID);
		КонецЕсли;
	КонецЦикла;

	EKU = Новый ФиксированныйМассив(EKU);
	
	Возврат Новый ФиксированнаяСтруктура(Новый Структура("EKU", EKU));
	
КонецФункции

Функция НаименованиеСертификата(СписокOID)
	
	Для Каждого ЭлементOID Из СписокOID Цикл
		Если ЭлементOID.OID = "2.5.4.3" Тогда
			Возврат ЭлементOID.Value;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат "";
	
КонецФункции

Функция ВычислитьИдентификаторСертификатаJson(СвойстваСертификата)
	
	Свойства = Новый СписокЗначений;
	Для Каждого RDN Из СвойстваСертификата.issuer Цикл
		Свойства.Добавить(RDN.value, RDN.oid);
	КонецЦикла;
	
	Возврат ИдентификаторСертификата(СвойстваСертификата.serial_number, Свойства)
	
КонецФункции

Функция ИдентификаторСертификата(СерийныйНомер, СписокOID)
	
	Ключи = СтрРазделить("2.5.4.3,2.5.4.4,2.5.4.6,2.5.4.7,2.5.4.8,2.5.4.10,2.5.4.11,2.5.4.12,2.5.4.42,1.2.840.113549.1.9.1", ",");
	Свойства = Новый СписокЗначений;
	Для Каждого Элемент Из СписокOID Цикл
		Если Ключи.Найти(Элемент.Представление) <> Неопределено Тогда
			Свойства.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	СерийныйНомерСтрока = НРег(СтрЗаменить(СерийныйНомер, " ", ""));
	
	Свойства.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	МассивЗначений = Свойства.ВыгрузитьЗначения();
	
	МассивЗначений.Добавить(СерийныйНомерСтрока);
	
	ИздательИСерийныйНомер = СтрСоединить(МассивЗначений, "#");
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ИздательИСерийныйНомер);
	
	Возврат НРег(СтрЗаменить(Хеширование.ХешСумма, " ", ""));	
	
КонецФункции

Функция ПолучитьСвойстваСертификатовИзJson(СписокПарСерийныйНомерИздатель)
	
	Сертификаты = Новый Массив;
	
	Для Каждого Пара Из СписокПарСерийныйНомерИздатель Цикл
		Сертификат = Новый Структура;
		Сертификат.Вставить("СерийныйНомер", Пара.serial_number);
		Сертификат.Вставить("Издатель", ПреобразоватьOID(Пара.issuer));
		Если Пара.Свойство("certificate_id") Тогда
			Сертификат.Вставить("Идентификатор", (Пара.certificate_id));
		КонецЕсли;
		
		Сертификаты.Добавить(Новый ФиксированнаяСтруктура(Сертификат));
	КонецЦикла;
	
	Возврат Сертификаты;

КонецФункции

Функция ПолучитьИмяПоOID(OID, ИмяПоУмолчанию = Неопределено)
	
	Имя = СоответствиеOIDИмя().Получить(OID);
	Если Имя = Неопределено Тогда
		Если ИмяПоУмолчанию <> Неопределено Тогда
			Имя = ИмяПоУмолчанию;
		Иначе
			Имя = "_" + СтрЗаменить(OID, ".", "_");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

Функция СоответствиеOIDИмя()
	
	СоответствиеOID = Новый Соответствие;
	СоответствиеOID.Вставить("2.5.4.3", "CN"); // commonName
	СоответствиеOID.Вставить("2.5.4.6", "C"); // countryName
	СоответствиеOID.Вставить("2.5.4.8", "ST"); // stateOrProvinceName
	СоответствиеOID.Вставить("2.5.4.7", "L"); // localityName
	СоответствиеOID.Вставить("2.5.4.9", "STREET"); // streetAddress
	СоответствиеOID.Вставить("2.5.4.10", "O"); // organizationName
	СоответствиеOID.Вставить("2.5.4.11", "OU"); // organizationUnitName
	СоответствиеOID.Вставить("2.5.4.12", "T"); // title
	СоответствиеOID.Вставить("1.2.643.100.1", "OGRN"); // ОГРН
	СоответствиеOID.Вставить("1.2.643.100.5", "OGRNIP"); // ОГРНИП
	СоответствиеOID.Вставить("1.2.643.100.3", "SNILS"); // СНИЛС
	СоответствиеOID.Вставить("1.2.643.3.131.1.1", "INN"); // ИНН
	СоответствиеOID.Вставить("1.2.840.113549.1.9.1", "E"); // emailAddress	
	СоответствиеOID.Вставить("2.5.4.4", "SN"); // surname
	СоответствиеOID.Вставить("2.5.4.42", "GN"); // givenName
	
	Возврат СоответствиеOID;
	
КонецФункции

Функция СоответствиеИмяOID()
	
	СоответствиеOID = Новый Соответствие;
	СоответствиеOID.Вставить("CN", "2.5.4.3"); // commonName
	СоответствиеOID.Вставить("C", "2.5.4.6"); // countryName
	СоответствиеOID.Вставить("ST", "2.5.4.8"); // stateOrProvinceName
	СоответствиеOID.Вставить("L", "2.5.4.7"); // localityName
	СоответствиеOID.Вставить("STREET", "2.5.4.9"); // streetAddress
	СоответствиеOID.Вставить("O", "2.5.4.10"); // organizationName
	СоответствиеOID.Вставить("OU", "2.5.4.11"); // organizationUnitName
	СоответствиеOID.Вставить("T", "2.5.4.12"); // title
	СоответствиеOID.Вставить("OGRN", "1.2.643.100.1"); // ОГРН
	СоответствиеOID.Вставить("OGRNIP", "1.2.643.100.5"); // ОГРНИП
	СоответствиеOID.Вставить("SNILS", "1.2.643.100.3"); // СНИЛС
	СоответствиеOID.Вставить("INN", "1.2.643.3.131.1.1"); // ИНН
	СоответствиеOID.Вставить("E", "1.2.840.113549.1.9.1"); // emailAddress	
	СоответствиеOID.Вставить("SN", "2.5.4.4"); // surname
	СоответствиеOID.Вставить("GN", "2.5.4.42"); // givenName
	
	Возврат СоответствиеOID;
	
КонецФункции

Процедура ВызватьСтандартноеИсключение()
	
	ВызватьИсключение(НСтр("ru = 'Сервис временно недоступен. Обратитесь в службу поддержки или повторите попытку позже.'"));
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытия, ИнформацияОбОшибке, Параметры)
	
	Комментарий = КомментарийПоИсключению(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Параметры);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Функция КомментарийПоИсключению(ПредставлениеОшибки, Параметры)
	
	ШаблонЗаписи = 
	"Параметры:
	|%1
	|
	|ПредставлениеОшибки:
	|%2";
	
	Возврат СтрШаблон(ШаблонЗаписи, СтруктураВJson(Параметры, Новый Структура("ЗаменятьДвоичныеДанные", Истина)), СокрЛП(ПредставлениеОшибки));
		
КонецФункции

#Область ПроверкаВходныхПараметров

Процедура ЗашифроватьПроверкаВходящихПараметров(Данные, Получатели, ТипШифрования, ПараметрыШифрования)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Зашифровать", 
		"Данные",
		Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Зашифровать", 
		"Получатели",
		Получатели, 
		Новый ОписаниеТипов("ДвоичныеДанные, Структура, ФиксированнаяСтруктура, Массив, ФиксированныйМассив"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Зашифровать", 
		"ТипШифрования",
		ТипШифрования, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипШифрования = "CMS",
		НСтр("ru = 'Недопустимое значение параметра ТипШифрования (неизвестный тип шифрования)'"), 
		"СервисКриптографии.Зашифровать");
	
	Если ЗначениеЗаполнено(ПараметрыШифрования) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.Зашифровать", 
			"ПараметрыШифрования",
			ПараметрыШифрования, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.Зашифровать");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПроверкаВходящихПараметров(Данные, Подписант, ТипПодписи, ПараметрыПодписания)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Подписать", 
		"Данные",
		Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Подписать", 
		"Подписант",
		Подписант, 
		Новый ОписаниеТипов("ДвоичныеДанные, Структура, ФиксированнаяСтруктура"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Подписать", 
		"ТипПодписи",
		ТипПодписи, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипПодписи = "CMS" ИЛИ ТипПодписи = "GOST3410",
		НСтр("ru = 'Недопустимое значение параметра ТипПодписи (неизвестный тип подписи)'"), 
		"СервисКриптографии.Подписать");
	
	Если ЗначениеЗаполнено(ПараметрыПодписания) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.Подписать", 
			"ПараметрыПодписания",
			ПараметрыПодписания, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.Подписать");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСвойстваКриптосообщенияПроверкаВходящихПараметров(Криптосообщение)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПолучитьСвойстваКриптосообщения", 
		"Криптосообщение",
		Криптосообщение, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ТипЗнч(Криптосообщение) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Криптосообщение),
			НСтр("ru = 'Недопустимое значение параметра Криптосообщение (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПолучитьСвойстваКриптосообщения");
	КонецЕсли;
		
КонецПроцедуры

Процедура РасшифроватьПроверкаВходящихПараметров(ЗашифрованныеДанные, ТипШифрования, ПараметрыШифрования)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Расшифровать", 
		"ЗашифрованныеДанные",
		ЗашифрованныеДанные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Расшифровать", 
		"ТипШифрования",
		ТипШифрования, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипШифрования = "CMS",
		НСтр("ru = 'Недопустимое значение параметра ТипШифрования (неизвестный тип шифрования)'"), 
		"СервисКриптографии.Расшифровать");
	
	Если ЗначениеЗаполнено(ПараметрыШифрования) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.Расшифровать", 
			"ПараметрыШифрования",
			ПараметрыШифрования, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если ТипЗнч(ЗашифрованныеДанные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(ЗашифрованныеДанные),
			НСтр("ru = 'Недопустимое значение параметра ЗашифрованныеДанные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.Расшифровать");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПодписьПроверкаВходящихПараметров(Подпись, Данные, ТипПодписи, ПараметрыПодписания)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПроверитьПодпись", 
		"Подпись",
		Подпись, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ЗначениеЗаполнено(ПараметрыПодписания) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.ПроверитьПодпись", 
			"ПараметрыПодписания",
			ПараметрыПодписания, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПодписания)
		ИЛИ Не ПараметрыПодписания.Свойство("ОтсоединеннаяПодпись")
		ИЛИ Не ПараметрыПодписания.ОтсоединеннаяПодпись Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.ПроверитьПодпись", 
			"Данные",
			Данные, 
			Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПроверитьПодпись", 
		"ТипПодписи",
		ТипПодписи, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипПодписи = "CMS" ИЛИ ТипПодписи = "GOST3410",
		НСтр("ru = 'Недопустимое значение параметра ТипПодписи (неизвестный тип подписи)'"), 
		"СервисКриптографии.ПроверитьПодпись");
	
	Если ТипЗнч(Подпись) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Подпись),
			НСтр("ru = 'Недопустимое значение параметра Подпись (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПроверитьПодпись");
	КонецЕсли;
		
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПроверитьПодпись");
	КонецЕсли;
	
	Если ТипПодписи = "GOST3410" Тогда 
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЗначениеЗаполнено(ПараметрыПодписания) И ПараметрыПодписания.Свойство("Сертификат"),
			НСтр("ru = 'Для проверки подписи по ГОСТ Р 34.10-94 необходимо указание сертификата'"), 
			"СервисКриптографии.ПроверитьПодпись");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьСертификатПроверкаВходящихПараметров(Сертификат)
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПроверитьСертификат", 
		"Сертификат",
		Сертификат, 
		Новый ОписаниеТипов("ДвоичныеДанные, Структура"));
		
КонецПроцедуры

Процедура ПолучитьСвойстваСертификатаПроверкаВходящихПараметров(Сертификат)
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПолучитьСвойстваСертификата", 
		"Сертификат",
		Сертификат, 
		Новый ОписаниеТипов("ДвоичныеДанные, Структура"));
		
КонецПроцедуры

Процедура ПолучитьСертификатыИзПодписиПроверкаВходящихПараметров(Подпись)
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПолучитьСертификатыИзПодписи", 
		"Подпись",
		Подпись, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ТипЗнч(Подпись) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Подпись),
			НСтр("ru = 'Недопустимое значение параметра Подпись (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПолучитьСертификатыИзПодписи");
	КонецЕсли;
		
КонецПроцедуры

Процедура ХешированиеДанныхПроверкаВходящихПараметров(Данные, АлгоритмХеширования, ПараметрыХеширования)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ХешированиеДанных", 
		"Данные",
		Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ХешированиеДанных");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		АлгоритмХеширования = "GOST R 34.11-94",
		НСтр("ru = 'Недопустимое значение параметра АлгоритмХеширования (неизвестный алгоритм хеширования)'"), 
		"СервисКриптографии.ХешированиеДанных");
		
	Если ЗначениеЗаполнено(ПараметрыХеширования) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.ХешированиеДанных", 
			"ПараметрыХеширования",
			ПараметрыХеширования, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ИменаСобытий

Функция ИмяСобытияШифрование()
	
	Возврат НСтр("ru = 'Сервис криптографии.Шифрование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияСвойстваСертификата()
	
	Возврат НСтр("ru = 'Сервис криптографии.Свойства сертификата'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияСвойстваКриптосообщения()
	
	Возврат НСтр("ru = 'Сервис криптографии.Свойства криптосообщения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияАутентификация()
	
	Возврат НСтр("ru = 'Сервис криптографии.Аутентификация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияПроверкаПодписи()
	
	Возврат НСтр("ru = 'Сервис криптографии.Проверка подписи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияПроверкаСертификата()
	
	Возврат НСтр("ru = 'Сервис криптографии.Проверка сертификата'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияРасшифровка()
	
	Возврат НСтр("ru = 'Сервис криптографии.Расшифровка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияХеширование()
	
	Возврат НСтр("ru = 'Сервис криптографии.Хеширование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияПодписание()
	
	Возврат НСтр("ru = 'Сервис криптографии.Подписание'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияУстановкаСоединенияССервером()
	
	Возврат НСтр("ru = 'Сервис криптографии.Установка соединения с сервером'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти