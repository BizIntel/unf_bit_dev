
#Область ПроцедурыИФункцииПоРаботеСЛогированием

			///////////////////////////////////////////////////////////////////
			//		   	 ПРОЦЕДУРЫ И ФУНКЦИИ С ЛОГИРОВАНИЕМ         		//
			/////////////////////////////////////////////////////////////////

// Процедура - отображает сообщение обмена данных.
//
// Параметры:
//  пСобытие				 - 	 Сообщение 
//  ОсновныеПараметры		 - 	 Настройки узла обмена  
//  Логирование				 - 	 Признак того, что сообщение нужно писать в лог файл 
//  ЗаписьВЖурналРегистрации - 	 Признак того, что сообщение нужно писать в журнал регистрации 
Процедура СообщитьПодробно(пСобытие, ОсновныеПараметры = Неопределено, Логирование = Истина, ЗаписьВЖурналРегистрации = Ложь) Экспорт
	
	//#Если Клиент Тогда
		Сообщить(пСобытие);
	//#КонецЕсли
	
	ОтображениеСостояния(пСобытие);
	
	Если ЗаписьВЖурналРегистрации тогда
		ЗаписьЖурналаРегистрации("СобытияОбменаДанныхМодуляБитрикс", УровеньЖурналаРегистрации.Информация,,, пСобытие);
    КонецЕсли;
	
	Если Логирование и НЕ ОсновныеПараметры = Неопределено Тогда
		
		Если ОсновныеПараметры.ИмяФайлаЛога <> "" тогда
			
			Текст = Новый ЗаписьТекста(ОсновныеПараметры.ИмяФайлаЛога, КодировкаТекста.ANSI,,истина);
			Текст.ЗаписатьСтроку(Строка(ТекущаяДата()) + "--" + пСобытие);
			Текст.Закрыть(); 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// Процедура - отображает состояние
//
// Параметры:
//  ТекстСостояния	-  Строка, предназначенная для вывода в панель состояния. Если параметр не указан, возобновляется вывод системного текста в панель состояния. 
Процедура ОтображениеСостояния(ТекстСостояния) Экспорт
	
	#Если Клиент Тогда
		Состояние(ТекстСостояния);
	#КонецЕсли
	
КонецПроцедуры


#КонецОбласти


#Область ПроверкаИОбновлениеВерсий

// Функция - возвращает текущую версию модуля обмена
// Возвращаемое значение:
//   Версия модуля обмена 
Функция Версия() Экспорт
	Возврат "1.3";
КонецФункции

// Функция проверяет актуальность текущих данных нестроек обмена.
//
// Параметры:
//  ОсновныеПараметры	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Истина, если данные настроек обмена актуальные 
Функция ПроверкаОбновленияДанныхМодуляОбменаССайтом(ОсновныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Версия();
	
	ПредыдущаяВерсия = Константы.Б_Битрикс24_1С_НомерВерсии.Получить();
	
	ПервыйЗапуск = НЕ ПредыдущаяВерсия = Версия;
	
	Если НЕ ПервыйЗапуск Тогда
		Возврат Истина;
	КонецЕсли;
	
	Пока Константы.Б_Битрикс24_1С_НомерВерсии.Получить() <> Версия Цикл
		
		ПредыдущаяВерсия = Константы.Б_Битрикс24_1С_НомерВерсии.Получить();
		
		Если ПредыдущаяВерсия = "" Тогда
			
			Константы.Б_Битрикс24_1С_НомерВерсии.Установить("1.0");
			
			
		//ИначеЕсли ПредыдущаяВерсия = "5.0.0.6" Тогда
		//	Результат = ОбновлениеДоВерсии5_0_0_7(ОсновныеПараметры);
		//	
		//	Если Результат = Истина тогда
		//		Константы.Б_Битрикс24_1С_НомерВерсии.Установить("5.0.0.7");
		//	Иначе
		//		Возврат Результат;
		//	КонецЕсли;   
		
		ИначеЕсли ПредыдущаяВерсия = "1.0" Тогда
			Константы.Б_Битрикс24_1С_НомерВерсии.Установить("1.1");
		ИначеЕсли ПредыдущаяВерсия = "1.1" Тогда
			Константы.Б_Битрикс24_1С_НомерВерсии.Установить("1.2");
			
		Иначе 
		    Константы.Б_Битрикс24_1С_НомерВерсии.Установить(Версия);

			Возврат Истина;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСлужебноеНазваниеКонфигурации() Экспорт
	
	Возврат "UNF 1.6";
	
КонецФункции

Функция ПолучитьЛокализациюКонфигурации() Экспорт
	//UKR
	//BEL
	//KAZ
	Возврат "RUS";
	
КонецФункции

Функция РазобратьФайлСАктуальнымиВерсиямиМодулей(ИмяФайла) Экспорт
	
	ТзнВерсииМодулей = Новый ТаблицаЗначений;
	ТзнВерсииМодулей.Колонки.Добавить("НаименованиеКонфигурации");
	ТзнВерсииМодулей.Колонки.Добавить("РелизКонфигурации");
	ТзнВерсииМодулей.Колонки.Добавить("НаименованиеМодуля");
	ТзнВерсииМодулей.Колонки.Добавить("ВерсияМодуля");
	ТзнВерсииМодулей.Колонки.Добавить("Локализация");
	ТзнВерсииМодулей.Колонки.Добавить("Ссылка");
	ТзнВерсииМодулей.Колонки.Добавить("История");
		
	Чтение = новый ЧтениеXML;
	Чтение.ОткрытьФайл(сокрЛП(ИмяФайла));
	Modules 		= Ложь;
	Location        = Ложь;
	Link       		= Ложь;
	Module 	 		= Ложь;
	Name1C 			= Ложь;
	Version1C 		= Ложь;
	NameModule 		= Ложь;
	VersionModule 	= Ложь;
	
	History 		= Ложь;
	HModule 		= Ложь;
	HVersionModule 	= Ложь;
	HDescriptions 	= Ложь;

	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ History И Чтение.Имя = "Modules" Тогда
			Modules = Истина;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И НЕ History И Чтение.Имя = "Modules" тогда
			Modules = Ложь;
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ History И Чтение.Имя = "Module" И Modules Тогда
			Module = Истина;
			НовСтрока = ТзнВерсииМодулей.Добавить();
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И НЕ History И Чтение.Имя = "Module" И Modules Тогда 	
			Module = Ложь;
		КонецЕсли;
		
		Если Modules И Module И НЕ History тогда
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Name1C" Тогда
				Name1C = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Name1C" тогда
				Name1C = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Version1C" Тогда
				Version1C = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Version1C" тогда
				Version1C = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "NameModule" Тогда
				NameModule = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "NameModule" тогда
				NameModule = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "VersionModule" Тогда
				VersionModule = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "VersionModule" тогда
				VersionModule = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Location" Тогда
				Location = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Location" тогда
				Location = Ложь;
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Link" Тогда
				Link = Истина;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Link" тогда
				Link = Ложь;
			КонецЕсли;
			
			Если Name1C И Чтение.Имя = "#text" тогда
				НовСтрока.НаименованиеКонфигурации = Чтение.Значение;
			КонецЕсли;
			
			Если Version1C И Чтение.Имя = "#text" тогда
				НовСтрока.РелизКонфигурации = Чтение.Значение;
			КонецЕсли;
			
			Если NameModule И Чтение.Имя = "#text" тогда
				НовСтрока.НаименованиеМодуля = Чтение.Значение;
			КонецЕсли;
			
			Если VersionModule И Чтение.Имя = "#text" тогда
				НовСтрока.ВерсияМодуля = Чтение.Значение;
			КонецЕсли;
			
			Если Location И Чтение.Имя = "#text" тогда
				НовСтрока.Локализация = Чтение.Значение;
			КонецЕсли;
			
			Если Link И Чтение.Имя = "#text" тогда
				НовСтрока.Ссылка = Чтение.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "History" Тогда
			
			History = Истина;
			
			тзнИстории = Новый ТаблицаЗначений;
			тзнИстории.Колонки.Добавить("ВерсияМодуля"); 
			тзнИстории.Колонки.Добавить("Описание"); 
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "History" тогда
			
			History = Ложь;
			
			НовСтрока.История = тзнИстории;
			
		КонецЕсли;
			
		Если  Modules И Module И History тогда
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Module" Тогда
				
				HModule = Истина;
				
				НовИстрия = тзнИстории.Добавить();	

			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Module" тогда
				HModule = Ложь;
			КонецЕсли;
			
			Если  Modules И Module И History И HModule тогда
				
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "VersionModule" Тогда
					HVersionModule = Истина;
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "VersionModule" тогда
					HVersionModule = Ложь;
				КонецЕсли;
				
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя 	= "Descriptions" Тогда
					HDescriptions = Истина;
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Descriptions" тогда
					HDescriptions = Ложь;
				КонецЕсли;
				
				Если HVersionModule И Чтение.Имя = "#text" тогда
					НовИстрия.ВерсияМодуля = Чтение.Значение;
				КонецЕсли;
				
				Если HDescriptions И Чтение.Имя = "#text" тогда
					НовИстрия.Описание = Чтение.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТзнВерсииМодулей;
	
КонецФункции

Функция РазобратьВерсиюМодуля4(ВерсияМодуля)
		
	СтруктураРазбора = Новый Структура;
	СтруктураРазбора.Вставить("МажорнаяВерсия"	, 0);
	СтруктураРазбора.Вставить("МинорнаяВерсия"	, 0);
	СтруктураРазбора.Вставить("Релиз"			, 0);
	СтруктураРазбора.Вставить("Сборка"			, 0);

	ДлинаВерсии = СтрДлина(ВерсияМодуля);	
	
	Ряд = 1;
	Версия = "";
	Для Пер = 1 по ДлинаВерсии Цикл
		
		Сим = Сред(ВерсияМодуля, Пер,1);
		
		Если Сим = "." тогда
			
			Если Ряд = 1 тогда
				СтруктураРазбора.МажорнаяВерсия = Число(Версия); 	
			ИначеЕсли Ряд = 2 тогда
				СтруктураРазбора.МинорнаяВерсия = Число(Версия); 	
			ИначеЕсли Ряд = 3 тогда
				СтруктураРазбора.Релиз 			= Число(Версия); 	
			КонецЕсли;
			
			Ряд 	= Ряд + 1;
			Версия 	= "";
			
		Иначе
			Версия 	= Версия + Сим;	
			
			Если Пер = ДлинаВерсии тогда
				СтруктураРазбора.Сборка 		= Число(Версия); 	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРазбора;
	
КонецФункции

Функция ПроверитьАктуальностьТекущегоМодуля4(ВерсияТекущегоМодуля, ВерсияАктуальногоМодуля) Экспорт
	
	Результат = Истина;
	
	РазобранаяВерсияТекущегоМодуля 		= РазобратьВерсиюМодуля4(ВерсияТекущегоМодуля);
	РазобранаяВерсияАктуальногоМодуля 	= РазобратьВерсиюМодуля4(ВерсияАктуальногоМодуля);
	
	Если  РазобранаяВерсияТекущегоМодуля.МажорнаяВерсия < РазобранаяВерсияАктуальногоМодуля.МажорнаяВерсия тогда
		Результат = Ложь;
	ИначеЕсли РазобранаяВерсияТекущегоМодуля.МажорнаяВерсия = РазобранаяВерсияАктуальногоМодуля.МажорнаяВерсия тогда
		
		Если  РазобранаяВерсияТекущегоМодуля.МинорнаяВерсия < РазобранаяВерсияАктуальногоМодуля.МинорнаяВерсия тогда
			Результат = Ложь;	
		ИначеЕсли  РазобранаяВерсияТекущегоМодуля.МинорнаяВерсия = РазобранаяВерсияАктуальногоМодуля.МинорнаяВерсия тогда

			Если  РазобранаяВерсияТекущегоМодуля.Релиз < РазобранаяВерсияАктуальногоМодуля.Релиз тогда
				Результат = Ложь;	
			ИначеЕсли  РазобранаяВерсияТекущегоМодуля.Релиз = РазобранаяВерсияАктуальногоМодуля.Релиз тогда
				Если  РазобранаяВерсияТекущегоМодуля.Сборка < РазобранаяВерсияАктуальногоМодуля.Сборка тогда
					Результат = Ложь;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеСФС

// Функция - возвращает путь к файлам/папкам, в звависимости от ОС
//
// Параметры:
//  ПлатформаWindows - 	 Признак того, что эта ОС - Windows 
//  Путь			 - 	 Адрес к файлу/папке 
// Возвращаемое значение:
//   Адрес к файлу/папке 
Функция ПолучитьПутьДляПлатформы(ПлатформаWindows, Путь) Экспорт
	
	Если ПлатформаWindows Тогда
		ЧтоМенять = "/";
		НаЧтоМенять = "\";
	Иначе
		ЧтоМенять = "\";
		НаЧтоМенять = "/";
	КонецЕсли;
	
	Путь = СтрЗаменить(Путь, ЧтоМенять, НаЧтоМенять);
	
	Возврат Путь;
	
КонецФункции

// Функция - проверяет, существует ли указанный файл
//
// Параметры:
//  ИмяФайла - 	 Имя проверяемого файла 
// Возвращаемое значение:
//   Истина, если файл существует 
Функция СуществуетФайл(ИмяФайла) Экспорт
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует()  Тогда  
		Возврат Истина;
	КонецЕсли;  
	Возврат Ложь;
КонецФункции

// Функция - очищает содержимое каталога 
//
// Параметры:
//  Каталог			 - 	 Каталог, в котором очищаются файлы 
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Истина, если каталог очищен 
Функция КаталогОчищен(Каталог, ПараметрыОбмена = Неопределено) Экспорт
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		Сообщить("Не удалось очистить каталог обмена: (" + Каталог + ")");	
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти  


#Область ПроцедурыИФункцииПоРаботеСHTTP

			///////////////////////////////////////////////////////////////////
			//		  ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С HTTP 				    //
			/////////////////////////////////////////////////////////////////
			
			
Функция ДобавлениеНастроекПодключения(ОсновныеНастройки) Экспорт
	
	Если НЕ ПолучитьНастройкиАвторизации(ОсновныеНастройки) Тогда
		
		СообщитьПодробно("Ошибка при получении параметров подключения к сайту авторизации. Выгрузка отчетов невозможна.");
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСоединениеССервером(ПараметрыПодключения) 
	
	Соединение = Неопределено;
	
	Попытка
		
		Если НЕ ПараметрыПодключения.ЗащищенноеСоединение тогда
			ssl = Неопределено;
		Иначе
			       
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
                Неопределено,
                Неопределено);   
			
		КонецЕсли;
		
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт,,, ПараметрыПодключения.Прокси, ,ssl);
		
	Исключение
		
		СообщитьПодробно(НСтр("ru = 'Не удалось установить соединение с серовером'") + ПараметрыПодключения.Сервер + ":" + Строка(ПараметрыПодключения.Порт) 
			+ НСтр("ru = '.Проверьте правильность адреса сервера, порт, имя пользователя и пароль.'"));
		
		Соединение = Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ПолучитьТокенДляСоединения(ОсновныеНастройки) Экспорт

	лТокен = РегистрыСведений.Б_Битрикс24_1С_ТокеныОбменаСБ24.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Адрес, НастройкаВыгрузкиБ24","", ОсновныеНастройки.Ссылка)).Токен;	
	
	Соединение = УстановитьСоединениеССервером(ОсновныеНастройки.НастройкиПодключенияАвторизации);
	
	Если Соединение = Неопределено Тогда
		
		СообщитьПодробно("Авторизация не выполнена");
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеОшибки	= "";
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = "/oauth/token/?grant_type=refresh_token&client_id=" + ОсновныеНастройки.НастройкиПодключенияАвторизации.КодПриложения + "&client_secret=" + ОсновныеНастройки.НастройкиПодключенияАвторизации.СекретныйКодПриложения + "&refresh_token=" + лТокен;
	
	Попытка
		
		HTTPОтвет 		= Соединение.Получить(HTTPЗапрос);
		
		ОтветСтрокой 	= HTTPОтвет.ПолучитьТелоКакСтроку();
		
		сОтвета	 		= РазобратьОтветСервера(ОтветСтрокой);
		
		Если сОтвета.Свойство("error") = истина тогда
			
			Если сОтвета.error = "invalid_grant" тогда
				СообщитьПодробно("Не удалось произвести авторизацию. Некорректен постоянный ключ авторизации.", ОсновныеНастройки);
			КонецЕсли;
					
			Возврат Ложь;
		
		Иначе
			ОсновныеНастройки.НастройкиПодключения.АдресСайта 					= СокрЛП(сОтвета.client_endpoint);
			
			ОсновныеНастройки.НастройкиПодключенияАвторизации.ВременныйТокен 	= СокрЛП(сОтвета.access_token);
			ОсновныеНастройки.НастройкиПодключенияАвторизации.НовыйТокен 		= СокрЛП(сОтвета.refresh_token);
			
			ЗаписатьНовыйТокен(ОсновныеНастройки.Ссылка, СокрЛП(сОтвета.refresh_token));
		КонецЕсли;
	
	Исключение
		СообщитьПодробно("Не удалось произвести авторизацию. Возможно неверно указан постоянный ключ.", ОсновныеНастройки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьКоннекторыНаПортале(НастройкиВыгрузки) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(НастройкиВыгрузки) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОсновныеПараметры = Новый Структура;
	ОсновныеПараметры.Вставить("Ссылка", НастройкиВыгрузки);
	
	
	ОсновныеПараметры.Вставить("ИдБазы1С", ПолучитьИдБазы1С());
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ОсновныеПараметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДатаФормирования = ТекущаяДата();
	ОсновныеПараметры.Вставить("ДатаФормирования", ДатаФормирования);
																																																					
	ИмяФайлаЛога = "";
	Если НЕ ПустаяСтрока(НастройкиВыгрузки.КаталогЛога) Тогда
		
		лКаталогЛога = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, НастройкиВыгрузки.КаталогЛога + "\reports"); 
			
		Если НЕ СуществуетФайл(лКаталогЛога) тогда
			СоздатьКаталог(лКаталогЛога);	
		КонецЕсли;
			
		ИмяФайлаЛога = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, лКаталогЛога + "\") + "Exchange_" + "(" + НастройкиВыгрузки.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt";
		
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	
	Если НЕ ДобавлениеНастроекПодключения(ОсновныеПараметры) тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ПолучитьТокенДляСоединения(ОсновныеПараметры) тогда
		СообщитьПодробно("Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат Результат;
	КонецЕсли;
	
	ОсновныеПараметры.НастройкиПодключения = ПолучитьНастройкиПодключения(ОсновныеПараметры);
	
	Соединение = УстановитьСоединениеССервером(ОсновныеПараметры.НастройкиПодключения);
	
	ТелоHTTPЗапроса = "";	
	
	СтруктураОтвета = ОтправкаДанныхНаПортал(ОсновныеПараметры, Соединение, "/rest/crm.externalchannel.connector.list", ТелоHTTPЗапроса, Ложь); 
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция jsonПрочитатьПлатформой(Значение)

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Значение);
    
    Результат = Неопределено;
    СформироватьДерево(ЧтениеJSON, Результат);
    
    ЧтениеJSON.Закрыть();
    
    Возврат Результат;

КонецФункции

Процедура СформироватьДерево(ЧтениеJSON, Дерево)
    
    ИмяСвойства = Неопределено;
    
    Пока ЧтениеJSON.Прочитать() Цикл
        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        
        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Структура, Новый Массив);
            
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(НовыйОбъект);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Структура") И ЗначениеЗаполнено(ИмяСвойства) Тогда
                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
            КонецЕсли;
            
            СформироватьДерево(ЧтениеJSON, НовыйОбъект);
            
            Если Дерево = Неопределено Тогда
                Дерево = НовыйОбъект;
            КонецЕсли;
        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Структура") Тогда
                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
            КонецЕсли;
        Иначе
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Функция РазобратьОтветСервера(ОтветСервера)
	                   
	лСтруктураОтвета = Новый Структура;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	
   	Результат = Неопределено;
    СформироватьДерево(ЧтениеJSON, Результат);
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьНастройкиАвторизации(ОсновныеНастройки) Экспорт
	
	лАдрес = "https://oauth.bitrix.info";
	
	НастройкиПодключения = Новый Структура;
	
	НастройкиПодключения.Вставить("КодПриложения"			, "app.552d288cc83c88.78059741");
	НастройкиПодключения.Вставить("СекретныйКодПриложения", "a49b3d28c435cec6ea7d8ba53cd9c9be");
	НастройкиПодключения.Вставить("ОбластьВидимости"		, "user,department,log,sonet_group");
	НастройкиПодключения.Вставить("АдресСайта"				, лАдрес);
	НастройкиПодключения.Вставить("Токен"					, "");
	НастройкиПодключения.Вставить("ВременныйТокен"			, "");
	НастройкиПодключения.Вставить("НовыйТокен"				, "");
	
	ОписаниеОшибки = "";
	Если НЕ РазобратьАдресСайта(лАдрес, НастройкиПодключения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	                                                              
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, ПолучитьПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	ОсновныеНастройки.Вставить("НастройкиПодключенияАвторизации", НастройкиПодключения);
	
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("АдресСайта", "");
	ОсновныеНастройки.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНастройкиПодключения(ОсновныеНастройки) Экспорт
	
	НастройкиПодключения = Новый Структура;
	лАдрес = ОсновныеНастройки.НастройкиПодключения.АдресСайта;
	
	НастройкиПодключения.Вставить("КодПриложения"			, "app.574416a3e4c0b3.20492342");
	НастройкиПодключения.Вставить("СекретныйКодПриложения"	, "bmF6rILJ3890FwgTcZGQrQuNJvXcmvMAk2dLD6Yr4mFIcIil8I");
	НастройкиПодключения.Вставить("ОбластьВидимости"		, "user,department,log,sonet_group");
	НастройкиПодключения.Вставить("АдресСайта"				, лАдрес);
	
	
	ОписаниеОшибки = "";
	Если НЕ РазобратьАдресСайта(лАдрес, НастройкиПодключения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	                                                              
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, ПолучитьПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат НастройкиПодключения;
	
КонецФункции

Функция ПолучитьПрокси(НастройкаПроксиСервера, Протокол) Экспорт
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер	
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по URL
//
//
// Параметры:
// АдресСайта         		- Строка, URL
// НастройкиПодключения		- Структура настроек подключения к сайту
// ОписаниеОшибки        	- Строка
//  
// Возвращаемое значение:
// Булево				- Истина, если успех. 
//
Функция РазобратьАдресСайта(Знач АдресСайта, НастройкиПодключения) 
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	Сервер		 		 = ""; 
	Порт				 = 0;
	АдресСкрипта 		 = "";
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			
			АдресСайта = Сред(АдресСайта, 8);
			
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
			
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			
			Сервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);	
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
			
		Иначе
			
			Сервер 		 = АдресСайта;
			АдресСкрипта = "";
			
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		
		Если ПозицияДвоеточия > 0 Тогда
			
			СерверСПортом = Сервер;
			Сервер		  = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока 	  = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
			
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
		СообщитьПодробно(НСтр("ru = 'Не удалось получить номер порта ('") + ПортСтрока + ")!"
				+ Символы.ПС + НСтр("ru = 'Проверьте правильность ввода адреса сайта.'"));
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			
			Порт = ?(ЗащищенноеСоединение, 443, 80);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер"	  				, Сервер); 
	НастройкиПодключения.Вставить("Порт"		   			, Порт);
	НастройкиПодключения.Вставить("АдресСкрипта"			, АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение"	, ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьНастройкуНаПортал(НастройкиВыгрузки) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(НастройкиВыгрузки) Тогда

		
		Возврат Результат;
		
	КонецЕсли;
	
	ОсновныеПараметры = Новый Структура;
	ОсновныеПараметры.Вставить("Ссылка", НастройкиВыгрузки);
	
	
	ОсновныеПараметры.Вставить("ИдБазы1С", ПолучитьИдБазы1С());
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ОсновныеПараметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДатаФормирования = ТекущаяДата();
	ОсновныеПараметры.Вставить("ДатаФормирования", ДатаФормирования);
																																																					
	ИмяФайлаЛога = "";
	Если НЕ ПустаяСтрока(НастройкиВыгрузки.КаталогЛога) Тогда
		
		лКаталогЛога = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, НастройкиВыгрузки.КаталогЛога + "\reports"); 
			
		Если НЕ СуществуетФайл(лКаталогЛога) тогда
			СоздатьКаталог(лКаталогЛога);	
		КонецЕсли;
			
		ИмяФайлаЛога = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, лКаталогЛога + "\") + "Exchange_" + "(" + НастройкиВыгрузки.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt";
		
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	
	Если НЕ ДобавлениеНастроекПодключения(ОсновныеПараметры) тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ПолучитьТокенДляСоединения(ОсновныеПараметры) тогда
		СообщитьПодробно("Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат Результат;
	КонецЕсли;
	
	ОсновныеПараметры.НастройкиПодключения = ПолучитьНастройкиПодключения(ОсновныеПараметры);
	
	Соединение = УстановитьСоединениеССервером(ОсновныеПараметры.НастройкиПодключения);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("NAME"					, ПолучитьНазваниеКоннектора()); //в большинстве случаев подойдет
	СтруктураДанных.Вставить("ORIGINATOR_ID"		, ОсновныеПараметры.ИдБазы1С);
	СтруктураДанных.Вставить("EXTERNAL_SERVER_HOST"	, Константы.Б_АдресНаВебСервере.Получить());
	СтруктураДанных.Вставить("TYPE_ID"				, "ONE_C");
	
	
	ТелоHTTPЗапроса = "";	
	РазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса,"fields");
	
	СтруктураОтвета = ОтправкаДанныхНаПортал(ОсновныеПараметры, Соединение, "/rest/crm.externalchannel.connector.register", ТелоHTTPЗапроса, Истина); 
	
	Если СтруктураОтвета = Ложь тогда
		Результат = Ложь;
	Иначе
		
		Если СтруктураОтвета.Свойство("result") = Истина тогда
	        Константы.Б_ИдентификаторКанала.Установить(СтруктураОтвета.result.result);
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьНастройкуНаПортале(НастройкиВыгрузки, ИдБазы = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(НастройкиВыгрузки) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОсновныеПараметры = Новый Структура;
	ОсновныеПараметры.Вставить("Ссылка", НастройкиВыгрузки);
	
	ОсновныеПараметры.Вставить("ИдБазы1С", ?(ИдБазы = "", ПолучитьИдБазы1С(), ИдБазы));
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ОсновныеПараметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДатаФормирования = ТекущаяДата();
	ОсновныеПараметры.Вставить("ДатаФормирования", ДатаФормирования);
																																																					
	ИмяФайлаЛога = "";
	Если НЕ ПустаяСтрока(НастройкиВыгрузки.КаталогЛога) Тогда
		
		лКаталогЛога = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, НастройкиВыгрузки.КаталогЛога + "\reports"); 
			
		Если НЕ СуществуетФайл(лКаталогЛога) тогда
			СоздатьКаталог(лКаталогЛога);	
		КонецЕсли;
			
		ИмяФайлаЛога = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, лКаталогЛога + "\") + "Exchange_" + "(" + НастройкиВыгрузки.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt";
		
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	
	Если НЕ ДобавлениеНастроекПодключения(ОсновныеПараметры) тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ПолучитьТокенДляСоединения(ОсновныеПараметры) тогда
		СообщитьПодробно("Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат Результат;
	КонецЕсли;
	
	ОсновныеПараметры.НастройкиПодключения = ПолучитьНастройкиПодключения(ОсновныеПараметры);
	
	Соединение = УстановитьСоединениеССервером(ОсновныеПараметры.НастройкиПодключения);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("TYPE_ID"		, "ONE_C");
	СтруктураДанных.Вставить("ORIGINATOR_ID", ОсновныеПараметры.ИдБазы1С);
	
	ТелоHTTPЗапроса = "";	
	РазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса,"fields");
	
	СтруктураОтвета = ОтправкаДанныхНаПортал(ОсновныеПараметры, Соединение, "/rest/crm.externalchannel.connector.unregister", ТелоHTTPЗапроса, Ложь); 
	
	Если СтруктураОтвета = Ложь тогда
		Результат = Ложь;
	Иначе
		
		Если СтруктураОтвета.Свойство("result") = Истина тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьКоннектор(ИдентификаторКоннектора, ИдентификаторКанала) Экспорт
	
	Успешно = Ложь;
	
	НастройкиВыгрузки = ПолучитьНастройкиПоУмолчанию();
	
	Если НЕ ЗначениеЗаполнено(НастройкиВыгрузки) тогда
		Сообщить("Не найдена используемая настройка выгрузки. Удалить настройки нельзя");
		Возврат;
	КонецЕсли;
	
	Успешно = УдалитьНастройкуНаПортале(НастройкиВыгрузки, ИдентификаторКоннектора);
	
	Если Успешно тогда
		Константы.Б_ИдентификаторКанала.Установить("");
	Иначе
		Сообщить("Не удалось удалить коннектор на портале. Удалить настройки нельзя.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаписатьКоннектор() Экспорт
		
	лИдентификатор = Константы.Б_ИдентификаторКоннектора.Получить();
	
	Успешно = Истина;
	
	НастройкиВыгрузки = ПолучитьНастройкиПоУмолчанию();
	
	Если НЕ ЗначениеЗаполнено(НастройкиВыгрузки) тогда
		Сообщить("Не найдена используемая настройка выгрузки. Удалить настройки нельзя");
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьКоннекторыНаПортале(НастройкиВыгрузки);
	
	Если СтруктураДанных.Свойство("result") = Истина тогда
		
		Если ТипЗнч(СтруктураДанных.result) = Тип("Массив") тогда
			
			Для Каждого ТекСтрока из СтруктураДанных.result Цикл
				
				Если  ТекСтрока.ORIGINATOR_ID = лИдентификатор тогда
		 			Б_Битрикс24_1С_Сервер.УдалитьКоннектор(ТекСтрока.ORIGINATOR_ID, ТекСтрока.CHANNEL_ID);
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(СтруктураДанных.result) = Тип("Структура") тогда
			
			Если  СтруктураДанных.ORIGINATOR_ID = лИдентификатор тогда
	 			Б_Битрикс24_1С_Сервер.УдалитьКоннектор(СтруктураДанных.ORIGINATOR_ID, СтруктураДанных.CHANNEL_ID);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Успешно = ОтправитьНастройкуНаПортал(НастройкиВыгрузки);

	Если НЕ Успешно тогда
		Сообщить("Не удалось зарегистрировать настройку");
		Отказ = истина;	
	КонецЕсли;

КонецПроцедуры

Функция ОтправкаДанныхНаПортал(ПараметрыОбмена, Соединение, АдресРесурса, ТелоHTTPЗапроса, ВнешнийСервис, ИдКанала = "")
	
	лПараметрВременногоТокена 	= "q=1&auth="		+ ПараметрыОбмена.НастройкиПодключенияАвторизации.ВременныйТокен;
	лПараметрКлиентИд			= ?(ЗначениеЗаполнено(ИдКанала), "&params[CHANNEL_ID]="+ ИдКанала, "");	
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	
	ТелоHTTPЗапроса = лПараметрВременногоТокена + лПараметрКлиентИд + ТелоHTTPЗапроса;
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type"		,"application/x-www-form-urlencoded; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Content-Length"		, Формат(СтрДлина(ТелоHTTPЗапроса), "ЧГ=0"));
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоHTTPЗапроса);
	
	Попытка   
   
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
		
		лОтветСтрокой 		= Ответ.ПолучитьТелоКакСтроку();
		
		лСтруктураОтвета 	= РазобратьОтветСервера(лОтветСтрокой);
		
	Исключение
		СообщитьПодробно(ИнформацияОбОшибке().Описание, ПараметрыОбмена);
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		Если ВнешнийСервис тогда
			
			Если лСтруктураОтвета.Свойство("result") <> Ложь тогда

				Если лСтруктураОтвета.result.Свойство("added") <> Ложь тогда
					СообщитьПодробно("Добавлено: " + Строка(лСтруктураОтвета.result.added) + " элементов." , ПараметрыОбмена);
				КонецЕсли; 

				Если лСтруктураОтвета.result.Свойство("updated") <> Ложь тогда
					СообщитьПодробно("Обновлено: " + Строка(лСтруктураОтвета.result.updated) + " элементов." , ПараметрыОбмена);
				КонецЕсли;
				
				Если лСтруктураОтвета.result.Свойство("skipped") <> Ложь тогда
					СообщитьПодробно("Пропущено: " + Строка(лСтруктураОтвета.result.skipped) + " элементов." , ПараметрыОбмена);
				КонецЕсли;
				
				Если лСтруктураОтвета.result.Свойство("result_error") <> Ложь тогда
					Если ЗначениеЗаполнено(лСтруктураОтвета.result.result_error) тогда
						
						СообщитьПодробно("Ошибки: " + Строка(лСтруктураОтвета.result.result_error) , ПараметрыОбмена);
						СообщитьПодробно("Отправленные данные начало:________________________________________________________" 	, ПараметрыОбмена);
						СообщитьПодробно(РаскодироватьСтроку(ТелоHTTPЗапроса,СпособКодированияСтроки.URLВКодировкеURL)			, ПараметрыОбмена);
						СообщитьПодробно("Отправленные данные конец:________________________________________________________" 	, ПараметрыОбмена);
					
						Возврат Ложь;
					
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если лСтруктураОтвета.Свойство("error") <> Ложь тогда
				
				Если ЗначениеЗаполнено(лСтруктураОтвета.error) тогда
					
					СообщитьПодробно("Ошибки: " + ПолучитьОшибкуПоКоду(лСтруктураОтвета.error) , ПараметрыОбмена);
					СообщитьПодробно(лСтруктураОтвета.error_description , ПараметрыОбмена);
					
					Возврат Ложь;
				
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если Найти(лОтветСтрокой,"error") > 0 тогда
				
				СообщитьПодробно("Ошибки при отправлении на портал: " + лОтветСтрокой , ПараметрыОбмена);
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Если Найти(лОтветСтрокой,"error") > 0 тогда
				
				Если СтрНайти(лОтветСтрокой, "ERROR_METHOD_NOT_FOUND")>0 тогда
					СообщитьПодробно("Для текущей версии 1С трекера требуется установить обновления на портал." , ПараметрыОбмена);
				КонецЕсли;
				
				СообщитьПодробно("Ошибки при отправлении на портал: " + лОтветСтрокой , ПараметрыОбмена);
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		СообщитьПодробно(Ответ.ПолучитьТелоКакСтроку(), ПараметрыОбмена);
		СообщитьПодробно("Отправленные данные начало:________________________________________________________" 	, ПараметрыОбмена);
		СообщитьПодробно(РаскодироватьСтроку(ТелоHTTPЗапроса,СпособКодированияСтроки.URLВКодировкеURL)			, ПараметрыОбмена);
		СообщитьПодробно("Отправленные данные конец:________________________________________________________" 	, ПараметрыОбмена);
		
		ЗаписатьНовыйТокен(ПараметрыОбмена.Ссылка, ПараметрыОбмена.НастройкиПодключенияАвторизации.НовыйТокен);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗаписатьНовыйТокен(ПараметрыОбмена.Ссылка, ПараметрыОбмена.НастройкиПодключенияАвторизации.НовыйТокен);
	
	Возврат лСтруктураОтвета;
	
КонецФункции  


Функция ПолучитьОшибкуПоКоду(КодОшибки)
	
	Результат = "";	
	
	Если КодОшибки = "ERROR_IMPORT_BATCH" тогда
		Результат = "В запросе отсутствует пакет данных";	
	ИначеЕсли КодОшибки = "ERROR_CONNECTOR_NOT_FOUND" тогда
		Результат = "Коннектор не зарегистрирован";	
	ИначеЕсли КодОшибки = "ERROR_CONNECTOR_CREATE" тогда
		Результат = "Ошибка создания коннектора";	
	ИначеЕсли КодОшибки = "ERROR_CONNECTOR_REGISTRATION" тогда
		Результат = "Ошибки в переданных данных коннектора";	
	ИначеЕсли КодОшибки = "ERROR_CONNECTOR_INVALID" тогда
		Результат = "Ошибка загрузки коннектора";	
	ИначеЕсли КодОшибки = "ERROR_PRESET_NOT_FOUND" тогда
		Результат = "Пресет не найден";	
	Иначе
		Результат = КодОшибки;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьНовыйТокен(НастройкаВыгрузкиБ24, НовыйТокен)
	
	НоваяЗапись = РегистрыСведений.Б_Битрикс24_1С_ТокеныОбменаСБ24.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период 				= ТекущаяДата();
	НоваяЗапись.НастройкаВыгрузкиБ24= НастройкаВыгрузкиБ24;
	НоваяЗапись.Адрес 				= "";
	НоваяЗапись.Токен 				= НовыйТокен;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииПоОбщейВыгрузке

// Функция - формирует настройки узла обмена, которые используются на протяжении всего обмена данными
//
// Параметры:
//  УзелОбмена									 - 	 Узел обмена, из которого собираем настройки 
//  Параметры									 - 	 Структура с будущими настройками 
//  ПринудительнаяПолноеОбновлениеДанныхТовара	 - 	 Прзнак того, что нужно принудительно выгружать все картинки 
Функция ДобавитьОсновныеНастройкиВПараметры(УзелОбмена, Параметры) Экспорт
	
	//добавляем реквизиты узла обмена
	Для каждого ТекРеквизит из УзелОбмена.Метаданные().Реквизиты Цикл
		Параметры.Вставить(ТекРеквизит.Имя, УзелОбмена[ТекРеквизит.Имя]);
	КонецЦикла;
	
	Параметры.Вставить("ИдБазы1С", ПолучитьИдБазы1С());
	Параметры.Вставить("АдресНаВебСервере", Константы.Б_АдресНаВебСервере.Получить());
	
	Параметры.Вставить("ИдБазы1С", ПолучитьИдБазы1С());
	Параметры.Вставить("АдресНаВебСервере", Константы.Б_АдресНаВебСервере.Получить());
	
	//общие настройки
	ГСЧ = Новый ГенераторСлучайныхЧисел();

	Параметры.Вставить("ФорматСуммы"		, "ЧЦ=18; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=");
	Параметры.Вставить("ФорматКоличества"	, "ЧРД=.; ЧН=; ЧГ=");
	
	Параметры.Вставить("Ссылка"				, УзелОбмена);
	Параметры.Вставить("ПрефиксВерсии"		, Строка(Формат(ТекущаяДата()-НачалоДня(ТекущаяДата()), "ЧГ=0"))); 
	
	Параметры.Вставить("СтруктураСхемКомпоновки"	, ПланыОбмена.Б_Битрикс24_1С.ПолучитьСтруктуруСхемКомпоновки());
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	Параметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДатаФормирования = ТекущаяДата();
	Параметры.Вставить("ДатаФормирования", ДатаФормирования);
																																																					
	Параметры.Вставить("ПолнаяВыгрузка"	, (НЕ Параметры.ВыгружатьТолькоИзменения ИЛИ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно));
	
	ИмяФайлаЛога = "";
	Если НЕ ПустаяСтрока(Параметры.КаталогЛога) Тогда
		
		лКаталогЛога = ПолучитьПутьДляПлатформы(Параметры.ПлатформаWindows, Параметры.КаталогЛога + "\reports"); 
			
		Если НЕ СуществуетФайл(лКаталогЛога) тогда
			СоздатьКаталог(лКаталогЛога);	
		КонецЕсли;
			
		ИмяФайлаЛога = ПолучитьПутьДляПлатформы(Параметры.ПлатформаWindows, лКаталогЛога + "\") + "Exchange_" + "(" + УзелОбмена.Наименование +  ")" +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt";
		
	КонецЕсли;
	
	Параметры.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	
	лИдентификаторканала = Константы.Б_ИдентификаторКанала.Получить();
	
	Если ЗначениеЗаполнено(лИдентификаторканала) тогда
		Параметры.Вставить("CHANNEL_ID", лИдентификаторканала);
	Иначе
		СообщитьПодробно("Регистрация настроек выгрузки", Параметры);	
		
		Успешно = ОтправитьНастройкуНаПортал(УзелОбмена);
		
		Если Успешно тогда
			
			СообщитьПодробно("Регистрация настроек выгрузки", Параметры);	
			
			лИдентификаторканала = константы.Б_ИдентификаторКанала.Получить();
			
			Параметры.Вставить("CHANNEL_ID", лИдентификаторканала);
			
		Иначе
			
			СообщитьПодробно("Не удалось зарегистрировать настройки выгрузки. Выгрузка данных невозможна", Параметры);	
			
			Параметры.Вставить("CHANNEL_ID", "");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
// Функция - формирует настройки узла обмена, которые используются на протяжении всего обмена данными
//
// Параметры:
//  УзелОбмена									 - 	 Узел обмена, из которого собираем настройки 
//  Параметры									 - 	 Структура с будущими настройками 
//  ПринудительнаяПолноеОбновлениеДанныхТовара	 - 	 Прзнак того, что нужно принудительно выгружать все картинки 
Функция ДобавитьНастройкиОбменаВПараметры(УзелОбмена, Параметры) Экспорт
	
	///////////////////////////////////////
	// ПАРАМЕТРЫ ОБЪЕКТОВ               //
	/////////////////////////////////////
	
	СтрСохраненныхНастроек = Параметры.СохраненныеНастройки.Получить();	
	
	ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Контрагенты);
	ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Контакты);
	ДобавитьСтруктурыНастроекВПараметры(Параметры, СтрСохраненныхНастроек.Документы);
	
	//проверка корректности значений параметров объектов
	Параметры.КоличествоДокументовВПакете 			= ?(Параметры.КоличествоДокументовВПакете 			= 0, 1, Параметры.КоличествоДокументовВПакете);
	Параметры.КоличествоКонтрагентовВПакете 		= ?(Параметры.КоличествоКонтрагентовВПакете 		= 0, 1, Параметры.КоличествоКонтрагентовВПакете);
	
	Возврат Истина;
	
КонецФункции

// Процедура - добавляет в настройки узла обмена ключи и значения указанной структуры настроек 
//
// Параметры:
//  Параметры			 - 	 Настройки узла обмена  
//  СтруктураНастроек	 - 	 Структура настроек, которую нужно добавить в настройки узла обмена  
Процедура ДобавитьСтруктурыНастроекВПараметры(Параметры, СтруктураНастроек)
	
	Для Каждого ТекКлюч из СтруктураНастроек Цикл
		
		Если НЕ Параметры.Свойство(ТекКлюч.Ключ) тогда
			Параметры.Вставить(ТекКлюч.Ключ, ТекКлюч.Значение);	
		КонецЕсли;
  	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВыполнениеФоновыхЗаданий(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена = ПланыОбмена.Б_Битрикс24_1С.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыОбмена.ИспользоватьРегламентныеЗадания Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьВыгрузку(ПараметрыОбмена);
	
КонецПроцедуры

Процедура ВыполнитьВыгрузку(Настройка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры = Новый Структура;
	НастройкиУспешноДобавлены = ДобавитьОсновныеНастройкиВПараметры(Настройка, ОсновныеПараметры);
	
	Если НЕ НастройкиУспешноДобавлены тогда
		Возврат;
	КонецЕсли;
	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	СообщитьПодробно("Начало выгрузки узла " + Строка(Настройка), ОсновныеПараметры, Истина, Истина);	
	
	//Проверяем, необходимо ли сделать обновление базы.
	
	Если НЕ ПроверкаОбновленияДанныхМодуляОбменаССайтом(ОсновныеПараметры) тогда
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиУспешноДобавлены = ДобавитьНастройкиОбменаВПараметры(Настройка, ОсновныеПараметры);
	
	Если НЕ НастройкиУспешноДобавлены тогда
		Возврат;		
	КонецЕсли;
	
	Если НЕ ДобавлениеНастроекПодключения(ОсновныеПараметры) тогда
		Возврат;
	КонецЕсли;
	
	//Обмен
	КаталогВыгрузки = "";
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		КаталогВыгрузки = КаталогВременныхФайлов() + Строка(ГСЧ.СлучайноеЧисло()) + "\";
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata\";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки + СокрЛП(ОсновныеПараметры.Ссылка.Код);
	КаталогНаДиске = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, КаталогНаДиске);
	
	Попытка
		СоздатьКаталог(КаталогНаДиске);
	Исключение
		
		СообщитьПодробно(ОписаниеОшибки(), ОсновныеПараметры);	
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ КаталогОчищен(КаталогНаДиске, ОсновныеПараметры) Тогда
		
		СообщитьПодробно("Не удалось очистить каталог: " + КаталогНаДиске + ". Продолжение выгрузки невозможно." , ОсновныеПараметры);	
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("КаталогНаДиске"	, КаталогНаДиске);
	
	СообщитьПодробно("Очистка регистра пакетов обмена.", ОсновныеПараметры);	
	
	НаборЗаписей = РегистрыСведений.Б_Битрикс24_1С_ПакетныйОбмен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаОбмена.Установить(ОсновныеПараметры.Ссылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
	СообщитьПодробно("Очистка регистра пакетов обмена завершена.", ОсновныеПараметры);	
	
	Если ОсновныеПараметры.ВыгрузкаКонтрагентов Тогда
		
		СообщитьПодробно("Выгрузка информации по контрагентам.", ОсновныеПараметры);	
			
		ФормированиеПакетовДанных(ОсновныеПараметры, "Контрагенты");
		ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Контрагенты");
			
		СообщитьПодробно("Выгрузка информации по контрагентам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаКонтактов Тогда
		
		СообщитьПодробно("Выгрузка информации по контактам.", ОсновныеПараметры);	
			
		ФормированиеПакетовДанных(ОсновныеПараметры, "Контакты");
		ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Контакты");
			
		СообщитьПодробно("Выгрузка информации по контактам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыгрузкаДокументов Тогда
			
		СообщитьПодробно("Выгрузка информации по документам.", ОсновныеПараметры);	
			
		ФормированиеПакетовДанных(ОсновныеПараметры, "Документы");
		ФормированиеФайловXMLОбменаДанных(ОсновныеПараметры, "Документы");
			
		СообщитьПодробно("Выгрузка информации по документам ЗАВЕРШЕНА", ОсновныеПараметры);	
			
	КонецЕсли;
	
	Если ОсновныеПараметры.ВыполнятьПолнуюВыгрузкуПринудительно тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Б_Битрикс24_1С_ПакетныйОбмен.Объект
		|ИЗ
		|	РегистрСведений.Б_Битрикс24_1С_ПакетныйОбмен КАК Б_Битрикс24_1С_ПакетныйОбмен
		|ГДЕ
		|	Б_Битрикс24_1С_ПакетныйОбмен.НастройкаОбмена = &Узел";
		Запрос.УстановитьПараметр("Узел", ОсновныеПараметры.Ссылка);
		ВремТзн = Запрос.Выполнить().Выгрузить();			   
		
		Если ВремТзн.Количество()=0 Тогда
			
			УзелОбъект = Настройка.ПолучитьОбъект();
			УзелОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = Ложь;
			УзелОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	СообщитьПодробно("Завершение выгрузки " + Строка(Настройка), ОсновныеПараметры, Истина, Истина);	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	ОтображениеСостояния("")	
	
КонецПроцедуры

Процедура ВыгрузитьОрганизации(Настройка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры = Новый Структура;
	НастройкиУспешноДобавлены = ДобавитьОсновныеНастройкиВПараметры(Настройка, ОсновныеПараметры);
	
	Если НЕ НастройкиУспешноДобавлены тогда
		Возврат;
	КонецЕсли;
	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	СообщитьПодробно("Начало выгрузки организаций " + Строка(Настройка), ОсновныеПараметры, Истина, Истина);	
	
	//Проверяем, необходимо ли сделать обновление базы.
	
	Если НЕ ПроверкаОбновленияДанныхМодуляОбменаССайтом(ОсновныеПараметры) тогда
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиУспешноДобавлены = ДобавитьНастройкиОбменаВПараметры(Настройка, ОсновныеПараметры);
	
	Если НЕ НастройкиУспешноДобавлены тогда
		Возврат;		
	КонецЕсли;
	
	Если НЕ ДобавлениеНастроекПодключения(ОсновныеПараметры) тогда
		Возврат;
	КонецЕсли;
	
	//Обмен
	КаталогВыгрузки = "";
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		КаталогВыгрузки = КаталогВременныхФайлов() + Строка(ГСЧ.СлучайноеЧисло()) + "\";
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata\";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки + СокрЛП(ОсновныеПараметры.Ссылка.Код);
	КаталогНаДиске = ПолучитьПутьДляПлатформы(ОсновныеПараметры.ПлатформаWindows, КаталогНаДиске);
	
	Попытка
		СоздатьКаталог(КаталогНаДиске);
	Исключение
		
		СообщитьПодробно(ОписаниеОшибки(), ОсновныеПараметры);	
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ КаталогОчищен(КаталогНаДиске, ОсновныеПараметры) Тогда
		
		СообщитьПодробно("Не удалось очистить каталог: " + КаталогНаДиске + ". Продолжение выгрузки невозможно." , ОсновныеПараметры);	
		
		Возврат;
		
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("КаталогНаДиске"	, КаталогНаДиске);
	
	
	СформироватьДанныеООрганизациях(ОсновныеПараметры);	
	
	
	СообщитьПодробно("Завершение выгрузки организаций" + Строка(Настройка), ОсновныеПараметры, Истина, Истина);	
	СообщитьПодробно("______________________________________________________________________", ОсновныеПараметры);	
	ОтображениеСостояния("")	
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииФормированияПакетов

			///////////////////////////////////////////////////////////////////
			//			ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЙ ПАКЕТОВ            //
			/////////////////////////////////////////////////////////////////

			
// Процедура формирует пакеты данных, указанного типа
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  Операция		 - 	 Тип операции
Процедура ФормированиеПакетовДанных(ПараметрыОбмена, Операция) Экспорт
				
	Если Операция = "Контрагенты" тогда
		
		СообщитьПодробно("Формирование пакетов для контрагентов.", ПараметрыОбмена);	
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Контрагенты, ПараметрыОбмена.НастройкиКомпоновкиДанныхКонтрагентов);
		
		ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, Операция, ПараметрыОбмена.КоличествоКонтрагентовВПакете);
		
		СообщитьПодробно("Формирование пакетов для контрагентов завершено.", ПараметрыОбмена);	
		
	ИначеЕсли Операция = "Контакты" тогда
		
		СообщитьПодробно("Формирование пакетов для контрактов.", ПараметрыОбмена);	
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Контакты, ПараметрыОбмена.НастройкиКомпоновкиДанныхКонтрагентов);
		
		ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, Операция, ПараметрыОбмена.КоличествоКонтрагентовВПакете);
		
		СообщитьПодробно("Формирование пакетов для контрактов завершено.", ПараметрыОбмена);	
		
	//Заказы 
	ИначеЕсли Операция = "Документы" тогда
		
		СообщитьПодробно("Формирование пакетов для документов", ПараметрыОбмена);	
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Документы, ПараметрыОбмена.НастройкиКомпоновкиДанныхДокументов);
		
		ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, Операция, ПараметрыОбмена.КоличествоДокументовВПакете);
		
		СообщитьПодробно("Формирование пакетов для документов завершено", ПараметрыОбмена);	
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает запрос для выгрузки пакетов данных
//
// Параметры:
//  ПараметрыОбмена							 - 	 Настройки узла обмена 
//  Операция								 - 	 Признак, для каких данных нужно формировать запрос 
//  СхемаВыгрузки							 - 	 Схема компоновки данных выгрузки данных
//  НастройкиКомпоновщикаИзНастройкиОбмена	 - 	 Настройки отборов компоновки данных
//  ПолнаяВыгрузка							 - 	 Признак оповещающий, что это полная выгрузка данных 
//  СтрокаКаталога							 - 	 Информация о инфоблоке, куда должны выгружаться данные(товары, свойства) 
// Возвращаемое значение:
//  Запрос для получения пакетов данных  
Функция ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, СхемаВыгрузки, НастройкиКомпоновщикаИзНастройкиОбмена)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузки)); 
	Если ЗначениеЗаполнено(НастройкиКомпоновщикаИзНастройкиОбмена) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщикаИзНастройкиОбмена);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузки.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПолнаяВыгрузка");
	ПараметрСКД.Значение = ПараметрыОбмена.ПолнаяВыгрузка;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Узел");
	ПараметрСКД.Значение = ПараметрыОбмена.Ссылка;
	ПараметрСКД.Использование = Истина;
	
	Если Операция = "Контрагенты" тогда
		ПараметрСКД 				= КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьКонтрагентов");
		ПараметрСКД.Значение 		= ПараметрыОбмена.ВыгрузкаКонтрагентов;
		ПараметрСКД.Использование 	= Истина;
	ИначеЕсли Операция = "Контакты" тогда
		ПараметрСКД 				= КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьКонтакты");
		ПараметрСКД.Значение 		= ПараметрыОбмена.ВыгрузкаКонтактов;
		ПараметрСКД.Использование 	= Истина;
	ИначеЕсли Операция = "Документы" тогда
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьДокументы");
		ПараметрСКД.Значение 		= ПараметрыОбмена.ВыгрузкаДокументов;
		ПараметрСКД.Использование 	= Истина;
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТочкаАктуальности");
		ПараметрСКД.Значение = ПараметрыОбмена.ТочкаАктуальности;
		ПараметрСКД.Использование = Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Если Операция = "Контрагенты" ИЛИ Операция = "Контакты" тогда
		Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	Иначе 
		
		ТекстЗапросаОбщий = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;

		ПервыйДокумент = Истина;
		
		Для каждого Документ из ПараметрыОбмена.СписокДокументов Цикл
			Если ЗначениеЗаполнено(Документ.Значение) тогда
				Если ПервыйДокумент тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапросаОбщий, "РасходнаяНакладная", Документ.Значение);
				Иначе
					ТекстЗапроса = ТекстЗапроса + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					| " + СтрЗаменить(СтрЗаменить(ТекстЗапросаОбщий, "РАЗРЕШЕННЫЕ", ""), "РасходнаяНакладная", Документ.Значение);
				КонецЕсли;
			КонецЕсли;
				
			ПервыйДокумент = Ложь;
			
		КонецЦикла;
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос; 	
	
КонецФункции

// Процедура - загружает таблицы данных в регистр сведений, хранящий пакеты данных
//
// Параметры:
//  ТаблицаОбъектовОбменаВыгрузки	 - 	 Таблица значений с данными, которые нужно выгрузить на сайт 
//  ПараметрыОбмена					 - 	 Настройки узла обмена 
//  ИдентификаторКаталога			 - 	 Идентификатор каталога(инфоблока) 
//  КоличествоДанныхВПакете			 - 	 Количество данных в одном пакете 
Процедура ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, Операция, КоличествоДанныхВПакете)
	
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Пакет");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Каталог");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("НастройкаОбмена");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Операция");
	
	РазбивкаТаблицыДанныхНаПакеты(ТаблицаОбъектовОбменаВыгрузки, КоличествоДанныхВПакете, Операция, ПараметрыОбмена);
	
	НаборЗаписей = РегистрыСведений.Б_Битрикс24_1С_ПакетныйОбмен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаОбмена.установить(ПараметрыОбмена.Ссылка);
	НаборЗаписей.Отбор.Операция.установить(Операция);
	НаборЗаписей.Загрузить(ТаблицаОбъектовОбменаВыгрузки);
	НаборЗаписей.Записать();             
	
КонецПроцедуры

// Процедура - разбивает данные таблицы значений на пакеты данных
//
// Параметры:
//  Таблица				 - 	 Таблица данных с выгружаемыми данными 
//  КоличествоВПакете	 - 	 Количество товаров в одном пакете 
//  Узел				 - 	 Узел настроек обмена 
//  Каталог				 - 	 Идентификатор каталога(инфоблока), в который будет произведена выгрузка данных 
Процедура РазбивкаТаблицыДанныхНаПакеты(Таблица, КоличествоВПакете, Операция, Узел)
	
	мОбъектыПакетов = Новый Массив;
	мОбъектыПакетов.Добавить("Контрагент");
	мОбъектыПакетов.Добавить("Контакт");
	мОбъектыПакетов.Добавить("Документ");
	
	Итератор 	= 0;
	Пакет 		= 1;
	
	Для каждого ТекСтр из Таблица Цикл
		
		Если  мОбъектыПакетов.Найти(ТекСтр.ТипОбъекта) = Неопределено тогда
			ТекСтр.Пакет 			= 0;
			ТекСтр.НастройкаОбмена 	= Узел.Ссылка;
			ТекСтр.Операция 		= Операция;
			
		Иначе
					
			Итератор = Итератор + 1;

			Если Итератор > КоличествоВПакете тогда
				Пакет = Пакет + 1;
				Итератор = 1;
			КонецЕсли;
			
			ТекСтр.НастройкаОбмена 	= Узел.Ссылка;
			ТекСтр.Пакет 			= Пакет;
			ТекСтр.Операция 		= Операция;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область  ПроцедурыИФункцииФормированияДанных


			///////////////////////////////////////////////////////////////////
			//			       ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА                   //
			/////////////////////////////////////////////////////////////////
			

// Функция - возвращает таблицу пакетов данных по заданному узлу обмена 
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  Каталог			 - 	 Идентификатор выгружаемого каталога 
// Возвращаемое значение:
//   Таблица значений с данными пакетов 
Функция ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, Операция)
	
	Запрос = Новый Запрос;    	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б_Битрикс24_1С_ПакетныйОбмен.Объект,
	|	Б_Битрикс24_1С_ПакетныйОбмен.Пакет КАК Пакет,
	|	Б_Битрикс24_1С_ПакетныйОбмен.Статус
	|ИЗ
	|	РегистрСведений.Б_Битрикс24_1С_ПакетныйОбмен КАК Б_Битрикс24_1С_ПакетныйОбмен
	|ГДЕ
	|	Б_Битрикс24_1С_ПакетныйОбмен.НастройкаОбмена = &Обмен
	|	И Б_Битрикс24_1С_ПакетныйОбмен.Операция = &Операция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пакет";
	Запрос.УстановитьПараметр("Обмен", ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	тзнДанных = Запрос.Выполнить().Выгрузить();
	
	Возврат тзнДанных; 	
	
КонецФункции

// Процедура - Формирует файлы XML по ранее сфоримрованным пакетам данных. Файлы формируются в зависимости от типа операции
//
// Параметры:
//  ПараметрыОбмена	 - 	Настройки узла обмена  
//  Операция		 - 	Тип операции     
//  ЭтоДозагрузка	 - 	Если истина, то сначало выполянется дозагрузка неотправленных данных     
Процедура ФормированиеФайловXMLОбменаДанных(ПараметрыОбмена, Операция, ЭтоДозагрузка = Ложь) Экспорт
	
	Если Операция = "Контрагенты" тогда
		
		СообщитьПодробно("Выгрузка пакетов контрагентов.", ПараметрыОбмена);
		
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Контрагенты");
		
		ВыгрузитьКонтрагентов(ПараметрыОбмена, МассивДанных, Операция);
		СообщитьПодробно("Выгрузка пакетов контрагентов завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Контакты" тогда
		
		СообщитьПодробно("Выгрузка пакетов контактов.", ПараметрыОбмена);
		
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Контакты");
		
		ВыгрузитьКонтакты(ПараметрыОбмена, МассивДанных, Операция);
		СообщитьПодробно("Выгрузка пакетов контактов завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Документы" тогда
		
		СообщитьПодробно("Выгрузка пакетов документов.", ПараметрыОбмена);
		
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Документы");
		
		ВыгрузитьДокументы(ПараметрыОбмена, МассивДанных, Операция);
		СообщитьПодробно("Выгрузка пакетов документов завершена.", ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ВыгрузитьКонтрагентов(ПараметрыОбмена, МассивДанных, Операция)
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	
	Если КоличествоПакетов > 0 тогда
		
		МенеджерВременныхТаблицКонтрагентов = Новый МенеджерВременныхТаблиц;
		
		ОбщийЗапрос = Новый Запрос;
		ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		ОбщийЗапрос.УстановитьПараметр("МассивДанных",МассивДанных);
		
		ОбщийЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагент.Ссылка КАК Контрагент,
		|	Контрагент.Ссылка КАК Идентификатор
		|ПОМЕСТИТЬ ВремКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивДанных.Объект КАК Объект,
		|	МассивДанных.Пакет
		|ПОМЕСТИТЬ ВремМассивДанных
		|ИЗ
		|	&МассивДанных КАК МассивДанных
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВремМассивДанных.Объект КАК Объект,
		|	ВремМассивДанных.Объект КАК Контрагент,
		|	ВремМассивДанных.Пакет КАК Пакет,
		|	ВремКонтрагенты.Идентификатор КАК ИдентификаторКонтрагента,
		|	ВремКонтрагенты.Контрагент.ВерсияДанных КАК ВерсияКонтрагента,
		|	ВремКонтрагенты.Контрагент.ПометкаУдаления КАК ПометкаУдаленияКонтрагента,
		|	"""" КАК КодПокупателя,
		|	ВремКонтрагенты.Контрагент.Наименование КАК НаименованиеКонтрагента,
		|	ВремКонтрагенты.Контрагент.ИНН КАК ИННКонтрагента,
		|	ВремКонтрагенты.Контрагент.КодПоОКПО КАК КодПоОКПОКонтрагента,
		|	"""" КАК КомментарийКонтрагента,
		|	ВремКонтрагенты.Контрагент.КПП КАК КППКонтрагента,
		|	ВремКонтрагенты.Контрагент.НаименованиеПолное КАК НаименованиеПолноеКонтрагента
		|ПОМЕСТИТЬ МассивДанныхСПакетами
		|ИЗ
		|	ВремМассивДанных КАК ВремМассивДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремКонтрагенты КАК ВремКонтрагенты
		|		ПО (ВремКонтрагенты.Контрагент = ВремМассивДанных.Объект)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пакет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремКонтрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаКонтрагентов.НомерСчета,
		|	БанковскиеСчетаКонтрагентов.ВерсияДанных КАК Версия,
		|	БанковскиеСчетаКонтрагентов.Банк,
		|	БанковскиеСчетаКонтрагентов.Банк.Код КАК БИКБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.КоррСчет КАК КоррСчетБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.Адрес КАК АдресБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.Город КАК ГородБанка,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Код КАК БИКБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.КоррСчет КАК КоррСчетБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Город КАК ГородБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Адрес КАК АдресБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.Банк.Наименование КАК НаименованиеБанка,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Наименование КАК НаименованиеБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.Владелец КАК Владелец,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код КАК ВалютаКод,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Идентификатор,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Объект
		|ПОМЕСТИТЬ ВремБанковскиеСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Владелец В
		|			(ВЫБРАТЬ
		|				ВремМассивДанных.Объект
		|			ИЗ
		|				ВремМассивДанных)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПокупательКонтактнаяИнформация.Ссылка КАК Владелец,
		|	ПокупательКонтактнаяИнформация.Тип,
		|	ПокупательКонтактнаяИнформация.Вид,
		|	ПокупательКонтактнаяИнформация.Представление,
		|	ПокупательКонтактнаяИнформация.ЗначенияПолей,
		|	ПокупательКонтактнаяИнформация.Страна,
		|	ПокупательКонтактнаяИнформация.Регион,
		|	ПокупательКонтактнаяИнформация.Город,
		|	ПокупательКонтактнаяИнформация.АдресЭП,
		|	ПокупательКонтактнаяИнформация.ДоменноеИмяСервера,
		|	ПокупательКонтактнаяИнформация.НомерТелефона,
		|	ПокупательКонтактнаяИнформация.НомерТелефонаБезКодов
		|ПОМЕСТИТЬ ВремКонтактнаяИнформация
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ПокупательКонтактнаяИнформация
		|ГДЕ
		|	ПокупательКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВремМассивДанных.Объект
		|			ИЗ
		|				ВремМассивДанных)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремМассивДанных";
		
		ОбщийЗапрос.Выполнить();
		
	КонецЕсли;
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Итератор = 0;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	МассивДанныхСПакетами КАК МассивДанныхСПакетами
		|ГДЕ
		|	МассивДанныхСПакетами.Пакет В(&Пакет)";
		Запрос.УстановитьПараметр("Пакет", Пакет);
		МассивСтрок = Запрос.Выполнить().Выгрузить();
		
		Если МассивСтрок.Количество() > 0 тогда
			
			СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " информации о контрагентах", ПараметрыОбмена);
			
			ВыгрузкаКомпанийУпешна = Ложь;
			
			ВыгрузитьПакетКонтрагентов(ПараметрыОбмена, МенеджерВременныхТаблицКонтрагентов, Операция, Пакет, МассивСтрок, ВыгрузкаКомпанийУпешна);
			
			СообщитьПодробно("Завершена выгрузка пакета " + Строка(Пакет) + " информации о контрагентах", ПараметрыОбмена);
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПакетов > 0 тогда
		МенеджерВременныхТаблицКонтрагентов.Закрыть();
	КонецЕсли;

КонецПроцедуры 

Процедура ВыгрузитьПакетКонтрагентов(ПараметрыОбмена, МенеджерВременныхТаблицКонтрагентов, Операция, Пакет, МассивСтрок, ВыгрузкаКомпанийУпешна)
	
	ТелоHTTPЗапроса = "";
	
	Если НЕ ПолучитьТокенДляСоединения(ПараметрыОбмена) тогда
		СообщитьПодробно("Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена.НастройкиПодключения = ПолучитьНастройкиПодключения(ПараметрыОбмена);
	
	Соединение = УстановитьСоединениеССервером(ПараметрыОбмена.НастройкиПодключения);

	СтруктураДанных = Новый Структура;
	
	Элементы =  Новый массив;
	Итератор = 0;
	
	Для каждого ТекЭлСпр из МассивСтрок Цикл 
		
		Итератор = Итератор + 1;
		
		Элементы.Добавить(СформироватьСтруктуруДанныхКонтрагента(ПараметрыОбмена, МенеджерВременныхТаблицКонтрагентов, Элементы, ТекЭлСпр));

	КонецЦикла;
	
	СтруктураДанных.Вставить("batch", Элементы);
	ТелоHTTPЗапроса= "";	
	РазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса,"");
	
	СтруктураОтвета = ОтправкаДанныхНаПортал(ПараметрыОбмена, Соединение, "/rest/crm.externalchannel.company", ТелоHTTPЗапроса, Истина,  ПараметрыОбмена.CHANNEL_ID); 
	
	Если СтруктураОтвета = Ложь тогда
		Успешно = Ложь;	
	Иначе
		Успешно = Истина;
	КонецЕсли;
	
	ВыгрузкаКомпанийУпешна = Успешно;

	УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, МассивСтрок);
	
	Если Успешно тогда
		СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контрагентов завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	Иначе
		СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контрагентов НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруДанныхКонтрагента(ПараметрыОбмена, МенеджерВременныхТаблицКонтрагентов, Элементы, ИнформацияОКонтрагенте, ВыгрузкаВДокументы = Ложь)
	    
	Группа 	= Новый Структура;
		Агент 	= Новый Структура;
		Поля 	= Новый Структура;
		
		Поля.Вставить("ORIGIN_VERSION", ПолучитьВерсиюКонтрагента(ПараметрыОбмена, МенеджерВременныхТаблицКонтрагентов, ИнформацияОКонтрагенте.Контрагент, ИнформацияОКонтрагенте.Контрагент.ВерсияДанных));	//ВерсияДанныхКонтрагента не использую, т.к. запрос возвращает неверную версию
		Поля.Вставить("ORIGIN_ID"			, ИнформацияОКонтрагенте.ИдентификаторКонтрагента);
			//Поля.Вставить("COMPANY_ORIGIN_ID"	, "");
			Поля.Вставить("TITLE"				, ИнформацияОКонтрагенте.НаименованиеКонтрагента);
			Поля.Вставить("COMPANY_TYPE"		, "");
			Поля.Вставить("IS_MY_COMPANY "	, "N");
			
			ДобавитьАдресаВШапку(ПараметрыОбмена, "Контрагент", МенеджерВременныхТаблицКонтрагентов, ИнформацияОКонтрагенте.Контрагент, Поля);
			
			ДобавитьКонтакты(ПараметрыОбмена	, "Контрагент", МенеджерВременныхТаблицКонтрагентов, ИнформацияОКонтрагенте.Контрагент, Поля);
			
			ДополнительныеПоля = Новый Структура; 
			
				ДобавитьСсылкуНаОбъектДляВеб(ПараметрыОбмена, ДополнительныеПоля, ИнформацияОКонтрагенте.Контрагент);	
				
			Агент.Вставить("external_fields", ДополнительныеПоля);
			
			Реквизиты 	= Новый Массив;
				Реквизит 	= Новый Структура;
				
				Реквизит.Вставить("XML_ID"			, ИнформацияОКонтрагенте.ИдентификаторКонтрагента);
					
				Реквизит.Вставить("RQ_NAME"			, ИнформацияОКонтрагенте.НаименованиеКонтрагента);
				Реквизит.Вставить("RQ_COMPANY_NAME"	, ИнформацияОКонтрагенте.НаименованиеКонтрагента);
				Реквизит.Вставить("RQ_COMPANY_FULL_NAME", ИнформацияОКонтрагенте.НаименованиеПолноеКонтрагента);
				Реквизит.Вставить("RQ_INN"			, ИнформацияОКонтрагенте.ИННКонтрагента);
				Реквизит.Вставить("RQ_KPP"			, ИнформацияОКонтрагенте.КППКонтрагента);
				Реквизит.Вставить("RQ_OKPO"			, ИнформацияОКонтрагенте.КодПоОКПОКонтрагента);
				
				ДобавитьБанковскиеСчета(ПараметрыОбмена, Реквизит, МенеджерВременныхТаблицКонтрагентов, ИнформацияОКонтрагенте.Контрагент);
				
				Реквизит.Вставить("RQ_ADDR"		,ПолучитьСтруктуруАдресовОбъекта(ПараметрыОбмена, "Контрагент", МенеджерВременныхТаблицКонтрагентов, ИнформацияОКонтрагенте.Контрагент));
			Реквизиты.Добавить(Реквизит);
			
		Агент.Вставить("fields",Поля);    			
		Агент.Вставить("REQUISITE", Реквизиты);
	
	Группа.Вставить("agent", Агент);
	
	Если ВыгрузкаВДокументы тогда
		Возврат Агент;
	Иначе
		Возврат Группа;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВерсиюКонтрагента(ПараметрыОбмена, МенеджерВременныхТаблиц, Владелец, Версия)
	
	Результат = Версия;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремБанковскиеСчета КАК ВремБанковскиеСчета
	| ГДЕ ВремБанковскиеСчета.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремБанковскиеСчета.НомерСчета";
	
	
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 тогда
		
		Для каждого ТекБанкСчет из тзнВрем Цикл 
			
			Результат = Результат + " "+ ТекБанкСчет.Версия;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);

	ХешированиеДанных.Добавить(Результат);
	
	Возврат ХешированиеДанных.ХешСумма;	
	
КонецФункции

Процедура ВыгрузитьПакетКонтактов(ПараметрыОбмена, МенеджерВременныхТаблицКонтактов, Операция, Пакет, МассивСтрок)
	
	ТелоHTTPЗапроса = "";
	
	Если НЕ ПолучитьТокенДляСоединения(ПараметрыОбмена) тогда
		СообщитьПодробно("Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена.НастройкиПодключения = ПолучитьНастройкиПодключения(ПараметрыОбмена);
	
	Соединение = УстановитьСоединениеССервером(ПараметрыОбмена.НастройкиПодключения);

	СтруктураДанных = Новый Структура;
	
	Элементы =  Новый массив;
	Итератор = 0;                                               
	
	Для каждого ТекЭлСпр из МассивСтрок Цикл 
		
		Итератор = Итератор + 1;
		
		Если ЗначениеЗаполнено(ТекЭлСпр.Объект) тогда	
			Элементы.Добавить(СформироватьСтруктуруДанныхКонтактов(ПараметрыОбмена, МенеджерВременныхТаблицКонтактов, Элементы, ТекЭлСпр));
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("batch", Элементы);
	ТелоHTTPЗапроса= "";	
	РазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса,"");
	
	СтруктураОтвета = ОтправкаДанныхНаПортал(ПараметрыОбмена, Соединение, "/rest/crm.externalchannel.contact", ТелоHTTPЗапроса, Истина,  ПараметрыОбмена.CHANNEL_ID); 
	
	Если СтруктураОтвета = Ложь тогда
		Успешно = Ложь;	
	Иначе
		Успешно = Истина;
	КонецЕсли;
	
	ВыгрузкаКомпанийУпешна = Успешно;

	УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, МассивСтрок);
	
	Если Успешно тогда
		СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контактов контрагентов завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	Иначе
		СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контактов контрагентов НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьКонтакты(ПараметрыОбмена, МассивДанных, Операция)
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	
	Если КоличествоПакетов > 0 тогда
		
		МенеджерВременныхТаблицКонтактов = Новый МенеджерВременныхТаблиц;
		
		ОбщийЗапрос = Новый Запрос;
		ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтактов;
		ОбщийЗапрос.УстановитьПараметр("МассивДанных",МассивДанных);
		
		ОбщийЗапрос.Текст = "ВЫБРАТЬ
		|	МассивДанных.Объект КАК Объект,
		|	МассивДанных.Пакет
		|ПОМЕСТИТЬ ВремМассивДанных
		|ИЗ
		|	&МассивДанных КАК МассивДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВремМассивДанных.Объект КАК Идентификатор,
		|	ВремМассивДанных.Объект КАК Объект,
		|	ВремМассивДанных.Пакет КАК Пакет,
		|	КонтактныеЛица.ВерсияДанных КАК Версия,
		|	КонтактныеЛица.Владелец КАК Владелец,
		|	КонтактныеЛица.Наименование КАК Наименование,
		|	КонтактныеЛица.Комментарий,
		|	КонтактныеЛица.Пол,
		|	КонтактныеЛица.Должность КАК Должность
		|ПОМЕСТИТЬ МассивДанныхСПакетами
		|ИЗ
		|	ВремМассивДанных КАК ВремМассивДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ПО (КонтактныеЛица.Ссылка = ВремМассивДанных.Объект)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пакет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛицаРолиКонтактногоЛица.Ссылка КАК Владелец,
		|	КонтактныеЛицаРолиКонтактногоЛица.НомерСтроки,
		|	КонтактныеЛицаРолиКонтактногоЛица.Роль.Наименование КАК НаименованиеДолжности
		|ПОМЕСТИТЬ ВремДолжностиКонтактныхЛиц
		|ИЗ
		|	Справочник.КонтактныеЛица.Роли КАК КонтактныеЛицаРолиКонтактногоЛица
		|ГДЕ
		|	КонтактныеЛицаРолиКонтактногоЛица.Ссылка В
		|			(ВЫБРАТЬ
		|				МассивДанныхСПакетами.Объект
		|			ИЗ
		|				МассивДанныхСПакетами)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Владелец,
		|	КонтактныеЛицаКонтактнаяИнформация.НомерСтроки,
		|	КонтактныеЛицаКонтактнаяИнформация.Тип,
		|	КонтактныеЛицаКонтактнаяИнформация.Вид,
		|	КонтактныеЛицаКонтактнаяИнформация.Представление,
		|	КонтактныеЛицаКонтактнаяИнформация.ЗначенияПолей,
		|	КонтактныеЛицаКонтактнаяИнформация.Страна,
		|	КонтактныеЛицаКонтактнаяИнформация.Регион,
		|	КонтактныеЛицаКонтактнаяИнформация.Город,
		|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП,
		|	КонтактныеЛицаКонтактнаяИнформация.ДоменноеИмяСервера,
		|	КонтактныеЛицаКонтактнаяИнформация.НомерТелефона,
		|	КонтактныеЛицаКонтактнаяИнформация.НомерТелефонаБезКодов
		|ПОМЕСТИТЬ КонтактныеЛицаКонтактнаяИнформация
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВремМассивДанных.Объект
		|			ИЗ
		|				ВремМассивДанных)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремМассивДанных";
		
		ОбщийЗапрос.Выполнить();
		
	КонецЕсли;
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Итератор = 0;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтактов;
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	МассивДанныхСПакетами КАК МассивДанныхСПакетами
		|ГДЕ
		|	МассивДанныхСПакетами.Пакет В(&Пакет)";
		Запрос.УстановитьПараметр("Пакет", Пакет);
		МассивСтрок = Запрос.Выполнить().Выгрузить();
		
		Если МассивСтрок.Количество() > 0 тогда
			
			СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " информации о контактах контрагентов", ПараметрыОбмена);
			
			ВыгрузитьПакетКонтактов(ПараметрыОбмена, МенеджерВременныхТаблицКонтактов, Операция, Пакет, МассивСтрок);
			
			СообщитьПодробно("Завершена выгрузка пакета " + Строка(Пакет) + " информации о контактах контрагентов", ПараметрыОбмена);
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПакетов > 0 тогда
		МенеджерВременныхТаблицКонтактов.Закрыть();
	КонецЕсли;

КонецПроцедуры 
Функция СформироватьСтруктуруДанныхКонтактов(ПараметрыОбмена, МенеджерВременныхТаблицКонтактов, Элементы, ИнформацияОКонтакте)
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ИнформацияОКонтакте.Наименование);
	
	Группа 	= Новый Структура;
		Агент 	= Новый Структура;
		Поля 	= Новый Структура;
		
		Поля.Вставить("ORIGIN_VERSION", ИнформацияОКонтакте.Версия);	
		Поля.Вставить("ORIGIN_ID"			, ИнформацияОКонтакте.Идентификатор);
		
		Поля.Вставить("POST"				, ПолучитьДолжностьКонтактногоЛица(ПараметрыОбмена, МенеджерВременныхТаблицКонтактов, ИнформацияОКонтакте.Объект, ИнформацияОКонтакте.Должность));
		Поля.Вставить("COMMENTS"			, ИнформацияОКонтакте.Комментарий);
		
		Поля.Вставить("NAME"				, ?(ЗначениеЗаполнено(ФИО.Имя), ФИО.Имя, ИнформацияОКонтакте.Наименование));
		Поля.Вставить("LAST_NAME"			, ФИО.Фамилия);
		Поля.Вставить("SECOND_NAME"			, ФИО.Отчество);
				
		ДобавитьКонтакты(ПараметрыОбмена	, "Контакт", МенеджерВременныхТаблицКонтактов, ИнформацияОКонтакте.Объект, Поля);
		
		ДополнительныеПоля = Новый Структура; 
			ДополнительныеПоля.Вставить("COMPANY_ORIGIN_ID"	, ИнформацияОКонтакте.Владелец);
			ДобавитьСсылкуНаОбъектДляВеб(ПараметрыОбмена, ДополнительныеПоля, ИнформацияОКонтакте.Объект);				
		Агент.Вставить("external_fields", ДополнительныеПоля);
				
		Реквизиты = Новый Массив;
		Реквизит = Новый Структура;
				
		 	Реквизит.Вставить("XML_ID"			, ИнформацияОКонтакте.Идентификатор);
		 	Реквизит.Вставить("RQ_NAME"			, ИнформацияОКонтакте.Наименование);
		 	Реквизит.Вставить("RQ_FIRST_NAME"	, ФИО.Имя);
		 	Реквизит.Вставить("RQ_LAST_NAME"	, ФИО.Фамилия);
		 	Реквизит.Вставить("RQ_SECOND_NAME"	, ФИО.Отчество);
					
		Реквизиты.Добавить(Реквизит);
		
		Агент.Вставить("fields",Поля);    			
		Агент.Вставить("REQUISITE", Реквизиты);
	
	Группа.Вставить("agent", Агент);
	
	Возврат Группа;
	
КонецФункции

Функция ПолучитьДолжностьКонтактногоЛица(ПараметрыОбмена, МенеджерВременныхТаблицКонтрагентов, Владелец, ДолжностьПоВизитке)
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
	Запрос.Текст = "ВЫБРАТЬ  ПЕРВЫЕ 1 * ИЗ
	|	ВремДолжностиКонтактныхЛиц КАК ВремДолжностиКонтактныхЛиц
	|ГДЕ ВремДолжностиКонтактныхЛиц.Владелец В (&Владелец)
	|УПОРЯДОЧИТЬ ПО
	|	ВремДолжностиКонтактныхЛиц.НомерСтроки";
	
	тзн = Запрос.Выполнить().Выгрузить();
	
	Если тзн.Количество() > 0 тогда
		Результат = тзн[0].НаименованиеДолжности;
	Иначе
		Результат = ДолжностьПоВизитке;
	КонецЕсли;	
	
	Возврат Результат;	
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Процедура ВыгрузитьДокументы(ПараметрыОбмена, МассивДанных, Операция)
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	
	Если КоличествоПакетов > 0 тогда
		
		МенеджерВременныхТаблицДокументов = Новый МенеджерВременныхТаблиц;
		
		ОбщийЗапрос = Новый Запрос;
		ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДокументов;
		ОбщийЗапрос.УстановитьПараметр("МассивДанных", МассивДанных);
	
		ОбщийЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МассивДанных.Объект,
		|	МассивДанных.Пакет
		|ПОМЕСТИТЬ МассивДанныхСПакетами
		|ИЗ
		|	&МассивДанных КАК МассивДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МассивДанныхСПакетами.Объект.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ВремКонтрагенты
		|ИЗ
		|	МассивДанныхСПакетами КАК МассивДанныхСПакетами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаКонтрагентов.НомерСчета,
		|	БанковскиеСчетаКонтрагентов.ВерсияДанных КАК Версия,
		|	БанковскиеСчетаКонтрагентов.Банк,
		|	БанковскиеСчетаКонтрагентов.Банк.Код КАК БИКБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.КоррСчет КАК КоррСчетБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.Адрес КАК АдресБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.Город КАК ГородБанка,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Код КАК БИКБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.КоррСчет КАК КоррСчетБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Город КАК ГородБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Адрес КАК АдресБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.Банк.Наименование КАК НаименованиеБанка,
		|	БанковскиеСчетаКонтрагентов.БанкРасчетов.Наименование КАК НаименованиеБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.Владелец КАК Владелец,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код КАК ВалютаКод,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Идентификатор,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Объект
		|ПОМЕСТИТЬ ВремБанковскиеСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Владелец В
		|			(ВЫБРАТЬ
		|				МассивДанныхСПакетами.Объект
		|			ИЗ
		|				МассивДанныхСПакетами)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПокупательКонтактнаяИнформация.Ссылка КАК Владелец,
		|	ПокупательКонтактнаяИнформация.Тип,
		|	ПокупательКонтактнаяИнформация.Вид,
		|	ПокупательКонтактнаяИнформация.Представление,
		|	ПокупательКонтактнаяИнформация.ЗначенияПолей,
		|	ПокупательКонтактнаяИнформация.Страна,
		|	ПокупательКонтактнаяИнформация.Регион,
		|	ПокупательКонтактнаяИнформация.Город,
		|	ПокупательКонтактнаяИнформация.АдресЭП,
		|	ПокупательКонтактнаяИнформация.ДоменноеИмяСервера,
		|	ПокупательКонтактнаяИнформация.НомерТелефона,
		|	ПокупательКонтактнаяИнформация.НомерТелефонаБезКодов
		|ПОМЕСТИТЬ ВремКонтактнаяИнформация
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ПокупательКонтактнаяИнформация
		|ГДЕ
		|	ПокупательКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВремКонтрагенты.Контрагент
		|			ИЗ
		|				ВремКонтрагенты)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремКонтрагенты";
		
		ОбщийЗапрос.Выполнить();
		
	КонецЕсли;
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Итератор = 0;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДокументов;
		Запрос.Текст = "ВЫБРАТЬ
		|	МассивДанныхСПакетами.Объект,
		|	МассивДанныхСПакетами.Пакет,
		|	МассивДанныхСПакетами.Объект.Организация КАК Организация,
		|	МассивДанныхСПакетами.Объект.Номер КАК НомерДокумента,
		|	МассивДанныхСПакетами.Объект.Дата КАК ДатаДокумента,
		|	МассивДанныхСПакетами.Объект.СуммаДокумента КАК СуммаДокумента,	
		|	МассивДанныхСПакетами.Объект.ВалютаДокумента.Код КАК ВалютаКод,	
		|	МассивДанныхСПакетами.Объект.Комментарий КАК Комментарий,
		|	МассивДанныхСПакетами.Объект.ВерсияДанных КАК Версия,
		|	МассивДанныхСПакетами.Объект.Ответственный.Наименование КАК Ответственный,		
		|	МассивДанныхСПакетами.Объект.Проведен КАК Проведен,		
		|	МассивДанныхСПакетами.Объект.Контрагент КАК Контрагент,
		|	МассивДанныхСПакетами.Объект.Контрагент КАК ИдентификаторКонтрагента,
		|	МассивДанныхСПакетами.Объект.Контрагент.ВерсияДанных КАК ВерсияДанныхКонтрагента,
		|	МассивДанныхСПакетами.Объект.Контрагент.ПометкаУдаления КАК ПометкаУдаленияКонтрагента,
		|	"""" КАК КодПокупателя,
		|	МассивДанныхСПакетами.Объект.Контрагент.Наименование КАК НаименованиеКонтрагента,
		|	МассивДанныхСПакетами.Объект.Контрагент.ИНН КАК ИННКонтрагента,
		|	МассивДанныхСПакетами.Объект.Контрагент.КодПоОКПО КАК КодПоОКПОКонтрагента,
		|	"""" КАК КомментарийКонтрагента,
		|	МассивДанныхСПакетами.Объект.Контрагент.КПП КАК КППКонтрагента,
		|	МассивДанныхСПакетами.Объект.Контрагент.НаименованиеПолное КАК НаименованиеПолноеКонтрагента,
		|	МассивДанныхСПакетами.Объект.Контрагент.ВерсияДанных КАК ВерсияКонтрагента
		|ИЗ
		|	МассивДанныхСПакетами КАК МассивДанныхСПакетами 
		|ГДЕ
		|	МассивДанныхСПакетами.Пакет В(&Пакет)";
		Запрос.УстановитьПараметр("Пакет", Пакет);
		МассивСтрок = Запрос.Выполнить().Выгрузить();
		
		Если МассивСтрок.Количество() > 0 тогда
			
			СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " документов", ПараметрыОбмена);
			
			ВыгрузитьПакетДокуменов(ПараметрыОбмена, МенеджерВременныхТаблицДокументов, Операция, Пакет, МассивСтрок);
			
			СообщитьПодробно("Завершена выгрузка пакета " + Строка(Пакет) + " документов", ПараметрыОбмена);
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПакетов > 0 тогда
		МенеджерВременныхТаблицДокументов.Закрыть();
	КонецЕсли;

КонецПроцедуры 

Процедура ВыгрузитьПакетДокуменов(ПараметрыОбмена, МенеджерВременныхТаблицДокументов, Операция, Пакет, МассивСтрок)
	
	Если НЕ ПолучитьТокенДляСоединения(ПараметрыОбмена) тогда
		СообщитьПодробно("Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена.НастройкиПодключения = ПолучитьНастройкиПодключения(ПараметрыОбмена);
	
	Соединение = УстановитьСоединениеССервером(ПараметрыОбмена.НастройкиПодключения);
	
	СтруктураДанных = Новый Структура;
	
	Элементы =  Новый массив;
	Итератор = 0;
	
	Для каждого ТекЭлСпр из МассивСтрок Цикл 
		
		Итератор = Итератор + 1;
		
		СформироватьСтруктуруДанныхДокументов(ПараметрыОбмена, МенеджерВременныхТаблицДокументов, Элементы, ТекЭлСпр);

	КонецЦикла;
	
	СтруктураДанных.Вставить("batch", Элементы);
	ТелоHTTPЗапроса= "";	
	РазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса,"");

	СтруктураОтвета = ОтправкаДанныхНаПортал(ПараметрыОбмена, Соединение, "/rest/crm.externalchannel.activity.company", ТелоHTTPЗапроса, Истина,  ПараметрыОбмена.CHANNEL_ID); 
	
	Если СтруктураОтвета = Ложь тогда
		Успешно = Ложь;	
	Иначе
		Успешно = Истина;
	КонецЕсли;
	
	УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, МассивСтрок);
	
	Если Успешно тогда
		СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " документов завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	Иначе
		СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " документов НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхДокументов(ПараметрыОбмена, МенеджерВременныхТаблицДокументов, Элементы, ИнформацияОДокументе)
	
	Группа 		= Новый Структура;
	Активность 	= Новый Структура;
	
		Поля 	= Новый Структура;
		
			Поля.Вставить("ORIGIN_VERSION"	, ИнформацияОДокументе.Версия);
			Поля.Вставить("ORIGIN_ID"	, ИнформацияОДокументе.Объект);
			Поля.Вставить("SUBJECT"		, Строка(ИнформацияОДокументе.Объект));
			Поля.Вставить("START_TIME"	, ИнформацияОДокументе.ДатаДокумента);
			Поля.Вставить("DESCRIPTION"	, Строка(ИнформацияОДокументе.Объект));
			Поля.Вставить("RESULT_SUM"	, ИнформацияОДокументе.СуммаДокумента);
			Поля.Вставить("RESULT_VALUE", ?(ИнформацияОДокументе.Проведен, 1, 0));
			
			лВалютаСимвольныйКод = ПолучитьВалютуПоКоду(Лев(ИнформацияОДокументе.ВалютаКод, 3));
			
			Если ЗначениеЗаполнено(лВалютаСимвольныйКод) тогда
				Поля.Вставить("RESULT_CURRENCY_ID", лВалютаСимвольныйКод);
			КонецЕсли;
		
		Активность.Вставить("fields",Поля);
		
		ДополнительныеПоля = Новый Структура; 
		
			ДополнительныеПоля.Вставить("EXTERNAL_TYPE_ID"	, ИнформацияОДокументе.Объект.Метаданные().Синоним);
			ДополнительныеПоля.Вставить("NUMBER"			, ИнформацияОДокументе.НомерДокумента);
			ДополнительныеПоля.Вставить("MANAGER"			, ?(ЗначениеЗаполнено(ИнформацияОДокументе.Ответственный), ИнформацияОДокументе.Ответственный, ""));
			
			ДополнительныеПоля.Вставить("NUMBER"			, ИнформацияОДокументе.НомерДокумента);
			
			ДополнительныеПоля.Вставить("COMPANY_SELLER_ORIGINAL_ID", ПолучитьИдентификаторОрганизации(ИнформацияОДокументе.Организация));
			
			
			ДобавитьСсылкуНаОбъектДляВеб(ПараметрыОбмена, ДополнительныеПоля, ИнформацияОДокументе.Объект);				
		Активность.Вставить("external_fields", ДополнительныеПоля);
		
		Группа.Вставить("activity",Активность);
		
		Если ЗначениеЗаполнено(ИнформацияОДокументе.Контрагент) тогда
			Группа.Вставить("agent", СформироватьСтруктуруДанныхКонтрагента(ПараметрыОбмена, МенеджерВременныхТаблицДокументов, Элементы, ИнформацияОДокументе, Истина));
		КонецЕсли;
		
	Элементы.Добавить(Группа);
	
КонецПроцедуры

Функция ПолучитьВалютуПоКоду(КодВалюты)
	
	Если КодВалюты = "840" тогда
		Результат = "USD";
	ИначеЕсли КодВалюты = "978" тогда
		Результат = "EUR";
	ИначеЕсли КодВалюты = "980" тогда
		Результат = "UAH";
	ИначеЕсли КодВалюты = "974" тогда
		Результат = "BYR";
	ИначеЕсли КодВалюты = "398" тогда
		Результат = "KZT";
	Иначе
		Результат = "RUB";
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура СформироватьДанныеООрганизациях(ПараметрыОбмена)
	
	МенеджерВременныхТаблицОрганизаций = Новый МенеджерВременныхТаблиц;
	
	ОбщийЗапрос = Новый Запрос;
	ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицОрганизаций;
	Общийзапрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	ОбщийЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчетаОрганизаций.НомерСчета,
	|	БанковскиеСчетаОрганизаций.ВерсияДанных КАК Версия,
	|	БанковскиеСчетаОрганизаций.Банк,
	|	БанковскиеСчетаОрганизаций.Банк.Код КАК БИКБанка,
	|	БанковскиеСчетаОрганизаций.Банк.КоррСчет КАК КоррСчетБанка,
	|	БанковскиеСчетаОрганизаций.Банк.Адрес КАК АдресБанка,
	|	БанковскиеСчетаОрганизаций.Банк.Город КАК ГородБанка,
	|	БанковскиеСчетаОрганизаций.БанкРасчетов,
	|	БанковскиеСчетаОрганизаций.БанкРасчетов.Код КАК БИКБанкаДляРасчетов,
	|	БанковскиеСчетаОрганизаций.БанкРасчетов.КоррСчет КАК КоррСчетБанкаДляРасчетов,
	|	БанковскиеСчетаОрганизаций.БанкРасчетов.Город КАК ГородБанкаДляРасчетов,
	|	БанковскиеСчетаОрганизаций.БанкРасчетов.Адрес КАК АдресБанкаДляРасчетов,
	|	БанковскиеСчетаОрганизаций.Банк.Наименование КАК НаименованиеБанка,
	|	БанковскиеСчетаОрганизаций.БанкРасчетов.Наименование КАК НаименованиеБанкаДляРасчетов,
	|	БанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств.Наименование КАК ВалютаКод,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Идентификатор,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Объект
	|ПОМЕСТИТЬ ВремБанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчетаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Владелец,
	|	ОрганизацииКонтактнаяИнформация.Тип,
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей,
	|	ОрганизацииКонтактнаяИнформация.Страна,
	|	ОрганизацииКонтактнаяИнформация.Регион,
	|	ОрганизацииКонтактнаяИнформация.Город,
	|	ОрганизацииКонтактнаяИнформация.АдресЭП,
	|	ОрганизацииКонтактнаяИнформация.ДоменноеИмяСервера,
	|	ОрганизацииКонтактнаяИнформация.НомерТелефона,
	|	ОрганизацииКонтактнаяИнформация.НомерТелефонаБезКодов
	|ПОМЕСТИТЬ ВремКонтактнаяИнформация
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Объект,
	|	Организации.Ссылка КАК Идентификатор,
	|	Организации.ВерсияДанных КАК Версия,
	|	Организации.ПометкаУдаления КАК ПометкаУдаления,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Организации.КПП КАК КПП,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.ЮридическоеФизическоеЛицо КАК ЮрФизЛицо,
	|	Организации.КодПоОКАТО,
	|	Организации.КодОКОПФ,
	|	Организации.КодОКВЭД,
	|	Организации.ДатаРегистрации,
	|	Организации.ОГРН
	|ПОМЕСТИТЬ ВремОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Организация КАК Владелец,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ТипОтветственногоЛица КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник.Наименование КАК ФИО
	|ПОМЕСТИТЬ ВремОтветственныеЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ТекДата, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	ОтветственноеЛицо";
	
	ОбщийЗапрос.Выполнить();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицОрганизаций;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремОрганизации КАК ВремОрганизации";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	ТелоHTTPЗапроса = "";
	
	Если НЕ ПолучитьТокенДляСоединения(ПараметрыОбмена) тогда
		СообщитьПодробно("Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена.НастройкиПодключения = ПолучитьНастройкиПодключения(ПараметрыОбмена);
	
	Соединение = УстановитьСоединениеССервером(ПараметрыОбмена.НастройкиПодключения);

	СтруктураДанных = Новый Структура;
	
	Элементы =  Новый массив;
	
	Итератор = 0;
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		СформироватьСтруктуруДанныхОрганизаций(ПараметрыОбмена, МенеджерВременныхТаблицОрганизаций,  Элементы, ВыборкаОрганизаций);
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("batch", Элементы);
	ТелоHTTPЗапроса= "";	
	РазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса,"");

	СтруктураОтвета = ОтправкаДанныхНаПортал(ПараметрыОбмена, Соединение, "/rest/crm.externalchannel.company", ТелоHTTPЗапроса, Истина,  ПараметрыОбмена.CHANNEL_ID); 
	
	Если СтруктураОтвета = Ложь тогда
		Успешно = Ложь;	
	Иначе
		Успешно = Истина;
	КонецЕсли;
	
	Если Успешно тогда
		СообщитьПодробно("Выгрузка пакета организаций завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	Иначе
		СообщитьПодробно("Выгрузка пакета организаций НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	КонецЕсли;
	
	МенеджерВременныхТаблицОрганизаций.Закрыть();
	
КонецПроцедуры 

Процедура СформироватьСтруктуруДанныхОрганизаций(ПараметрыОбмена, МенеджерВременныхТаблицОрганизаций, Элементы, ИнформацияООрганизации)
	
	Группа 	= Новый Структура;
		Агент = Новый Структура;
		Поля = Новый Структура;
		
			Поля.Вставить("ORIGIN_VERSION", ПолучитьВерсиюКонтрагента(ПараметрыОбмена, МенеджерВременныхТаблицОрганизаций, ИнформацияООрганизации.Объект, ИнформацияООрганизации.Версия));	
			Поля.Вставить("ORIGIN_ID"			, ПолучитьИдентификаторОрганизации(ИнформацияООрганизации.Идентификатор));
			//Поля.Вставить("COMPANY_ORIGIN_ID"	, "");
			Поля.Вставить("TITLE"				, ИнформацияООрганизации.Наименование);
			Поля.Вставить("COMPANY_TYPE"		, "");
			Поля.Вставить("IS_MY_COMPANY "	, "Y");
			
			ДобавитьАдресаВШапку(ПараметрыОбмена, "Организация", МенеджерВременныхТаблицОрганизаций, ИнформацияООрганизации.Объект, Поля);
			
			ДобавитьКонтакты(ПараметрыОбмена, "Организация", МенеджерВременныхТаблицОрганизаций, ИнформацияООрганизации.Объект, Поля);
			
			ДополнительныеПоля = Новый Структура; 
				ДобавитьСсылкуНаОбъектДляВеб(ПараметрыОбмена, ДополнительныеПоля, ИнформацияООрганизации.Объект);	
			Агент.Вставить("external_fields", ДополнительныеПоля);
			
			Реквизиты 	= Новый Массив;
				Реквизит 	= Новый Структура;
			
				Реквизит.Вставить("XML_ID"				, ПолучитьИдентификаторОрганизации(ИнформацияООрганизации.Идентификатор));
				
				Реквизит.Вставить("RQ_NAME"				, ИнформацияООрганизации.Наименование);
				Реквизит.Вставить("RQ_COMPANY_NAME"		, ИнформацияООрганизации.Наименование);
				Реквизит.Вставить("RQ_COMPANY_FULL_NAME", ИнформацияООрганизации.НаименованиеПолное);
				Реквизит.Вставить("RQ_COMPANY_REG_DATE"	, ИнформацияООрганизации.ДатаРегистрации);
				Реквизит.Вставить("RQ_OKVED"			, ИнформацияООрганизации.КодОКВЭД);
				
				Если ИнформацияООрганизации.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо тогда
					Реквизит.Вставить("RQ_OGRNIP"		, ИнформацияООрганизации.ОГРН);
				Иначе
					Реквизит.Вставить("RQ_OGRN"			, ИнформацияООрганизации.ОГРН);
				КонецЕсли;
				Реквизит.Вставить("RQ_OKPO"				, ИнформацияООрганизации.КодПоОКПО);
				
				Реквизит.Вставить("RQ_INN"				, ИнформацияООрганизации.ИНН);
				Реквизит.Вставить("RQ_KPP"				, ИнформацияООрганизации.КПП);
				Реквизит.Вставить("RQ_OKVED"			, ИнформацияООрганизации.КодОКВЭД);
				
				Реквизит.Вставить("RQ_DIRECTOR"			, ПолучитьОтвественноеЛицоОрганизации(ПараметрыОбмена, МенеджерВременныхТаблицОрганизаций, ИнформацияООрганизации.Объект, Перечисления.ТипыОтветственныхЛиц.Руководитель));
				Реквизит.Вставить("RQ_ACCOUNTANT"		, ПолучитьОтвественноеЛицоОрганизации(ПараметрыОбмена, МенеджерВременныхТаблицОрганизаций, ИнформацияООрганизации.Объект, Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер));
				
				Реквизит.Вставить("RQ_ADDR"				, ПолучитьСтруктуруАдресовОбъекта(ПараметрыОбмена, "Организация", МенеджерВременныхТаблицОрганизаций, ИнформацияООрганизации.Объект));
				
				ДобавитьБанковскиеСчета(ПараметрыОбмена, Реквизит, МенеджерВременныхТаблицОрганизаций, ИнформацияООрганизации.Объект);

			Реквизиты.Добавить(Реквизит);
			
			Агент.Вставить("fields",Поля);    			
			Агент.Вставить("REQUISITE", Реквизиты);
			
	Группа.Вставить("agent", Агент);
		
	Элементы.Добавить(Группа);
	
КонецПроцедуры

Функция ПолучитьОтвественноеЛицоОрганизации(ПараметрыОбмена, МенеджерВременныхТаблиц, Владелец, ОтветственноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремОтветственныеЛица КАК ВремОтветственныеЛица
	| ГДЕ ВремОтветственныеЛица.Владелец = &Владелец
	| И ВремОтветственныеЛица.ОтветственноеЛицо = &ОтветственноеЛицо";
	
	тзн = Запрос.Выполнить().Выгрузить();
	
	Если тзн.Количество() > 0 тогда
		Возврат тзн[0].ФИО;	
	Иначе
		Возврат "";	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИдентификаторОрганизации(Организация)
	
	Возврат "Comp_" + XMLСтрока(Организация)
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура ДобавитьКонтакты(ПараметрыОбмена, ТипДанных, МенеджерВременныхТаблиц, Владелец, СтруктураДанных);
	
	мТелефоны 	= Новый Массив;
	мПочта 		= Новый Массив;
	
	Если ТипДанных 	= "Организация" тогда
		лТелефон 	= Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		лПочта 		= Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		лФакс 		= Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		
		лТаблицаЗапроса = "ВремКонтактнаяИнформация";
		
	ИначеЕсли ТипДанных = "Контрагент" тогда
		лТелефон 	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		лПочта 		= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		лФакс 		= Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
		
		лТаблицаЗапроса = "ВремКонтактнаяИнформация";
		
	Иначе
		лТелефон 	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		лПочта 		= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		лФакс		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		
		лТаблицаЗапроса = "КонтактныеЛицаКонтактнаяИнформация";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	"+лТаблицаЗапроса+" КАК ВремКонтактнаяИнформация
	| ГДЕ ВремКонтактнаяИнформация.Владелец = &Владелец";
	
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 тогда
		
		Для каждого ТекКонтИнформация из тзнВрем Цикл 
			
			Если ТекКонтИнформация.Вид 	= лТелефон тогда
				мТелефоны.Добавить(Новый Структура("VALUE, VALUE_TYPE",ТекКонтИнформация.Представление, "WORK"));
			ИначеЕсли ТекКонтИнформация.Вид 	= лПочта тогда
				мПочта.Добавить(Новый Структура("VALUE, VALUE_TYPE",ТекКонтИнформация.Представление, "WORK"));
			ИначеЕсли ТекКонтИнформация.Вид 	= лФакс тогда
				мТелефоны.Добавить(Новый Структура("VALUE, VALUE_TYPE",ТекКонтИнформация.Представление, "FAX"));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если мТелефоны.Количество() > 0 тогда
		СтруктураДанных.Вставить("PHONE", мТелефоны);	
	КонецЕсли;
	
	Если мТелефоны.Количество() > 0 тогда
		СтруктураДанных.Вставить("EMAIL", мПочта);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруАдресовОбъекта(ПараметрыОбмена, ТипДанных, МенеджерВременныхТаблиц, Владелец)
	
	Результат = Новый Структура;
	
	Если ТипДанных 	= "Организация" тогда
		лЮрАдрес 	= Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		лФактАдрес 	= Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	Иначе
		лЮрАдрес 	= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		лФактАдрес 	= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремКонтактнаяИнформация КАК ВремКонтактнаяИнформация
	| ГДЕ ВремКонтактнаяИнформация.Владелец = &Владелец";
	
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 тогда
		
		Для каждого ТекКонтИнформация из тзнВрем Цикл 
			
			Если ТекКонтИнформация.Вид 			= лЮрАдрес тогда
				лАдрес	= ПолучитьСтруктуруАдреса(ПараметрыОбмена, ТекКонтИнформация);
				Результат.Вставить("HOME", лАдрес);
				Результат.Вставить("REGISTERED", лАдрес);
			ИначеЕсли ТекКонтИнформация.Вид 	= лФактАдрес тогда
				лАдрес	= ПолучитьСтруктуруАдреса(ПараметрыОбмена, ТекКонтИнформация);
				Результат.Вставить("PRIMARY", лАдрес);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьБанковскиеСчета(ПараметрыОбмена, СтруктураДанных, МенеджерВременныхТаблиц, Владелец)
	
	БанковскиеСчета = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремБанковскиеСчета КАК ВремБанковскиеСчета
	| ГДЕ ВремБанковскиеСчета.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремБанковскиеСчета.НомерСчета";
	
	
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 тогда
		
		Для каждого ТекБанкСчет из тзнВрем Цикл 
			
			Если НЕ ЗначениеЗаполнено(ТекБанкСчет.НаименованиеБанка) ИЛИ НЕ ЗначениеЗаполнено(ТекБанкСчет.БИКБанка) тогда
				
				СообщитьПодробно("Некорректно заполнена информация о банке для расчетного счета: " + ТекБанкСчет.НомерСчета + " элемента: " + Строка(Владелец), ПараметрыОбмена);
				Продолжить;
			
			КонецЕсли;
			
			БанковскийСчет = Новый Структура;
			
				БанковскийСчет.Вставить("XML_ID"			, ТекБанкСчет.Идентификатор);
				
				ДобавитьСсылкуНаОбъектДляВеб(ПараметрыОбмена, БанковскийСчет, ТекБанкСчет.Объект);				
					
				БанковскийСчет.Вставить("RQ_BANK_NAME"		, ТекБанкСчет.НаименованиеБанка);
				БанковскийСчет.Вставить("RQ_BANK_ADDR"		, ТекБанкСчет.АдресБанка);
				БанковскийСчет.Вставить("RQ_BIK"			, ТекБанкСчет.БИКБанка);
			
				лВалютаСимвольныйКод = ПолучитьВалютуПоКоду(Лев(ТекБанкСчет.ВалютаКод, 3));
				
				Если ЗначениеЗаполнено(лВалютаСимвольныйКод) тогда
					БанковскийСчет.Вставить("RQ_ACC_CURRENCY", лВалютаСимвольныйКод);
				КонецЕсли;
				
				БанковскийСчет.Вставить("RQ_ACC_NUM"		, ТекБанкСчет.НомерСчета);
				БанковскийСчет.Вставить("RQ_COR_ACC_NUM"	, ТекБанкСчет.КоррСчетБанка);
				БанковскийСчет.Вставить("RQ_SWIFT"			, "");
		
			БанковскиеСчета.Добавить(БанковскийСчет);	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если БанковскиеСчета.Количество() > 0 тогда
		СтруктураДанных.Вставить("BANK_DETAILS", БанковскиеСчета);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьАдресаВШапку(ПараметрыОбмена, ТипОбъекта, МенеджерВременныхТаблиц, Владелец, СтруктураДанных)
	
	Результат = Новый Структура;
	
	Если ТипОбъекта 	= "Организация" тогда
		лЮрАдрес 	= Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		лФактАдрес 	= Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	Иначе
		лЮрАдрес 	= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		лФактАдрес 	= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремКонтактнаяИнформация КАК ВремКонтактнаяИнформация
	| ГДЕ ВремКонтактнаяИнформация.Владелец = &Владелец";
	
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 тогда
		
		Для каждого ТекКонтИнформация из тзнВрем Цикл 
			
			Если ТекКонтИнформация.Вид	= лФактАдрес тогда
				
				лАдрес	= ПолучитьСтруктуруАдреса(ПараметрыОбмена, ТекКонтИнформация);
	
				СтруктураДанных.Вставить("ADDRESS"					, лАдрес.ADDRESS_1);
				СтруктураДанных.Вставить("ADDRESS_2"				, лАдрес.ADDRESS_2);
				СтруктураДанных.Вставить("ADDRESS_CITY"				, лАдрес.CITY);
				СтруктураДанных.Вставить("ADDRESS_POSTAL_CODE"		, лАдрес.POSTAL_CODE);
				СтруктураДанных.Вставить("ADDRESS_REGION"			, лАдрес.REGION);
				СтруктураДанных.Вставить("ADDRESS_PROVINCE"			, лАдрес.PROVINCE);
				СтруктураДанных.Вставить("ADDRESS_COUNTRY"			, лАдрес.COUNTRY);
				СтруктураДанных.Вставить("ADDRESS_COUNTRY_CODE"		, лАдрес.COUNTRY_CODE);
				
			ИначеЕсли ТекКонтИнформация.Вид	= лЮрАдрес тогда
				
				лАдрес	= ПолучитьСтруктуруАдреса(ПараметрыОбмена, ТекКонтИнформация);
				
				СтруктураДанных.Вставить("ADDRESS_LEGAL"			, лАдрес.ADDRESS_1);
				СтруктураДанных.Вставить("REG_ADDRESS"				, лАдрес.ADDRESS_1);
				СтруктураДанных.Вставить("REG_ADDRESS_2"			, лАдрес.ADDRESS_2);
				СтруктураДанных.Вставить("REG_ADDRESS_CITY"			, лАдрес.CITY);
				СтруктураДанных.Вставить("REG_ADDRESS_POSTAL_CODE"	, лАдрес.POSTAL_CODE);
				СтруктураДанных.Вставить("REG_ADDRESS_REGION"		, лАдрес.REGION);
				СтруктураДанных.Вставить("REG_ADDRESS_PROVINCE"		, лАдрес.PROVINCE);
				СтруктураДанных.Вставить("REG_ADDRESS_COUNTRY"		, лАдрес.COUNTRY);
				СтруктураДанных.Вставить("REG_ADDRESS_COUNTRY_CODE"	, лАдрес.COUNTRY_CODE);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСсылкуНаОбъектДляВеб(ПараметрыОбмена, СтруктураДанных, Объект)
	
	Если ЗначениеЗаполнено(ПараметрыОбмена.АдресНаВебСервере) И ЗначениеЗаполнено(Объект) тогда
		
		НавСсылка=ПолучитьНавигационнуюСсылку(Объект);

//		лАдрес = ПараметрыОбмена.АдресНаВебСервере+"/#"+НавСсылка;	
		лАдрес = "/#" + НавСсылка;	
		
		СтруктураДанных.Вставить("EXTERNAL_URL", лАдрес);	
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ПрочиеПроцедурыИФункции

Функция ПолучитьНастройкиПоУмолчанию() Экспорт
	
	НастройкиВыгрузки = Неопределено;

	
	Выборка = ПланыОбмена.Б_Битрикс24_1С.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтотУзел тогда
			НастройкиВыгрузки = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиВыгрузки;	
	
КонецФункции

Функция ПолучитьИдБазы1С() Экспорт
	
	ИдБазы1С = Константы.Б_ИдентификаторКоннектора.Получить();
	
	Если Не ЗначениеЗаполнено(ИдБазы1С) тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		//лИдентфиикатор = Формат(ГСЧ.СлучайноеЧисло(),"ЧГ=0"); 
		ИдБазы1С = "1C"; 
		Константы.Б_ИдентификаторКоннектора.Установить(ИдБазы1С);
		
		НастройкиВыгрузки = ПолучитьНастройкиПоУмолчанию();
		
		Если НЕ ЗначениеЗаполнено(НастройкиВыгрузки) тогда
			Сообщить("Не найдена используемая настройка выгрузки. Перенести настройки не удалось. Укажите адрес веб сервера 1С(если он был ранее указан и перерегистрируйте конектор)");
			Возврат ИдБазы1С;
		КонецЕсли;
		
		СтруктураДанных = Б_Битрикс24_1С_Сервер.ПолучитьКоннекторыНаПортале(НастройкиВыгрузки);
		
		Если СтруктураДанных = Ложь тогда
			Возврат ИдБазы1С;	
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("result") = Истина тогда
			
			Если ТипЗнч(СтруктураДанных.result) = Тип("Массив") тогда
				
				Для Каждого ТекСтрока из СтруктураДанных.result Цикл
					Если ТекСтрока.TYPE_ID = "ONE_C" И  ТекСтрока.ORIGINATOR_ID = ИдБазы1С тогда
						Константы.Б_НазваниеКоннектора.Установить(ТекСтрока.NAME);
						Константы.Б_ИдентификаторКанала.Установить(ТекСтрока.CHANNEL_ID);
						Константы.Б_АдресНаВебСервере.Установить(ТекСтрока.EXTERNAL_SERVER_HOST);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(СтруктураДанных.result) = Тип("Структура") тогда
				Если СтруктураДанных.result.TYPE_ID = "ONE_C" И  СтруктураДанных.result.ORIGINATOR_ID = ИдБазы1С тогда
					Константы.Б_НазваниеКоннектора.Установить(СтруктураДанных.result.NAME);
					Константы.Б_ИдентификаторКанала.Установить(СтруктураДанных.result.CHANNEL_ID);
					Константы.Б_АдресНаВебСервере.Установить(СтруктураДанных.result.EXTERNAL_SERVER_HOST);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдБазы1С;	
	
КонецФункции

Функция ПолучитьНазваниеКоннектора() Экспорт
	
	лИдентфиикатор = Константы.Б_НазваниеКоннектора.Получить();
	
	Если Не ЗначениеЗаполнено(лИдентфиикатор) тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		лИдентфиикатор = "Выгрузка из 1С"; 
		Константы.Б_ИдентификаторКоннектора.Установить(лИдентфиикатор);
		лИдентфиикатор = Константы.Б_ИдентификаторКоннектора.Получить();
	КонецЕсли;
	
	Возврат лИдентфиикатор;	
	
КонецФункции

Процедура РазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса, Адрес)
	
	лТипСтруктура 	= тип("Структура");
	лТипМассив		= тип("Массив");
	
	Для каждого ТекКлюч из СтруктураДанных Цикл
		
		Если ТипЗнч(ТекКлюч.Значение) = лТипСтруктура тогда
			
			пАдрес = Адрес + "[" + ТекКлюч.Ключ + "]";   					
			РекурсивноРазобратьСтруктуруДанныхДляREST(ТекКлюч.Значение, ТелоHTTPЗапроса, пАдрес);
			
		ИначеЕсли ТипЗнч(ТекКлюч.Значение) = лТипМассив тогда
			
			Для  лИтератор = 0 по ТекКлюч.Значение.Количество()-1 Цикл
				
				Если ТекКлюч.Ключ = "agents" ИЛИ ТекКлюч.Ключ = "batch" тогда
					пАдрес = Адрес +  ТекКлюч.Ключ + "[" + Строка(лИтератор) + "]";
				Иначе
					пАдрес = Адрес +  "[" + ТекКлюч.Ключ + "][" + Строка(лИтератор) + "]";
				КонецЕсли;
				
	            РекурсивноРазобратьСтруктуруДанныхДляREST(ТекКлюч.Значение[лИтератор], ТелоHTTPЗапроса, пАдрес);
				
			КонецЦикла;
		Иначе
			ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + Адрес + "[" + ТекКлюч.Ключ + "]=" + КодироватьСтроку(XMLСтрока(ТекКлюч.Значение), СпособКодированияСтроки.КодировкаURL, "UTF8");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РекурсивноРазобратьСтруктуруДанныхДляREST(СтруктураДанных, ТелоHTTPЗапроса, Адрес)
	
	лТипСтруктура 	= тип("Структура");
	лТипМассив		= тип("Массив");
	
	Для каждого ТекКлюч из СтруктураДанных Цикл
		
		Если ТипЗнч(ТекКлюч.Значение) = лТипСтруктура тогда
			
			Для Каждого ВнутрКлюч из ТекКлюч.Значение Цикл
				
				Если ТипЗнч(ВнутрКлюч.Значение) = лТипМассив тогда

					Для  лИтератор = 0 по ВнутрКлюч.Значение.Количество()-1 Цикл
						
						пАдрес = Адрес + "[" + ТекКлюч.Ключ + "]" + "[" + ВнутрКлюч.Ключ + "][" + Строка(лИтератор) + "]";
						
			            РекурсивноРазобратьСтруктуруДанныхДляREST(ВнутрКлюч.Значение[лИтератор], ТелоHTTPЗапроса, пАдрес);
						
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(ВнутрКлюч.Значение) = лТипСтруктура тогда
					
					пАдрес = Адрес + "[" + ТекКлюч.Ключ + "]"+ "[" + ВнутрКлюч.Ключ + "]";   					
					РекурсивноРазобратьСтруктуруДанныхДляREST(ВнутрКлюч.Значение, ТелоHTTPЗапроса, пАдрес);
					
				Иначе
					ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + Адрес + "[" + ТекКлюч.Ключ + "]" + "[" + ВнутрКлюч.Ключ + "]=" + КодироватьСтроку(XMLСтрока(ВнутрКлюч.Значение), СпособКодированияСтроки.КодировкаURL, "UTF8");
				КонецЕсли;
			
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ТекКлюч.Значение) = лТипМассив тогда
			
			Для  лИтератор = 0 по ТекКлюч.Значение.Количество()-1 Цикл
				
				пАдрес = Адрес +  "[" + ТекКлюч.Ключ + "][" + Строка(лИтератор) + "]";
				
	            РекурсивноРазобратьСтруктуруДанныхДляREST(ТекКлюч.Значение[лИтератор], ТелоHTTPЗапроса, пАдрес);
				
			КонецЦикла;
		Иначе
			ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + Адрес + "[" + ТекКлюч.Ключ + "]=" + КодироватьСтроку(XMLСтрока(ТекКлюч.Значение), СпособКодированияСтроки.КодировкаURL, "UTF8");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруАдреса(ПараметрыОбмена, ПредставлениеАдреса) Экспорт
	
	Результат = Новый Структура;
	
	лНаселенныйПункт = ""; 	
	лИндекс 	= "";
	лРегион 	= "";
	лСтрана 	= "";
	лРайон 		= "";
	лГород 		= "";
	лУлица 		= "";
	лДом 		= "";
	лКорпус 	= "";
	лКвартира 	= "";
	
	Результат.Вставить("ADDRESS_1", СокрЛП(ПредставлениеАдреса.Представление));
	
	СписокПолей = ПолучитьСписокПолейПоСтроке(ПредставлениеАдреса.ЗначенияПолей);
	
	Для Каждого ПолеКИ Из СписокПолей Цикл
		
		Если НЕ ЗначениеЗаполнено(ПолеКИ.Значение) тогда
			Продолжить;
		КонецЕсли;
				
		Если ПолеКИ.Представление = "Индекс" Тогда
			лИндекс = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "НаселенныйПункт" Тогда
			лНаселенныйПункт = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Регион" Тогда
			лРегион = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Страна" Тогда
			лСтрана = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Район" Тогда
			лРайон = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Город" Тогда
			лГород = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Улица" Тогда
			лУлица = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Дом" Тогда
			лДом = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Корпус" Тогда
			лКорпус = ПолеКИ.Значение;
		ИначеЕсли ПолеКИ.Представление = "Квартира" Тогда
			лКвартира = ПолеКИ.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("ADDRESS_2"		, лКвартира);
	Результат.Вставить("CITY"			, лГород);
	Результат.Вставить("POSTAL_CODE"	, лИндекс);
	Результат.Вставить("REGION"			, лРайон);
	Результат.Вставить("PROVINCE"		, лРегион);
	Результат.Вставить("COUNTRY"		, лСтрана);
	Результат.Вставить("COUNTRY_CODE"	, "");
	
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьСписокПолейПоСтроке(пСтрокаПолей)
	
	// Для совместимости с новой БСП
	СтрокаПолей = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(пСтрокаПолей);
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
		Если Лев(Стр, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
			КонецЕсли;
		Иначе
			Поз = Найти(Стр, "=");
			Если Поз <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Удаляет регистрацию измений данных, если они успешно выгружены на сайт
//
// Параметры:
//  Успешно					 - 	 Признак успешности выгрузки данных на сайт 
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Пакет					 - 	 Номер пакета данных 
//  ИдентификаторКаталога	 - 	 Идентификатор каталога(инфоблока), куда были выгружены данные 
//  МассивСтрок				 - 	 Массив данных, для которых нужно удалить регистрацию изменений, если обмен успешен  
//  МассивКартинок			 - 	 Массив картинок, для которых нужно удалить регистрацию изменений, если обмен успешен 
//  МассивФайлов			 - 	 Массив файлов, для которых нужно удалить регистрацию изменений, если обмен успешен 
Процедура УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, МассивСтрок)
	
	Если Успешно тогда
		НаборЗаписей = РегистрыСведений.Б_Битрикс24_1С_ПакетныйОбмен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пакет.Установить(Пакет);
		НаборЗаписей.Отбор.НастройкаОбмена.Установить(ПараметрыОбмена.Ссылка);
		НаборЗаписей.Отбор.Операция.Установить(Операция);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если Успешно  тогда
		
		Для Каждого Данные Из МассивСтрок Цикл
			
			ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные.Объект);
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

