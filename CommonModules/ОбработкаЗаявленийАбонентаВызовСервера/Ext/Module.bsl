////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обработка заявлений абонента на подключение".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция СледующееЗаявлениеТребующееРеакцииПользователя() Экспорт
	
	Заявления = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка
	|ИЗ
	|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|	ЗаявлениеАбонентаСпецоператораСвязи.Статус В (&Одобрено, &Отклонено)
	|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
	|	И ЗаявлениеАбонентаСпецоператораСвязи.Ответственный = &Ответственный
	|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка В (&ЗаявленияТребующиеНапоминанияПозже)";
	
	Запрос.УстановитьПараметр("Ответственный", 	Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Одобрено", 		Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Запрос.УстановитьПараметр("Отклонено", 		Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
	
	Запрос.УстановитьПараметр("ЗаявленияТребующиеНапоминанияПозже", ЗаявленияТребующиеНапоминанияПозже());
	
	Попытка
	
		РезультатЗапроса 	= Запрос.Выполнить();
		Выборка 			= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	
	Исключение
		
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Произошла ошибка, при попытке доступа к документу ""Заявление абонента оператора электронного документооборота"": %1.
			|Возможно нет прав доступа к документу!'"),ОписаниеОшибки());
			
		Возврат Новый Массив;
		
	КонецПопытки;
	
	Возврат Новый Массив;
		
КонецФункции

Процедура ВключитьОтслеживаниеИзмененияСтатусаЗаявления(ДокументЗаявление) Экспорт
	
	Если ДокументЗаявление.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Повторный запуск задания по одному заявлению вызывает ошибку.
		Задания = ЗаданияПоЗаявлению(ДокументЗаявление);
		Если Задания.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
			Интервал = 30;
		Иначе
			Интервал = 600;
		КонецЕсли;
		
		// Запускаем отслеживание изменения состояния
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораВТечениеДня  	= Интервал;
		Расписание.ПериодПовтораДней 			= 1;
		
		Параметры = Новый Массив;
		Параметры.Добавить(ДокументЗаявление);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", 	Метаданные.РегламентныеЗадания.ОбработкаЗаявленийАбонента);
		ПараметрыЗадания.Вставить("Ключ", 			КлючЗадания(ДокументЗаявление));
		ПараметрыЗадания.Вставить("Параметры", 		Параметры);
		ПараметрыЗадания.Вставить("Расписание", 	Расписание);
		ПараметрыЗадания.Вставить("Использование", 	Истина);
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 		10);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 	3);
		ПараметрыЗадания.Вставить("Наименование", 	НСтр("ru = 'Отслеживание заявления '") + ДокументЗаявление.Номер + НСтр("ru = ' по 1С-Отчетности'"));
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задания = ЗаданияПоЗаявлению(ДокументЗаявление);
	Для каждого Задание Из Задания Цикл
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			// В модели сервиса идентификатором является ссылка на элемент справочника
			// очередь заданий областей данных.
			Идентификатор = Задание.Идентификатор;
		Иначе
			// В коробке идентификатор - уникальный идентификатор регламентного задания.
			Идентификатор = Задание.УникальныйИдентификатор;
		КонецЕсли;
		
		РегламентныеЗаданияСервер.УдалитьЗадание(Идентификатор);
	КонецЦикла;

КонецПроцедуры
 
Функция ПолучитьИРазобратьОтветНаЗаявление(
		Знач ДокументЗаявление,
		ЭтоВызовИзМастера = Ложь, 
		ТекстОшибокДляМастера = "",
		ОбновитьЗаявление = Ложь) Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 					Ложь);
	Результат.Вставить("Статус", 						ДокументЗаявление.Статус);
	Результат.Вставить("СтатусКомментарий", 			ДокументЗаявление.СтатусКомментарий);
	Результат.Вставить("ОтпечатокСертификатаИзОтвета", 	"");
	Результат.Вставить("ИдентификаторАбонента", 		"");
	Результат.Вставить("ПовторятьСоединение", 			Истина);
	Результат.Вставить("УдалосьСоединиться", 			Ложь);
	Результат.Вставить("СтатусИзменился", 				Ложь);
	
	РезультатОбмена = ОбменССерверомПолучитьОтвет(
		ДокументЗаявление,
		ЭтоВызовИзМастера, 
		ТекстОшибокДляМастера); 
		
	Результат.Вставить("ПовторятьСоединение", 	РезультатОбмена.ПовторятьСоединение);
	Результат.Вставить("УдалосьСоединиться",	РезультатОбмена.УдалосьСоединиться);
	
	ОтветПолучен = РезультатОбмена.Выполнено;
		
	Если ОтветПолучен Тогда
		
		РезультатРазбораОтвета = РегистрацияРазобратьОтвет(
			ДокументЗаявление,
			РезультатОбмена,
			ЭтоВызовИзМастера, 
			ТекстОшибокДляМастера);
			
		ОтветРазобран = РезультатРазбораОтвета.Выполнено;
		
		Результат.Вставить("Статус", 			РезультатРазбораОтвета.Статус);
		Результат.Вставить("СтатусКомментарий", РезультатРазбораОтвета.СтатусКомментарий);
		
		Если ОтветРазобран Тогда
			
			Результат.Вставить("Выполнено", 					Истина);
			Результат.Вставить("ОтпечатокСертификатаИзОтвета",	РезультатРазбораОтвета.ОтпечатокСертификатаИзОтвета);
			Результат.Вставить("ИдентификаторАбонента", 		РезультатРазбораОтвета.ИдентификаторАбонента);
			Результат.Вставить("СтатусИзменился", 				РезультатРазбораОтвета.Статус <> ДокументЗаявление.Статус);
			
			Если ОбновитьЗаявление Тогда
				РеквизитыДляЗаписи = Новый Структура();
				РеквизитыДляЗаписи.Вставить("СтатусКомментарий", 	РезультатРазбораОтвета.СтатусКомментарий);
				РеквизитыДляЗаписи.Вставить("ДатаПолученияОтвета", 	РезультатОбмена.ДатаОтвета);
				РеквизитыДляЗаписи.Вставить("Статус", 				РезультатРазбораОтвета.Статус);
				
				ОбновитьРеквизитыЗаявления(ДокументЗаявление, РеквизитыДляЗаписи);
			КонецЕсли;
			
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(РезультатОбмена.ИмяКаталогаСОтветом);
		
	ИначеЕсли РезультатОбмена.УдалосьСоединиться И НЕ ОтветПолучен Тогда 
		
		Если ОбновитьЗаявление Тогда
			РеквизитыДляЗаписи = Новый Структура();
			РеквизитыДляЗаписи.Вставить("СтатусКомментарий", 	РезультатОбмена.СтатусКомментарий);
			РеквизитыДляЗаписи.Вставить("ДатаПолученияОтвета", 	РезультатОбмена.ДатаОтвета);
			РеквизитыДляЗаписи.Вставить("Статус", 				РезультатОбмена.Статус);
			
			ОбновитьРеквизитыЗаявления(ДокументЗаявление, РеквизитыДляЗаписи);
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(РезультатОбмена.ИмяКаталогаСОтветом);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ОтправленныеЗаявленияАбонентов(
		ДокументЗаявление 		= Неопределено,
		ОрганизацияЗаявлений 	= Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка
	|ИЗ
	|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|	НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|	И ЗаявлениеАбонентаСпецоператораСвязи.Статус В (&Отправлено, &Отклонено, &Одобрено)
	|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
	|	И ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
	|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка = &ДокументЗаявление";
	
	Запрос.УстановитьПараметр("Отправлено", 	Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Запрос.УстановитьПараметр("Одобрено", 		Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Запрос.УстановитьПараметр("Отклонено", 		Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
	
	Если ОрганизацияЗаявлений = Неопределено Тогда
		Текст = СтрЗаменить(Текст, "И ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация", "");
	Иначе
		Запрос.УстановитьПараметр("Организация", ОрганизацияЗаявлений);
	КонецЕсли;
	
	Если ДокументЗаявление = Неопределено Тогда
		Текст = СтрЗаменить(Текст, "И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка = &ДокументЗаявление", "");
	Иначе
		Запрос.УстановитьПараметр("ДокументЗаявление", ДокументЗаявление);
	КонецЕсли;
	
	Запрос.Текст = Текст;
	
	Попытка
		
		Результат = Запрос.Выполнить();
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Исключение
		
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Произошла ошибка, при попытке доступа к документу ""Заявление абонента оператора электронного документооборота"": %1.
			|Возможно нет прав доступа к документу!'"),ОписаниеОшибки());
			
		Возврат Новый Массив;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновитьРеквизитыЗаявления(Документ, РеквизитыДокумента) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документ;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Копируем в заявление все новые свойства.
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		// ИдентификаторКлючевогоКонтейнера
		Если РеквизитыДокумента.Свойство("ИдентификаторКлючевогоКонтейнера") Тогда
			
			Если ЗначениеЗаполнено(ДокументОбъект.УчетнаяЗапись) Тогда 
				ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.УчетнаяЗапись);
				УчетнаяЗапись = ДокументОбъект.УчетнаяЗапись.ПолучитьОбъект();
				УчетнаяЗапись.ИдентификаторДокументооборота = РеквизитыДокумента.ИдентификаторКлючевогоКонтейнера;
				УчетнаяЗапись.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		// АдресЗаявления
		Если РеквизитыДокумента.Свойство("АдресЗаявления") Тогда
			
			АдресЗаявления = РеквизитыДокумента.АдресЗаявления;
			
			Если АдресЗаявления <> Неопределено Тогда
				ДокументОбъект.ТекстОтправленногоЗаявления = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресЗаявления));
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка заявлений.Обновление статуса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ЭлектроннаяПодписьВМоделиСервисаБРО.ПодробноеПредставлениеИнформацияОбОшибке(ИнформацияОбОшибке()));
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовЗаявления(Документ) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СпецОператорСвязи", 					Документ.СпецОператорСвязи);
	ДополнительныеПараметры.Вставить("ПутьКонтейнерЗакрытогоКлюча", 		Документ.ПутьКонтейнерЗакрытогоКлюча);
	ДополнительныеПараметры.Вставить("СтатусКомментарий", 					Документ.СтатусКомментарий);
	ДополнительныеПараметры.Вставить("ИдентификаторДокументооборота", 		Документ.ИдентификаторДокументооборота);
	ДополнительныеПараметры.Вставить("ДатаПолученияОтвета", 				Документ.ДатаПолученияОтвета);
	ДополнительныеПараметры.Вставить("Статус", 								Документ.Статус);
	ДополнительныеПараметры.Вставить("Организация", 						Документ.Организация);
	ДополнительныеПараметры.Вставить("НастройкаЗавершена", 					Документ.НастройкаЗавершена);
	ДополнительныеПараметры.Вставить("Дата", 								Документ.Дата);
	ДополнительныеПараметры.Вставить("Номер", 								Документ.Номер);
	ДополнительныеПараметры.Вставить("ЭлектроннаяПодписьВМоделиСервиса", 	Документ.ЭлектроннаяПодписьВМоделиСервиса);
	ДополнительныеПараметры.Вставить("ТелефонМобильныйДляАвторизации", 		Документ.ТелефонМобильныйДляАвторизации);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьИОтправитьЗаявлениеВМоделиСервиса(ДокументЗаявление) Экспорт
	
	УдалосьВыгрузитьЗаявление = ОбработкаЗаявленийАбонента.ВыгрузитьЗаявлениеАбонентаВМоделиСервиса(ДокументЗаявление);
	
	Если УдалосьВыгрузитьЗаявление Тогда
		
		Статус 					= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
		ДатаОтправкиЗаявления 	= ТекущаяДатаСеанса();

		РеквизитыДокументаДляЗаписи = Новый Структура;
		РеквизитыДокументаДляЗаписи.Вставить("ПутьКонтейнерЗакрытогоКлюча", Неопределено);
		РеквизитыДокументаДляЗаписи.Вставить("Статус",						Статус);
		РеквизитыДокументаДляЗаписи.Вставить("ДатаОтправкиЗаявления",		ДатаОтправкиЗаявления);
		РеквизитыДокументаДляЗаписи.Вставить("СтатусКомментарий", 			"");
		
		ОбновитьРеквизитыЗаявления(ДокументЗаявление.Ссылка, РеквизитыДокументаДляЗаписи);
			
	Иначе
		
		Статус 					= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено");
		ДатаОтправкиЗаявления 	= ТекущаяДатаСеанса();
		
	КонецЕсли;
		
	Возврат Новый Структура("Статус,ДатаОтправкиЗаявления", Статус, ДатаОтправкиЗаявления);
		
КонецФункции

Функция ОбработатьИзменениеСтатусаЗаявленияАбонентаВМоделиСервиса(ДокументЗаявление) Экспорт
	
	Попытка
		
		Результат = МодульУчетаЗаявленийАбонентаВМоделиСервиса.ПолучитьСтатус(ДокументЗаявление.ИдентификаторДокументооборота);
		
		Если Результат.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено
			И Результат.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Электронная подпись в модели сервиса.Обработка заявлений.Обновление статуса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	РеквизитыДляЗаписи = Новый Структура();
	РеквизитыДляЗаписи.Вставить("Статус", 				Результат.Статус);
	РеквизитыДляЗаписи.Вставить("ДатаПолученияОтвета", 	ТекущаяДатаСеанса());
	
	Если Результат.Свойство("Пояснение") Тогда
		РеквизитыДляЗаписи.Вставить("СтатусКомментарий", Результат.Пояснение);
	КонецЕсли;
	
	Если Результат.Свойство("ИдентификаторКлючевогоКонтейнера") Тогда
		РеквизитыДляЗаписи.Вставить("ИдентификаторКлючевогоКонтейнера", Результат.ИдентификаторКлючевогоКонтейнера);
	КонецЕсли;
	
	Возврат ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(ДокументЗаявление, РеквизитыДляЗаписи);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаданияПоЗаявлению(ДокументЗаявление)
	
	// Задание ищется по ключу - ссылка на заявление абонента
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Ключ", КлючЗадания(ДокументЗаявление));
	
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ДополнительныеПараметры);
	
	Возврат Задания;
	
КонецФункции

Функция КлючЗадания(ДокументЗаявление)
	
	Возврат ДокументЗаявление.ИдентификаторДокументооборота;
	
КонецФункции

Функция ОбменССерверомПолучитьОтвет(ДокументЗаявление, ЭтоВызовИзМастера, ТекстОшибокДляМастера)
	
	ИдентификаторДокументооборота 	= ДокументЗаявление.ИдентификаторДокументооборота;
	СпецоператорСвязи 				= ДокументЗаявление.СпецоператорСвязи;
	
	ИмяКаталогаСОтветомНаСервере 	= ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	ИмяФайлаОтвета 					= ИмяКаталогаСОтветомНаСервере + "ответ.zip";
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 			Ложь);
	Результат.Вставить("ДатаОтвета", 			Неопределено);
	Результат.Вставить("СтатусКомментарий", 	ДокументЗаявление.СтатусКомментарий);
	Результат.Вставить("ИмяКаталогаСОтветом", 	ИмяКаталогаСОтветомНаСервере);
	Результат.Вставить("ИмяФайлаОтвета", 		ИмяФайлаОтвета);
	Результат.Вставить("Статус", 				ДокументЗаявление.Статус);
	Результат.Вставить("УдалосьСоединиться", 	Ложь);
	Результат.Вставить("ПовторятьСоединение", 	Истина);
	
	Сервис = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОбменССерверомСоздатьСервис(
		СпецоператорСвязи, 
		ЭтоВызовИзМастера, 
		ТекстОшибокДляМастера, , 
		Ложь);
		
	Если Сервис = Неопределено Тогда
		Результат.Вставить("СтатусКомментарий", НСтр("ru = 'Не удалось соединиться с сервером'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		XDTOРезультат = Сервис.ReceivePacket(Строка(идентификаторДокументооборота));
	Исключение
		Результат.Вставить("СтатусКомментарий", НСтр("ru = 'Не удалось соединиться с сервером'"));
		Возврат Результат;
	КонецПопытки;
	
	Результат.Вставить("УдалосьСоединиться", 	Истина);
	Результат.Вставить("ПовторятьСоединение", 	Ложь);
	
	ЧтениеXML 		= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XDTOРезультат);
	
	ПостроительДОМ 	= Новый ПостроительDOM();
	ДОМ 			= ПостроительДОМ.Прочитать(ЧтениеXML);
	УзелDOM 		= ДОМ.ПолучитьЭлементыПоИмени("code");
	кодРезультата 	= УзелDOM[0].ТекстовоеСодержимое;
	
	Результат.Вставить("ДатаОтвета", ТекущаяДатаСеанса());
	
	Если кодРезультата = "0" Тогда
		УзелDOM = ДОМ.ПолучитьЭлементыПоИмени("packet");
		
		Если УзелDOM.Количество() > 0 Тогда
			
			ДвоичныеДанные = Base64Значение(УзелDOM[0].ТекстовоеСодержимое);
			ДвоичныеДанные.Записать(ИмяФайлаОтвета);
			ЧтениеXML.Закрыть();
			
			Результат.Вставить("Выполнено", Истина);
			
		Иначе
			
			СтатусКомментарий = НСтр("ru = 'При получении ответа возникла ошибка: ответ нечитаем'");
			Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
			
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
				СтатусКомментарий,
				ЭтоВызовИзМастера,
				ТекстОшибокДляМастера, 
				НЕ ЭтоВызовИзМастера);
				
		КонецЕсли;
		
	ИначеЕсли Кодрезультата = "1" Тогда
		
		СтатусКомментарий = НСтр("ru = 'Заявление еще не обработано сервером, попробуйте позже.'");
		Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
			СтатусКомментарий,
			ЭтоВызовИзМастера,
			ТекстОшибокДляМастера, 
			НЕ ЭтоВызовИзМастера);

	Иначе
		
		УзелDOM = ДОМ.ПолучитьЭлементыПоИмени("errorMessage");
		Если УзелDOM.Количество() > 0 Тогда
			сообщениеОшибки = УзелDOM[0].ТекстовоеСодержимое;
			СтатусКомментарий = НСтр("ru = 'При получении ответа возникла ошибка: '") + сообщениеОшибки;
		Иначе
			СтатусКомментарий = НСтр("ru = 'При получении ответа возникла ошибка: '") + кодРезультата;
		КонецЕсли;
		
		Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
			СтатусКомментарий,
			ЭтоВызовИзМастера,
			ТекстОшибокДляМастера, 
			НЕ ЭтоВызовИзМастера);

	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция РегистрацияРазобратьОтвет(ДокументЗаявление, РезультатОбмена, ЭтоВызовИзМастера, ТекстОшибокДляМастера)
		
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 					Ложь);
	Результат.Вставить("СтатусКомментарий", 			"");
	Результат.Вставить("Статус", 						ДокументЗаявление.Статус);
	Результат.Вставить("ИдентификаторАбонента", 		"");
	Результат.Вставить("ОтпечатокСертификатаИзОтвета", 	"");
	
	ИмяКаталогаСОтветом 	= РезультатОбмена.ИмяКаталогаСОтветом;
	ИмяФайлаОтвета 			= РезультатОбмена.ИмяФайлаОтвета; 
		
	Попытка
		Архив1 = Новый ЧтениеZipФайла(ИмяФайлаОтвета);
		
		Для Счетчик = 0 по Архив1.Элементы.Количество() - 1 Цикл
			
			Если Архив1.Элементы[Счетчик].расширение = "bin" Тогда
				
				Архив1.Извлечь(Архив1.Элементы[Счетчик], ИмяКаталогаСОтветом);
				Архив2 = Новый ЧтениеZipФайла(ИмяКаталогаСОтветом + Архив1.Элементы[Счетчик].имя);
				Архив2.Извлечьвсе(ИмяКаталогаСОтветом);
				
				ДокументDOM = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗагрузитьФайлXML(ИмяКаталогаСОтветом + "file");
				
				// Отпечаток
				ОтпечатокСертификатаИзОтвета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"ОтпечатокСертификата");
				Результат.Вставить("ОтпечатокСертификатаИзОтвета", ОтпечатокСертификатаИзОтвета);
				
				// Комментарий
				Результат.Вставить("СтатусКомментарий", ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"Результат"));
				
				// Успешность регистрации заявления
				РезультатРегистрации = Булево(ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"РегистрацияУспешна"));
				Если РезультатРегистрации Тогда
					
					ИдентификаторАбонента = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"ИдентификаторАбонента");
					
					Результат.Вставить("Статус", 				Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
					Результат.Вставить("ИдентификаторАбонента",	ИдентификаторАбонента);
					Результат.Вставить("Выполнено", 			Истина);
					
					Возврат Результат;
					
				Иначе
					
					Результат.Вставить("Статус", 	Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
					Результат.Вставить("Выполнено", Истина);
					
					ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
									НСтр("ru = 'Заявление отклонено'"),
									ЭтоВызовИзМастера,
									ТекстОшибокДляМастера, 
									не ЭтоВызовИзМастера);
									
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		СтатусКомментарий = НСтр("ru = 'Ошибка. Не удалось разобрать ответ сервера.'");
		
		Результат.Вставить("Статус", 			Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
		Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
						СтатусКомментарий,
				 		ЭтоВызовИзМастера,
						ТекстОшибокДляМастера, 
						не ЭтоВызовИзМастера);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьЗаявленияТребующиеНапоминанияПозжеСПрошедшимСроком()
	
	Заявления = ХранилищеОбщихНастроек.Загрузить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже());
	
	Если Заявления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Количество 		= Заявления.Количество();
	ТекущаяСтрока 	= 0;

	Пока ТекущаяСтрока <= Количество - 1 Цикл
		
		Если Заявления[ТекущаяСтрока].Дата < ТекущаяДатаСеанса() Тогда
			Заявления.Удалить(ТекущаяСтрока);
			Количество = Количество - 1;
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + 1;
		КонецЕсли;
		
	Конеццикла; 
	
	ХранилищеОбщихНастроек.Сохранить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже(), , Заявления);

КонецПроцедуры

Функция ЗаявленияТребующиеНапоминанияПозже() Экспорт
	
	ОчиститьЗаявленияТребующиеНапоминанияПозжеСПрошедшимСроком();
	Заявления = ХранилищеОбщихНастроек.Загрузить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже());
	
	Если Заявления = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Заявления.ВыгрузитьКолонку("Заявление");
	КонецЕсли;

КонецФункции

#КонецОбласти
