////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен с кассовым сервером Штрих-М".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Документы

// Выполняет потоковый обмен данными с сервером Штрих-М.
//
Процедура ОбменДаннымиССерверомШтрихМ() Экспорт
	
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПотоковыйОбменДаннымиССерверомШтрихМ(Настройки);
КонецПроцедуры

// Выполняет запрос кассовых документов для кассовых аппаратов за период.
//
// Параметры:
//  ИнформацияПоКассовымАппаратам - ТаблицаЗначений - информация по ККМ для подключения, колонки:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    ДатаНачалаЗапросаЧеков - Дата - дата начала для запроса документов;
//    ДатаОкончанияЗапросаЧеков - Дата - дата завершения для запроса документов;
//    Результат - Строка - строка результата обмена;
//    СообщениеОбмена - Строка - строка сообщения обмена.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ПолучитьКассовыеДокументыДляКассовыхАппаратов(ИнформацияПоКассовымАппаратам, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина, ОбластьДанных = 0) Экспорт
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Если Настройки.НетПодключенныхКасс Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нет подключенных ККМ.'", КодЯзыка);
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Не настроен обмен с сервером.'", КодЯзыка);
			ЕстьОшибки = Истина;
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Документы для кассовых аппаратов.'", КодЯзыка),
				УровеньЖурнала,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКассовымСерверомШтрихМКлиентСервер.HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Документы для кассовых аппаратов.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ИнформацияПоКассовымАппаратам.Колонки.Найти("Ссылка") = Неопределено Тогда
		ИнформацияПоКассовымАппаратам.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Для каждого РеквизитыКассы Из ИнформацияПоКассовымАппаратам Цикл
		
		ЗарегистрированнаяКасса = ЗарегистрированнаяКассаНаСервере(РеквизитыКассы, Ложь, СообщениеОбОшибке, ОбластьДанных);
		Если ЗарегистрированнаяКасса = Неопределено Тогда
			ЕстьОшибки = Истина;
			Если ВестиЛог Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Документы для кассовых аппаратов.'", КодЯзыка),
					УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
			КонецЕсли;
			Возврат;
		Иначе
			РеквизитыКассы.Ссылка = ЗарегистрированнаяКасса;
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьКассовыеДокументыДляКасс(Соединение.HTTPСоединение, Настройки, РеквизитыКассы, ЕстьОшибки, СообщениеОбОшибке);
КонецПроцедуры

#КонецОбласти

#Область Кассы

// Выполняет полную очистку кассовых аппаратов от товаров и цен.
//
// Параметры:
//  ИнформацияПоКассовымАппаратам - ТаблицаЗначений - информация по ККМ для подключения, колонки:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    Результат - Строка - строка результата обмена;
//    СообщениеОбмена - Строка - строка сообщения обмена.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ВыполнитьОчисткуТоваровНаКассовыхАппаратах(ИнформацияПоКассовымАппаратам, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина, ОбластьДанных = 0) Экспорт
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Если Настройки.НетПодключенныхКасс Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нет подключенных ККМ.'", КодЯзыка);
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Не настроен обмен с сервером.'", КодЯзыка);
			ЕстьОшибки = Истина;
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка всех товаров на кассовых аппаратах.'", КодЯзыка),
				УровеньЖурнала,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКассовымСерверомШтрихМКлиентСервер.HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка всех товаров на кассовых аппаратах.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ИнформацияПоКассовымАппаратам.Колонки.Найти("Ссылка") = Неопределено Тогда
		ИнформацияПоКассовымАппаратам.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Для каждого Строка Из ИнформацияПоКассовымАппаратам Цикл
		ЗарегистрированнаяКасса = ЗарегистрированнаяКассаНаСервере(Строка, Ложь, СообщениеОбОшибке, ОбластьДанных);
		Если ЗарегистрированнаяКасса = Неопределено Тогда
			ЕстьОшибки = Истина;
			Если ВестиЛог Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка всех товаров на кассовых аппаратах.'", КодЯзыка),
					УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
			КонецЕсли;
			Возврат;
		Иначе
			Строка.Ссылка = ЗарегистрированнаяКасса;
		КонецЕсли;
	КонецЦикла;
	
	Настройки.Вставить("ТипМетода", "goods_clear");
	ОчиститьТовары(Соединение.HTTPСоединение, Настройки, ИнформацияПоКассовымАппаратам, ЕстьОшибки, СообщениеОбОшибке);
КонецПроцедуры

// Выполняет подключение/отключение/переподключение кассовых аппаратов.
//
// Параметры:
//  ИнформацияПоКассовымАппаратам - ТаблицаЗначений - информация по ККМ для подключения, колонки:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    Токен - Строка - токен подключения кассового аппарата;
//    ИдентификаторОбластиШтрих - Строка - идентификатор области на сервере Штрих(agent_node_id).
//  Режим - Число - метод, который необходимо выполнить с кассовыми аппаратами.
//    1 - Подключение;
//    2 - Отключение;
//    3 - Переподключение.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ВыполнитьПодключениеКассовыхАппратов(ИнформацияПоКассовымАппаратам, Режим, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина, ОбластьДанных = 0) Экспорт
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ(Ложь);
	
	Создавать = Истина;
	Если Режим = 1 Тогда
		Настройки.Вставить("ТипМетода", "cashregister_authorize");
		ЗаголовокЖурнала = НСтр("ru = 'Подключение кассовых аппаратов.'", КодЯзыка);
	ИначеЕсли Режим = 2 Тогда
		Настройки.Вставить("ТипМетода", "cashregister_remove_from_agent");
		ЗаголовокЖурнала = НСтр("ru = 'Отключение кассовых аппаратов.'", КодЯзыка);
		//Создавать = Ложь;
	Иначе
		Настройки.Вставить("ТипМетода", "cashregister_change_agent_node_id");
		ЗаголовокЖурнала = НСтр("ru = 'Переподключение кассовых аппаратов.'", КодЯзыка);
	КонецЕсли;
	
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Если Настройки.НетПодключенныхКасс Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нет подключенных ККМ.'", КодЯзыка);
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Не настроен обмен с сервером.'", КодЯзыка);
			ЕстьОшибки = Истина;
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение кассовых аппаратов.'", КодЯзыка),
				УровеньЖурнала,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКассовымСерверомШтрихМКлиентСервер.HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение кассовых аппаратов.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Проверяем, что установлен идентификатор области (agent_node_id).
	Если НЕ ЗначениеЗаполнено(Настройки.ИдентификаторОбластиНаСервереШтрихМ) Тогда
		
		// Условие возможно при сплите/восстановлении копии базы данных.
		ПолучитьНовыйИдентификаторОбласти(Соединение.HTTPСоединение, Настройки, ЕстьОшибки, СообщениеОбОшибке);
		Если ЕстьОшибки Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение идентификатора области.'", КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
			Возврат;
		КонецЕсли;
		ИдентификаторОбласти = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройки.НастройкаОбмена,
			"ИдентификаторОбластиНаСервереШтрихМ");
		Если ЗначениеЗаполнено(ИдентификаторОбласти) Тогда
			Настройки.Вставить("ИдентификаторОбластиНаСервереШтрихМ", ИдентификаторОбласти);
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение идентификатора области.'", КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Не установлен идентификатор области.'", КодЯзыка));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИнформацияПоКассовымАппаратам.Колонки.Найти("Ссылка") = Неопределено Тогда
		ИнформацияПоКассовымАппаратам.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Для каждого Строка Из ИнформацияПоКассовымАппаратам Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторОбластиШтрих) Тогда
			Строка.ИдентификаторОбластиШтрих = Настройки.ИдентификаторОбластиНаСервереШтрихМ;
		КонецЕсли;
		ЗарегистрированнаяКасса = ЗарегистрированнаяКассаНаСервере(Строка, Создавать, СообщениеОбОшибке, ОбластьДанных);
		Если НЕ ЗначениеЗаполнено(ЗарегистрированнаяКасса) Тогда
			ЕстьОшибки = Истина;
			Если ВестиЛог Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение кассовых аппаратов.'", КодЯзыка),
					УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
			КонецЕсли;
			Возврат;
		Иначе
			Строка.Ссылка = ЗарегистрированнаяКасса;
		КонецЕсли;
	КонецЦикла;
	
	ЗарегистрироватьКассы(Соединение.HTTPСоединение, Настройки, ИнформацияПоКассовымАппаратам, ЕстьОшибки, СообщениеОбОшибке);
КонецПроцедуры

#КонецОбласти

#Область Товары

// Выполняет выборочную очистку кассовых аппаратов от товаров и цен.
//
// Параметры:
//  ТоварыИКассы - Структура - содержит:
//    Кассы - ТаблицаЗначений - информация по ККМ для подключения, колонки:
//      РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//      Результат - Строка - строка результата обмена;
//      СообщениеОбмена - Строка - строка сообщения обмена.
//    Товары - Массив - коды товаров для очистки;
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ВыполнитьВыборочнуюОчисткуТоваровНаКассовыхАппаратах(ТоварыИКассы, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина, ОбластьДанных = 0) Экспорт
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Если Настройки.НетПодключенныхКасс Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нет подключенных ККМ.'", КодЯзыка);
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Не настроен обмен с сервером.'", КодЯзыка);
			ЕстьОшибки = Истина;
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка всех товаров на кассовых аппаратах.'", КодЯзыка),
				УровеньЖурнала,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКассовымСерверомШтрихМКлиентСервер.HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка всех товаров на кассовых аппаратах.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КассыДляОчистки = ТоварыИКассы.Кассы;
	Если КассыДляОчистки.Колонки.Найти("Ссылка") = Неопределено Тогда
		КассыДляОчистки.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Для каждого Строка Из КассыДляОчистки Цикл
		ЗарегистрированнаяКасса = ЗарегистрированнаяКассаНаСервере(Строка, Ложь, СообщениеОбОшибке, ОбластьДанных);
		Если ЗарегистрированнаяКасса = Неопределено Тогда
			ЕстьОшибки = Истина;
			Если ВестиЛог Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка всех товаров на кассовых аппаратах.'", КодЯзыка),
					УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
			КонецЕсли;
			Возврат;
		Иначе
			Строка.Ссылка = ЗарегистрированнаяКасса;
		КонецЕсли;
	КонецЦикла;
	
	ТоварыИКассы.Вставить("КассыДляОчистки", КассыДляОчистки);
	
	Настройки.Вставить("ТипМетода", "goods_clear");
	ОчиститьТоварыВыборочно(Соединение.HTTPСоединение, Настройки, ТоварыИКассы, ЕстьОшибки, СообщениеОбОшибке);
КонецПроцедуры

// Выполняет выгрузку товаров и групп товаров на кассовые аппараты.
//
// Параметры:
//  ТоварыИКассы - ТаблицаЗначений - колонки:
//    ГруппыТоваровДляРегистрации - ТаблицаЗначений - данные о товарных группах, колонки:
//      code - Строка - код группы товаров;
//      name - Строка - наименование группы товаров;
//      parent_code - Строка - код родительской группы товаров.
//
//    ТоварыДляРегистрации - ТаблицаЗначений - данные о товарах, колонки:
//      code - Строка - код товара;
//      name - Строка - наименование товара;
//      group_code - Строка - код родительской группы товара;
//      barcode - Строка - штрихкод товара;
//      name_for_cashregister - Строка - представление в чеке на ккм;
//      article - Строка - артикул товара;
//      price - Число - цена товара;
//      tax_code - Число - идентификатор ставки НДС;
//      fractional_quantity - Булево - использовать дробное количество в подборе.
//
//    КассыДляРегистрации - ТаблицаЗначений - данные о кассах, колонки:
//      cashregister_number - Строка - регистрационный номер ККМ.
//
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ВыполнитьВыгрузкуТоваров(ТоварыИКассы, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина, ОбластьДанных = 0) Экспорт
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Если Настройки.НетПодключенныхКасс Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нет подключенных ККМ.'", КодЯзыка);
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Не настроен обмен с сервером.'", КодЯзыка);
			ЕстьОшибки = Истина;
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузка товаров на кассовых аппаратах.'", КодЯзыка),
				УровеньЖурнала,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКассовымСерверомШтрихМКлиентСервер.HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузка товаров. Соединение с сервером.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ТипМетода", "goods_upload");
	Для Каждого СтрокаДанных Из ТоварыИКассы Цикл
		
		ИнформацияПоКассовымАппаратам = СтрокаДанных.КассыДляРегистрации;
		
		Если ИнформацияПоКассовымАппаратам.Колонки.Найти("Ссылка") = Неопределено Тогда
			ИнформацияПоКассовымАппаратам.Колонки.Добавить("Ссылка");
		КонецЕсли;
		
		Для каждого Строка Из ИнформацияПоКассовымАппаратам Цикл
			ЗарегистрированнаяКасса = ЗарегистрированнаяКассаНаСервере(Строка, Ложь, СообщениеОбОшибке, ОбластьДанных);
			Если ЗарегистрированнаяКасса = Неопределено Тогда
				ЕстьОшибки = Истина;
				Если ВестиЛог Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузка товаров. Зарегистрированные кассы.'", КодЯзыка),
						УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
				КонецЕсли;
				Возврат;
			Иначе
				Строка.Ссылка = ЗарегистрированнаяКасса;
			КонецЕсли;
		КонецЦикла;
		
		ЗарегистрироватьТовары(Соединение.HTTPСоединение, Настройки, СтрокаДанных, ЕстьОшибки, СообщениеОбОшибке);
		Если ЕстьОшибки Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузка товаров. Регистрация товаров.'", КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
			ЕстьОшибки = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Выполняет запрос о состоянии загрузки/очистки товаров на ККМ.
//
// Параметры:
//  ИнформацияПоКассовымАппаратам - ТаблицаЗначений - информация по ККМ для подключения, колонки:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    Результат - Строка - строка результата обмена;
//    СообщениеОбмена - Строка - строка сообщения обмена.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ПроверитьСтатусЗагрузкиТоваровНаКассовыхАппаратах(ИнформацияПоКассовымАппаратам, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Если Настройки.НетПодключенныхКасс Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нет подключенных ККМ.'", КодЯзыка);
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Не настроен обмен с сервером.'", КодЯзыка);
			ЕстьОшибки = Истина;
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузка товаров на кассовых аппаратах.'", КодЯзыка),
				УровеньЖурнала,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКассовымСерверомШтрихМКлиентСервер.HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка актуальности товаров.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из ИнформацияПоКассовымАппаратам Цикл
		КассыДляРегистрации = Строка.КассыДляРегистрации;
		Если КассыДляРегистрации.Колонки.Найти("Ссылка") = Неопределено Тогда
			КассыДляРегистрации.Колонки.Добавить("Ссылка");
		КонецЕсли;
		ЗаменитьТаблицу = Ложь;
		Для каждого СтрокаКасс Из КассыДляРегистрации Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаКасс.Ссылка) Тогда
				ЗарегистрированнаяКасса = ЗарегистрированнаяКассаНаСервере(СтрокаКасс, Ложь, СообщениеОбОшибке);
				Если ЗарегистрированнаяКасса = Неопределено Тогда
					ЕстьОшибки = Истина;
					Если ВестиЛог Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка всех товаров на кассовых аппаратах.'", КодЯзыка),
						УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
					КонецЕсли;
					Возврат;
				Иначе
					СтрокаКасс.Ссылка = ЗарегистрированнаяКасса;
					ЗаменитьТаблицу = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗаменитьТаблицу Тогда
			Строка.КассыДляРегистрации = КассыДляРегистрации;
		КонецЕсли;
	КонецЦикла;
	
	Настройки.Вставить("ТипМетода", "goods_upload_status");
	Для каждого Строка Из ИнформацияПоКассовымАппаратам Цикл
		ПроверитьЗагрузкуТоваровККМ(Соединение.HTTPСоединение, Настройки, Строка, ЕстьОшибки, СообщениеОбОшибке);
		Если ЕстьОшибки Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка актуальности товаров.'", КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
			ЕстьОшибки = Ложь;
			СообщениеОбОшибке = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Поддержка_формата_даты_ISO8601

// Возвращает дату из строки формата ISO8601.
//
// Параметры:
//  СтрокаДаты - Строка - строка даты в формате ISO8601.
// Возвращаемое значение:
//  Дата - дата из строки.
//
Функция ДатаИзСтрокиФорматаISO8601(СтрокаДаты) Экспорт
	
	Результат = СокрЛП(СтрокаДаты);
	
	Результат = СтрЗаменить(Результат, "T", "");
	
	Результат = СтрЗаменить(Результат, "-", "");
	Результат = СтрЗаменить(Результат, ":", "");
	
	Возврат Дата(Результат);
КонецФункции

// Возвращает дату, как строку в формата ISO8601.
//
// Параметры:
//  Дата - дата для преобразования.
// Возвращаемое значение:
//  Строка - строка даты в формате ISO8601.
//
Функция ДатаВСтрокуФорматаISO8601(Дата)
	
	Возврат Формат(Дата, "ДФ=yyyy-MM-ddTHH:mm:ss");
КонецФункции

#КонецОбласти

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.ПланыОбмена.ОбменСКассовымСерверомШтрихМ);
	Типы.Добавить(Метаданные.Константы.ИспользоватьОбменССерверомШтрихМ);
	Типы.Добавить(Метаданные.Справочники.ЗарегистрированныеКассы);
КонецПроцедуры

// Вызывается при установке параметров сеанса.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено - имена параметров сеанса.
//
Процедура ВыполнитьДействияПриУстановкеПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Если РольДоступна("АдминистраторСистемы") Тогда
		Если НЕ Константы.ИспользоватьОбменССерверомШтрихМ.Получить() Тогда
			Константы.ИспользоватьОбменССерверомШтрихМ.Установить(Истина);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменССерверомШтрихМ") Тогда
			УзелОбмена = ОбменСКассовымСерверомШтрихМПовтИсп.УзелОбменаШтрих();
		КонецЕсли;
	КонецЕсли;
	ОбменСКассовымСерверомШтрихМПереопределяемый.ВыполнитьДействияПриУстановкеПараметровСеанса();
КонецПроцедуры

// Возвращает признак подключения хотя бы одного кассового аппарата.
//
// Параметры:
//  ИдентификаторОбласти - Строка - идентификатор области на сервере Штрих.
//
// Возвращаемое значение:
//  Булево - Истина, если один из кассовых аппаратов подключен.
//
Функция ЕстьПодключенныеКассы(ИдентификаторОбласти = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗарегистрированныеКассы.Ссылка
	|ИЗ
	|	Справочник.ЗарегистрированныеКассы КАК ЗарегистрированныеКассы
	|ГДЕ
	|	ЗарегистрированныеКассы.СостояниеПодключения = ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.Подключен)
	|	#ТекстУсловие#";
	
	ТекстУсловие = "";
	Если ЗначениеЗаполнено(ИдентификаторОбласти) Тогда
		ТекстУсловие = "И ЗарегистрированныеКассы.ИдентификаторОбластиНаСервереШтрихМ = &ИдентификаторОбласти";
		Запрос.УстановитьПараметр("ИдентификаторОбласти", ИдентификаторОбласти);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловие#", ТекстУсловие);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
КонецФункции

// Записывает сообщение в протокол обмена по кассе.
//
// Параметры:
//  РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//  Сообщение - Строка - строка сообщения;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ЗаписатьВПротоколКассовогоАппарата(РегистрационныйНомер, Сообщение, ОбластьДанных = 0) Экспорт
	
	ИнформацияОКассе = Новый Структура("РегистрационныйНомер", РегистрационныйНомер);
	ЗарегистрированнаяКасса = ЗарегистрированнаяКассаНаСервере(ИнформацияОКассе, Ложь, Сообщение, ОбластьДанных);
	
	Если ЗначениеЗаполнено(ЗарегистрированнаяКасса) Тогда
		КассаОбъект = ЗарегистрированнаяКасса.ПолучитьОбъект();
		Если КассаОбъект <> Неопределено Тогда
			КассаОбъект.СообщениеПриРегистрации = СокрЛП(Прав(КассаОбъект.СообщениеПриРегистрации + Символы.ПС
				+ ТекущаяДатаСеанса()+ " " + Сообщение, 1024));
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КассаОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает вспомогательную кассу.
//
// Параметры:
//  ИнформацияОКассе - Структура, СтрокаТаблицы содержит:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    Токен - Строка - токен подключения кассового аппарата;
//    ИдентификаторОбластиШтрих - Строка - идентификатор области Штрих.
//  Создавать - Булево - флаг создания в случае отсутствия;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
// Возвращаемое значение:
//  ЗарегистрированнаяКасса - СправочникСсылка.ЗарегистрированныеКассы.
//
Функция ЗарегистрированнаяКассаНаСервере(ИнформацияОКассе, Создавать, СообщениеОбОшибке, ОбластьДанных = 0) Экспорт
	
	ЗарегистрированнаяКасса = Неопределено;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ЗарегистрированнаяКасса = Справочники.ЗарегистрированныеКассы.НайтиПоРеквизиту("РегистрационныйНомер",
			ИнформацияОКассе.РегистрационныйНомер);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗарегистрированныеКассы.Ссылка
		|ИЗ
		|	Справочник.ЗарегистрированныеКассы КАК ЗарегистрированныеКассы
		|ГДЕ
		|	ЗарегистрированныеКассы.РегистрационныйНомер = &РегистрационныйНомер
		|	И ЗарегистрированныеКассы.ОбластьДанныхВспомогательныеДанные = &Область");
		Запрос.УстановитьПараметр("РегистрационныйНомер", ИнформацияОКассе.РегистрационныйНомер);
		Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ЗарегистрированнаяКасса = Справочники.ЗарегистрированныеКассы.ПустаяСсылка();
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЗарегистрированнаяКасса = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗарегистрированнаяКасса) Тогда
		Если Создавать Тогда
			ЗарегистрированнаяКасса = НоваяЗарегистрированнаяКасса(ИнформацияОКассе, СообщениеОбОшибке, ОбластьДанных);
		Иначе
			СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Не найдена зарегистрированная касса с рег. номером: %1 '",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ИнформацияОКассе.РегистрационныйНомер);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗарегистрированнаяКасса;
КонецФункции

// Возвращает таблицу значений по переденной стурктуре.
// Если указаны индексы, то устанавливает их.
//
// Параметры:
//  Структура - Структура - где ключ - это имя колонки, значение - тип;
//  МассивИндексов - Массив - массив имен колонок для установки индексов.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ТаблицаЗначенийПоСтруктуре(Знач Структура, Знач МассивИндексов = Неопределено) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для каждого КлючИЗначение Из Структура Цикл
		ТипЗначенияКолонки = Новый Массив;
		ТипЗначенияКолонки.Добавить(ТипЗнч(КлючИЗначение.Значение));
		ТаблицаЗначений.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(ТипЗначенияКолонки));
	КонецЦикла;
	
	Если НЕ МассивИндексов = Неопределено Тогда
		Для каждого Элемент Из МассивИндексов Цикл
			ТаблицаЗначений.Индексы.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
КонецФункции

// Удаляет зарегистрированную кассу.
//
// Параметры:
//  РегистрационныйНомер - Строка - регистрационный номер;
//  Отказ - Булево - флаг отказа от обработки.
//
Процедура УдалитьЗарегистрированнуюКассу(РегистрационныйНомер, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемаяКасса = Справочники.ЗарегистрированныеКассы.НайтиПоРеквизиту("РегистрационныйНомер", РегистрационныйНомер);
	
	Если ЗначениеЗаполнено(УдаляемаяКасса) Тогда
		УдаляемаяКассаОбъект = УдаляемаяКасса.ПолучитьОбъект();
		Если УдаляемаяКассаОбъект <> Неопределено Тогда
			Попытка
				ОбновлениеИнформационнойБазы.УдалитьДанные(УдаляемаяКассаОбъект);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает узел обмена с сервером Штрих-М.
//
// Возвращаемое значение:
//  ПланОбменаСсылка.ОбменСКассовымСерверомШтрихМ - узел обмена с сервером Штрих-М.
//
Функция УзелОбменаШтрих() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбменаШтрихСсылка = ПланыОбмена.ОбменСКассовымСерверомШтрихМ.НайтиПоКоду("002");
	
	Если УзелОбменаШтрихСсылка.Пустая() Тогда
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			Возврат УзелОбменаШтрихСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ГлавныйУзелОбмена = ПланыОбмена.ОбменСКассовымСерверомШтрихМ.ЭтотУзел();
	
	Если Не ЗначениеЗаполнено(ГлавныйУзелОбмена.Наименование) Тогда
		
		ГлавныйУзелОбъект = ГлавныйУзелОбмена.ПолучитьОбъект();
		ГлавныйУзелОбъект.Наименование = НСтр("ru='Центральный'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Попытка
			ГлавныйУзелОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СтрокаСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	УзелОбменаШтрихСсылка = ПланыОбмена.ОбменСКассовымСерверомШтрихМ.НайтиПоКоду("002");
	
	Если УзелОбменаШтрихСсылка.Пустая() Тогда
		
		УзелОбменаШтрихОбъект = ПланыОбмена.ОбменСКассовымСерверомШтрихМ.СоздатьУзел();
		УзелОбменаШтрихОбъект.Код = "002";
		УзелОбменаШтрихОбъект.Наименование =
			НСтр("ru='Настройка обмена с кассовым сервером Штрих-М'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		УзелОбменаШтрихОбъект.СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИБ;
		УзелОбменаШтрихОбъект.МаксимальноеКоличествоДокументов = 10000;
		УзелОбменаШтрихОбъект.ВыполнятьОбменССерверомШтрихМ = Ложь;
		Попытка
			УзелОбменаШтрихОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат УзелОбменаШтрихСсылка;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Документы

Процедура ВыполнитьПотоковыйОбменДаннымиССерверомШтрихМ(Настройки)
	
	ТекущиеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(
		Новый Структура("Ключ, Состояние", "ОбменДаннымиССерверомШтрихМ", СостояниеФоновогоЗадания.Активно));
		
	Если ТекущиеЗадания.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	HTTPСоединение = Неопределено;
	Соединение = ОбменСКассовымСерверомШтрихМКлиентСервер.HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание ""Обмен данными с сервером Штрих-М"".
			|Установка соедиенения.'", КодЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,,, Соединение.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Соединение.HTTPСоединение;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	// Проверяем, что установлен идентификатор области (agent_node_id).
	Если НЕ ЗначениеЗаполнено(Настройки.ИдентификаторОбластиНаСервереШтрихМ) Тогда
		
		// Условие возможно при сплите/восстановлении копии базы данных.
		ПолучитьНовыйИдентификаторОбласти(HTTPСоединение, Настройки, Отказ, СообщениеОбОшибке);
		Если Отказ Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание ""Обмен данными с сервером Штрих-М"".
				|Получение идентификатора области'", КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
			Возврат;
		КонецЕсли;
		ИдентификаторОбласти = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройки.НастройкаОбмена,
			"ИдентификаторОбластиНаСервереШтрихМ");
		Если ЗначениеЗаполнено(ИдентификаторОбласти) Тогда
			Настройки.Вставить("ИдентификаторОбластиНаСервереШтрихМ", ИдентификаторОбласти);
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание ""Обмен данными с сервером Штрих-М"".
				|Получение идентификатора области'", КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Не установлен идентификатор области.'", КодЯзыка));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем, что все кассы принадлежат той же области, как идентификатор области (agent_node_id) узла.
	ПроверитьОбластиКасс(HTTPСоединение, Настройки, Отказ, СообщениеОбОшибке);
	
	Если Отказ Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание ""Обмен данными с сервером Штрих-М"".
			|Проверка принадлежности касс к текущей области.'", КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
	КонецЕсли;
	
	// При перерегистрации могли не зарегистрироваться кассы.
	Если НЕ ЕстьПодключенныеКассы(Настройки.ИдентификаторОбластиНаСервереШтрихМ) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание ""Обмен данными с сервером Штрих-М"".
			|Проверка регистрации касс в текущей области.'", КодЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,,,
			НСтр("ru = 'Нет ни одной зарегистрированной кассы в области.'", КодЯзыка));
		Возврат;
	КонецЕсли;
	
	ПолучитьКассовыеДокументы(HTTPСоединение, Настройки, Отказ, СообщениеОбОшибке);
	
	Если Отказ Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание ""Обмен данными с сервером Штрих-М"".
			|Получение кассовых документов.'", КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОтвет_КассовыеДокументы(Результат, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	ИмяРеквизитаОтвета = ДополнительныеПараметры.ИмяРеквизитаОтвета;
	ДатаПоследнегоДокументаВЗапросе = ДополнительныеПараметры.Настройки.ДатаПоследнегоДокументаВЗапросе;
	
	Если ТипЗнч(Результат[ИмяРеквизитаОтвета]) = Тип("Массив") Тогда
		РеквизитыКонтнейнераДокументов = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыКонтнейнераДокументов();
		РеквизитыДокумента = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыДокумента();
		РеквизитыСоставаТоваровДокумента = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыСоставаТоваровДокумента();
		РеквизитыСоставаОплатДокумента = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыСоставаОплатДокумента();
		
		ИндексыТаблиц = Новый Массив;
		ИндексыТаблиц.Добавить("doc_id");
		
		ТаблицаКонтейнераДокументов = ТаблицаЗначенийПоСтруктуре(РеквизитыКонтнейнераДокументов);
		ТаблицаДокументов = ТаблицаЗначенийПоСтруктуре(РеквизитыДокумента, ИндексыТаблиц);
		ТаблицаСоставаТоваровДокументов = ТаблицаЗначенийПоСтруктуре(РеквизитыСоставаТоваровДокумента, ИндексыТаблиц);
		ТаблицаСоставаОплатДокументов = ТаблицаЗначенийПоСтруктуре(РеквизитыСоставаОплатДокумента, ИндексыТаблиц);
		
		Для каждого Элемент Из Результат[ИмяРеквизитаОтвета] Цикл
			НоваяЗаписьКонтейнера = ТаблицаКонтейнераДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьКонтейнера, Элемент);
			
			НоваяЗаписьДокумента = ТаблицаДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьДокумента, Элемент.doc_content);
			НоваяЗаписьДокумента.doc_id = НоваяЗаписьКонтейнера.doc_id;
			Если Элемент.doc_content.Свойство("payment_by_type")
				И ТипЗнч(Элемент.doc_content.payment_by_type) = Тип("Массив") Тогда
				Для каждого ЭлементОплаты Из Элемент.doc_content.payment_by_type Цикл
					НоваяЗаписьОплатДокументов = ТаблицаСоставаОплатДокументов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьОплатДокументов, ЭлементОплаты);
					НоваяЗаписьОплатДокументов.doc_id = НоваяЗаписьКонтейнера.doc_id;
				КонецЦикла;
			КонецЕсли;
			Если Элемент.doc_content.Свойство("check_content") И ТипЗнч(Элемент.doc_content.check_content) = Тип("Массив") Тогда
				Для каждого ЭлементТовар Из Элемент.doc_content.check_content Цикл
					НоваяЗаписьТоваровДокументов = ТаблицаСоставаТоваровДокументов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьТоваровДокументов, ЭлементТовар);
					НоваяЗаписьТоваровДокументов.doc_id = НоваяЗаписьКонтейнера.doc_id;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеДляОбработки = Новый Структура;
		ДанныеДляОбработки.Вставить("ТаблицаКонтейнераДокументов", ТаблицаКонтейнераДокументов);
		ДанныеДляОбработки.Вставить("ТаблицаДокументов", ТаблицаДокументов);
		ДанныеДляОбработки.Вставить("ТаблицаСоставаТоваровДокументов", ТаблицаСоставаТоваровДокументов);
		ДанныеДляОбработки.Вставить("ТаблицаСоставаОплатДокументов", ТаблицаСоставаОплатДокументов);
		ДанныеДляОбработки.Вставить("ТаблицаСоставаОплатДокументов", ТаблицаСоставаОплатДокументов);
		ДанныеДляОбработки.Вставить("ДатаПоследнегоДокументаВЗапросе", ДатаПоследнегоДокументаВЗапросе);
		
		ОбработатьОтвет_КассовыеДокументы_Документы(ДанныеДляОбработки, Отказ, СообщениеОбОшибке);
		
		ДатаПоследнегоДокументаВЗапросе = ДанныеДляОбработки.ДатаПоследнегоДокументаВЗапросе;
		ДанныеДляОбработки = Неопределено;
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения (кассовые документы).'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("add_info") Тогда
		Если ТипЗнч(Результат.add_info) = Тип("Массив") Тогда
			РеквизитыКасс = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыКасс();
			ТаблицаКасс = ТаблицаЗначенийПоСтруктуре(РеквизитыКасс);
			СтруктураОтвета = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыИнформацииОКассах();
			Для каждого Элемент Из Результат.add_info Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтвета, Элемент);
				СтрокаТаблицыКасс = ТаблицаКасс.Найти(СтруктураОтвета.cashregister_number, "РегистрационныйНомер");
				Если СтрокаТаблицыКасс = Неопределено Тогда
					СтрокаТаблицыКасс = ТаблицаКасс.Добавить();
					СтрокаТаблицыКасс.РегистрационныйНомер = СтруктураОтвета.cashregister_number;
				КонецЕсли;
				СтрокаТаблицыКасс.Результат = СтруктураОтвета.info_type;
				СтрокаТаблицыКасс.СообщениеОбмена = СтруктураОтвета.message;
			КонецЦикла;
			ОбработатьОтвет_КассовыеДокументы_ДопИнфо(ТаблицаКасс, Отказ, СообщениеОбОшибке);
			ТаблицаКасс = Неопределено;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения (кассовые документы).'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДатаПоследнегоДокументаВЗапросе = ДополнительныеПараметры.Настройки.ДатаПоследнегоДокументаВЗапросе
		И ИмяРеквизитаОтвета = "fetch_documents_response" Тогда
		
		НастройкаОбъект = ДополнительныеПараметры.Настройки.НастройкаОбмена.ПолучитьОбъект();
		Если НЕ НастройкаОбъект = Неопределено Тогда
			НастройкаОбъект.ДатаПоследнегоДокументаВЗапросе = ДатаПоследнегоДокументаВЗапросе;
			НастройкаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("more_records") Тогда
		Если Результат.more_records = 1 Тогда
			НовыеНастройки = ДополнительныеПараметры.Настройки;
			НовыеНастройки.ДатаПоследнегоДокументаВЗапросе = ДатаПоследнегоДокументаВЗапросе;
			Если ИмяРеквизитаОтвета = "fetch_documents_response" Тогда
				ПолучитьКассовыеДокументы(ДополнительныеПараметры.Соединение, НовыеНастройки, Отказ, СообщениеОбОшибке);
			Иначе
				ПолучитьКассовыеДокументыДляКасс(ДополнительныеПараметры.Соединение, НовыеНастройки,
					ДополнительныеПараметры.РеквизитыКассы, Отказ, СообщениеОбОшибке);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИмяРеквизитаОтвета = "fetch_documents_response" Тогда
		Если ЗначениеЗаполнено(ДополнительныеПараметры.РеквизитыКассы.РегистрационныйНомер) Тогда
			ОбменСКассовымСерверомШтрихМПереопределяемый.ЗавершитьЗагрузкуЧеков(
				ДополнительныеПараметры.РеквизитыКассы.РегистрационныйНомер);
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Ошибка записи кассового аппарата.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + ДополнительныеПараметры.РеквизитыКассы.Ссылка;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОтвет_КассовыеДокументы_Документы(ДанныеДляОбработки, Отказ, СообщениеОбОшибке)
	
	// Проверим, все ли еще требуется загрузка документов.
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	СообщениеОбОшибке = "";
	ДатаУспешногоЧека = "";
	ЕстьОшибки = Ложь;
	
	ТаблицаКонтейнераДокументов = ДанныеДляОбработки.ТаблицаКонтейнераДокументов;
	РегистрационныеНомера = ТаблицаКонтейнераДокументов.ВыгрузитьКолонку("cashregister_number");
	
	ТаблицаДокументов = ДанныеДляОбработки.ТаблицаДокументов;
	ТаблицаСоставаТоваров = ДанныеДляОбработки.ТаблицаСоставаТоваровДокументов;
	
	ТаблицаСоставаОплат = ДанныеДляОбработки.ТаблицаСоставаОплатДокументов;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗарегистрированныеКассы.Ссылка,
	|	ЗарегистрированныеКассы.РегистрационныйНомер,
	|	ЗарегистрированныеКассы.ОбластьДанныхВспомогательныеДанные,
	|	ЗарегистрированныеКассы.ИдентификаторОбластиНаСервереШтрихМ
	|ИЗ
	|	Справочник.ЗарегистрированныеКассы КАК ЗарегистрированныеКассы
	|ГДЕ
	|	ЗарегистрированныеКассы.РегистрационныйНомер В(&РегистрационныеНомера)
	|	И ЗарегистрированныеКассы.СостояниеПодключения = ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.Подключен)
	|	И ЗарегистрированныеКассы.ИдентификаторОбластиНаСервереШтрихМ = &ИдентификаторОбластиНаСервереШтрихМ");
	
	Запрос.УстановитьПараметр("РегистрационныеНомера", РегистрационныеНомера);
	// Отсекаем запрос по кассам, которые еще не перерегистрированы в текущей БД.
	Запрос.УстановитьПараметр("ИдентификаторОбластиНаСервереШтрихМ", Настройки.ИдентификаторОбластиНаСервереШтрихМ);
	
	РезультатКассы = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаКонтейнера Из ТаблицаКонтейнераДокументов Цикл
		
		Если НЕ ЕстьОшибки Тогда
			ДатаУспешногоЧека = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(СтрокаКонтейнера.doc_timestamp);
		КонецЕсли;
		
		// Проверим наличие кассы документа.
		КассовыеАппаратыПоРегНомеру = РезультатКассы.НайтиСтроки(Новый Структура("РегистрационныйНомер",
			СтрокаКонтейнера.cashregister_number));
			
		Если КассовыеАппаратыПоРегНомеру.Количество() = 0 Тогда
			// Касса переехала, а документы еще зарегистрированы на старую область кассы.
			Продолжить;
		ИначеЕсли КассовыеАппаратыПоРегНомеру.Количество() > 1 Тогда
			// Более одной зарегистрированной кассы, с одним регистрационным кодом и одним идентификатором области Штрих.
			// Это нештатная ситуация, требующая разбора.Отметим предупреждением в журанале регистрации.
			// Документ будет загружены во все области.
			Сообщение = СтрШаблон(НСтр("ru = 'Более одной зарегистрированной кассы,
				|с одним регистрационным кодом %1 и одним идентификатором области Штрих %2.'", КодЯзыка),
				СтрокаКонтейнера.cashregister_number, );
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание ""Обмен данными с сервером Штрих-М"".
				|Получение кассовых документов.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, Сообщение);
		КонецЕсли;
		
		// Реквизиты Документа.
		РеквизитыДокумента = ТаблицаДокументов.Найти(СтрокаКонтейнера.doc_id, "doc_id");
		
		Если РеквизитыДокумента = Неопределено Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'Ошибка при обмене документом doc_id: %1
				|Не найдены реквизиты документа'",
				КодЯзыка), СтрокаКонтейнера.doc_id) + Символы.ПС;
			Если НЕ ЕстьОшибки Тогда
				ЕстьОшибки = Истина;
				ДатаУспешногоЧека = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(СтрокаКонтейнера.doc_timestamp);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ИнформацияПоДокументу = Новый Структура();
		ИнформацияПоДокументу.Вставить("РеквизитыКонтейнера", СтрокаКонтейнера);
		ИнформацияПоДокументу.Вставить("РеквизитыДокумента", РеквизитыДокумента);
		ИнформацияПоДокументу.Вставить("ТоварыДокумента", ТаблицаСоставаТоваров.НайтиСтроки(Новый Структура("doc_id", СтрокаКонтейнера.doc_id)));
		ИнформацияПоДокументу.Вставить("РеквизитыОплат", ТаблицаСоставаОплат.НайтиСтроки(Новый Структура("doc_id", СтрокаКонтейнера.doc_id)));
		
		Для каждого КассовыйАппарат Из КассовыеАппаратыПоРегНомеру Цикл
			ИнформацияПоДокументу.Вставить("ОбластьВспомогательныхДанных",
				КассовыйАппарат.ОбластьДанныхВспомогательныеДанные);
			ОбменСКассовымСерверомШтрихМПереопределяемый.ЗаписатьКассовыйДокумент(ИнформацияПоДокументу, ДатаУспешногоЧека, ЕстьОшибки, СообщениеОбОшибке);
		КонецЦикла;
		
		Если НЕ ЕстьОшибки Тогда
			ДатаУспешногоЧека = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(СтрокаКонтейнера.doc_timestamp);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = ЕстьОшибки;
	
	Если ЗначениеЗаполнено(ДатаУспешногоЧека) Тогда
		ДанныеДляОбработки.ДатаПоследнегоДокументаВЗапросе = ДатаУспешногоЧека - 1;
	КонецЕсли;
	
	РезультатКассы = Неопределено;
	РегистрационныеНомера = Неопределено;
	
	ТаблицаКонтейнераДокументов = Неопределено;
	ТаблицаДокументов = Неопределено;
	ТаблицаСоставаТоваровДокументов = Неопределено;
	ТаблицаСоставаОплатДокументов = Неопределено;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ОбработатьОтвет_КассовыеДокументы_ДопИнфо(КассыДляРегистрации, Отказ, СообщениеОбОшибке)
	
	// Проверим, все ли еще требуется загрузка документов.
	Настройки = НастройкиОбменаДаннымиССерверомШтрихМ();
	Если НЕ Настройки.ВыполнятьОбменССерверомШтрихМ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗарегистрированныеКассы.Ссылка,
	|	ЗарегистрированныеКассы.РегистрационныйНомер,
	|	ЗарегистрированныеКассы.ОбластьДанныхВспомогательныеДанные,
	|	ЗарегистрированныеКассы.ИдентификаторОбластиНаСервереШтрихМ
	|ИЗ
	|	Справочник.ЗарегистрированныеКассы КАК ЗарегистрированныеКассы
	|ГДЕ
	|	ЗарегистрированныеКассы.РегистрационныйНомер В(&РегистрационныеНомера)
	|	И ЗарегистрированныеКассы.СостояниеПодключения = ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.Подключен)
	|	И ЗарегистрированныеКассы.ИдентификаторОбластиНаСервереШтрихМ = &ИдентификаторОбластиНаСервереШтрихМ");
	
	Запрос.УстановитьПараметр("РегистрационныеНомера", КассыДляРегистрации.ВыгрузитьКолонку("РегистрационныйНомер"));
	// Отсекаем запрос по кассам, которые еще не перерегистрированы в текущей БД.
	Запрос.УстановитьПараметр("ИдентификаторОбластиНаСервереШтрихМ", Настройки.ИдентификаторОбластиНаСервереШтрихМ);
	
	РезультатКассы = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаКассы Из КассыДляРегистрации Цикл
		
		КассовыеАппаратыПоРегНомеру = РезультатКассы.НайтиСтроки(Новый Структура("РегистрационныйНомер",
			СтрокаКассы.РегистрационныйНомер));
		
		Если КассовыеАппаратыПоРегНомеру.Количество() > 0 Тогда
			СтрокаКассы.Ссылка = КассовыеАппаратыПоРегНомеру[0].Ссылка;
			СтрокаКассы.НовыйИдентификаторОбласти = КассовыеАппаратыПоРегНомеру[0].ИдентификаторОбластиНаСервереШтрихМ;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьРезультатПодключенияКасс(КассыДляРегистрации, Отказ, СообщениеОбОшибке);
КонецПроцедуры

Процедура ПолучитьКассовыеДокументы(Соединение, Настройки, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("ТипМетода", "fetch_documents");
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Новый Структура("timestamp",
		ДатаВСтрокуФорматаISO8601(Настройки.ДатаПоследнегоДокументаВЗапросе)));
	ПараметрыМетода.Добавить(Новый Структура("max_documents", Настройки.МаксимальноеКоличествоДокументов));
	ДобавитьИдентификатор(ПараметрыМетода, Настройки);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	ПараметрыСоединения = Новый Структура("Соединение, Настройки", Соединение, Настройки);
	ДанныеДляЗапроса.Вставить("ДополнительныеПараметры", ПараметрыСоединения);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

Процедура ПолучитьКассовыеДокументыДляКасс(Соединение, Настройки, РеквизитыКассы, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("ТипМетода", "fetch_documents_for_cashregister");
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Новый Структура("cashregister_number", РеквизитыКассы.РегистрационныйНомер));
	ПараметрыМетода.Добавить(Новый Структура("timestamp_start", 
		ДатаВСтрокуФорматаISO8601(НачалоДня(РеквизитыКассы.ДатаНачалаЗапросаЧеков))));
	ПараметрыМетода.Добавить(Новый Структура("timestamp_end",
		ДатаВСтрокуФорматаISO8601(КонецДня(РеквизитыКассы.ДатаОкончанияЗапросаЧеков))));
	ПараметрыМетода.Добавить(Новый Структура("max_documents", Настройки.МаксимальноеКоличествоДокументов));
	
	ДобавитьИдентификатор(ПараметрыМетода, Настройки, Ложь);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	ПараметрыСоединения = Новый Структура("Соединение, Настройки, РеквизитыКассы", Соединение, Настройки, РеквизитыКассы);
	ДанныеДляЗапроса.Вставить("ДополнительныеПараметры", ПараметрыСоединения);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

#КонецОбласти

#Область Кассы

Процедура ЗарегистрироватьКассы(Соединение, Настройки, Кассы, Отказ, СообщениеОбОшибке)
	
	РегистрируемыеКассы = Новый Массив;
	Для каждого СтрокаКассы Из Кассы Цикл
		РеквизитыКассы = Новый Структура;
		РеквизитыКассы.Вставить("cashregister_number", СтрокаКассы.РегистрационныйНомер);
		РеквизитыКассы.Вставить("token", СтрокаКассы.Токен);
		РегистрируемыеКассы.Добавить(РеквизитыКассы);
	КонецЦикла;
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Новый Структура("cashregister_info", РегистрируемыеКассы));
	ДобавитьИдентификатор(ПараметрыМетода, Настройки);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	ДанныеДляЗапроса.Вставить("ДополнительныеПараметры", Кассы);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

Функция КассыДляПеререгистрации(ИдентификаторОбластиНаСервереШтрихМ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗарегистрированныеКассы.Ссылка,
	|	ЗарегистрированныеКассы.РегистрационныйНомер,
	|	ЗарегистрированныеКассы.ОбластьДанныхВспомогательныеДанные,
	|	ЗарегистрированныеКассы.Токен,
	|	&ИдентификаторОбластиНаСервереШтрихМ КАК НовыйИдентификаторОбласти,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Результат,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК СообщениеОбмена
	|ИЗ
	|	Справочник.ЗарегистрированныеКассы КАК ЗарегистрированныеКассы
	|ГДЕ
	|	ЗарегистрированныеКассы.СостояниеПодключения = ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.Подключен)
	|	И НЕ ЗарегистрированныеКассы.ИдентификаторОбластиНаСервереШтрихМ = &ИдентификаторОбластиНаСервереШтрихМ");
	Запрос.УстановитьПараметр("ИдентификаторОбластиНаСервереШтрихМ", ИдентификаторОбластиНаСервереШтрихМ);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция НоваяЗарегистрированнаяКасса(ИнформацияОКассе, СообщениеОбОшибке, ОбластьДанных = 0)
	
	ЗарегистрированнаяКасса = Неопределено;
	
	НоваяКасса = Справочники.ЗарегистрированныеКассы.СоздатьЭлемент();
	НоваяКасса.Наименование = ИнформацияОКассе.РегистрационныйНомер;
	НоваяКасса.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.НеПодключен;
	НоваяКасса.РегистрационныйНомер = ИнформацияОКассе.РегистрационныйНомер;
	НоваяКасса.Токен = ИнформацияОКассе.Токен;
	НоваяКасса.ИдентификаторОбластиНаСервереШтрихМ = ИнформацияОКассе.ИдентификаторОбластиШтрих;
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		НоваяКасса.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
	КонецЕсли;
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяКасса);
		ЗарегистрированнаяКасса = НоваяКасса.Ссылка;
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ЗарегистрированнаяКасса;
КонецФункции

Процедура ОбработатьОтвет_РегистрацияКасс(Результат, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	СтруктураОтвета = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыИнформацииОКассах();
	
	ТЗстрок = Новый ТаблицаЗначений;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для каждого Элемент Из Результат Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, Элемент);
			СтрокаТаблицыКасс = ДополнительныеПараметры.Найти(СтруктураОтвета.cashregister_number, "РегистрационныйНомер");
			Если СтрокаТаблицыКасс = Неопределено Тогда
				СтрокаТаблицыКасс = ДополнительныеПараметры.Добавить();
				СтрокаТаблицыКасс.РегистрационныйНомер = СтруктураОтвета.cashregister_number;
			КонецЕсли;
			СтрокаТаблицыКасс.Результат = СтруктураОтвета.info_type;
			СтрокаТаблицыКасс.СообщениеОбмена = СтруктураОтвета.message;
		КонецЦикла;
		ОбработатьРезультатПодключенияКасс(ДополнительныеПараметры, Отказ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения (регистрация касс).'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьРезультатПодключенияКасс(КассыДляРегистрации, Отказ, СообщениеОбОшибке)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Сообщение = "";
	ЕстьОшибка = Ложь;
	
	Для каждого СтрокаКассы Из КассыДляРегистрации Цикл
		Если ЗначениеЗаполнено(СтрокаКассы.Ссылка) Тогда
			Попытка
				КассаОбъект = СтрокаКассы.Ссылка.ПолучитьОбъект();
			Исключение
				Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'При регистрации ошибочно обработан ККМ: %1'", КодЯзыка),
					СтрокаКассы.Ссылка) + Символы.ПС;
				Продолжить;
			КонецПопытки;
			
			Подключен = Ложь;
			ОсвободитьЛицензию = Ложь;
			
			КассаОбъект.СообщениеПриРегистрации = СокрЛП(Прав(КассаОбъект.СообщениеПриРегистрации + Символы.ПС
				+ ТекущаяДатаСеанса()+ " " + СокрЛП(СтрокаКассы.Результат) + " " + СтрокаКассы.СообщениеОбмена, 1024));
				
			Если НРег(СтрокаКассы.Результат) = "cashregister_node_changed"
				ИЛИ НРег(СтрокаКассы.Результат) = "cashregister_authorized" Тогда
				
				Если ЗначениеЗаполнено(СтрокаКассы.НовыйИдентификаторОбласти)
					И Не КассаОбъект.ИдентификаторОбластиНаСервереШтрихМ = СтрокаКассы.НовыйИдентификаторОбласти Тогда
						КассаОбъект.ИдентификаторОбластиНаСервереШтрихМ = СтрокаКассы.НовыйИдентификаторОбласти;
				КонецЕсли;
				Подключен = Истина;
			Иначе
				ОсвободитьЛицензию = Истина;
				Сообщение = Сообщение + СтрокаКассы.СообщениеОбмена + Символы.ПС;
			КонецЕсли;
			
			Если Подключен Тогда
				КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.Подключен;
			Иначе
				КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.НеПодключен;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КассаОбъект);
			
			ИнформацияОПодключении = Новый Структура();
			ИнформацияОПодключении.Вставить("РегистрационныйНомер", СтрокаКассы.РегистрационныйНомер);
			ИнформацияОПодключении.Вставить("ОбластьВспомогательныхДанных", СтрокаКассы.ОбластьДанныхВспомогательныеДанные);
			ИнформацияОПодключении.Вставить("Подключен", Подключен);
			ИнформацияОПодключении.Вставить("ОсвободитьЛицензию", ОсвободитьЛицензию);
			ИнформацияОПодключении.Вставить("ИдентификаторОбластиНаСервереШтрихМ", СтрокаКассы.НовыйИдентификаторОбласти);
			
			ОбменСКассовымСерверомШтрихМПереопределяемый.ОбработатьРезультатПодключенияКассы(ИнформацияОПодключении, ЕстьОшибка, Сообщение);
		Иначе
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'При регистрации ошибочно обработан регистрационный номер ККМ: %1'",
				КодЯзыка), СтрокаКассы.РегистрационныйНомер) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		Отказ = Истина;
		СообщениеОбОшибке = Сообщение;
	Иначе
		Если ЗначениеЗаполнено(Сообщение) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен Штрих. Подключение ККМ.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьОбластиКасс(Соединение, Настройки, Отказ, СообщениеОбОшибке)
	
	КассыДляПеререгистрации = КассыДляПеререгистрации(
		Настройки.ИдентификаторОбластиНаСервереШтрихМ);
	
	Если КассыДляПеререгистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ТипМетода", "cashregister_change_agent_node_id");
	ЗарегистрироватьКассы(Соединение, Настройки, КассыДляПеререгистрации, Отказ, СообщениеОбОшибке);
КонецПроцедуры

#КонецОбласти

#Область Товары

Процедура ЗарегистрироватьТовары(Соединение, Настройки, ТоварыДляОбмена, Отказ, СообщениеОбОшибке)
	
	ГруппыТоваров = ТоварыДляОбмена.ГруппыТоваровДляРегистрации;
	Товары = ТоварыДляОбмена.ТоварыДляРегистрации;
	Если ГруппыТоваров.Количество() = 0 И Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	
	Кассы = ТоварыДляОбмена.КассыДляРегистрации;
	РегистрируемыеКассы = Новый Массив;
	Для каждого СтрокаКассы Из Кассы Цикл
		РеквизитыКассы = Новый Структура;
		РеквизитыКассы.Вставить("cashregister_number", СтрокаКассы.РегистрационныйНомер);
		РегистрируемыеКассы.Добавить(РеквизитыКассы);
	КонецЦикла;
	ПараметрыМетода.Добавить(Новый Структура("cashregister_info", РегистрируемыеКассы));
		
	РегистрируемыеГруппыТоваров = Новый Массив;
	Для каждого СтрокаГруппыТоваров Из ГруппыТоваров Цикл
		РеквизитыГруппыТоваров = Новый Структура;
		РеквизитыГруппыТоваров.Вставить("code", СтрокаГруппыТоваров.Код);
		РеквизитыГруппыТоваров.Вставить("name", СтрокаГруппыТоваров.Наименование);
		РеквизитыГруппыТоваров.Вставить("parent_code", СтрокаГруппыТоваров.РодительКод);
		РегистрируемыеГруппыТоваров.Добавить(РеквизитыГруппыТоваров);
	КонецЦикла;
	ПараметрыМетода.Добавить(Новый Структура("good_groups_info", РегистрируемыеГруппыТоваров));
	
	РегистрируемыеТовары = Новый Массив;
	Для каждого СтрокаТоваров Из Товары Цикл
		РеквизитыТоваров = Новый Структура;
		РеквизитыТоваров.Вставить("code", СтрокаТоваров.Код);
		РеквизитыТоваров.Вставить("barcode", СтрокаТоваров.Штрихкод);
		РеквизитыТоваров.Вставить("name", СтрокаТоваров.Наименование);
		РеквизитыТоваров.Вставить("name_for_cashregister", СтрокаТоваров.НаименованиеККМ);
		РеквизитыТоваров.Вставить("price", СтрокаТоваров.Цена);
		РеквизитыТоваров.Вставить("group_code", СтрокаТоваров.РодительКод);
		РеквизитыТоваров.Вставить("tax_code", СтрокаТоваров.СтавкаНДС);
		РеквизитыТоваров.Вставить("article", СтрокаТоваров.Артикул);
		РеквизитыТоваров.Вставить("fractional_quantity", СтрокаТоваров.ДробноеКоличество);
		РеквизитыТоваров.Вставить("alcohol_excisable", Ложь);
		РеквизитыТоваров.Вставить("alcohol_kind_code", "");
		РегистрируемыеТовары.Добавить(РеквизитыТоваров);
	КонецЦикла;
	ПараметрыМетода.Добавить(Новый Структура("goods_info", РегистрируемыеТовары));
	
	ДобавитьИдентификатор(ПараметрыМетода, Настройки);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	ДопПараметры = Новый Структура("Кассы, Товары", Кассы, Товары);
	ДанныеДляЗапроса.Вставить("ДополнительныеПараметры", ДопПараметры);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

Процедура ОбработатьОтвет_ОчисткаТоваров(Результат, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	СтруктураОтвета = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыИнформацииОКассах();
	
	Кассы = ДополнительныеПараметры.Кассы;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для каждого Элемент Из Результат Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, Элемент);
			СтрокаТаблицыКасс = Кассы.Найти(СтруктураОтвета.cashregister_number, "РегистрационныйНомер");
			Если СтрокаТаблицыКасс = Неопределено Тогда
				СтрокаТаблицыКасс = Кассы.Добавить();
				СтрокаТаблицыКасс.РегистрационныйНомер = СтруктураОтвета.cashregister_number;
			КонецЕсли;
			СтрокаТаблицыКасс.Результат = СтруктураОтвета.info_type;
			СтрокаТаблицыКасс.СообщениеОбмена = СтруктураОтвета.message;
		КонецЦикла;
		ДополнительныеПараметры.Вставить("Кассы", Кассы);
		ОбработатьРезультатОчисткиТоваров(ДополнительныеПараметры,
			Отказ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения (удаление товаров).'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОтвет_ПроверкаАктуальностиТоваров(Результат, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	СтруктураОтвета = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыИнформацииОКассах();
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для каждого Элемент Из Результат Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, Элемент);
			СтрокаТаблицыКасс = ДополнительныеПараметры.Найти(СтруктураОтвета.cashregister_number, "РегистрационныйНомер");
			Если СтрокаТаблицыКасс = Неопределено Тогда
				СтрокаТаблицыКасс = ДополнительныеПараметры.Добавить();
				СтрокаТаблицыКасс.РегистрационныйНомер = СтруктураОтвета.cashregister_number;
			КонецЕсли;
			СтрокаТаблицыКасс.Результат = СтруктураОтвета.info_type;
			СтрокаТаблицыКасс.СообщениеОбмена = СтруктураОтвета.message;
		КонецЦикла;
		ОбработатьРезультатПроверкаАктуальностиТоваров(ДополнительныеПараметры,
			Отказ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения (проверка актуальности товаров).'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОтвет_РегистрацияТоваров(Результат, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	СтруктураОтвета = ОбменСКассовымСерверомШтрихМПовтИсп.РеквизитыИнформацииОКассах();
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Кассы = ДополнительныеПараметры.Кассы;
		Для каждого Элемент Из Результат Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, Элемент);
			СтрокаТаблицыКасс = Кассы.Найти(СтруктураОтвета.cashregister_number, "РегистрационныйНомер");
			Если СтрокаТаблицыКасс = Неопределено Тогда
				СтрокаТаблицыКасс = Кассы.Добавить();
				СтрокаТаблицыКасс.РегистрационныйНомер = СтруктураОтвета.cashregister_number;
			КонецЕсли;
			СтрокаТаблицыКасс.Результат = СтруктураОтвета.info_type;
			СтрокаТаблицыКасс.СообщениеОбмена = СтруктураОтвета.message;
		КонецЦикла;
		ДополнительныеПараметры.Вставить("Кассы", Кассы);
		ОбработатьРезультатРегистрацииТоваров(ДополнительныеПараметры,
			Отказ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения (регистрация товаров).'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьРезультатОчисткиТоваров(ДополнительныеПараметры, Отказ, СообщениеОбОшибке)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Сообщение = "";
	
	КассыДляРегистрации = ДополнительныеПараметры.Кассы;
	
	Товары = Неопределено;
	ДополнительныеПараметры.Свойство("Товары", Товары);
	
	ЕстьОшибка = Ложь;
	Для каждого СтрокаКассы Из КассыДляРегистрации Цикл
		
		ЗаписатьТекущиеЦены = Ложь;
		Если ЗначениеЗаполнено(СтрокаКассы.Ссылка) Тогда
			
			ПроверитьЗагрузкуТоваров = Ложь;
			ОсвободитьЛицензию = Ложь;
			ЗаписатьТекущиеЦены = Ложь;
			
			КассаОбъект = СтрокаКассы.Ссылка.ПолучитьОбъект();
			КассаОбъект.СообщениеПриРегистрации = СокрЛП(Прав(КассаОбъект.СообщениеПриРегистрации + Символы.ПС
				+ ТекущаяДатаСеанса()+ " " + СокрЛП(СтрокаКассы.Результат) + " " + СтрокаКассы.СообщениеОбмена, 1024));
			
			Подключен = КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.Подключен;
			
			Если НРег(СтрокаКассы.Результат) = "goods_cleared" Тогда
				ПроверитьЗагрузкуТоваров = Истина;
				ЗаписатьТекущиеЦены = Истина;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "invalid_token" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "invalid_cashregister_number" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
				Товары = Неопределено;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "kkm_token_changed" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			КонецЕсли;
			
			Если НЕ Подключен Тогда
				КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.НеПодключен;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КассаОбъект);
			
			ИнформацияОПодключении = Новый Структура();
			ИнформацияОПодключении.Вставить("РегистрационныйНомер", КассаОбъект.РегистрационныйНомер);
			ИнформацияОПодключении.Вставить("ОбластьВспомогательныхДанных", КассаОбъект.ОбластьДанныхВспомогательныеДанные);
			ИнформацияОПодключении.Вставить("Подключен", Подключен);
			ИнформацияОПодключении.Вставить("ОсвободитьЛицензию", ОсвободитьЛицензию);
			ИнформацияОПодключении.Вставить("ИдентификаторОбластиНаСервереШтрихМ",
				КассаОбъект.ИдентификаторОбластиНаСервереШтрихМ);
			ИнформацияОПодключении.Вставить("ПроверитьЗагрузкуТоваров", ПроверитьЗагрузкуТоваров);
			ИнформацияОПодключении.Вставить("ЗаписатьТекущиеЦены", ЗаписатьТекущиеЦены);
			ИнформацияОПодключении.Вставить("Товары", Товары);
			
			Если НЕ Подключен Тогда
				ОбменСКассовымСерверомШтрихМПереопределяемый.ОбработатьРезультатПодключенияКассы(ИнформацияОПодключении,
					ЕстьОшибка, Сообщение);
			Иначе
				ОбменСКассовымСерверомШтрихМПереопределяемый.ОбработатьРезультатОчисткиТоваров(ИнформацияОПодключении,
					ЕстьОшибка, Сообщение);
			КонецЕсли;
		Иначе
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'При регистрации ошибочно обработан регистрационный номер ККМ: %1'",
				КодЯзыка), СтрокаКассы.РегистрационныйНомер) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибка Тогда
		Отказ = Истина;
		СообщениеОбОшибке = Сообщение;
	Иначе
		Если ЗначениеЗаполнено(Сообщение) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен Штрих. Очистка товаров'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьРезультатПроверкаАктуальностиТоваров(Кассы, Отказ, СообщениеОбОшибке)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Сообщение = "";
	
	ОбластиДляОчисткиРегистрацииТоваров = Новый Массив;
	
	ЕстьОшибка = Ложь;
	Для каждого СтрокаКассы Из Кассы Цикл
		
		ОсвободитьЛицензию = Ложь;
		ЗаписатьТекущиеЦены = Ложь;
		ПроверитьЗагрузкуТоваров = Истина;
		
		Если ЗначениеЗаполнено(СтрокаКассы.Ссылка) Тогда
			
			КассаОбъект = СтрокаКассы.Ссылка.ПолучитьОбъект();
			КассаОбъект.СообщениеПриРегистрации = СокрЛП(Прав(КассаОбъект.СообщениеПриРегистрации + Символы.ПС
				+ ТекущаяДатаСеанса()+ " " + СокрЛП(СтрокаКассы.Результат) + " " + СтрокаКассы.СообщениеОбмена, 1024));
				
			Подключен = КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.Подключен;
			
			Если НРег(СтрокаКассы.Результат) = "goods_uploaded" Тогда
				ПроверитьЗагрузкуТоваров = Ложь;
				ЗаписатьТекущиеЦены = Истина;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "invalid_token" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "invalid_cashregister_number" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "kkm_token_changed" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			КонецЕсли;
			
			Если НЕ Подключен Тогда
				КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.НеПодключен;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КассаОбъект);
			
			ИнформацияОПодключении = Новый Структура();
			ИнформацияОПодключении.Вставить("РегистрационныйНомер", КассаОбъект.РегистрационныйНомер);
			ИнформацияОПодключении.Вставить("ОбластьВспомогательныхДанных", КассаОбъект.ОбластьДанныхВспомогательныеДанные);
			ИнформацияОПодключении.Вставить("Подключен", Подключен);
			ИнформацияОПодключении.Вставить("ОсвободитьЛицензию", ОсвободитьЛицензию);
			ИнформацияОПодключении.Вставить("ИдентификаторОбластиНаСервереШтрихМ",
				КассаОбъект.ИдентификаторОбластиНаСервереШтрихМ);
			ИнформацияОПодключении.Вставить("ПроверитьЗагрузкуТоваров", ПроверитьЗагрузкуТоваров);
			ИнформацияОПодключении.Вставить("ЗаписатьТекущиеЦены", ЗаписатьТекущиеЦены);
			
			Если НЕ Подключен Тогда
				ОбменСКассовымСерверомШтрихМПереопределяемый.ОбработатьРезультатПодключенияКассы(ИнформацияОПодключении,
					ЕстьОшибка, Сообщение);
			Иначе
				ОбменСКассовымСерверомШтрихМПереопределяемый.ОбработатьРезультатПроверкиЗагрузкиТоваров(ИнформацияОПодключении,
					ЕстьОшибка, Сообщение);
			КонецЕсли;
		Иначе
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'При регистрации ошибочно обработан регистрационный номер ККМ: %1'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СтрокаКассы.РегистрационныйНомер) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибка Тогда
		Отказ = Истина;
		СообщениеОбОшибке = Сообщение;
	Иначе
		Если ЗначениеЗаполнено(Сообщение) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен Штрих. Проверка актуальности товаров.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьРезультатРегистрацииТоваров(ДополнительныеПараметры, Отказ, СообщениеОбОшибке)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Сообщение = "";
	
	КассыДляРегистрации = ДополнительныеПараметры.Кассы;
	Товары = ДополнительныеПараметры.Товары;
	
	ЕстьОшибка = Ложь;
	Для каждого СтрокаКассы Из КассыДляРегистрации Цикл
		
		ЗаписатьТекущиеЦены = Ложь;
		Если ЗначениеЗаполнено(СтрокаКассы.Ссылка) Тогда
			
			ПроверитьЗагрузкуТоваров = Ложь;
			ОсвободитьЛицензию = Ложь;
			ЗаписатьТекущиеЦены = Ложь;
			
			КассаОбъект = СтрокаКассы.Ссылка.ПолучитьОбъект();
			КассаОбъект.СообщениеПриРегистрации = СокрЛП(Прав(КассаОбъект.СообщениеПриРегистрации + Символы.ПС
				+ ТекущаяДатаСеанса()+ " " + СокрЛП(СтрокаКассы.Результат) + " " + СтрокаКассы.СообщениеОбмена, 1024));
			
			Подключен = КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.Подключен;
			
			Если НРег(СтрокаКассы.Результат) = "goods_uploaded" Тогда
				ПроверитьЗагрузкуТоваров = Истина;
				ЗаписатьТекущиеЦены = Истина;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "invalid_token" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "invalid_cashregister_number" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			ИначеЕсли НРег(СтрокаКассы.Результат) = "kkm_token_changed" Тогда
				ОсвободитьЛицензию = Истина;
				Подключен = Ложь;
			КонецЕсли;
			
			Если НЕ Подключен Тогда
				КассаОбъект.СостояниеПодключения = Перечисления.СостоянияРегистрацииКассовогоАппарата.НеПодключен;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КассаОбъект);
			
			ИнформацияОПодключении = Новый Структура();
			ИнформацияОПодключении.Вставить("РегистрационныйНомер", КассаОбъект.РегистрационныйНомер);
			ИнформацияОПодключении.Вставить("ОбластьВспомогательныхДанных", КассаОбъект.ОбластьДанныхВспомогательныеДанные);
			ИнформацияОПодключении.Вставить("Подключен", Подключен);
			ИнформацияОПодключении.Вставить("ОсвободитьЛицензию", ОсвободитьЛицензию);
			ИнформацияОПодключении.Вставить("ИдентификаторОбластиНаСервереШтрихМ",
				КассаОбъект.ИдентификаторОбластиНаСервереШтрихМ);
			ИнформацияОПодключении.Вставить("ПроверитьЗагрузкуТоваров", ПроверитьЗагрузкуТоваров);
			ИнформацияОПодключении.Вставить("ЗаписатьТекущиеЦены", ЗаписатьТекущиеЦены);
			ИнформацияОПодключении.Вставить("Товары", Товары);
			
			Если НЕ Подключен Тогда
				ОбменСКассовымСерверомШтрихМПереопределяемый.ОбработатьРезультатПодключенияКассы(ИнформацияОПодключении,
					ЕстьОшибка, Сообщение);
			Иначе
				ОбменСКассовымСерверомШтрихМПереопределяемый.ОбработатьРезультатРегистрацииТоваров(ИнформацияОПодключении,
					ЕстьОшибка, Сообщение);
			КонецЕсли;
		Иначе
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'При регистрации ошибочно обработан регистрационный номер ККМ: %1'",
				КодЯзыка), СтрокаКассы.РегистрационныйНомер) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибка Тогда
		Отказ = Истина;
		СообщениеОбОшибке = Сообщение;
	Иначе
		Если ЗначениеЗаполнено(Сообщение) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен Штрих. Регистрация товаров.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,,, Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьТовары(Соединение, Настройки, Кассы, Отказ, СообщениеОбОшибке)
	
	ПараметрыМетода = Новый Массив;
	
	РегистрируемыеКассы = Новый Массив;
	Для каждого СтрокаКассы Из Кассы Цикл
		РеквизитыКассы = Новый Структура;
		РеквизитыКассы.Вставить("cashregister_number", СтрокаКассы.РегистрационныйНомер);
		РеквизитыКассы.Вставить("clear_all_goods", 1);
		РегистрируемыеКассы.Добавить(РеквизитыКассы);
	КонецЦикла;
	ПараметрыМетода.Добавить(Новый Структура("cashregister_clear_info", РегистрируемыеКассы));
	
	ДобавитьИдентификатор(ПараметрыМетода, Настройки);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	ДопПараметры = Новый Структура("Кассы", Кассы);
	ДанныеДляЗапроса.Вставить("ДополнительныеПараметры", ДопПараметры);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

Процедура ОчиститьТоварыВыборочно(Соединение, Настройки, ТоварыИКассы, Отказ, СообщениеОбОшибке)
	
	ПараметрыМетода = Новый Массив;
	
	Кассы = ТоварыИКассы.КассыДляОчистки;
	Товары = ТоварыИКассы.Товары;
	РегистрируемыеКассы = Новый Массив;
	Для каждого СтрокаКассы Из Кассы Цикл
		РеквизитыКассы = Новый Структура;
		РеквизитыКассы.Вставить("cashregister_number", СтрокаКассы.РегистрационныйНомер);
		РеквизитыКассы.Вставить("clear_all_goods", 0);
		РегистрируемыеТовары = Новый Массив;
		Для Каждого КодТовара Из Товары Цикл
			РеквизитыТоваров = Новый Структура;
			РеквизитыТоваров.Вставить("code", КодТовара);
			РегистрируемыеТовары.Добавить(РеквизитыТоваров);
		КонецЦикла;
		РеквизитыКассы.Вставить("good_codes", РегистрируемыеТовары);
		РегистрируемыеКассы.Добавить(РеквизитыКассы);
	КонецЦикла;
	ПараметрыМетода.Добавить(Новый Структура("cashregister_clear_info", РегистрируемыеКассы));
	
	ДобавитьИдентификатор(ПараметрыМетода, Настройки);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	ДопПараметры = Новый Структура("Кассы, Товары", Кассы, Товары);
	ДанныеДляЗапроса.Вставить("ДополнительныеПараметры", ДопПараметры);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

Процедура ПроверитьЗагрузкуТоваровККМ(Соединение, Настройки, КассыДляПроверки, Отказ, СообщениеОбОшибке)
	
	ПараметрыМетода = Новый Массив;
	
	Кассы = КассыДляПроверки.КассыДляРегистрации;
	РегистрируемыеКассы = Новый Массив;
	Для каждого СтрокаКассы Из Кассы Цикл
		РеквизитыКассы = Новый Структура;
		РеквизитыКассы.Вставить("cashregister_number", СтрокаКассы.РегистрационныйНомер);
		РегистрируемыеКассы.Добавить(РеквизитыКассы);
	КонецЦикла;
	ПараметрыМетода.Добавить(Новый Структура("cashregister_info", РегистрируемыеКассы));
	
	ДобавитьИдентификатор(ПараметрыМетода, Настройки);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	ДанныеДляЗапроса.Вставить("ДополнительныеПараметры", Кассы);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

#КонецОбласти

#Область Настройки_И_Идентификатор_Области

Функция НастройкиОбменаДаннымиССерверомШтрихМ(ПроверятьРегистрациюКасс = Истина)
	
	НастройкиОбмена = Новый Структура("ВыполнятьОбменССерверомШтрихМ, НастройкаОбмена, НетПодключенныхКасс", Ложь, Неопределено, Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменССерверомШтрихМ") Тогда
		Возврат НастройкиОбмена;
	КонецЕсли;
	
	НастройкиОбмена.НастройкаОбмена = УзелОбменаШтрих();
	
	// Регистрация касс не проверяется только при получении настроек для регистрации касс.
	// В остальных случаях - проверяется.
	Если ПроверятьРегистрациюКасс Тогда
		ЕстьПодключенныеКассы = ЕстьПодключенныеКассы();
		НастройкиОбмена.ВыполнятьОбменССерверомШтрихМ = ЕстьПодключенныеКассы;
		НастройкиОбмена.НетПодключенныхКасс = НЕ ЕстьПодключенныеКассы;
	Иначе
		НастройкиОбмена.ВыполнятьОбменССерверомШтрихМ = Истина;
	КонецЕсли;
	
	Если НЕ НастройкиОбмена.ВыполнятьОбменССерверомШтрихМ Тогда
		Возврат НастройкиОбмена;
	КонецЕсли;
	
	НастройкиОбмена.Вставить("АдресСервера");
	НастройкиОбмена.Вставить("ИмяПользователя");
	
	НастройкиОбмена.Вставить("ИдентификаторНаСервереШтрихМ");
	НастройкиОбмена.Вставить("ИдентификаторОбластиНаСервереШтрихМ");
	НастройкиОбмена.Вставить("ДатаПоследнегоДокументаВЗапросе");
	НастройкиОбмена.Вставить("МаксимальноеКоличествоДокументов");
	
	ЗаполнитьЗначенияСвойств(НастройкиОбмена, НастройкиОбмена.НастройкаОбмена);
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена.ДатаПоследнегоДокументаВЗапросе) Тогда
		НастройкиОбмена.ДатаПоследнегоДокументаВЗапросе = Дата(2016,7,1);
	КонецЕсли;
	
	НастройкиОбмена.Вставить("Пароль",
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкиОбмена.НастройкаОбмена, "password", Истина));
	НастройкиОбмена.Вставить("Подпись",
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкиОбмена.НастройкаОбмена, "signature", Истина));
	
	Возврат НастройкиОбмена;
КонецФункции

Процедура ОбработатьОтвет_НовыйИдентификаторОбласти(Результат, Отказ, СообщениеОбОшибке)
	
	Если Результат.Свойство("agent_node_id") Тогда
		НовыйИдентификаторОбласти = СокрЛП(Результат.agent_node_id);
		УстановитьНовыйИдентификаторОбласти(НовыйИдентификаторОбласти, Отказ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения (Новый идентификатор области).'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьНовыйИдентификаторОбласти(Соединение, Настройки, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("ТипМетода", "get_new_agent_node_id");
	ПараметрыМетода = Новый Массив;
	ДобавитьИдентификатор(ПараметрыМетода, Настройки, Ложь);
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
КонецПроцедуры

Процедура УстановитьНовыйИдентификаторОбласти(ИдентификаторОбласти, Отказ, СообщениеОбОшибке);
	
	Узел = УзелОбменаШтрих();
	
	Если Узел.ИдентификаторОбластиНаСервереШтрихМ = ИдентификаторОбласти Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбъект = Узел.ПолучитьОбъект();
	УзелОбъект.ИдентификаторОбластиНаСервереШтрихМ = ИдентификаторОбласти;
	НачатьТранзакцию();
	Попытка
		УзелОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
		ОбновитьПовторноИспользуемыеЗначения();
	Исключение
		ОтменитьТранзакцию();
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область Общие

Процедура ВыполнитьЗапросКСерверуШтрихМ(Соединение, Настройки, Данные, Отказ, СообщениеОбОшибке)

	HTTPОтвет = Неопределено;
	
	HTTPЗапрос = Новый HTTPЗапрос(Настройки.ПутьНаСервере + "/" + Настройки.ТипМетода);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("request_signature", "7917B059037C6063EE045629531B690AA515616B");//Настройки.Подпись);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON(Данные.ПараметрыМетода));
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		HTTPЗапрос = Неопределено;
		Инфо = ИнформацияОбОшибке();
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ОбработатьОтветСервера(HTTPОтвет, Настройки, Отказ, СообщениеОбОшибке);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("Перенаправление") И Настройки.Перенаправление Тогда
		ВыполнитьПотоковыйОбменДаннымиССерверомШтрихМ(Настройки);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Данные.Свойство("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ОбработатьОтветСервераШтрихМ(HTTPОтвет, Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
КонецПроцедуры

Процедура ДобавитьИдентификатор(ПараметрыМетода, Настройки, Знач УказыватьОбласть = Истина)
	
	Идентификатор = Новый Соответствие;
	Идентификатор.Вставить("agent_id", Настройки.ИдентификаторНаСервереШтрихМ);
	ПараметрыМетода.Вставить(0, Идентификатор);
	
	Если УказыватьОбласть Тогда
		
		ИдентификаторОбласти = Новый Соответствие;
		ИдентификаторОбласти.Вставить("agent_node_id", Настройки.ИдентификаторОбластиНаСервереШтрихМ);
		ПараметрыМетода.Вставить(1, ИдентификаторОбласти);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОтветСервера(Результат, Настройки, Отказ, СообщениеОбОшибке)
	
	// Анализируем фатальные ошибки.
	// В большинстве случаев нужно остановить работу и показать пользователю сообщение об ошибке,
	// включив в него HTTP-статус.
	
	// Ошибки 4XX говорят о неправильном запросе - в широком смысле.
	// Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса.
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.КодСостояния >= 400 И Результат.КодСостояния < 500 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Код статуса больше 4XX, ошибка запроса. Код статуса: %1'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
	
	// Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервер).
	// Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.
	Если Результат.КодСостояния >= 500 И Результат.КодСостояния < 600 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Код статуса больше 5XX, ошибка сервера. Код статуса: %1'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
	
	// Обрабатываем перенаправление.
	Если Результат.КодСостояния >= 300 И Результат.КодСостояния < 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Код статуса больше 3XX, Перенаправление. Код статуса: %1'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Если Результат.КодСостояния = 302 Тогда
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если НЕ АдресРесурса = Неопределено И ЗначениеЗаполнено(АдресРесурса) Тогда
				Настройки.Вставить("АдресСервера", АдресРесурса);
				Настройки.Вставить("Перенаправление", Истина);
			Иначе
				СообщениеОбОшибке = НСтр("ru = 'Постоянное перенаправление. Код статуса: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеОбОшибке = СтрШаблон(СообщениеОбОшибке, Результат.КодСостояния);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОтветСервераШтрихМ(Результат, Отказ, СообщениеОбОшибке, ДополнительныеПараметры = Неопределено)
	
	СтрокаОтвета = Результат.ПолучитьТелоКакСтроку();
	
	ОбъектJSON = ПреобразоватьВСтрокуИзJSON(СтрокаОтвета, Отказ, СообщениеОбОшибке);
	
	Результат = Неопределено;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формат ответа:
	// {
	// "response_error":
	//  {
	//  "result": код ошибки,
	//  "error_code": код причины ошибки,
	//  "comment":"комментарий к ошибке"
	//  },
	// "response":
	//  {
	//  параметры ответа
	//  }
	// }
	//
	// В случае, когда параметр result не равен 0, response отсутствует.
	// Возможные коды и описания ошибок в ответе:
	// 1 Несуществующий идентификатор сервиса;
	// 2 Неверная подпись;
	// 3 Неверный тип запроса;
	// 4 Неверный формат запроса;
	// 5 Ошибка сервера.
	
	Если ОбъектJSON.Свойство("response_error") Тогда
		КодРезультата = Число(ОбъектJSON.response_error.result);
		Если НЕ КодРезультата = 0 Тогда
			КодОшибки = Число(ОбъектJSON.response_error.error_code);
			Если КодОшибки = 1 Тогда
				СообщениеОбОшибке = НСтр("ru = 'Несуществующий идентификатор сервиса.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИначеЕсли КодОшибки = 2 Тогда
				СообщениеОбОшибке = НСтр("ru = 'Неверная подпись.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИначеЕсли КодОшибки = 3 Тогда
				СообщениеОбОшибке = НСтр("ru = 'Неверный тип запроса.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИначеЕсли КодОшибки = 4 Тогда
				СообщениеОбОшибке = НСтр("ru = 'Неверный формат запроса.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИначеЕсли КодОшибки = 5 Тогда
				СообщениеОбОшибке = НСтр("ru = 'Ошибка сервера.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			Иначе
				СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			КонецЕсли;
			КомментарийКОшибке = Строка(ОбъектJSON.response_error.comment);
			СообщениеОбОшибке = СообщениеОбОшибке + " " + КомментарийКОшибке;
			Отказ = Истина;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектJSON.Свойство("response") Тогда
		Если ОбъектJSON.response.Свойство("fetch_documents_response") Тогда
			ДополнительныеПараметры.Вставить("ИмяРеквизитаОтвета", "fetch_documents_response");
			ОбработатьОтвет_КассовыеДокументы(ОбъектJSON.response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		ИначеЕсли ОбъектJSON.response.Свойство("fetch_documents_for_cashregister_response") Тогда
			ДополнительныеПараметры.Вставить("ИмяРеквизитаОтвета", "fetch_documents_for_cashregister_response");
			ОбработатьОтвет_КассовыеДокументы(ОбъектJSON.response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		ИначеЕсли ОбъектJSON.response.Свойство("get_new_agent_node_id_response") Тогда
			ОбработатьОтвет_НовыйИдентификаторОбласти(ОбъектJSON.response.get_new_agent_node_id_response,
				Отказ, СообщениеОбОшибке);
		ИначеЕсли ОбъектJSON.response.Свойство("cashregister_change_agent_node_id_response") Тогда
			ОбработатьОтвет_РегистрацияКасс(ОбъектJSON.response.cashregister_change_agent_node_id_response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		ИначеЕсли ОбъектJSON.response.Свойство("cashregister_authorize_response") Тогда
			ОбработатьОтвет_РегистрацияКасс(ОбъектJSON.response.cashregister_authorize_response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		ИначеЕсли ОбъектJSON.response.Свойство("cashregister_remove_from_agent_response") Тогда
			ОбработатьОтвет_РегистрацияКасс(ОбъектJSON.response.cashregister_remove_from_agent_response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		ИначеЕсли ОбъектJSON.response.Свойство("goods_upload_response") Тогда
			ОбработатьОтвет_РегистрацияТоваров(ОбъектJSON.response.goods_upload_response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		ИначеЕсли ОбъектJSON.response.Свойство("goods_upload_status_response") Тогда
			ОбработатьОтвет_ПроверкаАктуальностиТоваров(ОбъектJSON.response.goods_upload_status_response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		ИначеЕсли ОбъектJSON.response.Свойство("goods_clear_response") Тогда
			ОбработатьОтвет_ОчисткаТоваров(ОбъектJSON.response.goods_clear_response,
				Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка формата ответного сообщения.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Функции_JSON

Функция ПреобразоватьВСтрокуИзJSON(Строка, Отказ, СообщениеОбОшибке)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция СтрокаJSON(Знач ПараметрыМетода)
	
	ДанныеЗапроса = Новый Структура;
	
	ПараметрыЗапроса = Новый Структура;
	Для каждого Элемент Из ПараметрыМетода Цикл
		Для каждого КлючИЗначение Из Элемент Цикл
			ПараметрыЗапроса.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЦикла;
	
	ДанныеЗапроса.Вставить("request", ПараметрыЗапроса);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
КонецФункции

#КонецОбласти

#КонецОбласти
