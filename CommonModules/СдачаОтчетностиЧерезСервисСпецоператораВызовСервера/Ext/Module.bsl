
#Область ПрограммныйИнтерфейс

#Область ЭкспортныеМетодыСвязанныеСРегламентнымиЗаданиями

Процедура ОбновитьИнформациюОНаправленияхСдачиОтчетности() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОМЗадание = Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности;
	
	// отражаем начало в журнале
	ОтразитьНачалоРегламентногоЗаданияВЖурналеРегистрации(ОМЗадание);
	
	// получаем таблицу направлений из Управляющего приложения
	ТаблицаНаправлений = ПолучитьСведенияИзУправляющегоПриложения();
	Если ТаблицаНаправлений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// получаем ссылки на все записи со сведениями о направлениях
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НаправленияСдачиОтчетности.Ссылка
	                      |ИЗ
	                      |	Справочник.НаправленияСдачиОтчетности КАК НаправленияСдачиОтчетности");
	Попытка
		СсылкиКУдалению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения сведений о наполнении справочника направлений сдачи отчетности:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание));
		Возврат;
	КонецПопытки;
	
	// очищаем справочник при необходимости
	Если СсылкиКУдалению.Количество() > 0 Тогда
		Попытка
			УдалитьОбъектыЛокальная(СсылкиКУдалению);
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
									УровеньЖурналаРегистрации.Ошибка,
									Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
									,
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка очистки справочника направлений сдачи отчетности:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	// пишем информацию о направлениях, полученную из Управляющего приложения
	ТекДата = ТекущаяДатаСеанса();
	Для Каждого Стр Из ТаблицаНаправлений Цикл
		Если ОпределитьНаправление(Стр.Организация, ТипНаправленияПоИдентификаторуТипа(Стр.Тип), Стр.Код, ТекДата) = Неопределено Тогда
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
									УровеньЖурналаРегистрации.Ошибка,
									Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
									,
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка заполнения справочника направлений сдачи отчетности:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// пытаемся зафиксировать транзакцию
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка фиксации транзакции:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание));
	КонецПопытки;
	
	// отражаем окончание в журнале
	ОтразитьОкончаниеРегламентногоЗаданияВЖурналеРегистрации(ОМЗадание);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОтправитьОтчетность() Экспорт
	Перем ОписаниеОшибки;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОМЗадание = Метаданные.РегламентныеЗадания.ОтправкаОтчетности;
	
	// отражаем начало в журнале
	ОтразитьНачалоРегламентногоЗаданияВЖурналеРегистрации(ОМЗадание);
	
	// в целях оптимизации инициализируем объекты, необходмые для отправки,
	// единожды, перед началом отправки
	
	// инициализируем HTTP-соединение
	Соединение = ИнициализироватьСоединениеССерверомСдачиОтчетности(ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Метаданные.РегламентныеЗадания.ОтправкаОтчетности),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОтправкаОтчетности,
								,
								ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// получаем список используемых областей для перебора
	ВозможныеРазделители = ПолучитьРазделителиОбластейСГотовойКОтправкеОтчетностью(ОписаниеОшибки);
	Если ВозможныеРазделители = Неопределено Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Метаданные.РегламентныеЗадания.ОтправкаОтчетности),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОтправкаОтчетности,
								,
								ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// перебираем каждую из областей
	Для Каждого ТекущийРазделитель Из ВозможныеРазделители Цикл
		
		// переключаемся в область данных абонента, т.к. все данные отправки находятся в разделенных областях
		ВойтиВОбластьДанныхНаСервере(ТекущийРазделитель);
		
		// получаем ссылки на запланированные отправки
		ОтчетностьКОтправке = ПолучитьОтчетностьКОтправке(ТекущийРазделитель);
		Если ОтчетностьКОтправке = Неопределено Тогда // если Неопределено - значит ошибка
			Прервать;
		КонецЕсли;
		
		// последовательно отправляем все готовые к отправке пакеты данной области
		Для Каждого СтрОтчетностьКОтправке Из ОтчетностьКОтправке Цикл
			ОписаниеОшибкиОтправки = "";
			РезультатОтправки = ОтправитьГотовыйКОтправкеПакет(СтрОтчетностьКОтправке, Соединение, ОписаниеОшибкиОтправки); // если даже отправка одного пакета не прошла, то пытаемся отправить следующие
			Если НЕ РезультатОтправки Тогда
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Метаданные.РегламентныеЗадания.ОтправкаОтчетности),
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.РегламентныеЗадания.ОтправкаОтчетности,
										,
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка отправки пакета с кодом %1 из области данных %2:" + Символы.ПС + Символы.ПС + "%3'"), СокрЛП(СтрОтчетностьКОтправке.Код), Формат(ТекущийРазделитель, "ЧГ="), ОписаниеОшибкиОтправки));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// не забываем сбросить признак использования разделителя
	ВыключитьИспользованиеРазделителя();
	
	// если цикл прерван по ошибке, то прервем работу задания, отразив событие в журнале
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Метаданные.РегламентныеЗадания.ОтправкаОтчетности),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОтправкаОтчетности,
								,
								ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// отражаем окончание регламентного задания в журнале
	ОтразитьОкончаниеРегламентногоЗаданияВЖурналеРегистрации(ОМЗадание);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПолучитьРезультатыОтправкиОтчетности() Экспорт
	Перем ОписаниеОшибки;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОМЗадание = Метаданные.РегламентныеЗадания.ПолучениеРезультатовОтправкиОтчетности;
	
	// отражаем начало в журнале
	ОтразитьНачалоРегламентногоЗаданияВЖурналеРегистрации(ОМЗадание);
	
	// инициализируем HTTP-соединение
	Соединение = ИнициализироватьСоединениеССерверомСдачиОтчетности(ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
								УровеньЖурналаРегистрации.Ошибка,
								ОМЗадание,
								,
								ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// получаем список используемых областей данных для перебора
	ВозможныеРазделители = ПолучитьРазделителиОбластейДанныхСНезавершеннымиОтправками(ОписаниеОшибки);
	Если ВозможныеРазделители = Неопределено Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
								УровеньЖурналаРегистрации.Ошибка,
								ОМЗадание,
								,
								ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// перебираем каждую из используемых областей
	Для Каждого ТекущийРазделитель Из ВозможныеРазделители Цикл
		
		// переключаемся в область данных абонента, т.к. все данные отправки находятся в разделенных областях
		ВойтиВОбластьДанныхНаСервере(ТекущийРазделитель);
		
		// получаем ссылки на запланированные отправки
		НезавершенныеОтправки = ПолучитьНезавершенныеОтправки(ТекущийРазделитель);
		Если НезавершенныеОтправки = Неопределено Тогда // если Неопределено - значит ошибка
			Прервать;
		КонецЕсли;
		
		// последовательно отправляем все готовые к отправке пакеты данной области
		Для Каждого СтрНезавершеннаяОтправка Из НезавершенныеОтправки Цикл
			ОписаниеОшибкиОтправки = "";
			РезультатАктуализации = АктуализироватьСостояниеОтправкиОтчетности(СтрНезавершеннаяОтправка, Соединение, ОписаниеОшибкиОтправки); // если даже отправка одного пакета не прошла, то пытаемся отправить следующие
			Если НЕ РезультатАктуализации Тогда
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
										УровеньЖурналаРегистрации.Ошибка,
										ОМЗадание,
										,
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка актуализации состояния отправки %1 из области данных %2:" + Символы.ПС + Символы.ПС + "%3'"), СокрЛП(СтрНезавершеннаяОтправка.Код), Формат(ТекущийРазделитель, "ЧГ="), ОписаниеОшибкиОтправки));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// не забываем сбросить признак использования разделителя
	ВыключитьИспользованиеРазделителя();
	
	// если цикл прерван по ошибке, то прервем работу задания, отразив событие в журнале
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ОМЗадание),
								УровеньЖурналаРегистрации.Ошибка,
								ОМЗадание,
								,
								ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// отражаем окончание в журнале
	ОтразитьОкончаниеРегламентногоЗаданияВЖурналеРегистрации(ОМЗадание);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Процедура ПриЗаписиОтправкиОтчетности(Объект, Отказ) Экспорт
	
	// отражаем изменения в регистре статусов отправки
	ОбновитьСтатусОтправкиОтчета(Объект.Отчет);
	
	ОбновитьЗаписиВРегистреОтправкиОтчетностиКОбработке();
	
КонецПроцедуры

Процедура ОбновитьЗаписиВРегистреОтправкиОтчетностиКОбработке()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозможныеНезавершенныеСтатусы = Новый Массив;
	ВозможныеНезавершенныеСтатусы.Добавить(Перечисления.СтатусыОтправкиОтчетности.ДоставкаПодтверждена);
	ВозможныеНезавершенныеСтатусы.Добавить(Перечисления.СтатусыОтправкиОтчетности.Запланирована);
	ВозможныеНезавершенныеСтатусы.Добавить(Перечисления.СтатусыОтправкиОтчетности.ОтправкаПодтверждена);
	ВозможныеНезавершенныеСтатусы.Добавить(Перечисления.СтатусыОтправкиОтчетности.Отправлена);
	ВозможныеНезавершенныеСтатусы.Добавить(Перечисления.СтатусыОтправкиОтчетности.ПустаяСсылка());
	
	ТекущийРазделитель = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Идентификатор");
	ТаблицаРезультат.Колонки.Добавить("Статус");
	ТаблицаРезультат.Колонки.Добавить("ТребуетАудита");
	ТаблицаРезультат.Индексы.Добавить("Идентификатор");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА ОтправкиВОбработке.Идентификатор ЕСТЬ NULL 
	                      |			ТОГДА СобытияТребующиеАудита.ОтправкаИдентификатор
	                      |		ИНАЧЕ ОтправкиВОбработке.Идентификатор
	                      |	КОНЕЦ КАК Идентификатор,
	                      |	ВЫБОР
	                      |		КОГДА ОтправкиВОбработке.Статус ЕСТЬ NULL 
	                      |			ТОГДА СобытияТребующиеАудита.ОтправкаСтатус
	                      |		ИНАЧЕ ОтправкиВОбработке.Статус
	                      |	КОНЕЦ КАК Статус,
	                      |	МАКСИМУМ(ВЫБОР
	                      |			КОГДА СобытияТребующиеАудита.ОтправкаИдентификатор ЕСТЬ NULL 
	                      |				ТОГДА ЛОЖЬ
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ) КАК ТребуетАудита
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ОтправкиОтчетности.Идентификатор КАК Идентификатор,
	                      |		ОтправкиОтчетности.Статус КАК Статус
	                      |	ИЗ
	                      |		Справочник.ОтправкиОтчетности КАК ОтправкиОтчетности
	                      |	ГДЕ
	                      |		(НЕ ОтправкиОтчетности.ПометкаУдаления)
	                      |		И ОтправкиОтчетности.Статус В(&ВозможныеНезавершенныеСтатусы)) КАК ОтправкиВОбработке
	                      |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |			СобытияОтправкиОтчетности.Отправка КАК Отправка,
	                      |			СобытияОтправкиОтчетности.Отправка.Идентификатор КАК ОтправкаИдентификатор,
	                      |			СобытияОтправкиОтчетности.Отправка.Статус КАК ОтправкаСтатус
	                      |		ИЗ
	                      |			Справочник.СобытияОтправкиОтчетности КАК СобытияОтправкиОтчетности
	                      |		ГДЕ
	                      |			(НЕ СобытияОтправкиОтчетности.ПометкаУдаления)
	                      |			И СобытияОтправкиОтчетности.ТребуетАудита
	                      |			И (НЕ СобытияОтправкиОтчетности.АудитПроведен)
	                      |			И (НЕ СобытияОтправкиОтчетности.Отправка.ПометкаУдаления)) КАК СобытияТребующиеАудита
	                      |		ПО ОтправкиВОбработке.Идентификатор = СобытияТребующиеАудита.ОтправкаИдентификатор
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВЫБОР
	                      |		КОГДА ОтправкиВОбработке.Идентификатор ЕСТЬ NULL 
	                      |			ТОГДА СобытияТребующиеАудита.ОтправкаИдентификатор
	                      |		ИНАЧЕ ОтправкиВОбработке.Идентификатор
	                      |	КОНЕЦ,
	                      |	ВЫБОР
	                      |		КОГДА ОтправкиВОбработке.Статус ЕСТЬ NULL 
	                      |			ТОГДА СобытияТребующиеАудита.ОтправкаСтатус
	                      |		ИНАЧЕ ОтправкиВОбработке.Статус
	                      |	КОНЕЦ");
	Запрос.УстановитьПараметр("ВозможныеНезавершенныеСтатусы", ВозможныеНезавершенныеСтатусы);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Стр = ТаблицаРезультат.Найти(Выборка.Идентификатор, "Идентификатор");
		Если Стр = Неопределено Тогда
			Стр = ТаблицаРезультат.Добавить();
			Стр.Идентификатор = Выборка.Идентификатор;
		КонецЕсли;
		Стр.Статус = Выборка.Статус;
		Стр.ТребуетАудита = Выборка.ТребуетАудита;
	КонецЦикла;
	
	// создаем набор записей
	НаборЗаписей = РегистрыСведений.ОтправкиОтчетностиКОбработке.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ТекущийРазделитель);
	Для Каждого Стр Из ТаблицаРезультат Цикл
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ОбластьДанныхВспомогательныеДанные = ТекущийРазделитель;
		НовЗапись.Идентификатор = Стр.Идентификатор;
		НовЗапись.Статус = Стр.Статус;
		НовЗапись.ТребуетАудита = Стр.ТребуетАудита;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПриЗаписиСобытияОтправкиОтчетности(Объект, Отказ) Экспорт
	
	// обновляем статус связанной отправки отчетности
	Если ТипЗнч(Объект.Отправка) = Тип("СправочникСсылка.ОтправкиОтчетности") Тогда
		ОбновитьЗаписиВРегистреОтправкиОтчетностиКОбработке(); // обновляем состояние регистра ОтправкиОтчетностиКОбработке
		ОбновитьСтатусОтправкиОтчетности(Объект.Отправка); // обновляем статус записи справочника ОтчетностьКОтправке
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиОтчетности(ОтправкаОтчетности, Статус = Неопределено, ПричиныОтказа = Неопределено)
	
	Если Статус = Неопределено Тогда
		Если ПустаяСтрока(ОтправкаОтчетности.Идентификатор) Тогда
			Статус = Перечисления.СтатусыОтправкиОтчетности.Запланирована;
		Иначе
			Статус = Перечисления.СтатусыОтправкиОтчетности.Отправлена;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектОтправка = ОтправкаОтчетности.ПолучитьОбъект();
	ОбъектОтправка.Статус = Статус;
	ОбъектОтправка.ПричиныОтказа.Очистить();
	Если ЗначениеЗаполнено(ПричиныОтказа) Тогда
		Для Каждого СтрПричинаОтказа Из ПричиныОтказа Цикл
			НовСтр = ОбъектОтправка.ПричиныОтказа.Добавить();
			НовСтр.Причина = СтрПричинаОтказа.Причина;
			НовСтр.Пояснение = СтрПричинаОтказа.Пояснение;
		КонецЦикла;
	КонецЕсли;
	ОбъектОтправка.ДатаПоследнегоОбновления = ТекущаяДатаСеанса();
	Если Статус = Перечисления.СтатусыОтправкиОтчетности.Сдана ИЛИ Статус = Перечисления.СтатусыОтправкиОтчетности.НеПринята Тогда
		ОбъектОтправка.ДатаЗакрытия = ТекущаяДатаСеанса();
	Иначе
		ОбъектОтправка.ДатаЗакрытия = '00010101';
	КонецЕсли;
	ОбъектОтправка.Записать();
	
КонецПроцедуры

Функция ПолучитьПоследнееПроаудированноеСобытиеОтправки(ОтправкаОтчетности, Статус = Неопределено, ПричиныОтказа = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СобытияОтправкиОтчетности.Ссылка,
	                      |	СобытияОтправкиОтчетности.ПричиныОтказа.(
	                      |		НеПоказывать,
	                      |		Причина,
	                      |		ПояснениеАудитора
	                      |	),
	                      |	СобытияОтправкиОтчетности.Статус
	                      |ИЗ
	                      |	Справочник.СобытияОтправкиОтчетности КАК СобытияОтправкиОтчетности
	                      |ГДЕ
	                      |	(НЕ СобытияОтправкиОтчетности.ПометкаУдаления)
	                      |	И ((НЕ СобытияОтправкиОтчетности.ТребуетАудита)
	                      |			ИЛИ СобытияОтправкиОтчетности.АудитПроведен)
	                      |	И СобытияОтправкиОтчетности.Отправка = &Отправка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	СобытияОтправкиОтчетности.ДатаПолучения УБЫВ");
	Запрос.УстановитьПараметр("Отправка", ОтправкаОтчетности);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Статус = Выборка.Статус;
			ПричиныОтказа = ПолучитьПричиныОтказаИзЗапроса(Выборка.ПричиныОтказа);
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчета(Отчет, СтатусПоследнейОтправки = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ОтправкиОтчетности.Ссылка,
	                      |	ОтправкиОтчетности.Статус
	                      |ИЗ
	                      |	Справочник.ОтправкиОтчетности КАК ОтправкиОтчетности
	                      |ГДЕ
	                      |	ОтправкиОтчетности.Отчет = &Отчет
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ОтправкиОтчетности.ДатаОткрытия УБЫВ");
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если Выборка.Следующий() Тогда
		СтатусПоследнейОтправки = Выборка.Статус;
		Возврат ?(ЗначениеЗаполнено(Выборка.Ссылка), Выборка.Ссылка, Неопределено);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьСтатусОтправкиОтчетности(ОтправкаОтчетности)
	
	// находим наиболее позднее не помеченное на удаление событие отправки
	СтатусПоследнегоСобытия = Неопределено;
	ПричиныОтказаИзПоследнегоСобытия = Неопределено;
	ПоследнееСобытие = ПолучитьПоследнееПроаудированноеСобытиеОтправки(ОтправкаОтчетности, СтатусПоследнегоСобытия, ПричиныОтказаИзПоследнегоСобытия);
	Если ЗначениеЗаполнено(ПоследнееСобытие) Тогда
		ЗаписатьСтатусОтправкиОтчетности(ОтправкаОтчетности, СтатусПоследнегоСобытия, ПричиныОтказаИзПоследнегоСобытия);
	Иначе
		ЗаписатьСтатусОтправкиОтчетности(ОтправкаОтчетности);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПричиныОтказаИзЗапроса(ВыборкаПричиныОтказа)
	
	ПричиныОтказа = Новый ТаблицаЗначений;
	ПричиныОтказа.Колонки.Добавить("Причина");
	ПричиныОтказа.Колонки.Добавить("Пояснение");
	
	Выборка = ВыборкаПричиныОтказа.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.НеПоказывать Тогда
			НовСтр = ПричиныОтказа.Добавить();
			НовСтр.Причина = Выборка.Причина;
			НовСтр.Пояснение = Выборка.ПояснениеАудитора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПричиныОтказа;
	
КонецФункции

Процедура ОбновитьСтатусОтправкиОтчета(Отчет)
	
	// находим последнюю не помеченную на удаление отправку отчета
	РасширенныйСтатусПоследнейОтправки = Неопределено;
	ПоследняяОтправка = ПолучитьПоследнююОтправкуОтчета(Отчет, РасширенныйСтатусПоследнейОтправки);
	
	// вычисляем значение статуса отправки (ПеречислениеСсылка.СтатусыОтправки)
	Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
		СтатусОтправки = СтатусОтправкиОтчетаПоРасширенномуСтатусуОтправки(РасширенныйСтатусПоследнейОтправки);
	Иначе
		СтатусОтправки = Неопределено;
	КонецЕсли;
	
	// сохраняем статус в базе
	ЗаписатьСтатусОтправкиОтчета(Отчет, СтатусОтправки, ПоследняяОтправка);
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиОтчета(Отчет, СтатусОтправки, ОснованиеСтатуса)
	
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Статус = СтатусОтправки;
		МенЗап.Основание = ОснованиеСтатуса;
		МенЗап.Записать(Истина);
	Иначе
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Прочитать();
		Если МенЗап.Выбран() Тогда
			МенЗап.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	// вызываем переопределяемую процедуру отработки изменения статуса отправки
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента(Отчет, СтатусОтправки);
	
КонецПроцедуры

Функция СтатусОтправкиОтчетаПоРасширенномуСтатусуОтправки(РасширенныйСтатус)
	
	Если РасширенныйСтатус = Перечисления.СтатусыОтправкиОтчетности.ПустаяСсылка()
	ИЛИ РасширенныйСтатус = Перечисления.СтатусыОтправкиОтчетности.Запланирована Тогда
		Возврат Перечисления.СтатусыОтправки.ВКонверте;
	ИначеЕсли РасширенныйСтатус = Перечисления.СтатусыОтправкиОтчетности.Отправлена
	ИЛИ РасширенныйСтатус = Перечисления.СтатусыОтправкиОтчетности.ОтправкаПодтверждена Тогда
		Возврат Перечисления.СтатусыОтправки.Отправлен;
	ИначеЕсли РасширенныйСтатус = Перечисления.СтатусыОтправкиОтчетности.ДоставкаПодтверждена Тогда
		Возврат Перечисления.СтатусыОтправки.Доставлен;
	ИначеЕсли РасширенныйСтатус = Перечисления.СтатусыОтправкиОтчетности.НеПринята Тогда
		Возврат Перечисления.СтатусыОтправки.НеПринят;
	ИначеЕсли РасширенныйСтатус = Перечисления.СтатусыОтправкиОтчетности.Сдана Тогда
		Возврат Перечисления.СтатусыОтправки.Сдан;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьОбъектыЛокальная(СсылкиКУдалению)
	
	Для Каждого СсылкаКУдалению Из СсылкиКУдалению Цикл
		Попытка
			ОбъектКУдалению = СсылкаКУдалению.ПолучитьОбъект();
			ОбъектКУдалению.ОбменДанными.Загрузка = Истина;
			ОбъектКУдалению.Удалить();
		Исключение
			ВызватьИсключение ИнформацияОбОшибке().Описание;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРазделителиОбластейДанныхСНезавершеннымиОтправками(ОписаниеОшибки = "")
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОтправкиОтчетностиКОбработке.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
	                      |ИЗ
	                      |	РегистрСведений.ОтправкиОтчетностиКОбработке КАК ОтправкиОтчетностиКОбработке
	                      |ГДЕ
	                      |	ОтправкиОтчетностиКОбработке.Идентификатор <> """"");
	Попытка
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбластьДанных");
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения областей данных с незавершенными отправками отчетности:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьРазделителиОбластейСГотовойКОтправкеОтчетностью(ОписаниеОшибки = "")
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОтправкиОтчетностиКОбработке.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
	                      |ИЗ
	                      |	РегистрСведений.ОтправкиОтчетностиКОбработке КАК ОтправкиОтчетностиКОбработке
	                      |ГДЕ
	                      |	ОтправкиОтчетностиКОбработке.Идентификатор = """"");
	Попытка
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбластьДанных");
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения областей данных с готовой к отправке отчетностью:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ВыключитьИспользованиеРазделителя()
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

Процедура ВойтиВОбластьДанныхНаСервере(Знач ЗначениеРазделителя)
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
	
КонецПроцедуры

Функция ИнициализироватьСоединениеССерверомСдачиОтчетности(ОписаниеОшибки)
	
	АдресСервера = Константы.АдресСервераСдачиОтчетности.Получить();
	Если ПустаяСтрока(АдресСервера) Тогда
		АдресСервера = "11.0.0.26"; // временно
	КонецЕсли;
	
	// прокси не используем, потому что он конфликтует с ViPNet Client
	// адрес сервера должен быть задан в списке исключений, для которых
	// не следует использовать прокси
	Попытка
		Возврат Новый HTTPСоединение(АдресСервера);
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка соединения с сервером отправки отчетности:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ОтразитьНачалоРегламентногоЗаданияВЖурналеРегистрации(Объект)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Объект),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ПолучитьКомментарийКСобытиюНачалаРегламентногоЗадания(Объект));
	
КонецПроцедуры

Процедура ОтразитьОкончаниеРегламентногоЗаданияВЖурналеРегистрации(Объект)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Объект),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ПолучитьКомментарийКСобытиюОкончанияРегламентногоЗадания(Объект));
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации(Объект)
	
	Если Объект = Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности Тогда
		Возврат НСтр("ru = 'Обновление информации о направлениях сдачи отчетности'");
	ИначеЕсли Объект = Метаданные.РегламентныеЗадания.ОтправкаОтчетности Тогда
		Возврат НСтр("ru = 'Отправка отчетности'");
	ИначеЕсли Объект = Метаданные.РегламентныеЗадания.ПолучениеРезультатовОтправкиОтчетности Тогда
		Возврат НСтр("ru = 'Получение результатов отправки отчетности'");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКомментарийКСобытиюНачалаРегламентногоЗадания(Объект)
	
	Если Объект = Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности Тогда
		Возврат НСтр("ru = 'Начато обновление информации о направлениях сдачи отчетности'");
	ИначеЕсли Объект = Метаданные.РегламентныеЗадания.ОтправкаОтчетности Тогда
		Возврат НСтр("ru = 'Начата отправка отчетности'");
	ИначеЕсли Объект = Метаданные.РегламентныеЗадания.ПолучениеРезультатовОтправкиОтчетности Тогда
		Возврат НСтр("ru = 'Начато получение результатов отправки отчетности'");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКомментарийКСобытиюОкончанияРегламентногоЗадания(Объект)
	
	Если Объект = Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности Тогда
		Возврат НСтр("ru = 'Завершено обновление информации о направлениях сдачи отчетности'");
	ИначеЕсли Объект = Метаданные.РегламентныеЗадания.ОтправкаОтчетности Тогда
		Возврат НСтр("ru = 'Завершена отправка отчетности'");
	ИначеЕсли Объект = Метаданные.РегламентныеЗадания.ПолучениеРезультатовОтправкиОтчетности Тогда
		Возврат НСтр("ru = 'Завершено получение результатов отправки отчетности'");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНезавершенныеОтправки(ЗначениеРазделителя)
	
	НЕДопустимыеСтатусы = Новый Массив;
	НЕДопустимыеСтатусы.Добавить(Перечисления.СтатусыОтправкиОтчетности.ПустаяСсылка());
	НЕДопустимыеСтатусы.Добавить(Перечисления.СтатусыОтправкиОтчетности.Запланирована);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтправкиОтчетности.Ссылка,
	                      |	ОтправкиОтчетности.Идентификатор
	                      |ИЗ
	                      |	Справочник.ОтправкиОтчетности КАК ОтправкиОтчетности
	                      |ГДЕ
	                      |	ОтправкиОтчетности.ПометкаУдаления = ЛОЖЬ
	                      |	И ОтправкиОтчетности.ДатаЗакрытия = &ПустаяДата
	                      |	И (НЕ ОтправкиОтчетности.Статус В (&НЕДопустимыеСтатусы))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ОтправкиОтчетности.ДатаОткрытия");
	Запрос.УстановитьПараметр("НЕДопустимыеСтатусы", НЕДопустимыеСтатусы);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Попытка
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Метаданные.РегламентныеЗадания.ПолучениеРезультатовОтправкиОтчетности),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.ПолучениеРезультатовОтправкиОтчетности,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения информации о незавершенных отправках по разделителю %1:"
				+ Символы.ПС + Символы.ПС + "%2'"), Формат(ЗначениеРазделителя, "ЧГ="), ИнформацияОбОшибке().Описание));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьОтчетностьКОтправке(ЗначениеРазделителя)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтправкиОтчетности.Ссылка
	                      |ИЗ
	                      |	Справочник.ОтправкиОтчетности КАК ОтправкиОтчетности
	                      |ГДЕ
	                      |	ОтправкиОтчетности.Статус = &Статус
	                      |	И ОтправкиОтчетности.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ОтправкиОтчетности.ДатаОткрытия");
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОтправкиОтчетности.Запланирована);
	Попытка
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Метаданные.РегламентныеЗадания.ОтправкаОтчетности),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.ОтправкаОтчетности,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения информации о готовой к отправке отчетности по разделителю %1:"
				+ Символы.ПС + Символы.ПС + "%2'"), Формат(ЗначениеРазделителя, "ЧГ="), ИнформацияОбОшибке().Описание));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция АктуализироватьСостояниеОтправкиОтчетности(СтрНезавершеннаяОтправка, Соединение, ОписаниеОшибки = "")
	
	// получаем идентификатор отправки из ИБ
	ИдентификаторОтправки = ПолучитьИдентификаторОтправки(СтрНезавершеннаяОтправка);
	Если НЕ ЗначениеЗаполнено(ИдентификаторОтправки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// создаем таблицу параметров запроса
	ТаблицаПараметровЗапроса = Новый ТаблицаЗначений;
	ТаблицаПараметровЗапроса.Колонки.Добавить("Имя");
	ТаблицаПараметровЗапроса.Колонки.Добавить("Значение");
	
	// заполняем таблицу параметров запроса
	ОпределитьПараметрЗапроса(ТаблицаПараметровЗапроса, "request", "get");
	ОпределитьПараметрЗапроса(ТаблицаПараметровЗапроса, "uid", ИдентификаторОтправки);
	
	// формируем файл info
	ФайлInfo = ПолучитьИмяВременногоФайла("info");
	ЗаписатьФайлInfoПакета(ТаблицаПараметровЗапроса, ФайлInfo);
	
	// передаем файл на сервер
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.ОтправитьДляОбработки(ФайлInfo, АдресРесурсаНаСервереОнлайнЦентраПоСдачеОтчетности(), ФайлРезультата, );
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлInfo);
	Исключение
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлInfo);
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка отправки данных на сервер по сдаче отчетности для получения результатов отправки отчетности:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
	// получаем статус из файла результата
	РезультатСдачи = РазобратьРезультатСдачиОтСервера(ФайлРезультата, ОписаниеОшибки);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлРезультата);
	Если РезультатСдачи.Статус = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения результатов отправки %1 от сервера сдачи отчетности:"
							+ Символы.ПС + Символы.ПС + "%2"
							+ Символы.ПС + Символы.ПС + "Идентификатор отправки: %3'"), СокрЛП(СтрНезавершеннаяОтправка.Код), ОписаниеОшибки, ИдентификаторОтправки);
		Возврат Ложь;
	ИначеЕсли РезультатСдачи.Статус = Перечисления.СтатусыОтправкиОтчетности.ПустаяСсылка() Тогда // статус не определен
		Возврат Истина;
	КонецЕсли;
	
	// отражаем результат в базе
	Если НЕ ОтразитьСостояниеОтправкиВБазеПриНеобходимости(СтрНезавершеннаяОтправка, РезультатСдачи, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РазобратьРезультатСдачиОтСервера(ФайлРезультата, ОписаниеОшибки)
	
	Статус = Перечисления.СтатусыОтправкиОтчетности.ПустаяСсылка();
	ПричиныОтказа = Новый Массив;
	
	Попытка
		ОбъектЧтение = Новый ЧтениеXML;
		ОбъектЧтение.ОткрытьФайл(ФайлРезультата);
		Пока ОбъектЧтение.Прочитать() Цикл
			Если ОбъектЧтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяЭлемента = ОбъектЧтение.Имя;
				Если ИмяЭлемента = "result" ИЛИ ИмяЭлемента = "msg" Тогда
					Пока ОбъектЧтение.Прочитать() Цикл
						Если ОбъектЧтение.ТипУзла = ТипУзлаXML.Текст Тогда
							Если ИмяЭлемента = "result" Тогда
								Статус = СсылкаПоСтрокеСтатуса(СокрЛП(ОбъектЧтение.Значение), ОписаниеОшибки);
							ИначеЕсли ИмяЭлемента = "msg" Тогда
								ПричиныОтказа.Добавить(СокрЛП(ОбъектЧтение.Значение));
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбъектЧтение.Закрыть();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка извлечения идентификатора отправленного отчета из ответа сервера:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	Возврат Новый Структура("Статус, ПричиныОтказа", Статус, ПричиныОтказа);
	
КонецФункции

Функция СсылкаПоСтрокеСтатуса(СтрокаСтатуса, ОписаниеОшибки = "")
	
	ТекстИзФайла = ВРЕГ(СокрЛП(СтрокаСтатуса));
	Если ТекстИзФайла = "ОТПРАВЛЕН" Тогда
		Возврат Перечисления.СтатусыОтправкиОтчетности.ОтправкаПодтверждена;
	ИначеЕсли ТекстИзФайла = "ДОСТАВЛЕН" Тогда
		Возврат Перечисления.СтатусыОтправкиОтчетности.ДоставкаПодтверждена;
	ИначеЕсли ТекстИзФайла = "СДАН" Тогда
		Возврат Перечисления.СтатусыОтправкиОтчетности.Сдана;
	ИначеЕсли ТекстИзФайла = "НЕ ПРИНЯТ" ИЛИ ТекстИзФайла = "НЕПРИНЯТ" Тогда
		Возврат Перечисления.СтатусыОтправкиОтчетности.НеПринята;
	ИначеЕсли ТекстИзФайла = "" ИЛИ ТекстИзФайла = "NONE" Тогда
		Возврат Перечисления.СтатусыОтправкиОтчетности.ПустаяСсылка();
	Иначе
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось определить статус сдачи отчетности по ответу сервера (%1)'"), ТекстИзФайла);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция АдресРесурсаНаСервереОнлайнЦентраПоСдачеОтчетности()
	
	Возврат "/wsgi/";
	
КонецФункции

Функция ПолучитьИдентификаторОтправки(ОтправкаОтчетности)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтправкиОтчетности.Идентификатор
	                      |ИЗ
	                      |	Справочник.ОтправкиОтчетности КАК ОтправкиОтчетности
	                      |ГДЕ
	                      |	ОтправкиОтчетности.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ОтправкаОтчетности);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Выборка.Идентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОтправитьГотовыйКОтправкеПакет(ОтчетностьКОтправке, Соединение, ОписаниеОшибки = "")
	
	// получаем сведения пакета (данные и имя файла) из ИБ
	СведенияОПакете = ПолучитьПакетИзИБ(ОтчетностьКОтправке, ОписаниеОшибки);
	Если СведенияОПакете = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// создаем временный каталог
	КаталогПакета = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
	СоздатьКаталог(КаталогПакета);
	
	// выгружаем пакет во временный каталог
	ПолноеИмяФайлаПакета = КаталогПакета + ПолучитьИмяФайлаПакета(СведенияОПакете);
	Попытка
		СведенияОПакете.Данные.Получить().Записать(ПолноеИмяФайлаПакета);
	Исключение
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогПакета);
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
	// кодируем в Base64
	РезультатКодирования = ЗакодироватьФайлВBase64(ПолноеИмяФайлаПакета, ПолноеИмяФайлаПакета, ОписаниеОшибки);
	Если НЕ РезультатКодирования Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогПакета);
		Возврат Ложь;
	КонецЕсли;
	
	// отправляем
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.ОтправитьДляОбработки(ПолноеИмяФайлаПакета, АдресРесурсаНаСервереОнлайнЦентраПоСдачеОтчетности(), ФайлРезультата);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ПолноеИмяФайлаПакета);
	Исключение
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогПакета);
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка отправки пакета с кодом %1 на сервер сдачи отчетности:" + Символы.ПС + Символы.ПС + "%2'"), СокрЛП(ОтчетностьКОтправке.Код), ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
	// считываем идентификатор из файла результата
	ИдентификаторОтправки = ПолучитьИдентификаторИзФайлаРезультатаОтправки(ФайлРезультата, ОписаниеОшибки);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогПакета);
	Если НЕ ЗначениеЗаполнено(ИдентификаторОтправки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// отражаем факт отправки отчетности в базе
	Если НЕ ОтразитьФактОтправкиОтчетности(ОтчетностьКОтправке, ИдентификаторОтправки, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьИдентификаторИзФайлаРезультатаОтправки(ФайлРезультата, ОписаниеОшибки = "")
	
	Попытка
		ОбъектЧтение = Новый ЧтениеXML;
		ОбъектЧтение.ОткрытьФайл(ФайлРезультата);
		Пока ОбъектЧтение.Прочитать() Цикл
			Если ОбъектЧтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтение.Имя = "uid" Тогда
				Пока ОбъектЧтение.Прочитать() Цикл
					Если ОбъектЧтение.ТипУзла = ТипУзлаXML.Текст Тогда
						uid = СокрЛП(ОбъектЧтение.Значение);
						ОбъектЧтение.Закрыть();
						Возврат uid;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ОбъектЧтение.Закрыть();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка извлечения идентификатора отправленного отчета из ответа сервера:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОтразитьФактОтправкиОтчетности(ОтчетностьКОтправке, ИдентификаторОтправки, ОписаниеОшибки)
	
	Попытка
		Объект = ОтчетностьКОтправке.ПолучитьОбъект();
		Объект.Статус = Перечисления.СтатусыОтправкиОтчетности.Отправлена;
		Объект.Идентификатор = ИдентификаторОтправки;
		Объект.ДатаОтправки = ТекущаяДатаСеанса();
		Объект.Записать();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка отражения в ИБ факта отправки пакета с отчетностью:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОтразитьСостояниеОтправкиВБазеПриНеобходимости(ОтчетностьКОтправке, РезультатСдачи, ОписаниеОшибки = "")
	
	// получаем последнее отраженное в ИБ событие по отправке данной отчетности
	ПоследнееСобытиеОтправкиОтчетности = ПолучитьПоследнееСобытиеПоОтправкеОтчетности(ОтчетностьКОтправке, ОписаниеОшибки);
	Если ПоследнееСобытиеОтправкиОтчетности = Неопределено Тогда // Неопределено = ошибка при выполнении запрос к ИБ
		Возврат Ложь;
	КонецЕсли;
	
	// если отражать нечего, то считаем, что отразили
	Если АктаульныйРезультатСоответствуетОтраженномуВИБ(ПоследнееСобытиеОтправкиОтчетности, РезультатСдачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// отражаем измененное состояние
	Событие = Справочники.СобытияОтправкиОтчетности.СоздатьЭлемент();
	Событие.Отправка = ОтчетностьКОтправке;
	Событие.Статус = РезультатСдачи.Статус;
	Событие.ТребуетАудита = (РезультатСдачи.Статус = Перечисления.СтатусыОтправкиОтчетности.НеПринята);
	Для Каждого ПричинаОтказа Из РезультатСдачи.ПричиныОтказа Цикл
		НовСтр = Событие.ПричиныОтказа.Добавить();
		НовСтр.Причина = ПричинаОтказа;
	КонецЦикла;
	Попытка
		Событие.Записать();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка записи в ИБ состояния отправки пакета отчетности с кодом %1:" + Символы.ПС + Символы.ПС + "%2'"), СокрЛП(ОтчетностьКОтправке.Код), ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция АктаульныйРезультатСоответствуетОтраженномуВИБ(РезультатССервера, РезультатИзИБ)
	
	Если НЕ ЗначениеЗаполнено(РезультатССервера) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// результаты считаются равными, если статусы и причины отказа равны
	Если РезультатССервера.Статус = РезультатИзИБ.Статус Тогда
		Если РезультатССервера.ПричиныОтказа.Количество() = РезультатИзИБ.ПричиныОтказа.Количество() Тогда
			Для Каждого Стр Из РезультатССервера Цикл
				Если РезультатИзИБ.ПричиныОтказа.Найти(Стр) = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПоследнееСобытиеПоОтправкеОтчетности(ОтчетностьКОтправке, ОписаниеОшибки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СобытияОтправкиОтчетности.ИсходныйСтатус,
	                      |	СобытияОтправкиОтчетности.ПричиныОтказа.(
	                      |		Причина
	                      |	)
	                      |ИЗ
	                      |	Справочник.СобытияОтправкиОтчетности КАК СобытияОтправкиОтчетности
	                      |ГДЕ
	                      |	СобытияОтправкиОтчетности.Отправка = &Ссылка
	                      |	И НЕ СобытияОтправкиОтчетности.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	СобытияОтправкиОтчетности.ДатаПолучения УБЫВ");
	Запрос.УстановитьПараметр("Ссылка", ОтчетностьКОтправке);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения статуса отправки отчетности из таблицы событий отправки:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Статус, ПричиныОтказа", Выборка.ИсходныйСтатус, Выборка.ПричиныОтказа.Выгрузить().ВыгрузитьКолонку("Причина"));
	Иначе
		Возврат Новый Структура("Статус, ПричиныОтказа", Перечисления.СтатусыОтправкиОтчетности.ПустаяСсылка(), Новый Массив);
	КонецЕсли;
	
КонецФункции

Функция ЗакодироватьФайлВBase64(ИмяФайлаИсточника, ИмяФайлаПриемника, ОписаниеОшибки)
	
	СтрBase64 = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаИсточника));
	СтрокаЗамены = Символ(13) + Символ(10);
	СтрBase64 = СтрЗаменить(СтрBase64, СтрокаЗамены, "");
	
	Возврат ЗаписатьСтрокуВФайл(СтрBase64, ИмяФайлаПриемника, ОписаниеОшибки);
	
КонецФункции

Функция ЗаписатьСтрокуВФайл(Стр, ИмяФайлаПриемника, ОписаниеОшибки)
	
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаПриемника, "windows-1251");
		ЗаписьТекста.Записать(Стр);
		ЗаписьТекста.Закрыть();
		Возврат Истина;
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка записи закодированных в Base64 данных во временный файл:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьИмяФайлаПакета(СведенияОПакете)
	
	Если НЕ ЗначениеЗаполнено(СведенияОПакете.ИмяФайла) Тогда
		Возврат Строка(Новый УникальныйИдентификатор) + ".zip";
	Иначе
		Возврат СокрЛП(СведенияОПакете.ИмяФайла);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПакетИзИБ(ОтчетностьКОтправке, ОписаниеОшибки = "")
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПакетыОтчетности.Данные,
	                      |	ПакетыОтчетности.ИмяФайла
	                      |ИЗ
	                      |	РегистрСведений.ПакетыОтчетности КАК ПакетыОтчетности
	                      |ГДЕ
	                      |	ПакетыОтчетности.ОтправкаОтчетности = &ОтправкаОтчетности");
	Запрос.УстановитьПараметр("ОтправкаОтчетности", ОтчетностьКОтправке);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Новый Структура("ИмяФайла, Данные", Выборка.ИмяФайла, Выборка.Данные);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения данных пакета из ИБ:" + Символы.ПС + Символы.ПС + "%1'"), ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ ОТПРАВКИ ОТЧЕТНОСТИ В СПРАВОЧНИКЕ

Функция ПроверитьПередРегистрациейЗаявкиНаОтправкуОтчетности(Отчет, КонтролирующийОрган = "ФНС", ТекстВопроса = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ОПРЕДЕЛЯЕМ, ОТКРЫТО ЛИ НАПРАВЛЕНИЕ
	
	// определяем параметры направления
	Организация = Отчет.Организация;
	ТипОтчета = ТипЗнч(Отчет);
	Если КонтролирующийОрган = "ФНС" Тогда
		ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ФНС;
		КодНаправления = ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет);
	ИначеЕсли КонтролирующийОрган = "ФСГС" Тогда
		ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ФСГС;
		КодНаправления = СокрЛП(Организация.КодОрганаФСГС);
	Иначе
		ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ПФР;
		КодНаправления = СокрЛП(Организация.КодОрганаПФР);
	КонецЕсли;
	
	Если НЕ НаправлениеСдачиОтчетностиОткрыто(Организация, ТипНаправления, КодНаправления) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Направление сдачи отчетности по организации закрыто. Отправка невозможна.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// УБЕЖДАЕМСЯ, ЧТО ПОДОБНЫЙ ОТЧЕТ НЕ ОТПРАВЛЯЛСЯ
	
	// проверяем на то, что такой отчет уже отправлялся
	Если ТипОтчета = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		АналогичныеОтправки = ПолучитьОтправкиОтчетаСАналогичнымиКлючевымиСвойствами(Отчет, ТипНаправления);
		Если АналогичныеОтправки.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Вы уже отправляли аналогичный отчет с аналогичным признаком корректировки,
										|за тот же период, по той же организации и в ту же инспекцию.
										|
										|Вы уверены, что хотите отправить отчет заново?'");
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ОтправкиОтчета = ПолучитьОтправкиОтчета(Отчет);
		Если ОтправкиОтчета.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Вы уже отправляли данный отчет.
										|Вы уверены, что хотите отправить отчет заново?'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОтправкиОтчетаСАналогичнымиКлючевымиСвойствами(Отчет, ТипНаправления)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	                      |	ОтправкиОтчетности.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ОтправкиОтчетности КАК ОтправкиОтчетности
	                      |ГДЕ
	                      |	ОтправкиОтчетности.ПометкаУдаления = ЛОЖЬ
	                      |	И ОтправкиОтчетности.Отчет = &Отчет
	                      |	И ОтправкиОтчетности.ТипНаправления = &ТипНаправления
	                      |	И ОтправкиОтчетности.КодНаправления = &КодНаправления
	                      |	И ОтправкиОтчетности.Организация = &Организация
	                      |	И ОтправкиОтчетности.ДатаНачалаПериода = &ДатаНачалаПериода
	                      |	И ОтправкиОтчетности.ДатаОкончанияПериода = &ДатаОкончанияПериода
	                      |	И ОтправкиОтчетности.ВидДокумента = &ВидДокумента
	                      |	И ОтправкиОтчетности.ВидОтчета.ИсточникОтчета = &ИсточникОтчета");
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("ТипНаправления", ТипНаправления);
	Запрос.УстановитьПараметр("КодНаправления", ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет));
	Запрос.УстановитьПараметр("Организация", Отчет.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", Отчет.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", Отчет.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидДокумента", Отчет.Вид);
	Запрос.УстановитьПараметр("ИсточникОтчета", Отчет.ИсточникОтчета);
	
	МассивРезультат = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивРезультат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивРезультат;
	
КонецФункции

Функция ПолучитьОтправкиОтчета(Отчет)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	                      |	ОтправкиОтчетности.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ОтправкиОтчетности КАК ОтправкиОтчетности
	                      |ГДЕ
	                      |	ОтправкиОтчетности.ПометкаУдаления = ЛОЖЬ
	                      |	И ОтправкиОтчетности.Отчет = &Отчет");
	Запрос.УстановитьПараметр("Отчет", Отчет);
	
	МассивРезультат = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивРезультат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивРезультат;
	
КонецФункции

Функция ЗарегистрироватьОтправкуОтчетностиВСправочнике(ДанныеПакета, ИмяФайлаПакета, Отчет) Экспорт
	
	Организация = Отчет.Организация;
	
	// определяем направление
	КодИМНС = ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет);
	Если ЗначениеЗаполнено(КодИМНС) Тогда
		ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ФНС;
		КодНаправления = КодИМНС;
	ИначеЕсли ЭтоОтчетСтатистики(Отчет) Тогда
		ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ФСГС;
		КодНаправления = СокрЛП(Организация.КодОрганаФСГС);
	Иначе
		ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ПФР;
		КодНаправления = СокрЛП(Организация.КодОрганаПФР);
	КонецЕсли;
	
	// анализируем код направления
	Если ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ФНС Тогда
		Если СтрДлина(КодНаправления) <> 4
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНаправления) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Код инспекции-получателя отчета должен состоять строго из четырех цифр.'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипНаправления = Перечисления.ТипыНаправленийСдачиОтчетности.ФСГС Тогда
		Если СтрДлина(КодНаправления) <> 5
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(КодНаправления, 2))
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(КодНаправления, 2))
		ИЛИ Сред(КодНаправления, 3, 1) <> "-" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код органа ФСГС, в который представляется отчетность организации (задается в справочнике ""Организации""), должен удовлетворять шаблону XX-XX, где X - любая цифра.'"));
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если СтрДлина(КодНаправления) <> 7
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(КодНаправления, 3))
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(КодНаправления, 3))
		ИЛИ Сред(КодНаправления, 4, 1) <> "-" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код органа ПФР, в который представляется отчетность организации (задается в справочнике ""Организации""), должен удовлетворять шаблону XXX-XXX, где X - любая цифра.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// определяем вид отчета
	МетаданныеОтчета = Метаданные.НайтиПоТипу(ТипЗнч(Отчет));
	Если МетаданныеОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неизвестный вид отчета.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если МетаданныеОтчета.Имя = "РегламентированныйОтчет" Тогда
		ИсточникОтчета = Отчет.ИсточникОтчета;
	Иначе
		ИсточникОтчета = МетаданныеОтчета.Имя;
	КонецЕсли;
	ВидОтчета = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникОтчета);
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В справочнике ""Регламентированные отчеты"" не найдено определение отчета вида %1.'"), ИсточникОтчета));
		Возврат Ложь;
	КонецЕсли;
	
	// определяем прочие свойства отправки
	ТипЗнчОтчет = ТипЗнч(Отчет);
	МетаданныеОтчета = Метаданные.НайтиПоТипу(ТипЗнчОтчет);
	ИмяМетаданныхОтчета = МетаданныеОтчета.Имя;
	Если ИмяМетаданныхОтчета = "РегламентированныйОтчет" Тогда
		ДатаНачалаПериода = Отчет.ДатаНачала;
		ДатаОкончанияПериода = Отчет.ДатаОкончания;
		ВидДокумента = Отчет.Вид;
	Иначе
		ПериодОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДатыПериодаДокумента(Отчет);
		Если НЕ ЗначениеЗаполнено(ПериодОтчета) Тогда
			ДатаНачалаПериода = ПериодОтчета.ДатаНачала;
			ДатаОкончанияПериода = ПериодОтчета.ДатаОкончания;
		Иначе
			ДатаНачалаПериода = ПериодОтчета.ДатаНачала;
			ДатаОкончанияПериода = ПериодОтчета.ДатаОкончания;
		КонецЕсли;
		ВидДокумента = 0;
	КонецЕсли;
	
	// запоминаем в справочнике
	ЭлементОтправки = Справочники.ОтправкиОтчетности.СоздатьЭлемент();
	ЭлементОтправки.Отчет = Отчет;
	ЭлементОтправки.ТипНаправления = ТипНаправления;
	ЭлементОтправки.КодНаправления = КодНаправления;
	ЭлементОтправки.ДатаОткрытия = ТекущаяДатаСеанса();
	ЭлементОтправки.Статус = Перечисления.СтатусыОтправкиОтчетности.Запланирована;
	ЭлементОтправки.Организация = Организация;
	ЭлементОтправки.ДатаНачалаПериода = ДатаНачалаПериода;
	ЭлементОтправки.ДатаОкончанияПериода = ДатаОкончанияПериода;
	ЭлементОтправки.ВидДокумента = ВидДокумента;
	ЭлементОтправки.ВидОтчета = ВидОтчета;
	
	НачатьТранзакцию();
	
	// пытаемся записать в справочнике
	Попытка
		ЭлементОтправки.Записать();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось запланировать отправку отчета:
				|
				|%1'"), ИнформацияОбОшибке().Описание));
		Возврат Ложь;
	КонецПопытки;
	
	// пытаемся записать пакет в регистр
	ПакетОтчетности = РегистрыСведений.ПакетыОтчетности.СоздатьМенеджерЗаписи();
	ПакетОтчетности.ОтправкаОтчетности = ЭлементОтправки.Ссылка;
	ПакетОтчетности.ИмяФайла = ИмяФайлаПакета;
	ПакетОтчетности.Данные = Новый ХранилищеЗначения(ДанныеПакета);
	Попытка
		ПакетОтчетности.Записать(Ложь);
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось запланировать отправку отчета:
				|
				|%1'"), ИнформацияОбОшибке().Описание));
		Возврат Ложь;
	КонецПопытки;
	
	// пытаемся зафиксировать транзакцию
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось запланировать отправку отчета:
				|
				|%1'"), ИнформацияОбОшибке().Описание));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИИ О НАПРАВЛЕНИЯХ СДАЧИ ИЗ УПРАВЛЯЮЩЕГО ПРИЛОЖЕНИЯ

Функция ТипНаправленияПоИдентификаторуТипа(ИДТипа)
	
	Если ИДТипа = "ФНС" Тогда
		Возврат Перечисления.ТипыНаправленийСдачиОтчетности.ФНС;
	ИначеЕсли ИДТипа = "ФСГС" Тогда
		Возврат Перечисления.ТипыНаправленийСдачиОтчетности.ФСГС;
	ИначеЕсли ИДТипа = "ПФР" Тогда
		Возврат Перечисления.ТипыНаправленийСдачиОтчетности.ПФР;
	Иначе
		Возврат Перечисления.ТипыНаправленийСдачиОтчетности.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ОпределитьНаправление(Организация, ТипНаправления, КодНаправления, ДатаАктуализации)
	
	НовыйЭлемент = Справочники.НаправленияСдачиОтчетности.СоздатьЭлемент();
	НовыйЭлемент.Организация = Организация;
	НовыйЭлемент.ТипНаправления = ТипНаправления;
	НовыйЭлемент.Направление = КодНаправления;
	НовыйЭлемент.ДатаАктуализации = ДатаАктуализации;
	Попытка
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Исключение
		ОшибкаИнф = ИнформацияОбОшибке();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ИмяПользователяИПарольУдаленногоДоступаКВебСервисамМС()
	
	УстановитьПривилегированныйРежим(Истина);
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ВнутреннийАдресМенеджераСервиса");
	ИмяСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ЛогинСлужебногоПользователя", Истина);
	ПарольСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ПарольСлужебногоПользователя", Истина);
	Результат = Новый Структура("Имя, Пароль", ИмяСлужебногоПользователя, ПарольСлужебногоПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат "RemoteAccess";
	
КонецФункции

Функция ОпеределениеReporting(ВебАдрес, ОписаниеОшибки = "") Экспорт
	
	Попытка
		ИмяИПароль = ИмяПользователяИПарольУдаленногоДоступаКВебСервисамМС();
		Возврат Новый WSОпределения(ВебАдрес + "/ws/Reporting?wsdl", ИмяИПароль.Имя, ИмяИПароль.Пароль);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // ОпеределениеУдаленногоАдминистрирования()

Функция ИнициализироватьВебСервисReporting(ОпределениеСервиса, ОписаниеОшибки = "")
	
	Попытка
		Прокси = Новый WSПрокси(ОпределениеСервиса, "http://www.1c.ru/SaaS/1.0/WS", "Reporting", "ReportingSoap");
		ИмяИПароль = ИмяПользователяИПарольУдаленногоДоступаКВебСервисамМС();
		Прокси.Пользователь = ИмяИПароль.Имя;
		Прокси.Пароль = ИмяИПароль.Пароль;
		Возврат Прокси;
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСведенияИзУправляющегоПриложения()
	Перем ОписаниеОшибки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СобытиеЖурнала = СобытиеЖурналаРегистрации(Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности);
	
	// получаем адрес веб-сервиса
	ВебАдрес = Константы.АдресСервисаНаправленийСдачиОтчетности.Получить();
	Если НЕ ЗначениеЗаполнено(ВебАдрес) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								НСтр("ru = 'Не задан адрес веб-сервиса для получения сведений о направлениях сдачи отчетности.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	// инициализируем ws-определение
	ОпределенияСервиса = ОпеределениеReporting(ВебАдрес, ОписаниеОшибки);
	Если ОпределенияСервиса = Неопределено Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка создания определения веб-сервиса:" + Символы.ПС + Символы.ПС + "%1'"), ОписаниеОшибки));
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем прокси
	ПроксиСервиса = ИнициализироватьВебСервисReporting(ОпределенияСервиса, ОписаниеОшибки);
	Если ПроксиСервиса = Неопределено Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка создания клиентского прокси для вызова веб-сервиса:" + Символы.ПС + Символы.ПС + "%1'"), ОписаниеОшибки));
		Возврат Неопределено;
	КонецЕсли;
	
	// формируем входной параметр операции сервиса
	ZoneList = СформироватьZoneList(ОпределенияСервиса.ФабрикаXDTO, ОписаниеОшибки);
	Если ZoneList = Неопределено Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка формирования списка областей данных информационной базы:" + Символы.ПС + Символы.ПС + "%1'"), ОписаниеОшибки));
		Возврат Неопределено;
	КонецЕсли;
	
	// вызываем метод сервиса
	Попытка
		ОбъектXDTO = ПроксиСервиса.GetDirectionsByZoneList(ZoneList, ОписаниеОшибки);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка вызова операции веб-сервиса:" + Символы.ПС + Символы.ПС + "%1'"), ОписаниеОшибки));
		Возврат Неопределено;
	КонецПопытки;
	
	// преобразовываем результат в таблицу
	Попытка
		ТаблицаНаправлений = ПолучитьТаблицуНаправленийПоОбъектуXDTO(ОбъектXDTO);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОНаправленияхСдачиОтчетности,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка разбора ответа от веб-сервиса:" + Символы.ПС + Символы.ПС + "%1'"), ОписаниеОшибки));
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаНаправлений;
	
КонецФункции

Функция СформироватьZoneList(локФабрикаXDTO, ОписаниеОшибки = "")
	
	// пытаемся выполнить запрос
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбластиДанных.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
	                      |ИЗ
	                      |	РегистрСведений.ОбластиДанных КАК ОбластиДанных,
	                      |	Константа.ПредставлениеОбластиДанных КАК ПредставлениеОбластиДанных
	                      |ГДЕ
	                      |	ОбластиДанных.Статус = &Статус
	                      |	И ПОДСТРОКА(ПредставлениеОбластиДанных.Значение, 1, 255) <> """"");
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбластейДанных.Используется);
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	// инициализируем ZoneList
	ТипZoneList = локФабрикаXDTO.Тип("http://www.1c.ru/SaaS/1.0/XMLSchema/Reporting", "ZoneList");
	ZoneList = локФабрикаXDTO.Создать(ТипZoneList);
	
	// заполняем ZoneList
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ZoneList.Zone.Добавить(СоздатьZoneElement(локФабрикаXDTO, Выборка.ОбластьДанных));
	КонецЦикла;
	
	Возврат ZoneList;
	
КонецФункции

Функция СоздатьZoneElement(локФабрикаXDTO, локЗначение)
	
	Тип = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "decimal");
	Возврат ФабрикаXDTO.Создать(Тип, локЗначение);
	
КонецФункции

Функция ПолучитьТаблицуНаправленийПоОбъектуXDTO(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНаправлений = Новый ТаблицаЗначений;
	ТаблицаНаправлений.Колонки.Добавить("КодАбонента");
	ТаблицаНаправлений.Колонки.Добавить("Организация");
	ТаблицаНаправлений.Колонки.Добавить("Тип");
	ТаблицаНаправлений.Колонки.Добавить("Код");
	
	Для Каждого НаправлениеСдачи Из ОбъектXDTO.Direction Цикл
		НовСтр = ТаблицаНаправлений.Добавить();
		НовСтр.КодАбонента = НаправлениеСдачи.SubscriberID;
		НовСтр.Организация = НаправлениеСдачи.Organisation;
		НовСтр.Тип = НаправлениеСдачи.Type;
		НовСтр.Код = НаправлениеСдачи.Code;
	КонецЦикла;
	
	Возврат ТаблицаНаправлений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ

Функция ИзменитьРасширениеФайла(Знач КороткоеИмяФайлаВыгрузки, НовоеРасширение)
	
	Если ТипЗнч(КороткоеИмяФайлаВыгрузки) = Тип("Массив") Тогда
		КороткоеИмяФайлаВыгрузки = КороткоеИмяФайлаВыгрузки[0];
	КонецЕсли;
	
	ВхождениеТочки = СтрНайти(КороткоеИмяФайлаВыгрузки, ".");
	Если ВхождениеТочки = 0 Тогда
		Возврат КороткоеИмяФайлаВыгрузки + "." + НовоеРасширение;
	Иначе
		Возврат Лев(КороткоеИмяФайлаВыгрузки, ВхождениеТочки - 1) + "." + НовоеРасширение;
	КонецЕсли;
	
КонецФункции

Функция СформироватьФайлПакета(
		Отчет, 
		КонтролирующийОрган, 
		ТекстВыгрузки, 
		КороткоеИмяФайлаВыгрузки, 
		КодировкаТекстаВыгрузки = Неопределено, 
		ДанныеФайлаДоверенности = Неопределено, 
		КороткоеИмяФайлаДоверенности = Неопределено, 
		ДанныеФайлаПакета = Неопределено, 
		КороткоеИмяФайлаПакета = Неопределено) Экспорт
	
	// создаем временный каталог, куда будем сохранять файлы до помещения в архив
	ВремКаталог = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
	СоздатьКаталог(ВремКаталог);
	
	// инициализируем объект для записи в архив
	КороткоеИмяФайлаПакета = ИзменитьРасширениеФайла(КороткоеИмяФайлаВыгрузки, "zip");
	ПолноеИмяФайлаАрхива = ВремКаталог + КороткоеИмяФайлаПакета;
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	// пишем файл выгрузки
	Если ТипЗнч(КороткоеИмяФайлаВыгрузки) = Тип("Массив") тогда
		КороткиеИменаФайловВыгрузки = КороткоеИмяФайлаВыгрузки;
		ТекстыВыгрузки = ТекстВыгрузки;
		КодировкиТекстовВыгрузки = КодировкаТекстаВыгрузки;
	Иначе
		
		КороткиеИменаФайловВыгрузки = Новый Массив;
		КороткиеИменаФайловВыгрузки.Добавить(КороткоеИмяФайлаВыгрузки);
		
		ТекстыВыгрузки = Новый Массив;
		ТекстыВыгрузки.Добавить(ТекстВыгрузки);
		
		КодировкиТекстовВыгрузки = Новый Массив;
		КодировкиТекстовВыгрузки.Добавить(КодировкаТекстаВыгрузки);
		
	КонецЕсли;
	
	Для Инд = 0 По КороткиеИменаФайловВыгрузки.Количество() - 1 Цикл
		
		ЭлКороткоеИмяФайлаВыгрузки = КороткиеИменаФайловВыгрузки[Инд];
		ЭлТекстВыгрузки = ТекстыВыгрузки[Инд];
		ЭлКодировкаТекстаВыгрузки = КодировкиТекстовВыгрузки[Инд];
		
		ПолноеИмяФайлаВыгрузки = ВремКаталог + ЭлКороткоеИмяФайлаВыгрузки;
		Если ЭтоАдресВременногоХранилища(ЭлТекстВыгрузки) Тогда
			ДвоичныеДанныеФайлаВыгрузки = ПолучитьИзВременногоХранилища(ЭлТекстВыгрузки);
			ДвоичныеДанныеФайлаВыгрузки.Записать(ПолноеИмяФайлаВыгрузки);
		Иначе
			Если НЕ ЗаписатьТекстВФайл(ЭлТекстВыгрузки, ПолноеИмяФайлаВыгрузки, ЭлКодировкаТекстаВыгрузки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось запланировать отправку отчета: не удалось записать временный файл с отчетностью.'"));
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// пишем файл доверенности, если он определен
	Если КонтролирующийОрган = "ФНС" Тогда
		Если ЗначениеЗаполнено(КороткоеИмяФайлаДоверенности) Тогда
			ПолноеИмяФайлаДоверенности = ВремКаталог + КороткоеИмяФайлаДоверенности;
			ДанныеФайлаДоверенности.Записать(ПолноеИмяФайлаДоверенности);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось запланировать отправку отчета: отсутствуют сведения о доверенности.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// пишем файл info
	ПолноеИмяФайлаInfo = ВремКаталог + "info";
	СформироватьФайлInfoПакета(Отчет, КонтролирующийОрган, ПолноеИмяФайлаInfo);
	
	// пакуем отчетность, доверенность и файл info в архив
	Попытка
		ЗаписьАрхива.Добавить(ВремКаталог + "*.*");
		ЗаписьАрхива.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось запланировать отправку отчета:
				|не удалось записать файл пакета с отчетностью.'"));
		Возврат Ложь;
	КонецПопытки;
	
	// инициализируем свойства пакета
	ДанныеФайлаПакета = Новый ДвоичныеДанные(ПолноеИмяФайлаАрхива);
	
	// удаляем временный каталог
	УдалитьФайлы(ВремКаталог);
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьТекстВФайл(ТекстФайла, ПолноеИмяФайла, КодировкаФайла)
	
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайла, КодировкаФайла);
		ЗаписьТекста.Записать(ТекстФайла);
		ЗаписьТекста.Закрыть();
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура СформироватьФайлInfoПакета(Отчет, КонтролирующийОрган, ПолноеИмяФайлаInfo)
	
	// извлекаем параметры
	ОрганизацияОтчета = Отчет.Организация;
	ИНН = СокрЛП(ОрганизацияОтчета.ИНН);
	Если КонтролирующийОрган = "ФНС" Тогда
		ТипНаправления = "fns";
		КодНаправления = ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет);
	ИначеЕсли КонтролирующийОрган = "ФСГС" Тогда
		ТипНаправления = "fsgs";
		КодНаправления = СокрЛП(ОрганизацияОтчета.КодОрганаФСГС);
	Иначе
		ТипНаправления = "pfr";
		КодНаправления = СокрЛП(ОрганизацияОтчета.КодОрганаПФР);
	КонецЕсли;
	
	// формируем таблицу параметров
	ТаблицаПараметровФайлаInfo = СоздатьТаблицуПараметровФайлаInfo();
	ОпределитьПараметрЗапроса(ТаблицаПараметровФайлаInfo, "request", "send");
	ОпределитьПараметрЗапроса(ТаблицаПараметровФайлаInfo, "inn", ИНН);
	ОпределитьПараметрЗапроса(ТаблицаПараметровФайлаInfo, "direction", ТипНаправления);
	ОпределитьПараметрЗапроса(ТаблицаПараметровФайлаInfo, "code", КодНаправления);
	
	// пишем файл на диск
	ЗаписатьФайлInfoПакета(ТаблицаПараметровФайлаInfo, ПолноеИмяФайлаInfo);
	
КонецПроцедуры

Процедура ЗаписатьФайлInfoПакета(ТаблицаПараметровЗапроса, ПолноеИмяФайлаInfo)
	
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайлаInfo) Тогда
		ПолноеИмяФайлаInfo = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	ОбъектЗапись = Новый ЗаписьТекста(ПолноеИмяФайлаInfo, "windows-1251");
	Для Каждого Стр Из ТаблицаПараметровЗапроса Цикл
		ОбъектЗапись.ЗаписатьСтроку(Стр.Имя + ":" + Стр.Значение);
	КонецЦикла;
	ОбъектЗапись.Закрыть();
	
КонецПроцедуры

Процедура ОпределитьПараметрЗапроса(ТаблицаПараметровЗапроса, ИмяПараметра, ЗначениеПараметра)
	
	НовСтр = ТаблицаПараметровЗапроса.Добавить();
	НовСтр.Имя = ИмяПараметра;
	НовСтр.Значение = ЗначениеПараметра;
	
КонецПроцедуры

Функция СоздатьТаблицуПараметровФайлаInfo()
	
	// создаем таблицу параметров запроса
	ТаблицаПараметровФайлаInfo = Новый ТаблицаЗначений;
	ТаблицаПараметровФайлаInfo.Колонки.Добавить("Имя");
	ТаблицаПараметровФайлаInfo.Колонки.Добавить("Значение");
	Возврат ТаблицаПараметровФайлаInfo;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ДОВЕРЕННОСТИ В ФОРМАТЕ ПРИКАЗА 534

Функция ВыгрузитьСведенияОДоверенностиИИзменитьФайлВыгрузки(Отчет, ДанныеДоверенности, ИмяФайлаДоверенности, ТекстВыгрузки, ИмяФайлаВыгрузки) Экспорт
	
	// выгружаем доверенность
	СведенияДоверенности = Неопределено;
	РезультатВыгрузки = ВыгрузитьСведенияОДоверенностиПоНаправлениюОтчета(Отчет, ДанныеДоверенности, ИмяФайлаДоверенности, СведенияДоверенности);
	Если НЕ РезультатВыгрузки ИЛИ НЕ ЗначениеЗаполнено(ИмяФайлаДоверенности) Тогда
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	// если доверенность выгружена, то подменим ИНН и КПП в имени файла
	Если НЕ ИзменитьФайлВыгрузкиПриОтправкеЧерезУполномоченногоПредставителя(ТекстВыгрузки, ИмяФайлаВыгрузки, СведенияДоверенности, ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИзменитьФайлВыгрузкиПриОтправкеЧерезУполномоченногоПредставителя(ТекстВыгрузки, ИмяФайлаВыгрузки, Доверенность, КодНО, ДатаПериода = '00010101')
	
	ИмяФайлаБезРасширения = Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 4);
	РасширениеФайла = Прав(ИмяФайлаВыгрузки, 4);
	Если нрег(РасширениеФайла) = ".xml" Тогда // формат xml - меняем ИдФайл и имя файла
		
		// разбираем имя файла на компоненты
		КомпонентыИмени = РазложитьСтрокуВМассивПодстрок(ИмяФайлаБезРасширения, "_");
		Если КомпонентыИмени.Количество() < 5 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно изменить реквизиты отправителя в имени файла отчета: некорректное исходное имя файла выгрузки.'"));
			Возврат Ложь;
		КонецЕсли;
		
		// получаем рег. данные представителя
		СведенияОПредставителе = ПолучитьИННКППУполномоченногоПредставителя(Доверенность);
		Если СведенияОПредставителе.ПредставительЯвляетсяЮЛ Тогда
			ИННКПП = СокрЛП(СведенияОПредставителе.ИНН) + СокрЛП(СведенияОПредставителе.КПП);
		Иначе
			ИННКПП = СокрЛП(СведенияОПредставителе.ИНН);
		КонецЕсли;
		
		// подменяем ИНН и КПП в компонентах имени файла
		Если КомпонентыИмени[0] = "ДОХОД" Тогда // 2-НДФЛ, старая форма
			КомпонентыИмени.Установить(3, ИННКПП);
		Иначе // прочие отчеты
			КомпонентыИмени.Установить(4, ИННКПП);
		КонецЕсли;
		
		// формируем новое имя файла
		НовоеИмяФайлаВыгрузкиБезРасширения = СформироватьСтрокуИзМассиваПодстрок(КомпонентыИмени, "_");
		
		// подменяем старое имя на новое в тексте выгрузки
		ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, ИмяФайлаБезРасширения, НовоеИмяФайлаВыгрузкиБезРасширения);
		
		// присваиваем значение нового имени файла переменной со старым именем
		ИмяФайлаВыгрузки = НовоеИмяФайлаВыгрузкиБезРасширения + РасширениеФайла;
		
	Иначе // текстовый формат - меняем имя файла
		
		// разбираем имя файла на компоненты
		КомпонентыИмени = РазложитьСтрокуВМассивПодстрок(ИмяФайлаБезРасширения, "_");
		ЧислоКомпонентИмени = КомпонентыИмени.Количество();
		Если ЧислоКомпонентИмени <> 4 И ЧислоКомпонентИмени <> 5 Тогда // непонятный формат
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно изменить реквизиты отправителя в имени файла отчета: некорректное исходное имя файла выгрузки.'"));
			Возврат Ложь;
		КонецЕсли;
		
		// если файл от юрлица, то объединяем ИНН и КПП (первую и вторую составляющие) в одну компоненту
		Если СтрДлина(КомпонентыИмени[1]) = 9 Тогда // вторая компонента - КПП, а значит файл от юрлица
			КомпонентыИмени.Установить(0, КомпонентыИмени[0] + "_" + КомпонентыИмени[1]);
			КомпонентыИмени.Удалить(1);
		КонецЕсли;
		
		// формируем первую компоненту нового имени (с ИНН и КПП)
		СведенияОПредставителе = ПолучитьИННКППУполномоченногоПредставителя(Доверенность);
		Если СведенияОПредставителе.ПредставительЯвляетсяЮЛ Тогда
			КомпонентыИмени.Установить(0, "O" + СведенияОПредставителе.ИНН + "_" + СведенияОПредставителе.КПП);
		Иначе
			КомпонентыИмени.Установить(0, "O" + СведенияОПредставителе.ИНН);
		КонецЕсли;
		
		// устанавливаем новый счетчик файлов
		СчетчикВыгруженныхФайлов = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(СведенияОПредставителе.ИНН, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ДатаПериода, КодНО);
		КомпонентыИмени.Установить(3, Формат(СчетчикВыгруженныхФайлов, "ЧЦ=8; ЧН=00000000; ЧВН=; ЧГ="));
		РегламентированнаяОтчетностьВызовСервера.УстановитьСчетчикВыгруженныхФайлов(СведенияОПредставителе.ИНН, СчетчикВыгруженныхФайлов, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ДатаПериода, КодНО);
		
		// формируем новое имя файла
		ИмяФайлаВыгрузки = СформироватьСтрокуИзМассиваПодстрок(КомпонентыИмени, "_") + РасширениеФайла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтрокуИзМассиваПодстрок(МассивПодстрок, Разделитель = "")
	
	Если НЕ ЗначениеЗаполнено(МассивПодстрок) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрРезультат = МассивПодстрок[0];
	Для Инд = 2 По МассивПодстрок.Количество() Цикл
		СтрРезультат = СтрРезультат + Разделитель + МассивПодстрок[Инд - 1];
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

Функция ПолучитьИННКППУполномоченногоПредставителя(Доверенность)
	
	Если Доверенность.ПредставительЯвляетсяЮЛ Тогда
		Возврат Новый Структура("ПредставительЯвляетсяЮЛ, ИНН, КПП", Доверенность.ПредставительЯвляетсяЮЛ, Доверенность.ПредставительЮЛ_ИНН, Доверенность.ПредставительЮЛ_КПП);
	Иначе
		Возврат Новый Структура("ПредставительЯвляетсяЮЛ, ИНН", Доверенность.ПредставительЯвляетсяЮЛ, Доверенность.ПредставительФЛ_ИНН);
	КонецЕсли;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = СтрНайти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = СтрНайти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

Функция ВыгрузитьСведенияОДоверенностиИСформироватьФайлПакета(
		Отчет, 
		КонтролирующийОрган, 
		ТекстВыгрузки, 
		КороткоеИмяФайлаВыгрузки, 
		КодировкаТекстаВыгрузки, 
		ДвоичныеДанныеФайлаПакета, 
		КороткоеИмяФайлаПакета) Экспорт
		
	Перем ДанныеФайлаДоверенности, КороткоеИмяФайлаДоверенности, СведенияДоверенности;
	
	Если КонтролирующийОрган = "ФНС" Тогда
		
		// пытаемся выгрузить сведения о доверенности при необходимости
		Доверенность = Неопределено;
		Если НЕ ВыгрузитьСведенияОДоверенностиПоНаправлениюОтчета(Отчет, ДанныеФайлаДоверенности, КороткоеИмяФайлаДоверенности, Доверенность) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// если доверенность выгружена, то подменим ИНН и КПП в имени файла отчетности,
		// как того требует формат
		Если НЕ ИзменитьФайлВыгрузкиПриОтправкеЧерезУполномоченногоПредставителя(ТекстВыгрузки, КороткоеИмяФайлаВыгрузки, Доверенность, ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет), ПолучитьДатуПериодаПоСсылкеНаОтчет(Отчет)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// вызываем серверный метод, формирующий пакет
	Возврат СформироватьФайлПакета(
		Отчет, 
		КонтролирующийОрган, 
		ТекстВыгрузки, 
		КороткоеИмяФайлаВыгрузки, 
		КодировкаТекстаВыгрузки, 
		ДанныеФайлаДоверенности, 
		КороткоеИмяФайлаДоверенности, 
		ДвоичныеДанныеФайлаПакета, 
		КороткоеИмяФайлаПакета);
	
КонецФункции

Функция ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет)
	
	Если ТипЗнч(Отчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат СокрЛП(Отчет.КодНалоговогоОргана);
	Иначе
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(Отчет.Организация, ,"КодНО");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуПериодаПоСсылкеНаОтчет(Отчет)
	
	Если ТипЗнч(Отчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат Отчет.ДатаОкончания;
	Иначе // 2-НДФЛ
		Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДатыПериодаДокумента(Отчет).ДатаОкончания;
	КонецЕсли;
	
КонецФункции

Функция РегистрацияВИФНСПоОрганизацииИКодуНО(Организация, КодНО, КПП = "")
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	РегистрацияВИФНС.Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА РегистрацияВИФНС.Доверенность <> &ПустаяСсылкаДоверенность
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ДоверенностьЗаполнена
	                      |ИЗ
	                      |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацияВИФНС
	                      |ГДЕ
	                      |	(РегистрацияВИФНС.Владелец = &Организация
	                      |		ИЛИ РегистрацияВИФНС.Владелец = &ГоловнаяОрганизация)
						  |	И РегистрацияВИФНС.Код = &Код
						  |" + ?(ЗначениеЗаполнено(КПП), "И РегистрацияВИФНС.КПП = &КПП", "") + "
	                      |	И РегистрацияВИФНС.ПометкаУдаления = &ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДоверенностьЗаполнена УБЫВ");
						  
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Код", КодНО);
	Запрос.УстановитьПараметр("ПустаяСсылкаДоверенность", Справочники.ДоверенностиНалогоплательщика.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(КПП) Тогда
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Получить(0);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КППРегламентированногоОтчета(Отчет)
	
	МетаданныеОтчета = Метаданные.НайтиПоТипу(ТипЗнч(Отчет));
	Если МетаданныеОтчета.Реквизиты.Найти("КПП") <> Неопределено Тогда
		Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет, "КПП"));
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьСведенияОДоверенностиПоНаправлениюОтчета(Отчет, ДанныеДоверенности, ИмяФайлаДоверенности, Доверенность = Неопределено) Экспорт
	
	// считаем, что если код ИФНС не задан, то выгружать доверенность необходимости нет
	КодИФНС = ПолучитьКодИФНСПоСсылкеНаОтчет(Отчет);
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// находим элемент справочника РегистрацияВИФНС, соответствующий направлению отправки
	// определяем КПП по которому искать регистрацию в ИФНС
	Если ТипЗнч(Отчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		КППДляПоиска = КППРегламентированногоОтчета(Отчет);
	Иначе
		КППДляпоиска = "";
	КонецЕсли;

	РегистрацияВИФНС = РегистрацияВИФНСПоОрганизацииИКодуНО(Отчет.Организация, КодИФНС, КППДляПоиска);
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВИФНС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось запланировать отправку отчета:
				|не найдена запись в справочнике ""Регистрации в налоговом органе"", соответствующая направлению отправки (%1).'"), КодИФНС));
		Возврат Ложь;
	КонецЕсли;
	
	// пытаемся выгрузить доверенность
	ФайлДоверенности = ВыгрузитьДоверенностьПредставление(РегистрацияВИФНС, ИмяФайлаДоверенности, Отчет.Организация);
	Если ФайлДоверенности = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось запланировать отправку отчета:
				|не удалось выгрузить сведения о доверенности налогоплательщика.'"));
		Возврат Ложь;
	КонецЕсли;
	Доверенность = РегистрацияВИФНС.Доверенность;
	
	// читаем двоичные данные из файла и удаляем файл с диска
	ДанныеДоверенности = Новый ДвоичныеДанные(ФайлДоверенности);
	УдалитьФайлы(ФайлДоверенности);
	
	Возврат Истина;
	
КонецФункции

Функция СтроковоеПредставлениеЗначенияВыгрузки(ЗначениеВыгрузки)
	
	ТипЗначенияВыгрузки = ТипЗнч(ЗначениеВыгрузки);
	Если ТипЗначенияВыгрузки = Неопределено Тогда
		Возврат "";
	ИначеЕсли ТипЗначенияВыгрузки = Тип("Дата") Тогда
		Возврат Формат(ЗначениеВыгрузки, "ДФ=dd.MM.yyyy; ДП=");
	ИначеЕсли ТипЗначенияВыгрузки = Тип("Число") Тогда
		Возврат Формат(ЗначениеВыгрузки, "ЧН=; ЧГ=");
	ИначеЕсли ТипЗначенияВыгрузки = Тип("Булево") Тогда
		Возврат ?(ЗначениеВыгрузки, "true", "false");
	Иначе
		Возврат ЗначениеВыгрузки;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьЗначениеВыгрузки(Узел, Имя, Тип = "А", Значение = Неопределено, ОбрезатьДо = Неопределено, ТолькоЕслиЗаполнен = Ложь)
	
	Если ТолькоЕслиЗаполнен И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовУзел = Узел.Строки.Добавить();
	НовУзел.Имя = Имя;
	НовУзел.Тип = Тип;
	
	ЗначениеСтрока = СтроковоеПредставлениеЗначенияВыгрузки(Значение);
	ЗначениеУзла = ?(ОбрезатьДо = Неопределено, ЗначениеСтрока, СокрЛП(Лев(ЗначениеСтрока, ОбрезатьДо)));
	НовУзел.Значение = ЗначениеУзла;
	
	Возврат НовУзел;
	
КонецФункции

Функция ДобавитьУзел(Узел, Имя)
	
	НовУзел = Узел.Строки.Добавить();
	НовУзел.Имя = Имя;
	НовУзел.Тип = "Э";
	
	Возврат НовУзел;
	
КонецФункции

Функция СформироватьИдФайлДоверенности(РегистрацияВИФНС, СведенияДоверенности, Префикс = "", Организация = Неопределено)
	
	Если Организация = Неопределено Тогда
		Организация = РегистрацияВИФНС.Владелец;
	КонецЕсли;
	
	// R_T
	Если ЗначениеЗаполнено(Префикс) Тогда
		//для документооборота Представление
		R_T = Префикс;
	Иначе
		R_T = "NO_DOVER";
	КонецЕсли;
	
	// A_K
	НОКонечныйПолучатель = СведенияДоверенности.КодНО;
	НОПосредник = ?(Организация.КрупнейшийНалогоплательщик, СокрЛП(Организация.КодНалоговогоОрганаПолучателя), "");
	A_K = ?(ЗначениеЗаполнено(НОПосредник), НОПосредник, НОКонечныйПолучатель) + "_" + НОКонечныйПолучатель;
	
	Если СведенияДоверенности.СвУпПред.СвПред.Свойство("СвОрг") Тогда // представитель - юрлицо
		СвПредст = СведенияДоверенности.СвУпПред.СвПред.СвОрг;
		O = СокрЛП(СвПредст.ИННЮЛ) + СокрЛП(СвПредст.КПП);
	Иначе // представитель - физлицо
		СвПредст = СведенияДоверенности.СвУпПред.СвПред.СведФизЛ;
		O = СокрЛП(СвПредст.ИННФЛ);
	КонецЕсли;
	
	// GGGGMMDD
	GGGGMMDD = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");
	
	// N
	N = ВРЕГ(Строка(Новый УникальныйИдентификатор));
	
	Возврат R_T + "_" + A_K + "_" + O + "_" + GGGGMMDD + "_" + N;
	
КонецФункции

Функция ВыгрузитьДоверенностьПредставление(РегистрацияВИФНС, КороткоеИмяФайлаДоверенности = Неопределено, СведенияДоверенности = Неопределено, Организация = Неопределено) Экспорт
	
	// получаем сведения доверенности из справочника
	СведенияДоверенности = ПолучитьСведенияДоверенности(РегистрацияВИФНС, Организация);
	Если НЕ ЗначениеЗаполнено(СведенияДоверенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, возможна ли выгрузка
	Если НЕ ПроверитьВозможностьВыгрузкиДоверенности(СведенияДоверенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СформироватьФайлВыгрузкиДоверенностиПредставление(РегистрацияВИФНС, СведенияДоверенности, КороткоеИмяФайлаДоверенности, Организация);
	
КонецФункции

Функция СформироватьФайлВыгрузкиДоверенностиПредставление(РегистрацияВИФНС, СведенияДоверенности, КороткоеИмяФайлаДоверенности = Неопределено, Организация = Неопределено)
	
	
	ДеревоВыгрузки = Новый ДеревоЗначений;
	ДеревоВыгрузки.Колонки.Добавить("Имя");
	ДеревоВыгрузки.Колонки.Добавить("Тип");
	ДеревоВыгрузки.Колонки.Добавить("Значение");
	
	ИдФайл = СформироватьИдФайлДоверенности(РегистрацияВИФНС, СведенияДоверенности, "ON_DOV", Организация);
	
	
	// узел Файл
	УзелФайл = ДобавитьУзел(ДеревоВыгрузки, "Файл");
	ДобавитьЗначениеВыгрузки(УзелФайл, "ИдФайл", "А", ИдФайл, 150);
	ДобавитьЗначениеВыгрузки(УзелФайл, "ВерсПрог", "А", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы(), 40);
	ДобавитьЗначениеВыгрузки(УзелФайл, "ВерсФорм", "А", "5.01");
	
	
	// узел Документ
	УзелДокумент = ДобавитьУзел(УзелФайл, "Документ");
	ДобавитьЗначениеВыгрузки(УзелДокумент, "КНД", "А", "1167005");
	ДобавитьЗначениеВыгрузки(УзелДокумент, "КодНО", "А", СведенияДоверенности.КодНО, 4);
	
	
	// узел УчСвДов
	УзелУчСвДов = ДобавитьУзел(УзелДокумент, "УчСвДов");
	
	УчСвДов = СведенияДоверенности.УчСвДов;
	ДобавитьЗначениеВыгрузки(УзелУчСвДов, "НомДовер", "А", УчСвДов.Номер);
	ДобавитьЗначениеВыгрузки(УзелУчСвДов, "ДатаНач", "А", УчСвДов.Дата);
	Если ЗначениеЗаполнено(УчСвДов.ДатаОкончания) Тогда
		ДобавитьЗначениеВыгрузки(УзелУчСвДов, "ДатаОкон", "А", УчСвДов.ДатаОкончания, , Истина);
	КонецЕсли;
	
	
	// узел СвПредст
	УзелСвПредст = ДобавитьУзел(УзелДокумент, "СвПредст");
	
	УчСвПредст = СведенияДоверенности.СвПредст;
	Если УчСвПредст.ЯвляетсяФЛ Тогда
		
		// узел НПФЛ
		УзелНПФЛ = ДобавитьУзел(УзелСвПредст, "НПФЛ");
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "ИННФЛ", "А", УчСвПредст.ИННФЛ, 12, Истина);
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "ОГРНИП", "А", УчСвПредст.ОГРНИП, 15, Истина);
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "Гражданство", "А", УчСвПредст.Гражданство, 3, Истина);
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "ДатаРожд", "А", УчСвПредст.ДатаРожд, , Истина);
		
		// узел ФИО
		УчФИО = УчСвПредст.ФИО;
		УзелФИО = ДобавитьУзел(УзелНПФЛ, "ФИО");
		ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчФИО.Фамилия, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчФИО.Имя, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчФИО.Отчество, 60, Истина);
		
		// узел АдрРФ
		УчАдрРФ = УчСвПредст.АдрРФ;
		УзелАдрРФ = ДобавитьУзел(УзелНПФЛ, "АдрРФ");
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(УчАдрРФ.КодРегион, 2), 2);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
		
		// узел УдЛичн
		УчУдЛичн = УчСвПредст.УдЛичн;
		УзелУдЛичн = ДобавитьУзел(УзелНПФЛ, "УдЛичн");
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВидДок", "А", УчУдЛичн.ВидДок, 2);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "СерНомДок", "А", УчУдЛичн.СерНомДок, 25);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ДатаДок", "А", УчУдЛичн.ДатаДок, 10);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ВыдДок", "А", УчУдЛичн.ВыдДок, 255);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВыдДок", "А", УчУдЛичн.КодВыдДок, 7, Истина);
		
	Иначе
		
		// узел НПЮЛ
		УзелНПЮЛ = ДобавитьУзел(УзелСвПредст, "НПЮЛ");
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "НаимОрг", "А", УчСвПредст.НаимОрг, 1000);
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "ИННЮЛ", "А", УчСвПредст.ИННЮЛ, 10);
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "КПП", "А", УчСвПредст.КПП, 9);
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "ОГРН", "А", УчСвПредст.ОГРН, 13, Истина);
		
		// узел АдрРФ
		УчАдрРФ = УчСвПредст.АдрРФ;
		УзелАдрРФ = ДобавитьУзел(УзелНПЮЛ, "АдрРФ");
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(УчАдрРФ.КодРегион, 2), 2);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
		
		// узел СвРукОрг
		УчСвРукОрг = УчСвПредст.СвРукОрг;
		УзелСвРукОрг = ДобавитьУзел(УзелНПЮЛ, "СвРукОрг");
		ДобавитьЗначениеВыгрузки(УзелСвРукОрг, "ИННФЛ", "А", УчСвРукОрг.ИННФЛ, 12, Истина);
		
		// узел ФИО
		УчСвРукОргФИО = УчСвРукОрг.ФИО;
		УзелФИО = ДобавитьУзел(УзелСвРукОрг, "ФИО");
		ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчСвРукОргФИО.Фамилия, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчСвРукОргФИО.Имя, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчСвРукОргФИО.Отчество, 60, Истина);
		
	КонецЕсли;
	
	
	// узел СвДовер
	УзелСвДовер = ДобавитьУзел(УзелДокумент, "СвДовер");
	
	УчСвДовер = СведенияДоверенности.СвДовер;
	ПризнакДоверителя = ?(ЗначениеЗаполнено(УчСвДовер.ПрДов), УчСвДовер.ПрДов, 1);
	ДобавитьЗначениеВыгрузки(УзелСвДовер, "ПрДов", "А", ПризнакДоверителя, 1);
	
	Если ПризнакДоверителя = 2 ИЛИ ПризнакДоверителя = 3 Тогда
		
		УзелСвЮЛФЛ = ДобавитьУзел(УзелСвДовер, "СвЮЛФЛ");
		
		// выгружаем сведения о доверителе-ЮЛ
		Если УчСвДовер.Свойство("СвЮЛ") Тогда
			
			УчСвЮЛ = УчСвДовер.СвЮЛ;
			
			// узел ЮЛ
			УзелЮЛ = ДобавитьУзел(УзелСвЮЛФЛ, "ЮЛ");
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "НаимОрг", "А", УчСвЮЛ.НаимОрг, 1000);
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "ИННЮЛ", "А", УчСвЮЛ.ИННЮЛ, 10);
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "КПП", "А", УчСвЮЛ.КПП, 9);
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "ОГРН", "А", УчСвЮЛ.ОГРН, 13, Истина);
			
			// узел АдрРФ
			УчАдрРФ = УчСвЮЛ.АдрЮЛ;
			УзелАдрРФ = ДобавитьУзел(УзелЮЛ, "АдрРФ");
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(УчАдрРФ.КодРегион, 2), 2);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
			
			// узел СвРукОрг
			УчСвРукОрг = УчСвЮЛ.СвРукОрг;
			УзелСвРукОрг = ДобавитьУзел(УзелЮЛ, "СвРукОрг");
			ДобавитьЗначениеВыгрузки(УзелСвРукОрг, "ИННФЛ", "А", УчСвРукОрг.ИННФЛ, 12, Истина);
			
			// узел ФИО
			УчСвРукОргФИО = УчСвРукОрг.ФИО;
			УзелФИО = ДобавитьУзел(УзелСвРукОрг, "ФИО");
			ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчСвРукОргФИО.Фамилия, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчСвРукОргФИО.Имя, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчСвРукОргФИО.Отчество, 60, Истина);
			
		КонецЕсли;
		
		// выгружаем сведения о доверителе-ФЛ
		Если УчСвДовер.Свойство("СвФЛ") Тогда
			
			УчСвФЛ = УчСвДовер.СвФЛ;
			
			// узел ФЛ
			УзелФЛ = ДобавитьУзел(УзелСвЮЛФЛ, "ФЛ");
			ДобавитьЗначениеВыгрузки(УзелФЛ, "ИННФЛ", "А", УчСвФЛ.ИННФЛ, 12, Истина);
			ДобавитьЗначениеВыгрузки(УзелФЛ, "ОГРНИП", "А", УчСвФЛ.ОГРНИП, 15, Истина);
			ДобавитьЗначениеВыгрузки(УзелФЛ, "Гражданство", "А", УчСвФЛ.Гражданство, 3, Истина);
			ДобавитьЗначениеВыгрузки(УзелФЛ, "ДатаРожд", "А", УчСвФЛ.ДатаРожд, , Истина);
			
			// узел ФИО
			УчФИО = УчСвФЛ.ФИО;
			УзелФИО = ДобавитьУзел(УзелФЛ, "ФИО");
			ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчФИО.Фамилия, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчФИО.Имя, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчФИО.Отчество, 60, Истина);
			
			// узел АдрРФ
			УчАдрРФ = УчСвФЛ.АдрРФ;
			УзелАдрРФ = ДобавитьУзел(УзелФЛ, "АдрРФ");
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(УчАдрРФ.КодРегион, 2), 2);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
			
			// узел УдЛичн
			УчУдЛичн = УчСвФЛ.УдЛичн;
			УзелУдЛичн = ДобавитьУзел(УзелФЛ, "УдЛичн");
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВидДок", "А", УчУдЛичн.ВидДок, 2);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "СерНомДок", "А", УчУдЛичн.СерНомДок, 25);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ДатаДок", "А", УчУдЛичн.ДатаДок, 10);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ВыдДок", "А", УчУдЛичн.ВыдДок, 255);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВыдДок", "А", УчУдЛичн.КодВыдДок, 7, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// узел СвУпПред
	УзелСвУпПред = ДобавитьУзел(УзелДокумент, "СвУпПред");
	СвУпПред = СведенияДоверенности.СвУпПред;
	
	// сведения о полномочиях
	Для Каждого СтрПолнДов Из СвУпПред.ПолнДов Цикл
		
		Для Каждого ЭлПрОблПолн Из СтрПолнДов.ПрОблПолн Цикл
			ДобавитьЗначениеВыгрузки(УзелСвУпПред, "ПрОблПолн", "Э", ЭлПрОблПолн);
		КонецЦикла;
		
	КонецЦикла;
	
	СвПред = СвУппред.СвПред;
	
	// сведения о представителе
	УзелСвПред = ДобавитьУзел(УзелСвУпПред, "СвПред");
	
	// сведения о представителе-ЮЛ
	Если СвПред.Свойство("СвОрг") Тогда
		
		СвОрг = СвПред.СвОрг;
		
		УзелСвОрг = ДобавитьУзел(УзелСвПред, "СвОрг");
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "НаимОрг", "А", СвОрг.НаимОрг, 1000);
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "ИННЮЛ", "А", СвОрг.ИННЮЛ, 10);
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "КПП", "А", СвОрг.КПП, 9);
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "ОГРН", "А", СвОрг.ОГРН, 13, Истина);
		
		// узел АдрРФ
		УчАдрРФ = СвОрг.АдрРФ;
		УзелАдрРФ = ДобавитьУзел(УзелСвОрг, "АдрРФ");
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(УчАдрРФ.КодРегион, 2), 2);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
		
	КонецЕсли;
	
	
	// сведения о представителе-ФЛ
	СведФизЛ = СвПред.СведФизЛ;
	
	// узел СведФизЛ
	УзелСведФизЛ = ДобавитьУзел(УзелСвПред, "СведФизЛ");
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "ИННФЛ", "А", СведФизЛ.ИННФЛ, 12, Истина);
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "ОГРНИП", "А", СведФизЛ.ОГРНИП, 15, Истина);
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "Гражданство", "А", СведФизЛ.Гражданство, 3, Истина);
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "ДатаРожд", "А", СведФизЛ.ДатаРожд, , Истина);
	
	// узел ФИО
	УчФИО = СведФизЛ.ФИО;
	УзелФИО = ДобавитьУзел(УзелСведФизЛ, "ФИО");
	ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчФИО.Фамилия, 60);
	ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчФИО.Имя, 60);
	ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчФИО.Отчество, 60, Истина);
	
	// узел АдрРФ
	УчАдрРФ = СведФизЛ.АдрРФ;
	УзелАдрРФ = ДобавитьУзел(УзелСведФизЛ, "АдрРФ");
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(УчАдрРФ.КодРегион, 2), 2);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
	
	// узел УдЛичн
	УчУдЛичн = СведФизЛ.УдЛичн;
	УзелУдЛичн = ДобавитьУзел(УзелСведФизЛ, "УдЛичн");
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВидДок", "А", УчУдЛичн.ВидДок, 2);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "СерНомДок", "А", УчУдЛичн.СерНомДок, 25);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ДатаДок", "А", УчУдЛичн.ДатаДок, 10);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ВыдДок", "А", УчУдЛичн.ВыдДок, 255);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВыдДок", "А", УчУдЛичн.КодВыдДок, 7, Истина);
	
	// сведения о нотариусе
	Если СведенияДоверенности.Свойство("Нотариус") Тогда
		
		СвНотариус = СведенияДоверенности.Нотариус;
		УзелУдостов = ДобавитьУзел(УзелДокумент, "Удостов");
		
		// сведения о нотариусе-ЮЛ
		Если СвНотариус.Свойство("СвОрган") Тогда
			
			СвОрган = СвНотариус.СвОрган;
			
			УзелСвОрган = ДобавитьУзел(УзелУдостов, "СвОрган");
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "НаимОрг", "А", СвОрган.НаимОрг, 1000);
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "ИННЮЛ", "А", СвОрган.ИННЮЛ, 10);
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "КПП", "А", СвОрган.КПП, 9);
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "ОГРН", "А", СвОрган.ОГРН, 13, Истина);
			
		КонецЕсли;
		
		// сведения о нотариусе-ФЛ
		СвФизЛиц = СвНотариус.СвФизЛиц;
		
		УзелСвФизЛиц = ДобавитьУзел(УзелУдостов, "СвФизЛиц");
		ДобавитьЗначениеВыгрузки(УзелСвФизЛиц, "ИННФЛ", "А", СвФизЛиц.ИННФЛ, 12, Истина);
		
		СвФИО = СвФизЛиц.ФИО;
		УзелФИО = ДобавитьУзел(УзелСвФизЛиц, "ФИО");
		ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", СвФИО.Фамилия, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", СвФИО.Имя, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", СвФИО.Отчество, 60, Истина);
		
		Если СвФизЛиц.Свойство("АдрРФ") Тогда
			
			СвАдрРФ = СвФизЛиц.АдрРФ;
			
			УзелАдрРФ = ДобавитьУзел(УзелСвФизЛиц, "АдрРФ");
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", СвАдрРФ.Индекс, 6, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвАдрРФ.КодРегион, 2), 2);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", СвАдрРФ.Район, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", СвАдрРФ.Город, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", СвАдрРФ.НаселПункт, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", СвАдрРФ.Улица, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", СвАдрРФ.Дом, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", СвАдрРФ.Корпус, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", СвАдрРФ.Кварт, 8, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// выгружаем дерево в файл
	КороткоеИмяФайлаДоверенности = ИдФайл + ".xml";
	ПолноеИмяФайлаДоверенности = КаталогВременныхФайлов() + КороткоеИмяФайлаДоверенности;
	Если НЕ ВыгрузитьДеревоДоверенностиВФайл(ДеревоВыгрузки, ПолноеИмяФайлаДоверенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДоверенности;
	
КонецФункции

Функция ВыгрузитьДеревоДоверенностиВФайл(Узел, ПолноеИмяФайлаДоверенности, ОбъектЗапись = Неопределено)
	
	ЭтоВерхнийУровеньРекурсии = (ОбъектЗапись = Неопределено);
	Если ЭтоВерхнийУровеньРекурсии Тогда
		ОбъектЗапись = Новый ЗаписьXML;
		ОбъектЗапись.ОткрытьФайл(ПолноеИмяФайлаДоверенности, "windows-1251");
		ОбъектЗапись.ЗаписатьОбъявлениеXML();
	КонецЕсли;
	
	// выгружаем текущий элемент и подчиненные
	Если НЕ ЭтоВерхнийУровеньРекурсии Тогда
		Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда 
			ОбъектЗапись.ЗаписатьАтрибут(Узел.Имя, Строка(Узел.Значение));
		Иначе
			ОбъектЗапись.ЗаписатьНачалоЭлемента(Узел.Имя);
			Для каждого Лист из Узел.Строки Цикл
				ВыгрузитьДеревоДоверенностиВФайл(Лист, ПолноеИмяФайлаДоверенности, ОбъектЗапись);
			КонецЦикла;
			ОбъектЗапись.ЗаписатьТекст(Строка(Узел.Значение));
			ОбъектЗапись.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Для Каждого СтрУзел Из Узел.Строки Цикл
			ВыгрузитьДеревоДоверенностиВФайл(СтрУзел, ПолноеИмяФайлаДоверенности, ОбъектЗапись);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоВерхнийУровеньРекурсии Тогда
		ОбъектЗапись.Закрыть();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСведенияДоверенности(РегистрацияВИФНС, Организация = Неопределено)
	
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВИФНС) ИЛИ НЕ ЗначениеЗаполнено(РегистрацияВИФНС.Доверенность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	// структура с результатом
	Сведения = Новый Структура;
	
	Доверенность = РегистрацияВИФНС.Доверенность;
	Если Организация = Неопределено Тогда
		Организация = РегистрацияВИФНС.Владелец;
	КонецЕсли;
	
	
	// добавляем код НО
	Сведения.Вставить("КодНО", СокрЛП(РегистрацияВИФНС.Код));
	
	
	// формируем структуру с учетными сведениями о самой доверенности
	УчетныеСведенияОДоверенности = Новый Структура("Номер, Дата, ДатаОкончания", ?(ЗначениеЗаполнено(Доверенность.НомерДовер), СокрЛП(Доверенность.НомерДовер), "БН"), Доверенность.ДатаВыдачи, Доверенность.ДатаОкончания);
	Сведения.Вставить("УчСвДов", УчетныеСведенияОДоверенности);
	
	
	// формируем сведения о представляемом лице
	СведенияОПредставляемомЛице = Новый Структура;
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		
		СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", Истина);
		
		// получаем все сведения о ФЛ
		СведенияОргФЛ = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННФЛ, ОГРН, Гражд, ДатаРожд, ФИО, ИндексМЖ, КодСубъектМЖ, РайонМЖ, ГородМЖ, НПунктМЖ, УлицаМЖ, ДомМЖ, КорпусМЖ, КвартираМЖ, КодУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн, ОрганВыданУдЛичн");
		
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("ИННФЛ", СокрЛП(СведенияОргФЛ.ИННФЛ));
		СведенияОПредставляемомЛице.Вставить("ОГРНИП", СокрЛП(СведенияОргФЛ.ОГРН));
		СведенияОПредставляемомЛице.Вставить("Гражданство", СокрЛП(СведенияОргФЛ.Гражд));
		СведенияОПредставляемомЛице.Вставить("ДатаРожд", СведенияОргФЛ.ДатаРожд);
		
		// формируем структуру с Ф.И.О.
		СведенияОПредставляемомЛице.Вставить("ФИО", РегламентированнаяОтчетность.РазложитьФИО(СведенияОргФЛ.ФИО));
		
		// формируем структуру с адресом предпринимателя
		АдресПредпринимателя = Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
												СокрЛП(СведенияОргФЛ.ИндексМЖ), СокрЛП(СведенияОргФЛ.КодСубъектМЖ), СокрЛП(СведенияОргФЛ.РайонМЖ), СокрЛП(СведенияОргФЛ.ГородМЖ),
												СокрЛП(СведенияОргФЛ.НПунктМЖ), СокрЛП(СведенияОргФЛ.УлицаМЖ), СокрЛП(СведенияОргФЛ.ДомМЖ), СокрЛП(СведенияОргФЛ.КорпусМЖ), СокрЛП(СведенияОргФЛ.КвартираМЖ));
		СведенияОПредставляемомЛице.Вставить("АдрРФ", АдресПредпринимателя);
		
		// формируем структуру со сведениями об удостоверении личности
		УдЛичнПредпринимателя = Новый Структура("ВидДок, СерНомДок, ДатаДок, ВыдДок, КодВыдДок", СокрЛП(СведенияОргФЛ.КодУдЛичн), СокрЛП(СокрЛП(СведенияОргФЛ.СерияУдЛичн) + " " + СокрЛП(СведенияОргФЛ.НомерУдЛичн)), СведенияОргФЛ.ДатаУдЛичн, СокрЛП(СведенияОргФЛ.ОрганВыданУдЛичн), "");
		СведенияОПредставляемомЛице.Вставить("УдЛичн", УдЛичнПредпринимателя);
		
	Иначе
		
		СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", Ложь);
		
		// получаем сведения о ЮЛ
		СведенияОргЮЛ = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "НаимЮЛПол, ИННЮЛ, КППЮЛ, ОГРН, ОргИндекс, ОргКодСубъект, ОргРайон, ОргГород, ОргНПункт, ОргУлица, ОргДом, ОргКорпус, ОргКвартира, ФИОРук, ИННРук");
		
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("НаимОрг", СокрЛП(СведенияОргЮЛ.НаимЮЛПол));
		СведенияОПредставляемомЛице.Вставить("ИННЮЛ", СокрЛП(СведенияОргЮЛ.ИННЮЛ));
		СведенияОПредставляемомЛице.Вставить("КПП", СокрЛП(СведенияОргЮЛ.КППЮЛ));
		СведенияОПредставляемомЛице.Вставить("ОГРН", СокрЛП(СведенияОргЮЛ.ОГРН));
		
		// формируем структуру с адресом предпринимателя
		АдресЮЛ = Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
									СокрЛП(СведенияОргЮЛ.ОргИндекс), СокрЛП(СведенияОргЮЛ.ОргКодСубъект), СокрЛП(СведенияОргЮЛ.ОргРайон), СокрЛП(СведенияОргЮЛ.ОргГород),
									СокрЛП(СведенияОргЮЛ.ОргНПункт), СокрЛП(СведенияОргЮЛ.ОргУлица), СокрЛП(СведенияОргЮЛ.ОргДом), СокрЛП(СведенияОргЮЛ.ОргКорпус), СокрЛП(СведенияОргЮЛ.ОргКвартира));
		СведенияОПредставляемомЛице.Вставить("АдрРФ", АдресЮЛ);
		
		// формируем структуру со сведениями о руководителе
		СвРукОргЮЛ = Новый Структура("ИННФЛ, ФИО", СокрЛП(СведенияОргЮЛ.ИННРук), РегламентированнаяОтчетность.РазложитьФИО(СведенияОргЮЛ.ФИОРук));
		СведенияОПредставляемомЛице.Вставить("СвРукОрг", СвРукОргЮЛ);
		
	КонецЕсли;
	
	Сведения.Вставить("СвПредст", СведенияОПредставляемомЛице);
	
	
	// формируем сведения о доверителе
	ПризнакДоверителя = Доверенность.ПризнакДоверителя;
	СвДовер = Новый Структура("ПрДов", ПризнакДоверителя);
	
	Если ПризнакДоверителя = 2 ИЛИ ПризнакДоверителя = 3 Тогда
		
		// выгружаем сведения о доверителе-ЮЛ
		Если Доверенность.ДоверительЯвляетсяЮЛ Тогда
			
			// общие сведения
			ДоверительЮЛ = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.ДоверительЮЛ_НаимОрг), СокрЛП(Доверенность.ДоверительЮЛ_ИНН), СокрЛП(Доверенность.ДоверительЮЛ_КПП), СокрЛП(Доверенность.ДоверительЮЛ_ОГРН));
			
			// адрес в РФ
			ДоверительЮЛ.Вставить("АдрЮЛ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительЮЛ));
			
			// сведения о руководителе
			СвРукОрг = Новый Структура("ИННФЛ, ФИО", СокрЛП(Доверенность.ДоверительРук_ИНН), ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
			ДоверительЮЛ.Вставить("СвРукОрг", СвРукОрг);
			
			СвДовер.Вставить("СвЮЛ", ДоверительЮЛ);
			
		КонецЕсли;
		
		// выгружаем сведения о довериетеле-ФЛ или об УЛ доверителя-ЮЛ
		Если НЕ Доверенность.ДоверительЯвляетсяЮЛ ИЛИ Доверенность.ДоверительИмеетУЛ Тогда
			
			// общие сведения
			ДоверительФЛ = Новый Структура("ИННФЛ, ОГРНИП, Гражданство, ДатаРожд", СокрЛП(Доверенность.ДоверительФЛ_ИНН), СокрЛП(Доверенность.ДоверительФЛ_ОГРН), СокрЛП(Доверенность.ДоверительФЛ_Гражданство.Код), Доверенность.ДоверительФЛ_ДатаРождения);
			
			// формируем ФИО
			ДоверительФЛ.Вставить("ФИО", ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			// формируем адрес
			ДоверительФЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			// формируем сведения об удостоверении личности
			ДоверительФЛ.Вставить("УдЛичн", ПолучитьУдЛичнДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			СвДовер.Вставить("СвФЛ", ДоверительФЛ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Сведения.Вставить("СвДовер", СвДовер);
	
	
	// выгружаем сведения о представителе и его полномочиях
	СвУпПред = Новый Структура;
	
	// выгружаем сведения о представителе
	СвПред = Новый Структура;
	
	Если Доверенность.ПредставительЯвляетсяЮЛ Тогда
		СвПредставительЮЛ = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.ПредставительЮЛ_НаимОрг), СокрЛП(Доверенность.ПредставительЮЛ_ИНН), СокрЛП(Доверенность.ПредставительЮЛ_КПП), СокрЛП(Доверенность.ПредставительЮЛ_ОГРН));
		СвПредставительЮЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительЮЛ));
		СвПред.Вставить("СвОрг", СвПредставительЮЛ);
	КонецЕсли;
	
	СвПредставительФЛ = Новый Структура("ИННФЛ, ОГРНИП, Гражданство, ДатаРожд", СокрЛП(Доверенность.ПредставительФЛ_ИНН), СокрЛП(Доверенность.ПредставительФЛ_ОГРН), СокрЛП(Доверенность.ПредставительФЛ_Гражданство.Код), Доверенность.ПредставительФЛ_ДатаРождения);
	СвПредставительФЛ.Вставить("ФИО", ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("УдЛичн", ПолучитьУдЛичнДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПред.Вставить("СведФизЛ", СвПредставительФЛ);
	
	СвУпПред.Вставить("СвПред", СвПред);
	
	СоответствиеРеквизитовКодамПолномочий = ПолучитьСоответствиеРеквизитовКодамПолномочийДоверенности();
	
	// выгружаем сведения о полномочиях
	ПолнДов = Новый Массив;
	Для Каждого ПолномочиеПредставителя Из Доверенность.ПолномочияПредставителя Цикл
		
		// собираем области полномочий
		ОбластиПолномочий = Новый Массив;
		Для Каждого Эл Из СоответствиеРеквизитовКодамПолномочий Цикл
			Если ПолномочиеПредставителя[Эл.Ключ] Тогда
				ОбластиПолномочий.Добавить(Эл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		// собираем сведения о физ./юр.-лице по месту осуществления полномочий
		Если ЗначениеЗаполнено(ПолномочиеПредставителя.КПП) Тогда
			ОргФЛ = Новый Структура("ИННЮЛ, КПП", СокрЛП(Организация.ИНН), СокрЛП(ПолномочиеПредставителя.КПП));
		Иначе
			ОргФЛ = Новый Структура("ФЛ", СокрЛП(Организация.ИНН));
		КонецЕсли;
		
		ПолнДов.Добавить(Новый Структура("ПрОблПолн, ОргФЛ, ОКАТО", ОбластиПолномочий, ОргФЛ, СокрЛП(ПолномочиеПредставителя.ОКАТО)));
		
	КонецЦикла;
	СвУпПред.Вставить("ПолнДов", ПолнДов);
	
	Сведения.Вставить("СвУпПред", СвУпПред);
	
	
	// выгружаем сведения о нотариусе
	Если Доверенность.ЗаверенаНотариально Тогда
		
		Нотариус = Новый Структура;
		
		Если Доверенность.НотариусЯвляетсяЮЛ Тогда
			НотариусСвОрган = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.НотариусЮЛ_НаимОрг), СокрЛП(Доверенность.НотариусЮЛ_ИНН), СокрЛП(Доверенность.НотариусЮЛ_КПП), СокрЛП(Доверенность.НотариусЮЛ_ОГРН));
			Нотариус.Вставить("СвОрган", НотариусСвОрган);
		КонецЕсли;
		
		НотариусФЛФИО = ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.НотариусФЛ);
		НотариусСвФизЛица = Новый Структура("ИННФЛ, ФИО", СокрЛП(Доверенность.НотариусФЛ_ИНН), НотариусФЛФИО);
		
		НотариусФЛАдрес = ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.НотариусФЛ);
		Если ЗначениеЗаполнено(НотариусФЛАдрес) Тогда
			НотариусСвФизЛица.Вставить("АдрРФ", НотариусФЛАдрес);
		КонецЕсли;
		
		Нотариус.Вставить("СвФизЛиц", НотариусСвФизЛица);
		
		Сведения.Вставить("Нотариус", Нотариус);
		
	КонецЕсли;
	
	
	// добавляем поля для позиционирования в ошибках
	Сведения.Вставить("РегистрацияВИФНС", РегистрацияВИФНС);
	Сведения.Вставить("Доверенность", Доверенность);
	Сведения.Вставить("Организация", Организация);
	
	
	// возвращаем полученную структуру
	Возврат Сведения;
	
КонецФункции

Функция ПолучитьАдресДоверенности(Доверенность, ТипСубъекта)
	
	АдресДоверенности = Доверенность.Адреса.Найти(ТипСубъекта, "Владелец");
	Если АдресДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
								СокрЛП(АдресДоверенности.Индекс), СокрЛП(АдресДоверенности.КодРегион), СокрЛП(АдресДоверенности.Район), СокрЛП(АдресДоверенности.Город),
								СокрЛП(АдресДоверенности.НаселПункт), СокрЛП(АдресДоверенности.Улица), СокрЛП(АдресДоверенности.Дом), СокрЛП(АдресДоверенности.Корпус), СокрЛП(АдресДоверенности.Кварт));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФИОДоверенности(Доверенность, ТипСубъекта)
	
	ФИОДоверенности = Доверенность.ФИО.Найти(ТипСубъекта, "Владелец");
	Если ФИОДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Фамилия, Имя, Отчество", СокрЛП(ФИОДоверенности.Фамилия), СокрЛП(ФИОДоверенности.Имя), СокрЛП(ФИОДоверенности.Отчество));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУдЛичнДоверенности(Доверенность, ТипСубъекта)
	
	УдЛичнДоверенности = Доверенность.УдЛичности.Найти(ТипСубъекта, "Владелец");
	Если УдЛичнДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("ВидДок, СерНомДок, ДатаДок, ВыдДок, КодВыдДок",
								СокрЛП(РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодВидаДокументаФизическогоЛица(УдЛичнДоверенности.ВидДок)),
								СокрЛП(СокрЛП(УдЛичнДоверенности.СерДок) + " " + СокрЛП(УдЛичнДоверенности.НомДок)),
								УдЛичнДоверенности.ДатаДок,
								СокрЛП(УдЛичнДоверенности.ВыдДок),
								СокрЛП(УдЛичнДоверенности.КодВыдДок));
	КонецЕсли;
	
КонецФункции

Процедура ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, ТекстОшибки, КлючДанных = Неопределено, Поле = "", ПутьКДанным = "")
	
	ПризнакОшибки = Истина;
	
	СтрОшибка = ОшибкиПроверки.Добавить();
	СтрОшибка.ТекстОшибки = ТекстОшибки;
	СтрОшибка.КлючДанных = КлючДанных;
	СтрОшибка.Поле = Поле;
	СтрОшибка.ПутьКДанным = ПутьКДанным;
	
КонецПроцедуры

Функция СоздатьТаблицуОшибокПроверки()
	
	Табл = Новый ТаблицаЗначений;
	Табл.Колонки.Добавить("ТекстОшибки");
	Табл.Колонки.Добавить("КлючДанных");
	Табл.Колонки.Добавить("Поле");
	Табл.Колонки.Добавить("ПутьКДанным");
	Возврат Табл;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузкиДоверенности(СведенияДоверенности)
	
	ОшибкиПроверки = СоздатьТаблицуОшибокПроверки();
	ПризнакОшибки = Ложь;
	
	
	// код НО
	Если СтрДлина(СведенияДоверенности.КодНО) <> 4 Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код налогового органа!'", СведенияДоверенности.РегистрацияВИФНС, "Код");
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// учетные сведения доверенности
	УчСвДов = СведенияДоверенности.УчСвДов;
	
	// при отсутствии номера проставляется "БН"
	
	Если НЕ ЗначениеЗаполнено(УчСвДов.Дата) Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана дата выдачи доверенности!'", СведенияДоверенности.Доверенность, "ДатаВыдачи");
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения о представляемом лице
	СвПредст = СведенияДоверенности.СвПредст;
	Если СвПредст.ЯвляетсяФЛ Тогда
		
		// общие сведения представителя - ФЛ
		Если ЗначениеЗаполнено(СвПредст.ИННФЛ) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвПредст.ИННФЛ, Истина) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН представляемого лица (" + СвПредст.ИННФЛ + ")!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвПредст.ОГРНИП) И СтрДлина(СвПредст.ОГРНИП) <> 15 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ОГРНИП представляемого лица (" + СвПредст.ОГРНИП + ")!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвПредст.Гражданство) И СтрДлина(СвПредст.Гражданство) <> 3 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код страны гражданства представляемого лица (" + СвПредст.Гражданство + ")!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		// ФИО
		ФИОПредстФЛ = СвПредст.ФИО;
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Фамилия) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана фамилия представляемого лица!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Имя) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано имя представляемого лица!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		// адрес
		АдрПредстФЛ = СвПредст.АдрРФ;
		
		Если ЗначениеЗаполнено(АдрПредстФЛ.Индекс) И СтрДлина(АдрПредстФЛ.Индекс) <> 6 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе представляемого лица указан некорректный индекс!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдрПредстФЛ.КодРегион) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе представляемого лица не указан код региона!'", СведенияДоверенности.Организация, );
		ИначеЕсли СтрДлина(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(АдрПредстФЛ.КодРегион, 2)) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе представляемого лица некорректно указан код региона!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		// удостоверение личности
		УдЛичнПредстФЛ = СвПредст.УдЛичн;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВидДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан код вида документа, удостоверяющего личность представляемого лица!'", СведенияДоверенности.Организация, );
		ИначеЕсли СтрДлина(УдЛичнПредстФЛ.ВидДок) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код вида документа, удостоверяющего личность представляемого лица!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.СерНомДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указаны серия и номер документа, удостоверяющего личность представляемого лица!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ДатаДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана дата документа, удостоверяющего личность представляемого лица!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВыдДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано наименование органа, выдавшего документ, удостоверяющий личность представляемого лица!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдЛичнПредстФЛ.КодВыдДок) И СтрДлина(УдЛичнПредстФЛ.КодВыдДок) <> 7 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код подразделения органа, выдавшего документ, удостоверяющий личность представляемого лица!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
	Иначе
		
		// общие сведения
		Если НЕ ЗначениеЗаполнено(СвПредст.НаимОрг) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано наименование представляемой организации!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвПредст.ИННЮЛ) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан ИНН организации - представляемого лица!'", СведенияДоверенности.Организация, );
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвПредст.ИННЮЛ, Ложь) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН представляемой организации (" + СвПредст.ИННЮЛ + ")!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвПредст.КПП) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан КПП организации!'", СведенияДоверенности.Доверенность, );
		ИначеЕсли СтрДлина(СвПредст.КПП) <> 9 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный КПП представляемой организации (" + СвПредст.КПП + ")!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвПредст.ОГРН) И СтрДлина(СвПредст.ОГРН) <> 13 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ОГРН представляемой организации (" + СвПредст.ОГРН + ")!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		// адрес
		АдрПредстЮЛ = СвПредст.АдрРФ;
		
		Если ЗначениеЗаполнено(АдрПредстЮЛ.Индекс) И СтрДлина(АдрПредстЮЛ.Индекс) <> 6 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе представляемой организации указан некорректный индекс!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдрПредстЮЛ.КодРегион) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе представляемой организации не указан код региона!'", СведенияДоверенности.Организация, );
		ИначеЕсли СтрДлина(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(АдрПредстЮЛ.КодРегион, 2)) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе представляемой организации некорректно указан код региона!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		// сведения о руководителе
		СвРукПредстЮЛ = СвПредст.СвРукОрг;
		
		Если ЗначениеЗаполнено(СвРукПредстЮЛ.ИННФЛ) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвРукПредстЮЛ.ИННФЛ, Истина) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН руководителя представляемой организации!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
		ФИОРукПредстЮЛ = СвРукПредстЮЛ.ФИО;
		Если НЕ ЗначениеЗаполнено(ФИОРукПредстЮЛ.Фамилия) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана фамилия руководителя представляемой организации!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФИОРукПредстЮЛ.Имя) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано имя руководителя представляемой организации!'", СведенияДоверенности.Организация, );
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения о представительстве (доверителе)
	СвДовер = СведенияДоверенности.СвДовер;
	Если СвДовер.ПрДов = 2 ИЛИ СвДовер.ПрДов = 3 Тогда
		
		// сведения о юрлице
		Если СвДовер.Свойство("СвЮЛ") Тогда
			
			СвДоверЮЛ = СвДовер.СвЮЛ;
			
			// общие сведения
			Если НЕ ЗначениеЗаполнено(СвДоверЮЛ.НаимОрг) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано наименование организации - доверителя!'", СведенияДоверенности.Доверенность, "ДоверительЮЛ_НаимОрг");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвДоверЮЛ.ИННЮЛ) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан ИНН организации - доверителя!'", СведенияДоверенности.Доверенность, "ДоверительЮЛ_ИНН");
			ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвДоверЮЛ.ИННЮЛ, Ложь) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН организации - доверителя (" + СвДоверЮЛ.ИННЮЛ + ")!'", СведенияДоверенности.Доверенность, "ДоверительЮЛ_ИНН");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвДоверЮЛ.КПП) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан КПП организации - доверителя!'", СведенияДоверенности.Доверенность, "ДоверительЮЛ_КПП");
			ИначеЕсли СтрДлина(СвДоверЮЛ.КПП) <> 9 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный КПП организации - доверителя (" + СвДоверЮЛ.КПП + ")!'", СведенияДоверенности.Доверенность, "ДоверительЮЛ_КПП");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвДоверЮЛ.ОГРН) И СтрДлина(СвДоверЮЛ.ОГРН) <> 13 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ОГРН организации - доверителя (" + СвДоверЮЛ.ОГРН + ")!'", СведенияДоверенности.Доверенность, "ДоверительЮЛ_ОГРН");
			КонецЕсли;
			
			// адрес
			АдрДоверЮЛ = СвДоверЮЛ.АдрЮЛ;
			Если ЗначениеЗаполнено(АдрДоверЮЛ) Тогда
				
				Если ЗначениеЗаполнено(АдрДоверЮЛ.Индекс) И СтрДлина(АдрДоверЮЛ.Индекс) <> 6 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе организации - доверителя указан некорректный индекс!'", СведенияДоверенности.Доверенность, , "ДоверительЮЛ_Адрес");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(АдрДоверЮЛ.КодРегион) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе организации - доверителя не указан код региона!'", СведенияДоверенности.Доверенность, , "ДоверительЮЛ_Адрес");
				ИначеЕсли СтрДлина(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(АдрДоверЮЛ.КодРегион, 2)) <> 2 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе организации - доверителя некорректно указан код региона!'", СведенияДоверенности.Доверенность, , "ДоверительЮЛ_Адрес");
				КонецЕсли;
				
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан адрес организации - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительЮЛ_Адрес");
			КонецЕсли;
			
			// сведения о руководителе
			СвРукДоверЮЛ = СвДоверЮЛ.СвРукОрг;
			
			Если ЗначениеЗаполнено(СвРукДоверЮЛ.ИННФЛ) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвРукДоверЮЛ.ИННФЛ, Истина) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН руководителя организации - доверителя!'", СведенияДоверенности.Доверенность, "ДоверительРук_ИНН");
			КонецЕсли;
			
			ФИОРукДоверЮЛ = СвРукДоверЮЛ.ФИО;
			Если ЗначениеЗаполнено(ФИОРукДоверЮЛ) Тогда
				Если НЕ ЗначениеЗаполнено(ФИОРукДоверЮЛ.Фамилия) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана фамилия руководителя организации - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительРук_ФИО");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФИОРукДоверЮЛ.Имя) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано имя руководителя организации - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительРук_ФИО");
				КонецЕсли;
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано ФИО руководителя организации - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительРук_ФИО");
			КонецЕсли;
			
		КонецЕсли;
		
		// сведения о физлице
		Если СвДовер.Свойство("СвФЛ") Тогда
			
			СвДоверФЛ = СвДовер.СвФЛ;
			
			// общие сведения представителя - ФЛ
			Если ЗначениеЗаполнено(СвДоверФЛ.ИННФЛ) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвДоверФЛ.ИННФЛ, Истина) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН физического лица - доверителя (" + СвДоверФЛ.ИННФЛ + ")!'", СведенияДоверенности.Доверенность, "ДоверительФЛ_ИНН");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвДоверФЛ.ОГРНИП) И СтрДлина(СвДоверФЛ.ОГРНИП) <> 15 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ОГРНИП физического лица - доверителя (" + СвДоверФЛ.ОГРНИП + ")!'", СведенияДоверенности.Доверенность, "ДоверительФЛ_ОГРН");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвДоверФЛ.Гражданство) И СтрДлина(СвДоверФЛ.Гражданство) <> 3 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код страны гражданства физического лица - доверителя (" + СвДоверФЛ.Гражданство + ")!'", СведенияДоверенности.Доверенность, "ДоверительФЛ_Гражданство");
			КонецЕсли;
			
			// ФИО
			ФИОДоверФЛ = СвДоверФЛ.ФИО;
			Если ЗначениеЗаполнено(ФИОДоверФЛ) Тогда
				Если НЕ ЗначениеЗаполнено(ФИОДоверФЛ.Фамилия) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана фамилия физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_ФИО");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФИОДоверФЛ.Имя) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано имя физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_ФИО");
				КонецЕсли;
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано ФИО физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_ФИО");
			КонецЕсли;
			
			// адрес
			АдрДоверФЛ = СвДоверФЛ.АдрРФ;
			Если ЗначениеЗаполнено(АдрДоверФЛ) Тогда
				
				Если ЗначениеЗаполнено(АдрДоверФЛ.Индекс) И СтрДлина(АдрДоверФЛ.Индекс) <> 6 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе физического лица - доверителя указан некорректный индекс!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Адрес");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(АдрДоверФЛ.КодРегион) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе физического лица - доверителя не указан код региона!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Адрес");
				ИначеЕсли СтрДлина(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(АдрДоверФЛ.КодРегион, 2)) <> 2 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе физического лица - доверителя некорректно указан код региона!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Адрес");
				КонецЕсли;
				
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан адрес физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Адрес");
			КонецЕсли;
			
			// удостоверение личности
			УдЛичнДоверФЛ = СвДоверФЛ.УдЛичн;
			Если ЗначениеЗаполнено(УдЛичнДоверФЛ) Тогда
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.ВидДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан код вида документа, удостоверяющего личность физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Удост");
				ИначеЕсли СтрДлина(УдЛичнДоверФЛ.ВидДок) <> 2 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код вида документа, удостоверяющего личность физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Удост");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.СерНомДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указаны серия и номер документа, удостоверяющего личность физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Удост");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.ДатаДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана дата документа, удостоверяющего личность физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Удост");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.ВыдДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано наименование органа, выдавшего документ, удостоверяющий личность физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Удост");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(УдЛичнДоверФЛ.КодВыдДок) И СтрДлина(УдЛичнДоверФЛ.КодВыдДок) <> 7 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код подразделения органа, выдавшего документ, удостоверяющий личность физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Удост");
				КонецЕсли;
				
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указаны сведения о документе, удостоверяющем личность физического лица - доверителя!'", СведенияДоверенности.Доверенность, , "ДоверительУЛ_Удост");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения об уполномоченном представителе и его полномочиях
	СвУпПред = СведенияДоверенности.СвУпПред;
	
	СвПред = СвУпПред.СвПред;
	
	
	// сведения о представителе-ЮЛ
	Если СвПред.Свойство("СвОрг") Тогда
		
		СвОрг = СвПред.СвОрг;
		
		// общие сведения
		Если НЕ ЗначениеЗаполнено(СвОрг.НаимОрг) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано наименование организации - представителя!'", СведенияДоверенности.Доверенность, "ПредставительЮЛ_НаимОрг");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвОрг.ИННЮЛ) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан ИНН организации - представителя!'", СведенияДоверенности.Доверенность, "ПредставительЮЛ_ИНН");
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвОрг.ИННЮЛ, Ложь) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН организации - представителя (" + СвОрг.ИННЮЛ + ")!'", СведенияДоверенности.Доверенность, "ПредставительЮЛ_ИНН");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвОрг.КПП) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан КПП организации - представителя!'", СведенияДоверенности.Доверенность, "ПредставительЮЛ_КПП");
		ИначеЕсли СтрДлина(СвОрг.КПП) <> 9 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный КПП организации - представителя (" + СвОрг.КПП + ")!'", СведенияДоверенности.Доверенность, "ПредставительЮЛ_КПП");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвОрг.ОГРН) И СтрДлина(СвОрг.ОГРН) <> 13 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ОГРН организации - представителя (" + СвОрг.ОГРН + ")!'", СведенияДоверенности.Доверенность, "ПредставительЮЛ_ОГРН");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвОрг.АдрРФ) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан адрес организации - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительЮЛ_Адрес");
		Иначе
			
			// адрес
			АдрПредстЮЛ = СвОрг.АдрРФ;
			
			Если ЗначениеЗаполнено(АдрПредстЮЛ.Индекс) И СтрДлина(АдрПредстЮЛ.Индекс) <> 6 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе организации - представителя указан некорректный индекс!'", СведенияДоверенности.Доверенность, , "ПредставительЮЛ_Адрес");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдрПредстЮЛ.КодРегион) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе организации - представителя не указан код региона!'", СведенияДоверенности.Доверенность, , "ПредставительЮЛ_Адрес");
			ИначеЕсли СтрДлина(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(АдрПредстЮЛ.КодРегион, 2)) <> 2 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе организации - представителя некорректно указан код региона!'", СведенияДоверенности.Доверенность, , "ПредставительЮЛ_Адрес");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// сведения о представителе-ФЛ
	СведПредстФЛ = СвПред.СведФизЛ;
	
	// общие сведения
	Если ЗначениеЗаполнено(СведПредстФЛ.ИННФЛ) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СведПредстФЛ.ИННФЛ, Истина) Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН физического лица - представителя (" + СведПредстФЛ.ИННФЛ + ")!'", СведенияДоверенности.Доверенность, "ПредставительФЛ_ИНН");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведПредстФЛ.ОГРНИП) И СтрДлина(СведПредстФЛ.ОГРНИП) <> 15 Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ОГРНИП физического лица - представителя (" + СведПредстФЛ.ОГРНИП + ")!'", СведенияДоверенности.Доверенность, "ПредставительФЛ_ОГРН");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведПредстФЛ.Гражданство) И СтрДлина(СведПредстФЛ.Гражданство) <> 3 Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код страны гражданства физического лица - представителя (" + СведПредстФЛ.Гражданство + ")!'", СведенияДоверенности.Доверенность, "ПредставительФЛ_Гражданство");
	КонецЕсли;
	
	// ФИО
	ФИОПредстФЛ = СведПредстФЛ.ФИО;
	Если ЗначениеЗаполнено(ФИОПредстФЛ) Тогда
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Фамилия) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана фамилия физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_ФИО");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Имя) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано имя физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_ФИО");
		КонецЕсли;
	Иначе
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано ФИО физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_ФИО");
	КонецЕсли;
	
	// адрес
	АдрПредстФЛ = СведПредстФЛ.АдрРФ;
	Если ЗначениеЗаполнено(АдрПредстФЛ) Тогда
		
		Если ЗначениеЗаполнено(АдрПредстФЛ.Индекс) И СтрДлина(АдрПредстФЛ.Индекс) <> 6 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе физического лица - представителя указан некорректный индекс!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Адрес");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдрПредстФЛ.КодРегион) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе физического лица - представителя не указан код региона!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Адрес");
		ИначеЕсли СтрДлина(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(АдрПредстФЛ.КодРегион, 2)) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе физического лица - представителя некорректно указан код региона!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Адрес");
		КонецЕсли;
		
	Иначе
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан адрес физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Адрес");
	КонецЕсли;
	
	// удостоверение личности
	УдЛичнПредстФЛ = СведПредстФЛ.УдЛичн;
	
	Если ЗначениеЗаполнено(УдЛичнПредстФЛ) Тогда
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВидДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан код вида документа, удостоверяющего личность физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Удост");
		ИначеЕсли СтрДлина(УдЛичнПредстФЛ.ВидДок) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код вида документа, удостоверяющего личность физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Удост");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.СерНомДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указаны серия и номер документа, удостоверяющего личность физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Удост");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ДатаДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана дата документа, удостоверяющего личность физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Удост");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВыдДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано наименование органа, выдавшего документ, удостоверяющий личность физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Удост");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдЛичнПредстФЛ.КодВыдДок) И СтрДлина(УдЛичнПредстФЛ.КодВыдДок) <> 7 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный код подразделения органа, выдавшего документ, удостоверяющий личность физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Удост");
		КонецЕсли;
		
	Иначе
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указаны сведения о документе, удостоверяющем личность физического лица - представителя!'", СведенияДоверенности.Доверенность, , "ПредставительУЛ_Удост");
	КонецЕсли;
	
	// сведения о полномочиях представителя
	ПолнДов = СвУпПред.ПолнДов;
	Если НЕ ЗначениеЗаполнено(ПолнДов) Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не определены полномочия представителя!'", СведенияДоверенности.Доверенность, "ПолномочияПредставителя");
	Иначе
	
		НомПП = 0;
		Для Каждого ЭлПолнДов Из ПолнДов Цикл
			
			НомПП = НомПП + 1;
			
			ОбластиПолномочий = ЭлПолнДов.ПрОблПолн;
			ОргФЛ = ЭлПолнДов.ОргФЛ;
			ОКАТО = ЭлПолнДов.ОКАТО;
			
			Если ОбластиПолномочий.Количество() = 0 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не определены полномочия в строке " + НомПП + " таблицы полномочий!'", СведенияДоверенности.Доверенность, "ПолномочияПредставителя");
			КонецЕсли;
			
			Если НЕ ОргФЛ.Свойство("ФЛ") Тогда
				Если ЗначениеЗаполнено(ОргФЛ.КПП) И СтрДлина(ОргФЛ.КПП) <> 9 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В строке " + НомПП + " таблицы полномочий определен некорректный КПП!'", СведенияДоверенности.Доверенность, "ПолномочияПредставителя");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОКАТО) И СтрДлина(ОКАТО) <> 11 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В строке " + НомПП + " таблицы полномочий определен некорректный ОКАТО!'", СведенияДоверенности.Доверенность, "ПолномочияПредставителя");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения о нотариусе
	Если СведенияДоверенности.Свойство("Нотариус") Тогда
		
		СвНотариус = СведенияДоверенности.Нотариус;
		
		Если СвНотариус.Свойство("СвОрган") Тогда
			
			СвОрган = СвНотариус.СвОрган;
			
			// общие сведения
			Если НЕ ЗначениеЗаполнено(СвОрган.НаимОрг) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано наименование организации нотариуса!'", СведенияДоверенности.Доверенность, "НотариусЮЛ_НаимОрг");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвОрган.ИННЮЛ) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан ИНН организации нотариуса!'", СведенияДоверенности.Доверенность, "НотариусЮЛ_ИНН");
			ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвОрган.ИННЮЛ, Ложь) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН организации нотариуса (" + СвОрган.ИННЮЛ + ")!'", СведенияДоверенности.Доверенность, "НотариусЮЛ_ИНН");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвОрган.КПП) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указан КПП организации нотариуса!'", СведенияДоверенности.Доверенность, "НотариусЮЛ_КПП");
			ИначеЕсли СтрДлина(СвОрган.КПП) <> 9 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный КПП организации нотариуса (" + СвОрган.КПП + ")!'", СведенияДоверенности.Доверенность, "НотариусЮЛ_КПП");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвОрган.ОГРН) И СтрДлина(СвОрган.ОГРН) <> 13 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ОГРН организации нотариуса (" + СвОрган.ОГРН + ")!'", СведенияДоверенности.Доверенность, "НотариусЮЛ_ОГРН");
			КонецЕсли;
			
		КонецЕсли;
		
		СвФизЛиц = СвНотариус.СвФизЛиц;
		Если ЗначениеЗаполнено(СвФизЛиц.ИННФЛ) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(СвФизЛиц.ИННФЛ, Истина) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Указан некорректный ИНН нотариуса - физического лица (" + СвФизЛиц.ИННФЛ + ")!'", СведенияДоверенности.Доверенность, "НотариусФЛ_ИНН");
		КонецЕсли;
		
		ФИОНотариусаФЛ = СвФизЛиц.ФИО;
		Если ЗначениеЗаполнено(ФИОНотариусаФЛ) Тогда
			Если НЕ ЗначениеЗаполнено(ФИОНотариусаФЛ.Фамилия) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указана фамилия нотариуса - физического лица!'", СведенияДоверенности.Доверенность, , "НотариусУЛ_ФИО");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИОНотариусаФЛ.Имя) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано имя нотариуса - физического лица!'", СведенияДоверенности.Доверенность, , "НотариусУЛ_ФИО");
			КонецЕсли;
		Иначе
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='Не указано ФИО нотариуса - физического лица!'", СведенияДоверенности.Доверенность, , "НотариусУЛ_ФИО");
		КонецЕсли;
		
		Если СвФизЛиц.Свойство("АдрРФ") Тогда
			
			АдресНотариусаФЛ = СвФизЛиц.АдрРФ;
			
			Если ЗначениеЗаполнено(АдресНотариусаФЛ.Индекс) И СтрДлина(АдресНотариусаФЛ.Индекс) <> 6 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе нотариуса - физического лица указан некорректный индекс!'", СведенияДоверенности.Доверенность, , "НотариусУЛ_Адрес");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресНотариусаФЛ.КодРегион) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе нотариуса - физического лица не указан код региона!'", СведенияДоверенности.Доверенность, , "НотариусУЛ_Адрес");
			ИначеЕсли СтрДлина(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(АдресНотариусаФЛ.КодРегион, 2)) <> 2 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "ru='В адресе нотариуса - физического лица некорректно указан код региона!'", СведенияДоверенности.Доверенность, , "НотариусУЛ_Адрес");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОшибкиПроверки.Количество() > 0 Тогда
		Для Каждого СтрОшибкаПроверки Из ОшибкиПроверки Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(СтрОшибкаПроверки.ТекстОшибки), СтрОшибкаПроверки.КлючДанных, СтрОшибкаПроверки.Поле, СтрОшибкаПроверки.ПутьКДанным);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НЕ ПризнакОшибки;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовКодамПолномочийДоверенности()
	
	СоответствиеРеквизитовКодамПолномочий = Новый Соответствие;
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак01", "01");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак02", "02");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак03", "03");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак04", "04");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак05", "05");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак06", "06");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак07", "07");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак08", "08");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак09", "09");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак10", "10");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак11", "11");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак12", "12");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак13", "13");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак14", "14");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак15", "15");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак16", "16");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак17", "17");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак18", "18");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак19", "19");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак20", "20");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак21", "21");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак22", "22");
	СоответствиеРеквизитовКодамПолномочий.Вставить("ПризнакПолныеПолномочия", "99");
	
	Возврат СоответствиеРеквизитовКодамПолномочий;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСтатусОтправки(Отчет, ПричиныОтказа = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СтатусыОтправки.Статус,
	                      |	СтатусыОтправки.Основание.ПричиныОтказа.(
	                      |		Причина,
	                      |		Пояснение
	                      |	) КАК ПричиныОтказа
	                      |ИЗ
	                      |	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
	                      |ГДЕ
	                      |	СтатусыОтправки.Объект = &Объект");
	Запрос.УстановитьПараметр("Объект", Отчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПричиныОтказа = Новый ТаблицаЗначений;
		ПричиныОтказа.Колонки.Добавить("Причина");
		ПричиныОтказа.Колонки.Добавить("Пояснение");
		
		ВыборкаПричиныОтказа = Выборка.ПричиныОтказа.Выбрать();
		Пока ВыборкаПричиныОтказа.Следующий() Цикл
			НовСтр = ПричиныОтказа.Добавить();
			НовСтр.Причина = ВыборкаПричиныОтказа.Причина;
			НовСтр.Пояснение = ВыборкаПричиныОтказа.Пояснение;
		КонецЦикла;
		
		Возврат Выборка.Статус;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НаправлениеСдачиОтчетностиОткрыто(Организация, ТипНаправления, КодНаправления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаправленияСдачиОтчетности.Ссылка) КАК Ссылка
	                      |ИЗ
	                      |	Справочник.НаправленияСдачиОтчетности КАК НаправленияСдачиОтчетности
	                      |ГДЕ
	                      |	НаправленияСдачиОтчетности.Организация В
	                      |			(ВЫБРАТЬ
	                      |				Организации.ИНН
	                      |			ИЗ
	                      |				Справочник.Организации КАК Организации
	                      |			ГДЕ
	                      |				Организации.Ссылка = &Организация)
	                      |	И НаправленияСдачиОтчетности.ТипНаправления = &ТипНаправления
	                      |	И (НаправленияСдачиОтчетности.Направление = &Направление
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = """"
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = "" ""
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = ""  ""
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = ""   ""
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = ""    ""
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = ""     ""
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = ""      ""
	                      |			ИЛИ НаправленияСдачиОтчетности.Направление = ""       "")");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипНаправления", ТипНаправления);
	Запрос.УстановитьПараметр("Направление", КодНаправления);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.Ссылка <> 0);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

// Функция возвращает структуру стандартных реквизитов, сохраненных в константе РеквизитыДоверенности
//
Функция ПолучитьСтруктуруРеквизитовДоверенности() Экспорт
	
	ХранилищеРеквизитов = Константы.РеквизитыДоверенности.Получить();
	Возврат ХранилищеРеквизитов.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСтрокуСостоянияОтправкиОтчетаИДополнительныеСвойства(
		Отчет, 
		КонтролирующийОрган, 
		ЦветТекста, 
		ПоказыватьКнопкуОткрытияПротокола, 
		ДатаОтправки) Экспорт
	
	ПоказыватьКнопкуОткрытияПротокола = Ложь;
	ЦветТекста = Новый Цвет(0, 0, 192);
	
	// определяем последнюю отправку
	ПоследнееСобытиеОтправки = ПолучитьПоследнююОтправкуОтчета(Отчет);
	Если НЕ ЗначениеЗаполнено(ПоследнееСобытиеОтправки) ИЛИ НЕ ЗначениеЗаполнено(ПоследнееСобытиеОтправки.ДатаОткрытия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаОтправки = ПоследнееСобытиеОтправки.ДатаОткрытия;
	
	// 
	СтрокаСостояния = "Отчет был отправлен " + Формат(ПоследнееСобытиеОтправки.ДатаОткрытия, "ДЛФ=DDT") + ". ";
	Если ПоследнееСобытиеОтправки.Статус = Перечисления.СтатусыОтправкиОтчетности.Запланирована Тогда
		Возврат СтрокаСостояния + "Ожидается подтверждение доставки.";
	ИначеЕсли ПоследнееСобытиеОтправки.Статус = Перечисления.СтатусыОтправкиОтчетности.ДоставкаПодтверждена Тогда
		Возврат СтрокаСостояния + "Доставка была подтверждена " + КонтролирующийОрган + ". Ожидается результат приема.";
	ИначеЕсли ПоследнееСобытиеОтправки.Статус = Перечисления.СтатусыОтправкиОтчетности.Сдана Тогда
		ЦветТекста = Новый Цвет(0, 179, 16);
		Возврат СтрокаСостояния + "Отчет был успешно сдан.";
	ИначеЕсли ПоследнееСобытиеОтправки.Статус = Перечисления.СтатусыОтправкиОтчетности.НеПринята Тогда
		ЦветТекста = Новый Цвет(255, 0, 0);
		ПоказыватьКнопкуОткрытияПротокола = Истина;
		Возврат СтрокаСостояния + "Отчет не был принят " + КонтролирующийОрган + ". Дополнительную информацию смотрите в протоколе.";
	Иначе
		Возврат СтрокаСостояния;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьТекстИзФайла(ИмяФайла, _КодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь)
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайла, _КодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("<?xml version=""1.0""?>")) <> 0 Тогда // кодировка не указана
			КонтрольнаяСтрока = ПерваяСтрокаФайла;
			Если СтрЧислоСтрок(ТекстИзФайла) > 1 Тогда
				КонтрольнаяСтрока = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 2), 100));   // вторая строка файла
			КонецЕсли;
			Если СтрНайти(КонтрольнаяСтрока, ВРЕГ("msg=""")) <> 0 И СтрНайти(КонтрольнаяСтрока, "О") = 0 Тогда // не нашли "О" (кириллица)
				ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

Функция РазобратьДанныеВыгрузкиПФР(ДанныеФайла, ТекстВыгрузки, КороткоеИмяФайлаВыгрузки, КодировкаТекстаВыгрузки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// инициализируем ТекстВыгрузки
	ВремФайл = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла).Записать(ВремФайл);
	ТекстВыгрузки = ПрочитатьТекстИзФайла(ВремФайл);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайл);
	
	// инициализируем КороткоеИмяФайлаВыгрузки
	КороткоеИмяФайлаВыгрузки = ДанныеФайла.ИмяФайла;
	
	// инициализируем КодировкаТекстаВыгрузки
	КодировкаТекстаВыгрузки = "windows-1251";
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьПризнакИспользованияРегламентныхЗаданий() Экспорт
	
	ИзменяемыеРегламентныеЗадания = Новый Массив;
	ИзменяемыеРегламентныеЗадания.Добавить("ОбновлениеИнформацииОНаправленияхСдачиОтчетности");
	ИзменяемыеРегламентныеЗадания.Добавить("ОтправкаОтчетности");
	ИзменяемыеРегламентныеЗадания.Добавить("ПолучениеРезультатовОтправкиОтчетности");
	Для Каждого ИзменяемоеРегламентноеЗадание Из ИзменяемыеРегламентныеЗадания Цикл
		МетаданныеРегламентногоЗадания = Метаданные.РегламентныеЗадания.Найти(ИзменяемоеРегламентноеЗадание);
		ОбъектРегламентнойЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеРегламентногоЗадания);
		ОбъектРегламентнойЗадание.Использование = Истина;
		ОбъектРегламентнойЗадание.Записать();
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСвойстваАктуальногоПротокола(СсылкаНаОтчет) Экспорт
	
	// определяем последнюю отправку
	ПоследнееСобытиеОтправки = ПолучитьПоследнююОтправкуОтчета(СсылкаНаОтчет);
	Если НЕ ЗначениеЗаполнено(ПоследнееСобытиеОтправки) ИЛИ НЕ ЗначениеЗаполнено(ПоследнееСобытиеОтправки.ДатаОткрытия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаОтправки = ПоследнееСобытиеОтправки.ДатаОткрытия;
	
	Возврат Новый Структура("Дата", ДатаОтправки);
	
КонецФункции

Функция ЭтоОтчетСтатистики(Отчет)

	// определяем вид отчета
	МетаданныеОтчета = Метаданные.НайтиПоТипу(ТипЗнч(Отчет));
	Если МетаданныеОтчета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МетаданныеОтчета.Имя = "РегламентированныйОтчет" Тогда
		ИсточникОтчета = Отчет.ИсточникОтчета;
	Иначе
		ИсточникОтчета = МетаданныеОтчета.Имя;
	КонецЕсли;
	
	ВидОтчета = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникОтчета);
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета.Родитель) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СтрНайти(ВРЕГ(ВидОтчета.Родитель.Наименование), ВРЕГ("Статистика")) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти
