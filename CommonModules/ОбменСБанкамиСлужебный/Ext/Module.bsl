////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиСлужебный: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание защиты от опасных действий с отключенными предупреждениями.
// Функция не приводит к ошибке компиляции при отсутствии в платформе механизмов
// предупреждений безопасности.
//
// Возвращаемое значение:
//  ОписаниеЗащитыОтОпасныхДействий - со свойством ПредупреждатьОбОпасныхДействиях = Ложь.
//
Функция ОписаниеЗащитыБезПредупреждений() Экспорт
	
	ИмяТипа = "ОписаниеЗащитыОтОпасныхДействий";
	ОписаниеЗащиты = Новый(ИмяТипа);
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Возврат ОписаниеЗащиты;
	
КонецФункции

#Область ОбменЧерезВнешнююОбработку

// Сохраняет внешнюю обработку в базе данных.
//
// Параметры:
//    АдресВнешнегоМодуля - АдресВременногоХранилища - содержит двоичные данные внешнего модуля;
//    Версия - Строка - версия внешнего модуля;
//    ИмяМодуля - Строка - имя внешнего модуля;
//    Наименование - Строка - наименование внешнего модуля.
//
Процедура СохранитьВнешнююОбработку(АдресВнешнегоМодуля, Версия, ИмяМодуля, Наименование) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВнешнихМодулей = Константы.ВнешниеФайлыОбменСБанками.Получить().Получить();
	
	Если ДанныеВнешнихМодулей = Неопределено Тогда
		ДанныеВнешнихМодулей = Новый Структура;
	КонецЕсли;

	Если НЕ ДанныеВнешнихМодулей.Свойство("ВнешниеОбработки") Тогда
		ДанныеВнешнихМодулей.Вставить("ВнешниеОбработки", Новый Соответствие);
	КонецЕсли;
	
	ДвоичныеДанныеМодуля = ПолучитьИзВременногоХранилища(АдресВнешнегоМодуля);
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Версия", Версия);
	СтруктураДанных.Вставить("Наименование", Наименование);
	СтруктураДанных.Вставить("ДвоичныеДанныеМодуля", ДвоичныеДанныеМодуля);
	
	ДанныеВнешнихМодулей.ВнешниеОбработки.Вставить(ИмяМодуля, СтруктураДанных);
	
	ХранилищеДанных = Новый ХранилищеЗначения(ДанныеВнешнихМодулей);
	
	Константы.ВнешниеФайлыОбменСБанками.Установить(ХранилищеДанных);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Подключает внешнюю обработку.
//
// Параметры:
//   АдресФайла - АдресВременногоХранилища - содержит двоичные данные файла внешней обработки;
//   ИмяОбъекта - Строка - возвращает имя подключенной внешней обработки.
//
Процедура ПодключитьВнешнююОбработку(Знач АдресФайла, ИмяОбъекта) Экспорт

	Попытка
		Менеджер = ВнешниеОбработки;
		Если ОбменСБанкамиСлужебныйПовтИсп.ЕстьЗащитаОтОпасныхДействий() Тогда
			ИмяОбъекта = Менеджер.Подключить(АдресФайла, , Ложь, ОбменСБанкамиСлужебный.ОписаниеЗащитыБезПредупреждений());
		Иначе
			ИмяОбъекта = Менеджер.Подключить(АдресФайла, , Ложь);
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Подключение внешней обработки'");
		ТекстСообщения = НСтр("ru = 'При подключении внешнего модуля произошла ошибка'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезВК

// Обновить внешнюю компоненту через интернет.
//
// Параметры:
//  ДвоичныеДанныеВК - ДвоичныеДанные - двоичные данные внешней компоненты.
//
Процедура ОбновитьВнешнююКомпоненту(ДвоичныеДанныеВК) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	АдресВнешнейКомпоненты = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВК);
	ИнформацияОВК = ИнформацияОВКБанка(АдресВнешнейКомпоненты);
	
	Если НЕ ИнформацияОВК = Неопределено И ИнформацияОВК.Свойство("URLИнфо")
		И ЗначениеЗаполнено(ИнформацияОВК.URLИнфо) Тогда
			
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			ПараметрыПолучения = Новый Структура;
			ПараметрыПолучения.Вставить("ПутьДляСохранения", ВремФайл);
			ПараметрыПолучения.Вставить("Таймаут", 60);
			
			Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ИнформацияОВК.URLИнфо, ПараметрыПолучения);
			
			Если Результат.Статус Тогда
			
				ПараметрыВК = ПараметрыВК(ВремФайл);
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
				
				Если ПараметрыВК <> Неопределено Тогда
					ДанныеВКИБ = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(ПараметрыВК.ИмяМодуля);
					
					Если ДанныеВКИБ <> Неопределено И ПараметрыВК.Версия = ДанныеВКИБ.Версия Тогда
						Возврат;
					КонецЕсли;
					
					ПараметрыПолучения = Новый Структура;
					ПараметрыПолучения.Вставить("Таймаут", 60);

					Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ПараметрыВК.URLВК, ПараметрыПолучения);
					
					Если Результат.Статус Тогда
						ИнформацияОВК = ИнформацияОВКБанка(Результат.Путь);
						Если НЕ ИнформацияОВК = Неопределено Тогда
							СохранитьВКБанка(Результат.Путь, ИнформацияОВК)
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Сохранить данные внешней компоненты банка в информационной базе.
//
// Параметры:
//  Адрес		 - Строка - адрес временного хранилища внешней компоненты.
//  Информация	 - Структура - информация о внешней компоненте. Содержит поля:
//     * ИмяМодуля - Строка - регистрируемое название модуля в ОС.
//     * Название - Строка - название модуля для вывода пользователю.
//     * Версия - Строка - версия модуля.
//
Процедура СохранитьВКБанка(Адрес, Информация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеФайлыОбменСБанками = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
	Если ОбщиеФайлыОбменСБанками = Неопределено Тогда
		ОбщиеФайлыОбменСБанками = Новый Структура;
	КонецЕсли;
	
	Если НЕ ОбщиеФайлыОбменСБанками.Свойство("ВнешниеКомпоненты") Тогда
		ОбщиеФайлыОбменСБанками.Вставить("ВнешниеКомпоненты", Новый Соответствие);
	КонецЕсли;

	ВнешниеКомпонентыИзКеша = ОбщиеФайлыОбменСБанками.ВнешниеКомпоненты;
	
	ДвоичныеДанныеВК = ПолучитьИзВременногоХранилища(Адрес);
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Наименование", Информация.Название);
	СтруктураДанных.Вставить("Версия", Информация.Версия);
	СтруктураДанных.Вставить("ДвоичныеДанныеМодуля", ДвоичныеДанныеВК);
	ВнешниеКомпонентыИзКеша.Вставить(Информация.ИмяМодуля, СтруктураДанных);
	
	ХранилищеДанных = Новый ХранилищеЗначения(ОбщиеФайлыОбменСБанками);
	
	Константы.ОбщиеФайлыОбменСБанками.Установить(ХранилищеДанных);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Получает параметры внешней компоненты из файла информации.
//
// Параметры:
//  ПутьКФайлуИнформации - Строка - путь к файлу информации.
// 
// Возвращаемое значение:
// Структура - информация об используемой компоненте. Содержит следующую информацию:
//     * ИмяМодуля - Строка - регистрируемое название модуля в ОС.
//     * Название - Строка - название модуля для вывода пользователю.
//     * Версия - Строка - версия модуля.
//     * URLВК - Строка - адрес в интернете для скачивания компоненты.
//     * URLИнфо - Строка - адрес в интернете с информационным файлом.
//
Функция ПараметрыВК(ПутьКФайлуИнформации) Экспорт
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлуИнформации);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ИмяМодуля", ЭД.progid);
		СтруктураВозврата.Вставить("Название", ЭД.name);
		СтруктураВозврата.Вставить("Версия", ЭД.version);
		Если ТипЗнч(ЭД.urladdin) = Тип("Строка") Тогда
			СтруктураВозврата.Вставить("URLВК", ЭД.urladdin);
		КонецЕсли;
		Если ТипЗнч(ЭД.urladdininfo) = Тип("Строка") Тогда
			СтруктураВозврата.Вставить("URLИнфо", ЭД.urladdininfo);
		КонецЕсли;

		Возврат СтруктураВозврата;
	Исключение
		Операция = НСтр("ru = 'Чтение файла информации о внешней компоненте.'");
		ТекстСообщения = НСтр("ru = 'При чтении информации о внешней компоненте произошла ошибка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
КонецФункции

// Получает информацию о внешней компоненте банка.
//
// Параметры:
//  АдресВнешнейКомпоненты	 - Строка - адрес временного хранилища, содержащий двоичные данные ВК.
// 
// Возвращаемое значение:
//  Структура - информация о ВК. Содержит следующие поля:
//     * ИмяМодуля - Строка - регистрируемое название модуля в ОС;
//     * Название - Строка - название модуля для вывода пользователю;
//     * Версия - Строка - версия модуля;
//     * ВерсияВБазе - Строка - версия модуля, которая сохранена в ИБ;
//     * URLВК - Строка - адрес в интернете для скачивания компоненты;
//     * URLИнфо - Строка - адрес в интернете с информационным файлом.
//
Функция ИнформацияОВКБанка(АдресВнешнейКомпоненты) Экспорт
	
	ДвоичныеДанныеВК = ПолучитьИзВременногоХранилища(АдресВнешнейКомпоненты);
	ВремФайл = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанныеВК.Записать(ВремФайл);
	
	ВремКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(Строка(Новый УникальныйИдентификатор));
	
	Попытка
		ЧтениеФайла = Новый ЧтениеZipФайла(ВремФайл);
	Исключение
		Операция = НСтр("ru = 'Чтение файла внешнего модуля.'");
		ТекстСообщения = НСтр("ru = 'При чтении файла внешнего модуля произошла ошибка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, 1);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
		Возврат Неопределено;
	КонецПопытки;
	
	НайденаИнформация = Ложь;
	
	Для Каждого Элемент Из ЧтениеФайла.Элементы Цикл
		Если ВРег(Элемент.Имя) = "INFO.XML" Тогда
			НайденаИнформация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденаИнформация Тогда
		Операция = НСтр("ru = 'Чтение информации о файле внешнего модуля'");
		ТекстОшибки = НСтр("ru = 'В архиве внешней компоненты отсутствует файл INFO.XML'");
		ТекстСообщения = НСтр("ru = 'Указанный файл не является внешним модулем'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, 1);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ЧтениеФайла.Извлечь(Элемент, ВремКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		Операция = НСтр("ru = 'Распаковка файла внешнего модуля.'");
		ТекстСообщения = НСтр("ru = 'При распаковки файла внешнего модуля произошла ошибка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, 1);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		Возврат Неопределено;
	КонецПопытки;
	
	ВремКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВремКаталог);
	
	ФайлИнформации = ВремКаталог + Элемент.Имя;
	
	СтруктураВозврата = ПараметрыВК(ФайлИнформации);
	
	СтруктураВозврата.Вставить("ВерсияВБазе");
	
	МассивВКИБ = ОбменСБанкамиСлужебныйПовтИсп.ВнешниеКомпонентыИнформационнойБазы();
	
	Для Каждого Элемент Из МассивВКИБ Цикл
		Если Элемент.ИмяМодуля = СтруктураВозврата.ИмяМодуля Тогда
			СтруктураВозврата.ВерсияВБазе = Элемент.Версия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеФайла.Закрыть();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СтроковыеКонстанты

// Возвращает пространство имен используемой схемы для асинхронного обмена с банком.
//
// Параметры:
//  ВерсияФормата - Строка - версия формата обмена.
// 
// Возвращаемое значение:
// Строка - пространство имен.
//
Функция ПространствоИменАсинхронногоОбмена(ВерсияФормата) Экспорт
	
	Если ВерсияФормата = "2.1.1" Тогда
		URI = "http://directbank.1c.ru/XMLSchema";
	Иначе
		URI = "http://bank.1c.ru/XMLSchema";
	КонецЕсли;
	Возврат URI;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщенийОбмена

// Создает сообщение обмена
//
// ПараметрыСообщения - Структура - реквизиты сообщения, названия ключей соответствуют названиям реквизитов.
// НовоеСообщениеСсылка - ДокументСсылка.СообщениеОбменСБанками - возвращаемое значение, ссылка на созданный документ.
//
// Возвращаемое значение:
// Булево - признак того, что новое сообщение обмена сохранено.
//
Функция СохранитьСообщениеОбмена(Знач ПараметрыСообщения, НовоеСообщениеСсылка) Экспорт
	
	Если ПараметрыСообщения.Свойство("ВнешнийИдентификатор")
		И ПараметрыСообщения.Свойство("НастройкаОбмена") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВнешнийИдентификатор", ПараметрыСообщения.ВнешнийИдентификатор);
		Запрос.УстановитьПараметр("НастройкаОбмена", ПараметрыСообщения.НастройкаОбмена);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СообщениеОбменСБанками.Ссылка
		               |ИЗ
		               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		               |ГДЕ
		               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		               |	И СообщениеОбменСБанками.ВнешнийИдентификатор = &ВнешнийИдентификатор
		               |	И НЕ СообщениеОбменСБанками.ПометкаУдаления";
		Если Не Запрос.Выполнить().Пустой() Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ТекстСообщения = НСтр("ru = 'В информационной базе уже есть электронный документ с таким же внешним идентификатором.
										|Электронный документ: %1
										|Внешний идентификатор: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ПараметрыСообщения.ВнешнийИдентификатор);
			ВидОперации = НСтр("ru = 'Сохранение сообщения обмена в информационной базе.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения, ТекстСообщения, 1, Выборка.Ссылка);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НовоеСообщениеОбъект = Документы.СообщениеОбменСБанками.СоздатьДокумент();
	
	Если ПараметрыСообщения.Свойство("Статус") Тогда
		ПараметрыСообщения.Вставить("ДатаИзмененияСтатуса", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовоеСообщениеОбъект, ПараметрыСообщения);
	
	Если (Не ПараметрыСообщения.Свойство("Организация") ИЛИ Не ПараметрыСообщения.Свойство("Банк"))
		И ПараметрыСообщения.Свойство("НастройкаОбмена") Тогда
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыСообщения.НастройкаОбмена, "Организация, Банк");
		ЗаполнитьЗначенияСвойств(НовоеСообщениеОбъект, РеквизитыНастройкиОбмена);
	КонецЕсли;
	
	НовоеСообщениеОбъект.Дата = ТекущаяДатаСеанса();
	НовоеСообщениеОбъект.Записать();
	НовоеСообщениеСсылка = НовоеСообщениеОбъект.Ссылка;
	Название = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ПараметрыСообщения.Представление);
	НазваниеФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Название, "");
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", НовоеСообщениеСсылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", НазваниеФайла);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, ПараметрыСообщения.АдресФайлаВоВременномХранилище);
	
	Если ПараметрыСообщения.Свойство("Основной") И ПараметрыСообщения.Свойство("СсылкаНаОбъект") Тогда
		МенеджерЗаписи = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = ПараметрыСообщения.СсылкаНаОбъект;
		МенеджерЗаписи.СообщениеОбмена = НовоеСообщениеСсылка;
		МенеджерЗаписи.Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовоеСообщениеСсылка, "Состояние");
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("СсылкаНаОбъект") Тогда
		МенеджерЗаписи = РегистрыСведений.СвязанныеОбъектыОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = ПараметрыСообщения.СсылкаНаОбъект;
		МенеджерЗаписи.СообщениеОбмена = НовоеСообщениеСсылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Только для внутреннего использования
Функция СлужебноеСообщениеБанка(ИсходноеСообщение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СообщениеОбменСБанками.Ссылка
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ДополнительныеДанные)
	               |	И СообщениеОбменСБанками.СообщениеРодитель = &ИсходноеСообщение";
	Запрос.УстановитьПараметр("ИсходноеСообщение", ИсходноеСообщение);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли
	
КонецФункции

#КонецОбласти

#Область Транспорт

Процедура ОтправитьЗапросСостоянияЭДВБанк(СтруктураПараметров, АдресХранилища) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	ЗапросСостоянияЭД = СтруктураПараметров.СообщениеОбмена;
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗапросСостоянияЭД, "НастройкаОбмена");
	ПараметрыАвторизации = Новый Соответствие;
	ДанныеАвторизации = Новый Структура("МаркерРасшифрованный", СтруктураПараметров.ИдентификаторСессииБанка);
	ПараметрыАвторизации.Вставить(НастройкаОбмена, ДанныеАвторизации);
	ТекстОшибки = "";
	
	ДанныеТабличнойЧасти = Новый Массив;
	ДанныеТабличнойЧасти.Добавить(ЗапросСостоянияЭД);
	
	ПЭД = Неопределено;
	СоздатьПакетОбменСБанками(НастройкаОбмена, ДанныеТабличнойЧасти, ПЭД);
	
	Если НЕ ЗначениеЗаполнено(ПЭД) Тогда
		СтруктураВозврата.Вставить("ЗапросОтправлен", Ложь);
		СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	СоздатьЭДПакетаAsync(ПЭД, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		СтруктураВозврата.Вставить("ЗапросОтправлен", Ложь);
		СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(ПЭД);
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ОтправкаПакетовЭДО(МассивПакетов, ПараметрыАвторизации, ТекстОшибки);
	
	КолОтправлено = Результат.КоличествоОтправлено;
	
	СтруктураВозврата.Вставить("ЗапросОтправлен", КолОтправлено > 0);
	СтруктураВозврата.Вставить("ЕстьОшибка", КолОтправлено = 0);
	СтруктураВозврата.Вставить("ТекстСообщения", ТекстОшибки);
	СтруктураВозврата.Вставить("СообщениеОбменаЗапросСостояния", ЗапросСостоянияЭД);
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Запрашивает документы из банка до тех пор, пока не будет получена нужная выписка.
//
// Параметры:
//  СтруктураПараметров - структура, содержит 2 элемента:
//      МассивСообщенийОбмена - в элементах ДокументСсылка.СообщенияОбменСБанками, электронные документы запроса выписок,
//      НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  АдресХранилища - строка, содержит адрес хранилища, содержащий структуру.
//
Процедура ПолучитьВыпискуБанкаАсинхронно(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеВозврата = ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен();
	
	НастройкаОбмена = СтруктураПараметров.НастройкаОбмена;
	СтруктураПараметров.Вставить("МаркерРасшифрованный", СтруктураПараметров.ИдентификаторСессииБанка);
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЭДИзБанкаАсинхронныйОбмен(НастройкаОбмена, СтруктураПараметров, ДанныеВозврата);
	
	ПоместитьВоВременноеХранилище(ДанныеВозврата, АдресХранилища);
	
КонецПроцедуры

// Запрашивает документы из банка до тех пор, пока не будет получено нужное извещение.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит следующие поля:
//      *СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение - запрос;
//      *НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//      *ИдентификаторСессииБанка - Строка - расшифрованный идентификатор сессии;
//  АдресХранилища - Строка - содержит адрес хранилища, в которую помещается структура возврата.
//
Процедура ПолучитьИзвещениеОСостоянииЭДАсинхронно(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеВозврата = ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен();
	
	НастройкаОбмена = СтруктураПараметров.НастройкаОбмена;
	СтруктураПараметров.Вставить("МаркерРасшифрованный", СтруктураПараметров.ИдентификаторСессииБанка);
	
	Пока Истина Цикл
		
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЭДИзБанкаАсинхронныйОбмен(
			НастройкаОбмена, СтруктураПараметров, ДанныеВозврата);
		
		Если ДанныеВозврата.ЕстьОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЕстьОшибка = Ложь;
		ПрерватьЦикл = Ложь;
		ИзвещениеПолучено = ОбменСБанкамиСлужебныйВызовСервера.ПолученоИзвещениеПоЗапросу(
			СтруктураПараметров.СообщениеОбмена, ЕстьОшибка);
		
		Если ИзвещениеПолучено Тогда
			ПрерватьЦикл = Истина;
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			ДанныеВозврата.ЕстьОшибка = Истина;
			ПрерватьЦикл = Истина;
		КонецЕсли;
		
		Если ПрерватьЦикл Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеВозврата, АдресХранилища);
	
КонецПроцедуры

Процедура ОтправитьВБанк(Настройки, Данные, Результат, ТекстОшибки) Экспорт
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	
	Если Настройки.Свойство("Хэш") Тогда
		Заголовки.Вставить("Authorization", "Basic " + Настройки.Хэш);
	КонецЕсли;
	
	Если Настройки.Свойство("ИдентификаторСессии") Тогда
		Заголовки.Вставить("SID", Настройки.ИдентификаторСессии);
	КонецЕсли;
	
	Если Настройки.Свойство("ИдентификаторОрганизации") Тогда
		Заголовки.Вставить("CustomerID", Настройки.ИдентификаторОрганизации);
	КонецЕсли;
	
	Если Настройки.Свойство("ВерсияФормата") Тогда
		Заголовки.Вставить("APIVersion", Настройки.ВерсияФормата);
	КонецЕсли;
	
	РезультатВыполнения = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(
		Настройки.Адрес, Настройки.Ресурс, Заголовки, Данные);
	
	Если РезультатВыполнения.Статус Тогда
		Результат = РезультатВыполнения.Тело;
	Иначе
		Если ЗначениеЗаполнено(РезультатВыполнения.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'При отправке документа в банк произошла ошибка (%1). %2'");
			ТекстОшибки = СтрШаблон(Шаблон, РезультатВыполнения.КодСостояния, РезультатВыполнения.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = РезультатВыполнения.СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Собирает пакет с запросом выписки и отправляет в банк. В ответ получает выписку банка.
//
// Параметры:
//  СтруктураПараметров - структура, содержит 2 элемента:
//      СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - электронный документ с запросом выписки,
//      НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  АдресХранилища - строка, содержит адрес хранилища, содержащий структуру из 2 элементов:
//      ЗапросОтправлен - Булево, признак, что запрос был отправлен,
//      ВыпискаБанка - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ с выпиской банка.
//
Процедура ОтправитьЗапросВыпискиВБанк(СтруктураПараметров, АдресХранилища) Экспорт
	
	Перем ВыпискаБанка;
	НастройкаОбмена = СтруктураПараметров.НастройкаОбмена;
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	СтруктураВозврата = Новый Структура;
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
		ЗапроситьВыпискуБанкаАсинхронно(СтруктураПараметров, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	МассивСообщенийОбмена = СтруктураПараметров.МассивСообщенийОбмена;
	СообщениеОбмена = МассивСообщенийОбмена[0];
	
	ЗапросОтправлен = Ложь;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ПрограммаБанка");
	Настройки = Новый Структура("Адрес", РеквизитыНастройкиОбмена.АдресСервера);
	КолОтправленных = 0;
	
	Данные = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0", "CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
	
	МассивПодписей = ПодписиСообщенияОбмена(СообщениеОбмена);
	
	Для Каждого СтрокаПодписи Из МассивПодписей Цикл
		Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
	КонецЦикла;
	
	ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла();
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКФайлуОтправки);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись, Message, "signed", URI, , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	Настройки.Вставить("Ресурс", РеквизитыНастройкиОбмена.РесурсВходящихДокументов);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Пользователь) Тогда
		ХЭШ = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(
			СтруктураПараметров.Пользователь + ":" + СтруктураПараметров.Пароль);
		Настройки.Вставить("ХЭШ", ХЭШ);
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Отправка запроса выписки в банк'");
	
	Попытка
		ОтветБанка = "";
		ТекстОшибки = "";
		ДанныеОтправки = Новый ДвоичныеДанные(ПутьКФайлуОтправки);
		ОтправитьВБанк(Настройки, ДанныеОтправки, ОтветБанка, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ТекстСообщения = ТекстОшибки;
			ОбработатьОшибкуПередачиПакета(СообщениеОбмена, ВидОперации, ТекстОшибки, ТекстСообщения);
			ЕстьОшибка = Истина;
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Отправлен);
			ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
			ЗапросОтправлен = Истина;
			ОбработатьОтветИзБанка(ОтветБанка, СообщениеОбмена, ВыпискаБанка, ЕстьОшибка);
			ДанныеОтвета = ПолучитьДанныеИзОтветаБанка(ОтветБанка);
			ДанныеЭП = Новый Соответствие;
			ДанныеЭП.Вставить(ВыпискаБанка, ДанныеОтвета.Получить("Подписи"));
			СтруктураВозврата.Вставить("ДанныеЭП", ДанныеЭП);
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось отправить запрос выписки в банк
									|Причина: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
		ОбработатьОшибкуПередачиПакета(СообщениеОбмена, ВидОперации, ТекстОшибки, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПутьКФайлуОтправки);
	
	СтруктураВозврата.Вставить("ЗапросОтправлен", ЗапросОтправлен);
	СтруктураВозврата.Вставить("ВыпискаБанка", ВыпискаБанка);
	СтруктураВозврата.Вставить("ЕстьОшибка", ЕстьОшибка);
	СтруктураВозврата.Вставить("ТекстСообщения", ТекстСообщения);

	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Собирает пакет с запросом зондом и отправляет в банк. В ответ состояние ЭД.
//
// Параметры:
//  СтруктураПараметров - структура, содержит 2 элемента:
//      СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - электронный документ с запросом выписки,
//      НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  АдресХранилища - строка, содержит адрес хранилища, содержащий структуру с данными возврата.
//
Процедура ОтправитьЗапросЗондВБанк(СтруктураПараметров, АдресХранилища) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(СтруктураПараметров.СообщениеОбмена);
	
	ТекстСообщения = "";
	
	ПакетОбменСБанками = Неопределено;
	СоздатьПакетОбменСБанками(СтруктураПараметров.НастройкаОбмена, МассивСообщенийОбмена, ПакетОбменСБанками);
	Если ПакетОбменСБанками = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЕстьОшибка = Ложь;
	СоздатьЭДПакетаAsync(ПакетОбменСБанками, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(ПакетОбменСБанками);
	СоотвНастроекОбменаИПараметровСертификатов = Новый Соответствие;
	СтруктураПараметров.Вставить("МаркерРасшифрованный", СтруктураПараметров.ИдентификаторСессииБанка);
	СоотвНастроекОбменаИПараметровСертификатов.Вставить(СтруктураПараметров.НастройкаОбмена, СтруктураПараметров);
	ОбменСБанкамиСлужебныйВызовСервера.ОтправкаПакетовЭДО(
		МассивПакетов, СоотвНастроекОбменаИПараметровСертификатов, ТекстСообщения);

КонецПроцедуры

// Обработчик ошибки передачи пакета в банк.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - отправляемое в банк сообщение.
//  ВидОперации - Строка - описание выполняемой операции.
//  ТекстОшибки - Строка - строка ошибки для записи в журнал регистрации.
//  ТекстСообщения - Строка - выводимое пользователю сообщение.
//
Процедура ОбработатьОшибкуПередачиПакета(СообщениеОбмена, ВидОперации, ТекстОшибки, ТекстСообщения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
	СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
	ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
	
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		ВидОперации, ТекстОшибки, ТекстСообщения, 1, СообщениеОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПакетовЭДО

// Осуществляет распаковку полученного пакета.
//
// Параметры:
//  ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - ссылка на распаковываемый пакет;
//  ДанныеВозврата - Структура - см. ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен().
//
Процедура РаспаковатьПакетОбменСБанками(ПакетОбменСБанками, ДанныеВозврата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПакетОбменСБанками.НастройкаОбмена
	               |ИЗ
	               |	Документ.ПакетОбменСБанками КАК ПакетОбменСБанками
	               |ГДЕ
	               |	ПакетОбменСБанками.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПакетОбменСБанкамиСообщения.Сообщение.ВнешнийИдентификатор КАК ВнешнийИдентификатор
	               |ИЗ
	               |	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
	               |ГДЕ
	               |	ПакетОбменСБанкамиСообщения.Ссылка = &Ссылка
	               |	И НЕ ПакетОбменСБанкамиСообщения.Сообщение.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(ПакетОбменСБанкамиСообщения.Ссылка) КАК КоличествоСообщений
	               |ИЗ
	               |	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
	               |ГДЕ
	               |	ПакетОбменСБанкамиСообщения.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПакетОбменСБанками);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоНастройке = Результат[0].Выбрать();
	ВыборкаПоНастройке.Следующий();
	НастройкаОбмена = ВыборкаПоНастройке.НастройкаОбмена;
	
	МассивВнешнихИдентификаторов = Результат[1].Выгрузить().ВыгрузитьКолонку("ВнешнийИдентификатор");
	
	ВыборкаКоличества = Результат[2].Выбрать();
	ВыборкаКоличества.Следующий();
	Если МассивВнешнихИдентификаторов.Количество() <> ВыборкаКоличества.КоличествоСообщений Тогда
		ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
		МассивСообщенийОбмена = Новый Массив;
		Для Каждого Строка Из ПакетОбъект.Сообщения Цикл
			Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Сообщение, "ПометкаУдаления") Тогда
				МассивСообщенийОбмена.Добавить(Строка.Сообщение);
			КонецЕсли;
		КонецЦикла;
		ПакетОбъект.Сообщения.Очистить();
		Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
			НовСтрока = ПакетОбъект.Сообщения.Добавить();
			НовСтрока.Сообщение = СообщениеОбмена;
		КонецЦикла;
		ПакетОбъект.Записать();
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ПакетОбменСБанками);
	
	ФайлПакета = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла.Записать(ФайлПакета);
	
	ПакетXML = Новый ЧтениеXML;
	ПакетXML.ОткрытьФайл(ФайлПакета);
	
	Попытка
		ResultBank = ФабрикаXDTO.ПрочитатьXML(ПакетXML);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ФабрикаAsyncXDTO(ВерсияФормата);

		ПакетXML.ОткрытьФайл(ФайлПакета);
		ПакетТип = ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(ПакетXML, ПакетТип);
	Исключение
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
										|%2'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
		КонецЕсли;
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
									|Подробное представление ошибки:
									|%2
									|Файл пакета: %3'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробнаяИнформация = СтрШаблон(
			ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки, ФайлПакета);
		ВидОперации = НСтр("ru = 'Чтение ЭД.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1, ПакетОбменСБанками);
		ДанныеВозврата.ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	ПакетXML.Закрыть();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПакета);
	
	ОбъектXML = Новый ЧтениеXML;
	
	Если НЕ ResultBank.Success = Неопределено 
		И НЕ ResultBank.Success.GetPacketResponse = Неопределено 
		И НЕ ResultBank.Success.GetPacketResponse.Document = Неопределено Тогда
				
		Для Каждого Document Из ResultBank.Success.GetPacketResponse.Document Цикл
			Если МассивВнешнихИдентификаторов.Найти(Document.id) <> Неопределено Тогда
				Продолжить; // данное сообщение уже распаковано и находится в табличной части пакета
			КонецЕсли;
			Если Document.compressed = Истина Тогда
				ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
				Document.data.__content.Записать(ФайлАрхива);
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("Ext", Новый УникальныйИдентификатор);
				Попытка
					ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлАрхива);
					ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
					Иначе
						ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
					КонецЕсли;
					ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
													|Подробное представление ошибки:
													|%2
													|Файл с ошибкой: %3'");
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ПодробнаяИнформация = СтрШаблон(
						ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки, ФайлАрхива);
					Операция = НСтр("ru = 'Распаковка пакета'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						Операция, ПодробнаяИнформация, ТекстСообщения, 1, ПакетОбменСБанками);
					ДанныеВозврата.ЕстьОшибка = Истина;
					
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
					
					Возврат;
				КонецПопытки;
				ЧтениеЗИП.Закрыть();
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
				
				ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*");
				Если ФайлыЭД.Количество() > 0 Тогда
					ФайлВложение = ФайлыЭД[0].ПолноеИмя;
				Иначе
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
					Продолжить;
				КонецЕсли;
			Иначе
				ФайлВложение = ПолучитьИмяВременногоФайла("xml");
				Document.data.__content.Записать(ФайлВложение);
			КонецЕсли;
			
			Если Document.dockind = "02" Тогда // Извещение о состоянии электронного документа
				ОбъектXML.ОткрытьФайл(ФайлВложение);
				Попытка
					StatusDocNotice = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					Фабрика = ФабрикаAsyncXDTO(StatusDocNotice.formatVersion);
					Если Фабрика = Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Неизвестная версия формата файла.'");
					КонецЕсли;
					ИзвещениеОСостоянииТип = ТипЗначенияCML(Фабрика, ПространствоИмен, "StatusDocNotice");
					ОбъектXML.ОткрытьФайл(ФайлВложение);
					StatusDocNotice = Фабрика.ПрочитатьXML(ОбъектXML, ИзвещениеОСостоянииТип);
				Исключение
					Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
						ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
													|%2'");
						КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						ТекстСообщения = СтрШаблон(
							ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
					Иначе
						ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
					КонецЕсли;
					ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
													|Подробное представление ошибки:
													|%2
													|Файл пакета: %3'");
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ПодробнаяИнформация = СтрШаблон(
						ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки, ФайлВложение);
					ВидОперации = НСтр("ru = 'Чтение ЭД.'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1, ПакетОбменСБанками);
					ДанныеВозврата.ЕстьОшибка = Истина;
					Возврат;
				КонецПопытки;
				ОбъектXML.Закрыть();
				
				ИДЗапроса = StatusDocNotice.ExtIDStatusRequest;
				ЭтоОтветНаЗапросСостояния = ЗначениеЗаполнено(ИДЗапроса);
				ЭтоОтветНаОтзыв = Ложь;
				
				Если ЭтоОтветНаЗапросСостояния Тогда
					СообщениеЗапрос = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", ИДЗапроса);
				КонецЕсли;
				
				СообщениеЭДО = Неопределено;
				Если ЗначениеЗаполнено(StatusDocNotice.ExtID) Тогда 
					СообщениеЭДО = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", StatusDocNotice.ExtID);
				КонецЕсли;
				
				Если ЭтоОтветНаЗапросСостояния И ЗначениеЗаполнено(СообщениеЗапрос) Тогда
					ВидЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "ВидЭД");
					ЭтоОтветНаОтзыв = ВидЗапроса = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД;
				ИначеЕсли ЗначениеЗаполнено(СообщениеЭДО)
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "ВидЭД") = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд Тогда
					ЭтоОтветНаЗонд = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СообщениеЭДО) Тогда
					
					ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлВложение);
					АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
					
					СтруктураРеквизитов = Новый Структура;
					СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЭДО);
					СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
					СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД);
					СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
					СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
					НазваниеДокумента = НСтр("ru = 'Извещение о состоянии электронного документа'");
					СтруктураРеквизитов.Вставить("Представление", НазваниеДокумента);
					СтруктураРеквизитов.Вставить("Расширение", "xml");
					СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
					СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", StatusDocNotice.id);
					СсылкаНаОбъект = ОбменСБанкамиСлужебныйВызовСервера.ОбъектПривязки(СтруктураРеквизитов.СообщениеРодитель);
					Если Не СсылкаНаОбъект = Неопределено Тогда 
						СтруктураРеквизитов.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
					КонецЕсли;
					
					НовоеСообщениеОбмена = Неопределено;
					Если Не СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена) Тогда 
						ДанныеВозврата.ЕстьОшибка = Истина;
						Продолжить;
					КонецЕсли;
					
					ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
					
					РеквизитыРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СтруктураРеквизитов.СообщениеРодитель, "Статус, ДатаИзмененияВнешнегоСтатуса");
					
					Если Document.signature.Количество() Тогда
						МассивПодписей = Новый Массив;
						Для Каждого ЭП Из Document.signature Цикл
							МассивПодписей.Добавить(ЭП.signedData);
						КонецЦикла;
						ДанныеВозврата.ДанныеЭП.Вставить(НовоеСообщениеОбмена, МассивПодписей);
					КонецЕсли;
					
					Если ЭтоОтветНаЗапросСостояния И ЗначениеЗаполнено(СообщениеЗапрос) И СообщениеЗапрос <> СообщениеЭДО Тогда
						РеквизитыЗапроса = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.ПолученоИзвещение);
						ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЗапрос, РеквизитыЗапроса);
					КонецЕсли;
					
					Если НЕ StatusDocNotice.Result.Status = Неопределено Тогда
						КодСтатуса = StatusDocNotice.Result.Status.Code;
						РеквизитыДляИзменения = Новый Структура;
						НовыйСтатус = Неопределено;
						Если КодСтатуса = "01" Тогда
							Если НЕ РеквизитыРодителя.Статус = Перечисления.СтатусыОбменСБанками.ПолученоИзвещение Тогда
								НовыйСтатус = Перечисления.СтатусыОбменСБанками.Принят;
							КонецЕсли;
						ИначеЕсли КодСтатуса = "02" Тогда
							Если НЕ РеквизитыРодителя.Статус = Перечисления.СтатусыОбменСБанками.Обработан Тогда
								НовыйСтатус = Перечисления.СтатусыОбменСБанками.Исполнен;
							КонецЕсли;
						ИначеЕсли КодСтатуса = "03" Тогда
							НовыйСтатус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком;
							РеквизитыДляИзменения.Вставить("ПричинаОтклонения", StatusDocNotice.Result.Status.MoreInfo);
						ИначеЕсли КодСтатуса = "04" Тогда
							НовыйСтатус = Перечисления.СтатусыОбменСБанками.Приостановлен;
						ИначеЕсли КодСтатуса = "05" Тогда
							НовыйСтатус = Перечисления.СтатусыОбменСБанками.Аннулирован;
							РеквизитыДляИзменения.Вставить("ПричинаОтклонения", StatusDocNotice.Result.Status.MoreInfo);
						ИначеЕсли КодСтатуса = "06" Тогда
							НовыйСтатус = Перечисления.СтатусыОбменСБанками.НеПодтвержден;
						КонецЕсли;
						Если ЭтоОтветНаОтзыв Тогда
							РеквизитыЗапроса = Новый Структура;
							РеквизитыЗапроса.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Обработан);
							ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЗапрос, РеквизитыЗапроса);
						КонецЕсли;
						
						ДатаИзмененияСтатуса = StatusDocNotice.creationDate;
						Если ЗначениеЗаполнено(НовыйСтатус) И РеквизитыРодителя.ДатаИзмененияВнешнегоСтатуса < ДатаИзмененияСтатуса Тогда
							РеквизитыДляИзменения.Вставить("ДатаИзмененияВнешнегоСтатуса", ДатаИзмененияСтатуса);
							РеквизитыДляИзменения.Вставить("Статус", НовыйСтатус);
							ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
						КонецЕсли;
					ИначеЕсли НЕ StatusDocNotice.Result.Error = Неопределено Тогда
						Если ЭтоОтветНаЗонд = Истина И StatusDocNotice.Result.Error.Code = "9999" Тогда
							РеквизитыДляИзменения = Новый Структура;
							РеквизитыДляИзменения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Исполнен);
							ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
						Иначе
							ДатаИзмененияСтатуса = StatusDocNotice.creationDate;
							ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(StatusDocNotice.Result.Error);
							РеквизитыДляИзменения = Новый Структура;
							РеквизитыДляИзменения.Вставить("ДатаИзмененияВнешнегоСтатуса", ДатаИзмененияСтатуса);
							РеквизитыДляИзменения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
							РеквизитыДляИзменения.Вставить("ПричинаОтклонения", ТекстОшибки);
							ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
							
							Если StatusDocNotice.Result.Error.Code = "2207" Тогда
								ИсходноеСообщениеОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "СообщениеРодитель");
								РеквизитыДляИзменения.Вставить(
									"ПричинаОтклонения", НСтр("ru = 'Документ отсутствует в информационной базе банка.'"));
								ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ИсходноеСообщениеОбмена, РеквизитыДляИзменения);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеЭДО);
					Если ЗначениеЗаполнено(ДокументУчета) Тогда
						СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "Состояние");
						ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
					КонецЕсли;
				Иначе
					ВидОперации = НСтр("ru = 'Чтение извещения о состоянии электронного документа'");
					ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
													|Не найден электронный документ по идентификатору: %2'");
					ПодробнаяИнформация = СтрШаблон(
						ПодробнаяИнформация, ПакетОбменСБанками, StatusDocNotice.ExtID);
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						ВидОперации, ПодробнаяИнформация, , 1, ПакетОбменСБанками);
					Продолжить;
				КонецЕсли;
			ИначеЕсли Document.dockind = "01" Тогда // Извещение о состоянии пакета
				ОбъектXML.ОткрытьФайл(ФайлВложение);
				Попытка
					StatusPacketNotice = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					Фабрика = ФабрикаAsyncXDTO(StatusPacketNotice.formatVersion);
					Если Фабрика = Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Неизвестная версия формата файла.'");
					КонецЕсли;
					ИзвещениеОСостоянииПакетаТип = ТипЗначенияCML(Фабрика, ПространствоИмен, "StatusPacketNotice");
					ОбъектXML.ОткрытьФайл(ФайлВложение);
					StatusPacketNotice = Фабрика.ПрочитатьXML(ОбъектXML, ИзвещениеОСостоянииПакетаТип);
				Исключение
					Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
						ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
													|%2'");
						КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
					Иначе
						ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
					КонецЕсли;
					ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
													|Подробное представление ошибки:
													|%2
													|Файл с ошибкой: %3'");
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ПодробнаяИнформация = СтрШаблон(
						ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки, ФайлВложение);
					ВидОперации = НСтр("ru = 'Чтение ЭД.'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1, ПакетОбменСБанками);
					ДанныеВозврата.ЕстьОшибка = Истина;
					Возврат;
				КонецПопытки;
					
				ОбъектXML.Закрыть();
				Если НЕ StatusPacketNotice.Result.Error = Неопределено Тогда
					ОтправленныйПакетЭД = НайтиПакетОбменСБанками(НастройкаОбмена, StatusPacketNotice.IDResultSuccessResponse);
					Если ЗначениеЗаполнено(ОтправленныйПакетЭД) Тогда
						ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(StatusPacketNotice.Result.Error);
						СтруктураЭД = Новый Структура;
						СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
						СтруктураЭД.Вставить("ПричинаОтклонения", ТекстОшибки);
						СообщенияОбмена = Новый Массив;
						ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
							ОтправленныйПакетЭД, Перечисления.СтатусыПакетовЭД.Отменен, СтруктураЭД, СообщенияОбмена);
						Для Каждого СообщениеОбмена Из СообщенияОбмена Цикл
							ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеОбмена);
							Если ЗначениеЗаполнено(ДокументУчета) Тогда
								СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Состояние");
								ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли НЕ StatusPacketNotice.Result.Status = Неопределено Тогда
					ОтправленныйПакетОбменСБанками = НайтиПакетОбменСБанками(НастройкаОбмена, StatusPacketNotice.IDResultSuccessResponse);
					Если ЗначениеЗаполнено(ОтправленныйПакетЭД) Тогда
						Если StatusPacketNotice.Result.Status.Code = "01" Тогда
							СтруктураЭД = Новый Структура;
							СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
							СообщенияОбмена = Новый Массив;
							ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
								ОтправленныйПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Доставлен, СтруктураЭД, СообщенияОбмена);
							Для Каждого СообщениеОбмена Из СообщенияОбмена Цикл
								ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеОбмена);
								Если ЗначениеЗаполнено(ДокументУчета) Тогда
									СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Состояние");
									ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Document.dockind = "15" Тогда // Выписка банка
				ОбъектXML.ОткрытьФайл(ФайлВложение);
				Попытка
					Statement = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					Фабрика = ФабрикаAsyncXDTO(Statement.formatVersion);
					Если Фабрика = Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Неизвестная версия формата файла.'");
					КонецЕсли;
					ВыпискаТип = ТипЗначенияCML(Фабрика, ПространствоИмен, "Statement");
					ОбъектXML.ОткрытьФайл(ФайлВложение);
					Statement = Фабрика.ПрочитатьXML(ОбъектXML, ВыпискаТип);
				Исключение
					Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
						ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
													|%2'");
						КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						ТекстСообщения = СтрШаблон(
							ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
					Иначе
						ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
					КонецЕсли;
					ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
													|Подробное представление ошибки:
													|%2
													|Файл с ошибкой: %3'");
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ПодробнаяИнформация = СтрШаблон(
						ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки, ФайлВложение);
					ВидОперации = НСтр("ru = 'Чтение ЭД.'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1, ПакетОбменСБанками);
					ДанныеВозврата.ЕстьОшибка = Истина;
					Возврат;
				КонецПопытки;
				ОбъектXML.Закрыть();
				
				ИдентификаторЗапроса = Statement.ExtIDStatementRequest;
				
				Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
					СообщениеЗапрос = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", ИдентификаторЗапроса);
					
					Если НЕ ЗначениеЗаполнено(СообщениеЗапрос) Тогда
						ВидОперации = НСтр("ru = 'Распаковка пакета'");
						ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
														|Не найден  запрос выписки по идентификатору: %2'");
						ПодробнаяИнформация = СтрШаблон(
							ПодробнаяИнформация, ПакетОбменСБанками, ИдентификаторЗапроса);
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
							ВидОперации, ПодробнаяИнформация, , 1, ПакетОбменСБанками);
					КонецЕсли;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СообщениеЗапрос) Тогда
					СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Обработан);
					ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЗапрос, СтруктураПараметров);
				КонецЕсли;
			
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлВложение);
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);

				Если ЗначениеЗаполнено(СообщениеЗапрос) Тогда
					НазваниеЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "Представление");
					НазваниеДокумента = СтрЗаменить(
						НазваниеЗапроса, НСтр("ru = 'Запрос выписки'"), НСтр("ru = 'Выписка банка за период'"));
				Иначе
					НазваниеДокумента = НСтр("ru = 'Выписка банка от %1'");
					НазваниеДокумента = СтрШаблон(
						НазваниеДокумента, Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
				КонецЕсли;
				
				СтруктураРеквизитов = Новый Структура;
				
				Если ЗначениеЗаполнено(СообщениеЗапрос) Тогда
					СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЗапрос);
				КонецЕсли;
				
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
				СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
				СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
				СтруктураРеквизитов.Вставить("Представление", НазваниеДокумента);
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
				СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", Statement.id);
				СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
					
				НовоеСообщениеОбмена = Неопределено;
				Если Не СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена) Тогда 
					ДанныеВозврата.ЕстьОшибка = Истина;
					Продолжить;
				КонецЕсли;
				
				ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
				
				Если Document.signature.Количество() Тогда
					МассивПодписей = Новый Массив;
					Для Каждого signature Из Document.signature Цикл
						МассивПодписей.Добавить(signature.signedData);
					КонецЦикла;
					ДанныеВозврата.ДанныеЭП.Вставить(НовоеСообщениеОбмена, МассивПодписей);
				КонецЕсли;
				СохранитьШтампыБанка(НовоеСообщениеОбмена);
				ОбменСБанкамиСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(НовоеСообщениеОбмена);
			ИначеЕсли Document.dockind = "06" Тогда // настройки обмена
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлВложение);
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
				Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Организация");
				СоздатьНастройкуОбменаИзФайла(АдресХранилища, Организация);
			ИначеЕсли Document.dockind = "20" Тогда // Подтверждение открытия счетов по зарплатному проекту
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлВложение);
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
					
				ОбъектВладелец = Неопределено;
				ИдентификаторЭДВладельца = Document.extID;
				ДанныеОповещения = Новый Структура;

				ОбменСБанкамиПереопределяемый.ПриПолученииXMLФайла(
					АдресВХранилище, Document.Data.fileName, ОбъектВладелец, ДанныеОповещения);
						
				Если НЕ ЗначениеЗаполнено(ОбъектВладелец) Тогда
					ОбъектВладелец = НастройкаОбмена;
				КонецЕсли;
					
				НазваниеДокумента = НСтр("ru = 'Подтверждение открытия счетов по зарплатному проекту'");
				
				СтруктураРеквизитов = Новый Структура;
				
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
				СтруктураРеквизитов.Вставить(
					"ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПодтверждениеОткрытияСчетовПоЗарплатномуПроекту);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
				СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
				СтруктураРеквизитов.Вставить("Представление", НазваниеДокумента);
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
				СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", Document.id);
				СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);

				Если ЗначениеЗаполнено(ИдентификаторЭДВладельца) Тогда
					СообщениеРодитель = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", ИдентификаторЭДВладельца);
					Если ЗначениеЗаполнено(СообщениеРодитель) Тогда
						СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеРодитель);
						ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусСообщенияОбмена(
							СообщениеРодитель, Перечисления.СтатусыОбменСБанками.ПолученоПодтверждение);
						ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеРодитель);
						Если ЗначениеЗаполнено(ДокументУчета) Тогда
							СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеРодитель, "Состояние");
							ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НовоеСообщениеОбмена = Неопределено;
				Если Не СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена) Тогда 
					ДанныеВозврата.ЕстьОшибка = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ДанныеОповещения.Количество() Тогда
					ДанныеВозврата.МассивОповещений.Добавить(ДанныеОповещения);
				КонецЕсли;
				
				ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
				
				Если Document.signature.Количество() Тогда
					МассивПодписей = Новый Массив;
					Для Каждого signature Из Document.signature Цикл
						МассивПодписей.Добавить(signature.signedData);
					КонецЦикла;
					ДанныеВозврата.ДанныеЭП.Вставить(НовоеСообщениеОбмена, МассивПодписей);
				КонецЕсли;
			ИначеЕсли Document.dockind = "22" Тогда // Подтверждение зачисления денежных средств на счета сотрудников
				
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлВложение);
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
					
				ОбъектВладелец = Неопределено;
				ИдентификаторЭДВладельца = Document.extID;
				ДанныеОповещения = Новый Структура;

				ОбменСБанкамиПереопределяемый.ПриПолученииXMLФайла(
					АдресВХранилище, Document.Data.fileName, ОбъектВладелец, ДанныеОповещения);
						
				Если НЕ ЗначениеЗаполнено(ОбъектВладелец) Тогда
					ОбъектВладелец = НастройкаОбмена;
				КонецЕсли;
					
				НазваниеДокумента = НСтр("ru = 'Подтверждение зачисления денежных средств на счета сотрудников'");
				
				СтруктураРеквизитов = Новый Структура;
				
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
				СтруктураРеквизитов.Вставить(
					"ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
				СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
				СтруктураРеквизитов.Вставить("Представление", НазваниеДокумента);
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
				СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", Document.id);
				СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);

				Если ЗначениеЗаполнено(ИдентификаторЭДВладельца) Тогда
					СообщениеРодитель = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", ИдентификаторЭДВладельца);
					Если ЗначениеЗаполнено(СообщениеРодитель) Тогда
						СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеРодитель);
						ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусСообщенияОбмена(
							СообщениеРодитель, Перечисления.СтатусыОбменСБанками.ПолученоПодтверждение);
						ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеРодитель);
						Если ЗначениеЗаполнено(ДокументУчета) Тогда
							СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеРодитель, "Состояние");
							ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НовоеСообщениеОбмена = Неопределено;
				Если Не СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена) Тогда 
					ДанныеВозврата.ЕстьОшибка = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ДанныеОповещения.Количество() Тогда
					ДанныеВозврата.МассивОповещений.Добавить(ДанныеОповещения);
				КонецЕсли;
				
				ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
				
				Если Document.signature.Количество() Тогда
					МассивПодписей = Новый Массив;
					Для Каждого signature Из Document.signature Цикл
						МассивПодписей.Добавить(signature.signedData);
					КонецЦикла;
					ДанныеВозврата.ДанныеЭП.Вставить(НовоеСообщениеОбмена, МассивПодписей);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				УдаляемыйОбъект = ПапкаДляРаспаковки;
			Иначе
				УдаляемыйОбъект = ФайлВложение;
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(УдаляемыйОбъект);
			
		КонецЦикла;
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ДанныеВозврата.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеВозврата.ЕстьОшибка Тогда
		УстановитьСтатусПакета(ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Распакован);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новый статус пакета.
//
// Параметры:
//  Пакет - ДокументСсылка.ПакетОбменСБанками - ссылка на пакет, у которого меняется статус.
//  СтатусПакета - ПеречислениеСсылка.СтатусыПакетовЭД - новый статус пакета.
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.Статус = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Сохраняет полученный пакет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//  ИмяФайла - Строка - файл, полученный их банка;
//  ДанныеВозврата - Структура - см. описание ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен.
//
Процедура СохранитьПолученныйПакет(НастройкаОбмена, ИмяФайла, ДанныеВозврата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Неопределено;
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ФабрикаAsyncXDTO(ВерсияФормата);
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ResultBank = ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(ОбъектXML, ResultBank);
	Исключение
		ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка. Для решения проблемы обратитесь в свой банк.'");
		
		ШаблонОшибкиДляЖурнала = НСтр("ru = 'Из банка получен файл с некорректным содержимым.
											|Путь к файлу: %1
											|Текст ошибки: %2.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ШаблонОшибкиДляЖурнала, ИмяФайла, ПодробноеПредставлениеОшибки);
		
		ВидОперации = НСтр("ru = 'Чтение полученного из банка электронного документа.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
		
		ДанныеВозврата.ЕстьОшибка = Истина;
		
		Возврат;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	
	Если НЕ ResultBank.Error = Неопределено Тогда
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		ДанныеВозврата.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ResultBank.Success.GetPacketResponse = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураПараметров.Вставить("ВнешнийИдентификатор", ResultBank.Success.GetPacketResponse.id);
		СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Организация");
		СтруктураПараметров.Вставить("Организация", Организация);
		
		ПакетОбменСБанками = СформироватьНовыйПакетОбменСБанками(СтруктураПараметров);
		Если ЗначениеЗаполнено(ПакетОбменСБанками) Тогда
			ИмяФайлаПакета = "ResultBank_" + СтруктураПараметров.ВнешнийИдентификатор;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ИмяФайла);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетОбменСБанками);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайлаПакета);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

			ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресВХранилище);
		Иначе
			ДанныеВозврата.ЕстьОшибка = Истина;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			Возврат;
		КонецЕсли;
		
		РаспаковатьПакетОбменСБанками(ПакетОбменСБанками, ДанныеВозврата);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
	
	
КонецПроцедуры

// Определяет параметры распаковки пакетов электронных документов.
//
// Параметры:
//   ПакетыЭД - Массив - пакеты, которые пользователь решил распаковать:
//      * ДокументСсылка.ПакетОбменСБанками - ссылка на пакет.
//
// Возвращаемое значение:
//  Массив - пакеты, которые возможно распаковать:
//      * ДокументСсылка.ПакетОбменСБанками - ссылка на пакет ЭД.
//
Функция ГотовыеКРаспаковкеПакетыЭД(Знач ПакетыЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ПакетЭД.Статус
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПакетОбменСБанкамиПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ПакетЭД.Ссылка)
	|ГДЕ
	|	ПакетЭД.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", ПакетыЭД);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПакеты.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Операция = НСтр("ru = 'Распаковка пакета'");
			ТекстСообщения = НСтр("ru = 'Нет присоединенного файла для пакета: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаПакеты.СсылкаНаДокумент);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстСообщения, ТекстСообщения, 1, ВыборкаПакеты.СсылкаНаДокумент);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПакеты.Статус <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			
			ШаблонСообщения = НСтр("ru = 'Статус пакета %1 отличен от значения ""К распаковке"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаПакеты.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		МассивВозврата.Добавить(ВыборкаПакеты.СсылкаНаДокумент);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Читает файл, полученный из банка и возвращает идентификаторы пакетов, которых еще нет в информационной базе.
// Исходный файл удаляет.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  ИмяФайла - Строка - путь к файлу, полученному из банка.
//  МассивИдентификаторов - Массив - содержит идентификаторы новых пакетов банка.
//     * Строка - идентификатор пакета.
//  ЕстьОшибка - Булево - при разборе файла произошла ошибка.
//
Процедура ПрочитатьИдентификаторыПакетов(НастройкаОбмена, ИмяФайла, МассивИдентификаторов, ЕстьОшибка) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	ОбъектXML = Новый ЧтениеXML;
		
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ФабрикаAsyncXDTO(ВерсияФормата);
		ОбъектXML.Закрыть();
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ТипResultBank = ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(ОбъектXML, ТипResultBank);
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При чтении данных, полученных из банка, произошла ошибка.'");
		ТекстОшибки = НСтр("ru = 'При чтении данных, полученных из банка, произошла ошибка.
								|Путь к файлу: %1
								|Подробное представление ошибки: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение списка новых документов'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
		ЕстьОшибка = Истина;
		ОбъектXML.Закрыть();
		Возврат;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
		
	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.GetPacketListResponse = Неопределено Тогда
			Для Каждого Идентификатор Из ResultBank.Success.GetPacketListResponse.PacketID Цикл
				МассивИдентификаторов.Добавить(Идентификатор);
			КонецЦикла;
			ПоследняяДатаПолученияЭД = ResultBank.Success.GetPacketListResponse.TimeStampLastPacket;
		Иначе
			Операция = НСтр("ru = 'Чтение ответа банка.'");
			ТекстОшибки = НСтр("ru = 'Получен некорректный ответ из банка
									|Файл ответа: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
			ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
			ЕстьОшибка = Истина;
			Возврат;
		КонецЕсли;
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, НастройкаОбмена);
		ЕстьОшибка = Истина;
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОСостоянии = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаСБанком(НастройкаОбмена);
	НачальнаяДатаПолученияЭД = ДанныеОСостоянии.ПоследняяДатаПолученияЭД;
	
	// Сдвиг даты в регистре сведений
	Если ЗначениеЗаполнено(ПоследняяДатаПолученияЭД) И ПоследняяДатаПолученияЭД > НачальнаяДатаПолученияЭД Тогда
		Попытка
			МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
			МенеджерЗаписи.ПоследняяДатаПолученияЭД = ПоследняяДатаПолученияЭД;
			МенеджерЗаписи.Записать();
		Исключение
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'При записи даты получения документов произошла ошибка:.
										|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Сохранение последней даты получения документов'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбмена);
			ЕстьОшибка = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	КС = Новый КвалификаторыСтроки(80);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", ОписаниеТиповС);
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		НовСтрока = ТаблицаИдентификаторов.Добавить();
		НовСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.ВнешнийИдентификатор
	|ПОМЕСТИТЬ ЗагруженныеПакеты
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийИдентификатор В
	|			(ВЫБРАТЬ
	|				ТаблицаИдентификаторов.Идентификатор
	|			ИЗ
	|				ТаблицаИдентификаторов)
	|	И ПакетЭД.НастройкаОбмена = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|ГДЕ
	|	НЕ ТаблицаИдентификаторов.Идентификатор В
	|				(ВЫБРАТЬ
	|					ЗагруженныеПакеты.ВнешнийИдентификатор
	|				ИЗ
	|					ЗагруженныеПакеты)";
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	МассивИдентификаторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецПроцедуры

// Создает документ ПакетОбменСБанками и заполняет его реквизиты.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком,
//  МассивСообщений - Массив - содержит ссылки на документы СообщениеОбменСБанками,
//  ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - ссылка на созданный документ.
//
Процедура СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщений, ПакетОбменСБанками) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПакетОбменСБанкамиОбъект = Документы.ПакетОбменСБанками.СоздатьДокумент();
	ПакетОбменСБанкамиОбъект.Дата = ТекущаяДатаСеанса();
	ПакетОбменСБанкамиОбъект.Направление = Перечисления.НаправленияЭД.Исходящий;
	ПакетОбменСБанкамиОбъект.НастройкаОбмена = НастройкаОбмена;
	ПакетОбменСБанкамиОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Организация");
	ПакетОбменСБанкамиОбъект.Статус = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПакетОбменСБанкамиОбъект.Идентификатор = Строка(Новый УникальныйИдентификатор);
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		НоваяСтрока = ПакетОбменСБанкамиОбъект.Сообщения.Добавить();
		НоваяСтрока.Сообщение = Сообщение;
	КонецЦикла;
	
	Попытка
		ПакетОбменСБанкамиОбъект.Записать();
		ПакетОбменСБанками = ПакетОбменСБанкамиОбъект.Ссылка;
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'формирование пакета ЭДО'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки, 1, НастройкаОбмена);
	КонецПопытки;

КонецПроцедуры

// Создает электронный документ для пакета документов.
//
// Параметры:
//  Конверт  - ДокументСсылка.ПакетЭД - ссылка на пакет;
//  ЕстьОшибка - Булево - возвращает Истина, если электронный документ не удалось сформировать;
//  СвойстваСертификатов - Соответствие - свойства сертификатов не x509:
//    * Ключ - Строка - отпечаток сертификата;
//    * Значение - Структура - свойства сертификата:
//          ** СерийныйНомер - Строка - серийный номер сертификата;
//          ** ИмяИздателя - Строка - имя издателя.
//
Процедура СоздатьЭДПакетаAsync(Конверт, ЕстьОшибка, СвойстваСертификатов = Неопределено) Экспорт
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конверт, "НастройкаОбмена");

	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, СжиматьДанныеПакетаЭД, ВерсияФормата");
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Наименование, Код");

	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	Фабрика = ФабрикаAsyncXDTO(ВерсияФормата);
	
	ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	
	Попытка
		ТекстОшибки = "";
		
		Packet = ОбъектТипаCML(Фабрика, "Packet", ПространствоИмен);
		Sender = ОбъектТипаCML(Фабрика, "ParticipantType", ПространствоИмен);
		CustomerPartyType = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		
		ЗаполнитьСвойствоXDTO(
			CustomerPartyType, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ПолноеНаименованиеОрганизации = Сред(СведенияОбОрганизации.ПолноеНаименование, 1, 160);
		ЗаполнитьСвойствоXDTO(CustomerPartyType, "name", ПолноеНаименованиеОрганизации, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(CustomerPartyType, "inn", СведенияОбОрганизации.ИНН, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(CustomerPartyType, "kpp", СведенияОбОрганизации.КПП, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Sender, "Customer", CustomerPartyType, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "Sender", Sender, Истина, ТекстОшибки);
		
		Recipient = ОбъектТипаCML(Фабрика, "ParticipantType", ПространствоИмен);
		BankPartyType = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(BankPartyType, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(BankPartyType, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Recipient, "Bank", BankPartyType, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "Recipient", Recipient, Истина, ТекстОшибки);
		
		Для каждого Строка Из Конверт.Сообщения Цикл
			
			СообщениеОбмена = Строка.Сообщение;
			ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДанныеЭД.Записать(ИмяФайла);
			
			РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "ВидЭД, Идентификатор");
			
			ВидЭД = РеквизитыЭД.ВидЭД;
			
			Если РеквизитыНастройкиОбмена.СжиматьДанныеПакетаЭД Тогда
				ФайлZIP = ПолучитьИмяВременногоФайла("zip");
				ЗаписьZIP = Новый ЗаписьZipФайла(ФайлZIP, , , , УровеньСжатияZIP.Максимальный);
				ЗаписьZIP.Добавить(ИмяФайла);
				ЗаписьZIP.Записать();
				ДанныеЭД = Новый ДвоичныеДанные(ФайлZIP);
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлZIP);
				
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			
			DocumentType = ОбъектТипаCML(Фабрика, "DocumentType", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(DocumentType, "id", РеквизитыЭД.Идентификатор, Истина, ТекстОшибки);
			Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
				ВидЭДПакета = "10"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
				ВидЭДПакета = "11"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
				ВидЭДПакета = "14"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда
				ВидЭДПакета = "03"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД Тогда
				ВидЭДПакета = "04"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд Тогда
				ВидЭДПакета = "05"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников Тогда
				ВидЭДПакета = "21"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту Тогда
				ВидЭДПакета = "19"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников Тогда
				ВидЭДПакета = "23"
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(DocumentType, "docKind", ВидЭДПакета, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(DocumentType, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
			Если РеквизитыНастройкиОбмена.СжиматьДанныеПакетаЭД Тогда
				ЗаполнитьСвойствоXDTO(DocumentType, "compressed", Истина, , ТекстОшибки);
			КонецЕсли;
			
			data = ОбъектТипаCML(Фабрика, "DocumentType.data", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(data, "__content", ДанныеЭД, Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(DocumentType, "data", data, Истина, ТекстОшибки);
			МассивПодписей = ПодписиСообщенияОбмена(СообщениеОбмена);
			
			Для Каждого СтрокаПодписи Из МассивПодписей Цикл
				signature = ОбъектТипаCML(Фабрика, "DocumentType.signature", ПространствоИмен);
				ЗаполнитьСвойствоXDTO(signature, "signedData", СтрокаПодписи.Подпись.Получить(), Истина, ТекстОшибки);
				Если СвойстваСертификатов = Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(СтрокаПодписи.Сертификат.Получить());
					ЗаполнитьСвойствоXDTO(signature, "x509SerialNumber", Сертификат.СерийныйНомер, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(signature, "x509IssuerName", Сертификат.Издатель.CN, Истина, ТекстОшибки);
				Иначе
					СвойстваСертификата = СвойстваСертификатов.Получить(СтрокаПодписи.Отпечаток);
					Если СвойстваСертификата = Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Ошибка чтения свойств сертификата'");
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(signature, "x509SerialNumber", СвойстваСертификата.СерийныйНомер, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(signature, "x509IssuerName", СвойстваСертификата.ИмяИздателя, Истина, ТекстОшибки);
				КонецЕсли;
				
				DocumentType.signature.Добавить(signature);
			КонецЦикла;
			
			Packet.Document.Добавить(DocumentType);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Packet, "id", Строка(Конверт.Идентификатор), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ВерсияПрограммы = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ЗаполнитьСвойствоXDTO(Packet, "userAgent", ВерсияПрограммы, , ТекстОшибки);
		
		Packet.Проверить();
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ВыгрузитьЭДВФайл(Фабрика, Packet, ИмяФайла, Ложь);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбъектКонверт = Конверт.ПолучитьОбъект();
			ОбъектКонверт.ПометкаУдаления = Истина;
			ОбъектКонверт.Записать();
		Иначе
			СоздатьПрисоединенныйФайл(Конверт, ИмяФайла);
		КонецЕсли;
		
		Если ФайлИзменен(Фабрика, Packet, ИмяФайла, Ложь) Тогда
			ЕстьОшибка = Истина;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		КонецЕсли;
		
	Исключение
		ОбъектКонверт = Конверт.ПолучитьОбъект();
		ОбъектКонверт.ПометкаУдаления = Истина;
		ОбъектКонверт.Записать();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбмена);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет присоединенный файл для пакета ЭДО.
//  Конверт - ДокументСсылка.ПакетОбменСБанками - созданный пакет.
//
Процедура СоздатьЭДПакетаCMSDETACHED(Конверт) Экспорт
	
	СообщениеОбмена = Конверт.Сообщения[0].Сообщение;
	
	Данные = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0","CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
	
	ЭлектронныеПодписи = ПодписиСообщенияОбмена(СообщениеОбмена);
	
	Для Каждого СтрокаПодписи Из ЭлектронныеПодписи Цикл
		Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
	КонецЦикла;
	
	ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКФайлуОтправки);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись, Message, "signed", URI, , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	СоздатьПрисоединенныйФайл(Конверт, ПутьКФайлуОтправки);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПутьКФайлуОтправки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВходящихДанных

// Возвращает тест ошибки, полученной из банка.
//
// Параметры:
//  Ошибка - ОбъектXDTO - данные об ошибке.
// 
// Возвращаемое значение:
// Строка - подробная информация об ошибке.
//
Функция ТекстСообщенияОбОшибкеОтветаБанка(Ошибка) Экспорт
	
	ШаблонОшибки = НСтр("ru = 'Получена ошибка из банка (%1). Код ошибки %2.
						|%3%4'");
	Дата = Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ДопИнформация = ?(ЗначениеЗаполнено(Ошибка.MoreInfo), ": " + Ошибка.MoreInfo, "");
	ТекстОшибки = СтрШаблон(
		ШаблонОшибки, Дата, Ошибка.Code, Ошибка.Description, ДопИнформация);
	
	Возврат ТекстОшибки;
	
КонецФункции

// Только для внутреннего использования
Процедура ОбработатьОтветИзБанка(ОтветБанка, ОтправленноеСообщениеОбмена, ПолученноеСообщениеОбмена = Неопределено, ЕстьОшибка = Неопределено) Экспорт
	
	ДанныеОтвета = ПолучитьДанныеИзОтветаБанка(ОтветБанка);
	ЕстьОшибка = Ложь;
	ФайлДанных = ПолучитьИмяВременногоФайла();
	Сообщение = ДанныеОтвета.Получить("Данные");
	РеквизитыОтправленногоСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОтправленноеСообщениеОбмена, "НастройкаОбмена, ВидЭД");
	ВидЭД = РеквизитыОтправленногоСообщения.ВидЭД;
	Сообщение.Записать(ФайлДанных);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлДанных);
	Если ЧтениеXML.Прочитать() И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И (ЧтениеXML.ЛокальноеИмя = "success" ИЛИ ЧтениеXML.ЛокальноеИмя = "error") Тогда
		ЧтениеXML.ОткрытьФайл(ФайлДанных);
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "success" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВнешнийИдентификатор", ЧтениеXML.Значение);
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
				ДополнительныеДанные = Новый Структура("ДатаПоступленияВБанк", ТекущаяДатаСеанса());
				СтруктураПараметров.Вставить("ДополнительныеДанные", ДополнительныеДанные);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ОтправленноеСообщениеОбмена, СтруктураПараметров)
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "error" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				КодОшибки = ЧтениеXML.Значение;
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ТекстОшибки = ЧтениеXML.Значение;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ОтправленноеСообщениеОбмена, СтруктураПараметров);
				Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				ЕстьОшибка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		АдресФайла = ПоместитьВоВременноеХранилище(Сообщение);
		НаименованиеЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтправленноеСообщениеОбмена, "Представление");
		НаименованиеВыписки = СтрЗаменить(НаименованиеЗапроса, НСтр("ru = 'Запрос выписки'"), НСтр("ru = 'Выписка банка за период'"));
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Представление", НаименованиеВыписки);
		ПараметрыСообщения.Вставить("Расширение", "xml");
		ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		ПараметрыСообщения.Вставить("НастройкаОбмена", РеквизитыОтправленногоСообщения.НастройкаОбмена);
		ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
		ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		ПараметрыСообщения.Вставить("СообщениеРодитель", ОтправленноеСообщениеОбмена);
		ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
		ПараметрыСообщения.Вставить("СсылкаНаОбъект", РеквизитыОтправленногоСообщения.НастройкаОбмена);

		НовоеСообщение = Неопределено;
		СохранитьСообщениеОбмена(ПараметрыСообщения, НовоеСообщение);
		
		ОбменСБанкамиСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(НовоеСообщение);
		ПолученноеСообщениеОбмена = НовоеСообщение;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписи

// Возвращает подписи электронного документа, прикрепленного к сообщению.
// 
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение.
//
// Возвращаемый параметр:
//    Массив - массив данных подписей:
//      * Структура:
//         ** Подпись - ХранилищеЗначения - содержит двоичные данные подписи.
//         ** КомуВыданСертификат - Строка - владелец сертификата.
//         ** ИмяФайлаПодписи - Строка - название файла подписи.
//         ** Сертификат - ХранилищеЗначения - двоичные данные сертификата установленной подписи.
//
Функция ПодписиСообщенияОбмена(СообщениеОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	МассивФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(СообщениеОбмена, МассивФайлов);
	
	Если МассивФайлов.Количество() Тогда
		Возврат ПолучитьВсеПодписи(МассивФайлов[0]);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область МетодыXDTO

// Проверяет неизменность временного файла по данным Фабрики XDTO.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - фабрика типов XDTO, с помощью которой производится выгрузка данных.
//  ОбъектXDTO - ЗначениеXDTO; ОбъектXDTO - данные XDTO.
//  ИмяФайла - Строка - имя файла, неизменность данных которого необходимо проверить.
//  УказаниеТипа - Булево - вариант назначения типа элемента данных XDTO.
//
Функция ФайлИзменен(Фабрика, ОбъектXDTO, ИмяФайла, УказаниеТипа = Истина) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла, "UTF-8", Символы.ПС);
	СтрокаДО = СтрЗаменить(ТекстовыйДокумент.ПолучитьТекст(), Символы.ВК + Символы.ПС, Символы.ПС);

	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.УстановитьСтроку("UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, ОбъектXDTO, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	СтрокаПосле = СтрЗаменить(НоваяЗаписьXML.Закрыть(), Символы.ВК + Символы.ПС, Символы.ПС);
	
	Если СтрокаДО <> СтрокаПосле Тогда
		ТекстСообщения = НСтр("ru = 'Файл изменен внешней программой.
									|Необходимо проверить компьютер антивирусной программой.'");
		ПодробноеПредставлениеОшибки = ТекстСообщения + Символы.ПС + НСтр("ru = 'Путь к файлу: %1'");
		ПодробноеПредставлениеОшибки = СтрШаблон(ПодробноеПредставлениеОшибки, ИмяФайла);
		ВидОперации = НСтр("ru = 'Проверка неизменности данных временного файла.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение фабрики XDTO в соответствии с версией схемы асинхронного обмена.
//
// Параметры:
//  ВерсияФормата - Строка - версия схемы.
// 
// Возвращаемое значение:
//  ФабрикаXDTO - фабрика, созданная на основании схемы.
//
Функция ФабрикаAsyncXDTO(ВерсияФормата) Экспорт
	
	ВерсииСхемАсинхронногоОбмена = ВерсииСхемАсинхронногоОбмена();
	ТекущаяСхема = ВерсииСхемАсинхронногоОбмена.Получить(ВерсияФормата);
	
	Если ЗначениеЗаполнено(ТекущаяСхема) Тогда
		ДвоичныеДанныеСхемы = Обработки.ОбменСБанками.ПолучитьМакет(ТекущаяСхема);
		ВремФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ДвоичныеДанныеСхемы.Записать(ВремФайлСхемы);
		Фабрика = СоздатьФабрикуXDTO(ВремФайлСхемы);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайлСхемы);
		Возврат Фабрика;
	КонецЕсли;
	
КонецФункции

// Получение типа XDTO по имени и URI пространства имен.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика типов XDTO.
//  URIПространстваИмен - Строка - URI пространства имен запрашиваемого типа.
//  Имя - Строка - Имя запрашиваемого типа. 
// 
// Возвращаемое значение:
// ТипЗначенияXDTO; ТипОбъектаXDTO; Неопределено - тип XDTO.
//
Функция ТипЗначенияCML(Фабрика, URIПространстваИмен, Имя) Экспорт
	
	Попытка
		ТипЗначения = Фабрика.Тип(URIПространстваИмен, Имя);
	Исключение
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Получает объект типа CML.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика типов XDTO
//  Путь - Строка - путь к объекту
//  URIПространстваИмен - Строка - URI пространства имен запрашиваемого типа.
// 
// Возвращаемое значение:
//  ЗначениеXDTO - Значение простого типа XDTO.
//
Функция ОбъектТипаCML(Фабрика, Путь, URIПространстваИмен) Экспорт
	
	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		ТипОбъекта = ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь);
	Иначе
		ТипОбъекта = Путь;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = Фабрика.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

// Выгружает электронный документ в файл.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика типов XDTO, с помощью которой производится выгрузка.
//  ЭД - ЗначениеXDTO; ОбъектXDTO; Неопределено- Записываемое значение.
//  ИмяФайла - Строка - Имя файла, в который будет записываться текст XML.
//  УказаниеТипа - Булево - Вариант назначения типа элемента данных XDTO, если Истина, то указание типа Явное.
//
Процедура ВыгрузитьЭДВФайл(Фабрика, ЭД, ИмяФайла, УказаниеТипа = Истина) Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

// Заполняет свойство объекта XDTO.
//
// Параметры
//  ОбъектXDTO   - объект заполнения;
//  ИмяСвойства  - свойство объекта;
//  Значение     - устанавливаемое значение;
//  Обязательное - булево - признак обязательности заполнения свойства;
//  ТекстОшибки  - строка - текст ошибки в случае неудачного заполнения.
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЭД

// Возвращает дерево с данными файла.
//
// Параметры:
//  ПолноеИмяФайла - Строка, путь к файлу,
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа,
//  ФайлДопДанных - Строка, путь к файлу с дополнительными данными,
//  ФайлКартинок - Строка,  пусть к файлу - архиву, содержащему картинки.
//
// Возвращаемое значение:
//  Структура - данные дерева
//
Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено) Экспорт
	
	ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
		ДеревоРазбора, "ОбменСБанками");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;

	Результат = ПрочитатьФайлПоСхеме(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД);
	
	Если НЕ Результат Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ОбменСБанками","ТипОбъекта"); // раздел ОбменСБанками
	СтрокаОбъекта = НайденнаяСтрока.Строки[0];
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, СтрокаОбъекта);
	
	
КонецФункции

// Функция формирует документы сообщений обмена
//
// Параметры:
//  МассивОбъектов - массив ссылок на объекты, для которых нужно создать сообщения обмена;
//  ПараметрыОбмена - соответствие, содержащая настройки обмена для объектов.
//
Функция СформироватьСообщенияОбмена(МассивОбъектов, ПараметрыОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена);
	МассивСформированныхСообщений = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		СообщениеОбмена = Неопределено;
		
		СохранитьСообщениеОбмена(СтруктураОбмена.СтруктураЭД, СообщениеОбмена);
		Если (СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
			  ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки
			  ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНочнойВыписки)
			И СтруктураОбмена.СтруктураЭД.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			
			Дайджест = ОбменСБанкамиСлужебныйВызовСервера.Дайджест(
				СтруктураОбмена.СтруктураЭД.АдресФайлаВоВременномХранилище, СтруктураОбмена.СтруктураЭД.НастройкаОбмена);
			АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(Дайджест));
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("Представление", НСтр("ru = 'Схема данных'"));
			ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
			ПараметрыСообщения.Вставить("НастройкаОбмена", СтруктураОбмена.СтруктураЭД.НастройкаОбмена);
			ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
			ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
			ПараметрыСообщения.Вставить("СообщениеРодитель", СообщениеОбмена);
			ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СообщениеДайджест = Неопределено;
			СохранитьСообщениеОбмена(ПараметрыСообщения, СообщениеДайджест);
		КонецЕсли;

		МассивСформированныхСообщений.Добавить(СообщениеОбмена);
		
	КонецЦикла;
	
	Возврат МассивСформированныхСообщений;
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаОбмена, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке.
//
// Параметры:
//  МассивОтпечатков - массив - содержит строки отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками, настройкаОбмена, список сертификатов
//   по которой требуется получить.
//
// Возвращаемое значение - таблица значений.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, НастройкаОбмена = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	ЗапросПоСертификатам = Новый Запрос;
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сертификаты.Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
		|		ПО НастройкиОбменаСертификаты.СертификатЭП = Сертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО НастройкиОбменаСертификаты.Ссылка = НастройкиОбменСБанками.Ссылка
		|ГДЕ
		|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|	И &ПроверкаПользователя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сертификаты.Ссылка,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	Сертификаты.Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
		|		ПО НастройкиОбменаСертификаты.СертификатЭП = Сертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО НастройкиОбменаСертификаты.Ссылка = НастройкиОбменСБанками.Ссылка
		|ГДЕ
		|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
		|	И НастройкиОбменСБанками.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|	И &ПроверкаПользователя";
		ЗапросПоСертификатам.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сертификаты.Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|	И &ПроверкаПользователя";
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя",
			"Сертификаты.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
		ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		ЗапросПоСертификатам.УстановитьПараметр("ПользовательНеУказан",  Пользователи.СсылкаНеуказанногоПользователя());
	КонецЕсли;
	
	ЗапросПоСертификатам.Текст = ТекстЗапроса;
	
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
	ВозвращаемоеЗначение = ЗапросПоСертификатам.Выполнить().Выгрузить();

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - Объект - владелец присоединенного файла.
//  Отказ           - Булево - признак отказа от записи.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ОбменСБанкамиВладелецЭДПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПакетОбменСБанками") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	// ЭД делаем только когда есть действующая настройка обмена
	Если Не Источник.ДополнительныеСвойства.Свойство("ЕстьНастройкаОбмена")
			ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьНастройкаОбмена Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		Если ОпределитьНастройкиОбменаЭД(ПараметрыЭД) = Неопределено Тогда // нет действующей настройки обмена
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьНастройкаОбмена", Истина);
	
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - объект - владелец присоединенного файла,
//  Отказ    - булево - признак отказа от записи.
//
Процедура УстановитьСостояниеПриЗаписиОбъектаИБ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПакетОбменСБанками") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьНастройкаОбмена")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьНастройкаОбмена Тогда
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект") Тогда
		РедактированиеРазрешено = Истина;
		ОбменСБанкамиПереопределяемый.ПроверитьВозможностьРедактированияОбъекта(Источник.Ссылка, РедактированиеРазрешено);
		Если НЕ РедактированиеРазрешено Тогда
			ТекстСообщения = НСтр("ru = 'Существует актуальный электронный документ. Запрещено редактирование ключевых реквизитов документа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника;
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//  настроек обмена ЭД.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ВидЭД = Неопределено) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("СправочникСсылка.НастройкиОбменСБанками")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.НастройкиОбменСБанками") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
		ПараметрыЭД.НастройкаОбмена  = Источник.Ссылка;
		ПараметрыЭД.Банк  = Источник.Банк;
		ПараметрыЭД.Организация = Источник.Организация;
	Иначе
		ПараметрыЭД.ВидЭД = ВидЭД;
		ОбменСБанкамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Получает массив ожидаемых статусов электронного документа.
//
// Параметры:
//  НастройкиОбмена - Структура - параметры обмена. Содержит поля:
//    * Направление - ПеречислениеСсылка.НаправленияЭД - направление электронного документа;
//    * ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа;
//    * ИспользоватьПодпись - Булево - признак использования электронной подписи;
//    * ИспользуетсяНесколькоПодписей - Булево - при подписании используется более одной подписи;
//    * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка;
//    * Статус - ПеречислениеСсылка.СтатусыОбменСБанками - текущий статус электронного документа.
// 
// Возвращаемое значение:
// Массив - перечень ожидаемых статусов электронных документов:
//   * ПеречислениеСсылка.СтатусыОбменСБанками - статус электронного документа.
//
Функция МассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Подписан);
			КонецЕсли;
			Если НастройкиОбмена.ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Отправлен);
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Доставлен);
		Иначе
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				Если НастройкиОбмена.ИспользуетсяНесколькоПодписей
					ИЛИ НастройкиОбмена.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
				КонецЕсли;
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Подписан);
			КонецЕсли;
			Если НастройкиОбмена.ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
			КонецЕсли;
			
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Отправлен);
			
			Если НастройкиОбмена.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.НеПодтвержден);
			КонецЕсли;
			
			Если НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
				ИЛИ НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Принят);
			Иначе
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Доставлен);
			КонецЕсли;
			
			Если НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Принят);
			КонецЕсли;
			
			Если НастройкиОбмена.Статус = Перечисления.СтатусыОбменСБанками.Приостановлен Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Приостановлен);
			КонецЕсли;
			
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Исполнен);
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Подтвержден);
			КонецЕсли;
	
		КонецЕсли;
	Иначе
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Получен);
	КонецЕсли;

	Возврат МассивСтатусов;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбменаСБанками

// Находит существующий или создает новый элемент справочника СертификатыКлючейЭлектроннойПодписиИШифрования.
//
// Параметры:
//  ДанныеСертификата - ДвоичныеДанные, Строка - содержимое сертификата;
//  Организация - СправочникСсылка.Организации - организация;
//  ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка;
//  Параметры - Структура - ДополнительныеДанныеСертификата.
//
// Возвращаемое значение:
//  СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на новый сертификат.
//
Функция НайтиСоздатьСертификатВнешнегоМодуля(ДанныеСертификата, Организация, ПрограммаБанка, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка,
	|	СведенияОСертификатахОбменСБанками.ПрограммаБанка
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСертификатахОбменСБанками КАК СведенияОСертификатахОбменСБанками
	|		ПО СведенияОСертификатахОбменСБанками.СертификатЭП = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
	|ГДЕ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток = &Отпечаток";

	Запрос.УстановитьПараметр("Отпечаток", Параметры.Отпечаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ПрограммаБанка = Выборка.ПрограммаБанка Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	СертификатОписаниеДанных = Новый ТаблицаЗначений;
	СертификатОписаниеДанных.Колонки.Добавить("Свойство");
	СертификатОписаниеДанных.Колонки.Добавить("Значение");
	
	СертификатОбъект = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	СертификатОбъект.ДанныеСертификата = Новый ХранилищеЗначения(ДанныеСертификата);
	СертификатОбъект.Отпечаток = Параметры.Отпечаток;
	СертификатОбъект.Добавил = ПользователиКлиентСервер.ТекущийПользователь();
	
	СертификатОбъект.Организация = Организация;
	ШаблонНаименования = НСтр("ru = '%1, до %2'");
	ДатаСтрокой = Формат(Параметры.ДатаОкончания, "ДФ=MM.yyyy");
	СертификатОбъект.Наименование = СтрШаблон(ШаблонНаименования, Параметры.ВладелецФИО, ДатаСтрокой);
	
	СертификатОбъект.Подписание = Истина;
	
	ОбновитьЗначение(СертификатОбъект.КомуВыдан, Параметры.ВладелецФИО);
	ОбновитьЗначение(СертификатОбъект.ДействителенДо, Параметры.ДатаОкончания);
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Параметры.ВладелецФИО);
	
	ОбновитьЗначение(СертификатОбъект.Фамилия, ФИО.Фамилия, Истина);
	ОбновитьЗначение(СертификатОбъект.Имя, ФИО.Имя, Истина);
	ОбновитьЗначение(СертификатОбъект.Отчество, ФИО.Отчество, Истина);
	ОбновитьЗначение(СертификатОбъект.Должность, Параметры.ВладелецДолжность, Истина);
		
	СертификатОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.СведенияОСертификатахОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СертификатЭП = СертификатОбъект.Ссылка;
	МенеджерЗаписи.ПрограммаБанка = ПрограммаБанка;
	МенеджерЗаписи.Записать();
	
	Возврат СертификатОбъект.Ссылка;
	
КонецФункции

// Запускается по регламентному заданию ЗагрузкаСпискаDirectBank.
// Загружает актуальный список банков в константу.
// Параметры:
//    ЗапускИзРегламентногоЗадания - Булево, если Истина, то вызов процедуры сделан из регламентного задания.
//
Процедура ЗагрузитьСписокDirectBank(ЗапускИзРегламентногоЗадания = Истина) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗапускИзРегламентногоЗадания И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	АдресСервера = "https://directbank.1c.ru/downloads/bankslist.mxl";
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Таймаут", 60);
	
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресСервера, ПараметрыПолучения);
	
	Если Результат.Статус Тогда
		
		Данные = ПолучитьИзВременногоХранилища(Результат.Путь);
		
		// Проверка, что файл корректный.
		ВремФайл = ПолучитьИмяВременногоФайла("mxl");
		Данные.Записать(ВремФайл);
		Макет = Новый ТабличныйДокумент;
		Попытка
			Макет.Прочитать(ВремФайл);
		Исключение
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Чтение файла списка банков, поддерживающих обмен через сервис 1С:ДиректБанк.'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ШаблонОшибки = НСтр("ru = 'Ошибка выполнения операции: %1
							|%2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидОперации, КраткоеПредставлениеОшибки);
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки, 1);
			
			Возврат;
		КонецПопытки;
	
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено Тогда
			ДанныеВнешнихФайлов = Новый Структура;
		КонецЕсли;

		ДанныеВнешнихФайлов.Вставить("СписокБанков", Данные);
	
		ХранилищеДанных = Новый ХранилищеЗначения(ДанныеВнешнихФайлов);
	
		Константы.ОбщиеФайлыОбменСБанками.Установить(ХранилищеДанных);
	
		ОбновитьПовторноИспользуемыеЗначения();
		
	ИначеЕсли ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
		
		ВидОперации = НСтр("ru = 'Загрузка списка банков, поддерживающих обмен DirectBank'");
		ШаблонОшибки = НСтр("ru = 'Выполнение операции: %1
							|%2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидОперации, Результат.СообщениеОбОшибке);
		УровеньВажностиСобытия = УровеньЖурналаРегистрации.Предупреждение;
		Шаблон = НСтр("ru = 'Электронное взаимодействие.Обмен с банками'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Шаблон, УровеньВажностиСобытия, , , ТекстОшибки);

	КонецЕсли;
	
КонецПроцедуры

// Загружает список банков асинхронно. Используется в помощнике подключения.
//
Процедура ЗагрузитьСписокDirectBankАсинхронно() Экспорт
	
	ЗагрузитьСписокDirectBank(Ложь);
	
КонецПроцедуры

// Создает настройку обмена с банком в фоновом процессе.
//
// Параметры:
//  СтруктураПараметров - структура, содержит реквизиты настройки обмена с банком:
//      * Организация - СправочникСсылка.Организации - для какой организации создается настройка обмена;
//      * Банк - ОпределяемыеТипы.СправочникБанки - с каким банком будет производится обмен;
//      * АдресСервера - строка - адрес сервера банка;
//      * АутентификацияПоСертификату - Булево - признак аутентификации на сервере банка по сертификату;
//      * ВнешнийМодуль - Строка - адрес временного хранилища, содержащий данные файла внешнего модуля;
//      * ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//      * ИмяПользователя - Строка - логин пользователя;
//      * ИспользуетсяКриптография - Булево - признак использования электронных подписей;
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - используемая программа;
//      * РесурсВходящихДокументов - Строка - ресурс для получения выписки;
//      * РесурсИсходящихДокументов - Строка - ресурс для отправки платежных документов;
//      * СертификатБанка - Строка - адрес временного хранилища, содержащий данные сертификата банка;
//      * Сертификаты - Массив - клиентские сертификаты;
//         * СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписи;
//  АдресХранилища - строка, содержит адрес хранилища, содержащий ссылку на настройку обмена.
//
Процедура СоздатьНастройкуОбмена(СтруктураПараметров, АдресХранилища) Экспорт
	
	НастройкаОбменаСсылка = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(
		СтруктураПараметров.Организация, СтруктураПараметров.Банк);
		
	Если НЕ ЗначениеЗаполнено(НастройкаОбменаСсылка) Тогда
		НастройкаОбменаОбъект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
	Иначе
		НастройкаОбменаОбъект = НастройкаОбменаСсылка.ПолучитьОбъект();
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, СтруктураПараметров, "Организация, Банк, ИспользуетсяКриптография,
		|ПрограммаБанка, АдресСервера, ИдентификаторОрганизации, ИмяПользователя, АутентификацияПоСертификату,
		|РесурсВходящихДокументов, РесурсИсходящихДокументов, ИмяВнешнегоМодуля, Недействительна, ВерсияВнешнейКомпоненты,
		|ВерсияФормата");
		
	Если СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		ОтпечатокСертификата(СтруктураПараметров.СертификатСбербанка);
		НастройкаОбменаОбъект.СертификатБанка = Новый ХранилищеЗначения(СтруктураПараметров.СертификатСбербанка);
		НастройкаОбменаОбъект.ВнешняяКомпонента = Новый ХранилищеЗначения(СтруктураПараметров.ВКСбербанка);
	ИначеЕсли СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
		И НастройкаОбменаОбъект.АутентификацияПоСертификату Тогда
		НастройкаОбменаОбъект.ИспользуетсяКриптография = Истина;
	КонецЕсли;
	
	НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Очистить();
	
	Для Каждого Сертификат Из СтруктураПараметров.Сертификаты Цикл
		НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
		НовСтрока.СертификатЭП = Сертификат;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СертификатАутентификации)
		И СтруктураПараметров.Сертификаты.Найти(СтруктураПараметров.СертификатАутентификации) = Неопределено Тогда
		НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
		НовСтрока.СертификатЭП = СтруктураПараметров.СертификатАутентификации;
	КонецЕсли;
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
	НастройкаОбменаОбъект.ИсходящиеДокументы.Очистить();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		Если СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
			НоваяСтрока = НастройкаОбменаОбъект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока.ИспользоватьЭП = СтруктураПараметров.ИспользуетсяКриптография;
		ИначеЕсли (СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
				ИЛИ СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку)
			И (ЗначениеПеречисления = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки) Тогда
			НоваяСтрока = НастройкаОбменаОбъект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока.ИспользоватьЭП = Истина;
		КонецЕсли;
	КонецЦикла;
	
	НастройкаОбменаОбъект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
	
	НастройкаОбменаОбъект.ПометкаУдаления = Ложь;
	НастройкаОбменаОбъект.ОбменДанными.Загрузка = Истина;
	
	ШаблонНаименования = "%1 - %2";
	НастройкаОбменаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонНаименования, СтруктураПараметров.Организация, СтруктураПараметров.Банк);
		
	Если НастройкаОбменаОбъект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
		И Не ЗначениеЗаполнено(НастройкаОбменаОбъект.ВерсияФормата) Тогда
		НастройкаОбменаОбъект.ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;

	Попытка
		НастройкаОбменаОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка создания настройки обмена: %1'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Создание настройки обмена'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, НастройкаОбменаСсылка);
		Возврат;
	КонецПопытки;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НастройкаОбмена", НастройкаОбменаОбъект.Ссылка);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
	СохранитьПараметрыОбмена(НастройкаОбменаОбъект.Ссылка);

КонецПроцедуры

// Создает новую настройку прямого обмена с банком.
//
// Параметры:
//    НастройкиЗаполнения - Строка - адрес во временном хранилище, содержащий файл настроек;
//    Организация - ОпределяемыйТип.Организация - ссылка на организацию, для которой загружаются настройки
//    Недействительна - Булево - позволяет отключить настройку в целях дальнейшего тестирования;
//    МассивСертификатов - Массив, Неопределено - если создана настройка обмена через ВК,
//        то в параметре возвращаются данные сертификатов подписи типа ДвоичныеДанные;
//    ЗагружатьВК - Булево - если Истина, что ВК будет загружена с сервера поставщика.
//
Функция СоздатьНастройкуОбменаИзФайла(НастройкиЗаполнения, Организация, Недействительна = Ложь, МассивСертификатов = Неопределено, ЗагружатьВК = Истина) Экспорт
	
	ЭД = XDTOДанныеФайлаНастроек(НастройкиЗаполнения);
	
	Если ЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоНастройкиСбербанка = ЭД.Свойства().Получить("Data") = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеОрганизации = "";
	
	СтруктураПоискаОрганизации = Новый Структура;
	ИННОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.INN, ЭД.Recipient.inn);
	Если ЗначениеЗаполнено(ИННОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("ИНН", ИННОрганизации);
	КонецЕсли;
	
	КППОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.KPP, ЭД.Recipient.kpp);
	Если КППОрганизации = "000000000" Тогда // Для Сбербанка
		КППОрганизации = "0";
	КонецЕсли;
	Если ЗначениеЗаполнено(КППОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("КПП", КППОрганизации);
	КонецЕсли;
	НаименованиеОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.Name, ЭД.Recipient.name);
	Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("Наименование", НаименованиеОрганизации);
	КонецЕсли;
	
	Если СтруктураПоискаОрганизации.Количество() > 0 Тогда
		СсылкаНаОрганизацию = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
			"Организации", , СтруктураПоискаОрганизации);
	ИначеЕсли НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'В файле настроек нет информации об организации.
									|Обратитесь в свой банк.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе
		СсылкаНаОрганизацию = Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена организация по реквизитам: %1%2%3'");
		Если СтруктураПоискаОрганизации.Свойство("ИНН") Тогда
			ТекстИНН = Символы.ПС + НСтр("ru = 'ИНН: %1'");
			ТекстИНН = СтрШаблон(ТекстИНН, СтруктураПоискаОрганизации.ИНН);
		Иначе
			ТекстИНН = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("КПП") Тогда
			ТекстКПП = Символы.ПС + НСтр("ru = 'КПП: %1'");
			ТекстКПП = СтрШаблон(ТекстКПП, СтруктураПоискаОрганизации.КПП);
		Иначе
			ТекстКПП = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("Наименование") Тогда
			ТекстНаименование = Символы.ПС + НСтр("ru = 'Наименование: %1'");
			ТекстНаименование = СтрШаблон(
				ТекстНаименование, СтруктураПоискаОрганизации.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			ТекстСообщения, ТекстИНН, ТекстКПП, ТекстНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	НаименованиеБанка = "";
	СтруктураПоискаБанка = Новый Структура;
	БИК = ?(ЭтоНастройкиСбербанка, ЭД.Bank.BIC, ЭД.Sender.bic);
	СтруктураПоискаБанка.Вставить("Код", БИК);
	НаименованиеБанка = ?(ЭтоНастройкиСбербанка, ЭД.Bank.Name, ЭД.Sender.name);
	СтруктураПоискаБанка.Вставить("Наименование", НаименованиеБанка);
	
	СсылкаНаБанк = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", БИК, СтруктураПоискаБанка);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаБанк) Тогда
		ТекстСообщения = НСтр("ru = 'Не найден банк по реквизитам: %1%2'");
		Если СтруктураПоискаБанка.Свойство("Код") Тогда
			ТекстБИК = Символы.ПС + НСтр("ru = 'БИК: %1'");
			ТекстБИК = СтрШаблон(ТекстБИК, СтруктураПоискаБанка.Код);
		Иначе
			ТекстБИК = "";
		КонецЕсли;
		Если СтруктураПоискаБанка.Свойство("Наименование") Тогда
			ТекстНаименование = Символы.ПС + НСтр("ru = 'Наименование: %1'");
			ТекстНаименование = СтрШаблон(
				ТекстНаименование, СтруктураПоискаБанка.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			ТекстСообщения, ТекстБИК, ТекстНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписыватьОбъект = Истина;
	СуществующаяНастройкаОбмена = ОбменСБанками.НастройкаОбмена(СсылкаНаОрганизацию, СсылкаНаБанк, Ложь);
	Если ЗначениеЗаполнено(СуществующаяНастройкаОбмена) Тогда
		Объект = СуществующаяНастройкаОбмена.ПолучитьОбъект();
	Иначе
		Объект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		НаименованиеОрганизации = СсылкаНаОрганизацию;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеБанка) Тогда
		НаименованиеБанка = СсылкаНаБанк;
	КонецЕсли;
	
	ЗаполненыНаименования = ЗначениеЗаполнено(НаименованиеОрганизации) И ЗначениеЗаполнено(НаименованиеБанка);
	
	Объект.Наименование = Строка(НаименованиеОрганизации) + ?(ЗаполненыНаименования, " - ", "")
		+ Строка(НаименованиеБанка);

	Объект.Организация = СсылкаНаОрганизацию;
	Объект.Банк = СсылкаНаБанк;
	
	Если ЭтоНастройкиСбербанка Тогда
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	ИначеЕсли НЕ ЭД.Data.Свойства().Получить("CryptoParameters") = Неопределено И ЭД.Data.CryptoParameters <> Неопределено
		И НЕ ЭД.Data.CryptoParameters.Свойства().Получить("URLAddinInfo") = Неопределено
		И ЗначениеЗаполнено(ЭД.Data.CryptoParameters.URLAddinInfo) Тогда
		
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
		
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ПараметрыПолучения = Новый Структура;
		ПараметрыПолучения.Вставить("ПутьДляСохранения", ВремФайл);
		
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(
			ЭД.Data.CryptoParameters.URLAddinInfo, ПараметрыПолучения);
		
		Если Результат.Статус Тогда

			ПараметрыВК = ПараметрыВК(ВремФайл);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
			
			Если ПараметрыВК <> Неопределено Тогда
				ДанныеВКИБ = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(ПараметрыВК.ИмяМодуля);
				
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
					Если ДанныеВКИБ <> Неопределено Тогда
						Объект.ИмяВнешнегоМодуля = ПараметрыВК.ИмяМодуля;
					Иначе
						ТекстСообщения = НСтр("ru = 'Запрещено использование неизвестных внешних компонент:
													|Наименование: %1.
													|Модуль: %2.
													|Версия: %3.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, ПараметрыВК.Название, ПараметрыВК.ИмяМодуля, ПараметрыВК.Версия);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Возврат Неопределено;
					КонецЕсли;
				Иначе
					Объект.ИмяВнешнегоМодуля = ПараметрыВК.ИмяМодуля;
					
					Если ДанныеВКИБ <> Неопределено И ПараметрыВК.Версия = ДанныеВКИБ.Версия Тогда
						ЗагружатьВК = Ложь;
					КонецЕсли;
					
					Если ЗагружатьВК Тогда
						Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ПараметрыВК.URLВК);

						Если Результат.Статус Тогда
							ИнформацияОВК = ИнформацияОВКБанка(Результат.Путь);
							СохранитьВКБанка(Результат.Путь, ИнформацияОВК)
						Иначе
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке);
							Возврат Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	КонецЕсли;
	
	Объект.ИдентификаторОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.CustomerID, ЭД.Data.CustomerID);
	
	Объект.АутентификацияПоСертификату = Ложь;
	Объект.ИмяПользователя = "";
	
	Если Не ЭтоНастройкиСбербанка Тогда
		Объект.ВерсияФормата = ЭД.formatVersion;
		Объект.АдресСервера = ЭД.Data.BankServerAddress;
		Если ЭД.formatVersion <> "2.01" Тогда
			Объект.СжиматьДанныеПакетаЭД = ЭД.Data.Compress;
		КонецЕсли;
		Если ЭД.Data.Logon.Login <> Неопределено Тогда
			Объект.ИмяПользователя = ЭД.Data.Logon.Login.User;
		ИначеЕсли ЭД.Data.Logon.Certificate <> Неопределено Тогда
			Объект.АутентификацияПоСертификату = Истина;
		КонецЕсли;
		Объект.ИспользуетсяКриптография = Ложь;
	КонецЕсли;
	
	Объект.СертификатыПодписейОрганизации.Очистить();
	
	Если ЭтоНастройкиСбербанка Тогда
		Объект.ИспользуетсяКриптография = Истина;
		ДанныеСертификатов = Новый Соответствие;
		Для Каждого Сертификат Из ЭД.SignatureParameters.Certificate Цикл
			Отпечаток = ОтпечатокСертификата(Сертификат);
			Если НЕ Отпечаток = Неопределено Тогда
				ДанныеСертификатов.Вставить(Отпечаток, Сертификат);
			КонецЕсли;
		КонецЦикла;
			
		Для Каждого КлючЗначение Из ДанныеСертификатов Цикл
			Сертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
				КлючЗначение.Значение, Объект.Организация);
			Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
				Возврат Неопределено;
			КонецЕсли;
			НовСтрока = Объект.СертификатыПодписейОрганизации.Добавить();
			НовСтрока.СертификатЭП = Сертификат;
			
			МенеджерЗаписи = РегистрыСведений.СведенияОСертификатахОбменСБанками.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СертификатЭП = Сертификат;
			МенеджерЗаписи.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
	Иначе
	
		Если НЕ ЭД.Data.Свойства().Получить("CryptoParameters") = Неопределено
			И ЭД.Data.CryptoParameters <> Неопределено Тогда
			Объект.ИспользуетсяКриптография = Истина;
			Константы.ИспользоватьЭлектронныеПодписи.Установить(Истина);
			
			Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
				ПрограммаКриптографии = НайтиСоздатьПрограммуКриптографии(ЭД.Data.CryptoParameters.CSPName,
					ЭД.Data.CryptoParameters.CSPType, ЭД.Data.CryptoParameters.SignAlgorithm, ЭД.Data.CryptoParameters.HashAlgorithm);
				ДанныеСертификатов = Новый Соответствие;
				Для Каждого ГруппаПодписи Из ЭД.Data.CryptoParameters.CustomerSignature.GroupSignatures Цикл
					Для Каждого Сертификат Из ГруппаПодписи.Certificate Цикл
						Отпечаток = ОтпечатокСертификата(Сертификат);
						Если Отпечаток = Неопределено Тогда
							Возврат Неопределено;
						Иначе
							ДанныеСертификатов.Вставить(Отпечаток, Сертификат);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого КлючЗначение Из ДанныеСертификатов Цикл
					Сертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(КлючЗначение.Значение,
						Объект.Организация, ЭД.Data.CryptoParameters.CSPName);
					Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
						ЕстьОшибка = Истина;
						Возврат Неопределено;
					КонецЕсли;
					НовСтрока = Объект.СертификатыПодписейОрганизации.Добавить();
					НовСтрока.СертификатЭП = Сертификат;
				КонецЦикла;
			Иначе
				
				СертификатБанка = ЭД.Data.CryptoParameters.BankCertificate;
		
				Если ЗначениеЗаполнено(СертификатБанка) Тогда
					Объект.СертификатБанка = Новый ХранилищеЗначения(СертификатБанка);
				КонецЕсли;
				
				МассивСертификатов = Новый Массив;
				Для Каждого ГруппаПодписи Из ЭД.Data.CryptoParameters.CustomerSignature.GroupSignatures Цикл
					Для Каждого Сертификат Из ГруппаПодписи.Certificate Цикл
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ИсходящиеДокументы.Очистить();
	
	Если ЭтоНастройкиСбербанка Тогда
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросНочнойВыписки);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
		Для Каждого ВидЭД Из МассивВидовЭД Цикл
			НовЗапись = Объект.ИсходящиеДокументы.Добавить();
			НовЗапись.ИсходящийДокумент = ВидЭД;
			НовЗапись.ИспользоватьЭП = Истина;
			НовЗапись.Формировать = Истина;
		КонецЦикла;
		
		СертификатБанка = ЭД.SignatureParameters.BankCertificate;
		
		ОтпечатокСертификата(СертификатБанка);
		
		Если ЗначениеЗаполнено(СертификатБанка) Тогда
			Объект.СертификатБанка = Новый ХранилищеЗначения(СертификатБанка);
		КонецЕсли;
		
		ВнешняяКомпонента = ЭД.SignatureParameters.AddIn.__content;
		Если ЗначениеЗаполнено(ВнешняяКомпонента) Тогда
			Если ВРег(Сред(ВнешняяКомпонента, 1, 4)) = "HTTP" Тогда // указан адрес для скачивания компоненты
				Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ВнешняяКомпонента);
				Если Не Результат.Статус Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке);
					Возврат Неопределено;
				КонецЕсли;
				ДанныеВнешнейКомпоненты = ПолучитьИзВременногоХранилища(Результат.Путь);
			Иначе // компонента внутри файла
				ДанныеВнешнейКомпоненты = Base64Значение(ВнешняяКомпонента);
			КонецЕсли;
			
			АдресВК = ПоместитьВоВременноеХранилище(ДанныеВнешнейКомпоненты);
			ИнформацияОВКБанка = ОбменСБанкамиСлужебныйВызовСервера.ИнформацияОВКБанка(АдресВК);
			
			Если НЕ ОбменСБанкамиКлиентСервер.ПоддерживаетсяВерсияКомпонентыСбербанк(ИнформацияОВКБанка.Версия) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Объект.ВнешняяКомпонента = Новый ХранилищеЗначения(ДанныеВнешнейКомпоненты);
			Объект.ВерсияВнешнейКомпоненты = ИнформацияОВКБанка.Версия;
			Объект.ИмяВнешнегоМодуля = ИнформацияОВКБанка.Название;
			
		КонецЕсли;
		Метка = ЭД.Label;
	Иначе
		
		Для Каждого Документ Из ЭД.Data.Document Цикл
			ТекущийВидЭД = ВидЭД(Документ.docKind);
			Если ЗначениеЗаполнено(ТекущийВидЭД) Тогда
				НовЗапись = Объект.ИсходящиеДокументы.Добавить();
				НовЗапись.ИсходящийДокумент = ТекущийВидЭД;
				НовЗапись.ИспользоватьЭП = Документ.Signed <> Неопределено;
				НовЗапись.Формировать = Истина;
			КонецЕсли;
			Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
		КонецЦикла;
		
		// Принудительное добавление документа Запрос-зонд
		Если Объект.ИсходящиеДокументы.Найти(Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд, "ИсходящийДокумент") = Неопределено Тогда
			НовЗапись = Объект.ИсходящиеДокументы.Добавить();
			НовЗапись.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд;
			НовЗапись.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
			НовЗапись.Формировать = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Объект.ПометкаУдаления = Ложь;
	Объект.Недействительна = Недействительна;
	
	Если ЗаписыватьОбъект Тогда
		Попытка
			Объект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при создании настройки обмена с сервисом 1С:ДиректБанк.'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Создание настройки обмена с сервисом 1С:ДиректБанк.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			Возврат Неопределено;
		КонецПопытки
	КонецЕсли;
	
	СохранитьПараметрыОбмена(Объект.Ссылка, Метка);
	
	Возврат Объект.Ссылка;

КонецФункции

// Получает объект XDTO на основании xml файла.
//
// Параметры:
//  АдресФайла - Строка - адрес временного хранилища с двоичными данными файла.
// 
// Возвращаемое значение:
// ОбъектXDTO - данные из файла.
//
Функция XDTOДанныеФайлаНастроек(АдресФайла) Экспорт
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл, , , "UTF-8");
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		ЕстьСвойствоData = ЭД.Свойства().Получить("Data") <> Неопределено;
		Если ЕстьСвойствоData Тогда
			Фабрика = ФабрикаAsyncXDTO(ЭД.formatVersion);
	
			Если Фабрика = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Неизвестная версия формата файла.'");
			КонецЕсли;
		
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ПространствоИменАсинхрОбмена = ПространствоИменАсинхронногоОбмена(ЭД.formatVersion);
			Settings = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "Settings");
			ЭД = Фабрика.ПрочитатьXML(ОбъектXML, Settings);
		Иначе
			УдалитьПространствоИмен(ВремФайл, "http://bssys.com/upg/settings");
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ПостроительDOM = Новый ПостроительDOM();
			ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
			ОбъектXML.Закрыть();
			СоответствиеПространствИмен = ДокументDOM.ЭлементДокумента.ПолучитьСоответствияПространствИмен();
			Если СоответствиеПространствИмен.Получить("xmlns") <> "http://1c-sbrf.ru/XMLSchema" Тогда
				ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", "http://1c-sbrf.ru/XMLSchema");
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.ОткрытьФайл(ВремФайл);
				ЗаписьDOM = Новый ЗаписьDOM;
				ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
				ЗаписьXML.Закрыть();
			КонецЕсли;
			ОбъектXML.ОткрытьФайл(ВремФайл);
			SettingsSBRF = ТипЗначенияCML(ФабрикаXDTO, "http://1c-sbrf.ru/XMLSchema", "Settings");
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, SettingsSBRF);
		КонецЕсли;
		ЭД.Проверить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении настроек.'");
		ВидОперации = НСтр("ru = 'Чтение настроек обмена с сервисом 1С:ДиректБанк из файла.'");
		ТекстОшибки = НСтр("ru = 'При загрузке настроек обмена с сервисом 1С:ДиректБанк произошла ошибка.
								|Путь к файлу: %1
								|Информация об ошибке: %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВремФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 1);
		ОбъектXML.Закрыть();
		Возврат Неопределено;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат ЭД;
	
КонецФункции

// Функция определяет настройки обмена ЭД по источнику - документу базы данных или по ЭД.
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(Источник, ВыводитьСообщения, МассивОтпечатковСертификатов, СообщениеОбмена = Неопределено, ВидЭД = Неопределено, ФлагДействующиеНастройкиОбмена = Истина) Экспорт
	
	ДействующиеПараметрыОбмена = ДействующиеПараметрыОбмена(Источник, СообщениеОбмена);
	
	Если ВыводитьСообщения И ДействующиеПараметрыОбмена.НастройкаОбменаДействует
		И НЕ ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
		ТекстСообщения = НСтр("ru = 'Данный вид электронного документа банк не принимает.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ДействующиеПараметрыОбмена.ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ДействующиеПараметрыОбмена.ПараметрыЭД, МассивОтпечатковСертификатов, ФлагДействующиеНастройкиОбмена);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ДействующиеПараметрыОбмена.ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			СообщитьОбОтсутствииНастройкиОбмена(ДействующиеПараметрыОбмена.ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет настройки обмена с банком.
//
// СсылкаНаВладельца - ДокументСсылка - ссылка на документ информационной базы;
// СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками, Неопределено - ссылка на сообщение обмена;
//
// Возвращаемое значение:
// СтруктураНастроекОбмена - Структура:
//    * НастройкаОбменаДействует - Булево - найдена действующая настройка обмена;
//    * ВидЭДПоддерживаетсяБанком - Булево - данный вид документа на поддерживается банка;
//    * НастройкаОбмена - СправочникСсылка.НастройкаОбменаСБанком - найденная настройка обмена;
//    * ПараметрыЭД - Структура - дополнительные настройки.
//
Функция ДействующиеПараметрыОбмена(СсылкаНаВладельца, СообщениеОбмена = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НастройкаОбменаДействует", Истина);
	СтруктураВозврата.Вставить("ВидЭДПоддерживаетсяБанком", Истина);
	СтруктураВозврата.Вставить("ПараметрыЭД");
	СтруктураВозврата.Вставить("НастройкаОбмена");
	
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		
		РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "ВидЭД, НастройкаОбмена");
		СтруктураВозврата.ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца, РеквизитыСообщения.ВидЭД);
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата.ПараметрыЭД, РеквизитыСообщения);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток
		|ИЗ
		|	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи
		|ГДЕ
		|	СообщениеОбменСБанкамиПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВладелецФайла = &ВладелецФайла";
		Запрос.УстановитьПараметр("ВладелецФайла", СообщениеОбмена);
		Отпечатки = Запрос.Выполнить().Выгрузить();
		
		СтруктураВозврата.ПараметрыЭД.Вставить("УстановленныеПодписи", Отпечатки.ВыгрузитьКолонку("Отпечаток"));
	Иначе
		СтруктураВозврата.ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураВозврата.ПараметрыЭД.ВидЭД) Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СсылкаНаВладельца);
		СоответствиеВладельцевИСообщенийОбмена = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбменаПоВладельцам(
			МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			СсылкаНаСообщениеОбмена = СоответствиеВладельцевИСообщенийОбмена.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаСообщениеОбмена) Тогда
				СтруктураВозврата.ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СсылкаНаСообщениеОбмена, "ВидЭД");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанками.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.Организация = &Организация
	|	И НастройкиОбменСБанками.Банк = &Банк
	|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанками.Недействительна";
	Запрос.УстановитьПараметр("Организация", СтруктураВозврата.ПараметрыЭД.Организация);
	Запрос.УстановитьПараметр("Банк", СтруктураВозврата.ПараметрыЭД.Банк);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Не Результат.Следующий() Тогда
		СтруктураВозврата.НастройкаОбменаДействует = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.НастройкаОбмена = Результат.Ссылка;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &Ссылка
	|	И НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	Запрос.УстановитьПараметр("Ссылка", СтруктураВозврата.НастройкаОбмена);
	Запрос.УстановитьПараметр("ИсходящийДокумент", СтруктураВозврата.ПараметрыЭД.ВидЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураВозврата.ВидЭДПоддерживаетсяБанком = Ложь;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьШтампыБанка(ВыпискаБанка)

	ДвоичныеДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ВыпискаБанка);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеЭД.Записать(ИмяФайла);
	СтруктураРазбораФайла = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ИмяФайла);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
	
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ДатаСписано = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ДатаСписано");
		ШтампБанкаСтатус = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ШтампБанкаСтатус");
		ИдПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ИдПлатежа");
		Если ЗначениеЗаполнено(ДатаСписано) И ЗначениеЗаполнено(ШтампБанкаСтатус) И ЗначениеЗаполнено(ИдПлатежа) Тогда
			ПлатежныйДокумент = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", ИдПлатежа);
			Если ЗначениеЗаполнено(ПлатежныйДокумент) Тогда
				ШтампБанкаНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ШтампБанкаНаименование");
				ШтампБанкаОтделение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ШтампБанкаОтделение");
				ШтампБанкаБИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ШтампБанкаБИК");
				ДанныеШтампа = Новый Структура();
				ДанныеШтампа.Вставить("НаименованиеБанка", ШтампБанкаНаименование);
				ДанныеШтампа.Вставить("Отделение", ШтампБанкаОтделение);
				ДанныеШтампа.Вставить("БИК", ШтампБанкаБИК);
				ДанныеШтампа.Вставить("Статус", ШтампБанкаСтатус);
				ДанныеШтампа.Вставить("ДатаОперации", ДатаСписано);
				Штамп = Новый Структура("ДанныеШтампа", ДанныеШтампа);
				СтруктураИзменения = Новый Структура("ДополнительныеДанные", Штамп);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ПлатежныйДокумент, СтруктураИзменения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

// Удаляет пространство имен из файла.
//
// Параметры:
//   ИмяФайла - Строка - путь к файлу на диске;
//   ПространствоИмен - Строка - удаляемое пространство имен.
//
Процедура УдалитьПространствоИмен(ИмяФайла, ПространствоИмен)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаФайл = Текст.ПолучитьСтроку(2);
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """", "");
	Текст.ЗаменитьСтроку(2, СтрокаФайл);
	ТекстДокумента = Текст.ПолучитьТекст();
	
	Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Текст.Записать(ТекстДокумента);
	Текст.Закрыть();
	
КонецПроцедуры

Функция ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь)
	
	МассивПути = ЭлектронноеВзаимодействиеСлужебный.МассивПодстрок(Путь, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = Фабрика.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = Фабрика.Тип(URIПространстваИмен, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ОтпечатокСертификата(ДанныеСертификата)

	Попытка
		ТекСертификат = Новый СертификатКриптографии(ДанныеСертификата);
	Исключение
		ВремФайлСертификата = ПолучитьИмяВременногоФайла();
		Попытка
			ДанныеСертификата.Записать(ВремФайлСертификата);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайлСертификата);
			СтрокаBase64 = ТекстовыйДокумент.ПолучитьТекст();
			СтрокаBase64 = СтрЗаменить(СтрокаBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
			СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС + "-----END CERTIFICATE-----","");
			ДанныеСертификата = Base64Значение(СтрокаBase64);
			Если ДанныеСертификата = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Некорректное содержимое сертификата криптографии.'");
			КонецЕсли;
			ТекСертификат = Новый СертификатКриптографии(ДанныеСертификата);
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении данных сертификата из файла.'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Чтение настроек ЭДО из файла.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			Возврат Неопределено;
		КонецПопытки;
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайлСертификата);
		
	КонецПопытки;
		
	Возврат ТекСертификат.Отпечаток;
	
КонецФункции

Процедура ОбновитьЗначение(СтароеЗначение, НовоеЗначение, ПропускатьНеопределенныеЗначения = Ложь)
	
	Если НовоеЗначение = Неопределено И ПропускатьНеопределенныеЗначения Тогда
		Возврат;
	КонецЕсли;
	
	Если СтароеЗначение <> НовоеЗначение Тогда
		СтароеЗначение = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьПрограммуКриптографии(НазваниеПрограммы, ТипПрограммы, АлгоритмПодписи, АлгоритмХеширования)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрограммыЭлектроннойПодписиИШифрования.Ссылка,
	|	ПрограммыЭлектроннойПодписиИШифрования.АлгоритмПодписи,
	|	ПрограммыЭлектроннойПодписиИШифрования.АлгоритмХеширования
	|ИЗ
	|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
	|ГДЕ
	|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы = &ИмяПрограммы
	|	И ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы = &ТипПрограммы
	|	И НЕ ПрограммыЭлектроннойПодписиИШифрования.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИмяПрограммы", НазваниеПрограммы);
	Запрос.УстановитьПараметр("ТипПрограммы", ТипПрограммы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.АлгоритмПодписи = АлгоритмПодписи И Выборка.АлгоритмХеширования = АлгоритмХеширования Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		Программа = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Программа = Справочники.ПрограммыЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	КонецЕсли;
	
	Программа.АлгоритмПодписи = АлгоритмПодписи;
	Программа.АлгоритмХеширования = АлгоритмХеширования;
	Программа.ИмяПрограммы = НазваниеПрограммы;
	Программа.Наименование = НазваниеПрограммы;
	Программа.ТипПрограммы = ТипПрограммы;
	
	Программа.Записать();
	
	Возврат Программа.Ссылка;
	
КонецФункции

Функция ВидЭД(КодЭД)
	
	Если КодЭД = "10" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
	ИначеЕсли КодЭД = "11" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование;
	ИначеЕсли КодЭД = "14" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	ИначеЕсли КодЭД = "05" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд;
	ИначеЕсли КодЭД = "04" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД;
	ИначеЕсли КодЭД = "03" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД;
	ИначеЕсли КодЭД = "19" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту;
	ИначеЕсли КодЭД = "21" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников;
	ИначеЕсли КодЭД = "23" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников;
	КонецЕсли;
	
КонецФункции

Функция ВерсииСхемАсинхронногоОбмена()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить("2.01", "Схема201");
	СоответствиеВозврата.Вставить("2.02", "Схема202");
	СоответствиеВозврата.Вставить("2.03", "Схема203");
	СоответствиеВозврата.Вставить("2.1.1", "Схема211");
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено, ФлагДействующиеНастройкиОбмена = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	ВидЭД = "";
	Банк = "";
	Если СтруктураПараметров.Свойство("ВидЭД", ВидЭД) И СтруктураПараметров.Свойство("Банк", Банк)
		И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Банк) Тогда
		
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
		Запрос.УстановитьПараметр("Банк", Банк);
		Запрос.УстановитьПараметр("ТолькоДействующиеНастройкиОбмена",  ФлагДействующиеНастройкиОбмена);
		
		НастройкаОбмена = "";
		Организация = "";
		Если СтруктураПараметров.Свойство("НастройкаОбмена", НастройкаОбмена) И ЗначениеЗаполнено(НастройкаОбмена) Тогда
			Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
			ПолучитьТекстЗапросаПараметровОбменаПоНастройкеОбмена(Запрос.Текст);
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			ПолучитьТекстЗапросаПараметровОбмена(Запрос.Текст);
		КонецЕсли;
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(	Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
			Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ТЗ = РезультатЗапроса[2].Выгрузить();
			ТЗСертификатовНеобходимыхПодписей = РезультатЗапроса[3].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				ДоступныеСертификаты = Новый Массив;
				НайденПодходящийСертификат = Ложь;
				
				Если МассивОтпечатковСертификатов <> Неопределено Тогда
					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							ПараметрыОтбора = Новый Структура(
								"НастройкаОбмена, Отпечаток", СтрокаТЗ.НастройкаОбмена, СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток);
							МассивСтрок = ТЗСертификатовНеобходимыхПодписей.НайтиСтроки(ПараметрыОтбора);
							Для Каждого Элемент Из МассивСтрок Цикл
								Если (МассивОтпечатковСертификатов.Найти(Элемент.Отпечаток) <> Неопределено
									ИЛИ ТекущаяНастройка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
									ИЛИ ТекущаяНастройка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК)
									И СтруктураПараметров.УстановленныеПодписи.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) = Неопределено Тогда 
									
									Если Не НайденПодходящийСертификат Тогда
										ТекущаяНастройка = СтрокаТЗ;
										НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
										НайденПодходящийСертификат = Истина;
									КонецЕсли;
									ДоступныеСертификаты.Добавить(СтрокаТЗ.СертификатОрганизацииДляПодписи);
									
								КонецЕсли
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				НастройкиОбменаЭД.Вставить("ДоступныеСертификаты", ДоступныеСертификаты);
				
				Если НастройкиОбменаЭД.Свойство("Подписывать") Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет настройки обмена.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "")
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

Функция СформироватьПлатежноеТребованиеAsync(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ВерсияФормата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияФормата");
	
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	Фабрика = ФабрикаAsyncXDTO(ВерсияФормата);
	
	ТекстОшибки = "";
	Попытка
		
		ЭД = ОбъектТипаCML(Фабрика, "PayRequest", ПространствоИмен);
		
		ИдДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(ЭД, "id", ИдДокумента, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		userAgent = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ЗаполнитьСвойствоXDTO(ЭД, "userAgent", userAgent, , ТекстОшибки);
		
		Отправитель = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ИдКлиента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдКлиента");
		ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдКлиента, Истина, ТекстОшибки);
		ПолучательНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Наименование");
		ЗаполнитьСвойствоXDTO(Отправитель, "name", ПолучательНаименование, Истина, ТекстОшибки);
		ПолучательИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
		ЗаполнитьСвойствоXDTO(Отправитель, "inn", ПолучательИНН, , ТекстОшибки);
		ПолучательКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
		ЗаполнитьСвойствоXDTO(Отправитель, "kpp", ПолучательКПП, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Банк = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ПолучательБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
		ЗаполнитьСвойствоXDTO(Банк, "bic", ПолучательБИКБанка, Истина, ТекстОшибки);
		ПолучательНаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(Банк, "name", ПолучательНаименованиеБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Банк, Истина, ТекстОшибки);
		
		ДанныеПлатежа = ОбъектТипаCML(Фабрика, "PayRequest.Data", ПространствоИмен);
		
		Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocNo", Номер, Истина, ТекстОшибки);
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocDate", Дата, Истина, ТекстОшибки);
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Sum", Сумма, Истина, ТекстОшибки);
		
		РеквизитыПлательщика = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
		ПлательщикНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Наименование");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Name", ПлательщикНаименование, Истина, ТекстОшибки);
		ПлательщикИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "INN", ПлательщикИНН, , ТекстОшибки);
		ПлательщикКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.КПП");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "KPP", ПлательщикКПП, , ТекстОшибки);
		ПлательщикРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Account", ПлательщикРасчСчет, Истина, ТекстОшибки);
		
		БанкПлательщика = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
		ПлательщикБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "BIC", ПлательщикБИКБанка, Истина, ТекстОшибки);
		ПлательщикНаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "Name", ПлательщикНаименованиеБанка, , ТекстОшибки);
		ПлательщикГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "City", ПлательщикГородБанка, , ТекстОшибки);
		ПлательщикКоррСчетБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "CorrespAcc", ПлательщикКоррСчетБанка, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Bank", БанкПлательщика, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payer", РеквизитыПлательщика, Истина, ТекстОшибки);
		
		РеквизитыПолучателя = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Name", ПолучательНаименование, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "INN", ПолучательИНН, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "KPP", ПолучательКПП, , ТекстОшибки);
		ПолучательРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
			
		Если ЗначениеЗаполнено(ПолучательРасчСчет) И СтрДлина(СокрЛП(ПолучательРасчСчет)) <> 20 Тогда
			ТекстОшибки = НСтр("ru = 'Некорректный номер счета получателя %1
								|Длина номера счета должна состоять из 20 цифр.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПолучательРасчСчет);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Account", ПолучательРасчСчет, Истина, ТекстОшибки);
		
		БанкПолучателя = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "BIC", ПолучательБИКБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "Name", ПолучательНаименованиеБанка, , ТекстОшибки);
		ПолучательГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "City", ПолучательГородБанка, , ТекстОшибки);
		ПолучательКоррСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "CorrespAcc", ПолучательКоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Bank", БанкПолучателя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payee", РеквизитыПолучателя, Истина, ТекстОшибки);
		
		ВидПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "PaymentKind", ВидПлатежа, , ТекстОшибки);
		ВидОплаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидОплаты");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "TransitionKind", ВидОплаты, , ТекстОшибки);
		Очередность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Очередность");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Priority", Очередность, , ТекстОшибки);
		НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Purpose", НазначениеПлатежа, Истина, ТекстОшибки);
		
		УсловиеОплаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловиеОплаты");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "PaymentCondition", УсловиеОплаты, Истина, ТекстОшибки);
		СрокАкцепта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокАкцепта");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "AcceptTerm", СрокАкцепта, , ТекстОшибки);
		ДатаОтсылкиДокументов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтсылкиДокументов");
		Если ЗначениеЗаполнено(ДатаОтсылкиДокументов) Тогда
			ДатаСтрокой = Формат(ДатаОтсылкиДокументов, "ДФ=dd.MM.yyyy");
			ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocDispatchDate", ДатаСтрокой, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеПлатежа, Истина, ТекстОшибки);
		
		ЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ПолноеИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла");
			ВыгрузитьЭДВФайл(Фабрика, ЭД, ПолноеИмяФайла, Ложь);
			ФайлСформирован = Истина;
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			Если ФайлИзменен(Фабрика, ЭД, ПолноеИмяФайла, Ложь) Тогда
				Возврат Ложь;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
		КонецЕсли;
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, СсылкаНаДокумент);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция СформироватьПлатежноеПоручение(СсылкаНаОбъект, НастройкиОбменаЭД)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПечатныйНомерДокумента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	
	Макет = Обработки.ОбменСБанками.ПолучитьМакет("ПлатежноеПоручение");
	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	ОбменСБанкамиПереопределяемый.ЗаполнитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда

		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПредставлениеДокумента = ПредставлениеЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, ПечатныйНомерДокумента);
			
		ИмяФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ПредставлениеДокумента);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "");
		
		ПолноеИмяФайла = АдресКаталога + ИмяФайла + ".xml";
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", ПолноеИмяФайла);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
		
		ПрограммаБанка = НастройкиОбменаЭД.ПрограммаБанка;
		
		АдресФайлаВоВременномХранилище = Неопределено;
		
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			ЭДСформирован = СформироватьПлатежноеПоручениеСбербанк(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
		ИначеЕсли ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
			ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			ЭДСформирован = СформироватьПлатежноеПоручениеAsync(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
		Иначе
			ЭДСформирован = СформироватьПлатежноеПоручениеCML(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
		КонецЕсли;
		
		Если ЭДСформирован Тогда
			СуммаДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма");
			СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
			СтруктураЭД.Вставить("Основной", Истина);
			НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа");
			СтруктураЭД.Вставить("ДополнительнаяИнформация", НазначениеПлатежа);
			СтруктураЭД.Вставить("Представление", ПредставлениеДокумента);
			СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения, , 1, СсылкаНаОбъект);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьПлатежноеТребование(СсылкаНаОбъект, НастройкиОбменаЭД)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	ПечатныйНомерДокумента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	Макет = Обработки.ОбменСБанками.ПолучитьМакет("ПлатежноеТребование");
	ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	ОбменСБанкамиПереопределяемый.ЗаполнитьДанныеПоПлатежномуТребованию(
		СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда

		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
			
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
			
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
		
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПредставлениеДокумента = ПредставлениеЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, ПечатныйНомерДокумента);
		
		ИмяФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ПредставлениеДокумента);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "");
		
		ПолноеИмяФайла = АдресКаталога + ИмяФайла + ".xml";
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", ПолноеИмяФайла);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(
			ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
		
		ПрограммаБанка = НастройкиОбменаЭД.ПрограммаБанка;
		
		АдресФайлаВоВременномХранилище = Неопределено;
		ЭДСформирован = СформироватьПлатежноеТребованиеAsync(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
		
		Если ЭДСформирован Тогда
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма"));
			НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа");
			СтруктураЭД.Вставить("ДополнительнаяИнформация", НазначениеПлатежа);
			СтруктураЭД.Вставить("Основной", Истина);
			СтруктураЭД.Вставить("Представление", ПредставлениеДокумента);
			СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
			СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтрШаблон(
			ШаблонСообщения, СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Операция = НСтр("ru = 'Формирование ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения, , 1, СсылкаНаОбъект);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьДанныеИзОтветаБанка(ОтветБанка)
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ОтветБанка.Записать(ВремФайл);
	СодержимоеФайла = Новый Соответствие;
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВремФайл);
		
	URI = "urn:x-obml:1.0";
	Попытка
		Message = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "CMSDETACHED"));
		СодержимоеФайла.Вставить("Данные", Message.data.__content);
		Подписи = Новый Массив;
		Для Каждого Подпись Из Message.signature Цикл
			Подписи.Добавить(Подпись);
		КонецЦикла;
		СодержимоеФайла.Вставить("Подписи", Подписи);
	Исключение
		СодержимоеФайла.Вставить("Данные", ОтветБанка);
	КонецПопытки;
	Чтение.Закрыть();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Возврат СодержимоеФайла;

КонецФункции

Функция ПрочитатьФайлПоСхеме(ИмяФайла, ДеревоРазбора, НовыйЭД, ПоказыватьОшибки = Ложь)
	
	ОбъектXML = Новый ЧтениеXML;
	Ошибка = Ложь;
	НеизвестныйЭД = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		Если ОбъектXML.Прочитать() Тогда
			ИмяКорневогоЭлемента = ВРег(ОбъектXML.Имя);
		КонецЕсли;
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ВРег(ЭД.Тип().Имя) = ВРег("anyType") Тогда // не указан тип элемента в явном виде
			ОбъектXML.ОткрытьФайл(ИмяФайла);
			Если ЭД.Свойства().Получить("СекцияРасчСчет") <> Неопределено Тогда
				ClientBankExchange = ТипЗначенияCML(ФабрикаXDTO, "urn:1C.ru:ClientBankExchange", "ClientBankExchange");
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ClientBankExchange);
				ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			Иначе // читаем файл по типу, имя которого совпадает с типом объекта XDTO
				
				Если ЭД.Свойства().Получить("formatVersion") = Неопределено Тогда
					НеизвестныйЭД = Истина;
				Иначе
					ПространствоИменАсинхрОбмена = ПространствоИменАсинхронногоОбмена(ЭД.formatVersion);
					Фабрика = ФабрикаAsyncXDTO(ЭД.formatVersion);
					Если Фабрика = Неопределено Тогда
						НеизвестныйЭД = Истина;
					Иначе
						Если ИмяКорневогоЭлемента = ВРег("PayDocRu") Тогда // платежное поручение рублевое
							PayDocRu = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "PayDocRu");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, PayDocRu);
							ПрочитатьПлатежноеПоручениеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("PayRequest") Тогда // платежное требование рублевое
							PayRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "PayRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, PayRequest);
							ПрочитатьПлатежноеТребованиеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("Statement") Тогда // выписка
							Statement = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "Statement");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, Statement);
							ПрочитатьВыпискуAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("StatementRequest") Тогда // запрос на выписку
							StatementRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "StatementRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, StatementRequest);
							ПрочитатьЗапросВыпискиAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("StatusDocNotice") Тогда // извещение о состоянии ЭД
							StatusDocNotice = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "StatusDocNotice");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, StatusDocNotice);
							ПрочитатьИзвещениеОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("StatusRequest") Тогда // запрос о состоянии ЭД
							StatusRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "StatusRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, StatusRequest);
							ПрочитатьЗапросОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("Probe") Тогда // запрос - зонд
							Probe = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "Probe");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, Probe);
							ПрочитатьЗапросЗондAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("CancelationRequest") Тогда // запрос на отзыв ЭД
							ТипCancelationRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "CancelationRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, ТипCancelationRequest);
							ПрочитатьЗапросНаОтзывAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						Иначе
							НеизвестныйЭД = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе // тип указан в явном виде
			Если ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO, "urn:1C.ru:ClientBankExchange", "ClientBankExchange") Тогда
				Если ЭД.СекцияПлатежногоДокумента.Количество() = 1 И ЭД.СекцияРасчСчет = Неопределено Тогда
					ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				Иначе
					ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				КонецЕсли;
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/response", "StatementType") Тогда
				ПрочитатьВыпискуСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "PayDocRu") Тогда
				ПрочитатьПлатежноеПоручениеСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "StmtReqType") Тогда
				ПрочитатьЗапросВыпискиСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO, "http://bssys.com/upg/response", "Ticket") Тогда
				ПрочитатьКвитанциюСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			Иначе
				НеизвестныйЭД = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НеизвестныйЭД Тогда
			Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1.'"), ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Ошибка = Истина;
		КонецЕсли;
	Исключение
		Ошибка = Истина;
		ТекстСообщения = Неопределено;
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) ИЛИ ПоказыватьОшибки Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Чтение ЭД.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат НЕ Ошибка;
	
КонецФункции

Процедура ПрочитатьКвитанциюСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТикетСББОЛ", ЭД.docId);
	Если ЗначениеЗаполнено(ЭД.createTime) Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ДатаСозданияКвитка", Сред(ЭД.createTime, 1, 19));
	КонецЕсли;
	Если НЕ ЭД.Свойства().Получить("Info") = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "КодСостоянияДокумента", ЭД.Info.statusStateCode);
		Если НЕ ЭД.Info.Свойства().Получить("orgId") = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОрганизации", ЭД.Info.orgId);
		КонецЕсли;
		Если НЕ ЭД.Info.Свойства().Получить("docExtId") = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Info.docExtId);
		КонецЕсли;
		Если НЕ ЭД.Info.BankDate = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ДатаСписанияСоСчетаПлательщика", ЭД.Info.BankDate.chargeOffDate);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ДатаПостановкиВКартотеку", ЭД.Info.BankDate.fileDate);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ДатаОтметкиБанкомПлательщика", ЭД.Info.BankDate.signDate);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ДатаПоступленияВБанкПлательщика", ЭД.Info.BankDate.receiptDate);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ДатаПеречисленияПлатежа", ЭД.Info.BankDate.dpp);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ДатаОтметкиБанкомПолучателя", ЭД.Info.BankDate.recDate);
		КонецЕсли;
		Если НЕ ЭД.Info.MsgFromBank = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "АвторСообщения", ЭД.Info.MsgFromBank.author);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "СообщениеИзБанка", ЭД.Info.MsgFromBank.message);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияЗапроса", ЭД.createTime);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.beginDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца", ЭД.endDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипЗапроса", ЭД.stmtType);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлатежноеНаименованиеОрганизации", ЭД.orgName);
	Для Каждого Элемент Из ЭД.Accounts.Account Цикл
		РеквизитыСчета = Новый СписокЗначений;
		РеквизитыСчета.Добавить(Элемент.bic,       "БИК");
		РеквизитыСчета.Добавить(Элемент.__content, "НомерСчета");
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
		НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
		НовыйЭД.ОписаниеТипа = "Сбербанк";
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Код", ЭД.AccDoc.uip);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.AccDoc.AccDocNo);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.AccDoc.docDate);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа", ЭД.AccDoc.paytKind);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияДокумента", ЭД.AccDoc.docDate);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОперации", ЭД.AccDoc.TransKind);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ДополнительнаяУслуга", ЭД.AccDoc.urgentSBRF);
		
		Если НЕ ЭД.Credit = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ЦелевоеПоручение", ЭД.Credit.flagTargetAssignment);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ИспользоватьСобственныеСредства", ЭД.Credit.flagUseOwnMeans);
			Если НЕ ЭД.Credit.Свойства().Получить("CredConNum") = Неопределено Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
					НовыйЭД, "НомерКредитногоДоговора", ЭД.Credit.CredConNum);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЭД.AccDoc.Свойства().Получить("CodeVO") = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "КодВидаВалютнойОперации", ЭД.AccDoc.CodeVO);
		КонецЕсли;
		
		Если НЕ ЭД.DepartmentalInfo = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежиВБюджет", Истина);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "СтатусСоставителя", ЭД.DepartmentalInfo.drawerStatus);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательКБК", ЭД.DepartmentalInfo.cbc);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКТМО", ЭД.DepartmentalInfo.okato);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ПоказательОснования", ЭД.DepartmentalInfo.paytReason);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ПоказательПериода", ЭД.DepartmentalInfo.taxPeriod);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ПоказательНомера", ЭД.DepartmentalInfo.docNo);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ПоказательДаты", ЭД.DepartmentalInfo.docDate);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ПоказательТипа", ЭД.DepartmentalInfo.taxPaytKind);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН", ЭД.Payer.inn);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП", ЭД.Payer.kpp);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.AccDoc.docSum);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", ЭД.Payer.Name);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", ЭД.Payer.PersonalAcc);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикНаименованиеБанка", ЭД.Payer.Bank.Name);
		НаселенныйПунктБанкаПлательщика = "";
		Если НЕ ЭД.Payer.Bank.Свойства().Получить("BankCity")=Неопределено Тогда
			НаселенныйПунктБанкаПлательщика = ЭД.Payer.Bank.BankCity;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "НаселенныйПунктБанкаПлательщика", НаселенныйПунктБанкаПлательщика);
		КонецЕсли;
		ТипНаселенногоПунктаБанкаПлательщика = "";
		Если НЕ ЭД.Payer.Bank.Свойства().Получить("SettlementType")=Неопределено Тогда
			ТипНаселенногоПунктаБанкаПлательщика = ЭД.Payer.Bank.SettlementType;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ТипНаселенногоПунктаБанкаПлательщика", ТипНаселенногоПунктаБанкаПлательщика);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикГородБанка", ТипНаселенногоПунктаБанкаПлательщика + " " + НаселенныйПунктБанкаПлательщика);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИКБанка", ЭД.Payer.Bank.bic);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикКоррСчетБанка", ЭД.Payer.Bank.correspAcc);
		Если НЕ ЭД.Payer.Свойства().Получить("Filial") = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФилиалБанкаПлательщика", ЭД.Payer.Filial);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательНаименованиеБанка", ЭД.Payee.Bank.Name);
		НаселенныйПунктБанкаПолучателя = "";
		Если НЕ ЭД.Payee.Bank.Свойства().Получить("BankCity") = Неопределено Тогда
			НаселенныйПунктБанкаПолучателя = ЭД.Payee.Bank.BankCity;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "НаселенныйПунктБанкаПолучателя", НаселенныйПунктБанкаПолучателя);
		КонецЕсли;
		ТипНаселенногоПунктаБанкаПолучателя = "";
		Если НЕ ЭД.Payee.Bank.Свойства().Получить("SettlementType") = Неопределено Тогда
			ТипНаселенногоПунктаБанкаПолучателя = ЭД.Payee.Bank.SettlementType;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
				НовыйЭД, "ТипНаселенногоПунктаБанкаПолучателя", ТипНаселенногоПунктаБанкаПолучателя);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательГородБанка", ТипНаселенногоПунктаБанкаПолучателя + " " + НаселенныйПунктБанкаПолучателя);
			
		Если НЕ ЭД.Payee.Свойства().Получить("Filial") = Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФилиалБанкаПолучателя", ЭД.Payee.Filial);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИКБанка", ЭД.Payee.Bank.bic);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательКоррСчетБанка", ЭД.Payee.Bank.correspAcc);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН", ЭД.Payee.inn);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП", ЭД.Payee.kpp);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", ЭД.Payee.PersonalAcc);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", ЭД.Payee.Name);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность", ЭД.AccDoc.priority);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", ЭД.AccDoc.purpose);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
		
КонецПроцедуры

Процедура ПрочитатьВыпискуСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель", ЭД.bic);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель", ЭД.orgName);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОрганизации", ЭД.orgName);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоставленияВыписки", ЭД.stmtDateTime);
	ДатаФормирования = Дата(Сред(ЭД.stmtDateTime, 1, 4)+ Сред(ЭД.stmtDateTime, 6, 2) + Сред(ЭД.stmtDateTime, 9, 2)
		+ Сред(ЭД.stmtDateTime, 12, 2) + Сред(ЭД.stmtDateTime, 15, 2) + Сред(ЭД.stmtDateTime, 18, 2));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ДатаФормирования);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.bic);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоследнейОперации", ЭД.lastMovetDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "РасчСчет", ЭД.Acc);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачальныйОстаток", ЭД.enterBal);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонечныйОстаток", ЭД.outBal);
	ДатаНачала = Дата(СтрЗаменить(Сред(ЭД.beginDate, 1, 10), "-", ""));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ДатаНачала);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачалаСтрокой", ЭД.beginDate);
	ДатаКонца = Дата(СтрЗаменить(Сред(ЭД.endDate, 1, 10), "-", ""));
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца", ДатаКонца);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонцаСтрокой", ЭД.endDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоСписано", ЭД.debetSum);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоПоступило", ЭД.creditSum);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПредыдущейОперации", ЭД.DatePLast);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КурсНаНачалоПериода", ЭД.rateIn);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КурсНаКонецПериода", ЭД.rateOut);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ВходящийОстатокВНациональнойВалюте", ЭД.enterBalNat);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИсходящийОстатокВНациональнойВалюте", ЭД.outBalNat);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлановыйИсходящийОстаток", ЭД.planOutBal);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлановыйИсходящийОстатокВНациональнойВалюте", ЭД.planOutBalNat);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипЗапросаВыписки", ЭД.stmtType);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.docNum);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УчетнаяЗапись", ЭД.accountName);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДебетВНациональнойВалюте", ЭД.debetSumNat);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "КредитВНациональнойВалюте", ЭД.creditSumNat);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Исполнитель", ЭД.author);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДопИнформация", ЭД.docComment);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docId);
	
	СписокТЧ = Новый СписокЗначений;
	ПараметрыСчета = Новый Структура;
	ПараметрыСчета.Вставить("РасчСчет", ЭД.Acc);
	ПараметрыСчета.Вставить("НачальныйОстаток", ЭД.enterBal);
	ПараметрыСчета.Вставить("ВсегоПоступило",   ЭД.creditSum);
	ПараметрыСчета.Вставить("ВсегоСписано",     ЭД.debetSum);
	ПараметрыСчета.Вставить("КонечныйОстаток",  ЭД.outBal);
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
		ДеревоРазбора, "БанковскийСчет");
	РасчетныйСчет = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"БанковскиеСчетаОрганизаций", ЭД.Acc);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
		НайденныйТипВДереве, ЭД.Acc, , РасчетныйСчет, ПараметрыСчета, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "БанковскийСчет");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "БанковскиеСчетаОрганизаций", СписокТЧ);
	
	Если НЕ ЭД.Docs = Неопределено Тогда
		Для Каждого Документ Из ЭД.Docs.TransInfo Цикл
			РеквизитыДокумента = Новый СписокЗначений;
			РеквизитыДокумента.Добавить(Документ.chargeOffDate, "ДатаСписания");
			РеквизитыДокумента.Добавить(Документ.dpp, "ДатаПеречисления");
			РеквизитыДокумента.Добавить(Документ.fileDate, "ДатаПостановкиВКартотеку");
			РеквизитыДокумента.Добавить(Документ.recDate, "ДатаОтметкиБанкаПолучателя");
			РеквизитыДокумента.Добавить(Документ.receiptDate, "ДатаПоступленияВБанкПлательщика");
			РеквизитыДокумента.Добавить(Документ.signDate, "ДатаОтметкиБанкомПлательщика");
			РеквизитыДокумента.Добавить(Документ.bankNumDoc, "НомерДокументаБанка");
			РеквизитыДокумента.Добавить(Документ.branchCode, "КодПодразделения");
			ДатаПроводки = Дата(СтрЗаменить(Сред(Документ.carryDate, 1, 10), "-", ""));
			Если Документ.dc Тогда
				РеквизитыДокумента.Добавить(ДатаПроводки, "ДатаСписано");
			Иначе
				РеквизитыДокумента.Добавить(ДатаПроводки, "ДатаПоступило");
			КонецЕсли;
			РеквизитыДокумента.Добавить(Документ.carryDate, "ДатаПроводки");
			РеквизитыДокумента.Добавить(Документ.dc, "ПризнакПриложения");
			РеквизитыДокумента.Добавить(Документ.dc, "ПлатежИсходящий");
			РеквизитыДокумента.Добавить(Документ.docCurr, "ВалютаПлатежа");
			ДатаДокумента = Дата(СтрЗаменить(Сред(Документ.docDate, 1, 10), "-", ""));
			РеквизитыДокумента.Добавить(ДатаДокумента, "Дата");
			РеквизитыДокумента.Добавить(Документ.docNum, "Номер");
			РеквизитыДокумента.Добавить(Документ.docSum, "Сумма");
			РеквизитыДокумента.Добавить(Документ.docSumNat, "СуммаДокументаВНациональнойВалюте");
			РеквизитыДокумента.Добавить(Документ.paymentOrder, "Очередность");
			РеквизитыДокумента.Добавить(Документ.paytKind, "ВидПлатежа");
			РеквизитыДокумента.Добавить(Документ.purpose, "НазначениеПлатежа");
			РеквизитыДокумента.Добавить(Документ.transKind, "ВидОплаты");
			РеквизитыДокумента.Добавить(Документ.urgentSBRF, "ДопУслуга");
			РеквизитыДокумента.Добавить(Документ.docId, "ИдентификаторДокумента");
			РеквизитыДокумента.Добавить(Документ.docId, "ИдПлатежа");
			РеквизитыДокумента.Добавить(Документ.payeeName, "ПолучательНаименование");
			РеквизитыДокумента.Добавить(Документ.payeeAcc, "ПолучательСчет");
			РеквизитыДокумента.Добавить(Документ.payeeINN, "ПолучательИНН");
			РеквизитыДокумента.Добавить(Документ.payeeBankBic, "ПолучательБИКБанка");
			РеквизитыДокумента.Добавить(Документ.payeeBankCorrAcc, "СчетБанкаПолучателя");
			РеквизитыДокумента.Добавить(Документ.payeeBankName, "ПолучательНаименованиеБанка");
			РеквизитыДокумента.Добавить(Документ.payerName, "ПлательщикНаименование");
			РеквизитыДокумента.Добавить(Документ.payerAcc, "ПлательщикСчет");
			РеквизитыДокумента.Добавить(Документ.payerINN, "ПлательщикИНН");
			РеквизитыДокумента.Добавить(Документ.payerBankBic, "ПлательщикБИКБанка");
			РеквизитыДокумента.Добавить(Документ.payerBankCorrAcc, "СчетБанкаПлательщика");
			РеквизитыДокумента.Добавить(Документ.payerBankName, "ПлательщикНаименованиеБанка");
			РеквизитыДокумента.Добавить(Документ.s_TI, "Переоценка");
			РеквизитыДокумента.Добавить(Документ.Info, "ДополнительнаяИнформация");

			Если Не Документ.DepartmentalInfo = Неопределено Тогда
				РеквизитыДокумента.Добавить(Истина, "ЭтоПлатежВБюджет");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.cbc, "ПоказательКБК");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.docDate, "ПоказательДаты");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.docNo, "ПоказательНомера");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.drawerStatus, "СтатусСоставителя");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.kpp102, "ПлательщикКПП");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.kpp103, "ПолучательКПП");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.okato, "КодОКАТО");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.paytReason, "ПоказательОснования");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.taxPaytKind, "ПоказательТип");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.taxPeriod, "ПоказательПериода");
			Иначе
				РеквизитыДокумента.Добавить(Ложь, "ЭтоПлатежВБюджет");
			КонецЕсли;
			Если Не Документ.DiffDoc = Неопределено Тогда
				РеквизитыДокумента.Добавить(Истина, "ЭтоКартотека");
				Если НЕ Документ.DiffDoc.docDateCard = Неопределено Тогда
					ДатаОтсылкиДок = Дата(СтрЗаменить(Сред(Документ.DiffDoc.docDateCard, 1, 10), "-", ""));
					РеквизитыДокумента.Добавить(ДатаОтсылкиДок, "ДатаОтсылкиДок");
				КонецЕсли;
				РеквизитыДокумента.Добавить(Документ.DiffDoc.docNumberCard, "НомерДокументаКартотека");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.docShifr, "ШифрДокументаКартотека");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditAcceptDate, "СрокАкцепта");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditAddCond, "ДополнУсловия");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditDemandDocs, "ПлатежПоПредст");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditPayAcc, "НомерСчетаПоставщика");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditPaymCond, "Условие1");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditPeriodVal, "СрокПлатежа");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditType, "ВидАккредитива");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.NumPaymentCard, "НомерПлатежа");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.OperContent, "СодержаниеОперации");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.PayingCondition, "УсловиеОплаты");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.SumRestCard, "СуммаОстаткаПлатежа");
			Иначе
				РеквизитыДокумента.Добавить(Ложь, "ЭтоКартотека");
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыДокумента);
		КонецЦикла
	КонецЕсли;
	
	Если НЕ ЭД.InfoForStamp = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазваниеБанка", ЭД.InfoForStamp.BankName);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отделение", ЭД.InfoForStamp.BranchName);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Офис", ЭД.InfoForStamp.SubBranchName);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Филиал", ЭД.InfoForStamp.SubBranchNum);
	КонецЕсли;
		
КонецПроцедуры

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
			// Проверим, что Описания совпадают по одной ссылке
			Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
				// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
				Ошибка = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>.'"), СсылкаНаОбъект,
					НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			Если СтрокаТипаВДереве.ТипОбъекта <> "Штамп" И СтрокаТипаВДереве.ТипОбъекта <> "БанковскийСчет" Тогда
				НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
					СтрокаТипаВДереве.ТипОбъекта);
			КонецЕсли;
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ЭД.Отправитель);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ЭД.Получатель);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания",  ЭД.ДатаСоздания);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяСоздания", ЭД.ВремяСоздания);
	Если НЕ ЭД.СекцияРасчСчет = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.СекцияРасчСчет.ДатаНачала);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЭД.СекцияРасчСчет.ДатаКонца);
		Если ЭД.СекцияРасчСчет.РасчСчета.Количество()>0 Тогда
			
			Для Каждого РеквизитыРасчСчета Из ЭД.СекцияРасчСчет.РасчСчета Цикл
				СписокТЧ = Новый СписокЗначений;
				ПараметрыСчета = Новый Структура;
				ПараметрыСчета.Вставить("РасчСчет",         РеквизитыРасчСчета.РасчСчет);
				ПараметрыСчета.Вставить("НачальныйОстаток", РеквизитыРасчСчета.НачальныйОстаток);
				ПараметрыСчета.Вставить("ВсегоПоступило",   РеквизитыРасчСчета.ВсегоПоступило);
				ПараметрыСчета.Вставить("ВсегоСписано",     РеквизитыРасчСчета.ВсегоСписано);
				ПараметрыСчета.Вставить("КонечныйОстаток",  РеквизитыРасчСчета.КонечныйОстаток);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
					ДеревоРазбора, "БанковскийСчет");
				РасчетныйСчет = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
					"БанковскиеСчетаОрганизаций", РеквизитыРасчСчета.РасчСчет);
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
					НайденныйТипВДереве, РеквизитыРасчСчета.РасчСчет, , РасчетныйСчет, ПараметрыСчета, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "БанковскийСчет");
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "БанковскиеСчетаОрганизаций", СписокТЧ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭД.УсловияОтбора = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.УсловияОтбора.ДатаНачала);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЭД.УсловияОтбора.ДатаКонца);
	КонецЕсли;
	
	Для Каждого ЭлементПлатежа Из ЭД.СекцияПлатежногоДокумента Цикл
		РеквизитыПлатежа = Новый СписокЗначений;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.СекцияДокумент, "СекцияДокумент");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Номер, "Номер");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Дата,  "Дата");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Сумма, "Сумма");
		Если НЕ ЭлементПлатежа.Квитанция = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияДата,       "КвитанцияДата");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияВремя,      "КвитанцияВремя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияСодержание, "КвитанцияСодержание");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикСчет, "ПлательщикСчет");
		Если НЕ ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.__content, "ДатаСписано");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.ИдПлатежа, "ИдПлатежа");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1) Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1, "ПлательщикНаименование");
		Иначе
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик, "ПлательщикНаименование");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикРасчСчет, "ПлательщикРасчСчет");
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1) Тогда
			РеквизитыПлатежа.Добавить(Истина, "НепрямыеРасчетыУПлательщика");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1, "ПлательщикНаименованиеНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик2, "ПлательщикСчетНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(
				ЭлементПлатежа.РеквизитыПлательщика.Плательщик3, "ПлательщикНаименованиеБанкаНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик4, "ПлательщикГородБанкаНепрямыеРасчеты");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "НепрямыеРасчетыУПлательщика");
		КонецЕсли;
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикИНН, "ПлательщикИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКПП, "ПлательщикКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк1, "ПлательщикНаименованиеБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк2, "ПлательщикГородБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБИК, "ПлательщикБИКБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКорсчет, "ПлательщикКорСчетБанка");
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательСчет, "ПолучательСчет");
		
		
		Если НЕ ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило.__content, "ДатаПоступило");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПолучателя.Получатель1) Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель1, "ПолучательНаименование");
		Иначе
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель, "ПолучательНаименование");
		КонецЕсли;

		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательРасчСчет, "ПолучательРасчСчет");
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПолучателя.Получатель1) Тогда
			РеквизитыПлатежа.Добавить(Истина, "НепрямыеРасчетыУПолучателя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель1, "ПолучательНаименованиеНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель2, "ПолучательСчетНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(
				ЭлементПлатежа.РеквизитыПолучателя.Получатель3, "ПолучательНаименованиеБанкаНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель4, "ПолучательГородБанкаНепрямыеРасчеты");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "НепрямыеРасчетыУПолучателя");
		КонецЕсли;
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательИНН, "ПолучательИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКПП, "ПолучательКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк1, "ПолучательНаименованиеБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк2, "ПолучательГородБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБИК, "ПолучательБИКБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКорсчет, "ПолучательКорСчетБанка");
		
		Если НЕ ЭлементПлатежа.РеквизитыПлатежа = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидПлатежа,         "ВидПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидОплаты,          "ВидОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.Очередность,        "Очередность");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.Код,                "Код");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа,  "НазначениеПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа1, "НазначениеПлатежа1");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа2, "НазначениеПлатежа2");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа3, "НазначениеПлатежа3");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа4, "НазначениеПлатежа4");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа5, "НазначениеПлатежа5");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа6, "НазначениеПлатежа6");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ПлатежиВБюджет = Неопределено Тогда
			РеквизитыПлатежа.Добавить(Истина, "ЭтоПлатежВБюджет");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.СтатусСоставителя,   "СтатусСоставителя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательКБК,       "ПоказательКБК");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ОКАТО,               "ОКТМО");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательОснования, "ПоказательОснования");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательПериода,   "ПоказательПериода");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательНомера,    "ПоказательНомера");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательДаты,      "ПоказательДаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательТипа,      "ПоказательТипа");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "ЭтоПлатежВБюджет");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ДополнительныеРеквизиты = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокАкцепта,          "СрокАкцепта");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ВидАккредитива,       "ВидАккредитива");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокПлатежа,          "СрокПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.УсловиеОплаты,        "УсловиеОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ПлатежПоПредст,       "ПлатежПоПредст");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДополнУсловия,        "ДополнУсловия");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.НомерСчетаПоставщика, "НомерСчетаПоставщика");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДатаОтсылкиДок,       "ДатаОтсылкиДок");
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыПлатежа);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	
	ЗапросВыписки = ЭД.УсловияОтбора;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаНачала", ЗапросВыписки.ДатаНачала);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаКонца", ЗапросВыписки.ДатаКонца);
	Для Каждого Элемент Из ЗапросВыписки.РасчСчет Цикл
		РеквизитыСчета = Новый СписокЗначений;
		РеквизитыСчета.Добавить(Элемент, "НомерСчета");
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
	
	ПлатежныйДокумент = ЭД.СекцияПлатежногоДокумента[0];
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ПлатежныйДокумент.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ПлатежныйДокумент.Дата);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "СекцияДокумент", ПлатежныйДокумент.СекцияДокумент);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ПлатежныйДокумент.Сумма);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ПлатежныйДокумент.Сумма);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", ПлатежныйДокумент.ИдДокумента);
	Если Не ПлатежныйДокумент.ПлатежиВБюджет = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж",  Истина);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "СтатусСоставителя", ПлатежныйДокумент.ПлатежиВБюджет.СтатусСоставителя);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательКБК", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательКБК);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ОКТМО", ПлатежныйДокумент.ПлатежиВБюджет.ОКАТО);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательОснования", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательОснования);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательПериода", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательПериода);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательНомера", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательНомера);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательДаты", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательДаты);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательТипа", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательТипа);
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж",  Ложь);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ВидОплаты", ПлатежныйДокумент.РеквизитыПлатежа.ВидОплаты);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ВидПлатежа", ПлатежныйДокумент.РеквизитыПлатежа.ВидПлатежа);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "Код", ПлатежныйДокумент.РеквизитыПлатежа.Код);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НазначениеПлатежа", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НазначениеПлатежа1", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа1);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НазначениеПлатежа2", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа2);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НазначениеПлатежа3", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа3);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НазначениеПлатежа4", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа4);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НазначениеПлатежа5", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа5);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НазначениеПлатежа6", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа6);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "Очередность", ПлатежныйДокумент.РеквизитыПлатежа.Очередность);
	РеквизитыПлательщика = ПлатежныйДокумент.РеквизитыПлательщика;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаСписано", РеквизитыПлательщика.ДатаСписано);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикНаименование", РеквизитыПлательщика.Плательщик1);
	Если Не ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПлательщика.Плательщик1) Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикНаименование", РеквизитыПлательщика.Плательщик);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикБИКБанка", РеквизитыПлательщика.ПлательщикБИК);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикНаименованиеБанка", РеквизитыПлательщика.ПлательщикБанк1);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикГородБанка", РеквизитыПлательщика.ПлательщикБанк2);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикГородБанкаДляРасчетов", РеквизитыПлательщика.Плательщик4);
	Если ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПлательщика.Плательщик3) Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПлательщика", Истина);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикКоррСчетБанка", РеквизитыПлательщика.Плательщик2);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикКоррСчетБанкаДляРасчетов", РеквизитыПлательщика.ПлательщикКорсчет);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикНаименованиеБанкаДляРасчетов", РеквизитыПлательщика.Плательщик3);
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПлательщика", Ложь);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикКоррСчетБанка", РеквизитыПлательщика.ПлательщикРасчСчет);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикИНН", РеквизитыПлательщика.ПлательщикИНН);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикКПП", РеквизитыПлательщика.ПлательщикКПП);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикКорсчет", РеквизитыПлательщика.ПлательщикКорсчет);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикРасчСчет", РеквизитыПлательщика.ПлательщикСчет);
	
	РеквизитыПолучателя = ПлатежныйДокумент.РеквизитыПолучателя;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаПоступило", РеквизитыПолучателя.ДатаПоступило);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательНаименование", РеквизитыПолучателя.Получатель1);
	Если Не ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПолучателя.Получатель1) Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательНаименование", РеквизитыПолучателя.Получатель);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательБИКБанка", РеквизитыПолучателя.ПолучательБИК);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательНаименованиеБанка", РеквизитыПолучателя.ПолучательБанк1);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательГородБанка", РеквизитыПолучателя.ПолучательБанк2);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательГородБанкаДляРасчетов", РеквизитыПолучателя.Получатель4);
	Если ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПолучателя.Получатель3) Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "НепрямыеРасчетыУПолучателя", Истина);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательКоррСчетБанка", РеквизитыПолучателя.Получатель2);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательНаименованиеБанкаДляРасчетов", РеквизитыПолучателя.Получатель3);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательКоррСчетБанкаДляРасчетов", РеквизитыПолучателя.ПолучательКорсчет);
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПолучателя", Ложь);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательКоррСчетБанка", РеквизитыПолучателя.ПолучательРасчСчет);
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательИНН", РеквизитыПолучателя.ПолучательИНН);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательКПП", РеквизитыПолучателя.ПолучательКПП);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательКорсчет", РеквизитыПолучателя.ПолучательКорсчет);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательРасчСчет", РеквизитыПолучателя.ПолучательСчет);

КонецПроцедуры

Процедура ПрочитатьВыпискуAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка;
	Stmt = ЭД;
	StmtData = Stmt.Data;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель", Stmt.Sender.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель", Stmt.Recipient.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", Stmt.creationDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", StmtData.DateFrom);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца", StmtData.DateTo);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипВыписки", StmtData.StatementType);
	
	СписокТЧ = Новый СписокЗначений;
	ПараметрыСчета = Новый Структура;
	ПараметрыСчета.Вставить("РасчСчет", StmtData.Account);
	ПараметрыСчета.Вставить("НачальныйОстаток", StmtData.OpeningBalance);
	ПараметрыСчета.Вставить("ВсегоПоступило", StmtData.TotalCredits);
	ПараметрыСчета.Вставить("ВсегоСписано", StmtData.TotalDebits);
	ПараметрыСчета.Вставить("КонечныйОстаток", StmtData.ClosingBalance);
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
		ДеревоРазбора, "БанковскийСчет");
	РасчетныйСчет = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"БанковскиеСчетаОрганизаций", ПараметрыСчета.РасчСчет);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
		НайденныйТипВДереве, ПараметрыСчета.РасчСчет, , РасчетныйСчет, ПараметрыСчета, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "БанковскийСчет");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "БанковскиеСчетаОрганизаций", СписокТЧ);
	
	Если НЕ StmtData.Stamp = Неопределено Тогда
		ПараметрыШтампа = Новый Структура;
		ПараметрыШтампа.Вставить("БИК", StmtData.Stamp.BIC);
		ПараметрыШтампа.Вставить("НазваниеБанка", StmtData.Stamp.Name);
		ПараметрыШтампа.Вставить("ГородБанка", StmtData.Stamp.City);
		ПараметрыШтампа.Вставить("КоррСчетБанка", StmtData.Stamp.CorrespAcc);
		ПараметрыШтампа.Вставить("ОтделениеБанка",  StmtData.Stamp.Branch);
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
			ДеревоРазбора, "Штамп");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
			НайденныйТипВДереве, "Штамп", , , ПараметрыШтампа, ДеревоРазбора, Ошибка);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Штамп", НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	Для Каждого Operation Из StmtData.OperationInfo Цикл
		
		РеквизитыПлатежа = Новый СписокЗначений;
		
		Если Operation.DC = "1" Тогда // списание с лиц.счета
			РеквизитыПлатежа.Добавить(Operation.ExtID, "ИдПлатежа");
			РеквизитыПлатежа.Добавить(Operation.Date, "ДатаСписано");
			РеквизитыПлатежа.Добавить(Истина, "ПлатежИсходящий");
		ИначеЕсли Operation.DC = "2" Тогда // поступление на лиц.счет
			РеквизитыПлатежа.Добавить(Operation.Date, "ДатаПоступило");
			РеквизитыПлатежа.Добавить(Ложь, "ПлатежИсходящий");
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЭтоПлатежныйОрдер = Ложь;
		ЭтоМемориальныйОрдер = Ложь;
		ЭтоПлатежноеПоручение = Ложь;
		ЭтоИнкассовоеПоручение = Ложь;
		ЭтоПлатежноеТребование = Ложь;
		ЭтоБанковскийДокумент = Ложь;
		
		Если Operation.PayDoc.PayDocRu <> Неопределено Тогда
			PayData = Operation.PayDoc.PayDocRu;
			РеквизитыПлатежа.Добавить("Платежное поручение", "СекцияДокумент");
			ЭтоПлатежноеПоручение = Истина;
		ИначеЕсли Operation.PayDoc.Свойства().Получить("PayRequest") <> Неопределено
			И Operation.PayDoc.PayRequest <> Неопределено Тогда
			PayData = Operation.PayDoc.PayRequest;
			РеквизитыПлатежа.Добавить("Платежное требование", "СекцияДокумент");
			ЭтоПлатежноеТребование = Истина;
		ИначеЕсли Operation.PayDoc.Свойства().Получить("CollectionOrder") <> Неопределено
			И Operation.PayDoc.CollectionOrder <> Неопределено Тогда
			PayData = Operation.PayDoc.CollectionOrder;
			РеквизитыПлатежа.Добавить("Инкассовое поручение", "СекцияДокумент");
			ЭтоИнкассовоеПоручение = Истина;
		ИначеЕсли Operation.PayDoc.Свойства().Получить("PaymentOrder") <> Неопределено
			И Operation.PayDoc.PaymentOrder <> Неопределено Тогда
			PayData = Operation.PayDoc.PaymentOrder;
			РеквизитыПлатежа.Добавить("Платежный ордер", "СекцияДокумент");
			ЭтоПлатежныйОрдер = Истина;
		ИначеЕсли Operation.PayDoc.Свойства().Получить("BankOrder") <> Неопределено
			И Operation.PayDoc.BankOrder <> Неопределено Тогда
			PayData = Operation.PayDoc.BankOrder;
			РеквизитыПлатежа.Добавить("Банковский ордер", "СекцияДокумент");
		ИначеЕсли Operation.PayDoc.Свойства().Получить("MemOrder") <> Неопределено
			И Operation.PayDoc.MemOrder <> Неопределено Тогда
			PayData = Operation.PayDoc.MemOrder;
			РеквизитыПлатежа.Добавить("Мемориальный ордер", "СекцияДокумент");
			ЭтоМемориальныйОрдер = Истина;
		ИначеЕсли Operation.PayDoc.Свойства().Получить("InnerDoc") <> Неопределено
			И Operation.PayDoc.InnerDoc <> Неопределено Тогда
			PayData = Operation.PayDoc.InnerDoc;
			РеквизитыПлатежа.Добавить(PayData.InnerDocKind, "СекцияДокумент");
			ЭтоБанковскийДокумент = Истина;
		ИначеЕсли Operation.PayDoc.Свойства().Получить("CashContribution") <> Неопределено
			И Operation.PayDoc.CashContribution <> Неопределено Тогда
			PayData = Operation.PayDoc.CashContribution;
			РеквизитыПлатежа.Добавить("Объявление на взнос наличными", "СекцияДокумент");
			ЭтоБанковскийДокумент = Истина;
		ИначеЕсли Operation.PayDoc.Свойства().Получить("Check") <> Неопределено
			И Operation.PayDoc.Check <> Неопределено Тогда
			PayData = Operation.PayDoc.Check;
			РеквизитыПлатежа.Добавить("Чек", "СекцияДокумент");
			ЭтоБанковскийДокумент = Истина;
		КонецЕсли;
			
		РеквизитыПлатежа.Добавить(PayData.DocNo, "Номер");
		РеквизитыПлатежа.Добавить(PayData.DocDate, "Дата");
		РеквизитыПлатежа.Добавить(PayData.Sum, "Сумма");
		
		Если НЕ ЭтоМемориальныйОрдер Тогда
			Payer = PayData.Payer;
			РеквизитыПлатежа.Добавить(Payer.Name, "ПлательщикНаименование");
			РеквизитыПлатежа.Добавить(Payer.INN, "ПлательщикИНН");
			РеквизитыПлатежа.Добавить(Payer.KPP, "ПлательщикКПП");
			РеквизитыПлатежа.Добавить(Payer.Account, "ПлательщикСчет");
			РеквизитыПлатежа.Добавить(Payer.Bank.BIC, "ПлательщикБИКБанка");
			РеквизитыПлатежа.Добавить(Payer.Bank.Name, "ПлательщикНаименованиеБанка");
			РеквизитыПлатежа.Добавить(Payer.Bank.City, "ПлательщикГородБанка");
			РеквизитыПлатежа.Добавить(Payer.Bank.CorrespAcc, "ПлательщикКоррСчетБанка");
			
			Payee = PayData.Payee;
			РеквизитыПлатежа.Добавить(Payee.Name, "ПолучательНаименование");
			РеквизитыПлатежа.Добавить(Payee.INN, "ПолучательИНН");
			РеквизитыПлатежа.Добавить(Payee.KPP, "ПолучательКПП");
			РеквизитыПлатежа.Добавить(Payee.Account, "ПолучательСчет");
			РеквизитыПлатежа.Добавить(Payee.Bank.BIC, "ПолучательБИКБанка");
			РеквизитыПлатежа.Добавить(Payee.Bank.Name, "ПолучательНаименованиеБанка");
			РеквизитыПлатежа.Добавить(Payee.Bank.City, "ПолучательГородБанка");
			РеквизитыПлатежа.Добавить(Payee.Bank.CorrespAcc, "ПолучательКоррСчетБанка");
			
			Если Не ЭтоБанковскийДокумент Тогда
				РеквизитыПлатежа.Добавить(PayData.PaymentKind, "ВидПлатежа");
				РеквизитыПлатежа.Добавить(PayData.Priority, "Очередность");
			КонецЕсли;
			
			РеквизитыПлатежа.Добавить(PayData.TransitionKind, "ВидОплаты");
			РеквизитыПлатежа.Добавить(PayData.Code, "Код");
			РеквизитыПлатежа.Добавить(PayData.Purpose, "НазначениеПлатежа");
			КоличествоСтрокНП = Мин(СтрЧислоСтрок(PayData.Purpose), 6);
			Для Сч = 1 По КоличествоСтрокНП Цикл
				РеквизитыПлатежа.Добавить(СтрПолучитьСтроку(PayData.Purpose, Сч), "НазначениеПлатежа" + Сч);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоПлатежноеПоручение ИЛИ ЭтоИнкассовоеПоручение ИЛИ ЭтоПлатежныйОрдер Тогда
			Если НЕ PayData.BudgetPaymentInfo = Неопределено Тогда
				PayDataBudget = PayData.BudgetPaymentInfo;
				РеквизитыПлатежа.Добавить(Истина, "ЭтоПлатежВБюджет");
				РеквизитыПлатежа.Добавить(PayDataBudget.DrawerStatus, "СтатусСоставителя");
				РеквизитыПлатежа.Добавить(PayDataBudget.CBC, "ПоказательКБК");
				РеквизитыПлатежа.Добавить(PayDataBudget.OKTMO, "ОКТМО");
				РеквизитыПлатежа.Добавить(PayDataBudget.Reason, "ПоказательОснования");
				РеквизитыПлатежа.Добавить(PayDataBudget.TaxPeriod, "ПоказательПериода");
				РеквизитыПлатежа.Добавить(PayDataBudget.DocNo, "ПоказательНомера");
				РеквизитыПлатежа.Добавить(PayDataBudget.DocDate, "ПоказательДаты");
				РеквизитыПлатежа.Добавить(PayDataBudget.PayType, "ПоказательТипа");
			Иначе
				РеквизитыПлатежа.Добавить(Ложь, "ЭтоПлатежВБюджет");
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПлатежноеТребование Тогда
			РеквизитыПлатежа.Добавить(PayData.PaymentCondition, "УсловиеОплаты");
			КоличествоСтрок = Мин(СтрЧислоСтрок(PayData.PaymentCondition), 3);
			Для Сч = 1 По КоличествоСтрок Цикл
				РеквизитыПлатежа.Добавить(СтрПолучитьСтроку(PayData.PaymentCondition, Сч), "УсловиеОплаты" + Сч);
			КонецЦикла;
			РеквизитыПлатежа.Добавить(PayData.AcceptTerm, "СрокАкцепта");
			РеквизитыПлатежа.Добавить(PayData.DocDispatchDate, "ДатаОтсылкиДок");
		КонецЕсли;
		
		Если ЭтоПлатежныйОрдер Тогда
			РеквизитыПлатежа.Добавить(PayData.TransitionContent, "СодержаниеОперации");
			РеквизитыПлатежа.Добавить(PayData.PartialPaymentNo, "НомерЧастичногоПлатежа");
			РеквизитыПлатежа.Добавить(PayData.PartialTransitionKind, "ШифрПлатежногоДокумента");
			РеквизитыПлатежа.Добавить(PayData.SumResidualPayment, "СуммаОстаткаПлатежа");
			РеквизитыПлатежа.Добавить(PayData.PartialDocNo, "НомерПлатежногоДокумента");
			РеквизитыПлатежа.Добавить(PayData.PartialDocDate, "ДатаПлатежногоДокумента");
		КонецЕсли;
		
		Если ЭтоМемориальныйОрдер Тогда
			Если Operation.DC = "1" Тогда // списание с лиц.счета
				СторонаБанка = "Получатель";
				СторонаКлиента = "Плательщик";
			ИначеЕсли Operation.DC = "2" Тогда // поступление на лиц.счет
				СторонаБанка = "Плательщик";
				СторонаКлиента = "Получатель";
			Иначе
				Продолжить;
			КонецЕсли;
			Payee = PayData.Author;
			Если НЕ Payee = Неопределено Тогда
				РеквизитыПлатежа.Добавить(Payee.Name, СторонаБанка + "Наименование");
				РеквизитыПлатежа.Добавить(Payee.CorrespAcc, СторонаБанка + "Счет");
				РеквизитыПлатежа.Добавить(Payee.BIC, СторонаБанка + "БИКБанка");
				РеквизитыПлатежа.Добавить(Payee.Name, СторонаБанка + "НаименованиеБанка");
				РеквизитыПлатежа.Добавить(Payee.City, СторонаБанка + "ГородБанка");
				РеквизитыПлатежа.Добавить(Payee.CorrespAcc, СторонаБанка + "КоррСчетБанка");
			КонецЕсли;
			РеквизитыПлатежа.Добавить(PayData.PartialTransitionKind, "ШифрДокумента");
			РеквизитыПлатежа.Добавить(PayData.TransitionContent, "СодержаниеОперации");
			РеквизитыПлатежа.Добавить(PayData.TransitionContent, "НазначениеПлатежа");
			РеквизитыПлатежа.Добавить(PayData.PartialTransitionKind, "ВидОплаты");
			
			РеквизитыПлатежа.Добавить(ЭД.Recipient.name, СторонаКлиента + "Наименование");
			РеквизитыПлатежа.Добавить(ЭД.Recipient.inn, СторонаКлиента + "ИНН");
			РеквизитыПлатежа.Добавить(ЭД.Recipient.kpp, СторонаКлиента + "КПП");
			РеквизитыПлатежа.Добавить(ЭД.Data.Account, СторонаКлиента + "Счет");
			РеквизитыПлатежа.Добавить(ЭД.Data.Bank.Bic, СторонаКлиента + "БИКБанка");
			РеквизитыПлатежа.Добавить(ЭД.Data.Bank.Name, СторонаКлиента + "НаименованиеБанка");
			РеквизитыПлатежа.Добавить(ЭД.Data.Bank.City, СторонаКлиента + "ГородБанка");
			РеквизитыПлатежа.Добавить(ЭД.Data.Bank.CorrespAcc, СторонаКлиента + "КоррСчетБанка");
		КонецЕсли;
		
		Если НЕ Operation.Stamp = Неопределено Тогда
			РеквизитыПлатежа.Добавить(Operation.Stamp.BIC, "ШтампБанкаБИК");
			РеквизитыПлатежа.Добавить(Operation.Stamp.Name, "ШтампБанкаНаименование");
			РеквизитыПлатежа.Добавить(Operation.Stamp.City, "ШтампБанкаГород");
			РеквизитыПлатежа.Добавить(Operation.Stamp.CorrespAcc, "ШтампБанкаКоррСчетБанка");
			РеквизитыПлатежа.Добавить(Operation.Stamp.Branch, "ШтампБанкаОтделение");
			РеквизитыПлатежа.Добавить(Operation.Stamp.Status.Name, "ШтампБанкаСтатус");
		КонецЕсли;
	
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыПлатежа);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	
	DataRequest = ЭД.Data;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", DataRequest.DateFrom);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  DataRequest.DateTo);
	
	ТекстБанк = " " + НСтр("ru='в банке'") + " ";
	Если НЕ DataRequest.Bank.Name = Неопределено Тогда
		ТекстБанк = ТекстБанк + DataRequest.Bank.Name + ", ";
	КонецЕсли;
	ТекстБанк = ТекстБанк + НСтр("ru = 'БИК:'") + " " + DataRequest.Bank.BIC;
	
	НомерСчета = DataRequest.Account + ТекстБанк;
	РеквизитыСчета = Новый СписокЗначений;
	РеквизитыСчета.Добавить(НомерСчета, "НомерСчета");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	
КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
	PayData = ЭД.Data;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", PayData.DocNo);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", PayData.DocDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СекцияДокумент", "Платежное поручение");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", PayData.Sum);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", PayData.Sum);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	
	Payer = PayData.Payer;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", Payer.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН", Payer.INN);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП", Payer.KPP);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", Payer.Account);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИКБанка", Payer.Bank.BIC);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикНаименованиеБанка", Payer.Bank.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикГородБанка", Payer.Bank.City);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикКоррСчетБанка", Payer.Bank.CorrespAcc);
	
	Payee = PayData.Payee;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", Payee.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН", Payee.INN);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП", Payee.KPP);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", Payee.Account);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИКБанка", Payee.Bank.BIC);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательНаименованиеБанка", Payee.Bank.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательГородБанка", Payee.Bank.City);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательКоррСчетБанка", Payee.Bank.CorrespAcc);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа", PayData.PaymentKind);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОплаты", PayData.TransitionKind);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность", PayData.Priority);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Код", PayData.Code);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", PayData.Purpose);
	
	Если НЕ PayData.BudgetPaymentInfo = Неопределено Тогда
		PayDataBudget = PayData.BudgetPaymentInfo;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж", Истина);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "СтатусСоставителя", PayDataBudget.DrawerStatus);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательКБК", PayDataBudget.CBC);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКТМО", PayDataBudget.OKTMO);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательОснования", PayDataBudget.Reason);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательПериода", PayDataBudget.TaxPeriod);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательНомера", PayDataBudget.DocNo);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательДаты", PayDataBudget.DocDate);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательТипа", PayDataBudget.PayType);
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж",  Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьПлатежноеТребованиеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	
	PayData = ЭД.Data;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", PayData.DocNo);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", PayData.DocDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СекцияДокумент", "Платежное требование");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", PayData.Sum);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", PayData.Sum);
	
	Payer = PayData.Payer;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", Payer.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН", Payer.INN);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП", Payer.KPP);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", Payer.Account);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИКБанка", Payer.Bank.BIC);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикНаименованиеБанка", Payer.Bank.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикГородБанка", Payer.Bank.City);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикКоррСчетБанка", Payer.Bank.CorrespAcc);
	
	Payee = PayData.Payee;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", Payee.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН", Payee.INN);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП", Payee.KPP);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", Payee.Account);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИКБанка", Payee.Bank.BIC);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательНаименованиеБанка", Payee.Bank.Name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательГородБанка", Payee.Bank.City);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательКоррСчетБанка", Payee.Bank.CorrespAcc);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа", PayData.PaymentKind);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОплаты", PayData.TransitionKind);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность", PayData.Priority);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", PayData.Purpose);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УсловиеОплаты", PayData.PaymentCondition);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СрокАкцепта", PayData.AcceptTerm);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаОтсылкиДокументов", PayData.DocDispatchDate);
	
КонецПроцедуры

Процедура ПрочитатьЗапросОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Идентификатор", ЭД.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторКлиента", ЭД.Sender.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеКлиента", ЭД.Sender.name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Sender.inn);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Sender.kpp);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Recipient.bic);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Recipient.name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторИсходногоДокумента", ЭД.ExtID);
	
КонецПроцедуры

Процедура ПрочитатьЗапросНаОтзывAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Идентификатор", ЭД.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторКлиента", ЭД.Sender.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеКлиента", ЭД.Sender.name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Sender.inn);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Sender.kpp);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Recipient.bic);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Recipient.name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторИсходногоДокумента", ЭД.ExtID);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Причина", ЭД.Reason);
	
КонецПроцедуры

Процедура ПрочитатьЗапросЗондAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Идентификатор", ЭД.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторКлиента", ЭД.Sender.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеКлиента", ЭД.Sender.name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Sender.inn);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Sender.kpp);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Recipient.bic);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Recipient.name);
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторКлиента", ЭД.Recipient.Customer.id);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НаименованиеКлиента", ЭД.Recipient.Customer.name);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Recipient.Customer.inn);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Recipient.Customer.kpp);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Sender.Bank.bic);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Sender.Bank.name);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторИсходногоДокумента", ЭД.ExtID);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторЗапроса", ЭД.ExtIDStatusRequest);
	
	Если ЭД.Result.Error = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЕстьОшибка", Ложь);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодСтатуса", ЭД.Result.Status.Code);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстСтатуса", ЭД.Result.Status.Name);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ДополнительнаяИнформация", ЭД.Result.Status.MoreInfo);
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЕстьОшибка", Истина);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодОшибки", ЭД.Result.Error.Code);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Описание", ЭД.Result.Error.Description);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ДополнительнаяИнформация", ЭД.Result.Error.MoreInfo);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПлатежноеПоручениеCML(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ПространствоИмен = "urn:1C.ru:ClientBankExchange";
	
	ТекстОшибки = "";
	Попытка 
		
		ClientBankExchange = ОбъектТипаCML(ФабрикаXDTO, "ClientBankExchange", ПространствоИмен);
		ВерсияФормата = ОбменСБанкамиКлиентСервер.ВерсияФорматаСинхронногоОбмена();
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "ВерсияФормата", ВерсияФормата, Истина, ТекстОшибки);
		ПлательщикНаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "Получатель", ПлательщикНаименованиеБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "Отправитель", "1С: Предприятие", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "ДатаСоздания", ТекущаяДатаСеанса(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "ВремяСоздания", ТекущаяДатаСеанса(), , ТекстОшибки);
		
		ПлатежноеПоручениеЭО = ОбъектТипаCML(ФабрикаXDTO, "ПлатежныйДокумент", ПространствоИмен);
		ИдДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "ИдДокумента", ИдДокумента, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "СекцияДокумент", "Платежное поручение", Истина, ТекстОшибки);
		Номер = СокрЛП(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
		Если СтрДлина(Номер) > 6 Тогда
			ВызватьИсключение НСтр("ru = 'Длина номера документа не должна превышать 6 знаков.'")
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Номер", Номер, Истина, ТекстОшибки);
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Дата", Дата, Истина, ТекстОшибки);
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Сумма", Сумма, Истина, ТекстОшибки);
		
		РеквизитыПлательщика = ОбъектТипаCML(ФабрикаXDTO, "РеквизитыПлательщика", ПространствоИмен);
		ПлательщикРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикСчет", ПлательщикРасчСчет, Истина, ТекстОшибки);
		
		ПлательщикКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.КПП");
		ПеречислениеВБюджет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет") = Истина;
		
		Если НЕ ЗначениеЗаполнено(ПлательщикКПП) И ПеречислениеВБюджет Тогда
			ПлательщикКПП = "0";
		КонецЕсли;
		
		Если ПеречислениеВБюджет ИЛИ (ЗначениеЗаполнено(ПлательщикКПП) И НЕ ПлательщикКПП = "0") Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикКПП", ПлательщикКПП, ПеречислениеВБюджет, ТекстОшибки);
		КонецЕсли;
		
		ПлательщикИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикИНН", ПлательщикИНН, , ТекстОшибки);
		
		ПлательщикБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк1", ПлательщикБанк, , ТекстОшибки);
		ПлательщикГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк2", ПлательщикГородБанка, , ТекстОшибки);
		ПлательщикБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБИК", ПлательщикБИКБанка, , ТекстОшибки);
		ПлательщикКоррСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикРасчСчет", ПлательщикКоррСчет, , ТекстОшибки);
		
		ПлательщикНаим = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Наименование");
		
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик1", ПлательщикНаим, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик", ПлательщикНаим, , ТекстОшибки);
			
		РеквизитыПолучателя = ОбъектТипаCML(ФабрикаXDTO, "РеквизитыПолучателя", ПространствоИмен);

		ПолучательРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательСчет", ПолучательРасчСчет, Истина, ТекстОшибки);
		
		ПолучательКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
				
		Если НЕ ЗначениеЗаполнено(ПолучательКПП) И ПеречислениеВБюджет Тогда
			ПолучательКПП = "0";
		КонецЕсли;
		
		Если ПеречислениеВБюджет ИЛИ (ЗначениеЗаполнено(ПолучательКПП) И НЕ ПолучательКПП = "0") Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательКПП", ПолучательКПП, ПеречислениеВБюджет, ТекстОшибки);
		КонецЕсли;
		
		ПолучательИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательИНН", ПолучательИНН, , ТекстОшибки);
		
		ПолучательБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк1", ПолучательБанк, , ТекстОшибки);
		ПолучательГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк2", ПолучательГородБанка, , ТекстОшибки);
		ПолучательБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБИК", ПолучательБИКБанка, , ТекстОшибки);
		ПолучательКоррСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательРасчСчет", ПолучательКоррСчет, , ТекстОшибки);
		
		ПолучательНаим = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Наименование");
			
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель1", ПолучательНаим, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель", ПолучательНаим, , ТекстОшибки);

		Если ПеречислениеВБюджет Тогда
			
			ПлатежиВБюджетCML = ОбъектТипаCML(ФабрикаXDTO, "ПлатежиВБюджет", ПространствоИмен);
			
			СтатусСоставителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.СтатусСоставителя");
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "СтатусСоставителя", СтатусСоставителя, Истина, ТекстОшибки);
			
			ПоказательКБК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательКБК");
			ПоказательКБК = ?(ЗначениеЗаполнено(ПоказательКБК), ПоказательКБК, "0");
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательКБК", ПоказательКБК, Истина, ТекстОшибки);
			
			ОКТМО = СокрЛП(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ОКТМО"));
			Если НЕ ЗначениеЗаполнено(ОКТМО) ИЛИ ПустаяСтрока(ОКТМО) Тогда
				ОКТМО = "0";
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ОКАТО", ОКТМО, Истина, ТекстОшибки);
			
			ПоказательОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательОснования");
			Если НЕ ЗначениеЗаполнено(ПоказательОснования) ИЛИ ПустаяСтрока(ПоказательОснования) Тогда
				ПоказательОснования = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательОснования", ПоказательОснования, Истина, ТекстОшибки);
			
			ПоказательПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательПериода");
			Если НЕ ЗначениеЗаполнено(ПоказательПериода) ИЛИ ПустаяСтрока(ПоказательПериода)
				ИЛИ ПоказательПериода = "  .  .    " Тогда
				ПоказательПериода = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательПериода", ПоказательПериода, Истина, ТекстОшибки);
			
			ПоказательНомера = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательНомера");
			Если НЕ ЗначениеЗаполнено(ПоказательНомера) ИЛИ ПустаяСтрока(ПоказательНомера) Тогда
				ПоказательНомера = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательНомера", ПоказательНомера, Истина, ТекстОшибки);
			
			ПоказательДаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательДаты");
			Если НЕ ЗначениеЗаполнено(ПоказательДаты) Тогда
				ПоказательДаты = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательДаты", ПоказательДаты, Истина, ТекстОшибки);
			
			Если Дата < Дата(2016, 3, 28) Тогда
				ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательТипа", "0", Истина, ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПлательщика", РеквизитыПлательщика, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);
		
		РеквизитыПлатежа = ОбъектТипаCML(ФабрикаXDTO, "РеквизитыПлатежа", ПространствоИмен);
		ВидПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "ВидПлатежа", ВидПлатежа, , ТекстОшибки);
		ВидОплаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидОплаты");
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "ВидОплаты", ВидОплаты, , ТекстОшибки);
		Очередность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Очередность");
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "Очередность", Очередность, , ТекстОшибки);
		Код = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Код");
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "Код", Код, , ТекстОшибки);
		Если ПеречислениеВБюджет И Не ЗначениеЗаполнено(Код) Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "Код", "0", , ТекстОшибки);
		КонецЕсли;
		НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа", НазначениеПлатежа, , ТекстОшибки);
		
		НазначениеПлатежаОтформатированное = НазначениеПлатежаОтформатированное(НазначениеПлатежа);
		
		КоличествоСтрокНП = Мин(СтрЧислоСтрок(НазначениеПлатежаОтформатированное), 6);
		
		Для Сч = 1 По КоличествоСтрокНП Цикл
			ТекСтрока = СтрПолучитьСтроку(НазначениеПлатежаОтформатированное, Сч);
			ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа" + Сч, ТекСтрока, , ТекстОшибки);
		КонецЦикла;
			
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПлатежа", РеквизитыПлатежа, Истина, ТекстОшибки);
		
		Если ПеречислениеВБюджет Тогда
			ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "ПлатежиВБюджет", ПлатежиВБюджетCML, Истина, ТекстОшибки);
		КонецЕсли;
		
		ClientBankExchange.СекцияПлатежногоДокумента.Добавить(ПлатежноеПоручениеЭО);
		
		ClientBankExchange.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ПолноеИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла");
			ВыгрузитьЭДВФайл(ФабрикаXDTO, ClientBankExchange, ПолноеИмяФайла);
			ФайлСформирован = Истина;
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			Если ФайлИзменен(ФабрикаXDTO, ClientBankExchange, ПолноеИмяФайла) Тогда
				ФайлСформирован = Ложь;
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли;

	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, СсылкаНаДокумент);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция НазначениеПлатежаОтформатированное(НазначениеПлатежа)
	
	НазначениеПлатежаОтформатированное = "";
	Для Счетчик = 1 По СтрЧислоСтрок(НазначениеПлатежа) Цикл
		ТекСтрока = СтрПолучитьСтроку(НазначениеПлатежа, Счетчик);
		Пока СтрДлина(ТекСтрока) > 35 Цикл
			НазначениеПлатежаОтформатированное = НазначениеПлатежаОтформатированное + Сред(ТекСтрока, 1, 35) + Символы.ПС;
			ТекСтрока = Сред(ТекСтрока, 36);
		КонецЦикла;
		НазначениеПлатежаОтформатированное = НазначениеПлатежаОтформатированное + ТекСтрока + Символы.ПС;
	КонецЦикла;
	
	Возврат НазначениеПлатежаОтформатированное;
	
КонецФункции

Функция СформироватьПлатежноеПоручениеAsync(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ВерсияФормата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияФормата");
	
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	Фабрика = ФабрикаAsyncXDTO(ВерсияФормата);
	
	ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	
	ТекстОшибки = "";
	Попытка 
		
		ЭД = ОбъектТипаCML(Фабрика, "PayDocRu", ПространствоИмен);
		
		ИдДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(ЭД, "id", ИдДокумента, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		userAgent = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ЗаполнитьСвойствоXDTO(ЭД, "userAgent", userAgent, , ТекстОшибки);
		
		Отправитель = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ИдКлиента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдКлиента");
		ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдКлиента, Истина, ТекстОшибки);
		ПлательщикНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Наименование");
		ЗаполнитьСвойствоXDTO(Отправитель, "name", ПлательщикНаименование, Истина, ТекстОшибки);
		ПлательщикИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
		ЗаполнитьСвойствоXDTO(Отправитель, "inn", ПлательщикИНН, , ТекстОшибки);
		ПлательщикКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.КПП");
		Если ПлательщикКПП <> "0" Тогда
			ЗаполнитьСвойствоXDTO(Отправитель, "kpp", ПлательщикКПП, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ПлательщикБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
		ЗаполнитьСвойствоXDTO(Получатель, "bic", ПлательщикБИКБанка, Истина, ТекстОшибки);
		ПлательщикНаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(Получатель, "name", ПлательщикНаименованиеБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
		
		ДанныеПлатежа = ОбъектТипаCML(Фабрика, "PayDocRu.Data", ПространствоИмен);
		
		Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocNo", СокрЛП(Номер), Истина, ТекстОшибки);
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocDate", Дата, Истина, ТекстОшибки);
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Sum", Сумма, Истина, ТекстОшибки);
		
		РеквизитыПлательщика = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
		ПлательщикРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
			
		Если ЗначениеЗаполнено(ПлательщикРасчСчет) И СтрДлина(СокрЛП(ПлательщикРасчСчет)) <> 20 Тогда
			ТекстОшибки = НСтр("ru = 'Некорректный номер счета плательщика %1
								|Длина номера счета должна состоять из 20 цифр.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПлательщикРасчСчет);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Name", ПлательщикНаименование, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "INN", ПлательщикИНН, , ТекстОшибки);
		ЭтоПеречислениеВБюджет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет") = Истина;
		Если Не ЗначениеЗаполнено(ПлательщикКПП) И ЭтоПеречислениеВБюджет Тогда
			ПлательщикКПП = "0";
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "KPP", ПлательщикКПП, ЭтоПеречислениеВБюджет, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Account", ПлательщикРасчСчет, Истина, ТекстОшибки);
		
		БанкПлательщика = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "BIC", ПлательщикБИКБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "Name", ПлательщикНаименованиеБанка, , ТекстОшибки);
		ПлательщикГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "City", ПлательщикГородБанка, , ТекстОшибки);
		ПлательщикКоррСчетБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(БанкПлательщика, "CorrespAcc", ПлательщикКоррСчетБанка, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Bank", БанкПлательщика, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payer", РеквизитыПлательщика, Истина, ТекстОшибки);
		
		РеквизитыПолучателя = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
		ПолучательНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Наименование");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Name", ПолучательНаименование, Истина, ТекстОшибки);
		ПолучательИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "INN", ПолучательИНН, , ТекстОшибки);
		ПолучательКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
		Если Не ЗначениеЗаполнено(ПолучательКПП) И ЭтоПеречислениеВБюджет Тогда
			ПолучательКПП = "0";
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "KPP", ПолучательКПП, ЭтоПеречислениеВБюджет, ТекстОшибки);
		ПолучательРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Account", ПолучательРасчСчет, Истина, ТекстОшибки);
		
		БанкПолучателя = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
		ПолучательБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "BIC", ПолучательБИКБанка, Истина, ТекстОшибки);
		ПолучательНаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "Name", ПолучательНаименованиеБанка, , ТекстОшибки);
		ПолучательГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "City", ПолучательГородБанка, , ТекстОшибки);
		ПолучательКоррСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(БанкПолучателя, "CorrespAcc", ПолучательКоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Bank", БанкПолучателя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payee", РеквизитыПолучателя, Истина, ТекстОшибки);
		
		ВидПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "PaymentKind", ВидПлатежа, , ТекстОшибки);
		ВидОплаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидОплаты");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "TransitionKind", ВидОплаты, , ТекстОшибки);
		Очередность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Очередность");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Priority", Очередность, , ТекстОшибки);
		Код = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Код");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Code", Код, , ТекстОшибки);
		НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Purpose", НазначениеПлатежа, Истина, ТекстОшибки);
		
		Если ЭтоПеречислениеВБюджет Тогда
			Если НЕ ЗначениеЗаполнено(Код) Тогда
				ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Code", "0", , ТекстОшибки);
			КонецЕсли;
			Если ВерсияФормата = "2.01" Тогда
				ПлатежиВБюджетCML = ОбъектТипаCML(Фабрика, "PayDocRu.Data.BudgetPaymentInfo", ПространствоИмен);
			Иначе
				ПлатежиВБюджетCML = ОбъектТипаCML(Фабрика, "BudgetPaymentInfoType", ПространствоИмен);
			КонецЕсли;
			СтатусСоставителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.СтатусСоставителя");
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "DrawerStatus", СтатусСоставителя, Истина, ТекстОшибки);
			ПоказательКБК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательКБК");
			ПоказательКБК = ?(ЗначениеЗаполнено(ПоказательКБК), ПоказательКБК, "0");
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "CBC", ПоказательКБК, Истина, ТекстОшибки);
			ОКТМО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ОКТМО");
			Если НЕ ЗначениеЗаполнено(ОКТМО) ИЛИ ПустаяСтрока(ОКТМО) Тогда
				ОКТМО = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "OKTMO", ОКТМО, Истина, ТекстОшибки);
			ПоказательОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательОснования");
			Если НЕ ЗначениеЗаполнено(ПоказательОснования) ИЛИ ПустаяСтрока(ПоказательОснования) Тогда
				ПоказательОснования = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "Reason", ПоказательОснования, Истина, ТекстОшибки);
			
			ПоказательПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательПериода");
			Если НЕ ЗначениеЗаполнено(ПоказательПериода) ИЛИ ПустаяСтрока(ПоказательПериода)
				ИЛИ ПоказательПериода = "  .  .    " Тогда
				ПоказательПериода = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "TaxPeriod", ПоказательПериода, Истина, ТекстОшибки);
			
			ПоказательНомера = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательНомера");
			Если НЕ ЗначениеЗаполнено(ПоказательНомера) ИЛИ ПустаяСтрока(ПоказательНомера) Тогда
				ПоказательНомера = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "DocNo", ПоказательНомера, Истина, ТекстОшибки);
			
			ПоказательДаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательДаты");
			Если НЕ ЗначениеЗаполнено(ПоказательДаты) Тогда
				ПоказательДаты = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "DocDate", ПоказательДаты, Истина, ТекстОшибки);
			
			Если Дата < Дата(2016, 3, 28) ИЛИ ВерсияФормата = "2.02" ИЛИ ВерсияФормата = "2.01" Тогда
				ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "PayType", "0", Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "BudgetPaymentInfo", ПлатежиВБюджетCML, , ТекстОшибки);
		КонецЕсли;
	
		ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеПлатежа, Истина, ТекстОшибки);
		
		ЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла");
			ВыгрузитьЭДВФайл(Фабрика, ЭД, ИмяФайла, Ложь);
			ФайлСформирован = Истина;
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			Если ФайлИзменен(Фабрика, ЭД, ИмяФайла, Ложь) Тогда
				ФайлСформирован = Ложь;
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			КонецЕсли;
		КонецЕсли;

	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование электронного документа'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, СсылкаНаДокумент);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция СформироватьПлатежноеПоручениеСбербанк(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
		
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	Попытка

		ПолноеИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла");
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		PayDocRu = ОбъектТипаCML(ФабрикаXDTO, "PayDocRu", ПространствоИмен);
		ИДДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(PayDocRu, "docExtId", ИДДокумента, Истина, ТекстОшибки);
		AccDoc = ОбъектТипаCML(ФабрикаXDTO, "PayDocRu.AccDoc", ПространствоИмен);

		ПеречислениеВБюджет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет") = Истина;
		Код = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Код");
		
		Если ПеречислениеВБюджет И Не ЗначениеЗаполнено(Код) Тогда
			ЗаполнитьСвойствоXDTO(AccDoc, "uip", "0", , ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(AccDoc, "uip", Код, , ТекстОшибки);
		КонецЕсли;
		
		НазначениеПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
		// Сервер Сбербанка не умеет работать с символом возврата каретки.
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, Символы.ВК, "");
		ЗаполнитьСвойствоXDTO(AccDoc, "purpose", НазначениеПлатежа, Истина, ТекстОшибки);
		Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(AccDoc, "accDocNo", СокрЛП(Номер), Истина, ТекстОшибки);
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(AccDoc, "docDate", Дата, Истина, ТекстОшибки);
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(AccDoc, "docSum", Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(AccDoc, "transKind", "01", Истина, ТекстОшибки);
		ВидПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
		ВидПлатежа = ?(ЗначениеЗаполнено(ВидПлатежа), НРег(ВидПлатежа), "0");
		ЗаполнитьСвойствоXDTO(AccDoc, "paytKind", ВидПлатежа, Истина, ТекстОшибки);
		Очередность = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлатежа.Очередность");
		ЗаполнитьСвойствоXDTO(AccDoc, "priority", Очередность, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocRu, "AccDoc", AccDoc, Истина, ТекстОшибки);
		
		Payer = ОбъектТипаCML(ФабрикаXDTO, "Payer", ПространствоИмен);
		ПлательщикНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Наименование");
		// Сервер Сбербанка не умеет работать с символом возврата каретки.
		ПлательщикНаименование = СтрЗаменить(ПлательщикНаименование, Символы.ВК, "");
		ЗаполнитьСвойствоXDTO(Payer, "Name", ПлательщикНаименование, Истина, ТекстОшибки);
		ПлательщикИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.ИНН");
		ЗаполнитьСвойствоXDTO(Payer, "inn", ПлательщикИНН, Истина, ТекстОшибки);
		ПлательщикКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.КПП");
		Если Не ЗначениеЗаполнено(ПлательщикКПП) И ПеречислениеВБюджет Тогда
			ПлательщикКПП = "0";
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Payer, "kpp", ПлательщикКПП, , ТекстОшибки);
		ПлательщикРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
		ЗаполнитьСвойствоXDTO(Payer, "personalAcc", ПлательщикРасчСчет, Истина, ТекстОшибки);

		Bank = ОбъектТипаCML(ФабрикаXDTO, "Bank",ПространствоИмен);
		ПлательщикБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
		ЗаполнитьСвойствоXDTO(Bank, "bic", ПлательщикБИКБанка, Истина, ТекстОшибки);
		ПлательщикБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(Bank, "Name", ПлательщикБанк, Истина, ТекстОшибки);
		ПлательщикКоррСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(Bank, "correspAcc", СокрЛП(ПлательщикКоррСчет), , ТекстОшибки);
		
		ПлательщикГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
		ИнформацияОРасположенииБанка = ИнформацияОРасположенииБанка(ПлательщикГородБанка);
		ЗаполнитьСвойствоXDTO(Bank, "BankCity", ИнформацияОРасположенииБанка.НазваниеНаселенногоПункта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
			Bank, "SettlementType", ИнформацияОРасположенииБанка.ТипНаселенногоПункта, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Payer, "Bank", Bank, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(PayDocRu, "Payer", Payer, Истина, ТекстОшибки);
		
		Payee = ОбъектТипаCML(ФабрикаXDTO, "Payee",ПространствоИмен);
		ПолучательНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Наименование");
		// Сервер Сбербанка не умеет работать с символом возврата каретки.
		ПолучательНаименование = СтрЗаменить(ПолучательНаименование, Символы.ВК, "");
		ЗаполнитьСвойствоXDTO(Payee, "Name", ПолучательНаименование, Истина, ТекстОшибки);
		ПолучательИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
		ЗаполнитьСвойствоXDTO(Payee, "inn", ПолучательИНН, , ТекстОшибки);
		ПолучательКПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
		Если Не ЗначениеЗаполнено(ПолучательКПП) И ПеречислениеВБюджет Тогда
			ПолучательКПП = "0";
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Payee, "kpp", ПолучательКПП, , ТекстОшибки);
		ПолучательРасчСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
		ЗаполнитьСвойствоXDTO(Payee, "personalAcc", ПолучательРасчСчет, Истина, ТекстОшибки);
		
		Bank = ОбъектТипаCML(ФабрикаXDTO, "Bank",ПространствоИмен);
		ПолучательБИКБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
		ЗаполнитьСвойствоXDTO(Bank, "bic", ПолучательБИКБанка, Истина, ТекстОшибки);
		ПолучательБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Наименование");
		ЗаполнитьСвойствоXDTO(Bank, "Name", ПолучательБанк, Истина, ТекстОшибки);
		ПолучательКоррСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
		ЗаполнитьСвойствоXDTO(Bank, "correspAcc", СокрЛП(ПолучательКоррСчет), , ТекстОшибки);
		
		ПолучательГородБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
		ИнформацияОРасположенииБанка = ИнформацияОРасположенииБанка(ПолучательГородБанка);
		ЗаполнитьСвойствоXDTO(Bank, "BankCity", ИнформацияОРасположенииБанка.НазваниеНаселенногоПункта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
			Bank, "SettlementType", ИнформацияОРасположенииБанка.ТипНаселенногоПункта, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Payee, "Bank", Bank, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(PayDocRu, "Payee", Payee, Истина, ТекстОшибки);

		Если ПеречислениеВБюджет Тогда
			DepartmentalInfo = ОбъектТипаCML(ФабрикаXDTO, "PayDocRu.DepartmentalInfo", ПространствоИмен);
			СтатусСоставителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.СтатусСоставителя");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "drawerStatus", СтатусСоставителя, Истина, ТекстОшибки);
			КодБК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательКБК");
			КодБК = ?(ЗначениеЗаполнено(КодБК), КодБК, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "cbc", КодБК, Истина, ТекстОшибки);
			КодОКАТО = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ОКТМО");
			КодОКАТО = ?(ЗначениеЗаполнено(КодОКАТО), КодОКАТО, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "okato", СокрЛП(КодОКАТО), Истина, ТекстОшибки);
			ПоказательОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательОснования");
			ПоказательОснования = ?(ЗначениеЗаполнено(ПоказательОснования), ПоказательОснования, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "paytReason", ПоказательОснования, Истина, ТекстОшибки);
			ПоказательПериода = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательПериода");
			ПоказательПериода = ?(ЗначениеЗаполнено(ПоказательПериода), ПоказательПериода, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "taxPeriod", ПоказательПериода, Истина, ТекстОшибки);
			ПоказательНомера = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательНомера");
			ПоказательНомера = ?(ЗначениеЗаполнено(ПоказательНомера), ПоказательНомера, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "docNo", ПоказательНомера, Истина, ТекстОшибки);
			ПоказательДаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ПлатежиВБюджет.ПоказательДаты");
			ПоказательДаты = ?(ЗначениеЗаполнено(ПоказательДаты), ПоказательДаты, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "docDate", ПоказательДаты, Истина, ТекстОшибки);
			Если Дата < Дата(2016, 3, 28) Тогда
				ЗаполнитьСвойствоXDTO(DepartmentalInfo, "taxPaytKind", "0", Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(PayDocRu, "DepartmentalInfo", DepartmentalInfo, , ТекстОшибки);
		КонецЕсли;
		
		PayDocRu.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДВФайл(ФабрикаXDTO, PayDocRu, ПолноеИмяФайла);
			ФайлСформирован = Истина;
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			Если ФайлИзменен(ФабрикаXDTO, PayDocRu, ПолноеИмяФайла) Тогда
				ФайлСформирован = Ложь;
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1, СсылкаНаДокумент);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция ИнформацияОРасположенииБанка(СтрокаРазбора)

	СтруктураВозврата = Новый Структура("ТипНаселенногоПункта, НазваниеНаселенногоПункта");
	ПозПробела = СтрНайти(СтрокаРазбора, " ");
	Если ПозПробела > 0 Тогда
		СтруктураВозврата.ТипНаселенногоПункта = СтрЗаменить(Сред(СтрокаРазбора, 1, ПозПробела - 1), ".", "");
		Если ПозПробела < СтрДлина(СтрокаРазбора) Тогда
			СтруктураВозврата.НазваниеНаселенногоПункта = Сред(СтрокаРазбора, ПозПробела + 1);
		КонецЕсли
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;

	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			Продолжить
		КонецЕсли;
		
		ОбменСБанкамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
			СтруктураВозврата = СформироватьПлатежноеПоручение(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
			СтруктураВозврата = СформироватьПлатежноеТребование(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту
			Или ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников
			Или ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников Тогда
			СтруктураВозврата = СформироватьЭДПоЗарплатномуПроекту(ОбъектДляВыгрузки, НастройкиОбменаЭД, ТекЭлемент.Ключ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет имя файла электронного документа.
//
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа;
//  СсылкаНаОбъект - ДокументаСсылка - ссылка на объект информационной базы;
//  НомерДокумента - Строка - номер документа;
//
// Возвращаемое значение:
//  Строка - строковое представление электронного документа.
//
Функция ПредставлениеЭД(ВидЭД, СсылкаНаОбъект, НомерДокумента)
	
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
		ИЛИ ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
		ШаблонПредставленияЭД = НСтр("ru = '%1 № %2 от %3'");
	Иначе
		ШаблонПредставленияЭД = НСтр("ru = '%1 %2 %3'");
	КонецЕсли;
	
	ДатаСтрокой = Формат(СсылкаНаОбъект.Дата, "ДЛФ=D");
	
	СтрокаИмениФайла = СтрШаблон(ШаблонПредставленияЭД, ВидЭД, НомерДокумента, ДатаСтрокой);
	
	Возврат СтрокаИмениФайла;
	
КонецФункции

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД", Неопределено);
	ПараметрыЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	ПараметрыЭД.Вставить("Банк", Неопределено);
	ПараметрыЭД.Вставить("Организация", Неопределено);
	ПараметрыЭД.Вставить("НастройкаОбмена", Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Возврат ПараметрыЭД;
	
КонецФункции

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена
//
// Параметры:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстЗапросаПараметровОбмена(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_НастройкиОбмена.Ссылка.Организация КАК Организация,
		|	ТЧ_НастройкиОбмена.Ссылка.Банк КАК Банк,
		|	ТЧ_НастройкиОбмена.ИсходящийДокумент КАК ВидЭД,
		|	ТЧ_НастройкиОбмена.ИспользоватьЭП КАК Подписывать,
		|	ТЧ_НастройкиОбмена.Ссылка.СертификатБанка КАК СертификатБанка,
		|	ТЧ_НастройкиОбмена.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_НастройкиОбмена.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_НастройкиОбмена.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	ТЧ_НастройкиОбмена.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
		|	ВЫБОР
		|		КОГДА ТЧ_НастройкиОбмена.Ссылка.Недействительна
		|				ИЛИ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НастройкаОбменаДействует,
		|	ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату
		|ПОМЕСТИТЬ ВТ_ТЧ_НастройкиОбмена
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК ТЧ_НастройкиОбмена
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоДействующиеНастройкиОбмена
		|				ТОГДА НЕ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
		|						И НЕ ТЧ_НастройкиОбмена.Ссылка.Недействительна
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ТЧ_НастройкиОбмена.Ссылка.Организация = &Организация
		|						И ТЧ_НастройкиОбмена.Ссылка.Банк = &Банк
		|			КОГДА ТЧ_НастройкиОбмена.Ссылка.Организация = &Организация
		|					И ТЧ_НастройкиОбмена.Ссылка.Банк = &Банк
		|					И ТЧ_НастройкиОбмена.ИсходящийДокумент = &ВидЭД
		|				ТОГДА ТЧ_НастройкиОбмена.Формировать
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Организация КАК Организация,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП
		|		ИЗ
		|			ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|				ПО ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка) КАК СертификатыИзНастроекОбмена
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекОбмена.СертификатЭП
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВидыЭДЭП.ВидЭД = &ВидЭД
		|		КОНЕЦ
		|	И &ПроверкаПользователя
		|	И ВидыЭДЭП.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_НастройкиОбмена.Организация,
		|	ВТ_ТЧ_НастройкиОбмена.Банк,
		|	ВТ_ТЧ_НастройкиОбмена.ВидЭД,
		|	ВТ_ТЧ_НастройкиОбмена.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_НастройкиОбмена.СертификатБанка,
		|	ВТ_ТЧ_НастройкиОбмена.РесурсВходящихДокументов,
		|	ВТ_ТЧ_НастройкиОбмена.РесурсИсходящихДокументов,
		|	ВТ_ТЧ_НастройкиОбмена.ИдентификаторОрганизации,
		|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ВТ_ТЧ_НастройкиОбмена.ПрограммаБанка,
		|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбменаДействует,
		|	ВТ_ТЧ_НастройкиОбмена.АутентификацияПоСертификату
		|ИЗ
		|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_НастройкиОбмена.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И ВТ_ТЧ_НастройкиОбмена.Организация = ВТ_Сертификаты.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ТЧ_НастройкиОбмена.ВидЭД = &ВидЭД
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка КАК НастройкаОбмена,
		|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
		|ГДЕ
		|	НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.Недействительна";
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстЗапросаПараметровОбменаПоНастройкеОбмена(ТекстЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_НастройкиОбмена.Ссылка.Организация КАК Организация,
	|	ТЧ_НастройкиОбмена.Ссылка.Банк КАК Банк,
	|	ТЧ_НастройкиОбмена.ИсходящийДокумент КАК ВидЭД,
	|	ТЧ_НастройкиОбмена.ИспользоватьЭП КАК Подписывать,
	|	ТЧ_НастройкиОбмена.Ссылка.СертификатБанка КАК СертификатБанка,
	|	ТЧ_НастройкиОбмена.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_НастройкиОбмена.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_НастройкиОбмена.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_НастройкиОбмена.Ссылка КАК НастройкаОбмена,
	|	ТЧ_НастройкиОбмена.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
	|	ВЫБОР
	|		КОГДА ТЧ_НастройкиОбмена.Ссылка.Недействительна
	|				ИЛИ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НастройкаОбменаДействует,
	|	ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату
	|ПОМЕСТИТЬ ВТ_ТЧ_НастройкиОбмена
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК ТЧ_НастройкиОбмена
	|ГДЕ
	|	ТЧ_НастройкиОбмена.Ссылка = &НастройкаОбмена
	|	И ТЧ_НастройкиОбмена.ИсходящийДокумент = &ВидЭД
	|	И ВЫБОР
	|			КОГДА &ТолькоДействующиеНастройкиОбмена
	|				ТОГДА НЕ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
	|						И НЕ ТЧ_НастройкиОбмена.Ссылка.Недействительна
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыНастройкиОбмена.СертификатЭП КАК Ссылка,
	|	ВидыЭД.ВидЭД КАК ВидДокумента,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыНастройкиОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭД
	|		ПО (ВидыЭД.СертификатЭП = СертификатыНастройкиОбмена.СертификатЭП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО СертификатыНастройкиОбмена.СертификатЭП = Сертификаты.Ссылка
	|ГДЕ
	|	НЕ СертификатыНастройкиОбмена.СертификатЭП.ПометкаУдаления
	|	И НЕ СертификатыНастройкиОбмена.СертификатЭП.Отозван
	|	И ВидыЭД.ВидЭД = &ВидЭД
	|	И &ПроверкаПользователя
	|	И ВидыЭД.Использовать
	|	И СертификатыНастройкиОбмена.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_НастройкиОбмена.Организация,
	|	ВТ_ТЧ_НастройкиОбмена.Банк,
	|	ВТ_ТЧ_НастройкиОбмена.ВидЭД,
	|	ВТ_ТЧ_НастройкиОбмена.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_НастройкиОбмена.СертификатБанка,
	|	ВТ_ТЧ_НастройкиОбмена.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_НастройкиОбмена.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_НастройкиОбмена.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена КАК НастройкаОбмена,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ВТ_ТЧ_НастройкиОбмена.ПрограммаБанка,
	|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбменаДействует,
	|	ВТ_ТЧ_НастройкиОбмена.АутентификацияПоСертификату
	|ИЗ
	|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_НастройкиОбмена.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменаСертификатыПодписейОрганизации.СертификатЭП.Отпечаток КАК Отпечаток,
	|	НастройкиОбменаСертификатыПодписейОрганизации.Ссылка КАК НастройкаОбмена
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификатыПодписейОрганизации
	|ГДЕ
	|	НЕ НастройкиОбменаСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И НастройкиОбменаСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена";
	
КонецПроцедуры

Процедура СообщитьОбОтсутствииНастройкиОбмена(ПараметрыЭД, Источник)
	
	ШаблонСообщения = НСтр("ru = 'Обработка %1.
							|Операция не выполнена.
							|Необходимо создать ""Настройку обмена с сервисом 1С:ДиректБанк"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Банк") Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") Тогда
			Порядок = 3;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

Процедура СоздатьПрисоединенныйФайл(ПакетОбменСБанками, ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	Представление = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Строка(ПакетОбменСБанками));
	Представление = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Представление, "");
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ПакетОбменСБанками);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Представление);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение,".", ""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ЗапроситьВыпискуБанкаАсинхронно(СтруктураПараметров, АдресХранилища)
	
	МассивСообщенийОбмена = СтруктураПараметров.МассивСообщенийОбмена;
	ТекстСообщения = "";
	
	НовыйПакет = Неопределено;
	СоздатьПакетОбменСБанками(СтруктураПараметров.НастройкаОбмена, МассивСообщенийОбмена, НовыйПакет);
	
	Если НЕ ЗначениеЗаполнено(НовыйПакет) Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ЗапросОтправлен", Ложь);
		СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	СоздатьЭДПакетаAsync(НовыйПакет, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ЗапросОтправлен", Ложь);
		СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
		Возврат;
	КонецЕсли;
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(НовыйПакет);
	СоотвНастроекОбменаИПараметровСертификатов = Новый Соответствие;
	СтруктураПараметров.Вставить("МаркерРасшифрованный", СтруктураПараметров.ИдентификаторСессииБанка);
	СоотвНастроекОбменаИПараметровСертификатов.Вставить(СтруктураПараметров.НастройкаОбмена, СтруктураПараметров);
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ОтправкаПакетовЭДО(
		МассивПакетов, СоотвНастроекОбменаИПараметровСертификатов, ТекстСообщения);
							
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗапросОтправлен", Результат.КоличествоОтправлено > 0);
	СтруктураВозврата.Вставить("ЕстьОшибка", ЗначениеЗаполнено(ТекстСообщения));
	СтруктураВозврата.Вставить("ВыпискаБанка", Неопределено);
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Получает все подписи файла.
//
// Параметры
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи;
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями.
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект)
	
	МассивВозврата = Новый Массив;
	
	ПолноеИмяОбъектаСЭП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
					|	ЭлектронныеПодписи.Подпись             КАК Подпись,
					|	ЭлектронныеПодписи.Отпечаток           КАК Отпечаток,
					|	ЭлектронныеПодписи.ИмяФайлаПодписи     КАК ИмяФайлаПодписи,
					|	ЭлектронныеПодписи.Сертификат          КАК Сертификат
					|ИЗ
					|	[ПолноеИмяОбъектаСЭП].ЭлектронныеПодписи КАК ЭлектронныеПодписи
					|ГДЕ
					|	ЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъектаСЭП]", ПолноеИмяОбъектаСЭП);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтруктураВозврата = Новый Структура("Подпись, КомуВыданСертификат, ИмяФайлаПодписи, Сертификат, Отпечаток");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаЗапроса);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
			|Ошибка установки значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 1);
	КонецПопытки
	
КонецПроцедуры

#Область ОбработкаПакетов

Функция НайтиПакетОбменСБанками(НастройкаОбмена, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПакетОбменСБанками.Ссылка
	               |ИЗ
	               |	Документ.ПакетОбменСБанками КАК ПакетОбменСБанками
	               |ГДЕ
	               |	ПакетОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И ПакетОбменСБанками.ВнешнийИдентификатор = &ВнешнийИдентификатор
	               |	И ПакетОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", ВнешнийИдентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли
	
КонецФункции

Процедура ДобавитьСообщениеОбменаВПакет(Пакет, СообщениеОбмена)
	
	ПакетОбъект = Пакет.ПолучитьОбъект();
	
	НоваяСтрокаСообщениеОбмена = ПакетОбъект.Сообщения.Добавить();
	НоваяСтрокаСообщениеОбмена.Сообщение = СообщениеОбмена;
	ПакетОбъект.Записать();
	
КонецПроцедуры

Функция СформироватьНовыйПакетОбменСБанками(СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетОбменСБанками = Документы.ПакетОбменСБанками.СоздатьДокумент();
		ПакетОбменСБанками.Дата = ТекущаяДатаСеанса();
		ЗаполнитьЗначенияСвойств(ПакетОбменСБанками, СтруктураПараметров);
		ПакетОбменСБанками.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Создание пакета обмена'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
	Возврат ПакетОбменСБанками.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ЗарплатныйПроект

Функция СформироватьЭДПоЗарплатномуПроекту(СсылкаНаОбъект, НастройкиОбменаЭД, ВидЭД)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", ВидЭД);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПечатныйНомерДокумента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	
	ИмяФайла = Неопределено; АдресФайла = Неопределено;
	ОбменСБанкамиПереопределяемый.ПриФормированииXMLФайла(СсылкаНаОбъект, ИмяФайла, АдресФайла);
		
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
		
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", НастройкиОбменаЭД.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Представление", ИмяФайла);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
	ВозвращаемоеЗначение = СтруктураПараметров;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбменаСБанками

// Обновляет дату получения документа текущим числом.
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на текущую настройку обмена с банками.
//    Метка - Строка - название бизнес-системы (для обмена с тестовым сервером Сбербанка).
//
Процедура СохранитьПараметрыОбмена(НастройкаОбмена, Метка = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
	Менеджер = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
	Менеджер.НастройкаОбмена = НастройкаОбмена;
	Менеджер.Прочитать();
	Менеджер.НастройкаОбмена = НастройкаОбмена; // не удалять
	Если ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Менеджер.ПоследняяДатаПолученияЭД = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ЗначениеЗаполнено(Метка) Тогда
		Менеджер.Метка = Метка;
	КонецЕсли;
	Менеджер.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
