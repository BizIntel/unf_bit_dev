////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеСлужебный: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область КомандыЭДО

// Размещает команды ЭДО на форме.
//
// Параметры:
//   Форма                            - УправляемаяФорма - форма, в которой необходимо разместить подменю ЭДО.
//   МестоРазмещенияКомандПоУмолчанию - ЭлементФормы - группа, в которую необходимо разместить подменю ЭДО,
//                                                     по умолчанию размещается в командную панель формы.
//   МодульПодсистемы - Строка - название модуля, в котором расположен обработчик команды;
//   НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление документа информационной базы;
//   ТолькоВМенюЕще - Булево - Если Истина, то команда будет размещена только в меню Еще.
//
Процедура РазместитьНаФормеКомандыЭДО(Форма, МестоРазмещенияКомандПоУмолчанию, МодульПодсистемы, НаправлениеЭД = Неопределено, ТолькоВМенюЕще = Ложь) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	КомандыЭДО = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КомандыЭДОФормы(ИмяФормы, МодульПодсистемы, НаправлениеЭД, ТолькоВМенюЕще).Скопировать();
	ОпределитьВидимостьКомандЭДОПоФункциональнымОпциям(КомандыЭДО, Форма);
	
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		Для Каждого КомандаЭДО Из КомандыЭДО Цикл
			Если ПустаяСтрока(КомандаЭДО.МестоРазмещения) Тогда
				КомандаЭДО.МестоРазмещения = МестоРазмещенияКомандПоУмолчанию.Имя;
			КонецЕсли;
		КонецЦикла;
		Если МодульПодсистемы = "ОбменСБанками" Тогда
			МестоРазмещенияКомандПоУмолчанию.Заголовок = НСтр("ru = '1С:ДиректБанк'");
		КонецЕсли;
	КонецЕсли;
	
	КомандыЭДО.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	
	ТаблицаКоманд = КомандыЭДО.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Если МестоРазмещенияКомандПоУмолчанию = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
		ПодменюЭДО = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + "КомандыЭДО", Тип("ГруппаФормы"), МестоРазмещенияКоманд);
		ПодменюЭДО.Вид = ВидГруппыФормы.Подменю;
		Если МодульПодсистемы = "ОбменСБанками" Тогда
			ПодменюЭДО.Заголовок = НСтр("ru = '1С:ДиректБанк'");
		Иначе
			ПодменюЭДО.Заголовок = НСтр("ru = 'ЭДО'");
		КонецЕсли;
		МестоРазмещенияКомандПоУмолчанию = ПодменюЭДО;
	КонецЕсли;
	
	Если МодульПодсистемы = "ОбменСКонтрагентами" Тогда
		КартинкаОповещений = БиблиотекаКартинок["ЭмблемаСервиса1СЭДО"];
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйВызовСервера");
		Если МодульОбменСКонтрагентами.ЕстьСобытияЭДО() Тогда
			КартинкаОповещений = БиблиотекаКартинок["ВосклицательныйЗнакКрасный"];
		КонецЕсли;
		МестоРазмещенияКомандПоУмолчанию.Картинка = КартинкаОповещений;
	КонецЕсли;
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		НайденныеКоманды = КомандыЭДО.НайтиСтроки(Новый Структура("МестоРазмещения,СкрытаФункциональнымиОпциями,Отключена", МестоРазмещения, Ложь, Ложь));
		ЭлементФормыДляРазмещения = Форма.Элементы.Найти(МестоРазмещения);
		Если ЭлементФормыДляРазмещения = Неопределено Тогда
			ЭлементФормыДляРазмещения = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		
		Если НайденныеКоманды.Количество() > 0 Тогда
			ДобавитьКомандыЭДО(Форма, НайденныеКоманды, ЭлементФормыДляРазмещения);
		КонецЕсли;
	КонецЦикла;
	
	АдресКомандЭДОВоВременномХранилище = "АдресКомандЭДОВоВременномХранилище";
	КомандаФормы = Форма.Команды.Найти(АдресКомандЭДОВоВременномХранилище);
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(АдресКомандЭДОВоВременномХранилище);
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(КомандыЭДО, Форма.УникальныйИдентификатор);
	Иначе
		ОбщийСписокКомандЭДОФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
		Для Каждого КомандаЭДО Из КомандыЭДО Цикл
			ЗаполнитьЗначенияСвойств(ОбщийСписокКомандЭДОФормы.Добавить(), КомандаЭДО);
		КонецЦикла;
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(ОбщийСписокКомандЭДОФормы, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список команд ЭДО для указанной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, Строка - форма или полное имя формы, для которой необходимо получить список команд ЭДО;
//  МодульПодсистемы - Строка - модуль, в котором размещены обработчики команд;
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление документа, для которого выполняется команда;
//  ТолькоВМенюЕще - Булево - если Истина, то команда будет размещена только в меню Еще.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в СоздатьКоллекциюКомандЭДО().
//
Функция КомандыЭДОФормы(Форма, МодульПодсистемы, НаправлениеЭД, ТолькоВМенюЕще) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	КомандыЭДО = СоздатьКоллекциюКомандЭДО();
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено 
		И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	КонецЕсли;
	
	ДобавляемыеКомандыЭДО = СоздатьКоллекциюКомандЭДО();
	МодульФормирования = ОбщегоНазначения.ОбщийМодуль(МодульПодсистемы);
	МодульФормирования.СформироватьКомандыЭДО(ОбъектМетаданных.ПолноеИмя(), ДобавляемыеКомандыЭДО, НаправлениеЭД, ТолькоВМенюЕще);
	
	Для Каждого КомандаЭДО Из ДобавляемыеКомандыЭДО Цикл
		Если КомандыЭДО.Найти(КомандаЭДО.Идентификатор, "Идентификатор") = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КомандыЭДО.Добавить(), КомандаЭДО);	
		КонецЕсли;
	КонецЦикла;
	
	КомандыЭДО.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыЭДО.Количество() + 1 По 0 Цикл
		КомандаЭДО = КомандыЭДО[-НомерСтроки];
		СписокФорм = СтрРазделить(КомандаЭДО.СписокФорм, ",", Ложь);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыЭДО.Удалить(КомандаЭДО);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандЭДОПоФункциональнымОпциям(КомандыЭДО, Форма);
	
	Возврат КомандыЭДО;
	
КонецФункции

#КонецОбласти

// Определяет единственную организацию в информационной базе.
// 
// Возвращаемое значение:
// СправочникСсылка.Организации.ПустаяСсылка - не удалось определить организацию.
// СправочникСсылка.Организации - организация для автоматической подстановки.
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Если Не Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(Тип("Строка")) Тогда
		ПолноеИмя = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.Организация.Тип.Типы()[0]).ПолноеИмя();
		ИмяСправочникаОрганизации = "Справочники." + СтрРазделить(ПолноеИмя, ".")[1];
		МодульОрганизации = ОбщегоНазначения.ОбщийМодуль(ИмяСправочникаОрганизации);
		ОрганизацияПоУмолчанию = МодульОрганизации.ОрганизацияПоУмолчанию();
	Иначе
		ОрганизацияПоУмолчанию = Справочники[СтрРазделить(ПолноеИмя, ".")[1]].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОрганизацияПоУмолчанию;
	
КонецФункции

// Получает сокращенное наименование организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на организацию.
//
// Возвращаемое значение:
//  Строка - сокращенное наименование организации.
//
Функция СокращенноеНаименованиеОрганизации(Организация) Экспорт
	
	РеквизитНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СокращенноеНаименованиеОрганизации");
	Если НЕ ЗначениеЗаполнено(РеквизитНаименованиеОрганизации) Тогда
		РеквизитНаименованиеОрганизации = "Наименование";
	КонецЕсли;
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, РеквизитНаименованиеОрганизации);
	
КонецФункции

// Проверка модификации объекта для обмена ЭД.
//
// Параметры:
//  Источник - Объект - объект для проверки.
//  ПризнакИзменения - Булево - признак изменения.
//
Процедура ПроверитьМодификациюОбъектаДляОбменаЭД(Источник, ПризнакИзменения = Ложь) Экспорт
	
	Если ПризнакИзменения ИЛИ Источник.ЭтоНовый() Тогда
		ЗарегистрироватьОбъект = Истина;
	Иначе
		ЗарегистрироватьОбъект = НадоЗарегистрироватьОбъект(Источник, Источник.Метаданные());
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъект", ЗарегистрироватьОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись событий в журнал регистрации. Обработка ошибок

// Данная процедура используется для стандартизации всех записей событий подсистемы ЭлектронноеВзаимодействие
// в журнал регистрации. В результате в журнал добавляется группировка записей с иерархией.
//  Электронное взаимодействие:
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//    |_ Бизнес-сеть
// Параметры:
//   ОписаниеСобытия - Строка - описание содержания события, которое требуется записать в журнал регистрации.
//   КодСобытия - Число - код события, используется для стандартизации иерархии событий.
//                Может принимать значения: 0 - Общая подсистема, 1 - Обмен с банками, 2 - Обмен с контрагентами,
//                                          3 - Обмен с сайтами, 4 - Регламентные задания, 5 - Бизнес-сеть,
//                                          6 - Интеграция с Яндекс.Кассой.
//   УровеньВажности - УровеньЖурналаРегистрации - уровень журнала регистрации (Ошибка, Информация, и т.д.).
//   ОбъектМетаданных - ОбъектМетаданных - объект метаданных, к которому относится событие.
//   ДанныеСсылка - Произвольный - данные, с которыми связано событие. Рекомендуется указывать ссылки на объекты данных
//                  (элементы справочников, документы, к которым относится событие).
//   РежимТранзакции - РежимТранзакцииЗаписиЖурналаРегистрации - указывает отношение записи к текущей транзакции.
//
Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия, КодСобытия, УровеньВажности = Неопределено,
	ОбъектМетаданных = Неопределено, ДанныеСсылка = Неопределено, РежимТранзакции = Неопределено) Экспорт
	
	
	Если КодСобытия = 0 Тогда Подсистема = НСтр("ru = 'Общая подсистема'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 1 Тогда Подсистема = НСтр("ru = 'Обмен с банками'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 2 Тогда Подсистема = НСтр("ru = 'Обмен с контрагентами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 3 Тогда Подсистема = НСтр("ru = 'Обмен с сайтами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 4 Тогда Подсистема = НСтр("ru = 'Регламентные задания'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 5 Тогда Подсистема = НСтр("ru = 'Бизнес-сеть'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 6 Тогда Подсистема = НСтр("ru = 'Интеграция с Яндекс Кассой'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		Подсистема = НСтр("ru = 'Общая подсистема'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
		
	ИмяСобытия = СтрЗаменить(НСтр("ru = 'Электронное взаимодействие.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		"%1", Подсистема);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия,
		РежимТранзакции);
	
КонецПроцедуры

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа.'");
	ЭлектронноеВзаимодействиеПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операции для работы с HTTP

// Функция формирует прокси по настройкам прокси и протоколу.
//
// Параметры:
//  Протокол - Строка - протокол для которого устанавливаются параметры прокси сервера, например http, https, ftp.
//
// Возвращаемое значение:
//  ИнтернетПрокси - описание параметров прокси-серверов.
// 
Функция СформироватьПрокси(Протокол) Экспорт
	
	// НастройкаПроксиСервера - Соответствие:
	//  ИспользоватьПрокси - использовать ли прокси-сервер;
	//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов;
	//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера;
	//  Сервер       - адрес прокси-сервера;
	//  Порт         - порт прокси-сервера;
	//  Пользователь - имя пользователя для авторизации на прокси-сервере;
	//  Пароль       - пароль пользователя.
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
					НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Определяет параметры HTTP соединения по URL адресу.
//
// Параметры:
//  АдресСайта - Строка - URL сайта;
//  ЗащищенноеСоединение - Булево - возвращает Истина, если требуется шифрование;
//  Адрес - Строка - адрес сайта без протокола;
//  Протокол - Строка - название протокола.
//
Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол) Экспорт
	
	АдресСайта = СокрЛП(АдресСайта);
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
	
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта,8);
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол =  "https";
		Адрес = Сред(АдресСайта,9);
		
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровОС;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL( , СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
КонецПроцедуры

// Разделение строки на элементы массива.
//
// Параметры:
//  Строка		 - Строка - строка для разделения.
//  Разделитель	 - Строка - разделитель.
// 
// Возвращаемое значение:
//  Массив - результат разделения.
//
Функция МассивПодстрок(Знач Строка, Разделитель) Экспорт
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = СтрНайти(Строка, "{");
	КонПозицияПервогоЭлемента = СтрНайти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

// Расшифровка кода состояния HTTP.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервера.
//
// Возвращаемое значение:
// Строка - расшифровка кода состояния.
//
Функция РасшифровкаКодаСостоянияHTTP(КодСостояния) Экспорт
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'Сервер обнаружил в запросе клиента синтаксическую ошибку.'"));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'Неверные данные аутентификации.'"));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'У клиента нет доступа к ресурсу.'"));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'На сервере нет ресурса по указанному URI.'"));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'Указанный клиентом метод нельзя применить к текущему ресурсу.'"));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'Запрошенный URI не может удовлетворить переданным в заголовке характеристикам.'"));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'Для доступа к серверу требуется аутентификация для прокси-сервера.'"));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'Время ожидания сервером передачи от клиента истекло.'"));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.'"));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'Ресурс был удален и теперь недоступен.'"));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'Не указан объем передаваемых данных в заголовке.'"));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'Ни одно из условных полей заголовка запроса не было выполнено.'"));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'Сервер отказался обработать запрос по причине слишком большого размера тела запроса.'"));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'Сервер не может обработать запрос из-за слишком длинного указанного URL.'"));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'Сервер отказывается работать с указанным типом данных при данном методе.'"));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'Имеется логическая ошибка, из-за которой невозможно произвести операцию.'"));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'Целевой ресурс из запроса заблокирован от применения к нему указанного метода.'"));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'Клиенту на необходимость обновить протокол.'"));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'Клиент попытался отправить слишком много запросов за короткое время.'"));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'Превышена допустимая длина заголовков.'"));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'Запрашиваемый адрес недоступен.'"));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'Поступило недостаточно информации.'"));
	СоответствиеКодов.Вставить(451, НСтр("ru = 'Доступ к ресурсу закрыт по юридическим причинам.'"));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервера.'"));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'Сервер не поддерживает возможностей, необходимых для обработки запроса.'"));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'Сервер, выступая в роли шлюза или прокси-сервера, получил недействительное ответное сообщение от вышестоящего сервера.'"));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'Сервер временно не имеет возможности обрабатывать запросы по техническим причинам.'"));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'Сервер в роли шлюза или прокси-сервера не дождался ответа от вышестоящего сервера для завершения текущего запроса.'"));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'Сервер не поддерживает указанную в запросе версию протокола HTTP.'"));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'Не хватает места для выполнения текущего запроса.'"));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'На сервере отсутствует расширение, которое желает использовать клиент.'"));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'Необходимо авторизоваться в сети провайдера.'"));
	
	Возврат СоответствиеКодов.Получить(КодСостояния);
	
КонецФункции

// Отправляет данные через интернет.
//
// Параметры:
//  АдресСервера - Строка - URI;
//  Ресурс - Строка - ресурс, на который отправляются данные;
//  Заголовки - Соответствие - заголовки запроса;
//  Данные - ДвоичныеДанные - тело запроса;
//  ПолучитьТелоКакСтроку - Булево - признак необходимости получения тела как строки;
//  Таймаут - Число - таймаут ожидания ответа сервера;
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Статус - Булево - результат получения файла.
//      * Тело - ДвоичныеДанные, Строка, Неопределено - данные ответа сервера.
//      * СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке, если статус Ложь.
//      * КодСостояния - Число, Неопределено - код состояния HTTP-ответа. Наличие кода означает, что был ответ от сервера.
//
Функция ОтправитьЗапросНаСервер(АдресСервера, Ресурс, Заголовки, Данные = Неопределено, ПолучитьТелоКакСтроку = Ложь, Таймаут = 60) Экспорт
	
	СтруктураВозврата = Новый Структура("Статус, Тело, СообщениеОбОшибке, КодСостояния");
	
	Соединение = СоединениеССервером(АдресСервера, Таймаут);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	Если НЕ Данные = Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Данные);
	КонецЕсли;

	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния = 200 Тогда
		СтруктураВозврата.Статус = Истина;
		Если ПолучитьТелоКакСтроку Тогда
			СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакСтроку();
		Иначе
			СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакДвоичныеДанные();
		КонецЕсли;
	Иначе
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = РасшифровкаКодаСостоянияHTTP(Ответ.КодСостояния);
		СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	СтруктураВозврата.КодСостояния = Ответ.КодСостояния;

	Возврат СтруктураВозврата;
	
КонецФункции

// Отправляет данные через интернет.
//
// Параметры:
//  АдресСервера - Строка - URI;
//  Ресурс - Строка - ресурс, с которого будут получены данные;
//  Заголовки - Соответствие - заголовки запроса;
//  Таймаут - Число - таймаут ожидания ответа сервера;
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Статус - Булево - результат получения файла.
//      * Тело - Строка  - путь к файлу с телом ответа сервера.
//      * СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке, если статус Ложь.
//      * КодСостояния - Число, Неопределено - код состояния HTTP-ответа. Наличие кода означает, что был ответ от сервера.
//
Функция ПолучитьДанныеССервера(АдресСервера, Ресурс, Заголовки = Неопределено, Таймаут = 60) Экспорт
	
	СтруктураВозврата = Новый Структура("Статус, Тело, СообщениеОбОшибке, КодСостояния");
	
	Соединение = СоединениеССервером(АдресСервера, Таймаут);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	Тело = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		Ответ = Соединение.Получить(HTTPЗапрос, Тело);
	Исключение
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		УдалитьВременныеФайлы(Тело);
		
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния = 200 Тогда
		СтруктураВозврата.Статус = Истина;
	Иначе
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = РасшифровкаКодаСостоянияHTTP(Ответ.КодСостояния);
	КонецЕсли;
	
	СтруктураВозврата.КодСостояния = Ответ.КодСостояния;
	СтруктураВозврата.Тело = Тело;
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Файловые операция

// Выгружает электронный документ в файл.
//
// Параметры:
//  ЭД - ЗначениеXDTO, ОбъектXDTO, Неопределено - Записываемое значение.
//  ИмяФайла - Строка - путь к файлу, в который сохраняются данные;
//  УказаниеТипа - НазначениеТипаXML - вариант назначения типа элемента данных XDTO.
//  ТипКодировки - Строка - файл будет записан в соответствующей кодировке.
//
Процедура ВыгрузитьЭДВФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "windows-1251") Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

// Возвращает временный рабочий каталог для работы с файлами ЭДО.
// Каталог создается в каталоге временных файлов системы или ином предопределенном каталоге.
//
// Параметры:
//  Подкаталог - Строка - вложенный каталог первого уровня (не используется, оставлено для совместимости).
//  КлючУникальности - Строка - вложенный каталог второго уровня (не используется, оставлено для совместимости).
//
// Возвращаемое значение:
//  Строка - временный каталог.
//
Функция РабочийКаталог(Знач Подкаталог = "", Знач КлючУникальности = "") Экспорт
	
	ИмяКаталога = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
	СоздатьКаталог(ИмяКаталога);
	Возврат ИмяКаталога;
	
КонецФункции

// Текущий каталог временных файлов. Может быть переопределен.
// 
// Возвращаемое значение:
//  Строка - временный каталог.
//
Функция ТекущийКаталогВременныхФайлов() Экспорт
	
	ТекущийКаталог = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ТекущийКаталогВременныхФайлов(ТекущийКаталог);
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ТекущийКаталог;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива.
// Проверяется максимальная длина полного имени файла в 255 символов.
// 
// Параметры:
//  АрхивЧтение - ЧтениеZIPФайла - открытий zip архив.
//  КаталогРаспаковки - Строка - папка, в которую будут извлечены данные.
//  ИмяСоздаваемогоФайла - Строка - имя файла, который не может быть извлечен.
//
// Возвращаемое значение:
//  Булево - если возможно то Истина, иначе Ложь.
//
Функция ВозможноИзвлечьФайлы(АрхивЧтение, КаталогРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(КаталогРаспаковки);
	
	Для Каждого Элемент Из АрхивЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Удаляет временные файлы или каталог.
//
// Параметры:
//  Путь - Строка - полный путь к файлу или каталогу
//  Маска - Строка - маска для выбора удаляемых файлов,
//        - Неопределено - удаляются все файлы и каталог <Путь>.
//
Процедура УдалитьВременныеФайлы(Путь, Маска = Неопределено) Экспорт
	
	Попытка
		УдалитьФайлы(Путь, Маска);
	Исключение
		ВидОперации = НСтр("ru = 'Удаление временного файла.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, , 0);
	КонецПопытки;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Криптография

// Создает на сервере менеджер криптографии. Пароль не устанавливается.
//
// Параметры:
//  Отказ - Булево -  признак возникновения ошибки создания менеджера криптографии;
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии.
//
Функция МенеджерКриптографии(Отказ) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("");
	
	Если МенеджерКриптографии = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Проверяет действительность подписи, без учета списка отозванных сертификатов.
// В случае ошибки генерирует исключение.
//
// Параметры:
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии.
//  ДвоичныеДанныеФайла   - ДвоичныеДанные - двоичные данные файла.
//  ДвоичныеДанныеПодписи - ДвоичныеДанные - двоичные данные подписи.
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
	
КонецПроцедуры

// Формирует данные подписи объекта.
//
// Параметры:
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии;
//  ОбъектДляПодписиСсылка  - ЛюбаяСсылка - ссылка на подписываемый объект;
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи;
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий.
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭП.
//
Функция СформироватьДанныеПодписи(МенеджерКриптографии, ОбъектДляПодписиСсылка, ДвоичныеДанные, СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.ПарольПользователя;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СтруктураПараметровПодписи.Сертификат);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ОбъектСсылка",               ОбъектДляПодписиСсылка);
	ДанныеПодписи.Вставить("Отпечаток",                  Отпечаток);
	ДанныеПодписи.Вставить("ДатаПодписи",                ДатаПодписи);
	ДанныеПодписи.Вставить("Комментарий",                СтруктураПараметровПодписи.Комментарий);
	ДанныеПодписи.Вставить("ИмяФайлаПодписи",            "");
	ДанныеПодписи.Вставить("КомуВыданСертификат",        КомуВыданСертификат);
	ДанныеПодписи.Вставить("АдресФайла",                 "");
	ДанныеПодписи.Вставить("Подпись",                    НоваяПодписьДвоичныеДанные);
	ДанныеПодписи.Вставить("Сертификат",                 ДвоичныеДанныеСертификата);
	
	Возврат ДанныеПодписи;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дерево разбора

// Создает пустой объект ДереваРазбора.
//
// Возвращаемое значение:
//   ДеревоЗначений - пустое дерево с колонками.
//
Функция ИнициализироватьДеревоРазбора() Экспорт
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	ДеревоРазбора.Колонки.Добавить("ДопДанные");
	
	ДеревоРазбора.Колонки.Добавить("ТипЭлементаВерсииЭД");
	
	Возврат ДеревоРазбора;
	
КонецФункции

// Находит или создает новый тип в дереве разбора.
//
// Параметры:
//    ДеревоРазбора - ДеревоЗначений - исходное дерево значений;
//    ЗначениеТипаОбъекта - Произвольный - искомый тип объекта.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - найденная или созданная строка.
//
Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта) Экспорт
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

// Добавляет реквизит в шапку объекта.
//
// Параметры:
//  СтрокаЭлементов - СтрокаДереваЗначений - текущая строка дерева значений;
//  ИмяРеквизита - Строка - название добавляемого реквизита;
//  ЗначениеРеквизита - Произвольный - значение добавляемого реквизита;
//  СсылкаНаОбъект - Произвольный - ссылка на связанный объект информационной базы.
//
Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено) Экспорт
	
	НовСтрока = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет дополнительные реквизиты в табличную часть объекта.
//
// Параметры:
//  СтрокаЭлементов - СтрокаДереваЗначений - строка дерева значений, в которую помещаются дополнительные реквизиты;
//  ИмяТЧ - Строка - название табличной части в дереве значений;
//  СписокРеквизитов - СписокЗначений - список помещаемых реквизитов.
//
Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов) Экспорт
	
	// Добавить в реквизиты ТЧ ОбменСКонтрагентами
	НовСтрока          = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ                   = НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит          = ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита = ТекЭлСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет дополнительные реквизиты в дерево данных.
//
// Параметры:
//  СтрокаДереваРазбора - СтрокаДереваЗначений - строка дерева, в которую помещаются дополнительные реквизиты;
//  ДопРеквизиты - Структура - коллекция помещаемых дополнительных реквизитов;
//  ДеревоРазбора - ДеревоЗначений - исходное дерево данных;
//  Отказ - Булево - признак возникновения ошибки выполнения метода.
//
Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь) Экспорт
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если НЕ ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
					
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") И НЕ ТекЭл.Ключ = "ЗначенияСвойств" И НЕ ТекЭл.Ключ = "Картинки" Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поищем, возможно уже есть такой реквизит с таким же значением.
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина);
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит          = ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// Если ИндексСтроки, то попытка найти СсылкуНаОбъект.
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
						Если НайденнаяСтрока <> Неопределено Тогда
							Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
								НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
//  ОписаниеТипаОбъекта - Строка - текстовое представление типа объекта.
//
// Возвращаемое значение:
//  Строка - тип справочника.
//
Функция ТипОбъекта(ОписаниеТипаОбъекта) Экспорт
	
	ТипОбъекта = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ОписаниеТипаОбъекта);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ТипОбъекта = "СправочникСсылка." + ИмяПрикладногоСправочника;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Значение реквизита в дереве.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть - Произвольный - значение поиска.
//  СообщатьОбОшибке - Булево - если Истина сообщать об ошибках поиска.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина) Экспорт
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	ИначеЕсли СообщатьОбОшибке Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено поле в дереве данных по полному пути <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолныйПуть);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// Добавляет значение в дерево данных.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево, в которое помещается новое значение;
//  ИмяРеквизита - Строка - название помещаемого реквизита;
//  ЗначениеРеквизита - Произвольный - значение помещаемого реквизита.
//
Процедура ДобавитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	СтрокаДерева = ДеревоДанных.Строки.Найти(ИмяРеквизита);
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДеревоДанных.Строки.Добавить();
	КонецЕсли;
	НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
	СтрокаДерева.ПолныйПуть = ИмяРеквизита;
	СтрокаДерева["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	СтрокаДерева.Значение = ЗначениеРеквизита;

КонецПроцедуры

// Проверяет заполнение обязательных реквизитов дерева
// Параметры:
//  ДеревоДанных - деревоЗначений - дерево с данными.
//  ТекстОшибки - Строка - содержит текст ошибки.
//  ЭтоТаблица - Булево - если Истина, то проверяется табличная часть.
//  НомерСтроки - Число, Неопределено - номер проверяемой строки табличной части.
//
Процедура ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки, ЭтоТаблица = Ложь, НомерСтроки = Неопределено) Экспорт
	
	// Если в дереве есть поле ТестОшибки значит на этапе формирования дерева возникли ошибки
	// например, не сопоставлена номенклатура с номенклатурой поставщика.
	ТекстОшибкиСопоставления = ЗначениеРеквизитаВДереве(ДеревоДанных, "ТекстОшибки", Ложь);
	Если ЗначениеЗаполнено(ТекстОшибкиСопоставления) Тогда
		ТекстОшибки = ТекстОшибкиСопоставления;
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ДеревоДанных.Строки Цикл
		
		Если Строка.Обязательное = "Да" И Не ЗначениеЗаполнено(Строка.Значение)
										И Не ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			ПрикладноеПредставление = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПрикладноеПредставлениеРеквизита(Строка.КодПредставления);
			Если Не ЗначениеЗаполнено(ПрикладноеПредставление) Тогда
				ПрикладноеПредставление = СтрЗаменить(Строка.ПолныйПуть, ".", " - ");
			КонецЕсли;
			Если ЭтоТаблица Тогда
				ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле таблицы: ""%1."" в строке %2'");
				ТекстОшибки = ТекстОшибки
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПрикладноеПредставление, НомерСтроки)
							+ Символы.ПС;
			Иначе
				ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле: ""%1.""'");
				ТекстОшибки = ТекстОшибки
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПрикладноеПредставление)
							+ Символы.ПС;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Строка.Признак = "Таблица" И (ТипЗнч(Строка.Значение) = Тип("Число") И Строка.Значение > 0 ИЛИ Строка.Обязательное = "Да")Тогда
			Для Каждого СтрокаТаблицы Из Строка.Строки Цикл
				ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(СтрокаТаблицы, ТекстОшибки, Истина, СтрокаТаблицы.Значение);
			КонецЦикла
		ИначеЕсли Строка.Признак = "Выбор" И (ЗначениеЗаполнено(Строка.Значение) ИЛИ Строка.Обязательное = "Да") Тогда
			ПроверяемаяСтрока = Строка.Строки.Найти(Строка.ПолныйПуть + "." + Строка.Значение, "ПолныйПуть");
			Если ЗначениеЗаполнено(ПроверяемаяСтрока) Тогда
				ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ПроверяемаяСтрока, ТекстОшибки);
			Иначе
				ПрикладноеПредставление = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПрикладноеПредставлениеРеквизита(Строка.КодПредставления);
				Если Не ЗначениеЗаполнено(ПрикладноеПредставление) Тогда
					ПрикладноеПредставление = СтрЗаменить(Строка.ПолныйПуть, ".", " - ");
				КонецЕсли;
				ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле: ""%1.""'");
				ТекстОшибки = ТекстОшибки
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПрикладноеПредставление)
							+ Символы.ПС;
			КонецЕсли;
		ИначеЕсли Строка.Признак = "Группа" И Строка.Значение = Истина И Строка.Строки.Количество() > 0 Тогда
			ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(Строка, ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устарела. Не используется. Обработчик подписки на событие ЗаполнитьВидыЭДДляСертификатаЭП.
//
// Параметры:
//  Источник - СправочникОбъект.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат криптографии;
//  Отказ - Булево - Признак отказа от записи элемента.
//
Процедура ЗаполнитьВидыЭДДляСертификатаЭППередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Источник.Ссылка;
	Если СсылкаНаОбъект.Пустая() Тогда
		СсылкаНаОбъект = Источник.ПолучитьСсылкуНового();
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Источник.Ссылка).ПолучитьСсылку();
			Источник.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
		РегистрыСведений.ПодписываемыеВидыЭД.СохранитьПодписываемыеВидыЭД(СсылкаНаОбъект);
	КонецЕсли;

КонецПроцедуры

// Скрытие областей табличного документа.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, где скрываются области.
//  ИменаОбластей - Строка - Имена скрываемых областей через запятую.
//  ТипСмещения - ТипСмещенияТабличногоДокумента - тип смещения удаляемой области.
//
Процедура СкрытьОбластиТабличногоДокумента(ТабличныйДокумент, ИменаОбластей, Знач ТипСмещения = Неопределено) Экспорт
	
	Если ТипСмещения = Неопределено Тогда
		ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали;
	КонецЕсли;
	
	Если ТипЗнч(ИменаОбластей) <> Тип("Массив") Тогда
		Области = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИменаОбластей, ",");
	КонецЕсли;
	
	Для каждого ИмяОбласти Из Области Цикл
		
		ЕстьОбластьДД = ТабличныйДокумент.Области.Найти(СокрЛП(ИмяОбласти));
		
		Если ЕстьОбластьДД <> Неопределено Тогда
			ОбластьШапки = ТабличныйДокумент.Области.Найти("Шапка");
			ОбластьТаблицы = ТабличныйДокумент.Область(ИмяОбласти);
			
			Верх = ?(ОбластьТаблицы.Лево = 0 И ОбластьТаблицы.Право = 0 ИЛИ ОбластьШапки = Неопределено,
				ОбластьТаблицы.Верх, ОбластьШапки.Низ + 1);
				
			Если ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали Тогда
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, ОбластьТаблицы.Лево,
					ТабличныйДокумент.ВысотаТаблицы, ОбластьТаблицы.Право);
			ИначеЕсли ТипСмещения = ТипСмещенияТабличногоДокумента.БезСмещения Тогда 
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, ОбластьТаблицы.Лево,
					ОбластьТаблицы.Низ, ОбластьТаблицы.Право);
				Если ИмяОбласти = "ИдентификаторДокумента" Тогда
					ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали;	
				КонецЕсли;
			Иначе
				Низ = ТабличныйДокумент.ВысотаТаблицы;
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, , Низ,);
			КонецЕсли; 
				
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Значение реквизита строки дерева разбора.
//
// Параметры:
//  ДеревоРазбора	 - ДеревоЗначений - объект поиска.
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значений.
//  ПутьКРеквизиту	 - Строка - путь к реквизиту.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = СтрНайти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если СтрНайти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Функция НадоЗарегистрироватьОбъект(Источник, ОбъектМетаданных)
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	ТаблицаРеквизитовРегистрации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КлючевыеРеквизитыОбъекта(ИмяОбъекта);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// Если перечень реквизитов не задан, то считаем, что объект модифицирован всегда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации Из ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дошли до конца, то объект не изменился по реквизитам регистрации;
	// Регистрация не нужна.
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1 - ТаблицаЗначений - первая таблица проверки, реквизиты, которые надо проверить на совпадение.
//  Таблица2 - ТаблицаЗначений - вторая таблица проверки.
//  РеквизитыОбъекта - Строка - реквизиты, перечисленные через запятую.
//  ДопПараметры - Структура - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = НСтр("ru ='Реквизиты шапки'");
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРеквизита.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРеквизита.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = СтрШаблон(НСтр("ru ='Табличная часть <%1>'"), ИмяТабличнойЧасти);
			НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРеквизита.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

Функция РеквизитыРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция РеквизитыРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Создает соединение с сервером в интернет.
//
// Параметры:
//  АдресСервера - Строка - URI
//  Таймаут - Число - Определяет время ожидания осуществляемого соединения и операций, в секундах. 0 - таймаут не установлен.
// 
// Возвращаемое значение:
// HTTPСоединение - предназначен для работы с файлами на http-серверах.
//
Функция СоединениеССервером(АдресСервера, Таймаут)
	
	Перем ЗащищенноеСоединение;
	Адрес = "";
	Протокол = "";
	
	ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = СформироватьПрокси(Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , ,Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;

КонецФункции

// Создает пустую таблицу для размещения в нее команд ЭДО.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание команд ЭДО:
//
//  * Идентификатор - Строка - Идентификатор команды ЭДО, по которому менеджер ЭДО определяет печатную
//                             форму, которую необходимо сформировать.
//                             Пример: "СчетЗаказ".
//                  - Массив - список идентификаторов команд ЭДО.
//
//  * Представление - Строка            - Представление команды в меню ЭДО. 
//                                         Пример: "Просмотр документа".
//
//  * Обработчик    - Строка            - (необязательный) Клиентский обработчик команды, в который необходимо передать
//                                        управление.
//
//  * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню ЭДО осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию: 50.
//
//  * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню ЭДО.
//                                         Пример: БиблиотекаКартинок.ФорматPDF.
//
//  * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда ЭДО будет отображаться во
//                                        всех формах объекта, где встроена подсистема ЭДО.
//                                         Пример: "ФормаДокумента".
//
//  * МестоРазмещения - Строка          - (необязательный) Имя командной панели формы, в которую необходимо разместить
//                                        команду ЭДО. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "ЭДО". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове метода.
//                                        
//  * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды ЭДО.
//
Функция СоздатьКоллекциюКомандЭДО()
	
	Результат = Новый ТаблицаЗначений;
	
	// описание
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//////////
	// Опции (необязательные параметры).
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// представление
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Отображение", Новый ОписаниеТипов("ОтображениеКнопки"));
	
	// Имена форм для размещения команд, разделитель - запятая.
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	// Имена функциональных опций, влияющих на видимость команды, разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("РежимИспользованияПараметра", Новый ОписаниеТипов("РежимИспользованияПараметраКоманды"));
	
	// дополнительные параметры
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Специальный режим выполнения команды
	// по умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеВыполнятьЗаписьВФорме", Новый ОписаниеТипов("Булево"));
	
	// Для служебного использования.
	Результат.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отключена", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("ТолькоВоВсехДействиях", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Недоступна", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

// Создает подменю "ЭДО" на форме и добавляет в него команды ЭДО.
// Если команда ЭДО одна, то вместо подменю добавляется кнопка с названием печатной формы.
Процедура ДобавитьКомандыЭДО(Форма, КомандыЭДО, Знач МестоРазмещенияКоманд = Неопределено)
	
	МестоРазмещения = МестоРазмещенияКоманд;
	Для Каждого ОписаниеКомандыЭДО Из КомандыЭДО Цикл
		
		// Отключение команды загрузки ЭД без ЭП в формах документов.
		Если ОписаниеКомандыЭДО.Идентификатор = "ЗагрузитьЧерезБизнесСеть" Тогда
			МассивРеквизитов = Форма.ПолучитьРеквизиты();
			ЭтоФормаОбъекта = Ложь;
			Для Каждого Реквизит Из МассивРеквизитов Цикл
				Если Реквизит.Имя = "Объект" Тогда
					ЭтоФормаОбъекта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЭтоФормаОбъекта Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НомерКоманды = ОписаниеКомандыЭДО.Владелец().Индекс(ОписаниеКомандыЭДО);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + ОписаниеКомандыЭДО.Идентификатор + НомерКоманды;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуЭДО";
		КомандаФормы.Заголовок = ОписаниеКомандыЭДО.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыЭДО.Отображение) Тогда 
			КомандаФормы.Отображение = ОписаниеКомандыЭДО.Отображение;
		Иначе 
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыЭДО.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыЭДО.Картинка;
		КонецЕсли;
		
		ОписаниеКомандыЭДО.ИмяКомандыНаФорме = ИмяКоманды;
		
		МестоРазмещенияИмя = МестоРазмещенияКоманд.Имя + ОписаниеКомандыЭДО.МестоРазмещения;
		Если Форма.Элементы.Найти(МестоРазмещенияИмя) = Неопределено Тогда
			МестоРазмещения = Форма.Элементы.Добавить(МестоРазмещенияИмя, Тип("ГруппаФормы"), МестоРазмещения);
			МестоРазмещения.Вид = ВидГруппыФормы.ГруппаКнопок;
		КонецЕсли; 
		
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещения);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		НовыйЭлемент.Видимость = Не ОписаниеКомандыЭДО.Недоступна;
		НовыйЭлемент.ТолькоВоВсехДействиях = ОписаниеКомандыЭДО.ТолькоВоВсехДействиях;
		
	КонецЦикла;
	
КонецПроцедуры

// Фильтрует список команд ЭДО в соответствии с установленными функциональными опциями.
Процедура ОпределитьВидимостьКомандЭДОПоФункциональнымОпциям(КомандыЭДО, Форма = Неопределено)
	Для НомерКоманды = -КомандыЭДО.Количество() + 1 По 0 Цикл
		ОписаниеКомандыЭДО = КомандыЭДО[-НомерКоманды];
		ФункциональныеОпцииКомандыЭДО = СтрРазделить(ОписаниеКомандыЭДО.ФункциональныеОпции, ", ", Ложь);
		ВидимостьКоманды = ФункциональныеОпцииКомандыЭДО.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыЭДО Цикл
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
				ВидимостьКоманды = ВидимостьКоманды Или Форма.ПолучитьФункциональнуюОпциюФормы(ФункциональнаяОпция);
			Иначе
				ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			КонецЕсли;
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеКомандыЭДО.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти