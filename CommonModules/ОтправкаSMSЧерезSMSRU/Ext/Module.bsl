////////////////////////////////////////////////////////////////////////////////
// Подсистема "Отправка SMS"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Отправляет SMS через SMS.RU.
//
// Параметры:
//  НомераПолучателей - Массив - номера получателей в формате +7ХХХХХХХХХХ;
//  Текст 			  - Строка - текст сообщения, длиной не более 480 символов;
//  ИмяОтправителя 	  - Строка - имя отправителя, которое будет отображаться вместо номера входящего SMS;
//  Логин			  - Строка - логин пользователя услуги отправки sms;
//  Пароль			  - Строка - пароль пользователя услуги отправки sms.
//
// Возвращаемое значение:
//  Структура: ОтправленныеСообщения - Массив структур: НомерОтправителя.
//                                                  ИдентификаторСообщения.
//             ОписаниеОшибки        - Строка - пользовательское представление ошибки, если пустая строка,
//                                          то ошибки нет.
Функция ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль) Экспорт
	
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	
	// Подготовка строки получателей.
	СтрокаПолучателей = МассивПолучателейСтрокой(НомераПолучателей);
	
	// Проверка на заполнение обязательных параметров.
	Если ПустаяСтрока(СтрокаПолучателей) Или ПустаяСтрока(Текст) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверные параметры сообщения'");
		Возврат Результат;
	КонецЕсли;
	
	// Получение токена.
	ИмяФайлаОтвета = ВыполнитьЗапрос("auth/get_token", Новый Структура);
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета);
	Токен = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	// Подготовка передачи пароля.
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(КодироватьСтроку(Пароль, СпособКодированияСтроки.КодировкаURL)+Токен);
	КодАвторизации = НРег(СтрЗаменить(ХешированиеДанных.ХешСумма, " ", ""));
	
	// Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("login", Логин);
	ПараметрыЗапроса.Вставить("token", Токен);
	ПараметрыЗапроса.Вставить("sig", КодАвторизации);
	
	ПараметрыЗапроса.Вставить("text", Текст);
	ПараметрыЗапроса.Вставить("to", СтрокаПолучателей);
	ПараметрыЗапроса.Вставить("from", ИмяОтправителя);
	
	// отправка запроса
	ИмяФайлаОтвета = ВыполнитьЗапрос("sms/send", ПараметрыЗапроса);
	Если ПустаяСтрока(ИмяФайлаОтвета) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + НСтр("ru = 'Соединение не установлено'");
		Возврат Результат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета);
	ОтветСервера = ЧтениеТекста.ПрочитатьСтроку();
	Если ОтветСервера = "100" Тогда
		Для Каждого НомерПолучателя Из СтрРазделить(СтрокаПолучателей, ",", Ложь) Цикл
			ИдентификаторСообщения = ЧтениеТекста.ПрочитатьСтроку();
			Если ИдентификаторСообщения = Неопределено Тогда
				Результат.ОписаниеОшибки = НСтр("ru = 'Ответ сервера не распознан'");
				Прервать;
			КонецЕсли;
			
			Если Не ПустаяСтрока(НомерПолучателя) Тогда
				ОтправленноеСообщение = Новый Структура("НомерПолучателя,ИдентификаторСообщения",
					НомерПолучателя,ИдентификаторСообщения);
				Результат.ОтправленныеСообщения.Добавить(ОтправленноеСообщение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат.ОписаниеОшибки = ОписаниеОшибкиОтправки(ОтветСервера);
	КонецЕсли;
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

// Возвращает текстовое представление статуса доставки сообщения.
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный sms при отправке;
//  НастройкиОтправкиSMS   - Структура - см. ОтправкаSMSПовтИсп.НастройкиОтправкиSMS;
//
// Возвращаемое значение:
//  Строка - статус доставки. См. описание функции ОтправкаSMS.СтатусДоставки.
Функция СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS) Экспорт
	
	Логин = НастройкиОтправкиSMS.Логин;
	Пароль = НастройкиОтправкиSMS.Пароль;
	
	// Получение токена.
	ИмяФайлаОтвета = ВыполнитьЗапрос("auth/get_token", Новый Структура);
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета);
	Токен = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	// Подготовка передачи пароля.
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(КодироватьСтроку(Пароль, СпособКодированияСтроки.КодировкаURL)+Токен);
	КодАвторизации = НРег(СтрЗаменить(ХешированиеДанных.ХешСумма, " ", ""));
	
	// Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("login", Логин);
	ПараметрыЗапроса.Вставить("token", Токен);
	ПараметрыЗапроса.Вставить("sig", КодАвторизации);
	ПараметрыЗапроса.Вставить("id", ИдентификаторСообщения);
	
	// отправка запроса
	ИмяФайлаОтвета = ВыполнитьЗапрос("sms/status", ПараметрыЗапроса);
	Если ПустаяСтрока(ИмяФайлаОтвета) Тогда
		Возврат "Ошибка";
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета);
	КодСостояния = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяФайлаОтвета);
	
	Результат = СтатусДоставкиSMS(КодСостояния);
	Если Результат = "Ошибка" Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить статус доставки SMS (id: ""%3""):
			|%1 (код ошибки: %2)'"), ОписаниеОшибкиПолученияСтатуса(КодСостояния), КодСостояния, ИдентификаторСообщения);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусДоставкиSMS(КодСостояния)
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("-1", "НеОтправлялось");
	СоответствиеСтатусов.Вставить("100", "НеОтправлялось");
	СоответствиеСтатусов.Вставить("101", "Отправляется");
	СоответствиеСтатусов.Вставить("102", "Отправлено");
	СоответствиеСтатусов.Вставить("103", "Доставлено");
	СоответствиеСтатусов.Вставить("104", "НеДоставлено");
	СоответствиеСтатусов.Вставить("105", "НеДоставлено");
	СоответствиеСтатусов.Вставить("106", "НеДоставлено");
	СоответствиеСтатусов.Вставить("107", "НеДоставлено");
	СоответствиеСтатусов.Вставить("108", "НеДоставлено");
	
	Результат = СоответствиеСтатусов[НРег(КодСостояния)];
	Возврат ?(Результат = Неопределено, "Ошибка", Результат);
КонецФункции

Функция ОписанияОшибок()
	ОписанияОшибок = Новый Соответствие;
	ОписанияОшибок.Вставить("200", НСтр("ru = 'Авторизация не выполнена: неверный api_id.'"));
	ОписанияОшибок.Вставить("201", НСтр("ru = 'Не достаточно средств на лицевом счету.'"));
	ОписанияОшибок.Вставить("202", НСтр("ru = 'Неправильно указан получатель.'"));
	ОписанияОшибок.Вставить("203", НСтр("ru = 'Нет текста сообщения.'"));
	ОписанияОшибок.Вставить("204", НСтр("ru = 'Имя отправителя не согласовано с провайдером (SMS.RU).'"));
	ОписанияОшибок.Вставить("205", НСтр("ru = 'Сообщение слишком длинное (превышает 8 SMS).'"));
	ОписанияОшибок.Вставить("206", НСтр("ru = 'Достигнут дневной лимит на отправку сообщений.'"));
	ОписанияОшибок.Вставить("207", НСтр("ru = 'На этот номер (или один из номеров) нельзя отправлять сообщения, либо указано более 100 номеров в списке получателей'"));
	ОписанияОшибок.Вставить("208", НСтр("ru = 'Параметр time указан неправильно.'"));
	ОписанияОшибок.Вставить("209", НСтр("ru = 'Номер получателя (или один из номеров) в стоп-листе (см. в личном кабинете на сайте).'"));
	ОписанияОшибок.Вставить("210", НСтр("ru = 'Используется GET, где необходимо использовать POST.'"));
	ОписанияОшибок.Вставить("211", НСтр("ru = 'Метод не найден.'"));
	ОписанияОшибок.Вставить("212", НСтр("ru = 'Неверная кодировка текста сообщения (необходимо использовать UTF-8).'"));
	ОписанияОшибок.Вставить("220", НСтр("ru = 'Сервис временно недоступен.'"));
	ОписанияОшибок.Вставить("230", НСтр("ru = 'Сообщение не принято к отправке: достигнут дневной лимит сообщений на один номер (60 шт).'"));
	ОписанияОшибок.Вставить("300", НСтр("ru = 'Авторизация не выполнена: token устарел (истек срок действия, либо изменился IP отправителя.'"));
	ОписанияОшибок.Вставить("301", НСтр("ru = 'Авторизация не выполнена: логин или пароль указаны неверно.'"));
	ОписанияОшибок.Вставить("302", НСтр("ru = 'Авторизация не выполнена: пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной SMS.)'"));
	
	Возврат ОписанияОшибок;
КонецФункции

Функция ОписаниеОшибкиОтправки(КодОшибки)
	ОписанияОшибок = ОписанияОшибок();
	ТекстСообщения = ОписанияОшибок[КодОшибки];
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сообщение не отправлено (код ошибки: %1).'"), КодОшибки);
	КонецЕсли;
	Возврат ТекстСообщения;
КонецФункции

Функция ОписаниеОшибкиПолученияСтатуса(КодОшибки)
	ОписанияОшибок =ОписанияОшибок();
	ТекстСообщения = ОписанияОшибок[КодОшибки];
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отказ выполнения операции'");
	КонецЕсли;
	Возврат ТекстСообщения;
КонецФункции

Функция ВыполнитьЗапрос(ИмяМетода, ПараметрыЗапроса)
	
	Результат = "";
	
	ИмяФайлаЗапроса = СформироватьФайлДляPOSTЗапроса(ПараметрыЗапроса);
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("txt");
	
	// формирование заголовка
	Заголовок = Новый Соответствие;
	Заголовок.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовок.Вставить("Content-Length", XMLСтрока(РазмерФайла(ИмяФайлаЗапроса)));
	
	// Отправка запроса и получение ответа.
	Попытка
		Соединение = Новый HTTPСоединение("sms.ru", , , , ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http"), 60);
		Соединение.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/" + ИмяМетода, ИмяФайлаОтвета, Заголовок);
		Результат = ИмяФайлаОтвета;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьФайлДляPOSTЗапроса(ПараметрыЗапроса)
	СтрокаЗапроса = "";
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Не ПустаяСтрока(СтрокаЗапроса) Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&";
		КонецЕсли;
		СтрокаЗапроса = СтрокаЗапроса + Параметр.Ключ + "=" + КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла("txt");
	
	ФайлЗапроса = Новый ЗаписьТекста(ИмяФайлаЗапроса, КодировкаТекста.ANSI);
	ФайлЗапроса.Записать(СтрокаЗапроса);
	ФайлЗапроса.Закрыть();
	
	Возврат ИмяФайлаЗапроса;
КонецФункции

Функция РазмерФайла(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Размер();
КонецФункции

Функция МассивПолучателейСтрокой(Массив)
	Получатели = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, Массив, Истина);
	
	Результат = "";
	Для Каждого Получатель Из Получатели Цикл
		Номер = ФорматироватьНомер(Получатель);
		Если НЕ ПустаяСтрока(Номер) Тогда 
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ",";
			КонецЕсли;
			Результат = Результат + Номер;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ФорматироватьНомер(Номер)
	Результат = "";
	ДопустимыеСимволы = "+1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;	
КонецФункции

// Возвращает список разрешений для отправки SMS с использованием всех доступных провайдеров.
//
// Возвращаемое значение:
//  Массив.
//
Функция Разрешения() Экспорт
	
	Протокол = "HTTP";
	Адрес = "sms.ru";
	Порт = Неопределено;
	Описание = НСтр("ru = 'Отправка SMS через ""SMS.RU"".'");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	Возврат Разрешения;
КонецФункции

#КонецОбласти

