
// Возвращает используемый транспортный модуль (Структура)
//
Функция ИспользуемыйТранспортныйМодуль(Организация, ТорговаяТочка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОтборов = Новый Массив;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Поле", "Организация");
	СтруктураОтбора.Вставить("Значение", Организация);
	МассивОтборов.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Поле", "ТорговаяТочка");
	СтруктураОтбора.Вставить("Значение", ТорговаяТочка);
	МассивОтборов.Добавить(СтруктураОтбора);
	
	МассивТМ = РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(МассивОтборов);
	Если МассивТМ.Количество() > 0 Тогда
		Возврат МассивТМ[0];
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	НастройкиОбменаЕГАИС.РабочееМесто,
	|	НастройкиОбменаЕГАИС.АдресУТМ,
	|	НастройкиОбменаЕГАИС.ПортУТМ,
	|	НастройкиОбменаЕГАИС.ОбменНаСервере,
	|	НастройкиОбменаЕГАИС.Организация,
	|	НастройкиОбменаЕГАИС.ТорговаяТочка,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	КлассификаторОрганизацийЕГАИС.Представление,
	|	КлассификаторОрганизацийЕГАИС.ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП,
	|	КлассификаторОрганизацийЕГАИС.ПредставлениеАдреса КАК Адрес,
	|	НастройкиОбменаЕГАИС.ОбработкаОбслуживания,
	|	НастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО НастройкиОбменаЕГАИС.УдалитьОрганизацияЕГАИС = КлассификаторОрганизацийЕГАИС.Ссылка
	|ГДЕ
	|	НастройкиОбменаЕГАИС.Организация = &Организация
	|	И НастройкиОбменаЕГАИС.ТорговаяТочка = &ТорговаяТочка";
	
	Запрос.УстановитьПараметр("Организация"  , Организация);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДанныеМодуля = Новый Структура;
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
			ДанныеМодуля.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		
		КонецЦикла;
		
		Возврат ДанныеМодуля;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

// Подготавливает массив для передачи в алкогольных данных в ЕГАИС
// Параметры:
//  ПодготовленнаяСтрока - строка таблицы значений
//  ИНН - строка ИНН организации
//  КПП - строка КПП организации
// Возвращаемое значение
//  Массив
Функция ПараметрыАлкогольнойПродукции(ПодготовленнаяСтрока) Экспорт
	
	ПараметрыАлкогольнойПродукции = Новый Массив;
	Если ПодготовленнаяСтрока.АлкогольнаяПродукция Тогда
		ПараметрыАлкогольнойПродукции.Добавить(ПодготовленнаяСтрока.Маркируемый);      // 1 - Признак передаваемой акцизной продукции
		ПараметрыАлкогольнойПродукции.Добавить(ПодготовленнаяСтрока.КодАкцизнойМарки); // 2 - Штрихкод марки алкогольной продукции
		ПараметрыАлкогольнойПродукции.Добавить(10 * ПодготовленнаяСтрока.ОбъемДАЛ);    // 3 - Объем алкогольной продукции
		ПараметрыАлкогольнойПродукции.Добавить(ПодготовленнаяСтрока.Крепость);         // 4 - Крепость алкогольной продукции
		ПараметрыАлкогольнойПродукции.Добавить(ПодготовленнаяСтрока.КодВидаПродукции); // 5 - Код вида алкогольной продукции
	КонецЕсли;
	
	Возврат ПараметрыАлкогольнойПродукции;
	
КонецФункции // ПараметрыАлкогольнойПродукции()

// Процедура заполнения необходимости ввода акцизной марки.
//
Процедура ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(ТаблицаФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ЕСТЬNULL(ТаблицаЗапроса.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ) КАК НеобходимостьВводаСправкиНаАлкоголь
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.НеобходимостьВводаСправкиНаАлкоголь = СтрокаРезультата.НеобходимостьВводаСправкиНаАлкоголь;
		
	КонецЦикла;

КонецПроцедуры

Функция СформироватьТТНПоДаннымДокумента(ДокументСсылка, ДанныеТТН) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТТН = Неопределено;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ВыборкаДокумент = ДанныеТТН.ВыборкаДокумент;
		
		Если ВыборкаДокумент.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
			И ВыборкаДокумент.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС) Тогда
			ТТНОбъект = ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС.ПолучитьОбъект();
			ТТНОбъект.Товары.Очистить();
		Иначе
			ТТНОбъект = Документы.ТТНИсходящаяЕГАИС.СоздатьДокумент();
		КонецЕсли;
		
		Если ВыборкаДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
			ТТНОбъект.ВидОперации = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику;
		Иначе
			ТТНОбъект.ВидОперации = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная;
		КонецЕсли;
		
		ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый;
		
		ТТНОбъект.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
		ТТНОбъект.Номер = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ВыборкаДокумент.Номер);
		ТТНОбъект.Дата = ВыборкаДокумент.Дата;
		ТТНОбъект.НомерТТН = ТТНОбъект.Номер;
		ТТНОбъект.ДатаТТН = ВыборкаДокумент.Дата;
		ТТНОбъект.ДатаОтгрузки = ВыборкаДокумент.Дата;
		ТТНОбъект.Грузополучатель = ВыборкаДокумент.Грузополучатель;
		ТТНОбъект.Грузоотправитель = ВыборкаДокумент.ОрганизацияЕГАИС;
		ТТНОбъект.Поставщик = ВыборкаДокумент.ОрганизацияЕГАИС;
		
		ВыборкаТовары = ДанныеТТН.ВыборкаТовары;
		ВыборкаТовары.Сбросить();
		Пока ВыборкаТовары.Следующий() Цикл
			
			НоваяСтрока = ТТНОбъект.Товары.Добавить();
			
			НоваяСтрока.АлкогольнаяПродукция = ВыборкаТовары.АлкогольнаяПродукцияСправкиБ;
			НоваяСтрока.Количество = ВыборкаТовары.Количество;
			Если ВыборкаТовары.Количество = 0 Тогда
				НоваяСтрока.Цена = ВыборкаТовары.Сумма;
			Иначе
				НоваяСтрока.Цена = Окр(ВыборкаТовары.Сумма / ВыборкаТовары.Количество, 4);
			КонецЕсли;
			НоваяСтрока.СправкаБ = ВыборкаТовары.СправкаБ;
			
		КонецЦикла;
		
		Попытка
			ТТНОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ТТН = ТТНОбъект.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ТТН;

КонецФункции

Функция СформироватьАктСписанияПоДаннымДокумента(ДокументСсылка, ДанныеСписания) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	АктСписания = Неопределено;
		
	ВыборкаДокумент = ДанныеСписания.ВыборкаДокумент;
	
	Если ЗначениеЗаполнено(ДокументСсылка.АктСписанияЕГАИС) Тогда
		АктСписанияОбъект = ДокументСсылка.АктСписанияЕГАИС.ПолучитьОбъект();
		АктСписанияОбъект.Товары.Очистить();
	Иначе
		АктСписанияОбъект = Документы.АктСписанияЕГАИС.СоздатьДокумент();
	КонецЕсли;
	
	АктСписанияОбъект.ВидДокумента = ДанныеСписания.ВидДокумента;
	АктСписанияОбъект.ПричинаСписания = ДанныеСписания.ПричинаСписания;
	АктСписанияОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
	
	АктСписанияОбъект.ОрганизацияЕГАИС = ВыборкаДокумент.ОрганизацияЕГАИС;
	АктСписанияОбъект.ДокументОснование   = ДокументСсылка;
	АктСписанияОбъект.Магазин             = ВыборкаДокумент.Магазин;
	АктСписанияОбъект.Организация         = ВыборкаДокумент.Организация;
	
	//АктСписанияОбъект.Номер = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ВыборкаДокумент.Номер);
	АктСписанияОбъект.Дата = ВыборкаДокумент.Дата;
	
	ВыборкаТовары = ДанныеСписания.ВыборкаТовары;
	
	ВыборкаТовары.Сбросить();
	Пока ВыборкаТовары.Следующий() Цикл
		
		НоваяСтрока = АктСписанияОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
		
		НоваяСтрока.АлкогольнаяПродукция = ВыборкаТовары.АлкогольнаяПродукция;
		НоваяСтрока.Количество = ВыборкаТовары.Количество;
		НоваяСтрока.СправкаБ = ВыборкаТовары.СправкаБ;
		
	КонецЦикла;
	
	Попытка
		АктСписанияОбъект.Записать(РежимЗаписиДокумента.Проведение);
		АктСписания = АктСписанияОбъект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
		
	Возврат АктСписания;

КонецФункции

Функция НоменклатураПоКлассификаторуЕГАИС(Номенклатура, Характеристика = Неопределено, Упаковка = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
		|	И (&Характеристика = НЕОПРЕДЕЛЕНО
		|			ИЛИ СоответствиеНоменклатурыЕГАИС.Характеристика = &Характеристика)
		|	И (&Упаковка = НЕОПРЕДЕЛЕНО
		|			ИЛИ СоответствиеНоменклатурыЕГАИС.Упаковка = &Упаковка)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.АлкогольнаяПродукция;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОрганизацияПоИдентификаторуЕГАИС(ИдентификаторФСРАР) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаЕГАИС.Организация
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|ГДЕ
		|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР = &ИдентификаторФСРАР";
	
	Запрос.УстановитьПараметр("ИдентификаторФСРАР", ИдентификаторФСРАР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ОрганизацияПоИдентификаторуЕГАИС()

Функция ОрганизацияЕГАИСИзНастроек(Организация, ТорговаяТочка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
		|ГДЕ
		|	НастройкиОбменаЕГАИС.Организация = &Организация
		|	И НастройкиОбменаЕГАИС.ТорговаяТочка = &ТорговаяТочка";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОрганизацияЕГАИС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ОрганизацияТорговаяТочкаПоОрганизацииЕГАИС(ОрганизацияЕГАИС) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаЕГАИС.Организация,
		|	НастройкиОбменаЕГАИС.ТорговаяТочка
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
		|ГДЕ
		|	КлассификаторОрганизацийЕГАИС.Ссылка = &ОрганизацияЕГАИС";
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура УстановитьПризнакУчетаОстатковАлкогольнойПродукции(КодФСРАР, УчитыватьОстатки = Истина) Экспорт

	Если Не ЗначениеЗаполнено(КодФСРАР) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторОрганизацийЕГАИС.Ссылка
		|ИЗ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ГДЕ
		|	КлассификаторОрганизацийЕГАИС.Код = &КодФСРАР
		|	И КлассификаторОрганизацийЕГАИС.УчитыватьОстаткиАлкогольнойПродукции <> &УчитыватьОстатки";
	
	Запрос.УстановитьПараметр("КодФСРАР", КодФСРАР);
	Запрос.УстановитьПараметр("УчитыватьОстатки", УчитыватьОстатки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.УчитыватьОстаткиАлкогольнойПродукции = УчитыватьОстатки;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСтатусаОбработкиДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		Если ПредыдущийСтатус = НовыйСтатус Тогда
			Возврат;
		КонецЕсли;
		
		Если НовыйСтатус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктОтказа Тогда
			
			Накладная = ДокументПоОснованиюЕГАИС(ДокументСсылка);
			Попытка
				НакладнаяОбъект = Накладная.ПолучитьОбъект();
				НакладнаяОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось установить пометку удаления не принятой накладной %1'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Строка(Накладная));
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
										УровеньЖурналаРегистрации.Ошибка,,,
										ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументПоОснованиюЕГАИС(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладная.Ссылка
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	РасходнаяНакладная.ТоварноТранспортнаяНакладнаяЕГАИС = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.ТоварноТранспортнаяНакладнаяЕГАИС = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура УстановитьУсловноеОформлениеСправокЕГАИС(Форма,
													ИмяПоляСправкаБ = "ЗапасыСправкаБ",
													ПутьКПолюОтбора = "Объект.Запасы.НеобходимостьВводаСправкиНаАлкоголь") Экспорт
													
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляСправкаБ].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<Для алкогольной продукции>");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	ЭлементУсловногоОформления.Представление = "Доступность справок алкогольной продукции";
	
КонецПроцедуры

// Процедура заполнения акта списания на основании передачи в торговый зал
// 
// Параметры:
//  ДокументОбъект - Документ объект "АктСписанияЕГАИС"
//  ДанныеЗаполнения - Документ ссылка "ПередачаВТорговыйЗал"
//
Процедура ЗаполнитьАктСписанияЕГАИСНаОснованииПередачиВТорговыйЗал(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения, "ОрганизацияЕГАИС, Магазин, Организация");
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения;
	ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала;
	ДокументОбъект.ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.Реализация;
	ДокументОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
	
	Для каждого СтрокаТаблицы Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения акта списания на основании отчета о розничных продажах
// 
// Параметры:
//  ДокументОбъект - Документ объект "АктСписанияЕГАИС"
//  ДанныеЗаполнения - Документ ссылка "ОтчетОРозничныхПродажах"
//
Процедура ЗаполнитьАктСписанияЕГАИСНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ВидДокумента    = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала;
	ДокументОбъект.ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.Реализация;
	ДокументОбъект.ДатаРегистрацииДвижений = ДанныеЗаполнения.Дата;
	ДокументОбъект.ДокументОснование       = ДанныеЗаполнения;
	ДокументОбъект.Магазин                 = ДанныеЗаполнения.СтруктурнаяЕдиница;
	ДокументОбъект.Организация             = ДанныеЗаполнения.Организация;
	ДокументОбъект.Дата                    = НачалоДня(ДанныеЗаполнения.Дата);
	ДокументОбъект.СтатусОбработки         = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ОрганизацияЕГАИС) Тогда
		ДокументОбъект.ОрганизацияЕГАИС = ОрганизацияЕГАИСИзНастроек(ДокументОбъект.Организация, ДокументОбъект.Магазин);
	КонецЕсли;
	
	ЗаполнитьТоварыАктаСписанияЕГАИСНаОснованииДанныхЗаполнения(ДокументОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура заполнения акта списания на основании отчета о розничных продажах
// 
// Параметры:
//  ДокументОбъект - Документ объект "АктСписанияЕГАИС"
//  ДанныеЗаполнения - Документ ссылка "ОтчетОРозничныхПродажах"
//
Процедура ЗаполнитьАктСписанияЕГАИСНаОснованииСписанияЗапасов(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ВидДокумента    = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.Недостача;
	Иначе
		ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.Порча;
	КонецЕсли;
	
	ДокументОбъект.ДатаРегистрацииДвижений = ДанныеЗаполнения.Дата;
	ДокументОбъект.ДокументОснование       = ДанныеЗаполнения;
	ДокументОбъект.Магазин                 = ДанныеЗаполнения.СтруктурнаяЕдиница;
	ДокументОбъект.Организация             = ДанныеЗаполнения.Организация;
	ДокументОбъект.Дата                    = НачалоДня(ДанныеЗаполнения.Дата);
	ДокументОбъект.СтатусОбработки         = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ОрганизацияЕГАИС) Тогда
		ДокументОбъект.ОрганизацияЕГАИС = ОрганизацияЕГАИСИзНастроек(ДокументОбъект.Организация, ДокументОбъект.Магазин);
	КонецЕсли;
	
	ЗаполнитьТоварыАктаСписанияЕГАИСНаОснованииДанныхЗаполнения(ДокументОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура заполнения ТЧ Товары акта списания на основании документа
// 
// Параметры:
//  ДокументОбъект - Документ объект "АктСписанияЕГАИС"
//  ДанныеЗаполнения - Документ ссылка
//
Процедура ЗаполнитьТоварыАктаСписанияЕГАИСНаОснованииДанныхЗаполнения(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ДанныеЗаполненияТЧТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеЗаполненияТЧТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ДанныеЗаполненияТЧТовары.Количество,
	|	ДанныеЗаполненияТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ДанныеЗаполненияТЧТовары КАК ДанныеЗаполненияТЧТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Номенклатура.АлкогольнаяПродукция
	|	И НЕ ТаблицаДокумента.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Количество,
	|	ТаблицаВЗапросе.ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Количество,
	|	ТаблицаВЗапросе.ЕдиницаИзмерения,
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция, &ПустаяАлкогольнаяПродукция) КАК АлкогольнаяПродукция
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаВЗапросе.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И ТаблицаВЗапросе.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|			И ТаблицаВЗапросе.ЕдиницаИзмерения = СоответствиеНоменклатурыЕГАИС.Упаковка";
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеЗапасов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ТаблицаДокумента.Номенклатура.ВидАлкогольнойПродукции.Маркируемый", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяАлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДанныеЗаполненияТЧТовары"  , ДанныеЗаполнения.Запасы.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаДокумента    = Результат[2].Выгрузить();
	ТаблицаСоответствий = Результат[3].Выгрузить();
	
	КлючСвязи = 0;
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		КлючСвязи = КлючСвязи + 1;;
		СтрокаДокументаСписания = ДокументОбъект.Товары.Добавить();
		СтрокаДокументаСписания.КлючСвязи = КлючСвязи;
		ЗаполнитьЗначенияСвойств(СтрокаДокументаСписания, СтрокаДокумента);
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
		
		МассивСтрокПоАлкогольнойПродукции = ТаблицаСоответствий.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокПоАлкогольнойПродукции.Количество() > 0  Тогда
			
			СтрокаДокументаСписания.АлкогольнаяПродукция = МассивСтрокПоАлкогольнойПродукции[0].АлкогольнаяПродукция;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПередачуВТорговыйЗалЕГАИСНаОснованииПоступления(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения;
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, СтруктурнаяЕдиница");
	ДокументОбъект.Организация = РеквизитыОснования.Организация;
	ДокументОбъект.Магазин = РеквизитыОснования.СтруктурнаяЕдиница;
	ЗаполнитьТоварыДокументаЕГАИСНаОснованииДанныхЗаполнения(ДокументОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ОрганизацияЕГАИС) Тогда
		ДокументОбъект.ОрганизацияЕГАИС = ОрганизацияЕГАИСИзНастроек(ДокументОбъект.Организация, ДокументОбъект.Магазин);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПередачуВТорговыйЗалЕГАИСНаОснованииПеремещения(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения;
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, СтруктурнаяЕдиницаПолучатель");
	ДокументОбъект.Организация = РеквизитыОснования.Организация;
	ДокументОбъект.Магазин = РеквизитыОснования.СтруктурнаяЕдиницаПолучатель;
	ЗаполнитьТоварыДокументаЕГАИСНаОснованииДанныхЗаполнения(ДокументОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ОрганизацияЕГАИС) Тогда
		ДокументОбъект.ОрганизацияЕГАИС = ОрганизацияЕГАИСИзНастроек(ДокументОбъект.Организация, ДокументОбъект.Магазин);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВозвратИзТорговогоЗалаЕГАИСНаОснованииПеремещения(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения;
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, СтруктурнаяЕдиницаПолучатель");
	ДокументОбъект.Организация = РеквизитыОснования.Организация;
	ДокументОбъект.Магазин = РеквизитыОснования.СтруктурнаяЕдиницаПолучатель;
	ЗаполнитьТоварыДокументаЕГАИСНаОснованииДанныхЗаполнения(ДокументОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ОрганизацияЕГАИС) Тогда
		ДокументОбъект.ОрганизацияЕГАИС = ОрганизацияЕГАИСИзНастроек(ДокументОбъект.Организация, ДокументОбъект.Магазин);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыДокументаЕГАИСНаОснованииДанныхЗаполнения(ДокументОбъект, ДанныеЗаполнения) Экспорт

	ДокументОснование = ДокументОбъект.ДокументОснование;
	ТТНВходящаяЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество КАК Количество,
		|	ЕСТЬNULL(ТТН.СправкаБ, &ПустаяСправкаБ) КАК СправкаБ,
		|	ЕСТЬNULL(ТТН.АлкогольнаяПродукция, &ПустаяАлкогольнаяПродукция) КАК АлкогольнаяПродукция
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС.Товары КАК ТТН
		|		ПО (ТТН.Ссылка = &ТТН)
		|			И Товары.ИдентификаторСтроки = ТТН.ИдентификаторСтроки
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ПустаяСправкаБ", Справочники.СправкиБЕГАИС.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяАлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТТН", ТТНВходящаяЕГАИС);
		
		Результат = Запрос.Выполнить();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество КАК Количество,
		|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция, &ПустаяАлкогольнаяПродукция) КАК АлкогольнаяПродукция
		|ИЗ
		|	Документ.ПеремещениеЗапасов.Запасы КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|		ПО Товары.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
		|			И Товары.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
		|			И Товары.ЕдиницаИзмерения = СоответствиеНоменклатурыЕГАИС.Упаковка
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ПустаяАлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ДокументОбъект.Товары.Загрузить(Результат.Выгрузить());
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, "ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры





