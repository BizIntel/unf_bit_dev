////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Записывает в структуру ссылки на измененные объекты по узлу плана обмена.
//
// Параметры:
//	УзелПланаОбмена - ПланОбмена.Ссылка
//	СтруктураВозврата - Структура
//
Процедура ЗаполнитьСтруктуруИзмененийДляУзла(УзелПланаОбмена, СтруктураВозврата) Экспорт
	
	СтруктураВозврата.Вставить("Товары", Новый Массив);
	СтруктураВозврата.Вставить("Заказы", Новый Массив);
	СтруктураВозврата.Вставить("Файлы", Новый Массив);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураИзменения.Ссылка КАК Ссылка,
		|	""Товары"" КАК ТипСсылки
		|ИЗ
		|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
		|ГДЕ
		|	НоменклатураИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НоменклатураПрисоединенныеФайлыИзменения.Ссылка,
		|	""Файлы""
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы.Изменения КАК НоменклатураПрисоединенныеФайлыИзменения
		|ГДЕ
		|	НоменклатураПрисоединенныеФайлыИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыИзменения.Ссылка,
		|	""Заказы""
		|ИЗ
		|	Документ.ЗаказПокупателя.Изменения КАК ЗаказыИзменения
		|ГДЕ
		|	ЗаказыИзменения.Узел = &Узел");
	
	Запрос.УстановитьПараметр("Узел", УзелПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата[Выборка.ТипСсылки].Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает результат тестового подключения к сайту.
//
// Параметры:
//	УзелОбмена
//
// Возвращаемое значение:
//	Строка.
//
Функция ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстСообщения) Экспорт
	
	ПараметрыПодключения = Новый Структура("АдресСайта, Пароль, ИмяПользователя");
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, НастройкиПодключения);
	
	ТипСоединения = "catalog";
	ОписаниеОшибки = "";
	
	Если НЕ ПолучитьНастройкиПодключения(ПараметрыПодключения, ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при получении параметров подключения к сайту.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Соединение = УстановитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при установке соединения с сайтом.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтветСервера = "";
	
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения);
	Если Успешно Тогда
		
		ТекстСообщения = НСтр("ru = 'Соединение с сайтом успешно установлено.'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить соединение.'") + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьПрефиксДляЗаказаССайта() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Префикс = Константы.ПрефиксДляОбменаССайтом.Получить();
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Префикс = ПолучитьПрефиксПоУмолчаниюДляЗаказаССайта();
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции

Функция ПолучитьПрефиксПоУмолчаниюДляЗаказаССайта() Экспорт
	
	Возврат "СА";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УСТАНОВКИ ПАРАМЕТРОВ СЕАНСА

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//	ИмяПараметра				- строка с именем параметра сеанса
//	УстановленныеПараметры	- массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если НЕ (ИмяПараметра = "ОбменДаннымиССайтомВключен" 
		ИЛИ ИмяПараметра = "ИспользуемыеУзлыОбменаССайтом") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьПараметрыСеанса();
	
	УстановленныеПараметры.Добавить("ОбменДаннымиССайтомВключен");
	УстановленныеПараметры.Добавить("ИспользуемыеУзлыОбменаССайтом");
	
КонецПроцедуры

// Получает массив узлов обмена, используемых в настройках обмена.
//
Функция ПолучитьИспользуемыеУзлыОбменаССайтом()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт
		|ГДЕ
		|	НЕ ОбменУправлениеНебольшойФирмойСайт.ПометкаУдаления
		|	И ОбменУправлениеНебольшойФирмойСайт.Ссылка <> &ЭтотУзел");
		
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Обновляет значения параметров сеанса.
//
Процедура ОбновитьПараметрыСеанса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьОбменССайтами = ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтами");
	
	ИспользуемыеУзлыОбменаССайтом = Новый Массив;
	Если ИспользоватьОбменССайтами Тогда
		
		ИспользуемыеУзлыОбменаССайтом = ПолучитьИспользуемыеУзлыОбменаССайтом();
		
	КонецЕсли;
	
	ОбменДаннымиССайтомВключен = НЕ ИспользуемыеУзлыОбменаССайтом.Количество() = 0;
	
	ПараметрыСеанса.ОбменДаннымиССайтомВключен = ОбменДаннымиССайтомВключен;
	ПараметрыСеанса.ИспользуемыеУзлыОбменаССайтом = Новый ФиксированныйМассив(ИспользуемыеУзлыОбменаССайтом);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК

// Обработчик подписки на событие "ОбменССайтомПередЗаписьюРегистра".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
//
Процедура ОбменССайтомПередЗаписьюРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ЗарегистрироватьИзменения(Источник, Замещение);
	
КонецПроцедуры

// Обработчик подписки на событие "ОбменССайтомПриЗаписиСправочника".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
//
Процедура ОбменССайтомПриЗаписиОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ

// Выборочно регистрирует изменения для узлов плана обмена с сайтом.
//
// Параметры:
//	Объект		- Объект метаданных - источник события
//	Замещение - режим записи набора записей регистра.
//
Процедура ЗарегистрироватьИзменения(Объект, Замещение = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыСеанса.ОбменДаннымиССайтомВключен Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	МассивУзловТовары = ПолучитьМассивУзловДляРегистрации(Истина);
	МассивУзловЗаказы = ПолучитьМассивУзловДляРегистрации(,Истина);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗапасыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		Регистратор = Объект.Отбор.Регистратор.Значение;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Запись.ЗаказПокупателя);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ОплатаСчетовИЗаказов") Тогда
		
		Регистратор = Объект.Отбор.Регистратор.Значение;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.СчетНаОплату) = Тип("ДокументСсылка.ЗаказПокупателя")
				И ЗначениеЗаполнено(Запись.СчетНаОплату) Тогда 
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Запись.СчетНаОплату);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			Возврат;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);
		
		// Регистрируем все файлы по номенклатуре, иначе в режиме загрузки изменений
		// CMS удалит те файлы, которые отсутствуют в файле обмена.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|ГДЕ
		|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		|	И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
		
		Запрос.УстановитьПараметр("ВладелецФайла", Объект.ВладелецФайла);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
		
		КонецЦикла; 
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя") Тогда 
		
		Если НЕ ПолучитьРеквизитыЗаказаНаСайте(Объект.Ссылка) = Неопределено Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Объект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПУСКА ОБМЕНА

// Выполняет запуск обмена с сайтом из регламентного задания.
//
// Параметры:
//	КодУзлаОбмена		- строка с кодом узла плана обмена.
//
Процедура ЗаданиеВыполнитьОбмен(КодУзлаОбмена) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УзелОбмена = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.НайтиПоКоду(КодУзлаОбмена);
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		
		ЗаписьЖурналаРегистрации("Обмен с сайтами",
			УровеньЖурналаРегистрации.Ошибка,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Не найден узел обмена с кодом'") + " " + КодУзлаОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	Если УзелОбмена.ПометкаУдаления Тогда
		
		ЗаписьЖурналаРегистрации("Обмен с сайтами",
			УровеньЖурналаРегистрации.Информация,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Настройка обмена помечена на удаление. Обмен отменен.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если УзелОбмена.ВыгружатьНаСайт Тогда
		ТекстСообщения = "";
		Если Не ВыполнитьТестовоеПодключениеКСайту(УзелОбмена, ТекстСообщения) Тогда
			
			ЗаписьЖурналаРегистрации("Обмен с сайтами",
				УровеньЖурналаРегистрации.Предупреждение,
				УзелОбмена.Метаданные(),
				УзелОбмена,
				ТекстСообщения + НСтр("ru = ' Обмен отменен.'"));
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбмен(УзелОбмена, НСтр("ru = 'Фоновый обмен'"));
	
КонецПроцедуры

// Выполняет запуск обмена с сайтом.
//
// Параметры:
//	УзелОбмена		- ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт,
//	РежимЗапускаОбмена - строка, имя события для ЖурналаРегистрации
//	ВыгружатьТолькоИзменения - булево, влияет на объем выгружаемых данных.
//
Процедура ВыполнитьОбмен(УзелОбмена, РежимЗапускаОбмена, ВыгружатьТолькоИзменения = Истина) Экспорт
	
	Если УзелОбмена = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ЭтотУзел() Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеПараметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	ОсновныеПараметры.Вставить("ОбменЧерезВебСервис", Ложь);
	ОсновныеПараметры.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	ОсновныеПараметры.Вставить("ВыгружатьТолькоИзменения", ВыгружатьТолькоИзменения);
	ОсновныеПараметры.Вставить("ОтборГруппыКатегорииНоменклатуры", УзелОбмена.ОтборГруппыКатегорииНоменклатуры);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ОсновныеПараметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, ОсновныеПараметры);
	
	ТаблицаИнформации = РегистрыСведений.СостоянияОбменовДанными.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаИнформации.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДатаНачала = ТекущаяДата();
	
	Если ОсновныеПараметры.ВыгружатьНаСайт Тогда
		
		ОписаниеОшибки = "";
		НастройкиПодключения = Новый Структура;
		НастройкиПодключения.Вставить("ИмяПользователя", ОсновныеПараметры.ИмяПользователя);
		НастройкиПодключения.Вставить("Пароль", ОсновныеПараметры.Пароль);
		НастройкиПодключения.Вставить("АдресСайта", ОсновныеПараметры.АдресСайта);
	
		Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Тогда
			
			СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтрокаТаблицыИнформации.Описание = ОписаниеОшибки;
			ВыполнитьДействияПриЗавершенииОбмена(ОсновныеПараметры, ТаблицаИнформации, Истина);
			
			Возврат;
			
		КонецЕсли;
		
		ДобавитьПараметрыПротоколаОбменаВСтруктуру(НастройкиПодключения);
		
		ОсновныеПараметры.Вставить("НастройкиПодключения", НастройкиПодключения);
		
	КонецЕсли;
	
	КаталогВыгрузки = ОсновныеПараметры.КаталогВыгрузки;
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		
		КаталогВыгрузки = КаталогВременныхФайлов();
		
	Иначе
		
		КаталогВыгрузки = ОсновныеПараметры.КаталогВыгрузки;
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
		
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata - " + УзелОбмена.УникальныйИдентификатор();
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	КаталогНаДиске = ПодготовитьПутьДляПлатформы(ПлатформаWindows, КаталогНаДиске);
	
	Попытка
		
		СоздатьКаталог(КаталогНаДиске);
		
	Исключение
		
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		СтрокаТаблицыИнформации.Описание = ОписаниеИсключительнойОшибки();
		ВыполнитьДействияПриЗавершенииОбмена(ОсновныеПараметры, ТаблицаИнформации, Истина);
		
		Возврат;
		
	КонецПопытки;
	
	ОписаниеОшибки = "";
	Если НЕ ОчиститьКаталог(КаталогНаДиске, ОписаниеОшибки) Тогда
		
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		СтрокаТаблицыИнформации.Описание = ОписаниеОшибки;
		ВыполнитьДействияПриЗавершенииОбмена(ОсновныеПараметры, ТаблицаИнформации, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	ФайлЗагрузки = ОсновныеПараметры.ФайлЗагрузки;
	ФайлЗагрузки = ПодготовитьПутьДляПлатформы(ПлатформаWindows, ФайлЗагрузки);
	ОсновныеПараметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	
	Если ОсновныеПараметры.ВыгружатьТолькоИзменения Тогда
		СтруктураИзменений = ПолучитьВсеИзмененияИзПланаОбмена(УзелОбмена);
	КонецЕсли;
	
	ТоварыУспешноВыгружены = Истина;
	
	ОсновныеПараметры.Вставить("КаталогНаДиске", КаталогНаДиске);
	ОсновныеПараметры.Вставить("ПодкаталогФайлов", "import_files");
	ОсновныеПараметры.Вставить("СтруктураИзменений", СтруктураИзменений);
	
	УдалитьРегистрациюИзмененийТовары = Ложь;
	УдалитьРегистрациюИзмененийЗаказы = Ложь;
	
	Если ОсновныеПараметры.ОбменТоварами Тогда 
		
		СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
		СтрокаТаблицыИнформации.Описание = Строка(ТекущаяДата()) + " " + НСтр("ru = 'Запуск выгрузки товаров'");
		
		ТоварыУспешноВыгружены = ВыгрузитьНоменклатуру(ОсновныеПараметры, СтрокаТаблицыИнформации);
		
		Если ОсновныеПараметры.ВыгружатьТолькоИзменения
			И ТоварыУспешноВыгружены Тогда
			
			УдалитьРегистрациюИзмененийТовары = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаказыУспешноВыгружены = Истина;
	
	Если ОсновныеПараметры.ОбменЗаказами Тогда
		
		Если НЕ ОсновныеПараметры.ОбменТоварами Тогда
			ТаблицаИнформации.Удалить(СтрокаТаблицыИнформации);
		КонецЕсли;
		
		ЗаказыУспешноВыгружены = ВыполнитьОбменЗаказами(ОсновныеПараметры, ТаблицаИнформации);
		
		Если ОсновныеПараметры.ВыгружатьТолькоИзменения
			И ЗаказыУспешноВыгружены Тогда
			
			УдалитьРегистрациюИзмененийЗаказы = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УдалитьРегистрациюИзмененийТовары ИЛИ УдалитьРегистрациюИзмененийЗаказы Тогда
		
		УдалитьРегистрациюИзменений(УзелОбмена, СтруктураИзменений, УдалитьРегистрациюИзмененийТовары, УдалитьРегистрациюИзмененийЗаказы);
		
	КонецЕсли;
	
	ВыполнитьДействияПриЗавершенииОбмена(ОсновныеПараметры, ТаблицаИнформации);
	
	Если ОсновныеПараметры.ВыполнятьПолнуюВыгрузкуПринудительно
		И ТоварыУспешноВыгружены
		И ЗаказыУспешноВыгружены Тогда
		
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = Ложь;
		УзелОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстФайлаОбмена(УзелОбмена, ВыгружатьТолькоИзменения = Истина) Экспорт

	ОсновныеПараметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	ОсновныеПараметры.Вставить("ОбменЧерезВебСервис", Ложь);
	ОсновныеПараметры.Вставить("ВыгружатьТолькоИзменения", ВыгружатьТолькоИзменения);
	ОсновныеПараметры.Вставить("ОтборГруппыКатегорииНоменклатуры", УзелОбмена.ОтборГруппыКатегорииНоменклатуры);
	
	Если ОсновныеПараметры.ВыгружатьТолькоИзменения Тогда
		СтруктураИзменений = ПолучитьВсеИзмененияИзПланаОбмена(УзелОбмена);
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("СтруктураИзменений", СтруктураИзменений);
	
	ИндексФайлаОбмена = 0;
	ИндексФайлаОбменаСтрокой = "";
	
	ПакетыОбмена = Новый Соответствие;
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, ОсновныеПараметры);
	ОсновныеПараметры.ВыгружатьКартинки = Ложь;
	
	ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(ОсновныеПараметры);
	ЗагрузитьВидыЦенВМассив(ОсновныеПараметры);
	
	ПодготовитьМассивИзмененийНоменклатуры(ОсновныеПараметры);
	
	Если ОсновныеПараметры.ОбменТоварами Тогда 
		
		Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
			
			СтрокаТаблицыКаталогов.СтруктураРезультата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, "");
			ОсновныеПараметры.Вставить("СтрокаТаблицыКаталогов", СтрокаТаблицыКаталогов);
			
			ПодготовитьДанныеДляВыгрузки(ОсновныеПараметры);
			
			Если ОсновныеПараметры.ВыборкаНоменклатуры.Количество() = 0 Тогда
				// Если нет данных по номенклатуре, не формируем XDTO-объекты.
				Продолжить;
			КонецЕсли;
			
			Если ИндексФайлаОбмена > 0 Тогда
				ИндексФайлаОбменаСтрокой = Формат(ИндексФайлаОбмена, "ЧГ=");
			КонецЕсли;
			ИндексФайлаОбмена = ИндексФайлаОбмена + 1;
			ИмяФайлаКаталога = "import" + ИндексФайлаОбменаСтрокой + ".xml";
			ИмяФайлаПрайса = "offers" + ИндексФайлаОбменаСтрокой + ".xml";
			URIПространстваИмен = "urn:1C.ru:commerceml_205";
			ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
			
			//Выгрузить Классификатор И Каталог
			КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOКлассификаторИКаталог(ОсновныеПараметры, ПакетCML);
			ТекстФайла=СериализоватьОбъект(КоммерческаяИнформацияXDTO);
			ПакетыОбмена.Вставить(ИмяФайлаКаталога, ТекстФайла);
			
			//Выгрузить Каталог Предложений
			Если ОсновныеПараметры.ВыборкаЦен.Количество() > 0 Тогда
				КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOПакетПредложений(ОсновныеПараметры, ПакетCML);
				ТекстФайла=СериализоватьОбъект(КоммерческаяИнформацияXDTO);
				ПакетыОбмена.Вставить(ИмяФайлаПрайса, ТекстФайла);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПакетыОбмена;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВЫГРУЗКИ НОМЕНКЛАТУРЫ

// Выгружает номенклатуру.
//
// Параметры:
//	Параметры				- Структура, содержащая необходимые параметры
//	СтрокаТаблицыИнформации	- Строка таблицы значений
//
//Возвращаемое значение
//	Успешно - Истина, если выгрузка завершилась без ошибок.
//
Функция ВыгрузитьНоменклатуру(Параметры, СтрокаТаблицыИнформации)
	
	ВыгруженоОбъектов = 0;
	
	Успешно = ВыгрузитьНоменклатуруВКаталогНаДиске(Параметры, СтрокаТаблицыИнформации, ВыгруженоОбъектов);
	
	Если НЕ Успешно Тогда
		
		ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыВыполненияОбмена.Ошибка);
		Возврат Успешно;
		
	ИначеЕсли ВыгруженоОбъектов = 0 ИЛИ НЕ Параметры.ВыгружатьНаСайт Тогда
		
		ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыВыполненияОбмена.Выполнено);
		Возврат Успешно;
		
	КонецЕсли;
	
	Успешно = ВыгрузитьКаталогПредложенияНаСайт(Параметры, СтрокаТаблицыИнформации);
	
	Если Успешно Тогда
		ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	Иначе
		ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыВыполненияОбмена.Ошибка);
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Выгружает номенклатуру в xml-файл на диске.
//
// Параметры:
//	Параметры				- Структура, основные параметры
//	СтрокаТаблицыИнформации	- Строка таблицы значений
//	ВыгруженоОбъектов		- Число, количество выгруженных объектов.
//
Функция ВыгрузитьНоменклатуруВКаталогНаДиске(Параметры, СтрокаТаблицыИнформации, ВыгруженоОбъектов)
	
	ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(Параметры);
	
	ЗагрузитьВидыЦенВМассив(Параметры);
	
	ПодготовитьМассивИзмененийНоменклатуры(Параметры);
	
	ИндексФайлаОбмена = 0;
	ИндексФайлаОбменаСтрокой = "";
	
	Успешно = Истина;
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыКаталогов.СтруктураРезультата =
			Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, "");
		
		Параметры.Вставить("СтрокаТаблицыКаталогов", СтрокаТаблицыКаталогов);
		ПодготовитьДанныеДляВыгрузки(Параметры);
		
		Если Параметры.ВыборкаНоменклатуры.Количество() = 0 Тогда
			// Если нет данных по номенклатуре, не формируем XDTO-объекты.
			Продолжить;
		КонецЕсли;
		
		Если ИндексФайлаОбмена > 0 Тогда
			ИндексФайлаОбменаСтрокой = Формат(ИндексФайлаОбмена, "ЧГ=");
		КонецЕсли;
		
		ИндексФайлаОбмена = ИндексФайлаОбмена + 1;
		
		ИмяФайлаКаталога = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
			Параметры.КаталогНаДиске + "\import" + ИндексФайлаОбменаСтрокой + ".xml");
			
		ИмяФайлаПрайса = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
			Параметры.КаталогНаДиске + "\offers" + ИндексФайлаОбменаСтрокой + ".xml");
			
		URIПространстваИмен = "urn:1C.ru:commerceml_205";
		ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
		
		Успешно = ВыгрузитьКлассификаторИКаталог(Параметры, ИмяФайлаКаталога, ПакетCML);
		
		Если НЕ Успешно Тогда
			Прервать;
		КонецЕсли;
		
		Если Параметры.ВыборкаЦен.Количество() > 0 Тогда
			
			Успешно = ВыгрузитьПакетПредложений(Параметры, ИмяФайлаПрайса, ПакетCML);
			
			Если НЕ Успешно Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодготовитьИтоговуюИнформациюПоВыгрузкеТоваров(ТаблицаКаталогов, СтрокаТаблицыИнформации, ВыгруженоОбъектов);
	
	Возврат Успешно;
	
КонецФункции

// Выгружает на сайт файлы каталога и пакета предложений.
//
// Параметры:
//	Параметры				- Структура, основные параметры
//	СтрокаТаблицыИнформации	- Строка таблицы значений.
//
Функция ВыгрузитьКаталогПредложенияНаСайт(Параметры, СтрокаТаблицыИнформации)
	
	МассивПодкаталогов = Новый Массив;
	
	Если Параметры.ВыгружатьКартинки Тогда
		
		МассивПодкаталогов.Добавить(Параметры.ПодкаталогФайлов);
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Успешно = ВыгрузитьНаСайт(Параметры, МассивПодкаталогов, ОписаниеОшибки, Истина);
	
	Если Успешно Тогда 
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание + Символы.ПС
			+ ТекущаяДата() + НСтр("ru = ' Товары успешно выгружены на сайт.'")
			+ ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС + НСтр("ru = 'Дополнительная информация о выгрузке:'") + Символы.ПС + ОписаниеОшибки);
		
	Иначе
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание + Символы.ПС
			+ ТекущаяДата() + НСтр("ru = ' Выгрузка на сайт завершилась с ошибками.'") + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Попытка
		
		УдалитьФайлы(Параметры.КаталогНаДиске, "*.*");
		
	Исключение
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание
			+ Символы.ПС
			+ ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось очистить каталог обмена: '")
				+ Параметры.КаталогНаДиске);
		
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

Функция ПодготовитьТаблицуКаталогов(Параметры)
	
	ТаблицаКаталогов = Параметры.СохраненнаяТаблицаКаталогов.Получить();
	
	Для Каждого ДанныеКаталога Из ТаблицаКаталогов Цикл
		
		МассивУдалить = Новый Массив;
		Для Каждого Группа Из ДанныеКаталога.Группы Цикл
			Если НЕ ЗначениеЗаполнено(Группа.Значение) И СокрЛП(Группа.Представление)="" Тогда
				МассивУдалить.Добавить(Группа);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
			ДанныеКаталога.Группы.Удалить(УдалитьЭлемент);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаКаталогов.Колонки.Добавить("СтруктураРезультата");
	
	Возврат ТаблицаКаталогов;
	
КонецФункции

Процедура ЗагрузитьВидыЦенВМассив(Параметры)
	
	Параметры.Вставить("МассивВидовЦен", Параметры.ВидыЦен.ВыгрузитьКолонку("ВидЦен"));
	
КонецПроцедуры

Процедура ПодготовитьМассивИзмененийНоменклатуры(Параметры)
	
	МассивИзмененийНоменклатуры = Новый Массив;
	
	Если Параметры.ВыгружатьТолькоИзменения
		И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
		
		МассивИзмененийНоменклатуры = Параметры.СтруктураИзменений.Товары;
		
	КонецЕсли;
	
	Параметры.Вставить("МассивИзмененийНоменклатуры", МассивИзмененийНоменклатуры);
	
КонецПроцедуры

// Получает данные, необходимые для выгрузки классификатора, каталога и пакета предложений
// и добавляет в структуру Параметры.
//
Процедура ПодготовитьДанныеДляВыгрузки(Параметры)
	
	// Компоновщик настроек.
	
	КомпоновщикНастроек = ПолучитьКомпоновщикНастроекВыгрузкиТоваров(Параметры.СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки);
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьХарактеристики");
	ПараметрСКД.Значение = Параметры.ИспользоватьХарактеристики;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОрганизацияВладелецКаталога");
	ПараметрСКД.Значение = Параметры.ОрганизацияВладелецКаталога;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидыЦен");
	ПараметрСКД.Значение = Параметры.МассивВидовЦен;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("УчетВалютныхОпераций");
	ПараметрСКД.Значение = Параметры.УчетВалютныхОпераций;
	ПараметрСКД.Использование = Истина;
	
	Если Параметры.ВыгружатьКартинки Тогда 
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("РазрешенныеТипыКартинок");
		ПараметрСКД.Значение = Параметры.РазрешенныеТипыКартинок;
		ПараметрСКД.Использование = Истина;
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("РазрешенныеТипыНоменклатуры");
	ПараметрСКД.Значение = Параметры.РазрешенныеТипыНоменклатуры;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВыгружатьКатегории");
	ПараметрСКД.Значение = ?(Параметры.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры,
		Истина, Ложь);
	ПараметрСКД.Использование = Истина;
	
	// Отборы.
	
	Если Параметры.ВыгружатьТолькоИзменения
		И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
		
		ИзменитьОтборКомпоновщика(КомпоновщикНастроек,
			Параметры.СтрокаТаблицыКаталогов.Группы,
			Параметры.МассивИзмененийНоменклатуры);
		
	Иначе
		
		ИзменитьОтборКомпоновщика(КомпоновщикНастроек,
			Параметры.СтрокаТаблицыКаталогов.Группы);
		
	КонецЕсли;
	
	// Запрос.
	
	СхемаВыгрузкиТоваров = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиТоваров");
	Запрос = ПолучитьЗапросИзМакетаКомпоновки(КомпоновщикНастроек, СхемаВыгрузкиТоваров);
	
	Запрос.УстановитьПараметр("МаксимальноРазрешенныйРазмерКартинки", 5000000); //5 Мб
	Запрос.УстановитьПараметр("УзелОбмена", Параметры.УзелОбмена);
	
	ДобавитьЗапросыВПакет(Запрос.Текст, Параметры);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Параметры.Вставить("ВыборкаЦен", МассивРезультатовЗапроса[12].Выбрать());
	Параметры.Вставить("ВыборкаСкладов", МассивРезультатовЗапроса[13].Выбрать());
	
	ТаблицаОстатковПоСкладам = МассивРезультатовЗапроса[14].Выгрузить();
	ТаблицаОстатковПоСкладам.Индексы.Добавить("Номенклатура, Характеристика");
	Параметры.Вставить("ТаблицаОстатковПоСкладам", ТаблицаОстатковПоСкладам);
	
	Параметры.Вставить("ВыборкаВидовЦен", МассивРезультатовЗапроса[16].Выбрать());
	
	Параметры.Вставить("ДеревоСвойствХарактеристик", 
		МассивРезультатовЗапроса[17].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Параметры.Вставить("ВыборкаСвойствНоменклатурыДляКлассификатора", 
		МассивРезультатовЗапроса[22].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	РезультатЗапросаСвойствНоменклатуры = МассивРезультатовЗапроса[23];
	Если РезультатЗапросаСвойствНоменклатуры.Пустой() Тогда
		ВыборкаСвойствНоменклатуры = Неопределено;
	Иначе
		ВыборкаСвойствНоменклатуры = РезультатЗапросаСвойствНоменклатуры.Выбрать();
		ВыборкаСвойствНоменклатуры.Следующий();
	КонецЕсли;
		
	Параметры.Вставить("ВыборкаСвойствНоменклатуры", ВыборкаСвойствНоменклатуры);
	
	РезультатЗапросаДанныхОрганизацииВладельцаКаталога = МассивРезультатовЗапроса[26];
	Если РезультатЗапросаДанныхОрганизацииВладельцаКаталога.Пустой() Тогда
		ВыборкаДанныхОрганизацииВладельцаКаталога = Неопределено;
	Иначе
		ВыборкаДанныхОрганизацииВладельцаКаталога = РезультатЗапросаДанныхОрганизацииВладельцаКаталога.Выбрать();
		ВыборкаДанныхОрганизацииВладельцаКаталога.Следующий();
	КонецЕсли;
	
	Параметры.Вставить("ДанныеОрганизацииВладельцаКаталога", ВыборкаДанныхОрганизацииВладельцаКаталога);
	
	Параметры.Вставить("ВыборкаНоменклатуры", МассивРезультатовЗапроса[27].Выбрать());
	Параметры.Вставить("ДеревоГрупп", МассивРезультатовЗапроса[29].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
	
	Если Параметры.ВыгружатьКартинки Тогда
		
		РезультатЗапросаФайлов = МассивРезультатовЗапроса[30];
		Если РезультатЗапросаФайлов.Пустой() Тогда
			ВыборкаФайлов = Неопределено;
		Иначе
			ВыборкаФайлов = РезультатЗапросаФайлов.Выбрать();
			ВыборкаФайлов.Следующий();
		КонецЕсли;
		
	Иначе
		ВыборкаФайлов = Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ВыборкаФайлов", ВыборкаФайлов);
	
	Параметры.Вставить("КатегорииНоменклатуры", МассивРезультатовЗапроса[31].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Параметры.Вставить("СоответствияОбъектовСайта", Новый Соответствие);
	
КонецПроцедуры

// Получает запрос из макета компоновки и инциализирует параметры запроса.
//
// Параметры:
// КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных.
// 
// Возвращаемое значение:
// Запрос - запрос, полученный из макета компоновки данных.
//
Функция ПолучитьЗапросИзМакетаКомпоновки(КомпоновщикНастроек, СхемаКомпоновки) Экспорт
	
	Запрос = Новый Запрос;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

// Формирует пакетный запрос для получения необходимых данных для выгрузки классификатора, каталога и пакета предложений.
//
Процедура ДобавитьЗапросыВПакет(ТекстЗапроса, Параметры)
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС
	  + "ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад,
		|	СтруктурныеЕдиницы.Наименование,
		|	СтруктурныеЕдиницы.КонтактнаяИнформация.(
		|		Ссылка,
		|		НомерСтроки,
		|		Тип,
		|		Вид,
		|		Представление,
		|		ЗначенияПолей,
		|		Страна,
		|		Регион,
		|		Город,
		|		АдресЭП,
		|		ДоменноеИмяСервера,
		|		НомерТелефона,
		|		НомерТелефонаБезКодов
		|	)
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	(СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
		|			ИЛИ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		|			ИЛИ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыОстатки.СтруктурнаяЕдиница КАК Склад,
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.Характеристика,
		|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоНаСкладе
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура,
		|						ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаНоменклатураХарактеристикиОстатки КАК ВременнаяТаблицаНоменклатураХарактеристикиОстатки)) КАК ЗапасыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблицаШтрихкодыДляЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВидыЦен.ВидЦен КАК ВидЦен,
		|	ВременнаяТаблицаВидыЦен.ВалютаЦены КАК ВалютаЦены,
		|	ВременнаяТаблицаВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	ВременнаяТаблицаВидыЦен КАК ВременнаяТаблицаВидыЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаЦены.Характеристика КАК Характеристика,
		|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
		|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
		|		ПО ВременнаяТаблицаЦены.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
		|ИТОГИ ПО
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблицаЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ПометкаУдаления КАК ПометкаУдаления,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Родитель КАК Родитель,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура.КатегорияНоменклатуры.НаборСвойств КАК НаборСвойств,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Код КАК Код,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Наименование КАК Наименование,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Артикул КАК Артикул,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ФайлКартинки КАК ФайлКартинки
		|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатура
		|ИЗ
		|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки КАК ВременнаяТаблицаНоменклатураХарактеристикиОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблицаНоменклатураХарактеристикиОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизиты.Номенклатура КАК Номенклатура,
		|	ДополнительныеРеквизиты.Свойство КАК Свойство,
		|	ЗначенияДополнительныхРеквизитов.Значение КАК Значение
		|ПОМЕСТИТЬ ВременнаяТаблицаСвойстваНоменклатуры
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
		|		НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
		|	ИЗ
		|		ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		|			ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)
		|					И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.НаборСвойств = ВременнаяТаблицаНоменклатура.НаборСвойств
		|						ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))) КАК ДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияДополнительныхРеквизитов
		|		ПО ДополнительныеРеквизиты.Номенклатура = ЗначенияДополнительныхРеквизитов.Ссылка
		|			И ДополнительныеРеквизиты.Свойство = ЗначенияДополнительныхРеквизитов.Свойство		
		
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Номенклатура,
		|	ДополнительныеСведения.Свойство,
		|	ЗначенияДополнительныхСведений.Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
		|		НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство
		|	ИЗ
		|		ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|			ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура))) КАК ДополнительныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияДополнительныхСведений
		|		ПО ДополнительныеСведения.Номенклатура = ЗначенияДополнительныхСведений.Объект
		|			И ДополнительныеСведения.Свойство = ЗначенияДополнительныхСведений.Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСвойстваНоменклатуры.Свойство КАК Свойство,
		|	ТаблицаСвойстваНоменклатуры.Свойство.НаборСвойств КАК НаборСвойств,
		|	ТаблицаСвойстваНоменклатуры.Свойство.ТипЗначения КАК ТипЗначения,
		|	ТаблицаСвойстваНоменклатуры.Значение КАК Значение
		|
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВременнаяТаблицаСвойстваНоменклатуры.Свойство КАК Свойство,
		|		ВременнаяТаблицаСвойстваНоменклатуры.Значение КАК Значение
		|	ИЗ
		|		ВременнаяТаблицаСвойстваНоменклатуры КАК ВременнаяТаблицаСвойстваНоменклатуры) КАК ТаблицаСвойстваНоменклатуры
		|
		|ИТОГИ ПО
		|	Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСвойстваНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаСвойстваНоменклатуры.Свойство КАК Свойство,
		|	ВременнаяТаблицаСвойстваНоменклатуры.Значение КАК Значение
		|ИЗ
		|	ВременнаяТаблицаСвойстваНоменклатуры КАК ВременнаяТаблицаСвойстваНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблицаСвойстваНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
		|ПОМЕСТИТЬ ВременнаяТаблицаШтрихкодыДляКаталога
		|ИЗ
		|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ВременнаяТаблицаНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И (ШтрихкодыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаНоменклатура.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Контрагент,
		|	Организации.Наименование КАК Наименование,
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	Организации.ЮридическоеФизическоеЛицо КАК ЮрФизЛицо,
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП,
		|	Организации.КодПоОКПО КАК КодПоОКПО,
		|	Организации.КонтактнаяИнформация.(
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей
		|	) КАК КонтактнаяИнформация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &ОрганизацияВладелецКаталога
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	ВременнаяТаблицаНоменклатура.Родитель КАК Родитель,
		|	ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ВременнаяТаблицаНоменклатура.Код КАК Код,
		|	ВременнаяТаблицаНоменклатура.Наименование КАК Наименование,
		|	ВременнаяТаблицаНоменклатура.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	ВременнаяТаблицаНоменклатура.Номенклатура.Комментарий КАК Комментарий,
		|	ВременнаяТаблицаНоменклатура.Артикул КАК Артикул,
		|	ВременнаяТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ВременнаяТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
		|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмеренияНаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
		|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмеренияМеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
		|	ВременнаяТаблицаНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаНоменклатура.ФайлКартинки КАК ФайлКартинки,
		|	ЕСТЬNULL(ВременнаяТаблицаШтрихкодыДляКаталога.Штрихкод, """") КАК ШтрихКод,
		|	ЕСТЬNULL(СоответствияОбъектовСайта.УникальныйИдентификаторСайта, """") КАК СистемныйИД
		|ИЗ
		|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШтрихкодыДляКаталога КАК ВременнаяТаблицаШтрихкодыДляКаталога
		|		ПО ВременнаяТаблицаНоменклатура.Номенклатура = ВременнаяТаблицаШтрихкодыДляКаталога.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
		|		ПО СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
		|		И (НЕ СоответствияОбъектовСайта.ОбъектВыгружен)
		|		И ВременнаяТаблицаНоменклатура.Номенклатура = СоответствияОбъектовСайта.СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблицаШтрихкодыДляКаталога
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		Если Параметры.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КатегорииНоменклатуры.Ссылка КАК Номенклатура
			|ИЗ
			|	ВременнаяТаблицаНоменклатура КАК НоменклатураГруппы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
			|		ПО НоменклатураГруппы.КатегорияНоменклатуры = КатегорииНоменклатуры.Ссылка
			|ИТОГИ ПО
			|	Ссылка ИЕРАРХИЯ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура
			|ИЗ
			|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
			|ИТОГИ ПО
			|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
		КонецЕсли;
		
		Если Параметры.ВыгружатьКартинки Тогда
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
			|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Файл,
			|	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
			|	НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
			|	НоменклатураПрисоединенныеФайлы.Том КАК Том,
			|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК ТипХраненияФайла,
			|	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
			|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК ПутьКФайлу,
			|	ВЫБОР
			|		КОГДА НоменклатураПрисоединенныеФайлы.Размер > &МаксимальноРазрешенныйРазмерКартинки
			|			ТОГДА ""СлишкомБольшойФайл""
			|		ИНАЧЕ ПрисоединенныеФайлы.ХранимыйФайл
			|	КОНЕЦ КАК ХранимыйФайл
			|ИЗ
			|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
			|			ПО НоменклатураПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
			|				И (НоменклатураПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе))
			|		ПО (НоменклатураПрисоединенныеФайлы.ВладелецФайла = ВременнаяТаблицаНоменклатура.Номенклатура)
			|			И (НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления)
			|ГДЕ
			|	НоменклатураПрисоединенныеФайлы.Расширение В(&РазрешенныеТипыКартинок)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура";
			
		Иначе
			//Пустой запрос
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
			"Выбрать Неопределено КАК Номенклатура";		
		КонецЕсли;
		
		//Категории для выгрузки отдельным разделом
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры КАК Категория,
		|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы КАК Ид,
		|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта КАК ИдСайта,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
		|ИЗ
		|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
		|		ПО (СоответствияОбъектовСайта.СсылкаНаОбъект = ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры)
		|			И (СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		|		ПО ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры.НаборСвойств = НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка
		|ГДЕ
		|	НЕ ВременнаяТаблицаНоменклатура.Номенклатура.ЭтоГруппа
		|ИТОГИ
		|	МАКСИМУМ(Ид),
		|	МАКСИМУМ(ИдСайта)
		|ПО
		|	Категория";
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС
			+ "УНИЧТОЖИТЬ ВременнаяТаблицаНоменклатура";
	
КонецПроцедуры

Функция ПолучитьКомпоновщикНастроекВыгрузкиТоваров(ХранилищеНастроекВыгрузки)
	
	СхемаВыгрузкиТоваров = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиТоваров");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузкиТоваров)); 
	
	НастройкиКомпоновщикаИзНастройкиОбмена = ХранилищеНастроекВыгрузки.Получить();
	Если ЗначениеЗаполнено(НастройкиКомпоновщикаИзНастройкиОбмена) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщикаИзНастройкиОбмена);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиТоваров.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

Процедура ИзменитьОтборКомпоновщика(КомпоновщикНастроек, СписокГруппКаталога = Неопределено, МассивИзмененийНоменклатуры = Неопределено) Экспорт
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборПоКаталогу   = "ПрограммныйОтборПоКаталогу";
	ОтборПоИзменениям = "ПрограммныйОтборПоИзменениям";
	ОтборПоКатегории  = "ПрограммныйОтборПоКатегории";
	
	// Удаляем программные отборы, если они были установлены.
	
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу
			ИЛИ ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоИзменениям Тогда
			
			МассивУдалить.Добавить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
		
		Отбор.Элементы.Удалить(УдалитьЭлемент);
		
	КонецЦикла;
	
	// Добавляем отбор по каталогу.
	
	Если СписокГруппКаталога <> Неопределено И СписокГруппКаталога.Количество() > 0 Тогда
		
		Если ТипЗнч(СписокГруппКаталога[0].Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			//Номенклатура
			
			ВыгружатьВсе = Ложь;
			УсловиеНоменклатураБезКаталога = Неопределено;
			НадписьВсеЭлементыСписка = ОбменССайтом.НадписьВсеГруппы();
			НадписьНетГруппы = ОбменССайтом.НадписьНетГруппы();
			Для каждого стрКаталог Из СписокГруппКаталога Цикл
				Если стрКаталог.Значение = Справочники.Номенклатура.ПустаяСсылка() И стрКаталог.Представление = НадписьВсеЭлементыСписка Тогда
					ВыгружатьВсе = Истина;
					Прервать;
				КонецЕсли;
				Если стрКаталог.Значение = Справочники.Номенклатура.ПустаяСсылка() И стрКаталог.Представление = НадписьНетГруппы Тогда
					УсловиеНоменклатураБезКаталога = стрКаталог;
				КонецЕсли;
			КонецЦикла;
			
			Если ВыгружатьВсе Тогда
				//Нет отбора
			ИначеЕсли УсловиеНоменклатураБезКаталога<>Неопределено И СписокГруппКаталога.Количество() > 1 Тогда
				
				СписокГруппКаталогаБезПустогоЗначения = СписокГруппКаталога.Скопировать();
				СписокГруппКаталогаБезПустогоЗначения.Удалить(СписокГруппКаталога.Индекс(УсловиеНоменклатураБезКаталога));
				
				НоваяГруппаОтбора = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
				НоваяГруппаОтбора.Использование = Истина;
				
				//Товары из выбранных папок ВСпискеПоИерархии
				НовыйЭлемент = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				НовыйЭлемент.ПравоеЗначение = СписокГруппКаталогаБезПустогоЗначения;
				НовыйЭлемент.Использование = Истина;
				
				//Товары в корневом каталоге, у которых Родитель = ПустаяСсылка
				НовыйЭлемент = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура.Родитель");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйЭлемент.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
				НовыйЭлемент.Использование = Истина;
				
			ИначеЕсли УсловиеНоменклатураБезКаталога<>Неопределено И СписокГруппКаталога.Количество() = 1 Тогда
				
				//Товары в корневом каталоге, у которых Родитель = ПустаяСсылка
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура.Родитель");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйЭлемент.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
				НовыйЭлемент.Использование = Истина;
			Иначе
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				НовыйЭлемент.ПравоеЗначение = СписокГруппКаталога;
				НовыйЭлемент.Использование = Истина;
			КонецЕсли; 
		Иначе
			//Категории номенклатуры
			НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКатегории;
			НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("КатегорияНоменклатуры");
			НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			НовыйЭлемент.ПравоеЗначение = СписокГруппКаталога;
			НовыйЭлемент.Использование = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	// Добавляем отбор по изменениям.
	
	Если МассивИзмененийНоменклатуры <> Неопределено Тогда
		
		СписокГруппОтбора = Новый СписокЗначений;
		СписокГруппОтбора.ЗагрузитьЗначения(МассивИзмененийНоменклатуры);
		
		НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоИзменениям;
		НовыйЭлемент.ЛевоеЗначение 	=  Новый ПолеКомпоновкиДанных("Номенклатура");
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		НовыйЭлемент.ПравоеЗначение = СписокГруппОтбора;
		НовыйЭлемент.Использование 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Выгружает классификатор и каталог товаров в каталог на диске.
//
Функция ВыгрузитьКлассификаторИКаталог(Параметры, ИмяФайлаКаталога, ПакетCML)
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOКлассификаторИКаталог(Параметры, ПакетCML);

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаКаталога, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Попытка
		
		КоммерческаяИнформацияXDTO.Проверить();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать XML-файл классификатора товаров на диск: '")
				+ ИмяФайлаКаталога + Символы.ПС + ОписаниеОшибки()));
			
		СтруктураРезультата.ВыгруженоКартинок = 0;
		СтруктураРезультата.ВыгруженоТоваров = 0;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПодготовитьДанныеXDTOКлассификаторИКаталог(Параметры, ПакетCML)
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.05";
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	КлассификаторТип = ПакетCML.Получить("Классификатор");
	КлассификаторXDTO = ФабрикаXDTO.Создать(КлассификаторТип);
	
	КлассификаторXDTO.ИД = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
	КлассификаторXDTO.Наименование = ФорматНаименованияДляXDTO("Классификатор (" + Параметры.СтрокаТаблицыКаталогов.Каталог + ")");
	
	КлассификаторXDTO.Владелец = ПолучитьКонтрагентаXDTO(Параметры.ДанныеОрганизацииВладельцаКаталога, ПакетCML);
	
	ДобавитьГруппыКлассификатораXDTO(КлассификаторXDTO, Параметры.ДеревоГрупп.Строки, Параметры.СтрокаТаблицыКаталогов.Группы, ПакетCML, Параметры);
	
	ДобавитьКатегорииКлассификатораXDTO(КлассификаторXDTO, Параметры.КатегорииНоменклатуры, ПакетCML, Параметры);
	
	ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, Параметры.ВыборкаСвойствНоменклатурыДляКлассификатора, Параметры);
	
	КоммерческаяИнформацияXDTO.Классификатор = КлассификаторXDTO;
	
	КаталогТип = ПакетCML.Получить("Каталог");
	КаталогXDTO = ФабрикаXDTO.Создать(КаталогТип);
	
	КаталогXDTO.СодержитТолькоИзменения = Параметры.ВыгружатьТолькоИзменения И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно;
	КаталогXDTO.Ид = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
	КаталогXDTO.ИдКлассификатора = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
	КаталогXDTO.Наименование = ФорматНаименованияДляXDTO(Параметры.СтрокаТаблицыКаталогов.Каталог);
	
	КаталогXDTO.Владелец = ПолучитьКонтрагентаXDTO(Параметры.ДанныеОрганизацииВладельцаКаталога, ПакетCML);
	
	ДобавитьНоменклатуруВКаталогXDTO(КаталогXDTO, ПакетCML, Параметры);
	КаталогXDTO.Проверить();
	
	КоммерческаяИнформацияXDTO.Каталог = КаталогXDTO;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

Функция СериализоватьОбъект(ИнформацияXDTO)
    ЗаписьXML= новый ЗаписьXML;
    ЗаписьXML.УстановитьСтроку();
       ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ИнформацияXDTO);
    возврат ЗаписьXML.Закрыть()
КонецФункции	
	
Процедура ДобавитьГруппыКлассификатораXDTO(КлассификаторXDTO, ДеревоГрупп, СписокГрупп, ПакетCML, Параметры) Экспорт
	
	ГруппыКлассификатораТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Классификатор"), "Группы");
	ГруппыКлассификатораXDTO = ФабрикаXDTO.Создать(ГруппыКлассификатораТип);
	
	ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, ДеревоГрупп, СписокГрупп, ПакетCML, ,Параметры);
	
	Если ГруппыКлассификатораXDTO.Группа.Количество() > 0 Тогда
		КлассификаторXDTO.Группы = ГруппыКлассификатораXDTO;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, ДеревоГрупп, СписокГрупп, ПакетCML, ТекущийРодитель = Неопределено, Параметры)
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		ОписаниеТипаНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");

		Если НЕ СтрокаДерева.Номенклатура.ЭтоГруппа 
			И (СписокГрупп = Неопределено ИЛИ СписокГрупп.ТипЗначения = ОписаниеТипаНоменклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокГрупп <> Неопределено И СписокГрупп.Количество()>0
			И ТипЗнч(СписокГрупп[0].Значение) = Тип("СправочникСсылка.Номенклатура") 
			И ЭтоГруппаВерхнегоУровня(СтрокаДерева.Номенклатура, СписокГрупп) Тогда
			
			//Группа верхнего уровня должна быть в списке групп для выгрузки
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, СтрокаДерева.Строки, СписокГрупп, ПакетCML, СтрокаДерева.Номенклатура, Параметры);
			КонецЕсли;
			
		Иначе
			
			Если СтрокаДерева.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;

			ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
			
			ИдГруппы = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(СтрокаДерева.Номенклатура);
			ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
			
			ГруппаXDTO.Ид = ИдГруппы;
			ДобавитьИДСайтаВВыгрузку(ГруппаXDTO, СтрокаДерева.Номенклатура, Параметры);
			
			ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
			
			ГруппыXDTO = ПолучитьГруппыНоменклатурыXDTO(СтрокаДерева.Строки, СписокГрупп, ПакетCML, СтрокаДерева.Номенклатура, Параметры);
			Если ГруппыXDTO.Группа.Количество() > 0 Тогда
				ГруппаXDTO.Группы = ГруппыXDTO;
			КонецЕсли;
			
			ГруппыКлассификатораXDTO.Группа.Добавить(ГруппаXDTO);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно формирует Объект XDTO, содержащий иерархию групп номенклатуры.
//
// Параметры:
//	ДеревоГрупп - Дерево значений
//	СписокГрупп - список значений, группы выгружаемого каталога
//	ТекущийРодитель - СправочникСсылка.Номенклатура.
//
//Возвращаемое значение:
//	ОбъектXDTO - объект, содержащий иерархию групп.
//
Функция ПолучитьГруппыНоменклатурыXDTO(ДеревоГрупп, СписокГрупп, ПакетCML, ТекущийРодитель = Неопределено, Параметры)
	
	ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Группа"), "Группы");
	ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если НЕ СтрокаДерева.Номенклатура.ЭтоГруппа И ТипЗнч(СтрокаДерева.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
		
		ИдГруппы = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(СтрокаДерева.Номенклатура);
		ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
		
		ГруппаXDTO.Ид = ИдГруппы;
		ДобавитьИДСайтаВВыгрузку(ГруппаXDTO, СтрокаДерева.Номенклатура, Параметры);
		ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			ГруппыОбъектXDTO = ПолучитьГруппыНоменклатурыXDTO(СтрокаДерева.Строки, СписокГрупп, ПакетCML, СтрокаДерева.Номенклатура, Параметры);
			
			Если ГруппыОбъектXDTO.Группа.Количество() > 0 Тогда
				ГруппаXDTO.Группы = ГруппыОбъектXDTO;
			КонецЕсли;
			
		КонецЕсли;
		
		ГруппыXDTO.Группа.Добавить(ГруппаXDTO);
		
	КонецЦикла;
	
	Возврат ГруппыXDTO;
	
КонецФункции

// Добавляет свойства Номенклатуры в список свойств объекта XDTO типа Классификатор.
//
// Параметры
//	КлассификаторXDTO - объект XDTO типа Классификатор
//	ПакетCML - пакет XDTO
//	ВыборкаСвойствНоменклатуры - выборка, содержащая свойства Номенклатуры.
//
Процедура ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, ВыборкаСвойствНоменклатуры, Параметры) Экспорт
	
	Если ВыборкаСвойствНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТип = КлассификаторXDTO.Свойства().Получить("Свойства").Тип;
	СвойстваXDTO = ФабрикаXDTO.Создать(СвойстваТип);
	
	Пока ВыборкаСвойствНоменклатуры.Следующий() Цикл
		
		СвойствоXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Свойство"));
		
		СвойствоXDTO.ИД = Строка(ВыборкаСвойствНоменклатуры.Свойство.УникальныйИдентификатор());
		ДобавитьИДСайтаВВыгрузку(СвойствоXDTO, ВыборкаСвойствНоменклатуры.Свойство, Параметры);
		
		Если ЗначениеЗаполнено(ВыборкаСвойствНоменклатуры.Свойство.Заголовок) Тогда
			СвойствоXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаСвойствНоменклатуры.Свойство.Заголовок);
		Иначе
			СвойствоXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаСвойствНоменклатуры.Свойство);
		КонецЕсли;
		
		Типы = ВыборкаСвойствНоменклатуры.ТипЗначения.Типы();
		
		ТипXML = "Строка";
		
		Если Типы.Количество() <> 1 Тогда
			
			// По стандарту CML 2.05 можно выгрузить только один тип значений.
			// Выгружаем тип "Строка", как универсальный тип.
			
			СвойствоXDTO.ТипЗначений = ТипXML;
			
		Иначе
			
			Тип = Типы[0];
			
			Если Тип = Тип("Число") Тогда
				ТипXML = "Число";
			ИначеЕсли Тип = Тип("Дата") Тогда
				ТипXML = "Время";
			ИначеЕсли ТипЗначенияСправочник(Тип) Тогда
				ТипXML = "Справочник";
			КонецЕсли;
			
			СвойствоXDTO.ТипЗначений = ТипXML;
			
			Если ТипXML = "Справочник" Тогда
				
				ВариантыЗначенийСвойстваТип = ПакетCML.Получить("ВариантыЗначенийСвойства");
				СправочникТип = ВариантыЗначенийСвойстваТип.Свойства.Получить("Справочник").Тип;
				
				ВариантыЗначенийXDTO = ФабрикаXDTO.Создать(ВариантыЗначенийСвойстваТип);
				
				ВариантыЗначений = ПолучитьВариантыЗначенийСвойстваПоТипу(ВыборкаСвойствНоменклатуры, Тип);
				Для Каждого ВариантЗначения Из ВариантыЗначений Цикл
					
					Значение = ФорматЗначениеСвойстваСтрокаДляXDTO(ВариантЗначения);
					Если ПустаяСтрока(Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					СправочникXDTO = ФабрикаXDTO.Создать(СправочникТип);
					
					СправочникXDTO.ИдЗначения = Строка(ВариантЗначения.УникальныйИдентификатор());
					СправочникXDTO.Значение = Значение;
					
					ВариантыЗначенийXDTO.Справочник.Добавить(СправочникXDTO);
					
				КонецЦикла;
				
				СвойствоXDTO.ВариантыЗначений = ВариантыЗначенийXDTO;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваXDTO.Свойство.Добавить(СвойствоXDTO);
		
	КонецЦикла;
	
	КлассификаторXDTO.Свойства = СвойстваXDTO;
	
КонецПроцедуры

// Заполняет список товаров объекта XDTO типа Каталог
//
// Параметры
//	КаталогXDTO - объект XDTO типа Каталог
//	ПакетCML - пакет XDTO
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьНоменклатуруВКаталогXDTO(КаталогXDTO, ПакетCML, Параметры) Экспорт
	
	ТоварыТип = КаталогXDTO.Свойства().Получить("Товары").Тип;
	ТоварыXDTO = ФабрикаXDTO.Создать(ТоварыТип);
	
	Пока Параметры.ВыборкаНоменклатуры.Следующий() Цикл
		
		ДополнительныеДанные = ПолучитьДополнительныеДанныеДляВыгрузкиВКаталог(Параметры);
		ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ДополнительныеДанные, Параметры);
		
	КонецЦикла;
	
	Если ТоварыXDTO.Товар.Количество() > 0 Тогда
		
		КаталогXDTO.Товары = ТоварыXDTO;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает объект XDTO БазоваяЕдиница и заполняет данными
//
Функция ПолучитьБазовуюЕдиницуXDTO(ПакетCML, ДанныеЕдиницы)
	
	БазоваяЕдиницаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("БазоваяЕдиница"));
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияКод) Тогда
		БазоваяЕдиницаXDTO.Код = Лев(ДанныеЕдиницы.ЕдиницаИзмеренияКод, 3);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияНаименованиеПолное) Тогда
		БазоваяЕдиницаXDTO.НаименованиеПолное = ДанныеЕдиницы.ЕдиницаИзмеренияНаименованиеПолное;
	Иначе
		БазоваяЕдиницаXDTO.НаименованиеПолное = ДанныеЕдиницы.ЕдиницаИзмерения.Наименование;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияМеждународноеСокращение) Тогда
		БазоваяЕдиницаXDTO.МеждународноеСокращение = ДанныеЕдиницы.ЕдиницаИзмеренияМеждународноеСокращение;
	КонецЕсли;
	
	Возврат БазоваяЕдиницаXDTO;
	
КонецФункции

// Добавляет объект XDTO типа Товар в список товаров объекта XDTO типа Каталог
//
// Параметры
//	ТоварыXDTO - объект XDTO типа Товары
//	ПакетCML - пакет XDTO
//	ДополнительныеДанные - структура, содержащая информацию по изображениям номенклатуры и значения свойств
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ДополнительныеДанные, Параметры)
	
	ТоварТип = ПакетCML.Получить("Товар");
	ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
	
	Если Параметры.ВыборкаНоменклатуры.ПометкаУдаления Тогда
		
		ТоварXDTO.Статус = "Удален";
		
	КонецЕсли;
	
	Ид = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Параметры.ВыборкаНоменклатуры.Номенклатура);
	ТоварXDTO.Ид = Ид;
	
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд",Параметры.ВыборкаНоменклатуры) И ЗначениеЗаполнено(Параметры.ВыборкаНоменклатуры.СистемныйИд) Тогда
		ТоварXDTO.ИдСайта = Параметры.ВыборкаНоменклатуры.СистемныйИд;
		Параметры.СоответствияОбъектовСайта.Вставить(Параметры.ВыборкаНоменклатуры.Номенклатура);
	КонецЕсли;
	
	Штрихкод = ПолучитьШтрихкодДляXDTO(Параметры.ВыборкаНоменклатуры.ШтрихКод);
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ТоварXDTO.Штрихкод = ШтрихКод;
		
	КонецЕсли;
	
	ТоварXDTO.Артикул = Параметры.ВыборкаНоменклатуры.Артикул;
	ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(Параметры.ВыборкаНоменклатуры.Наименование);
	ТоварXDTO.БазоваяЕдиница = ПолучитьБазовуюЕдиницуXDTO(ПакетCML, Параметры.ВыборкаНоменклатуры);
	
	ИдГруппы = "";
	Если ЗначениеЗаполнено(Параметры.ВыборкаНоменклатуры.Родитель) Тогда
		
		ИдГруппы = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Параметры.ВыборкаНоменклатуры.Родитель);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдГруппы) Тогда
		
		ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Группы");
		ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
		
		ГруппыXDTO.Ид.Добавить(ИдГруппы);
		
		ТоварXDTO.Группы = ГруппыXDTO;
		
	КонецЕсли;
	
	Если НЕ (Параметры.Свойство("ОбменЧерезВебСервис") И Параметры.ОбменЧерезВебСервис=Истина) Тогда
		//Категории
		ИдКатегории = "";
		Если ЗначениеЗаполнено(Параметры.ВыборкаНоменклатуры.КатегорияНоменклатуры) Тогда
			
			ИдКатегории = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Параметры.ВыборкаНоменклатуры.КатегорияНоменклатуры);
			ТоварXDTO.Категория = ИдКатегории;
		КонецЕсли;
	КонецЕсли; 
		
	ТоварXDTO.Описание = Параметры.ВыборкаНоменклатуры.Комментарий;
	
	ОписанияФайлов = Новый Соответствие;
	ДобавитьАдресаИзображенийНоменклатурыXDTO(ТоварXDTO, ДополнительныеДанные.ТаблицаФайлов, Параметры, ОписанияФайлов);
	
	ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ДополнительныеДанные.ТаблицаСвойств, Параметры, ПакетCML);
	
	СтавкаНДС = Параметры.ВыборкаНоменклатуры.СтавкаНДС;
	Если ЗначениеЗаполнено(СтавкаНДС) И НЕ СтавкаНДС.НеОблагается Тогда
		
		СтавкиНалоговТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "СтавкиНалогов");
		
		СтавкиНалоговXDTO = ФабрикаXDTO.Создать(СтавкиНалоговТип);
		СтавкаНалогаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("СтавкаНалога"));
		
		СтавкаНалогаXDTO.Наименование = Параметры.НаименованиеНалога;
		СтавкаНалогаXDTO.Ставка = ОбменССайтомПовтИсп.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС);
		
		СтавкиНалоговXDTO.СтавкаНалога.Добавить(СтавкаНалогаXDTO);
		
		ТоварXDTO.СтавкиНалогов = СтавкиНалоговXDTO;
		
	КонецЕсли;
	
	Если Параметры.ОбменЧерезВебСервис Тогда
		ДобавитьХарактеристикиТовараXDTO(ТоварXDTO, ПакетCML, Параметры.ВыборкаНоменклатуры.Номенклатура, Параметры.ДеревоСвойствХарактеристик);
	КонецЕсли;
	
	ЗначенияРеквизитовТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов");
	ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ЗначенияРеквизитовТип);
	
	Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
		
		Файл = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ОписаниеФайла", Файл + "#" + Описание);
		
	КонецЦикла;
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ВидНоменклатуры", Параметры.ВыборкаНоменклатуры.ВидНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ТипНоменклатуры", Параметры.ВыборкаНоменклатуры.ТипНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Полное наименование", Параметры.ВыборкаНоменклатуры.НаименованиеПолное);
	
	ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
	ТоварыXDTO.Товар.Добавить(ТоварXDTO);
	
	Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата.ВыгруженоТоваров =
		Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата.ВыгруженоТоваров + 1;
	
КонецПроцедуры

// Добавляет пути к файлам изображений номенклатуры в объект XDTO типа Товар.
//
// Параметры
//	ТоварXDTO - объект XDTO типа Товар
//	ТаблицаФайлов - таблица значений, содержащая пути к файлам
//	Параметры - структура, содержащая параметры обмена
//	ОписанияФайлов - соответствие, ключом которого является пути к файлу, а значением описание файла.
//
Процедура ДобавитьАдресаИзображенийНоменклатурыXDTO(ТоварXDTO, ТаблицаФайлов, Параметры, ОписанияФайлов)
	
	Если НЕ Параметры.ВыгружатьКартинки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	// Основное изображение выгружаем первым.
	
	ТаблицаФайлов.Колонки.Добавить("Сортировка");
	
	ОсновноеИзображение = Параметры.ВыборкаНоменклатуры.ФайлКартинки;
	
	ТаблицаФайлов.ЗаполнитьЗначения(1, "Сортировка");
	
	Если ЗначениеЗаполнено(ОсновноеИзображение) Тогда
		
		Найдено = ТаблицаФайлов.Найти(ОсновноеИзображение, "Файл");
		Если НЕ Найдено = Неопределено Тогда
			
			ИндексОсновногоИзображения = ТаблицаФайлов.Индекс(Найдено);
			Если ИндексОсновногоИзображения > 0 Тогда
				
				Найдено.Сортировка = 0;
				ТаблицаФайлов.Сортировать("Сортировка");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ТаблицаФайлов Цикл
		
		ОписаниеОшибки = "";
		АдресФайла = ВыгрузитьФайл(ТекФайл, Параметры, ОписаниеОшибки);
		
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			
			СтруктураРезультата.ОписаниеОшибки = СтруктураРезультата.ОписаниеОшибки
				+ Символы.ПС
				+ ТекущаяДата() + ": " + ОписаниеОшибки;
			
		Иначе
			
			Если ЗначениеЗаполнено(АдресФайла) Тогда
				
				СтруктураРезультата.ВыгруженоКартинок = СтруктураРезультата.ВыгруженоКартинок + 1;
				
				ТоварXDTO.Картинка.Добавить(АдресФайла);
				
				Описание = ?(ПустаяСтрока(ТекФайл.Описание), ТекФайл.Наименование, ТекФайл.Описание);
				Если НЕ ПустаяСтрока(Описание) Тогда
					
					ОписанияФайлов.Вставить(АдресФайла, Описание);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает файл с изображением номенклатуры на диск и возвращает путь к файлу.
//
// Параметры
//	ДанныеФайла - структура, содержащая информацию по изображению
//	Параметры - структура, содержащая данные по обмену
//	ОписаниеОшибки - строка для записи информации об ошибках
//	
// Возвращаемое значение
//	Строка, содержащая путь к файлу.
//
Функция ВыгрузитьФайл(ДанныеФайла, Параметры, ОписаниеОшибки) Экспорт
	
	АдресФайла = "";
	
	РасширениеФайла = НРег(ДанныеФайла.Расширение);
	
	Если НЕ Параметры.ВыгружатьКартинки
		ИЛИ Параметры.РазрешенныеТипыКартинок.Найти(РасширениеФайла) = Неопределено Тогда
		
		Возврат АдресФайла;
		
	КонецЕсли;
	
	ФайлВХранилище = ДанныеФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	
	Если ФайлВХранилище Тогда
		
		Если ДанныеФайла.ХранимыйФайл = NULL Тогда
			ДвоичныеДанныеФайла = Неопределено;
		ИначеЕсли ДанныеФайла.ХранимыйФайл = "СлишкомБольшойФайл" Тогда
			ДвоичныеДанныеФайла = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ДанныеФайла.Файл);
		Иначе
			ДвоичныеДанныеФайла = ДанныеФайла.ХранимыйФайл.Получить();
		КонецЕсли;
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить данные файла %1 номенклатуры %2'"),
					ДанныеФайла.Файл,
					Параметры.ВыборкаНоменклатуры.Номенклатура));
					
			Возврат АдресФайла;
			
		КонецЕсли;
		
	Иначе
		
		ИмяФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
			ПолучитьПутьТомаДляПлатформы(Параметры.ПлатформаWindows, ДанныеФайла.Том) + "\" + ДанныеФайла.ПутьКФайлу);
		
		Попытка
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
			
		Исключение
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
				ОписаниеИсключительнойОшибки(НСтр("ru = 'Выгрузка файла номенклатуры: '")
					+ Параметры.ВыборкаНоменклатуры.Номенклатура));
					
			Возврат АдресФайла;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяПоНоменклатуре = СтрЗаменить(Параметры.ВыборкаНоменклатуры.Номенклатура.УникальныйИдентификатор(), "-", "");
	ИмяПоХранилищу    = СтрЗаменить(ДанныеФайла.Файл.УникальныйИдентификатор(), "-", "");
	
	ПодкаталогФайлов = Параметры.ПодкаталогФайлов;
	
	ИмяФайла = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + НРег(РасширениеФайла);
	КаталогПоИмени = Лев(ИмяПоНоменклатуре, 2);
	КаталогФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
		Параметры.КаталогНаДиске + "\" + ПодкаталогФайлов + "\" + КаталогПоИмени);
	
	Попытка
		
		СоздатьКаталог(КаталогФайла);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать каталог %1. Номенклатура: %2'"),
				КаталогФайла,
				Параметры.ВыборкаНоменклатуры.Номенклатура))
		);
		
		Возврат АдресФайла;
		
	КонецПопытки;
	
	ПолноеИмяФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows, КаталогФайла + "\" + ИмяФайла);
	
	Попытка
		
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать файл %1 на диск. Номенклатура: %2'"),
				ПолноеИмяФайла,
				Параметры.ВыборкаНоменклатуры.Номенклатура))
		);
		
		Возврат АдресФайла;
		
	КонецПопытки;
	
	АдресФайла = ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайла;
	
	Возврат АдресФайла;
	
КонецФункции

// Добавляет значения свойств номенклатуры в список значений свойств объекта XDTO типа Товар.
//
// Параметры
//	ТоварXDTO - объект XDTO типа Товар
//	ТаблицаСвойств - таблица значений, содержащая значения свойств номенклатуры
//	Параметры - структура, содержащая параметры обмена
//	ПакетCML - пакет XDTO.
//
Процедура ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ТаблицаСвойств, Параметры, ПакетCML)
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСвойствТип = ТоварXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
	ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
	
	Для Каждого СтрокаТаблицыСвойств Из ТаблицаСвойств Цикл
		
		ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
		
		ЗначенияСвойстваXDTO.Ид = Строка(СтрокаТаблицыСвойств.Свойство.УникальныйИдентификатор());
		ДобавитьИДСайтаВВыгрузку(ЗначенияСвойстваXDTO, СтрокаТаблицыСвойств.Свойство, Параметры);
		
		Если СтрокаТаблицыСвойств.Значение = NULL Тогда
			
			// Если значение свойства не заполнено, выгружаем пустую строку.
			ЗначениеСвойства = "";
			
		Иначе
			
			ТипЗначенияСвойства = ТипЗнч(СтрокаТаблицыСвойств.Значение);
			Если ТипЗначенияСвойства = Тип("Дата") Тогда
				
				ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаТаблицыСвойств.Значение);
				
			ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
				
				ЗначениеСвойства = Формат(СтрокаТаблицыСвойств.Значение, "ЧГ=0");
				
			ИначеЕсли ТипЗначенияСправочник(ТипЗначенияСвойства) Тогда
				
				ЗначениеСвойства = Строка(СтрокаТаблицыСвойств.Значение.УникальныйИдентификатор());
				
			Иначе
				
				ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаТаблицыСвойств.Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
		ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
		
	КонецЦикла;
	
	ТоварXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
	
КонецПроцедуры

// Возвращает структуру, содержащую данные по изображениям и свойствам.
//
// Параметры
//	Параметры - Структура - структура, содержащая выборку файлов и выборку свойств
//
// Возвращаемое значение
//	Структура.
//
Функция ПолучитьДополнительныеДанныеДляВыгрузкиВКаталог(Параметры);
	
	ДополнительныеДанные = Новый Структура;
	Номенклатура = Параметры.ВыборкаНоменклатуры.Номенклатура;
	
	// Изображения.
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Файл");
	ТаблицаФайлов.Колонки.Добавить("Наименование");
	ТаблицаФайлов.Колонки.Добавить("Описание");
	ТаблицаФайлов.Колонки.Добавить("Том");
	ТаблицаФайлов.Колонки.Добавить("ХранимыйФайл");
	ТаблицаФайлов.Колонки.Добавить("ТипХраненияФайла");
	ТаблицаФайлов.Колонки.Добавить("Расширение");
	ТаблицаФайлов.Колонки.Добавить("ПутьКФайлу");
	
	Пока (НЕ Параметры.ВыборкаФайлов = Неопределено)
		И Параметры.ВыборкаФайлов.Номенклатура = Номенклатура Цикл
			
			НоваяСтрока = ТаблицаФайлов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ВыборкаФайлов);
			
		Если НЕ Параметры.ВыборкаФайлов.Следующий() Тогда
			
			// Если выборка закончилась, завершаем цикл принудительно,
			// для избежания зацикливания на последней записи выборки.
			
			Параметры.ВыборкаФайлов = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеДанные.Вставить("ТаблицаФайлов", ТаблицаФайлов);
	
	// Свойства.
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Свойство");
	ТаблицаСвойств.Колонки.Добавить("Значение");
	
	Пока (НЕ Параметры.ВыборкаСвойствНоменклатуры = Неопределено)
		И Параметры.ВыборкаСвойствНоменклатуры.Номенклатура = Номенклатура Цикл
			
			НоваяСтрока = ТаблицаСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ВыборкаСвойствНоменклатуры);
			
		Если НЕ Параметры.ВыборкаСвойствНоменклатуры.Следующий() Тогда
			
			Параметры.ВыборкаСвойствНоменклатуры = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеДанные.Вставить("ТаблицаСвойств", ТаблицаСвойств);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

// Выгружает пакет предложений в каталог на диске.
//
// Параметры
//	Параметры - структура, содержащая данные обмена
//	ИмяФайлаПрайса - строка, содержащая путь к файлу пакета предложений
//	ПакетCML - пакет XDTO.
//	
// Возвращаемое значение
//	Истина, если формирование XDTO объектов и запись на диск прошли успешно.
//
Функция ВыгрузитьПакетПредложений(Параметры, ИмяФайлаПрайса, ПакетCML)
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOПакетПредложений(Параметры, ПакетCML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаПрайса, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Попытка
		
		КоммерческаяИнформацияXDTO.Проверить();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать XML-файл пакета предложений на диск: '")
				+ ИмяФайлаПрайса + Символы.ПС + ОписаниеОшибки()));
			
		СтруктураРезультата.ВыгруженоПредложений = 0;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПодготовитьДанныеXDTOПакетПредложений(Параметры, ПакетCML)
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.05";
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	ПакетПредложенийXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ПакетПредложений"));
	
	ПакетПредложенийXDTO.СодержитТолькоИзменения = Параметры.ВыгружатьТолькоИзменения И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно;
	ПакетПредложенийXDTO.Ид = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога + "#";
	ПакетПредложенийXDTO.Наименование = "Пакет предложений (" + Параметры.СтрокаТаблицыКаталогов.Каталог + ")";
	ПакетПредложенийXDTO.ИдКаталога = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
	ПакетПредложенийXDTO.ИдКлассификатора = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
	
	ПакетПредложенийXDTO.Владелец = ПолучитьКонтрагентаXDTO(Параметры.ДанныеОрганизацииВладельцаКаталога, ПакетCML);
	
	ДобавитьВидыЦенВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры);
	
	Если Параметры.ВыгружатьОстаткиПоСкладам Тогда
		ДобавитьСкладыВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры);
	КонецЕсли;
	
	ДобавитьПредложенияВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры);
	
	КоммерческаяИнформацияXDTO.ПакетПредложений = ПакетПредложенийXDTO;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Добавляет виды цен в объект XDTO типа ПакетПредложений.
//
// Параметры
//	ПакетПредложенийXDTO - объект XDTO типа ПакетПредложений
//	ПакетCML - пакет XDTO
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьВидыЦенВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры) Экспорт
	
	Если Параметры.ВыборкаВидовЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыЦенТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "ТипыЦен");
	ТипыЦенXDTO = ФабрикаXDTO.Создать(ТипыЦенТип);
	
	Пока Параметры.ВыборкаВидовЦен.Следующий() Цикл
		
		ТипЦеныXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ТипЦены"));
		
		ИдТипаЦены = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Параметры.ВыборкаВидовЦен.ВидЦен);
		
		ТипЦеныXDTO.Ид = ИдТипаЦены;
		ТипЦеныXDTO.Наименование = ФорматНаименованияДляXDTO(Параметры.ВыборкаВидовЦен.ВидЦен);
		ТипЦеныXDTO.Валюта = ФорматВалютыДляXDTO(Параметры.ВыборкаВидовЦен.ВалютаЦены);
		
		НалогXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Налог"));
		
		НалогXDTO.Наименование = Параметры.НаименованиеНалога;
		НалогXDTO.УчтеноВСумме = Параметры.ВыборкаВидовЦен.ЦенаВключаетНДС;
		
		ТипЦеныXDTO.Налог.Добавить(НалогXDTO);
		ТипыЦенXDTO.ТипЦены.Добавить(ТипЦеныXDTO);
		
	КонецЦикла;
	
	ПакетПредложенийXDTO.ТипыЦен = ТипыЦенXDTO;
	
КонецПроцедуры

// Добавляет предложения в объект XDTO типа ПакетПредложений.
//
// Параметры
//	ПакетПредложенийXDTO - объект XDTO типа ПакетПредложений
//	ПакетCML - пакет XDTO
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьПредложенияВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры) Экспорт
	
	ВыборкаЦен = Параметры.ВыборкаЦен;
	
	Если ВыборкаЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	ПредложенияТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "Предложения");
	ПредложениеТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложенияТип, "Предложение");
	
	ПредложенияXDTO = ФабрикаXDTO.Создать(ПредложенияТип);
	
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	ПредложениеXDTO = Неопределено;
	ЦеныXDTO = Неопределено;
	
	ЭтоПервоеПредложение = Истина;
	
	Пока ВыборкаЦен.Следующий() Цикл
		
		Если Параметры.ИспользоватьХарактеристики Тогда
			ВыборкаЦенХарактеристика = ВыборкаЦен.Характеристика;
		Иначе
			ВыборкаЦенХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Если ВыборкаЦен.Номенклатура = ТекНоменклатура
			И ВыборкаЦенХарактеристика = ТекХарактеристика Тогда
			
			ДобавитьЦенуXDTO(ЦеныXDTO, ПакетCML, ВыборкаЦен, Параметры);
			
		Иначе
			
			Если ЭтоПервоеПредложение Тогда
				
				ЭтоПервоеПредложение = Ложь;
				
			Иначе
				
				ПредложениеXDTO.Цены = ЦеныXDTO;
				ПредложенияXDTO.Предложение.Добавить(ПредложениеXDTO);
				
			КонецЕсли;
			
			ПредложениеXDTO = ФабрикаXDTO.Создать(ПредложениеТип);
			
			ЦеныТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложениеТип, "Цены");
			ЦеныXDTO = ФабрикаXDTO.Создать(ЦеныТип);
			
			ТекНоменклатура = ВыборкаЦен.Номенклатура;
			ТекХарактеристика = ВыборкаЦенХарактеристика;
			
			ДобавитьРеквизитыТовараДляПредложенияXDTO(ПредложениеXDTO, ПакетCML, ВыборкаЦенХарактеристика, Параметры);
			
			ДобавитьЦенуXDTO(ЦеныXDTO, ПакетCML, ВыборкаЦен, Параметры);
			
			ПредложениеXDTO.Количество = ВыборкаЦен.Остаток;
			
			Если Параметры.ВыгружатьОстаткиПоСкладам Тогда
				СкладТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложениеТип, "Склад");
				ДобавитьОстаткиПоСкладамXDTO(ПредложениеXDTO, СкладТип, ВыборкаЦен, Параметры);
			КонецЕсли;
			
			СтруктураРезультата.ВыгруженоПредложений = СтруктураРезультата.ВыгруженоПредложений + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПредложениеXDTO.Цены = ЦеныXDTO;
	ПредложенияXDTO.Предложение.Добавить(ПредложениеXDTO);
	
	ПакетПредложенийXDTO.Предложения = ПредложенияXDTO;
	
КонецПроцедуры

Процедура ДобавитьЦенуXDTO(ЦеныXDTO, ПакетCML, ВыборкаЦен, Параметры)
	
	ЦенаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Цена"));
	
	ИдТипаЦены = Строка(ВыборкаЦен.ВидЦен.УникальныйИдентификатор());
	Единица = ВыборкаЦен.ЕдиницаИзмерения;
	
	ПредставлениеЦены = СокрЛП(ВыборкаЦен.Цена) + " " + СокрЛП(ВыборкаЦен.ВалютаЦены) + " за " + СокрЛП(Единица);
	
	ЦенаXDTO.Представление = ПредставлениеЦены;
	ЦенаXDTO.ИдТипаЦены = ИдТипаЦены;
	ЦенаXDTO.ЦенаЗаЕдиницу = ВыборкаЦен.Цена;
	ЦенаXDTO.Валюта = ФорматВалютыДляXDTO(ВыборкаЦен.ВалютаЦены);
	ЦенаXDTO.Единица = Строка(Единица);
	ЦенаXDTO.Коэффициент = 1;
	
	ЦеныXDTO.Цена.Добавить(ЦенаXDTO);
	
КонецПроцедуры


// Заполняет реквизиты товара для объекта XDTO типа Предложение.
//
// Параметры
//	ПредложениеXDTO - объект XDTO типа Предложение
//	ПакетCML - пакет XDTO
//	Характеристика - характеристика номенклатуры
//	Параметры - параметры обмена.
//
Процедура ДобавитьРеквизитыТовараДляПредложенияXDTO(ПредложениеXDTO, ПакетCML, Характеристика, Параметры)
	
	Если Параметры.ОбменЧерезВебСервис Тогда
		ПредложениеXDTO.Ид = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Параметры.ВыборкаЦен.Номенклатура);
	Иначе
		ПредложениеXDTO.Ид = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Параметры.ВыборкаЦен.Номенклатура, Характеристика);
	КонецЕсли;
	
	Штрихкод = ПолучитьШтрихкодДляXDTO(Параметры.ВыборкаЦен.ШтрихКод);
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ПредложениеXDTO.Штрихкод = Штрихкод;
	КонецЕсли;
	
	Наименование = Параметры.ВыборкаЦен.Наименование;
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		Если ЗначениеЗаполнено(Характеристика) Тогда
			Наименование = Наименование + " (" + Характеристика + ")";
		КонецЕсли;
	КонецЕсли;
	
	ПредложениеXDTO.Наименование = ФорматНаименованияДляXDTO(Наименование);
	ПредложениеXDTO.БазоваяЕдиница = ПолучитьБазовуюЕдиницуXDTO(ПакетCML, Параметры.ВыборкаЦен);
	
	СтатусУдаления = "";
	
	Если Параметры.ИспользоватьХарактеристики
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		ХарактеристикиТовараXDTO = Неопределено;
		НайденнаяСтрока = Параметры.ДеревоСвойствХарактеристик.Строки.Найти(Характеристика, "Характеристика");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ХарактеристикиТовараТип = ПредложениеXDTO.Свойства().Получить("ХарактеристикиТовара").Тип;
			ХарактеристикиТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикиТовараТип);
			
			Если Не Параметры.ОбменЧерезВебСервис Тогда
				
				Для Каждого СтрокаСвойства Из НайденнаяСтрока.Строки Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство)
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ХарактеристикаТовара"));
					
					ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Свойство);
					
					Если ТипЗнч(СтрокаСвойства.Значение) = Тип("Число") Тогда
						ХарактеристикаТовараXDTO.Значение = Формат(СтрокаСвойства.Значение, "ЧГ=0");
					Иначе
						ХарактеристикаТовараXDTO.Значение = ФорматНаименованияДляXDTO(СтрокаСвойства.Значение);
					КонецЕсли;
					
					ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
					
				КонецЦикла;
				
			Иначе
				
				ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ХарактеристикаТовара"));
				
				ХарактеристикаТовараXDTO.ИД = Строка(Характеристика.УникальныйИдентификатор());
				ДобавитьИДСайтаВВыгрузку(ХарактеристикаТовараXDTO, Характеристика, Параметры);
				ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(Характеристика.Наименование);
				
				ЗначенияСвойствТип = ХарактеристикаТовараXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
				ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
				
				Для Каждого СтрокаСвойства Из НайденнаяСтрока.Строки Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство)
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
					ЗначенияСвойстваXDTO.Ид = Строка(СтрокаСвойства.Свойство.УникальныйИдентификатор());
					ДобавитьИДСайтаВВыгрузку(ЗначенияСвойстваXDTO, СтрокаСвойства.Свойство, Параметры);
					ЗначенияСвойстваXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Наименование);
					
					Если СтрокаСвойства.Значение = NULL Тогда
						
						// Если значение свойства не заполнено, выгружаем пустую строку.
						ЗначениеСвойства = "";
						
					Иначе
						
						ТипЗначенияСвойства = ТипЗнч(СтрокаСвойства.Значение);
						Если ТипЗначенияСвойства = Тип("Дата") Тогда
							
							ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаСвойства.Значение);
							
						Иначе
							
							ЗначениеСвойства = Строка(СтрокаСвойства.Значение);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
					ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
					
				КонецЦикла;
				
				Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
					ХарактеристикаТовараXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
				КонецЕсли;
				
				ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ХарактеристикиТовараXDTO <> Неопределено Тогда
			ПредложениеXDTO.ХарактеристикиТовара = ХарактеристикиТовараXDTO;
		КонецЕсли;
		
		Если Параметры.ВыборкаЦен.ХарактеристикаПометкаУдаления Тогда
			СтатусУдаления = "Удален";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ВыборкаЦен.ПометкаУдаления Тогда
		СтатусУдаления = "Удален";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусУдаления) Тогда
		ПредложениеXDTO.Статус = СтатусУдаления;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьИтоговуюИнформациюПоВыгрузкеТоваров(ТаблицаКаталогов, СтрокаТаблицыИнформации, ВыгруженоОбъектов)
	
	СтруктураРезультата = 
		Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, "");
	
	СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ ТекущаяДата() + НСтр("ru = ' Завершено формирование файлов выгрузки товаров'");
	
	Для Каждого Каталог Из ТаблицаКаталогов Цикл
		
		СтруктураРезультата.ВыгруженоТоваров =
			СтруктураРезультата.ВыгруженоТоваров + Каталог.СтруктураРезультата.ВыгруженоТоваров;
		
		СтруктураРезультата.ВыгруженоПредложений =
			СтруктураРезультата.ВыгруженоПредложений + Каталог.СтруктураРезультата.ВыгруженоПредложений;
		
		СтруктураРезультата.ВыгруженоКартинок =
			СтруктураРезультата.ВыгруженоКартинок + Каталог.СтруктураРезультата.ВыгруженоКартинок;
		
	КонецЦикла;
	
	ВыгруженоОбъектов = СтруктураРезультата.ВыгруженоТоваров
		+ СтруктураРезультата.ВыгруженоПредложений
		+ СтруктураРезультата.ВыгруженоКартинок;
	
	СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ НСтр("ru = 'Выгружено товаров: '") + СтруктураРезультата.ВыгруженоТоваров + Символы.ПС
		+ НСтр("ru = 'предложений: '") + СтруктураРезультата.ВыгруженоПредложений + Символы.ПС
		+ НСтр("ru = 'картинок: '") + СтруктураРезультата.ВыгруженоКартинок + Символы.ПС;
	
	Для Каждого Каталог Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание + Символы.ПС
			+ НСтр("ru = 'В том числе для каталога '") + Каталог.Каталог + ":" + Символы.ПС 
			+ НСтр("ru = 'товаров: '") + Каталог.СтруктураРезультата.ВыгруженоТоваров + Символы.ПС
			+ НСтр("ru = 'предложений: '") + Каталог.СтруктураРезультата.ВыгруженоПредложений + Символы.ПС
			+ НСтр("ru = 'картинок: '") + Каталог.СтруктураРезультата.ВыгруженоКартинок + Символы.ПС;
		
		Если ПустаяСтрока(Каталог.СтруктураРезультата.ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание + Символы.ПС
			+ НСтр("ru = 'Ошибки в процессе выгрузки каталога '") + Каталог.Каталог + ":"
			+ Каталог.СтруктураРезультата.ОписаниеОшибки + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Результат)
	
	ДатаОкончания = ТекущаяДата();
	
	СтрокаТаблицыИнформации.Описание = СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ ДатаОкончания + " " + НСтр("ru = 'Завершена выгрузка товаров'");
		
	СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Результат;
	СтрокаТаблицыИнформации.ДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ОБМЕНА ЗАКАЗАМИ

// Запускает процесс обмена заказами.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	ТаблицаИнформации	- Таблица значений, таблица информации о состоянии обмена
// 
// Возвращаемое значение
//	Булево				- Истина, если успех. 
//
Функция ВыполнитьОбменЗаказами(Параметры, ТаблицаИнформации)
	
	УспешноЗагружено = Ложь;
	УспешноВыгружено = Ложь;
	
	СтруктураСтатистики = Новый Структура;
	
	СтруктураСтатистики.Вставить("ОбработаноНаЗагрузке", 0);
	СтруктураСтатистики.Вставить("Загружено" , Новый Массив);
	СтруктураСтатистики.Вставить("Пропущено" , Новый Массив);
	СтруктураСтатистики.Вставить("Обновлено" , Новый Массив);
	СтруктураСтатистики.Вставить("Создано"   , Новый Массив);
	СтруктураСтатистики.Вставить("Выгружено" , Новый Массив);
	
	Если Параметры.ВыгружатьНаСайт Тогда
		
		ОписаниеОшибки = "";
		
		ДатаНачала = ТекущаяДата();
		
		УспешноЗагружено = ЗагрузитьЗаказыССайта(Параметры, СтруктураСтатистики, ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
			ДатаНачала,
			Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
			УспешноЗагружено,
			СтруктураСтатистики,
			ОписаниеОшибки
		);
		
		ОписаниеОшибки = "";
		
		ДатаНачала = ТекущаяДата();
		
		УспешноВыгружено = ВыгрузитьЗаказыНаСайт(Параметры, СтруктураСтатистики, ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
			ДатаНачала,
			Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
			УспешноВыгружено,
			СтруктураСтатистики,
			ОписаниеОшибки
		);
		
	Иначе
		
		ДатаНачала = ТекущаяДата();
		
		ОписаниеОшибки = "";
		
		УспешноЗагружено = ЗагрузитьЗаказыИзФайла(Параметры, СтруктураСтатистики, ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
			ДатаНачала,
			Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
			УспешноЗагружено,
			СтруктураСтатистики,
			ОписаниеОшибки
		);
		
		ДатаНачала = ТекущаяДата();
		
		ОписаниеОшибки = "";
		
		УспешноВыгружено = ВыгрузитьЗаказыВФайл(Параметры, СтруктураСтатистики, ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
			ДатаНачала,
			Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
			УспешноВыгружено,
			СтруктураСтатистики,
			ОписаниеОшибки
		);
		
	КонецЕсли;
	
	Успешно = УспешноЗагружено И УспешноВыгружено;
	Возврат Успешно;
	
КонецФункции

// Загружает заказы с сайта.
//
// Параметры:
//	Параметры				- Структура, основные параметры
//	СтруктураСтатистики		- Структура
//	ОписаниеОшибки			- Строка
//
// Возвращаемое значение
//	Булево				- Истина, если успех. 
//
Функция ЗагрузитьЗаказыССайта(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	
	АдресДляРаботы = Параметры.НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения;
	
	ОписаниеОшибки = "";
	Если НЕ ВыполнитьАвторизациюДляСоединения(Соединение, Параметры.НастройкиПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_ПолучитьДанные,
		ЗаголовкиЗапросов,
		ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаXML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
		
	Иначе
		
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			
			СтрокаXML = ОтветСервера;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаXML) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗагрузитьЗаказы(СтрокаXML, СтруктураСтатистики, Параметры, ОписаниеОшибки) Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			НСтр("ru = 'Не удалось обработать документы, загруженные с сервера.'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта,
		ЗаголовкиЗапросов,
		ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Загружает заказы из файла.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	СтруктураСтатистики	- Структура
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ЗагрузитьЗаказыИзФайла(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	Файл = Новый Файл(Параметры.ФайлЗагрузки);
	
	Если НЕ Файл.Существует()
		ИЛИ Файл.ЭтоКаталог() Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Файл загрузки не найден'") + ": " + Параметры.ФайлЗагрузки);
		Возврат Ложь;
		
	КонецЕсли;
	
	КодировкаXML = КодировкаФайла(Параметры.ФайлЗагрузки);
	
	ФайлXML = Новый ТекстовыйДокумент;
	ФайлXML.Прочитать(Параметры.ФайлЗагрузки, КодировкаXML);
	СтрокаXML = ФайлXML.ПолучитьТекст();
	
	Возврат ЗагрузитьЗаказы(СтрокаXML, СтруктураСтатистики, Параметры, ОписаниеОшибки);
	
КонецФункции

// Выполняет загрузку заказов.
//
// Параметры:
//	ДанныеЗаказов		- строка для записи xml или ОбъектXDTO
//	СтруктураСтатистики	- Структура
//	Параметры			- Структура, основные параметры
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ЗагрузитьЗаказы(ДанныеЗаказов, СтруктураСтатистики, Параметры, ОписаниеОшибки) Экспорт
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ЗаказыXDTO = ДанныеЗаказов;
	Иначе
		ЗаказыXDTO = ПолучитьЗаказыXDTO(ДанныеЗаказов, Параметры, ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗаказыXDTO = Неопределено Тогда 
		
		Возврат Ложь;
		
	ИначеЕсли НЕ ОбъектXDTOСодержитСвойство(ЗаказыXDTO, "Документ") Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Нет документов для обработки.'"));
		Возврат Истина;
		
	КонецЕсли;
	
	МассивНомеров = Новый Массив;
	
	МассивЗаказовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗаказыXDTO.Документ);
	Для каждого ДокументXDTO Из МассивЗаказовXDTO Цикл 
		МассивНомеров.Добавить(ДокументXDTO.Номер);
	КонецЦикла;
	
	РанееЗагруженныеЗаказы = ПолучитьРанееЗагруженныеДокументы(МассивНомеров);
	
	НачатьТранзакцию();
	
	Успешно = СоздатьОбновитьЗаказы(МассивЗаказовXDTO, РанееЗагруженныеЗаказы, СтруктураСтатистики, Параметры, ОписаниеОшибки);
	
	Если Не Успешно Тогда
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	// Устанавливаем статус отмены для отмененных заказов.
	
	МассивОтмененныхЗаказов = ПолучитьОтмененныеЗаказы(СтруктураСтатистики.Загружено);
	Если МассивОтмененныхЗаказов.Количество() > 0 Тогда
		
		Для Каждого ДокументСсылка Из МассивОтмененныхЗаказов Цикл
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
			ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
			
			Попытка
				
				ЗаписатьДокумент(ДокументОбъект);
				
			Исключение
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось отменить заказ: '")
						+ ДокументСсылка));
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СсылкаНаДокумент Из СтруктураСтатистики.Загружено Цикл
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления
			ИЛИ Не ЗначениеЗаполнено(ДокументОбъект.ДатаОтгрузки) Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписи);
			СсылкаНаДокумент = ДокументОбъект.Ссылка;
			
		Исключение
		КонецПопытки;
		
		Если Не Параметры.ОбменЧерезВебСервис Тогда
			МассивУзлов = ПолучитьМассивУзловДляРегистрации(, Истина);
			ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, СсылкаНаДокумент);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

// Создает на основании XML объект XDTO.
//
// Параметры:
//	СтрокаXML - объект чтения XML
//	Параметры - структура
//	ОписаниеОшибки - строка
//
// Возвращаемое значение:
//	ОбъектXDTO.
//
Функция ПолучитьЗаказыXDTO(СтрокаXML, Параметры, ОписаниеОшибки)
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось прочитать XML'")));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		КоммерческаяИнформацияXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось прочитать XML'")));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Получает заказы, ранее загруженные с сайта.
//
// Параметры:
//	МассивНомеров - массив - номера загружаемых документов
//
// Возвращаемое значение
//	Результат запроса.
//
Функция ПолучитьРанееЗагруженныеДокументы(МассивНомеров)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателейССайта.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыПокупателейССайта.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте
		|ПОМЕСТИТЬ ВременнаяТаблицаЗаказы
		|ИЗ
		|	РегистрСведений.ЗаказыПокупателейССайта КАК ЗаказыПокупателейССайта
		|ГДЕ
		|	ЗаказыПокупателейССайта.НомерЗаказаНаСайте В(&МассивНомеров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаЗаказы.ЗаказПокупателя КАК ЗаказПокупателя
		|ПОМЕСТИТЬ ВременнаяТаблицаЗаказыСоСсылками
		|ИЗ
		|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеВКассуРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
		|		ПО ПоступлениеВКассуРасшифровкаПлатежа.Заказ = ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|ИЗ
		|	Документ.СчетНаОплату КАК СчетНаОплату
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
		|		ПО СчетНаОплату.ДокументОснование = ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
		|		ПО РасходнаяНакладнаяЗапасы.Заказ = ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|ИЗ
		|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчетРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
		|		ПО ПоступлениеНаСчетРасшифровкаПлатежа.Заказ = ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЗаказы.ЗаказПокупателя,
		|	ВременнаяТаблицаЗаказы.НомерЗаказаНаСайте,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаЗаказыСоСсылками.ЗаказПокупателя ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьСсылки
		|ИЗ
		|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказыСоСсылками КАК ВременнаяТаблицаЗаказыСоСсылками
		|		ПО ВременнаяТаблицаЗаказы.ЗаказПокупателя = ВременнаяТаблицаЗаказыСоСсылками.ЗаказПокупателя";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Создает и заполняет заказы покупателей.
//Если на заказ покупателя есть ссылки в документах отгрузки или оплаты, обновляются только свойства заказа.
//	
//Параметры
//	ДокументыXDTO - массив объектов XDTO
//	РанееЗагруженныеЗаказы - таблица значений - данные по ранее загруженным заказам
//	СтруктураСтатистики - структура статистики
//	Параметры - структура параметров
//	ОписаниеОшибки - строка - содержит описание ошибок
//
//Возвращаемое значение
//	Булево - истина, если при загрузке заказов не возникло ошибок или обновлены свойства уже загруженного заказа.
//
Функция СоздатьОбновитьЗаказы(ДокументыXDTO, РанееЗагруженныеЗаказы, СтруктураСтатистики, Параметры, ОписаниеОшибки)
	
	Для каждого ДокументXDTO Из ДокументыXDTO Цикл
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
			ИЛИ НЕ НРег(ДокументXDTO.ХозОперация) = "заказ товара" Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка в значении узла <Документ>.<ХозОперация> документа XML (%1)'"),
					ДокументXDTO.ХозОперация));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Валюта")
			ИЛИ НЕ СвойствоXDTOЗаполнено(ДокументXDTO.Валюта) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка в значении узла <Документ>.<Валюта> документа XML. Валюта должна быть заполнена.'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтруктураСтатистики.ОбработаноНаЗагрузке = СтруктураСтатистики.ОбработаноНаЗагрузке + 1;
		
		ЭтоНовыйДокумент = Ложь;
		ЕстьСсылкиНаДокументыОплатыОтгрузки = Ложь;
		
		НайденнаСтрока = РанееЗагруженныеЗаказы.Найти(ДокументXDTO.Номер, "НомерЗаказаНаСайте");
		Если НайденнаСтрока <> Неопределено Тогда
			
			ДокументОбъект = НайденнаСтрока.ЗаказПокупателя.ПолучитьОбъект();
			
			Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				
				СтруктураСтатистики.Пропущено.Добавить(НайденнаСтрока.ЗаказПокупателя);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					Строка(ДокументОбъект.Ссылка) + НСтр("ru = ' пропущен по причине:'") + Символы.ПС 
					+ НСтр("ru = 'Статус заказа - ""Завершен"".'"));
				
				Продолжить;
				
			КонецЕсли;
			
			ЕстьСсылкиНаДокументыОплатыОтгрузки = НайденнаСтрока.ЕстьСсылки;
			
		Иначе
			
			ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
			ЭтоНовыйДокумент = Истина;
		
		КонецЕсли;
		
		// Получаем свойства заказа.
		
		СвойстваЗаказа = Новый Соответствие;
		
		Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "ЗначенияРеквизитов")
			И ДокументXDTO.ЗначенияРеквизитов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ДокументXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
			
			МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита);
			
			Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
				
				Реквизит = ЗначениеРеквизитаXDTO.Наименование;
				Значение = ЗначениеРеквизитаXDTO.Значение;
				
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					СвойстваЗаказа.Вставить(Реквизит, Значение);
				ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO")
					И Значение.Количество() > 0 Тогда
					СвойстваЗаказа.Вставить(Реквизит, Значение[0]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьСсылкиНаДокументыОплатыОтгрузки Тогда
			
			// Если у заказа есть ссылки на документы оплаты или отгрузки - обновляем только свойства.
			
			СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект.Ссылка);
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 пропущен, т.к. существуют документы, введенные на основании заказа.'"),
				ДокументОбъект.Ссылка);
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
			
			Если ОбновитьСоздатьДополнительныеСведенияЗаказа(ДокументОбъект.Ссылка, СвойстваЗаказа, ОписаниеОшибки) Тогда
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Свойства заказа %1 обновлены.'"),
					ДокументОбъект.Ссылка);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
				
			КонецЕсли;
			
		Иначе
			
			Успешно = ЗаполнитьЗаказДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки);
			
			Если НЕ Успешно Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				
				Если Не ЗначениеЗаполнено(ДокументОбъект.Номер)
					И СвойствоXDTOЗаполнено(ДокументXDTO.Номер) Тогда
					
					ДокументОбъект.Номер = ПолучитьНомерЗаказаССайта(ДокументXDTO.Номер, ДокументОбъект.Организация);
				КонецЕсли;
				
				ВыполнитьДействияПередЗаписьюЗаказа(ДокументОбъект, Параметры);
				ЗаписатьДокумент(ДокументОбъект);
				
				Если ЭтоНовыйДокумент Тогда
					СтруктураСтатистики.Создано.Добавить(ДокументОбъект.Ссылка);
				Иначе
					СтруктураСтатистики.Обновлено.Добавить(ДокументОбъект.Ссылка);
				КонецЕсли;
				
			Исключение
				
				СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать заказ №'") + ДокументОбъект.Номер));
				
				Возврат Ложь;
				
			КонецПопытки;
			
			ОбновитьСоздатьДополнительныеСведенияЗаказа(ДокументОбъект.Ссылка, СвойстваЗаказа, ОписаниеОшибки);
			СтруктураСтатистики.Загружено.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
		Если ЭтоНовыйДокумент Тогда
			
			НоваяЗапись = РегистрыСведений.ЗаказыПокупателейССайта.СоздатьМенеджерЗаписи();
			НоваяЗапись.ЗаказПокупателя = ДокументОбъект.Ссылка;
			НоваяЗапись.НомерЗаказаНаСайте = ДокументXDTO.Номер;
			НоваяЗапись.ДатаЗаказаНаСайте = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата);
			НоваяЗапись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьДействияПередЗаписьюЗаказа(ДокументОбъект, Параметры)
	
	ДокументОбъект.ДатаИзменения = ТекущаяДата();
	
	Если НЕ Параметры.ОбменЧерезВебСервис
		И ДокументОбъект.Проведен И Параметры.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Запасы Цикл
		СтрокаТабличнойЧасти.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		И НЕ ДокументОбъект.Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		
		ДокументОбъект.Договор = ДокументОбъект.Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего") + ДокументОбъект.Работы.Итог("Всего");
	
КонецПроцедуры

// Функция определяет наличие движений документа.
//
Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Процедура очищает коллекцию движений документа.
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

// Процедура удаления существующих движений документа при перепроведении (отмене проведения).
//
Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ДокументОбъект)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	Если Не ДокументОбъект.Проведен Тогда
		ДокументОбъект.Записать();
	Иначе
		// отменяем проведение документа
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать();
		УдалитьДвиженияУДокумента(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет значения дополнительных сведений заказа покупателя значениями из соответствия СвойстваЗаказа.
// Дополнительные сведения, которые не удалось найти, создаются.
//
// Параметры
//	ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ для которого создаются/перезаполняются дополнительные сведения
//	СвойстваЗаказа - Соответствие - свойства и значения загружаемого заказа
//	ОписаниеОшибки - информация по ошибкам
//
// Возвращаемого значение
//	Булево - Истина, если в процессе обновления/создания дополнительных сведений не возникло ошибок.
//
Функция ОбновитьСоздатьДополнительныеСведенияЗаказа(ЗаказПокупателя, СвойстваЗаказа, ОписаниеОшибки)
	
	Если СвойстваЗаказа.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(ЗаказПокупателя, Ложь, Истина);
	ТаблицаСвойств.Колонки.Добавить("СвойствоСтрокой");
	
	Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		СтрокаСвойства.СвойствоСтрокой = Строка(СтрокаСвойства.Свойство);
	КонецЦикла;
	
	МассивСоздатьОбновить = Новый Массив;
	
	Для Каждого СвойствоЗаказа Из СвойстваЗаказа Цикл
		
		СтруктураПоиска = Новый Структура("СвойствоСтрокой, Значение", СвойствоЗаказа.Ключ, СвойствоЗаказа.Значение);
		
		Найдено = ТаблицаСвойств.НайтиСтроки(СтруктураПоиска);
		Если Найдено.Количество() = 0 Тогда
			
			МассивСоздатьОбновить.Добавить(СвойствоЗаказа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСоздатьОбновить.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросПВХ = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка,
		|	ДополнительныеРеквизитыИСведения.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		|	И (НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления)
		|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование");
	
	ЗапросНаборы = Новый Запрос(
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя)
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство");
	
	Для Каждого СвойствоЗаказа Из МассивСоздатьОбновить Цикл
		
		СвойствоСтрокой = СвойствоЗаказа.Ключ;
		Значение = СвойствоЗаказа.Значение;
		
		ЗапросПВХ.УстановитьПараметр("Наименование", СвойствоСтрокой);
		
		Свойство = Неопределено;
		
		Выборка = ЗапросПВХ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
				
				Свойство = Выборка.Ссылка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Свойство = Неопределено Тогда
			
			СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			СвойствоОбъект.Комментарий = НСтр("ru = 'Создано автоматически при загрузке заказа с сайта'");
			СвойствоОбъект.Наименование = СвойствоСтрокой;
			СвойствоОбъект.Заголовок = СвойствоСтрокой;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
			СвойствоОбъект.Записать();
			Свойство = СвойствоОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗапросНаборы.УстановитьПараметр("Свойство", Свойство);
		
		Если ЗапросНаборы.Выполнить().Пустой() Тогда
			
			ЗаписьНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя.ПолучитьОбъект();
			НовСвойство = ЗаписьНабора.ДополнительныеСведения.Добавить();
			НовСвойство.Свойство = Свойство;
			ЗаписьНабора.Записать();
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = ЗаказПокупателя;
		НоваяЗапись.Значение = Значение;
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьЗаказДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки)
	
	Если НЕ Параметры.ОбменЧерезВебСервис
		И ДокументОбъект.Проведен И Параметры.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке Тогда
		УстановитьСостояниеЗаказа(ДокументОбъект, СвойстваЗаказа, Параметры.ТаблицаСоответствияСтатусовЗаказов, Параметры);
		Возврат Истина;
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	РазрешеноПроведение = Истина;
	
	ДокументОбъект.Заполнить(Неопределено);
	
	Если ЗначениеЗаполнено(Параметры.ОрганизацияДляПодстановкиВЗаказы) Тогда
		ДокументОбъект.Организация = Параметры.ОрганизацияДляПодстановкиВЗаказы;
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = ВидОперации;
	ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	ДокументОбъект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	ВремяСтрока = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Время") Тогда
		ВремяСтрока = ДокументXDTO.Время;
	КонецЕсли;
	
	ДокументОбъект.Дата = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата, ВремяСтрока);
	ДокументОбъект.ДатаОтгрузки = ПолучитьДатуОтгрузкиИзСвойствЗаказа(СвойстваЗаказа);
	ДокументОбъект.ВалютаДокумента = ОбменССайтомПовтИсп.ОбработатьВалютуXML(ДокументXDTO.Валюта);
	
	Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Параметры.ДатаФормирования, Отбор);
	
	ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
	ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
	ДокументОбъект.ВидЦен = ПолучитьВидЦенИзСвойствЗаказа(СвойстваЗаказа);
	
	Организация = ПолучитьОрганизациюИзСвойствЗаказа(СвойстваЗаказа);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДокументОбъект.Организация = Организация;
	КонецЕсли;
	
	Склад = ПолучитьСкладИзСвойствЗаказа(СвойстваЗаказа);
	Если ЗначениеЗаполнено(Склад) Тогда
		ДокументОбъект.СтруктурнаяЕдиницаРезерв = Склад;
		Ответственный = ПолучитьМОСотрудника(Склад.МОЛ);
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ДокументОбъект.Ответственный = Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	Подразделение = ПолучитьПодразделениеИзСвойствЗаказа(СвойстваЗаказа);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ДокументОбъект.СтруктурнаяЕдиницаПродажи = Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.БанковскийСчетПоУмолчанию;
		ДокументОбъект.Касса = ДокументОбъект.Организация.КассаПоУмолчанию;
	Иначе
		ДокументОбъект.Касса = Параметры.ОрганизацияВладелецКаталога.КассаПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ИдентифицироватьКонтрагента(ДокументОбъект, ДокументXDTO, Параметры, ОписаниеОшибки) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			НСтр("ru = 'Не удалось идентифицировать контрагента для заказа номер: '") + ДокументXDTO.Номер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		И ДокументОбъект.Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		ДоговорКонтрагента = ПолучитьДоговорИзСвойствЗаказа(СвойстваЗаказа, ДокументОбъект);
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИдентифицироватьНоменклатуру(ДокументОбъект, ДокументXDTO, Параметры, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьСостояниеЗаказа(ДокументОбъект, СвойстваЗаказа, Параметры.ТаблицаСоответствияСтатусовЗаказов, Параметры);
	
	Если НЕ Параметры.ОбменЧерезВебСервис Тогда
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№ %1 %2'"),
			ДокументXDTO.Номер,
			?(Параметры.ВыгружатьНаСайт, Параметры.НастройкиПодключения.Сервер, "(сайт)")
		);
	Иначе
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№ %1 %2'"), 
			ДокументXDTO.Номер, 
			"(сайт)"
		);
		
	КонецЕсли;
	
	ДокументОбъект.Комментарий = Комментарий;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Комментарий") Тогда
		
		Если ТипЗнч(ДокументXDTO.Комментарий) = Тип("Строка") Тогда
			ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + " | " + СокрЛП(ДокументXDTO.Комментарий);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Контрагенты") Тогда
			
			КонтрагентXDTO = Неопределено;
			Если ТипЗнч(ДокументXDTO.Контрагенты.Контрагент) = Тип("СписокXDTO")
				И ДокументXDTO.Контрагенты.Контрагент.Количество() > 0 Тогда
				КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент[0];
			Иначе
				КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент;
			КонецЕсли;
			
			Если КонтрагентXDTO <> Неопределено
				И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес") 
				И СвойствоXDTOЗаполнено(КонтрагентXDTO.Адрес.Представление) Тогда
				
				ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + " | Адрес: "+ КонтрагентXDTO.Адрес.Представление;
			КонецЕсли;
			
			Если КонтрагентXDTO <> Неопределено
				И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон") 
				И СвойствоXDTOЗаполнено(КонтрагентXDTO.Телефон.Представление) Тогда
				
				ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + " | Телефон: "+ КонтрагентXDTO.Телефон.Представление;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНомерЗаказаССайта(Знач НомерНаСайте, Организация)

	СтрокаДопустимыхСиволов = "1234567890";
	МассивУдаляемыхСимволов = Новый Массив;
	
	НомерНаСайте = СокрЛП(НомерНаСайте);
	Если СтрДлина(НомерНаСайте) > 0 Тогда
		
		Для Сч = 1 по СтрДлина(НомерНаСайте) Цикл
			
			Символ = НРег(Сред(НомерНаСайте, Сч, 1));
			Если Не СтрНайти(СтрокаДопустимыхСиволов, Символ) Тогда
				МассивУдаляемыхСимволов.Добавить(Символ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Символ Из МассивУдаляемыхСимволов Цикл
		НомерНаСайте = СтрЗаменить(НомерНаСайте, Символ, "");
	КонецЦикла;
	
	ПрефиксСайта = ПолучитьПрефиксДляЗаказаССайта();
	СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксСайта, 2, "0", "Слева");
	
	ПрефиксОрганизации = "";
	
	ФункциональнаяОпцияИспользуется = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации");
	Если ФункциональнаяОпцияИспользуется = Истина Тогда
		
		ПрефиксОрганизации = Неопределено;
		ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(Организация, ПрефиксОрганизации);
		
		// если задана пустая ссылка на организацию
		Если ПрефиксОрганизации = Неопределено Тогда
			ПрефиксОрганизации = "";
		КонецЕсли;
		
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
	КонецЕсли;
	
	ПрефиксЗаказа = ПрефиксОрганизации + ПрефиксСайта + "-";
	НомерЗаказа = ПрефиксЗаказа + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаСайте, 6, "0", "Слева");
	
	Возврат НомерЗаказа;
	
КонецФункции

Функция ПолучитьДатуОтгрузкиИзСвойствЗаказа(СвойстваЗаказа)
	
	ДатаОтгрузки = Дата(1,1,1);
	
	ДатаОтгрузкиСтрока = СвойстваЗаказа.Получить("Дата отгрузки");
	Если ДатаОтгрузкиСтрока <> Неопределено
		И ЗначениеЗаполнено(ДатаОтгрузкиСтрока) Тогда
		
		ДатаСтрока = Лев(ДатаОтгрузкиСтрока, 10);
		ВремяСтрока = Сред(ДатаОтгрузкиСтрока, 12);
		
		ДатаОтгрузки = ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока);
		
	КонецЕсли;
	
	Возврат ДатаОтгрузки;
	
КонецФункции

Функция ПолучитьВидЦенИзСвойствЗаказа(СвойстваЗаказа)
	
	ВидЦенСвойство = СвойстваЗаказа.Получить("Вид цен");
	ВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
	
	Если ВидЦенСвойство <> Неопределено
		И ТипЗнч(ВидЦенСвойство) = Тип("Строка")
		И ВидЦенСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВидыЦен.Ссылка КАК ВидЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Наименование = &Наименование
		|	И НЕ ВидыЦен.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", ВидЦенСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидЦен = Выборка.ВидЦен;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидЦен;
	
КонецФункции

Функция ПолучитьСкладИзСвойствЗаказа(СвойстваЗаказа)
	
	СкладСвойство = СвойстваЗаказа.Получить("Склад");
	Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
	Если СкладСвойство <> Неопределено
		И ТипЗнч(СкладСвойство) = Тип("Строка")
		И СкладСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СтруктурныеЕдиницы.Ссылка КАК Склад
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Наименование = &Наименование
		|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)";
		
		Запрос.УстановитьПараметр("Наименование", СкладСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Склад = Выборка.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Функция ПолучитьМОСотрудника(ФизЛицо)
	
	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Сотрудник;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Физлицо = &Физлицо
	|	И НЕ Сотрудники.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сотрудник = Выборка.Сотрудник;
	КонецЕсли;
	
	Возврат Сотрудник;
	
КонецФункции

Функция ПолучитьОрганизациюИзСвойствЗаказа(СвойстваЗаказа)
	
	ОрганизацияСвойство = СвойстваЗаказа.Получить("Организация");
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Если ОрганизацияСвойство <> Неопределено
		И ТипЗнч(ОрганизацияСвойство) = Тип("Строка")
		И ОрганизацияСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.Наименование = &Наименование
		|			ИЛИ Организации.ИНН = &Наименование)
		|	И НЕ Организации.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", ОрганизацияСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция ПолучитьПодразделениеИзСвойствЗаказа(СвойстваЗаказа)
	
	ПодразделениеСвойство = СвойстваЗаказа.Получить("Подразделение");
	Подразделение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
	Если ПодразделениеСвойство <> Неопределено
		И ТипЗнч(ПодразделениеСвойство) = Тип("Строка")
		И ПодразделениеСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СтруктурныеЕдиницы.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Наименование = &Наименование
		|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)";
		
		Запрос.УстановитьПараметр("Наименование", ПодразделениеСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

Функция ПолучитьДоговорИзСвойствЗаказа(СвойстваЗаказа, ДокументОбъект)
	
	ДоговорСвойство = СвойстваЗаказа.Получить("Договор контрагента");
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ДоговорСвойство <> Неопределено
		И ТипЗнч(ДоговорСвойство) = Тип("Строка")
		И ДоговорСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Наименование = &Наименование
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)";
		
		Запрос.УстановитьПараметр("Наименование", ДоговорСвойство);
		Запрос.УстановитьПараметр("Владелец", ДокументОбъект.Контрагент);
		Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов.Организация = &Организация", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)", "ИСТИНА");
		Иначе
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Договор = Выборка.Договор;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Договор) Тогда
			
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			
			НовыйДоговор.Наименование = ДоговорСвойство;
			НовыйДоговор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
			НовыйДоговор.Организация = ДокументОбъект.Организация;
			НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
			НовыйДоговор.ВидЦен = ДокументОбъект.ВидЦен;
			НовыйДоговор.Владелец = ДокументОбъект.Контрагент;
			НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
			НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
			НовыйДоговор.Записать();
			
			Договор = НовыйДоговор.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Договор;
	
КонецФункции

// Выполняет поиск контрагента в соответствии со способом идентификации контрагентов, установленного для узла плана обмена.
// При установленном способе идентификации контрагентов "Наименование" или "ИННКПП", если контрагент не найден, он создается.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого идентифицируется контрагент.
//	ДокументXDTO - ОбъектXDTO - источник информации для заполнения данных контрагента
//	СвойстваЗаказа - Соответствие - свойства загружаемого заказа. При установленном способе идентификации контрагента "ПредопределенноеЗначения"
//									в СвойстваЗаказа добавляется свойство ДанныеКонтрагента, содержащее информацию по контрагенту.
//	Параметры - Структура - параметры обмена
//	ОписаниеОшибки - Строка - информация по ошибкам
//
// Возвращаемое значение:
//	Булево - Истина, если контрагент был успешно идентифицирован.
//
Функция ИдентифицироватьКонтрагента(ДокументОбъект, ДокументXDTO, Параметры, ОписаниеОшибки)
	
	Если ТипЗнч(ДокументXDTO.Контрагенты.Контрагент) = Тип("ОбъектXDTO") Тогда
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент;
	Иначе
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент[0];
	КонецЕсли;
	
	ИнформацияПоКонтрагенту = ДокументОбъект.ИнформацияПоКонтрагенту;
	ИнформацияПоКонтрагенту.Очистить();
	
	Если Параметры.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ПредопределенноеЗначение Тогда
		
		КонтрагентСсылка = Параметры.КонтрагентДляПодстановкиВЗаказы;
		ЗаполнитьДанныеКонтрагентаЗаказа(КонтрагентXDTO, ИнформацияПоКонтрагенту);
		
	Иначе
		
		ЮрЛицо = ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование");
		
		ИНН = "";
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН")
			И ТипЗнч(КонтрагентXDTO.ИНН) = Тип("Строка") Тогда
			ИНН = КонтрагентXDTO.ИНН;
		КонецЕсли;
		
		КПП = "";
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП")
			И ТипЗнч(КонтрагентXDTO.КПП) = Тип("Строка") Тогда
			КПП = КонтрагентXDTO.КПП;
		КонецЕсли;
		
		Наименование = "";
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование")
			И ТипЗнч(КонтрагентXDTO.Наименование) = Тип("Строка") Тогда
			Наименование = СокрЛП(КонтрагентXDTO.Наименование);
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа";
		
		Если ПустаяСтрока(Наименование) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
				НСтр("ru = 'Наименование контрагента не заполнено!'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = "";
		
		Если Параметры.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.Наименование Тогда
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = НСтр("ru = ' по наименованию: '") + Наименование;
			
			Запрос.Текст = Запрос.Текст + " И Контрагенты.Наименование = &Наименование ";
			
			Запрос.УстановитьПараметр("Наименование", Наименование);
			
		ИначеЕсли Параметры.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП Тогда	
			
			Если ПустаяСтрока(ИНН) Тогда
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, 
					НСтр("ru = 'ИНН контрагента не заполнен!'"));
				
				Возврат Ложь;
				
			КонецЕсли;
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ' по ИНН: %1, КПП: %2'"),
					ИНН, КПП);
			
			Запрос.Текст = Запрос.Текст + " И Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП ";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
		КонецЕсли;
		
		КонтрагентСсылка = Неопределено;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			КонтрагентСсылка = СоздатьКонтрагента(ДокументОбъект, КонтрагентXDTO, Параметры, ОписаниеОшибки);
			
		Иначе
			
			Контрагенты = РезультатЗапроса.Выгрузить();
			КонтрагентСсылка = Контрагенты[0].Контрагент;
			
			ОбновитьКонтактнуюИнформациюКонтрагента(КонтрагентСсылка, КонтрагентXDTO, Истина);
			ОбновитьКонтактнуюИнформациюКонтактногоЛицаКонтрагента(КонтрагентСсылка, КонтрагентXDTO, Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
				НСтр("ru = 'Не удалось найти или создать контрагента!'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.Контрагент = КонтрагентСсылка;
	
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговора);
	
	ДокументОбъект.Договор = ДоговорПоУмолчанию;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьКонтактнуюИнформациюКонтактногоЛицаКонтрагента(КонтрагентСсылка, КонтрагентXDTO, Замещать)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &КонтрагентСсылка
	|	И НЕ КонтактныеЛица.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КонтрагентСсылка", КонтрагентСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбновитьКонтактнуюИнформациюКонтактногоЛица(Выборка.Ссылка.ПолучитьОбъект(), КонтрагентXDTO, Замещать);
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет и заполняет строку табличной части "ИнформацияПоКонтрагенту" заказа покупателя.
//
// Параметры
//	Вид - Строка, вид информации
//	Представление - Строка, представление информации
//	ИнформацияПоКонтрагенту - ТабличнаяЧасть документ ЗаказПокупателю.
//
Процедура ДобавитьСтрокуИнформацииПоКонтрагенту(Вид, Представление, ИнформацияПоКонтрагенту)
	
	Если ТипЗнч(Представление)=Тип("Строка") И ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока = ИнформацияПоКонтрагенту.Добавить();
		НоваяСтрока.Вид = Вид;
		НоваяСтрока.Представление = СокрЛП(Представление);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть "ИнформацияПоКонтрагенту" заказа покупателя.
//
Процедура ЗаполнитьДанныеКонтрагентаЗаказа(КонтрагентXDTO, ИнформацияПоКонтрагенту)
	
	ЭтоЮрЛицо = Ложь;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Наименование", КонтрагентXDTO.Наименование, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ПолноеНаименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Полное наименование", КонтрагентXDTO.ПолноеНаименование, ИнформацияПоКонтрагенту);
		ДобавитьСтрокуИнформацииПоКонтрагенту("Юр./Физ. лицо", "Физ. лицо", ИнформацияПоКонтрагенту);
		
	ИначеЕсли ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОфициальноеНаименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Полное наименование", КонтрагентXDTO.ОфициальноеНаименование, ИнформацияПоКонтрагенту);
		ДобавитьСтрокуИнформацииПоКонтрагенту("Юр./Физ. лицо", "Юр. лицо", ИнформацияПоКонтрагенту);
		
		ЭтоЮрЛицо = Истина;
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН") Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("ИНН", КонтрагентXDTO.ИНН, ИнформацияПоКонтрагенту);
	КонецЕсли;
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП") Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("КПП", КонтрагентXDTO.КПП, ИнформацияПоКонтрагенту);
	КонецЕсли;
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОКПО) Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("ОКПО", КонтрагентXDTO.ОКПО, ИнформацияПоКонтрагенту);
	КонецЕсли;
	
	//Банковские счета.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета")
		И КонтрагентXDTO.РасчетныеСчета <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
		
		РасчетныеСчетаXDTO = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
		МассивРасчетныхСчетовXDTO = ПолучитьМассивОбъектовСпискаXDTO(РасчетныеСчетаXDTO);
		
		Для каждого РасчетныйСчетXDTO Из МассивРасчетныхСчетовXDTO Цикл
			
			НомерСчета = СтрЗаменить(РасчетныйСчетXDTO.НомерСчета, " ", "");
			
			БанкXDTO = РасчетныйСчетXDTO.Банк;
			ДанныеБанкаXDTO = ПолучитьДанныеБанкаXDTO(БанкXDTO);
			
			Комментарий = "";
			Если ОбъектXDTOСодержитСвойство(РасчетныйСчетXDTO, "Комментарий")
				И СвойствоXDTOЗаполнено(РасчетныйСчетXDTO.Комментарий) Тогда
				
				Комментарий = РасчетныйСчетXDTO.Комментарий;
				
			КонецЕсли;
			
			ИнформацияПоРасчетномуСчету = "Номер счета = " + НомерСчета 
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Наименование), "", ", Банк = " + ДанныеБанкаXDTO.Наименование)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.БИК), "", ", БИК = " + ДанныеБанкаXDTO.БИК)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.SWIFT), "", ", SWIFT = " + ДанныеБанкаXDTO.SWIFT)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.КоррСчет), "", ", КоррСчет = " + ДанныеБанкаXDTO.КоррСчет)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Город), "", ", Город = " + ДанныеБанкаXDTO.Город)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Адрес), "", ", Адрес = " + ДанныеБанкаXDTO.Адрес)
				+ ?(ПустаяСтрока(Комментарий), "", ", Комментарий = " + Комментарий);
				
			ДобавитьСтрокуИнформацииПоКонтрагенту("Банковский счет", ИнформацияПоРасчетномуСчету, ИнформацияПоКонтрагенту);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Контактная информация.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Адрес.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Фактический адрес", КонтрагентXDTO.Адрес.Представление, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ЭтоЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ЮридическийАдрес")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ЮридическийАдрес.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Юридический адрес", КонтрагентXDTO.ЮридическийАдрес.Представление, ИнформацияПоКонтрагенту);
		
	ИначеЕсли НЕ ЭтоЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "АдресРегистрации")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.АдресРегистрации.Представление) Тогда // физ. лицо содержит адрес регистрации
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Юридический адрес", КонтрагентXDTO.АдресРегистрации.Представление, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Телефон.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Телефон", КонтрагентXDTO.Телефон.Представление, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "email") И СвойствоXDTOЗаполнено(КонтрагентXDTO.email.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Адрес электронной почты", КонтрагентXDTO.email.Представление, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	//Контакты.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") И КонтрагентXDTO.Контакты <> Неопределено Тогда
		
		КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
		МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
		
		Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл
			
			ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
			СтруктураКИ = ПолучитьТипВидКонтактнойИнформацииПоТипуXDTO(ТипКИXDTO);
			
			ДобавитьСтрокуИнформацииПоКонтрагенту(СтруктураКИ.Вид.Наименование, КонтактXDTO.Значение, ИнформацияПоКонтрагенту);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Контактные лица.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители") И КонтрагентXDTO.Представители <> Неопределено Тогда
		
		ПредставителиXDTO = КонтрагентXDTO.Представители.Представитель;
		МассивПредставителейXDTO = ПолучитьМассивОбъектовСпискаXDTO(ПредставителиXDTO);
		
		Если МассивПредставителейXDTO.Количество() > 0 Тогда
			
			КонтактныеЛица = "";
			
			Для каждого ПредставительXDTO Из МассивПредставителейXDTO Цикл
				
				НаименованиеКЛ = "";
				Если ОбъектXDTOСодержитСвойство(ПредставительXDTO, "Контрагент") 
					И ОбъектXDTOСодержитСвойство(ПредставительXDTO.Контрагент, "Наименование") Тогда
					
					НаименованиеКЛ = ПредставительXDTO.Контрагент.Наименование;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(НаименованиеКЛ) Тогда
					КонтактныеЛица = КонтактныеЛица + НаименованиеКЛ + ";";
				КонецЕсли;
				
			КонецЦикла;
			
			КонтактныеЛица = Сред(КонтактныеЛица,1,СтрДлина(КонтактныеЛица)-1);
			ДобавитьСтрокуИнформацииПоКонтрагенту("Контактные лица", КонтактныеЛица, ИнформацияПоКонтрагенту);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает контрагента и элементы подчиненных справочников.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого создается контрагент.
//	КонтрагентXDTO - ОбъектXDTO - источник информации для заполнения данных контрагента
//	Параметры - Структура - параметры обмена
//	ОписаниеОшибки - Строка - информация по ошибкам
//
// Возвращаемое значение:
//	СправочникСсылка.Контрагенты - ссылка на элемент справочника.
//
Функция СоздатьКонтрагента(ДокументОбъект, КонтрагентXDTO, Параметры, ОписаниеОшибки)
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, КонтрагентXDTO);
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОКПО) Тогда
		НовыйКонтрагент.КодПоОКПО = КонтрагентXDTO.ОКПО;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование") Тогда
		НовыйКонтрагент.НаименованиеПолное = СокрЛП(КонтрагентXDTO.ПолноеНаименование);
	КонецЕсли;
	
	НовыйКонтрагент.Родитель = Параметры.ГруппаДляНовыхКонтрагентов;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование") Тогда
		НовыйКонтрагент.НаименованиеПолное = КонтрагентXDTO.ОфициальноеНаименование;
		НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	Иначе
		НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	КонецЕсли;
	
	СтрокаФИО = ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO);
	Если НЕ ПустаяСтрока(СтрокаФИО) 
		И СтрокаФИО <> НовыйКонтрагент.НаименованиеПолное Тогда
		
		НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.НаименованиеПолное + " [" + СтрокаФИО + "]";
		
	КонецЕсли;
	
	НовыйКонтрагент.Покупатель = Истина;
	
	НовыйКонтрагент.ВестиРасчетыПоДоговорам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоДокументам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоЗаказам = Истина;
	НовыйКонтрагент.ВестиУчетОплатыПоСчетам = Истина;
	
	// Значения по умолчанию.
	
	НовыйКонтрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	НовыйКонтрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	НовыйКонтрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	НовыйКонтрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	
	НовыйКонтрагент.Ответственный = ДокументОбъект.Ответственный;
	
	ЗаполнитьКонтактнуюИнформациюКонтрагента(НовыйКонтрагент, КонтрагентXDTO);
	
	НовыйКонтрагент.Записать();
	ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(ДокументОбъект, НовыйКонтрагент, КонтрагентXDTO, ОписаниеОшибки);
	НовыйКонтрагент.Записать();
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформациюКонтрагента(КонтрагентОбъект, КонтрагентXDTO)
	
	// Адреса.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес") Тогда
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
		АдресXDTO = КонтрагентXDTO.Адрес;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидАдреса, АдресXDTO, ТипКИ);
		
	КонецЕсли;
	
	Если КонтрагентОбъект.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.ФизическоеЛицо
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ЮридическийАдрес") Тогда
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		АдресXDTO = КонтрагентXDTO.ЮридическийАдрес;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидАдреса, АдресXDTO, ТипКИ);
		
	// Физлицо содержит адрес регистрации.
	ИначеЕсли КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "АдресРегистрации") Тогда
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		АдресXDTO = КонтрагентXDTO.АдресРегистрации;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидАдреса, АдресXDTO, ТипКИ);
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон") Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ТелефонXDTO = КонтрагентXDTO.Телефон;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидКИ, ТелефонXDTO, ТипКИ);
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "email") Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		EmailXDTO = КонтрагентXDTO.email;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидКИ, EmailXDTO, ТипКИ);
		
	КонецЕсли;
	
	// Контакты.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") Тогда
		
		КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
		МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
		
		Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл 
			
			ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
			СтруктураКИ = ПолучитьТипВидКонтактнойИнформацииПоТипуXDTO(ТипКИXDTO);
			Если КонтрагентОбъект.КонтактнаяИнформация.Найти(КонтактXDTO.Значение, "Представление")=Неопределено Тогда
				СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКИ, СтруктураКИ);
				СтрокаКИ.Представление = КонтактXDTO.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКонтактнуюИнформациюКонтактногоЛица(КонтактноеЛицоОбъект, КонтрагентXDTO, Замещать = Ложь)

	// Телефон.
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон") Тогда
		
		Если КонтактноеЛицоОбъект.КонтактнаяИнформация.Найти(КонтрагентXDTO.Телефон.Представление, "Представление")=Неопределено Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
			ТелефонXDTO = КонтрагентXDTO.Телефон;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
			
			Если Замещать Тогда
				ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
				НайденныеСтрокиКИ = КонтактноеЛицоОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
				Если НайденныеСтрокиКИ.Количество()<>0 Тогда
					КонтактноеЛицоОбъект.КонтактнаяИнформация.Удалить(НайденныеСтрокиКИ[0]);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтактноеЛицоОбъект, ВидКИ, ТелефонXDTO, ТипКИ);
		КонецЕсли;
	КонецЕсли;
	
	// email.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "email") Тогда
		
		Если КонтактноеЛицоОбъект.КонтактнаяИнформация.Найти(КонтрагентXDTO.email.Представление, "Представление")=Неопределено Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			EmailXDTO = КонтрагентXDTO.Email;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			
			Если Замещать Тогда
				ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
				НайденныеСтрокиКИ = КонтактноеЛицоОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
				Если НайденныеСтрокиКИ.Количество()<>0 Тогда
					КонтактноеЛицоОбъект.КонтактнаяИнформация.Удалить(НайденныеСтрокиКИ[0]);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтактноеЛицоОбъект, ВидКИ, EmailXDTO, ТипКИ);
		КонецЕсли;
	КонецЕсли;
	
	Если КонтактноеЛицоОбъект.Модифицированность() Тогда
		КонтактноеЛицоОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКонтактнуюИнформациюКонтрагента(КонтрагентСсылка, КонтрагентXDTO, Замещать = Ложь)

	КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
	// Адреса.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес") Тогда
		
		Если КонтрагентОбъект.КонтактнаяИнформация.Найти(КонтрагентXDTO.Адрес.Представление, "Представление")=Неопределено Тогда
		
			ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
			АдресXDTO = КонтрагентXDTO.Адрес;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
			Если Замещать Тогда
				ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
				НайденныеСтрокиКИ = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
				Если НайденныеСтрокиКИ.Количество()<>0 Тогда
					КонтрагентОбъект.КонтактнаяИнформация.Удалить(НайденныеСтрокиКИ[0]);
				КонецЕсли;
			ИначеЕсли НЕ Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета.РазрешитьВводНесколькихЗначений Тогда
				обКонтИнф = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета.ПолучитьОбъект();
				обКонтИнф.РазрешитьВводНесколькихЗначений = Истина;
				Попытка
					обКонтИнф.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли; 
			
			ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидКИ, АдресXDTO, ТипКИ);
		
		КонецЕсли;
	КонецЕсли;

	// Телефон.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон") Тогда
		
		Если КонтрагентОбъект.КонтактнаяИнформация.Найти(КонтрагентXDTO.Телефон.Представление, "Представление")=Неопределено Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			ТелефонXDTO = КонтрагентXDTO.Телефон;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
			
			Если Замещать Тогда
				ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
				НайденныеСтрокиКИ = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
				Если НайденныеСтрокиКИ.Количество()<>0 Тогда
					КонтрагентОбъект.КонтактнаяИнформация.Удалить(НайденныеСтрокиКИ[0]);
				КонецЕсли;
			ИначеЕсли НЕ Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.РазрешитьВводНесколькихЗначений Тогда
				обКонтИнф = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
				обКонтИнф.РазрешитьВводНесколькихЗначений = Истина;
				Попытка
					обКонтИнф.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидКИ, ТелефонXDTO, ТипКИ);
		КонецЕсли;
	КонецЕсли;
	
	// email.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "email") Тогда
		
		Если КонтрагентОбъект.КонтактнаяИнформация.Найти(КонтрагентXDTO.email.Представление, "Представление")=Неопределено Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			EmailXDTO = КонтрагентXDTO.Email;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			
			Если Замещать Тогда
				ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
				НайденныеСтрокиКИ = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
				Если НайденныеСтрокиКИ.Количество()<>0 Тогда
					КонтрагентОбъект.КонтактнаяИнформация.Удалить(НайденныеСтрокиКИ[0]);
				КонецЕсли;
			ИначеЕсли НЕ Справочники.ВидыКонтактнойИнформации.EmailКонтрагента.РазрешитьВводНесколькихЗначений Тогда
				обКонтИнф = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента.ПолучитьОбъект();
				обКонтИнф.РазрешитьВводНесколькихЗначений = Истина;
				Попытка
					обКонтИнф.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидКИ, EmailXDTO, ТипКИ);
		КонецЕсли;
	КонецЕсли;
	
	// Контакты.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") Тогда
		
		КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
		МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
		
		Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл 
			
			ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
			СтруктураКИ = ПолучитьТипВидКонтактнойИнформацииПоТипуXDTO(ТипКИXDTO);
			Если КонтрагентОбъект.КонтактнаяИнформация.Найти(КонтактXDTO.Значение, "Представление")=Неопределено Тогда
				СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКИ, СтруктураКИ);
				СтрокаКИ.Представление = КонтактXDTO.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если КонтрагентОбъект.Модифицированность() Тогда
		КонтрагентОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКонтактнойИнформацииКонтрагентаИзОбъектаXDTO(КонтрагентОбъект, ВидКИ, КонтактнаяИнформацияXDTO, ТипКИ)
	
	Если КонтактнаяИнформацияXDTO = Неопределено
		ИЛИ НЕ ОбъектXDTOСодержитСвойство(КонтактнаяИнформацияXDTO, "Представление")
		ИЛИ НЕ СвойствоXDTOЗаполнено(КонтактнаяИнформацияXDTO.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(КонтактнаяИнформацияXDTO.Представление, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтрагентОбъект, ЗначенияПолей, ВидКИ, ТипКИ);
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		Если ОбъектXDTOСодержитСвойство(КонтактнаяИнформацияXDTO, "АдресноеПоле") Тогда
			
			МассивАдресныхПолейXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактнаяИнформацияXDTO.АдресноеПоле);
			СоответствиеПолей = Новый Соответствие;
			
			ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
			НайденныеСтрокиКИ = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
			Если НайденныеСтрокиКИ.Количество()>0 Тогда
				СтрокаКИ = НайденныеСтрокиКИ[НайденныеСтрокиКИ.Количество()-1];
				
				Для каждого ОбъектXDTO Из МассивАдресныхПолейXDTO Цикл
					
					ИмяПоля = ОбменССайтомПовтИсп.ОпределитьПоТипуИмяПоляКонтактнойИнформации(ОбъектXDTO.Тип);
					СоответствиеПолей.Вставить(ИмяПоля, ОбъектXDTO.Значение);
					
					Если ИмяПоля = "Страна" Тогда
						СтрокаКИ.Страна = ОбъектXDTO.Значение;
					ИначеЕсли ИмяПоля = "Регион" Тогда
						СтрокаКИ.Регион = ОбъектXDTO.Значение;
					ИначеЕсли ИмяПоля = "Город" Тогда
						СтрокаКИ.Город = ОбъектXDTO.Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				СтрокаКИ.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СоответствиеПолей);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(ДокументОбъект, КонтрагентОбъект, КонтрагентXDTO, ОписаниеОшибки)
	
	// Контактные лица.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители") И КонтрагентXDTO.Представители <> Неопределено Тогда
		
		ПредставителиXDTO = КонтрагентXDTO.Представители.Представитель;
		МассивПредставителейXDTO = ПолучитьМассивОбъектовСпискаXDTO(ПредставителиXDTO);
		
		Для каждого ПредставительXDTO Из МассивПредставителейXDTO Цикл 
			
			НаименованиеКЛ = "";
			Если ОбъектXDTOСодержитСвойство(ПредставительXDTO, "Контрагент") 
				И ОбъектXDTOСодержитСвойство(ПредставительXDTO.Контрагент, "Наименование") Тогда
				
				Наименование = ПредставительXDTO.Контрагент.Наименование;
				
			КонецЕсли;
			
			Элемент = Справочники.КонтактныеЛица.СоздатьЭлемент();
			Элемент.Владелец = КонтрагентОбъект.Ссылка;
			Элемент.Наименование = Наименование;
			Элемент.Комментарий = НСтр("ru = 'Создан автоматически при импорте заказа с сайта '") + ТекущаяДата();
			Элемент.Записать();
			
		КонецЦикла;
		
	ИначеЕсли КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		//Для физлиц создаем одно контактное лицо, даже если нет в данных обмена
		Элемент = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Элемент.Владелец = КонтрагентОбъект.Ссылка;
		Элемент.Наименование = КонтрагентОбъект.Наименование;
		Элемент.Комментарий = НСтр("ru = 'Создан автоматически при импорте заказа с сайта '") + ТекущаяДата();
		
		ОбновитьКонтактнуюИнформациюКонтактногоЛица(Элемент, КонтрагентXDTO, Истина);
		
		Элемент.Записать();
		
	КонецЕсли;
	
	//Банки и расчетные счета.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета")
		И КонтрагентXDTO.РасчетныеСчета <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
		
		РасчетныеСчетаXDTO = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
		МассивРасчетныхСчетовXDTO = ПолучитьМассивОбъектовСпискаXDTO(РасчетныеСчетаXDTO);
		
		Для каждого РасчетныйСчетXDTO Из МассивРасчетныхСчетовXDTO Цикл
			
			НомерСчета = СтрЗаменить(РасчетныйСчетXDTO.НомерСчета, " ", "");
			
			Если ПустаяСтрока(НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			БанкXDTO = РасчетныйСчетXDTO.Банк;
			ДанныеБанкаXDTO = ПолучитьДанныеБанкаXDTO(БанкXDTO);
			
			БИК = ДанныеБанкаXDTO.БИК;
			Если НЕ СвойствоXDTOЗаполнено(БИК) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Банки.Ссылка
			|ИЗ
			|	Справочник.Банки КАК Банки
			|ГДЕ
			|	Банки.Код = &БИК");
			
			Запрос.УстановитьПараметр("БИК", БИК);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				
				БанкОбъект = Справочники.Банки.СоздатьЭлемент();
				БанкОбъект.Код = БИК;
				
				ЗаполнитьЗначенияСвойств(БанкОбъект, ДанныеБанкаXDTO);
				
				БанкОбъект.Записать();
				БанкСсылка = БанкОбъект.Ссылка;
				
			Иначе
				
				БанкСсылка = РезультатЗапроса.Выгрузить()[0][0];
				
			КонецЕсли;
			
			// Банковский счет.
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И БанковскиеСчета.НомерСчета = &НомерСчета
			|	И БанковскиеСчета.Банк = &Банк");
			
			Запрос.УстановитьПараметр("Владелец", КонтрагентОбъект.Ссылка);
			Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
			Запрос.УстановитьПараметр("Банк", БанкСсылка);
			
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Валюта = ПолучитьВалютуПоНомеруСчета(НомерСчета);
			Если НЕ ЗначениеЗаполнено(Валюта) Тогда
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось определить валюту банковского счета: '")
					+ НомерСчета));
				
				Продолжить;
				
			КонецЕсли;
			
			СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
			СчетОбъект.Банк = БанкСсылка;
			СчетОбъект.ВалютаДенежныхСредств = Валюта;
			СчетОбъект.Владелец = КонтрагентОбъект.Ссылка;
			СчетОбъект.Наименование = БанкСсылка.Наименование;
			СчетОбъект.НомерСчета = НомерСчета;
			
			СчетОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Договор.
	
	Если ЗначениеЗаполнено(КонтрагентОбъект.ДоговорПоУмолчанию) Тогда
		Договор = КонтрагентОбъект.ДоговорПоУмолчанию.ПолучитьОбъект();
	Иначе
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	КонецЕсли;
	
	Договор.Наименование = "Основной договор";
	Договор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
	Договор.Организация = ДокументОбъект.Организация;
	Договор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
	Договор.ВидЦен = ДокументОбъект.ВидЦен;
	Договор.Владелец = КонтрагентОбъект.Ссылка;
	Договор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
	Договор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
	Договор.Записать();
	
	КонтрагентОбъект.ДоговорПоУмолчанию = Договор.Ссылка;
	
КонецПроцедуры

// Выполняет поиск номенклатуры и заполнение табличной части Запасы заказа покупателя.
// Не найденные элементы номенклатуры создаются.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого идентифицируется номенклатура
//	ДокументXDTO - ОбъектXDTO - источник информации для заполнения данных заказа покупателя
//	Параметры - Структура - параметры обмена
//	ОписаниеОшибки - Строка - информация по ошибкам
//
// Возвращаемое значение:
//	Булево - Истина, если не возникло ошибок.
//
Функция ИдентифицироватьНоменклатуру(ДокументОбъект, ДокументXDTO, Параметры, ОписаниеОшибки)
	
	Успешно = Истина;
	
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары")
		ИЛИ ДокументXDTO.Товары = Неопределено
		ИЛИ НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO.Товары, "Товар") Тогда
		
		Возврат Успешно;
		
	КонецЕсли;
	
	СтавкаНДСПоУмолчанию = Неопределено;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги")
		И ДокументXDTO.Налоги <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Налоги, "Налог") Тогда
		
		НалогиXDTO = ДокументXDTO.Налоги.Налог;
		МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
		
		Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
					СтавкаНДСПоУмолчанию = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(НалогXDTO.Ставка);
				Иначе
					СтавкаНДСПоУмолчанию = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС("18");
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "УчтеноВСумме") Тогда
					ДокументОбъект.СуммаВключаетНДС = НалогXDTO.УчтеноВСумме = Истина ИЛИ НРег(НалогXDTO.УчтеноВСумме) = "true";
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Если нет секции "Налоги" считаем, что документ не облагается НДС.
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		
	КонецЕсли;
	
	ДокументОбъект.Запасы.Очистить();
	
	ТоварыXDTO = ДокументXDTO.Товары.Товар;
	МассивТоваровXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварыXDTO);
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		ТипНоменклатурыXDTO = "";
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
			И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
			
			ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
			МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
			
			Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
				
				Если ЗначениеРеквизитаXDTO.Наименование = "ТипНоменклатуры" 
					И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
					
					ТипНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = Неопределено;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов")
			И ТоварXDTO.СтавкиНалогов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
			
			СтавкиНалогов = ТоварXDTO.СтавкиНалогов.СтавкаНалога;
			МассивСтавокXDTO = ПолучитьМассивОбъектовСпискаXDTO(СтавкиНалогов);
			
			Для каждого СтавкаНалога Из МассивСтавокXDTO Цикл
				
				Если НРег(СтавкаНалога.Наименование) = "ндс" Тогда
					
					СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(СтавкаНалога.Ставка);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги")
			И ТоварXDTO.Налоги <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
			
			НалогиXDTO = ТоварXDTO.Налоги.Налог;
			МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
			
			Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
						
						СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(НалогXDTO.Ставка);
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = ?(ЗначениеЗаполнено(СтавкаНДСНоменклатуры), СтавкаНДСНоменклатуры, СтавкаНДСПоУмолчанию);
		Если СтавкаНДСНоменклатуры = Неопределено Тогда
			
			ЗначениеНалога = "Без НДС";
			СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(ЗначениеНалога);
			
		КонецЕсли;
		
		ЭтоУслуга = НРег(ТипНоменклатурыXDTO) = "услуга";
		Номенклатура = НайтиСоздатьНоменклатуру(ТоварXDTO, ЭтоУслуга, Параметры, СтавкаНДСНоменклатуры, ОписаниеОшибки);
		
		ХарактеристикаНоменклатуры = НайтиСоздатьХарактеристикуНоменклатуры(
			ТоварXDTO, 
			ЭтоУслуга, 
			Номенклатура, 
			Параметры, 
			ОписаниеОшибки
		);
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ТоварXDTO, "Количество") Тогда 
			Продолжить;
		КонецЕсли;
		
		Количество = ПолучитьЧислоИзСтроки(ТоварXDTO.Количество);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Резерв = 0;
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Резерв") Тогда
			Резерв = ПолучитьЧислоИзСтроки(ТоварXDTO.Резерв);
			Если Резерв > Количество Тогда
				Резерв = Количество;
			КонецЕсли;
		КонецЕсли;
		
		ЦенаЗаЕдиницу = 0;
		Сумма = 0;
		СуммаСкидок = 0;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЦенаЗаЕдиницу") Тогда
			ЦенаЗаЕдиницу = ПолучитьЧислоИзСтроки(ТоварXDTO.ЦенаЗаЕдиницу);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Сумма") Тогда
			Сумма = ПолучитьЧислоИзСтроки(ТоварXDTO.Сумма);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки")
			И ТоварXDTO.Скидки <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Скидки, "Скидка") Тогда
			
			МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварXDTO.Скидки.Скидка);
			Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
				
				Если НЕ ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме") 
					ИЛИ НРег(СкидкаXDTO.УчтеноВСумме = "true") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СуммаСкидки = ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
				СуммаСкидок = СуммаСкидок + СуммаСкидки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Добавляем новую строку в табличную часть "Запасы".
		
		НоваяСтрока = ДокументОбъект.Запасы.Добавить();
		
		НоваяСтрока.ТипНоменклатурыЗапас = НЕ ЭтоУслуга;
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Характеристика = ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.Резерв = Резерв;
		НоваяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
		
		НоваяСтрока.Сумма = ?(СуммаСкидок > 0, Сумма - СуммаСкидок, Сумма);
		НоваяСтрока.Цена = ?(ЦенаЗаЕдиницу > 0, ЦенаЗаЕдиницу, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		
		ПересчитатьСтрокуТабличнойЧасти(НоваяСтрока, ДокументОбъект);
		
	КонецЦикла;
	
	// Скидка на документ распределяется на строки табличной части пропорционально сумме.
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Скидки")
		И ДокументXDTO.Скидки <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Скидки, "Скидка") Тогда
		
		МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.Скидки.Скидка);
		Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Сумма") Тогда
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Наименование")
					И ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Процент") Тогда
					
					ПроцентЧисло = ПолучитьЧислоИзСтроки(СкидкаXDTO.Процент);
					Если ПроцентЧисло <> 0 Тогда
						
						ДокументОбъект.ВидСкидкиНаценки = ОбменССайтомПовтИсп.ПолучитьВидСкидкиНаДокумент(СкидкаXDTO.Наименование, СкидкаXDTO.Процент);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме")
					И НЕ НРег(СкидкаXDTO.УчтеноВСумме) = "true" Тогда
					
					СуммаСкидки = ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
					Если СуммаСкидки <> 0 Тогда
						
						РаспределитьСуммуПоКолонке(ДокументОбъект, ДокументОбъект.Запасы, -СуммаСкидки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего");
	
	Возврат Успешно;
	
КонецФункции

Функция НайтиСоздатьХарактеристикуНоменклатуры(ТоварXDTO, ЭтоУслуга, Номенклатура, Параметры, ОписаниеОшибки) Экспорт
	
	ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если ЭтоУслуга ИЛИ Не Параметры.ИспользоватьХарактеристики Тогда
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	ХарактеристикаТовараXDTO = Неопределено;
	ИдХарактеристики = "";
	НаименованиеХарактеристики = "";
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
			ИдХарактеристики = ПолучитьИдХарактеристики(ТоварXDTO.Ид);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
			НаименованиеХарактеристики = ПолучитьНаименованиеХарактеристики(ТоварXDTO.Наименование);
		КонецЕсли;
		
	Иначе
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ХарактеристикиТовара")
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.ХарактеристикиТовара, "ХарактеристикаТовара") Тогда
			
			СписокХарактеристикТовараXDTO = ТоварXDTO.ХарактеристикиТовара.ХарактеристикаТовара;
			Если ТипЗнч(СписокХарактеристикТовараXDTO) = Тип("СписокXDTO")
				И СписокХарактеристикТовараXDTO.Количество() > 0 Тогда
				
				ХарактеристикаТовараXDTO = СписокХарактеристикТовараXDTO[0];
				Если ОбъектXDTOСодержитСвойство(ХарактеристикаТовараXDTO, "Ид") И СвойствоXDTOЗаполнено(ХарактеристикаТовараXDTO.Ид) Тогда
					ИдХарактеристики = ХарактеристикаТовараXDTO.Ид;
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(ХарактеристикаТовараXDTO, "Наименование") И СвойствоXDTOЗаполнено(ХарактеристикаТовараXDTO.Наименование) Тогда
					НаименованиеХарактеристики = ХарактеристикаТовараXDTO.Наименование;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Если Не ПустаяСтрока(ИдХарактеристики) Тогда
			
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдХарактеристики));
			Если Не ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
				И ХарактеристикаНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
				
				Возврат ХарактеристикаНоменклатуры;
			Иначе
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					НСтр("ru = 'Характеристика номенклатуры не найдена по уникальному идентификатору: '") + ИдХарактеристики);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось выполнить поиск характеристики номенклатуры по уникальному идентификатору: '") + ИдХарактеристики));
		
	КонецПопытки;
	
	Если СвойствоXDTOЗаполнено(НаименованиеХарактеристики) Тогда
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(НаименованиеХарактеристики, Истина,, Номенклатура);
	Иначе
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	ХарактеристикаНоменклатуры.Владелец = Номенклатура;
	ХарактеристикаНоменклатуры.Наименование = НаименованиеХарактеристики;
	ХарактеристикаНоменклатуры.Записать();
	
	Если Параметры.ОбменТоварами
		И Параметры.ВыгружатьТолькоИзменения Тогда
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ХарактеристикаНоменклатуры.Ссылка);
		
	КонецЕсли;
	
	Возврат ХарактеристикаНоменклатуры.Ссылка;
	
КонецФункции

Функция НайтиСоздатьНоменклатуру(ТоварXDTO, ЭтоУслуга, Параметры, СтавкаНДС, ОписаниеОшибки) Экспорт
	
	Номенклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
		
		ИдНоменклатуры = ПолучитьИдНоменклатуры(ТоварXDTO.Ид);
		Если СтрДлина(ИдНоменклатуры)=СтрДлина(Новый УникальныйИдентификатор) Тогда //Уникальный идентификатор 1С
			Попытка
				
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
				Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
					И Номенклатура.ПолучитьОбъект() <> Неопределено Тогда
					
					Возврат Номенклатура;
				Иначе
					ДобавитьОписаниеОшибки(ОписаниеОшибки,
					НСтр("ru = 'Номенклатура не найдена по уникальному идентификатору: '") + ИдНоменклатуры);
				КонецЕсли;
				
			Исключение
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось выполнить поиск номенклатуры по уникальному идентификатору: '") + ТоварXDTO.Ид));
			КонецПопытки;
		ИначеЕсли Параметры.Свойство("УзелОбмена") Тогда
			Номенклатура = СсылкаСоответствиеПоИд(ИдНоменклатуры, "Справочник.Номенклатура", Параметры.УзелОбмена);
			Если Номенклатура<>Неопределено Тогда
				Возврат Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	АртикулНоменклатуры = "";
	НаименованиеНоменклатуры = "";
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Артикул") И СвойствоXDTOЗаполнено(ТоварXDTO.Артикул) Тогда
		АртикулНоменклатуры = ТоварXDTO.Артикул;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
		НаименованиеНоменклатуры = ПолучитьНаименованиеНоменклатуры(ТоварXDTO.Наименование);
	КонецЕсли;
	
	Номенклатура = НайтиНоменклатуруПоАртикулуНаименованию(АртикулНоменклатуры, НаименованиеНоменклатуры);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	КонецЕсли;
	
	ЕдиницаПоКлассификатору = ПолучитьБазовуюЕдиницуИзмеренияИзТоварXDTO(ТоварXDTO);
	ТипНоменклатуры = ?(ЭтоУслуга, Перечисления.ТипыНоменклатуры.Услуга, Перечисления.ТипыНоменклатуры.Запас);
	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Номенклатура.Родитель = Параметры.ГруппаДляНовойНоменклатуры;
	Номенклатура.ТипНоменклатуры = ТипНоменклатуры;
	Номенклатура.Артикул = АртикулНоменклатуры;
	Номенклатура.Наименование = НаименованиеНоменклатуры;
	Номенклатура.НаименованиеПолное = НаименованиеНоменклатуры;
	Номенклатура.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	
	Номенклатура.ЕдиницаИзмерения = ЕдиницаПоКлассификатору;
	Номенклатура.СтавкаНДС = СтавкаНДС;
	Номенклатура.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
	Номенклатура.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	Номенклатура.Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	
	Номенклатура.ИспользоватьХарактеристики = Параметры.ИспользоватьХарактеристики;
	Номенклатура.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
	Номенклатура.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	Номенклатура.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
	Номенклатура.СрокПополнения = 1;
	Номенклатура.СрокИсполненияЗаказа = 1;
	
	Номенклатура.Записать();
	
	Если Параметры.ОбменТоварами
		И Параметры.ВыгружатьТолькоИзменения Тогда
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, Номенклатура.Ссылка);
		
	КонецЕсли;
	
	Возврат Номенклатура.Ссылка;
	
КонецФункции

Функция НайтиНоменклатуруПоАртикулуНаименованию(Артикул, Наименование)
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Артикул", Артикул);
		
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции

Функция ПолучитьБазовуюЕдиницуИзмеренияИзТоварXDTO(ТоварXDTO)
	
	ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.шт;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "БазоваяЕдиница") Тогда
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "Код") Тогда
			
			КодБазовойЕдиницы = ТоварXDTO.БазоваяЕдиница.Код;
			Если СвойствоXDTOЗаполнено(КодБазовойЕдиницы) Тогда
				ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодБазовойЕдиницы);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаПоКлассификатору) 
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "НаименованиеПолное")
			И СвойствоXDTOЗаполнено(ТоварXDTO.БазоваяЕдиница.НаименованиеПолное) Тогда
			
			НаименованиеБазовойЕдиницы = ТоварXDTO.БазоваяЕдиница.НаименованиеПолное;
			ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НаименованиеБазовойЕдиницы, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕдиницаПоКлассификатору;
	
КонецФункции

Процедура ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ)
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
		И ЗначениеЗаполнено(Документ.ВидЦен) Тогда
		
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить("ДатаОбработки", Документ.Дата);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Документ.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ВидЦен", Документ.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Документ.ВидСкидкиНаценки);
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтрокаТабличнойЧасти.Цена = Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
	СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;
	
	Если СуммаСкидки <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 * СуммаСкидки / СуммаБезСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ);
	
КонецПроцедуры

// Устанавливает состояние заказа покупателя по соответствию статуса заказа на сайте состоянию заказа в информационной базе.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого устанавливается состояние.
//	СвойстваЗаказа - Соответствие - свойства загружаемого заказа
//	ТаблицаСоответствияСтатусовЗаказов - ТаблицаЗначений - таблица, содержащая соответствие статусов
//										 заказа на сайте состояниям заказа в информационной базе.
//
Процедура УстановитьСостояниеЗаказа(ДокументОбъект, СвойстваЗаказа, ТаблицаСоответствияСтатусовЗаказов, Параметры)
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		
		ЗначениеСтатуса = СвойстваЗаказа["Статус заказа"];
		Если Не ЗначениеЗаполнено(ЗначениеСтатуса) Тогда
			Возврат;
		КонецЕсли;
		
		СостояниеЗаказа = Неопределено;
		НайденноеСоответствие = ТаблицаСоответствияСтатусовЗаказов.Найти(ЗначениеСтатуса, "СтатусЗаказаНаСайте");
		Если НайденноеСоответствие <> Неопределено
			И ЗначениеЗаполнено(НайденноеСоответствие.СостояниеЗаказаПокупателя) Тогда
			
			СостояниеЗаказа = НайденноеСоответствие.СостояниеЗаказаПокупателя;
			
		КонецЕсли;
		
		ДокументОбъект.ВидЗаказа = Параметры.ВидЗаказа;
		Если ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			ДокументОбъект.СостояниеЗаказа = СостояниеЗаказа;
		ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.Ссылка)
			И ЗначениеЗаполнено(Параметры.СостояниеЗаказа) Тогда
			ДокументОбъект.СостояниеЗаказа = Параметры.СостояниеЗаказа;
		КонецЕсли;
		
	Иначе
		
		ВидЗаказа = СвойстваЗаказа.Получить("Вид заказа");
		Если ВидЗаказа <> Неопределено
			И ТипЗнч(ВидЗаказа) = Тип("Строка")
			И ВидЗаказа <> "" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ВидыЗаказовПокупателей.Ссылка КАК ВидЗаказа
			|ИЗ
			|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
			|ГДЕ
			|	ВидыЗаказовПокупателей.Наименование = &Наименование
			|	И НЕ ВидыЗаказовПокупателей.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Наименование", ВидЗаказа);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументОбъект.ВидЗаказа = Выборка.ВидЗаказа;
			КонецЕсли;
			
		КонецЕсли;
		
		СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
		Если СтатусЗаказа <> Неопределено
			И ТипЗнч(СтатусЗаказа) = Тип("Строка")
			И СтатусЗаказа <> "" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СостоянияЗаказовПокупателей.Ссылка КАК СостояниеЗаказа
			|ИЗ
			|	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
			|ГДЕ
			|	СостоянияЗаказовПокупателей.Наименование = &Наименование
			|	И НЕ СостоянияЗаказовПокупателей.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Наименование", СтатусЗаказа);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументОбъект.СостояниеЗаказа = Выборка.СостояниеЗаказа;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидЗаказа) Тогда
		ДокументОбъект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.СостояниеЗаказа) Тогда
		ДокументОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ДокументОбъект.ВидЗаказа);
	КонецЕсли;
	Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	КонецЕсли;
	
КонецПроцедуры

// Получает заказы покупателей, у которых в наборе дополнительных сведений есть свойство Отменен со значением true.
//
// Параметры
//	МассивЗаказов - Массив, содержащий ссылки на заказы.
//
// Возвращаемое значение
//	Массив, содержащий ссылки на отмененные заказы.
//
Функция ПолучитьОтмененныеЗаказы(МассивЗаказов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК ЗаказПокупателя
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|		ПО ДополнительныеСведения.Свойство = НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
	|			И (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя))
	|ГДЕ
	|	ДополнительныеСведения.Объект В(&МассивЗаказов)
	|	И ДополнительныеСведения.Свойство.Наименование = ""Отменен""
	|	И ДополнительныеСведения.Значение = ""true""";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	
	Возврат Результат;
	
КонецФункции

// Выгружает файл с заказами на сайт.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	СтруктураСтатистики	- Структура
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ВыгрузитьЗаказыНаСайт(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	Если НЕ ОчиститьКаталог(Параметры.КаталогНаДиске, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВыгрузитьЗаказыВФайл(Параметры, СтруктураСтатистики, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураСтатистики.Выгружено.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Успешно = ВыгрузитьНаСайт(Параметры, , ОписаниеОшибки, , "sale");
	
	Если НЕ ОчиститьКаталог(Параметры.КаталогНаДиске, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Выгружает заказы покупателей в файл.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	СтруктураСтатистики	- Структура
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ВыгрузитьЗаказыВФайл(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	МассивИзменений = Новый Массив;
	
	Если Параметры.ВыгружатьТолькоИзменения
		И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
		
		МассивИзменений = Параметры.СтруктураИзменений.Заказы;
		
		Для Каждого Эл Из СтруктураСтатистики.Загружено Цикл
			ИндексЭлемента = МассивИзменений.Найти(Эл);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивИзменений.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивИзменений.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументыXDTO = СформироватьЗаказыXDTO(МассивИзменений, СтруктураСтатистики, Параметры);
	
	Если СтруктураСтатистики.Выгружено.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяФайлаОбмена = "orders-" + Строка(Новый УникальныйИдентификатор) + ".xml";
	ПолноеИмяФайлаОбмена = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows, Параметры.КаталогНаДиске + "\" + ИмяФайлаОбмена);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПолноеИмяФайлаОбмена, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Попытка
		
		ДокументыXDTO.Проверить();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДокументыXDTO, "КоммерческаяИнформация");
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать XML-файл на диск: '")
				+ ПолноеИмяФайлаОбмена + Символы.ПС + ОписаниеОшибки()));
				
		СтруктураСтатистики.Выгружено.Очистить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Объект XDTO типа КоммерческаяИнформация с заполненным списком документов.
//
// Параметры
//	МассивИзменений - массив, содержащий изменений по заказам покупателей
//	СтруктураСтатистики - структура для записи статистики по выгрузке заказов
//	Параметры - структура, содержащая параметры обмена
//
// Возвращаемое значение
//	Объект XDTO, типа КоммерческаяИнформация.
//
Функция СформироватьЗаказыXDTO(МассивИзменений, СтруктураСтатистики, Параметры) Экспорт
	
	МассивРезультатов = ПолучитьЗаказыСОплатойИОтгрузкой(МассивИзменений, СтруктураСтатистики.Загружено, Параметры);
	
	ВыборкаДокументов = МассивРезультатов[6].Выбрать();
	
	Если ВыборкаДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоСвойствХарактеристик = МассивРезультатов[7].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	URIПространстваИмен = "urn:1C.ru:commerceml_205";
	ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.05";
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.НомерЗаказаНаСайте)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.ДатаЗаказаНаСайте)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.Валюта)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтатистики.Выгружено.Добавить(ВыборкаДокументов.ЗаказПокупателя);
		
		ДокументТип = ПакетCML.Получить("Документ");
		ДокументXDTO = ФабрикаXDTO.Создать(ДокументТип);
		
		ДокументXDTO.Ид = Строка(ВыборкаДокументов.ЗаказПокупателя.УникальныйИдентификатор());
		ДокументXDTO.Номер = ВыборкаДокументов.НомерЗаказаНаСайте;
		ДокументXDTO.Дата = ВыборкаДокументов.ДатаЗаказаНаСайте;
		ДокументXDTO.ХозОперация = "Заказ товара";
		ДокументXDTO.Роль = "Продавец";
		ДокументXDTO.Валюта = ФорматВалютыДляXDTO(ВыборкаДокументов.Валюта);
		ДокументXDTO.Курс = ВыборкаДокументов.Курс;
		ДокументXDTO.Сумма = ВыборкаДокументов.СуммаДокумента;
		ДокументXDTO.Время = ВыборкаДокументов.ДатаЗаказаНаСайте;
		ДокументXDTO.СрокПлатежа = ВыборкаДокументов.ДатаПлатежа;
		
		Комментарий = Лев(ВыборкаДокументов.Комментарий, 3000);
		Если НЕ ПустаяСтрока(Комментарий) Тогда
			ДокументXDTO.Комментарий = Комментарий;
		КонецЕсли;
		
		КонтрагентыXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументТип, "Контрагенты"));
		
		КонтрагентXDTO = ПолучитьКонтрагентаXDTO(ВыборкаДокументов, ПакетCML);
		КонтрагентыXDTO.Контрагент.Добавить(КонтрагентXDTO);
		
		ДокументXDTO.Контрагенты = КонтрагентыXDTO;
		
		ДобавитьТоварыЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, ДеревоСвойствХарактеристик, Параметры);
		
		ДобавитьЗначенияРеквизитовЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, Параметры);
		
		КоммерческаяИнформацияXDTO.Документ.Добавить(ДокументXDTO);
		
	КонецЦикла;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Формирует выборку с заказами для выгрузки.
//
// Параметры:
//	МассивИзменений - массив с заказами, зарегистрированными по узлу плана обмена
//	МассивЗагруженныхДокументов - массив только что загруженных заказов
//
// Возвращаемое значение:
//	Выборка из результата запроса.
//
Функция ПолучитьЗаказыСОплатойИОтгрузкой(МассивИзменений, МассивЗагруженныхДокументов, Параметры)
	
	СхемаКомпоновки = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиЗаказов");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	ДатаНачалаВыгрузкиЗаказов = Дата(1,1,1);
	Если Параметры.Свойство("ДатаНачалаВыгрузкиЗаказов") Тогда
		ДатаНачалаВыгрузкиЗаказов = Параметры.ДатаНачалаВыгрузкиЗаказов;
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачалаВыгрузкиЗаказов");
	ПараметрСКД.Значение = ДатаНачалаВыгрузкиЗаказов;
	ПараметрСКД.Использование = Истина;
	
	Если МассивИзменений.Количество() > 0 Тогда
		
		// Отбирать только измененные.
		ДобавитьОтборПоЗаказам(КомпоновщикНастроек, МассивИзменений, ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	Если МассивЗагруженныхДокументов.Количество() > 0 Тогда
		
		// Исключить только что загруженные.
		ДобавитьОтборПоЗаказам(КомпоновщикНастроек, МассивЗагруженныхДокументов, ВидСравненияКомпоновкиДанных.НеВСписке);
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос);
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС
		+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
		|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
		|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
		|			ПО ЗаказПокупателяТовары.Ссылка = ВременнаяТаблицаЗаказы.ЗаказПокупателя
		|		ПО ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка = ЗаказПокупателяТовары.Характеристика
		|ИТОГИ ПО
		|	Характеристика";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Возврат МассивРезультатов;
	
КонецФункции

// Добавляет отбор в настройки компоновщика.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомоновкиДанных
//	МассивОграничения - значения отбора
//	ВидСравнения - ВидСравненияКомпоновкиДанных.
//
Процедура ДобавитьОтборПоЗаказам(КомпоновщикНастроек, МассивОграничения, ВидСравнения)
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("ЗаказПокупателя");
	НовыйЭлемент.ВидСравнения = ВидСравнения;
	СписокЗначенийОграничения = Новый СписокЗначений;
	СписокЗначенийОграничения.ЗагрузитьЗначения(МассивОграничения);
	НовыйЭлемент.ПравоеЗначение = СписокЗначенийОграничения;
	НовыйЭлемент.Использование = Истина;
	
КонецПроцедуры

// Заполняет списки XDTO Товары и Налоги объекта XDTO типа Документ.
//
// Параметры
//	ДокументXDTO - объект XDTO типа Документ
//	ПакетCML - пакет XDTO, содержащий типы CML
//	ВыборкаДокументов - выборка, содержащая данные по заказам покупателей
//	ДеревоСвойствХарактеристик - дерево значений, содержащее свойства характеристик.
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьТоварыЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, ДеревоСвойствХарактеристик, Параметры)
	
	ВыборкаТоваров = ВыборкаДокументов.Товары.Выбрать();
	Если ВыборкаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументXDTO.Тип(), "Товары");
	ТоварТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварыТип, "Товар");
	
	НалогиВДокументеXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументXDTO.Тип(), "Налоги"));
	ТоварыXDTO = ФабрикаXDTO.Создать(ТоварыТип);
	
	СчитатьНДС = ВыборкаДокументов.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	СуммаНДС = 0;
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
		ЦенаXDTO  = ФабрикаXDTO.Создать(ПакетCML.Получить("Цена"));
		
		БазоваяЕдиницаИзмеренияXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("БазоваяЕдиница"));
		
		Характеристика = Неопределено;
		Если Параметры.ИспользоватьХарактеристики Тогда
			Характеристика = ВыборкаТоваров.Характеристика;
		КонецЕсли;
		
		ИдТовара = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыборкаТоваров.Номенклатура, Характеристика);
		
		ТоварXDTO.Ид = ИдТовара;
		ТоварXDTO.Артикул = ВыборкаТоваров.Артикул;
		ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаТоваров.Номенклатура);
		ТоварXDTO.БазоваяЕдиница = ПолучитьБазовуюЕдиницуXDTO(ПакетCML, ВыборкаТоваров);
		ТоварXDTO.ЦенаЗаЕдиницу = ВыборкаТоваров.Цена;
		ТоварXDTO.Количество = ВыборкаТоваров.Количество;
		ТоварXDTO.Сумма = ВыборкаТоваров.Сумма;
		
		ТоварXDTO.Единица = Строка(ВыборкаТоваров.ЕдиницаИзмерения);
		ТоварXDTO.Коэффициент = 1;
		
		Если ВыборкаТоваров.СуммаНДС > 0 И ЗначениеЗаполнено(ВыборкаТоваров.СтавкаНДС) И НЕ ВыборкаТоваров.СтавкаНДС.НеОблагается Тогда
			
			НалогиТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Налоги"));
			НалогТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("НалогВДокументе"));
			
			НалогТовараXDTO.Наименование = Параметры.НаименованиеНалога;
			НалогТовараXDTO.УчтеноВСумме = ВыборкаДокументов.СуммаВключаетНДС;
			НалогТовараXDTO.Сумма = ВыборкаТоваров.СуммаНДС;
			НалогТовараXDTO.Ставка = ОбменССайтомПовтИсп.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ВыборкаТоваров.СтавкаНДС);
			
			НалогиТовараXDTO.Налог.Добавить(НалогТовараXDTO);
			ТоварXDTO.Налоги = НалогиТовараXDTO;
			
			Если СчитатьНДС Тогда
				
				СуммаНДС = СуммаНДС + ВыборкаТоваров.СуммаНДС;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроцентСкидкиНаценки = ВыборкаТоваров.ПроцентСкидкиНаценки;
		
		Если ПроцентСкидкиНаценки <> 0 Тогда
			
			СуммаСкидки = ВыборкаТоваров.Количество * ВыборкаТоваров.Цена - ВыборкаТоваров.Сумма;
			
			СкидкиТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Скидки"));
			СкидкаТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Скидка"));
			
			СкидкаТовараXDTO.Наименование = Строка(ПроцентСкидкиНаценки);
			СкидкаТовараXDTO.Процент = ПолучитьЧислоИзСтроки(Формат(ПроцентСкидкиНаценки, "ЧЦ=5; ЧДЦ=2"));
			СкидкаТовараXDTO.Сумма = ПолучитьЧислоИзСтроки(Формат(СуммаСкидки, "ЧЦ=15; ЧДЦ=2"));
			СкидкаТовараXDTO.УчтеноВСумме = "true";
			
			СкидкиТовараXDTO.Скидка.Добавить(СкидкаТовараXDTO);
			ТоварXDTO.Скидки = СкидкиТовараXDTO;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.СтавкаНДС) И НЕ ВыборкаТоваров.СтавкаНДС.НеОблагается Тогда
			
			СтавкиНалоговXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "СтавкиНалогов"));
			СтавкаНалогаXDTO = фабрикаXDTO.Создать(ПакетCML.Получить("СтавкаНалога"));
			
			СтавкаНалогаXDTO.Наименование = Параметры.НаименованиеНалога;
			СтавкаНалогаXDTO.Ставка = ОбменССайтомПовтИсп.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ВыборкаТоваров.СтавкаНДС);
			
			СтавкиНалоговXDTO.СтавкаНалога.Добавить(СтавкаНалогаXDTO);
			
			ТоварXDTO.СтавкиНалогов = СтавкиНалоговXDTO;
			
		КонецЕсли;
		
		ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов"));
		
		ВидНоменклатуры = ?(ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас, "Товар", "Услуга");
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ВидНоменклатуры", ВидНоменклатуры);
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ТипНоменклатуры", Строка(ВыборкаТоваров.ТипНоменклатуры));
		
		ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
		
		Если Параметры.ИспользоватьХарактеристики Тогда
			ВыгрузитьСвойстваХарактеристикиДляТовараXDTO(ПакетCML, ТоварXDTO, ТоварТип, ВыборкаТоваров.Характеристика, ДеревоСвойствХарактеристик, Параметры);
		КонецЕсли;
		
		ТоварыXDTO.Товар.Добавить(ТоварXDTO);
		
	КонецЦикла;
	
	НалогДокументаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("НалогВДокументе"));
	
	НалогДокументаXDTO.Наименование = Параметры.НаименованиеНалога;
	НалогДокументаXDTO.УчтеноВСумме = ВыборкаДокументов.СуммаВключаетНДС;
	НалогДокументаXDTO.Сумма = СуммаНДС;
	
	НалогиВДокументеXDTO.Налог.Добавить(НалогДокументаXDTO);
	
	ДокументXDTO.Налоги = НалогиВДокументеXDTO;
	ДокументXDTO.Товары = ТоварыXDTO;
	
КонецПроцедуры

// Заполняет свойств характеристик для объекта XDTO типа Товар.
//
// Параметры
//	ТоварXDTO - объект XDTO типа Товар
//	ТоварТип - тип объекта XDTO Товар
//	Характеристика - характеристика номенклатуры
//	ДеревоСвойствХарактеристик - дерево значений, содержащее свойства характеристик.
//
Процедура ВыгрузитьСвойстваХарактеристикиДляТовараXDTO(ПакетCML, ТоварXDTO, ТоварТип, Характеристика, ДеревоСвойствХарактеристик, Параметры)
	
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	Найдено = ДеревоСвойствХарактеристик.Строки.Найти(Характеристика, "Характеристика");
	
	Если Найдено = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиТовараТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ХарактеристикиТовара");
	ХарактеристикиТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикиТовараТип);
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		
		Для Каждого СтрокаСвойства Из Найдено.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ХарактеристикиТовараТип, "ХарактеристикаТовара"));
			
			ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Свойство);
			
			Если ТипЗнч(СтрокаСвойства.Значение) = Тип("Число") Тогда
				ХарактеристикаТовараXDTO.Значение = Формат(СтрокаСвойства.Значение, "ЧГ=0");
			Иначе
				ХарактеристикаТовараXDTO.Значение = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойства.Значение);
			КонецЕсли;
			
			ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
			
		КонецЦикла;
		
	Иначе
		
		ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ХарактеристикиТовараТип, "ХарактеристикаТовара"));
		
		ХарактеристикаТовараXDTO.ИД = Строка(Характеристика.УникальныйИдентификатор());
		ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(Характеристика.Наименование);
		
		ЗначенияСвойствТип = ХарактеристикаТовараXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
		ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
		
		Для Каждого СтрокаСвойства Из Найдено.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
			ЗначенияСвойстваXDTO.Ид = Строка(СтрокаСвойства.Свойство.УникальныйИдентификатор());
			ЗначенияСвойстваXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Наименование);
			
			Если СтрокаСвойства.Значение = NULL Тогда
				
				// Если значение свойства не заполнено, выгружаем пустую строку.
				ЗначениеСвойства = "";
				
			Иначе
				
				ТипЗначенияСвойства = ТипЗнч(СтрокаСвойства.Значение);
				Если ТипЗначенияСвойства = Тип("Дата") Тогда
					
					ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаСвойства.Значение);
					
				Иначе
					
					ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойства.Значение);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
			ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
			
		КонецЦикла;
		
		Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
			ХарактеристикаТовараXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
		КонецЕсли;
		
		ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
		
	КонецЕсли;
	
	ТоварXDTO.ХарактеристикиТовара = ХарактеристикиТовараXDTO;
	
КонецПроцедуры

// Заполняет значения дополнительных реквизитов для объекта XDTO типа Документ.
//
// Параметры
//	ДокументXDTO - объект XDTO типа Документ
//	ПакетCML - пакет XDTO, содержащий типы CML
//	ДанныеДокумента - выборка, содержащая данные заказа покупателя
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьЗначенияРеквизитовЗаказаXDTO(ДокументXDTO, ПакетCML, ДанныеДокумента, Параметры)
	
	ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ДокументXDTO.Свойства().Получить("ЗначенияРеквизитов").Тип);
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер по 1С", ДанныеДокумента.Номер);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Дата по 1С", ФорматДатыДляXDTO(ДанныеДокумента.Дата, Истина, Истина));
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ПометкаУдаления", ДанныеДокумента.ПометкаУдаления);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Проведен", ДанныеДокумента.Проведен);
	
	Если ДанныеДокумента.Проведен 
		И ДанныеДокумента.КОплатеОстаток <= 0 Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер оплаты по 1С", ДанныеДокумента.НомерОплаты);
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, 
			ПакетCML, "Дата оплаты по 1С", ФорматДатыДляXDTO(ДанныеДокумента.ДатаОплаты, Истина, Истина));
		
	КонецЕсли;
	
	Если ДанныеДокумента.Проведен 
		И ДанныеДокумента.КОтгрузкеОстаток <= 0 Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер отгрузки по 1С", ДанныеДокумента.НомерОтгрузки);
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, 
			ПакетCML, "Дата отгрузки по 1С", ФорматДатыДляXDTO(ДанныеДокумента.ДатаОтгрузки, Истина, Истина));
		
	КонецЕсли;
	
	Если ДанныеДокумента.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Отменен", "true");
		
	КонецЕсли;
	
	ДокументXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации, ДатаНачала, Действие, Успех, СтруктураСтатистики, ОписаниеОшибки);
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДатаНачала = ДатаНачала; 
	СтрокаТаблицыИнформации.ДатаОкончания = ТекущаяДата();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Действие;
	
	Если Действие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
		
		Описание = Строка(ДатаНачала) + " " + НСтр("ru = 'Запуск загрузки заказов'")
			+ Символы.ПС + НСтр("ru = 'Обработано: '") + СтруктураСтатистики.ОбработаноНаЗагрузке
			+ Символы.ПС + НСтр("ru = 'Загружено: '") + СтруктураСтатистики.Загружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Загружено);
		
		Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Пропущено: '") + СтруктураСтатистики.Пропущено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Пропущено);
		
		Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Обновлено: '") + СтруктураСтатистики.Обновлено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Обновлено);
		
		Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Создано: '") + СтруктураСтатистики.Создано.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Создано);
		
		Описание = Описание
			+ Символы.ПС
			+ СтрокаТаблицыИнформации.ДатаОкончания
			+ " "
			+ НСтр("ru = 'Завершена загрузка заказов'");
			
	Иначе
		
		Описание = Строка(ДатаНачала) + " " + НСтр("ru = 'Запуск выгрузки заказов'")
			+ Символы.ПС + НСтр("ru = 'Выгружено: '") + СтруктураСтатистики.Выгружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Выгружено);
		
		Описание = Описание
			+ Символы.ПС
			+ СтрокаТаблицыИнформации.ДатаОкончания
			+ " "
			+ НСтр("ru = 'Завершена выгрузка заказов'");
	
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = Описание;
	
	Если Успех Тогда
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	Иначе
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = СтрокаТаблицыИнформации.Описание
		+ Символы.ПС + НСтр("ru = 'Дополнительная информация:'") + Символы.ПС + ОписаниеОшибки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВСПОМОГАТЕЛЬНЫЕ

// Получает структуру, содержащую основные параметры обмена.
//
Функция ПолучитьСтруктуруОсновныхПараметровОбмена() Экспорт
	
	ОсновныеПараметры = Новый Структура;
	
	Пользователь = Пользователи.ТекущийПользователь();
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда 
		ОсновнаяОрганизация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("ОрганизацияВладелецКаталога", ОсновнаяОрганизация);
	
	РазрешенныеТипыНоменклатуры = Новый Массив;
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	ОсновныеПараметры.Вставить("РазрешенныеТипыНоменклатуры", РазрешенныеТипыНоменклатуры); 
	
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");
	
	ОсновныеПараметры.Вставить("РазрешенныеТипыКартинок", РазрешенныеТипыКартинок);
	
	ДатаФормирования = ТекущаяДата();
	
	ОсновныеПараметры.Вставить("ДатаФормирования", ДатаФормирования);
	ОсновныеПараметры.Вставить("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	ОсновныеПараметры.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	ОсновныеПараметры.Вставить("НаименованиеНалога", НСтр("ru = 'НДС'"));
	
	Возврат ОсновныеПараметры;

КонецФункции // ПолучитьСтруктуруОсновныхПараметровОбмена()

// Формирует объект ИнтернетПрокси по настройкам прокси.
//
// Параметры:
//	Прокси		- Соответствие -
//					ключи:
//					НеИспользоватьПроксиДляЛокальныхАдресов - строка - 
//					Сервер			- адрес прокси-сервера
//					Порт			- порт прокси-сервера
//					Пользователь	- имя пользователя для авторизации на прокси-сервере
//					Пароль			- пароль пользователя
//	Протокол	- строка - протокол для которого устанавливаются параметры прокси сервера.
//					Например: "http", "https", "ftp".
//
Функция СформироватьПрокси(НастройкиПрокси, Протокол) Экспорт
	
	Прокси = Новый ИнтернетПрокси;
	
	НастройкиПроксиПорт = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НастройкиПрокси["Порт"]);
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкиПрокси["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Прокси.Установить(Протокол, НастройкиПрокси["Сервер"], НастройкиПроксиПорт);
	Прокси.Пользователь = НастройкиПрокси["Пользователь"];
	Прокси.Пароль = НастройкиПрокси["Пароль"];
	
	Возврат Прокси;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по настройке обмена
// с учетом параметров прокси.
//
// Параметры:
//	УзелОбмена - ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Экспорт
	
	ОписаниеОшибки = "";
	Если НЕ РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, СформироватьПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки) Экспорт
	
	Соединение = Неопределено;
	
	Попытка
		
		Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL();
			
			Соединение = Новый HTTPСоединение(
				ПараметрыПодключения.Сервер,
				ПараметрыПодключения.Порт,
				ПараметрыПодключения.ИмяПользователя,
				ПараметрыПодключения.Пароль,
				ПараметрыПодключения.Прокси,
				1800,
				ssl
			);
			
		Иначе
			
			Соединение = Новый HTTPСоединение(
				ПараметрыПодключения.Сервер,
				ПараметрыПодключения.Порт,
				ПараметрыПодключения.ИмяПользователя,
				ПараметрыПодключения.Пароль,
				ПараметрыПодключения.Прокси,
				1800
			);
			
		КонецЕсли;
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.'"),
				ПараметрыПодключения.Сервер,
				ПараметрыПодключения.Порт)
			)
		);
		
		Соединение = Неопределено;
		
	Конецпопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения = "catalog") Экспорт
	
	Соединение = УстановитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	
	Если Соединение = Неопределено Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение, 
		ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth",,
		ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		//Иногда ответ сервера - это текст, который содержит пояснение ошибки, тогда его можно вывести пользователю
		//Если ответ сервера - это html страница, тогда не выводим
		Если СтрДлина(ОтветСервера)<255 И Лев(ОтветСервера,15) <> "<!DOCTYPE html>" И СтрНайти(Лев(ОтветСервера,255),"<html")=0 Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
		КонецЕсли;
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'")
			+ Символы.ПС 
			+ НСтр("ru = 'Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выгружает файлы на сайт.
//
// Параметры:
//	Параметры								- Структура, основные параметры
//	МассивПодкаталогов						- Массив
//	ОписаниеОшибки							- Строка
//	ОжидатьЗавершенияИмпортаФайловСервером	- булево
//	ТипСоединения							- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ВыгрузитьНаСайт(Параметры,
						МассивПодкаталогов = Неопределено,
						ОписаниеОшибки,
						ОжидатьЗавершенияИмпортаФайловСервером = Ложь,
						ТипСоединения = "catalog")
	
	ОтветСервера = "";
	Соединение = Неопределено;
	НастройкиПодключения = Параметры.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	ОписаниеОшибки = "";
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения);
	
	Если НЕ Успешно Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Выгрузка на сайт не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация,
		ЗаголовкиЗапросов,
		ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Выгрузка на сайт не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ZIPФайлыРазрешены = Ложь;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Если СтрЧислоСтрок(ОтветСервера) <> 2 Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Выгрузка на сайт не выполнена.'") + Символы.ПС + НСтр("ru = 'Не удалось прочитать ответ сервера. Параметры обмена не получены.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) = НастройкиПодключения.ОтветСервера_ZIPРазрешен;
	
	Попытка 
		
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 2))),
			НастройкиПодключения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, ""));
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Ошибка получения параметров обмена (ограничение размера файла)!'")));
		
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
		
	КонецПопытки;
	
	МассивИсходныхXMLФайлов = НайтиФайлы(Параметры.КаталогНаДиске, "*.xml");
	СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(Параметры.КаталогНаДиске, МассивПодкаталогов);
	
	Если ZIPФайлыРазрешены Тогда
		СписокФайловДляОтправки = ПодготовитьZIPАрхивы(Параметры.КаталогНаДиске, ОписаниеОшибки);
		
		Если СписокФайловДляОтправки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда
		
		СписокФайловДляОтправки = РазделитьФайлыНаФрагменты(СписокФайловДляОтправки, ОграничениеРазмераФрагментаФайлаОбмена);
		
	КонецЕсли;
	
	ВсегоФайлов = СписокФайловДляОтправки.Количество();
	
	ЕстьОшибки = Ложь;
	Для Каждого ТекФайл Из СписокФайловДляОтправки цикл
		
		ОтветСервера = ОтправитьФайлНаСервер(ТекФайл.Значение,
			Соединение,
			АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ТекФайл.Представление,
			ЗаголовкиЗапросов,
			ОписаниеОшибки
		);
		
		Если ОтветСервера = Неопределено Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
				НСтр("ru = 'Не удалось получить ответ сервера. Файл не отправлен.'") + " (" + ТекФайл.Значение + ").");
				
			ЕстьОшибки = Истина;
			Прервать;
			
		КонецЕсли;
		
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
		
		Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				НСтр("ru = 'Произошла ошибка на стороне сервера. Файл не отправлен.'") + " (" + ТекФайл.Значение + ")."
				+ Символы.ПС + НСтр("ru = 'Ответ сервера: '") + Символы.ПС + ОтветСервера);
			
			ЕстьОшибки = Истина;
			Прервать;
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					НСтр("ru = 'Получен расширенный статус успешного завершения сеанса.'")
					+ Символы.ПС + НСтр("ru = 'Ответ сервера: '") + Символы.ПС + ОтветСервера);
				
			КонецЕсли;
			
		Иначе
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				НСтр("ru = 'Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен.'") + " (" + ТекФайл.Значение + ")."
				+ Символы.ПС + НСтр("ru = 'Ответ сервера: '") + Символы.ПС + ОтветСервера);
			
			ЕстьОшибки = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСписокВременныхФайлов(СписокФайловДляОтправки);
	
	Если ЕстьОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмпортУспешноЗавершен = Ложь;
	
	Если ОжидатьЗавершенияИмпортаФайловСервером Тогда
		
		Для Каждого ТекФайл Из МассивИсходныхXMLФайлов Цикл
			
			ИмпортПродолжается = Истина;
			ТекущееСостояние = "";
			
			Пока ИмпортПродолжается Цикл
				
				ИмпортПродолжается = Ложь;
				
				ОписаниеОшибки = "";
				ОтветСервера = ПолучитьДанныеССервера(
					Соединение,
					АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ИмпортФайлаСервером + ТекФайл.Имя,
					ЗаголовкиЗапросов,
					ОписаниеОшибки
				);
				
				Если ОтветСервера = Неопределено Тогда 
					
					Успешно = Ложь;
					
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
						+ НСтр("ru = 'Не удалось получить текущее состояние процесса обмена. Данные обмена отправлены, но не загружены.'"));
					
				ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
					
					Успешно = Ложь;
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
						+ НСтр("ru = 'Не удалось прочитать данные о текущем состоянии процесса обмена. Данные обмена отправлены, но не загружены.'"));
					
				Иначе
					
					СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
					
					Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
						
						Успешно = Ложь;
						ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
							+ НСтр("ru = 'Произошла ошибка на стороне сервера.'")
							+ Символы.ПС + НСтр("ru = 'Ответ сервера'") + ": " + Символы.ПС + ОтветСервера);
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
						
						ИмпортУспешноЗавершен = Истина;
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_ВыполнениеТекущейОперации Тогда
						
						ИмпортПродолжается = Истина;
						
					Иначе
						
						Успешно = Ложь;
						
						ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
							+ НСтр("ru = 'Произошла ошибка на стороне сервера. Получен неизвестный статус импорта.'")
							+ Символы.ПС + НСтр("ru = 'Ответ сервера'") + ": " + Символы.ПС + ОтветСервера);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ИмпортУспешноЗавершен Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Процедура УдалитьСписокВременныхФайлов(СписокФайлов)

	Для каждого ТекФайл Из СписокФайлов Цикл
		
		Попытка
			УдалитьФайлы(ТекФайл.Значение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Отправляет файл на сервер по http.
//
// Параметры:
//	ПолноеИмяФайла - строка
//	Соединение - HTTPСоединение
//	ПараметрыЗапроса - строка
//	Заголовки - строка
//	ОписаниеОшибки - строка
//
// Возвращаемое значение:
//	Строка - Ответ сервера.
//
Функция ОтправитьФайлНаСервер(ПолноеИмяФайла, Соединение, ПараметрыЗапроса="", Заголовки="", ОписаниеОшибки)
	
	ОтветСервера = Неопределено;
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		Соединение.ОтправитьДляОбработки(ПолноеИмяФайла, СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки());
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		Кодировка = КодировкаФайла(ИмяФайлаОтвета);
		ТекстОтвета.Прочитать(ИмяФайлаОтвета,Кодировка);
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Получен пустой ответ сервера.'"));
		КонецЕсли;
		
	Иначе
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Ответ сервера не получен.'")); 
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		ЗаписьЖурналаРегистрации("Обмен с сайтами",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт,
			,
			НСтр("ru = 'Не удалось удалить временный файл'") + " " + ИмяФайлаОтвета);
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция РазделитьФайлыНаФрагменты(СписокФайлов, ОграничениеРазмераФрагмента)
	
	НовыйСписокФайлов = Новый СписокЗначений;
	Для Каждого ТекФайл Из СписокФайлов цикл
		
		ФайлНаДиске = Новый Файл(ТекФайл.Значение);
		Если ФайлНаДиске.Размер() > ОграничениеРазмераФрагмента Тогда
			
			МассивФрагментов = РазделитьФайл(ФайлНаДиске.ПолноеИмя, ОграничениеРазмераФрагмента);
			Для Каждого НовыйФайл Из МассивФрагментов Цикл
				НовыйСписокФайлов.Добавить(НовыйФайл, ТекФайл.Представление);
			КонецЦикла;
			
			УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
			
		Иначе
			НовыйСписокФайлов.Добавить(ТекФайл.Значение, ТекФайл.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПодготовитьZIPАрхивы(КаталогНаДиске, ОписаниеОшибки)
	
	ПолноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	НовыйСписокФайлов = Новый СписокЗначений;
	
	ЗаписьАрхива.Добавить(КаталогНаДиске + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	
	Попытка
		ЗаписьАрхива.Записать();
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать zip-архив на диск!'")));
		Возврат НовыйСписокФайлов;
		
	КонецПопытки;
	
	ФайлАрхива = Новый Файл(ПолноеИмяФайлаАрхива);
	НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ФайлАрхива.Имя);
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПолучитьСписокФайловДляОтправки(КаталогНаДиске, МассивПодкаталогов);
	
	СписокФайлов = Новый СписокЗначений;
	МаскаФайлыИКаталоги = "*";
	МаскаФайлы = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(КаталогНаДиске, МаскаФайлы);
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			
			ФайлыВПодкаталоге = НайтиФайлы(КаталогНаДиске + "\" + Подкаталог, МаскаФайлыИКаталоги);
			
			Для Каждого ТекФайл Из ФайлыВПодкаталоге Цикл
				
				Если ТекФайл.ЭтоКаталог() Тогда
					
					ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, МаскаФайлы);
					
					Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
						
						Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда	
							ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ВсеФайлыДляВыгрузки.Добавить(ТекФайл);  
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ВсеФайлыДляВыгрузки цикл
		
		Если НЕ ТекФайл.ЭтоКаталог() Тогда
			
			ПолноеИмяФайлаДляСервера = ПодготовитьИмяФайлаДляСервера(КаталогНаДиске, ТекФайл);
			СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

Функция ПодготовитьИмяФайлаДляСервера(КаталогНаДиске, ФайлОбъект)
	
	ПолноеИмяФайлаДляСервера = "";
	
	Если СтрНайти(ФайлОбъект.Имя, ".xml") > 0 Тогда
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.Имя;
		
	Иначе
		
		//Для картинки оставляем 2 папки и разворачиваем слэши для идентификации на сервере сайта.
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.ПолноеИмя;
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
		
		ПутьДляУдаления = СтрЗаменить(КаталогНаДиске, "\", "/") + "/";
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
		
	КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = УдалитьДополнительныеРасширенияФайла(КаталогНаДиске, ПолноеИмяФайлаДляСервера);
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции

Функция УдалитьДополнительныеРасширенияФайла(КаталогНаДиске, ИсходноеИмяФайла)
	
	ПозицияТочки = СтрНайти(ИсходноеИмяФайла, ".");
	
	ИмяФайла = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	
	ПозицияТочки = СтрНайти(ПраваяЧастьИсходногоИмени, ".");
	
	Расширение = ПраваяЧастьИсходногоИмени;
	
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);
	КонецЕсли;
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции

Процедура ДобавитьОписаниеОшибки(Описание, Дополнение) Экспорт
	
	Если ПустаяСтрока(Описание) Тогда
		Описание = Дополнение;
	Иначе
		Описание = Описание + Символы.ПС + Дополнение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеССервера(Соединение, ПараметрыЗапроса = "", Заголовки = "", ОписаниеОшибки)
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		HTTPОтветСервера = Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось получить данные с сервера. Проверьте правильность адреса сервера, порт, имя пользователя и пароль,'")
				+ Символы.ПС
				+ НСтр("ru = 'а также настройки подключения к Интернет.'")));
		
	КонецПопытки;
	
	Если HTTPОтветСервера<>Неопределено И HTTPОтветСервера.КодСостояния<>200 Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Получение данных с сервера: Ответ сервера: '"+HTTPОтветСервера.КодСостояния));
	КонецЕсли;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	ОтветСервера = Неопределено;
	
	Если ФайлОтвета.Существует() Тогда
		
		КодировкаXML = "";
		
		//Попытка 1: получаем кодировку из файла-ответа
		ЧтениеXML = Новый ЧтениеXML;
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
			ЧтениеXML.Прочитать();
			КодировкаXML = ЧтениеXML.КодировкаXML;
		Исключение
		КонецПопытки;
		ЧтениеXML.Закрыть();
		
		//Попытка 2: получаем кодировку из заголовка ответа (может не совпадать с кодировкой файла-ответа) 
		Если КодировкаXML = "" И HTTPОтветСервера<>Неопределено И HTTPОтветСервера.Заголовки.Получить("Content-Type")<>Неопределено Тогда
			ContentType = HTTPОтветСервера.Заголовки.Получить("Content-Type");
			Если СтрНайти(ContentType, "charset=")<>0 Тогда
				КодировкаXML = Сред(ContentType, 8+СтрНайти(ContentType, "charset="));
			КонецЕсли;
		КонецЕсли;
		
		//Попытка 3: Используем UTF-8
		Если КодировкаXML = "" Тогда
			КодировкаXML = "UTF-8";
		КонецЕсли;
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета, КодировкаXML);
		
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				НСтр("ru = 'Получение данных с сервера: Получен пустой ответ сервера.'"));
		КонецЕсли;
		
	Иначе
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			НСтр("ru = 'Получение данных с сервера: Ответ сервера не получен.'"));
			
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		ЗаписьЖурналаРегистрации("Обмен с сайтами",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт,
			,
			НСтр("ru = 'Не удалось удалить временный файл'") + " " + ИмяФайлаОтвета);
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ПодготовитьПутьДляПлатформы(ПлатформаWindows, Путь) Экспорт
	
	Если ПлатформаWindows Тогда
		ЧтоМенять = "/";
		НаЧтоМенять = "\";
	Иначе
		ЧтоМенять = "\";
		НаЧтоМенять = "/";
	КонецЕсли;
	
	Путь = СтрЗаменить(Путь, ЧтоМенять, НаЧтоМенять);
	Возврат Путь;
	
КонецФункции

// Добавляет данные узла плана обмена в структуру Параметры.
//
Процедура ДобавитьНастройкиУзлаВПараметры(УзелОбмена, Параметры)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК УзелОбмена,
		|	ОбменУправлениеНебольшойФирмойСайт.ПометкаУдаления КАК ПометкаУдаления,
		|	ОбменУправлениеНебольшойФирмойСайт.ВыполнятьПолнуюВыгрузкуПринудительно КАК ВыполнятьПолнуюВыгрузкуПринудительно,
		|	ОбменУправлениеНебольшойФирмойСайт.ОбменТоварами КАК ОбменТоварами,
		|	ОбменУправлениеНебольшойФирмойСайт.ОбменЗаказами КАК ОбменЗаказами,
		|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
		|	ОбменУправлениеНебольшойФирмойСайт.КаталогВыгрузки КАК КаталогВыгрузки,
		|	ОбменУправлениеНебольшойФирмойСайт.АдресСайта КАК АдресСайта,
		|	ОбменУправлениеНебольшойФирмойСайт.ИмяПользователя КАК ИмяПользователя,
		|	ОбменУправлениеНебольшойФирмойСайт.Пароль КАК Пароль,
		|	ОбменУправлениеНебольшойФирмойСайт.ИспользоватьРегламентныеЗадания КАК ИспользоватьРегламентныеЗадания,
		|	ОбменУправлениеНебольшойФирмойСайт.ИдентификаторРегламентногоЗадания КАК ИдентификаторРегламентногоЗадания,
		|	ОбменУправлениеНебольшойФирмойСайт.СпособИдентификацииКонтрагентов КАК СпособИдентификацииКонтрагентов,
		|	ОбменУправлениеНебольшойФирмойСайт.КонтрагентДляПодстановкиВЗаказы КАК КонтрагентДляПодстановкиВЗаказы,
		|	ОбменУправлениеНебольшойФирмойСайт.ОрганизацияДляПодстановкиВЗаказы КАК ОрганизацияДляПодстановкиВЗаказы,
		|	ОбменУправлениеНебольшойФирмойСайт.ГруппаДляНовыхКонтрагентов КАК ГруппаДляНовыхКонтрагентов,
		|	ОбменУправлениеНебольшойФирмойСайт.ГруппаДляНовойНоменклатуры КАК ГруппаДляНовойНоменклатуры,
		|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьКартинки КАК ВыгружатьКартинки,
		|	ОбменУправлениеНебольшойФирмойСайт.СохраненнаяТаблицаКаталогов КАК СохраненнаяТаблицаКаталогов,
		|	ОбменУправлениеНебольшойФирмойСайт.ФайлЗагрузки КАК ФайлЗагрузки,
		|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьОстаткиПоСкладам КАК ВыгружатьОстаткиПоСкладам,
		|	ОбменУправлениеНебольшойФирмойСайт.СоответствиеСтатусовЗаказов.(
		|		СтатусЗаказаНаСайте КАК СтатусЗаказаНаСайте,
		|		СостояниеЗаказаПокупателя КАК СостояниеЗаказаПокупателя
		|	) КАК ТаблицаСоответствияСтатусовЗаказов,
		|	ОбменУправлениеНебольшойФирмойСайт.ВидыЦен.(
		|		ВидЦен
		|	) КАК ВидыЦен,
		|	ОбменУправлениеНебольшойФирмойСайт.ВидЗаказа КАК ВидЗаказа,
		|	ОбменУправлениеНебольшойФирмойСайт.СостояниеЗаказа КАК СостояниеЗаказа,
		|	ОбменУправлениеНебольшойФирмойСайт.ДатаНачалаВыгрузкиЗаказов,
		|	ОбменУправлениеНебольшойФирмойСайт.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке
		|ИЗ
		|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт
		|ГДЕ
		|	ОбменУправлениеНебольшойФирмойСайт.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаНастроек = Результат.Выгрузить();
	Для Каждого Колонка Из ТаблицаНастроек.Колонки Цикл
		
		Параметры.Вставить(Колонка.Имя, ТаблицаНастроек[0][Колонка.Имя]);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Параметры.Пароль = ПарольИзХранилища;
	
КонецПроцедуры

Процедура ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, Наименование, Значение)
	
	Если НЕ ЗначениеЗаполнено(Наименование) ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизитаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначениеРеквизита"));
	
	ЗначениеРеквизитаXDTO.Наименование = Наименование;
	ЗначениеРеквизитаXDTO.Значение.Добавить(ПолучитьСтрокуЗаписиДляXML(Значение));
	
	ЗначенияРеквизитовXDTO.ЗначениеРеквизита.Добавить(ЗначениеРеквизитаXDTO);
	
КонецПроцедуры

// Получает тип свойства от типа объекта XDTO.
//
// Параметры:
//	ТипОбъектаXDTO - тип объекта XDTO, от которого требуется получить тип свойства
//	ИмяСвойства - имя свойства, тип которого нужно получить
//
//Возвращаемое значение:
//	ТипОбъектаXDTO.
//
Функция ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТипОбъектаXDTO, ИмяСвойства)
	
	ТипСвойства = ТипОбъектаXDTO.Свойства.Получить(ИмяСвойства).Тип;
	Возврат ТипСвойства;
	
КонецФункции

Функция ПолучитьКонтрагентаXDTO(ДанныеКонтрагента, ПакетCML) Экспорт
	
	Если ДанныеКонтрагента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоОрганизация = ТипЗнч(ДанныеКонтрагента.Контрагент) = Тип("СправочникСсылка.Организации");
	Если ЭтоОрганизация Тогда
		
		КонтрагентXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Контрагент"));
		
	Иначе
		
		КонтрагентыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Документ"), "Контрагенты");
		КонтрагентXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(КонтрагентыТип, "Контрагент"));
		
	КонецЕсли;
	
	КонтрагентXDTO.ИД = Строка(ДанныеКонтрагента.Контрагент.УникальныйИдентификатор());
	КонтрагентXDTO.Наименование = ДанныеКонтрагента.Наименование;
	
	Если ЭтоОрганизация Тогда
		ЭтоЮрЛицо = ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе 
		ЭтоЮрЛицо = ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо
			ИЛИ ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		
		Если НЕ ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное) Тогда
			КонтрагентXDTO.ОфициальноеНаименование = ДанныеКонтрагента.НаименованиеПолное;
		КонецЕсли;
		
		Если ЭтоОрганизация Тогда
			ДобавитьЮрАдресОрганизацииXDTO(КонтрагентXDTO, ДанныеКонтрагента.КонтактнаяИнформация, ПакетCML);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное) Тогда
			КонтрагентXDTO.ПолноеНаименование = ДанныеКонтрагента.НаименованиеПолное;
		КонецЕсли;
		
	КонецЕсли;
	
	ИНН = ПолучитьИННДляXDTO(ДанныеКонтрагента.ИНН, ЭтоЮрЛицо);
	Если НЕ ПустаяСтрока(ИНН) Тогда
		КонтрагентXDTO.ИНН = ИНН;
	КонецЕсли;
	
	КПП = ПолучитьКППДляXDTO(ДанныеКонтрагента.КПП);
	Если НЕ ПустаяСтрока(КПП) Тогда
		КонтрагентXDTO.КПП = КПП;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		КонтрагентXDTO.ОКПО = ДанныеКонтрагента.КодПоОКПО;
	КонецЕсли;
	
	Если НЕ ЭтоОрганизация Тогда
		КонтрагентXDTO.Роль = "Покупатель";
	КонецЕсли;
	
	КонтрагентXDTO.Проверить();
	
	Возврат КонтрагентXDTO;
	
КонецФункции

Функция ПолучитьИННДляXDTO(ИНН, ЭтоЮрЛицо)
	
	Если ЭтоЮрЛицо Тогда
		ЗначениеИНН = ?(СтрДлина(ИНН) = 10, ИНН, "");
	Иначе
		ЗначениеИНН = ?(СтрДлина(ИНН) = 12, ИНН, "");
	КонецЕсли;
	
	Возврат ЗначениеИНН;
	
КонецФункции

Функция ПолучитьКППДляXDTO(КПП)
	
	ЗначениеКПП = ?(СтрДлина(КПП) = 9, КПП, "");
	
	Возврат ЗначениеКПП;
	
КонецФункции 

// Проверяет штрихкод на соответствие формату CML205.
// Если штрихкод не соответствует формату, возвращает пустую строку.
//
Функция ПолучитьШтрихкодДляXDTO(Штрихкод)
	
	Если СтрДлина(Штрихкод) < 8
		ИЛИ СтрДлина(Штрихкод) > 14 Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

процедура ДобавитьЮрАдресОрганизацииXDTO(ОрганизацияXDTO, КонтактнаяИнформация, ПакетCML)
	
	ВыборкаКИ = КонтактнаяИнформация.Выбрать();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Если НЕ ВыборкаКИ.НайтиСледующий(СтруктураПоиска)
		ИЛИ ПустаяСтрока(ВыборкаКИ.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ЮридическийАдресXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Адрес"));
	ЮридическийАдресXDTO.Представление = ВыборкаКИ.Представление;
	
	СписокПолей = ПреобразоватьСтрокуВСписокПолей(ВыборкаКИ.ЗначенияПолей);
	Для Каждого ПолеКИ Из СписокПолей Цикл
		
		Если ПолеКИ.Представление = "Индекс" Тогда
			
			ДобавитьАдресноеПолеXDTO(ЮридическийАдресXDTO, "Почтовый индекс", ПолеКИ.Значение, ПакетCML);
			
		ИначеЕсли ПолеКИ.Представление = "НаселенныйПункт" Тогда
			
			ДобавитьАдресноеПолеXDTO(ЮридическийАдресXDTO, "Населенный пункт", ПолеКИ.Значение, ПакетCML);
			
		ИначеЕсли ПолеКИ.Представление = "Регион"
			ИЛИ ПолеКИ.Представление = "Район"
			ИЛИ ПолеКИ.Представление = "Город"
			ИЛИ ПолеКИ.Представление = "Улица"
			ИЛИ ПолеКИ.Представление = "Дом"
			ИЛИ ПолеКИ.Представление = "Корпус"
			ИЛИ ПолеКИ.Представление = "Квартира"
			ИЛИ ПолеКИ.Представление = "Страна" Тогда
			
			ДобавитьАдресноеПолеXDTO(ЮридическийАдресXDTO, ПолеКИ.Представление, ПолеКИ.Значение, ПакетCML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОрганизацияXDTO.ЮридическийАдрес = ЮридическийАдресXDTO;
	
КонецПроцедуры

// Добавляет адресное поле в объект XDTO.
//
// Параметры:
//	АдресXDTO - объект XDTO типа Адрес
//	ИмяПоля - Строка
//	Значение - Строка
//	ПакетCML - пакет XDTO, содержащий типы CML.
//
Процедура ДобавитьАдресноеПолеXDTO(АдресXDTO, ИмяПоля, Значение, ПакетCML)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	АдресноеПолеXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("АдресноеПоле"));
	
	АдресноеПолеXDTO.Тип = ИмяПоля;
	АдресноеПолеXDTO.Значение = Значение;
	
	АдресXDTO.АдресноеПоле.Добавить(АдресноеПолеXDTO);
	
КонецПроцедуры

Функция ТипЗначенияСправочник(Тип)
	
	ТипЗначенияСправочник = Ложь;
	
	Попытка
		ОбъектПоТипу = Новый(Тип);
		ТипЗначенияСправочник = Метаданные.Справочники.Содержит(ОбъектПоТипу.Метаданные());
	Исключение
	КонецПопытки;
	
	Возврат ТипЗначенияСправочник;
	
КонецФункции

Функция ФорматНаименованияДляXDTO(Наименование)
	
	Возврат Лев(Наименование, 250);
	
КонецФункции

Функция ФорматДатыДляXDTO(ЗначениеДата, ВернутьДату = Истина, ВернутьВремя = Ложь)
	
	ФорматДаты = "ДФ=yyyy-MM-dd; ДЛФ=D";
	ФорматВремени = "ДЛФ=T";
	РазделительДатаВремя = "T";
	
	ДатаСтрока = Формат(ЗначениеДата, ФорматДаты);
	ВремяСтрока = Формат(ЗначениеДата, ФорматВремени);
	Результат = "";
	
	Если ВернутьДату И ВернутьВремя Тогда
		Результат = ДатаСтрока + РазделительДатаВремя + ВремяСтрока;
	ИначеЕсли ВернутьДату И (НЕ ВернутьВремя) Тогда
		Результат = ДатаСтрока;
	ИначеЕсли (НЕ ВернутьДату) И ВернутьВремя Тогда
		Результат = ВремяСтрока;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение валюты для выгрузки в XML.
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты
// 
// Возвращаемое значение:
//  Строка.
//
Функция ФорматВалютыДляXDTO(Валюта) Экспорт
	
	ТекстВалюты = "???";
	
	Если ТипЗнч(Валюта) = Тип("СправочникСсылка.Валюты") Тогда
		ТекстВалюты = Валюта.Наименование;
	КонецЕсли;
		
	Возврат Лев(ТекстВалюты, 3);
	
КонецФункции

Процедура ВывестиСписокДокументовДляПротокола(Описание, МассивДокументов)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Описание + ". " + НСтр("ru = 'Список документов:'");
	
	Для Каждого Док Из МассивДокументов Цикл
		
		СтруктураРеквизитовЗаказаНаСайте = ПолучитьРеквизитыЗаказаНаСайте(Док.Ссылка);
		
		Если СтруктураРеквизитовЗаказаНаСайте = Неопределено Тогда
			НомерЗаказаНаСайте = "";
			ДатаЗаказаНаСайте = "";
		Иначе
			НомерЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте;
			ДатаЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.ДатаЗаказаНаСайте;
		КонецЕсли;
		
		Описание = Описание + Символы.ПС + Символы.НПП + Символы.НПП
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ %1 от %2 (№ %3 от %4 на сайте)'"),
				Док.Номер,
				Док.Дата,
				НомерЗаказаНаСайте,
				ДатаЗаказаНаСайте);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РаспаковатьZIPАрхив(СтрокаZIP, ОписаниеОшибки) Экспорт
	
	СтрокаСодержимого = "";
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	
	Попытка
		
		СоздатьКаталог(ИмяКаталога);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось распаковать архив с заказами!'")));
			
		Возврат "";
		
	КонецПопытки;
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	
	Попытка
		
		СтрокаВФайл.Записать(ИмяФайла);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать архив с заказами: '")
				+ ИмяФайла));
				
		Возврат "";
		
	КонецПопытки;
	
	Попытка
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
		ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
		ЧтениеZIP.Закрыть();
		
		РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
		
		Если РаспакованныеФайлы.Количество() = 1 Тогда
			
			КодировкаXML = КодировкаФайла(РаспакованныеФайлы[0].ПолноеИмя);
			
			СтрокаИзФайла = Новый ТекстовыйДокумент;
			СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя, КодировкаXML);
			СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
			
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось распаковать архив с заказами: '")
				+ ИмяФайла));
				
		Возврат "";
		
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции

//Возвращает структуру, содержащую данные банка, полученные из объекта XDTO типа Банк
//
Функция ПолучитьДанныеБанкаXDTO(БанкXDTO)
	
	ДанныеБанка = Новый Структура;
	
	Наименование = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Наименование") И СвойствоXDTOЗаполнено(БанкXDTO.Наименование) Тогда
		Наименование = БанкXDTO.Наименование;
	КонецЕсли;
	
	БИК = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "БИК") И СвойствоXDTOЗаполнено(БанкXDTO.БИК) Тогда
		БИК = СтрЗаменить(БанкXDTO.БИК, " ", "");
	КонецЕсли;
	
	SWIFT = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "SWIFT") И СвойствоXDTOЗаполнено(БанкXDTO.SWIFT) Тогда
		SWIFT = СтрЗаменить(БанкXDTO.SWIFT, " ", "");
	КонецЕсли;
	
	КоррСчет = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "СчетКорреспондентский") И СвойствоXDTOЗаполнено(БанкXDTO.СчетКорреспондентский) Тогда
		КоррСчет = СтрЗаменить(БанкXDTO.СчетКорреспондентский, " ", "");
	КонецЕсли;
	
	Адрес = "";
	Город = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Адрес") И СвойствоXDTOЗаполнено(БанкXDTO.Адрес.Представление) Тогда
		Адрес = СокрЛП(БанкXDTO.Адрес.Представление);
		Город = ПолучитьГородБанкаИзАдресаXDTO(БанкXDTO.Адрес);
	КонецЕсли;
	
	ДанныеБанка.Вставить("Наименование", Наименование);
	ДанныеБанка.Вставить("БИК", БИК);
	ДанныеБанка.Вставить("SWIFT", SWIFT);
	ДанныеБанка.Вставить("КоррСчет", КоррСчет);
	ДанныеБанка.Вставить("Адрес", Адрес);
	ДанныеБанка.Вставить("Город", Город);
	
	Возврат ДанныеБанка;
	
КонецФункции

Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство) Экспорт
	
	ЕстьСвойство = Ложь;
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат ЕстьСвойство;
	КонецЕсли;
	
	Попытка
		ЕстьСвойство = ОбъектXDTO.Свойства().Получить(Свойство) <> Неопределено
			И ОбъектXDTO[Свойство] <> Неопределено;
	Исключение
	КонецПопытки;
	
	Возврат ЕстьСвойство;
	
КонецФункции

Функция СвойствоXDTOЗаполнено(СвойствоXDTO) Экспорт
	
	СвойствоЗаполнено = Истина;
	
	Если ТипЗнч(СвойствоXDTO) = Тип("ОбъектXDTO")
		ИЛИ ТипЗнч(СвойствоXDTO) = Тип("СписокXDTO")
		ИЛИ НЕ ЗначениеЗаполнено(СвойствоXDTO) Тогда
		
		СвойствоЗаполнено = Ложь;
		
	КонецЕсли;
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Ключ + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьГородБанкаИзАдресаXDTO(АдресXDTO)
	
	Город = "";
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле")
		И ТипЗнч(АдресXDTO.АдресноеПоле) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из АдресXDTO.АдресноеПоле Цикл
			
			Если ОбъектXDTO.Тип = "Город" Тогда
				
				Город = ОбъектXDTO.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Город;
	
КонецФункции

Функция ПолучитьТипВидКонтактнойИнформацииПоТипуXDTO(ТипКИXDTO)
	
	СтруктураКИ = Новый Структура();
	
	Если НРег(ТипКИXDTO) = "телефонрабочий"
		ИЛИ НРег(ТипКИXDTO) = "телефонвнутренний"
		ИЛИ НРег(ТипКИXDTO) = "телефонмобильный"
		ИЛИ НРег(ТипКИXDTO) = "телефондомашний" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		
	ИначеЕсли НРег(ТипКИXDTO) = "факс" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Факс;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
		
	ИначеЕсли НРег(ТипКИXDTO) = "почта" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		
	ИначеЕсли НРег(ТипКИXDTO) = "вебсайт" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
		
	Иначе
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
		
	КонецЕсли;
	
	СтруктураКИ.Вставить("Тип", ТипКИ);
	СтруктураКИ.Вставить("Вид", ВидКИ);
	
	Возврат СтруктураКИ;
	
КонецФункции

// Получает валюту, соответствующую номеру банковского счета.
// 6-8 разряды номера банковского счета соответствуют коду валюты.
// Для российского рубля используется код 810.
//
// Параметры:
//	НомерСчета - Число - Номер банковского счета
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - Валюта банковского счета.
//
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета) Экспорт
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO)
	
	ТекущаяСтрока = "";
	Фамилия = "";
	Имя = "";
	Отчество = "";
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Фамилия") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Фамилия) Тогда
		ТекущаяСтрока = КонтрагентXDTO.Фамилия;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Имя") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Имя) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Имя);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Отчество") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Отчество) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Отчество);
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

// Возвращает массив, содержащий объекты XDTO 
//	или объект XDTO, если тип переданного параметра "ОбъектXDTO".
//
// Параметры
//	СписокXDTO - СписокXDTO, ОбъектXDTO - список XDTO, объекты которого нужно получить
//
// Возвращаемое значение
//	Массив - массив свойств объекта XDTO.
//
Функция ПолучитьМассивОбъектовСпискаXDTO(СписокXDTO) Экспорт
	
	МассивОбъектовXDTO = Новый Массив;
	
	Если ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из СписокXDTO Цикл 
			МассивОбъектовXDTO.Добавить(ОбъектXDTO);
		КонецЦикла;
		
	Иначе
		МассивОбъектовXDTO.Добавить(СписокXDTO);
	КонецЕсли;
	
	Возврат МассивОбъектовXDTO;
	
КонецФункции

Процедура РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ)
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС,
										  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
										  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

// Распределяет сумму по колонке "Сумма".
//
// Параметры: 
//	Товары - Табличная часть
//	СуммаРаспределения - число, распределяемая сумма
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя.
//
Процедура РаспределитьСуммуПоКолонке(Документ, Товары, СуммаРаспределения)
	
	МассивДанныхКолонки = Товары.ВыгрузитьКолонку("Сумма");
	МассивРаспределения = РаспределитьПропорционально(СуммаРаспределения, МассивДанныхКолонки);
	
	Если МассивРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Индекс = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + МассивРаспределения[Индекс];
		ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//	ИсхСумма   - распределяемая сумма
//	МассивКоэф - массив коэффициентов распределения
//	Точность   - точность округления при распределении.
//
//Возвращает:
//	МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//				 суммы в соответствии с весом коэффициента (из массива коэффициентов)
//				 В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//				 или суммарный вес коэф. = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт
	
	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
	
		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);
	
		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач = МодульЧисла;
			ИндексМакс = К;
		КонецЕсли;
	
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
	
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСумм = Новый Массив(МассивКоэф.Количество());
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		РаспрСумма = РаспрСумма + МассивСумм[К];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффицент с максимальным весом.
	Если Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;
	
	Возврат МассивСумм;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(ЗначениеСтрока)
	
	ЗначениеЧисло = 0;
	
	Попытка
		ЗначениеЧисло = Число(ЗначениеСтрока);
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеЧисло;
	
КонецФункции

Функция ПолучитьИдНоменклатуры(Знач Ид)
	
	ПозицияРазделителя = СтрНайти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдНоменклатуры = Лев(Ид, ПозицияРазделителя - 1);
	Иначе
		ИдНоменклатуры = Ид;
	КонецЕсли;
	
	Возврат ИдНоменклатуры;
	
КонецФункции

Функция ПолучитьНаименованиеНоменклатуры(Знач Наименование)
	
	ПозицияРазделителя = СтрНайти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеНоменклатуры = Лев(Наименование, ПозицияРазделителя - 1);
	Иначе
		НаименованиеНоменклатуры = Наименование;
	КонецЕсли;
	
	Возврат НаименованиеНоменклатуры;
	
КонецФункции

Функция ПолучитьИдХарактеристики(Знач Ид)
	
	ПозицияРазделителя = СтрНайти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдХарактеристики = Сред(Ид, ПозицияРазделителя + 1);
	Иначе
		ИдХарактеристики = "";
	КонецЕсли;
	
	Возврат ИдХарактеристики;
	
КонецФункции

Функция ПолучитьНаименованиеХарактеристики(Знач Наименование)
	
	ПозицияРазделителя = СтрНайти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеХарактеристики = Сред(Наименование, ПозицияРазделителя + 1);
	Иначе
		НаименованиеХарактеристики = "";
	КонецЕсли;
	
	Возврат НаименованиеХарактеристики;
	
КонецФункции

Функция ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока = "")
	
	ДатаВремя = Дата(1,1,1);
	
	Попытка
		
		Если ТипЗнч(ДатаСтрока) = Тип("Дата")
			И ТипЗнч(ВремяСтрока) = Тип("Дата") Тогда
			
			ДатаВремя = Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
		КонецЕсли;
		
		Если ДатаВремя = Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(ВремяСтрока) Тогда
				Время = СтрЗаменить(ВремяСтрока, ":", "");
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + Время);
			Иначе
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + "000000");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

Процедура ДобавитьПараметрыПротоколаОбменаВСтруктуру(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_Инициализация"			, "&mode=init");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПередачаФайла"			, "&mode=file&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ИмпортФайлаСервером"		, "&mode=import&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПолучитьДанные"			, "&mode=query");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта", "&mode=success");
	
	СтруктураПараметров.Вставить("ОтветСервера_ZIPРазрешен"								, "zip=yes");
	СтруктураПараметров.Вставить("ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена"	, "file_limit=");
	СтруктураПараметров.Вставить("ОтветСервера_УспешноеЗавершениеТекущейОперации"		, "success");
	СтруктураПараметров.Вставить("ОтветСервера_АварийноеЗавершениеТекущейОперации"		, "failure");
	СтруктураПараметров.Вставить("ОтветСервера_ВыполнениеТекущейОперации"				, "progress");
	
КонецПроцедуры	

Функция ПолучитьПутьТомаДляПлатформы(ПлатформаWindows, Том) Экспорт
	
	Если ПлатформаWindows Тогда
		Возврат Том.ПолныйПутьWindows;
	Иначе
		Возврат Том.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

Функция ЭтоГруппаВерхнегоУровня(Элемент, СписокГрупп)
	
	Если ТипЗнч(СписокГрупп) = Тип("СписокЗначений") Тогда 
		Для Каждого Группа Из СписокГрупп Цикл
			Попытка
				Если Группа.Значение.ПринадлежитЭлементу(Элемент) Тогда
					Возврат Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьВариантыЗначенийСвойстваПоТипу(Выборка, Тип)
	
	ВариантыЗначений = Новый Массив;
	ВыборкаЗначений = Выборка.Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаЗначений.Значение) = Тип Тогда
			
			ВариантыЗначений.Добавить(ВыборкаЗначений.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВариантыЗначений;
	
КонецФункции

Функция ПолучитьСтрокуЗаписиДляXML(Значение)
	
	СтрокаЗаписи = Строка(Значение);
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.НПП, "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, ",", ".");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			СтрокаЗаписи = "true";
		Иначе
			СтрокаЗаписи = "false";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаЗаписи;
	
КонецФункции

// Преобразует строку полей в список значений.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей)
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		
		Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
		
		Если Лев(Стр, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
			КонецЕсли;
		Иначе
			Поз = СтрНайти(Стр, "=");
			Если Поз <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Удаляет все содержимое каталога.
// При ошибке возвращает описание ошибки.
//
// Параметры:
//	Каталог - Строка, путь к каталогу
//	ОписаниеОшибки - Строка, описание возникшей ошибки
//
// Возвращаемое значение:
//	Булево - Истина, если успех, Ложь - если произошла ошибка.
//
Функция ОчиститьКаталог(Каталог, ОписаниеОшибки)
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось очистить каталог обмена: ")
				+ " (" + Каталог + ")"));
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Формирует расширенное описание ошибки.
//
// Параметры:
//	ТекстНачалаСообщения - Строка
//	ТекстОкончанияСообщения - Строка
//
// Возвращаемое значение:
//	Строка - Сформированное описание ошибки.
//
Функция ОписаниеИсключительнойОшибки(ТекстНачалаСообщения = "", ТекстОкончанияСообщения = "") Экспорт
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	ТекстСообщения = НСтр("ru = 'Произошла ошибка: '")
		+ ТекстНачалаСообщения
		+ ?(ПустаяСтрока(ТекстОкончанияСообщения), "", Символы.ПС + ТекстОкончанияСообщения)
		+ ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", Символы.ПС + ПодробноеПредставлениеОшибки);
		
	Возврат ТекстСообщения;
	
КонецФункции

// Формирует структуру со сылками на измененные объекты для настройки обмена.
//
// Параметры:
//	УзелОбмена - ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт
//
// Возвращаемое значение:
//	Структура, содержащая изменения, зарегистрированные для узла.
//
Функция ПолучитьВсеИзмененияИзПланаОбмена(УзелОбмена)
	
	СтруктураВозврата = Новый Структура;
	ЗаполнитьСтруктуруИзмененийДляУзла(УзелОбмена.Ссылка, СтруктураВозврата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по URL.
//
// Параметры:
//	АдресСайта - Строка, URL
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки)
	
	АдресСайта = СокрЛП(НастройкиПодключения.АдресСайта);

	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = СтрНайти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = СтрНайти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось получить номер порта: '")
					+ ПортСтрока + Символы.ПС
					+ НСтр("ru = 'Проверьте правильность ввода адреса сайта.'")));
				
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	Если АдресСкрипта = "" Тогда
		АдресСкрипта = "bitrix/admin/1c_exchange.php";
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

// Выполняет необходимые действия при завершении обмена.
//
// Параметры:
//	Параметры - Структура основных параметров
//	ТаблицаИнформации - Таблица значений, состояние текущего сеанса обмена
//	Ошибка - Булево, Истина, если необходимо зафиксировать завершение обмена с ошибками.
//
Процедура ВыполнитьДействияПриЗавершенииОбмена(Параметры, ТаблицаИнформации, Ошибка = Ложь)
	
	ТаблицаИнформации.ЗаполнитьЗначения(Параметры.УзелОбмена, "УзелИнформационнойБазы");
	
	// Записываем информацию по каждому действию в журнал регистрации.
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		СобытиеЖурнала = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(Параметры.УзелОбмена, СтрокаТаблицыИнформации.ДействиеПриОбмене);
		
		Если СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
		Если Ошибка Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
			УровеньЖурнала,
			Параметры.УзелОбмена.Метаданные(),
			Параметры.УзелОбмена,
			Параметры.РежимЗапускаОбмена + Символы.ПС + СтрокаТаблицыИнформации.Описание);
			
	КонецЦикла;

	// Объединяем 2 строки информации по выгрузке (товары и заказы) в одну (ВыгрузкаДанных).
	
	СтрокиВыгрузки = ТаблицаИнформации.НайтиСтроки(Новый Структура("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	Если СтрокиВыгрузки.Количество() = 2 Тогда
		
		Если СтрокиВыгрузки[1].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка Тогда
			СтрокиВыгрузки[0].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		КонецЕсли;
		
		ТаблицаИнформации.Удалить(СтрокиВыгрузки[1]);
		
	КонецЕсли;
	
	// Отметим выгруженные на сайт объекты в регистре соответствия объектов 1С и сайта
	Если Параметры.Свойство("СоответствияОбъектовСайта") И Параметры.ВыгружатьНаСайт=Истина Тогда
		
		МассивОбъектов = Новый Массив;
		Для каждого структураКлюч Из Параметры.СоответствияОбъектовСайта Цикл
			МассивОбъектов.Добавить(структураКлюч.Ключ);
		КонецЦикла;
		Если МассивОбъектов.Количество()>0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствияОбъектовСайта.УзелИнформационнойБазы,
			|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта,
			|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы,
			|	ИСТИНА КАК ОбъектВыгружен,
			|	СоответствияОбъектовСайта.ТипОбъекта,
			|	СоответствияОбъектовСайта.СсылкаНаОбъект
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
			|ГДЕ
			|	СоответствияОбъектовСайта.СсылкаНаОбъект В(&МассивОбъектов)
			|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
			|	И НЕ СоответствияОбъектовСайта.ОбъектВыгружен";
			
			Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
			Запрос.УстановитьПараметр("УзелОбмена", Параметры.УзелОбмена);
			
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоответствияОбъектовСайтаМенеджер = РегистрыСведений.СоответствияОбъектовСайта.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(СоответствияОбъектовСайтаМенеджер, Выборка);
				
				СоответствияОбъектовСайтаМенеджер.Записать(Истина);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли; 
	// Записываем состояния обмена.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		ЗаписьСостояния = РегистрыСведений.СостоянияОбменовДанными.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(ЗаписьСостояния, СтрокаТаблицыИнформации);
		
		// Даты записываем по границам сеанса, чтобы работал отбор журнала.
		
		ЗаписьСостояния.ДатаНачала = Параметры.ДатаФормирования;
		ЗаписьСостояния.ДатаОкончания = ТекущаяДата();
		
		ЗаписьСостояния.Записать();
		
		Если ЗначениеЗаполнено(ЗаписьСостояния.ДействиеПриОбмене)
			И (ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
			ИЛИ ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями) Тогда
			
			ЗаписьУспешногоСостояния = РегистрыСведений.СостоянияУспешныхОбменовДанными.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(ЗаписьУспешногоСостояния, ЗаписьСостояния);
			
			ЗаписьУспешногоСостояния.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивУзловДляРегистрации(ВыбиратьУзлыОбменаТоварами = Ложь, ВыбиратьУзлыОбменаЗаказами = Ложь)
	
	МассивУзлов = Новый Массив();
	
	Для Каждого Элемент Из ПараметрыСеанса.ИспользуемыеУзлыОбменаССайтом Цикл
		
		Если ВыбиратьУзлыОбменаТоварами 
			И Элемент.ОбменТоварами Тогда
			
			МассивУзлов.Добавить(Элемент);
			
		ИначеЕсли ВыбиратьУзлыОбменаЗаказами 
			И Элемент.ОбменЗаказами Тогда
			
			МассивУзлов.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивУзлов;
	
КонецФункции

Процедура УдалитьРегистрациюИзменений(УзелОбмена, СтруктураИзменений, ОбменТоварами, ОбменЗаказами)
	
	Если ОбменТоварами Тогда
		
		Для Каждого Данные Из СтруктураИзменений.Товары Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		
		Для Каждого Данные Из СтруктураИзменений.Файлы Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбменЗаказами Тогда
		
		Для Каждого Данные Из СтруктураИзменений.Заказы Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРеквизитыЗаказаНаСайте(ЗаказПокупателя)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗаказыПокупателейССайта.НомерЗаказаНаСайте,
		|	ЗаказыПокупателейССайта.ДатаЗаказаНаСайте
		|ИЗ
		|	РегистрСведений.ЗаказыПокупателейССайта КАК ЗаказыПокупателейССайта
		|ГДЕ
		|	ЗаказыПокупателейССайта.ЗаказПокупателя = &ЗаказПокупателя");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой()Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерЗаказаНаСайте", Выборка.НомерЗаказаНаСайте);
	СтруктураВозврата.Вставить("ДатаЗаказаНаСайте", Выборка.ДатаЗаказаНаСайте);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Добавляет характеристики в список характеристик объекта XDTO типа Товар.
//
Процедура ДобавитьХарактеристикиТовараXDTO(ТоварXDTO, ПакетCML, Номенклатура, ДеревоСвойствХарактеристик)
	
	Если ДеревоСвойствХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиТовараТип = ТоварXDTO.Свойства().Получить("ХарактеристикиТовара").Тип;
	ХарактеристикиТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикиТовараТип);
	
	НайденныеСтроки = ДеревоСвойствХарактеристик.Строки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Для каждого СтрокаХарактеристикаНоменклатуры Из НайденнаяСтрока.Строки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаХарактеристикаНоменклатуры.Характеристика) Тогда
				Продолжить;
			КонецЕсли;
			
			ХарактеристикаТовараТип = ПакетCML.Получить("ХарактеристикаТовара");
			ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикаТовараТип);
			
			ХарактеристикаТовараXDTO.Ид = Строка(СтрокаХарактеристикаНоменклатуры.Характеристика.УникальныйИдентификатор());
			ХарактеристикаТовараXDTO.Наименование = СтрокаХарактеристикаНоменклатуры.Характеристика.Наименование;
			
			ЗначенияСвойствТип = ХарактеристикаТовараXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
			ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
			
			Для каждого СтрокаСвойстваХарактеристик Из СтрокаХарактеристикаНоменклатуры.Строки Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаСвойстваХарактеристик.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
				ЗначенияСвойстваXDTO.Ид = Строка(СтрокаСвойстваХарактеристик.Свойство.УникальныйИдентификатор());
				ЗначенияСвойстваXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойстваХарактеристик.Наименование);
				
				Если СтрокаСвойстваХарактеристик.Значение = NULL Тогда
					
					// Если значение свойства не заполнено, выгружаем пустую строку.
					ЗначениеСвойства = "";
					
				Иначе
					
					ТипЗначенияСвойства = ТипЗнч(СтрокаСвойстваХарактеристик.Значение);
					Если ТипЗначенияСвойства = Тип("Дата") Тогда
						
						ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаСвойстваХарактеристик.Значение);
						
					Иначе
						
						ЗначениеСвойства = Строка(СтрокаСвойстваХарактеристик.Значение);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
				ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
				
			КонецЦикла;
			
			Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
				ХарактеристикаТовараXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
			КонецЕсли;
			
			ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
			
		КонецЦикла;
	КонецЦикла;
	
	ТоварXDTO.ХарактеристикиТовара = ХарактеристикиТовараXDTO;
	
КонецПроцедуры

Процедура ДобавитьСкладыВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры)

	ВыборкаСкладов = Параметры.ВыборкаСкладов;
	Если ВыборкаСкладов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкладыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "Склады");
	СкладыXDTO = ФабрикаXDTO.Создать(СкладыТип);
	
	ВыборкаСкладов.Сбросить();
	Пока ВыборкаСкладов.Следующий() Цикл
		
		СкладТип = ПакетCML.Получить("Склад");
		СкладXDTO = ФабрикаXDTO.Создать(СкладТип);
		
		ИдСклада = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыборкаСкладов.Склад);
		
		СкладXDTO.Ид = ИдСклада;
		СкладXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаСкладов.Наименование);
		
		ВыборкаКИ = ВыборкаСкладов.КонтактнаяИнформация.Выбрать();
		Если ВыборкаКИ.Количество() > 0 Тогда
			
			//Адрес
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
			
			Если ВыборкаКИ.НайтиСледующий(СтруктураПоиска)
				И Не ПустаяСтрока(ВыборкаКИ.Представление) Тогда
				
				АдресСтруктурнойЕдиницыXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Адрес"));
				АдресСтруктурнойЕдиницыXDTO.Представление = ВыборкаКИ.Представление;
				
				ЗначенияПолей = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(ВыборкаКИ.ЗначенияПолей, Истина);
				СписокПолей = ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
				Для Каждого ПолеКИ Из СписокПолей Цикл
					
					Если ПолеКИ.Представление = "Индекс" Тогда
						
						ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, "Почтовый индекс", ПолеКИ.Значение, ПакетCML);
						
					ИначеЕсли ПолеКИ.Представление = "НаселенныйПункт" Тогда
						
						ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, "Населенный пункт", ПолеКИ.Значение, ПакетCML);
						
					ИначеЕсли ПолеКИ.Представление = "Регион"
						ИЛИ ПолеКИ.Представление = "Район"
						ИЛИ ПолеКИ.Представление = "Город"
						ИЛИ ПолеКИ.Представление = "Улица"
						ИЛИ ПолеКИ.Представление = "Дом"
						ИЛИ ПолеКИ.Представление = "Корпус"
						ИЛИ ПолеКИ.Представление = "Квартира"
						ИЛИ ПолеКИ.Представление = "Страна" Тогда
						
						ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, ПолеКИ.Представление, ПолеКИ.Значение, ПакетCML);
						
					КонецЕсли;
					
				КонецЦикла;
				
				СкладXDTO.Адрес = АдресСтруктурнойЕдиницыXDTO;
				
			КонецЕсли;
			
			//Телефон
			ВыборкаКИ.Сбросить();
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы);
			
			Если ВыборкаКИ.НайтиСледующий(СтруктураПоиска)
				И Не ПустаяСтрока(ВыборкаКИ.Представление) Тогда
				
				КонтактыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(СкладТип, "Контакты");
				КонтактыXDTO = ФабрикаXDTO.Создать(КонтактыТип);
				
				КонтактXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Контакт"));
				
				КонтактXDTO.Тип = "Телефон рабочий";
				КонтактXDTO.Значение = ВыборкаКИ.Представление;
				
				Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ВыборкаКИ.ЗначенияПолей);
				Если Не ПустаяСтрока(Комментарий) Тогда
					КонтактXDTO.Комментарий = Формат(Комментарий, 3000);
				КонецЕсли;
				
				КонтактыXDTO.Контакт.Добавить(КонтактXDTO);
				СкладXDTO.Контакты = КонтактыXDTO;
				
			КонецЕсли;
		КонецЕсли;
		
		СкладыXDTO.Склад.Добавить(СкладXDTO);
		
	КонецЦикла;
	
	ПакетПредложенийXDTO.Склады = СкладыXDTO;

КонецПроцедуры

Процедура ДобавитьОстаткиПоСкладамXDTO(ПредложениеXDTO, СкладТип, ВыборкаЦен, Параметры)
	
	ВыборкаСкладов = Параметры.ВыборкаСкладов;
	ВыборкаСкладов.Сбросить();
	
	Пока ВыборкаСкладов.Следующий() Цикл
		
		ИдСклада = Строка(ВыборкаСкладов.Склад.УникальныйИдентификатор());
		КоличествоНаСкладе = 0;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", ВыборкаЦен.Номенклатура, ВыборкаЦен.Характеристика);
		НайденныеСтроки = Параметры.ТаблицаОстатковПоСкладам.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаМассива Из НайденныеСтроки Цикл
			Если СтрокаМассива.Склад = ВыборкаСкладов.Склад Тогда
				КоличествоНаСкладе = СтрокаМассива.КоличествоНаСкладе;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СкладXDTO = ФабрикаXDTO.Создать(СкладТип);
		СкладXDTO.ИдСклада = ИдСклада;
		СкладXDTO.КоличествоНаСкладе = КоличествоНаСкладе;
		
		ПредложениеXDTO.Склад.Добавить(СкладXDTO);
		
	КонецЦикла;

КонецПроцедуры

Функция КодировкаФайла(ИмяФайла)

	КодировкаXML = "UTF-8";
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеXML.Прочитать();
		КодировкаXML = ЧтениеXML.КодировкаXML;
	Исключение
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	Возврат КодировкаXML;

КонецФункции

Функция НадписьВсеГруппы() Экспорт
	Возврат "(" + НСтр("ru = 'Все'") + ")";
КонецФункции

Функция НадписьНетГруппы() Экспорт
	Возврат НСтр("ru = '<Нет группы>'");
КонецФункции

Функция ФорматЗначениеСвойстваСтрокаДляXDTO(ЗначениеСвойстваСтрока)
	
	Возврат Лев(ЗначениеСвойстваСтрока, 1000);
	
КонецФункции

Процедура ДобавитьКатегорииКлассификатораXDTO(КлассификаторXDTO, Категории, ПакетCML, Параметры) Экспорт
	
	КатегорииКлассификатораТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Классификатор"), "Категории");
	КатегорииКлассификатораXDTO = ФабрикаXDTO.Создать(КатегорииКлассификатораТип);
	
	Пока Категории.Следующий() Цикл
		
		Если Категории.Категория.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Категории.Категория = Справочники.КатегорииНоменклатуры.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;

		КатегорияXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Категория"));
		
		Если ЗначениеЗаполнено(Категории.Ид) Тогда
			ДобавитьИДСайтаВВыгрузку(КатегорияXDTO, Категории.Категория, Параметры);
		КонецЕсли;
		КатегорияXDTO.Ид = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Категории.Категория);
		
		ИмяКатегории = Категории.Категория.Наименование;
		КатегорияXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяКатегории);
		
		//Свойства
		СвойстваТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Категория"), "Свойства");
		СвойстваXDTO = ФабрикаXDTO.Создать(СвойстваТип);
		ВыборкаСвойства = Категории.Выбрать();
		Пока ВыборкаСвойства.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаСвойства.Свойство) Тогда
				ИдСвойства = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыборкаСвойства.Свойство);
				СвойстваXDTO.Ид.Добавить(ИдСвойства);
			КонецЕсли;
		КонецЦикла;
		Если СвойстваXDTO.Ид.Количество() > 0 Тогда
			КатегорияXDTO.Свойства = СвойстваXDTO;
		КонецЕсли;
		
		КатегорииКлассификатораXDTO.Категория.Добавить(КатегорияXDTO);
		
	КонецЦикла;
	
	Если КатегорииКлассификатораXDTO.Категория.Количество() > 0 Тогда
		КлассификаторXDTO.Категории = КатегорииКлассификатораXDTO;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИДСайтаВВыгрузку(ОбъектXDTO, ВыгружаемаяСсылка, Параметры)
	
	Если ОбъектXDTO.Свойства().Получить("ИдСайта") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("УзелОбмена") Тогда
		//для обмена через веб-сервис
		Возврат;
	КонецЕсли; 
	
	ИдСайта = СформироватьИдентификаторСайтаОбъекта(ВыгружаемаяСсылка, Параметры.УзелОбмена);
	Если ЗначениеЗаполнено(ИдСайта) Тогда
	
		ОбъектXDTO.ИдСайта = ИдСайта;
		Параметры.СоответствияОбъектовСайта.Вставить(ВыгружаемаяСсылка);
	
	КонецЕсли; 
	
КонецПроцедуры

Функция СформироватьИдентификаторСайтаОбъекта(Объект, УзелОбмена, НЕВыгруженные=Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта КАК ИДСайта
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.СсылкаНаОбъект = &ВыгружаемаяСсылка
	|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъекта";
	Если НЕВыгруженные=Истина Тогда
		Запрос.Текст = Запрос.Текст + " И НЕ СоответствияОбъектовСайта.ОбъектВыгружен";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.УстановитьПараметр("ВыгружаемаяСсылка", Объект);
	Запрос.УстановитьПараметр("ТипОбъекта", Объект.Метаданные().ПолноеИмя());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ИДСайта;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция СсылкаСоответствиеПоИд(ИдОбъекта, ТипОбъекта, УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияОбъектовСайта.СсылкаНаОбъект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы = &УникальныйИдентификаторИнформационнойБазы
	|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъекта
	|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена	
	|	И НЕ СоответствияОбъектовСайта.СсылкаНаОбъект = Неопределено";
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторИнформационнойБазы", ИдОбъекта);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции
