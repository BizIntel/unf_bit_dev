
#Область ОписаниеНастроек

Процедура РазделыНастроек(ДеревоРазделов, знач РежимРаботы) Экспорт
	
	Раздел_Компания = ДеревоРазделов.Строки.Добавить();
	Раздел_Компания.Идентификатор = "Компания";
	Раздел_Компания.Представление = НСтр("ru='Компания'");
	
	Раздел_CRM = ДеревоРазделов.Строки.Добавить();
	Раздел_CRM.Идентификатор = "CRM";
	Раздел_CRM.Представление = НСтр("ru='CRM'");
	
	Раздел_Продажи = ДеревоРазделов.Строки.Добавить();
	Раздел_Продажи.Идентификатор = "Продажи";
	Раздел_Продажи.Представление = НСтр("ru='Продажи'");
	
	Раздел_Закупки = ДеревоРазделов.Строки.Добавить();
	Раздел_Закупки.Идентификатор = "Закупки";
	Раздел_Закупки.Представление = НСтр("ru='Закупки'");
	
	Раздел_Работы = ДеревоРазделов.Строки.Добавить();
	Раздел_Работы.Идентификатор = "Работы";
	Раздел_Работы.Представление = НСтр("ru='Работы'");
	
	Раздел_Производство = ДеревоРазделов.Строки.Добавить();
	Раздел_Производство.Идентификатор = "Производство";
	Раздел_Производство.Представление = НСтр("ru='Производство'");
	
	Раздел_Деньги = ДеревоРазделов.Строки.Добавить();
	Раздел_Деньги.Идентификатор = "Деньги";
	Раздел_Деньги.Представление = НСтр("ru='Деньги'");
	
	Раздел_Зарплата = ДеревоРазделов.Строки.Добавить();
	Раздел_Зарплата.Идентификатор = "Зарплата";
	Раздел_Зарплата.Представление = НСтр("ru='Зарплата'");
	
	Раздел_Персональные = ДеревоРазделов.Строки.Добавить();
	Раздел_Персональные.Идентификатор = "Персональные";
	Раздел_Персональные.Представление = НСтр("ru='Персональные настройки'");
	
	Раздел_ПочтаSMS = Раздел_Персональные.Строки.Добавить();
	Раздел_ПочтаSMS.Идентификатор = "ПочтаSMS";
	Раздел_ПочтаSMS.Представление = НСтр("ru='Почта и SMS'");
	
	Раздел_Телефония = Раздел_Персональные.Строки.Добавить();
	Раздел_Телефония.Идентификатор = "Телефония";
	Раздел_Телефония.Представление = НСтр("ru='Телефония'");
	
	Раздел_ОбменСGoogle = Раздел_Персональные.Строки.Добавить();
	Раздел_ОбменСGoogle.Идентификатор = "ОбменСGoogle";
	Раздел_ОбменСGoogle.Представление = НСтр("ru='Обмен с Google'");
	
	Раздел_ПерсональныеПараметрыПечати = Раздел_Персональные.Строки.Добавить();
	Раздел_ПерсональныеПараметрыПечати.Идентификатор = "ПерсональныеПараметрыПечати";
	Раздел_ПерсональныеПараметрыПечати.Представление = НСтр("ru='Параметры печати'");
	
	Раздел_РаботаСФайлами = Раздел_Персональные.Строки.Добавить();
	Раздел_РаботаСФайлами.Идентификатор = "РаботаСФайлами";
	Раздел_РаботаСФайлами.Представление = НСтр("ru='Работа с файлами'");
	
	Раздел_Прочее = Раздел_Персональные.Строки.Добавить();
	Раздел_Прочее.Идентификатор = "Прочее";
	Раздел_Прочее.Представление = НСтр("ru='Прочее'");
	
	Раздел_Интеграция = ДеревоРазделов.Строки.Добавить();
	Раздел_Интеграция.Идентификатор = "Интеграция";
	Раздел_Интеграция.Представление = НСтр("ru='Интеграция с другими программами'");
	
	Раздел_Программы1СПредприятие = Раздел_Интеграция.Строки.Добавить();
	Раздел_Программы1СПредприятие.Идентификатор = "Программы1СПредприятие";
	Раздел_Программы1СПредприятие.Представление = НСтр("ru='Синхронизация с программами 1С:Предприятие'");
	
	Раздел_СинхронизацияСМобильнымПриложением = Раздел_Интеграция.Строки.Добавить();
	Раздел_СинхронизацияСМобильнымПриложением.Идентификатор = "СинхронизацияСМобильнымПриложением";
	Раздел_СинхронизацияСМобильнымПриложением.Представление = НСтр("ru='Синхронизация с мобильным приложением'");
	
	Раздел_ОбменССайтом = Раздел_Интеграция.Строки.Добавить();
	Раздел_ОбменССайтом.Идентификатор = "ОбменССайтом";
	Раздел_ОбменССайтом.Представление = НСтр("ru='Обмен с сайтом'");
	
	Раздел_ОбменЭлектроннымиДокументами = ДеревоРазделов.Строки.Добавить();
	Раздел_ОбменЭлектроннымиДокументами.Идентификатор = "ОбменЭлектроннымиДокументами";
	Раздел_ОбменЭлектроннымиДокументами.Представление = НСтр("ru='Обмен электронными документами'");
	
	Раздел_ОбменСКонтрагентами = Раздел_ОбменЭлектроннымиДокументами.Строки.Добавить();
	Раздел_ОбменСКонтрагентами.Идентификатор = "ОбменСКонтрагентами";
	Раздел_ОбменСКонтрагентами.Представление = НСтр("ru='Обмен с контрагентами'");
	
	Раздел_ОбменСБанками = Раздел_ОбменЭлектроннымиДокументами.Строки.Добавить();
	Раздел_ОбменСБанками.Идентификатор = "ОбменСБанками";
	Раздел_ОбменСБанками.Представление = НСтр("ru='Обмен с банками'");
	
	Раздел_Администрирование = ДеревоРазделов.Строки.Добавить();
	Раздел_Администрирование.Идентификатор = "Администрирование";
	Раздел_Администрирование.Представление = НСтр("ru='Администрирование'");
	
	Раздел_ОбщиеНастройки = Раздел_Администрирование.Строки.Добавить();
	Раздел_ОбщиеНастройки.Идентификатор = "ОбщиеНастройки";
	Раздел_ОбщиеНастройки.Представление = НСтр("ru='Общие настройки'");
	
	Раздел_ПоддержкаИОбслуживание = Раздел_Администрирование.Строки.Добавить();
	Раздел_ПоддержкаИОбслуживание.Идентификатор = "ПоддержкаИОбслуживание";
	Раздел_ПоддержкаИОбслуживание.Представление = НСтр("ru='Поддержка и обслуживание'");
	
	Раздел_ИнтернетПоддержкаПользователей = Раздел_Администрирование.Строки.Добавить();
	Раздел_ИнтернетПоддержкаПользователей.Идентификатор = "ИнтернетПоддержкаПользователей";
	Раздел_ИнтернетПоддержкаПользователей.Представление = НСтр("ru='Интернет-поддержка пользователей'");
	
	Раздел_ПереходМеждуЛокальнымИСервиснымРежимамиРаботы = Раздел_Администрирование.Строки.Добавить();
	Раздел_ПереходМеждуЛокальнымИСервиснымРежимамиРаботы.Идентификатор = "ПереходМеждуЛокальнымИСервиснымРежимамиРаботы";
	Раздел_ПереходМеждуЛокальнымИСервиснымРежимамиРаботы.Представление = НСтр("ru='Работа в сервисе'");
	
	Раздел_ВерсионированиеОбъектов = Раздел_Администрирование.Строки.Добавить();
	Раздел_ВерсионированиеОбъектов.Идентификатор = "ВерсионированиеОбъектов";
	Раздел_ВерсионированиеОбъектов.Представление = НСтр("ru='Версионирование объектов'");
	
	Раздел_ДополнительныеРеквизиты = Раздел_Администрирование.Строки.Добавить();
	Раздел_ДополнительныеРеквизиты.Идентификатор = "ДополнительныеРеквизиты";
	Раздел_ДополнительныеРеквизиты.Представление = НСтр("ru='Дополнительные реквизиты'");
	
	Раздел_КонтактнаяИнформация = Раздел_Администрирование.Строки.Добавить();
	Раздел_КонтактнаяИнформация.Идентификатор = "КонтактнаяИнформация";
	Раздел_КонтактнаяИнформация.Представление = НСтр("ru='Контактная информация'");
	
	Раздел_НастройкиПользователейИПрав = Раздел_Администрирование.Строки.Добавить();
	Раздел_НастройкиПользователейИПрав.Идентификатор = "НастройкиПользователейИПрав";
	Раздел_НастройкиПользователейИПрав.Представление = НСтр("ru='Настройки пользователей и прав'");
	
	Раздел_ПроверкаКонтрагентов = Раздел_Администрирование.Строки.Добавить();
	Раздел_ПроверкаКонтрагентов.Идентификатор = "ПроверкаКонтрагентов";
	Раздел_ПроверкаКонтрагентов.Представление = НСтр("ru='Проверка контрагентов'");
	
	Раздел_КорректировкаДанных = Раздел_Администрирование.Строки.Добавить();
	Раздел_КорректировкаДанных.Идентификатор = "КорректировкаДанных";
	Раздел_КорректировкаДанных.Представление = НСтр("ru='Корректировка данных'");
	
	Раздел_ПечатныеФормыОтчетыОбработки = Раздел_Администрирование.Строки.Добавить();
	Раздел_ПечатныеФормыОтчетыОбработки.Идентификатор = "ПечатныеФормыОтчетыОбработки";
	Раздел_ПечатныеФормыОтчетыОбработки.Представление = НСтр("ru='Печатные формы, отчеты и обработки'");
	
	Раздел_Органайзер = Раздел_Администрирование.Строки.Добавить();
	Раздел_Органайзер.Идентификатор = "Органайзер";
	Раздел_Органайзер.Представление = НСтр("ru='Почта, SMS, напоминания'");
	
	Раздел_НастройкиРаботыСФайлами = Раздел_Администрирование.Строки.Добавить();
	Раздел_НастройкиРаботыСФайлами.Идентификатор = "НастройкиРаботыСФайлами";
	Раздел_НастройкиРаботыСФайлами.Представление = НСтр("ru='Работа с файлами'");
	
	Раздел_ПодключаемоеОборудование = Раздел_Администрирование.Строки.Добавить();
	Раздел_ПодключаемоеОборудование.Идентификатор = "ПодключаемоеОборудование";
	Раздел_ПодключаемоеОборудование.Представление = НСтр("ru='Подключаемое оборудование'");
	
	Раздел_ЗащитаПерсональныхДанных = Раздел_Администрирование.Строки.Добавить();
	Раздел_ЗащитаПерсональныхДанных.Идентификатор = "ЗащитаПерсональныхДанных";
	Раздел_ЗащитаПерсональныхДанных.Представление = НСтр("ru='Защита персональных данных'");
	
	Раздел_ОценкаПроизводительностиИЦентрМониторинга = Раздел_Администрирование.Строки.Добавить();
	Раздел_ОценкаПроизводительностиИЦентрМониторинга.Идентификатор = "ОценкаПроизводительностиИЦентрМониторинга";
	Раздел_ОценкаПроизводительностиИЦентрМониторинга.Представление = НСтр("ru='Мониторинг и оценка производительности'");
	
	Раздел_РегламентныеОперации = Раздел_Администрирование.Строки.Добавить();
	Раздел_РегламентныеОперации.Идентификатор = "РегламентныеОперации";
	Раздел_РегламентныеОперации.Представление = НСтр("ru='Регламентные операции'");
	
КонецПроцедуры

Процедура НастройкиПрограммы(ТаблицаНастроек, знач РежимРаботы) Экспорт
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьНесколькоОрганизаций",
		"Компания",
		НСтр("ru='Несколько организаций'"),
		НСтр("ru='В программном продукте предусмотрена возможность ведения учета как по одной организации (предпринимателю без образования юридического лица), так и по двум и более. Если учет по нескольким организациям необходим, то нужно установить эту опцию.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"УчетПоКомпании",
		"Компания",
		НСтр("ru='Учет по компании в целом'"),
		НСтр("ru='В программном продукте предусмотрено две схемы учета в случае, когда в учетной системе присутствуют несколько организаций:
		|
		|• Независимая. Учет ведется обособленно по каждой организации, первичные документы оформляются отдельно по каждой организации. Преимущество такого подхода заключается в использовании общих справочников (объектов аналитики), а также общей информационной базы (вся информация хранится в одном месте). 
		|• По компании. Учет ведется агрегировано, по компании в целом, первичные документы оформляются отдельно по каждой организации. Преимущество такого подхода заключается в использовании общих справочников (объектов аналитики), использовании общей информационной базы (вся информация хранится в одном месте), организации учета по компании (если с точки зрения ведения бизнеса все организации представляют собой единое целое).
		|
		|ВАЖНО! 
		|Параметр является ключевым. Если ранее осуществлялся учет по компании, переход к ведению учета по отдельным организациям невозможен. Если ранее ведение учета осуществлялось по нескольким организациям, но без агрегирования учетных данных по компании, переход к учету по компании невозможен.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьНесколькоОрганизаций";
	НоваяНастройка.Зависимости = "ИспользоватьНесколькоОрганизаций";
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "Компания";
	НоваяНастройка.Раздел			= "Компания";
	НоваяНастройка.Представление	= НСтр("ru='Компания'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаОткрытия", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 30);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьНесколькоОрганизаций";
	НоваяНастройка.Зависимости = "ИспользоватьНесколькоОрганизаций,УчетПоКомпании";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетПоНесколькимПодразделениям",
		"Компания",
		НСтр("ru='Несколько подразделений'"),
		НСтр("ru='Включение позволяет указывать подразделение при заполнении документов.
		|
		|Список подразделений находится в разделе Компания – Подразделения.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Приходная накладная,Расходная накладная,Акт выполненных работ,Счет на оплату,Задание на работу,Заказ поставщику,Поступление в кассу,Расход из кассы,Поступление на счет,Расход со счета,Начальные остатки прочее,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности",
		"Компания",
		НСтр("ru='Несколько направлений деятельности'"),
		НСтр("ru='Включение позволяет указывать направление деятельности при заполнении документов.
		|
		|Список направлений деятельности находится в разделе Компания – Все справочники – Направления деятельности.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Авансовый отчет,Корректировка поступления,Начисление зарплаты,Начисление налогов,Перемещение запасов,Поступление в кассу,Приходная накладная,Прочие затраты (расходы),Расход из кассы,Расход со счета,Начальные остатки прочее,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьОтчетность",
		"Компания",
		НСтр("ru='Регламентированная отчетность'"),
		НСтр("ru='Включение позволяет формировать регламентированную отчетность и сдавать в контролирующие органы.
		|
		|Можно сдавать отчетность, если ИП использует упрощенную систему налогообложения (УСН) или единый налог на вмененный доход (ЕНВД).'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Авансовый отчет,Отчет о розничных продажах,Поступление в кассу,Поступление на счет,Расход из кассы,Расход со счета'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов",
		"Компания",
		НСтр("ru='Кассовый метод учета доходов и расходов'"),
		НСтр("ru='Включение позволяет вести учет доходов и расходов кассовым методом (по оплате).
		|
		|Основной метод учета доходов и расходов в программном продукте - метод начисления (по отгрузке). Дополнительно к методу начисления может применяться кассовый метод учета доходов и расходов (по оплате). Учет доходов и расходов кассовым методом ведется в разрезе направлений деятельности, направлений списания и источников поступления денежных средств.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Авансовый отчет,Приходная накладная,Расходная накладная'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьБюджетирование",
		"Компания",
		НСтр("ru='Бюджетирование'"),
		НСтр("ru='Включение позволяет составлять финансовый план фирмы и контролировать его исполнение.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетВнеоборотныхАктивов",
		"Компания",
		НСтр("ru='Имущество'"),
		НСтр("ru='Включение позволяет вести учет имущества фирмы - основных средств и нематериальных активов.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Начальные остатки прочее,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия",
		"Компания",
		НСтр("ru='Планировать загрузку ресурсов предприятия'"),
		НСтр("ru='Включение позволяет планировать загрузку производственных ресурсов предприятия.
		|
		|Ресурсом может являться любой производственный ресурс, загрузку которого целесообразно планировать. Например: оборудование, инвентарь, механизмы, бригады рабочих, отдельные работники.
		|
		|Список ресурсов доступен в разделе Работы - Ресурсы предприятия.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ на производство,Заказ покупателя'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"АртикулНоменклатурыВСодержание",
		"Компания",
		НСтр("ru='Артикул номенклатуры в печатных формах'"),
		НСтр("ru='При печати документов, в полное наименование номенклатуры будет добавляться артикул.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Расходная накладная,Заказ покупателя,Приходная накладная,Акт выполненных работ,Счет на оплату,Заказ поставщику,Номенклатура'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ВестиУчетМаркировкиПродукцииВГИСМ",
		"Компания",
		НСтр("ru='Маркировка товаров контрольными (идентификационными) знаками'"),
		НСтр("ru='Включение позволяет вести учет маркировки продукции в государственной информационной системе маркировки (ГИСМ).
		|А также хранить информацию о маркировке товаров контрольными (идентификационными) знаками (КиЗ) и отслеживать движения маркированных товаров.
		|
		|Для использования возможности, требуется ведение серийных номеров товаров (будет включено автоматически).'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Государственная информационная система маркировки (ГИСМ)'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"СписокСостоянияСобытийИЗаданий",
		"Компания",
		НСтр("ru='Состояния событий'"),
		НСтр("ru=''"),
		"e1cib/list/Справочник.СостоянияСобытий"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"Интеркампани",
		"Компания",
		НСтр("ru='Интеркампани (элиминирование)'"),
		НСтр("ru='Если у вас есть несколько юр.лиц и при анализе отчетов вы хотите исключить межфирменные обороты (произвести элиминирование), а также автоматически формировать ""встречные"" документы между собственными юр.лицами - отметьте эту опцию.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ИнструкцияМобильнаяТелефония",
		"CRM",
		НСтр("ru='Инструкция по использованию мобильной телефонии'"),
		НСтр("ru=''"),
		"e1cib/command/Обработка.МенеджерПодсказок.Команда.Телефония_МобильнаяТелефония"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='CRM,Телефония,Событие'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ДействиеТекущегоЗвонкаНайденногоАбонента";
	НоваяНастройка.Раздел			= "CRM";
	НоваяНастройка.Представление	= НСтр("ru='Действие при обработке звонка от известного абонента'");
	НоваяНастройка.Описание			= НСтр("ru='Настройка определяет поведение программы при обработке звонка (F8) от абонента, которого удалось найти в программе по номеру телефона.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РежимВыбораИзСписка", Истина);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Верх);
	НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("ОткрытьКарточкуАбонента", НСтр("ru='Открыть карточку контрагента'"));
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("ОткрытьСобытие", НСтр("ru='Открыть событие-звонок'"));
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("ОткрыватьСобытиеПриЗакрытииКарточкиАбонента", НСтр("ru='Сперва карточку контрагента, потом событие-звонок'"));
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Событие,CRM,Телефония'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ДействиеТекущегоЗвонкаНеизвестногоАбонента";
	НоваяНастройка.Раздел			= "CRM";
	НоваяНастройка.Представление	= НСтр("ru='Действие при обработке звонка от неизвестного абонента'");
	НоваяНастройка.Описание			= НСтр("ru='Настройка определяет поведение программы при обработке звонка (F8) от абонента, найти которого в программе не удалось.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РежимВыбораИзСписка", Истина);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Верх);
	НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("СозданиеКонтрагента", НСтр("ru='Создание контрагента'"));
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("СозданиеСобытия", НСтр("ru='Создание события-звонка'"));
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("ЗадаватьВопрос", НСтр("ru='Задавать вопрос'"));
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Событие,CRM,Телефония'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НеобрабатываемыеТелефонныеНомера",
		"CRM",
		НСтр("ru='Необрабатываемые телефонные номера'"),
		НСтр("ru='Список номеров телефонов, с которых не принимаются звонки в УНФ'"),
		"e1cib/list/РегистрСведений.НеобрабатываемыеТелефонныеНомера"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='CRM,Телефония,Событие'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ШаблоныСообщений",
		"CRM",
		НСтр("ru='Шаблоны сообщений'"),
		НСтр("ru=''"),
		"e1cib/list/Справочник.ШаблоныСообщений"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Теги = НСтр("ru='CRM,Событие,E-mail,SMS'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ТелефонияВиртуальнаяАТС",
		"CRM",
		НСтр("ru='Телефония. Интеграция с виртуальной АТС '"),
		НСтр("ru='IP-телефония через одного из операторов виртуальных облачных АТС'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ТелефонияОфиснаяАТС",
		"CRM",
		НСтр("ru='Телефония. Интеграция с офисной АТС'"),
		НСтр("ru='Интеграция с уже имеющимся офисным программно-аппаратным комплексом АТС'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"Лиды",
		"CRM",
		НСтр("ru='Учет потенциальных клиентов (лидов)'"),
		НСтр("ru='Раздельный учет контрагентов и потенциальных покупателей (лидов)'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='CRM,Лиды'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ГенераторЛидов",
		"CRM",
		НСтр("ru='Генератор лидов'"),
		НСтр("ru='Получить базу компаний с отбором по видам бизнеса и географическому расположению в один клик!'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='CRM,Лиды'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИнтеграцияМассовыеРассылки",
		"CRM",
		НСтр("ru='Интеграция с сервисами массовых рассылок '"),
		НСтр("ru='Например, E-mail - Unisender, MailChimp.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица,Массовая рассылка,Рассылки'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"Синхронизации2",
		"CRM",
		НСтр("ru='Синхронизации Outlook, iCal, CalDav и пр.'"),
		НСтр("ru='В данный момент реализована синхронизация с контактной книгой и календарями Google. Отметьте этот пункт, если вы хотите, чтобы УНФ синхронизировалось с контактной книгой и календарем вашего iPhone.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"СинхронизацияCRM",
		"CRM",
		НСтр("ru='Синхронизация с CRM системами (уточните с какими)'"),
		НСтр("ru='Если вы используете CRM систему и хотите синхронизировать данные с 1С:УНФ – поставьте здесь флажок и уточните название CRM системы.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='CRM,Синхронизация данных'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи",
		"Продажи",
		НСтр("ru='Скидки и наценки в продажах'"),
		НСтр("ru='Включение позволяет указывать общую сумму скидки/наценки на документ продажи в целом или отдельно для каждой позиции. А также вести расширенный учет применяемых в фирме скидок/наценок.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Скидка,Договоры,Акт выполненных работ,Заказ покупателя,Отчет о переработке,Отчет о розничных продажах,Расходная накладная,Счет на оплату,Чек ККМ,Чек ККМ на возврат,Документы по продажам,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьДисконтныеКарты",
		"Продажи",
		НСтр("ru='Дисконтные карты'"),
		НСтр("ru='Включение позволяет вести учет дисконтных карт и указывать их при оформлении документов продаж.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи";
	НоваяНастройка.Теги = НСтр("ru='Отчет о розничных продажах,Документы по продажам,Скидка,Заказ покупателя,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки",
		"Продажи",
		НСтр("ru='Автоматические скидки'"),
		НСтр("ru='Включение позволяет задавать автоматические скидки и наценки, настраивать условия их предоставления. Скидки и наценки применяются при оформлении документов продаж.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Скидка,Акт выполненных работ,Заказ покупателя,Отчет о переработке,Отчет о розничных продажах,Расходная накладная,Счет на оплату,Чек ККМ,Чек ККМ на возврат,Документы по продажам,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПередачаТоваровНаКомиссию",
		"Продажи",
		НСтр("ru='Передача товаров на комиссию'"),
		НСтр("ru='Включение позволяет передавать собственные товары на комиссию стороннему контрагенту.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Документы по продажам,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПриемТоваровНаКомиссию",
		"Продажи",
		НСтр("ru='Прием товаров на комиссию'"),
		НСтр("ru='Включение позволяет вести учет принятых на комиссию товаров от стороннего контрагента.
		|
		|ВАЖНО! 
		|Для отличия собственных запасов от запасов, принятых на комиссию, используется дополнительный разрез учета - ""Партии номенклатуры"". Поэтому для использования данной возможности необходимо включить опцию ""Партии номенклатуры"" в разделе ""Закупки"".
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПартии";
	НоваяНастройка.Теги = НСтр("ru='Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьКорректировкиРеализаций",
		"Продажи",
		НСтр("ru='Корректировки реализаций'"),
		НСтр("ru='Включение позволяет оформлять отдельными документами корректировки реализации товаров и корректировочные счета-фактуры.
		|
		|Корректировочные документы позволяют изменить данные, находящиеся в закрытом и запрещенном для редактирования периоде.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Расходная накладная,Заказ покупателя,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьПланПродаж",
		"Продажи",
		НСтр("ru='Планирование продаж'"),
		НСтр("ru='Возможность позволяет вводить документ ""План продаж"" с детализацией по номенклатуре и характеристикам, а также заказам покупателей.
		|
		|""План продаж"" существенно облегчает выполнение план-фактного анализа продаж, который является неотъемлемой частью процесса по управлению продажами.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Счет на оплату,Документы по продажам'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьСверкиВзаиморасчетов",
		"Продажи",
		НСтр("ru='Сверки взаиморасчетов'"),
		НСтр("ru='Включение позволяет регистрировать и контролировать сверки взаиморасчетов с контрагентами.
		|
		|Сверка осуществляется с помощью документа «Сверка взаиморасчетов», доступного в разделах:
		|• Продажи – Расчеты с покупателями – Сверки взаиморасчетов;
		|• Закупки – Расчеты с поставщиками - Сверки взаиморасчетов.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Расход со счета,Поступление на счет,Поступление в кассу,Расход из кассы,Контрагенты,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьКорректировкиДолга",
		"Продажи",
		НСтр("ru='Корректировки долга'"),
		НСтр("ru='Включение позволяет проводить взаимозачеты, переуступки и корректировки долга с покупателями и поставщиками.
		|
		|Данные операции осуществляются с помощью документа «Корректировки долга», доступного в разделах:
		|• Продажи – Расчеты с покупателями – Корректировки долга;
		|• Закупки – Расчеты с поставщиками – Корректировки долга.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Расход со счета,Поступление на счет,Поступление в кассу,Расход из кассы,Контрагенты,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетПоПроектам",
		"Продажи",
		НСтр("ru='Проекты'"),
		НСтр("ru='Включение позволяет объединять несколько заказов покупателей в один проект.
		|
		|При указании проекта в заказе покупателя документ, фактически, становится спецификацией к договору с заказчиком и определяет список объектов поставки по договору (перечень товаров, продукции, работ, услуг), цену, стоимость и сроки поставки. Таким образом, учитывая затраты, доходы и расходы в разрезе заказов покупателей, можно получить агрегированную информацию о затратах, доходах и расходах и по проекту в целом.
		|
		|ПРИМЕР. 
		|Компания ""Ветерок"" выиграла тендер на разработку и установку системы вентиляции и кондиционирования торгового зала в одном из супермаркетов. С заказчиком было заключено два договора: договор подряда на проектирование и монтаж системы кондиционирования и договор на поставку оборудования. Для компании важно учитывать затраты, доходы и расходы как в разрезе заказов и видов деятельности, так и в целом по конкретному проекту. Для этого в программе открыли новый проект ""Торговый зал"", а так же два заказа: один на поставку оборудования, второй - на выполнение работ. Учитывая затраты, доходы и расход по этим заказам, мы можем получить информацию и в целом по проекту ""Торговый зал"".'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Событие,Документы по продажам'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьПечатьЭтикетокИЦенников",
		"Продажи",
		НСтр("ru='Печать этикеток и ценников'"),
		НСтр("ru='Включение позволяет печатать этикетки и ценники на товары.
		|
		|Печать этикеток и ценников осуществляется по настраиваемым шаблонам, доступным в разделе Продажи - Сервис - Печать этикеток и ценников.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Счет на оплату,Номенклатура'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьРемонты",
		"Продажи",
		НСтр("ru='Приемка и передача в ремонт'"),
		НСтр("ru='Включение позволяет принимать проданные товары от покупателей по претензии, учитывать их ремонт или передачу в сервисный центр для ремонта.
		|
		|ВАЖНО!
		|Для идентификации возвращенных товаров в ремонте используются серийные номера, поэтому для использования данной возможности рекомендуется включить опцию ""Серийные номера"" в разделе ""Закупки"".
		|
		|Учет запасов в ремонте ведется отдельно от товаров в продаже.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "СрокОплатыПокупателя";
	НоваяНастройка.Раздел			= "Продажи";
	НоваяНастройка.Представление	= НСтр("ru='Поступление оплаты от покупателя (в сутках)'");
	НоваяНастройка.Описание			= НСтр("ru='Срок отсрочки платежа от покупателя. Указывается в сутках. 
		|
		|Данное значение устанавливается при создании нового договора с контрагентом. А также используется для определения даты оплаты при планировании платежей.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Число");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаРегулирования", Истина);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 6);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Счет на оплату,Договоры,Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьВидыЗаказовПокупателей",
		"Продажи",
		НСтр("ru='Виды заказов покупателей'"),
		НСтр("ru='Включение позволяет создавать несколько наборов состояний заказов и фиксировать их взаимный порядок. Набор состояний и их взаимный порядок указываются в виде заказа. Вид заказ выбирается непосредственно в документе Заказ покупателя.
		|Использование видов заказов позволяет вести индивидуальные воронки продаж.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Бизнес-процесс,Воронка продаж'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьСправочникВидыЗаказовПокупателей",
		"Продажи",
		НСтр("ru='Список видов заказов покупателей'"),
		НСтр("ru=''"),
		"e1cib/list/Справочник.ВидыЗаказовПокупателей"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ИспользоватьВидыЗаказовПокупателей";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетРозничныхПродаж",
		"Продажи",
		НСтр("ru='Розничные продажи'"),
		НСтр("ru='Включение позволяет вести учет продаж в рознице.
		|
		|Работа с розничными продажами осуществляется в разделе Продажи - Розничные продажи.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"АрхивироватьЧекиККМПриЗакрытииКассовойСмены",
		"Продажи",
		НСтр("ru='Архивировать чеки ККМ'"),
		НСтр("ru='При включенной опции, все движения, сформированные чеками ККМ, будут переноситься в отчет о розничных продажах при закрытии кассовой смены.
		|
		|Данная возможность позволяет значительно уменьшить объем данных при большом количестве розничных продаж за день.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены",
		"Продажи",
		НСтр("ru='Удалять непробитые чеки ККМ'"),
		НСтр("ru='При включенной опции, все не пробитые на фискальном регистраторе чеки будут удаляться при закрытии кассовой смены.
		|
		|Данная возможность позволяет значительно уменьшить объем данных при большом количестве непробитых чеков за день.
		|
		|Если флаг сброшен и используется резервирование запасов, резерв товаров в непробитых чеках сохраняется при закрытии кассовой смены. Отмену резерва требуется производить вручную в каждом отложенном чеке.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"КонтролироватьОстаткиПриПробитииЧековККМ",
		"Продажи",
		НСтр("ru='Контролировать остатки при пробитии чеков ККМ и проведении отчетов'"),
		НСтр("ru='При пробитии чеков ККМ и проведении отчетов о розничных продажах будет осуществляться контроль остатков.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек",
		"Продажи",
		НСтр("ru='Заказы покупателей в розничной торговле'"),
		НСтр("ru='Опция позволяет оформлять чеки ККМ на основании заказов покупателей. Опция доступна для изменения, если сброшен флаг ""Архивировать чеки ККМ""!'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Отчет о розничных продажах,Чек ККМ,Чек ККМ на возврат,Документы по продажам'");
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "ОтправкаЭлектронныхЧековПослеПробитияЧека";
		НоваяНастройка.Раздел			= "Продажи";
		НоваяНастройка.Представление	= НСтр("ru='54-ФЗ: отправка электронных чеков'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Число");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
		НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(0, НСтр("ru='После пробития чеков'"));
		НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(1, НСтр("ru='По расписанию'"));
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
		НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
		НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
		НоваяНастройка.Теги = НСтр("ru='54 ФЗ'");
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию",
			"Продажи",
			НСтр("ru='Автоматически отправлять электронные чеки по расписанию'"),
			НСтр("ru=''")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
		НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
		НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж,ОтправкаЭлектронныхЧековПослеПробитияЧека";
		НоваяНастройка.Теги = НСтр("ru='54 ФЗ'");
	КонецЕсли;
	
	Если РежимРаботы.МодельСервиса И Константы.ИспользоватьОбменССерверомШтрихМ.Получить()  Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ИспользоватьОбменСКассойMinikassir",
			"Продажи",
			НСтр("ru='Обмен с кассой ШТРИХ-MPAY-Ф'"),
			НСтр("ru=''")
		);
		НоваяНастройка.ДобавлятьОтступ = Истина;
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
		НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "РассылкаЭлектронныхЧековРасписание";
		НоваяНастройка.Раздел			= "Продажи";
		НоваяНастройка.Представление	= НСтр("ru='Расписание'");
		НоваяНастройка.ТипЭлемента		= Тип("ДекорацияФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидДекорацииФормы.Надпись);
		НоваяНастройка.СвойстваЭлемента.Вставить("Гиперссылка", Истина);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
		НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
		НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж,ОтправкаЭлектронныхЧековПослеПробитияЧека,АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию";
		НоваяНастройка.Теги = НСтр("ru='54 ФЗ'");
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьОчередьЭлектронныхЧеков",
		"Продажи",
		НСтр("ru='Открыть очередь электронных чеков'"),
		НСтр("ru=''"),
		"e1cib/list/Справочник.ОчередьЭлектронныхЧековКОтправке"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Теги = НСтр("ru='54 ФЗ'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ТиповыеСхемыУчета_Розница",
		"Продажи",
		НСтр("ru='Типовые схемы учета'"),
		НСтр("ru=''"),
		"e1cib/command/Обработка.МенеджерПодсказок.Команда.ТиповыеСхемыУчета_Розница"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетРозничныхПродаж";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьБиллинг",
		"Продажи",
		НСтр("ru='Биллинг и работа с регулярными услугами'"),
		НСтр("ru='Вам станут доступны тарифные планы, а так же возможность заключать договоры обслуживания и автоматически выставлять по ним Счета на оплату.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"БиллингВестиУчетРасходовПоДоговорамОбслуживания",
		"Продажи",
		НСтр("ru='Вести учет расходов в разрезе договоров обслуживания'"),
		НСтр("ru='На каждый договор обслуживания, для накопления расходов, мы будем автоматически создавать уникальное направление деятельности.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьБиллинг";
	НоваяНастройка.Зависимости = "ИспользоватьБиллинг";
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "БиллингГоловноеНаправлениеДеятельности";
	НоваяНастройка.Раздел			= "Продажи";
	НоваяНастройка.Представление	= НСтр("ru='Головное направление деятельности'");
	НоваяНастройка.Описание			= НСтр("ru='Элемент, в иерархию которого будут добавляться создаваемые автоматически направления деятельности по договорам обслуживания.
		|Если не выбран — будут добавляться в общий список.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 31);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаОткрытия", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Верх);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьБиллинг";
	НоваяНастройка.Зависимости = "БиллингВестиУчетРасходовПоДоговорамОбслуживания";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ВестиСведенияДляДекларацийПоАлкогольнойПродукции",
		"Продажи",
		НСтр("ru='Алкогольная продукция'"),
		НСтр("ru='Включение позволяет обмениваться с ЕГАИС и регистрировать сведения, необходимые для заполнения журнала учета объема розничной продажи алкогольной продукции.
		|
		|Для включения данной возможности, необходимо включить ""Розничные продажи"".'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж";
	НоваяНастройка.Теги = НСтр("ru='Расходная накладная,Номенклатура,Категории номенклатуры,Виды алкогольной продукции,Лицензии поставщиков алкогольной продукции'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ДатаНачалаРегистрацииРозничныхПродажВЕГАИС";
	НоваяНастройка.Раздел			= "Продажи";
	НоваяНастройка.Представление	= НСтр("ru='Дата начала регистрации продаж в ЕГАИС'");
	НоваяНастройка.Описание			= НСтр("ru='Дата начала регистрации розничных продаж в ЕГАИС 
		|определяется законодательством'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Дата");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("ФорматРедактирования", "ДФ=dd.MM.yyyy");
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 10);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж,ВестиСведенияДляДекларацийПоАлкогольнойПродукции";
	НоваяНастройка.Теги = НСтр("ru='Расходная накладная,Номенклатура,Категории номенклатуры,Виды алкогольной продукции,Лицензии поставщиков алкогольной продукции'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС",
		"Продажи",
		НСтр("ru='Выгружать продажи немаркируемой продукции в ЕГАИС'"),
		НСтр("ru=''")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции";
	НоваяНастройка.Зависимости = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкиОбменаЕГАИС",
		"Продажи",
		НСтр("ru='Настройки обмена ЕГАИС'"),
		НСтр("ru='Настройки используемых способов подключения к ЕГАИС в разрезе магазинов и организаций.'"),
		"e1cib/list/РегистрСведений.НастройкиОбменаЕГАИС"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетРозничныхПродаж,ВестиСведенияДляДекларацийПоАлкогольнойПродукции";
	НоваяНастройка.Теги = НСтр("ru='Расходная накладная,Номенклатура,Категории номенклатуры,Виды алкогольной продукции,Лицензии поставщиков алкогольной продукции'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ПодарочныеСертификаты",
		"Продажи",
		НСтр("ru='Подарочные сертификаты'"),
		НСтр("ru='Если вы используете или хотите использовать подарочные сертификаты - поставьте здесь флажок и опишите ваш сценарий использования.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Счет на оплату,Документы по продажам'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"Бонусы",
		"Продажи",
		НСтр("ru='Бонусная система скидок'"),
		НСтр("ru='Если вы используете или хотите использовать бонусную систему лояльности - поставьте здесь флажок и опишите ваш сценарий использования.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Скидка,Заказ покупателя,Счет на оплату,Контрагенты,Документы по продажам'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"Купоны",
		"Продажи",
		НСтр("ru='Скидочные купоны'"),
		НСтр("ru='Если вы используете или хотите использовать купоны на скидку - поставьте здесь флажок и опишите ваш сценарий использования.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Счет на оплату,Контрагенты,Документы по продажам'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"НаборыИКомплекты",
		"Продажи",
		НСтр("ru='Наборы и комплекты'"),
		НСтр("ru='Дайте нам знать, если продаете товары наборами или комплектами, и мы реализуем эту возможность в программе.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Счет на оплату,Расходная накладная,Продажи'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ВесовойУчет",
		"Продажи",
		НСтр("ru='Весовой учет'"),
		НСтр("ru='Работа с весовым товаром. Когда при продаже товар необходимо взвесить и сгенерировать штрих-код с весом. При считывании сканером такого штрих-кода, цена рассчитается в соответствии с весом.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Вес'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"EDI",
		"Продажи",
		НСтр("ru='Обмен с EDI-провайдерами'"),
		НСтр("ru='Поставляете свои товары в розничные сети, которые работают через EDI-провайдеров типа Корус, Exite, CISLink, EDIWeb, Comarch или других? Отправьте нам название вашего провайдера - мы постараемся сделать синхронизацию с ним.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетПоНесколькимСкладам",
		"Закупки",
		НСтр("ru='Несколько складов'"),
		НСтр("ru='Включение позволяет вести учет в разрезе складов. Указание склада будет требоваться во всех складских документах.
		|
		|Задать имеющиеся склады можно в разделе Компания – Склады.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Авансовый отчет,Дополнительные расходы,Заказ покупателя,Заказ поставщику,Приходная накладная,Расходная накладная,Корректировка поступления,Корректировка реализации,Документы по складу,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения",
		"Закупки",
		НСтр("ru='Несколько единиц измерения'"),
		НСтр("ru='Включение позволяет учитывать номенклатуру в различных единицах измерения. Например в штуках, блоках, коробках или килограммах.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Приходная накладная,Расходная накладная,Заказ поставщику,Номенклатура,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьХарактеристики",
		"Закупки",
		НСтр("ru='Характеристики номенклатуры'"),
		НСтр("ru='Включение позволяет вести учет номенклатуры в разрезе дополнительных характеристик.
		|
		|Характеристики – это отдельные варианты номенклатуры. Они представляют собой комбинацию конкретных значений по указанным свойствам.
		|
		|Использование характеристик позволяет избежать создания большого количества схожих номенклатур.
		|
		|ПРИМЕР.
		|Фирма реализует покупателям товары народного потребления: одежду, обувь, бытовую химию. Каждая модель одежды или обуви характеризуется размером и цветом, а у бытовой химии таких свойств нет. Зато могут быть другие свойства: тип упаковки (пластмасса, стекло) и емкость упаковки (в мл.). В этом случае, в программе будет номенклатура ""Футболка мужская"", характеристика ""50, желтая"", свойства: размер = 50, цвет = желтая.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Категории номенклатуры,Номенклатура,Характеристики,Акт выполненных работ,Задание на работу,Заказ на производство,Заказ покупателя,Заказ поставщику,Перемещение запасов,Приходная накладная,Расходная накладная,Счет на оплату,Счет на оплату (полученный),Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьПартии",
		"Закупки",
		НСтр("ru='Партии номенклатуры'"),
		НСтр("ru='Включение позволяет учитывать запасы в разрезе конкретных партий номенклатуры.
		|
		|Партионный учет предполагает, что каждая партия одного и того же запаса может учитываться на складе отдельно. Ведение партионного учета для запасов, принятых на комиссию, в переработку или на ответственное хранение от стороннего контрагента является обязательным. Для собственных запасов определяется спецификой компании.
		|
		|ВАЖНО!
		|Партия номенклатуры не является аналогом документа оприходования запасов и не используется для определения стоимости списания товарно-материальных запасов по методу FIFO.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Авансовый отчет,Дополнительные расходы,Заказ покупателя,Инвентаризация запасов,Корректировка поступления,Корректировка реализации,Оприходование запасов,Отчет комиссионера,Отчет комитенту,Отчет о переработке,Отчет о розничных продажах,Отчет переработчика,Перемещение запасов,Перемещение по ячейкам,Переоценка в рознице (суммовой учет),Принятие к учету,Приходная накладная,Приходный ордер,Распределение затрат,Расходная накладная,Расходный ордер,Резервирование запасов,Сдельный наряд,Списание запасов,Счет на оплату,Счет на оплату (полученный),Счет-фактура,Счет на оплату (полученный),Чек ККМ,Чек ККМ на возврат,Документы по закупкам,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьСерийныеНомера",
		"Закупки",
		НСтр("ru='Серийные номера, гарантийные сроки'"),
		НСтр("ru='Включение позволяет использовать серийные номера товаров, как справочно (для контроля гарантийного срока после продажи), так и для учета остатков в разрезе серийных номеров.
		|Серийный номер - уникальный для каждой единицы товара.
		|
		|Можно использовать 2 режима серийных номеров:
		|Справочно: серийные номера можно указывать при необходимости. Целесообразно указывать серийный номер при продаже товара, чтобы зафиксировать факт продажи и начало гарантийного срока.
		|Учет остатков: серийные номера обязательны к заполнению во всех документах движения товаров. Ведется контроль остатков в разрезе серийных номеров.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"КонтрольОстатковСерийныхНомеров",
		"Закупки",
		НСтр("ru='Контроль остатков серийных номеров'"),
		НСтр("ru='Контроль остатков запасов с учетом серийных номеров. 
		|
		|Если контроль остатков ОТКЛЮЧЕН:
		|Серийные номера в документах можно указывать произвольно. Достаточно указывать серийные номера в документах продажи товара, чтобы зафиксировать начало гарантийного срока.
		|
		|Если контроль остатков ВКЛЮЧЕН:
		|Серийные номера нужно обязательно вводить во всех документах. Можно посмотреть, какие серийные номера есть в наличии, в момент подбора товаров или в отчетах.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе. Необходимо провести инвентаризацию запасов с учетом серийных номеров.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьСерийныеНомера";
	НоваяНастройка.Зависимости = "ИспользоватьСерийныеНомера";
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетГТД",
		"Закупки",
		НСтр("ru='Грузовые таможенные декларации (ГТД)'"),
		НСтр("ru='Включение позволяет учитывать остатки в разрезе ГТД.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Приходная накладная,Расходная накладная,Документы по закупкам,Начальные остатки товаров,Ввод начальных остатков,Номенклатура'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"КонтролироватьОстаткиПоНомерамГТД",
		"Закупки",
		НСтр("ru='Контроль остатков по номерам ГТД'"),
		НСтр("ru='Контроль остатков запасов в разрезе ГТД. '")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияУчетГТД";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияУчетГТД";
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки",
		"Закупки",
		НСтр("ru='Скидки и наценки в закупках'"),
		НСтр("ru='Включение позволяет указывать скидку/наценку на отдельные позиции в документах закупок. А также вести расширенный учет применяемых в фирме скидок/наценок.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ поставщику,Приходная накладная,Счет на оплату (полученный),Договоры,Документы по закупкам,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетЦенКонтрагентов",
		"Закупки",
		НСтр("ru='Цены контрагентов'"),
		НСтр("ru='Включение позволяет фиксировать цены поставщиков (входящие цены) при оформлении приходных накладных.
		|
		|В программе существует возможность регистрировать входящие цены автоматически. Для этого необходимо заполнить поле ""Вид цен контрагента"" в договоре контрагента.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Приходная накладная,Договоры,Контрагенты,Документы по закупкам'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияРезервированиеЗапасов",
		"Закупки",
		НСтр("ru='Резервирование запасов'"),
		НСтр("ru='Включение позволяет резервировать запасы на складах, учитывать материальные и другие прямые затраты в производстве по заказам покупателей, размещать заказы покупателей в открытых заказах поставщикам и заказах на производство (сборку, разборку).
		|
		|ВАЖНО! Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Авансовый отчет,Дополнительные расходы,Заказ на производство,Заказ покупателя,Заказ поставщику,Корректировка реализации,Начисление зарплаты,Отчет о переработке,Отчет переработчика,Перемещение запасов,Приходная накладная,Прочие затраты (расходы),Распределение затрат,Расходная накладная,Сдельный наряд,Производство,Документы по закупкам,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПриемЗапасовНаОтветхранение",
		"Закупки",
		НСтр("ru='Прием запасов на ответственное хранение'"),
		НСтр("ru='Включение позволяет вести прием запасов на ответственное хранение от сторонних контрагентов.
		|
		|ВАЖНО!
		|Для отличия собственных запасов от запасов, принятых на ответственное хранение, используется дополнительный разрез учета - ""Партии номенклатуры"". Поэтому для использования данной возможности необходимо включить опцию ""Партии номенклатуры"" в разделе ""Закупки"".
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПартии";
	НоваяНастройка.Теги = НСтр("ru='Приходная накладная,Номенклатура,Документы по закупкам,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПередачаСырьяВПереработку",
		"Закупки",
		НСтр("ru='Передача сырья и материалов в переработку'"),
		НСтр("ru='Включение позволяет учитывать передачу собственного сырья и материалов сторонним контрагентам для изготовления продукции или переработки.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Заказ поставщику,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПередачаЗапасовНаОтветхранение",
		"Закупки",
		НСтр("ru='Передача запасов на ответственное хранение'"),
		НСтр("ru='Опция определяет возможность передачи собственных запасов на ответственное хранение сторонним контрагентам.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьКорректировкиПоступлений",
		"Закупки",
		НСтр("ru='Корректировки поступлений'"),
		НСтр("ru='Включение позволяет оформлять отдельными документами корректировки поступления товаров и корректировочные счета-фактуры.
		|
		|Корректировочные документы позволяют изменить данные, находящиеся в закрытом и запрещенном для редактирования периоде.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Приходная накладная,Заказ поставщику,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьОрдерныйСклад",
		"Закупки",
		НСтр("ru='Ордерные склады'"),
		НСтр("ru='Включение позволяет разделить учет запасов на складской и финансовый.
		|
		|Механизм используется при необходимости разделить учет запасов на складе и учет запасов в управленческом контуре.
		|
		|В этом случае, для учета запасов на складе используются приходные и расходные складские ордера, а также документ для отражения перемещения запасов внутри структуры склада (например, для распределения поступивших товаров по полкам и ячейкам или комплектации заказа для отгрузки).
		|
		|Для учета запасов в управленческом контуре используются финансовые документы - расходные накладные, перемещения запасов и т.д.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Приходная накладная,Расходная накладная,Заказ поставщику,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияУчетПоЯчейкам",
		"Закупки",
		НСтр("ru='Ячеистые склады'"),
		НСтр("ru='Включение позволяет детализировать место хранения номенклатуры до складской ячейки.
		|
		|Перечень ячеек определяется для каждого склада отдельно.
		|Вместе с этой опцией будет включен учет по нескольким складам.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Авансовый отчет,Заказ покупателя,Заказ поставщику,Корректировка поступления,Корректировка реализации,Оприходование запасов,Перемещение запасов,Приходная накладная,Расходная накладная,Производство,Документы по складу,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьСервисРасчетПотребностей",
		"Закупки",
		НСтр("ru='Расчет потребностей (планирование)'"),
		НСтр("ru='Включение позволяет рассчитывать потребности фирмы (дефицит) в тех или иных товарах.
		|
		|Расчет производится на основании:
		|• прогнозируемых остатков товаров;
		|• ожидаемых поступлений и потреблений;
		|• минимального и максимального уровня запасов;
		|• детализации до заказов – источников поступления и потребления товаров.
		|
		|Сервис доступен в разделах:
		|• Закупки – Планирование – Расчет потребностей;
		|• Производство - Планирование - Расчет потребностей.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ поставщику'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьСервисЗакупкаТоваров",
		"Закупки",
		НСтр("ru='Закупка товаров (планирование)'"),
		НСтр("ru='Включение позволяет формировать заказы поставщикам автоматически, рассчитывая потребности товаров на основании статистики продаж за прошлый период.
		|
		|Сервис доступен в разделе Закупки – Планирование – Закупка товаров.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ поставщику,Номенклатура,Документы по закупкам'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "СрокОплатыПоставщику";
	НоваяНастройка.Раздел			= "Закупки";
	НоваяНастройка.Представление	= НСтр("ru='Срок оплаты поставщику (в сутках)'");
	НоваяНастройка.Описание			= НСтр("ru='Срок отсрочки платежа поставщику. Указывается в сутках. 
		|
		|Данное значение устанавливается при создании нового договора с контрагентом. А также используется для определения даты оплаты при планировании платежей.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Число");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаРегулирования", Истина);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 6);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ поставщику,Договоры,Контрагенты,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"СрокиГодности",
		"Закупки",
		НСтр("ru='Сроки годности'"),
		НСтр("ru='Мы предполагаем реализацию учета по срокам годности товаров. Если вам это нужно - поставьте флаг и опишите ваш сценарий работы с товарами, которые имеют ограниченный срок годности. Дополнительная информация о том, как это происходит именно у вас - поможет нам сделать именно так, как нужно вам!'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Документы по закупкам'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"Аналоги",
		"Закупки",
		НСтр("ru='Аналоги номенклатуры'"),
		НСтр("ru='Удобный учет, подбор и поиск номенклатуры с аналогичными свойствами'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Аналоги номенклатуры,Подбор'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьПодсистемуРаботы",
		"Работы",
		НСтр("ru='Выполнение работ и оказание услуг'"),
		НСтр("ru='Включает раздел ""Работы"" для выполнения работ и оказания услуг.
		|
		|Возможности доступны в документе ""Заказ-наряд"" в разделе ""Работы"".'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Акт выполненных работ,Задание на работу,Номенклатура,Заказ покупателя'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьВидыЗаказНарядов",
		"Работы",
		НСтр("ru='Виды заказ-нарядов'"),
		НСтр("ru='Включение позволяет создавать несколько наборов состояний заказов и фиксировать их взаимный порядок. Набор состояний и их взаимный порядок указываются в виде заказа. Вид заказ выбирается непосредственно в документе Заказ-наряд.
		|Использование видов заказов позволяет вести индивидуальные воронки продаж.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы";
	НоваяНастройка.Теги = НСтр("ru='Заказ-наряд,Бизнес-процесс,Воронка продаж'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьСправочникВидыЗаказНарядов",
		"Работы",
		НСтр("ru='Список видов заказ-нарядов'"),
		НСтр("ru=''"),
		"e1cib/list/Справочник.ВидыЗаказНарядов"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы";
	НоваяНастройка.Зависимости = "ИспользоватьВидыЗаказНарядов";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьРемонты2",
		"Работы",
		НСтр("ru='Приемка и передача в ремонт'"),
		НСтр("ru='Включение позволяет принимать проданные товары от покупателей по претензии, учитывать их ремонт или передачу в сервисный центр для ремонта.
		|
		|ВАЖНО!
		|Для идентификации возвращенных товаров в ремонте используются серийные номера, поэтому для использования данной возможности рекомендуется включить опцию ""Серийные номера"" в разделе ""Закупки"".
		|
		|Учет запасов в ремонте ведется отдельно от товаров в продаже.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьПодсистемуПроизводство",
		"Производство",
		НСтр("ru='Планирование и учет производственной деятельности'"),
		НСтр("ru='Включает раздел ""Производство"" для учета выпуска продукции, производственного планирования и контроля.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Заказ покупателя,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьТехоперации",
		"Производство",
		НСтр("ru='Технологические операции'"),
		НСтр("ru='Включение позволяет:
		|• использовать технологические операции в спецификациях изготовления изделий и сдельных нарядов;
		|• начислять зарплату сотрудникам по сдельным нарядам; 
		|• вводить номенклатуру с типом ""Операция"".
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство";
	НоваяНастройка.Теги = НСтр("ru='Номенклатура'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПереработкаДавальческогоСырья",
		"Производство",
		НСтр("ru='Переработка давальческого сырья'"),
		НСтр("ru='Включение позволяет вести прием запасов на переработку от сторонних контрагентов.
		|
		|ВАЖНО!
		|Для отличия собственных запасов от запасов, принятых на переработку, используется дополнительный разрез учета - ""Партии номенклатуры"". Поэтому для использования данной возможности необходимо включить опцию ""Партии номенклатуры"" в разделе ""Закупки"".
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство,ФункциональнаяОпцияИспользоватьПартии";
	НоваяНастройка.Теги = НСтр("ru='Номенклатура,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"УчетМерныхИзделий",
		"Производство",
		НСтр("ru='Учет мерных изделий'"),
		НСтр("ru='Используется, когда необходимо вести кусковой учет одного и того же товара разных размеров. Чтобы в отчетах отображался итог в метрах погонных/метрах квадратных/метрах кубических, но при этом было понятно из кусков каких размеров этот остаток образовался.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяУчетВалютныхОпераций",
		"Деньги",
		НСтр("ru='Несколько валют'"),
		НСтр("ru='Включение позволяет указывать различные валюты при заполнении документов.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Банковские счета,Договоры,Авансовый отчет,Акт выполненных работ,Заказ покупателя,Заказ поставщику,Корректировка поступления,Корректировка реализации,Операция по платежным картам,Расход со счета,Поступление на счет,Поступление в кассу,Расход из кассы,Приходная накладная,Расходная накладная,Счет на оплату,Документы по банку,Документы по кассе,Начальные остатки денег,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "НациональнаяВалюта";
	НоваяНастройка.Раздел			= "Деньги";
	НоваяНастройка.Представление	= НСтр("ru='Национальная валюта'");
	НоваяНастройка.Описание			= НСтр("ru='Национальная валюта вашей страны.
		|
		|Например, для России национальной валютой являются рубли.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("СправочникСсылка.Валюты");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 20);
	НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаОткрытия", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("БыстрыйВыбор", Ложь);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ФункциональнаяУчетВалютныхОпераций";
	НоваяНастройка.Теги = НСтр("ru='Платежное поручение,Банковские счета,Документы по банку,Документы по кассе,Начальные остатки денег,Начальные остатки прочее,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ВалютаУчета";
	НоваяНастройка.Раздел			= "Деньги";
	НоваяНастройка.Представление	= НСтр("ru='Валюта учета'");
	НоваяНастройка.Описание			= НСтр("ru='Валюта учета является основной валютой в программе. 
		|
		|Все денежные операции отражаются в двух валютах:
		|• в валюте указанной в документе;
		|• в валюте учета.
		|
		|ВАЖНО!
		|Изменить валюту учета нельзя после начала работы в программе.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("СправочникСсылка.Валюты");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 20);
	НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаОткрытия", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("БыстрыйВыбор", Ложь);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ФункциональнаяУчетВалютныхОпераций";
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Расход со счета,Поступление на счет,Поступление в кассу,Расход из кассы,Приходная накладная,Расходная накладная,Акт выполненных работ,Платежное поручение,Счет на оплату,Заказ поставщику,Банковские счета,Документы по банку,Документы по кассе,Начальные остатки денег,Начальные остатки прочее,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияПлатежныйКалендарь",
		"Деньги",
		НСтр("ru='Платежный календарь'"),
		НСтр("ru='Включение позволяет вести платежный календарь.
		|
		|Платежный календарь является инструментом для оперативного планирования расхода, поступления и перемещения денежных средств.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Заказ поставщику,Операция по платежным картам,Перемещение денег,Поступление в кассу,Поступление на счет,Расход из кассы,Расход со счета,Счет на оплату,Счет на оплату (полученный),Документы по банку,Документы по продажам,Документы по кассе'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств",
		"Деньги",
		НСтр("ru='Статьи движения денежных средств (ДДС)'"),
		НСтр("ru='Включение позволяет вести учет в разрезе статей движения денежных средств.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Банковские счета,Поступление в кассу,Поступление на счет,Расход из кассы,Расход со счета,Документы по банку,Документы по кассе,Начальные остатки денег,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером",
		"Деньги",
		НСтр("ru='Расчеты с банком-эквайрером'"),
		НСтр("ru='Включение позволяет вести расчеты с банком-эквайрером, контролировать остаток задолженности, а также оформлять документы ""Поступление на счет"" и ""Расход со счета"" с операцией ""Отчет эквайрера"".'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Платежное поручение,Контрагенты,Банковские счета,Поступление на счет,Расход со счета,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям",
		"Деньги",
		НСтр("ru='Разносить оплату по эквайринговым операциям'"),
		НСтр("ru='Включение позволяет разносить оплаты от банка-эквайрера по отдельным эквайринговым операциям. А также относить расходы по эквайрингу на заказы покупателей.
		|
		|Возможность включается автоматически при использовании кассового метода учета доходов и расходов.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером";
	НоваяНастройка.Теги = НСтр("ru='Отчет о розничных продажах,Поступление на счет,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле",
		"Деньги",
		НСтр("ru='Оплата картами в оптовой торговле'"),
		НСтр("ru='Включение позволяет оформлять оплату картами в оптовой торговле на основании следующих документов:
		|
		|• Акт выполненных работ;
		|• Счет на оплату;
		|• Заказ покупателя;
		|• Заказ-наряд;
		|• Расходная накладная;
		|• Продажа имущества;
		|• Прием и передача в ремонт.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияКредитыИЗаймы",
		"Деньги",
		НСтр("ru='Займы и кредиты'"),
		НСтр("ru='Включение позволяет вести расчеты по кредитам, полученным от сторонних контрагентов. А также по займам, выданным сотрудникам.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Контрагенты,Сотрудники,Поступление в кассу,Поступление на счет,Расход из кассы,Расход со счета'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ЧастотаРасчетаКурсовыхРазниц";
	НоваяНастройка.Раздел			= "Деньги";
	НоваяНастройка.Представление	= НСтр("ru='Расчет курсовых разниц'");
	НоваяНастройка.Описание			= НСтр("ru='Настройка частоты расчета курсовых разниц:
		|
		|• В момент выполнения операций. Курсовые разницы будут рассчитываться при совершении каждой операции. Включение данной опции может увеличить время проведения документов. 
		|
		|• При закрытии месяца. Курсовые разницы по каждой операции будут рассчитываться в момент закрытия месяца.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("ПеречислениеСсылка.ЧастотаРасчетаКурсовыхРазниц");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	МетаданныеПеречисления = Метаданные.НайтиПоТипу(Тип("ПеречислениеСсылка.ЧастотаРасчетаКурсовыхРазниц"));
	Если МетаданныеПеречисления <> Неопределено Тогда
		НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
		Для Каждого МетаданныеЗначения Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
			НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(Перечисления[МетаданныеПеречисления.Имя][МетаданныеЗначения.Имя], МетаданныеЗначения.Синоним);
		КонецЦикла;
	КонецЕсли;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ФункциональнаяУчетВалютныхОпераций";
	НоваяНастройка.Теги = НСтр("ru='Расход со счета,Поступление на счет,Поступление в кассу,Расход из кассы,Платежное поручение,Документы по банку,Документы по кассе,Начальные остатки денег,Ввод начальных остатков'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ЗачитыватьАвансыДолгиАвтоматически";
	НоваяНастройка.Раздел			= "Деньги";
	НоваяНастройка.Представление	= НСтр("ru='Автозачет авансов'");
	НоваяНастройка.Описание			= НСтр("ru='Настройка автоматического зачета авансов и долгов при проведении документов:
		|
		|• Да. Перед записью документа будет произведена попытка автоматического зачета аванса или долга. 
		|
		|• Нет. Авансы и долги в документах необходимо будет разносить вручную.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("ПеречислениеСсылка.ДаНет");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	МетаданныеПеречисления = Метаданные.НайтиПоТипу(Тип("ПеречислениеСсылка.ДаНет"));
	Если МетаданныеПеречисления <> Неопределено Тогда
		НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
		Для Каждого МетаданныеЗначения Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
			НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(Перечисления[МетаданныеПеречисления.Имя][МетаданныеЗначения.Имя], МетаданныеЗначения.Синоним);
		КонецЦикла;
	КонецЕсли;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Расход со счета,Поступление на счет,Поступление в кассу,Расход из кассы,Акт выполненных работ,Платежное поручение,Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПереводыВПути",
		"Деньги",
		НСтр("ru='Переводы в пути'"),
		НСтр("ru='Перемещение денежных средств на другой счет организации, взнос, снятие наличных с расчетного счета в банке отражается с использованием 57 счета ""Переводы в пути"". Это необходимо в том случае, если есть задержка во времени между снятием и внесением денежных средств. Для отражения таких операций используются следующие пары документов:
		|- Перемещение из кассы на банковский счет (взнос наличными в банк). Отражается документом ""Расход из кассы"" и документом ""Поступление на счет"".
		|- Перемещение с банковского счета в кассу (снятие наличных в кассу). Отражается документом ""Поступление в кассу и документом ""Расход со счета"".
		|- Перемещение между банковскими счетами организации. Отражается документом ""Расход со счета"" и документом ""Поступление на счет"".'"),
		"e1cib/list/РегистрСведений.ПрименениеПереводовВПути"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Расход со счета,Расход из кассы,Поступление в кассу,Поступление на счет,Перемещение денег'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьПодсистемуЗарплата",
		"Зарплата",
		НСтр("ru='Управление персоналом, начисление зарплаты'"),
		НСтр("ru='Включает раздел ""Зарплата"" для учета сведений о сотрудниках, учета их рабочего времени, начисления и выплаты зарплаты.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Задание на работу,Сотрудники,Начальные остатки расчетов,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияВестиШтатноеРасписание",
		"Зарплата",
		НСтр("ru='Штатное расписание'"),
		НСтр("ru='Включение позволяет вести штатное расписание.
		|
		|При приеме сотрудников на работу будет осуществляться проверка наличия вакантных ставок.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата";
	НоваяНастройка.Теги = НСтр("ru='Кадровое перемещение,Прием на работу'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьСовместительство",
		"Зарплата",
		НСтр("ru='Совместительство'"),
		НСтр("ru='Включение позволяет принимать сотрудника на несколько должностей.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата";
	НоваяНастройка.Теги = НСтр("ru='Сотрудники,Задание на работу'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов",
		"Зарплата",
		НСтр("ru='НДФЛ и взносы'"),
		НСтр("ru='Включение позволяет рассчитывать налог на доходы и взносы по организациям, которые формируют регламентированную отчетность в контролирующие органы.
		|
		|ВАЖНО!
		|Возможность нельзя отключить после начала работы в программе.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата";
	НоваяНастройка.Теги = НСтр("ru='Кадровое перемещение,Начисление зарплаты,Прием на работу'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"МоиУчетныеЗаписи",
		"ПочтаSMS",
		НСтр("ru='Мои учетные записи'"),
		НСтр("ru='Включение и отключение загрузки почты для указанных учетных записей.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ОтправлятьСлепыеКопииПисем",
		"ПочтаSMS",
		НСтр("ru='Отправлять копии исходящих писем'"),
		НСтр("ru='Включение позволяет указать адрес электронной почты, на который будут отправляться копии исходящих писем для текущего пользователя программы.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "АдресПолучателяСкрытойКопии";
	НоваяНастройка.Раздел			= "ПочтаSMS";
	НоваяНастройка.Представление	= НСтр("ru='на адрес'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 30);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПодсказкаВвода", "my_mail@example.org");
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.ВместеС = "ОтправлятьСлепыеКопииПисем";
	НоваяНастройка.Зависимости = "ОтправлятьСлепыеКопииПисем";
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкаПодписиНовыхСообщений",
		"ПочтаSMS",
		НСтр("ru='Настройка подписи для новых сообщений'"),
		НСтр("ru='Подпись подставляется автоматически в текст исходящего письма.'"),
		"e1cib/command/Обработка.НастройкаПрограммы.Команда.НастройкаПодписиПочты"
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ИмяОтправителяSMS";
	НоваяНастройка.Раздел			= "ПочтаSMS";
	НоваяНастройка.Представление	= НСтр("ru='Имя отправителя SMS'");
	НоваяНастройка.Описание			= НСтр("ru='Имя отправителя SMS, которое будет использоваться по умолчанию при отправке SMS сообщений.
		|
		|Имя отправителя – это текст, который увидит конечный получатель вместо номера, с которого осуществлялась отправка SMS.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 30);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ПерсональноеМобильноеУстройство";
	НоваяНастройка.Раздел			= "Телефония";
	НоваяНастройка.Представление	= НСтр("ru='Мобильное устройство'");
	НоваяНастройка.Описание			= НСтр("ru='Мобильное устройство, которое будет использоваться при синхронизации звонков.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("ПланОбменаСсылка.МобильноеПриложение");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.ОтображатьСнизу);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 30);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,CRM'");
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ЗагрузкаКонтактовGoogle",
			"ОбменСGoogle",
			НСтр("ru='Загрузка контактов'"),
			НСтр("ru='Включение позволяет вводить новых контрагентов и заполнять их контактную информацию из данных вашей адресной книги Google.
		|
		|Возможность доступна в документах, где есть поле для указания контрагента.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.Теги = НСтр("ru='Событие,Контрагенты,Контактные лица'");
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ЗагрузитьКонтактыGoogle",
			"ОбменСGoogle",
			НСтр("ru='Загрузить контакты'"),
			НСтр("ru='Команда выполняет загрузку контактов из адресной книги Google.'"),
			"e1cib/command/Обработка.ОбменСGoogle.Команда.ЗагрузитьКонтактыGoogle"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "ЗагрузкаКонтактовGoogle";
		НоваяНастройка.Зависимости = "ЗагрузкаКонтактовGoogle";
		НоваяНастройка.Теги = НСтр("ru='Событие,Контрагенты,Контактные лица'");
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"СинхронизацияКалендаряGoogle",
			"ОбменСGoogle",
			НСтр("ru='Синхронизация календаря'"),
			НСтр("ru='При включении будет выполняться автоматическая двусторонняя синхронизация событий в программе с календарем Google.
		|
		|Созданные в программе события с типами ""Телефонный звонок"", ""Личная встреча"" и ""Прочее"" будут передаваться в календарь Google. Добавленные записи календаря в Google будут также отображаться в УНФ.
		|
		|Синхронизация происходит только по тем событиям, в которых указан календарь сотрудника с включенным признаком ""Синхронизировать с Google"".'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"СинхронизироватьКалендарьGoogle",
			"ОбменСGoogle",
			НСтр("ru='Синхронизировать календарь'"),
			НСтр("ru='Команда выполняет синхронизацию событий
		|из календаря сотрудника с календарем Google.'"),
			"e1cib/command/Обработка.ОбменСGoogle.Команда.СинхронизироватьКалендарьGoogle"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "СинхронизацияКалендаряGoogle";
		НоваяНастройка.Зависимости = "СинхронизацияКалендаряGoogle";
		НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	КонецЕсли;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ИдентификацияПриложенияGoogle";
	НоваяНастройка.Раздел			= "ОбменСGoogle";
	НоваяНастройка.Представление	= НСтр("ru='Идентификация приложения Google'");
	НоваяНастройка.Описание			= НСтр("ru='Вставьте идентификатор из https://console.developers.google.com/project для вашего проекта'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Верх);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.ОтображатьСнизу);
	НоваяНастройка.СвойстваЭлемента.Вставить("МногострочныйРежим", Истина);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПодсказкаВвода", "{""web"":{""auth_uri"":""https://accounts.google.com/o/oauth2/auth"",""client_secret"":""...");
	НоваяНастройка.СвойстваЭлемента.Вставить("МаксимальнаяШирина", 70);
	НоваяНастройка.СвойстваЭлемента.Вставить("АвтоМаксимальнаяШирина", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("МаксимальнаяВысота", 7);
	НоваяНастройка.СвойстваЭлемента.Вставить("АвтоМаксимальнаяВысота", Ложь);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы И Не ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	НоваяНастройка.Теги = НСтр("ru='Событие'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"РабочийКаталогПечати",
		"ПерсональныеПараметрыПечати",
		НСтр("ru='Настройка рабочего каталога печати'"),
		НСтр("ru='Указывается каталог на вашем персональном компьютере, в котором временно хранятся файлы, полученные из информационной базы для просмотра или редактирования. Настройка действует для печати в веб-клиенте.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"СписокПрисоединенныхФайлов",
		"РаботаСФайлами",
		НСтр("ru='Хранилище файлов'"),
		НСтр("ru='Общие файлы для информационной базы (не присоединенные к объектам).'"),
		"e1cib/command/Справочник.Файлы.Команда.Файлы"
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"СписокРедактируемыхФайлов",
		"РаботаСФайлами",
		НСтр("ru='Редактируемые файлы'"),
		НСтр("ru='Все не присоединенные файлы, занятые пользователями для редактирования.'"),
		"e1cib/command/Справочник.Файлы.Команда.РедактируемыеФайлы"
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
		"РаботаСФайлами",
		НСтр("ru='Показывать занятые файлы при завершении работы'"),
		НСтр("ru='Перед завершением работы выводить окно с занятыми файлами. Появление сообщения исключает вопрос ""При завершении программы"".'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"СпрашиватьРежимРедактированияПриОткрытииФайла",
		"РаботаСФайлами",
		НСтр("ru='Выбор режима открытия при выборе файла'"),
		НСтр("ru='Если файл уже занят для редактирования, то не спрашивать, а  сразу открывать/выбирать. Опция имеет смысл только в режиме выбора файла.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	Если РежимРаботы.ЭтоВебКлиент Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ПоказыватьПодсказкиПриРедактированииФайлов",
			"РаботаСФайлами",
			НСтр("ru='Подсказки при редактировании'"),
			НСтр("ru='Выводить подсказки при редактировании присоединенного файла.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ДействиеСФайламиПоДвойномуЩелчкуМыши";
	НоваяНастройка.Раздел			= "РаботаСФайлами";
	НоваяНастройка.Представление	= НСтр("ru='Действие по двойному щелчку на файле'");
	НоваяНастройка.Описание			= НСтр("ru='Действие, которое будет происходить по двойному щелчку на присоединенном файле.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСФайламиПоДвойномуЩелчку");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	МетаданныеПеречисления = Метаданные.НайтиПоТипу(Тип("ПеречислениеСсылка.ДействияСФайламиПоДвойномуЩелчку"));
	Если МетаданныеПеречисления <> Неопределено Тогда
		НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
		Для Каждого МетаданныеЗначения Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
			НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(Перечисления[МетаданныеПеречисления.Имя][МетаданныеЗначения.Имя], МетаданныеЗначения.Синоним);
		КонецЦикла;
	КонецЕсли;
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "СпособСравненияВерсийФайлов";
	НоваяНастройка.Раздел			= "РаботаСФайлами";
	НоваяНастройка.Представление	= НСтр("ru='Способ сравнения версий файлов'");
	НоваяНастройка.Описание			= НСтр("ru='Укажите программу, которая будет использоваться при сравнении файлов следующих типов: ""ODT, DOC, RTF, TXT"".'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСравненияВерсийФайлов");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	МетаданныеПеречисления = Метаданные.НайтиПоТипу(Тип("ПеречислениеСсылка.СпособыСравненияВерсийФайлов"));
	Если МетаданныеПеречисления <> Неопределено Тогда
		НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
		Для Каждого МетаданныеЗначения Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
			НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(Перечисления[МетаданныеПеречисления.Имя][МетаданныеЗначения.Имя], МетаданныеЗначения.Синоним);
		КонецЦикла;
	КонецЕсли;
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкаСканирования",
		"РаботаСФайлами",
		НСтр("ru='Настройка сканирования'"),
		НСтр("ru='Программа позволяет хранить файлы, полученные напрямую со сканера. Для работы со сканером в программе необходимо произвести настройку сканирования.
		|
		|Перед выполнением настроек к компьютеру необходимо подключить сканер, при этом в зависимости от возможностей подключенного сканера будут доступны те или иные параметры.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкаРабочегоКаталогаФайлов",
		"РаботаСФайлами",
		НСтр("ru='Настройка основного рабочего каталога'"),
		НСтр("ru='Команда открывает меню, предназначенное для установки настроек каталога на вашем персональном компьютере, в котором временно будут храниться файлы, полученные из информационной базы для просмотра или редактирования.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	Если РежимРаботы.ЭтоВебКлиент Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"УстановкаРасширенияРаботыСФайлами",
			"РаботаСФайлами",
			НСтр("ru='Установить расширение работы с файлами'"),
			НСтр("ru='Для выполнения некоторых операций в браузере (веб-клиенте) требуется установка и подключение расширения работы с файлами.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкаЭлектроннойПодписиИШифрования",
		"РаботаСФайлами",
		НСтр("ru='Настройка электронной подписи и шифрования'"),
		НСтр("ru='Управление персональными настройками электронной подписи и шифрования.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	Если РежимРаботы.ЭтоВебКлиент Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"УстановитьРасширениеРаботыСКриптографией",
			"РаботаСФайлами",
			НСтр("ru='Установить расширение работы с криптографией'"),
			НСтр("ru='Для выполнения некоторых операций в браузере (веб-клиенте) требуется установка и подключение расширения работы с криптографией.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"СведенияОПользователе",
		"Прочее",
		НСтр("ru='Сведения о пользователе'"),
		НСтр("ru='Открыть сведения (логин, пароль, права доступа и другие) о текущем пользователе программы.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПолнотекстовыйПоиск",
		"Прочее",
		НСтр("ru='Полнотекстовый поиск в данных'"),
		НСтр("ru='Полнотекстовый поиск данных позволяет находить любые сведения не только по полям карточек, но и по содержимому присоединенных файлов.'"),
		"e1cib/app/Обработка.ПолнотекстовыйПоискВДанных"
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуютсяПрофилиБезопасности") Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"НастройкаДоступаКПрокси",
			"Прочее",
			НСтр("ru='Настроить доступ к прокси-серверу'"),
			НСтр("ru='Персональные настройки входа в интернет с использованием прокси-сервера.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторПрограммы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ПодключениеИНастройкаОборудования",
			"Прочее",
			НСтр("ru='Подключение и настройка оборудования'"),
			НСтр("ru='Работа с подключаемым оборудованием и управление рабочим местом.
		|
		|Настройка доступна при использовании подключаемого оборудования (Администрирование - Подключаемое оборудование - Использовать подключаемое оборудование).'"),
			"e1cib/command/Справочник.ПодключаемоеОборудование.Команда.ОткрытьПодключаемоеОборудование"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование";
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ПодтверждениеПриЗавершенииПрограммы",
		"Прочее",
		НСтр("ru='Подтверждение при завершении программы'"),
		НСтр("ru='Показывать окно с подтверждением при закрытии программы'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ИспользоватьСинхронизациюДанных",
			"Программы1СПредприятие",
			НСтр("ru='Синхронизация данных'"),
			НСтр("ru='Включение позволяет использовать синхронизацию с программами 1С:Предприятие.'")
		);
		НоваяНастройка.ОбновлятьИнтерфейс = Истина;
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.Теги = НСтр("ru='Договоры,Ввод начальных остатков,Начальные остатки организации'");
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкаСинхронизацииДанных",
		"Программы1СПредприятие",
		НСтр("ru='Настройка синхронизации данных'"),
		НСтр("ru='Настройка и выполнение синхронизации данных.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Зависимости = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"РезультатыСинхронизацииДанных",
		"Программы1СПредприятие",
		НСтр("ru='Предупреждения при синхронизации данных'"),
		НСтр("ru='Просмотр потенциально ошибочных ситуаций, требующих ручного исправления:
		|• непроведенные документы;
		|• незаполненные реквизиты;
		|• конфликты;
		|• документы, непринятые по дате запрета.'"),
		"e1cib/list/РегистрСведений.РезультатыОбменаДанными"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Зависимости = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьДатыЗапретаЗагрузки",
		"Программы1СПредприятие",
		НСтр("ru='Запрещать загружать данные прошлых периодов'"),
		НСтр("ru='Запрет загрузки данных прошлых периодов из других программ.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Зависимости = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ДатыЗапретаЗагрузкиДанных",
		"Программы1СПредприятие",
		НСтр("ru='Даты запрета загрузки данных'"),
		НСтр("ru='Запрет загрузки данных прошлых периодов из других программ.'"),
		"e1cib/command/РегистрСведений.ДатыЗапретаИзменения.Команда.ДатыЗапретаЗагрузкиДанных"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Зависимости = "ИспользоватьДатыЗапретаЗагрузки,ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "ПрефиксУзлаРаспределеннойИнформационнойБазы";
		НоваяНастройка.Раздел			= "Программы1СПредприятие";
		НоваяНастройка.Представление	= НСтр("ru='Префикс базы'");
		НоваяНастройка.Описание			= НСтр("ru='Префикс добавляется автоматически к кодам элементов справочников и номерам документов для того, чтобы различать программы, в которых они были введены, и избежать дублирования данных.'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
		НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 4);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
		НоваяНастройка.Зависимости = "ИспользоватьСинхронизациюДанных";
		НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	КонецЕсли;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "КонтрольДоговоровПриПроведенииДокументов";
	НоваяНастройка.Раздел			= "Программы1СПредприятие";
	НоваяНастройка.Представление	= НСтр("ru='Контроль договоров'");
	НоваяНастройка.Описание			= НСтр("ru='При проведении документов, у которых договор контрагента не соответствует операции документа:
		|• Только предупреждать. Выдается сообщение о несоответствии договора, но документ проводится.
		|• Не проводить. Выдается сообщение о несоответствии договора и документ не проводится.
		|
		|ВАЖНО!
		|Контроль договоров контрагентов выполняется только при настроенной синхронизации данных с программой ""1С: Бухгалтерия предприятия"".'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Число");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(0, НСтр("ru='Предупреждать'"));
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(1, НСтр("ru='Не проводить'"));
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Зависимости = "ИспользоватьСинхронизациюДанных";
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	Если РежимРаботы.КлиентСерверный И РежимРаботы.ЭтоАдминистраторСистемы И Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "КаталогСообщенийОбменаДаннымиДляWindows";
		НоваяНастройка.Раздел			= "Программы1СПредприятие";
		НоваяНастройка.Представление	= НСтр("ru='Каталог сообщений обмена данными для ОС Windows'");
		НоваяНастройка.Описание			= НСтр("ru='Путь к единому сетевому каталогу для общих временных файлов серверов 1С:Предприятие, работающих в одном кластере.'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
		НоваяНастройка.Зависимости = "ИспользоватьСинхронизациюДанных";
		НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	КонецЕсли;
	
	Если РежимРаботы.КлиентСерверный И РежимРаботы.ЭтоАдминистраторСистемы И Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "КаталогСообщенийОбменаДаннымиДляLinux";
		НоваяНастройка.Раздел			= "Программы1СПредприятие";
		НоваяНастройка.Представление	= НСтр("ru='Каталог сообщений обмена данными для ОС Linux'");
		НоваяНастройка.Описание			= НСтр("ru='Путь к единому сетевому каталогу для общих временных файлов серверов 1С:Предприятие, работающих в одном кластере.'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьСинхронизациюДанных";
		НоваяНастройка.Зависимости = "ИспользоватьСинхронизациюДанных";
		НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	КонецЕсли;
	
	Если РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ИнформацияСинхронизацияБП",
			"Программы1СПредприятие",
			НСтр("ru='Подробнее о синхронизации с ""1C:Бухгалтерия""'"),
			НСтр("ru=''"),
			"https://1cfresh.com/articles/obmen"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	КонецЕсли;
	
	Если РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ИнформацияСинхронизацияОП",
			"Программы1СПредприятие",
			НСтр("ru='Подробнее о синхронизации с ""1С:Отчетность предпринимателя""'"),
			НСтр("ru=''"),
			"https://1cfresh.com/articles/op_unf"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"СинхронизацияСМобильнымПриложением",
		"СинхронизацияСМобильнымПриложением",
		НСтр("ru='Как подключить мобильное приложение'"),
		НСтр("ru='Информация о подключении мобильного приложения, и выполнение синхронизации'"),
		"e1cib/command/ПланОбмена.МобильноеПриложение.Команда.ОткрытьМобильноеПриложение"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкаМеханизмаСинхронизацииМобильноеПриложение",
		"СинхронизацияСМобильнымПриложением",
		НСтр("ru='Подробнее о синхронизации с мобильным приложением'"),
		НСтр("ru=''"),
		"http://sbm.1c.ru/about/nastroyka-mekhanizma-sinkhronizatsii/"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьОбменССайтами",
		"ОбменССайтом",
		НСтр("ru='Обмен с сайтом'"),
		НСтр("ru='Включение позволяет выполнять синхронизацию с сайтами.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкаОбменаССайтами",
		"ОбменССайтом",
		НСтр("ru='Настройка обмена с сайтом'"),
		НСтр("ru='Настройка и выполнение обмена с сайтом.'"),
		"e1cib/list/ПланОбмена.ОбменУправлениеНебольшойФирмойСайт"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьОбменССайтами";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьОбменССайтами";
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ПрефиксДляОбменаССайтом";
	НоваяНастройка.Раздел			= "ОбменССайтом";
	НоваяНастройка.Представление	= НСтр("ru='Префикс для обмена с сайтом'");
	НоваяНастройка.Описание			= НСтр("ru='Префикс автоматически добавляется к номерам заказов покупателей загруженных с сайта для того, чтобы отделить их от заказов, созданных в информационной базе и избежать дублирования данных.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 4);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьОбменССайтами";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьОбменССайтами";
	НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	
	Если РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ИнформацияОбменССайтом",
			"ОбменССайтом",
			НСтр("ru='Подробнее о настройке и возможностях обмена с сайтом'"),
			НСтр("ru=''"),
			"https://1cfresh.com/articles/unf_site"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.Теги = НСтр("ru='Ввод начальных остатков,Начальные остатки организации'");
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьОбменЭД",
		"ОбменСКонтрагентами",
		НСтр("ru='Обмен электронными документами с контрагентами'"),
		НСтр("ru='Включение позволяет обмениваться электронными документами со сторонними контрагентами и между собственными организациями.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Контрагенты,Расходная накладная'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ТиповыеСоглашенияОбИспользованииЭД",
		"ОбменСКонтрагентами",
		НСтр("ru='Профили настроек ЭДО'"),
		НСтр("ru='Настройка профилей организации для обмена электронными документами.'"),
		"e1cib/list/Справочник.ПрофилиНастроекЭДО"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьОбменЭД";
	НоваяНастройка.Зависимости = "ИспользоватьОбменЭД";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"СоглашенияОбИспользованииЭД",
		"ОбменСКонтрагентами",
		НСтр("ru='Настройки ЭДО'"),
		НСтр("ru=''"),
		"e1cib/list/Справочник.СоглашенияОбИспользованииЭД"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьОбменЭД";
	НоваяНастройка.Зависимости = "ИспользоватьОбменЭД";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"АвтоматическаяОтправкаЭД",
			"ОбменСКонтрагентами",
			НСтр("ru='Автоматическая отправка электронных документов'"),
			НСтр("ru='При включенной опции будет происходить автоматическая отправка электронных документов по указанному расписанию.'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьОбменЭД";
		НоваяНастройка.Зависимости = "ИспользоватьОбменЭД";
		НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "ОтправкаОформленныхЭДРасписание";
		НоваяНастройка.Раздел			= "ОбменСКонтрагентами";
		НоваяНастройка.Представление	= НСтр("ru='Расписание'");
		НоваяНастройка.ТипЭлемента		= Тип("ДекорацияФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидДекорацииФормы.Надпись);
		НоваяНастройка.СвойстваЭлемента.Вставить("Гиперссылка", Истина);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьОбменЭД";
		НоваяНастройка.Зависимости = "АвтоматическаяОтправкаЭД,ИспользоватьОбменЭД";
		НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"АвтоматическоеПолучениеЭД",
			"ОбменСКонтрагентами",
			НСтр("ru='Автоматическое получение электронных документов'"),
			НСтр("ru='При включенной опции будет происходить автоматическое получение электронных документов по указанному расписанию.'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьОбменЭД";
		НоваяНастройка.Зависимости = "ИспользоватьОбменЭД";
		НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "ПолучениеНовыхЭДРасписание";
		НоваяНастройка.Раздел			= "ОбменСКонтрагентами";
		НоваяНастройка.Представление	= НСтр("ru='Расписание'");
		НоваяНастройка.ТипЭлемента		= Тип("ДекорацияФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидДекорацииФормы.Надпись);
		НоваяНастройка.СвойстваЭлемента.Вставить("Гиперссылка", Истина);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьОбменЭД";
		НоваяНастройка.Зависимости = "ИспользоватьОбменЭД,АвтоматическоеПолучениеЭД";
		НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов",
		"ОбменСКонтрагентами",
		НСтр("ru='Отложенная отправка электронных документов'"),
		НСтр("ru='Отключение немедленной отправки электронных документов при выполнении команды ""Отправить электронный документ"".'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьОбменЭД";
	НоваяНастройка.Зависимости = "ИспользоватьОбменЭД";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьЭлектронныеПодписи",
		"ОбменСКонтрагентами",
		НСтр("ru='Электронные подписи'"),
		НСтр("ru='Возможность отправлять электронные документы с электронной подписью.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкиЭлектроннойПодписиИШифрования",
		"ОбменСКонтрагентами",
		НСтр("ru='Настройки электронной подписи и шифрования'"),
		НСтр("ru='Настройка сертификатов и программ, используемых для подписания и шифрования.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьЭлектронныеПодписи";
	НоваяНастройка.Зависимости = "ИспользоватьЭлектронныеПодписи";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"ПодключениеКСервису1С_ЭДО",
		"ОбменСКонтрагентами",
		НСтр("ru='Подключиться к сервису 1С-ЭДО'"),
		НСтр("ru='Обмен юридически значимыми электронными документами с контрагентами через сервис 1С-ЭДО.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьЭлектронныеПодписи";
	НоваяНастройка.Зависимости = "ИспользоватьЭлектронныеПодписи";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"ПомощникПодключенияКСервису1СТакском",
		"ОбменСКонтрагентами",
		НСтр("ru='Подключиться к сервису 1С-Такском'"),
		НСтр("ru='Обмен юридически значимыми электронными документами с контрагентами через сервис 1С-Такском.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьЭлектронныеПодписи";
	НоваяНастройка.Зависимости = "ИспользоватьЭлектронныеПодписи";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПомощникПодключенияКСервисуБизнесСеть",
		"ОбменСКонтрагентами",
		НСтр("ru='Подключиться к сервису обмена без электронной подписи'"),
		НСтр("ru='Обмен электронными документами без электронной подписи для участников 1С:Бизнес-сеть. Не имеет юридической значимости.'"),
		"e1cib/app/Обработка.БизнесСеть"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Контрагенты,Расходная накладная'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"СервисныеКомандыБизнесСеть",
		"ОбменСКонтрагентами",
		НСтр("ru='Сервисные команды 1С:Бизнес-сеть'"),
		НСтр("ru='Настройки и синхронизация доступа в 1С:Бизнес-сеть.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ИнформацияЭДО",
		"ОбменСКонтрагентами",
		НСтр("ru='Подробнее о настройке и возможностях обмена с контрагентами'"),
		НСтр("ru=''"),
		"http://its.1c.ru/db/bspdoc#content:303:1:issogl1_1.1_обмен_с_контрагентами"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ИнформацияЭДОБизнесСеть",
		"ОбменСКонтрагентами",
		НСтр("ru='Подробнее о настройке и возможностях 1С:Бизнес-сеть'"),
		НСтр("ru=''"),
		"http://its.1c.ru/db/bspdoc#content:303:1:issogl1_1.4_бизнес-сеть"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьОбменСБанками",
		"ОбменСБанками",
		НСтр("ru='Обмен электронными документами с банками'"),
		НСтр("ru='Формирование платежных документов в электронном виде и передача в банк напрямую через интернет без использования программы клиент-банка.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Банковские счета'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкиОбменаСБанками",
		"ОбменСБанками",
		НСтр("ru='Настройки обмена с банками'"),
		НСтр("ru='Выполнение настроек прямого обмена электронными документами с банками.'"),
		"e1cib/list/Справочник.НастройкиОбменСБанками"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьОбменСБанками";
	НоваяНастройка.Зависимости = "ИспользоватьОбменСБанками";
	НоваяНастройка.Теги = НСтр("ru='Банковские счета'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ИнформацияЭДООбменСБанками",
		"ОбменСБанками",
		НСтр("ru='Подробнее о настройке и возможностях обмена с банками'"),
		НСтр("ru=''"),
		"http://its.1c.ru/db/bspdoc#content:303:1:issogl1_1.2_обмен_с_банками"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Банковские счета'");
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ЗаголовокСистемы";
	НоваяНастройка.Раздел			= "ОбщиеНастройки";
	НоваяНастройка.Представление	= НСтр("ru='Заголовок программы'");
	НоваяНастройка.Описание			= НСтр("ru='Заголовок программы отображается в верхней части главного окна, вместе с информацией о текущем пользователе и актуальных курсах валют.
		|
		|СОВЕТ.
		|Заголовок полезно задавать, когда вы ведете работу в нескольких программах одновременно. Тогда заголовок открытого окна будет подсказывать, в какой программе вы сейчас работаете.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 40);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПодсказкаВвода", "Заголовок программы");
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ЧасовойПоясПрограммы";
	НоваяНастройка.Раздел			= "ОбщиеНастройки";
	НоваяНастройка.Представление	= НСтр("ru='Часовой пояс'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("Гиперссылка", Истина);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 15);
	НоваяНастройка.СвойстваЭлемента.Вставить("РежимВыбораИзСписка", Истина);
	НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.ЗагрузитьЗначения(ПолучитьДопустимыеЧасовыеПояса());
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"ВремяТекущегоСеанса",
		"ОбщиеНастройки",
		НСтр("ru='Время текущего сеанса'"),
		НСтр("ru=''")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "ПереноситьДатуЗапретаРедактирования";
	НоваяНастройка.Раздел			= "ОбщиеНастройки";
	НоваяНастройка.Представление	= НСтр("ru='Перенос даты запрета редактирования'");
	НоваяНастройка.Описание			= НСтр("ru='Автоматически переносить дату запрета редактирования при закрытии месяца.'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("ПеречислениеСсылка.ДаНет");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(Перечисления.ДаНет.Да);
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(Перечисления.ДаНет.Нет);
	НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(Перечисления.ДаНет.ПустаяСсылка(), НСтр("ru='Спрашивать'"));
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"КонтролироватьОстаткиПриПроведении",
		"ОбщиеНастройки",
		НСтр("ru='Контролировать остатки при проведении'"),
		НСтр("ru='Включение запрещает проводить и отменять проведение документов, в случае появления отрицательных остатков.'")
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	Если РежимРаботы.КлиентСерверный И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ПараметрыПроксиСервера",
			"ОбщиеНастройки",
			НСтр("ru='Параметры доступа в Интернет'"),
			НСтр("ru='Настройки параметров прокси-сервера на сервере 1С:Предприятие.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РаботаВБезопасномРежимеСлужебный.ДоступнаНастройкаПрофилейБезопасности() И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"НастройкиИспользованияПрофилейБезопасности",
			"ОбщиеНастройки",
			НСтр("ru='Профили безопасности'"),
			НСтр("ru='Использование профилей безопасности для контроля за использованием программой внешних (относительно кластера серверов 1С:Предприятия) ресурсов.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"РИБ",
		"ОбщиеНастройки",
		НСтр("ru='Распределенная информационная база'"),
		НСтр("ru='У вас несколько территориально удаленных подразделений и нет возможности работать с базой онлайн, так как интернет оставляет желать лучшего? Дайте нам знать об этом - мы подумаем о возможности работы каждой базы автономно и синхронизации по мере появления интернета.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ЗапретРедактированияДокументов",
		"ОбщиеНастройки",
		НСтр("ru='Запрет редактирования документов'"),
		НСтр("ru='Мы подумываем о том, чтобы сделать опциональный запрет редактирования проведенных документов (кроме заказов) и возможность введение заявок на их редактирование. Вам такое надо?'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ИнформацияИПоддержка",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Информация и поддержка'"),
		НСтр("ru='Оформление непосредственно из программы запросов в службу поддержки (для пользователей сервиса). Ссылки на правовую и методическую поддержку с портала its.1c.ru'"),
		"e1cib/command/ОбщаяКоманда.ОткрытьИнформационныйЦентр"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ЖурналРегистрации",
			"ПоддержкаИОбслуживание",
			НСтр("ru='Журнал регистрации'"),
			НСтр("ru='Журнал регистрации содержит информацию о том, какие события происходили в информационной базе в определенный момент времени, или какие действия выполнял тот или иной пользователь.'"),
			"e1cib/app/Обработка.ЖурналРегистрации"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("СтандартныеПодсистемыВЛокальномРежиме") Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"АнализЖурналаРегистрации",
			"ПоддержкаИОбслуживание",
			НСтр("ru='Анализ журнала регистрации'"),
			НСтр("ru='Переход к отчету ""Анализ журнала регистрации"". Отчет также позволяет анализировать активность пользователей.'"),
			"e1cib/app/Отчет.АнализЖурналаРегистрации"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"АктивныеПользователи",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Активные пользователи'"),
		НСтр("ru='Пользователи, работающие в программе на текущий момент.'"),
		"e1cib/app/Обработка.АктивныеПользователи"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"БлокировкаРаботыПользователей",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Блокировка работы пользователей'"),
		НСтр("ru='Запрет входа в информационную базу для пользователей.'"),
		"e1cib/app/Обработка.БлокировкаРаботыПользователей"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"ОбновитьПараметрыСистемы",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Обновить параметры системы'"),
		НСтр("ru='Сброс кэша, обновление интерфейса с учетом функциональных опций.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"УдалениеПомеченныхОбъектов",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Удаление помеченных объектов'"),
		НСтр("ru='Окончательное удаление объектов, помеченных на удаление, с контролем ссылочной целостности.'"),
		"e1cib/app/Обработка.УдалениеПомеченныхОбъектов"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"РезервноеКопированиеИВосстановление",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Резервное копирование и восстановление'"),
		НСтр("ru='Создание резервных копий информационных баз, восстановление из копии и настройка резервного копирования. Резервное копирование можно осуществлять как на локальный компьютер, так и в 1С:Облачный архив.'"),
		"e1cib/command/Обработка.ОблачныйАрхив.Команда.РезервноеКопированиеИВосстановление"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ИнформацияОбОблачномАрхиве",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Подробнее о 1С:Облачный архив'"),
		НСтр("ru=''"),
		"https://portal.1c.ru/app/arhiv"
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	Если РежимРаботы.Локальный И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ЗагрузитьКлассификаторБанков",
			"ПоддержкаИОбслуживание",
			НСтр("ru='Загрузить классификатор банков'"),
			НСтр("ru='Загрузка классификатора банков РФ с диска 1С:ИТС или сайта РБК.'"),
			"e1cib/command/Справочник.КлассификаторБанковРФ.Команда.ЗагрузкаКлассификатораБанковРФ"
		);
		НоваяНастройка.ДобавлятьОтступ = Истина;
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.Теги = НСтр("ru='Банковские счета'");
	КонецЕсли;
	
	Если РежимРаботы.Локальный Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ЗагрузкаКурсовВалют",
			"ПоддержкаИОбслуживание",
			НСтр("ru='Загрузить курсы валют'"),
			НСтр("ru='Загрузка курсов выбранных валют за указанный период с сайта РБК.'"),
			"e1cib/app/Обработка.ЗагрузкаКурсовВалют"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.Теги = НСтр("ru='Банковские счета'");
	КонецЕсли;
	
	Если Не РежимРаботы.ЭтоLinuxКлиент Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ИспользоватьИнтеграцию1СБухфон",
			"ПоддержкаИОбслуживание",
			НСтр("ru='Запуск 1С-Бухфон'"),
			НСтр("ru='Разрешить запуск приложения 1С-Бухфон для соединения со специалистом поддержки.'")
		);
		НоваяНастройка.ДобавлятьОтступ = Истина;
		НоваяНастройка.ОбновлятьИнтерфейс = Истина;
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если Не РежимРаботы.ЭтоLinuxКлиент Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"Настройка1СБухфон",
			"ПоддержкаИОбслуживание",
			НСтр("ru='Настройка 1С-Бухфон'"),
			НСтр("ru='Настройка запуска приложения 1С-Бухфон на этом компьютере.'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьИнтеграцию1СБухфон";
	КонецЕсли;
	
	Если РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"НастройкаСтандартногоИнтерфейсаOData",
			"ПоддержкаИОбслуживание",
			НСтр("ru='Настройка стандартного интерфейса OData'"),
			НСтр("ru=''"),
			"e1cib/app/Обработка.НастройкаСтандартногоИнтерфейсаOData"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьДатыЗапретаИзменения",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Запрещать изменения прошлых периодов'"),
		НСтр("ru='Запрет изменения данных прошлых периодов.'")
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ДатыЗапретаИзмененияДанных",
		"ПоддержкаИОбслуживание",
		НСтр("ru='Даты запрета изменения данных'"),
		НСтр("ru=''"),
		"e1cib/command/РегистрСведений.ДатыЗапретаИзменения.Команда.ДатыЗапретаИзмененияДанных"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьДатыЗапретаИзменения";
	НоваяНастройка.Зависимости = "ИспользоватьДатыЗапретаИзменения";
	
	Если ПолучениеОбновленийПрограммы.ДоступноИспользованиеОбновленияПрограммы() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ОбновлениеПрограммы",
			"ИнтернетПоддержкаПользователей",
			НСтр("ru='Обновление программы'"),
			НСтр("ru='Получение информации и установка новых версий конфигурации и платформы 1С:Предприятия.'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
	КонецЕсли;
	
	Если ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ПодключитьИПП",
			"ИнтернетПоддержкаПользователей",
			НСтр("ru='Подключить Интернет-поддержку'"),
			НСтр("ru='Для авторизации в системе Интернет-поддержки пользователей используется тот же логин и пароль, что и на сайте users.v8.1c.ru.
		|Если у Вас ещё нет логина и пароля, то выполните регистрацию самостоятельно или обратитесь за помощью к партнёру фирмы ""1С"", с которым у Вас заключен договор ИТС.'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если МониторИнтернетПоддержки.ДоступноИспользованиеМонитораИнтернетПоддержки() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"МониторИнтернетПоддержки",
			"ИнтернетПоддержкаПользователей",
			НСтр("ru='Монитор Интернет-поддержки'"),
			НСтр("ru='Информация о поддержке программного продукта, версии программы и др.'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если ИнтернетПоддержкаПользователейВызовСервера.ДоступнаНастройкаПараметровПодключенияКИнтернетПоддержке() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"НастройкиСоединенияССерверомИнтернетПоддержки",
			"ИнтернетПоддержкаПользователей",
			НСтр("ru='Настройки соединения с сервером'"),
			НСтр("ru='Настройка параметров сетевого соединения с сервером Интернет-поддержки'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"РезультатыОбновленияИДополнительнаяОбработкаДанных",
		"ИнтернетПоддержкаПользователей",
		НСтр("ru='Результаты обновления и дополнительная обработка данных'"),
		НСтр("ru='Сведения о ходе обновления версии программы, отложенное выполнение дополнительных процедур обработки данных.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ДетализироватьОбновлениеИБВЖурналеРегистрации",
			"ИнтернетПоддержкаПользователей",
			НСтр("ru='Детализировать ход обновления в журнале регистрации'"),
			НСтр("ru='Записывать в журнал регистрации подробную информацию о ходе выполнения обновления.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если ПолучениеОбновленийПрограммы.ДоступноИспользованиеОбновленияПрограммы() И Не ПустаяСтрока(ПолучениеОбновленийПрограммы.КаталогСохраненияПоследнегоПолученногоДистрибутива()) Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "КаталогДистрибутиваПлатформы";
		НоваяНастройка.Раздел			= "ИнтернетПоддержкаПользователей";
		НоваяНастройка.Представление	= НСтр("ru='Последний полученный дистрибутив платформы сохранен в папку'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Верх);
		НоваяНастройка.СвойстваЭлемента.Вставить("Гиперссылка", Истина);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"РазрешенаРаботаСНовостями",
			"ИнтернетПоддержкаПользователей",
			НСтр("ru='Получение новостей'"),
			НСтр("ru='Автоматическое получение новостей с серверов 1С, настройки новостей и лент новостей.'")
		);
		НоваяНастройка.ОбновлятьИнтерфейс = Истина;
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"УправлениеНовостями",
			"ИнтернетПоддержкаПользователей",
			НСтр("ru='Управление новостями'"),
			НСтр("ru='Управление настройками новостей, обновление лент новостей и списка новостей.'"),
			"e1cib/command/Обработка.УправлениеНовостями.Команда.КомандаФормаНастроекНовостей"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "РазрешенаРаботаСНовостями";
		НоваяНастройка.Зависимости = "РазрешенаРаботаСНовостями";
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы И РежимРаботы.Локальный Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ВыгрузитьДанныеДляПереходаВСервис",
			"ПереходМеждуЛокальнымИСервиснымРежимамиРаботы",
			НСтр("ru='Перейти в сервис'"),
			НСтр("ru='Вы можете продолжить работу в сервисе со своими данными из этой программы. Для этого необходимо передать или загрузить полученный файл в сервис.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы И РежимРаботы.Локальный Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ЗагрузитьДанныеИзСервиса",
			"ПереходМеждуЛокальнымИСервиснымРежимамиРаботы",
			НСтр("ru='Загрузить из сервиса'"),
			НСтр("ru='Загрузка файла с данными из сервиса. Перед загрузкой необходимо убедится, что версия программы совпадает с версией, из которой выгружались данные.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторПрограммы И РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ВыгрузитьДанныеВЛокальнуюВерсию",
			"ПереходМеждуЛокальнымИСервиснымРежимамиРаботы",
			НСтр("ru='Выгрузить в локальную версию'"),
			НСтр("ru='Вы можете продолжить работу с данным этого приложением в локальной версии. Для этого необходимо загрузить данные программу, которая установлена на вашем компьютере.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.МодельСервиса Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"АвтономнаяРабота",
			"ПереходМеждуЛокальнымИСервиснымРежимамиРаботы",
			НСтр("ru='Автономная работа'"),
			НСтр("ru='Работа с приложением, имеющим плохое подключение сервису'"),
			"e1cib/command/ОбщаяКоманда.АвтономнаяРаботаВМоделиСервиса"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если РежимРаботы.Автономный Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"АвтономнаяРабота_Локально",
			"ПереходМеждуЛокальнымИСервиснымРежимамиРаботы",
			НСтр("ru='Автономная работа'"),
			НСтр("ru='Обмен с приложением в интернете'"),
			"e1cib/command/ОбщаяКоманда.АвтономнаяРабота"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьВерсионированиеОбъектов",
		"ВерсионированиеОбъектов",
		НСтр("ru='Версионирование объектов'"),
		НСтр("ru='Хранение и просмотр версий документов и справочников программы.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкиВерсионированияОбъектов",
		"ВерсионированиеОбъектов",
		НСтр("ru='Настройки версионирования объектов'"),
		НСтр("ru='Настройка вариантов версионирования для документов и справочников.'"),
		"e1cib/list/РегистрСведений.НастройкиВерсионированияОбъектов"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьВерсионированиеОбъектов";
	НоваяНастройка.Зависимости = "ИспользоватьВерсионированиеОбъектов";
	НоваяНастройка.Теги = НСтр("ru='Версионирование'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"ДополнительныеРеквизиты",
		"ДополнительныеРеквизиты",
		НСтр("ru='Дополнительные реквизиты'"),
		НСтр("ru='Создание реквизитов, их изменение, описание свойств.
		|Эти реквизиты отображаются в формах.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Характеристики'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"ДополнительныеСведения",
		"ДополнительныеРеквизиты",
		НСтр("ru='Дополнительные сведения'"),
		НСтр("ru='Создание сведений, их изменение, описание свойств.
		|Эти сведения отображаются в отдельной форме,
		|которая открывается специальной командой.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Характеристики'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьОбщиеДополнительныеЗначения",
		"ДополнительныеРеквизиты",
		НСтр("ru='Реквизиты и сведения с общим списком значений'"),
		НСтр("ru='Разрешить добавление реквизитов, у которых общий список значений с другими реквизитами (команда Добавить - По образцу).'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Характеристики'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьОбщиеДополнительныеРеквизитыИСведения",
		"ДополнительныеРеквизиты",
		НСтр("ru='Общие реквизиты и сведения'"),
		НСтр("ru='Разрешить добавление реквизитов сразу к нескольким объектам программы одновременно (команда Добавить - Общий).'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Характеристики'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьВидыКонтактнойИнформации",
		"КонтактнаяИнформация",
		НСтр("ru='Виды контактной информации'"),
		НСтр("ru='Классификация контактной информации различных объектов системы, например, контрагентов, организаций, сотрудников и т.д.'"),
		"e1cib/list/Справочник.ВидыКонтактнойИнформации"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Контрагенты,Контактные лица'");
	
	Если РежимРаботы.Локальный Или РежимРаботы.Автономный Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "ИсточникДанныхАдресногоКлассификатора";
		НоваяНастройка.Раздел			= "КонтактнаяИнформация";
		НоваяНастройка.Представление	= НСтр("ru='Источник данных адресного классификатора'");
		НоваяНастройка.Описание			= НСтр("ru='• Использовать веб-сервис, предоставляемый фирмой 1С. Требуется постоянное подключение к Интернету.
		|
		|• Использовать данные, загружаемые с сайта 1С или из папки на диске. Возможна работа без подключения к Интернету.'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		НоваяНастройка.СвойстваЭлемента.Вставить("КоличествоКолонок", 1);
		НоваяНастройка.ОбновлятьИнтерфейс = Истина;
		НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
		НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("Сервис1С", НСтр("ru='Использовать веб-сервис 1С для ввода и проверки адресов'"));
		НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить("", НСтр("ru='Загружать классификатор в программу'"));
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
	КонецЕсли;
	
	Если РежимРаботы.Локальный Или РежимРаботы.Автономный Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ЗагрузитьАдресныйКлассификатор",
			"КонтактнаяИнформация",
			НСтр("ru='Загрузить адресный классификатор'"),
			НСтр("ru='Загрузка адресного классификатора с сайта 1С или из папки на диске.'"),
			"e1cib/command/РегистрСведений.АдресныеОбъекты.Команда.ЗагрузитьАдресныйКлассификатор"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
		НоваяНастройка.Зависимости = "ИсточникДанныхАдресногоКлассификатора";
	КонецЕсли;
	
	Если РежимРаботы.Локальный Или РежимРаботы.Автономный Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ОчиститьАдресныйКлассификатор",
			"КонтактнаяИнформация",
			НСтр("ru='Очистить адресные сведения'"),
			НСтр("ru='Удаление загруженных адресных сведений по выбранным неиспользуемым регионам для уменьшения размера базы.'"),
			"e1cib/command/РегистрСведений.АдресныеОбъекты.Команда.ОчиститьАдресныйКлассификатор"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
		НоваяНастройка.Зависимости = "ИсточникДанныхАдресногоКлассификатора";
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПользователиПрограммы",
		"НастройкиПользователейИПрав",
		НСтр("ru='Пользователи'"),
		НСтр("ru='Ведение списка пользователей, которые работают с программой.'"),
		"e1cib/list/Справочник.Пользователи"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	Если Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"НастройкаВходаПользователей",
			"НастройкиПользователейИПрав",
			НСтр("ru='Настройка входа пользователей'"),
			НСтр("ru='Сложность и смена паролей, ограничение работы неактивных пользователей.'")
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкиПользователей",
		"НастройкиПользователейИПрав",
		НСтр("ru='Настройки пользователей'"),
		НСтр("ru='Управление пользовательскими настройками отчетов, внешнего вида программы и прочими настройками.'"),
		"e1cib/app/Обработка.НастройкиПользователей"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"КопированиеНастроекПользователей",
		"НастройкиПользователейИПрав",
		НСтр("ru='Копирование настроек пользователей'"),
		НСтр("ru='Копирование пользовательских настроек между учетными записями.'"),
		"e1cib/command/Обработка.НастройкиПользователей.Команда.КопированиеНастроекПользователей"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОчисткаНастроекПользователей",
		"НастройкиПользователейИПрав",
		НСтр("ru='Очистка настроек'"),
		НСтр("ru='Удаление настроек у всех или выбранных пользователей.'"),
		"e1cib/command/Обработка.НастройкиПользователей.Команда.ОчисткаНастроекПользователей"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ОграничиватьДоступНаУровнеЗаписей",
		"НастройкиПользователейИПрав",
		НСтр("ru='Ограничивать доступ на уровне записей'"),
		НСтр("ru='Расширенная настройка, позволяющая максимально гибко настраивать права доступа к справочникам, документам и другим данным программы в предусмотренных разрезах.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьГруппыДоступаКонтрагентов",
		"НастройкиПользователейИПрав",
		НСтр("ru='Группы доступа контрагентов'"),
		НСтр("ru='Деление контрагентов на группы, по которым можно назначать пользователям права на добавление (изменение), просмотр контрагентов и всех документов по этим контрагентам.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ОграничиватьДоступНаУровнеЗаписей";
	НоваяНастройка.Зависимости = "ОграничиватьДоступНаУровнеЗаписей";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьГруппыДоступаКонтрагентов",
		"НастройкиПользователейИПрав",
		НСтр("ru='Группы доступа контрагентов'"),
		НСтр("ru='Создание групп доступа контрагентов.'"),
		"e1cib/list/Справочник.ГруппыДоступаКонтрагентов"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ОграничиватьДоступНаУровнеЗаписей";
	НоваяНастройка.Зависимости = "ОграничиватьДоступНаУровнеЗаписей,ИспользоватьГруппыДоступаКонтрагентов";
	НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ИнформацияОНастройкеПравДоступа",
		"НастройкиПользователейИПрав",
		НСтр("ru='Подробнее о возможностях прав доступа пользователей'"),
		НСтр("ru='Статья на ресурсе its.1c.ru, в которой подробно описываются возможности и различные варианты настроек прав доступа пользователей.'"),
		"http://its.1c.ru/db/updinfo#content:142:1:issogl2_8"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ОграничениеПравДоступаПоОрганизациям",
		"НастройкиПользователейИПрав",
		НСтр("ru='Ограничение прав доступа по организациям'"),
		НСтр("ru='Если вам действительно важно, чтобы сотрудник видел документы, количественные и суммовые показатели только по своей организации - мы можем запланировать реализацию такого функционала. Важно отметить, что фильтровать по организации можно уже сейчас. Вопрос в том, чтобы ""чужой"" сотрудник не мог увидеть данные не по своей организации, даже если захочет.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ОграничениеПравДоступаПоСкладам",
		"НастройкиПользователейИПрав",
		НСтр("ru='Ограничение прав доступа по складам'"),
		НСтр("ru='Если вам действительно важно, чтобы работники разных филиалов, магазинов или складов видели документы и количественные показатели только по своим складам - мы можем запланировать реализацию такого функционала. Важно отметить, что фильтровать складам можно уже сейчас. Вопрос в том, чтобы ""чужой"" кладовщик не мог увидеть чужие данные даже если захочет.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ОграничениеПравДоступаПоКассам",
		"НастройкиПользователейИПрав",
		НСтр("ru='Ограничение прав доступа по кассам'"),
		НСтр("ru='Если вам действительно важно, чтобы кассир видел документы, количественные и суммовые показатели только по своей кассе - мы можем запланировать реализацию такого функционала. Важно отметить, что фильтровать по кассам можно уже сейчас. Вопрос в том, чтобы ""чужой"" кассир не мог увидеть чужие данные даже если захочет.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ИспользоватьПроверкуКонтрагентов",
			"ПроверкаКонтрагентов",
			НСтр("ru='Автоматически проверять контрагентов по ЕГРН'"),
			НСтр("ru='Включение автоматической проверки может замедлить открытие документов на медленных компьютерах. Для таких компьютеров рекомендуется использовать ручную проверку по кнопке в подменю Еще.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ПодробнееОПроверкеКонтрагентов",
			"ПроверкаКонтрагентов",
			НСтр("ru='Подробнее о сервисе'"),
			НСтр("ru=''"),
			"e1cib/app/Обработка.ИнструкцияПоИспользованиюПроверкиКонтрагента"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "ИспользоватьПроверкуКонтрагентов";
		НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ПроверитьДоступКСервисуПроверкиКонтрагентов",
			"ПроверкаКонтрагентов",
			НСтр("ru='Проверить доступ к веб-сервису'"),
			НСтр("ru=''")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "ИспользоватьПроверкуКонтрагентов";
		НоваяНастройка.Теги = НСтр("ru='Контрагенты'");
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПоискИУдалениеДублей",
		"КорректировкаДанных",
		НСтр("ru='Поиск и удаление дублей'"),
		НСтр("ru='Поиск похожих элементов по заданным условиям сравнения.'"),
		"e1cib/app/Обработка.ПоискИУдалениеДублей"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	Если РежимРаботы.ЭтоАдминистраторПрограммы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ГрупповоеИзменениеРеквизитов",
			"КорректировкаДанных",
			НСтр("ru='Групповое изменение реквизитов'"),
			НСтр("ru='Изменение реквизитов и табличных частей в выбранных элементах.'"),
			"e1cib/app/Обработка.ГрупповоеИзменениеРеквизитов"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторПрограммы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ГрупповоеПерепроведениеДокументов",
			"КорректировкаДанных",
			НСтр("ru='Групповое перепроведение документов'"),
			НСтр("ru='Переход к обработке, предназначеной для группового перепроведения документов.'"),
			"e1cib/app/Обработка.ГрупповоеПерепроведениеДокументов"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОчисткаИсторииОбсуждений",
		"КорректировкаДанных",
		НСтр("ru='Очистка истории обсуждений'"),
		НСтр("ru='Удаление истории изменений объектов и сообщений пользователей в обсуждениях.'"),
		"e1cib/app/Обработка.ОчисткаИсторииОбсуждений"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьДокументыКорректировкиРегистров",
		"КорректировкаДанных",
		НСтр("ru='Список документов ""Корректировка регистров""'"),
		НСтр("ru='Переход к списку документов ""Корректировка регистров"".'"),
		"e1cib/list/Документ.КорректировкаРегистров"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"МакетыПечатныхФорм",
		"ПечатныеФормыОтчетыОбработки",
		НСтр("ru='Макеты печатных форм'"),
		НСтр("ru='Настройка макетов печатных форм документов.'"),
		"e1cib/list/РегистрСведений.ПользовательскиеМакетыПечати"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"ПодменюПечать",
		"ПечатныеФормыОтчетыОбработки",
		НСтр("ru='Подменю ""Печать""'"),
		НСтр("ru='Настройка видимости команд печати в формах.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьВариантыОтчетов",
		"ПечатныеФормыОтчетыОбработки",
		НСтр("ru='Отчеты конфигурации'"),
		НСтр("ru='Просмотр списка всех вариантов отчетов, настройки отчета доступны через контекстное меню.'"),
		"e1cib/command/ОбщаяКоманда.ПанельОтчетов"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	Если РежимРаботы.Локальный Или РежимРаботы.Автономный Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ИспользоватьДополнительныеОтчетыИОбработки",
			"ПечатныеФормыОтчетыОбработки",
			НСтр("ru='Дополнительные отчеты и обработки'"),
			НСтр("ru='Использование внешних печатных форм, отчетов и обработок в дополнение к предусмотренным в программе.'")
		);
		НоваяНастройка.ОбновлятьИнтерфейс = Истина;
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
	КонецЕсли;
	
	Если РежимРаботы.Локальный Или РежимРаботы.Автономный Или Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ОткрытьДополнительныеОтчетыИОбработки",
			"ПечатныеФормыОтчетыОбработки",
			НСтр("ru='Дополнительные отчеты и обработки'"),
			НСтр("ru='Подключение внешних печатных форм, отчетов и обработок в дополнение к предусмотренным в программе.'"),
			"e1cib/list/Справочник.ДополнительныеОтчетыИОбработки"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ИспользоватьДополнительныеОтчетыИОбработки";
		НоваяНастройка.Зависимости = "ИспользоватьДополнительныеОтчетыИОбработки";
	КонецЕсли;
	
	Если ?(РежимРаботы.МодельСервиса, РежимРаботы.ЭтоАдминистраторПрограммы, РежимРаботы.ЭтоАдминистраторСистемы) Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"ДополнительныеОбработкиПоАдминистрированию",
			"ПечатныеФормыОтчетыОбработки",
			НСтр("ru='Дополнительные обработки по администрированию'"),
			НСтр("ru='Команды дополнительных обработок, подключенных к программе.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "ИспользоватьДополнительныеОтчетыИОбработки";
		НоваяНастройка.Зависимости = "ИспользоватьДополнительныеОтчетыИОбработки";
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ОбновитьОтчеты",
			"ПечатныеФормыОтчетыОбработки",
			НСтр("ru='Обновить отчеты'"),
			НСтр("ru='Обновление настроек встроенных и дополнительных отчетов.'"),
			"e1cib/command/ОбщаяКоманда.ОбновитьОтчеты"
		);
		НоваяНастройка.ДобавлятьОтступ = Истина;
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"УниверсальныйОтчет",
		"ПечатныеФормыОтчетыОбработки",
		НСтр("ru='Универсальный отчет'"),
		НСтр("ru='Универсальный отчет по справочникам, документам, регистрам и т.д.'"),
		"e1cib/app/Отчет.УниверсальныйОтчет"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	Если РассылкаОтчетов.ПравоДобавления() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ОткрытьРассылкиОтчетов",
			"ПечатныеФормыОтчетыОбработки",
			НСтр("ru='Рассылки отчетов'"),
			НСтр("ru='Настройка списка рассылок отчетов, отправка по требованию или автоматически по расписанию.'"),
			"e1cib/list/Справочник.РассылкиОтчетов"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"РасширенияПрограммы",
			"ПечатныеФормыОтчетыОбработки",
			НСтр("ru='Расширение возможностей программы'"),
			НСтр("ru='Подключение расширений: разделов, отчетов и обработок в дополнение к предусмотренным в программе.'")
		);
		НоваяНастройка.ДобавлятьОтступ = Истина;
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьНастройкиСистемнойУчетнойЗаписиЭП",
		"Органайзер",
		НСтр("ru='Настройка системной учетной записи почты'"),
		НСтр("ru='Основная учетная запись электронной почты для отправки уведомлений из программы.'"),
		"e1cib/command/ОбщаяКоманда.НастройкаСистемнойУчетнойЗаписиЭлектроннойПочты"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Событие'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьУчетныеЗаписиЭлектроннойПочты",
		"Органайзер",
		НСтр("ru='Учетные записи электронной почты'"),
		НСтр("ru='Настройка учетных записей электронной почты.'"),
		"e1cib/list/Справочник.УчетныеЗаписиЭлектроннойПочты"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Событие'");
	
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"АвтоматическиЗагружатьПочту",
			"Органайзер",
			НСтр("ru='Автоматически загружать почту'"),
			НСтр("ru='Автоматическая загрузка почты по расписанию.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.Теги = НСтр("ru='Событие'");
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"АвтоматическиЗагружатьЭлектроннуюПочтуРасписание",
			"Органайзер",
			НСтр("ru='Расписание'"),
			НСтр("ru='Настройка расписания для загрузки электронной почты.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "АвтоматическиЗагружатьПочту";
		НоваяНастройка.Зависимости = "АвтоматическиЗагружатьПочту";
		НоваяНастройка.Теги = НСтр("ru='Событие'");
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НапоминанияПользователей",
		"Органайзер",
		НСтр("ru='Напоминания пользователей'"),
		НСтр("ru='Переход к списку всех напоминаний всех пользователей. Инструмент предназначен для администраторов приложений.'"),
		"e1cib/list/РегистрСведений.НапоминанияПользователя"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкаОтправкиSMS",
		"Органайзер",
		НСтр("ru='Настройка отправки SMS'"),
		НСтр("ru='Эта настройка используется для отправки SMS сообщений из программы.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"Синхронизации",
		"Органайзер",
		НСтр("ru='Синхронизации Outlook, iCal, CalDav и пр.'"),
		НСтр("ru='В данный момент реализована синхронизация с контактной книгой и календарями Google. Отметьте этот пункт, если вы хотите, чтобы УНФ синхронизировалось с контактной книгой и календарем вашего iPhone.'")
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	НоваяНастройка.Потенциальная = Истина;
	НоваяНастройка.Теги = НСтр("ru='Событие,Контактные лица'");
	
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ХранитьФайлыВТомахНаДиске",
			"НастройкиРаботыСФайлами",
			НСтр("ru='Хранить файлы в томах на диске'"),
			НСтр("ru='Выбор между хранением файлов в информационной базе или в томах на диске.'")
		);
		НоваяНастройка.ОбновлятьИнтерфейс = Истина;
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ТомаХраненияФайлов",
			"НастройкиРаботыСФайлами",
			НСтр("ru='Тома хранения файлов'"),
			НСтр("ru='Настройка подключения к томам (папкам) хранения файлов на файловом сервере.'"),
			"e1cib/list/Справочник.ТомаХраненияФайлов"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
		НоваяНастройка.ВместеС = "ХранитьФайлыВТомахНаДиске";
		НоваяНастройка.Зависимости = "ХранитьФайлыВТомахНаДиске";
	КонецЕсли;
	
	Если РежимРаботы.Локальный Или РежимРаботы.Автономный Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "МаксимальныйРазмерФайла";
		НоваяНастройка.Раздел			= "НастройкиРаботыСФайлами";
		НоваяНастройка.Представление	= НСтр("ru='Максимальный размер файла (Мбайт)'");
		НоваяНастройка.Описание			= НСтр("ru='Ограничение загрузки файлов, превышающих указанный размер.'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Число");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаРегулирования", Истина);
		НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
		НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 8);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если Не (РежимРаботы.Локальный Или РежимРаботы.Автономный) Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "МаксимальныйРазмерФайлаОбластиДанных";
		НоваяНастройка.Раздел			= "НастройкиРаботыСФайлами";
		НоваяНастройка.Представление	= НСтр("ru='Максимальный размер файла (Мбайт)'");
		НоваяНастройка.Описание			= НСтр("ru='Ограничение загрузки файлов, превышающих указанный размер.'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Число");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("КнопкаРегулирования", Истина);
		НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
		НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 8);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкаОчисткиФайлов",
		"НастройкиРаботыСФайлами",
		НСтр("ru='Настройка очистки файлов'"),
		НСтр("ru='Переход к форме, которая позволяет настроить расписание автоматического удаления устаревших присоединенных файлов'"),
		"e1cib/list/РегистрСведений.НастройкиОчисткиФайлов"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "СписокРасширенийТекстовыхФайлов";
	НоваяНастройка.Раздел			= "НастройкиРаботыСФайлами";
	НоваяНастройка.Представление	= НСтр("ru='Расширения текстовых файлов'");
	НоваяНастройка.Описание			= НСтр("ru='Расширения файлов, содержащих текстовые данные (указываются через ""пробел"").'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 40);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "СписокРасширенийФайловOpenDocumentОбластиДанных";
	НоваяНастройка.Раздел			= "НастройкиРаботыСФайлами";
	НоваяНастройка.Представление	= НСтр("ru='Расширения файлов Open Document'");
	НоваяНастройка.Описание			= НСтр("ru='Расширения файлов открытого формата документов (ODF) для офисных приложений (указываются через ""пробел"").'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 40);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ЗапрещатьЗагрузкуФайловПоРасширению",
		"НастройкиРаботыСФайлами",
		НСтр("ru='Запрет загрузки файлов с расширениями'"),
		НСтр("ru=''")
	);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 30);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = ТаблицаНастроек.Добавить();
	НоваяНастройка.Идентификатор	= "СписокЗапрещенныхРасширенийОбластиДанных";
	НоваяНастройка.Раздел			= "НастройкиРаботыСФайлами";
	НоваяНастройка.Представление	= НСтр("ru='Список запрещенных расширений'");
	НоваяНастройка.Описание			= НСтр("ru='Расширения файлов, для которых будет запрещена загрузка в папки программы (указываются через ""пробел"").'");
	НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
	НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
	НоваяНастройка.СвойстваЭлемента	= Новый Структура;
	НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
	НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
	НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	НоваяНастройка.СвойстваЭлемента.Вставить("ПодсказкаВвода", "Список запрещенных расширений");
	НоваяНастройка.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	НоваяНастройка.СвойстваЭлемента.Вставить("Ширина", 40);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ЗапрещатьЗагрузкуФайловПоРасширению";
	НоваяНастройка.Зависимости = "ЗапрещатьЗагрузкуФайловПоРасширению";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьЭлектронныеПодписи2",
		"НастройкиРаботыСФайлами",
		НСтр("ru='Электронная подпись'"),
		НСтр("ru='Разрешить подписание данных для гарантии их неизменности и шифрование данных для надежного ограничения доступа.'")
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьШифрование",
		"НастройкиРаботыСФайлами",
		НСтр("ru='Шифрование'"),
		НСтр("ru=''")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкиКриптографии",
		"НастройкиРаботыСФайлами",
		НСтр("ru='Настройки электронной подписи и шифрования'"),
		НСтр("ru='Настройка параметров для использования средств криптографии: электронной подписи и шифрования.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ИспользоватьШифрование,ИспользоватьЭлектронныеПодписи2";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"СинхронизироватьФайлы",
		"НастройкиРаботыСФайлами",
		НСтр("ru='Синхронизировать файлы с облачными сервисами'"),
		НСтр("ru='Синхронизация с Яндекс.Диск, Box и т.д. для упрощения редактирования файлов.'")
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Файлы'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"НастройкиСинхронизацииФайлов",
		"НастройкиРаботыСФайлами",
		НСтр("ru='Настройки синхронизации файлов'"),
		НСтр("ru='Настройка правил синхронизации файлов.'"),
		"e1cib/list/РегистрСведений.НастройкиСинхронизацииФайлов"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "СинхронизироватьФайлы";
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ФункциональнаяОпцияИспользоватьПодключаемоеОборудование",
		"ПодключаемоеОборудование",
		НСтр("ru='Подключаемое оборудование'"),
		НСтр("ru='Включение позволяет организовать работу с использованием внешнего подключаемого оборудования: весов, принтеров этикеток, терминалов сбора данных и т.д.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Операция по платежным картам,Поступление в кассу,Начальные остатки прочее,Начальные остатки расчетов,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьПодключаемоеОборудование",
		"ПодключаемоеОборудование",
		НСтр("ru='Подключаемое оборудование'"),
		НСтр("ru='Подключение и настройка используемого оборудования.'"),
		"e1cib/command/Справочник.ПодключаемоеОборудование.Команда.ОткрытьПодключаемоеОборудование"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование";
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Начальные остатки прочее,Начальные остатки расчетов,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ОткрытьРабочиеМеста",
		"ПодключаемоеОборудование",
		НСтр("ru='Открыть рабочие места'"),
		НСтр("ru='Переход к списку рабочих мест.'"),
		"e1cib/list/Справочник.РабочиеМеста"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование";
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя,Начальные остатки прочее,Начальные остатки расчетов,Начальные остатки товаров,Ввод начальных остатков'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
		"ИспользоватьОбменСПодключаемымОборудованиемOffline",
		"ПодключаемоеОборудование",
		НСтр("ru='Обмен с подключаемым оборудованием offline'"),
		НСтр("ru='Включение опции необходимо для использования касс ККМ, весов с печатью этикеток.'")
	);
	НоваяНастройка.ОбновлятьИнтерфейс = Истина;
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование";
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПравилаОбменаСПодключаемымОборудованием",
		"ПодключаемоеОборудование",
		НСтр("ru='Правила обмена с подключаемым оборудованием'"),
		НСтр("ru='Правила обмена используются при работе с кассами ККМ и электронными весами, которые работают в режиме OffLine.'"),
		"e1cib/list/Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	НоваяНастройка.ВместеС = "ИспользоватьОбменСПодключаемымОборудованиемOffline";
	НоваяНастройка.Зависимости = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование,ИспользоватьОбменСПодключаемымОборудованиемOffline";
	НоваяНастройка.Теги = НСтр("ru='Заказ покупателя'");
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПодробнееОПодключенииКассКФискальномуРегистратору",
		"ПодключаемоеОборудование",
		НСтр("ru='Подключить кассы к оператору фискальных данных (54-ФЗ)'"),
		НСтр("ru=''"),
		"http://v8.1c.ru/cnt.jsp/:kd_unf:/https://portal.1c.ru/applications/56"
	);
	НоваяНастройка.ДобавлятьОтступ = Истина;
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ПодробнееО54ФЗ",
		"ПодключаемоеОборудование",
		НСтр("ru='Все о 54-ФЗ и переходе на онлайн-ККТ'"),
		НСтр("ru=''"),
		"http://v8.1c.ru/cnt.jsp/:kd_unf:/http://v8.1c.ru/kkt/"
	);
	НоваяНастройка.ПравоРедактирования = Истина;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
		"ЗащитаПерсональныхДанных",
		"ЗащитаПерсональныхДанных",
		НСтр("ru='Защита персональных данных'"),
		НСтр("ru='Просмотр обращений к персональным данным выбранных объектов программы.'"),
		"e1cib/command/Обработка.ЗащитаПерсональныхДанных.Команда.ЗащитаПерсональныхДанных"
	);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	
	НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
		"НастройкиРегистрацииСобытийДоступаКПерсональнымДанным",
		"ЗащитаПерсональныхДанных",
		НСтр("ru='Настройки регистрации событий доступа к персональным данным'"),
		НСтр("ru='Регистрация событий доступа в соответствии с требованиями Федерального закона от 27.07.2006 N152-ФЗ ""О персональных данных""'")
	);
	НоваяНастройка.СвойстваЭлемента.Вставить("Высота", 1);
	НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторСистемы;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "ОтправлятьДанныеВЦентрМониторинга";
		НоваяНастройка.Раздел			= "ОценкаПроизводительностиИЦентрМониторинга";
		НоваяНастройка.Представление	= НСтр("ru='Отправлять данные в центр мониторинга'");
		НоваяНастройка.Описание			= НСтр("ru='Статистические отчеты позволяют нам определить наиболее востребованные механизмы в программе. Их мы стараемся улучшить в первую очередь.
		|
		|Собранные сведения являются обезличенными и содержат только статистические показатели. Подготовка и отправка отчетов не замедлит работу программы.'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Число");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Подсказка", НоваяНастройка.Описание);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеПереключателя);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("КоличествоКолонок", 1);
		НоваяНастройка.СвойстваЭлемента.Вставить("СписокВыбора", Новый СписокЗначений);
		НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(0, НСтр("ru='Разрешить отправку сведений в фирму ""1С""'"));
		НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(1, НСтр("ru='Разрешить отправку сведений стороннему разработчику'"));
		НоваяНастройка.СвойстваЭлемента.СписокВыбора.Добавить(2, НСтр("ru='Запретить отправку сведений'"));
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "АдресСервисаЦентраМониторинга";
		НоваяНастройка.Раздел			= "ОценкаПроизводительностиИЦентрМониторинга";
		НоваяНастройка.Представление	= НСтр("ru='Адрес сервиса центра мониторинга'");
		НоваяНастройка.ТипРеквизита		= Новый ОписаниеТипов("Строка");
		НоваяНастройка.ТипЭлемента		= Тип("ПолеФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		НоваяНастройка.СвойстваЭлемента.Вставить("ПодсказкаВвода", "Адрес сервиса");
		НоваяНастройка.СвойстваЭлемента.Вставить("АвтоМаксимальнаяШирина", Ложь);
		НоваяНастройка.СвойстваЭлемента.Вставить("МаксимальнаяШирина", 60);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "ОтправлятьДанныеВЦентрМониторинга";
		НоваяНастройка.Зависимости = "ОтправлятьДанныеВЦентрМониторинга";
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"ВыполнятьЗамерыПроизводительности",
			"ОценкаПроизводительностиИЦентрМониторинга",
			НСтр("ru='Выполнять замеры производительности'"),
			НСтр("ru='Оценка интегральной производительности программы по методике APDEX.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"ОценкаПроизводительности",
			"ОценкаПроизводительностиИЦентрМониторинга",
			НСтр("ru='Показатели производительности'"),
			НСтр("ru='Просмотр и оценка результатов замеров производительности.'"),
			"e1cib/app/Обработка.ОценкаПроизводительности"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "ВыполнятьЗамерыПроизводительности";
		НоваяНастройка.Зависимости = "ВыполнятьЗамерыПроизводительности";
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"НастройкиОценкиПроизводительности",
			"ОценкаПроизводительностиИЦентрМониторинга",
			НСтр("ru='Настройки оценки производительности'"),
			НСтр("ru='Настройки параметров оценки производительности.'"),
			"e1cib/command/Обработка.ОценкаПроизводительности.Команда.НастройкиОценкиПроизводительности"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "ВыполнятьЗамерыПроизводительности";
		НоваяНастройка.Зависимости = "ВыполнятьЗамерыПроизводительности";
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"РегламентныеИФоновыеЗадания",
			"РегламентныеОперации",
			НСтр("ru='Регламентные и фоновые задания'"),
			НСтр("ru='Планирование и запуск регламентных заданий.'"),
			"e1cib/app/Обработка.РегламентныеИФоновыеЗадания"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"РазблокироватьРаботуСВнешнимиРесурсами",
			"РегламентныеОперации",
			НСтр("ru='Разблокировать работу с внешними ресурсами'"),
			НСтр("ru='Работа со всеми внешними ресурсами (синхронизация данных, отправка почты и т.п.), выполняемая по расписанию заблокирована для предотвращения конфликтов с основной информационной базой.'"),
			"e1cib/command/ОбщаяКоманда.РазблокироватьРаботуСВнешнимиРесурсами"
		);
		НоваяНастройка.ПравоРедактирования = РежимРаботы.ЭтоАдминистраторПрограммы;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторПрограммы И (РежимРаботы.Локальный Или РежимРаботы.Автономный) Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуГиперссылкаНавигации(ТаблицаНастроек,
			"УправлениеИтогамиИАгрегатами",
			"РегламентныеОперации",
			НСтр("ru='Управление итогами и агрегатами'"),
			НСтр("ru='Установка периода рассчитанных итогов.
		|Перестройка, заполнение и оптимизация агрегатов.'"),
			"e1cib/app/Обработка.УправлениеИтогамиИАгрегатами"
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуКоманда(ТаблицаНастроек,
			"УправлениеПолнотекстовымПоискомИИзвлечениемТекстов",
			"РегламентныеОперации",
			НСтр("ru='Управление полнотекстовым поиском'"),
			НСтр("ru='Обновление и очистка индекса полнотекстового поиска.
		|Управление извлечением текстов из файлов.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = Обработки.НастройкаПрограммы.ДобавитьНастройкуФлаг(ТаблицаНастроек,
			"АвтоматическоеУдалениеПомеченных",
			"РегламентныеОперации",
			НСтр("ru='Автоматически удалять помеченные объекты по расписанию'"),
			НСтр("ru='Включение позволяет выполнять автоматическое удаление объектов, помеченных на удаление, в соответствии с заданным расписанием.'")
		);
		НоваяНастройка.ПравоРедактирования = Истина;
	КонецЕсли;
	
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		НоваяНастройка = ТаблицаНастроек.Добавить();
		НоваяНастройка.Идентификатор	= "УдалениеПомеченныхРасписание";
		НоваяНастройка.Раздел			= "РегламентныеОперации";
		НоваяНастройка.Представление	= НСтр("ru='Расписание'");
		НоваяНастройка.ТипЭлемента		= Тип("ДекорацияФормы");
		НоваяНастройка.СвойстваЭлемента	= Новый Структура;
		НоваяНастройка.СвойстваЭлемента.Вставить("Заголовок", НоваяНастройка.Представление);
		НоваяНастройка.СвойстваЭлемента.Вставить("Вид", ВидДекорацииФормы.Надпись);
		НоваяНастройка.СвойстваЭлемента.Вставить("Гиперссылка", Истина);
		НоваяНастройка.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		НоваяНастройка.ПравоРедактирования = Истина;
		НоваяНастройка.ВместеС = "АвтоматическоеУдалениеПомеченных";
		НоваяНастройка.Зависимости = "АвтоматическоеУдалениеПомеченных";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебныхСобытий

Процедура ПриПолученииЗначенияНастройки(знач Идентификатор, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Идентификатор = "ДействиеТекущегоЗвонкаНайденногоАбонента" Тогда
		
		Значение = ТелефонияСервер.ПолучитьНастройкиТелефонии().ДействиеТекущегоЗвонкаНайденногоАбонента;
		
	ИначеЕсли Идентификатор = "ДействиеТекущегоЗвонкаНеизвестногоАбонента" Тогда
		
		Значение = ТелефонияСервер.ПолучитьНастройкиТелефонии().ДействиеТекущегоЗвонкаНеизвестногоАбонента;
		
	ИначеЕсли Идентификатор = "ОтправкаЭлектронныхЧековПослеПробитияЧека" Тогда
		
		Значение = Число(Не Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Получить());
		
	ИначеЕсли Идентификатор = "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
		Значение = ?(РегЗадание = Неопределено, Неопределено, РегЗадание.Использование);
		
	ИначеЕсли Идентификатор = "ИспользоватьРемонты2" Тогда
		
		Значение = Константы.ИспользоватьРемонты.Получить();
		
	ИначеЕсли Идентификатор = "ОтправлятьСлепыеКопииПисем" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтправкиСкрытыхКопий", "ОтправлятьСлепыеКопииПисем", Ложь);
		
	ИначеЕсли Идентификатор = "АдресПолучателяСкрытойКопии" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтправкиСкрытыхКопий", "АдресПолучателяСкрытойКопии", "");
		
	ИначеЕсли Идентификатор = "ИмяОтправителяSMS" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиSMS", "ИмяОтправителяSMS", "");
		
	ИначеЕсли Идентификатор = "ПерсональноеМобильноеУстройство" Тогда
		
		Значение = ТелефонияСервер.ПерсональноеМобильноеУстройство();
		
	ИначеЕсли Идентификатор = "ЗагрузкаКонтактовGoogle" Тогда
		
		ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(Пользователи.ТекущийПользователь());
		Значение = ОтключенныеОбластиДоступа.Найти(Перечисления.ОбластиДоступаGoogle.Контакты) = Неопределено;
		Если Значение И РегистрыСведений.СчетчикиПодсказок.ПревышеноЗначение(Перечисления.ВидыПодсказок.Google, 5,,, Ложь) Тогда
			Значение = Ложь;
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "СинхронизацияКалендаряGoogle" Тогда
		
		ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(Пользователи.ТекущийПользователь());
		Значение = ОтключенныеОбластиДоступа.Найти(Перечисления.ОбластиДоступаGoogle.Календарь) = Неопределено;
		
	ИначеЕсли Идентификатор = "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", Истина);
		
	ИначеЕсли Идентификатор = "СпрашиватьРежимРедактированияПриОткрытииФайла" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Истина);
		
	ИначеЕсли Идентификатор = "ПоказыватьПодсказкиПриРедактированииФайлов" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ПоказыватьПодсказкиПриРедактированииФайлов", Истина);
		
	ИначеЕсли Идентификатор = "ДействиеСФайламиПоДвойномуЩелчкуМыши" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл);
		
	ИначеЕсли Идентификатор = "СпособСравненияВерсийФайлов" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord);
		
	ИначеЕсли Идентификатор = "ПодтверждениеПриЗавершенииПрограммы" Тогда
		
		Значение = СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
		
	ИначеЕсли Идентификатор = "КонтрольДоговоровПриПроведенииДокументов" Тогда
		
		Значение = ?(Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить(), 1, 0);
		
	ИначеЕсли Идентификатор = "АвтоматическаяОтправкаЭД" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОтправкаОформленныхЭД);
		Значение = ?(РегЗадание = Неопределено, Неопределено, РегЗадание.Использование);
		
	ИначеЕсли Идентификатор = "АвтоматическоеПолучениеЭД" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ПолучениеНовыхЭД);
		Значение = ?(РегЗадание = Неопределено, Неопределено, РегЗадание.Использование);
		
	ИначеЕсли Идентификатор = "ЧасовойПоясПрограммы" Тогда
		
		Значение = ПолучитьЧасовойПоясИнформационнойБазы();
		Если ПустаяСтрока(Значение) Тогда
			Значение = ЧасовойПояс();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "КаталогДистрибутиваПлатформы" Тогда
		
		Каталог = ПолучениеОбновленийПрограммы.КаталогСохраненияПоследнегоПолученногоДистрибутива();
		Значение = ?(ПустаяСтрока(Каталог), НСтр("ru='<Еще не сохранялся>'"), Каталог);
		
	ИначеЕсли Идентификатор = "АвтоматическиЗагружатьПочту" Тогда
		
		РегЗадание = РегистрыСведений.ЗаданияОбменаСGoogle.РегламентноеЗадание(Перечисления.ОбластиДоступаGoogle.Почта);
		Значение = ?(РегЗадание = Неопределено, Ложь, РегЗадание.Использование);
		
	ИначеЕсли Идентификатор = "МаксимальныйРазмерФайла" Тогда
		
		Значение = ФайловыеФункции.МаксимальныйРазмерФайлаОбщий() / (1024*1024);
		
	ИначеЕсли Идентификатор = "МаксимальныйРазмерФайлаОбластиДанных" Тогда
		
		Значение = ФайловыеФункции.МаксимальныйРазмерФайла() / (1024*1024);
		
	ИначеЕсли Идентификатор = "ИспользоватьЭлектронныеПодписи2" Тогда
		
		Значение = Константы.ИспользоватьЭлектронныеПодписи.Получить();
		
	ИначеЕсли Идентификатор = "ОтправлятьДанныеВЦентрМониторинга" Тогда
		
		Значение = УправлениеНебольшойФирмойСервер.ПолучитьПереключательОтправкиДанных();
		
	ИначеЕсли Идентификатор = "АдресСервисаЦентраМониторинга" Тогда
		
		Значение = УправлениеНебольшойФирмойСервер.ПолучитьАдресСервисаЦентраМониторинга();
		
	ИначеЕсли Идентификатор = "АвтоматическоеУдалениеПомеченных" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УдалениеПомеченных);
		Значение = ?(РегЗадание = Неопределено, Неопределено, РегЗадание.Использование);
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриПроверкеКорректностиНастройки(знач Идентификатор, НовоеЗначение, ТекстОшибки, Отказ) Экспорт
	
	Если Идентификатор = "ИспользоватьНесколькоОрганизаций" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьИспользоватьНесколькоОрганизаций();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "УчетПоКомпании" Тогда
		
		Если НовоеЗначение Тогда
			Если УправлениеНебольшойФирмойСервер.ЕстьДвиженияПоДругимОрганизациям(Справочники.Организации.ОсновнаяОрганизация) Тогда
				ТекстОшибки = НСтр("ru='В базе есть движения по организации, отличной от основной. Для включения опции необходимо очистить данные по прочим организациям.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьУчетПоКомпании();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "Компания" Тогда
		
		Если Не ЗначениеЗаполнено(НовоеЗначение) И Константы.УчетПоКомпании.Получить() Тогда
			ТекстОшибки = НСтр("ru='Не заполнена организация-компания для ведения учета по компании'");
		ИначеЕсли НовоеЗначение <> Константы.Компания.Получить() Тогда
			Если УправлениеНебольшойФирмойСервер.ЕстьДвиженияПоДругимОрганизациям(НовоеЗначение) Тогда
				ТекстОшибки = НСтр("ru='В базе есть движения по организации, отличной от выбранной. Для включения опции необходимо очистить данные по прочим организациям.'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетПоНесколькимПодразделениям" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И Справочники.СтруктурныеЕдиницы.КоличествоСтруктурныхЕдиниц(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение, Ложь) > 0 Тогда
			
			ТекстОшибки = НСтр("ru='В базе имеются подразделения, отличные от основного! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить()
			И Справочники.НаправленияДеятельности.КоличествоНаправленийДеятельности(Ложь, Ложь) > 0 Тогда
			
			ТекстОшибки = НСтр("ru='В базе имеются направления деятельности, отличные от основного! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов" Тогда
		
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Получить()
			И Не ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям")
			И РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоЭквайрингу() Тогда
			
			ТекстОшибки = НСтр("ru = 'Регистр накопления ""Расчеты по эквайрингу"" содержит информацию об эквайринговых операциях! Установка опции запрещена!
						|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетВнеоборотныхАктивов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетВнеоборотныхАктивов.Получить()
			И Справочники.ВнеоборотныеАктивы.ЕстьДвиженияПоВнеоборотнымАктивам() Тогда
			
			ТекстОшибки = НСтр("ru='В базе присутствуют движения по внеоборотным активам! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьДисконтныеКарты" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьДисконтныеКарты();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПередачаТоваровНаКомиссию" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПередачаТоваровНаКомиссию();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПриемТоваровНаКомиссию" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПриемТоваровНаКомиссию();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ИспользоватьРемонты" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьРемонты.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьРемонты();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ИспользоватьВидыЗаказовПокупателей" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказовПокупателей();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетРозничныхПродаж" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетРозничныхПродаж();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Получить() Тогда
		ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле();
КонецЕсли;
		
	ИначеЕсли Идентификатор = "ИспользоватьБиллинг" Тогда
		
		Если НЕ НовоеЗначение И Справочники.ДоговорыКонтрагентов.ЕстьДоговорыОбслуживания() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются договоры обслуживания! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Тогда
		
		Если НЕ НовоеЗначение И Справочники.ДоговорыКонтрагентов.ЕстьДоговорыОбслуживанияСУникальнымиНаправлениямиДеятельности() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются договоры обслуживания с выбранными направлениями деятельности! Снятие опции запрещено!'");
		КонецЕсли;
		Если НЕ НовоеЗначение И Справочники.ТарифныеПланыДоговоровОбслуживания.ЕстьТарифныеПланыСУчетомЗатрат() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются тарифные планы с заданными правилами выставления затрат! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетПоНесколькимСкладам" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятиеУчетПоНесколькимСкладам();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьХарактеристики" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьПартии" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПартии.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПартии();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ИспользоватьСерийныеНомера" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьСерийныеНомера.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСерийныеНомера();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "КонтрольОстатковСерийныхНомеров" Тогда
		
		Если НовоеЗначение = Ложь И 
	Константы.КонтрольОстатковСерийныхНомеров.Получить()=Истина Тогда
	ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСерийныеНомера();
КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетГТД" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетГТД.Получить()
			И РегистрыНакопления.ЗапасыВРазрезеГТД.ЕстьОстаткиПоЗапасамВРазрезеГТД() Тогда
			
			ТекстОшибки = НСтр("ru='В базе есть остатки по запасам в разрезе ГТД. Снятие флага запрещено!'");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "КонтролироватьОстаткиПоНомерамГТД" Тогда
		
			Если НЕ ГрузовыеТаможенныеДекларацииСервер.МожноВключитьКонтролироватьОстаткиПоНомерамГТД() Тогда
		ТекстОшибки = НСтр("ru='Нельзя изменить значение опции Контроль остатков в разрезе ГТД, потому что в программе зафиксированы отрицательные остатки по ГТД.'");
	КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетЦенКонтрагентов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетЦенКонтрагентов.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияРезервированиеЗапасов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияРезервированиеЗапасов();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПриемЗапасовНаОтветхранение" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПриемЗапасовНаОтветхранение.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПриемЗапасовНаОтветхранение();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПередачаСырьяВПереработку" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаСырьяВПереработку.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПередачаСырьяВПереработку();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПередачаЗапасовНаОтветхранение" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаЗапасовНаОтветхранение.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПередачаЗапасовНаОтветхранение();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьОрдерныйСклад" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьОрдерныйСклад.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьОрдерныйСклад();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетПоЯчейкам" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетПоЯчейкам();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ИспользоватьВидыЗаказНарядов" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказНарядов();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ИспользоватьРемонты2" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьРемонты.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьРемонты();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьТехоперации" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьТехоперации();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПереработкаДавальческогоСырья" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПереработкаДавальческогоСырья();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяУчетВалютныхОпераций" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяУчетВалютныхОпераций.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяУчетВалютныхОпераций();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ВалютаУчета" Тогда
		
		ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказИзменитьВалютаУчета();
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств.Получить() Тогда
	ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяИспользоватьСтатьиДвиженияДенежныхСредств();
КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияКредитыИЗаймы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияКредитыИЗаймы.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияКредитыИЗаймы();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьСовместительство" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСовместительство();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "АдресПолучателяСкрытойКопии" Тогда
		
		ТекстОшибки = СобытияУНФКлиентСервер.ПроверитьКорректностьАдресаЭлектроннойПочты(НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ИдентификацияПриложенияGoogle" Тогда
		
		Если Не ПустаяСтрока(НовоеЗначение) Тогда
			ТекстОшибки = ОбменСGoogle.ИдентификацияПриложенияGoogleКорректна(НовоеЗначение);
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьОбменССайтами" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьОбменССайтами.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьИспользоватьОбменССайтом();
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "АвтоматическиЗагружатьПочту" Тогда
		
		РегЗадание = РегистрыСведений.ЗаданияОбменаСGoogle.РегламентноеЗадание(Перечисления.ОбластиДоступаGoogle.Почта);
	Если РегЗадание = Неопределено Тогда
		ТекстОшибки = "Учетная запись электронной почты не подключена";
	КонецЕсли;

		
	ИначеЕсли Идентификатор = "МаксимальныйРазмерФайла" Тогда
		
		ТекстОшибки = ?(НовоеЗначение = 0, НСтр("ru='Поле ""Максимальный размер файла"" не заполнено.'"),"");
		
	ИначеЕсли Идентификатор = "МаксимальныйРазмерФайлаОбластиДанных" Тогда
		
		ТекстОшибки = ?(НовоеЗначение = 0, НСтр("ru='Поле ""Максимальный размер файла"" не заполнено.'"),"");
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодключаемоеОборудование();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеЗначенияНастройки(знач Идентификатор, НовоеЗначение, ОповещенияНаКлиенте, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Идентификатор = "ИспользоватьНесколькоОрганизаций" Тогда
		
		СтандартнаяОбработка = Истина;
		Если Не НовоеЗначение Тогда
			Константы.УчетПоКомпании.Установить(Ложь);
			Константы.Компания.Установить(Справочники.Организации.ПустаяСсылка());
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "УчетПоКомпании");
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "Компания");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "УчетПоКомпании" Тогда
		
		СтандартнаяОбработка = Истина;
		Если НовоеЗначение И Не ЗначениеЗаполнено(Константы.Компания.Получить()) Тогда
			Константы.Компания.Установить(Справочники.Организации.ОсновнаяОрганизация);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "Компания");
		ИначеЕсли Не НовоеЗначение Тогда
			Константы.Компания.Установить(Справочники.Организации.ПустаяСсылка());
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "Компания");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов" Тогда
		
		СтандартнаяОбработка = Истина;
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Установить(Истина);
			Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Установить(Истина);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям");
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ВестиУчетМаркировкиПродукцииВГИСМ" Тогда
		
		СтандартнаяОбработка = Истина;
		Если НовоеЗначение Тогда
			Константы.ИспользоватьСерийныеНомера.Установить(Истина);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ИспользоватьСерийныеНомера");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ДействиеТекущегоЗвонкаНайденногоАбонента" Тогда
		
		ТелефонияСервер.УстановитьНастройкуТелефонии("ДействиеТекущегоЗвонкаНайденногоАбонента", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ДействиеТекущегоЗвонкаНеизвестногоАбонента" Тогда
		
		ТелефонияСервер.УстановитьНастройкуТелефонии("ДействиеТекущегоЗвонкаНеизвестногоАбонента", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьДисконтныеКарты" Тогда
		
		СтандартнаяОбработка = Истина;
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Установить(Истина);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек" Тогда
		
		Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Установить(НовоеЗначение);
Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле.Установить(НовоеЗначение И Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить());
		
	ИначеЕсли Идентификатор = "ОтправкаЭлектронныхЧековПослеПробитияЧека" Тогда
		
		ОтправкаЭлектронныхЧековПослеПробития = Не Булево(НовоеЗначение);
		Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Установить(ОтправкаЭлектронныхЧековПослеПробития);
		Если ОтправкаЭлектронныхЧековПослеПробития Тогда
			РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
			РегЗадание.Использование = НовоеЗначение;
			РегЗадание.Записать();
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	ИначеЕсли Идентификатор = "ИспользоватьБиллинг" Тогда
		
		Константы.ИспользоватьБиллинг.Установить(НовоеЗначение);
		Если НовоеЗначение = Ложь Тогда
			Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Установить(Ложь);
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Тогда
		
		Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Установить(НовоеЗначение);
Если НовоеЗначение И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
			Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Установить(НовоеЗначение);
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "БиллингГоловноеНаправлениеДеятельности" Тогда
		
		Константы.БиллингГоловноеНаправлениеДеятельности.Установить(НовоеЗначение);
		Справочники.НаправленияДеятельности.СгруппироватьНаправленияДеятельностиДоговоровОбслуживания();
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияУчетПоЯчейкам" Тогда
		
		Если НовоеЗначение = Истина И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Установить(Истина);
		КонецЕсли;
Константы.ФункциональнаяОпцияУчетПоЯчейкам.Установить(НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ИспользоватьРемонты2" Тогда
		
		Константы.ИспользоватьРемонты.Установить(НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Тогда
		
		СтандартнаяОбработка = Истина;
		Если НовоеЗначение = Ложь Тогда
			Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Установить(Ложь);
			Константы.ФункциональнаяОпцияИспользоватьТехоперации.Установить(Ложь);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияПереработкаДавальческогоСырья");
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияИспользоватьТехоперации");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером" Тогда
		
		СтандартнаяОбработка = Истина;
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Получить() = Истина Тогда
			Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Установить(Ложь);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Тогда
		
		СтандартнаяОбработка = Истина;
		Если НовоеЗначение = Ложь Тогда
			Константы.ФункциональнаяОпцияИспользоватьСовместительство.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиШтатноеРасписание.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Установить(Ложь);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияИспользоватьСовместительство");
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияВестиШтатноеРасписание");
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ОтправлятьСлепыеКопииПисем" Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПараметрыОтправкиСкрытыхКопий", "ОтправлятьСлепыеКопииПисем", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "АдресПолучателяСкрытойКопии" Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПараметрыОтправкиСкрытыхКопий", "АдресПолучателяСкрытойКопии", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ИмяОтправителяSMS" Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиSMS", "ИмяОтправителяSMS", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ПерсональноеМобильноеУстройство" Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиТелефонии", "УзелОбмена", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ЗагрузкаКонтактовGoogle" Тогда
		
		Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "ОчиститьСеансовыеДанные", Новый Структура, Идентификатор);
		
		РегистрыСведений.СчетчикиПодсказок.Сбросить(Перечисления.ВидыПодсказок.Google);
		РегистрыСведений.СеансовыеДанныеGoogle.ОтключитьОбластьДоступа(
			Пользователи.ТекущийПользователь(),
			Перечисления.ОбластиДоступаGoogle.Контакты,
			Не НовоеЗначение);
		
	ИначеЕсли Идентификатор = "СинхронизацияКалендаряGoogle" Тогда
		
		Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "ОчиститьСеансовыеДанные", Новый Структура, Идентификатор);
		
		РегистрыСведений.СеансовыеДанныеGoogle.ОтключитьОбластьДоступа(
			Пользователи.ТекущийПользователь(),
			Перечисления.ОбластиДоступаGoogle.Календарь,
			Не НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "СпрашиватьРежимРедактированияПриОткрытииФайла" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ПоказыватьПодсказкиПриРедактированииФайлов" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "ПоказыватьПодсказкиПриРедактированииФайлов", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ДействиеСФайламиПоДвойномуЩелчкуМыши" Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "СпособСравненияВерсийФайлов" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ПодтверждениеПриЗавершенииПрограммы" Тогда
		
		ОбщегоНазначения.СохранитьПерсональныеНастройки(Новый Структура("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", НовоеЗначение));
		
	ИначеЕсли Идентификатор = "КонтрольДоговоровПриПроведенииДокументов" Тогда
		
		Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Установить(НовоеЗначение = 1);
		
	ИначеЕсли Идентификатор = "АвтоматическаяОтправкаЭД" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОтправкаОформленныхЭД);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	ИначеЕсли Идентификатор = "АвтоматическоеПолучениеЭД" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ПолучениеНовыхЭД);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	ИначеЕсли Идентификатор = "ЧасовойПоясПрограммы" Тогда
		
		Если НовоеЗначение <> ПолучитьЧасовойПоясИнформационнойБазы() Тогда 
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ОбщегоНазначения.ЗаблокироватьИБ();
				УстановитьЧасовойПоясИнформационнойБазы(НовоеЗначение);
				ОбщегоНазначения.РазблокироватьИБ();
			Исключение
				ОбщегоНазначения.РазблокироватьИБ();
				ВызватьИсключение;
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьЧасовойПоясСеанса(НовоеЗначение);
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ОграничиватьДоступНаУровнеЗаписей" Тогда
		
		СтандартнаяОбработка = Истина;
		Если НовоеЗначение = Ложь Тогда
			Константы.ИспользоватьГруппыДоступаКонтрагентов.Установить(Ложь);
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "ИспользоватьГруппыДоступаКонтрагентов");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ИспользоватьПроверкуКонтрагентов" Тогда
		
		ПроверкаКонтрагентовВызовСервера.ПриВключенииВыключенииПроверки(НовоеЗначение = 1);
		
	ИначеЕсли Идентификатор = "АвтоматическиЗагружатьПочту" Тогда
		
		РегЗадание = РегистрыСведений.ЗаданияОбменаСGoogle.РегламентноеЗадание(Перечисления.ОбластиДоступаGoogle.Почта);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	ИначеЕсли Идентификатор = "МаксимальныйРазмерФайла" Тогда
		
		Константы.МаксимальныйРазмерФайла.Установить(НовоеЗначение * 1024 * 1024);
		
	ИначеЕсли Идентификатор = "МаксимальныйРазмерФайлаОбластиДанных" Тогда
		
		Константы.МаксимальныйРазмерФайлаОбластиДанных.Установить(НовоеЗначение * 1024 * 1024);
		
	ИначеЕсли Идентификатор = "ИспользоватьЭлектронныеПодписи2" Тогда
		
		Константы.ИспользоватьЭлектронныеПодписи.Установить(НовоеЗначение);
		
	ИначеЕсли Идентификатор = "ОтправлятьДанныеВЦентрМониторинга" Тогда
		
		УправлениеНебольшойФирмойСервер.УстановитьПереключательОтправкиДанных(НовоеЗначение);
		Если НовоеЗначение = 0 Или НовоеЗначение = 2 Тогда
			Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "Запись_НаборКонстант", Новый Структура, "АдресСервисаЦентраМониторинга");
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "АдресСервисаЦентраМониторинга" Тогда
		
		УправлениеНебольшойФирмойСервер.УстановитьАдресСервисаЦентраМониторинга(НовоеЗначение);
		
	ИначеЕсли Идентификатор = "АвтоматическоеУдалениеПомеченных" Тогда
		
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УдалениеПомеченных);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриОпределенииДоступности(знач Идентификатор, ЭлементФормы, Форма) Экспорт
	
	Если Идентификатор = "УчетПоКомпании" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьНесколькоОрганизаций;
		
	ИначеЕсли Идентификатор = "Компания" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьНесколькоОрганизаций И Форма.УчетПоКомпании;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьДисконтныеКарты" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПриемТоваровНаКомиссию" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПартии;
		
	ИначеЕсли Идентификатор = "ОткрытьСправочникВидыЗаказовПокупателей" Тогда
		
		ЭлементФормы.Видимость = Форма.ИспользоватьВидыЗаказовПокупателей;
		
	ИначеЕсли Идентификатор = "АрхивироватьЧекиККМПриЗакрытииКассовойСмены" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "КонтролироватьОстаткиПриПробитииЧековККМ" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "ОтправкаЭлектронныхЧековПослеПробитияЧека" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж И Форма.ОтправкаЭлектронныхЧековПослеПробитияЧека = 1;
		
	ИначеЕсли Идентификатор = "ИспользоватьОбменСКассойMinikassir" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "РассылкаЭлектронныхЧековРасписание" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж И Форма.ОтправкаЭлектронныхЧековПослеПробитияЧека = 1 И Форма.АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию;
		
	ИначеЕсли Идентификатор = "ОткрытьОчередьЭлектронныхЧеков" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьБиллинг;
		
	ИначеЕсли Идентификатор = "БиллингГоловноеНаправлениеДеятельности" Тогда
		
		ЭлементФормы.Доступность = Форма.БиллингВестиУчетРасходовПоДоговорамОбслуживания;
		
	ИначеЕсли Идентификатор = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж;
		
	ИначеЕсли Идентификатор = "ДатаНачалаРегистрацииРозничныхПродажВЕГАИС" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж И Форма.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
		
	ИначеЕсли Идентификатор = "ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС" Тогда
		
		ЭлементФормы.Доступность = Форма.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
		
	ИначеЕсли Идентификатор = "НастройкиОбменаЕГАИС" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетРозничныхПродаж И Форма.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
		
	ИначеЕсли Идентификатор = "КонтрольОстатковСерийныхНомеров" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьСерийныеНомера
		
	ИначеЕсли Идентификатор = "КонтролироватьОстаткиПоНомерамГТД" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияУчетГТД;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПриемЗапасовНаОтветхранение" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПартии;
		
	ИначеЕсли Идентификатор = "ИспользоватьВидыЗаказНарядов" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
		
	ИначеЕсли Идентификатор = "ОткрытьСправочникВидыЗаказНарядов" Тогда
		
		ЭлементФормы.Видимость = Форма.ИспользоватьВидыЗаказНарядов;
		
	ИначеЕсли Идентификатор = "ИспользоватьРемонты2" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьТехоперации" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияПереработкаДавальческогоСырья" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство И Форма.ФункциональнаяОпцияИспользоватьПартии;
		
	ИначеЕсли Идентификатор = "УчетМерныхИзделий" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство;
		
	ИначеЕсли Идентификатор = "НациональнаяВалюта" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяУчетВалютныхОпераций;
		
	ИначеЕсли Идентификатор = "ВалютаУчета" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяУчетВалютныхОпераций;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером;
		
	ИначеЕсли Идентификатор = "ЧастотаРасчетаКурсовыхРазниц" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяУчетВалютныхОпераций;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияВестиШтатноеРасписание" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияИспользоватьСовместительство" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
		
	ИначеЕсли Идентификатор = "ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
		
	ИначеЕсли Идентификатор = "АдресПолучателяСкрытойКопии" Тогда
		
		ЭлементФормы.Доступность = Форма.ОтправлятьСлепыеКопииПисем;
		
	ИначеЕсли Идентификатор = "ЗагрузитьКонтактыGoogle" Тогда
		
		ЭлементФормы.Доступность = Форма.ЗагрузкаКонтактовGoogle;
		
	ИначеЕсли Идентификатор = "СинхронизироватьКалендарьGoogle" Тогда
		
		ЭлементФормы.Доступность = Форма.СинхронизацияКалендаряGoogle;
		
	ИначеЕсли Идентификатор = "ПодключениеИНастройкаОборудования" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование;
		
	ИначеЕсли Идентификатор = "НастройкаСинхронизацииДанных" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	ИначеЕсли Идентификатор = "РезультатыСинхронизацииДанных" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	ИначеЕсли Идентификатор = "ИспользоватьДатыЗапретаЗагрузки" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	ИначеЕсли Идентификатор = "ДатыЗапретаЗагрузкиДанных" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И Форма.ИспользоватьДатыЗапретаЗагрузки;
		
	ИначеЕсли Идентификатор = "ПрефиксУзлаРаспределеннойИнформационнойБазы" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	ИначеЕсли Идентификатор = "КонтрольДоговоровПриПроведенииДокументов" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	ИначеЕсли Идентификатор = "КаталогСообщенийОбменаДаннымиДляWindows" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	ИначеЕсли Идентификатор = "КаталогСообщенийОбменаДаннымиДляLinux" Тогда
		
		ЭлементФормы.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	ИначеЕсли Идентификатор = "НастройкаОбменаССайтами" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьОбменССайтами;
		
	ИначеЕсли Идентификатор = "ПрефиксДляОбменаССайтом" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьОбменССайтами;
		
	ИначеЕсли Идентификатор = "ТиповыеСоглашенияОбИспользованииЭД" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменЭД;
		
	ИначеЕсли Идентификатор = "СоглашенияОбИспользованииЭД" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменЭД;
		
	ИначеЕсли Идентификатор = "АвтоматическаяОтправкаЭД" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменЭД;
		
	ИначеЕсли Идентификатор = "ОтправкаОформленныхЭДРасписание" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменЭД И Форма.АвтоматическаяОтправкаЭД;
		
	ИначеЕсли Идентификатор = "АвтоматическоеПолучениеЭД" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменЭД;
		
	ИначеЕсли Идентификатор = "ПолучениеНовыхЭДРасписание" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменЭД И Форма.АвтоматическоеПолучениеЭД;
		
	ИначеЕсли Идентификатор = "ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменЭД;
		
	ИначеЕсли Идентификатор = "НастройкиЭлектроннойПодписиИШифрования" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьЭлектронныеПодписи;
		
	ИначеЕсли Идентификатор = "ПодключениеКСервису1С_ЭДО" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьЭлектронныеПодписи;
		
	ИначеЕсли Идентификатор = "ПомощникПодключенияКСервису1СТакском" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьЭлектронныеПодписи;
		
	ИначеЕсли Идентификатор = "НастройкиОбменаСБанками" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьОбменСБанками;
		
	ИначеЕсли Идентификатор = "ДатыЗапретаИзмененияДанных" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьДатыЗапретаИзменения;
		
	ИначеЕсли Идентификатор = "УправлениеНовостями" Тогда
		
		ЭлементФормы.Доступность = Форма.РазрешенаРаботаСНовостями;
		
	ИначеЕсли Идентификатор = "НастройкиВерсионированияОбъектов" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьВерсионированиеОбъектов;
		
	ИначеЕсли Идентификатор = "ЗагрузитьАдресныйКлассификатор" Тогда
		
		ЭлементФормы.Доступность = ПустаяСтрока(Форма.ИсточникДанныхАдресногоКлассификатора);
		
	ИначеЕсли Идентификатор = "ОчиститьАдресныйКлассификатор" Тогда
		
		ЭлементФормы.Доступность = ПустаяСтрока(Форма.ИсточникДанныхАдресногоКлассификатора);
		
	ИначеЕсли Идентификатор = "ИспользоватьГруппыДоступаКонтрагентов" Тогда
		
		ЭлементФормы.Доступность = Форма.ОграничиватьДоступНаУровнеЗаписей;
		
	ИначеЕсли Идентификатор = "ОткрытьГруппыДоступаКонтрагентов" Тогда
		
		ЭлементФормы.Доступность = Форма.ОграничиватьДоступНаУровнеЗаписей И Форма.ИспользоватьГруппыДоступаКонтрагентов;
		
	ИначеЕсли Идентификатор = "ОткрытьДополнительныеОтчетыИОбработки" Тогда
		
		ЭлементФормы.Доступность = Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить();
		
	ИначеЕсли Идентификатор = "ДополнительныеОбработкиПоАдминистрированию" Тогда
		
		ЭлементФормы.Доступность = Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить();
		
	ИначеЕсли Идентификатор = "АвтоматическиЗагружатьЭлектроннуюПочтуРасписание" Тогда
		
		ЭлементФормы.Доступность = Форма.АвтоматическиЗагружатьПочту
		
	ИначеЕсли Идентификатор = "ТомаХраненияФайлов" Тогда
		
		ЭлементФормы.Доступность = Форма.ХранитьФайлыВТомахНаДиске;
		
	ИначеЕсли Идентификатор = "СписокЗапрещенныхРасширенийОбластиДанных" Тогда
		
		ЭлементФормы.Доступность = Форма.ЗапрещатьЗагрузкуФайловПоРасширению;
		
	ИначеЕсли Идентификатор = "НастройкиКриптографии" Тогда
		
		ЭлементФормы.Доступность = Форма.ИспользоватьЭлектронныеПодписи2 Или Форма.ИспользоватьШифрование;
		
	ИначеЕсли Идентификатор = "НастройкиСинхронизацииФайлов" Тогда
		
		ЭлементФормы.Доступность = Форма.СинхронизироватьФайлы;
		
	ИначеЕсли Идентификатор = "ОткрытьПодключаемоеОборудование" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование;
		
	ИначеЕсли Идентификатор = "ОткрытьРабочиеМеста" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование;
		
	ИначеЕсли Идентификатор = "ИспользоватьОбменСПодключаемымОборудованиемOffline" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование;
		
	ИначеЕсли Идентификатор = "ПравилаОбменаСПодключаемымОборудованием" Тогда
		
		ЭлементФормы.Доступность = Форма.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование И Форма.ИспользоватьОбменСПодключаемымОборудованиемOffline;
		
	ИначеЕсли Идентификатор = "АдресСервисаЦентраМониторинга" Тогда
		
		ЭлементФормы.Доступность = Форма.ОтправлятьДанныеВЦентрМониторинга = 1;
		
	ИначеЕсли Идентификатор = "ОценкаПроизводительности" Тогда
		
		ЭлементФормы.Доступность = Форма.ВыполнятьЗамерыПроизводительности;
		
	ИначеЕсли Идентификатор = "НастройкиОценкиПроизводительности" Тогда
		
		ЭлементФормы.Доступность = Форма.ВыполнятьЗамерыПроизводительности;
		
	ИначеЕсли Идентификатор = "УдалениеПомеченныхРасписание" Тогда
		
		ЭлементФормы.Доступность = Форма.АвтоматическоеУдалениеПомеченных;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
