////////////////////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейсСервиса: выполнение штатных функций МС прикладным кодом
// через внешний API 
////////////////////////////////////////////////////////////////////////////////

// Экспортные процедуры и функции для вызова из других модулей
// 
#Область ПрограммныйИнтерфейс

// Возвращает информацию о конфигурациях, доступных абоненту для создания областей.
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется 
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование) 
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - ТаблицаЗначений - Код,Имя,Наименование,Описание
//
Функция ДоступныеКонфигурацииАбонента(Абонент, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/application/available";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	КодОбласти = ПараметрыСеанса.ОбластьДанныхЗначение;
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	ДанныеЗапроса.Вставить("tenant", КодОбласти);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Приложения = Новый ТаблицаЗначений();
	Приложения.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(64, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Имя", "basename");
	Схема.Вставить("Наименование", "name");
	Схема.Вставить("Описание", "description");
	
	Для каждого Элемент Из ДанныеОтвета.application Цикл
		НоваяСтрока = Приложения.Добавить();
		Для каждого ЭлементСхемы Из Схема Цикл
			НоваяСтрока[ЭлементСхемы.Ключ] = Элемент.Получить(ЭлементСхемы.Значение);
		КонецЦикла; 
	КонецЦикла; 
	
	Ответ.Вставить("Результат", Приложения);
	Возврат Ответ;

КонецФункции // ДоступныеКонфигурацииАбонента() 

// Возвращает информацию о существующих областях данных абонента.
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - ТаблицаЗначений - Код,Наименование,Статус,Используется,Конфигурация
//				   	*Статус - строковое перечисление, возможные значения:
//								ready — Готова
//								preparation — Готовится к использованию
//								used — Используется
//								converted — Конвертируется
//								copied — Копируется
//								toremove — К удалению
//								new — Новая
//								missing — Отсутствует
//								error — Ошибка подготовки
//								removed — Удалена
//
Функция ОбластиДанныхАбонента(Абонент, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/tenant/list";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	КодОбласти = ПараметрыСеанса.ОбластьДанныхЗначение;
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	ДанныеЗапроса.Вставить("tenant", КодОбласти);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Приложения = Новый ТаблицаЗначений();
	Приложения.Колонки.Добавить("Код", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	Приложения.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	Приложения.Колонки.Добавить("Конфигурация", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Статус", "status");
	Схема.Вставить("Наименование", "name");
	Схема.Вставить("Конфигурация", "application");
	
	Для каждого Элемент Из ДанныеОтвета.tenant Цикл
		НоваяСтрока = Приложения.Добавить();
		Для каждого ЭлементСхемы Из Схема Цикл
			НоваяСтрока[ЭлементСхемы.Ключ] = Элемент.Получить(ЭлементСхемы.Значение);
		КонецЦикла; 
		НоваяСтрока.Используется = (НРег(НоваяСтрока.Статус) = "used");
	КонецЦикла; 
	
	Ответ.Вставить("Результат", Приложения);
	Возврат Ответ;

КонецФункции // ОбластиДанныхАбонента() 

// Возвращает информацию об указанной области данных (абонент определяется автоматически).
//
// Параметры:
//	Область - Число - код области данных
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - Структура - Код,Владелец,Наименование,Статус,Используется,Конфигурация
//					*Владелец - Число - код абонента-владельца области
//					*ОблачныйТариф - Булево - указывает, что у абонента подключен "облачный тариф" 1cFresh.com >(;-{{
//				   	*Статус - строковое перечисление, возможные значения:
//								ready — Готова
//								preparation — Готовится к использованию
//								used — Используется
//								converted — Конвертируется
//								copied — Копируется
//								toremove — К удалению
//								new — Новая
//								missing — Отсутствует
//								error — Ошибка подготовки
//								removed — Удалена
//
Функция СвойстваОбластиДанных(Область, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/tenant/info";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("tenant", Область);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	Ответ.Вставить("Результат", Новый Структура()); 
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Статус", "status");
	Схема.Вставить("Наименование", "name");
	Схема.Вставить("Конфигурация", "application");
	Схема.Вставить("Владелец", "owner");
	
	Для каждого ЭлементСхемы Из Схема Цикл
		Ответ.Результат.Вставить(ЭлементСхемы.Ключ, ДанныеОтвета[ЭлементСхемы.Значение]);
	КонецЦикла; 
	Ответ.Результат.Вставить("Используется", (НРег(ДанныеОтвета.status) = "used"));
		
	Возврат Ответ;

КонецФункции // СвойстваОбластиДанных() 

// Инициирует создание новой области данных для указанного абонента с указанной конфигурацией,
// возвращает информацию о созданной области (если получилось создать).
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Конфигурация - Строка - код конфигурации в МС
//	Наименование - Строка - имя создаваемой области данных (если не указано, будет подставлено название конфигурации) 
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - Структура - Код,Наименование
//
Функция СоздатьОбластьДанных(Абонент, Конфигурация, Наименование = "", Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/tenant/create";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("application", Конфигурация);
	ДанныеЗапроса.Вставить("name", Наименование);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	КодОбласти = ПараметрыСеанса.ОбластьДанныхЗначение;
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	ДанныеЗапроса.Вставить("tenant", КодОбласти);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	Ответ.Вставить("Результат", Новый Структура()); 
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Наименование", "name");
	
	Для каждого ЭлементСхемы Из Схема Цикл
		Ответ.Результат.Вставить(ЭлементСхемы.Ключ, ДанныеОтвета[ЭлементСхемы.Значение]);
	КонецЦикла; 
		
	Возврат Ответ;

КонецФункции // СоздатьОбластьДанных() 

// Инициирует активацию кода промо-акции для указанного абонента (обработчик события должен быть реализован
// на стороне МС в модуле ПромоАкцииПереопределеяемый.
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Область - Число - код области данных
//	ПромоКод - Строка - код промо-акции (справочник ПромоАкции) в МС
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - Булево
//
Функция АктивироватьПромоКод(Абонент, Область, ПромоКод, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/promo/activate_code";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("promo_code", ПромоКод);
	ДанныеЗапроса.Вставить("tenant", Область);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	Ответ.Вставить("Результат", Ложь); 
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Ответ.Результат = (ДанныеОтвета.success = Истина);
	Возврат Ответ;

КонецФункции // АктивироватьПромоКод() 

#КонецОбласти  

// Важно! Служебный программный интерфейс может существенно изменяться со временем.
// 
#Область СлужебныйПрограммныйИнтерфейс

// Пытается выполнить через API переданную команду и возвращает разобранный ответ
//
// Параметры:
//	АдресФункции - Строка - Адрес, по которому нужно обращаться для выполнения функции 
//	ДанныеЗапроса - Соответствие - будет преобразовано в JSON-тело запроса
//	Указатель - HTTPСоединение - Соединение, через которое нужно вести работу с сервисом 
//
// Возвращаемое значение:
//   Структура   - ответ сервиса [Адрес,Код,Тело,КодОтвета,ТекстОтвета,Данные,Ошибка,ОписаниеОшибки]
//
Функция ОтветСервиса(Знач АдресФункции, ДанныеЗапроса = Неопределено, Знач Указатель = Неопределено)

	// Создаем HTTP-соединение
	
	Если Указатель = Неопределено Тогда
		Указатель = УказательСервиса();
	КонецЕсли; 	
	
	Если НЕ Лев(АдресФункции, 1) = "/" Тогда
		АдресФункции = "/" + АдресФункции;
	КонецЕсли; 
	
	// Создаем и выполняем HTTP-запрос
	
	Запрос = УказательФункции(АдресФункции);
	Если ЗначениеЗаполнено(ДанныеЗапроса) Тогда
		ТелоЗапроса = ТелоЗапросаJSON(ДанныеЗапроса);
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли; 
	
	ОтветСервера = Указатель.ОтправитьДляОбработки(Запрос);
	ДанныеОтвета = ПрочитанныеДанныеОтвета(ОтветСервера);
	
	Возврат ДанныеОтвета;
	
КонецФункции // ОтветСервиса() 

#КонецОбласти  

// Служебные процедуры и функции, вызов допускается только из самого модуля.
// 
#Область СлужебныеФункции

// Возвращает данные HTTP-ответа от сервиса API, дополненные обязательными
// параметрами (если такие есть).
//
// Параметры:
//	Ответ - HTTPСервисОтвет - исходный HTTP-ответ
//
// Возвращаемое значение:
//   Структура   - данные запроса, переложенные в структуру
//
Функция ПрочитанныеДанныеОтвета(Ответ)

	ДанныеОтвета = Новый Структура();
	ДанныеОтвета.Вставить("error", Ложь);
	ДанныеОтвета.Вставить("errorCode", 0);
	ДанныеОтвета.Вставить("text", "");
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		
		Указатель = Новый ЧтениеJSON();
		Указатель.УстановитьСтроку(ТелоОтвета);
		
		Попытка
			РезультатОтвет = ПрочитатьJSON(Указатель, Истина); 		
		Исключение
			Комментарий = ОписаниеОшибки() + Символы.ПС + Символы.ПС + ТелоОтвета;
			Локаль = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			Событие = ИмяСобытия() + "." + НСтр("ru = 'Ошибка чтения JSON'", Локаль);
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
			ВызватьИсключение;
		КонецПопытки; 	
		
		Для каждого Элемент Из РезультатОтвет Цикл
			Попытка
				ДанныеОтвета.Вставить(Элемент.Ключ, Элемент.Значение);
			Исключение
				// Метка: TODO
				// Автор: Зайцев (25.10.2016 16:50:00)
				//
				// Подумать, нужно ли здесь вызывать исключение
				// 
			КонецПопытки; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат ДанныеОтвета;

КонецФункции // ПрочитанныеДанныеОтвета() 

// Возвращает параметры подключения к веб-сервису МС PublicAPI 
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Структура   - сформированные параметры подключения
//
Функция ПараметрыПодключения()

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL", РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса()+ "/hs/api/");
	ПараметрыПодключения.Вставить("Логин", РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса());
	ПараметрыПодключения.Вставить("Пароль", РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыПодключения;

КонецФункции // ПараметрыПодключения() 

// Создает HTTP-соединение, которое будет использоваться для работы с API. 
// Важно — необходимость в TLS определяется по URL, используются хранилища сертификатов ОС.
//
// Параметры:
//	ДемоРежим - Булево - указывает, что необходимо использовать демо-аккаунт 
//
// Возвращаемое значение:
//   HTTPСоединение   - созданный "указатель сервиса"
//
Функция УказательСервиса()

	РеквизитыСервиса = ПараметрыПодключения();
	Адрес = ОбщегоНазначенияКлиентСервер.СтруктураURI(РеквизитыСервиса.URL);
	
	Сигнатура = "https://";	
	Если Лев(ВРег(РеквизитыСервиса.URL), СтрДлина(Сигнатура)) = ВРег(Сигнатура) Тогда	
		SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	Иначе
		SSL = Неопределено; 
	КонецЕсли; 
	
	Указатель = Новый HTTPСоединение(Адрес.Хост, Адрес.Порт, РеквизитыСервиса.Логин, РеквизитыСервиса.Пароль,, 60, SSL);
	Возврат Указатель;

КонецФункции // УказательСервиса() 

// Создает HTTP-запрос, которое будет использоваться для вызова функции API.
//
// Параметры:
//	АдресФункции - Строка - Адрес, по которому нужно обращаться для выполнения функции 
//
// Возвращаемое значение:
//   HTTPЗапрос   - созданный "указатель функции"
//
Функция УказательФункции(АдресФункции)

	РеквизитыСервиса = ПараметрыПодключения();
	Адрес = ОбщегоНазначенияКлиентСервер.СтруктураURI(РеквизитыСервиса.URL);
	
	Указатель = Новый HTTPЗапрос();
	Указатель.АдресРесурса = Адрес.ПутьНаСервере + АдресФункции;
	
	Указатель.Заголовки.Вставить("Accept-Charset", "utf-8");
	Указатель.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Указатель;

КонецФункции // УказательФункции()  

// Преобразует переданное значение в JSON для передачи в теле post-запроса.
// Важно: если на входе будет некорректное значение, возникнет исключение.
//
// Параметры:
//	ЗаготовкаТелаЗапроса - Произвольный - должно поддерживать JSON-сериализацию, 
//										  должно соответствовать API сервиса
//
// Возвращаемое значение:
//   Строка   - JSON для передачи сервису
//
Функция ТелоЗапросаJSON(ЗаготовкаТелаЗапроса) Экспорт

	Указатель = Новый ЗаписьJSON();
	Указатель.УстановитьСтроку();
	
	ЗаписатьJSON(Указатель, ЗаготовкаТелаЗапроса);
	Результат = Указатель.Закрыть();	
	
	Возврат Результат;

КонецФункции // ТелоЗапросаJSON() 

// Возвращает строковую константу — имя корневого события ЖР
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Строка   - имя события
//
Функция ИмяСобытия()

	Локаль = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Возврат НСтр("ru = 'Программный интерфейс сервиса'", Локаль);

КонецФункции // ИмяСобытия() 

#КонецОбласти  