///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(ЧекиККМ, "КассаККМ", КассаККМ, ЗначениеЗаполнено(КассаККМ), ВидСравненияКомпоновкиДанных.Равно);
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(ЧекиККМ, "КассоваяСмена", ТекущийОтчетОРозничныхПродажах, ТолькоТекущаяСмена, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры // УстановитьОтборДинамическихСписков()

// Процедура - обработчик события "ПриИзменении" поля "КассаККМ".
//
&НаСервере
Процедура КассаККМОтборПриИзмененииНаСервере()
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	УстановитьОтборДинамическихСписков();
	Элементы.ВнесениеДенег.Видимость = НЕ КассаККМ.ИспользоватьБезПодключенияОборудования;
	Элементы.ВыемкаДенег.Видимость = НЕ КассаККМ.ИспользоватьБезПодключенияОборудования;
	
КонецПроцедуры // КассаОтборПриИзмененииНаСервере()

// Процедура - обработчик события "ПриИзменении" поля "КассаККМ" на сервере.
//
&НаКлиенте
Процедура КассаККМОтборПриИзменении(Элемент)
	
	КассаККМОтборПриИзмененииНаСервере();
	
КонецПроцедуры // КассаОтборПриИзменении()

// Функция выполняет открытие кассовой смены на сервере.
//
&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "")
	
	//КассоваяСмена = Неопределено; 
	Результат = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
	//Если Результат И ЗначениеЗаполнено(КассоваяСмена) Тогда
	//	РозничныеПродажиСервер.СоздатьОтчетОРозничныхПродажах(КассоваяСмена, ОписаниеОшибки);		
	//КонецЕсли;
	Возврат Результат;
	//
КонецФункции // ОткрытьКассовуюСменуНаСервере()

// Процедура выполняет закрытие кассовой смены на сервере.
//
&НаСервере
Функция СформироватьОтчетОРозничныхПродажахНаСервере(КассаККМ, ОписаниеОшибки = "")
	
	Возврат Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию(КассаККМ, ОписаниеОшибки);
	
КонецФункции // СформироватьОтчетОРозничныхПродажахНаСервере()

// Процедуру необходимо вызывать с клиента при открытии кассовой смены
&НаСервере
Процедура ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ)
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры // ОбновитьСостояниеКассовойСменыНаСервере()

// Процедура - обработчик команды "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"КассаККМ");
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", ПараметрыКассыККМ.СтруктурнаяЕдиница);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ИдентификаторУстройства, 
			, 
			ДополнительныеПараметры
		);
	Иначе
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки);
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	Если РезультатВыполнения.Результат Тогда 
		ОписаниеОшибки = "";
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.
							       |Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                      |Смена не открыта на фискальном регистраторе.
			                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ЗакрытьКассовуюСмену".
//
&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ"
		);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования);
	ИначеЕсли ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Оповещение = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ИдентификаторУстройства, 
			,
			ТекущаяКассоваяСмена
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассовыеСмены(Команда)
	
	ОткрытьФорму("Документ.КассоваяСмена.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировочныеЧеки(Команда)
	
	ОткрытьФорму("Документ.КассовыйЧекКоррекции.ФормаСписка");
	
КонецПроцедуры

// Процедура - обработчик команды "СформироватьОтчетОРозничныхПродажах".
//
&НаКлиенте
Процедура СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования) Экспорт
	
	ОписаниеОшибки = "";
	
	// 1. Заполнение отчета о розничных продажах.
	Документ = СформироватьОтчетОРозничныхПродажахНаСервере(КассаККМ, ОписаниеОшибки); 
	
	Если ЗначениеЗаполнено(ОписаниеОшибки)
	   И ИспользоватьБезПодключенияОборудования Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки)
		 И НЕ ИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр(
			"ru = 'При формировании отчета о розничных продажах возникли ошибки.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// 2. Заполнение параметров кассовой смены.
	Результат = ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'При закрытии смены произошла ошибка.
		                            |Смена не закрыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Все результирующие документы выводим пользователю.
	Если Документ <> Неопределено Тогда
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ", Документ));
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	
КонецПроцедуры

&НаСервере
Функция ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет = Неопределено)
	
	Возврат РозничныеПродажиСервер.ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет);
	
КонецФункции

&НаКлиенте
Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		СформироватьОтчетОРозничныхПродажах(Ложь);
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При закрытии смены на фискальном регистраторе произошла ошибка.
			|""%ОписаниеОшибки%""
			|Отчет на фискальном регистраторе не сформирован.'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ОписаниеОшибки%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ВнесениеДенег".
//
&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ВносимаяСумма = 0;
		
		ЗаголовокОкна = НСтр("ru='Сумма внесения, %Валюта%'");
		ЗаголовокОкна = СтрЗаменить(
			ЗаголовокОкна,
			"%Валюта%",
			СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление
		);
		
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ВнесениеДенегЗавершение", ЭтотОбъект, Новый Структура("ВносимаяСумма", ВносимаяСумма)), ВносимаяСумма, ЗаголовокОкна, 15, 2);
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'"
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ВнесениеДенег".
//
&НаКлиенте
Процедура ВнесениеДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВносимаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ВносимаяСумма, Результат);
	
	Если (Результат <> Неопределено) Тогда
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 1, ВносимаяСумма);
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ВнесениеДенег()

&НаКлиенте
Процедура ИнкассацияНаФискальномУстройствеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			                        |Чек не напечатан на фискальном устройстве.
			                        |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ИзымаемаяСумма = 0;
		
		ЗаголовокОкна = НСтр("ru='Сумма выемки, %Валюта%'");
		ЗаголовокОкна = СтрЗаменить(
			ЗаголовокОкна,
			"%Валюта%",
			СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление
		);
		
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ВыемкаДенегЗавершение", ЭтотОбъект, Новый Структура("ИзымаемаяСумма", ИзымаемаяСумма)), ИзымаемаяСумма, ЗаголовокОкна, 15, 2);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ВыемкаДенег()

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзымаемаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ИзымаемаяСумма, Результат);
	
	Если (Результат <> Неопределено) Тогда
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 0, ИзымаемаяСумма);
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры // ВыемкаДенегЗавершение()

// Функция выполняет получение состояния кассовой смены на сервере.
//
&НаСервереБезКонтекста
Функция ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	Возврат РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции // ПолучитьСостояниеКассовойСменыНаСервере()

// Процедура выполняет обновление состояния кассовой смены на клиенте.
//
&НаСервере
Процедура ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		
		ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
		
		СостояниеКассовойСмены = ТекстСообщения;
		
	Иначе
		
		СостояниеКассовойСмены = НСтр("ru='Смена не открыта.'");
		
	КонецЕсли;
	
	// Переменная формы
	СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
	ТекущаяКассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	ТекущийОтчетОРозничныхПродажах = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	// Управление доступностью.
	Элементы.СнятьZОтчет.Видимость		  = СменаОткрыта;
	Элементы.ОткрытьКассовуюСмену.Видимость = НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ);
	
	Элементы.ЧекиККМСоздатьЧек.Доступность					= СменаОткрыта;
	Элементы.ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании.Доступность = СменаОткрыта;
	Элементы.ЧекиККМСкопировать.Доступность				= СменаОткрыта;
	Элементы.КонтекстноеМенюЧекиККМСкопировать.Доступность = СменаОткрыта;
	
	Элементы.ВнесениеДенег.Доступность = ЗначениеЗаполнено(КассаККМ);
	Элементы.ВыемкаДенег.Доступность   = ЗначениеЗаполнено(КассаККМ);
	
КонецПроцедуры // ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков()

// Процедура - обработчик команды "ОбновитьСостояниеКассовойСмены".
//
&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(Команда)
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	
КонецПроцедуры // ОбновитьСостояниеКассовойСмены()

// Процедура - обработчик команды "ОткрытьУправлениеФискальнымРегистратором".
//
&НаКлиенте
Процедура ОткрытьУправлениеФискальнымРегистратором(Команда)
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.УправлениеФискальнымУстройством");

КонецПроцедуры // ОткрытьУправлениеФискальнымРегистратором)()

// Процедура - обработчик команды "ОткрытьУправлениеЭквайринговымТерминалом".
//
&НаКлиенте
Процедура ОткрытьУправлениеЭквайринговымТерминалом(Команда)
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.УправлениеЭквайринговымТерминалом");

КонецПроцедуры // ОткрытьУправлениеЭквайринговымТерминалом()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия  = "ОбновитьФормыПослеСнятияZОтчета" Тогда
		Элементы.ЧекиККМ.Обновить();
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	ИначеЕсли ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		Элементы.ЧекиККМ.Обновить();
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	ИначеЕсли ИмяСобытия = "ОбновитьФормыПослеЗакрытияКассовойСмены" Тогда
		Элементы.ЧекиККМ.Обновить();
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
		ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура предназначается для обработки события "ПриАктивизацииСтроки" списка ЧекиККМ
//
&НаКлиенте
Процедура ЧекиККМПриАктивизацииСтрокиНаКлиенте()
	
	Если СтруктураСостояниеКассовойСмены = Неопределено Тогда
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков(КассаККМ);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если НЕ ТекущиеДанные.Свойство("ГруппировкаСтроки")
			И ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
			И ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены)
			И ТекущиеДанные.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах
			И НЕ ТекущиеДанные.ЕстьЧекНаВозврат
			И СменаОткрыта
			И ТекущиеДанные.Тип <> Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			
			Элементы.ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании.Доступность = Истина;
			Элементы.КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании.Доступность = Истина;
			
		Иначе
			
			Элементы.ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании.Доступность = Ложь;
			Элементы.КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЧекиККМПриАктивизацииСтрокиНаКлиенте()

// Процедура - обработчик события "ПриАктивизацииСтроки" списка ЧекиККМ.
//
&НаКлиенте
Процедура ЧекиККМПриАктивизацииСтроки(Элемент)
	
	ЧекиККМПриАктивизацииСтрокиНаКлиенте();
	
КонецПроцедуры // ЧекиККМПриАктивизацииСтроки()

// Процедура предназначается для обработки события "ПриИзмененииНаСервере" флага ТолькоТекущаяСменаОтбор на сервере
//
&НаСервере
Процедура ТолькоТекущаяСменаОтборПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры // ТолькоТекущаяСменаОтборПриИзмененииНаСервере()

// Процедура - обработчик события "ПриИзменении" флага ТолькоТекущаяСменаОтбор.
//
&НаКлиенте
Процедура ТолькоТекущаяСменаОтборПриИзменении(Элемент)

	ТолькоТекущаяСменаОтборПриИзмененииНаСервере();

КонецПроцедуры // ТолькоТекущаяСменаОтбор()

// Процедура - обработчик команды "СоздатьЧек".
//
&НаКлиенте
Процедура СоздатьЧек(Команда)
	
	Если СменаОткрыта Тогда
		ПараметрыОткрытия = Новый Структура("Основание", Новый Структура("КассаККМ", КассаККМ));
		ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры // СоздатьЧек()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	
	// КассаККМ по умолчанию
	// Определим, сохранялись ли настройки ранее.
	ПользовательСсылка = ПараметрыСеанса.АвторизованныйПользователь;
	Если НЕ ЗначениеЗаполнено(ПользовательСсылка) Тогда
		ПользовательСсылка = Справочники.Пользователи.ПустаяСсылка();
		ПользовательИнформационнойБазы = "";
	Иначе
		ПользовательИнформационнойБазы = Обработки.НастройкиПользователей.ИмяПользователяИБ(ПользовательСсылка);
	КонецЕсли;
	Отбор = Новый Структура("Пользователь, КлючОбъекта", ПользовательИнформационнойБазы, "ЖурналДокументов.ЧекиККМ.Форма.ФормаСписка/КлючТекущихНастроекДанных");
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(Отбор);
	
	Если НЕ ВыборкаНастроек.Следующий() Тогда
		// Если не сохранялись, то установим отбор по основной кассе. Иначе отработает обработчик "ПриЗагрузкеДанныхИзНастроекНаСервере".
		КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
		
		Если НЕ КассаККМ.Пустая() Тогда
			ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
			УстановитьОтборДинамическихСписков();
			Элементы.ВнесениеДенег.Видимость = НЕ КассаККМ.ИспользоватьБезПодключенияОборудования;
			Элементы.ВыемкаДенег.Видимость = НЕ КассаККМ.ИспользоватьБезПодключенияОборудования;
		КонецЕсли;
	КонецЕсли;
	// Конец КассаККМ по умолчанию
	
	// Заказы покупателей в Рознице
	Элементы.ЕстьЗаказы.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	// Конец Заказы покупателей в Рознице
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(ЧекиККМ);
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	КассаККМ = Настройки.Получить("КассаККМ");
	ТолькоТекущаяСмена = Настройки.Получить("ТолькоТекущаяСмена");
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	УстановитьОтборДинамическихСписков();
	
	Элементы.ВнесениеДенег.Видимость = НЕ КассаККМ.ИспользоватьБезПодключенияОборудования;
	Элементы.ВыемкаДенег.Видимость = НЕ КассаККМ.ИспользоватьБезПодключенияОборудования;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыЧекККМ");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыЧекККМ");
	
КонецПроцедуры

#КонецОбласти
