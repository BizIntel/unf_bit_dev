#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Панель1СМаркировка

// Возвращает текст запроса для получения общего количества документов в работе
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаУведомленияОбОтгрузке() Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ТекстЗапросаУведомленияОбОтгрузке();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаУведомленияОбОтгрузкеОформите() Экспорт
	
	Возврат ИнтеграцияГИСМПереопределяемый.ТекстЗапросаУведомленияОбОтгрузкеОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаУведомленияОбОтгрузкеОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|ПО
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка
	|ГДЕ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ДальнейшееДействие В
	|		(ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен))
	|	И (УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И (УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаУведомленияОбОтгрузкеОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|ПО
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка
	|ГДЕ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ДальнейшееДействие В
	|		(ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием),
	|		 ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПодтверждениеПолучения),
	|		 ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеЗакрытияУведомления),
	|		 ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации))
	|	И (СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И (СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеГИСМ

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция ГИСМ
// 
// Возвращаемое значение:
//  Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ - Новый статус
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссия
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭС
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС Тогда
		
		НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатус = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция ГИСМ
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийГИСМ - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ - Новый статус
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ОжидаетсяРегистрацияКлиентаВГИСМ = Ложь) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если    Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссия
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭС
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПринятоВОбработкуГИСМ;
			Если ОжидаетсяРегистрацияКлиентаВГИСМ Тогда
				ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеРегистрациюКлиентаВГИСМ;
			Иначе
				ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПодтверждениеПолучения;
			КонецЕсли;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссияПолучениеКвитанции
		  Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭСПолучениеКвитанции
		  Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭСПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатус = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

// Обновить номер ГИСМ в документе
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ - Документ-объект
//  НомерГИСМ - Число - Новый номер ГИСМ
//
Функция ОбновитьНомерГИСМ(ДокументОбъект, НомерГИСМ) Экспорт
	
	ДокументОбъект.НомерГИСМ = НомерГИСМ;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция ГИСМ
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат УведомлениеОбОтгрузкеМаркированныхТоваровXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияГИСМ

Функция УведомлениеОбОтгрузкеМаркированныхТоваровXML(ДокументСсылка)
	
	Если ИнтеграцияГИСМ.ИспользоватьВозможностиВерсии("2.41") Тогда
		Возврат УведомлениеОбОтгрузкеМаркированныхТоваровXML2_41(ДокументСсылка);
	Иначе
		Возврат УведомлениеОбОтгрузкеМаркированныхТоваровXML2_40(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

#Область Версия2_40

Функция УведомлениеОбОтгрузкеМаркированныхТоваровXML2_40(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УведомлениеОбОтгрузке.Дата                         КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|
	|	УведомлениеОбОтгрузке.Основание     КАК Основание,
	|	УведомлениеОбОтгрузке.Организация   КАК Организация,
	|	УведомлениеОбОтгрузке.Подразделение КАК Подразделение,
	|	
	|	УведомлениеОбОтгрузке.ВидОборотаТовара КАК ВидОборотаТовара,
	|	
	|	УведомлениеОбОтгрузке.Основание.Номер КАК НомерДокументаОснования,
	|	УведомлениеОбОтгрузке.Основание.Дата  КАК ДатаДокументаОснования,
	|	
	|	УведомлениеОбОтгрузке.Контрагент                                             КАК Контрагент,
	|	УведомлениеОбОтгрузке.GLNКонтрагента                                         КАК КонтрагентGLN,
	|	ЕСТЬNULL(УведомлениеОбОтгрузке.Контрагент.СтранаРегистрации.КодАльфа2, """") КАК Страна,
	|	УведомлениеОбОтгрузке.Контрагент.РегистрационныйНомер                        КАК РегистрационныйНомер,
	|	УведомлениеОбОтгрузке.Контрагент.Наименование                                КАК Наименование,
	|	УведомлениеОбОтгрузке.Контрагент.НаименованиеПолное                          КАК НаименованиеПолное
	|	
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузке
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО УведомлениеОбОтгрузке.Ссылка = ВременнаяТаблица.Ссылка
	|		
	|ГДЕ
	|	УведомлениеОбОтгрузке.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.Стоимость КАК Стоимость,
	|	НомераКиЗ.СуммаНДС  КАК СуммаНДС,
	|	НомераКиЗ.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НомераКиЗ.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомераКиЗ.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка  = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		ИЛИ Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваров, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	Если Шапка.ВидОборотаТовара <> Перечисления.ВидОборотаТовараГИСМ.ЭкспортВСтраныЕАЭС Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваров, ДокументСсылка, НомерВерсии);
		
		ИмяТипа   = "query";
		ИмяПакета = "move_order";
		
		ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
		
		УведомлениеОбОтгрузкеМаркированныхТоваров = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
		УведомлениеОбОтгрузкеМаркированныхТоваров.action_id = УведомлениеОбОтгрузкеМаркированныхТоваров.action_id;
		
		Попытка
			УведомлениеОбОтгрузкеМаркированныхТоваров.sender_gln = РеквизитыОгранизации.GLN;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
		КонецПопытки;
		
		Попытка
			УведомлениеОбОтгрузкеМаркированныхТоваров.receiver_gln = Шапка.КонтрагентGLN;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNПартнера(СообщениеXML, Шапка.КонтрагентGLN, Шапка.Контрагент);
		КонецПопытки;
		
		ХранилищеВременныхДат = Новый Соответствие;
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			УведомлениеОбОтгрузкеМаркированныхТоваров,
			"move_date",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		Попытка
			УведомлениеОбОтгрузкеМаркированныхТоваров.move_doc_num = Шапка.НомерДокументаОснования;
		Исключение
			СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнен номер документа-основания.'");
		КонецПопытки;
		
		Попытка
			УведомлениеОбОтгрузкеМаркированныхТоваров.move_doc_date = Шапка.ДатаДокументаОснования;
		Исключение
			СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнена дата документа-основания.'");
		КонецПопытки;
		
		УведомлениеОбОтгрузкеМаркированныхТоваров.turnover_type = ИнтеграцияГИСМ.ВидОборотаТовара(Шапка.ВидОборотаТовара);
		
		УведомлениеОбОтгрузкеМаркированныхТоваров.order_details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузкеМаркированныхТоваров, "order_details");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузкеМаркированныхТоваров.order_details, "detail");
			НоваяСтрока.sign_num  = СтрокаТЧ.НомерКиЗ;
			НоваяСтрока.cost      = СтрокаТЧ.Стоимость;
			Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
				НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
			КонецЕсли;
			
			УведомлениеОбОтгрузкеМаркированныхТоваров.order_details.detail.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		ПередачаДанных.version    = ПередачаДанных.version;
		ПередачаДанных[ИмяПакета] = УведомлениеОбОтгрузкеМаркированныхТоваров;
		
		ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
		ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
		
		СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
		СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
		
		СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
		СообщениеXML.Организация  = Шапка.Организация;
		СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
		СообщениеXML.Документ     = ДокументСсылка;
		СообщениеXML.Основание    = Шапка.Основание;
		СообщениеXML.Версия       = НомерВерсии;
		
		СообщенияXML.Добавить(СообщениеXML);
		
	Иначе
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС, ДокументСсылка, НомерВерсии);
		
		ИмяТипа   = "query";
		ИмяПакета = "export_sale";
		
		ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
		
		УведомлениеОбЭкспорте = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
		УведомлениеОбЭкспорте.action_id = УведомлениеОбЭкспорте.action_id;
		
		Попытка
			УведомлениеОбЭкспорте.sender_gln = РеквизитыОгранизации.GLN;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
		КонецПопытки;
		
		ЮридическийАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Шапка.Контрагент,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			ТекущаяДатаСеанса());
		
		УведомлениеОбЭкспорте.transborder = ИнтеграцияГИСМ.ОбъектXDTO("transborder_org");
		
		Попытка
			УведомлениеОбЭкспорте.transborder.country = Шапка.Страна;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 не заполнена страна регистрации.'"), Шапка.Контрагент));
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.transborder.org_name = Шапка.НаименованиеПолное;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 не заполнено полное наименование.'"), Шапка.Контрагент));
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.transborder.org_number = Шапка.РегистрационныйНомер;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 не заполнен регистрационный номер.'"), Шапка.Контрагент));
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.transborder.org_address = ЮридическийАдрес;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 не заполнен юридический адрес.'"), Шапка.Контрагент));
		КонецПопытки;
		
		ХранилищеВременныхДат = Новый Соответствие;
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			УведомлениеОбЭкспорте,
			"export_date",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		Попытка
			УведомлениеОбЭкспорте.export_doc_num = Шапка.НомерДокументаОснования;
		Исключение
			СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'В документе %1 не заполнен номер документа.'"), Шапка.Основание);
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.export_doc_date = Шапка.ДатаДокументаОснования;
		Исключение
			СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'В документе %1 не заполнена дата документа.'"), , Шапка.Основание);
		КонецПопытки;
		
		УведомлениеОбЭкспорте.exports = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбЭкспорте, "exports");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			УведомлениеОбЭкспорте.exports.sign_num.Добавить(СтрокаТЧ.НомерКиЗ);
			
		КонецЦикла;
		
		ПередачаДанных.version    = ПередачаДанных.version;
		ПередачаДанных[ИмяПакета] = УведомлениеОбЭкспорте;
		
		ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
		ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
		
		СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
		СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
		
		СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
		СообщениеXML.Организация  = Шапка.Организация;
		СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС;
		СообщениеXML.Документ     = ДокументСсылка;
		СообщениеXML.Основание    = Шапка.Основание;
		СообщениеXML.Версия       = НомерВерсии;
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЕсли;
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Версия2_41

Функция УведомлениеОбОтгрузкеМаркированныхТоваровXML2_41(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла      КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии,
	|	0                                          КАК ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии,
	|	0                                          КАК ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии,
	|	0                                          КАК ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблицаОбъединение
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла      КАК Ссылка,
	|	0                                          КАК ПоследнийНомерВерсии,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии,
	|	0                                          КАК ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии,
	|	0                                          КАК ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссия)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла      КАК Ссылка,
	|	0                                          КАК ПоследнийНомерВерсии,
	|	0                                          КАК ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии,
	|	0                                          КАК ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭС)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла      КАК Ссылка,
	|	0                                          КАК ПоследнийНомерВерсии,
	|	0                                          КАК ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии,
	|	0                                          КАК ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	Т.Ссылка,
	|	МАКСИМУМ(Т.ПоследнийНомерВерсии)                               КАК ПоследнийНомерВерсии,
	|	МАКСИМУМ(Т.ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии) КАК ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии,
	|	МАКСИМУМ(Т.ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии)          КАК ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии,
	|	МАКСИМУМ(Т.ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии)            КАК ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	ВременнаяТаблицаОбъединение КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УведомлениеОбОтгрузке.Дата                         КАК Дата,
	|	УведомлениеОбОтгрузке.Номер                        КАК Номер,
	|	
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0)                               КАК ПоследнийНомерВерсии,
	|	ЕСТЬNULL(ВременнаяТаблица.ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии, 0) КАК ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии,
	|	ЕСТЬNULL(ВременнаяТаблица.ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии, 0)          КАК ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии,
	|	ЕСТЬNULL(ВременнаяТаблица.ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии, 0)            КАК ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии,
	|	
	|	УведомлениеОбОтгрузке.Основание     КАК Основание,
	|	УведомлениеОбОтгрузке.Организация   КАК Организация,
	|	УведомлениеОбОтгрузке.Подразделение КАК Подразделение,
	|	УведомлениеОбОтгрузке.КонтрагентНеЗарегистрированВГИСМ КАК КонтрагентНеЗарегистрированВГИСМ,
	|	
	|	УведомлениеОбОтгрузке.ВидОборотаТовара КАК ВидОборотаТовара,
	|	
	|	УведомлениеОбОтгрузке.Основание.Номер КАК НомерДокументаОснования,
	|	УведомлениеОбОтгрузке.Основание.Дата  КАК ДатаДокументаОснования,
	|
	|	УведомлениеОбОтгрузке.КодТаможенногоОргана           КАК КодТаможенногоОргана,
	|	УведомлениеОбОтгрузке.ДатаРегистрацииДекларации      КАК ДатаРегистрацииДекларации,
	|	УведомлениеОбОтгрузке.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	
	|	УведомлениеОбОтгрузке.Контрагент     КАК Контрагент,
	|	УведомлениеОбОтгрузке.GLNКонтрагента КАК КонтрагентGLN
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузке
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО УведомлениеОбОтгрузке.Ссылка = ВременнаяТаблица.Ссылка
	|		
	|ГДЕ
	|	УведомлениеОбОтгрузке.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерСтроки КАК НомерСтроки,
	|	НомераКиЗ.Стоимость   КАК Стоимость,
	|	НомераКиЗ.СуммаНДС    КАК СуммаНДС,
	|	НомераКиЗ.НомерКиЗ    КАК НомерКиЗ,
	|	НомераКиЗ.RFIDTID     КАК TID,
	|	НомераКиЗ.RFIDEPC     КАК EPC
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НомераКиЗ.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомераКиЗ.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка  = Результат[2].Выбрать();
	Товары = Результат[3].Выгрузить();
	Если Не Шапка.Следующий()
		ИЛИ Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваров, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии                               = Шапка.ПоследнийНомерВерсии + 1;
	НомерВерсииВозвратФизическомуЛицуКомиссия = Шапка.ВозвратФизическомуЛицуКомиссияПоследнийНомерВерсии + 1;
	НомерВерсииОтгрузкаЗаПределыЕАЭС          = Шапка.ОтгрузкаЗаПределыЕАЭСПоследнийНомерВерсии + 1;
	НомерВерсииОтгрузкаЭкспортЕАЭС            = Шапка.ОтгрузкаЭкспортЕАЭСПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	РеквизитыКонтрагента = ИнтеграцияГИСМВызовСервера.РеквизитыКонтрагента(Шапка.Контрагент);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	
	Если Шапка.ВидОборотаТовара <> Перечисления.ВидОборотаТовараГИСМ.ЭкспортВСтраныЕАЭС
		И Шапка.ВидОборотаТовара <> Перечисления.ВидОборотаТовараГИСМ.ЭкспортЗаПределыЕАЭС Тогда
		
		Если ИнтеграцияГИСМ.ДокументОснованиеВозвратПоставщику(Шапка.Основание)
			И РеквизитыКонтрагента.ЭтоФизическоеЛицо
			И Шапка.ВидОборотаТовара = Перечисления.ВидОборотаТовараГИСМ.Комиссия Тогда
			
			#Область item_removal
			
			СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
			СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
				Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссия, ДокументСсылка, НомерВерсииВозвратФизическомуЛицуКомиссия);
			
			ИмяТипа   = "query";
			ИмяПакета = "item_removal";
			
			ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
			
			УведомлениеОбОтгрузке = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
			УведомлениеОбОтгрузке.action_id  = УведомлениеОбОтгрузке.action_id;
			
			Попытка
				УведомлениеОбОтгрузке.sender_gln = РеквизитыОгранизации.GLN;
			Исключение
				ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
			КонецПопытки;
			
			УведомлениеОбОтгрузке.action = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке, "action");
			УведомлениеОбОтгрузке.action.return2fl = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке.action, "return2fl");
			
			ХранилищеВременныхДат = Новый Соответствие;
			ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
				УведомлениеОбОтгрузке,
				"action_date",
				Шапка.Дата,
				ХранилищеВременныхДат);
			
			УведомлениеОбОтгрузке.details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке, "details");
			
			Для Каждого СтрокаТЧ Из Товары Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ)
					И Не ЗначениеЗаполнено(СтрокаТЧ.TID)
					И Не ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(НСтр("ru = 'В строке %1 не указаны данные о КиЗ.'"),
							СтрокаТЧ.НомерСтроки));
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке.details, "sign");
				
				Если ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ) Тогда
					Попытка
						НоваяСтрока.sign_num.Добавить(СтрокаТЧ.НомерКиЗ);
					Исключение
						ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
							СообщениеXML,
							СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный номер КиЗ ""%2"".'"),
								СтрокаТЧ.НомерСтроки,
								СтрокаТЧ.НомерКиЗ));
					КонецПопытки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.TID) Тогда
					Попытка
						НоваяСтрока.sign_tid.Добавить(СтрокаТЧ.TID);
					Исключение
						ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
							СообщениеXML,
							СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный TID ""%2"".'"),
								СтрокаТЧ.НомерСтроки,
								СтрокаТЧ.TID));
					КонецПопытки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
					Попытка
						НоваяСтрока.sign_sgtin.Добавить(МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТЧ.EPC));
					Исключение
						ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
							СообщениеXML,
							СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный EPC ""%2"".'"),
								СтрокаТЧ.НомерСтроки,
								СтрокаТЧ.EPC));
					КонецПопытки;
				КонецЕсли;
				
				УведомлениеОбОтгрузке.details.sign.Добавить(НоваяСтрока);
				
			КонецЦикла;
			
			ПередачаДанных.version    = ПередачаДанных.version;
			ПередачаДанных[ИмяПакета] = УведомлениеОбОтгрузке;
			
			ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
			ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
			
			СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
			СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
			
			СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
			СообщениеXML.Организация  = Шапка.Организация;
			СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратФизическомуЛицуКомиссия;
			СообщениеXML.Документ     = ДокументСсылка;
			СообщениеXML.Основание    = Шапка.Основание;
			СообщениеXML.Версия       = НомерВерсииВозвратФизическомуЛицуКомиссия;
			
			СообщенияXML.Добавить(СообщениеXML);
			
			#КонецОбласти
			
		Иначе
			
			Если Не Шапка.КонтрагентНеЗарегистрированВГИСМ Тогда
				
				#Область move_order
				
				СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
					Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваров, ДокументСсылка, НомерВерсии);
				
				ИмяТипа   = "query";
				ИмяПакета = "move_order";
				
				ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
				
				УведомлениеОбОтгрузкеМаркированныхТоваров = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
				УведомлениеОбОтгрузкеМаркированныхТоваров.action_id = УведомлениеОбОтгрузкеМаркированныхТоваров.action_id;
				
				Попытка
					УведомлениеОбОтгрузкеМаркированныхТоваров.sender_gln = РеквизитыОгранизации.GLN;
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
				КонецПопытки;
				
				Попытка
					Если ЗначениеЗаполнено(РеквизитыОгранизации.КПП) Тогда
						УведомлениеОбОтгрузкеМаркированныхТоваров.sender_kpp = РеквизитыОгранизации.КПП;
					КонецЕсли;
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиУказанНеКорректныйКППОрганизации(СообщениеXML, РеквизитыОгранизации.КПП, Шапка.Организация);
				КонецПопытки;
				
				Попытка
					УведомлениеОбОтгрузкеМаркированныхТоваров.receiver_gln = Шапка.КонтрагентGLN;
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNПартнера(СообщениеXML, Шапка.КонтрагентGLN, Шапка.Контрагент);
				КонецПопытки;
				
				ХранилищеВременныхДат = Новый Соответствие;
				ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
					УведомлениеОбОтгрузкеМаркированныхТоваров,
					"move_date",
					Шапка.Дата,
					ХранилищеВременныхДат);
				
				Попытка
					УведомлениеОбОтгрузкеМаркированныхТоваров.move_doc_num = Шапка.НомерДокументаОснования;
				Исключение
					СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнен номер документа-основания.'");
				КонецПопытки;
				
				Попытка
					УведомлениеОбОтгрузкеМаркированныхТоваров.move_doc_date = Шапка.ДатаДокументаОснования;
				Исключение
					СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнена дата документа-основания.'");
				КонецПопытки;
				
				УведомлениеОбОтгрузкеМаркированныхТоваров.turnover_type = ИнтеграцияГИСМ.ВидОборотаТовара(Шапка.ВидОборотаТовара);
				
				УведомлениеОбОтгрузкеМаркированныхТоваров.order_details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузкеМаркированныхТоваров, "order_details");
				
				Для Каждого СтрокаТЧ Из Товары Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ)
						И Не ЗначениеЗаполнено(СтрокаТЧ.TID)
						И Не ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
						ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
							СообщениеXML,
							СтрШаблон(НСтр("ru = 'В строке %1 не указаны данные о КиЗ.'"),
								СтрокаТЧ.НомерСтроки));
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузкеМаркированныхТоваров.order_details, "sign");
					
					Если ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ) Тогда
						Попытка
							НоваяСтрока.sign_num.Добавить(СтрокаТЧ.НомерКиЗ);
						Исключение
							ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
								СообщениеXML,
								СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный номер КиЗ ""%2"".'"),
									СтрокаТЧ.НомерСтроки,
									СтрокаТЧ.НомерКиЗ));
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТЧ.TID) Тогда
						Попытка
							НоваяСтрока.sign_tid.Добавить(СтрокаТЧ.TID);
						Исключение
							ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
								СообщениеXML,
								СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный TID ""%2"".'"),
									СтрокаТЧ.НомерСтроки,
									СтрокаТЧ.TID));
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
						Попытка
							НоваяСтрока.sign_sgtin.Добавить(МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТЧ.EPC));
						Исключение
							ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
								СообщениеXML,
								СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный EPC ""%2"".'"),
									СтрокаТЧ.НомерСтроки,
									СтрокаТЧ.EPC));
						КонецПопытки;
					КонецЕсли;
					
					НоваяСтрока.cost = СтрокаТЧ.Стоимость;
					Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
						НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
					КонецЕсли;
					
					УведомлениеОбОтгрузкеМаркированныхТоваров.order_details.sign.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				ПередачаДанных.version    = ПередачаДанных.version;
				ПередачаДанных[ИмяПакета] = УведомлениеОбОтгрузкеМаркированныхТоваров;
				
				ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
				ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
				
				СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
				СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
				
				СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
				СообщениеXML.Организация  = Шапка.Организация;
				СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
				СообщениеXML.Документ     = ДокументСсылка;
				СообщениеXML.Основание    = Шапка.Основание;
				СообщениеXML.Версия       = НомерВерсии;
				
				СообщенияXML.Добавить(СообщениеXML);
				
				#КонецОбласти
				
			Иначе
				
				#Область undefined_order
				
				РеквизитыКонтрагента = ИнтеграцияГИСМВызовСервера.РеквизитыКонтрагента(Шапка.Контрагент);
				
				СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
					Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаМаркированныхТоваров, ДокументСсылка, НомерВерсии);
				
				ИмяТипа   = "query";
				ИмяПакета = "undefined_order";
				
				ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
				
				УведомлениеОбОтгрузкеМаркированныхТоваров = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
				УведомлениеОбОтгрузкеМаркированныхТоваров.action_id = УведомлениеОбОтгрузкеМаркированныхТоваров.action_id;
				
				Попытка
					УведомлениеОбОтгрузкеМаркированныхТоваров.sender_gln = РеквизитыОгранизации.GLN;
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
				КонецПопытки;
				
				Попытка
					Если ЗначениеЗаполнено(РеквизитыОгранизации.КПП) Тогда
						УведомлениеОбОтгрузкеМаркированныхТоваров.sender_kpp = РеквизитыОгранизации.КПП;
					КонецЕсли;
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиУказанНеКорректныйКППОрганизации(СообщениеXML, РеквизитыОгранизации.КПП, Шапка.Организация);
				КонецПопытки;
				
				subject = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузкеМаркированныхТоваров, "subject");
				
				Попытка
					subject.organisation_name = РеквизитыКонтрагента.НаименованиеПолное;
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненоПолноеНаименованиеКонтрагента(СообщениеXML, Шапка.Контрагент);
				КонецПопытки;
				
				Если РеквизитыКонтрагента.ЭтоФизическоеЛицо Тогда
					
					subject.fl = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(subject, "fl");
					
					Попытка
						subject.fl.inn = РеквизитыКонтрагента.ИНН;
					Исключение
						СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'У контрагента %1 не правильно заполнено ИНН.'"), Шапка.Контрагент);
					КонецПопытки;
					
				Иначе
					
					subject.ul = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(subject, "ul");
					
					Попытка
						subject.ul.inn = РеквизитыКонтрагента.ИНН;
					Исключение
						СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'У контрагента %1 не правильно заполнено ИНН.'"), Шапка.Контрагент);
					КонецПопытки;
					
					Попытка
						Если ЗначениеЗаполнено(РеквизитыКонтрагента.КПП) Тогда
							subject.ul.kpp = РеквизитыКонтрагента.КПП;
						КонецЕсли;
					Исключение
						СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'У контрагента %1 не правильно заполнено КПП.'"), Шапка.Контрагент);
					КонецПопытки;
					
				КонецЕсли;
				
				УведомлениеОбОтгрузкеМаркированныхТоваров.subject = subject;
				
				ХранилищеВременныхДат = Новый Соответствие;
				ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
					УведомлениеОбОтгрузкеМаркированныхТоваров,
					"move_date",
					Шапка.Дата,
					ХранилищеВременныхДат);
				
				Попытка
					УведомлениеОбОтгрузкеМаркированныхТоваров.move_doc_num = Шапка.НомерДокументаОснования;
				Исключение
					СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнен номер документа-основания.'");
				КонецПопытки;
				
				Попытка
					УведомлениеОбОтгрузкеМаркированныхТоваров.move_doc_date = Шапка.ДатаДокументаОснования;
				Исключение
					СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнена дата документа-основания.'");
				КонецПопытки;
				
				УведомлениеОбОтгрузкеМаркированныхТоваров.turnover_type = ИнтеграцияГИСМ.ВидОборотаТовара(Шапка.ВидОборотаТовара);
				
				УведомлениеОбОтгрузкеМаркированныхТоваров.order_details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузкеМаркированныхТоваров, "order_details");
				
				Для Каждого СтрокаТЧ Из Товары Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ)
						И Не ЗначениеЗаполнено(СтрокаТЧ.TID)
						И Не ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
						ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
							СообщениеXML,
							СтрШаблон(НСтр("ru = 'В строке %1 не указаны данные о КиЗ.'"),
								СтрокаТЧ.НомерСтроки));
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузкеМаркированныхТоваров.order_details, "sign");
					
					Если ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ) Тогда
						Попытка
							НоваяСтрока.sign_num.Добавить(СтрокаТЧ.НомерКиЗ);
						Исключение
							ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
								СообщениеXML,
								СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный номер КиЗ ""%2"".'"),
									СтрокаТЧ.НомерСтроки,
									СтрокаТЧ.НомерКиЗ));
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТЧ.TID) Тогда
						Попытка
							НоваяСтрока.sign_tid.Добавить(СтрокаТЧ.TID);
						Исключение
							ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
								СообщениеXML,
								СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный TID ""%2"".'"),
									СтрокаТЧ.НомерСтроки,
									СтрокаТЧ.TID));
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
						Попытка
							НоваяСтрока.sign_sgtin.Добавить(МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТЧ.EPC));
						Исключение
							ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
								СообщениеXML,
								СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный EPC ""%2"".'"),
									СтрокаТЧ.НомерСтроки,
									СтрокаТЧ.EPC));
						КонецПопытки;
					КонецЕсли;
					
					НоваяСтрока.cost = СтрокаТЧ.Стоимость;
					Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
						НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
					КонецЕсли;
					
					УведомлениеОбОтгрузкеМаркированныхТоваров.order_details.sign.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				ПередачаДанных.version    = ПередачаДанных.version;
				ПередачаДанных[ИмяПакета] = УведомлениеОбОтгрузкеМаркированныхТоваров;
				
				ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
				ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
				
				СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
				СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
				
				СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
				СообщениеXML.Организация  = Шапка.Организация;
				СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
				СообщениеXML.Документ     = ДокументСсылка;
				СообщениеXML.Основание    = Шапка.Основание;
				СообщениеXML.Версия       = НомерВерсии;
				
				СообщенияXML.Добавить(СообщениеXML);
				
				#КонецОбласти
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Шапка.ВидОборотаТовара = Перечисления.ВидОборотаТовараГИСМ.ЭкспортВСтраныЕАЭС Тогда
		
		#Область export_sale
		
		РеквизитыКонтрагента = ИнтеграцияГИСМВызовСервера.РеквизитыКонтрагента(Шапка.Контрагент);
		
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС, ДокументСсылка, НомерВерсииОтгрузкаЭкспортЕАЭС);
		
		ИмяТипа   = "query";
		ИмяПакета = "export_sale";
		
		ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
		
		УведомлениеОбЭкспорте = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
		УведомлениеОбЭкспорте.action_id = УведомлениеОбЭкспорте.action_id;
		
		Попытка
			УведомлениеОбЭкспорте.sender_gln = РеквизитыОгранизации.GLN;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
		КонецПопытки;
		
		УведомлениеОбЭкспорте.transborder_info = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбЭкспорте, "transborder_info");
		
		Попытка
			УведомлениеОбЭкспорте.transborder_info.country = РеквизитыКонтрагента.Страна;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 указана неверно или не заполнена страна регистрации.'"), Шапка.Контрагент));
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.transborder_info.org_name = РеквизитыКонтрагента.НаименованиеПолное;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 указан неверно или не заполнено полное наименование.'"), Шапка.Контрагент));
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.transborder_info.org_number = РеквизитыКонтрагента.РегистрационныйНомер;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 указан неверно или не заполнен регистрационный номер.'"), Шапка.Контрагент));
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.transborder_info.org_address = РеквизитыКонтрагента.ЮридическийАдрес;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для контрагента %1 указан неверно или не заполнен юридический адрес.'"), Шапка.Контрагент));
		КонецПопытки;
		
		ХранилищеВременныхДат = Новый Соответствие;
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			УведомлениеОбЭкспорте,
			"export_date",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		Попытка
			УведомлениеОбЭкспорте.export_doc_num = Шапка.НомерДокументаОснования;
		Исключение
			СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'В документе %1 не заполнен номер документа.'"), Шапка.Основание);
		КонецПопытки;
		
		Попытка
			УведомлениеОбЭкспорте.export_doc_date = Шапка.ДатаДокументаОснования;
		Исключение
			СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'В документе %1 не заполнена дата документа.'"), , Шапка.Основание);
		КонецПопытки;
		
		УведомлениеОбЭкспорте.exports = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбЭкспорте, "exports");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			УведомлениеОбЭкспорте.exports.sign_num.Добавить(СтрокаТЧ.НомерКиЗ);
			
		КонецЦикла;
		
		ПередачаДанных.version    = ПередачаДанных.version;
		ПередачаДанных[ИмяПакета] = УведомлениеОбЭкспорте;
		
		ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
		ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
		
		СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
		СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
		
		СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
		СообщениеXML.Организация  = Шапка.Организация;
		СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЭкспортЕАЭС;
		СообщениеXML.Документ     = ДокументСсылка;
		СообщениеXML.Основание    = Шапка.Основание;
		СообщениеXML.Версия       = НомерВерсииОтгрузкаЗаПределыЕАЭС;
		
		СообщенияXML.Добавить(СообщениеXML);
		
		#КонецОбласти
		
	ИначеЕсли Шапка.ВидОборотаТовара = Перечисления.ВидОборотаТовараГИСМ.ЭкспортЗаПределыЕАЭС Тогда
		
		#Область item_removal
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭС, ДокументСсылка, НомерВерсииОтгрузкаЗаПределыЕАЭС);
		
		ИмяТипа   = "query";
		ИмяПакета = "item_removal";
		
		ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
		
		УведомлениеОбОтгрузке = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
		УведомлениеОбОтгрузке.action_id  = УведомлениеОбОтгрузке.action_id;
		
		Попытка
			УведомлениеОбОтгрузке.sender_gln = РеквизитыОгранизации.GLN;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
		КонецПопытки;
		
		УведомлениеОбОтгрузке.action = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке, "action");
		УведомлениеОбОтгрузке.action.export = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке.action, "export");
		УведомлениеОбОтгрузке.action.export.fts_gtd_info                   = ИНтеграцияГИСМ.ОбъектXDTO("fts_gtd_info_type");
		УведомлениеОбОтгрузке.action.export.fts_gtd_info.customs_code      = Шапка.КодТаможенногоОргана;
		УведомлениеОбОтгрузке.action.export.fts_gtd_info.registration_date = Шапка.ДатаРегистрацииДекларации;
		УведомлениеОбОтгрузке.action.export.fts_gtd_info.gtd_number        = Шапка.РегистрационныйНомерДекларации;
		
		ХранилищеВременныхДат = Новый Соответствие;
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			УведомлениеОбОтгрузке,
			"action_date",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		УведомлениеОбОтгрузке.details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке, "details");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ)
				И Не ЗначениеЗаполнено(СтрокаТЧ.TID)
				И Не ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
				ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'В строке %1 не указаны данные о КиЗ.'"),
						СтрокаТЧ.НомерСтроки));
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(УведомлениеОбОтгрузке.details, "sign");
			
			Если ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ) Тогда
				Попытка
					НоваяСтрока.sign_num.Добавить(СтрокаТЧ.НомерКиЗ);
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный номер КиЗ ""%2"".'"),
							СтрокаТЧ.НомерСтроки,
							СтрокаТЧ.НомерКиЗ));
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.TID) Тогда
				Попытка
					НоваяСтрока.sign_tid.Добавить(СтрокаТЧ.TID);
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный TID ""%2"".'"),
							СтрокаТЧ.НомерСтроки,
							СтрокаТЧ.TID));
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
				Попытка
					НоваяСтрока.sign_sgtin.Добавить(МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТЧ.EPC));
				Исключение
					ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(НСтр("ru = 'В строке %1 указан некорректный EPC ""%2"".'"),
							СтрокаТЧ.НомерСтроки,
							СтрокаТЧ.EPC));
				КонецПопытки;
			КонецЕсли;
			
			УведомлениеОбОтгрузке.details.sign.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		ПередачаДанных.version    = ПередачаДанных.version;
		ПередачаДанных[ИмяПакета] = УведомлениеОбОтгрузке;
		
		ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
		ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
		
		СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
		СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
		
		СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
		СообщениеXML.Организация  = Шапка.Организация;
		СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхОтгрузкаЗаПределыЕАЭС;
		СообщениеXML.Документ     = ДокументСсылка;
		СообщениеXML.Основание    = Шапка.Основание;
		СообщениеXML.Версия       = НомерВерсииОтгрузкаЗаПределыЕАЭС;
		
		СообщенияXML.Добавить(СообщениеXML);
		
		#КонецОбласти
		
	КонецЕсли;
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ИнтеграцияГИСМПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
