#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании документа ЗаказПоставщику.
//
// Параметры:
//  ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику - ЗаказПоставщику.
//
Процедура ЗаполнитьНаОснованииЗаказаПоставщику(ЗаказПоставщику) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Аванс) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор КАК Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	Документ.Запасы.(
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		ВЫБОР
	|			КОГДА Документ.Запасы.Количество = 0
	|				ТОГДА 0
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Запасы.Сумма / ((Документ.Запасы.СтавкаНДС.Ставка + 100) / 100) / Документ.Запасы.Количество
	|			ИНАЧЕ Документ.Запасы.Сумма / Документ.Запасы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Запасы.Сумма / ((Документ.Запасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ Документ.Запасы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Всего,
	|		Содержание
	|	)
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказПоставщику);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
	
КонецПроцедуры // ЗаполнитьНаОснованииЗаказаПоставщику()

// Обработчик заполнения на основании документа ДополнительныеРасходы.
//
// Параметры:
//  ДополнительныеРасходы	 - ДокументСсылка.ДополнительныеРасходы - ДополнительныеРасходы.
//
Процедура ЗаполнитьНаОснованииДополнительногоРасхода(ДополнительныеРасходы) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	Документ.Расходы.(
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		ВЫБОР
	|			КОГДА Документ.Расходы.Количество = 0
	|				ТОГДА 0
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Расходы.Сумма / ((Документ.Расходы.СтавкаНДС.Ставка + 100) / 100) / Документ.Расходы.Количество
	|			ИНАЧЕ Документ.Расходы.Сумма / Документ.Расходы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Расходы.Сумма / ((Документ.Расходы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ Документ.Расходы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Всего
	|	)
	|ИЗ
	|	Документ.ДополнительныеРасходы КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеРасходы);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Расходы.Выгрузить());
	
КонецПроцедуры // ЗаполнитьНаОснованииДополнительногоРасхода()

// Обработчик заполнения на основании документа АвансовыйОтчет.
//
// Параметры:
//  АвансовыйОтчет - ДокументСсылка.АвансовыйОтчет - АвансовыйОтчет.
//
Процедура ЗаполнитьНаОснованииАвансовогоОтчета(АвансовыйОтчет) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	Документ.Запасы.(
	|		Номенклатура,
	|		Характеристика,
	|		Партия,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		ВЫБОР
	|			КОГДА Документ.Запасы.Количество = 0
	|				ТОГДА 0
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Запасы.Сумма / ((Документ.Запасы.СтавкаНДС.Ставка + 100) / 100) / Документ.Запасы.Количество
	|			ИНАЧЕ Документ.Запасы.Сумма / Документ.Запасы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Запасы.Сумма / ((Документ.Запасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ Документ.Запасы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Всего
	|	),
	|	Документ.Расходы.(
	|		Номенклатура КАК Номенклатура,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА Документ.Расходы.Количество = 0
	|				ТОГДА 0
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Расходы.Сумма / ((Документ.Расходы.СтавкаНДС.Ставка + 100) / 100) / Документ.Расходы.Количество
	|			ИНАЧЕ Документ.Расходы.Сумма / Документ.Расходы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Расходы.Сумма / ((Документ.Расходы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ Документ.Расходы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего
	|	)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", АвансовыйОтчет);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
	
	Для каждого СтрокаТабличнойЧасти ИЗ ВыборкаИзРезультатаЗапроса.Расходы.Выгрузить() Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНаОснованииАвансовогоОтчета()

// Обработчик заполнения на основании документа ПриходнаяНакладная.
//
// Параметры:
//  ПриходнаяНакладная - ДокументСсылка.ПриходнаяНакладная - ПриходнаяНакладная.
//
Процедура ЗаполнитьНаОснованииПриходнойНакладной(ПриходнаяНакладная) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	Документ.Запасы.(
	|		Номенклатура,
	|		Характеристика,
	|		Партия,
	|		Содержание,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		ВЫБОР
	|			КОГДА Документ.Запасы.Количество = 0
	|				ТОГДА 0
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Запасы.Сумма / ((Документ.Запасы.СтавкаНДС.Ставка + 100) / 100) / Документ.Запасы.Количество
	|			ИНАЧЕ Документ.Запасы.Сумма / Документ.Запасы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Запасы.Сумма / ((Документ.Запасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ Документ.Запасы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Всего,
	|		СтранаПроисхождения,
	|		НомерГТД
	|	),
	|	Документ.Расходы.(
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА Документ.Расходы.Количество = 0
	|				ТОГДА 0
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Расходы.Сумма / ((Документ.Расходы.СтавкаНДС.Ставка + 100) / 100) / Документ.Расходы.Количество
	|			ИНАЧЕ Документ.Расходы.Сумма / Документ.Расходы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ.Расходы.Сумма / ((Документ.Расходы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ Документ.Расходы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего
	|	)
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПриходнаяНакладная);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
	
	Для каждого СтрокаТабличнойЧасти ИЗ ВыборкаИзРезультатаЗапроса.Расходы.Выгрузить() Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНаОснованииПриходнойНакладной()

// Процедура заполняет документ на основании КорректировкиПоступления
//
Процедура ЗаполнитьНаОснованииКорректировкиПоступления(ДанныеЗаполнения) Экспорт
	
	ИсходныйДокумент = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДанныеЗаполнения.ДокументОснование);
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление)
	|	КОНЕЦ КАК ВидОперации,
	|	КорректировкаПоступления.Организация,
	|	КорректировкаПоступления.Контрагент,
	|	КорректировкаПоступления.Договор,
	|	КорректировкаПоступления.ВалютаДокумента,
	|	КорректировкаПоступления.Курс,
	|	КорректировкаПоступления.Кратность,
	|	КорректировкаПоступления.Запасы.(
	|		Номенклатура,
	|		Характеристика,
	|		Партия,
	|		Содержание,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		ВЫБОР
	|			КОГДА КорректировкаПоступления.Запасы.Количество = 0
	|				ТОГДА 0
	|			КОГДА КорректировкаПоступления.СуммаВключаетНДС
	|				ТОГДА КорректировкаПоступления.Запасы.Сумма / ((КорректировкаПоступления.Запасы.СтавкаНДС.Ставка + 100) / 100) / КорректировкаПоступления.Запасы.Количество
	|			ИНАЧЕ КорректировкаПоступления.Запасы.Сумма / КорректировкаПоступления.Запасы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА КорректировкаПоступления.СуммаВключаетНДС
	|				ТОГДА КорректировкаПоступления.Запасы.Сумма / ((КорректировкаПоступления.Запасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ КорректировкаПоступления.Запасы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Всего,
	|		СтранаПроисхождения,
	|		НомерГТД
	|	),
	|	КорректировкаПоступления.Расходы.(
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА КорректировкаПоступления.Расходы.Количество = 0
	|				ТОГДА 0
	|			КОГДА КорректировкаПоступления.СуммаВключаетНДС
	|				ТОГДА КорректировкаПоступления.Расходы.Сумма / ((КорректировкаПоступления.Расходы.СтавкаНДС.Ставка + 100) / 100) / КорректировкаПоступления.Расходы.Количество
	|			ИНАЧЕ КорректировкаПоступления.Расходы.Сумма / КорректировкаПоступления.Расходы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА КорректировкаПоступления.СуммаВключаетНДС
	|				ТОГДА КорректировкаПоступления.Расходы.Сумма / ((КорректировкаПоступления.Расходы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ КорректировкаПоступления.Расходы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего
	|	),
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	КорректировкаПоступления.Дата,
	|	КорректировкаПоступления.НомерИсправления,
	|	КорректировкаПоступления.ДатаИсправления
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
			
			СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
			Курс = СтруктураПоВалюте.Курс;
			Кратность = СтруктураПоВалюте.Кратность;
			
		КонецЕсли;
		
		Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
		
		Для каждого СтрокаТабличнойЧасти ИЗ ВыборкаИзРезультатаЗапроса.Расходы.Выгрузить() Цикл
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументПоступления = ДанныеЗаполнения.ДокументОснование;
	
	УчитыватьИсправлениеИсходногоДокумента = Ложь;
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	
	ТипИсправляемогоДокумента = ТипЗнч(Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь));
	КорректировкаКорректировочногоСчетаФактуры = ТипИсправляемогоДокумента = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		
	ДанныеСчетФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДанныеЗаполнения.ИсправляемыйДокументПоступления, Истина);
	Если ДанныеСчетФактуры <> Неопределено Тогда
		ИсправляемыйСчетФактура = ДанныеСчетФактуры.Ссылка;
	КонецЕсли;
	
	Если Исправление ИЛИ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	СчетФактураПолученный.Исправление КАК Исправление,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураПолученный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправления,
		|	СчетФактураПолученный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураПолученный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА СчетФактураПолученный.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученный.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА СчетФактураПолученный.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученный.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ИсходныйДокумент
		|	И НЕ СчетФактураПолученный.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				НомерИсходногоДокумента = Выборка.НомерВходящегоДокумента;
				ДатаИсходногоДокумента  = Выборка.ДатаВходящегоДокумента;
				
				Если Выборка.Исправление Тогда
					УчитыватьИсправлениеИсходногоДокумента = Истина;
					НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
					ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
				КонецЕсли;
				
			Иначе
				
				Если Выборка.КорректировочныйСчетФактура Тогда
					ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка;
				КонецЕсли;
				
				Если НЕ Выборка.КорректировочныйСчетФактура 
					И ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
					НомерВходящегоДокумента = "";
					ДатаВходящегоДокумента  = "";
				Иначе
					НомерВходящегоДокумента = Выборка.НомерВходящегоДокумента;
					ДатаВходящегоДокумента  = Выборка.ДатаВходящегоДокумента;
				КонецЕсли;
				
				Если ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
					НомерИсходногоДокумента    = Выборка.НомерИсходногоДокумента;
					ДатаИсходногоДокумента     = Выборка.ДатаИсходногоДокумента;
					Если Выборка.Исправление И НЕ Выборка.КорректировочныйСчетФактура Тогда
						НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
						ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
						ПереопределятьПараметрыИсходногоДокумента = Истина;
					ИначеЕсли Выборка.КорректировочныйСчетФактура Тогда
						НомерИсправленияИсходногоДокумента = Выборка.НомерИсправленияИсходногоДокумента;
						ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента) 
					ИЛИ ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
					УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорректируемыйДокумент", ДанныеЗаполнения.ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Исправление КАК Исправление,
	|	СчетФактураПолученный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправления
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &КорректируемыйДокумент
	|	И НЕ СчетФактураПолученный.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Исправление Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
				Если НЕ УчитыватьИсправлениеИсходногоДокумента ИЛИ ПереопределятьПараметрыИсходногоДокумента Тогда
					Если ЗначениеЗаполнено(Выборка.НомерИсправления) Тогда
						НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
						ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
						УчитыватьИсправлениеИсходногоДокумента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаОснованииПриходнойНакладной()

// Обработчик заполнения на основании документа ОтчетПереработчика.
//
// Параметры:
//  ОтчетПереработчика - ДокументСсылка.ОтчетПереработчика - ОтчетПереработчика.
//
Процедура ЗаполнитьНаОснованииОтчетаПереработчика(ОтчетПереработчика) Экспорт
	
	Запасы.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	Документ.Расход КАК Номенклатура,
	|	Документ.Расход.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК Количество,
	|	ВЫБОР
	|		КОГДА Документ.СуммаВключаетНДС
	|			ТОГДА Документ.Сумма / ((Документ.СтавкаНДС.Ставка + 100) / 100)
	|		ИНАЧЕ Документ.Сумма
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА Документ.СуммаВключаетНДС
	|			ТОГДА Документ.Сумма / ((Документ.СтавкаНДС.Ставка + 100) / 100)
	|		ИНАЧЕ Документ.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Документ.СтавкаНДС,
	|	Документ.СуммаНДС,
	|	Документ.Всего
	|ИЗ
	|	Документ.ОтчетПереработчика КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ОтчетПереработчика);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	НоваяСтрока = Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзРезультатаЗапроса);
	
КонецПроцедуры // ЗаполнитьНаОснованииОтчетаПереработчика()

// Обработчик заполнения на основании документа ПоступлениеВКассу или ПоступлениеНаСчет.
//
// Параметры:
//  БанковскийДокумент	 - ДокументСсылка.ПоступлениеВКассу - поступление в кассу
//                       - ДокументСсылка.ПоступлениеНаСчет - поступление на счет
//
Процедура ЗаполнитьНаОснованииКассовогоБанковскогоДокумента(БанковскийДокумент) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Аванс) КАК ВидОперации,
	|	РасходИзКассы.Организация,
	|	РасходИзКассы.Контрагент,
	|	РасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДокумента,
	|	ТЧДоговор.Договор,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	""Предоплата"" КАК Содержание,
	|	ТЧСуммаПлатежа.СтавкаНДС,
	|	ТЧСуммаПлатежа.СуммаПлатежа КАК Сумма,
	|	ТЧСуммаПлатежа.СуммаНДС,
	|	ТЧСуммаПлатежа.Всего
	|ИЗ
	|	&ИмяТаблицыДокумента КАК РасходИзКассы,
	|	(ВЫБРАТЬ
	|		РасходИзКассыРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|		СУММА(РасходИзКассыРасшифровкаПлатежа.СуммаПлатежа - РасходИзКассыРасшифровкаПлатежа.СуммаНДС) КАК СуммаПлатежа,
	|		СУММА(РасходИзКассыРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|		РасходИзКассыРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(РасходИзКассыРасшифровкаПлатежа.СуммаПлатежа) КАК Всего
	|	ИЗ
	|		&ИмяТаблицыРасшифровкиПлатежа КАК РасходИзКассыРасшифровкаПлатежа
	|	ГДЕ
	|		РасходИзКассыРасшифровкаПлатежа.Ссылка = &Ссылка
	|		И РасходИзКассыРасшифровкаПлатежа.ПризнакАванса
	|		И РасходИзКассыРасшифровкаПлатежа.СтавкаНДС.Ставка > 0
	|		И НЕ РасходИзКассыРасшифровкаПлатежа.СтавкаНДС.НеОблагается
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходИзКассыРасшифровкаПлатежа.Ссылка,
	|		РасходИзКассыРасшифровкаПлатежа.СтавкаНДС) КАК ТЧСуммаПлатежа,
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасходИзКассыРасшифровкаПлатежа.Договор КАК Договор,
	|		РасходИзКассыРасшифровкаПлатежа.Курс КАК Курс,
	|		РасходИзКассыРасшифровкаПлатежа.Кратность КАК Кратность
	|	ИЗ
	|		&ИмяТаблицыРасшифровкиПлатежа КАК РасходИзКассыРасшифровкаПлатежа
	|	ГДЕ
	|		РасходИзКассыРасшифровкаПлатежа.Ссылка = &Ссылка
	|		И РасходИзКассыРасшифровкаПлатежа.ПризнакАванса
	|		И РасходИзКассыРасшифровкаПлатежа.СтавкаНДС.Ставка > 0
	|		И НЕ РасходИзКассыРасшифровкаПлатежа.СтавкаНДС.НеОблагается) КАК ТЧДоговор
	|ГДЕ
	|	РасходИзКассы.Ссылка = &Ссылка");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыДокумента", БанковскийДокумент.Метаданные().ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыРасшифровкиПлатежа", БанковскийДокумент.Метаданные().ПолноеИмя() + ".РасшифровкаПлатежа");
	
	Запрос.УстановитьПараметр("Ссылка", БанковскийДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нет данных для счета-фактуры на аванс!
		|Документ-основание:
		|%1.'"),
		БанковскийДокумент);
	КонецЕсли;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если БанковскийДокумент.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ЭтотОбъект.Договор = БанковскийДокумент.РасшифровкаПлатежа[0].Договор;
		
	КонецЕсли;
	
	ЭтотОбъект.ДокументОснование = БанковскийДокумент;
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
		Курс 				= СтруктураПоВалюте.Курс;
		Кратность			= СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	Запасы.Загрузить(РезультатЗапроса.Выгрузить());
	
	// Заполним цену и количество, для поддержки работы пересчета
	Для каждого СтрокаЗапасов Из Запасы Цикл 
		
		СтрокаЗапасов.Количество = 1;
		СтрокаЗапасов.Цена = СтрокаЗапасов.Сумма;
		
	КонецЦикла;
	
	// Если ставка НДС не рсчетная, то подставим расчетную ставку
	Для каждого НоваяСтрока Из Запасы Цикл
		
		Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И НЕ НоваяСтрока.СтавкаНДС.Расчетная Тогда
			
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(НоваяСтрока.СтавкаНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНаОснованииКассовогоБанковскогоДокумента()

// Обработчик заполнения на основании документа ОтчетКомиссионера
//
// Параметры:
//  ОтчетКомиссионера	 - ДокументСсылка.ОтчетКомиссионера - ОтчетКомиссионера.
//
Процедура ЗаполнитьНаОснованииОтчетаКомиссионера(ОтчетКомиссионера) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетКомиссионераЗапасы.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомиссионераЗапасы.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомиссионераЗапасы.СуммаВознаграждения / ((ОтчетКомиссионераЗапасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ ОтчетКомиссионераЗапасы.СуммаВознаграждения
	|		КОНЕЦ) КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомиссионераЗапасы.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомиссионераЗапасы.СуммаВознаграждения / ((ОтчетКомиссионераЗапасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ ОтчетКомиссионераЗапасы.СуммаВознаграждения
	|		КОНЕЦ) КАК Сумма,
	|	ОтчетКомиссионераЗапасы.СтавкаНДС,
	|	СУММА(ОтчетКомиссионераЗапасы.СуммаНДСВознаграждения) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомиссионераЗапасы.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомиссионераЗапасы.СуммаВознаграждения
	|			ИНАЧЕ ОтчетКомиссионераЗапасы.СуммаВознаграждения + ОтчетКомиссионераЗапасы.СуммаНДСВознаграждения
	|		КОНЕЦ) КАК Всего
	|ПОМЕСТИТЬ Вознаграждение
	|ИЗ
	|	Документ.ОтчетКомиссионера.Запасы КАК ОтчетКомиссионераЗапасы
	|ГДЕ
	|	ОтчетКомиссионераЗапасы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераЗапасы.СтавкаНДС,
	|	ОтчетКомиссионераЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	""Комиссионное вознаграждение"" КАК Содержание,
	|	1 КАК Количество,
	|	Вознаграждение.Цена КАК Цена,
	|	Вознаграждение.Сумма КАК Сумма,
	|	Вознаграждение.СтавкаНДС КАК СтавкаНДС,
	|	Вознаграждение.СуммаНДС КАК СуммаНДС,
	|	Вознаграждение.Всего КАК Всего
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вознаграждение КАК Вознаграждение
	|		ПО Документ.Ссылка = Вознаграждение.Ссылка
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка,
	|	Вознаграждение.СтавкаНДС,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	Вознаграждение.Цена,
	|	Вознаграждение.Сумма,
	|	Вознаграждение.СуммаНДС,
	|	Вознаграждение.Всего");
	
	Запрос.УстановитьПараметр("Ссылка", ОтчетКомиссионера);
		
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
			
			СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
			Курс 		= СтруктураПоВалюте.Курс;
			Кратность	= СтруктураПоВалюте.Кратность;
			
		КонецЕсли;
		
		Запасы.Очистить();
		НоваяСтрока = Запасы.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзРезультатаЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаОснованииОтчетаКомиссионера()

// Обработчик заполнения на основании документа ОтчетКомитенту.
//
// Параметры:
//  ОтчетКомитенту - ДокументСсылка.ОтчетКомитенту - ОтчетКомитенту.
//
Процедура ЗаполнитьНаОснованииОтчетаКомитенту(ОтчетКомитенту) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор КАК Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	ИСТИНА КАК ОнЖе
	|ИЗ
	|	Документ.ОтчетКомитенту КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ОтчетКомитенту);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	ЭтотОбъект.ДокументОснование = ОтчетКомитенту;
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс 				= СтруктураПоВалюте.Курс;
		Кратность			= СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Поступление;
	
	// 
	// ТЧ Запасы не заполняем. 
	//
	
КонецПроцедуры // ЗаполнитьНаОснованииОтчетаКомитенту()

Функция НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД()
	
	Возврат ГрузовыеТаможенныеДекларацииСервер.НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД(Ссылка);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПреобразоватьДанныеЗаполненияВСсылку(ДанныеЗаполнения);
	
	ПроверитьУникальностьСчетаФактуры(ДанныеЗаполнения);
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомитенту")] = "ЗаполнитьНаОснованииОтчетаКомитенту";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьНаОснованииЗаказаПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомиссионера")] = "ЗаполнитьНаОснованииОтчетаКомиссионера";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьНаОснованииДополнительногоРасхода";
	СтратегияЗаполнения[Тип("ДокументСсылка.АвансовыйОтчет")] = "ЗаполнитьНаОснованииАвансовогоОтчета";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьНаОснованииПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетПереработчика")] = "ЗаполнитьНаОснованииОтчетаПереработчика";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходИзКассы")] = "ЗаполнитьНаОснованииКассовогоБанковскогоДокумента";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходСоСчета")] = "ЗаполнитьНаОснованииКассовогоБанковскогоДокумента";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаПоступления")] = "ЗаполнитьНаОснованииКорректировкиПоступления";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если НЕ (ЗначениеЗаполнено(ДокументОснование) 
			И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту")
				ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера")))
		И НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
		И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ПроверяемыеРеквизиты.Добавить("Запасы.Номенклатура");
		ПроверяемыеРеквизиты.Добавить("Запасы.Количество");
		ПроверяемыеРеквизиты.Добавить("Запасы.ЕдиницаИзмерения");
		ПроверяемыеРеквизиты.Добавить("Запасы.Цена");
		
	КонецЕсли;
	
	Если Исправление Тогда
		
		ПроверяемыеРеквизиты.Добавить("НомерИсправления");
		ПроверяемыеРеквизиты.Добавить("ДатаИсправления");
		
	Иначе
		
		ПроверяемыеРеквизиты.Добавить("НомерВходящегоДокумента");
		ПроверяемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		Для каждого СтрокаТаблицыЗапасов Из Запасы Цикл
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
				И ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД)
				И (НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения) 
					ИЛИ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия) Тогда
			
				ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не верно указана страна происхождения'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
			
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
				ТекстОшибки,
				"Запасы",
				СтрокаТаблицыЗапасов.НомерСтроки,
				"СтранаПроисхождения",
				Отказ);
				
			КонецЕсли;
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
				И (ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения)
					И НЕ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД) Тогда
				
				ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не указан номер ГТД'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
				ТекстОшибки,
				"Запасы",
				СтрокаТаблицыЗапасов.НомерСтроки,
				"НомерГТД",
				Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Документ основание должен быть проведен
	Если ЗначениеЗаполнено(ДокументОснование)
		И НЕ ДокументОснование.Проведен Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ-основание %ПредставлениеДокументаОснования% не проведен. Проведение счет фактуры не возможно.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеДокументаОснования%", """" + ТипЗнч(ДокументОснование) + " №" + ДокументОснование.Номер + " от " + ДокументОснование.Дата + """");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстОшибки, , , , Отказ);
		
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Запасы.Сумма");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка на уникальность счета-фактуры полученной
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
			НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Истина);
			Если ЗначениеЗаполнено(НайденныйСчетФактура) И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
			
				ТекстСообщения = НСтр("ru = 'Для документа ""%Ссылка%"" 
										|уже введен счет-фактура ""%СчетФактура%"". 
										|Запись еще одного документа ""Счет-фактура (полученный)"" не допускается!'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ДокументОснование);						
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетФактура%", НайденныйСчетФактура.Ссылка);
				ПолеСообщения = "Объект.ДокументОснование";
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,ПолеСообщения, Отказ);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД() Тогда
		
		// Инициализация дополнительных свойств для проведения документа.
		УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		
		// Инициализация данных документа.
		Документы.СчетФактураПолученный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
		// Подготовка наборов записей.
		УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		
		// Отражение в разделах учета.
		УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
		
		// Запись наборов записей.
		УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
		// Контроль
		Документы.СчетФактураПолученный.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);    
		
		ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.СчетФактураПолученный.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
		
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ФункциональнаяОпцияИспользоватьСчетаФактурыВходящие.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПреобразоватьДанныеЗаполненияВСсылку(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументЗаполнения") Тогда
		ДанныеЗаполнения = ДанныеЗаполнения.ДокументЗаполнения;
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ЗаполнитьПоДокументамОснованиям") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.ЗаполнитьПоДокументамОснованиям Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДокументОснование;
	
КонецПроцедуры

Процедура ПроверитьУникальностьСчетаФактуры(ДанныеЗаполнения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "ДокументОснование, ВидОперации");
		Если УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(РеквизитыОснования.ДокументОснование, Истина) = Неопределено Тогда
			Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
				ВызватьИсключение НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДанныеЗаполнения, Истина);
	Если Не ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныйСчетФактура.Ссылка = Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Для документа ""%1""
	|уже введен счет-фактура ""%2"".
	|Запись еще одного документа ""Счет-фактура (полученный)"" не допускается!'"),
	ДанныеЗаполнения,
	НайденныйСчетФактура.Ссылка);
КонецПроцедуры

#КонецОбласти

#КонецЕсли