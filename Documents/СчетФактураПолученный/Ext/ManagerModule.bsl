#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаСчетФактураПолученный, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КорректировкаПоступления.ОтражатьВУчете, ИСТИНА) КАК ОтражатьВУчете
	|ПОМЕСТИТЬ Вт_ОтражатьВУчете
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|		ПО СчетФактураПолученный.ДокументОснование = КорректировкаПоступления.Ссылка
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка
	|ПОМЕСТИТЬ Вт_КорректируемыйСФ
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_ОтражатьВУчете КАК Вт_ОтражатьВУчете
	|		ПО (Вт_ОтражатьВУчете.ОтражатьВУчете)
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВЫРАЗИТЬ(СчетФактураПолученный.ДокументОснование КАК Документ.КорректировкаПоступления).ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|			ГДЕ
	|				СчетФактураПолученный.Ссылка = &Ссылка
	|				И ТИПЗНАЧЕНИЯ(СчетФактураПолученный.ДокументОснование) = ТИП(Документ.КорректировкаПоступления))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	СчетФактураПолученныйЗапасы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МИНИМУМ(СчетФактураПолученныйЗапасы.НомерСтроки) КАК НомерСтроки,
	|	СчетФактураПолученныйЗапасы.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СчетФактураПолученныйЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СчетФактураПолученныйЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СчетФактураПолученныйЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СчетФактураПолученныйЗапасы.Количество
	|			ИНАЧЕ СчетФактураПолученныйЗапасы.Количество * СчетФактураПолученныйЗапасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ) КАК Количество,
	|	СчетФактураПолученныйЗапасы.СтранаПроисхождения,
	|	СчетФактураПолученныйЗапасы.НомерГТД
	|ИЗ
	|	Документ.СчетФактураПолученный.Запасы КАК СчетФактураПолученныйЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_ОтражатьВУчете КАК Вт_ОтражатьВУчете
	|		ПО (Вт_ОтражатьВУчете.ОтражатьВУчете)
	|ГДЕ
	|	СчетФактураПолученныйЗапасы.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И СчетФактураПолученныйЗапасы.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И СчетФактураПолученныйЗапасы.Ссылка = &Ссылка
	|	И (СчетФактураПолученныйЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление)
	|			ИЛИ СчетФактураПолученныйЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйЗапасы.СтранаПроисхождения,
	|	СчетФактураПолученныйЗапасы.НомерГТД,
	|	СчетФактураПолученныйЗапасы.Номенклатура,
	|	СчетФактураПолученныйЗапасы.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СчетФактураПолученныйЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СчетФактураПолученныйЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыВРазрезеГТД.Организация,
	|	ЗапасыВРазрезеГТД.Период,
	|	ЗапасыВРазрезеГТД.ВидДвижения,
	|	ЗапасыВРазрезеГТД.НомерСтроки,
	|	ЗапасыВРазрезеГТД.Номенклатура,
	|	ЗапасыВРазрезеГТД.Характеристика,
	|	ЗапасыВРазрезеГТД.Партия,
	|	-ЗапасыВРазрезеГТД.Количество,
	|	ЗапасыВРазрезеГТД.СтранаПроисхождения,
	|	ЗапасыВРазрезеГТД.НомерГТД
	|ИЗ
	|	РегистрНакопления.ЗапасыВРазрезеГТД КАК ЗапасыВРазрезеГТД
	|ГДЕ
	|	ЗапасыВРазрезеГТД.Регистратор В
	|			(ВЫБРАТЬ
	|				Вт_КорректируемыйСФ.Ссылка
	|			ИЗ
	|				Вт_КорректируемыйСФ КАК Вт_КорректируемыйСФ)
	|	И (ЗапасыВРазрезеГТД.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление)
	|			ИЛИ ЗапасыВРазрезеГТД.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка))");
	
	Запрос.УстановитьПараметр("Ссылка"							, ДокументСсылкаСчетФактураПолученный);
	Запрос.УстановитьПараметр("Организация"						, СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени"					, СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики"   	, СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии"				, СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", МассивРезультатов[2].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаСчетФактураПолученный, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временная таблицы "ДвиженияЗапасыВРазрезеГТДИзменение"
	// содержат записи, необходимо выполнить контроль поступления товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Отрицательный остаток по товарам в разрезе ГТД.
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДокументОбъектСчетФактураПолученный = ДокументСсылкаСчетФактураПолученный.ПолучитьОбъект();
			ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокументОбъектСчетФактураПолученный, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Процедура печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати) Экспорт
	
	НачалоИспользованияСФ1137 = Константы.НачалоИспользованияСФ1137.Получить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СчетФактураПолученный";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК ДатаДокумента,
	|	СчетФактураПолученный.Номер КАК Номер,
	|	СчетФактураПолученный.Контрагент КАК Поставщик,
	|	СчетФактураПолученный.Организация КАК Покупатель,
	|	СчетФактураПолученный.Организация КАК Плательщик,
	|	СчетФактураПолученный.Организация.Префикс КАК Префикс,
	|	СчетФактураПолученный.Договор.Представление КАК Основание,
	|	СчетФактураПолученный.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(СчетФактураПолученный.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	СчетФактураПолученный.ДатаПлатежноРасчетногоДокумента КАК ДатаПРД,
	|	СчетФактураПолученный.НомерПлатежноРасчетногоДокумента КАК НомерПРД,
	|	СчетФактураПолученный.ВидОперации,
	|	СчетФактураПолученный.Организация КАК Руководитель,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Кратность,
	|	СчетФактураПолученный.Курс,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактураПолученный.Исправление,
	|	СчетФактураПолученный.НомерИсправления,
	|	СчетФактураПолученный.ДатаИсправления
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&МассивОбъектов)
	|	И СчетФактураПолученный.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Пока Шапка.Следующий() Цикл
		
		Если Шапка.ДатаВходящегоДокумента >= '20150101'
			И ТипЗнч(Шапка.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") 
			И Шапка.Ссылка.СчетаФактурыВыданныеПокупателям.Количество() > 0 Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураПолученный.ПФ_MXL_СчетФактура1137");
			ОбластьРазъяснение = Макет.ПолучитьОбласть("СводныйКомиссионный");
			
			ОбластьРазъяснение.Параметры.Заполнить(Новый Структура("Разъяснение", Нстр("ru='Формирование полученного (входящего) счета-фактуры на основании отчета комитенту по сводным данным (несколько покупателей) не поддерживается.'")));
			ТабличныйДокумент.Вывести(ОбластьРазъяснение);
			
			Возврат ТабличныйДокумент;
			
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Шапка.ДатаДокумента < '20090609' Тогда
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура283";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураПолученный.ПФ_MXL_СчетФактура283");
			
		ИначеЕсли Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура_СчетФактура283";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураПолученный.ПФ_MXL_СчетФактура1137");
			
		Иначе

			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура451";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураПолученный.ПФ_MXL_СчетФактура451");

		КонецЕсли;
		
		СведенияОПокупателе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.ДатаДокумента, ,);
		СведенияОПоставщике  = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаДокумента, ,);
		
		ИспользоватьПересчет = Шапка.РасчетыВУсловныхЕдиницах И НЕ Шапка.Валюта = Константы.НациональнаяВалюта.Получить();
		
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.Номер = "Счет-фактура № " + Шапка.НомерВходящегоДокумента
				+ " от " + Формат(Шапка.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'")+ " г.";
				
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			Если Шапка.Исправление Тогда
				ТекстИсправление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исправление № %1 от %2'"),
					Шапка.НомерИсправления,
					Формат(Шапка.ДатаИсправления, "ДФ=dd.MM.yyyy")
				);
			Иначе
				ТекстИсправление = "Исправление № -- от --";
			КонецЕсли;
			
			ОбластьМакета.Параметры.НомерИсправления = ТекстИсправление;
			
		КонецЕсли;
		
		Если Шапка.ДатаДокумента < '20090609' Тогда
			
			ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			
		ИначеЕсли Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			
		Иначе
			
			ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") + 
																	" (" + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")";
																	
		КонецЕсли;
		
		ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		
		Если ПустаяСтрока(Шапка.НомерПРД) ИЛИ ПустаяСтрока(Шапка.ДатаПРД) Тогда
			
			Если Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс Тогда
				
				ОбластьМакета.Параметры.ПоДокументу = "К платежно-расчетному документу № -- от --";
				
			Иначе
				
				ОбластьМакета.Параметры.ПоДокументу = "К платежно-расчетному документу №    от";
				
			КонецЕсли; 
			
		Иначе 
			
			ОбластьМакета.Параметры.ПоДокументу				= "К платежно-расчетному документу № " + Шапка.НомерПРД + " от " + Формат(Шапка.ДатаПРД, "ДФ=dd.MM.yyyy");
			
		КонецЕсли; 
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		
		ЗначениеАдресаПокупателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
		
		ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "; 
		Если ПустаяСтрока(ЗначениеАдресаПокупателя) 
			И Шапка.ВидОперации <> Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда
				
				ОбластьМакета.Параметры.АдресПокупателя = "Адрес: --"; 
				
		Иначе
			
			ОбластьМакета.Параметры.АдресПокупателя = ОбластьМакета.Параметры.АдресПокупателя + ЗначениеАдресаПокупателя;
			
		КонецЕсли;
		
		Если Шапка.ВидОперации <> Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: он же";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ФактическийАдрес,");
			
		Иначе
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
			
		КонецЕсли;
			
		КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
		КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда 
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: " + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
		
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			Если НЕ ЗначениеЗаполнено(Шапка.Валюта) 
				ИЛИ ИспользоватьПересчет Тогда
				
				ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код Российский рубль,643 ";
				
			Иначе
				
				ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код " + СокрЛП(Шапка.Валюта.НаименованиеПолное) + ", " + СокрЛП(Шапка.Валюта.Код) + "";
				
			КонецЕсли;
			
		Конецесли;
		
		Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			
		КонецЕсли;
		

		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ИтогоСтоимость	= 0;
		ИтогоСуммаНДС	= 0;
		ИтогоВсего		= 0;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Шапка.Ссылка);

		Запрос.Текст =

		"ВЫБРАТЬ
		|	1 КАК ID,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Код КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияКоэфициент КАК ЕдиницаИзмеренияКоэфициент,
		|	ВложенныйЗапрос.Количество,
		|	""без акциза"" КАК Акциз,
		|	&СуммаБезНДС_Параметр КАК СуммаБезНДС,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	&СуммаНДС_Параметр КАК СуммаНДС,
		|	&Цена_Параметр КАК Цена,
		|	&Всего_Параметр КАК Всего,
		|	ВложенныйЗапрос.НомерГТД КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.ПредставлениеСтраны,
		|	ВложенныйЗапрос.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
		|	ВложенныйЗапрос.Содержание
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(СчетФактураПолученныйЗапасы.НомерСтроки) КАК НомерСтроки,
		|		СчетФактураПолученныйЗапасы.Номенклатура КАК Номенклатура,
		|		СчетФактураПолученныйЗапасы.Характеристика КАК Характеристика,
		|		СчетФактураПолученныйЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДляПечати,
		|		СчетФактураПолученныйЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияКоэфициент,
		|		СчетФактураПолученныйЗапасы.Цена КАК Цена,
		|		СУММА(СчетФактураПолученныйЗапасы.Количество) КАК Количество,
		|		СУММА(СчетФактураПолученныйЗапасы.Сумма) КАК СуммаБезНДС,
		|		СчетФактураПолученныйЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(СчетФактураПолученныйЗапасы.СуммаНДС) КАК СуммаНДС,
		|		СУММА(СчетФактураПолученныйЗапасы.Всего) КАК Всего,
		|		СчетФактураПолученныйЗапасы.НомерГТД КАК НомерГТД,
		|		СчетФактураПолученныйЗапасы.СтранаПроисхождения.Представление КАК ПредставлениеСтраны,
		|		СчетФактураПолученныйЗапасы.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
		|		ВЫРАЗИТЬ(СчетФактураПолученныйЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание
		|	ИЗ
		|		Документ.СчетФактураПолученный.Запасы КАК СчетФактураПолученныйЗапасы
		|	ГДЕ
		|		СчетФактураПолученныйЗапасы.Ссылка = &Ссылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СчетФактураПолученныйЗапасы.НомерГТД,
		|		СчетФактураПолученныйЗапасы.ЕдиницаИзмерения,
		|		СчетФактураПолученныйЗапасы.Номенклатура,
		|		СчетФактураПолученныйЗапасы.Характеристика,
		|		ВЫРАЗИТЬ(СчетФактураПолученныйЗапасы.Содержание КАК СТРОКА(1000)),
		|		СчетФактураПолученныйЗапасы.СтавкаНДС,
		|		СчетФактураПолученныйЗапасы.Цена,
		|		СчетФактураПолученныйЗапасы.СтранаПроисхождения.Представление,
		|		СчетФактураПолученныйЗапасы.СтранаПроисхождения.Код,
		|		СчетФактураПолученныйЗапасы.Номенклатура.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		
		Если ИспользоватьПересчет Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр",			"Выразить(ВложенныйЗапрос.Цена * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаБезНДС_Параметр",	"Выразить(ВложенныйЗапрос.СуммаБезНДС * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр",		"Выразить(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр",			"Выразить(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК Число(15,2))");
			
			Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
			Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 			"ВложенныйЗапрос.Цена");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаБезНДС_Параметр",	"ВложенныйЗапрос.СуммаБезНДС");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 		"ВложенныйЗапрос.СуммаНДС");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 		"ВложенныйЗапрос.Всего");
			
		КонецЕсли;
		
		Если  Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
			
			ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
			
			ОбластьМакета.Параметры.ТоварНаименование = "Суммы, связанные с расчетами по оплате (ст. 162 НК РФ)";
			
			Если ТаблицаПоТоварам.Количество() > 0 Тогда
			
				ОбластьМакета.Параметры.СтавкаНДС = ТаблицаПоТоварам[0].СтавкаНДС;
				ОбластьМакета.Параметры.СуммаНДС = ТаблицаПоТоварам[0].СуммаНДС;
				ОбластьМакета.Параметры.Всего = ТаблицаПоТоварам[0].Всего;
				
				ИтогоСтоимость	= 0;
				ИтогоСуммаНДС	= ТаблицаПоТоварам[0].СуммаНДС;
				ИтогоВсего		= ТаблицаПоТоварам[0].Всего;
				
			КонецЕсли;
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли  Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Поступление Тогда 
			
			ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Строчка Из ТаблицаПоТоварам Цикл
				ОбластьМакета.Параметры.Заполнить(Строчка);
				
				Если ЗначениеЗаполнено(Строчка.Содержание) Тогда
					ОбластьМакета.Параметры.ТоварНаименование = Строчка.Содержание;
				Иначе
					ОбластьМакета.Параметры.ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строчка.ТоварНаименование, 
																Строчка.Характеристика, Строчка.Артикул);
				КонецЕсли;
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137
					И НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
					
					ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
					
					ОбластьМакета.Параметры.ЕдиницаИзмерения = "--";
					
				КонецЕсли;
				
				Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ОбластьМакета.Параметры.Акциз = "--";
					
				КонецЕсли;
				
				Коэффициент = 1;
				Если ТипЗнч(Строчка.ЕдиницаИзмеренияКоэфициент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					
					Коэффициент = Строчка.ЕдиницаИзмеренияКоэфициент.Коэффициент;
					
				КонецЕсли;
				
				Количество  = Строчка.Количество * Коэффициент;
				
				ОбластьМакета.Параметры.Количество = Количество;
				Если Строчка.Цена <> 0 Тогда
					ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, Строчка.СуммаБезНДС / Количество);
				Иначе
					ОбластьМакета.Параметры.Цена = Строчка.Цена * Коэффициент;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
					
				ОбластьМакета.Параметры.Всего = Строчка.Всего;
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					Если ВРег(Строчка.СтавкаНДС) = "БЕЗ НДС" Тогда
						
						ОбластьМакета.Параметры.СтавкаНДС	= "без НДС";
						ОбластьМакета.Параметры.СуммаНДС	= "без НДС";
						
					Иначе
						
						ОбластьМакета.Параметры.СтавкаНДС	= Строчка.СтавкаНДС;
						ОбластьМакета.Параметры.СуммаНДС = Строчка.СуммаНДС;
						
					КонецЕсли;
					
				Иначе
					
					ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
					
				КонецЕсли;
				
				ИтогоСтоимость	= ИтогоСтоимость + Строчка.СуммаБезНДС;
				ИтогоСуммаНДС	= ИтогоСуммаНДС + Строчка.СуммаНДС;
				ИтогоВсего		= ИтогоВсего + Строчка.Всего;
				
				Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
					
				Иначе
					
					Если Строка(Строчка.ПредставлениеСтраны) = "Россия"
						ИЛИ ПустаяСтрока(Строчка.ПредставлениеСтраны) Тогда
						
						ОбластьМакета.Параметры.ПредставлениеСтраны = "--";
						ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
						
					КонецЕсли;
					
					Если ПустаяСтрока(Строчка.ПредставлениеГТД) Тогда
						
						ОбластьМакета.Параметры.ПредставлениеГТД = "--";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла; 
			
		ИначеЕсли  Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда 
			
			Запрос.Текст =
			
			"ВЫБРАТЬ
			|	1 КАК ID,
			|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
			|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
			|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|	ВложенныйЗапрос.Характеристика КАК Характеристика,
			|	""без акциза"" КАК Акциз,
			|	&СуммаБезНДС_Параметр КАК СуммаБезНДС,
			|	ВложенныйЗапрос.СтавкаНДС,
			|	&СуммаНДС_Параметр КАК СуммаНДС,
			|	&Всего_Параметр КАК Всего,
			|	ВложенныйЗапрос.Содержание
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(СчетФактураПолученныйЗапасы.НомерСтроки) КАК НомерСтроки,
			|		СчетФактураПолученныйЗапасы.Номенклатура КАК Номенклатура,
			|		СчетФактураПолученныйЗапасы.Характеристика КАК Характеристика,
			|		СУММА(СчетФактураПолученныйЗапасы.Сумма) КАК СуммаБезНДС,
			|		СчетФактураПолученныйЗапасы.СтавкаНДС КАК СтавкаНДС,
			|		СУММА(СчетФактураПолученныйЗапасы.СуммаНДС) КАК СуммаНДС,
			|		СУММА(СчетФактураПолученныйЗапасы.Всего) КАК Всего,
			|		ВЫРАЗИТЬ(СчетФактураПолученныйЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание
			|	ИЗ
			|		Документ.СчетФактураПолученный.Запасы КАК СчетФактураПолученныйЗапасы
			|	ГДЕ
			|		СчетФактураПолученныйЗапасы.Ссылка = &Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		СчетФактураПолученныйЗапасы.Номенклатура,
			|		СчетФактураПолученныйЗапасы.Характеристика,
			|		СчетФактураПолученныйЗапасы.СтавкаНДС,
			|		ВЫРАЗИТЬ(СчетФактураПолученныйЗапасы.Содержание КАК СТРОКА(1000))) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	ID,
			|	НомерСтроки";
			
			Если ИспользоватьПересчет Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаБезНДС_Параметр",	"Выразить(ВложенныйЗапрос.СуммаБезНДС * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр",		"Выразить(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр",			"Выразить(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК Число(15,2))");
				
				Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
				Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
				
			Иначе
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаБезНДС_Параметр", 	"ВложенныйЗапрос.СуммаБезНДС");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"	ВложенныйЗапрос.СуммаНДС");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 		"ВложенныйЗапрос.Всего");
				
			КонецЕсли;
			
			ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Строчка Из ТаблицаПоТоварам Цикл

				Если ЗначениеЗаполнено(Строчка.Содержание) Тогда
					
					ОбластьМакета.Параметры.ТоварНаименование = Строчка.Содержание;
					
				Иначе
					
					ОбластьМакета.Параметры.ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строчка.ТоварНаименование, 
																		Строчка.Характеристика, Строчка.Артикул);
																		
 				КонецЕсли; 
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
					ОбластьМакета.Параметры.ПредставлениеСтраны = "--";
					ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
					ОбластьМакета.Параметры.ПредставлениеГТД = "--";
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.ЕдиницаИзмерения 	= "--";
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ОбластьМакета.Параметры.Акциз = Строчка.Акциз;
					
				Иначе
					
					ОбластьМакета.Параметры.Акциз = "--";
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Всего = Строчка.Всего;
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					Если ВРег(Строчка.СтавкаНДС) = "БЕЗ НДС" Тогда
						
						ОбластьМакета.Параметры.СтавкаНДС	= "без НДС";
						ОбластьМакета.Параметры.СуммаНДС	= "без НДС";
						
					Иначе
						
						ОбластьМакета.Параметры.СтавкаНДС	= Строчка.СтавкаНДС;
						ОбластьМакета.Параметры.СуммаНДС = Строчка.СуммаНДС;
						
					КонецЕсли;
					
				Иначе
					
					ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
					ОбластьМакета.Параметры.СуммаНДС = Строчка.СуммаНДС;
					
				КонецЕсли;
				
				ИтогоСуммаНДС = ИтогоСуммаНДС + Строчка.СуммаНДС;
				ИтогоВсего = ИтогоВсего + Строчка.Всего;
				
				Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
		ОбластьМакета.Параметры.ИтогоВсего = ИтогоВСего;
		
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ОбластьМакета.Параметры.ИтогоСтоимость	= ?(ИтогоСтоимость = 0, "--", ИтогоСтоимость);
			
		Иначе
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатнаяФормаКорректировочныхСчетовФактур(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_КорректировочныйСчетФактура";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураПолученный.ПФ_MXL_СчетФактураКорректировочный1137");

	ДанныеСчетовФактур = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
		МассивОбъектов, ТекстЗапросаПоСчетамФактурам);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ ИЗ ДанныеСчетовФактур Цикл

		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Документы.СчетФактура.ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

// Процедура простоавляет прочерки в пустые поля.
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (СтрНайти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

Функция ТекстЗапросаПечатьКорректировочныхСчетовФактур() Экспорт

	НачалоИспользованияСФ1137 = Константы.НачалоИспользованияСФ1137.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК Дата,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК Номер,
	|	СчетФактураПолученный.ВидОперации КАК ВидСчетаФактуры,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ДокументОснование.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетФактураБезНДС,
	|	СчетФактураПолученный.Исправление КАК Исправление,
	|	СчетФактураПолученный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправления,
	|	СчетФактураПолученный.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураПолученный.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураПолученный.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураПолученный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураПолученный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураПолученный.НомерИсправления КАК НомерИсправленияКорректировочного,
	|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправленияКорректировочного,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Исправление
	|			ТОГДА СчетФактураПолученный.ДатаИсправления
	|		КОГДА СчетФактураПолученный.ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СчетФактураПолученный.ДатаВходящегоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Дата
	|	КОНЕЦ КАК ДатаСведений,
	|	СчетФактураПолученный.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&МассивОбъектов)
	|	И СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
	|	И СчетФактураПолученный.Дата >= &НачалоИспользованияСФ1137
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетФактура
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(ВидСчетаФактуры),
	|	МАКСИМУМ(СчетФактураБезНДС),
	|	МАКСИМУМ(Исправление),
	|	МАКСИМУМ(НомерИсправления),
	|	МАКСИМУМ(ДатаИсправления),
	|	МАКСИМУМ(ЭтоСчетФактураВыданный),
	|	МАКСИМУМ(ВыводитьСуммуБезНДС)
	|ПО
	|	СчетФактура";
	
	Возврат ТекстЗапроса + УправлениеНебольшойФирмойСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактура",
			"Счет-фактура",
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВходящий") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВходящий",
			НСтр("ru='Счет-фактура (полученный)'"),
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураКорректировочный") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураКорректировочный",
			"Корректировочный счет-фактура",
			ПечатнаяФормаКорректировочныхСчетовФактур(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПечатьКорректировочныхСчетовФактур())
		);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьСчетовФактур";
	КомандаПечати.Идентификатор = "СчетФактураВходящий";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (полученный)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли