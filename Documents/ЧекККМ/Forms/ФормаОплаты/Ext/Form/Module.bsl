#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура пересчитывает сумму сдачи и перезаполняет списки выбора в полях ввода суммы.
//
&НаКлиенте
Процедура ПересчитатьСуммы()
	
	ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
	СуммаСдачи = ПолученоНаличными + ОплатаКартами - СуммаДокумента;
	// Сумма сдачи не должна быть больше оплаты наличными.
	// Если это так, то возвращать нужно на карту.
	Если СуммаСдачи > ПолученоНаличными Тогда
		// Нужно выдать предупреждение пользователю.
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сумма сдачи превышает сумму оплаты наличными. Требуется уменьшить сумму оплаты картой или вернуть на карту "+(СуммаСдачи - ПолученоНаличными)+" "+ВалютаДокумента;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами;
	
	Элементы.ПолученоНаличными.СписокВыбора.Очистить();
	Если Дельта > 0 Тогда
		Элементы.ПолученоНаличными.СписокВыбора.Добавить(Дельта, 
			""+Дельта+" "+ВалютаДокумента+" (остаток)");
	КонецЕсли;
	Если Дельта <> СуммаДокумента Тогда
		Элементы.ПолученоНаличными.СписокВыбора.Добавить(СуммаДокумента, ""+СуммаДокумента+" "+ВалютаДокумента+" (сумма док-та)");
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ВременнаяТаблицаКарт Цикл
		Индекс = ВременнаяТаблицаКарт.Индекс(ТекущаяСтрока);
		Элементы["ОплатаКартой_"+Индекс].СписокВыбора.Очистить();
		Если Дельта > 0 Тогда
			Элементы["ОплатаКартой_"+Индекс].СписокВыбора.Добавить(Дельта, ""+Дельта+" "+ВалютаДокумента+" (остаток)");
		КонецЕсли;
		Если Дельта <> СуммаДокумента Тогда
			Элементы["ОплатаКартой_"+Индекс].СписокВыбора.Добавить(СуммаДокумента, ""+СуммаДокумента+" "+ВалютаДокумента+" (сумма док-та)");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура удаляет строки с нулевой суммой в ТЧ ОплатаПлатежнымиКартами.
//
&НаКлиенте
Процедура УдалитьСтрокиОплатыСНулевойСуммой()

	МСтрокДляУдаления = Новый Массив;
	Для каждого ТекущаяСтрока Из Объект.ОплатаПлатежнымиКартами Цикл
		Если ТекущаяСтрока.Сумма = 0 Тогда
			МСтрокДляУдаления.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекущаяСтрокаДляУдаления Из МСтрокДляУдаления Цикл
		Объект.ОплатаПлатежнымиКартами.Удалить(ТекущаяСтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(Объект.ЭквайринговыйТерминал);
	ВидыПлатежныхКарт.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
	ИтогСч = ВременнаяТаблицаКарт.Количество() - 1;
	Для Сч = 0 По ИтогСч Цикл
		Элементы["ВидПлатежнойКарты_"+Сч].СписокВыбора.ЗагрузитьЗначения(ВидыПлатежныхКарт.ВыгрузитьЗначения());
	КонецЦикла;
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

&НаКлиенте
Процедура ЗаполнитьТелефонАдресЭП()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		ТелефонАдресЭП = "Телефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ТелефонАдресЭП = "АдресЭП";
	Иначе
		ТелефонАдресЭП = "НеОтправлять";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьТелефонАдресЭП()

	Если ТелефонАдресЭП = "Телефон" Тогда
		Объект.АдресЭП = "";
		Элементы.ГруппаТелефон.Видимость = Истина;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
		Элементы.ДекорацияРазделитель2.Видимость = Ложь;
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		Объект.Телефон = "";
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Истина;
		Элементы.ДекорацияРазделитель2.Видимость = Ложь;
	Иначе
		Объект.Телефон = "";
		Объект.АдресЭП = "";
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
		Элементы.ДекорацияРазделитель2.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтправкиЭлектронныхЧеков()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И 
		Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		Если Объект.КассаККМ.ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			Элементы.ГруппаОтправкаЧека.Видимость = Истина;
		Иначе
			Элементы.ГруппаОтправкаЧека.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтправкаЧека.Видимость = Ложь;
	КонецЕсли;
	
	Если КассаККМИспользоватьБезПодключенияОборудования Тогда
		Элементы.ГруппаОтправкаЧека.Видимость = Ложь;
	Конецесли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекЗначение = ДанныеФормыВЗначение(Параметры.Объект, Тип("ДокументОбъект.ЧекККМ"));
	ЗначениеВРеквизитФормы(ТекЗначение, "Объект"); // Получим данные документа.
	
	СуммаДокумента = Параметры.СуммаДокумента;
	ВалютаДокумента = Параметры.ВалютаДокумента;
	КассаККМ = Параметры.КассаККМ;
	ИспользоватьПодключаемоеОборудование = Параметры.ИспользоватьПодключаемоеОборудование;
	Объект.ЭквайринговыйТерминал = Параметры.ЭквайринговыйТерминал;
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить()
						   ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	Элементы.ГруппаШаблонКартыОплаты.Видимость = Ложь;
	
	// Обработка карт.
	КоличествоКартВДокументе = Параметры.ОплатаПлатежнымиКартами.Количество();
	Если КоличествоКартВДокументе = 0 И Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Истина;
		ДобавитьКартуНаСервере();
		КоличествоКартДляЗаголовка = 0;
	Иначе
		Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Ложь;
		Если КоличествоКартВДокументе = 0 Тогда
			Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
		Иначе
			Для каждого СтрокаОплатыКартой Из Объект.ОплатаПлатежнымиКартами Цикл
				НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыКартой);
				ДобавитьКартуНаСервере(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ОсталосьОплатить = СуммаДокумента - ВременнаяТаблицаКарт.Итог("Сумма");
	Элементы.ПолученоНаличными.СписокВыбора.Очистить();
	Элементы.ПолученоНаличными.СписокВыбора.Добавить(ОсталосьОплатить, ""+ОсталосьОплатить+" "+ВалютаДокумента);
	
	КоличествоСимволовПослеЗапятой = 2;
	ПервыйВвод = Истина;
	
	// Установка сочетания клавиш
	Для Сч = 0 По 9 Цикл
		Элементы["Кнопка"+Сч].СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["Num"+Сч], Ложь, Истина, Ложь);
	КонецЦикла;
	Элементы.РазделительДробнойЧасти.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.NumDecimal, Ложь, Истина, Ложь);
	Элементы.Сбросить.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace, Ложь, Истина, Ложь);
	
	Элементы.ГруппаКартыОплаты.Доступность = ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал);
	
	// Блокировка.
	Если Не Объект.Ссылка.Пустая() И Параметры.Свойство("ИдентификаторФормы") Тогда
		Попытка
			РазблокироватьДанныеДляРедактирования(Объект.Ссылка, Параметры.ИдентификаторФормы);
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор); // Блокировка будет снята при закрытии формы.
		Исключение
			//
		КонецПопытки;
	КонецЕсли;
	
	УстановитьВидимостьОтправкиЭлектронныхЧеков();

КонецПроцедуры

// Процедура - обработчик события ПередЗакрытием формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не НажатаКнопкаОтменить И Не НажатаКнопкаПробитьЧек Тогда
		Отменить(Команды.Отменить);
	КонецЕсли;
	
	Попытка
		РазблокироватьДанныеФормыДляРедактирования();
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьСуммы();
	ЗаполнитьТелефонАдресЭП();
	УстановитьДоступностьТелефонАдресЭП();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды ДобавитьКарту формы.
//
&НаКлиенте
Процедура ДобавитьКарту(Команда)
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		ДобавитьОплатуКартой();
	Иначе
		ДобавитьКартуНаСервере();
	КонецЕсли;
	
КонецПроцедуры


// Процедура добавляет информацию по карте в случае, когда эквайринговый терминал НЕ ПОДКЛЮЧЕН.
//
&НаСервере
Процедура ДобавитьКартуНаСервере(ТекущаяСтрокаИдентификатор = Неопределено)
	
	КоличествоКарт = КоличествоКарт + 1;
	КоличествоКартДляЗаголовка = КоличествоКарт;
	
	Если КоличествоКарт % 2 = 0 Тогда
		ЦветФонаГруппы = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки; //ЦветаСтиля.ФонУправляющегоПоля;
	Иначе
		ЦветФонаГруппы = Новый Цвет(235, 235, 235);
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор = Неопределено Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		НоваяСтрока.ПервыйВвод = Истина;
	ИначеЕсли ТипЗнч(ТекущаяСтрокаИдентификатор) = Тип("Число") Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		НоваяСтрока = ТекущаяСтрокаИдентификатор;
	КонецЕсли;
	
	Индекс = ВременнаяТаблицаКарт.Индекс(НоваяСтрока);
	
	НоваяГруппа = Элементы.Добавить("ГруппаОплатаКартой_"+Индекс, Тип("ГруппаФормы"), Элементы.ГруппаКартыОплаты);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.ЦветФона = ЦветФонаГруппы;
	НоваяГруппа.Ширина = 46;
	НоваяГруппа.РастягиватьПоГоризонтали = Ложь;
	НоваяГруппа.ТолькоПросмотр = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	
	НоваяГруппаСуммаКарты = Элементы.Добавить("ГруппаОплатаКартойСумма_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаСуммаКарты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаСуммаКарты.ОтображатьЗаголовок = Ложь;
	НоваяГруппаСуммаКарты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаСуммаКарты.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаГоризонтальная = Элементы.Добавить("ГруппаОплатаКартойГоризонтальная_"+Индекс, Тип("ГруппаФормы"), Элементы.ГруппаКартыОплаты);
	НоваяГруппаГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаГоризонтальная.ОтображатьЗаголовок = Ложь;
	НоваяГруппаГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаГоризонтальная.ТолькоПросмотр = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	
	НоваяГруппаРеквизитыКартыЧасть1 = Элементы.Добавить("ГруппаРеквизитыКартыЧасть1"+Индекс, Тип("ГруппаФормы"), НоваяГруппаГоризонтальная);
	НоваяГруппаРеквизитыКартыЧасть1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаРеквизитыКартыЧасть1.ОтображатьЗаголовок = Ложь;
	НоваяГруппаРеквизитыКартыЧасть1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппаРеквизитыКартыЧасть1.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаРеквизитыКартыЧасть2 = Элементы.Добавить("ГруппаРеквизитыКартыЧасть2"+Индекс, Тип("ГруппаФормы"), НоваяГруппаГоризонтальная);
	НоваяГруппаРеквизитыКартыЧасть2.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаРеквизитыКартыЧасть2.ОтображатьЗаголовок = Ложь;
	НоваяГруппаРеквизитыКартыЧасть2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппаРеквизитыКартыЧасть2.ЦветФона = ЦветФонаГруппы;
	
	// НадписьУдаленияОплатыКартой
	ЭлементНадписьОбУдалении = Элементы.Добавить("НадписьОбУдаленииОплатыКартой_"+Индекс, Тип("ДекорацияФормы"), НоваяГруппаСуммаКарты);
	ЭлементНадписьОбУдалении.Вид = ВидДекорацииФормы.Надпись;
	ЭлементНадписьОбУдалении.Заголовок = "";
	ЭлементНадписьОбУдалении.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	ЭлементНадписьОбУдалении.ЦветТекста = Новый Цвет(255, 0, 0);
	ЭлементНадписьОбУдалении.Ширина = 35;
	ЭлементНадписьОбУдалении.РастягиватьПоГоризонтали = Ложь;
	ЭлементНадписьОбУдалении.Видимость = Ложь;
	// Конец НадписьУдаленияОплатыКартой
	
	НовыйЭлемент = Элементы.Добавить("ОплатаКартой_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаКарты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].Сумма";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.Ширина = 35;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.КнопкаВыбора = Истина;
	НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	НовыйЭлемент.Подсказка = "Калькулятор изменяет данные в нижнем поле ""Сумма"" или в последнем изменённом поле ""Сумма"".
		|Если нужно привязать калькулятор к другому полю, то нажмите в этом поле кнопку с изображением калькулятора.";
	НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	
	ТекущееПолеВводаСуммы = НовыйЭлемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для карты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "СуммаОплатыКартойПриИзменении");
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "СуммаОплатыКартойНачалоВыбора");
	
	ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
	НовыйЭлемент.СписокВыбора.Очистить();
	Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами;
	Если Дельта > 0 Тогда
		НовыйЭлемент.СписокВыбора.Добавить(Дельта, 
			""+Дельта+" "+ВалютаДокумента+" (остаток)");
	КонецЕсли;
	Если Дельта <> СуммаДокумента Тогда
		НовыйЭлемент.СписокВыбора.Добавить(СуммаДокумента, ""+СуммаДокумента+" "+ВалютаДокумента+" (сумма док-та)");
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить("ВалютаДокумента_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаКарты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ВалютаДокумента";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	//НовыйЭлемент.Ширина = 5;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	// КнопкаУдаленияОплатыКартой
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		ИмяКнопки = "КнопкаУдаленияОплаты_"+Индекс;
		
		НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКнопки);
		НоваяКоманда.Действие = "ВыбратьКартуДляУдаленияОплаты";
		НоваяКоманда.Заголовок = "";
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка = БиблиотекаКартинок.ПометитьНаУдаление;
		НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
		НоваяКоманда.Подсказка = "Отменить оплату картой на эквайринговом терминале";
		
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), НоваяГруппаСуммаКарты);
		НоваяКнопка.ТолькоВоВсехДействиях = Ложь;
		НоваяКнопка.Видимость = Истина;
		НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
		НоваяКнопка.Ширина = 4;
		НоваяКнопка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		
		НоваяСтрока.ИмяКоманды = ИмяКнопки;
	КонецЕсли;
	// Конец КнопкаУдаленияОплатыКартой
	
	НовыйЭлемент = Элементы.Добавить("ВидПлатежнойКарты_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть1);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].ВидПлатежнойКарты";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = "Вид карты";
	НовыйЭлемент.Ширина = 16;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(ВидыПлатежныхКарт.ВыгрузитьЗначения());
	НовыйЭлемент.РежимВыбораИзСписка = Истина;
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	
	НовыйЭлемент = Элементы.Добавить("НомерПлатежнойКарты_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть2);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].НомерПлатежнойКарты";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = "№ карты";
	НовыйЭлемент.Ширина = 27;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	
	НовыйЭлемент = Элементы.Добавить("НомерЧекаЭТ_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть1);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].НомерЧекаЭТ";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = "№ чека ЭТ";
	НовыйЭлемент.Ширина = 16;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	
	НовыйЭлемент = Элементы.Добавить("СсылочныйНомер_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть2);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].СсылочныйНомер";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = "Ссылочный номер";
	НовыйЭлемент.Ширина = 27;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет цифру справа от введенного числа. Учитывается наличие разделителя дробной части.
//
&НаКлиенте
Процедура ДобавитьЦифру(ВведеннаяЦифраСтрокой)
	
	Если ВременнаяТаблицаКарт.Количество() = 0 И Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаБезналичнаяОплата Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Добавьте карту.";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ВводимоеЧисло = ПолученоНаличнымиСтрока;
		ТекПервыйВвод = ПервыйВвод;
	Иначе
		Если Объект.ЭквайринговыйТерминал.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выберите эквайринговый терминал";
			Сообщение.Сообщить();
			
			Возврат;
		КонецЕсли;
		
		Если ВременнаяТаблицаКарт.Количество() = 1 Тогда
			Индекс = 0;
		Иначе
			ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
			Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		КонецЕсли;
		ВводимоеЧисло = ВременнаяТаблицаКарт[Индекс].СуммаСтрока;
		ТекущаяСтрокаТаблицыКарт = ВременнаяТаблицаКарт[Индекс];
		
		ТекПервыйВвод = ТекущаяСтрокаТаблицыКарт.ПервыйВвод;
	КонецЕсли;
	
	Если ТекПервыйВвод Тогда
		ВводимоеЧисло = "";
		ТекПервыйВвод = Ложь;
	КонецЕсли;
	
	Запятая = Сред(ВводимоеЧисло, СтрДлина(ВводимоеЧисло) - КоличествоСимволовПослеЗапятой, 1);
	
	Если НЕ Запятая = "," тогда
		ВводимоеЧисло = ВводимоеЧисло + ВведеннаяЦифраСтрокой;
	КонецЕсли;
	
	ЧислоВвода = ПривестиСтрокуКЧислу(ВводимоеЧисло, Истина);
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличными = ЧислоВвода;
		ПолученоНаличнымиСтрока = ВводимоеЧисло;
		ПервыйВвод = ТекПервыйВвод;
	Иначе
		ТекущаяСтрокаТаблицыКарт.Сумма = ЧислоВвода;
		ТекущаяСтрокаТаблицыКарт.СуммаСтрока = ВводимоеЧисло;
		ТекущаяСтрокаТаблицыКарт.ПервыйВвод = ТекПервыйВвод;
		
		СуммаОплатыКартойПриИзменении(Элементы["ОплатаКартой_"+Индекс]);
	КонецЕсли;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

//функция выполняет приведение строки к числу
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено
//
// Возвращаемое значение:
//  Число
//
&НаКлиенте
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь)
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Калькулятор

// Процедура - обработчик команды РазделительДробнойЧасти формы.
//
&НаКлиенте
Процедура КомандаТочка(Команда)
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ВводимоеЧисло = ПолученоНаличнымиСтрока;
		ТекПервыйВвод = ПервыйВвод;
	Иначе
		Если ВременнаяТаблицаКарт.Количество() = 1 Тогда
			Индекс = 0;
		Иначе
			ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
			Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		КонецЕсли;
		ВводимоеЧисло = ВременнаяТаблицаКарт[Индекс].СуммаСтрока;
		ТекущаяСтрокаТаблицыКарт = ВременнаяТаблицаКарт[Индекс];
		
		ТекПервыйВвод = ТекущаяСтрокаТаблицыКарт.ПервыйВвод;
	КонецЕсли;
	
	Если ТекПервыйВвод Тогда
		ВводимоеЧисло = "";
		ТекПервыйВвод = Ложь;
	КонецЕсли;
	
	Если ВводимоеЧисло = "" Тогда
		ВводимоеЧисло = "0";
	КонецЕсли;
	
	ЧислоВхождений = СтрЧислоВхождений(ВводимоеЧисло, ",");
	
	Если Не ЧислоВхождений > 0 Тогда
		ВводимоеЧисло = ВводимоеЧисло + ",";
	КонецЕсли;
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличнымиСтрока = ВводимоеЧисло;
	Иначе
		
	КонецЕсли;
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличнымиСтрока = ВводимоеЧисло;
		ПервыйВвод = ТекПервыйВвод;
	Иначе
		ТекущаяСтрокаТаблицыКарт.СуммаСтрока = ВводимоеЧисло;
		ТекущаяСтрокаТаблицыКарт.ПервыйВвод = ТекПервыйВвод;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды Сбросить формы.
//
&НаКлиенте
Процедура КомандаСтереть(Команда)
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличными = 0;
		ПолученоНаличнымиСтрока = "";
		ПервыйВвод = Ложь;
	Иначе
		Если ВременнаяТаблицаКарт.Количество() = 1 Тогда
			Индекс = 0;
		Иначе
			ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
			Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		КонецЕсли;
		ВременнаяТаблицаКарт[Индекс].СуммаСтрока = "";
		ВременнаяТаблицаКарт[Индекс].Сумма = 0;
		ВременнаяТаблицаКарт[Индекс].ПервыйВвод = Ложь;
	КонецЕсли;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка7 формы.
//
&НаКлиенте
Процедура Кнопка7(Команда)
	
	ДобавитьЦифру("7");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка8 формы.
//
&НаКлиенте
Процедура Кнопка8(Команда)
	
	ДобавитьЦифру("8");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка9 формы.
//
&НаКлиенте
Процедура Кнопка9(Команда)
	
	ДобавитьЦифру("9");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка4 формы.
//
&НаКлиенте
Процедура Кнопка4(Команда)
	
	ДобавитьЦифру("4");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка5 формы.
//
&НаКлиенте
Процедура Кнопка5(Команда)
	
	ДобавитьЦифру("5");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка6 формы.
//
&НаКлиенте
Процедура Кнопка6(Команда)
	
	ДобавитьЦифру("6");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка1 формы.
//
&НаКлиенте
Процедура Кнопка1(Команда)
	
	ДобавитьЦифру("1");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка2 формы.
//
&НаКлиенте
Процедура Кнопка2(Команда)
	
	ДобавитьЦифру("2");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка3 формы.
//
&НаКлиенте
Процедура Кнопка3(Команда)
	
	ДобавитьЦифру("3");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка0 формы.
//
&НаКлиенте
Процедура Кнопка0(Команда)
	
	ДобавитьЦифру("0");
	
КонецПроцедуры

#КонецОбласти

// Процедура - обработчик команды ОК формы.
//
&НаКлиенте
Процедура ОК(Команда)
	
	Отмена = Ложь;
	Для Каждого ТекущаяСтрока Из ВременнаяТаблицаКарт Цикл
		Если ТекущаяСтрока.Сумма > 0 Тогда
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВидПлатежнойКарты) Тогда
				Отмена = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Заполните вид карты";
				Сообщение.Сообщить();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.НомерПлатежнойКарты) Тогда
				Отмена = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Заполните номер карты";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.ОплатаПлатежнымиКартами, ВременнаяТаблицаКарт);
	УдалитьСтрокиОплатыСНулевойСуммой();
	
	Если Объект.СуммаДокумента > ПолученоНаличными + Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты меньше суммы чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	Если Объект.СуммаДокумента < Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты платежными картами превышает сумму чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	ПараметрыЗакрытия = Новый Структура("Объект, Наличными, ПлатежнымиКартами, Сдача, СформироватьТоварныйЧек, ОплатаПлатежнымиКартами, ЗаписатьДокумент, Кнопка", 
		Объект,
		ПолученоНаличными, 
		Объект.ОплатаПлатежнымиКартами.Итог("Сумма"), 
		СуммаСдачи, 
		СформироватьТоварныйЧек, 
		Объект.ОплатаПлатежнымиКартами, 
		ЗаписатьДокумент,
		"Пробить чек");
		
	НажатаКнопкаПробитьЧек = Истина;
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

// Процедура - обработчик команды Отменить формы.
//
&НаКлиенте
Процедура Отменить(Команда)
	
	Если Модифицированность Тогда
		Модифицированность = Ложь; // Чтобы не появлялся вопрос о принятии изменений. Вопрос появляется, т.к. у формы основной реквизит типа "ДокументОбъект.ЧекККМ".
	КонецЕсли;
	
	//СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.ОплатаПлатежнымиКартами, ВременнаяТаблицаКарт);
	УдалитьСтрокиОплатыСНулевойСуммой();
	
	НажатаКнопкаОтменить = Истина;
	
	Попытка
		РазблокироватьДанныеФормыДляРедактирования();
	Исключение
		//
	КонецПопытки;
	
	Закрыть(Новый Структура("Объект, ЗаписатьДокумент, Кнопка", Объект, ЗаписатьДокумент, "Отмена"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УстановитьДоступностьТелефонАдресЭП();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении элемента ЭквайринговыйТерминал формы.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	Элементы.ГруппаКартыОплаты.Доступность = ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал);
	Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Не ЗначениеЗаполнено(ЭквайринговыйТерминал);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении элемента ПолученоНаличными формы.
//
&НаКлиенте
Процедура ДокументЧекККМПолученоНаличнымиПриИзменении(Элемент)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОплатаКартой_N формы, где N - индекс строки в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура СуммаОплатыКартойПриИзменении(Элемент)
	
	ТекущееПолеВводаСуммы = Элемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для карты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	ПересчитатьСуммы();
	
	КоличествоКартДляЗаголовка = КоличествоКарт;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора элемента ОплатаКартой_N формы, где N - индекс строки в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура СуммаОплатыКартойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущееПолеВводаСуммы = Элемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для карты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Кнопка7_2;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элементов ВидПлатежнойКарты_N, НомерПлатежнойКарты_N, НомерЧекаЭТ_N и СсылочныйНомер_N,
// где N - индекс строки в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура РеквизитКартыПриИзменении(Элемент)

	КоличествоКартДляЗаголовка = КоличествоКарт;

КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы элемента ГруппаОплата формы.
//
&НаКлиенте
Процедура ГруппаОплатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// Нужно очищать комбинации клавиш, чтобы на странице оплаты платёжными картами
	// можно было ввести номер карты с цифровой клавиатуры!!!
	Если ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		Для Сч = 0 По 9 Цикл
			Элементы["Кнопка"+Сч].СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["Num"+Сч], Ложь, Истина, Ложь);
		КонецЦикла;
		Элементы.РазделительДробнойЧасти.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.NumDecimal, Ложь, Истина, Ложь);
		Элементы.Сбросить.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace, Ложь, Истина, Ложь);
	Иначе
		Для Сч = 0 По 9 Цикл
			Элементы["Кнопка"+Сч].СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		КонецЦикла;
		Элементы.РазделительДробнойЧасти.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		Элементы.Сбросить.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		
		Если ВременнаяТаблицаКарт.Количество() > 0 Тогда
			ТекущийЭлемент = Элементы.ОплатаКартой_0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()

	ФискальныйРегистратор = ?(
		ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
	  И ЗначениеЗаполнено(КассаККМ)
	  И ЗначениеЗаполнено(КассаККМ.ПодключаемоеОборудование),
	  КассаККМ.ПодключаемоеОборудование.Ссылка,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	ЭквайринговыйТерминал = ?(
		ИспользоватьПодключаемоеОборудование
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование)
	  И НЕ Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования,
	  Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

#КонецОбласти

#Область АвтоматизированнаяОплатаКартами

// Процедура - обработчик команды ДобавитьОплатуКартой.
//
&НаКлиенте
Процедура ДобавитьОплатуКартой()
	
	// При записи очищаются значения в дополнительных колонках, т.ч. запомним ТЧ, а потом восстановим.
	СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.ОплатаПлатежнымиКартами, ВременнаяТаблицаКарт);
	УдалитьСтрокиОплатыСНулевойСуммой();
	
	НомерКарты = "";
	ПоказыватьПредупреждение = Ложь;
	
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтаФорма, ПоказыватьПредупреждение) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить оплату через платежный терминал'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
		
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал),
		ЭквайринговыйТерминал,
		Неопределено
	);
	
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено
	);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
		И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
		Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами;
		ПределСуммы = СуммаДокумента - ОплатаКартами;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Сумма", Дельта);
		ПараметрыФормы.Вставить("ПределСуммы", ПределСуммы);
		ПараметрыФормы.Вставить("СписокТиповКарт", Новый СписокЗначений());
		Индекс = 0;
		Для Каждого ВидКарты Из ВидыПлатежныхКарт Цикл
			ПараметрыФормы.СписокТиповКарт.Добавить(Индекс, ВидКарты.Значение);
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Результат = Неопределено;
		
		ОткрытьФорму(
			"Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("ДобавитьОплатуКартойЗавершение",
				ЭтотОбъект,
				Новый Структура(
					"ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерКарты",
					ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерКарты
				)
			)
		);
	
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторУстройстваФР = ДополнительныеПараметры.ИдентификаторУстройстваФР;
	ИдентификаторУстройстваЭТ = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
	НомерКарты = ДополнительныеПараметры.НомерКарты;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ВидКарты = ВидыПлатежныхКарт[Результат.ТипКарты].Значение;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.НомерКарты     = Результат.НомерКарты;
		ПараметрыОперации.СуммаОперации  = Результат.Сумма;
		ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
		ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ВидКарты", ВидКарты);

		Оповещение = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор,
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		
		// Добавим строку во временную таблицу.
		Если ВременнаяТаблицаКарт.Количество() = 1 И 
			ВременнаяТаблицаКарт[0].Сумма = 0 И Не ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].НомерПлатежнойКарты) И
			НЕ ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].ВидПлатежнойКарты) И Не ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].СсылочныйНомер) И Не ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].НомерЧекаЭТ) Тогда
			СтрокаОплатыКартой = ВременнаяТаблицаКарт[0];
			ДобавитьЭлементыНаФорму = Ложь;
		Иначе
			СтрокаОплатыКартой = ВременнаяТаблицаКарт.Добавить();
			ДобавитьЭлементыНаФорму = Истина;
		КонецЕсли;
		
		СтрокаОплатыКартой.ВидПлатежнойКарты   = Параметры.ВидКарты;
		СтрокаОплатыКартой.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
		СтрокаОплатыКартой.Сумма               = РезультатВыполнения.СуммаОперации;
		СтрокаОплатыКартой.СсылочныйНомер      = РезультатВыполнения.СсылочныйНомер;
		СтрокаОплатыКартой.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		
		Если ДобавитьЭлементыНаФорму Тогда
			ДобавитьКартуНаСервере(СтрокаОплатыКартой.ПолучитьИдентификатор());
		КонецЕсли;
		
		ПересчитатьСуммы();
		
		// Добавим строку в ТЧ оплат документа.
		СтрокаОплатыКартой = Объект.ОплатаПлатежнымиКартами.Добавить();
		СтрокаОплатыКартой.ВидПлатежнойКарты   = Параметры.ВидКарты;
		СтрокаОплатыКартой.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
		СтрокаОплатыКартой.Сумма               = РезультатВыполнения.СуммаОперации;
		СтрокаОплатыКартой.СсылочныйНомер      = РезультатВыполнения.СсылочныйНомер;
		СтрокаОплатыКартой.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		
		// Запись
		Записать(); // Обязателено необходимо записать документ, для предотвращения потери информации.
		ЗаписатьДокумент = Истина;
		// Конец Запись
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды УдалитьОплатуКартой.
//
&НаКлиенте
Процедура УдалитьОплатуКартойПослеВыбораКарты(ТекущиеДанные)
	
	ПоказыватьПредупреждение = Ложь;
	
	// Проверка выбранной строки в талице оплат платежными картами
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите строку удаляемой оплаты картой.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтаФорма, ПоказыватьПредупреждение) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить отмену оплаты картой.'"));
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
	
	СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.ОплатаПлатежнымиКартами, ВременнаяТаблицаКарт);
	УдалитьСтрокиОплатыСНулевойСуммой();
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал),
		ЭквайринговыйТерминал,
		Неопределено);
		
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
			И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("ОтменаОперацииПоПлатежнойКартеЗавершение", ЭтотОбъект, ТекущиеДанные);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор, 
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОперацииПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		ТекущиеДанные = Параметры;
		ТекущиеДанные.ОплатаУдаленаСумма = ТекущиеДанные.Сумма;
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.ОплатаУдалена = Истина;
		
		Индекс = ВременнаяТаблицаКарт.Индекс(ТекущиеДанные);
		ИзменитьЭлементыПослеУдаленияОплатыНаСервере(Индекс, ТекущиеДанные.ОплатаУдаленаСумма);
		
		ПересчитатьСуммы();
		
		СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.ОплатаПлатежнымиКартами, ВременнаяТаблицаКарт);
		УдалитьСтрокиОплатыСНулевойСуммой();
		
		// Запись
		Записать();
		ЗаписатьДокумент = Истина;
		// Конец Запись
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет состав элементов формы для удаленной карты.
//
&НаСервере
Процедура ИзменитьЭлементыПослеУдаленияОплатыНаСервере(Индекс, ОплатаУдаленаСумма);
	
	Элементы["НадписьОбУдаленииОплатыКартой_"+Индекс].Заголовок = "Оплата отменена: -"+ОплатаУдаленаСумма;
	Элементы["ОплатаКартой_"+Индекс].Видимость = Ложь;
	Элементы["НадписьОбУдаленииОплатыКартой_"+Индекс].Видимость = Истина;
	
КонецПроцедуры

// Процедура - обработчик команды КнопкаУдаленияОплаты_N формы, где N - индекс карты в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура ВыбратьКартуДляУдаленияОплаты(Команда)
	
	НайденныеСтроки = ВременнаяТаблицаКарт.НайтиСтроки(Новый Структура("ИмяКоманды", ""+Команда.Имя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Если НайденныеСтроки[0].Сумма = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицы", НайденныеСтроки[0]);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКартуДляУдаленияОплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Отменить оплату картой", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка: не обнаружена команда удаления!";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды КнопкаУдаленияОплаты_N после подтверждения отмены оплаты. N - индекс карты в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура ВыбратьКартуДляУдаленияОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		УдалитьОплатуКартойПослеВыбораКарты(ДополнительныеПараметры.СтрокаТаблицы);
	Иначе
		ТекущиеДанные = ДополнительныеПараметры.СтрокаТаблицы;
		
		Если ТекущиеДанные.Сумма = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ОплатаУдаленаСумма = ТекущиеДанные.Сумма;
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.ОплатаУдалена = Истина;
		
		Индекс = ВременнаяТаблицаКарт.Индекс(ТекущиеДанные);
		ИзменитьЭлементыПослеУдаленияОплатыНаСервере(Индекс, ТекущиеДанные.ОплатаУдаленаСумма);
		
		ПересчитатьСуммы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура копирует данные между ТЗ ВременнаяТаблицаКарт и ТЧ ОплатаПлатежнымиКартами.
//
&НаКлиенте
Процедура СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Приемник, Источник);
	
	Приемник.Очистить();
	Для каждого ТекущаяСтрокаИсточника Из Источник Цикл
		НоваяСтрокаПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, ТекущаяСтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти