
&НаКлиенте
Перем Дисплеи;

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура инициализирует параметры нового чека.
//
&НаСервере
Процедура ИнициализироватьНовыйЧек()
	
	Попытка
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	Исключение
		//
	КонецПопытки;
	
	НовыйЧек = Документы.ЧекККМ.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(НовыйЧек, Объект,, "Запасы, ОплатаПлатежнымиКартами, СкидкиНаценки, Номер");
	
	ЗначениеВДанныеФормы(НовыйЧек, Объект);
	
	Объект.СуммаДокумента = 0;
	
	Объект.ВидСкидкиНаценки = Неопределено;
	Объект.ДисконтнаяКарта = Неопределено;
	Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
	Объект.СкидкиРассчитаны = Ложь;
	СуммаСкидки = 0;
	
	Объект.ПолученоНаличными = 0;
	ПолученоПлатежнымиКартами = 0;
	
	СуммаЧекаБезСкидки = 0;
	СуммаСдачи = 0;
	
	Объект.Запасы.Очистить();
	Объект.ОплатаПлатежнымиКартами.Очистить();
	Объект.СкидкиНаценки.Очистить();
	
	Объект.НомерЧекаККМ = "";
	Объект.Архивный = Ложь;
	Объект.Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;
	Объект.Телефон = "";
	Объект.АдресЭП = "";
	
	УстановленСерыйЦвет = Истина;
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
	
КонецПроцедуры // ИнициализироватьНовыйЧек()

// Заполняет суммы скидок на клиенте.
//
&НаКлиенте
Процедура ЗаполнитьСуммыСкидок()
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		СуммаБезСкидки = ТекСтрока.Цена * ТекСтрока.Количество;
		ОбщаяСкидка = СуммаБезСкидки - ТекСтрока.Сумма;
		СуммаРучнойСкидкиНаценки = ?((ОбщаяСкидка - ТекСтрока.СуммаАвтоматическойСкидки) > 0, ОбщаяСкидка - ТекСтрока.СуммаАвтоматическойСкидки, 0);
		
		ТекСтрока.СуммаСкидки = ОбщаяСкидка;
		ТекСтрока.СуммаСкидкиНаценки = СуммаРучнойСкидкиНаценки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура пересчитывает документ на клиенте.
//
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	
	Оплачено = Объект.ПолученоНаличными + Объект.ОплатаПлатежнымиКартами.Итог("Сумма");
	СуммаСдачи = ?(Оплачено = 0, 0, Оплачено - Объект.СуммаДокумента);
	
	СуммаСкидки = Объект.Запасы.Итог("СуммаСкидки");
	СуммаЧекаБезСкидки = Объект.СуммаДокумента + СуммаСкидки;
	
	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры // ПересчитатьДокументНаКлиенте()

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(Объект.ЭквайринговыйТерминал);
	
	Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()

	ФискальныйРегистратор = ?(
		ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
	  И ЗначениеЗаполнено(Объект.КассаККМ)
	  И ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование),
	  Объект.КассаККМ.ПодключаемоеОборудование.Ссылка,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	ЭквайринговыйТерминал = ?(
		ИспользоватьПодключаемоеОборудование
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование)
	  И НЕ Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования,
	  Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(
				Объект.СуммаВключаетНДС,
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100
			);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить(
		"Содержание",
		УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное),
			СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование),
			СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул)
	);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура заполняет данные при изменении номенклатуры.
//
&НаКлиенте
Процедура НоменклатураПриИзменении(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта",  Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
	
КонецПроцедуры // НоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(
		Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма
	  - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, УстановитьОписание = Истина)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СуммаПередРасчетом = СтрокаТабличнойЧасти.Сумма;
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0
		    И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	СтрокаТабличнойЧасти.СуммаСкидки = СуммаПередРасчетом - СтрокаТабличнойЧасти.Сумма;
	СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СтрокаТабличнойЧасти.СуммаСкидки;
	
	// АвтоматическиеСкидки.
	ТребуетсяПересчет = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	
	// Если была изменена картинка, то фокус уходит из ТЧ и процедура ПересчитатьДокументНаКлиенте() не вызывается.
	Если ТребуетсяПересчет Тогда
		ПересчитатьДокументНаКлиенте();
		ДокументПересчитанНаКлиенте = Истина;
	Иначе
		ДокументПересчитанНаКлиенте = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки

	// РМК
	Если УстановитьОписание Тогда
		УстановитьОписаниеДляСтрокиТЧЗапасыНаКлиенте(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Процедура рассчитывает % скидки в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьПроцентСкидки(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	// АвтоматическиеСкидки.
	ТребуетсяПересчет = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьПроцентСкидки");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	
	// Если была изменена картинка, то фокус уходит из ТЧ и процедура ПересчитатьДокументНаКлиенте() не вызывается.
	Если ТребуетсяПересчет Тогда
		ПересчитатьДокументНаКлиенте();
		ДокументПересчитанНаКлиенте = Истина;
	Иначе
		ДокументПересчитанНаКлиенте = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена < СтрокаТабличнойЧасти.СуммаСкидки Тогда
		СтрокаТабличнойЧасти.СуммаСкидкиНаценки = ?((СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки) < 0, 
			0, 
			СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.СуммаСкидки;
	Если СтрокаТабличнойЧасти.Цена <> 0
	   И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = (1 - СтрокаТабличнойЧасти.Сумма / (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество)) * 100;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
	КонецЕсли;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	УстановитьОписаниеДляСтрокиТЧЗапасыНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьПроцентСкидки()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	НоваяСтрока = Неопределено;
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		НоваяСтрока.СуммаСкидки = (НоваяСтрока.Количество * НоваяСтрока.Цена) - НоваяСтрока.Сумма;
		НоваяСтрока.СуммаСкидкиНаценки = НоваяСтрока.СуммаСкидки;
		НоваяСтрока.НоменклатураХарактеристикаИПартия = СокрЛП(НоваяСтрока.Номенклатура.Наименование)+?(НоваяСтрока.Характеристика.Пустая(), "", ". "+НоваяСтрока.Характеристика)+?(НоваяСтрока.Партия.Пустая(), "", ". "+НоваяСтрока.Партия);
		Если НоваяСтрока.СуммаСкидки <> 0 Тогда
			ПроцентСкидки = Формат(НоваяСтрока.СуммаСкидки * 100 / (НоваяСтрока.Количество * НоваяСтрока.Цена), "ЧДЦ=2");
			ТекстСкидки = ?(НоваяСтрока.СуммаСкидки > 0, " - "+НоваяСтрока.СуммаСкидки, " + "+(-НоваяСтрока.СуммаСкидки))+" "+Объект.ВалютаДокумента
						  +" ("+?(НоваяСтрока.СуммаСкидки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
		Иначе
			ТекстСкидки = "";
		КонецЕсли;
		НоваяСтрока.ДанныеПоСтроке = ""+НоваяСтрока.Цена+" "+Объект.ВалютаДокумента+" Х "+НоваяСтрока.Количество+" "+НоваяСтрока.ЕдиницаИзмерения+ТекстСкидки+" = "+НоваяСтрока.Сумма+" "+Объект.ВалютаДокумента;
		
		Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
			И ЗначениеЗаполнено(СтрокаЗагрузки.КодАкцизнойМарки) Тогда
			УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
			СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
			СтрокаАкцизнаяМарка.КлючСвязи = НоваяСтрока.КлючСвязи;
			СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаЗагрузки.КодАкцизнойМарки;
		КонецЕсли;
		
	КонецЦикла;
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;

	ПоказатьСкрытьСдачуНаСервере(Ложь, Истина);
	
	Если НоваяСтрока <> Неопределено Тогда
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Организация",			  Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ДоступностьВалютыДокумента", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// 3. Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
	   И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
		// ДисконтныеКарты
		// В чеках не проверяем контрагента, т.к. все продажи обезличенные.
		Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
		Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
		// Конец ДисконтныеКарты
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			  И РезультатЗакрытия.ПересчитатьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы");
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// ДисконтныеКарты
		Если РезультатЗакрытия.ПерезаполнитьСкидки И НЕ РезультатЗакрытия.ПерезаполнитьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтаФорма, "Запасы");
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		// Конец ДисконтныеКарты
		
		// АвтоматическиеСкидки
		Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	// Обновим подвал документа
	ПересчитатьДокументНаКлиенте();
	
	// Обновим надписи для всех строк ТЧ Запасы.
	ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(СтруктураНадписи.ПроцентСкидкиПоДисконтнойКарте)+"% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()	

// Процедура формирует заголоок формы.
//
&НаСервере
Процедура СформироватьЗаголовок(СтруктураСостояниеКассовойСмены)
	
	Если СтруктураСостояниеКассовойСмены = Неопределено Тогда
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	КонецЕсли;
	
	Если СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ТекстСообщения = НСтр("ru='%ТорговаяТочка%, Смена № %НомерСмены%  %ВремяИзменения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТорговаяТочка%", СокрЛП(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиница));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ=dd.MM.yyyy"));
	Иначе
		ТекстСообщения = НСтр("ru='%ТорговаяТочка%'");
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиница) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТорговаяТочка%", СокрЛП(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиница));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТорговаяТочка%", СокрЛП(КассаККМ.СтруктурнаяЕдиница));
		КонецЕсли;
	КонецЕсли;
	Заголовок = ТекстСообщения;
	
КонецПроцедуры // СформироватьЗаголовок()

// Процедура формирует заголоок формы.
//
&НаСервере
Процедура СформироватьЗаголовокНаКлиенте(СтруктураСостояниеКассовойСмены)
	
	ТекстСообщения = НСтр("ru='%ТорговаяТочка%, Смена № %НомерСмены%  %ВремяИзменения%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТорговаяТочка%", СокрЛП(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиница));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ=dd.MM.yyyy"));
	
	Заголовок = ТекстСообщения;
	
КонецПроцедуры // СформироватьЗаголовок()

&НаСервереБезКонтекста
Функция ТранспортныйМодуль(Организация, Магазин)

	ТранспортныйМодуль = ИнтеграцияЕГАИСУНФ.ИспользуемыйТранспортныйМодуль(Организация, Магазин);
	Возврат ТранспортныйМодуль;

КонецФункции // ТранспортныйМодуль()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначенияКассоваяСмена

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	ОбщиеПараметры = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(Объект, Объект.Ссылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
	Возврат ОбщиеПараметры;
	
КонецФункции

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧек(СформироватьТоварныйЧек = Ложь)
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтаФорма, ПоказыватьПредупреждение) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
		ИЛИ КассаККМИспользоватьБезПодключенияОборудования Тогда
		
		// Внешнее оборудование не используется
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Попытка
			РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			ПоказатьСкрытьСдачуНаСервере();
		Исключение
			ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте();
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить проведение документа'"));
			Возврат;
		КонецПопытки;
		
		Если СформироватьТоварныйЧек И НЕ Объект.Ссылка.Пустая() Тогда
			
			ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
			ПараметрыОткрытия.ИмяМенеджераПечати = "Документ.ЧекККМ";
			ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
			МассивЧековККМ = Новый Массив;
			МассивЧековККМ.Добавить(Объект.Ссылка);
			ПараметрыОткрытия.ПараметрКоманды	 = МассивЧековККМ;
			ПараметрыОткрытия.ПараметрыПечати	 = Неопределено;
			
			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);
			
		КонецЕсли;
		ИнициализироватьНовыйЧек();
		ВывестиИнформациюНаДисплейПокупателя();
		Возврат;
	КонецЕсли;
		
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда

		ЭтаФорма.Доступность = Ложь;
		
		// Готовим данные
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Ложь;
		
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
		ОбщиеПараметры.ДатаВремя = ТекущаяДата();
		
		Контекст = Новый Структура();
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		Контекст.Вставить("СформироватьТоварныйЧек", СформироватьТоварныйЧек);
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
			Если НЕ ДанныеЕГАИСДостаточны Тогда
				Возврат;
			КонецЕсли;
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ОбщиеПараметры, 
			ИдентификаторУстройстваФР,
			,
			ПослеОткрытияЧека,
			ПослеОшибкиПечатиЧека
		);
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧек()

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
			Новый ОписаниеОповещения("ПечатьЧека_ПослеПолученияПодписиВЕГАИС", ЭтотОбъект, ПараметрыВыполнения),
			ПараметрыВыполнения.ВходныеПараметры,
			ДополнительныеПараметры.ТранспортныйМодуль,
			Истина
		);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеПолученияПодписиВЕГАИС(Результат, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.ПродолжитьПечать = Результат.Результат;
	ПараметрыВыполнения.ОписаниеОшибки = Результат.ОписаниеОшибки;
	
	Если Результат.Результат Тогда
		ПараметрыВыполнения.Вставить("АдресЧека"  , Результат.АдресЧека);
		ПараметрыВыполнения.Вставить("ПодписьЧека", Результат.ПодписьЧека);
		
		ИННОрганизации = "";
		КППОрганизации = "";
		НаименованиеОрганизации = "";
		
		Если Результат.ТранспортныйМодуль <> Неопределено Тогда
			ИННОрганизации = Результат.ТранспортныйМодуль.ИНН;
			КППОрганизации = Результат.ТранспортныйМодуль.КПП;
			
			НаименованиеОрганизации = СокрЛП(Результат.ТранспортныйМодуль.ОрганизацияЕГАИС);
			Если ПустаяСтрока(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ПараметрыВыполнения.ВходныеПараметры.ОрганизацияНазвание;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИНН", ИННОрганизации);
		ПараметрыВыполнения.Вставить("КПП", КППОрганизации);
		ПараметрыВыполнения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		
		Объект.АдресЧекаЕГАИС = Результат.АдресЧека;
		Объект.ПодписьЧекаЕГАИС = Результат.ПодписьЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт

	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	Объект.АдресЧекаЕГАИС = "";
	Объект.ПодписьЧекаЕГАИС = "";
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
			Неопределено,
			ПараметрыВыполнения.ВходныеПараметры,
			ДополнительныеПараметры.ТранспортныйМодуль,
			Истина
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Попытка
			РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			ПоказатьСкрытьСдачуНаСервере();
		Исключение
			ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте();
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить проведение документа'")); // Асинхронный метод!
			Возврат;
		КонецПопытки;
		
		Если Параметры.СформироватьТоварныйЧек И НЕ Объект.Ссылка.Пустая() Тогда
			
			ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
			ПараметрыОткрытия.ИмяМенеджераПечати = "Документ.ЧекККМ";
			ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
			МассивЧековККМ = Новый Массив;
			МассивЧековККМ.Добавить(Объект.Ссылка);
			ПараметрыОткрытия.ПараметрКоманды	 = МассивЧековККМ;
			ПараметрыОткрытия.ПараметрыПечати	 = Неопределено;
			
			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);
			
		КонецЕсли;
		ИнициализироватьНовыйЧек();
		ВывестиИнформациюНаДисплейПокупателя();
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	СформироватьЗаголовок(Неопределено);
	
КонецПроцедуры

// Функция выполняет получение состояния кассовой смены на сервере.
//
&НаСервереБезКонтекста
Функция ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	Возврат РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции // ПолучитьСостояниеКассовойСменыНаСервере()

// Функция возвращает остаток денежных средств в кассе ККМ на сервере.
//
&НаСервереБезКонтекста
Функция ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ)
	
	Возврат РозничныеПродажиСервер.ПолучитьОстатокДенежныхСредствВКассеККМ(КассаККМ);
	
КонецФункции // ПолучитьОстатокДенежныхСредствВКассеККМНаСервере()

// Процедура - обработчик события "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену()
	
	ОписаниеОшибки = "";
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", ПараметрыКассыККМ.СтруктурнаяЕдиница);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ИдентификаторУстройства, 
			, 
			ДополнительныеПараметры
		);
	Иначе
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки);
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСмены(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьКассовуюСмену()

&НаКлиенте
Процедура ОткрытьКассовуюСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	Если РезультатВыполнения.Результат Тогда 
		ОписаниеОшибки = "";
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.
							       |Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСмены(КассаККМ);
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                      |Смена не открыта на фискальном регистраторе.
			                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(КассаККМ)
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	СформироватьЗаголовокНаКлиенте(СтруктураСостояниеКассовойСмены);
	
КонецПроцедуры

// Функция выполняет открытие кассовой смены на сервере.
//
&НаСервере
Функция ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки = "")
	
	//Возврат Документы.ОтчетОРозничныхПродажах.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	//КассоваяСмена = Неопределено; 
	Результат = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	//Если Результат И ЗначениеЗаполнено(КассоваяСмена) Тогда
	//	РозничныеПродажиСервер.СоздатьОтчетОРозничныхПродажах(КассоваяСмена, ОписаниеОшибки);		
	//КонецЕсли;
	Возврат Результат;
	
КонецФункции // ОткрытьКассовуюСменуНаСервере()

// Процедура выполняет закрытие кассовой смены на сервере.
//
&НаСервере
Функция ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки = "", СсылкаНаОтчет = Неопределено)
	
	//Возврат Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию(КассаККМ, ОписаниеОшибки);
	Возврат РозничныеПродажиСервер.ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет);
	
КонецФункции // ЗакрытьКассовуюСменуНаСервере()

// Процедура - обработчик команды "ВнесениеДенег".
//
&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ВносимаяСумма = 0;
		
		ЗаголовокОкна = НСтр("ru='Сумма внесения, %Валюта%'");
		ЗаголовокОкна = СтрЗаменить(
			ЗаголовокОкна,
			"%Валюта%",
			СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление
		);
		
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ВнесениеДенегЗавершение", ЭтотОбъект, Новый Структура("ВносимаяСумма", ВносимаяСумма)), ВносимаяСумма, ЗаголовокОкна, 15, 2);
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'"
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ВнесениеДенег".
//
&НаКлиенте
Процедура ВнесениеДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВносимаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ВносимаяСумма, Результат);
	
	Если (Результат <> Неопределено) Тогда
		
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
			
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 1, ВносимаяСумма);
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ВнесениеДенег()

&НаКлиенте
Процедура ИнкассацияНаФискальномУстройствеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			                        |Чек не напечатан на фискальном устройстве.
			                        |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ИзымаемаяСумма = 0;
		
		ЗаголовокОкна = НСтр("ru='Сумма выемки, %Валюта%'");
		ЗаголовокОкна = СтрЗаменить(
			ЗаголовокОкна,
			"%Валюта%",
			СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление
		);
		
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ВыемкаДенегЗавершение", ЭтотОбъект, Новый Структура("ИзымаемаяСумма", ИзымаемаяСумма)), ИзымаемаяСумма, ЗаголовокОкна, 15, 2);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзымаемаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ИзымаемаяСумма, Результат);
	
	Если (Результат <> Неопределено) Тогда
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 0, ИзымаемаяСумма);
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ИзъятиеДенег()

// Процедура вызывается при нажатии кнопки НапечататьЧек командной панели.
//
&НаКлиенте
Процедура ПробитьЧекВыполнить(Команда, СформироватьТоварныйЧек = Ложь)
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ОткрытьКассовуюСмену();
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Ответственный, Подразделение");
		Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		ОстатокВКассе = СтруктураСостояниеКассовойСмены.НаличностьВКассе;
		ОстатокВКассеСтрока = "" + ОстатокВКассе;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.СуммаДокумента > Объект.ПолученоНаличными + Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты меньше суммы чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.СуммаДокумента < Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты платежными картами превышает сумму чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПробитьЧек"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности	
	
	Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
	
	Если НЕ Отказ И ПроверитьЗаполнение() Тогда
		
		ПробитьЧек(СформироватьТоварныйЧек);
		
		СформироватьЗаголовок(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧекВыполнить()

// Процедура печати X-отчёта.
//
&НаКлиенте
Процедура ПечатьОтчетаБезгашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция успешна завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Процедура - обработчик команды "ПечатьОтчетаБезГашения".
//
&НаКлиенте
Процедура ПечатьОтчетаБезГашенияВыполнить()
	
	ЭтаФорма.Доступность = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПечатьОтчетаБезГашенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(
		Оповещение,
		УникальныйИдентификатор
	);
	
КонецПроцедуры // ПечатьОтчетаБезГашенияВыполнить()

// Процедура - обработчик команды "ПечатьОтчетаБезГашения".
//
&НаКлиенте
Процедура ПечатьОтчетаБезГашенияВыполнитьМояКасса()
	
	ЭтаФорма.Доступность = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПечатьОтчетаБезГашенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(
		Оповещение,
		УникальныйИдентификатор
	);
	
КонецПроцедуры // ПечатьОтчетаБезГашенияВыполнить()

// Процедура - обработчик команды "ЗакрытьКассовуюСмену".
//
&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ"
		);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	СостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования);
	ИначеЕсли ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Оповещение = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ИдентификаторУстройства, 
			,
			СостояниеКассовойСмены.КассоваяСмена
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования) Экспорт
	
	ОписаниеОшибки = "";
	
	// 1. Заполнение отчета о розничных продажах.
	Документ = СформироватьОтчетОРозничныхПродажахНаСервере(КассаККМ, ОписаниеОшибки); 
	
	Если ЗначениеЗаполнено(ОписаниеОшибки)
	   И ИспользоватьБезПодключенияОборудования Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки)
		 И НЕ ИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр(
			"ru = 'При формировании отчета о розничных продажах возникли ошибки.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// 2. Заполнение параметров кассовой смены.
	Результат = ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'При закрытии смены произошла ошибка.
		                            |Смена не закрыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Все результирующие документы выводим пользователю.
	Если Документ <> Неопределено Тогда
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ", Документ));
		
		Если СверятьИтогиНаЭТПриЗакрытииСмены И ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьНовыйЧек();
	Элементы.Список.Обновить();
	Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	
КонецПроцедуры

// Процедура выполняет закрытие кассовой смены на сервере.
//
&НаСервере
Функция СформироватьОтчетОРозничныхПродажахНаСервере(КассаККМ, ОписаниеОшибки = "")
	
	Возврат Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию(КассаККМ, ОписаниеОшибки);
	
КонецФункции // СформироватьОтчетОРозничныхПродажахНаСервере()

&НаКлиенте
Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		СформироватьОтчетОРозничныхПродажах(Ложь);
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При закрытии смены на фискальном регистраторе произошла ошибка.
			|""%ОписаниеОшибки%""
			|Отчет на фискальном регистраторе не сформирован.'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ОписаниеОшибки%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИнициализироватьНовыйЧек();
		Элементы.Список.Обновить();
		Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнийОтчетОРозничныхПродажахЗаЗакрытуюКассовуюСмену()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОтчетОРозничныхПродажах.Ссылка
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Проведен
		|	И ОтчетОРозничныхПродажах.КассоваяСмена.Статус <> &СтатусКассовойСмены
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажах.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("СтатусКассовойСмены", Перечисления.СтатусыКассовойСмены.Открыта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьПоследнююЗакрытуюКассовуюСмену()

&НаСервере
Функция ПараметрыОперацииАннулированияЧекаККМ()
	
	// Подготовка таблицы общих параметров.
	ТипЧека = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииАннулированияЧека();
	ПараметрыОперации.ТипРасчета = ТипЧека;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Процедура аннулирования чека на фискальном регистраторе.
//
&НаКлиенте
Процедура АннулироватьЧекККМ(КассаККМ)
	
	ОписаниеОшибки = "";
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование 
		ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		Возврат;

	КонецЕсли;
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперацииАннулирования = ПараметрыОперацииАннулированияЧекаККМ();
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("АннулированиеЧекаЗавершение", ЭтотОбъект);
		
		МенеджерОборудованияКлиент.НачатьАннулированиеЧекаНаФискальномУстройстве(
			ОповещениеПриЗавершении, 
			УникальныйИдентификатор, 
			ПараметрыОперацииАннулирования, 
			ИдентификаторУстройстваФР);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулированиеЧекаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При аннулировании чека произошла ошибка. Чек не аннулирован на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%ДополнительноеОписание%",
				РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды АннулированиеЧека формы.
//
&НаКлиенте
Процедура АннулированиеЧека(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АннулированиеЧекаОтветНаВопрос", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Аннулировать последний чек?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Процедура - обработчик команды АннулированиеЧека формы. Вызывается полсе подтверждение аннулирования в окне вопроса.
//
&НаКлиенте
Процедура АннулированиеЧекаОтветНаВопрос(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		АннулироватьЧекККМ(КассаККМ);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды ПечатьКопииНаФискальномРегистраторе формы.
//
&НаКлиенте
Процедура ПечатьКопииНаФискальномРегистраторе(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(глПодключаемоеОборудование.ПоследнийСлипЧек) Тогда
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("НапечататьПоследнийСлипЧекЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(Оповещение, УникальныйИдентификатор, глПодключаемоеОборудование.ПоследнийСлипЧек);
	
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует последний слип чек.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды НапечататьПоследнийСлипЧек.
//
&НаКлиенте
Процедура НапечататьПоследнийСлипЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КассовыеСмены(Команда)
	
	ОткрытьФорму("Документ.КассоваяСмена.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировочныеЧеки(Команда)
	
	ОткрытьФорму("Документ.КассовыйЧекКоррекции.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устанавливает режим Только просмотр.
//
Процедура УстановитьРежимТолькоПросмотр()
	
	ТолькоПросмотр = Истина; // Чек пробит. Изменение информации запрещено.
	Элементы.ПринятьОплату.Доступность = Ложь;
	Элементы.ЦеныИВалюта.Доступность = Ложь;
	Элементы.ЗапасыВес.Доступность = Ложь;
	Элементы.ЗапасыПодбор.Доступность = Ложь;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Доступность = Ложь;
	
КонецПроцедуры // УстановитьРежимТолькоПросмотр()

// Процедура устанавливает доступность печати чека.
//
&НаСервере
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
	 ИЛИ Объект.КассаККМ.ИспользоватьБезПодключенияОборудования
	 ИЛИ КонтрольНаСкладеОтключен Тогда
		Элементы.ПринятьОплату.Доступность = Истина;
	Иначе
		Элементы.ПринятьОплату.Доступность = Истина; // Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьПечатиЧека()

// Процедура устанавливает заголовки кнопок и комбинации клавиш для команд формы.
//
&НаСервере
Процедура НастроитьКнопкиИКомандыМеню()
	
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		// Сообщение выдаём в процедуре "ЗаполнитьБыстрыеТовары()".
		Возврат;
	КонецЕсли;
	
	// Удалим элементы
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы.ГруппаСлужебнаяКоманды.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Попытка
			Элементы.Удалить(Элемент);
		Исключение КонецПопытки;
	КонецЦикла;
	// Конец Удалим элементы
	
	НеПоказыватьПриОткрытииФормуВыбораКассы = НастройкаРМК.НеПоказыватьПриОткрытииФормуВыбораКассы;
	СверятьИтогиНаЭТПриЗакрытииСмены = НастройкаРМК.СверятьИтогиНаЭТПриЗакрытииСмены;
	
	Для Каждого ТекущаяНастройкаКнопкиКоманды Из НастройкаРМК.КнопкиНижнейПанели Цикл
		Попытка
			Если ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ЗначениеПоискаНоменклатуры" Тогда
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.Клавиша) Тогда
					Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[ТекущаяНастройкаКнопкиКоманды.Клавиша], ТекущаяНастройкаКнопкиКоманды.Alt,
						ТекущаяНастройкаКнопкиКоманды.Ctrl, ТекущаяНастройкаКнопкиКоманды.Shift);
					Элементы.ЗначениеПоискаНоменклатуры.ПодсказкаВвода = "Введите наименование, код или артикул "+ПредставлениеСочетанияКлавиш(Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш, Ложь);
				Иначе
					Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
					Элементы.ЗначениеПоискаНоменклатуры.ПодсказкаВвода = "Введите наименование, код или артикул";
				КонецЕсли;
			Иначе
				ТекущаяКнопка = Элементы[ТекущаяНастройкаКнопкиКоманды.ИмяКнопки];
				ТекущаяКоманда = Команды[ТекущаяНастройкаКнопкиКоманды.ИмяКоманды];
				
				// Невидимый элементы, чтобы быстрые клавиши работали, когда дополнительная панель не активна.
				ИмяКнопки = ТекущаяНастройкаКнопкиКоманды.ИмяКнопки+"_НевидимаяКнопка";
				НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ГруппаСлужебнаяКоманды);
				НоваяКнопка.Отображение = ОтображениеКнопки.Текст;
				НоваяКнопка.ТолькоВоВсехДействиях = Истина;
				НоваяКнопка.Видимость = Истина;
				НоваяКнопка.ИмяКоманды = ТекущаяНастройкаКнопкиКоманды.ИмяКоманды;
				НоваяКнопка.Ширина = 1;
				НоваяКнопка.Высота = 1;
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.Клавиша) Тогда
					НоваяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[ТекущаяНастройкаКнопкиКоманды.Клавиша], ТекущаяНастройкаКнопкиКоманды.Alt,
						ТекущаяНастройкаКнопкиКоманды.Ctrl, ТекущаяНастройкаКнопкиКоманды.Shift);
				Иначе
					НоваяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
				КонецЕсли;
				// Конец Невидимый элемент
				
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.ИмяКнопки) Тогда
					ТекущаяКнопка.Заголовок = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					
					Если ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ПоказатьЖурнал" Тогда
						Элементы.ПереключательЖурналБыстрыеТовары.СписокВыбора.Получить(0).Представление = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					ИначеЕсли ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ПоказатьБыстрыеТовары" Тогда
						Элементы.ПереключательЖурналБыстрыеТовары.СписокВыбора.Получить(1).Представление = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					ИначеЕсли ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ПоказатьМоюКассу" Тогда
						Элементы.ПереключательЖурналБыстрыеТовары.СписокВыбора.Получить(2).Представление = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.Клавиша) Тогда
					ТекущаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[ТекущаяНастройкаКнопкиКоманды.Клавиша], ТекущаяНастройкаКнопкиКоманды.Alt,
						ТекущаяНастройкаКнопкиКоманды.Ctrl, ТекущаяНастройкаКнопкиКоманды.Shift);
				Иначе
					ТекущаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Произошла ошибка при настройке кнопок и команд меню. "+ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьРазвернутьБоковуюПанельПродаж формы.
//
&НаКлиенте
Процедура СвернутьРазвернутьБоковуюПанельПродажНажатие(Элемент)
	
	СвернутьРазвернутьБоковуюПанельПродажНажатиеНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьРазвернутьБоковуюПанельПродаж на сервере.
//
&НаСервере
Процедура СвернутьРазвернутьБоковуюПанельПродажНажатиеНаСервере()
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Заголовок = ">>" Тогда
		Элементы.БоковаяПанельПродажи.Видимость = Ложь;
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Заголовок = "<<";
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.БоковаяПанельПродажи.Видимость = Истина;
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Заголовок = ">>";
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельВозвраты формы.
//
&НаКлиенте
Процедура СвернутьБоковуюПанельВозвратыНажатие(Элемент)
	
	СвернутьБоковуюПанельВозвратыНажатиеНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельВозвраты на сервере.
//
&НаСервере
Процедура СвернутьБоковуюПанельВозвратыНажатиеНаСервере()
	
	Если Элементы.СвернутьБоковуюПанельВозвраты.Заголовок = ">>" Тогда
		Элементы.БоковаяПанельВозвраты.Видимость = Ложь;
		Элементы.СвернутьБоковуюПанельВозвраты.Заголовок = "<<";
		Элементы.СвернутьБоковуюПанельВозвраты.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.БоковаяПанельВозвраты.Видимость = Истина;
		Элементы.СвернутьБоковуюПанельВозвраты.Заголовок = ">>";
		Элементы.СвернутьБоковуюПанельВозвраты.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельЗаказы формы.
//
&НаКлиенте
Процедура СвернутьБоковуюПанельЗаказыНажатие(Элемент)
	
	СвернутьБоковуюПанельЗаказыНажатиеНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельЗаказы на сервере.
//
&НаСервере
Процедура СвернутьБоковуюПанельЗаказыНажатиеНаСервере()
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Заголовок = ">>" Тогда
		Элементы.ПраваяПанельСтраницы.Видимость = Ложь;
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Заголовок = "<<";
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.ПраваяПанельСтраницы.Видимость = Истина;
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Заголовок = ">>";
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет видимость страницы, на которой отображается СДАЧА.
//
&НаСервере
Процедура ПоказатьСкрытьСдачуНаСервере(Показать = Истина, Проверять = Ложь)
	
	Если Не Проверять ИЛИ Не Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке Тогда
		СдачаСтрока = "Сдача: "+Сдача+" "+Объект.ВалютаДокумента;
		
		Если Показать Тогда
			Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаСдача;
		Иначе
			Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет видимость страницы, на которой отображается СДАЧА.
//
&НаКлиенте
Процедура ПоказатьСкрытьСдачуНаКлиенте()
	
	Если Не Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке Тогда
		ПоказатьСкрытьСдачуНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокЗаказовПокупателейПриСозданииНаСервере()
	
	Если НЕ ИспользоватьЗаказыВРозничнойТорговле Тогда
		Элементы.ПродажаПоЗаказам.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеОтмененногоЗаказа(
		СписокЗаказов.КомпоновщикНастроек.Настройки.УсловноеОформление
	);
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборОплата.СписокВыбора.Добавить("Без оплаты", "Без оплаты");
	Элементы.ОтборОплата.СписокВыбора.Добавить("Оплачен частично", "Оплачен частично");
	Элементы.ОтборОплата.СписокВыбора.Добавить("Оплачен полностью", "Оплачен полностью");
	
	Элементы.ОтборОтгрузка.СписокВыбора.Добавить("Без отгрузки", "Без отгрузки");
	Элементы.ОтборОтгрузка.СписокВыбора.Добавить("Отгружен частично", "Отгружен частично");
	Элементы.ОтборОтгрузка.СписокВыбора.Добавить("Отгружен полностью", "Отгружен полностью");

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(СписокЗаказов,"ВидОперации",СписокЗначений,Истина,ВидСравненияКомпоновкиДанных.ВСписке);
	
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("АкутальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	УстановитьОтборТекущиеДела();
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела");
	
	Если Не КонтекстноеОткрытие Тогда
		// УНФ.ОтборыСписка
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокЗаказов);
		// Конец УНФ.ОтборыСписка
	КонецЕсли;
	
	
	
	
	
	//УНФ.ОтборыСписка
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокЗаказов, "СписокЗаказов");
	//Конец УНФ.ОтборыСписка
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(СписокЗаказов);
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	Элементы.ДанныеПанелиКонтактнойИнформации.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
	Элементы.ДанныеПанелиКонтактнойИнформации.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заказы покупателей в Рознице
	ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	ИспользоватьРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	// Конец Заказы покупателей в Рознице
	
	// РМК
	КассаККМ = Параметры.ЗначенияЗаполнения.КассаККМ;
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Для пользователя не определена Касса ККМ!'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ПредыдущаяКассаККМ = КассаККМ;
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	Объект.ЭквайринговыйТерминал = Параметры.ЗначенияЗаполнения.ЭквайринговыйТерминал;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены);
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	ОстатокВКассе = СтруктураСостояниеКассовойСмены.НаличностьВКассе;
	ОстатокВКассеСтрока = "" + ОстатокВКассе;
	
	Объект.КассаККМ = КассаККМ;
	Объект.СтруктурнаяЕдиница = КассаККМ.СтруктурнаяЕдиница;
	Если КассаККМ.СтруктурнаяЕдиница.РозничныйВидЦен.Пустая() Тогда
		Объект.ВидЦен = Справочники.ВидыЦен.Оптовая; // Значение заполнения реквизита ВидЦен в документе ОтчетОРозничныхПродажах.
	Иначе
		Объект.ВидЦен = КассаККМ.СтруктурнаяЕдиница.РозничныйВидЦен;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = КассаККМ.ВалютаДенежныхСредств;
	КонецЕсли;
	Объект.Организация = Объект.КассаККМ.Владелец;
	Объект.Подразделение = Объект.КассаККМ.Подразделение;
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойОтветственный");
	
	ЕстьПравоОформлятьРКО = ПравоДоступа("Добавление", Метаданные.Документы.РасходИзКассы);
	// Конец РМК
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	// Временно.
	Объект.НДСВключатьВСтоимость = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить()
						   ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
	Элементы.СнятьРезервирование.Видимость = НЕ КонтрольНаСкладеОтключен;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.НациональнаяВалюта.Получить()));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда	
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = УправлениеНебольшойФирмойСервер.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	
	УстановитьДоступностьПечатиЧека();
	
	Элементы.ЗапасыСуммаСкидкиНаценки.Видимость = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	
	Если Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		УстановитьРежимТолькоПросмотр();
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	ПродажаСоСклада = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада; 
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада;
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	
	// РМК
	СменаОткрыта = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	
	Список.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	Список.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	Список.Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	СформироватьЗаголовок(СтруктураСостояниеКассовойСмены);
	
	// Быстрые товары и настройки кнопок и команд меню.
	ЗаполнитьБыстрыеТовары(Истина);
	НастроитьКнопкиИКомандыМеню();
	
	ЦветВажныхКнопок = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	// Виды периодов.
	ЗаТекущуюСмену = Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену;
	ЗаПроизвольныйПериод = Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод;
	ЗаВчерашнийДень = Перечисления.ВидыПериодовРМК.ЗаВчерашнийДень;
	ЗаВесьПериод = Перечисления.ВидыПериодовРМК.ЗаВесьПериод;
	ЗаПрошлуюСмену = Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену;
	
	ЗаполнитьСпискиВидыПериодов();
	
	УстановитьПериодНаСервере(ЗаТекущуюСмену, "СписокЧековККМ");
	УстановитьПериодНаСервере(ЗаТекущуюСмену, "СписокЧековККМНаВозврат");
	УстановитьПериодНаСервере(ЗаТекущуюСмену, "Список");
	УстановитьПериодНаСервере(ЗаПроизвольныйПериод, "СписокЗаказов", Новый СтандартныйПериод);
	
	ПереключательЖурналБыстрыеТовары = 1;
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(Список);
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(СписокЧековККМНаВозврат);
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(СписокЗаказов);
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	ОбновитьВидимостьНадписиИстеклоБолее24Часов(СтруктураСостояниеКассовойСмены);
	
	ТипНоменклатурыЗапас = Перечисления.ТипыНоменклатуры.Запас;
	ТипНоменклатурыУслуга = Перечисления.ТипыНоменклатуры.Услуга;
	// Конец РМК
	
	// Заказы покупателей в Рознице
	НастроитьСписокЗаказовПокупателейПриСозданииНаСервере();
	// Конец Заказы покупателей в Рознице
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода,ДисплейПокупателя");
	// Конец ПодключаемоеОборудование
	
	ЗаполнитьСуммыСкидок();
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается после закрытия формы вопроса. Форма вопроса вызывается из процедуры ПередЗакрытием.
//
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт

	//Если Результат = КодВозвратаДиалога.Да Тогда
	//	Модифицированность = Ложь;
	//	Закрыть();
	//КонецЕсли;

КонецПроцедуры // ПередЗакрытиемЗавершение()

// Процедура - обработчик события ПриЗакрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	// Выведем сообщение о рассчёте скидок, если нажата кнопка "Провести и закрыть" или форма закрывается по крестику, с сохранением изменений.
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаныПередЗаписью Тогда
		ПоказатьОповещениеПользователя("Изменение:", 
										ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
										Строка(Объект.Ссылка)+". Автоматические скидки (наценки) рассчитаны!", 
										БиблиотекаКартинок.Информация32);
	КонецЕсли;
	// Конец АвтоматическиеСкидки

	// РМК
	РабочееМестоКассираВызовСервера.ОбновитьНастройкиРМК(НастройкаРМК, НеПоказыватьПриОткрытииФормуВыбораКассы, СверятьИтогиНаЭТПриЗакрытииСмены);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	//УНФ.ОтборыСписка
	СохранитьНастройкиОтборов();
	//Конец УНФ.ОтборыСписка
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события ПередЗаписью формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			РассчиталиСкидки = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Рассчитаны автоматические скидки (наценки)!";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	Если СкидкиРассчитаныПередЗаписью Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ПослеЗаписиНаСервере формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		
		Для каждого ТекСтрока Из Объект.Запасы Цикл
			
			ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма;
			
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		Элементы.Список.Обновить();
		
		Если НЕ (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("НеОбновлятьОстатокВКассе") И Параметр.НеОбновлятьОстатокВКассе) Тогда
			ОстатокВКассеСтрока = "" + ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавленаНоменклатураИзРМК" И ЗначениеЗаполнено(Параметр) Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				ТекущиеДанные.Номенклатура = Параметр;
				НоменклатураПриИзменении(ТекущиеДанные);
				ПересчитатьДокументНаКлиенте();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаНастройкаРМК" Тогда
		Если НастройкаРМК = Параметр Тогда
			ЗаполнитьБыстрыеТовары();
			НастроитьКнопкиИКомандыМеню();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "РМК_Запись_ПриходнаяНакладнаяВозврат" Тогда
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста = ?(ЧекНеПредъявлен, WebЦвета.Серый, Новый Цвет);
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = Новый Цвет;
		ПриходнаяНакладнаяНаВозврат = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Элементы.ДекорацияПриходнаяНакладная.Заголовок = "Прих. нак-я №"+НомерДокумента+" от "+Формат(Параметр.Дата, "ДФ=dd.MM.yyyy");
		Элементы.ДекорацияПриходнаяНакладная.Видимость = Истина;
	ИначеЕсли ИмяСобытия = "РМК_Запись_РКО" Тогда
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = ?(ЧекНеПредъявлен, WebЦвета.Серый, Новый Цвет);
		РКО = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Элементы.ДекорацияРКО.Заголовок = "РКО №"+СокрЛП(НомерДокумента)+" от "+Формат(Параметр.Дата, "ДФ=dd.MM.yyyy");
		Элементы.ДекорацияРКО.Видимость = Истина;
	ИначеЕсли ИмяСобытия = "РМК_Запись_ЧекККМВозврат" Тогда
		ЧекККМНаВозврат = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Элементы.ДекорацияЧекККМНаВозврат.Заголовок = "Чек ККМ на возврат №"+НомерДокумента+" от "+Формат(Параметр.Дата, "ДФ=dd.MM.yyyy");
		Элементы.СоздатьЧекККМНаВозврат.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ИмяСобытия = "Запись_ЧекККМ_с_ЗаказомПокупателя" Тогда
		Элементы.СписокЗаказов.Обновить();
		ЧекККМ = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Элементы.ДекорацияЧекККМ.Заголовок = "Чек ККМ на возврат №"+НомерДокумента+" от "+Формат(Параметр.Дата, "ДФ=dd.MM.yyyy");
		Элементы.СоздатьЧекККМНаОснованииЗазака.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьФормыПослеСнятияZОтчета" Тогда
		ОбновитьВидимостьНадписиИстеклоБолее24Часов();
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если ИспользоватьЗаказыВРозничнойТорговле И КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбновитьВидимостьНадписиИстеклоБолее24Часов(СтруктураСостояниеКассовойСмены = Неопределено)

	Дата = ТекущаяДатаСеанса();
	
	Если СтруктураСостояниеКассовойСмены = Неопределено Тогда
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	КонецЕсли;
	
	УстановитьВидимостьНадписи = Ложь;
	Если СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ТекстСообщения = НСтр("ru='Кассовая смена открыта'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(Объект.КассоваяСмена, Дата, ТекстСообщения) Тогда
			Если СтрНайти(ТекстСообщения, "24") > 0 Тогда
				Элементы.НадписьСМоментаОткрытияСменыПрошлоБолее24Часов.Заголовок = ТекстСообщения;
				УстановитьВидимостьНадписи = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.НадписьСМоментаОткрытияСменыПрошлоБолее24Часов.Видимость = УстановитьВидимостьНадписи;

КонецПроцедуры

// Процедура - обработчик события ПередЗагрузкойДанныхИзНастроекНаСервере.
//
&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СписокДляСохранения = Настройки.Получить("СписокДляСохраненияНастроек");
	Если ТипЗнч(СписокДляСохранения) = Тип("СписокЗначений") Тогда
		// Восстановление периодов.
		ВидПериода = СписокДляСохранения.Получить(0).Значение;
		Если ВидПериода = ЗаПроизвольныйПериод Тогда
			ДатаНачала = СписокДляСохранения.Получить(1).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(2).Значение;
			Если ВидПериода <> ВидПериодаЖурналаПеречисление ИЛИ Элементы.Список.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.Список.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ВидПериода, "Список", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		ИначеЕсли ВидПериода <> ВидПериодаЖурналаПеречисление Тогда
			УстановитьПериодНаСервере(ВидПериода, "Список");
		КонецЕсли;
		
		ВидПериода = СписокДляСохранения.Получить(3).Значение;
		Если ВидПериода = ЗаПроизвольныйПериод Тогда
			ДатаНачала = СписокДляСохранения.Получить(4).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(5).Значение;
			Если ВидПериода <> ВидПериодаЧековККМПеречисление ИЛИ Элементы.СписокЧековККМ.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.СписокЧековККМ.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМ", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		ИначеЕсли ВидПериода <> ВидПериодаЧековККМПеречисление Тогда
			УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМ");
		КонецЕсли;
		
		ВидПериода = СписокДляСохранения.Получить(6).Значение;
		Если ВидПериода = ЗаПроизвольныйПериод Тогда
			ДатаНачала = СписокДляСохранения.Получить(7).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(8).Значение;
			Если ВидПериода <> ВидПериодаЧековККМНаВозвратПеречисление ИЛИ Элементы.СписокЧековККМНаВозврат.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.СписокЧековККМНаВозврат.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМНаВозврат", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		ИначеЕсли ВидПериода <> ВидПериодаЧековККМНаВозвратПеречисление Тогда
			УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМНаВозврат");
		КонецЕсли;
		
		Если СписокДляСохранения.Количество() > 10 Тогда
			ДатаНачала = СписокДляСохранения.Получить(10).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(11).Значение;
			Если Элементы.СписокЗаказов.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.СписокЗаказов.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ЗаПроизвольныйПериод, "СписокЗаказов", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		КонецЕсли;
		
		// Восстановление текущей страницы.
		ИмяТекущейСтраницы = СписокДляСохранения.Получить(9).Значение;
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриСохраненииДанныхВНастройкахНаСервере.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СписокДляСохраненияНастроек = Новый СписокЗначений;
	// Настройки периодов. Элементы 0 - 8.
	СписокДляСохраненияНастроек.Добавить(ВидПериодаЖурналаПеречисление);
	СписокДляСохраненияНастроек.Добавить(Элементы.Список.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.Список.Период.ДатаОкончания);
	СписокДляСохраненияНастроек.Добавить(ВидПериодаЧековККМПеречисление);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМ.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМ.Период.ДатаОкончания);
	СписокДляСохраненияНастроек.Добавить(ВидПериодаЧековККМНаВозвратПеречисление);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМНаВозврат.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМНаВозврат.Период.ДатаОкончания);
	// Текущая страница. Элемент 9.
	Если Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница <> Неопределено Тогда
		СписокДляСохраненияНастроек.Добавить(Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница.Имя);
	Иначе
		СписокДляСохраненияНастроек.Добавить("ГруппаПродажа");
	КонецЕсли;
	
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЗаказов.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЗаказов.Период.ДатаОкончания);
	
	Настройки.Вставить("СписокДляСохраненияНастроек", СписокДляСохраненияНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтаФорма, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период",					Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",			Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница",		Объект.СтруктурнаяЕдиница);
	ПараметрыПодбора.Вставить("ВидСкидкиНаценки",		Объект.ВидСкидкиНаценки);
	ПараметрыПодбора.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	ПараметрыПодбора.Вставить("ВидЦен",					Объект.ВидЦен);
	ПараметрыПодбора.Вставить("Валюта",					Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента",	Объект.Организация);
	ПараметрыПодбора.Вставить("ИспользуетсяСодержание",	Истина);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	НЕ Элементы.ЗапасыЦена.ТолькоПросмотр);
	
	Если ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад") Тогда
		
		ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", Истина);
		
	Иначе
		
		ПараметрыПодбора.Вставить("ЗапросПоСкладу", Истина);
		
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры // ПодборВыполнить()

// Процедура - обработчик команды ПоказатьЖурнал формы. Обходной путь для реализации быстрых клавиш для переключателя.
//
&НаКлиенте
Процедура ПоказатьЖурнал(Команда)
	
	ПереключательЖурналБыстрыеТовары = 1;
	ПереключательЖурналБыстрыеТоварыПриИзменении(Элементы.ПереключательЖурналБыстрыеТовары);
	
КонецПроцедуры

// Процедура - обработчик команды ПоказатьБыстрыеТовары формы. Обходной путь для реализации быстрых клавиш для переключателя.
//
&НаКлиенте
Процедура ПоказатьБыстрыеТовары(Команда)
	
	ПереключательЖурналБыстрыеТовары = 2;
	ПереключательЖурналБыстрыеТоварыПриИзменении(Элементы.ПереключательЖурналБыстрыеТовары);
	
КонецПроцедуры

// Процедура - обработчик команды ПоказатьМоюКассу формы. Обходной путь для реализации быстрых клавиш для переключателя.
//
&НаКлиенте
Процедура ПоказатьМоюКассу(Команда)
	
	ПереключательЖурналБыстрыеТовары = 3;
	ПереключательЖурналБыстрыеТоварыПриИзменении(Элементы.ПереключательЖурналБыстрыеТовары);
	
КонецПроцедуры

// Процедура - обработчик команды НастройкаБыстрыхТоваров формы
//
&НаКлиенте
Процедура НастройкаБыстрыхТоваров(Команда)
	
	Если ЗначениеЗаполнено(НастройкаРМК) Тогда
		СтруктураПараметров = Новый Структура("Ключ", НастройкаРМК);
		ОткрытьФорму("Справочник.НастройкиРМК.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана настройка РМК";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьПриходнуюНакладнуюНаВозврат формы
//
&НаКлиенте
Процедура СоздатьПриходнуюНакладнуюНаВозврат(Команда)
	
	Если ЧекНеПредъявлен Тогда
		// СтандартныеПодсистемы.ОценкаПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыПриходнаяНакладнаяВозврат");
		// СтандартныеПодсистемы.ОценкаПроизводительности
		ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("РМК, ВидОперацииВозврат", Истина, Истина), ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыПриходнаяНакладнаяВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("Основание, РМК", ТекущиеДанные.Ссылка, Истина), ЭтотОбъект, УникальныйИдентификатор);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран чек ККМ!";
			Сообщение.Поле = "СписокЧековККМ";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьЧекККМНаВозврат формы
//
&НаКлиенте
Процедура СоздатьЧекККМНаВозврат(Команда)
	
	Если НЕ ЧекККМНаВозврат.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Чек на возврат уже создан.";
		Сообщение.Поле = "Элементы.СоздатьЧекККМНаВозврат";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	Иначе
		ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", Новый Структура("Основание", ТекущиеДанные.Ссылка), ЭтотОбъект);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран чек ККМ!";
			Сообщение.Поле = "СписокЧековККМ";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьЧекККМНаВозврат формы
//
&НаКлиенте
Процедура СоздатьЧекККМНаОснованииЗазака(Команда)
	
	ПроверитьСостояниеКассовойСмены();
	
	Если НЕ ЧекККМ.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Чек уже создан.";
		Сообщение.Поле = "Элементы.СоздатьЧекККМНаОснованииЗазака";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	Иначе
		ТекущиеДанные = Элементы.СписокЗаказов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			//ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", Новый Структура("Основание, КассаККМ, РМК", ТекущиеДанные.Ссылка, КассаККМ, Истина), ЭтотОбъект);
			ПараметрыНовогоЧекаККМ = Новый Структура("Основание, КассаККМ, РМК", ТекущиеДанные.Ссылка, КассаККМ, Истина);
			ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", Новый Структура("Основание", ПараметрыНовогоЧекаККМ), ЭтотОбъект);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран заказ!";
			Сообщение.Поле = "СписокЗаказов";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьРКОНаОснованииПриходнойНакладной формы
//
&НаКлиенте
Процедура СоздатьРКОНаОснованииПриходнойНакладной(Команда)
	
	Если ПриходнаяНакладнаяНаВозврат.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В первую очередь нужно создать приходную накладную на возврат.";
		Сообщение.Поле = "СоздатьПриходнуюНакладнуюНаВозврат";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	Иначе
		ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено ИЛИ ЧекНеПредъявлен Тогда
			ОткрытьФорму("Документ.РасходИзКассы.ФормаОбъекта", Новый Структура("Основание, РМК", ПриходнаяНакладнаяНаВозврат, Истина), ЭтотОбъект, УникальныйИдентификатор);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран чек ККМ!";
			Сообщение.Поле = "СписокЧековККМ";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКассовойСмены();
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ОткрытьКассовуюСмену();
	КонецЕсли;
	
КонецПроцедуры
	
// Процедура - обработчик команды ПринятьОплату формы.
//
&НаКлиенте
Процедура Оплатить(Команда)
	
	ПроверитьСостояниеКассовойСмены();
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Ответственный, Подразделение");
		Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() > 0 И Не Объект.СкидкиРассчитаны Тогда
			РассчитатьСкидкиНаценки(Команды.РассчитатьСкидкиНаценки);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В документе нет ни одной строки. Нет данных для оплаты!'");
		Сообщение.Поле = "Объект.СуммаДокумента";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Проверим, чтобы не было товаров с нулевой ценой!
	ПродолжитьПриемОплаты = Истина;
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		Если ТекущаяСтрока.Цена = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке не заполнена цена";
			Сообщение.Поле = "Объект.Запасы["+(ТекущаяСтрока.НомерСтроки-1)+"].Цена";
			Сообщение.Сообщить();
			
			ПродолжитьПриемОплаты = Ложь;
		КонецЕсли;
		Если ТекущаяСтрока.Количество = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке не заполнено количество";
			Сообщение.Поле = "Объект.Запасы["+(ТекущаяСтрока.НомерСтроки-1)+"].Количество";
			Сообщение.Сообщить();
			
			ПродолжитьПриемОплаты = Ложь;
		КонецЕсли;
		Если ТекущаяСтрока.Номенклатура.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке не выбрана номенклатура";
			Сообщение.Поле = "Объект.Запасы["+(ТекущаяСтрока.НомерСтроки-1)+"].Номенклатура";
			Сообщение.Сообщить();
			
			ПродолжитьПриемОплаты = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПродолжитьПриемОплаты Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Запасы.Итог("Всего") <= 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОплатитьОбработкаОтветаНаВопрос", ЭтотОбъект),
			НСтр("ru = 'Сумма к оплате = 0! Уверены, что нужно продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Запрос о подтверждении действия'"));
	Иначе
		ОплатитьФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьОбработкаОтветаНаВопрос(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ОплатитьФрагмент();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ПринятьОплату формы.
//
&НаКлиенте
Процедура ОплатитьФрагмент()
	
	Если Не КонтрольНаСкладеОтключен Тогда
		Если Не ЗарезервироватьНаСервере() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить резервирование!");
			Возврат;
		Иначе
			ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте();
		КонецЕсли;
		ПараметрОповещения = Новый Структура("НеОбновлятьОстатокВКассе", Истина);
		Оповестить("ОбновитьФормуСпискаДокументовЧекККМ", ПараметрОповещения);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОплатитьЗавершение", ЭтаФорма);
	
	СтруктураПараметров = Новый Структура("Объект, ОплатаПлатежнымиКартами, СуммаДокумента, ВалютаДокумента, ВидыКарт, КассаККМ, ИспользоватьПодключаемоеОборудование, ЭквайринговыйТерминал, ИдентификаторФормы", 
		Объект,
		Объект.ОплатаПлатежнымиКартами,
		Объект.СуммаДокумента,
		Объект.ВалютаДокумента,
		Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора,
		КассаККМ,
		ИспользоватьПодключаемоеОборудование,
		Объект.ЭквайринговыйТерминал,
		УникальныйИдентификатор);
		
		
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаОплаты", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры

// Процедура обновляет данные основного реквизита формы после закрытия формы оплаты.
//
&НаСервере
Процедура ОбновитьДокументНаСервере(ПараметрОбъект)
	
	ЗначениеВДанныеФормы(ДанныеФормыВЗначение(ПараметрОбъект, Тип("ДокументОбъект.ЧекККМ")), Объект);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
		Исключение
			//
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		УстановитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды ПринятьОплату. Вызывается после закрытия формы оплаты.
//
&НаКлиенте
Процедура ОплатитьЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Были оплаты пластиковыми картами или отмены оплат пластиковыми картами и в этом случае документ был записан или проведён.
		ОбновитьДокументНаСервере(Результат.Объект);
		
		Если Результат.Кнопка = "Пробить чек" Тогда
		
			Объект.ПолученоНаличными = Результат.Наличными;
			
			Сдача = Формат(Результат.Сдача, "ЧДЦ=2");
			
			ПересчитатьДокументНаКлиенте();
			
			СформироватьТоварныйЧек = Результат.СформироватьТоварныйЧек;
			
			ПробитьЧекВыполнить(Команды.ПробитьЧек, СформироватьТоварныйЧек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СуммаСкидки.ОбновитьТекстРедактирования();
	Элементы.СуммаДокумента.ОбновитьТекстРедактирования();
	Элементы.Оплачено.ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - обработчик команды ПечатьТоварногоЧека формы
//
&НаКлиенте
Процедура ПечатьТоварногоЧека(Команда)
	
	МассивЧековККМ = Новый Массив;
	МассивЧековККМНаВозврат = Новый Массив;
	ЕстьОтчетыОРозничныхПродажах = Ложь;
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Если СтрокаСписка <> Неопределено Тогда
			Если ТипЗнч(СтрокаСписка) = Тип("ДокументСсылка.ЧекККМ") Тогда
				МассивЧековККМ.Добавить(СтрокаСписка);
			ИначеЕсли ТипЗнч(СтрокаСписка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
				МассивЧековККМНаВозврат.Добавить(СтрокаСписка);
			Иначе
				ЕстьОтчетыОРозничныхПродажах = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтчетыОРозничныхПродажах Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для отчетов о розничных продажах товарный чек не формируется.";
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если МассивЧековККМ.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
		ПараметрыОткрытия.ИмяМенеджераПечати = "Документ.ЧекККМ";
		ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
		ПараметрыОткрытия.ПараметрКоманды	 = МассивЧековККМ;
		ПараметрыОткрытия.ПараметрыПечати	 = Неопределено;
		
		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);
		
	КонецЕсли;
	
	Если МассивЧековККМНаВозврат.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
		ПараметрыОткрытия.ИмяМенеджераПечати = "Документ.ЧекККМВозврат";
		ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
		ПараметрыОткрытия.ПараметрКоманды	 = МассивЧековККМНаВозврат;
		ПараметрыОткрытия.ПараметрыПечати	 = Неопределено;
		
		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СтруктураПодчиненности формы
//
&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	ТекущийДокумент = Элементы.СписокЧековККМ.ТекущаяСтрока;
	
	Если ТекущийДокумент <> Неопределено Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаСтруктурыПодчиненности",Новый Структура("ДокументСсылка", ТекущийДокумент),
					ЭтотОбъект,
					ТекущийДокумент.УникальныйИдентификатор(),
					Неопределено
					);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите документ!";
		Сообщение.Поле = "СписокЧековККМ";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды Зарезервировать на сервере.
&НаСервере
Функция ЗарезервироватьНаСервере(ОтменаРезервирования = Ложь)
	
	ВозвращаемоеЗначение = Ложь;
	Если ОтменаРезервирования Тогда
		ТекущийДокумент = Элементы.Список.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийДокумент) И ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ДокОбъект = ТекущийДокумент.ПолучитьОбъект();
			
			СтарыйСтатус = ДокОбъект.Статус;
			
			ДокОбъект.Статус = Неопределено;
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			
			Попытка
				ДокОбъект.Записать(РежимЗаписи);
				Если Не ДокОбъект.Проведен Тогда
					ВозвращаемоеЗначение = Истина;
					// Если проводим объект, с которым работаем в форме, то нужно обновить объект формы.
					// Такая ситуация возникает в следующем случае. 
					// Включен контроль остатков.
					// 1. Нажать кнопку "Принять оплату". Документ будет записан, т.к. будет выполнено резервирование.
					// 2. В форме оплаты нажать кнопку "Отмена".
					// 3. В списке выбрать текущий документ и выбрать "Еще..."-"Снять резерв".
					// 4. Нажать кнопку "Принять оплату".
					Если ДокОбъект.Ссылка = Объект.Ссылка Тогда
						ЗначениеВДанныеФормы(ДокОбъект, Объект);
					КонецЕсли;
				КонецЕсли;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОписаниеОшибки();
				Сообщение.Поле = "Список";
				Сообщение.Сообщить();
			КонецПопытки;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран чек ККМ!";
			Сообщение.Поле = "Список";
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		СтарыйСтатус = Объект.Статус;
		
		Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		Попытка
			Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда
				Объект.Статус = СтарыйСтатус;
			Иначе
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		Исключение
			Объект.Статус = СтарыйСтатус;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось выполнить проведение документа!";
			Сообщение.Сообщить();
			
			ОписаниеОшибки = ОписаниеОшибки();
			Если СтрНайти(ОписаниеОшибки, НСтр("ru='Не удалось провести'")) = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Описание ошибки: "+ОписаниеОшибки;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецПопытки;
		
		УстановитьДоступностьПечатиЧека();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // ЗарезервироватьНаСервере()

// Процедура - обработчик команды СнятьРезервирование.
//
&НаКлиенте
Процедура СнятьРезервирование(Команда)
	
	ЗарезервироватьНаСервере(Истина);
	
	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
	
КонецПроцедуры // СнятьРезервирование()

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеПоискаНоменклатуры.
//
&НаКлиенте
Процедура ЗначениеПоискаНоменклатурыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗначениеПоискаНоменклатуры) Тогда
		
		НоваяСтрока = Объект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = ЗначениеПоискаНоменклатуры;
		
		ЗначениеПоискаНоменклатуры = Неопределено;
		ЭтаФорма.Модифицированность = Истина;
		
		НоменклатураПриИзменении(НоваяСтрока);
		
		ТекущийЭлемент = Элементы.ЗначениеПоискаНоменклатуры;
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры // ЗначениеПоискаНоменклатурыПриИзменении()

// Процедура - обработчик события ПриИзменении элемента ЧекНеПредъявлен формы.
//
&НаКлиенте
Процедура ЧекНеПредъявленПриИзменении(Элемент)
	
	ЧекНеПредъявленПриИзмененииНаСервере();
	
	Если Не ЧекНеПредъявлен Тогда
		ПодключитьОбработчикОжидания("СписокЧековККМПриАктивизацииСтрокиОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЧекНеПредъявлен на сервере.
//
&НаСервере
Процедура ЧекНеПредъявленПриИзмененииНаСервере()
	
	Если ЧекНеПредъявлен Тогда
		ПриходнаяНакладнаяНаВозврат = "";
		РКО = "";
		
		Элементы.ДекорацияЗаголовокЧекиККМ.Заголовок = "Создайте приходную накладную и РКО";
		
		Элементы.ДекорацияПриходнаяНакладная.Заголовок = "";
		Элементы.ДекорацияРКО.Заголовок = "";
		
		Элементы.ДекорацияЧекККМНаВозврат.Видимость = Ложь;
		Элементы.ДекорацияПриходнаяНакладная.Видимость = Истина;
		Элементы.ДекорацияРКО.Видимость = Истина;
		
		Элементы.СоздатьЧекККМНаВозврат.Видимость = Ложь;
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость = Истина;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость = Истина И ЕстьПравоОформлятьРКО;
		
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста = Новый Цвет;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = ?(ЧекНеПредъявлен, WebЦвета.Серый, Новый Цвет);
		
		Элементы.СтраницыСписокЧековККМ_и_СоставЧекаККМ_и_СтраницаСНадписью.ТекущаяСтраница = Элементы.СтраницаСПустойНадписью;
	Иначе
		Элементы.ДекорацияЗаголовокЧекиККМ.Заголовок = "Выберите основание для возврата";
		
		Элементы.СтраницыСписокЧековККМ_и_СоставЧекаККМ_и_СтраницаСНадписью.ТекущаяСтраница = Элементы.СтраницаСписокЧековККМ_и_СоставЧекаККМ;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает связанные документы определенного вида, помещает их во временное хранилище
// и возвращает адрес
//
&НаСервере
Функция ПоместитьСвязанныеДокументыВХранилище(ЧекККМ, Вид)
	
	// Заполним ссылки на документы.
	Запрос = Новый Запрос;
	
	Если Вид = "ПриходнаяНакладная" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриходнаяНакладная.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
			|ГДЕ
			|	ПриходнаяНакладная.Проведен
			|	И ПриходнаяНакладная.ЧекККМ = &ЧекККМ";
	ИначеЕсли Вид = "РасходИзКассы" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриходнаяНакладная.Ссылка,
			|	ПриходнаяНакладная.Номер,
			|	ПриходнаяНакладная.Дата
			|ПОМЕСТИТЬ ПриходнаяНакладная
			|ИЗ
			|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
			|ГДЕ
			|	ПриходнаяНакладная.Проведен
			|	И ПриходнаяНакладная.ЧекККМ = &ЧекККМ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасходИзКассы.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.РасходИзКассы КАК РасходИзКассы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходнаяНакладная КАК ПриходнаяНакладная
			|		ПО РасходИзКассы.ДокументОснование = ПриходнаяНакладная.Ссылка
			|ГДЕ
			|	РасходИзКассы.Проведен";
	ИначеЕсли Вид = "ЧекККМВозврат" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЧекККМВозврат.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
			|ГДЕ
			|	ЧекККМВозврат.Проведен
			|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	ИначеЕсли Вид = "ЧекККМ" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЧекККМЗапасы.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
			|ГДЕ
			|	ЧекККМЗапасы.Ссылка.Проведен
			|	И ЧекККМЗапасы.Заказ = &ЧекККМ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЧекККМВозвратЗапасы.Ссылка
			|ИЗ
			|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
			|ГДЕ
			|	ЧекККМВозвратЗапасы.Ссылка.Проведен
			|	И ЧекККМВозвратЗапасы.Заказ = &ЧекККМ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПриходнаяНакладнаяЗапасы.Ссылка
			|ИЗ
			|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
			|ГДЕ
			|	ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
			|	И ПриходнаяНакладнаяЗапасы.Заказ = &ЧекККМ
			|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Результат = Запрос.Выполнить();
	
	Возврат ПоместитьВоВременноеХранилище(
		Результат.Выгрузить(),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьДокументыОснованияВХранилище()

// Процедура - обработчик события Нажатие элемента ДекорацияПриходнаяНакладная формы.
//
&НаКлиенте
Процедура ДекорацияПриходнаяНакладнаяНажатие(Элемент)
	
	Если ЧекНеПредъявлен Тогда
		Если Не ПриходнаяНакладнаяНаВозврат.Пустая() Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыПриходнаяНакладнаяВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("Ключ", ПриходнаяНакладнаяНаВозврат));
		КонецЕсли;
	Иначе
		ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
		Если ТекЧекККМ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЧекККМ, "ПриходнаяНакладная");
		ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
			,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ДекорацияРКО формы.
//
&НаКлиенте
Процедура ДекорацияРКОНажатие(Элемент)
	
	Если ЧекНеПредъявлен Тогда
		Если Не РКО.Пустая() Тогда
			ОткрытьФорму("Документ.РасходИзКассы.ФормаОбъекта", Новый Структура("Ключ", РКО));
		КонецЕсли;
	Иначе
		ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
		Если ТекЧекККМ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЧекККМ, "РасходИзКассы");
		ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
			,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ДекорацияЧекККМНаВозврат формы.
//
&НаКлиенте
Процедура ДекорацияЧекККМНаВозвратНажатие(Элемент)
		
	ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
	Если ТекЧекККМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЧекККМ, "ЧекККМВозврат");
	ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
	ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
		,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЧекККМНажатие(Элемент)
	
	ТекЗаказ = Элементы.СписокЗаказов.ТекущаяСтрока;
	Если ТекЗаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЗаказ, "ЧекККМ");
	ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
	ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
		,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ПереключательЖурналБыстрыеТовары формы.
//
&НаКлиенте
Процедура ПереключательЖурналБыстрыеТоварыПриИзменении(Элемент)
	
	Если ПереключательЖурналБыстрыеТовары = 1 Тогда // Журнал
		Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.Журнал;
	ИначеЕсли ПереключательЖурналБыстрыеТовары = 2 Тогда // Быстрые товары
		Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.БыстрыеТовары;
	Иначе // Основные реквизиты
		Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.ОсновныеРеквизиты;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы элемента ГруппаПродажаИВозврат формы.
//
&НаКлиенте
Процедура ГруппаПродажаИВозвратПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЖурналИБыстрыеТоварыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.Журнал Тогда // Журнал
		ПереключательЖурналБыстрыеТовары = 1;
	ИначеЕсли Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.БыстрыеТовары Тогда // Быстрые товары
		ПереключательЖурналБыстрыеТовары = 2;
	Иначе // Основные реквизиты
		ПереключательЖурналБыстрыеТовары = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		КонтрагентАктивнойСтроки = ?(Элемент.ТекущиеДанные = Неопределено, Неопределено, Элемент.ТекущиеДанные.Контрагент);
		//Если КонтрагентАктивнойСтроки <> ТекущийКонтрагент Тогда
		
			//ТекущийКонтрагент = КонтрагентАктивнойСтроки;
			ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаЗаказов", 0.2, Истина);
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СостояниеЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СтатусОплаты", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтгрузкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если ВыбранноеЗначение = "Отгружен полностью" Тогда
		СтатусОтгрузки = 0;
	ИначеЕсли ВыбранноеЗначение = "Отгружен частично" Тогда
		СтатусОтгрузки = 1;
	ИначеЕсли ВыбранноеЗначение = "Без отгрузки" Тогда
		СтатусОтгрузки = 2;
	Иначе
		возврат;
	КонецЕсли;	
	
	УстановитьМеткуИОтборСписка("СтатусОтгрузки", Элемент.Родитель.Имя, СтатусОтгрузки, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СтруктурнаяЕдиницаРезерв", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал формы.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля КассаККМ.
//
&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	Если КассаККМ.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Касса ККМ не может быть пустой";
		Сообщение.Поле = "КассаККМ";
		Сообщение.Сообщить();
		
		КассаККМ = ПредыдущаяКассаККМ;
		Возврат;
	КонецЕсли;
	
	Если КассаККМ = ПредыдущаяКассаККМ Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяКассаККМ = КассаККМ;
	Объект.КассаККМ = КассаККМ;
	
	ПараметрыКассы = Новый Структура("ВалютаДенежныхСредств");
	КассаККМПриИзмененииНаСервере(ПараметрыКассы);
	
	Если Объект.Запасы.Количество() > 0 Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
		УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ПараметрыКассы.ВалютаДенежныхСредств, "Запасы");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
		
		ЗаполнитьСуммыСкидок();
		
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // КассаККМПриИзменении()

// Процедура - обработчик события ПриИзменении поля КассаККМ на сервере.
//
&НаСервере
Процедура КассаККМПриИзмененииНаСервере(ПараметрыКассы)
	
	ПараметрыКассы.Вставить("ВалютаДенежныхСредств", ПредыдущаяКассаККМ.ВалютаДенежныхСредств);
	
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ);
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены);
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	Элементы.СнятьРезервирование.Видимость = НЕ КонтрольНаСкладеОтключен;
	
	ОбновитьВидимостьНадписиИстеклоБолее24Часов(СтруктураСостояниеКассовойСмены);
	
	ОстатокВКассе = СтруктураСостояниеКассовойСмены.НаличностьВКассе;
	ОстатокВКассеСтрока = "" + ОстатокВКассе;
	
	Объект.КассаККМ = КассаККМ;
	Объект.СтруктурнаяЕдиница = КассаККМ.СтруктурнаяЕдиница;
	Объект.ВидЦен = КассаККМ.СтруктурнаяЕдиница.РозничныйВидЦен;
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = КассаККМ.ВалютаДенежныхСредств;
	КонецЕсли;
	Объект.Организация = Объект.КассаККМ.Владелец;
	Объект.Подразделение = Объект.КассаККМ.Подразделение;
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойОтветственный");
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);

	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.НациональнаяВалюта.Получить()));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	УстановитьДоступностьПечатиЧека();
	
	Если Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		УстановитьРежимТолькоПросмотр();
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	ПродажаСоСклада = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада; 
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада;
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	Список.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	Список.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	Список.Параметры.УстановитьЗначениеПараметра("Статус", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("Статус", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("Статус", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	СформироватьЗаголовок(СтруктураСостояниеКассовойСмены);
	
	УстановитьПериодНаСервере(ВидПериодаЧековККМПеречисление, "СписокЧековККМ", 
							  Новый СтандартныйПериод(Элементы.СписокЧековККМ.Период.ДатаНачала, Элементы.СписокЧековККМ.Период.ДатаОкончания));
	УстановитьПериодНаСервере(ВидПериодаЧековККМНаВозвратПеречисление, "СписокЧековККМНаВозврат", 
							  Новый СтандартныйПериод(Элементы.СписокЧековККМНаВозврат.Период.ДатаНачала, Элементы.СписокЧековККМНаВозврат.Период.ДатаОкончания));
	УстановитьПериодНаСервере(ВидПериодаЖурналаПеречисление, "Список", 
							  Новый СтандартныйПериод(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания));
	
	// Пересчёт ТЧ Запасы
	СброситьФлагСкидкиРассчитаныСервер("ИзменениеКассыККМ");
	
КонецПроцедуры // КассаККМПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага НеПоказыватьПриОткрытииФормуВыбораКассы.
//
&НаКлиенте
Процедура НеПоказыватьПриОткрытииФормуВыбораКассыПриИзменении(Элемент)
	
	// РМК
	РабочееМестоКассираВызовСервера.ОбновитьНастройкиРМК(НастройкаРМК, НеПоказыватьПриОткрытииФормуВыбораКассы, СверятьИтогиНаЭТПриЗакрытииСмены);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

// Процедура - обработчик события ПриИзменении колонки Номенклатура ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("Содержание", "");
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
	// Конец ДисконтныеКарты
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	//Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
	ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы формы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриОкончанииРедактирования строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ЗапасыПриОкончанииРедактирования()

// Процедура - обработчик события ПередУдалением строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	УправлениеНебольшойФирмойКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанные);
	УправлениеНебольшойФирмойКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СкидкиНаценки, ТекущиеДанные);
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти.НоменклатураХарактеристикаИПартия = СокрЛП(""+СтрокаТабличнойЧасти.Номенклатура)+?(СтрокаТабличнойЧасти.Характеристика.Пустая(), "", ". "+СтрокаТабличнойЧасти.Характеристика)+
		?(СтрокаТабличнойЧасти.Партия.Пустая(), "", ". "+СтрокаТабличнойЧасти.Партия);
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении колонки Партия ТЧ Запасы.
//
&НаКлиенте
Процедура ДокументЧекККМЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		СтрокаТабличнойЧасти.НоменклатураХарактеристикаИПартия = "" + СтрокаТабличнойЧасти.Номенклатура + ?(СтрокаТабличнойЧасти.Характеристика.Пустая(), "", ". "+СтрокаТабличнойЧасти.Характеристика)+
			?(СтрокаТабличнойЧасти.Партия.Пустая(), "", ". "+СтрокаТабличнойЧасти.Партия);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(, Ложь);
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	УстановитьОписаниеДляСтрокиТЧЗапасыНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьПроцентСкидки();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма;
	
	// АвтоматическиеСкидки.
	ТребуетсяПересчетАвтоматическихСкидок = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
		
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	ПоказатьСкрытьСдачуНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийДинамическихСписоков

// Процедура - обработчик события ПриАктивизацииСтроки элемента СписокЧековККМ.
//
&НаКлиенте
Процедура СписокЧековККМПриАктивизацииСтроки(Элемент)
	
	// Лучше период немного побольше сделать, иначе пользователь не будет успевать ввести номер в поле поиска.
	ПодключитьОбработчикОжидания("СписокЧековККМПриАктивизацииСтрокиОбработкаОжидания", 0.3, Истина);
	
КонецПроцедуры

// Процедура обновляет информацию о составе, гиперссылках и настраивает кнопки подвала на закладке Возврат.
//
&НаКлиенте
Процедура СписокЧековККМПриАктивизацииСтрокиОбработкаОжидания()
	
	ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
	Если ТекЧекККМ <> Неопределено Тогда
		ЗаполнитьСоставЧекаИСсылкиНаДокументыНаСервере(ТекЧекККМ);
	Иначе
		СоставЧека = "";
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("СписокЧековККМПриАктивизацииСтрокиОбработкаОжидания");
	
КонецПроцедуры

// Процедура заполняет информацию о составе ТЧ текущего чека ККМ в элементе СписокЧековККМ.
//
&НаСервере
Процедура ЗаполнитьСоставЧекаИСсылкиНаДокументыНаСервере(ЧекККМ)
	
	// Заполним состав чека.
	ЭтоПерваяСтрока = Истина;
	Для Каждого ТекСтрока Из ЧекККМ.Запасы Цикл
		Если ЭтоПерваяСтрока Тогда
			ЭтоПерваяСтрока = Ложь;
			СоставЧека = ""+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		Иначе
			СоставЧека = СоставЧека+Символы.ПС+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним ссылки на документы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходнаяНакладная.Ссылка,
		|	ПриходнаяНакладная.Номер,
		|	ПриходнаяНакладная.Дата
		|ПОМЕСТИТЬ ПриходнаяНакладная
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.Проведен
		|	И ПриходнаяНакладная.ЧекККМ = &ЧекККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка,
		|	ПриходнаяНакладная.Номер,
		|	ПриходнаяНакладная.Дата
		|ИЗ
		|	ПриходнаяНакладная КАК ПриходнаяНакладная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасходИзКассы.Ссылка,
		|	РасходИзКассы.Дата,
		|	РасходИзКассы.Номер
		|ИЗ
		|	Документ.РасходИзКассы КАК РасходИзКассы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходнаяНакладная КАК ПриходнаяНакладная
		|		ПО РасходИзКассы.ДокументОснование = ПриходнаяНакладная.Ссылка
		|ГДЕ
		|	РасходИзКассы.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМВозврат.Ссылка,
		|	ЧекККМВозврат.Номер,
		|	ЧекККМВозврат.Дата
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	ЧекККМВозврат.Проведен
		|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим видимость кнопок и гиперссылок.
	Если ЧекККМ.КассоваяСмена.КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		// Чек ККМ на возврат.
		Выборка = МРезультатов[3].Выбрать();
		Если Выборка.Следующий() Тогда
			ЧекККМНаВозврат = Выборка.Ссылка;
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = "Чек ККМ на возврат №" + НомерДокумента + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
			Элементы.СоздатьЧекККМНаВозврат.ЦветТекста = WebЦвета.Серый;
		Иначе
			ЧекККМНаВозврат = Документы.ЧекККМВозврат.ПустаяСсылка();
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = "";
			Элементы.СоздатьЧекККМНаВозврат.ЦветТекста = Новый Цвет;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = Элементы.ДекорацияЧекККМНаВозврат.Заголовок + "; "+" №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
		КонецЦикла;
		
		Элементы.СоздатьЧекККМНаВозврат.Видимость = Истина;
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость = Ложь;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость = Ложь;
		
		Элементы.ДекорацияЧекККМНаВозврат.Видимость = Истина;
		Элементы.ДекорацияПриходнаяНакладная.Видимость = Ложь;
		Элементы.ДекорацияРКО.Видимость = Ложь;
		
		Элементы.ДекорацияЗаголовокЧекиККМ.Заголовок = "Выберите основание для возврата";
	Иначе
		
		Выборка = МРезультатов[3].Выбрать();
		Если Выборка.Следующий() Тогда // Чек ККМ на возврат.
			ЧекККМНаВозврат = Выборка.Ссылка;
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = "Чек ККМ на возврат №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
			
			Пока Выборка.Следующий() Цикл
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
				Элементы.ДекорацияЧекККМНаВозврат.Заголовок = Элементы.ДекорацияЧекККМНаВозврат.Заголовок + "; "+" №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
			КонецЦикла;
			
			Элементы.СоздатьЧекККМНаВозврат.ЦветТекста = WebЦвета.Серый;
			Элементы.СоздатьЧекККМНаВозврат.Видимость = Истина;
			Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость = Ложь;
			Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость = Ложь;
			
			Элементы.ДекорацияЧекККМНаВозврат.Видимость = Истина;
			Элементы.ДекорацияПриходнаяНакладная.Видимость = Ложь;
			Элементы.ДекорацияРКО.Видимость = Ложь;
		Иначе
			// Чек ККМ на возврат.
			ЧекККМНаВозврат = Документы.ЧекККМВозврат.ПустаяСсылка();
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = "";
			
			// Приходная накладная на возврат.
			Выборка = МРезультатов[1].Выбрать();
			Если Выборка.Следующий() Тогда
				ПриходнаяНакладнаяНаВозврат = Выборка.Ссылка;
				
				Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста = WebЦвета.Серый;
				Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = WebЦвета.Серый;
				
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
				Элементы.ДекорацияПриходнаяНакладная.Заголовок = "Прих. нак-я №"+СокрЛП(НомерДокумента)+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
				
				Пока Выборка.Следующий() Цикл
					НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
					Элементы.ДекорацияПриходнаяНакладная.Заголовок = Элементы.ДекорацияПриходнаяНакладная.Заголовок + "; "+" №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
				КонецЦикла;
			Иначе
				ПриходнаяНакладнаяНаВозврат = Документы.ПриходнаяНакладная.ПустаяСсылка();
				
				Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста = Новый Цвет;
				Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = WebЦвета.Серый;
				
				Элементы.ДекорацияПриходнаяНакладная.Заголовок = "";
			КонецЕсли;
			
			// РКО.
			Выборка = МРезультатов[2].Выбрать();
			Если Выборка.Следующий() Тогда
				РКО = Выборка.Ссылка;
				
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
				Элементы.ДекорацияРКО.Заголовок = "РКО №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
				Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = WebЦвета.Серый;
				
				Пока Выборка.Следующий() Цикл
					НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
					Элементы.ДекорацияРКО.Заголовок = Элементы.ДекорацияРКО.Заголовок + "; "+" №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
				КонецЦикла;
			Иначе
				РКО = Документы.РасходныйОрдер.ПустаяСсылка();
				
				Элементы.ДекорацияРКО.Заголовок = "";
				Если НЕ ПриходнаяНакладнаяНаВозврат.Пустая() Тогда
					Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = Новый Цвет;
				Иначе
					Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = WebЦвета.Серый;
				КонецЕсли;
			КонецЕсли;
			
			Элементы.СоздатьЧекККМНаВозврат.Видимость = Ложь;
			Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость = Истина;
			Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость = Истина И ЕстьПравоОформлятьРКО;
			
			Элементы.ДекорацияЧекККМНаВозврат.Видимость = Ложь;
			Элементы.ДекорацияПриходнаяНакладная.Видимость = Истина;
			Элементы.ДекорацияРКО.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет информацию о составе ТЧ текущего заказа покупателя в элементе СписокЗаказов.
//
&НаСервере
Процедура ЗаполнитьСоставЗаказаИСсылкиНаДокументыНаСервере(Заказ)
	
	// Заполним состав чека.
	ЭтоПерваяСтрока = Истина;
	Для Каждого ТекСтрока Из Заказ.Запасы Цикл
		Если ЭтоПерваяСтрока Тогда
			ЭтоПерваяСтрока = Ложь;
			СоставЗаказа = ""+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		Иначе
			СоставЗаказа = СоставЗаказа+Символы.ПС+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним ссылки на документы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЧекККМЗапасы.Ссылка,
		|	ЧекККМЗапасы.Ссылка.Номер,
		|	ЧекККМЗапасы.Ссылка.Дата,
		|	1 КАК Порядок
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|ГДЕ
		|	ЧекККМЗапасы.Заказ = &Заказ
		|	И ЧекККМЗапасы.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Номер,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата,
		|	2
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Заказ = &Заказ
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = &ВидОперацииВозратОтПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекККМВозвратЗапасы.Ссылка,
		|	ЧекККМВозвратЗапасы.Ссылка.Номер,
		|	ЧекККМВозвратЗапасы.Ссылка.Дата,
		|	3
		|ИЗ
		|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
		|ГДЕ
		|	ЧекККМВозвратЗапасы.Заказ = &Заказ
		|	И ЧекККМВозвратЗапасы.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ВидОперацииВозратОтПокупателя", Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	
	Результат = Запрос.Выполнить();
	
	// Определим видимость кнопок и гиперссылок.
	Выборка = Результат.Выбрать();
	Если НЕ Результат.Пустой() Тогда
		
		Элементы.ДекорацияЧекККМ.Заголовок = "";
		
		Пока Выборка.Следующий() Цикл
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Если Выборка.Порядок = 1 Тогда
				ЧекККМ = Выборка.Ссылка;
				
				ПредставлениеДокумента = "Чек ККМ №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
			ИначеЕсли Выборка.Порядок = 2 Тогда
				ПредставлениеДокумента = "Прих. накл. (возврат) №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
			ИначеЕсли Выборка.Порядок = 3 Тогда
				ПредставлениеДокумента = "Чек ККМ на возврат №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			Если Элементы.ДекорацияЧекККМ.Заголовок <> "" Тогда
				Элементы.ДекорацияЧекККМ.Заголовок = Элементы.ДекорацияЧекККМ.Заголовок + "; ";
			КонецЕсли;
			Элементы.ДекорацияЧекККМ.Заголовок = Элементы.ДекорацияЧекККМ.Заголовок + ПредставлениеДокумента;
			
		КонецЦикла;
		
		Элементы.СоздатьЧекККМНаОснованииЗазака.ЦветТекста = WebЦвета.Серый;
		
	Иначе
		ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
		Элементы.ДекорацияЧекККМ.Заголовок = "";
		Элементы.СоздатьЧекККМНаОснованииЗазака.ЦветТекста = Новый Цвет;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Элементы.ДекорацияЧекККМ.Заголовок = Элементы.ДекорацияЧекККМ.Заголовок + "; "+" №"+НомерДокумента+" от "+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
	КонецЦикла;
	
	Элементы.СоздатьЧекККМНаОснованииЗазака.Видимость = Истина;
	
	Элементы.ДекорацияЧекККМ.Видимость = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ВыборЗначения элемента Список.
//
&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыЧекККМ");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыЧекККМВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыОтчетОРозничныхПродажах");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКомандныхПанелейФормы

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтаФорма, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ПолучитьВес формы. Выполняется после получения веса от электронных весов.
//
&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ЗапасыПриОкончанииРедактирования(Элементы.Запасы, Ложь, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ЦеныИВалюта формы.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Процедура - обработчик команды УвиличитьКоличество формы.
//
&НаКлиенте
Процедура УвиличитьКоличество(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие недоступно для маркируемой продукции!";
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Количество = ТекущиеДанные.Количество + 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		ПересчитатьДокументНаКлиенте();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка!";
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды УменьшитьКоличество формы.
//
&НаКлиенте
Процедура УменьшитьКоличество(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие недоступно для маркируемой продукции!";
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Количество = ТекущиеДанные.Количество - 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		ПересчитатьДокументНаКлиенте();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка!";
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ИзменитьКоличествоСПомощьюКалькулятора формы.
//
&НаКлиенте
Процедура ИзменитьКоличествоСПомощьюКалькулятора(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие недоступно для маркируемой продукции!";
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьКоличествоСПомощьюКалькулятораЗавершение", ЭтаФорма);
		
		СтруктураПараметров = Новый Структура("Количество, НоменклатураХарактеристикаИПартия, Цена, Сумма, ПроцентСкидкиНаценки, ПроцентАвтоматическойСкидки", 
			ТекущиеДанные.Количество, 
			ТекущиеДанные.НоменклатураХарактеристикаИПартия,
			ТекущиеДанные.Цена,
			ТекущиеДанные.Сумма,
			ТекущиеДанные.ПроцентСкидкиНаценки,
			ТекущиеДанные.ПроцентАвтоматическойСкидки);
			
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаВводаКоличества", СтруктураПараметров,,,,,Оповещение);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка!";
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ИзменитьКоличествоСПомощьюКалькулятораЗавершение после закрытия формы изменения количества.
//
&НаКлиенте
Процедура ИзменитьКоличествоСПомощьюКалькулятораЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Количество = Результат.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ОчиститьТЧЗапасы формы.
//
&НаКлиенте
Процедура ОчиститьТЧЗапасы(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТЧЗапасыЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Процедура - обработчик команды ОчиститьТЧЗапасыЗавершение после подтверждения удаления всех строк ТЧ запасы в форме вопроса.
//
&НаКлиенте
Процедура ОчиститьТЧЗапасыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Запасы.Очистить();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды ОткрытьКарточкуНоменклатуры формы.
//
&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		МОграничениеТипа = Новый Массив;
		МОграничениеТипа.Добавить(ТипНоменклатурыЗапас);
		МОграничениеТипа.Добавить(ТипНоменклатурыУслуга);
		
		ДопПараметры = Новый Структура("ОграничениеТипа", МОграничениеТипа);
		ЗначенияЗаполнения = Новый Структура("ТипНоменклатуры", МОграничениеТипа);
		
		ПараметрыНовойПозицииНоменклатуры = Новый Структура("Ключ, ДополнительныеПараметры, ЗначенияЗаполнения", ТекущиеДанные.Номенклатура, ДопПараметры, ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыНовойПозицииНоменклатуры, ЭтотОбъект);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка!";
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СписокСоздатьЧекККМНаВозврат формы.
//
&НаКлиенте
Процедура СписокСоздатьЧекККМНаВозврат(Команда)
	
	ТекстСообщения = "";
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыЧекККМВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", Новый Структура("Основание", ТекущиеДанные.Ссылка));
		Иначе
			ТекстСообщения = "Чек ККК на возврат нельзя вводить на основании документов вида """+ТипЗнч(ТекущиеДанные.Ссылка)+""".";
		КонецЕсли;
	Иначе
		ТекстСообщения = "Не выбран чек ККМ!";
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СписокСоздатьПриходнуюНакладнуюНаВозврат формы.
//
&НаКлиенте
Процедура СписокСоздатьПриходнуюНакладнуюНаВозврат(Команда)
	
	ТекстСообщения = "";
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыПриходнаяНакладнаяВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("Основание, РМК", ТекущиеДанные.Ссылка, Истина), ЭтотОбъект, УникальныйИдентификатор);
		Иначе
			ТекстСообщения = "Чек ККК на возврат нельзя вводить на основании документов вида """+ТипЗнч(ТекущиеДанные.Ссылка)+""".";
		КонецЕсли;
	Иначе
		ТекстСообщения = "Не выбран чек ККМ!";
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическиеСкидки

// Процедура - обработчик команды РассчитатьСкидкиНаценки формы.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Рассчитаны автоматические скидки (наценки)!";
	Сообщение.КлючДанных = Объект.Ссылка;
	Сообщение.Сообщить();
	
	
КонецПроцедуры

// Процедура рассчитывает скидки по документу.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

// Процедура рассчитывает скидки по документу.
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	ЕстьРучныеСкидки = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ТекущаяСтрока.Цена * ТекущаяСтрока.Количество * ТекущаяСтрока.ПроцентСкидкиНаценки / 100, 0);
		ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если ТекСуммаСкидки >= ТекущаяСтрока.Сумма И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Истина;
		Иначе
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
		КонецЕсли;
		
		УстановитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке.
//
&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершение немодального открытия окна "ПоказатьВопрос()". Процедура открывает общую форму для анализа информации о скидках по текущей строке.
//
&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке после расчета автоматических скидок (если это было необходимо).
//
&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события Выбор табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонокаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонокаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг СкидкиРассчитаны, если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонокаТЧ);
	
КонецФункции

// Процедура выполняет действия необходимые при создании формы на сервере.
//
&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает форму отчёта "Применённые скидки" для текущего документа в элементе "Список".
//
&НаКлиенте
Процедура ПримененныеСкидки(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = "Не выбран документ.
		|Переход к ""Примененные скидки"" возможен только после выбора документа в списке.";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
		Возврат;
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ПараметрыФормы = Новый Структура("ДокументСсылка", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ТекстСообщения = "Выберите чек ККМ или чек ККМ на возврат";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

// Процедура - обработчик команды СчитатьДисконтнуюКарту формы.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКарту(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", , ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершающая часть процедуры - обработчика команды СчитатьДисконтнуюКарту формы.
// Вызывается после закрытия формы считывания дисконтной карты.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, начало.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Считана дисконтная карта'"),
		ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
		БиблиотекаКартинок.Информация32);
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
		
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, окончание.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
		Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, завершение.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Скидка = УправлениеНебольшойФирмойСервер.ПолучитьПроцентСкдикиПоВидуСкидокНаценок(Объект.ВидСкидкиНаценки) + Объект.ПроцентСкидкиПоДисконтнойКарте;
	
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
			        
		КонецЦикла;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");

КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Процедура осуществляет вывод информации на дисплей покупателя.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	ДПТекст = ?(
		Элементы.Запасы.ТекущиеДанные = Неопределено,
		"",
		СокрЛП(Элементы.Запасы.ТекущиеДанные.Номенклатура)
	  + Символы.ПС
	  + НСтр("ru='Итого: '")
	  + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧРГ=' '; ЧН=0")
	);
	
	ИдентификаторУстройства = Неопределено; // Если ИдентификаторУстройства = Неопределено, будут очищены все подключенные дисплеи покупателя.
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыводТекстаНаДисплейПокупателяЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ДПТекст);
	
КонецПроцедуры // ВывестиИнформациюНаДисплейПокупателя()

&НаКлиенте
Процедура ВыводТекстаНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр(
				"ru = 'При использовании дисплея покупателя произошла ошибка.
				|Дополнительное описание:
				|%ДополнительноеОписание%'"
			);
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ДополнительноеОписание%",
				РезультатВыполнения.ОписаниеОшибки
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов, СтруктураДанные.СтруктурнаяЕдиница);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
			Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
				СтруктураДанныеНоменклатуры.Вставить("Содержание", "");
				СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
			КонецЕсли;
			// ДисконтныеКарты
			СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
			СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
			// Конец ДисконтныеКарты
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЧекККМ.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	// Удалим пустые значения.
	ИндексЭлемента = МассивШтрихкодов.Количество() - 1;
	Пока ИндексЭлемента >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(МассивШтрихкодов[ИндексЭлемента].Штрихкод) Тогда
			МассивШтрихкодов.Удалить(ИндексЭлемента);
		КонецЕсли;
			
		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));			
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0
				ИЛИ (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ДобавленныеСтроки	= НедобавленныеШтрихкоды.ДобавленныеСтроки;
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМарки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
		// Для тех, у кого есть профиль "Рабочее место кассира" мы не разрешаем регистрацию штрихкодов
		Если ПараметрыРаботыКлиента.Свойство("ЕстьПрофильРМК") И ПараметрыРаботыКлиента.ЕстьПрофильРМК Тогда
			
			ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды. Истина);
			Возврат;
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды, ПоказыватьСообщением = Истина)
	
	СтрокаПредупреждения = "";
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		
		СтрокаПредупреждения = СтрокаПредупреждения + СтрокаСообщения + Символы.ПС;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаПредупреждения) Тогда
		Если ПоказыватьСообщением Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения);
		Иначе
			ПоказатьПредупреждение(,СтрокаПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено И ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область УстановкаПериодовДинамическихСписков

// Процедура заполняет списки выбора в элементах, которые управляют периодом в списках документов.
//
&НаСервере
Процедура ЗаполнитьСпискиВидыПериодов()
	
	Элементы.ВидПериодаЖурнала.СписокВыбора.Очистить();
	Элементы.ВидПериодаЖурнала.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену);
	Элементы.ВидПериодаЖурнала.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену);
	Элементы.ВидПериодаЖурнала.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод);
	
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Очистить();
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену);
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену);
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод);
	
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Очистить();
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену);
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену);
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод);
	
КонецПроцедуры

// Процедура - обработчик собыития ОбработкаВыбора элемента ВидПериодаЖурнала формы.
//
&НаКлиенте
Процедура ВидПериодаЖурналаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьПериодНаКлиенте(ВыбранноеЗначение, "Список");
	СтандартнаяОбработка = Ложь;
	Элементы.ВидПериодаЖурнала.ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - обработчик собыития ОбработкаВыбора элемента ВидПериодаЧековККМ формы.
//
&НаКлиенте
Процедура ВидПериодаЧековККМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьПериодНаКлиенте(ВыбранноеЗначение, "СписокЧековККМ");
	СтандартнаяОбработка = Ложь;
	Элементы.ВидПериодаЧековККМ.ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - обработчик собыития ОбработкаВыбора элемента ВидПериодаЧековККМНаВозврат формы.
//
&НаКлиенте
Процедура ВидПериодаЧековККМНаВозвратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьПериодНаКлиенте(ВыбранноеЗначение, "СписокЧековККМНаВозврат");
	СтандартнаяОбработка = Ложь;
	Элементы.ВидПериодаЧековККМНаВозврат.ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - обработчик собыития ОбработкаВыбора элемента ВидПериодаЗаказов формы.
//
&НаКлиенте
Процедура ВидПериодаЗаказовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//УстановитьПериодНаКлиенте(ЗаПроизвольныйПериод, "СписокЗаказов");
	СтандартнаяОбработка = Ложь;
	//Элементы.ВидПериодаЧековККМ.ОбновитьТекстРедактирования();
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "СписокЗаказов", "Дата");
	
КонецПроцедуры

// Процедура настривает период динамического списка.
//
&НаКлиенте
Процедура УстановитьПериодНаКлиенте(ВидПериодаРМК, ИмяСписка, ПараметрСтандартныйПериод = Неопределено)
	
	Если ВидПериодаРМК = ЭтотОбъект.ЗаПроизвольныйПериод Тогда
		
		Если ИмяСписка = "Список" Тогда
			ВидПериодаЖурналаПеречисление = ВидПериодаРМК;
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозвратПеречисление = ВидПериодаРМК;
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМПеречисление = ВидПериодаРМК;
		ИначеЕсли ИмяСписка = "СписокЗаказов" Тогда
			ВидПериодаЗаказовПеречисление = ВидПериодаЗаказов;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект, Новый Структура("ИмяСписка", ИмяСписка));
		Диалог = Новый ДиалогРедактированияСтандартногоПериода();
		Диалог.Период = ЭтотОбъект.Элементы[ИмяСписка].Период;
		Диалог.Показать(ОписаниеОповещения);
		
	Иначе
		
		УстановитьПериодНаСервере(ВидПериодаРМК, ИмяСписка, ПараметрСтандартныйПериод);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура настривает период динамического списка (если требуется интерактивный выбор периода).
//
&НаКлиенте
Процедура УстановитьПериодЗавершение(Результат, Параметры) Экспорт
	
	УстановитьПериодЗавершениеНаСервере(Результат, Параметры);
	
КонецПроцедуры

// Процедура настривает период динамического списка на сервере (если требуется интерактивный выбор периода).
//
&НаСервере
Процедура УстановитьПериодЗавершениеНаСервере(Результат, Параметры)
	
	Если Результат <> Неопределено Тогда
		
		Если Параметры.ИмяСписка <> "СписокЗаказов" Тогда
			ЭтотОбъект[Параметры.ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
			ЭтотОбъект[Параметры.ИмяСписка].Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
			ЭтотОбъект[Параметры.ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		КонецЕсли;
		
		Элементы[Параметры.ИмяСписка].Период.Вариант = Результат.Вариант;
		Элементы[Параметры.ИмяСписка].Период.ДатаНачала = Результат.ДатаНачала;
		Элементы[Параметры.ИмяСписка].Период.ДатаОкончания = Результат.ДатаОкончания;
		Элементы[Параметры.ИмяСписка].Обновить();
		
		Если Параметры.ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Истина;
			ВидПериодаЖурнала = ПолучитьПредставлениеПериода(Результат, " - ");
		ИначеЕсли Параметры.ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = ПолучитьПредставлениеПериода(Результат, " - ");
		ИначеЕсли Параметры.ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = ПолучитьПредставлениеПериода(Результат, " - ");
		ИначеЕсли Параметры.ИмяСписка = "СписокЗаказов" Тогда
			ВидПериодаЗаказов = ПолучитьПредставлениеПериода(Результат, " - ");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура настривает период динамического списка на сервере.
//
&НаСервере
Процедура УстановитьПериодНаСервере(ВидПериодаРМК, ИмяСписка, ПараметрСтандартныйПериод = Неопределено)
	
	Если ИмяСписка = "Список" Тогда
		ВидПериодаЖурналаПеречисление = ВидПериодаРМК;
	ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
		ВидПериодаЧековККМНаВозвратПеречисление = ВидПериодаРМК;
	ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
		ВидПериодаЧековККМПеречисление = ВидПериодаРМК;
	КонецЕсли;
	
	Если ВидПериодаРМК = ЗаТекущуюСмену Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		Элементы[ИмяСписка].Период = Новый СтандартныйПериод;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Ложь;
			ВидПериодаЖурнала = "За текущую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За текущую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За текущую смену";
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаПрошлуюСмену Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Истина);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("КассоваяСмена", ПолучитьПоследнийОтчетОРозничныхПродажахЗаЗакрытуюКассовуюСмену());
		Элементы[ИмяСписка].Период = Новый СтандартныйПериод;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Ложь;
			ВидПериодаЖурнала = "За прошлую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За прошлую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За прошлую смену";
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаВчерашнийДень Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		Элементы[ИмяСписка].Обновить();
		Элементы[ИмяСписка].Период.ДатаНачала = НачалоДня(НачалоДня(ТекущаяДата())-1);
		Элементы[ИмяСписка].Период.ДатаОкончания = НачалоДня(ТекущаяДата())-1;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Ложь;
			ВидПериодаЖурнала = "За вчерашний день";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За вчерашний день";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За вчерашний день";
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаПроизвольныйПериод Тогда
		
		Элементы[ИмяСписка].Период.ДатаНачала = ПараметрСтандартныйПериод.ДатаНачала;
		Элементы[ИмяСписка].Период.ДатаОкончания = ПараметрСтандартныйПериод.ДатаОкончания;
		Если ИмяСписка <> "СписокЗаказов" Тогда
			ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
			ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		КонецЕсли;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Истина;
			ВидПериодаЖурнала = ПолучитьПредставлениеПериода(Элементы.Список.Период, " - ");
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = ПолучитьПредставлениеПериода(Элементы.СписокЧековККМНаВозврат.Период, " - ");
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = ПолучитьПредставлениеПериода(Элементы.СписокЧековККМ.Период, " - ");
		ИначеЕсли ИмяСписка = "СписокЗаказов" Тогда
			ВидПериодаЗаказов = ПолучитьПредставлениеПериода(Элементы.СписокЗаказов.Период, " - ");
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаВесьПериод Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		Элементы[ИмяСписка].Период = Новый СтандартныйПериод;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Истина;
			ВидПериодаЖурнала = "За всё время";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За всё время";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За всё время";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает представление стандартного периода.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(СтандартныйПериод, Разделитель = " по ")
	
	Возврат РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(СтандартныйПериод);
	
КонецФункции

#КонецОбласти

#Область БыстрыеТовары

// Процедура создает кнопки на панели быстрых товаров.
//
&НаСервере
Процедура ЗаполнитьБыстрыеТовары(ПриОткрытии = Ложь)

	КоличествоСтолбцов = 3;
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось определить рабочее место для работы с подключаемым оборудованием!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	НастройкаРМК = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(РабочееМесто);
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить настройки РМК для текущего рабочего места!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БыстрыеТовары.Номенклатура КАК Номенклатура,
		|	БыстрыеТовары.Характеристика КАК Характеристика,
		|	БыстрыеТовары.Ctrl,
		|	БыстрыеТовары.Shift,
		|	БыстрыеТовары.Alt,
		|	БыстрыеТовары.СочетаниеКлавиш,
		|	БыстрыеТовары.Клавиша,
		|	БыстрыеТовары.Заголовок,
		|	БыстрыеТовары.Номенклатура.ИспользоватьХарактеристики КАК ХарактеристикиИспользуются,
		|	БыстрыеТовары.Номенклатура.Наименование КАК Наименование,
		|	БыстрыеТовары.Характеристика.Наименование,
		|	ВЫБОР
		|		КОГДА БыстрыеТовары.ПолеСоритровки = """"
		|			ТОГДА БыстрыеТовары.Номенклатура.Наименование
		|		ИНАЧЕ БыстрыеТовары.ПолеСоритровки
		|	КОНЕЦ КАК ПолеСоритровки
		|ИЗ
		|	Справочник.НастройкиРМК.БыстрыеТовары КАК БыстрыеТовары
		|ГДЕ
		|	БыстрыеТовары.Ссылка = &НастройкаРМК
		|	И НЕ БыстрыеТовары.Отключено
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСоритровки,
		|	Номенклатура,
		|	Характеристика
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НастройкаРМК", НастройкаРМК);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРезультата = МРезультатов[0].Выгрузить();
	
	// Удалим команды.
	Если Не ПриОткрытии Тогда
		МассивУдаляемыхКоманд = Новый Массив;
		Для Каждого Команда Из Команды Цикл
			Если (СтрНайти(Команда.Имя, "БыстрыйТовар_") > 0) 
				ИЛИ (СтрНайти(Команда.Имя, "ГруппаБыстрыхТоваров_") > 0) 
				Тогда
				МассивУдаляемыхКоманд.Добавить(Команда);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Команда Из МассивУдаляемыхКоманд Цикл
			Команды.Удалить(Команда);
		КонецЦикла;
		// Удалим элементы.
		МассивУдаляемыхЭлементов = Новый Массив;
		Для Каждого Элемент Из Элементы Цикл
			Если (СтрНайти(Элемент.Имя, "БыстрыйТовар_") > 0) 
				ИЛИ (СтрНайти(Элемент.Имя, "ГруппаОплатаКартой_") > 0) 
				ИЛИ (СтрНайти(Элемент.Имя, "ГруппаБыстрыхТоваров_")) Тогда
				МассивУдаляемыхЭлементов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Попытка
				Элементы.Удалить(Элемент);
			Исключение КонецПопытки;
		КонецЦикла;
		
		БыстрыеТовары.Очистить();
	КонецЕсли;
	
	ТекСч = 1;
	Для Каждого БыстрыйТовар Из ТаблицаРезультата Цикл
		Если Не ЗначениеЗаполнено(БыстрыйТовар.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = БыстрыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, БыстрыйТовар);
		
		ИмяКнопки = "БыстрыйТовар_" + БыстрыеТовары.Индекс(НоваяСтрока);
			
		НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКнопки);
		НоваяКоманда.Действие = "ВыбранБыстрыйТовар";
		Если ЗначениеЗаполнено(БыстрыйТовар.Заголовок) Тогда
			НоваяКоманда.Заголовок = БыстрыйТовар.Заголовок;
		Иначе
			НоваяКоманда.Заголовок = Строка(БыстрыйТовар.Наименование)+?(ЗначениеЗаполнено(БыстрыйТовар.ХарактеристикаНаименование), ". "+СокрЛП(БыстрыйТовар.ХарактеристикаНаименование), "");
		КонецЕсли;
		НоваяКоманда.Отображение               = ОтображениеКнопки.Текст;
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		Если ЗначениеЗаполнено(БыстрыйТовар.Клавиша) Тогда
			НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша[БыстрыйТовар.Клавиша], БыстрыйТовар.Alt, БыстрыйТовар.Ctrl, БыстрыйТовар.Shift);
		КонецЕсли;
		
		Если ТекСч = 1 ИЛИ (ТекСч-1) % КоличествоСтолбцов = 0 Тогда
			НоваяГруппа = Элементы.Добавить("ГруппаОплатаКартой_"+ТекСч, Тип("ГруппаФормы"), Элементы.ГруппаКнопкиБыстрыхТоваров);
			НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.ОтображатьЗаголовок = Ложь;
			НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			НоваяГруппа.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;

		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), НоваяГруппа);
		НоваяКнопка.ТолькоВоВсехДействиях = Ложь;
		НоваяКнопка.Видимость = Истина;
		НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
		Если ЗначениеЗаполнено(БыстрыйТовар.Заголовок) Тогда
			НоваяКнопка.Заголовок = СокрЛП(БыстрыйТовар.Заголовок);
		Иначе
			НоваяКнопка.Заголовок = СокрЛП(БыстрыйТовар.Наименование)+?(ЗначениеЗаполнено(БыстрыйТовар.ХарактеристикаНаименование), ". "+СокрЛП(БыстрыйТовар.ХарактеристикаНаименование), "");
		КонецЕсли;
		ПредставлениеСочетания = ПредставлениеСочетанияКлавиш(НоваяКоманда.СочетаниеКлавиш);
		Если ЗначениеЗаполнено(ПредставлениеСочетания) Тогда
			НоваяКнопка.Заголовок = Лев(СокрЛП(НоваяКнопка.Заголовок), 20) + " " + ПредставлениеСочетания;
		КонецЕсли;
		НоваяКнопка.Ширина = 9;
		НоваяКнопка.Высота = 3;
		НоваяКнопка.ВысотаЗаголовка = 3;
		НоваяКнопка.СочетаниеКлавиш = НоваяКоманда.СочетаниеКлавиш;
		
		НоваяСтрока.ИмяКоманды = ИмяКнопки;
		
		ТекСч = ТекСч + 1;
	КонецЦикла;
	
	//Если ТекСч > КоличествоСтолбцов Тогда
		Пока (ТекСч-1) % КоличествоСтолбцов <> 0 Цикл
			НоваяДекорация = Элементы.Добавить("ДекорацияНадпись_"+ТекСч, Тип("ДекорацияФормы"), НоваяГруппа);
			НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
			НоваяДекорация.Заголовок = "";
			НоваяДекорация.Ширина = 9;
			НоваяДекорация.Высота = 3;
			
			ТекСч = ТекСч + 1;
		КонецЦикла;
	//КонецЕсли;
	
	// Кнопка настройки быстрых товаров.
	//ТекСч = ТекСч + 1;
	//
	//НоваяГруппа = Элементы.Добавить("ГруппаОплатаКартой_"+ТекСч, Тип("ГруппаФормы"), Элементы.ГруппаКнопкиБыстрыхТоваров);
	//НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//НоваяГруппа.ОтображатьЗаголовок = Ложь;
	//НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	//
	//НоваяКнопка = Элементы.Добавить("НастройкаБыстрыхТоваров", Тип("КнопкаФормы"), НоваяГруппа);
	//НоваяКнопка.Отображение = ОтображениеКнопки.Картинка;
	//НоваяКнопка.ТолькоВоВсехДействиях = Ложь;
	//НоваяКнопка.Видимость = Истина;
	//НоваяКнопка.ИмяКоманды = "НастройкаБыстрыхТоваров";
	//НоваяКнопка.Заголовок = "Настройка";
	//НоваяКнопка.Ширина = 3;
	//НоваяКнопка.Высота = 1;
	//НоваяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.S, Истина, Ложь, Ложь);
	////НоваяКнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	//
	//ТекСч = ТекСч + 1;
	//
	//НоваяДекорация = Элементы.Добавить("ДекорацияНадпись_"+ТекСч, Тип("ДекорацияФормы"), НоваяГруппа);
	//НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
	//НоваяДекорация.Заголовок = "";
	//НоваяДекорация.Ширина = 9;
	//НоваяДекорация.Высота = 3;
	//
	//ТекСч = ТекСч + 1;
	//
	//НоваяДекорация = Элементы.Добавить("ДекорацияНадпись_"+ТекСч, Тип("ДекорацияФормы"), НоваяГруппа);
	//НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
	//НоваяДекорация.Заголовок = "";
	//НоваяДекорация.Ширина = 9;
	//НоваяДекорация.Высота = 3;
	
КонецПроцедуры // ЗаполнитьБыстрыеТовары()

// Процедура - обработчика нажатия кнопки быстрого товара.
&НаКлиенте
Процедура ВыбранБыстрыйТовар(Команда)
	
	НайденныеСтроки = БыстрыеТовары.НайтиСтроки(Новый Структура("ИмяКоманды", ""+Команда.Имя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", НайденныеСтроки[0].Номенклатура, НайденныеСтроки[0].Характеристика);
		ЗапасыНайденныеСтроки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		
		Если ЗапасыНайденныеСтроки.Количество() = 0
			ИЛИ ЗапасыНайденныеСтроки[0].НеобходимостьВводаАкцизнойМарки Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайденныеСтроки[0].Номенклатура;
			НоваяСтрока.Характеристика = НайденныеСтроки[0].Характеристика;
			
			ДокументПересчитанНаКлиенте = Ложь;
			НоменклатураПриИзменении(НоваяСтрока);
		Иначе
			ЗапасыНайденныеСтроки[0].Количество = ЗапасыНайденныеСтроки[0].Количество + 1;
			
			ДокументПересчитанНаКлиенте = Ложь;
			РассчитатьСуммуВСтрокеТабличнойЧасти(ЗапасыНайденныеСтроки[0]);
			
			НоваяСтрока = ЗапасыНайденныеСтроки[0];
		КонецЕсли;
		
		УстановитьОписаниеДляСтрокиТЧЗапасыНаКлиенте(НоваяСтрока);
		
		Элементы.Запасы.Обновить();
		//Элементы.Список.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();

		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СочетанияКлавиш

// Функция возвращает представление клавиши
// Параметры:
//	ЗначениеКлавиша						- Клавиша
//
// Возвращаемое значение
//	Строка - Представление клавиши
//
&НаСервере
Функция ПредставлениеКлавиши(ЗначениеКлавиша) Экспорт
	
	Если Строка(Клавиша._1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "1";
	ИначеЕсли Строка(Клавиша._2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "2";
	ИначеЕсли Строка(Клавиша._3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "3";
	ИначеЕсли Строка(Клавиша._4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "4";
	ИначеЕсли Строка(Клавиша._5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "5";
	ИначеЕсли Строка(Клавиша._6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "6";
	ИначеЕсли Строка(Клавиша._7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "7";
	ИначеЕсли Строка(Клавиша._8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "8";
	ИначеЕсли Строка(Клавиша._9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "9";
	ИначеЕсли Строка(Клавиша.Num0) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 0";
	ИначеЕсли Строка(Клавиша.Num1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 1";
	ИначеЕсли Строка(Клавиша.Num2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 2";
	ИначеЕсли Строка(Клавиша.Num3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 3";
	ИначеЕсли Строка(Клавиша.Num4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 4";
	ИначеЕсли Строка(Клавиша.Num5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 5";
	ИначеЕсли Строка(Клавиша.Num6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 6";
	ИначеЕсли Строка(Клавиша.Num7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 7";
	ИначеЕсли Строка(Клавиша.Num8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 8";
	ИначеЕсли Строка(Клавиша.Num9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 9";
	ИначеЕсли Строка(Клавиша.NumAdd) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num +";
	ИначеЕсли Строка(Клавиша.NumDecimal) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num .";
	ИначеЕсли Строка(Клавиша.NumDivide) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num /";
	ИначеЕсли Строка(Клавиша.NumMultiply) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num *";
	ИначеЕсли Строка(Клавиша.NumSubtract) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num -";
	Иначе
		Возврат Строка(ЗначениеКлавиша);
	КонецЕсли;
	
КонецФункции

// Функция возвращает представление клавиши
// Параметры:
//	СочетаниеКлавиш						- Сочетание клавиш для которого нужно сформировать представление
//	БезСкобок							- Флаг, указывающий, что представление должно быть сформировано без скобок
//
// Возвращаемое значение
//	Строка - Представление сочетания клавиш
//
&НаСервере
Функция ПредставлениеСочетанияКлавиш(СочетаниеКлавиш, БезСкобок = Ложь) Экспорт
	
	Если СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
		Возврат "";
	КонецЕсли;
	
	Наименование = ?(БезСкобок, "", "(");
	Если СочетаниеКлавиш.Ctrl Тогда
		Наименование = Наименование + "Ctrl+"
	КонецЕсли;
	Если СочетаниеКлавиш.Alt Тогда
		Наименование = Наименование + "Alt+"
	КонецЕсли;
	Если СочетаниеКлавиш.Shift Тогда
		Наименование = Наименование + "Shift+"
	КонецЕсли;
	Наименование = Наименование + ПредставлениеКлавиши(СочетаниеКлавиш.Клавиша) + ?(БезСкобок, "", ")");
	
	Возврат Наименование;
	
КонецФункции

#КонецОбласти

#Область ПредставлениеСтрокиТЧЗапасыНаЧеке

// Функция возвражает информацию о количестве и суммах в виде строки. Используется для заполнения состава чека на закладке "Возврат".
//
&НаСервере
Функция ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(Строка)
	
	СуммаСкидкиСтроки = (Строка.Количество * Строка.Цена) - Строка.Сумма;
	НоменклатураХарактеристикаИПартия = СокрЛП(Строка.Номенклатура.Наименование)+?(Строка.Характеристика.Пустая(), "", ". "+Строка.Характеристика)+?(Строка.Партия.Пустая(), "", ". "+Строка.Партия);
	Если СуммаСкидкиСтроки <> 0 Тогда
		ПроцентСкидки = Формат(СуммаСкидкиСтроки * 100 / (Строка.Количество * Строка.Цена), "ЧДЦ=2");
		ТекстСкидки = ?(СуммаСкидкиСтроки > 0, " - "+СуммаСкидкиСтроки, " + "+(-СуммаСкидкиСтроки))+" "+Объект.ВалютаДокумента
					  +" ("+?(СуммаСкидкиСтроки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
	Иначе
		ТекстСкидки = "";
	КонецЕсли;
	Возврат ""+Строка.Цена+" "+Объект.ВалютаДокумента+" Х "+Строка.Количество+" "+Строка.ЕдиницаИзмерения+ТекстСкидки+" = "+Строка.Сумма+" "+Объект.ВалютаДокумента;
	
КонецФункции

// Функция заполняет реквизиты ДанныеПоСтроке и НоменклатураХарактеристикаИПартия строки ТЧ Запасы.
//
&НаКлиенте
Функция УстановитьОписаниеДляСтрокиТЧЗапасыНаКлиенте(Строка)
	
	СуммаСкидкиСтроки = (Строка.Количество * Строка.Цена) - Строка.Сумма;
	Строка.НоменклатураХарактеристикаИПартия = СокрЛП(""+Строка.Номенклатура)+?(Строка.Характеристика.Пустая(), "", ". "+Строка.Характеристика)+?(Строка.Партия.Пустая(), "", ". "+Строка.Партия);
	Если СуммаСкидкиСтроки <> 0 Тогда
		ПроцентСкидки = Формат(СуммаСкидкиСтроки * 100 / (Строка.Количество * Строка.Цена), "ЧДЦ=2");
		ТекстСкидки = ?(СуммаСкидкиСтроки > 0, " - "+СуммаСкидкиСтроки, " + "+(-СуммаСкидкиСтроки))+" "+Объект.ВалютаДокумента
					  +" ("+?(СуммаСкидкиСтроки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
	Иначе
		ТекстСкидки = "";
	КонецЕсли;
	Строка.ДанныеПоСтроке = ""+Строка.Цена+" "+Объект.ВалютаДокумента+" Х "+Строка.Количество+" "+Строка.ЕдиницаИзмерения+ТекстСкидки+" = "+Строка.Сумма+" "+Объект.ВалютаДокумента;
	
	ПоказатьСкрытьСдачуНаКлиенте();
	
КонецФункции

// Функция заполняет реквизиты ДанныеПоСтроке и НоменклатураХарактеристикаИПартия строки ТЧ Запасы.
//
&НаСервере
Функция УстановитьОписаниеДляСтрокиТЧЗапасыНаСервере(Строка)
	
	СуммаСкидкиСтроки = (Строка.Количество * Строка.Цена) - Строка.Сумма;
	Строка.НоменклатураХарактеристикаИПартия = СокрЛП(""+Строка.Номенклатура)+?(Строка.Характеристика.Пустая(), "", ". "+Строка.Характеристика)+?(Строка.Партия.Пустая(), "", ". "+Строка.Партия);
	Если СуммаСкидкиСтроки <> 0 Тогда
		ПроцентСкидки = Формат(СуммаСкидкиСтроки * 100 / (Строка.Количество * Строка.Цена), "ЧДЦ=2");
		ТекстСкидки = ?(СуммаСкидкиСтроки > 0, " - "+СуммаСкидкиСтроки, " + "+(-СуммаСкидкиСтроки))+" "+Объект.ВалютаДокумента
					  +" ("+?(СуммаСкидкиСтроки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
	Иначе
		ТекстСкидки = "";
	КонецЕсли;
	Строка.ДанныеПоСтроке = ""+Строка.Цена+" "+Объект.ВалютаДокумента+" Х "+Строка.Количество+" "+Строка.ЕдиницаИзмерения+ТекстСкидки+" = "+Строка.Сумма+" "+Объект.ВалютаДокумента;
	
КонецФункции

// Функция заполняет реквизиты ДанныеПоСтроке и НоменклатураХарактеристикаИПартия для всех строк ТЧ Запасы.
//
&НаКлиенте
Процедура ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте()
	
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		УстановитьОписаниеДляСтрокиТЧЗапасыНаКлиенте(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
	
	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
	
	СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
	СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
	СтрокаАкцизнаяМарка.КодАкцизнойМарки = РезультатОткрытияФормы;
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Строка") Тогда
		
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ.Количество = 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
		
	Иначе
		Если НЕ СтрокаТЧ = Неопределено Тогда
			Объект.Запасы.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, ТекущийКлючСвязи, Номенклатура)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"             , Номенклатура);
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	ПараметрыФормы.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМарки", ЭтотОбъект, ДополнительныеПараметры);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, РежимБлокировки); 
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВводАкцизнойМарки(СтрокаТЧ)

	ВернутьЛожь = Ложь;
	Если Не ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки Тогда
		ВернутьЛожь = Истина;
	КонецЕсли;
	
	Если ВернутьЛожь Тогда
		ПересчитатьДокументНаКлиенте();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
		УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	
	ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТЧ.КлючСвязи, СтрокаТЧ.Номенклатура);
	
КонецФункции

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения, "СписокЗаказов");
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, СписокЗаказов, ИмяПоляОтбораСписка, "СписокЗаказов");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, СписокЗаказов, МеткаИД, "СписокЗаказов");

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "СписокЗаказов");
	
КонецПроцедуры

#КонецОбласти

#Область ПанельКонтактнойИнформации

// УНФ.ПанельКонтактнойИнформации
&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийКонтрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец УНФ.ПанельКонтактнойИнформации

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСоставИПанельКонтактнойИнформации(ТекЗаказ)
	
	Если КонтрагентАктивнойСтроки <> ТекущийКонтрагент Тогда
		ТекущийКонтрагент = КонтрагентАктивнойСтроки;
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	
	Если ТекЗаказ <> Неопределено Тогда
		ЗаполнитьСоставЗаказаИСсылкиНаДокументыНаСервере(ТекЗаказ);
	Иначе
		СоставЗаказа = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаЗаказов()
	
	Если Элементы.СписокЗаказов.ТекущиеДанные <> Неопределено Тогда
		ОбновитьСоставИПанельКонтактнойИнформации(Элементы.СписокЗаказов.ТекущиеДанные.Ссылка);
	Иначе
		ОбновитьСоставИПанельКонтактнойИнформации(Неопределено);
	КонецЕсли;
	ОтключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаЗаказов");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеПоЦветамСостояний(
		СписокЗаказов.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЗаказовПокупателей.ПолноеИмя()
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='Заказы покупателей'");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления", Ложь);
	
	РаботаСОтборами.СоздатьЭлементыМеток(ЭтотОбъект, "Закрыт", "ГруппаОтборЗакрыт", Ложь, НСтр("ru='Не закрытые'"));
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Закрыт");
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "ГруппаОтборОтветственный", УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя());
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	
	Если Параметры.Свойство("ПросроченоВыполнение") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
		Список.УстановитьОбязательноеИспользование("ПросроченоВыполнение", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченоВыполнение", Истина);
		
	ИначеЕсли Параметры.Свойство("ПросроченаОплата") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочена оплата'");
		Список.УстановитьОбязательноеИспользование("ПросроченаОплата", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченаОплата", Истина);
		
	ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
		Список.УстановитьОбязательноеИспользование("НаСегодня", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НаСегодня", Истина);
		
	ИначеЕсли Параметры.Свойство("ВРаботе") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='в работе'");
		Список.УстановитьОбязательноеИспользование("ЗаказВРаботе", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЗаказВРаботе", Истина);
		
	ИначеЕсли Параметры.Свойство("Новые") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='новые'");
		Список.УстановитьОбязательноеИспользование("ЗаказНовый", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЗаказНовый", Истина);
		
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтогов(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговВопросЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выполнить сверку итогов на эквайринговом терминале?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговВопросЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьСверкуИтогоПриЗакрытииСменыПриИзменении(Элемент)
	
	// РМК
	РабочееМестоКассираВызовСервера.ОбновитьНастройкиРМК(НастройкаРМК, НеПоказыватьПриОткрытииФормуВыбораКассы, СверятьИтогиНаЭТПриЗакрытииСмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыЦена" Тогда
		Если НЕ ПродажаСоСклада И РазрешеноРедактированиеЦенДокументов Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Цену можно установить в карточке номенклатуры. В рабочем месте кассира можно менять цену только при продаже с оптового склада.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
