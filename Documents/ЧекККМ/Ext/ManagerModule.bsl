#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ЗаказПокупателя КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.КассаККМ КАК БанковскийСчетКасса,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные) КАК ТипДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ЗаказПокупателя.Договор.РасчетыВУсловныхЕдиницах
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * ВЫБОР
	|							КОГДА КурсыВалютРасчетов.Курс <> 0
	|									И КурсыВалютКассы.Кратность <> 0
	|								ТОГДА КурсыВалютКассы.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютКассы.Кратность, 1))
	|							ИНАЧЕ 1
	|						КОНЕЦ КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ ТаблицаДокумента.СуммаВал
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.ЗаказПокупателя,
	|	ТаблицаДокумента.КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ЗаказПокупателя КАК СчетНаОплату,
	|	0 КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Дата КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Дата,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	// Ставим в резерв только то количество, которое ещё не поставлено в резерв заказом покупателя на складе розничной точки!
	// Окончательное снятие резерва с заказа происходит в документе "Отчет о розничных продажах".
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ТаблицаЗапасы.Подразделение КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.Подразделение КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	0 КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И (НЕ &Архивный)
	|	И (НЕ &ДвиженияПоЗапасамУдалять)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Дата,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.Подразделение,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.Подразделение,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ДвиженияПоЗапасамУдалять", СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	СформироватьТаблицаЗапасыПродажа(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажа(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика,
	|						ТаблицаЗапасы.Партия КАК Партия,
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Количество
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Сумма
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродажа()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЧекККМЗапасы.Дата КАК Период,
	|	ЧекККМЗапасы.Организация КАК Организация,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.Партия КАК Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ЧекККМЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ЧекККМЗапасы
	|ГДЕ
	|	ЧекККМЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И (НЕ &Архивный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМЗапасы.НомерСтроки,
	|	ЧекККМЗапасы.Дата,
	|	ЧекККМЗапасы.Организация,
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМЗапасы.Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаДенежныеСредстваВКассахККМ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ОплатаПлатежнымиКартами КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	КассаККМ,
	|	Валюта,
	|	СчетУчета";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств в кассу ККМ'"));
	Запрос.УстановитьПараметр("ОплатаПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков денежных средств.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.Организация КАК Организация,
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ(Запрос.МенеджерВременныхТаблиц, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваВКассахККМ", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДенежныеСредстваВКассахККМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	0 КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Дата КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.Подразделение КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.Подразделение КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ЧекПробит
	|	И (НЕ &Архивный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.Подразделение,
	|	ТаблицаПродажи.Ответственный";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Дата КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.КассаККМСчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.РасчетыСПоставщиками)
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И (НЕ &Архивный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ОтражениеОплатыПлатежнымиКартами
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И (НЕ &Архивный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И (НЕ &Архивный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ОтражениеОплатыПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЧекККМЗапасы.Ссылка КАК Ссылка,
	|	ЧекККМЗапасы.Ссылка КАК Документ,
	|	ЧекККМЗапасы.Ссылка.Дата КАК Дата,
	|	ЧекККМЗапасы.Заказ КАК ЗаказПокупателя,
	|	ЧекККМЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|	ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.Владелец КАК КассаККМВладелец,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	&Организация КАК Организация,
	|	ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ссылка.Подразделение КАК Подразделение,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЧекККМЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимость,
	|	НЕОПРЕДЕЛЕНО КАК Ячейка,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Количество
	|		ИНАЧЕ ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ЧекККМЗапасы.КлючСвязи,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ЧекККМЗапасы.Ссылка.КассоваяСмена КАК КассоваяСмена,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Резерв
	|		ИНАЧЕ ЧекККМЗапасы.Резерв * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ЧекККМЗапасы.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыДокВалюты
	|		ПО ЧекККМЗапасы.Ссылка.ВалютаДокумента = КурсыДокВалюты.Валюта
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Дата КАК Дата,
	|	&Ссылка КАК Документ,
	|	&Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.КассаККМ КАК КассаККМ,
	|	ТабличнаяЧасть.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ТабличнаяЧасть.Ссылка.ЭквайринговыйТерминал.СчетУчета КАК ЭквайринговыйТерминалСчетУчета,
	|	ТабличнаяЧасть.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ТабличнаяЧасть.Сумма КАК СуммаВал,
	|	ТабличнаяЧасть.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТабличнаяЧасть.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТабличнаяЧасть.Ссылка.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер,
	|	ТабличнаяЧасть.Ссылка.ЭквайринговыйТерминал.Договор КАК Договор,
	|	ТабличнаяЧасть.Ссылка.ЭквайринговыйТерминал
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатаПлатежнымиКартами
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТабличнаяЧасть.Ссылка.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСкидкиНаценки.КлючСвязи,
	|	ЧекККМСкидкиНаценки.СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ЧекККМСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЧекККМСкидкиНаценки.Сумма * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЧекККМСкидкиНаценки.Ссылка.Дата КАК Период,
	|	ЧекККМСкидкиНаценки.Ссылка.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ЧекККМСкидкиНаценки.Ссылка = &Ссылка
	|	И ЧекККМСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии) КАК ПроцентКомиссии
	|ПОМЕСТИТЬ ВременнаяТаблицаПроцентыКомиссии
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|ГДЕ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка = &ЭквайринговыйТерминал
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяСерийныеНомера.КлючСвязи,
	|	РасходнаяНакладнаяСерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ ВременнаяТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ.СерийныеНомера КАК РасходнаяНакладнаяСерийныеНомера
	|ГДЕ
	|	РасходнаяНакладнаяСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ДокументСсылкаЧекККМ.ЭквайринговыйТерминал);
	
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	// Эквайринг
	СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Серийные номера
	СформироватьТаблицаСерийныеНомера(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Заказы покупателей в розничной торговле
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Функция возвращает шаблон пакетного запроса.
//
Функция СформироватьШаблонПакетногоЗапроса()
	
	ТекстЗапроса =
	Символы.ПС +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////"
	+ Символы.ПС;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьШаблонПакетногоЗапроса()

// Функция возвращает текст запроса по остаткам регистра Запасы.
//
Функция СформироватьТекстЗапросаОстаткиЗапасы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
	|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
	|ИЗ
	|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
	|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
	|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
	|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
	|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
	|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + СформироватьШаблонПакетногоЗапроса();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасы()

// Функция возвращает текст запроса по остаткам регистра СерийныеНомера.
//
Функция СформироватьТекстЗапросаОстаткиСерийныеНомера()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
	|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
	|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокСерийныеНомера,
	|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокСерийныеНомера
	|ИЗ
	|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
	|		ПО ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
	|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
	|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
	|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
	|			И ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
	|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
	|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + СформироватьШаблонПакетногоЗапроса();
	
КонецФункции // СформироватьТекстЗапросаОстаткиСерийныеНомера()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаЧекККМ, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если НЕ УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков()
	 ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить()
	    ИЛИ ДокументСсылкаЧекККМ.Архивный Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияДенежныеСредстваВКассахККМИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияСерийныеНомераИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ) КАК КассаККМПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ.ВалютаДенежныхСредств) КАК ВалютаПредставление,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение + ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК ОстатокДенежныхСредств,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение КАК СуммаВалИзменение
		|ИЗ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
		|				&МоментКонтроля,
		|				(Организация, КассаККМ) В
		|					(ВЫБРАТЬ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.Организация КАК Организация,
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ КАК ТипДенежныхСредств
		|					ИЗ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение)) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДвиженияДенежныеСредстваВКассахККМИзменение.Организация = ДенежныеСредстваВКассахККМОстатки.Организация
		|			И ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
		|ГДЕ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
		|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокСерийныеНомера,
		|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокСерийныеНомера
		|ИЗ
		|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
		|		ПО ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
		|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
		|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
		|			И ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
		|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
		|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Запрос.Текст = Запрос.Текст // [0 и 1]
			+ СформироватьШаблонПакетногоЗапроса()
			+ СформироватьТекстЗапросаОстаткиЗапасы() // [2]
			+ СформироватьТекстЗапросаОстаткиСерийныеНомера(); // [4]
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
		 ИЛИ НЕ МассивРезультатов[1].Пустой() Тогда
			ДокументОбъектЧекККМ = ДокументСсылкаЧекККМ.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по кассе ККМ.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваВКассахККМ(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Если НЕ МассивРезультатов[2].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Если НЕ МассивРезультатов[4].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнымКартам.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаЧекККМ.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ЧекПробит
	|	И (НЕ &Архивный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

// Формирует таблицу значений, содержащую данные для проведения по регистру ПредоставленныеАвтоматическиеСкидки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаЧекККМ.СкидкиНаценки.Количество() = 0 ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК АвтоматическаяСкидка,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК ПолучательСкидки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи
	|ГДЕ
	|	&ЧекПробит
	|	И (НЕ &Архивный)";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам()

#КонецОбласти

#Область Эквайринг

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	ДанныеДокумента.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТаблицаРасшифровкаПлатежа.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВал КАК СуммаВал,
	|	ДанныеДокумента.ЭквайринговыйТерминал.Договор КАК ДоговорЭквайринга,
	|	ТаблицаРасшифровкаПлатежа.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100 КАК СуммаКомиссииПоДоговору,
	|	ТаблицаРасшифровкаПлатежа.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100 КАК СуммаКомиссииПоДоговоруВал,
	|	ДанныеДокумента.СтруктурнаяЕдиница
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
	|			ПО ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И НЕ &Архивный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПлатежнымиКартами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

#КонецОбласти

#Область РаботаССерийнымиНомерами

// Формирует таблицу значений, содержащую данные для проведения по регистру СерийныеНомераГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерийныеНомера(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерийныеНомера.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Дата КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход) КАК Операция,	
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи
	|	И &ЧекПробит
	|	И НЕ &Архивный";
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицаСерийныеНомера()

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ обложки кассовой книги
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РасходнаяНакладная";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ТоварныйЧек");
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";
		СтруктураЗаполненияСекции = Новый Структура;
		
		ПервыйДокумент = Истина;
		
		Для каждого ЧекККМ Из МассивОбъектов Цикл
			
			Если НЕ ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ЧекККМ.Ссылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДокЧек.Номер КАК Номер,
			|	ДокЧек.Дата КАК Дата,
			|	ДокЧек.КассаККМ КАК КассаККМ,
			|	ДокЧек.ВалютаДокумента КАК Валюта,
			|	ДокЧек.Контрагент.Представление КАК ПредставлениеПолучателя,
			|	ДокЧек.Организация КАК Организация,
			|	ДокЧек.Организация.Префикс КАК Префикс,
			|	ДокЧек.Организация.Представление КАК Поставщик,
			|	ДокЧек.СуммаДокумента КАК СуммаДокумента,
			|	ДокЧек.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	ДокЧек.Ответственный.Физлицо КАК Ответственный,
			|	ДокЧек.Запасы.(
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		Номенклатура.Представление КАК Запас,
			|		Номенклатура.НаименованиеПолное КАК ЗапасПолноеНаименование,
			|		Номенклатура.Код КАК Код,
			|		Номенклатура.Артикул КАК Артикул,
			|		Характеристика КАК Характеристика,
			|		Количество КАК Количество,
			|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		СуммаНДС КАК СуммаНДС,
			|		Всего КАК Всего,
			|		ПроцентСкидкиНаценки,
			|		ВЫБОР
			|			КОГДА ДокЧек.Запасы.ПроцентСкидкиНаценки <> 0
			|					ИЛИ ДокЧек.Запасы.СуммаАвтоматическойСкидки <> 0
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЕстьСкидка,
			|		СуммаАвтоматическойСкидки,
			|		Партия,
			|		ПроцентАвтоматическойСкидки,
			|		Заказ,
			|		Заказ.Номер,
			|		Заказ.Дата,
			|		КлючСвязи
			|	),
			|	ДокЧек.Заказ,
			|	ДокЧек.ПоложениеЗаказаПокупателя,
			|	ДокЧек.ЕстьЗаказы,
			|	ДокЧек.Контрагент,
			|	ДокЧек.Заказ.Номер,
			|	ДокЧек.Заказ.Дата,
			|	ДокЧек.СерийныеНомера.(
			|		СерийныйНомер,
			|		КлючСвязи
			|	)
			|ИЗ
			|	Документ.ЧекККМ КАК ДокЧек
			|ГДЕ
			|	ДокЧек.Ссылка = &ТекущийДокумент";
			
			Шапка = Запрос.Выполнить().Выбрать();
			Шапка.Следующий();
			
			// Заказы в розничной торговле
			ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
			Если ИспользоватьЗаказыВРозничнойТорговле И Шапка.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
				ЗаказВШапке = Истина;
				ЗаказВТЧ = Ложь;
			Иначе
				ЗаказВШапке = Ложь;
				ЗаказВТЧ = ИспользоватьЗаказыВРозничнойТорговле И Шапка.ЕстьЗаказы;
			КонецЕсли;
			// Конец Заказы в розничной торговле
			
			СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
			
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.Дата, Шапка.Номер, Шапка.Префикс);
			
			//:::Заголовок
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
			СтруктураЗаполненияСекции.Очистить();
			
			СтруктураЗаполненияСекции.Вставить("ТекстЗаголовка", НСтр("ru ='Товарный чек № '") + НомерДокумента + НСтр("ru =' от '") + Формат(Шапка.Дата, "ДЛФ=DD"));
			
			ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Заказы в розничной торговле
			Если ЗаказВТЧ Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Заказ");
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
			// Конец Заказы в розничной торговле
			
			//:::Поставщик
			ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
			СтруктураЗаполненияСекции.Очистить();
			СтруктураЗаполненияСекции = Новый Структура(Новый ФиксированнаяСтруктура(СведенияОбОрганизации));
			
			ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			СтруктураЗаполненияСекции.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураЗаполненияСекции.Вставить("Поставщик", Шапка.Организация);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Заказы в розничной торговле
			Если ИспользоватьЗаказыВРозничнойТорговле И ЗначениеЗаполнено(Шапка.Контрагент) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
				
				СведенияОПокупателе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, ,);
				
				СтруктураЗаполненияСекции.Очистить();
				СтруктураЗаполненияСекции = Новый Структура(Новый ФиксированнаяСтруктура(СведенияОПокупателе));
				
				ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
				СтруктураЗаполненияСекции.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
				СтруктураЗаполненияСекции.Вставить("Получатель", Шапка.Контрагент);
				
				ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			Если ЗаказВШапке Тогда
				Если ЗначениеЗаполнено(Шапка.Контрагент) ИЛИ ЗначениеЗаполнено(Шапка.Заказ) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ЗаказШапка");
					ОбластьМакета.Параметры.ПредставлениеЗаказа = ?(ЗначениеЗаполнено(Шапка.Заказ), 
					"№ "+ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.ЗаказНомер, Истина, Истина)+" от "+Формат(Шапка.ЗаказДата, "ДЛФ=D"),
					"");
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
			КонецЕсли;
			// Конец Заказы в розничной торговле
			
			ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			// Заказы покупателя в Рознице
			Если ЗаказВТЧ Тогда
				ОбластьЗаказа = Макет.ПолучитьОбласть("ШапкаТаблицы|ЗаказТЧ");
				ТабДокумент.Присоединить(ОбластьЗаказа);
			КонецЕсли;
			// Конец Заказы покупателя в Рознице
			
			ОбластьКолонкаЗапас = Макет.Область("Запас");
			
			Если Не ЕстьСкидки Тогда
				ОбластьКолонкаЗапас.ШиринаКолонки =
				ОбластьКолонкаЗапас.ШиринаКолонки
				+ Макет.Область("СуммаБезСкидки").ШиринаКолонки
				+ Макет.Область("СуммаСкидки").ШиринаКолонки;
			КонецЕсли;
			
			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			// Заказы покупателя в Рознице
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ = Макет.ПолучитьОбласть("Строка|ЗаказТЧ");
			КонецЕсли;
			// Конец Заказы покупателя в Рознице
			
			Сумма			= 0;
			СуммаНДС		= 0;
			Всего			= 0;
			ВсегоСкидок		= 0;
			ВсегоБезСкидок	= 0;
			
			ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
			ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
			Пока ВыборкаСтрокЗапасы.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				ТабДокумент.Вывести(ОбластьНомера);
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				
				СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
				ОбластьДанных.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
				ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
				
				ТабДокумент.Присоединить(ОбластьДанных);
				
				Скидка = 0;
				
				Если ЕстьСкидки Тогда
					Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
						Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
						ОбластьСкидок.Параметры.Скидка = Скидка;
						ОбластьСкидок.Параметры.СуммаБезСкидки = Скидка;
					ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
						ОбластьСкидок.Параметры.Скидка = 0;
						ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
					Иначе
						Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
						ОбластьСкидок.Параметры.Скидка = Скидка;
						ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				
				ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				ТабДокумент.Присоединить(ОбластьСуммы);
				
				// Заказы покупателя в Рознице
				Если ЗаказВТЧ Тогда
					ОбластьЗаказВТЧ.Параметры.Заказ = ?(ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Заказ), 
					"№ "+ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСтрокЗапасы.ЗаказНомер, Истина, Истина)+" от "+Формат(ВыборкаСтрокЗапасы.ЗаказДата, "ДЛФ=D"),
					"");
					ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
				КонецЕсли;
				// Конец Заказы покупателя в Рознице
				
				Сумма			= Сумма			+ ВыборкаСтрокЗапасы.Сумма;
				СуммаНДС		= СуммаНДС		+ ВыборкаСтрокЗапасы.СуммаНДС;
				Всего			= Всего			+ ВыборкаСтрокЗапасы.Всего;
				ВсегоСкидок		= ВсегоСкидок	+ Скидка;
				ВсегоБезСкидок	= Сумма			+ ВсегоСкидок;
				
			КонецЦикла;
			
			// Вывести Итого.
			СтруктураЗаполненияСекции = Новый Структура;
			СтруктураЗаполненияСекции.Вставить("ЗаголовокНДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
			
			ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			
			ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки Тогда
				
				СтруктураЗаполненияСекции.Вставить("ВсегоСкидок", ВсегоСкидок);
				СтруктураЗаполненияСекции.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
				
				ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
				ТабДокумент.Присоединить(ОбластьСкидок);
				
			КонецЕсли;
			
			СтруктураЗаполненияСекции.Вставить("Сумма", Сумма);
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", СуммаНДС);
			СтруктураЗаполненияСекции.Вставить("Всего", Всего);
			
			ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабДокумент.Присоединить(ОбластьСуммы);
			// Заказы покупателя в Рознице
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ  = Макет.ПолучитьОбласть("Итого|ЗаказТЧ");
				ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
			КонецЕсли;
			// Конец Заказы покупателя в Рознице
			
			// Вывести Сумму прописью.
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Всего;
			ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
			+ Строка(ВыборкаСтрокЗапасы.Количество())
			+ ", на сумму "
			+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
			
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Вывести подписи.
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
			
			Если ЗначениеЗаполнено(Шапка.Ответственный) Тогда
				
				ОтветственныйДанные = УправлениеНебольшойФирмойСервер.ДанныеФизЛица(
				УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Шапка.Организация),
				Шапка.Ответственный, 
				Шапка.Дата);
				
				ОбластьМакета.Параметры.ОтветственныйДолжность		= ОтветственныйДанные.Должность;
				ОбластьМакета.Параметры.ОтветственныйРасшифровка	= ОтветственныйДанные.Представление;
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Заказы в розничной торговле
			Если ЗаказВТЧ Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказ");
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
			// Конец Заказы в розничной торговле
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ЧекККМ);
			
		КонецЦикла;
		
		ТабДокумент.АвтоМасштаб = Истина;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуОбложкиИПоследнегоЛистаКассовойКниги()

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Товарный чек"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон", "Гарантийный талон", 
			РаботаСНоменклатуройСервер.ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати)
			);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаДокумента_РМК";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ГарантийныйТалон";
		КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
		КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаДокумента_РМК";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 3;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека)
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
		
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
		
		ДанныеАлкогольнойПродукции = Новый Структура;
		ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
		ДанныеАлкогольнойПродукции.Вставить("Маркируемый", СтрокаТЧ.Маркируемый);
		ДанныеАлкогольнойПродукции.Вставить("КодАкцизнойМарки", Новый Массив);
		ДанныеАлкогольнойПродукции.КодАкцизнойМарки.Добавить(СтрокаТЧ.КодАкцизнойМарки);
		ДанныеАлкогольнойПродукции.Вставить("ОбъемДАЛ", СтрокаТЧ.ОбъемДАЛ);
		ДанныеАлкогольнойПродукции.Вставить("Крепость", СтрокаТЧ.Крепость);
		ДанныеАлкогольнойПродукции.Вставить("КодВидаПродукции", СтрокаТЧ.КодВидаПродукции);
		ДанныеАлкогольнойПродукции.Вставить("Штрихкод", СтрокаТЧ.Штрихкод);
				
		ПараметрыАлкогольнойПродукции = ИнтеграцияЕГАИСУНФ.ПараметрыАлкогольнойПродукции(ДанныеАлкогольнойПродукции);
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТЧ.СтавкаНДС);
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Наименование = НаименованиеТовара;
		СтрокаПозицииЧека.Количество   = СтрокаТЧ.Количество;
		СтрокаПозицииЧека.Цена         = СтрокаТЧ.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС / ?(СтрокаТЧ.Количество = 0, 1, СтрокаТЧ.Количество)); //  5 - Цена за позицию без скидки;
		СтрокаПозицииЧека.Сумма        = СтрокаТЧ.Всего;
		СтрокаПозицииЧека.НомерСекции  = 1;
		СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
		СтрокаПозицииЧека.Штрихкод     = СтрокаТЧ.Штрихкод;
		СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОплатуПриПробитииЧекаККМ(ДокуметОбъект, ОбщиеПараметры)
	
	// Платежная карта
	СуммаОплатыПлатежнымиКартами = ДокуметОбъект.ОплатаПлатежнымиКартами.Итог("Сумма");
	Если СуммаОплатыПлатежнымиКартами > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 1);
		СтрокаОплаты.Вставить("Сумма", СуммаОплатыПлатежнымиКартами);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Наличные
	Если ДокуметОбъект.Свойство("ПолученоНаличными") 
		И ДокуметОбъект.ПолученоНаличными > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 0);
		СтрокаОплаты.Вставить("Сумма", ДокуметОбъект.ПолученоНаличными);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли ДокуметОбъект.СуммаДокумента - СуммаОплатыПлатежнымиКартами > 0 Тогда 
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 0);
		СтрокаОплаты.Вставить("Сумма", ДокуметОбъект.СуммаДокумента - СуммаОплатыПлатежнымиКартами);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМ()

Функция ПодготовитьДанныеДляПробитияЧека(ДокументОбъект, ДокументСсылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС, ЭтоВозврат = Ложь) Экспорт
	
	ТаблицаТоваровЧека = УправлениеНебольшойФирмойСервер.ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
	
	Если НЕ ДанныеЕГАИСДостаточны Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека);
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Телефон");
	СтруктураРеквизитов.Вставить("АдресЭП");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("СуммаДокумента");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НаименованиеПолное");
	СтруктураРеквизитов.Вставить("ИНН");
	СтруктураРеквизитов.Вставить("КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("СерийныйНомер");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Ответственный.Физлицо, СтруктураРеквизитов);
	
	ОбщиеПараметры.ТипРасчета = ?(ЭтоВозврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
								  
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(РеквизитыДокумента.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = РеквизитыДокумента.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = РеквизитыКассир.Наименование;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассир.Наименование);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассир.ИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(ДокументОбъект.СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
		
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыДокумента.СтруктурнаяЕдиница);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.КодСистемыНалогообложения = РозничныеПродажиСервер.ПолучитьКодСистемыНалогообложения(
		РеквизитыДокумента.Организация,
		РеквизитыДокумента.СтруктурнаяЕдиница,
		РеквизитыДокумента.Дата);
		
	ЗаполнитьОплатуПриПробитииЧекаККМ(ДокументОбъект, ОбщиеПараметры);
	
	Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ТранспортныйМодуль = ИнтеграцияЕГАИСУНФ.ИспользуемыйТранспортныйМодуль(РеквизитыДокумента.Организация, РеквизитыДокумента.СтруктурнаяЕдиница);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

#КонецЕсли
