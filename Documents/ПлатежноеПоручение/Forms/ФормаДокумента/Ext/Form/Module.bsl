&НаКлиенте
Перем СтрокаПоискаПоКБК;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СозданПоКомандеИзФормыСписка") Тогда
		СозданПоКомандеИзФормыСписка = Параметры.СозданПоКомандеИзФормыСписка;
	Иначе
		СозданПоКомандеИзФормыСписка = Ложь;
	КонецЕсли;
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	ЭтоФизЛицо = Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	БезНалогаНДС = Объект.СтавкаНДС.НеОблагается;
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
	   И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование.ВалютаДокумента = Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
				Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
			И НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ИННПлательщика) Тогда
			Объект.ИННПлательщика = Объект.Организация.ИНН;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КПППлательщика) Тогда
			НеобходимостУказанияКПППлательщика = ПолучитьНеобходимостьУказанияКПП(Объект.БанковскийСчет, Объект.ВидОперации);
			Объект.КПППлательщика = ?(НеобходимостУказанияКПППлательщика, Объект.Организация.КПП, "");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТекстПлательщика) Тогда
			СтруктураДанные = Новый Структура(
				"НаименованиеПлательщикаПриПеречисленииНалогов, ТекстКорреспондента, НаименованиеПолное, ТекстБанкДляРасчетов",
				Объект.Организация.НаименованиеПлательщикаПриПеречисленииНалогов, Объект.БанковскийСчет.ТекстКорреспондента,
				Объект.Организация.НаименованиеПолное, ПолучитьТекстБанкДляРасчетов(Объект.БанковскийСчет)
			);
			ЗаполнитьТекстПлательщика(СтруктураДанные);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента)
				И ЗначениеЗаполнено(Объект.ДокументОснование)
				И Объект.ДокументОснование.ВалютаДокумента = Объект.Контрагент.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
					Объект.СчетКонтрагента = Объект.Контрагент.БанковскийСчетПоУмолчанию;
			КонецЕсли;
			Объект.ИННПолучателя = Объект.Контрагент.ИНН;
			Объект.КПППолучателя = Объект.Контрагент.КПП;
			Объект.ТекстПолучателя = ?(
				ЗначениеЗаполнено(Объект.СчетКонтрагента.ТекстКорреспондента),
				Объект.СчетКонтрагента.ТекстКорреспондента,
				Объект.Контрагент.НаименованиеПолное);
			СтруктураДанные = Новый Структура(
				"ТекстКорреспондента, НаименованиеПолное, ТекстБанкДляРасчетов",
				Объект.СчетКонтрагента.ТекстКорреспондента, Объект.Контрагент.НаименованиеПолное, ПолучитьТекстБанкДляРасчетов(Объект.СчетКонтрагента)
			);
			ЗаполнитьТекстПолучателя(СтруктураДанные);
			Если ПустаяСтрока(СтруктураДанные.ТекстКорреспондента) Тогда
				
				Объект.ТекстПолучателя = СтруктураДанные.НаименованиеПолное;
				Если ЗначениеЗаполнено(СтруктураДанные.ТекстБанкДляРасчетов) Тогда
					Объект.ТекстПолучателя = Объект.ТекстПолучателя + СтруктураДанные.ТекстБанкДляРасчетов;
				КонецЕсли;
				
			Иначе
				
				Объект.ТекстПолучателя = СтруктураДанные.ТекстКорреспондента;
				
			КонецЕсли;
			
			НазначениеПлатежа = Объект.СчетКонтрагента.ТекстНазначения;
		КонецЕсли; 
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
			Объект.КодОКАТО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КодПоОКТМО");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		НазначениеПлатежа = Объект.СчетКонтрагента.ТекстНазначения;
	КонецЕсли;
	
	ВидОперации = Объект.ВидОперации;
	
	Если Объект.ПоказательПериода = "0"
	 ИЛИ ПустаяСтрока(Объект.ПоказательПериода)
	 ИЛИ ПустаяСтрока(СтрЗаменить(Объект.ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		СтрокаВидаПериода = Лев(Объект.ПоказательПериода, 2);
		СтрокаПериода     = Сред(Объект.ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(Объект.ПоказательПериода, 7);
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		Попытка
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПлатежа = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
		Исключение
			ПоказательПериода   = "0";
			ПериодичностьУплаты = "0";
		КонецПопытки;
	КонецЕсли;

	Если ПериодичностьУплаты = "0" Тогда
		Элементы.ГодПериод.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость = Ложь;
	Иначе
		Если ПериодичностьУплаты = "-" Тогда
			Элементы.ГодПериод.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость = Истина;
		Иначе
			Элементы.ГодПериод.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость = Ложь;
			Элементы.ПериодПлатежа.Видимость = ПериодичностьУплаты <> "ГД";
			Если ПериодичностьУплаты = "МС" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
				Элементы.ПериодПлатежа.Заголовок = "Месяц";
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
				Элементы.ПериодПлатежа.Заголовок = "Квартал";
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
				Элементы.ПериодПлатежа.Заголовок = "Полугодие";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		СтруктураДанные = ПолучитьДанныеДокументОснованиеПриИзменении(Объект.ДокументОснование);
		НомерВходящегоДокумента = СтруктураДанные.НомерВходящегоДокумента;
		ДатаВходящегоДокумента = СтруктураДанные.ДатаВходящегоДокумента;
	КонецЕсли;

	Элементы.РеквизитыДляПеречисленияНалога.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	Элементы.Налог.Видимость     = Элементы.РеквизитыДляПеречисленияНалога.Видимость;
	Элементы.СтавкаНДС.Видимость = Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	Элементы.СуммаНДС.Видимость = Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	УстановитьФормуС2014Года();
	УстановитьФормуС2015Года();
	
	УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(ЭтаФорма);
	
	// Документ основание.
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	НовыйМассив = Новый Массив();
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ПараметрыВыбораДокументаОснования = НовыеПараметры;
	
	УстановитьВидимостьДоговора();
	// Конец Документ основание.
	
	// Остатки ДС и взаиморасчетов на форме
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС(Объект.БанковскийСчет);
	// Конец Остатки ДС и взаиморасчетов на форме
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ЭДО
	ОбменСБанками.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	УстановитьЗаголовокГруппыБюджет(ЭтотОбъект);
КонецПроцедуры

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоДоговорам");
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	УстановитьЗаголовокГруппыБюджет(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС(Объект.БанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_ПлатежноеПоручение", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении реквизита ПериодичностьУплаты.
// В процедуре устанавливается максимальное значение реквизита ПериодПлатежа в
// зависимости от реквизита ПериодичностьУплаты.
//
&НаКлиенте
Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(ПериодичностьУплаты)) Тогда
		ПериодичностьУплаты= "0";
	КонецЕсли;

	Модифицированность = Истина;
	
	Если ПериодичностьУплаты <> "0"
	   И ПериодичностьУплаты <> "-" Тогда
		Если ГодПлатежа = 0 Тогда
			ГодПлатежа = Год(Объект.Дата);
		КонецЕсли;
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			ПериодПлатежа = Макс(1, ПериодПлатежа);
		КонецЕсли;
	Иначе
		ГодПлатежа = 0;
	КонецЕсли;
	
	УстановитьПоказательПериода();
	УстановитьДоступностьРеквизитовПеречисленияНалогов();
	
КонецПроцедуры // ПериодичностьУплатыПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ГодПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
&НаКлиенте
Процедура ГодПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ГодПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПериодПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
&НаКлиенте
Процедура ПериодПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ПериодПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ДатаПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ДатаПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер 			= "";
	СтруктураДанные 		= ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация, Объект.БанковскийСчет, Объект.Контрагент, Объект.СчетКонтрагента, Объект.ВидОперации, Объект.Дата);
	Компания 				= СтруктураДанные.Компания;
	Объект.БанковскийСчет	= СтруктураДанные.БанковскийСчет;
	Объект.ВалютаДокумента	= СтруктураДанные.ВалютаДокумента;
	Объект.СчетКонтрагента	= СтруктураДанные.СчетКонтрагента;
	Объект.ИННПлательщика	= СтруктураДанные.ИННПлательщика;
	Объект.КПППлательщика	= СтруктураДанные.КПППлательщика;
	
	ЗаполнитьТекстПлательщика(СтруктураДанные);
	
	ЭтоФизЛицо = СтруктураДанные.ЭтоФизЛицо;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
			Объект.КодОКАТО = СтруктураДанные.КодОКАТО;
			Если ЭтоФизЛицо Тогда
				Объект.КПППлательщика = 0;
			КонецЕсли;
		Иначе
			Объект.КодОКАТО = "";
			Если ЭтоФизЛицо Тогда
				Объект.КПППлательщика = "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.БанковскийСчет = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита  СчетОрганизации.
//
&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСчетОрганизацииПриИзменении(Объект.Организация, Объект.БанковскийСчет, Объект.ВалютаДокумента, Объект.Дата, Объект.ВидОперации);
	Объект.КПППлательщика = СтруктураДанные.КПППлательщика;
	
	Если НЕ Объект.ВалютаДокумента = СтруктураДанные.ВалютаДенежныхСредств Тогда
		
		Объект.СчетКонтрагента = Неопределено;
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаДенежныхСредств;
		
		Если Объект.СуммаДокумента <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Изменилась валюта банковского счета. Пересчитать суммы документа?'");
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("СчетОрганизацииПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные)), ТекстСообщения, Режим, 0);
            Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СчетОрганизацииПриИзмененииФрагмент(СтруктураДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Договор = Объект.Договор;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;
    
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
        Объект.СуммаДокумента,
        СтруктураДанные.ВалютаКурсКратностьПередИзменением.Курс,
        СтруктураДанные.ВалютаКурсКратность.Курс,
        СтруктураДанные.ВалютаКурсКратностьПередИзменением.Кратность,
        СтруктураДанные.ВалютаКурсКратность.Кратность
        );
        Объект.СуммаНДС = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
        Объект.СуммаНДС,
        СтруктураДанные.ВалютаКурсКратностьПередИзменением.Курс,
        СтруктураДанные.ВалютаКурсКратность.Курс,
        СтруктураДанные.ВалютаКурсКратностьПередИзменением.Кратность,
        СтруктураДанные.ВалютаКурсКратность.Кратность
        );
    КонецЕсли;
    
    СчетОрганизацииПриИзмененииФрагмент(СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзмененииФрагмент(Знач СтруктураДанные)
    
    ЗаполнитьТекстПлательщика(СтруктураДанные);

КонецПроцедуры // СчетОрганизацииПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФормуС2014Года();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	   И ((УправлениеНебольшойФирмойКлиентСервер.ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Объект.Дата)
	   И НЕ УправлениеНебольшойФирмойКлиентСервер.ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(ДатаПередИзменением))
	   ИЛИ (НЕ УправлениеНебольшойФирмойКлиентСервер.ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Объект.Дата)
	   И УправлениеНебольшойФирмойКлиентСервер.ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(ДатаПередИзменением))) Тогда
		ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	КонецЕсли;
	
	УстановитьФормуС2015Года();
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	УправлениеНебольшойФирмойКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		Объект.НазначениеПлатежа,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	);
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ВидОперации.
// В процедуре устанавливается доступность реквизитов формы в зависимости от
// вида операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперации Тогда
		Возврат;
	КонецЕсли;
	ВидОперации = Объект.ВидОперации;
	
	УстановитьВидимостьДоступность();
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация, Объект.БанковскийСчет, Объект.Контрагент, Объект.СчетКонтрагента, Объект.ВидОперации, Объект.Дата);
	
	Объект.КПППлательщика = СтруктураДанные.КПППлательщика;
	Объект.КПППолучателя = СтруктураДанные.КПППолучателя;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		Объект.КодБК = "";
		Объект.КодОКАТО = СтруктураДанные.КодОКАТО;
		Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж");
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = Неопределено;
		Если ЭтоФизЛицо Тогда
			Объект.КПППлательщика = 0;
		КонецЕсли;
		ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
		Объект.ИдентификаторПлатежа = "";
		Элементы.ИдентификаторПлатежа.Заголовок = "УИН";
	Иначе
		Объект.КодБК  = "";
		Объект.КодОКАТО = "";
		Объект.СтатусСоставителя = "";
		Объект.ПоказательОснования = "";
		Объект.ПоказательТипа = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательНомера = "";
		Объект.ПоказательДаты = "";
		ПериодичностьУплаты = "";
		ГодПлатежа = "";
		ПериодПлатежа = "";
		Объект.ВидПеречисленияВБюджет = Неопределено;
		Если ЭтоФизЛицо Тогда
			Объект.КПППлательщика = "";
		КонецЕсли;
		Объект.ИдентификаторПлатежа = "";
		Элементы.ИдентификаторПлатежа.Заголовок = "УИП";
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	   И ЗначениеЗаполнено(СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		Объект.ТекстПлательщика = СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов;
	Иначе
		Объект.ТекстПлательщика = ?(
			ЗначениеЗаполнено(СтруктураДанные.ТекстКорреспондента),
			СтруктураДанные.ТекстКорреспондента,
			СтруктураДанные.НаименованиеПолное
		);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.Дата) И Объект.Дата >= УправлениеНебольшойФирмойКлиентСервер.НачалоПримененияИдентификатораПлатежа())
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.Дата) И ТекущаяДата() >= УправлениеНебольшойФирмойКлиентСервер.НачалоПримененияИдентификатораПлатежа())
	 ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")) Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата") Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = НСтр("ru = 'До 31.03.2014 идентификатор платежа используется только для платежей в бюджет'");
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	УправлениеНебольшойФирмойКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		Объект.НазначениеПлатежа,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	);
	УстановитьЗаголовокГруппыБюджет(ЭтотОбъект);
	
КонецПроцедуры // ВидОперацииПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита Контрагент.
// В процедуре устанавливаются реквизиты формы, относящиеся к контрагенту.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.ВалютаДокумента, Объект.ВидОперации);
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		Объект.Договор = СтруктураДанные.Договор;
		Договор = Объект.Договор;
	Иначе
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
	КонецЕсли;
	
	Объект.СчетКонтрагента 	= СтруктураДанные.СчетКонтрагента;
	Объект.ИННПолучателя	= СтруктураДанные.ИННПолучателя;
	Объект.КПППолучателя	= СтруктураДанные.КПППолучателя;
	ЗаполнитьТекстПолучателя(СтруктураДанные);
	
	НазначениеПлатежа 		= СтруктураДанные.НазначениеПлатежа;
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СчетКонтрагента.
// В процедуре устанавливаются реквизиты формы, относящиеся к счету контрагента.
//
&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСчетКонтрагентаПриИзменении(Объект.Контрагент, Объект.СчетКонтрагента, Объект.ВидОперации);
	
	Объект.КПППолучателя = СтруктураДанные.КПППолучателя;
	ЗаполнитьТекстПолучателя(СтруктураДанные);
	
	НазначениеПлатежа = СтруктураДанные.НазначениеПлатежа;
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита КПППлательщика.
//
&НаКлиенте
Процедура КПППлательщикаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация)
	И НЕ ЗначениеЗаполнено(Объект.КПППлательщика)
	И Строка(Объект.ВидОперации) = "Перечисление в бюджет"
	И ЭтоФизЛицо Тогда
		Объект.КПППлательщика = 0;
	КонецЕсли;

КонецПроцедуры // КПППлательщикаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СуммаДокумента.
// В процедуре формируется реквизит НазначениеПлатежа.
//
&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
	
	Объект.СуммаНДС = Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДС + 100) / 100);
	
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СтавкаНДС.
// В процедуре расчитывается сумма НДС и формируется реквизит НазначениеПлатежа.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСтавкаНДСПриИзменении(Объект.СтавкаНДС);
	
	СтавкаНДС = СтруктураДанные.Ставка;
	БезНалогаНДС = СтруктураДанные.НеОблагается;
	
	Объект.СуммаНДС = Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДС + 100) / 100);
	
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СуммаНДС.
// В процедуре формируется реквизит НазначениеПлатежа.
//
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СуммаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ВидПеречисленияВБюджет.
//
&НаКлиенте
Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	
	НастроитьСписокВыбора(
		Элементы.ПоказательОснования,
		УправлениеНебольшойФирмойКлиентСервер.ОснованияПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
	);
	
	НастроитьСписокВыбора(
		Элементы.ПоказательТипа,
		УправлениеНебольшойФирмойКлиентСервер.ТипыПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
	);
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(ЭтаФорма);
	УстановитьЗаголовокГруппыБюджет(ЭтотОбъект);
	
КонецПроцедуры // ВидПеречисленияВБюджетПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СтатусСоставителя.
//
&НаКлиенте
Процедура СтатусСоставителяПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.СтатусСоставителя)) Тогда
		Объект.СтатусСоставителя = "01";
	КонецЕсли;
		
КонецПроцедуры // СтатусСоставителяПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательОснования.
//
&НаКлиенте
Процедура ПоказательОснованияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательОснования)) Тогда
		Объект.ПоказательОснования = "0";
	КонецЕсли;

КонецПроцедуры // ПоказательОснованияПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательТипа.
//
&НаКлиенте
Процедура ПоказательТипаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательТипа)) Тогда
		Объект.ПоказательТипа = "0";
	КонецЕсли;
	
КонецПроцедуры // ПоказательТипаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательПериодаТаможенныйПлатеж.
//
&НаКлиенте
Процедура ПоказательПериодаТаможенныйПлатежПриИзменении(Элемент)
	
	Если Объект.ВидПеречисленияВБюджет <> ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж")
	   И НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательПериода)) Тогда
		Объект.ПоказательПериода = "0";
	КонецЕсли;
	
КонецПроцедуры // ПоказательПериодаТаможенныйПлатежПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательПериодаИнойПлатеж.
//
&НаКлиенте
Процедура ПоказательПериодаИнойПлатежПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательПериода)) Тогда
		Объект.ПоказательПериода = "0";
	КонецЕсли;

КонецПроцедуры // ПоказательПериодаИнойПлатежПриИзменении()

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.БанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		СформироватьНазначениеПлатежа();
		
		НастроитьСписокВыбора(
			Элементы.ПоказательОснования,
			УправлениеНебольшойФирмойКлиентСервер.ОснованияПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
		);
		
		НастроитьСписокВыбора(
			Элементы.ПоказательТипа,
			УправлениеНебольшойФирмойКлиентСервер.ТипыПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
		);
		
		ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
		УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(ЭтаФорма);
		
		УстановитьЗаголовокГруппыБюджет(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодБКПриИзменении(Элемент)
	КодБК = ПлатежиВБюджетКлиентСервер.ОставитьВСтрокеТолькоЦифры(Объект.КодБК);
	Объект.КодБК = КодБК;
	УстановитьЗаголовокГруппыБюджет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппыБюджет(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.ВидПеречисленияВБюджет) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Вид перечисления'") + " " + Объект.ВидПеречисленияВБюджет);
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='Вид перечисления ...'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.КодОКАТО) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКТМО'") + " " + Объект.КодОКАТО);
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКТМО ...'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.КодБК) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='КБК'") + " " + Объект.КодБК);
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='КБК ...'"));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "РеквизитыДляПеречисленияНалога", ДинамическиеПараметры);
	
КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ВерсияПлатформыБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
		Если ВерсияПлатформыБезНомераСборки = "8.3.5" Тогда
			Форма.Элементы[НазваниеГруппы].СвернутыйЗаголовок = ЗаголовокТекст;
		Иначе
			Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
		КонецЕсли;
	#Иначе
		Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	#КонецЕсли
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСписокВыбора(Элемент, СписокДанных, РедактированиеОграничено = Ложь, Предупреждение = "")
	
	Элемент.СписокВыбора.Очистить();
	
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.КнопкаОчистки       = Ложь;
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормуС2014Года()
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата)
	    ИЛИ Объект.Дата >= '20140101' Тогда // ОКТМО действует в любом случае с 01.01.2014
		Элементы.КодОКАТО.Заголовок = "Код ОКТМО";
		Элементы.КодОКАТО.Подсказка = "Код ОКТМО - территории (населенного пункта), на которой мобилизуются средства";
	Иначе
		Элементы.КодОКАТО.Заголовок = "Код ОКАТО";
		Элементы.КодОКАТО.Подсказка = "Код ОКАТО сборщика платежей";
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.Дата) И Объект.Дата >= УправлениеНебольшойФирмойКлиентСервер.НачалоПримененияИдентификатораПлатежа())
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.Дата) И ТекущаяДата() >= УправлениеНебольшойФирмойКлиентСервер.НачалоПримененияИдентификатораПлатежа()) Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = "";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = НСтр("ru = 'До 31.03.2014 идентификатор платежа используется только для платежей в бюджет'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		
		Элементы.ИдентификаторПлатежа.Заголовок = "УИП";
	Иначе
		Элементы.ИдентификаторПлатежа.Заголовок = "УИН";
	КонецЕсли;
	
	НастроитьСписокВыбора(
		Элементы.СтатусСоставителя,
		УправлениеНебольшойФирмойКлиентСервер.СтатусыПлательщика(Объект.Дата));
	
	НастроитьСписокВыбора(
		Элементы.ПоказательОснования,
		УправлениеНебольшойФирмойКлиентСервер.ОснованияПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата));
		
	НастроитьСписокВыбора(
		Элементы.ПоказательТипа,
		УправлениеНебольшойФирмойКлиентСервер.ТипыПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормуС2015Года()
	
	Если ДатаДокумента >= '20150101'
		ИЛИ Объект.Дата >= '20150101' Тогда // Приказ Минфина №126н от 30.10.2014.
		Элементы.ПоказательТипа.Видимость = Ложь;
		Объект.ПоказательТипа = "";
	Иначе
		Элементы.ПоказательТипа.Видимость = Истина;
		Объект.ПоказательТипа = "0";
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет текст плательщика.
//
Процедура ЗаполнитьТекстПлательщика(СтруктураДанные)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
		И ЗначениеЗаполнено(СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		
		Объект.ТекстПлательщика = СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов;
		
	ИначеЕсли ПустаяСтрока(СтруктураДанные.ТекстКорреспондента) Тогда
		
		Объект.ТекстПлательщика = СтруктураДанные.НаименованиеПолное;
		Если ЗначениеЗаполнено(СтруктураДанные.ТекстБанкДляРасчетов) Тогда
			Объект.ТекстПлательщика = Объект.ТекстПлательщика + СтруктураДанные.ТекстБанкДляРасчетов;
		КонецЕсли;
		
	Иначе
		
		Объект.ТекстПлательщика = СтруктураДанные.ТекстКорреспондента;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстПлательщика()

// Процедура заполняет текст получателя.
//
Процедура ЗаполнитьТекстПолучателя(СтруктураДанные)
	
	Если ПустаяСтрока(СтруктураДанные.ТекстКорреспондента) Тогда
		
		Объект.ТекстПолучателя = СтруктураДанные.НаименованиеПолное;
		Если ЗначениеЗаполнено(СтруктураДанные.ТекстБанкДляРасчетов) Тогда
			Объект.ТекстПолучателя = Объект.ТекстПолучателя + СтруктураДанные.ТекстБанкДляРасчетов;
		КонецЕсли;
		
	Иначе
		
		Объект.ТекстПолучателя = СтруктураДанные.ТекстКорреспондента;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстПолучателя()

// Функция заполняет текст банка для расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьТекстБанкДляРасчетов(БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет.БанкРасчетов) Тогда
		ТекстБанкДляРасчетов =
			" р/с "
			+ БанковскийСчет.НомерСчета
			+ " в "
			+ БанковскийСчет.Банк
			+ " "
			+ БанковскийСчет.Банк.Город
	Иначе
		ТекстБанкДляРасчетов = "";
	КонецЕсли;
	
	Возврат ТекстБанкДляРасчетов;
	
КонецФункции // ЗаполнитьТекстБанкДляРасчетов()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	ВидОперации = Объект.ВидОперации;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		СтруктураДанные = ПолучитьДанныеДокументОснованиеПриИзменении(Объект.ДокументОснование);
		НомерВходящегоДокумента = СтруктураДанные.НомерВходящегоДокумента;
		ДатаВходящегоДокумента = СтруктураДанные.ДатаВходящегоДокумента;
	Иначе
		НомерВходящегоДокумента = "";
		ДатаВходящегоДокумента = '00010101';
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура вызывает процедуру заполнения документа по основанию.
// и устанавливает доступность реквизитов после заполнения
//
&НаКлиенте
Процедура ЗаполнитьПоДокументуИУстановитьДоступность()
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоДокументуИУстановитьДоступностьЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет очищен и заполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуИУстановитьДоступностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
        УстановитьВидимостьДоступность();
        УстановитьДоступностьРеквизитовПеречисленияНалогов();
	Иначе
		УстановитьВидимостьДоговора();
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоДокументуИУстановитьДоступность()

// Процедура выполняет необходимые действия формирования текста назначения
// платежа.
//
&НаКлиенте
Процедура СформироватьНазначениеПлатежа(ИзменениеСуммы = Ложь)
	ЭтоПеречислениеВБюджет = Объект.ВидОперации =  ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога");
	Если ИзменениеСуммы Тогда
		ПозицияСуммы = СтрНайти(Объект.НазначениеПлатежа, "Сумма ");
		Если ПозицияСуммы = 0
		   И ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
			ТекстНазначение = Объект.НазначениеПлатежа;
		Иначе
			ТекстНазначение = Лев(Объект.НазначениеПлатежа, ПозицияСуммы - 1);
		КонецЕсли;
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекстНазначение) Тогда
			ТекстНазначение = НазначениеПлатежа;
		КонецЕсли;
	Иначе
		Если ЭтоПеречислениеВБюджет И ЗначениеЗаполнено(Объект.Налог) Тогда
			ЗаполнитьРеквизитыПоНалогу();
			ТекстНазначение = Объект.НазначениеПлатежа;
		Иначе
			Если ПустаяСтрока(НазначениеПлатежа)
				И ЗначениеЗаполнено(Объект.ДокументОснование)
				И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
				И ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
				НазначениеПлатежа = НСтр("ru='Оплата по счету N %НомерСчета%'");
				НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "%НомерСчета%", СокрЛП(Строка(НомерВходящегоДокумента)));
				Если ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
					НазначениеПлатежа = НазначениеПлатежа + " от " + СокрЛП(Строка(Формат(ДатаВходящегоДокумента, "ДФ='dd MMMM yyyy'"))) + " г.";
				КонецЕсли;
			КонецЕсли;
			ТекстНазначение = НазначениеПлатежа;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСумма = Строка(Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	
	ТекстНДС = "";
	
	Если ЗначениеЗаполнено(Объект.СтавкаНДС)
	И НЕ БезНалогаНДС
	И НЕ ЭтоПеречислениеВБюджет Тогда
		ТекстНДС = НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'");
		ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", Строка(Объект.СтавкаНДС));
		ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%", Строка(Формат(Объект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СуммаНДС)
	И НЕ ЗначениеЗаполнено(Объект.СтавкаНДС)
	И НЕ ЭтоПеречислениеВБюджет Тогда
		ТекстНДС = НСтр("ru = 'НДС %СуммаНДС%'");
		ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%", Строка(Формат(Объект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")));
	КонецЕсли;
	
	ТекстНазначениеПлатежа = НСтр(
		"ru = '%ТекстНазначение% %ТекстСумма%
		|%ЗначениеСтавкиНДС% %ТекстНДС%'");
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстНазначение%", ТекстНазначение);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа,
	"%ТекстСумма%", "
	|Сумма "+ТекстСумма);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ЗначениеСтавкиНДС%", ?(БезНалогаНДС ИЛИ (НЕ ЗначениеЗаполнено(Объект.СуммаНДС) И НЕ ЗначениеЗаполнено(Объект.СтавкаНДС)), НСтр("ru = 'Без налога (НДС)'"), НСтр("ru = 'В т.ч.'")));
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстНДС%", ТекстНДС);
	
	Объект.НазначениеПлатежа = СокрЛП(ТекстНазначениеПлатежа);
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	УправлениеНебольшойФирмойКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		Объект.НазначениеПлатежа,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	);
	
КонецПроцедуры // СформироватьНазначениеПлатежа()

// Процедура выполняет необходимые действия по формированию реквизита
// ПоказательПериода.
//
&НаКлиенте
Процедура УстановитьПоказательПериода()
	
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		Объект.ПоказательПериода = "";
	ИначеЕсли ПериодичностьУплаты = "0" Тогда
		Объект.ПоказательПериода = "0";
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
		Объект.ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
	Иначе
		Объект.ПоказательПериода = Лев(ПериодичностьУплаты, 2)
								 + "."
								 + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=")
								 + "."
								 + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
	КонецЕсли;
	
КонецПроцедуры // УстановитьПоказательПериода()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументОснованиеПриИзменении(ДокументОснование)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ДатаВходящегоДокумента",  ДокументОснование.ДатаВходящегоДокумента);
	СтруктураДанные.Вставить("НомерВходящегоДокумента", ДокументОснование.НомерВходящегоДокумента);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументОснованиеПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация, БанковскийСчет, Контрагент, СчетКонтрагента, ВидОперации, Период)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Компания", 				УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	СтруктураДанные.Вставить("НаименованиеПолное",		Организация.НаименованиеПолное);
	СтруктураДанные.Вставить("НаименованиеПлательщикаПриПеречисленииНалогов", Организация.НаименованиеПлательщикаПриПеречисленииНалогов);
	Если Период >= '20140101' Тогда // ОКТМО действует в любом случае с 01.01.2014
		СтруктураДанные.Вставить("КодОКАТО", 			Организация.КодПоОКТМО);
	Иначе
		СтруктураДанные.Вставить("КодОКАТО", 			Организация.КодПоОКАТО);
	КонецЕсли;
	
	//  Банковский счет организации
	ЗначениеДляСтруктуры	= ?(БанковскийСчет.Владелец = Организация, БанковскийСчет, Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчет", 			ЗначениеДляСтруктуры);
	НеобходимостУказанияКПППлательщика = ПолучитьНеобходимостьУказанияКПП(ЗначениеДляСтруктуры, ВидОперации);
	
	//  Валюта документа
	ЗначениеДляСтруктуры	= ?(ЗначениеЗаполнено(ЗначениеДляСтруктуры), ЗначениеДляСтруктуры.ВалютаДенежныхСредств, Константы.НациональнаяВалюта.Получить());
	СтруктураДанные.Вставить("ВалютаДокумента", 		ЗначениеДляСтруктуры);
	
	//  Банковский счет контрагента
	ЗначениеДляСтруктуры	= ?(ЗначениеЗаполнено(СчетКонтрагента) И ЗначениеДляСтруктуры = СчетКонтрагента.ВалютаДенежныхСредств, СчетКонтрагента, Справочники.БанковскиеСчета.ПустаяСсылка());
	СтруктураДанные.Вставить("СчетКонтрагента", 		ЗначениеДляСтруктуры);
	НеобходимостУказанияКПППолучателя = ПолучитьНеобходимостьУказанияКПП(ЗначениеДляСтруктуры, ВидОперации);
	
	СтруктураДанные.Вставить("ТекстКорреспондента", 	Организация.БанковскийСчетПоУмолчанию.ТекстКорреспондента);
	СтруктураДанные.Вставить("ИННПлательщика", 			Организация.ИНН);
	СтруктураДанные.Вставить("КПППлательщика", 			?(НеобходимостУказанияКПППлательщика, Организация.КПП, ""));
	СтруктураДанные.Вставить("ЭтоФизЛицо", 				Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	СтруктураДанные.Вставить("КПППолучателя",			?(НеобходимостУказанияКПППолучателя, Контрагент.КПП, ""));
	
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов", ПолучитьТекстБанкДляРасчетов(СтруктураДанные.БанковскийСчет));
	
	ОбновитьВидимостьИОстаткиДС(СтруктураДанные.БанковскийСчет);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры СчетОрганизацииПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеСчетОрганизацииПриИзменении(Организация, СчетОрганизации, ВалютаПередИзменением, Дата, ВидОперации)
	
	НеобходимостУказанияКПП = ПолучитьНеобходимостьУказанияКПП(СчетОрганизации, ВидОперации);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ТекстКорреспондента", СчетОрганизации.ТекстКорреспондента);
	СтруктураДанные.Вставить("НаименованиеПолное", ?(ЗначениеЗаполнено(СчетОрганизации), СчетОрганизации.Владелец.НаименованиеПолное, ""));
	СтруктураДанные.Вставить("НаименованиеПлательщикаПриПеречисленииНалогов", ?(ЗначениеЗаполнено(СчетОрганизации), СчетОрганизации.Владелец.НаименованиеПлательщикаПриПеречисленииНалогов, ""));
	СтруктураДанные.Вставить("ВалютаДенежныхСредств", СчетОрганизации.ВалютаДенежныхСредств);
	СтруктураДанные.Вставить("КПППлательщика", ?(НеобходимостУказанияКПП, Организация.КПП, ""));
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", СчетОрганизации.ВалютаДенежныхСредств)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратностьПередИзменением",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ВалютаПередИзменением)
		)
	);
	
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов", ПолучитьТекстБанкДляРасчетов(СчетОрганизации));
	
	ОбновитьВидимостьИОстаткиДС(СчетОрганизации);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСчетОрганизацииПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
		
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", РазностьДат);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает необходимоть указания КПП.
//
&НаСервереБезКонтекста
Функция ПолучитьНеобходимостьУказанияКПП(СчетКонтрагента, ВидОперации)
	
	Если ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		Если СчетКонтрагента.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях Тогда
			НеобходимостУказанияКПП = Истина;
		Иначе
			НеобходимостУказанияКПП = Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
		НеобходимостУказанияКПП = Истина;
	Иначе
		НеобходимостУказанияКПП = Ложь;
	КонецЕсли;
	
	Возврат НеобходимостУказанияКПП;

КонецФункции // ПолучитьНеобходимостьУказанияКПП()

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, ВалютаДокумента, ВидОперации)
	
	СчетКонтрагента = ?(
		Контрагент.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = ВалютаДокумента,
		Контрагент.БанковскийСчетПоУмолчанию,
		Справочники.БанковскиеСчета.ПустаяСсылка()
	);
	
	НеобходимостУказанияКПП = ПолучитьНеобходимостьУказанияКПП(СчетКонтрагента, ВидОперации);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НаименованиеПолное", 	Контрагент.НаименованиеПолное);
	СтруктураДанные.Вставить("СчетКонтрагента", 	СчетКонтрагента);
	СтруктураДанные.Вставить("ИННПолучателя", 		Контрагент.ИНН);
	СтруктураДанные.Вставить("КПППолучателя", 		?(НеобходимостУказанияКПП, Контрагент.КПП, ""));
	СтруктураДанные.Вставить("НазначениеПлатежа",	Контрагент.БанковскийСчетПоУмолчанию.ТекстНазначения);
	СтруктураДанные.Вставить("ТекстКорреспондента",	Контрагент.БанковскийСчетПоУмолчанию.ТекстКорреспондента);
	
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов",  ПолучитьТекстБанкДляРасчетов(СчетКонтрагента));
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Объект.Организация);
	СтруктураДанные.Вставить("Договор", ДоговорПоУмолчанию);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	УстановитьВидимостьДоговора();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетКонтрагентаПриИзменении(Контрагент, СчетКонтрагента, ВидОперации)
	
	НеобходимостУказанияКПП = ПолучитьНеобходимостьУказанияКПП(СчетКонтрагента, ВидОперации);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НазначениеПлатежа", СчетКонтрагента.ТекстНазначения);
	СтруктураДанные.Вставить("ТекстКорреспондента", СчетКонтрагента.ТекстКорреспондента);
	СтруктураДанные.Вставить("КПППолучателя", ?(НеобходимостУказанияКПП, Контрагент.КПП, ""));
	Если ЗначениеЗаполнено(СчетКонтрагента.Владелец) Тогда
		СтруктураДанные.Вставить("НаименованиеПолное", СчетКонтрагента.Владелец.НаименованиеПолное);
	Иначе
		СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.НаименованиеПолное);
	КонецЕсли;
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов",  ПолучитьТекстБанкДляРасчетов(СчетКонтрагента));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСчетКонтрагентаПриИзменении()

// Получает набор данных с сервера для процедуры СтавкаНДСПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСтавкаНДСПриИзменении(СтавкаНДС)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("НеОблагается", СтавкаНДС.НеОблагается);
	СтруктураДанные.Вставить("Ставка", СтавкаНДС.Ставка);	
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтавкаНДСПриИзменении()

// Заполняет реквизиты платежа в бюджет по умолчанию.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию()
	
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		Объект.СтатусСоставителя = "01";
		Объект.ПоказательОснования = Элементы.ПоказательОснования.СписокВыбора[0].Значение;
		Объект.ПоказательПериода   = "МС." + Формат(Месяц(Объект.Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Объект.Дата), "ЧГ=");
		ПериодичностьУплаты = "МС";
		ГодПлатежа = Год(Объект.Дата);
		ПериодПлатежа = Месяц(Объект.Дата);
		Объект.ПоказательНомера = "";
		Объект.ПоказательДаты = "";
	ИначеЕсли Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		Объект.СтатусСоставителя   = "06";
		Объект.ПоказательОснования = Элементы.ПоказательОснования.СписокВыбора[0].Значение;
		Объект.ПоказательПериода   = "";
		Объект.ПоказательНомера    = "";
		Объект.ПоказательДаты = "";
		ПериодичностьУплаты = "0";
		ГодПлатежа = 0;
	Иначе
		Объект.СтатусСоставителя   = "08";
		Объект.ПоказательОснования = "0";
		Объект.ПоказательПериода   = "0";
		Объект.ПоказательНомера    = "";
		Объект.ПоказательДаты = "";
		ПериодичностьУплаты = "0";
		ГодПлатежа = 0;
	КонецЕсли;
	
	Если ДатаДокумента >= '20150101'
	 ИЛИ Объект.Дата >= '20150101' Тогда // Приказ Минфина №126н от 30.10.2014.
		Объект.ПоказательТипа = "";
	Иначе
		Объект.ПоказательТипа = "0";
	КонецЕсли;
	
	УстановитьПоказательПериода();
	УстановитьДоступностьРеквизитовПеречисленияНалогов();
	
КонецПроцедуры // ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию()

// Устанавливает текущую страницу в зависимости от вида перечисления в бюджет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(Форма)
	Элементы =  Форма.Элементы;
	Элементы.НалоговыйПлатеж.Видимость = Ложь;
	Элементы.ТаможенныйПлатеж.Видимость = Ложь;
	Элементы.ИнойПлатеж.Видимость = Ложь;
	
	Если Форма.Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		Элементы.НалоговыйПлатеж.Видимость = Истина;
	ИначеЕсли Форма.Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		Элементы.ТаможенныйПлатеж.Видимость = Истина;
	Иначе
		Элементы.ИнойПлатеж.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущуюСтраницуВЗависимостиОтВидаПеречисленияВБюджет()

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);

	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
		возврат;
	КонецЕсли;
	
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
	Элементы.Контрагент.МаксимальнаяШирина = 22;
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиДС(БанковскийСчет = Неопределено)
	
	Если БанковскийСчет = Неопределено Тогда
		ТекущийБанковскийСчет = Объект.БанковскийСчет;
	Иначе
		ТекущийБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ТекущийБанковскийСчет);

	Если НЕ Элементы.ОстатокДенежныхСредств.Видимость Тогда
		Элементы.СчетОрганизации.АвтоМаксимальнаяШирина = Истина;
		//Только для новых объектов
		возврат;
	КонецЕсли;
	
	Элементы.СчетОрганизации.АвтоМаксимальнаяШирина = Ложь;
	Элементы.СчетОрганизации.МаксимальнаяШирина = 22;
	Элементы.ОстатокДенежныхСредств.Заголовок = ДвиженияДенежныхСредствВызовСервера.ЗаголовокНадписиОстатковДС(ТекущийБанковскийСчет, Объект.Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНалогаПоКБК(Знач КодБК)
	
	Возврат Справочники.ВидыНалогов.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоНалогу()
	Перем ВидНалога;
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Период = Объект.Дата;
	Иначе
		Период = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	КонецЕсли;
	
	ПоказателиНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПоказателиНалоговогоПериода(Объект.Организация, ВидНалога, Период);
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		Объект.НазначениеПлатежа = Справочники.ВидыНалогов.НазначениеПлатежа(
			Объект.Налог,,
			Объект.Организация,
			Макс(ПоказателиНалоговогоПериода.Период, Период),
			ПоказателиНалоговогоПериода.ПредставлениеНалоговогоПериода);
		
		Объект.КодБК = Справочники.ВидыНалогов.КБК(
			Объект.Налог,,
			Макс(ПоказателиНалоговогоПериода.Период, Период));
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСервер.ВидГосударственногоОргана(Объект.КодБК) = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
	ИначеЕсли ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяТаможеннымиОрганами(Объект.КодБК) Тогда
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
	Иначе
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура устанавливает доступность реквизитов перечисления налогов.
//
&НаКлиенте
Процедура УстановитьДоступностьРеквизитовПеречисленияНалогов()
	
	Если ПериодичностьУплаты = "0" Тогда
		Элементы.ГодПериод.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость = Ложь;
	Иначе
		Если ПериодичностьУплаты = "-" Тогда
			Элементы.ГодПериод.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость = Истина;
		Иначе
			Элементы.ГодПериод.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость = Ложь;
			Элементы.ПериодПлатежа.Видимость = ПериодичностьУплаты <> "ГД";
			Если ПериодичностьУплаты = "МС" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
				Элементы.ПериодПлатежа.Заголовок = "Месяц";
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
				Элементы.ПериодПлатежа.Заголовок = "Квартал";
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
				Элементы.ПериодПлатежа.Заголовок = "Полугодие";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьРеквизитовПеречисленияНалогов()

// Процедура устанавливает доступность реквизитов формы, в зависимости от вида 
// операции.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.РеквизитыДляПеречисленияНалога.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога");
	Элементы.Налог.Видимость     = Элементы.РеквизитыДляПеречисленияНалога.Видимость;
	Элементы.СтавкаНДС.Видимость = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога");
	Элементы.СуммаНДС.Видимость  = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога");
	
КонецПроцедуры // УстановитьДоступность()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтотОбъект);

КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВКлиентБанкаТекущийДокумент(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Сначала запишите документ.");
		Возврат;
	КонецЕсли;
	
	СписокВыгрузки = Новый СписокЗначений;
	СписокВыгрузки.Добавить(Объект.Ссылка);
	ПараметрыОткрытия = Новый Структура("СписокПлатежек, БанковскийСчет", СписокВыгрузки, Объект.БанковскийСчет);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.СохранениеПлатежек", ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторКБК(Команда)
	ОткрытьФорму("Справочник.ВидыНалогов.Форма.КонструкторКБК", Новый Структура("КБК, ВидПеречисления", Объект.КодБК, ПлатежиВБюджетКлиентСервер.ВидПеречисления(Объект.КодБК, ТекущаяДата())), Элементы.КодБК);
КонецПроцедуры

#КонецОбласти

#Область Основание

&НаСервереБезКонтекста
Функция ПолучитьСписокДляВыбораДокументаОснования()
	
	СписокОснований = Новый СписокЗначений;
	
	СписокОснований.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", "Заказ поставщику");
	СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", "Начисление налогов");
	СписокОснований.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", "Счет на оплату (полученный)");
	Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
		СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", "Заявка на расход денег");
	КонецЕсли;
	
	СписокОснований.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокОснований;
	
КонецФункции

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
		
		НомерВходящегоДокумента = "";
		ДатаВходящегоДокумента = '00010101';
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		//Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, ПолучитьСписокДляВыбораДокументаОснования(), Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого элОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(элОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, элОтбора.Значение);
		КонецЦикла;
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДокументуИУстановитьДоступностьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

#КонецОбласти
